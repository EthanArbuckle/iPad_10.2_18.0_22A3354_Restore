unint64_t WebCore::convertDictionaryToJS(WebCore *a1, JSC::JSGlobalObject *a2, uint64_t *a3)
{
  WebCore *v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  int v10;
  const WebCore::ApplePayPaymentContact *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WebCore *v34;
  _DWORD *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  size_t v43;
  unint64_t v44;
  int v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  int v51;
  _DWORD *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  int v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  int v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  unsigned __int8 *v90;
  unsigned int v91;
  unsigned __int8 *v92;
  unsigned int v93;
  unsigned __int8 *v94;
  unsigned int v95;
  unsigned __int8 *v96;
  unsigned int v97;
  unsigned __int8 *v98;
  unsigned int v99;
  unsigned __int8 *v100;
  unsigned int v101;
  unsigned __int8 *v102;
  unsigned int v103;
  unsigned __int8 *v104;
  unsigned int v105;
  unsigned __int8 *v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  _DWORD *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  unint64_t v122;
  int v123;
  int v124;
  uint64_t v125;

  v5 = a1;
  v6 = *((_QWORD *)a1 + 7);
  v7 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v8 = 8 * *(unsigned __int8 *)(v7 + 14);
  v9 = JSC::allocateCell<JSC::JSFinalObject>(v6, v8 + 16);
  v10 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)v9 = v7 >> 4;
  *(_DWORD *)(v9 + 4) = v10;
  *(_QWORD *)(v9 + 8) = 0;
  bzero((void *)(v9 + 16), v8);
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  if (*((_BYTE *)a3 + 216))
  {
    WebCore::ApplePayPaymentContact::ApplePayPaymentContact((uint64_t)&v121, (const WebCore::ApplePayPaymentContact *)(a3 + 9));
    WebCore::convertDictionaryToJS(v5, a2, (WebCore::JSDOMGlobalObject *)&v121, v11);
    v13 = v12;
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)&v121, v14);
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v15 = v121;
    v121 = 0;
    v122 = v9;
    v123 = -1;
    v124 = 0x1000000;
    v125 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v15, v13, 0, (uint64_t)&v121);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  v17 = a3[28];
  if (!v17)
    goto LABEL_18;
  v18 = *((_QWORD *)v5 + 7);
  v19 = *(_DWORD *)(v17 + 4);
  if (v19)
  {
    if (v19 != 1)
    {
LABEL_11:
      v20 = *(_QWORD *)(v18 + 64760);
      if (!v20 || v17 != *(_QWORD *)(v20 + 8))
        v20 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_14;
    }
    v90 = *(unsigned __int8 **)(v17 + 8);
    if ((*(_BYTE *)(v17 + 16) & 4) != 0)
    {
      v91 = *v90;
    }
    else
    {
      v108 = *(unsigned __int16 *)v90;
      if (v108 > 0xFF)
        goto LABEL_11;
      v91 = v108;
    }
    v20 = *(_QWORD *)(v18 + 8 * v91 + 42216);
  }
  else
  {
    v20 = *(_QWORD *)(v18 + 41968);
  }
LABEL_14:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v21 = v121;
  v121 = 0;
  v122 = v9;
  v123 = -1;
  v124 = 0x1000000;
  v125 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v21, v20, 0, (uint64_t)&v121);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v22);
    else
      *(_DWORD *)v21 -= 2;
  }
LABEL_18:
  v23 = *a3;
  if (!*a3)
    goto LABEL_28;
  v24 = *((_QWORD *)v5 + 7);
  v25 = *(_DWORD *)(v23 + 4);
  if (v25)
  {
    if (v25 != 1)
    {
LABEL_21:
      v26 = *(_QWORD *)(v24 + 64760);
      if (!v26 || v23 != *(_QWORD *)(v26 + 8))
        v26 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_24;
    }
    v92 = *(unsigned __int8 **)(v23 + 8);
    if ((*(_BYTE *)(v23 + 16) & 4) != 0)
    {
      v93 = *v92;
    }
    else
    {
      v109 = *(unsigned __int16 *)v92;
      if (v109 > 0xFF)
        goto LABEL_21;
      v93 = v109;
    }
    v26 = *(_QWORD *)(v24 + 8 * v93 + 42216);
  }
  else
  {
    v26 = *(_QWORD *)(v24 + 41968);
  }
LABEL_24:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v27 = v121;
  v121 = 0;
  v122 = v9;
  v123 = -1;
  v124 = 0x1000000;
  v125 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v27, v26, 0, (uint64_t)&v121);
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v28);
    else
      *(_DWORD *)v27 -= 2;
  }
LABEL_28:
  v29 = a3[1];
  if (!v29)
    goto LABEL_38;
  v30 = *((_QWORD *)v5 + 7);
  v31 = *(_DWORD *)(v29 + 4);
  if (v31)
  {
    if (v31 != 1)
    {
LABEL_31:
      v32 = *(_QWORD *)(v30 + 64760);
      if (!v32 || v29 != *(_QWORD *)(v32 + 8))
        v32 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_34;
    }
    v94 = *(unsigned __int8 **)(v29 + 8);
    if ((*(_BYTE *)(v29 + 16) & 4) != 0)
    {
      v95 = *v94;
    }
    else
    {
      v110 = *(unsigned __int16 *)v94;
      if (v110 > 0xFF)
        goto LABEL_31;
      v95 = v110;
    }
    v32 = *(_QWORD *)(v30 + 8 * v95 + 42216);
  }
  else
  {
    v32 = *(_QWORD *)(v30 + 41968);
  }
LABEL_34:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v33 = v121;
  v121 = 0;
  v122 = v9;
  v123 = -1;
  v124 = 0x1000000;
  v125 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v33, v32, 0, (uint64_t)&v121);
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v29);
    else
      *(_DWORD *)v33 -= 2;
  }
LABEL_38:
  if (!*((_BYTE *)a3 + 64))
    goto LABEL_120;
  v34 = v5;
  v35 = (_DWORD *)a3[3];
  if (v35)
    *v35 += 2;
  v36 = (WTF::StringImpl *)a3[4];
  if (v36)
    *(_DWORD *)v36 += 2;
  v117 = v35;
  v37 = (WTF::StringImpl *)a3[5];
  if (v37)
    *(_DWORD *)v37 += 2;
  v120 = v37;
  v118 = v36;
  v38 = v6;
  v39 = (WTF::StringImpl *)a3[6];
  if (v39)
    *(_DWORD *)v39 += 2;
  v119 = v39;
  v40 = *((int *)a3 + 14);
  v41 = *((_QWORD *)v34 + 7);
  v42 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v43 = 8 * *(unsigned __int8 *)(v42 + 14);
  v44 = JSC::allocateCell<JSC::JSFinalObject>(v41, v43 + 16);
  v45 = *(_DWORD *)(v42 + 8);
  *(_DWORD *)v44 = v42 >> 4;
  *(_DWORD *)(v44 + 4) = v45;
  *(_QWORD *)(v44 + 8) = 0;
  bzero((void *)(v44 + 16), v43);
  if (*(_BYTE *)(v41 + 755))
    __dmb(0xAu);
  v47 = *((_QWORD *)v34 + 7);
  v48 = (uint64_t *)(v47 + 41968);
  if ((byte_1EE3374E2 & 1) == 0)
  {
    dword_1ECE7AED0 += 2;
    byte_1EE3374E2 = 1;
    dword_1ECE7AEF0 += 2;
    qword_1EE337698 = (uint64_t)&dword_1ECE7AED0;
    unk_1EE3376A0 = &dword_1ECE7AEF0;
    dword_1ECE7AF10 += 2;
    dword_1ECE7AF30 += 2;
    qword_1EE3376A8 = (uint64_t)&dword_1ECE7AF10;
    unk_1EE3376B0 = &dword_1ECE7AF30;
    dword_1ECE7AF50 += 2;
    qword_1EE3376B8 = (uint64_t)&dword_1ECE7AF50;
  }
  v49 = *(_QWORD *)&_MergedGlobals_204[8 * v40 + 448];
  if (!v49)
  {
    v53 = *v48;
    v6 = v38;
    v52 = v117;
    v5 = v34;
    goto LABEL_59;
  }
  v50 = *(_DWORD *)v49;
  v51 = *(_DWORD *)(v49 + 4);
  *(_DWORD *)v49 += 2;
  v6 = v38;
  if (v51)
  {
    v52 = v117;
    v5 = v34;
    if (v51 != 1)
    {
LABEL_54:
      v53 = *(_QWORD *)(v47 + 64760);
      if (!v53 || v49 != *(_QWORD *)(v53 + 8))
      {
        v53 = JSC::jsStringWithCacheSlowCase();
        v50 = *(_DWORD *)v49 - 2;
      }
      goto LABEL_57;
    }
    v96 = *(unsigned __int8 **)(v49 + 8);
    if ((*(_BYTE *)(v49 + 16) & 4) != 0)
    {
      v97 = *v96;
    }
    else
    {
      v111 = *(unsigned __int16 *)v96;
      if (v111 > 0xFF)
        goto LABEL_54;
      v97 = v111;
    }
    v53 = *(_QWORD *)(v47 + 8 * v97 + 42216);
  }
  else
  {
    v53 = *v48;
    v52 = v117;
    v5 = v34;
  }
LABEL_57:
  if (v50)
    *(_DWORD *)v49 = v50;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v49, v46);
LABEL_59:
  if (*(_DWORD *)(v41 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v41) & 1) != 0)
    goto LABEL_231;
  WTF::AtomStringImpl::addLiteral();
  v54 = v121;
  v121 = 0;
  v122 = v44;
  v123 = -1;
  v124 = 0x1000000;
  v125 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v44, (JSC::VM *)v41, (unint64_t)v54, v53, 0, (uint64_t)&v121);
  if (!v54)
  {
LABEL_63:
    if (!v120)
      goto LABEL_73;
    goto LABEL_64;
  }
  if (*(_DWORD *)v54 != 2)
  {
    *(_DWORD *)v54 -= 2;
    goto LABEL_63;
  }
  WTF::StringImpl::destroy(v54, v55);
  if (!v120)
    goto LABEL_73;
LABEL_64:
  v56 = *((_QWORD *)v5 + 7);
  v57 = *((_DWORD *)v120 + 1);
  if (v57)
  {
    if (v57 != 1)
    {
LABEL_66:
      v58 = *(_QWORD *)(v56 + 64760);
      if (!v58 || v120 != *(WTF::StringImpl **)(v58 + 8))
        v58 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_69;
    }
    v104 = (unsigned __int8 *)*((_QWORD *)v120 + 1);
    if ((*((_BYTE *)v120 + 16) & 4) != 0)
    {
      v105 = *v104;
    }
    else
    {
      v115 = *(unsigned __int16 *)v104;
      if (v115 > 0xFF)
        goto LABEL_66;
      v105 = v115;
    }
    v58 = *(_QWORD *)(v56 + 8 * v105 + 42216);
  }
  else
  {
    v58 = *(_QWORD *)(v56 + 41968);
  }
LABEL_69:
  if (*(_DWORD *)(v41 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v41) & 1) != 0)
    goto LABEL_231;
  WTF::AtomStringImpl::addLiteral();
  v59 = v121;
  v121 = 0;
  v122 = v44;
  v123 = -1;
  v124 = 0x1000000;
  v125 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v44, (JSC::VM *)v41, (unint64_t)v59, v58, 0, (uint64_t)&v121);
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, v60);
    else
      *(_DWORD *)v59 -= 2;
  }
LABEL_73:
  if (!v119)
    goto LABEL_83;
  v61 = *((_QWORD *)v5 + 7);
  v62 = v119;
  v63 = *((_DWORD *)v119 + 1);
  if (!v63)
  {
    v64 = *(_QWORD *)(v61 + 41968);
    goto LABEL_79;
  }
  if (v63 == 1)
  {
    v106 = (unsigned __int8 *)*((_QWORD *)v119 + 1);
    if ((*((_BYTE *)v119 + 16) & 4) != 0)
    {
      v107 = *v106;
    }
    else
    {
      v116 = *(unsigned __int16 *)v106;
      if (v116 > 0xFF)
        goto LABEL_76;
      v107 = v116;
    }
    v64 = *(_QWORD *)(v61 + 8 * v107 + 42216);
    goto LABEL_79;
  }
LABEL_76:
  v64 = *(_QWORD *)(v61 + 64760);
  if (!v64 || v119 != *(WTF::StringImpl **)(v64 + 8))
    v64 = JSC::jsStringWithCacheSlowCase();
LABEL_79:
  if (!*(_DWORD *)(v41 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v41) & 1) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v65 = v121;
    v121 = 0;
    v122 = v44;
    v123 = -1;
    v124 = 0x1000000;
    v125 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v44, (JSC::VM *)v41, (unint64_t)v65, v64, 0, (uint64_t)&v121);
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
        WTF::StringImpl::destroy(v65, v66);
      else
        *(_DWORD *)v65 -= 2;
    }
LABEL_83:
    v67 = *((_QWORD *)v5 + 7);
    if (!v52 || (v68 = v52[1]) == 0)
    {
      v69 = *(_QWORD *)(v67 + 41968);
      goto LABEL_89;
    }
    if (v68 != 1)
    {
LABEL_86:
      v69 = *(_QWORD *)(v67 + 64760);
      if (!v69 || v52 != *(_DWORD **)(v69 + 8))
        v69 = JSC::jsStringWithCacheSlowCase();
LABEL_89:
      if (*(_DWORD *)(v41 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v41) & 1) != 0)
      {
LABEL_231:
        v44 = 0;
        goto LABEL_232;
      }
      WTF::AtomStringImpl::addLiteral();
      v70 = v121;
      v121 = 0;
      v122 = v44;
      v123 = -1;
      v124 = 0x1000000;
      v125 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v44, (JSC::VM *)v41, (unint64_t)v70, v69, 0, (uint64_t)&v121);
      if (v70)
      {
        if (*(_DWORD *)v70 == 2)
          WTF::StringImpl::destroy(v70, v71);
        else
          *(_DWORD *)v70 -= 2;
      }
      v72 = *((_QWORD *)v5 + 7);
      v73 = v118;
      if (v118 && (v74 = *((_DWORD *)v118 + 1)) != 0)
      {
        if (v74 != 1)
        {
LABEL_96:
          v75 = *(_QWORD *)(v72 + 64760);
          if (!v75 || v118 != *(WTF::StringImpl **)(v75 + 8))
            v75 = JSC::jsStringWithCacheSlowCase();
          goto LABEL_99;
        }
        v102 = (unsigned __int8 *)*((_QWORD *)v118 + 1);
        if ((*((_BYTE *)v118 + 16) & 4) != 0)
        {
          v103 = *v102;
        }
        else
        {
          v114 = *(unsigned __int16 *)v102;
          if (v114 > 0xFF)
            goto LABEL_96;
          v103 = v114;
        }
        v75 = *(_QWORD *)(v72 + 8 * v103 + 42216);
      }
      else
      {
        v75 = *(_QWORD *)(v72 + 41968);
      }
LABEL_99:
      if (*(_DWORD *)(v41 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v41) & 1) != 0)
      {
        v44 = 0;
LABEL_233:
        v78 = v120;
        goto LABEL_104;
      }
      WTF::AtomStringImpl::addLiteral();
      v76 = v121;
      v121 = 0;
      v122 = v44;
      v123 = -1;
      v124 = 0x1000000;
      v125 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v44, (JSC::VM *)v41, (unint64_t)v76, v75, 0, (uint64_t)&v121);
      if (v76)
      {
        v78 = v120;
        if (*(_DWORD *)v76 == 2)
        {
          WTF::StringImpl::destroy(v76, v77);
          v78 = v120;
        }
        else
        {
          *(_DWORD *)v76 -= 2;
        }
        v73 = v118;
LABEL_104:
        v62 = v119;
        if (!v119)
          goto LABEL_107;
        goto LABEL_105;
      }
LABEL_232:
      v73 = v118;
      goto LABEL_233;
    }
    v100 = (unsigned __int8 *)*((_QWORD *)v52 + 1);
    if ((v52[4] & 4) != 0)
    {
      v101 = *v100;
    }
    else
    {
      v113 = *(unsigned __int16 *)v100;
      if (v113 > 0xFF)
        goto LABEL_86;
      v101 = v113;
    }
    v69 = *(_QWORD *)(v67 + 8 * v101 + 42216);
    goto LABEL_89;
  }
  v44 = 0;
  v73 = v118;
  v78 = v120;
LABEL_105:
  if (*(_DWORD *)v62 == 2)
  {
    WTF::StringImpl::destroy(v62, v77);
    v78 = v120;
    if (!v120)
      goto LABEL_110;
    goto LABEL_108;
  }
  *(_DWORD *)v62 -= 2;
LABEL_107:
  if (!v78)
    goto LABEL_110;
LABEL_108:
  if (*(_DWORD *)v78 == 2)
    WTF::StringImpl::destroy(v78, v77);
  else
    *(_DWORD *)v78 -= 2;
LABEL_110:
  if (!v73)
    goto LABEL_113;
  if (*(_DWORD *)v73 != 2)
  {
    *(_DWORD *)v73 -= 2;
LABEL_113:
    if (v52)
      goto LABEL_114;
    goto LABEL_116;
  }
  WTF::StringImpl::destroy(v73, v77);
  if (v52)
  {
LABEL_114:
    if (*v52 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v52, v77);
    else
      *v52 -= 2;
  }
LABEL_116:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v79 = v121;
  v121 = 0;
  v122 = v9;
  v123 = -1;
  v124 = 0x1000000;
  v125 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v79, v44, 0, (uint64_t)&v121);
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
      WTF::StringImpl::destroy(v79, (WTF::StringImpl *)v29);
    else
      *(_DWORD *)v79 -= 2;
  }
LABEL_120:
  if (!*((_BYTE *)a3 + 20))
    return v9;
  v80 = *((int *)a3 + 4);
  v81 = *((_QWORD *)v5 + 7);
  v82 = (uint64_t *)(v81 + 41968);
  if ((byte_1EE3374E1 & 1) == 0)
  {
    dword_1ECE7AE50 += 2;
    byte_1EE3374E1 = 1;
    dword_1ECE7AE70 += 2;
    qword_1EE3375E8 = (uint64_t)&dword_1ECE7AE50;
    unk_1EE3375F0 = &dword_1ECE7AE70;
    dword_1ECE7AE90 += 2;
    dword_1ECE7AEB0 += 2;
    qword_1EE3375F8 = (uint64_t)&dword_1ECE7AE90;
    unk_1EE337600 = &dword_1ECE7AEB0;
  }
  v83 = *(_QWORD *)&_MergedGlobals_204[8 * v80 + 272];
  if (v83)
  {
    v84 = *(_DWORD *)v83;
    v85 = *(_DWORD *)(v83 + 4);
    *(_DWORD *)v83 += 2;
    if (v85)
    {
      if (v85 != 1)
      {
LABEL_126:
        v86 = *(_QWORD *)(v81 + 64760);
        if (!v86 || v83 != *(_QWORD *)(v86 + 8))
        {
          v86 = JSC::jsStringWithCacheSlowCase();
          v84 = *(_DWORD *)v83 - 2;
        }
        goto LABEL_129;
      }
      v98 = *(unsigned __int8 **)(v83 + 8);
      if ((*(_BYTE *)(v83 + 16) & 4) != 0)
      {
        v99 = *v98;
      }
      else
      {
        v112 = *(unsigned __int16 *)v98;
        if (v112 > 0xFF)
          goto LABEL_126;
        v99 = v112;
      }
      v86 = *(_QWORD *)(v81 + 8 * v99 + 42216);
    }
    else
    {
      v86 = *v82;
    }
LABEL_129:
    if (v84)
      *(_DWORD *)v83 = v84;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v83, (WTF::StringImpl *)v29);
    goto LABEL_131;
  }
  v86 = *v82;
LABEL_131:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v87 = v121;
  v121 = 0;
  v122 = v9;
  v123 = -1;
  v124 = 0x1000000;
  v125 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v87, v86, 0, (uint64_t)&v121);
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
      WTF::StringImpl::destroy(v87, v88);
    else
      *(_DWORD *)v87 -= 2;
  }
  return v9;
}

uint64_t WebCore::JSApplePayPaymentMethodSelectedEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSApplePayPaymentMethodSelectedEvent::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  result = JSC::JSObject::visitChildren();
  v5 = *(_QWORD *)(a1 + 32);
  if ((v5 & 0xFFFE000000000002) == 0 && v5 != 0)
  {
    if ((v5 & 8) != 0)
    {
      if ((*(_BYTE *)(v5 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      v7 = v5 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v9 = v5 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
        v5 = v8;
        v7 = v9;
      }
      if (((*(_QWORD *)(v7 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (*(_QWORD *)(a2 + 168))
      return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WebCore::JSApplePayPaymentMethodSelectedEvent::visitChildren(WebCore::JSApplePayPaymentMethodSelectedEvent *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    result = JSC::JSObject::visitChildren();
    if ((*((_QWORD *)this + 4) & 0xFFFE000000000002) == 0)
      result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSApplePayPaymentMethodSelectedEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSApplePayPaymentMethodSelectedEventPrototype::create(WebCore::JSApplePayPaymentMethodSelectedEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSApplePayPaymentMethodSelectedEvent::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSApplePayPaymentMethodSelectedEventPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::jsApplePayPaymentMethodSelectedEvent_paymentMethod(WebCore *a1, uint64_t a2)
{
  unint64_t v2;
  JSC::VM *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 32);
  if (!v2)
  {
    v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v2 = WebCore::convertDictionaryToJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), (uint64_t *)(*(_QWORD *)(a2 + 24) + 72));
    if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    {
      return 0;
    }
    else
    {
      v6 = *((_QWORD *)a1 + 7);
      *(_QWORD *)(a2 + 32) = v2;
      if ((v2 & 0xFFFE000000000002) == 0 && v2 && *(_DWORD *)(v6 + 760) >= *(unsigned __int8 *)(a2 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v6 + 192), (const JSCell *)a2);
    }
  }
  return v2;
}

uint64_t WebCore::JSApplePayPaymentMethodSelectedEvent::subspaceForImpl(WebCore::JSApplePayPaymentMethodSelectedEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 416);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 416))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 40, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 416);
    *(_QWORD *)(v8 + 416) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 416);
  *(_QWORD *)(v3 + 416) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::parseEnumeration<WebCore::ApplePayPaymentMethodType>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  const char *v5;
  int v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v11;
  BOOL v12;
  char **v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v20;
  unint64_t v21;

  v3 = a1;
  v21 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
        return 0;
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v21, a1);
  v4 = v20;
  if (!v20)
    return 0;
LABEL_7:
  v5 = *(const char **)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 4);
  v7 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
  if (v5 != "credit" && v6 == 6)
  {
    if ((_DWORD)v7)
    {
      if (*v5 != 99 || *(_DWORD *)(v5 + 1) != 1768187250 || *(_DWORD *)(v5 + 2) != 1953064037)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v5 != 99)
        goto LABEL_16;
      v15 = *(_QWORD *)(v5 + 2);
      v16 = *(_QWORD *)(v5 + 4);
      if (v15 != 0x69006400650072 || v16 != 0x74006900640065)
        goto LABEL_16;
    }
LABEL_48:
    v13 = &WebCore::parseEnumerationFromString<WebCore::ApplePayPaymentMethodType>(WTF::String const&)::mappings;
    goto LABEL_49;
  }
  if (v5 == "credit" && v6 == 6)
    goto LABEL_48;
  v11 = v7 << 32;
  v12 = v6 != 5;
  if (v5 == "debit" || v6 != 5)
  {
    if (v5 == "debit" && v6 == 5)
      goto LABEL_27;
    if (v5 == "prepaid" || v6 != 7)
    {
      v14 = *(_DWORD *)(v4 + 4);
      if (v5 == "prepaid" && v6 == 7)
        goto LABEL_78;
    }
    else
    {
      if ((_DWORD)v7)
      {
        if (*v5 != 112 || *(_DWORD *)(v5 + 1) != 1634755954 || *(_DWORD *)(v5 + 3) != 1684627824)
          goto LABEL_31;
        goto LABEL_78;
      }
      if (*(_WORD *)v5 != 112)
      {
LABEL_57:
        v14 = 7;
        goto LABEL_32;
      }
      v14 = 7;
      if (*(_QWORD *)(v5 + 2) == 0x61007000650072 && *(_QWORD *)(v5 + 6) == 0x64006900610070)
      {
LABEL_78:
        v13 = &off_1E3349360;
        goto LABEL_49;
      }
    }
LABEL_32:
    if (v5 == "store" || v12)
    {
      if (v6 == 5 && v5 == "store")
        goto LABEL_39;
    }
    else
    {
      if (!v14)
      {
LABEL_39:
        v13 = &off_1E3349378;
        goto LABEL_49;
      }
      if (v11)
      {
        if (*v5 == 115 && *(_WORD *)(v5 + 1) == 28532 && *(_WORD *)(v5 + 3) == 25970)
          goto LABEL_39;
      }
      else if (*(_WORD *)v5 == 115 && *(_QWORD *)(v5 + 2) == 0x650072006F0074)
      {
        goto LABEL_39;
      }
    }
LABEL_16:
    v9 = 0;
    goto LABEL_50;
  }
  if (!(_DWORD)v7)
  {
    if (*(_WORD *)v5 == 100 && *(_QWORD *)(v5 + 2) == 0x74006900620065)
      goto LABEL_27;
    v12 = 0;
    goto LABEL_57;
  }
  if (*v5 != 100 || *(_WORD *)(v5 + 1) != 25189 || *(_WORD *)(v5 + 3) != 29801)
  {
    v12 = 0;
LABEL_31:
    v14 = 7;
    v11 = 0x100000000;
    goto LABEL_32;
  }
LABEL_27:
  v13 = &off_1E3349348;
LABEL_49:
  v9 = *((unsigned int *)v13 + 4) | 0x100000000;
LABEL_50:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v9;
}

uint64_t WebCore::convertDictionary<WebCore::ApplePayPaymentOrderDetails>(uint64_t a1, JSC::VM **a2, JSC::JSCell *this)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t result;
  JSC::VM *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  JSC::VM *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  JSC::VM *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  JSC::VM *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  WTF::StringImpl *v43;
  int v44;
  WTF::StringImpl *v45;
  int v46;
  WTF::StringImpl *v47;
  int v48;
  WTF::StringImpl *v49;
  int v50;
  JSC::VM *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;

  v51 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_9;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    goto LABEL_10;
  }
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v49);
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v7);
    else
      *(_DWORD *)v49 -= 2;
  }
  if (*((_DWORD *)v51 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v51);
    if ((_DWORD)result)
      goto LABEL_10;
  }
  if (v8 == 10)
  {
LABEL_9:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v51, "authenticationToken", 20, "ApplePayPaymentOrderDetails", 28, "DOMString", 10);
LABEL_10:
    *(_DWORD *)(a1 + 32) = 1;
    return result;
  }
  v47 = (WTF::StringImpl *)v8;
  v10 = a2[7];
  if ((v8 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v8 + 5) == 2)
  {
    v11 = *(WTF::StringImpl **)(v8 + 8);
    if ((v11 & 1) != 0)
    {
      v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a2);
      if (!v11)
        goto LABEL_16;
    }
    else if (!v11)
    {
LABEL_16:
      v45 = v11;
      goto LABEL_17;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_16;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v47, (JSC::JSGlobalObject *)a2);
LABEL_17:
  if (!*((_DWORD *)v10 + 20))
  {
    v12 = v45;
    goto LABEL_19;
  }
  v12 = v45;
  if (!JSC::VM::hasExceptionsAfterHandlingTraps(v10))
  {
LABEL_19:
    v50 = 0;
    v49 = 0;
    WTF::AtomStringImpl::addLiteral();
    v13 = v47;
    v15 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v47);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v14);
      else
        *(_DWORD *)v13 -= 2;
    }
    if (*((_DWORD *)v51 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v51))
      goto LABEL_25;
    if (v15 == 10)
    {
      WebCore::throwRequiredMemberTypeError((int)a2, (int)&v51, "orderIdentifier", 16, "ApplePayPaymentOrderDetails", 28, "DOMString", 10);
LABEL_25:
      v16 = 0;
      v17 = 0;
      v18 = 0;
      *(_DWORD *)(a1 + 32) = 1;
      goto LABEL_69;
    }
    v45 = (WTF::StringImpl *)v15;
    v19 = a2[7];
    if ((v15 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v15 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v45, (JSC::JSGlobalObject *)a2);
LABEL_32:
      if (*((_DWORD *)v19 + 20))
      {
        v17 = v43;
        if (JSC::VM::hasExceptionsAfterHandlingTraps(v19))
        {
          v24 = 1;
          v48 = 1;
          v43 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v38);
            else
              *(_DWORD *)v17 -= 2;
          }
          v17 = 0;
          v18 = 0;
          *(_DWORD *)(a1 + 32) = 1;
          goto LABEL_68;
        }
      }
      else
      {
        v17 = v43;
      }
      v48 = 0;
      v47 = 0;
      WTF::AtomStringImpl::addLiteral();
      v21 = v45;
      v23 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v45);
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v22);
        else
          *(_DWORD *)v21 -= 2;
      }
      if (*((_DWORD *)v51 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v51))
        goto LABEL_40;
      if (v23 == 10)
      {
        WebCore::throwRequiredMemberTypeError((int)a2, (int)&v51, "orderTypeIdentifier", 20, "ApplePayPaymentOrderDetails", 28, "DOMString", 10);
LABEL_40:
        v24 = 0;
        v18 = 0;
        *(_DWORD *)(a1 + 32) = 1;
LABEL_68:
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v24])(&v45, &v47);
        v16 = 0;
        goto LABEL_69;
      }
      v43 = (WTF::StringImpl *)v23;
      v25 = a2[7];
      if ((v23 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v23 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v43, (JSC::JSGlobalObject *)a2);
LABEL_47:
        if (*((_DWORD *)v25 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v25);
          v18 = v53;
          if (hasExceptionsAfterHandlingTraps)
          {
            v30 = 1;
            v46 = 1;
            v53 = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, v40);
              else
                *(_DWORD *)v18 -= 2;
            }
            v18 = 0;
            *(_DWORD *)(a1 + 32) = 1;
            goto LABEL_67;
          }
        }
        else
        {
          v18 = v53;
        }
        v46 = 0;
        v45 = 0;
        WTF::AtomStringImpl::addLiteral();
        v27 = v43;
        v29 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v43);
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v28);
          else
            *(_DWORD *)v27 -= 2;
        }
        if (*((_DWORD *)v51 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v51))
          goto LABEL_55;
        if (v29 == 10)
        {
          WebCore::throwRequiredMemberTypeError((int)a2, (int)&v51, "webServiceURL", 14, "ApplePayPaymentOrderDetails", 28, "DOMString", 10);
LABEL_55:
          v30 = 0;
          *(_DWORD *)(a1 + 32) = 1;
LABEL_67:
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v30])(&v43, &v45);
          v24 = 0;
          goto LABEL_68;
        }
        v53 = (WTF::StringImpl *)v29;
        v31 = a2[7];
        if ((v29 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v29 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v53, (JSC::JSGlobalObject *)a2);
LABEL_63:
          if (*((_DWORD *)v31 + 20))
          {
            v42 = JSC::VM::hasExceptionsAfterHandlingTraps(v31);
            v33 = v52;
            if (v42)
            {
              v44 = 1;
              v52 = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                  WTF::StringImpl::destroy(v33, v41);
                else
                  *(_DWORD *)v33 -= 2;
              }
              v34 = 1;
              v35 = 1;
              goto LABEL_66;
            }
          }
          else
          {
            v33 = v52;
          }
          v34 = 0;
          v35 = 0;
          v44 = 0;
          v43 = 0;
          *(_QWORD *)a1 = v18;
          *(_QWORD *)(a1 + 8) = v17;
          *(_QWORD *)(a1 + 16) = v33;
          *(_QWORD *)(a1 + 24) = v12;
          v12 = 0;
          v17 = 0;
          v18 = 0;
LABEL_66:
          *(_DWORD *)(a1 + 32) = v35;
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v34])(&v53, &v43);
          v30 = 0;
          goto LABEL_67;
        }
        v32 = *(WTF::StringImpl **)(v29 + 8);
        if ((v32 & 1) != 0)
        {
          v32 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v29, (JSC::JSGlobalObject *)a2);
          if (!v32)
            goto LABEL_62;
        }
        else if (!v32)
        {
LABEL_62:
          v52 = v32;
          goto LABEL_63;
        }
        *(_DWORD *)v32 += 2;
        goto LABEL_62;
      }
      v26 = *(WTF::StringImpl **)(v23 + 8);
      if ((v26 & 1) != 0)
      {
        v26 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v23, (JSC::JSGlobalObject *)a2);
        if (!v26)
          goto LABEL_46;
      }
      else if (!v26)
      {
LABEL_46:
        v53 = v26;
        goto LABEL_47;
      }
      *(_DWORD *)v26 += 2;
      goto LABEL_46;
    }
    v20 = *(WTF::StringImpl **)(v15 + 8);
    if ((v20 & 1) != 0)
    {
      v20 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v15, (JSC::JSGlobalObject *)a2);
      if (!v20)
        goto LABEL_31;
    }
    else if (!v20)
    {
LABEL_31:
      v43 = v20;
      goto LABEL_32;
    }
    *(_DWORD *)v20 += 2;
    goto LABEL_31;
  }
  v16 = 1;
  v50 = 1;
  v45 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v37);
    else
      *(_DWORD *)v12 -= 2;
  }
  v12 = 0;
  v17 = 0;
  v18 = 0;
  *(_DWORD *)(a1 + 32) = 1;
LABEL_69:
  result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v16])(&v47, &v49);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      result = WTF::StringImpl::destroy(v12, v36);
      if (!v17)
        goto LABEL_75;
      goto LABEL_73;
    }
    *(_DWORD *)v12 -= 2;
  }
  if (!v17)
    goto LABEL_75;
LABEL_73:
  if (*(_DWORD *)v17 == 2)
    result = WTF::StringImpl::destroy(v17, v36);
  else
    *(_DWORD *)v17 -= 2;
LABEL_75:
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      return WTF::StringImpl::destroy(v18, v36);
    else
      *(_DWORD *)v18 -= 2;
  }
  return result;
}

void WebCore::convertDictionary<WebCore::ApplePayPaymentRequest>(uint64_t a1, JSC::VM **a2, JSC::JSCell *this)
{
  uint64_t v3;
  unint64_t v6;
  JSC::Structure *Object;
  WTF::StringImpl *v8;
  unint64_t v9;
  unsigned __int16 v10;
  void *v11;
  uint64_t v12;
  JSC::VM *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  JSC::JSCell *v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  __int128 v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  JSC::VM *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  JSC::VM *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF *v48;
  int v49;
  WTF *v50;
  int v51;
  WTF::StringImpl *v52;
  int v53;
  char v54;
  int v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  JSC::JSCell *v58;
  unsigned int v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  __int128 v62;
  WTF::StringImpl *v63;
  unsigned int v64;
  unsigned int v65;
  WTF::StringImpl *v66;
  unsigned int v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  void *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  JSC::VM *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  JSC::VM *v86;
  uint64_t v87;
  void *v88;
  WTF::StringImpl *v89;
  int v90;
  WTF *v91;
  int v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  int v95;
  char v96;
  int v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  int v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  uint64_t v103;
  JSC::VM *v104;
  uint64_t v105;
  void *v106;
  WTF *v107;
  int v108;
  WTF *v109;
  int v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  int v113;
  char v114;
  int v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  JSC::JSCell *v118;
  unsigned int v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  __int128 v122;
  WTF::StringImpl *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  WTF::StringImpl *v127;
  unint64_t v128;
  unsigned int v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  unint64_t v132;
  WTF::StringImpl *v133;
  unsigned __int16 v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  int v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF *v142;
  int v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  uint64_t v148;
  int v149;
  int v150;
  WTF::StringImpl *v151;
  uint64_t v152;
  WTF *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  unint64_t v156;
  JSC::VM *v157;
  double v158;
  __int16 v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  JSC::JSCell *v162;
  unsigned int v163;
  WTF::StringImpl *v164;
  __int128 v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  WTF::StringImpl *v169;
  WTF::StringImpl **v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  unsigned int v173;
  WTF::StringImpl *v174;
  uint64_t v175;
  JSC::VM *v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  JSC::JSCell *v182;
  unsigned int v183;
  WTF::StringImpl *v184;
  __int128 v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  WTF::StringImpl *v191;
  WTF::StringImpl **v192;
  WTF::StringImpl *v193;
  uint64_t v194;
  char v195;
  int hasExceptionsAfterHandlingTraps;
  unsigned int v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  JSC::JSCell *v200;
  int v201;
  int v202;
  WTF *v203;
  int v204;
  char v205;
  WTF *v206;
  WTF *v207;
  WTF *v208;
  int v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  uint64_t v212;
  WTF::StringImpl **v213;
  WTF::StringImpl *v214;
  int v215;
  WTF::StringImpl *v216;
  int v217;
  WTF::StringImpl *v218;
  unsigned int v219;
  unsigned int v220;
  uint64_t v221;
  WTF::StringImpl **v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  WTF::StringImpl *v225;
  WTF::StringImpl *v226;
  int v227;
  WTF *v228;
  WTF::StringImpl *v229;
  WTF::StringImpl *v230;
  WTF::StringImpl *v231;
  uint64_t v232;
  JSC::VM *v233;
  WebCore::ApplePayPaymentTokenContext *v234;
  int v235;
  WTF *v236;
  int v237;
  unsigned int v238;
  WTF *v239;
  uint64_t v240;
  uint64_t v241;
  WTF *v242;
  int v243;
  WTF::StringImpl *v244;
  WTF *v245;
  WTF::StringImpl *v246;
  WTF::StringImpl *v247;
  JSC::JSCell *v248;
  unsigned int v249;
  __int128 v250;
  unint64_t v251;
  __int128 v252;
  uint64_t v253;
  __int128 v254;
  uint64_t v255;
  WTF::StringImpl *v256;
  unsigned int v257;
  WTF::StringImpl *v258;
  WTF::StringImpl *v259;
  uint64_t v260;
  int v261;
  WTF *v262;
  int v263;
  unsigned int v264;
  int v265;
  WTF *v266;
  WTF::StringImpl *v267;
  uint64_t v268;
  char v269;
  WTF::StringImpl **v270;
  WTF::StringImpl *v271;
  const char *v272;
  int v273;
  unint64_t v274;
  BOOL v275;
  int v276;
  uint64_t v277;
  char **v278;
  WTF::StringImpl *v279;
  char v280;
  uint64_t v281;
  int v282;
  WTF::StringImpl *v283;
  WTF::StringImpl *v284;
  JSC::JSCell *v285;
  uint64_t v286;
  WTF::StringImpl *v287;
  WTF::StringImpl *v288;
  WTF::StringImpl *v289;
  __int16 v290;
  WTF::StringImpl *v291;
  WTF::StringImpl *v292;
  WTF::StringImpl *v293;
  int v294;
  WTF *v295;
  WTF *v296;
  int v298;
  uint16x8_t v299;
  uint16x8_t v300;
  uint16x8_t v301;
  uint16x8_t v302;
  uint64_t v303;
  uint64_t v304;
  BOOL v305;
  int v306;
  uint64_t v307;
  int *v308;
  int v309;
  int v310;
  WTF::StringImpl *v311[6];
  __int128 v312;
  WTF::StringImpl *v313;
  unint64_t v314;
  WTF::StringImpl *v315;
  _QWORD v316[9];
  __int16 v317;
  char v318;
  __int128 v319;
  uint64_t v320;
  JSC::VM *v321;
  int v322;
  WTF::StringImpl *v323;
  uint64_t v324;
  int v325;
  WTF::StringImpl *v326[2];
  int v327;
  uint64_t v328;
  int v329;
  WTF *v330;
  int v331;
  int v332;
  char v333;
  __int128 v334;
  _BYTE v335[32];
  int v336;
  int v337;
  char v338;
  WTF::StringImpl *v339[2];
  __int128 v340;
  __int128 v341;
  __int128 v342;
  WTF::StringImpl *v343;
  unint64_t v344;
  char v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  __int128 v349;
  __int128 v350;
  char v351;
  WTF *v352;
  int v353;
  int v354;
  char v355;
  WTF::StringImpl *v356[2];
  __int128 v357;
  __int128 v358;
  __int128 v359;
  WTF::StringImpl *v360;
  unint64_t v361;
  char v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  __int128 v366;
  __int128 v367;
  char v368;
  WTF::StringImpl *v369;
  __int128 v370;
  char v371[8];
  WTF::StringImpl *v372;
  WTF::StringImpl *v373;
  WTF::StringImpl *v374;
  WTF::StringImpl *v375;
  char v376;
  __int128 v377;
  WTF::StringImpl *v378;
  unsigned int v379;
  unsigned int v380;
  WTF::StringImpl *v381;
  char v382;
  char v383;
  __int16 v384;
  WTF::StringImpl *v385;
  int v386;
  __int128 v387;
  char v388;
  WTF *v389;
  int v390;
  unsigned int v391;
  unsigned __int8 v392;
  char v393;
  WTF::StringImpl *v394;
  WTF::StringImpl *v395;
  __int128 v396;
  __int128 v397;
  uint64_t v398;
  WTF::StringImpl *v399;
  __int16 v400;
  WTF *v401;
  unint64_t v402;
  char v403;
  _BYTE v404[208];
  WTF::StringImpl *v405;
  char v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  WTF::StringImpl *v410;
  unint64_t v411;
  __int16 v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  char v416;
  WTF *v417;
  int v418;
  unsigned int v419;
  char v420;
  WTF::StringImpl *v421;
  char v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  WTF::StringImpl *v426;
  unint64_t v427;
  __int16 v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  char v434;
  WTF *v435;
  int v436;
  int v437;
  unsigned __int8 v438;
  char v439;
  JSC::VM *v440[2];
  WTF::StringImpl **v441;
  WTF::StringImpl *v442[8];
  WTF::StringImpl *v443;
  unint64_t v444;
  WTF::StringImpl *v445;
  _QWORD v446[7];
  uint64_t v447;
  uint64_t v448;
  __int16 v449;
  char v450;
  __int128 v451;
  uint64_t v452;
  unsigned int v453;
  uint64_t v454;

  v454 = *MEMORY[0x1E0C80C00];
  v440[0] = a2[7];
  v6 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
    goto LABEL_5;
  }
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::Structure *)JSC::JSCell::getObject(this);
    if (Object)
    {
LABEL_5:
      LOBYTE(v330) = 0;
      v333 = 0;
      v338 = 0;
      LOBYTE(v339[0]) = 0;
      v351 = 0;
      LOBYTE(v352) = 0;
      v355 = 0;
      LOBYTE(v356[0]) = 0;
      v368 = 0;
      v383 = 0;
      v384 = 0;
      v334 = 0u;
      memset(v335, 0, 25);
      v370 = 0u;
      v369 = 0;
      v371[0] = 0;
      v385 = 0;
      v386 = 0;
      LOBYTE(v389) = 0;
      v392 = 0;
      v387 = 0u;
      v388 = 0;
      v393 = 1;
      v394 = 0;
      v395 = 0;
      LOBYTE(v396) = 0;
      *((_QWORD *)&v396 + 1) = 0x7FF8000000000000;
      LOBYTE(v397) = 1;
      DWORD1(v397) = 1;
      *((_QWORD *)&v397 + 1) = 0x7FF8000000000000;
      v398 = 0x7FF8000000000000;
      v399 = 0;
      v400 = 0;
      LOBYTE(v401) = 0;
      v403 = 0;
      v404[0] = 0;
      v404[200] = 0;
      LOBYTE(v405) = 0;
      v416 = 0;
      LOBYTE(v417) = 0;
      v420 = 0;
      LOBYTE(v421) = 0;
      v434 = 0;
      LOBYTE(v435) = 0;
      v439 = 0;
      if (v6 == 2)
      {
LABEL_54:
        WebCore::throwRequiredMemberTypeError((int)a2, (int)v440, "countryCode", 12, "ApplePayPaymentRequest", 23, "DOMString", 10);
        *(_DWORD *)(a1 + 1248) = 1;
LABEL_55:
        WebCore::ApplePayPaymentRequest::~ApplePayPaymentRequest((WebCore::ApplePayPaymentRequest *)&v330, v11);
        return;
      }
      WTF::AtomStringImpl::addLiteral();
      v9 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
      if (v442[0])
      {
        if (*(_DWORD *)v442[0] == 2)
          WTF::StringImpl::destroy(v442[0], v8);
        else
          *(_DWORD *)v442[0] -= 2;
      }
      if (*((_DWORD *)v440[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]))
        goto LABEL_397;
      if (v9 != 10)
      {
        v442[0] = a2[7];
        v10 = WebCore::parseEnumeration<WebCore::ApplePayLaterAvailability>((JSC::JSGlobalObject *)a2, v9);
        if (*((_DWORD *)v442[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v442[0]) & 1) != 0)
          goto LABEL_397;
        if (v10 <= 0xFFu)
        {
          JSC::throwTypeError();
LABEL_397:
          *(_DWORD *)(a1 + 1248) = 1;
          goto LABEL_55;
        }
        HIWORD(v386) = v10 | 0x100;
      }
      WTF::AtomStringImpl::addLiteral();
      v12 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
      if (v442[0])
      {
        if (*(_DWORD *)v442[0] == 2)
          WTF::StringImpl::destroy(v442[0], (WTF::StringImpl *)v11);
        else
          *(_DWORD *)v442[0] -= 2;
      }
      if (*((_DWORD *)v440[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]))
        goto LABEL_397;
      if (v12 == 10)
      {
LABEL_32:
        WTF::AtomStringImpl::addLiteral();
        v17 = v442[0];
        v19 = (JSC::JSCell *)JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v18);
          else
            *(_DWORD *)v17 -= 2;
        }
        if (*((_DWORD *)v440[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]))
          goto LABEL_397;
        if (v19 != (JSC::JSCell *)10)
        {
          WebCore::convertDictionary<WebCore::ApplePayPaymentContact>((uint64_t)v442, (JSC::JSGlobalObject *)a2, v19);
          v20 = v447;
          if ((_DWORD)v447)
          {
            *(_DWORD *)(a1 + 1248) = 1;
            v30 = v20;
          }
          else
          {
            v21 = v442[0];
            v22 = v442[1];
            v311[0] = v442[0];
            v311[1] = v442[1];
            v23 = *(_OWORD *)&v442[2];
            memset(v442, 0, sizeof(v442));
            *(_OWORD *)&v311[2] = v23;
            *(_OWORD *)&v311[4] = *(_OWORD *)&v442[4];
            v312 = *(_OWORD *)&v442[6];
            LOBYTE(v313) = 0;
            LOBYTE(v315) = 0;
            if ((_BYTE)v445)
            {
              v24 = v443;
              v443 = 0;
              v313 = v24;
              v25 = v444;
              v444 = 0;
              v314 = v25;
              LOBYTE(v315) = 1;
            }
            v26 = v446[0];
            v27 = v446[1];
            memset(v446, 0, sizeof(v446));
            v316[0] = v26;
            *(_OWORD *)&v316[1] = __PAIR128__(v446[2], v27);
            v28 = (WTF::StringImpl *)v446[2];
            *(_OWORD *)&v316[3] = *(_OWORD *)&v446[3];
            *(_OWORD *)&v316[5] = *(_OWORD *)&v446[5];
            if (v351)
            {
              WebCore::ApplePayPaymentContact::operator=(v339, v311);
            }
            else
            {
              v339[0] = v21;
              v339[1] = v22;
              memset(v311, 0, sizeof(v311));
              v340 = v23;
              v341 = *(_OWORD *)&v442[4];
              v312 = 0uLL;
              v342 = *(_OWORD *)&v442[6];
              LOBYTE(v343) = 0;
              v345 = 0;
              if ((_BYTE)v445)
              {
                v343 = v313;
                v29 = v314;
                v313 = 0;
                v314 = 0;
                v344 = v29;
                v345 = 1;
              }
              memset(v316, 0, 56);
              v346 = v26;
              v347 = v27;
              v348 = v446[2];
              v349 = *(_OWORD *)&v446[3];
              v350 = *(_OWORD *)&v446[5];
              v351 = 1;
            }
            WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)v311, v28);
            v30 = v447;
          }
          if (v30 != -1)
            (*(&off_1E334B280 + v30))((int)v311, (WebCore::ApplePayPaymentContact *)v442);
          if (v20)
            goto LABEL_55;
        }
        WTF::AtomStringImpl::addLiteral();
        v31 = v442[0];
        v32 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)v31 -= 2;
        }
        if (*((_DWORD *)v440[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]))
          goto LABEL_397;
        if (v32 == 10)
          goto LABEL_54;
        v442[0] = (WTF::StringImpl *)v32;
        v33 = a2[7];
        if ((v32 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v32 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v442, (JSC::JSGlobalObject *)a2);
LABEL_62:
          if (*((_DWORD *)v33 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v33);
            v35 = v311[0];
            if (hasExceptionsAfterHandlingTraps)
            {
              v149 = 1;
              v329 = 1;
              v311[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v11);
                else
                  *(_DWORD *)v35 -= 2;
              }
              *(_DWORD *)(a1 + 1248) = 1;
              goto LABEL_302;
            }
          }
          else
          {
            v35 = v311[0];
          }
          v329 = 0;
          v328 = 0;
          v36 = *(WTF::StringImpl **)&v335[16];
          *(_QWORD *)&v335[16] = v35;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v11);
            else
              *(_DWORD *)v36 -= 2;
          }
          WTF::AtomStringImpl::addLiteral();
          v37 = v442[0];
          v38 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v11);
            else
              *(_DWORD *)v37 -= 2;
          }
          if (*((_DWORD *)v440[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]))
            goto LABEL_147;
          if (v38 == 10)
            goto LABEL_85;
          v311[0] = (WTF::StringImpl *)v38;
          v39 = a2[7];
          if ((v38 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v38 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v311, (JSC::JSGlobalObject *)a2);
LABEL_78:
            if (!*((_DWORD *)v39 + 20))
            {
              v41 = v326[0];
LABEL_80:
              LODWORD(v442[1]) = 0;
LABEL_81:
              v442[0] = 0;
              v42 = v385;
              v385 = v41;
              if (!v42)
              {
LABEL_84:
                _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)v311, (WTF::StringImpl *)v442);
                goto LABEL_85;
              }
              if (*(_DWORD *)v42 != 2)
              {
                *(_DWORD *)v42 -= 2;
                goto LABEL_84;
              }
              WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v11);
              v96 = 1;
              v97 = (int)v442[1];
              goto LABEL_192;
            }
            v205 = JSC::VM::hasExceptionsAfterHandlingTraps(v39);
            v41 = v326[0];
            if ((v205 & 1) == 0)
              goto LABEL_80;
            LODWORD(v442[1]) = 1;
            v326[0] = 0;
            if (v41)
            {
              if (*(_DWORD *)v41 == 2)
              {
                WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v11);
                v97 = (int)v442[1];
                if (!LODWORD(v442[1]))
                {
                  v41 = v442[0];
                  goto LABEL_81;
                }
LABEL_441:
                v96 = 0;
                *(_DWORD *)(a1 + 1248) = 1;
LABEL_192:
                if (v97 != -1)
                  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v97])(v311, v442);
                if ((v96 & 1) == 0)
                  goto LABEL_301;
LABEL_85:
                WTF::AtomStringImpl::addLiteral();
                v43 = v442[0];
                v45 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
                if (v43)
                {
                  if (*(_DWORD *)v43 == 2)
                    WTF::StringImpl::destroy(v43, v44);
                  else
                    *(_DWORD *)v43 -= 2;
                }
                if (*((_DWORD *)v440[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]))
                  goto LABEL_147;
                if (v45 == 10)
                  goto LABEL_128;
                v46 = a2[7];
                v323 = v46;
                if ((v45 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v45 + 5) <= 0x16u)
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  JSC::throwTypeError();
                  v52 = v311[0];
                  v311[0] = 0;
                  if (v52)
                  {
                    if (*(_DWORD *)v52 == 2)
                      WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v11);
                    else
                      *(_DWORD *)v52 -= 2;
                  }
                  v51 = 1;
                  LODWORD(v442[2]) = 1;
                }
                else
                {
                  v311[0] = 0;
                  v311[1] = 0;
                  v326[0] = (WTF::StringImpl *)v311;
                  v47 = JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::ApplePayFeature>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>((JSC::JSGlobalObject *)a2, v45, (uint64_t *)v326);
                  if (!*((_DWORD *)v46 + 20) || (v47 = JSC::VM::hasExceptionsAfterHandlingTraps(v46), (v47 & 1) == 0))
                  {
                    v48 = v311[0];
                    v49 = (int)v311[1];
                    LODWORD(v3) = HIDWORD(v311[1]);
                    LODWORD(v442[2]) = 0;
LABEL_94:
                    v442[1] = 0;
                    v442[0] = 0;
                    if (!v333)
                    {
                      v330 = v48;
                      v331 = v49;
                      v332 = v3;
                      v333 = 1;
                      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore15ApplePayFeatureELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(v47, v442);
                      goto LABEL_128;
                    }
                    v50 = v330;
                    if (v330)
                    {
                      v330 = 0;
                      v331 = 0;
                      WTF::fastFree(v50, v11);
                      v51 = (int)v442[2];
                    }
                    else
                    {
                      v51 = 0;
                    }
                    v330 = v48;
                    v53 = 1;
                    v331 = v49;
                    v332 = v3;
                    goto LABEL_124;
                  }
                  v208 = v311[0];
                  v51 = 1;
                  LODWORD(v442[2]) = 1;
                  if (v311[0])
                  {
                    v311[0] = 0;
                    LODWORD(v311[1]) = 0;
                    v47 = WTF::fastFree(v208, v11);
                    v51 = (int)v442[2];
                    if (!LODWORD(v442[2]))
                    {
                      v48 = v442[0];
                      v49 = (int)v442[1];
                      LODWORD(v3) = HIDWORD(v442[1]);
                      goto LABEL_94;
                    }
                  }
                }
                v53 = 0;
                *(_DWORD *)(a1 + 1248) = 1;
LABEL_124:
                if (v51 == -1)
                {
                  if (!v53)
                    goto LABEL_301;
                }
                else
                {
                  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B2C8[v51])(v311, v442);
                  if ((v53 & 1) == 0)
                    goto LABEL_301;
                }
LABEL_128:
                WTF::AtomStringImpl::addLiteral();
                v56 = v442[0];
                v58 = (JSC::JSCell *)JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
                if (v56)
                {
                  if (*(_DWORD *)v56 == 2)
                    WTF::StringImpl::destroy(v56, v57);
                  else
                    *(_DWORD *)v56 -= 2;
                }
                if (*((_DWORD *)v440[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]))
                  goto LABEL_147;
                if (v58 != (JSC::JSCell *)10)
                {
                  WebCore::convertDictionary<WebCore::ApplePayInstallmentConfiguration>(v58, (JSC::JSGlobalObject *)a2, (uint64_t)v442);
                  v59 = v446[1];
                  if (LODWORD(v446[1]))
                  {
                    *(_DWORD *)(a1 + 1248) = 1;
                    v67 = v59;
                  }
                  else
                  {
                    LOBYTE(v311[0]) = v442[0];
                    v60 = v442[1];
                    v61 = v442[2];
                    memset(&v442[1], 0, 32);
                    v311[1] = v60;
                    *(_OWORD *)&v311[2] = __PAIR128__((unint64_t)v442[3], (unint64_t)v61);
                    v311[4] = v442[4];
                    LOBYTE(v311[5]) = v442[5];
                    v62 = *(_OWORD *)&v442[6];
                    *(_OWORD *)&v442[6] = 0u;
                    v312 = v62;
                    v63 = v443;
                    v443 = 0;
                    v313 = v63;
                    v64 = v444;
                    v65 = HIDWORD(v444);
                    v444 = 0;
                    v314 = __PAIR64__(v65, v64);
                    v66 = v445;
                    v445 = 0;
                    v315 = v66;
                    LOBYTE(v316[0]) = v446[0];
                    if (v383)
                    {
                      WebCore::ApplePayInstallmentConfiguration::operator=((uint64_t)v371, (uint64_t)v311);
                    }
                    else
                    {
                      v371[0] = (char)v442[0];
                      memset(&v311[1], 0, 32);
                      v372 = v60;
                      v373 = v61;
                      v374 = v442[3];
                      v375 = v442[4];
                      v376 = (char)v442[5];
                      v312 = 0uLL;
                      v377 = v62;
                      v313 = 0;
                      v314 = 0;
                      v378 = v63;
                      v379 = v64;
                      v380 = v65;
                      v315 = 0;
                      v381 = v66;
                      v382 = v446[0];
                      v383 = 1;
                    }
                    WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)v311, v66);
                    v67 = v446[1];
                  }
                  if (v67 != -1)
                    (*(&off_1E334B2D8 + v67))((int)v311, (WebCore::ApplePayInstallmentConfiguration *)v442);
                  if (v59)
                    goto LABEL_301;
                }
                WTF::AtomStringImpl::addLiteral();
                v68 = v442[0];
                v70 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
                if (v68)
                {
                  if (*(_DWORD *)v68 == 2)
                    WTF::StringImpl::destroy(v68, v69);
                  else
                    *(_DWORD *)v68 -= 2;
                }
                if (*((_DWORD *)v440[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]))
                  goto LABEL_147;
                if (v70 == 10)
                {
                  WebCore::throwRequiredMemberTypeError((int)a2, (int)v440, "merchantCapabilities", 21, "ApplePayPaymentRequest", 23, "sequence", 9);
LABEL_147:
                  *(_DWORD *)(a1 + 1248) = 1;
                  goto LABEL_301;
                }
                v71 = a2[7];
                v323 = v71;
                if ((v70 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v70 + 5) <= 0x16u)
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  JSC::throwTypeError();
                  v94 = v442[0];
                  v442[0] = 0;
                  if (v94)
                  {
                    if (*(_DWORD *)v94 == 2)
                      WTF::StringImpl::destroy(v94, v93);
                    else
                      *(_DWORD *)v94 -= 2;
                  }
                  v327 = 1;
                  goto LABEL_187;
                }
                v442[1] = 0;
                v442[0] = 0;
                v311[0] = (WTF::StringImpl *)v442;
                JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::ApplePayMerchantCapability>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayMerchantCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>((JSC::JSGlobalObject *)a2, v70, (uint64_t *)v311);
                if (*((_DWORD *)v71 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v71))
                {
                  v245 = v442[0];
                  v327 = 1;
                  if (v442[0])
                  {
                    v442[0] = 0;
                    LODWORD(v442[1]) = 0;
                    WTF::fastFree(v245, v72);
                  }
LABEL_187:
                  v95 = 1;
LABEL_188:
                  *(_DWORD *)(a1 + 1248) = 1;
LABEL_300:
                  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B2E8[v95])(v442, v326);
                  goto LABEL_301;
                }
                v73 = v442[0];
                v74 = v442[1];
                v327 = 0;
                v326[0] = 0;
                v326[1] = 0;
                v75 = (WTF *)v334;
                if ((_QWORD)v334)
                {
                  *(_QWORD *)&v334 = 0;
                  DWORD2(v334) = 0;
                  WTF::fastFree(v75, v72);
                }
                *(_QWORD *)&v334 = v73;
                *((_QWORD *)&v334 + 1) = v74;
                WTF::AtomStringImpl::addLiteral();
                v76 = v442[0];
                v78 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
                if (v76)
                {
                  if (*(_DWORD *)v76 == 2)
                    WTF::StringImpl::destroy(v76, v77);
                  else
                    *(_DWORD *)v76 -= 2;
                }
                if (*((_DWORD *)v440[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]) & 1) != 0)
                {
LABEL_298:
                  v95 = 0;
                  goto LABEL_188;
                }
                if (v78 == 10)
                {
LABEL_171:
                  WTF::AtomStringImpl::addLiteral();
                  v83 = v442[0];
                  v85 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
                  if (v83)
                  {
                    if (*(_DWORD *)v83 == 2)
                      WTF::StringImpl::destroy(v83, v84);
                    else
                      *(_DWORD *)v83 -= 2;
                  }
                  if (*((_DWORD *)v440[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]) & 1) != 0)
                    goto LABEL_298;
                  if (v85 == 10)
                    goto LABEL_217;
                  v86 = a2[7];
                  v321 = v86;
                  if ((v85 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v85 + 5) <= 0x16u)
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    JSC::throwTypeError();
                    v99 = v311[0];
                    v311[0] = 0;
                    if (v99)
                    {
                      if (*(_DWORD *)v99 == 2)
                        WTF::StringImpl::destroy(v99, v98);
                      else
                        *(_DWORD *)v99 -= 2;
                    }
                    v92 = 1;
                    LODWORD(v442[2]) = 1;
                  }
                  else
                  {
                    v311[0] = 0;
                    v311[1] = 0;
                    v323 = (WTF::StringImpl *)v311;
                    v87 = JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::ApplePayContactField>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>((JSC::JSGlobalObject *)a2, v85, (uint64_t *)&v323);
                    if (!*((_DWORD *)v86 + 20) || (v87 = JSC::VM::hasExceptionsAfterHandlingTraps(v86), (v87 & 1) == 0))
                    {
                      v89 = v311[0];
                      v90 = (int)v311[1];
                      LODWORD(v3) = HIDWORD(v311[1]);
                      LODWORD(v442[2]) = 0;
LABEL_180:
                      v442[1] = 0;
                      v442[0] = 0;
                      if (!v338)
                      {
                        *(_QWORD *)&v335[24] = v89;
                        v336 = v90;
                        v337 = v3;
                        v338 = 1;
                        _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore20ApplePayContactFieldELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(v87, v442);
                        goto LABEL_217;
                      }
                      v91 = *(WTF **)&v335[24];
                      if (*(_QWORD *)&v335[24])
                      {
                        *(_QWORD *)&v335[24] = 0;
                        v336 = 0;
                        WTF::fastFree(v91, v88);
                        v92 = (int)v442[2];
                      }
                      else
                      {
                        v92 = 0;
                      }
                      *(_QWORD *)&v335[24] = v89;
                      v100 = 1;
                      v336 = v90;
                      v337 = v3;
                      goto LABEL_213;
                    }
                    v295 = v311[0];
                    v92 = 1;
                    LODWORD(v442[2]) = 1;
                    if (v311[0])
                    {
                      v311[0] = 0;
                      LODWORD(v311[1]) = 0;
                      v87 = WTF::fastFree(v295, v88);
                      v92 = (int)v442[2];
                      if (!LODWORD(v442[2]))
                      {
                        v89 = v442[0];
                        v90 = (int)v442[1];
                        LODWORD(v3) = HIDWORD(v442[1]);
                        goto LABEL_180;
                      }
                    }
                  }
                  v100 = 0;
                  *(_DWORD *)(a1 + 1248) = 1;
LABEL_213:
                  if (v92 == -1)
                  {
                    if (!v100)
                      goto LABEL_299;
                  }
                  else
                  {
                    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B150[v92])(v311, v442);
                    if ((v100 & 1) == 0)
                      goto LABEL_299;
                  }
LABEL_217:
                  WTF::AtomStringImpl::addLiteral();
                  v101 = v442[0];
                  v103 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
                  if (v101)
                  {
                    if (*(_DWORD *)v101 == 2)
                      WTF::StringImpl::destroy(v101, v102);
                    else
                      *(_DWORD *)v101 -= 2;
                  }
                  if (*((_DWORD *)v440[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]) & 1) != 0)
                    goto LABEL_298;
                  if (v103 == 10)
                    goto LABEL_247;
                  v104 = a2[7];
                  v321 = v104;
                  if ((v103 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v103 + 5) <= 0x16u)
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    JSC::throwTypeError();
                    v112 = v311[0];
                    v311[0] = 0;
                    if (v112)
                    {
                      if (*(_DWORD *)v112 == 2)
                        WTF::StringImpl::destroy(v112, v111);
                      else
                        *(_DWORD *)v112 -= 2;
                    }
                    v110 = 1;
                    LODWORD(v442[2]) = 1;
                  }
                  else
                  {
                    v311[0] = 0;
                    v311[1] = 0;
                    v323 = (WTF::StringImpl *)v311;
                    v105 = JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::ApplePayContactField>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>((JSC::JSGlobalObject *)a2, v103, (uint64_t *)&v323);
                    if (!*((_DWORD *)v104 + 20)
                      || (v105 = JSC::VM::hasExceptionsAfterHandlingTraps(v104), (v105 & 1) == 0))
                    {
                      v107 = v311[0];
                      v108 = (int)v311[1];
                      LODWORD(v3) = HIDWORD(v311[1]);
                      LODWORD(v442[2]) = 0;
LABEL_226:
                      v442[1] = 0;
                      v442[0] = 0;
                      if (v355)
                      {
                        v109 = v352;
                        if (v352)
                        {
                          v352 = 0;
                          v353 = 0;
                          WTF::fastFree(v109, v106);
                          v110 = (int)v442[2];
                        }
                        else
                        {
                          v110 = 0;
                        }
                        v352 = v107;
                        v113 = 1;
                        v353 = v108;
                        v354 = v3;
LABEL_243:
                        if (v110 == -1)
                        {
                          if (!v113)
                            goto LABEL_299;
                        }
                        else
                        {
                          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B150[v110])(v311, v442);
                          if ((v113 & 1) == 0)
                            goto LABEL_299;
                        }
                        goto LABEL_247;
                      }
                      v352 = v107;
                      v353 = v108;
                      v354 = v3;
                      v355 = 1;
                      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore20ApplePayContactFieldELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(v105, v442);
LABEL_247:
                      WTF::AtomStringImpl::addLiteral();
                      v116 = v442[0];
                      v118 = (JSC::JSCell *)JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
                      if (v116)
                      {
                        if (*(_DWORD *)v116 == 2)
                          WTF::StringImpl::destroy(v116, v117);
                        else
                          *(_DWORD *)v116 -= 2;
                      }
                      if (*((_DWORD *)v440[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]) & 1) != 0)
                        goto LABEL_298;
                      if (v118 == (JSC::JSCell *)10)
                        goto LABEL_264;
                      WebCore::convertDictionary<WebCore::ApplePayPaymentContact>((uint64_t)v442, (JSC::JSGlobalObject *)a2, v118);
                      v119 = v447;
                      if ((_DWORD)v447)
                      {
                        *(_DWORD *)(a1 + 1248) = 1;
                        v129 = v119;
                      }
                      else
                      {
                        v120 = v442[0];
                        v121 = v442[1];
                        v311[0] = v442[0];
                        v311[1] = v442[1];
                        v122 = *(_OWORD *)&v442[2];
                        memset(v442, 0, sizeof(v442));
                        *(_OWORD *)&v311[2] = v122;
                        *(_OWORD *)&v311[4] = *(_OWORD *)&v442[4];
                        v312 = *(_OWORD *)&v442[6];
                        LOBYTE(v313) = 0;
                        LOBYTE(v315) = 0;
                        if ((_BYTE)v445)
                        {
                          v123 = v443;
                          v443 = 0;
                          v313 = v123;
                          v124 = v444;
                          v444 = 0;
                          v314 = v124;
                          LOBYTE(v315) = 1;
                        }
                        v125 = v446[0];
                        v126 = v446[1];
                        memset(v446, 0, sizeof(v446));
                        v316[0] = v125;
                        *(_OWORD *)&v316[1] = __PAIR128__(v446[2], v126);
                        v127 = (WTF::StringImpl *)v446[2];
                        *(_OWORD *)&v316[3] = *(_OWORD *)&v446[3];
                        *(_OWORD *)&v316[5] = *(_OWORD *)&v446[5];
                        if (v368)
                        {
                          WebCore::ApplePayPaymentContact::operator=(v356, v311);
                        }
                        else
                        {
                          v356[0] = v120;
                          v356[1] = v121;
                          memset(v311, 0, sizeof(v311));
                          v357 = v122;
                          v358 = *(_OWORD *)&v442[4];
                          v312 = 0uLL;
                          v359 = *(_OWORD *)&v442[6];
                          LOBYTE(v360) = 0;
                          v362 = 0;
                          if ((_BYTE)v445)
                          {
                            v360 = v313;
                            v128 = v314;
                            v313 = 0;
                            v314 = 0;
                            v361 = v128;
                            v362 = 1;
                          }
                          memset(v316, 0, 56);
                          v363 = v125;
                          v364 = v126;
                          v365 = v446[2];
                          v366 = *(_OWORD *)&v446[3];
                          v367 = *(_OWORD *)&v446[5];
                          v368 = 1;
                        }
                        WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)v311, v127);
                        v129 = v447;
                      }
                      if (v129 != -1)
                        (*(&off_1E334B280 + v129))((int)v311, (WebCore::ApplePayPaymentContact *)v442);
                      if (!v119)
                      {
LABEL_264:
                        WTF::AtomStringImpl::addLiteral();
                        v130 = v442[0];
                        v132 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
                        if (v130)
                        {
                          if (*(_DWORD *)v130 == 2)
                            WTF::StringImpl::destroy(v130, v131);
                          else
                            *(_DWORD *)v130 -= 2;
                        }
                        if (*((_DWORD *)v440[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]) & 1) != 0)
                          goto LABEL_298;
                        if (v132 != 10)
                        {
                          v442[0] = a2[7];
                          v133 = v442[0];
                          v134 = WebCore::parseEnumeration<WebCore::ApplePayShippingContactEditingMode>((JSC::JSGlobalObject *)a2, v132);
                          if (*((_DWORD *)v133 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v133) & 1) != 0)
                            goto LABEL_298;
                          if (v134 <= 0xFFu)
                          {
                            JSC::throwTypeError();
                            goto LABEL_298;
                          }
                          LOWORD(v386) = v134 | 0x100;
                        }
                        WTF::AtomStringImpl::addLiteral();
                        v135 = v442[0];
                        v137 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
                        if (v135)
                        {
                          if (*(_DWORD *)v135 == 2)
                            WTF::StringImpl::destroy(v135, v136);
                          else
                            *(_DWORD *)v135 -= 2;
                        }
                        if (*((_DWORD *)v440[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]) & 1) != 0)
                          goto LABEL_298;
                        if (v137 == 10)
                          goto LABEL_292;
                        v311[0] = a2[7];
                        if ((v137 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v137 + 5) <= 0x16u)
                        {
                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                          JSC::throwTypeError();
                          v145 = v442[0];
                          v442[0] = 0;
                          if (v145)
                          {
                            if (*(_DWORD *)v145 == 2)
                              WTF::StringImpl::destroy(v145, v144);
                            else
                              *(_DWORD *)v145 -= 2;
                          }
                          v139 = 1;
                          LODWORD(v442[2]) = 1;
                        }
                        else
                        {
                          WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert((JSC::JSGlobalObject *)a2, v137, (uint64_t)v442);
                          v139 = (int)v442[2];
                          if (!LODWORD(v442[2]))
                          {
                            v140 = v442[0];
                            v442[0] = 0;
                            v141 = v442[1];
                            v442[1] = 0;
                            if (HIDWORD(v370))
                            {
                              v170 = (WTF::StringImpl **)v370;
                              v3 = 8 * HIDWORD(v370);
                              do
                              {
                                v171 = *v170;
                                *v170 = 0;
                                if (v171)
                                {
                                  if (*(_DWORD *)v171 == 2)
                                  {
                                    v172 = v141;
                                    WTF::StringImpl::destroy(v171, v138);
                                    v141 = v172;
                                  }
                                  else
                                  {
                                    *(_DWORD *)v171 -= 2;
                                  }
                                }
                                ++v170;
                                v3 -= 8;
                              }
                              while (v3);
                            }
                            v142 = (WTF *)v370;
                            if ((_QWORD)v370)
                            {
                              *(_QWORD *)&v370 = 0;
                              DWORD2(v370) = 0;
                              v279 = v141;
                              WTF::fastFree(v142, v138);
                              v141 = v279;
                            }
                            *(_QWORD *)&v370 = v140;
                            *((_QWORD *)&v370 + 1) = v141;
                            v143 = 1;
                            v139 = (int)v442[2];
LABEL_289:
                            if (v139 != -1)
                              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B270[v139])(v311, v442);
                            if (!v143)
                              goto LABEL_299;
LABEL_292:
                            WTF::AtomStringImpl::addLiteral();
                            v146 = v442[0];
                            v148 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
                            if (v146)
                            {
                              if (*(_DWORD *)v146 == 2)
                                WTF::StringImpl::destroy(v146, v147);
                              else
                                *(_DWORD *)v146 -= 2;
                            }
                            if (*((_DWORD *)v440[0] + 20)
                              && (JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]) & 1) != 0)
                            {
                              goto LABEL_298;
                            }
                            if (v148 == 10)
                            {
                              WebCore::throwRequiredMemberTypeError((int)a2, (int)v440, "supportedNetworks", 18, "ApplePayPaymentRequest", 23, "sequence", 9);
                              goto LABEL_298;
                            }
                            v311[0] = a2[7];
                            if ((v148 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v148 + 5) <= 0x16u)
                            {
                              WTF::StringImpl::createWithoutCopyingNonEmpty();
                              JSC::throwTypeError();
                              v169 = v442[0];
                              v442[0] = 0;
                              if (v169)
                              {
                                if (*(_DWORD *)v169 == 2)
                                  WTF::StringImpl::destroy(v169, (WTF::StringImpl *)v11);
                                else
                                  *(_DWORD *)v169 -= 2;
                              }
                              v150 = 1;
                              v325 = 1;
                            }
                            else
                            {
                              WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert((JSC::JSGlobalObject *)a2, v148, (uint64_t)&v323);
                              v150 = v325;
                              if (!v325)
                              {
                                v151 = v323;
                                v152 = v324;
                                v323 = 0;
                                v324 = 0;
                                if (*(_DWORD *)&v335[12])
                                {
                                  v192 = *(WTF::StringImpl ***)v335;
                                  v3 = 8 * *(unsigned int *)&v335[12];
                                  do
                                  {
                                    v193 = *v192;
                                    *v192 = 0;
                                    if (v193)
                                    {
                                      if (*(_DWORD *)v193 == 2)
                                      {
                                        v194 = v152;
                                        WTF::StringImpl::destroy(v193, (WTF::StringImpl *)v11);
                                        v152 = v194;
                                      }
                                      else
                                      {
                                        *(_DWORD *)v193 -= 2;
                                      }
                                    }
                                    ++v192;
                                    v3 -= 8;
                                  }
                                  while (v3);
                                }
                                v153 = *(WTF **)v335;
                                if (*(_QWORD *)v335)
                                {
                                  *(_QWORD *)v335 = 0;
                                  *(_DWORD *)&v335[8] = 0;
                                  v281 = v152;
                                  WTF::fastFree(v153, v11);
                                  v152 = v281;
                                }
                                *(_QWORD *)v335 = v151;
                                *(_QWORD *)&v335[8] = v152;
                                WTF::AtomStringImpl::addLiteral();
                                v154 = v442[0];
                                v156 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
                                if (v154)
                                {
                                  if (*(_DWORD *)v154 == 2)
                                    WTF::StringImpl::destroy(v154, v155);
                                  else
                                    *(_DWORD *)v154 -= 2;
                                }
                                if (*((_DWORD *)v440[0] + 20)
                                  && JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]))
                                {
                                  goto LABEL_366;
                                }
                                if (v156 == 10)
                                  goto LABEL_320;
                                v157 = a2[7];
                                if (v156 >= 0xFFFE000000000000)
                                {
                                  v305 = (_DWORD)v156 == 0;
                                  goto LABEL_792;
                                }
                                *(_QWORD *)&v158 = v156 - 0x2000000000000;
                                if (v156 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                                {
                                  if (v158 <= 0.0)
                                  {
                                    v159 = v158 < 0.0;
                                    goto LABEL_318;
                                  }
                                }
                                else
                                {
                                  if ((v156 & 0xFFFE000000000002) != 0)
                                  {
                                    v159 = v156 == 7;
                                    goto LABEL_318;
                                  }
                                  v306 = *(unsigned __int8 *)(v156 + 5);
                                  if (v306 == 3)
                                  {
                                    v309 = *(_DWORD *)(v156 + 8);
LABEL_787:
                                    v305 = v309 == 0;
                                    goto LABEL_792;
                                  }
                                  if (v306 == 2)
                                  {
                                    v307 = *(_QWORD *)(v156 + 8);
                                    if ((v307 & 1) != 0)
                                      v308 = (int *)(v156 + 16);
                                    else
                                      v308 = (int *)(v307 + 4);
                                    v309 = *v308;
                                    goto LABEL_787;
                                  }
                                  if ((*(_BYTE *)(16 * (*(_DWORD *)v156 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                                  {
                                    v305 = *(_QWORD *)(16 * (*(_DWORD *)v156 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_792:
                                    v159 = !v305;
                                    goto LABEL_318;
                                  }
                                }
                                v159 = 1;
LABEL_318:
                                if (*((_DWORD *)v157 + 20)
                                  && JSC::VM::hasExceptionsAfterHandlingTraps(v157))
                                {
                                  goto LABEL_366;
                                }
                                v384 = v159 | 0x100;
LABEL_320:
                                WTF::AtomStringImpl::addLiteral();
                                v160 = v442[0];
                                v162 = (JSC::JSCell *)JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
                                if (v160)
                                {
                                  if (*(_DWORD *)v160 == 2)
                                    WTF::StringImpl::destroy(v160, v161);
                                  else
                                    *(_DWORD *)v160 -= 2;
                                }
                                if (*((_DWORD *)v440[0] + 20)
                                  && JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]))
                                {
                                  goto LABEL_366;
                                }
                                if (v162 != (JSC::JSCell *)10)
                                {
                                  WebCore::convertDictionary<WebCore::ApplePayAutomaticReloadPaymentRequest>(v162, (JSC::JSGlobalObject *)a2, (uint64_t)v442);
                                  v163 = v446[3];
                                  if (LODWORD(v446[3]))
                                  {
                                    *(_DWORD *)(a1 + 1248) = 1;
                                    v173 = v163;
                                  }
                                  else
                                  {
                                    v164 = v442[0];
                                    v442[0] = 0;
                                    v311[0] = v164;
                                    LOBYTE(v311[1]) = v442[1];
                                    v165 = *(_OWORD *)&v442[2];
                                    *(_OWORD *)&v442[2] = 0u;
                                    *(_OWORD *)&v311[2] = v165;
                                    *(_OWORD *)&v311[4] = *(_OWORD *)&v442[4];
                                    v312 = *(_OWORD *)&v442[6];
                                    v166 = v444;
                                    v313 = v443;
                                    v314 = v444;
                                    LOWORD(v315) = (_WORD)v445;
                                    v167 = v446[0];
                                    v168 = v446[1];
                                    memset(v446, 0, 24);
                                    v316[0] = v167;
                                    *(_OWORD *)&v316[1] = __PAIR128__(v446[2], v168);
                                    v444 = 0;
                                    if (v416)
                                    {
                                      WebCore::ApplePayAutomaticReloadPaymentRequest::operator=((uint64_t)&v405, (WTF::StringImpl *)v311);
                                    }
                                    else
                                    {
                                      v311[0] = 0;
                                      v405 = v164;
                                      v406 = (char)v442[1];
                                      v407 = v165;
                                      *(_OWORD *)&v311[2] = 0uLL;
                                      v408 = *(_OWORD *)&v442[4];
                                      v409 = *(_OWORD *)&v442[6];
                                      v410 = v443;
                                      v411 = v166;
                                      v412 = (__int16)v445;
                                      v413 = v167;
                                      memset(v316, 0, 24);
                                      v414 = v168;
                                      v314 = 0;
                                      v415 = v446[2];
                                      v416 = 1;
                                    }
                                    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)v311, (WTF::StringImpl *)v11);
                                    v173 = v446[3];
                                  }
                                  if (v173 != -1)
                                    (*(&off_1E334B0D0 + v173))((int)v311, (WebCore::ApplePayAutomaticReloadPaymentRequest *)v442);
                                  if (v163)
                                    goto LABEL_678;
                                }
                                WTF::AtomStringImpl::addLiteral();
                                v174 = v442[0];
                                v175 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
                                if (v174)
                                {
                                  if (*(_DWORD *)v174 == 2)
                                    WTF::StringImpl::destroy(v174, (WTF::StringImpl *)v11);
                                  else
                                    *(_DWORD *)v174 -= 2;
                                }
                                if (*((_DWORD *)v440[0] + 20)
                                  && JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]))
                                {
                                  goto LABEL_366;
                                }
                                if (v175 == 10)
                                {
                                  WebCore::throwRequiredMemberTypeError((int)a2, (int)v440, "currencyCode", 13, "ApplePayPaymentRequest", 23, "DOMString", 10);
LABEL_366:
                                  *(_DWORD *)(a1 + 1248) = 1;
LABEL_678:
                                  v150 = v325;
LABEL_679:
                                  if (v150 != -1)
                                    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B270[v150])(v442, &v323);
                                  v95 = v327;
                                  if (v327 != -1)
                                    goto LABEL_300;
LABEL_301:
                                  v149 = v329;
                                  if (v329 == -1)
                                    goto LABEL_55;
LABEL_302:
                                  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E334B060[v149])(v442, &v328);
                                  goto LABEL_55;
                                }
                                v442[0] = (WTF::StringImpl *)v175;
                                v176 = a2[7];
                                if ((v175 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v175 + 5) != 2)
                                {
                                  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v442, (JSC::JSGlobalObject *)a2);
LABEL_373:
                                  if (*((_DWORD *)v176 + 20))
                                  {
                                    v298 = JSC::VM::hasExceptionsAfterHandlingTraps(v176);
                                    v178 = v311[0];
                                    if (v298)
                                    {
                                      v294 = 1;
                                      v322 = 1;
                                      v311[0] = 0;
                                      if (v178)
                                      {
                                        if (*(_DWORD *)v178 == 2)
                                          WTF::StringImpl::destroy(v178, (WTF::StringImpl *)v11);
                                        else
                                          *(_DWORD *)v178 -= 2;
                                      }
                                      *(_DWORD *)(a1 + 1248) = 1;
                                      goto LABEL_677;
                                    }
                                  }
                                  else
                                  {
                                    v178 = v311[0];
                                  }
                                  v322 = 0;
                                  v321 = 0;
                                  v179 = (WTF::StringImpl *)*((_QWORD *)&v387 + 1);
                                  *((_QWORD *)&v387 + 1) = v178;
                                  if (v179)
                                  {
                                    if (*(_DWORD *)v179 == 2)
                                      WTF::StringImpl::destroy(v179, (WTF::StringImpl *)v11);
                                    else
                                      *(_DWORD *)v179 -= 2;
                                  }
                                  WTF::AtomStringImpl::addLiteral();
                                  v180 = v442[0];
                                  v182 = (JSC::JSCell *)JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
                                  if (v180)
                                  {
                                    if (*(_DWORD *)v180 == 2)
                                      WTF::StringImpl::destroy(v180, v181);
                                    else
                                      *(_DWORD *)v180 -= 2;
                                  }
                                  if (*((_DWORD *)v440[0] + 20)
                                    && JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]))
                                  {
                                    goto LABEL_663;
                                  }
                                  if (v182 != (JSC::JSCell *)10)
                                  {
                                    WebCore::convertDictionary<WebCore::ApplePayDeferredPaymentRequest>(v182, (JSC::JSGlobalObject *)a2, (uint64_t)v442);
                                    v183 = v446[5];
                                    if (LODWORD(v446[5]))
                                    {
                                      *(_DWORD *)(a1 + 1248) = 1;
                                      v197 = v183;
                                    }
                                    else
                                    {
                                      v184 = v442[0];
                                      v442[0] = 0;
                                      v311[0] = v184;
                                      LOBYTE(v311[1]) = v442[1];
                                      v185 = *(_OWORD *)&v442[2];
                                      *(_OWORD *)&v442[2] = 0u;
                                      *(_OWORD *)&v311[2] = v185;
                                      *(_OWORD *)&v311[4] = *(_OWORD *)&v442[4];
                                      v312 = *(_OWORD *)&v442[6];
                                      v186 = v444;
                                      v444 = 0;
                                      v313 = v443;
                                      v314 = v186;
                                      LOWORD(v315) = (_WORD)v445;
                                      v187 = v446[1];
                                      v316[0] = v446[0];
                                      v188 = v446[2];
                                      *(_OWORD *)&v316[1] = *(_OWORD *)&v446[1];
                                      v189 = v446[4];
                                      v190 = v446[3];
                                      v316[3] = v446[3];
                                      memset(&v446[1], 0, 32);
                                      v316[4] = v189;
                                      if (v434)
                                      {
                                        WebCore::ApplePayDeferredPaymentRequest::operator=((uint64_t)&v421, (WTF::StringImpl *)v311);
                                      }
                                      else
                                      {
                                        v191 = (WTF::StringImpl *)&v442[4];
                                        v424 = *(_OWORD *)&v442[4];
                                        v311[0] = 0;
                                        v421 = v184;
                                        v422 = (char)v442[1];
                                        v423 = v185;
                                        *(_OWORD *)&v311[2] = 0uLL;
                                        v425 = *(_OWORD *)&v442[6];
                                        v426 = v443;
                                        v314 = 0;
                                        v427 = v186;
                                        v428 = (__int16)v445;
                                        v429 = v446[0];
                                        v430 = v187;
                                        v431 = v188;
                                        v432 = v190;
                                        memset(&v316[1], 0, 32);
                                        v433 = v189;
                                        v434 = 1;
                                      }
                                      WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)v311, v191);
                                      v197 = v446[5];
                                    }
                                    if (v197 != -1)
                                      (*(&off_1E334B0E0 + v197))((int)v311, (WebCore::ApplePayDeferredPaymentRequest *)v442);
                                    if (v183)
                                      goto LABEL_676;
                                  }
                                  WTF::AtomStringImpl::addLiteral();
                                  v198 = v442[0];
                                  v200 = (JSC::JSCell *)JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
                                  if (v198)
                                  {
                                    if (*(_DWORD *)v198 == 2)
                                      WTF::StringImpl::destroy(v198, v199);
                                    else
                                      *(_DWORD *)v198 -= 2;
                                  }
                                  if (*((_DWORD *)v440[0] + 20)
                                    && JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]))
                                  {
                                    goto LABEL_663;
                                  }
                                  if (v200 == (JSC::JSCell *)10)
                                  {
LABEL_473:
                                    WTF::AtomStringImpl::addLiteral();
                                    v210 = v442[0];
                                    v212 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
                                    if (v210)
                                    {
                                      if (*(_DWORD *)v210 == 2)
                                        WTF::StringImpl::destroy(v210, v211);
                                      else
                                        *(_DWORD *)v210 -= 2;
                                    }
                                    if (*((_DWORD *)v440[0] + 20)
                                      && JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]))
                                    {
                                      goto LABEL_663;
                                    }
                                    if (v212 == 10)
                                      goto LABEL_515;
                                    v213 = (WTF::StringImpl **)a2[7];
                                    v441 = v213;
                                    if ((v212 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v212 + 5) <= 0x16u)
                                    {
                                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                                      JSC::throwTypeError();
                                      v226 = v442[0];
                                      v442[0] = 0;
                                      if (v226)
                                      {
                                        if (*(_DWORD *)v226 == 2)
                                          WTF::StringImpl::destroy(v226, (WTF::StringImpl *)v11);
                                        else
                                          *(_DWORD *)v226 -= 2;
                                      }
                                      v217 = 1;
                                      LODWORD(v442[2]) = 1;
                                    }
                                    else
                                    {
                                      v311[0] = 0;
                                      v311[1] = 0;
                                      v442[0] = (WTF::StringImpl *)v311;
                                      JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayLineItem>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>((JSC::JSGlobalObject *)a2, v212, (uint64_t *)v442);
                                      if (*((_DWORD *)v213 + 20)
                                        && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v213) & 1) != 0)
                                      {
                                        v215 = 1;
                                      }
                                      else
                                      {
                                        v215 = 0;
                                        v442[0] = v311[0];
                                        v216 = v311[1];
                                        v311[0] = 0;
                                        v311[1] = 0;
                                        v442[1] = v216;
                                      }
                                      LODWORD(v442[2]) = v215;
                                      WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v311, v214);
                                      v217 = (int)v442[2];
                                      if (!LODWORD(v442[2]))
                                      {
                                        v218 = v442[0];
                                        v442[0] = 0;
                                        v311[0] = v218;
                                        v219 = v442[1];
                                        v220 = HIDWORD(v442[1]);
                                        v442[1] = 0;
                                        v311[1] = (WTF::StringImpl *)__PAIR64__(v220, v219);
                                        if (v403)
                                        {
                                          if (HIDWORD(v402))
                                          {
                                            v221 = 80 * HIDWORD(v402);
                                            v222 = (WTF::StringImpl **)((char *)v401 + 64);
                                            do
                                            {
                                              v223 = *v222;
                                              *v222 = 0;
                                              if (v223)
                                              {
                                                if (*(_DWORD *)v223 == 2)
                                                  WTF::StringImpl::destroy(v223, (WTF::StringImpl *)v11);
                                                else
                                                  *(_DWORD *)v223 -= 2;
                                              }
                                              v224 = *(v222 - 6);
                                              *(v222 - 6) = 0;
                                              if (v224)
                                              {
                                                if (*(_DWORD *)v224 == 2)
                                                  WTF::StringImpl::destroy(v224, (WTF::StringImpl *)v11);
                                                else
                                                  *(_DWORD *)v224 -= 2;
                                              }
                                              v225 = *(v222 - 7);
                                              *(v222 - 7) = 0;
                                              if (v225)
                                              {
                                                if (*(_DWORD *)v225 == 2)
                                                  WTF::StringImpl::destroy(v225, (WTF::StringImpl *)v11);
                                                else
                                                  *(_DWORD *)v225 -= 2;
                                              }
                                              v222 += 10;
                                              v221 -= 80;
                                            }
                                            while (v221);
                                          }
                                          v228 = v401;
                                          if (v401)
                                          {
                                            v401 = 0;
                                            LODWORD(v402) = 0;
                                            WTF::fastFree(v228, v11);
                                          }
                                          v401 = v311[0];
                                          v229 = v311[1];
                                          v311[0] = 0;
                                          v311[1] = 0;
                                          v402 = (unint64_t)v229;
                                        }
                                        else
                                        {
                                          v311[0] = 0;
                                          v311[1] = 0;
                                          v401 = v218;
                                          v402 = __PAIR64__(v220, v219);
                                          v403 = 1;
                                        }
                                        WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v311, (WTF::StringImpl *)v11);
                                        v227 = 1;
                                        v217 = (int)v442[2];
LABEL_512:
                                        if (v217 != -1)
                                          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B100[v217])(v311, v442);
                                        if (!v227)
                                          goto LABEL_676;
LABEL_515:
                                        WTF::AtomStringImpl::addLiteral();
                                        v230 = v442[0];
                                        v232 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
                                        if (v230)
                                        {
                                          if (*(_DWORD *)v230 == 2)
                                            WTF::StringImpl::destroy(v230, v231);
                                          else
                                            *(_DWORD *)v230 -= 2;
                                        }
                                        if (*((_DWORD *)v440[0] + 20)
                                          && JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]))
                                        {
                                          goto LABEL_663;
                                        }
                                        if (v232 == 10)
                                          goto LABEL_551;
                                        v233 = a2[7];
                                        v440[1] = v233;
                                        if ((v232 & 0xFFFE000000000002) != 0
                                          || *(unsigned __int8 *)(v232 + 5) <= 0x16u)
                                        {
                                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                                          JSC::throwTypeError();
                                          v244 = v311[0];
                                          v311[0] = 0;
                                          if (v244)
                                          {
                                            if (*(_DWORD *)v244 == 2)
                                              WTF::StringImpl::destroy(v244, (WTF::StringImpl *)v11);
                                            else
                                              *(_DWORD *)v244 -= 2;
                                          }
                                          v235 = 1;
                                          LODWORD(v442[2]) = 1;
                                        }
                                        else
                                        {
                                          v311[0] = 0;
                                          v311[1] = 0;
                                          v441 = v311;
                                          v234 = (WebCore::ApplePayPaymentTokenContext *)JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayPaymentTokenContext>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>((JSC::JSGlobalObject *)a2, v232, (uint64_t *)&v441);
                                          if (*((_DWORD *)v233 + 20)
                                            && (v234 = (WebCore::ApplePayPaymentTokenContext *)JSC::VM::hasExceptionsAfterHandlingTraps(v233),
                                                (v234 & 1) != 0))
                                          {
                                            v234 = v311[0];
                                            LODWORD(v442[2]) = 1;
                                            if (HIDWORD(v311[1]))
                                            {
                                              v303 = 40 * HIDWORD(v311[1]);
                                              do
                                              {
                                                WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v234, (WTF::StringImpl *)v11);
                                                v234 = (WebCore::ApplePayPaymentTokenContext *)(v304 + 40);
                                                v303 -= 40;
                                              }
                                              while (v303);
                                              v234 = v311[0];
                                            }
                                            if (v234)
                                            {
                                              v311[0] = 0;
                                              LODWORD(v311[1]) = 0;
                                              v234 = (WebCore::ApplePayPaymentTokenContext *)WTF::fastFree(v234, v11);
                                            }
                                          }
                                          else
                                          {
                                            v442[0] = v311[0];
                                            v442[1] = v311[1];
                                            LODWORD(v442[2]) = 0;
                                          }
                                          v235 = (int)v442[2];
                                          if (!LODWORD(v442[2]))
                                          {
                                            v236 = v442[0];
                                            v442[0] = 0;
                                            v237 = (int)v442[1];
                                            v238 = HIDWORD(v442[1]);
                                            v442[1] = 0;
                                            if (!v420)
                                            {
                                              v417 = v236;
                                              v418 = v237;
                                              v419 = v238;
                                              v420 = 1;
                                              _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore27ApplePayPaymentTokenContextELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_((uint64_t)v234, (WTF::StringImpl *)v442);
                                              goto LABEL_551;
                                            }
                                            if (v419)
                                            {
                                              v239 = v417;
                                              v240 = 40 * v419;
                                              do
                                              {
                                                WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v239, (WTF::StringImpl *)v11);
                                                v239 = (WTF *)(v241 + 40);
                                                v240 -= 40;
                                              }
                                              while (v240);
                                            }
                                            v242 = v417;
                                            if (v417)
                                            {
                                              v417 = 0;
                                              v418 = 0;
                                              WTF::fastFree(v242, v11);
                                            }
                                            v417 = v236;
                                            v418 = v237;
                                            v419 = v238;
                                            v243 = 1;
                                            v235 = (int)v442[2];
                                            goto LABEL_537;
                                          }
                                        }
                                        v243 = 0;
                                        *(_DWORD *)(a1 + 1248) = 1;
LABEL_537:
                                        if (v235 == -1)
                                        {
                                          if (!v243)
                                            goto LABEL_676;
                                        }
                                        else
                                        {
                                          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B110[v235])(v311, v442);
                                          if ((v243 & 1) == 0)
                                            goto LABEL_676;
                                        }
LABEL_551:
                                        WTF::AtomStringImpl::addLiteral();
                                        v246 = v442[0];
                                        v248 = (JSC::JSCell *)JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
                                        if (v246)
                                        {
                                          if (*(_DWORD *)v246 == 2)
                                            WTF::StringImpl::destroy(v246, v247);
                                          else
                                            *(_DWORD *)v246 -= 2;
                                        }
                                        if (*((_DWORD *)v440[0] + 20)
                                          && JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]))
                                        {
                                          goto LABEL_663;
                                        }
                                        if (v248 != (JSC::JSCell *)10)
                                        {
                                          WebCore::convertDictionary<WebCore::ApplePayRecurringPaymentRequest>(v248, (JSC::JSGlobalObject *)a2, (uint64_t)v442);
                                          v249 = v453;
                                          if (v453)
                                          {
                                            *(_DWORD *)(a1 + 1248) = 1;
                                            v257 = v249;
                                          }
                                          else
                                          {
                                            v311[0] = v442[0];
                                            LOBYTE(v311[1]) = v442[1];
                                            v250 = *(_OWORD *)&v442[2];
                                            v442[0] = 0;
                                            *(_OWORD *)&v442[2] = 0uLL;
                                            *(_OWORD *)&v311[2] = v250;
                                            *(_OWORD *)&v311[4] = *(_OWORD *)&v442[4];
                                            v312 = *(_OWORD *)&v442[6];
                                            v251 = v444;
                                            v444 = 0;
                                            v313 = v443;
                                            v314 = v251;
                                            LOWORD(v315) = (_WORD)v445;
                                            LOBYTE(v316[0]) = 0;
                                            v318 = 0;
                                            if (v450)
                                            {
                                              LOBYTE(v316[0]) = v446[0];
                                              v252 = *(_OWORD *)&v446[1];
                                              *(_OWORD *)&v446[1] = 0uLL;
                                              *(_OWORD *)&v316[1] = v252;
                                              *(_OWORD *)&v316[3] = *(_OWORD *)&v446[3];
                                              *(_OWORD *)&v316[5] = *(_OWORD *)&v446[5];
                                              v253 = v448;
                                              v448 = 0;
                                              v316[7] = v447;
                                              v316[8] = v253;
                                              v317 = v449;
                                              v318 = 1;
                                            }
                                            v254 = v451;
                                            v451 = 0uLL;
                                            v319 = v254;
                                            v255 = v452;
                                            v452 = 0;
                                            v320 = v255;
                                            std::optional<WebCore::ApplePayRecurringPaymentRequest>::operator=[abi:sn180100]<WebCore::ApplePayRecurringPaymentRequest,void>((uint64_t)v404, (WTF::StringImpl *)v311);
                                            WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)v311, v256);
                                            v257 = v453;
                                          }
                                          if (v257 != -1)
                                            (*(&off_1E334B120 + v257))((int)v311, (WebCore::ApplePayRecurringPaymentRequest *)v442);
                                          if (v249)
                                            goto LABEL_676;
                                        }
                                        WTF::AtomStringImpl::addLiteral();
                                        v258 = v442[0];
                                        v260 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
                                        if (v258)
                                        {
                                          if (*(_DWORD *)v258 == 2)
                                            WTF::StringImpl::destroy(v258, v259);
                                          else
                                            *(_DWORD *)v258 -= 2;
                                        }
                                        if (*((_DWORD *)v440[0] + 20)
                                          && JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]))
                                        {
                                          goto LABEL_663;
                                        }
                                        if (v260 == 10)
                                        {
LABEL_580:
                                          WTF::AtomStringImpl::addLiteral();
                                          v267 = v442[0];
                                          v268 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
                                          if (v267)
                                          {
                                            if (*(_DWORD *)v267 == 2)
                                              WTF::StringImpl::destroy(v267, (WTF::StringImpl *)v11);
                                            else
                                              *(_DWORD *)v267 -= 2;
                                          }
                                          if (*((_DWORD *)v440[0] + 20)
                                            && JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]))
                                          {
                                            goto LABEL_663;
                                          }
                                          if (v268 == 10)
                                          {
                                            v269 = 0;
LABEL_657:
                                            v388 = v269;
                                            WTF::AtomStringImpl::addLiteral();
                                            v283 = v442[0];
                                            v285 = (JSC::JSCell *)JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v442[0]);
                                            if (v283)
                                            {
                                              if (*(_DWORD *)v283 == 2)
                                                WTF::StringImpl::destroy(v283, v284);
                                              else
                                                *(_DWORD *)v283 -= 2;
                                            }
                                            if (*((_DWORD *)v440[0] + 20)
                                              && JSC::VM::hasExceptionsAfterHandlingTraps(v440[0]))
                                            {
                                              goto LABEL_663;
                                            }
                                            if (v285 == (JSC::JSCell *)10)
                                            {
                                              WebCore::throwRequiredMemberTypeError((int)a2, (int)v440, "total", 6, "ApplePayPaymentRequest", 23, "ApplePayLineItem", 17);
LABEL_663:
                                              *(_DWORD *)(a1 + 1248) = 1;
                                              goto LABEL_676;
                                            }
                                            WebCore::convertDictionary<WebCore::ApplePayLineItem>(v285, (uint64_t)a2, (uint64_t)v442);
                                            v286 = v445;
                                            if (!(_DWORD)v445)
                                            {
                                              v287 = v442[1];
                                              v288 = v442[2];
                                              v442[1] = 0;
                                              v442[2] = 0;
                                              *(_OWORD *)v311 = *(_OWORD *)&v442[3];
                                              *(_OWORD *)&v311[2] = *(_OWORD *)&v442[5];
                                              v289 = v443;
                                              v311[4] = v442[7];
                                              v443 = 0;
                                              v290 = v444;
                                              v393 = (char)v442[0];
                                              v291 = v394;
                                              v394 = v287;
                                              if (v291)
                                              {
                                                if (*(_DWORD *)v291 == 2)
                                                  WTF::StringImpl::destroy(v291, (WTF::StringImpl *)v11);
                                                else
                                                  *(_DWORD *)v291 -= 2;
                                              }
                                              v292 = v395;
                                              v395 = v288;
                                              if (v292)
                                              {
                                                if (*(_DWORD *)v292 == 2)
                                                  WTF::StringImpl::destroy(v292, (WTF::StringImpl *)v11);
                                                else
                                                  *(_DWORD *)v292 -= 2;
                                              }
                                              v396 = *(_OWORD *)v311;
                                              v397 = *(_OWORD *)&v311[2];
                                              v398 = (uint64_t)v311[4];
                                              v293 = v399;
                                              v399 = v289;
                                              if (v293)
                                              {
                                                if (*(_DWORD *)v293 == 2)
                                                  WTF::StringImpl::destroy(v293, (WTF::StringImpl *)v11);
                                                else
                                                  *(_DWORD *)v293 -= 2;
                                              }
                                              v400 = v290;
                                              WebCore::ApplePayPaymentRequest::ApplePayPaymentRequest(a1 + 8, (uint64_t)&v330);
                                              *(_DWORD *)(a1 + 1248) = 0;
                                              goto LABEL_675;
                                            }
                                            *(_DWORD *)(a1 + 1248) = 1;
                                            if ((_DWORD)v286 != -1)
LABEL_675:
                                              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B070[v286])(v311, v442);
LABEL_676:
                                            v294 = v322;
                                            if (v322 == -1)
                                              goto LABEL_678;
LABEL_677:
                                            ((void (*)(WTF::StringImpl **, JSC::VM **))off_1E334B060[v294])(v442, &v321);
                                            goto LABEL_678;
                                          }
                                          v270 = (WTF::StringImpl **)a2[7];
                                          v441 = v270;
                                          v442[0] = (WTF::StringImpl *)v268;
                                          if ((v268 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v268 + 5) != 2)
                                          {
                                            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v442, (JSC::JSGlobalObject *)a2);
                                            v271 = v311[0];
                                            if (v311[0])
                                              goto LABEL_592;
                                            goto LABEL_704;
                                          }
                                          v271 = *(WTF::StringImpl **)(v268 + 8);
                                          if ((v271 & 1) != 0)
                                          {
                                            v271 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v268, (JSC::JSGlobalObject *)a2);
                                            if (!v271)
                                            {
LABEL_591:
                                              v311[0] = v271;
                                              if (v271)
                                              {
LABEL_592:
                                                v272 = (const char *)*((_QWORD *)v271 + 1);
                                                v273 = *((_DWORD *)v271 + 1);
                                                v274 = ((unint64_t)*((unsigned int *)v271 + 4) >> 2) & 1;
                                                v275 = v273 != 8;
                                                if (v272 != "delivery" && v273 == 8)
                                                {
                                                  if ((_DWORD)v274)
                                                  {
                                                    if (*v272 != 100
                                                      || *(_DWORD *)(v272 + 1) != 1986620517
                                                      || *((_DWORD *)v272 + 1) != 2037540214)
                                                    {
                                                      goto LABEL_598;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    if (*(_WORD *)v272 != 100)
                                                    {
LABEL_598:
                                                      v275 = 0;
                                                      v276 = 8;
                                                      goto LABEL_599;
                                                    }
                                                    v275 = 0;
                                                    v276 = 8;
                                                    if (*(_QWORD *)(v272 + 2) != 0x760069006C0065
                                                      || *((_QWORD *)v272 + 1) != 0x79007200650076)
                                                    {
LABEL_599:
                                                      if (v272 == "shipping" || v275)
                                                      {
                                                        v277 = v274 << 32;
                                                        if (v272 == "shipping" && v273 == 8)
                                                          goto LABEL_651;
                                                      }
                                                      else
                                                      {
                                                        if (!v276)
                                                          goto LABEL_651;
                                                        if ((_DWORD)v274)
                                                        {
                                                          if (*v272 != 115
                                                            || *(_DWORD *)(v272 + 1) != 1886415208
                                                            || *((_DWORD *)v272 + 1) != 1735289200)
                                                          {
                                                            v277 = 1;
                                                            goto LABEL_607;
                                                          }
LABEL_651:
                                                          v278 = &off_1E3349438;
                                                          goto LABEL_652;
                                                        }
                                                        if (*(_WORD *)v272 != 115)
                                                        {
                                                          v277 = 0;
                                                          goto LABEL_607;
                                                        }
                                                        v277 = 0;
                                                        if (*(_QWORD *)(v272 + 2) == 0x70007000690068
                                                          && *((_QWORD *)v272 + 1) == 0x67006E00690070)
                                                        {
                                                          goto LABEL_651;
                                                        }
                                                      }
LABEL_607:
                                                      if (v272 == "storePickup" || v276 != 11)
                                                      {
                                                        if (v276 == 11 && v272 == "storePickup")
                                                          goto LABEL_613;
                                                      }
                                                      else if (v277)
                                                      {
                                                        if (*v272 == 115
                                                          && *(_QWORD *)(v272 + 1) == 0x6B63695065726F74
                                                          && *(_QWORD *)(v272 + 3) == 0x70756B6369506572)
                                                        {
LABEL_613:
                                                          v278 = &off_1E3349450;
LABEL_652:
                                                          v269 = *((_BYTE *)v278 + 16);
                                                          v282 = 1;
                                                          goto LABEL_653;
                                                        }
                                                      }
                                                      else if (*(_WORD *)v272 == 115)
                                                      {
                                                        v299 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v272 + 2), (int16x8_t)xmmword_1968DCD20);
                                                        v299.i16[0] = vminvq_u16(v299);
                                                        if (v299.i32[0])
                                                        {
                                                          v300 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v272 + 6), (int16x8_t)xmmword_1968DCA10);
                                                          v300.i16[0] = vminvq_u16(v300);
                                                          if (v300.i32[0])
                                                            goto LABEL_613;
                                                        }
                                                      }
                                                      v282 = 0;
                                                      v269 = 0;
LABEL_653:
                                                      v311[0] = 0;
                                                      if (*(_DWORD *)v271 == 2)
                                                        WTF::StringImpl::destroy(v271, (WTF::StringImpl *)v11);
                                                      else
                                                        *(_DWORD *)v271 -= 2;
LABEL_655:
                                                      if (*((_DWORD *)v270 + 20)
                                                        && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v270) & 1) != 0)
                                                      {
                                                        goto LABEL_663;
                                                      }
                                                      if (!v282)
                                                      {
                                                        JSC::throwTypeError();
                                                        goto LABEL_663;
                                                      }
                                                      goto LABEL_657;
                                                    }
                                                  }
LABEL_619:
                                                  v278 = &WebCore::parseEnumerationFromString<WebCore::ApplePaySessionPaymentRequestShippingType>(WTF::String const&)::mappings;
                                                  goto LABEL_652;
                                                }
                                                if (v272 == "delivery" && v273 == 8)
                                                  goto LABEL_619;
                                                if (v272 != "servicePickup" && v273 == 13)
                                                {
                                                  if ((_DWORD)v274)
                                                  {
                                                    if (*v272 == 115
                                                      && *(_QWORD *)(v272 + 1) == 0x6950656369767265
                                                      && *(_QWORD *)(v272 + 5) == 0x70756B6369506563)
                                                    {
                                                      goto LABEL_644;
                                                    }
                                                  }
                                                  else if (*(_WORD *)v272 == 115)
                                                  {
                                                    v301 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v272 + 2), (int16x8_t)xmmword_1968DCD00);
                                                    v301.i16[0] = vminvq_u16(v301);
                                                    if (v301.i32[0])
                                                    {
                                                      v302 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v272 + 10), (int16x8_t)xmmword_1968DCD10);
                                                      v302.i16[0] = vminvq_u16(v302);
                                                      if (v302.i32[0])
                                                        goto LABEL_644;
                                                    }
                                                  }
                                                  v276 = 13;
                                                  goto LABEL_599;
                                                }
                                                if (v272 != "servicePickup")
                                                {
                                                  v276 = *((_DWORD *)v271 + 1);
                                                  goto LABEL_599;
                                                }
                                                v276 = *((_DWORD *)v271 + 1);
                                                if (v273 != 13)
                                                  goto LABEL_599;
LABEL_644:
                                                v278 = &off_1E3349420;
                                                goto LABEL_652;
                                              }
LABEL_704:
                                              v269 = 0;
                                              v282 = 0;
                                              goto LABEL_655;
                                            }
                                          }
                                          else if (!v271)
                                          {
                                            goto LABEL_591;
                                          }
                                          *(_DWORD *)v271 += 2;
                                          goto LABEL_591;
                                        }
                                        WebCore::Detail::SequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayShippingMethod>>>::convert((uint64_t)v442, (JSC::JSGlobalObject *)a2, v260);
                                        v261 = (int)v442[2];
                                        if (LODWORD(v442[2]))
                                        {
                                          *(_DWORD *)(a1 + 1248) = 1;
                                          v265 = v261;
                                        }
                                        else
                                        {
                                          v262 = v442[0];
                                          v442[0] = 0;
                                          v263 = (int)v442[1];
                                          v264 = HIDWORD(v442[1]);
                                          v442[1] = 0;
                                          v265 = v392;
                                          if (!v392)
                                          {
                                            v389 = v262;
                                            v390 = v263;
                                            v391 = v264;
                                            v392 = 1;
                                            goto LABEL_578;
                                          }
                                          if (v391)
                                            WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(v389, (WTF *)((char *)v389 + 104 * v391));
                                          v266 = v389;
                                          if (v389)
                                          {
                                            v389 = 0;
                                            v390 = 0;
                                            WTF::fastFree(v266, v11);
                                          }
                                          v389 = v262;
                                          v390 = v263;
                                          v391 = v264;
                                          v265 = (int)v442[2];
                                        }
                                        if (v265 == -1)
                                        {
LABEL_579:
                                          if (v261)
                                            goto LABEL_676;
                                          goto LABEL_580;
                                        }
LABEL_578:
                                        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B140[v265])(v311, v442);
                                        goto LABEL_579;
                                      }
                                    }
                                    v227 = 0;
                                    *(_DWORD *)(a1 + 1248) = 1;
                                    goto LABEL_512;
                                  }
                                  WebCore::convertDictionary<WebCore::ApplePayDisbursementRequest>(v200, (JSC::JSGlobalObject *)a2, (uint64_t)v442);
                                  v201 = (int)v442[4];
                                  if (LODWORD(v442[4]))
                                  {
                                    *(_DWORD *)(a1 + 1248) = 1;
                                    v209 = v201;
LABEL_470:
                                    if (v209 != -1)
                                      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B0F0[v209])(v311, &v442[1]);
                                    if (v201)
                                      goto LABEL_676;
                                    goto LABEL_473;
                                  }
                                  v202 = LOBYTE(v442[3]);
                                  if (LOBYTE(v442[3]))
                                  {
                                    v203 = v442[1];
                                    v442[1] = 0;
                                    LODWORD(v3) = v442[2];
                                    v310 = HIDWORD(v442[2]);
                                    v442[2] = 0;
                                    v204 = 1;
                                    if (!v439)
                                    {
                                      v435 = v203;
                                      v436 = v3;
                                      v437 = v310;
                                      v438 = 1;
LABEL_467:
                                      v439 = 1;
LABEL_469:
                                      v209 = (int)v442[4];
                                      goto LABEL_470;
                                    }
                                  }
                                  else
                                  {
                                    if (!v439)
                                    {
                                      LOBYTE(v435) = 0;
                                      v438 = 0;
                                      goto LABEL_467;
                                    }
                                    v203 = 0;
                                    v204 = 0;
                                  }
                                  if (v438 == v204)
                                  {
                                    if (v438)
                                    {
                                      v206 = v435;
                                      if (v435)
                                      {
                                        v435 = 0;
                                        v436 = 0;
                                        WTF::fastFree(v206, v11);
                                      }
                                      v435 = v203;
                                      v436 = v3;
                                      v437 = v310;
                                      goto LABEL_469;
                                    }
                                  }
                                  else
                                  {
                                    if (!v438)
                                    {
                                      v435 = v203;
                                      v436 = v3;
                                      v437 = v310;
                                      v438 = 1;
                                      goto LABEL_469;
                                    }
                                    v207 = v435;
                                    if (v435)
                                    {
                                      v435 = 0;
                                      v436 = 0;
                                      WTF::fastFree(v207, v11);
                                    }
                                    v438 = 0;
                                  }
                                  if (v202 && v203)
                                    WTF::fastFree(v203, v11);
                                  goto LABEL_469;
                                }
                                v177 = *(WTF::StringImpl **)(v175 + 8);
                                if ((v177 & 1) != 0)
                                {
                                  v177 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v175, (JSC::JSGlobalObject *)a2);
                                  if (!v177)
                                    goto LABEL_372;
                                }
                                else if (!v177)
                                {
LABEL_372:
                                  v311[0] = v177;
                                  goto LABEL_373;
                                }
                                *(_DWORD *)v177 += 2;
                                goto LABEL_372;
                              }
                            }
                            *(_DWORD *)(a1 + 1248) = 1;
                            goto LABEL_679;
                          }
                        }
                        v143 = 0;
                        *(_DWORD *)(a1 + 1248) = 1;
                        goto LABEL_289;
                      }
LABEL_299:
                      v95 = 0;
                      goto LABEL_300;
                    }
                    v296 = v311[0];
                    v110 = 1;
                    LODWORD(v442[2]) = 1;
                    if (v311[0])
                    {
                      v311[0] = 0;
                      LODWORD(v311[1]) = 0;
                      v105 = WTF::fastFree(v296, v106);
                      v110 = (int)v442[2];
                      if (!LODWORD(v442[2]))
                      {
                        v107 = v442[0];
                        v108 = (int)v442[1];
                        LODWORD(v3) = HIDWORD(v442[1]);
                        goto LABEL_226;
                      }
                    }
                  }
                  v113 = 0;
                  *(_DWORD *)(a1 + 1248) = 1;
                  goto LABEL_243;
                }
                v311[0] = (WTF::StringImpl *)v78;
                v79 = a2[7];
                if ((v78 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v78 + 5) != 2)
                {
                  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v311, (JSC::JSGlobalObject *)a2);
LABEL_164:
                  if (!*((_DWORD *)v79 + 20))
                  {
                    v81 = v323;
LABEL_166:
                    LODWORD(v442[1]) = 0;
LABEL_167:
                    v442[0] = 0;
                    v82 = (WTF::StringImpl *)v387;
                    *(_QWORD *)&v387 = v81;
                    if (!v82)
                    {
LABEL_170:
                      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)v311, (WTF::StringImpl *)v442);
                      goto LABEL_171;
                    }
                    if (*(_DWORD *)v82 != 2)
                    {
                      *(_DWORD *)v82 -= 2;
                      goto LABEL_170;
                    }
                    WTF::StringImpl::destroy(v82, v77);
                    v114 = 1;
                    v115 = (int)v442[1];
                    goto LABEL_237;
                  }
                  v280 = JSC::VM::hasExceptionsAfterHandlingTraps(v79);
                  v81 = v323;
                  if ((v280 & 1) == 0)
                    goto LABEL_166;
                  LODWORD(v442[1]) = 1;
                  v323 = 0;
                  if (v81)
                  {
                    if (*(_DWORD *)v81 == 2)
                    {
                      WTF::StringImpl::destroy(v81, v77);
                      v115 = (int)v442[1];
                      if (!LODWORD(v442[1]))
                      {
                        v81 = v442[0];
                        goto LABEL_167;
                      }
LABEL_630:
                      v114 = 0;
                      *(_DWORD *)(a1 + 1248) = 1;
LABEL_237:
                      if (v115 != -1)
                        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v115])(v311, v442);
                      if ((v114 & 1) == 0)
                        goto LABEL_299;
                      goto LABEL_171;
                    }
                    *(_DWORD *)v81 -= 2;
                  }
                  v115 = 1;
                  goto LABEL_630;
                }
                v80 = *(WTF::StringImpl **)(v78 + 8);
                if ((v80 & 1) != 0)
                {
                  v80 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v78, (JSC::JSGlobalObject *)a2);
                  if (!v80)
                    goto LABEL_163;
                }
                else if (!v80)
                {
LABEL_163:
                  v323 = v80;
                  goto LABEL_164;
                }
                *(_DWORD *)v80 += 2;
                goto LABEL_163;
              }
              *(_DWORD *)v41 -= 2;
            }
            v97 = 1;
            goto LABEL_441;
          }
          v40 = *(WTF::StringImpl **)(v38 + 8);
          if ((v40 & 1) != 0)
          {
            v40 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v38, (JSC::JSGlobalObject *)a2);
            if (!v40)
              goto LABEL_77;
          }
          else if (!v40)
          {
LABEL_77:
            v326[0] = v40;
            goto LABEL_78;
          }
          *(_DWORD *)v40 += 2;
          goto LABEL_77;
        }
        v34 = *(WTF::StringImpl **)(v32 + 8);
        if ((v34 & 1) != 0)
        {
          v34 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v32, (JSC::JSGlobalObject *)a2);
          if (!v34)
            goto LABEL_61;
        }
        else if (!v34)
        {
LABEL_61:
          v311[0] = v34;
          goto LABEL_62;
        }
        *(_DWORD *)v34 += 2;
        goto LABEL_61;
      }
      v311[0] = (WTF::StringImpl *)v12;
      v13 = a2[7];
      if ((v12 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v12 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v311, (JSC::JSGlobalObject *)a2);
LABEL_25:
        if (!*((_DWORD *)v13 + 20))
        {
          v15 = v326[0];
LABEL_27:
          LODWORD(v442[1]) = 0;
LABEL_28:
          v442[0] = 0;
          v16 = v369;
          v369 = v15;
          if (!v16)
          {
LABEL_31:
            _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)v311, (WTF::StringImpl *)v442);
            goto LABEL_32;
          }
          if (*(_DWORD *)v16 != 2)
          {
            *(_DWORD *)v16 -= 2;
            goto LABEL_31;
          }
          WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v11);
          v54 = 1;
          v55 = (int)v442[1];
LABEL_111:
          if (v55 != -1)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v55])(v311, v442);
          if ((v54 & 1) == 0)
            goto LABEL_55;
          goto LABEL_32;
        }
        v195 = JSC::VM::hasExceptionsAfterHandlingTraps(v13);
        v15 = v326[0];
        if ((v195 & 1) == 0)
          goto LABEL_27;
        LODWORD(v442[1]) = 1;
        v326[0] = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
          {
            WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v11);
            v55 = (int)v442[1];
            if (!LODWORD(v442[1]))
            {
              v15 = v442[0];
              goto LABEL_28;
            }
LABEL_403:
            v54 = 0;
            *(_DWORD *)(a1 + 1248) = 1;
            goto LABEL_111;
          }
          *(_DWORD *)v15 -= 2;
        }
        v55 = 1;
        goto LABEL_403;
      }
      v14 = *(WTF::StringImpl **)(v12 + 8);
      if ((v14 & 1) != 0)
      {
        v14 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, (JSC::JSGlobalObject *)a2);
        if (!v14)
          goto LABEL_24;
      }
      else if (!v14)
      {
LABEL_24:
        v326[0] = v14;
        goto LABEL_25;
      }
      *(_DWORD *)v14 += 2;
      goto LABEL_24;
    }
  }
  JSC::throwTypeError();
  *(_DWORD *)(a1 + 1248) = 1;
}

uint64_t WebCore::convertDictionary<WebCore::ApplePayPaymentTokenContext>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t result;
  JSC::VM *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  JSC::VM *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  JSC::VM *v25;
  WTF::StringImpl *v26;
  int v27;
  int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  JSC::VM *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  JSC::VM *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  int v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v48;
  int v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  WTF::StringImpl *v53;
  int v54;
  WTF::StringImpl *v55;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59;
  int v60;
  JSC::VM *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;

  v61 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_9;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    goto LABEL_10;
  }
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v59);
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, v7);
    else
      *(_DWORD *)v59 -= 2;
  }
  if (*((_DWORD *)v61 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v61);
    if ((_DWORD)result)
      goto LABEL_10;
  }
  if (v8 == 10)
  {
LABEL_9:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v61, "amount", 7, "ApplePayPaymentTokenContext", 28, "DOMString", 10);
LABEL_10:
    *(_DWORD *)(a3 + 40) = 1;
    return result;
  }
  v57 = (WTF::StringImpl *)v8;
  v10 = a2[7];
  if ((v8 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v8 + 5) == 2)
  {
    v11 = *(WTF::StringImpl **)(v8 + 8);
    if ((v11 & 1) != 0)
    {
      v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a2);
      if (!v11)
        goto LABEL_16;
    }
    else if (!v11)
    {
LABEL_16:
      v55 = v11;
      goto LABEL_17;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_16;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v57, (JSC::JSGlobalObject *)a2);
LABEL_17:
  if (!*((_DWORD *)v10 + 20))
  {
    v12 = v55;
    goto LABEL_19;
  }
  v12 = v55;
  if (!JSC::VM::hasExceptionsAfterHandlingTraps(v10))
  {
LABEL_19:
    v60 = 0;
    v59 = 0;
    WTF::AtomStringImpl::addLiteral();
    v13 = v57;
    v15 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v57);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v14);
      else
        *(_DWORD *)v13 -= 2;
    }
    if (*((_DWORD *)v61 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v61))
      goto LABEL_25;
    if (v15 == 10)
    {
      WebCore::throwRequiredMemberTypeError((int)a2, (int)&v61, "externalIdentifier", 19, "ApplePayPaymentTokenContext", 28, "DOMString", 10);
LABEL_25:
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      *(_DWORD *)(a3 + 40) = 1;
      goto LABEL_91;
    }
    v55 = (WTF::StringImpl *)v15;
    v20 = a2[7];
    if ((v15 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v15 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v55, (JSC::JSGlobalObject *)a2);
LABEL_32:
      if (*((_DWORD *)v20 + 20))
      {
        v18 = v53;
        if (JSC::VM::hasExceptionsAfterHandlingTraps(v20))
        {
          v32 = 1;
          v58 = 1;
          v53 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v46);
            else
              *(_DWORD *)v18 -= 2;
          }
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_DWORD *)(a3 + 40) = 1;
          goto LABEL_90;
        }
      }
      else
      {
        v18 = v53;
      }
      v58 = 0;
      v57 = 0;
      WTF::AtomStringImpl::addLiteral();
      v22 = v55;
      v24 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v55);
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v23);
        else
          *(_DWORD *)v22 -= 2;
      }
      if (*((_DWORD *)v61 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v61))
      {
        v32 = 0;
        v17 = 0;
        goto LABEL_58;
      }
      if (v24 == 10)
      {
        v17 = 0;
        goto LABEL_51;
      }
      v53 = (WTF::StringImpl *)v24;
      v25 = a2[7];
      if ((v24 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v24 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v53, (JSC::JSGlobalObject *)a2);
LABEL_46:
        if (*((_DWORD *)v25 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v25);
          v17 = v63;
          if ((hasExceptionsAfterHandlingTraps & 1) != 0)
          {
            v27 = 1;
            v56 = 1;
            v63 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
              {
                WTF::StringImpl::destroy(v17, v48);
                v27 = v56;
                if (v56)
                {
                  *(_DWORD *)(a3 + 40) = 1;
                  if (v27 == -1)
                  {
                    v32 = 0;
                    v17 = 0;
                    goto LABEL_76;
                  }
                  v17 = 0;
                  v28 = 0;
LABEL_50:
                  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v27])(&v53, &v55);
                  if (v28)
                  {
LABEL_51:
                    WTF::AtomStringImpl::addLiteral();
                    v29 = v55;
                    v31 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v55);
                    if (v29)
                    {
                      if (*(_DWORD *)v29 == 2)
                        WTF::StringImpl::destroy(v29, v30);
                      else
                        *(_DWORD *)v29 -= 2;
                    }
                    if (*((_DWORD *)v61 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v61))
                      goto LABEL_57;
                    if (v31 == 10)
                    {
                      WebCore::throwRequiredMemberTypeError((int)a2, (int)&v61, "merchantIdentifier", 19, "ApplePayPaymentTokenContext", 28, "DOMString", 10);
LABEL_57:
                      v32 = 0;
LABEL_58:
                      v19 = 0;
                      *(_DWORD *)(a3 + 40) = 1;
LABEL_90:
                      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v32])(&v55, &v57);
                      v16 = 0;
                      goto LABEL_91;
                    }
                    v53 = (WTF::StringImpl *)v31;
                    v33 = a2[7];
                    if ((v31 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v31 + 5) != 2)
                    {
                      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v53, (JSC::JSGlobalObject *)a2);
LABEL_65:
                      if (*((_DWORD *)v33 + 20))
                      {
                        v49 = JSC::VM::hasExceptionsAfterHandlingTraps(v33);
                        v19 = v63;
                        if (v49)
                        {
                          v38 = 1;
                          v56 = 1;
                          v63 = 0;
                          if (v19)
                          {
                            if (*(_DWORD *)v19 == 2)
                              WTF::StringImpl::destroy(v19, v50);
                            else
                              *(_DWORD *)v19 -= 2;
                          }
                          v19 = 0;
                          *(_DWORD *)(a3 + 40) = 1;
                          goto LABEL_89;
                        }
                      }
                      else
                      {
                        v19 = v63;
                      }
                      v56 = 0;
                      v55 = 0;
                      WTF::AtomStringImpl::addLiteral();
                      v35 = v53;
                      v37 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v53);
                      if (v35)
                      {
                        if (*(_DWORD *)v35 == 2)
                          WTF::StringImpl::destroy(v35, v36);
                        else
                          *(_DWORD *)v35 -= 2;
                      }
                      if (*((_DWORD *)v61 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v61))
                        goto LABEL_73;
                      if (v37 == 10)
                      {
                        WebCore::throwRequiredMemberTypeError((int)a2, (int)&v61, "merchantName", 13, "ApplePayPaymentTokenContext", 28, "DOMString", 10);
LABEL_73:
                        v38 = 0;
                        *(_DWORD *)(a3 + 40) = 1;
LABEL_89:
                        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v38])(&v53, &v55);
                        v32 = 0;
                        goto LABEL_90;
                      }
                      v63 = (WTF::StringImpl *)v37;
                      v39 = a2[7];
                      if ((v37 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v37 + 5) != 2)
                      {
                        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v63, (JSC::JSGlobalObject *)a2);
LABEL_85:
                        if (*((_DWORD *)v39 + 20))
                        {
                          v52 = JSC::VM::hasExceptionsAfterHandlingTraps(v39);
                          v41 = v62;
                          if (v52)
                          {
                            v54 = 1;
                            v62 = 0;
                            if (v41)
                            {
                              if (*(_DWORD *)v41 == 2)
                                WTF::StringImpl::destroy(v41, v51);
                              else
                                *(_DWORD *)v41 -= 2;
                            }
                            v42 = 1;
                            v43 = 1;
                            goto LABEL_88;
                          }
                        }
                        else
                        {
                          v41 = v62;
                        }
                        v42 = 0;
                        v43 = 0;
                        v54 = 0;
                        v53 = 0;
                        *(_QWORD *)a3 = v19;
                        *(_QWORD *)(a3 + 8) = v18;
                        *(_QWORD *)(a3 + 16) = v41;
                        *(_QWORD *)(a3 + 24) = v17;
                        *(_QWORD *)(a3 + 32) = v12;
                        v12 = 0;
                        v17 = 0;
                        v18 = 0;
                        v19 = 0;
LABEL_88:
                        *(_DWORD *)(a3 + 40) = v43;
                        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v42])(&v63, &v53);
                        v38 = 0;
                        goto LABEL_89;
                      }
                      v40 = *(WTF::StringImpl **)(v37 + 8);
                      if ((v40 & 1) != 0)
                      {
                        v40 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v37, (JSC::JSGlobalObject *)a2);
                        if (!v40)
                          goto LABEL_84;
                      }
                      else if (!v40)
                      {
LABEL_84:
                        v62 = v40;
                        goto LABEL_85;
                      }
                      *(_DWORD *)v40 += 2;
                      goto LABEL_84;
                    }
                    v34 = *(WTF::StringImpl **)(v31 + 8);
                    if ((v34 & 1) != 0)
                    {
                      v34 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v31, (JSC::JSGlobalObject *)a2);
                      if (!v34)
                        goto LABEL_64;
                    }
                    else if (!v34)
                    {
LABEL_64:
                      v63 = v34;
                      goto LABEL_65;
                    }
                    *(_DWORD *)v34 += 2;
                    goto LABEL_64;
                  }
                  v32 = 0;
LABEL_76:
                  v19 = 0;
                  goto LABEL_90;
                }
                v17 = v55;
LABEL_49:
                v27 = 0;
                v55 = 0;
                v28 = 1;
                goto LABEL_50;
              }
              *(_DWORD *)v17 -= 2;
            }
            v17 = 0;
            v28 = 0;
            *(_DWORD *)(a3 + 40) = 1;
            goto LABEL_50;
          }
        }
        else
        {
          v17 = v63;
        }
        v56 = 0;
        goto LABEL_49;
      }
      v26 = *(WTF::StringImpl **)(v24 + 8);
      if ((v26 & 1) != 0)
      {
        v26 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v24, (JSC::JSGlobalObject *)a2);
        if (!v26)
          goto LABEL_45;
      }
      else if (!v26)
      {
LABEL_45:
        v63 = v26;
        goto LABEL_46;
      }
      *(_DWORD *)v26 += 2;
      goto LABEL_45;
    }
    v21 = *(WTF::StringImpl **)(v15 + 8);
    if ((v21 & 1) != 0)
    {
      v21 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v15, (JSC::JSGlobalObject *)a2);
      if (!v21)
        goto LABEL_31;
    }
    else if (!v21)
    {
LABEL_31:
      v53 = v21;
      goto LABEL_32;
    }
    *(_DWORD *)v21 += 2;
    goto LABEL_31;
  }
  v16 = 1;
  v60 = 1;
  v55 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v45);
    else
      *(_DWORD *)v12 -= 2;
  }
  v12 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  *(_DWORD *)(a3 + 40) = 1;
LABEL_91:
  result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v16])(&v57, &v59);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      result = WTF::StringImpl::destroy(v12, v44);
      if (!v17)
        goto LABEL_97;
      goto LABEL_95;
    }
    *(_DWORD *)v12 -= 2;
  }
  if (!v17)
    goto LABEL_97;
LABEL_95:
  if (*(_DWORD *)v17 == 2)
    result = WTF::StringImpl::destroy(v17, v44);
  else
    *(_DWORD *)v17 -= 2;
LABEL_97:
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      result = WTF::StringImpl::destroy(v18, v44);
      if (!v19)
        return result;
      goto LABEL_101;
    }
    *(_DWORD *)v18 -= 2;
  }
  if (!v19)
    return result;
LABEL_101:
  if (*(_DWORD *)v19 == 2)
    return WTF::StringImpl::destroy(v19, v44);
  *(_DWORD *)v19 -= 2;
  return result;
}

unint64_t WebCore::convertDictionaryToJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, const WebCore::ApplePayPaymentTokenContext *a4)
{
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned __int8 *v44;
  unsigned int v45;
  unsigned __int8 *v46;
  unsigned int v47;
  unsigned __int8 *v48;
  unsigned int v49;
  unsigned __int8 *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  WTF::StringImpl *v57;
  unint64_t v58;
  int v59;
  int v60;
  uint64_t v61;

  v6 = *((_QWORD *)this + 7);
  v7 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v8 = 8 * *(unsigned __int8 *)(v7 + 14);
  v9 = JSC::allocateCell<JSC::JSFinalObject>(v6, v8 + 16);
  v10 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)v9 = v7 >> 4;
  *(_DWORD *)(v9 + 4) = v10;
  *(_QWORD *)(v9 + 8) = 0;
  bzero((void *)(v9 + 16), v8);
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  v11 = *((_QWORD *)this + 7);
  v12 = *((_QWORD *)a3 + 4);
  if (!v12 || (v13 = *(_DWORD *)(v12 + 4)) == 0)
  {
    v14 = *(_QWORD *)(v11 + 41968);
    goto LABEL_9;
  }
  if (v13 == 1)
  {
    v42 = *(unsigned __int8 **)(v12 + 8);
    if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    {
      v43 = *v42;
    }
    else
    {
      v52 = *(unsigned __int16 *)v42;
      if (v52 > 0xFF)
        goto LABEL_6;
      v43 = v52;
    }
    v14 = *(_QWORD *)(v11 + 8 * v43 + 42216);
    goto LABEL_9;
  }
LABEL_6:
  v14 = *(_QWORD *)(v11 + 64760);
  if (!v14 || v12 != *(_QWORD *)(v14 + 8))
    v14 = JSC::jsStringWithCacheSlowCase();
LABEL_9:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v15 = v57;
  v57 = 0;
  v58 = v9;
  v59 = -1;
  v60 = 0x1000000;
  v61 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v15, v14, 0, (uint64_t)&v57);
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v16);
    else
      *(_DWORD *)v15 -= 2;
  }
  v17 = *((_QWORD *)this + 7);
  v18 = *((_QWORD *)a3 + 1);
  if (!v18 || (v19 = *(_DWORD *)(v18 + 4)) == 0)
  {
    v20 = *(_QWORD *)(v17 + 41968);
    goto LABEL_19;
  }
  if (v19 == 1)
  {
    v44 = *(unsigned __int8 **)(v18 + 8);
    if ((*(_BYTE *)(v18 + 16) & 4) != 0)
    {
      v45 = *v44;
    }
    else
    {
      v53 = *(unsigned __int16 *)v44;
      if (v53 > 0xFF)
        goto LABEL_16;
      v45 = v53;
    }
    v20 = *(_QWORD *)(v17 + 8 * v45 + 42216);
    goto LABEL_19;
  }
LABEL_16:
  v20 = *(_QWORD *)(v17 + 64760);
  if (!v20 || v18 != *(_QWORD *)(v20 + 8))
    v20 = JSC::jsStringWithCacheSlowCase();
LABEL_19:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v21 = v57;
  v57 = 0;
  v58 = v9;
  v59 = -1;
  v60 = 0x1000000;
  v61 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v21, v20, 0, (uint64_t)&v57);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v22);
    else
      *(_DWORD *)v21 -= 2;
  }
  v23 = *((_QWORD *)a3 + 3);
  if (!v23)
    goto LABEL_33;
  v24 = *((_QWORD *)this + 7);
  v25 = *(_DWORD *)(v23 + 4);
  if (v25)
  {
    if (v25 != 1)
    {
LABEL_26:
      v26 = *(_QWORD *)(v24 + 64760);
      if (!v26 || v23 != *(_QWORD *)(v26 + 8))
        v26 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_29;
    }
    v50 = *(unsigned __int8 **)(v23 + 8);
    if ((*(_BYTE *)(v23 + 16) & 4) != 0)
    {
      v51 = *v50;
    }
    else
    {
      v56 = *(unsigned __int16 *)v50;
      if (v56 > 0xFF)
        goto LABEL_26;
      v51 = v56;
    }
    v26 = *(_QWORD *)(v24 + 8 * v51 + 42216);
  }
  else
  {
    v26 = *(_QWORD *)(v24 + 41968);
  }
LABEL_29:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v27 = v57;
  v57 = 0;
  v58 = v9;
  v59 = -1;
  v60 = 0x1000000;
  v61 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v27, v26, 0, (uint64_t)&v57);
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v28);
    else
      *(_DWORD *)v27 -= 2;
  }
LABEL_33:
  v29 = *((_QWORD *)this + 7);
  v30 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3 || (v31 = *(_DWORD *)(v30 + 4)) == 0)
  {
    v32 = *(_QWORD *)(v29 + 41968);
    goto LABEL_39;
  }
  if (v31 == 1)
  {
    v46 = *(unsigned __int8 **)(v30 + 8);
    if ((*(_BYTE *)(v30 + 16) & 4) != 0)
    {
      v47 = *v46;
    }
    else
    {
      v54 = *(unsigned __int16 *)v46;
      if (v54 > 0xFF)
        goto LABEL_36;
      v47 = v54;
    }
    v32 = *(_QWORD *)(v29 + 8 * v47 + 42216);
    goto LABEL_39;
  }
LABEL_36:
  v32 = *(_QWORD *)(v29 + 64760);
  if (!v32 || v30 != *(_QWORD *)(v32 + 8))
    v32 = JSC::jsStringWithCacheSlowCase();
LABEL_39:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v33 = v57;
  v57 = 0;
  v58 = v9;
  v59 = -1;
  v60 = 0x1000000;
  v61 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v33, v32, 0, (uint64_t)&v57);
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v34);
    else
      *(_DWORD *)v33 -= 2;
  }
  v35 = *((_QWORD *)this + 7);
  v36 = *((_QWORD *)a3 + 2);
  if (!v36 || (v37 = *(_DWORD *)(v36 + 4)) == 0)
  {
    v38 = *(_QWORD *)(v35 + 41968);
    goto LABEL_49;
  }
  if (v37 == 1)
  {
    v48 = *(unsigned __int8 **)(v36 + 8);
    if ((*(_BYTE *)(v36 + 16) & 4) != 0)
    {
      v49 = *v48;
    }
    else
    {
      v55 = *(unsigned __int16 *)v48;
      if (v55 > 0xFF)
        goto LABEL_46;
      v49 = v55;
    }
    v38 = *(_QWORD *)(v35 + 8 * v49 + 42216);
    goto LABEL_49;
  }
LABEL_46:
  v38 = *(_QWORD *)(v35 + 64760);
  if (!v38 || v36 != *(_QWORD *)(v38 + 8))
    v38 = JSC::jsStringWithCacheSlowCase();
LABEL_49:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v39 = v57;
  v57 = 0;
  v58 = v9;
  v59 = -1;
  v60 = 0x1000000;
  v61 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v39, v38, 0, (uint64_t)&v57);
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v40);
    else
      *(_DWORD *)v39 -= 2;
  }
  return v9;
}

void WebCore::convertDictionary<WebCore::ApplePayRecurringPaymentRequest>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *a2@<X0>, uint64_t a3@<X8>)
{
  unint64_t v5;
  JSC::Structure *Object;
  WTF::StringImpl *v7;
  uint64_t v8;
  JSC::VM *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  JSC::VM *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  JSC::VM *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  JSC::JSCell *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  __int16 v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  JSC::VM *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  JSC::JSCell *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  __int16 v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  char v58;
  int v59;
  __int128 v60;
  __int128 v61;
  WTF::StringImpl *v62;
  __int128 v63;
  __int128 v64;
  WTF::StringImpl *v65;
  __int128 v66;
  WTF::StringImpl *v67;
  char v68;
  int v69;
  char v70;
  int hasExceptionsAfterHandlingTraps;
  int v72;
  char v73;
  WTF::StringImpl *v74[2];
  __int128 v75;
  uint64_t v76;
  WTF::StringImpl *v77[2];
  _BYTE v78[24];
  __int128 v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  __int16 v82;
  unsigned int v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  __int16 v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  WTF::StringImpl *v97;
  char v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[24];
  WTF::StringImpl *v102;
  __int16 v103;
  char v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  __int16 v110;
  char v111;
  __int128 v112;
  WTF::StringImpl *v113;
  JSC::VM *v114;
  WTF::StringImpl *v115;

  v114 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v5 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
    goto LABEL_5;
  }
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::Structure *)JSC::JSCell::getObject(this);
    if (Object)
    {
LABEL_5:
      v97 = 0;
      v98 = 1;
      v99 = 0uLL;
      LOBYTE(v100) = 0;
      *((_QWORD *)&v100 + 1) = 0x7FF8000000000000;
      v101[0] = 1;
      *(_DWORD *)&v101[4] = 1;
      *(int64x2_t *)&v101[8] = vdupq_n_s64(0x7FF8000000000000uLL);
      v102 = 0;
      v103 = 0;
      v104 = 0;
      v111 = 0;
      v113 = 0;
      v112 = 0uLL;
      if (v5 == 2)
      {
LABEL_29:
        WebCore::throwRequiredMemberTypeError((int)a2, (int)&v114, "managementURL", 14, "ApplePayRecurringPaymentRequest", 32, "DOMString", 10);
        *(_DWORD *)(a3 + 200) = 1;
LABEL_138:
        WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)&v97, v7);
        return;
      }
      WTF::AtomStringImpl::addLiteral();
      v8 = JSC::JSObject::get(Object, a2, (unint64_t)v84);
      if (v84)
      {
        if (*(_DWORD *)v84 == 2)
          WTF::StringImpl::destroy(v84, v7);
        else
          *(_DWORD *)v84 -= 2;
      }
      if (*((_DWORD *)v114 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v114))
        goto LABEL_164;
      if (v8 == 10)
      {
LABEL_24:
        WTF::AtomStringImpl::addLiteral();
        v13 = v84;
        v14 = JSC::JSObject::get(Object, a2, (unint64_t)v84);
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v7);
          else
            *(_DWORD *)v13 -= 2;
        }
        if (*((_DWORD *)v114 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v114))
        {
LABEL_164:
          *(_DWORD *)(a3 + 200) = 1;
          goto LABEL_138;
        }
        if (v14 == 10)
          goto LABEL_29;
        v84 = (WTF::StringImpl *)v14;
        v15 = (JSC::VM *)*((_QWORD *)a2 + 7);
        if ((v14 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v14 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v84, a2);
LABEL_36:
          if (*((_DWORD *)v15 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v15);
            v17 = v77[0];
            if (hasExceptionsAfterHandlingTraps)
            {
              v96 = 1;
              v77[0] = 0;
              if (v17)
              {
                if (*(_DWORD *)v17 == 2)
                  WTF::StringImpl::destroy(v17, v7);
                else
                  *(_DWORD *)v17 -= 2;
              }
              v22 = 1;
              goto LABEL_48;
            }
          }
          else
          {
            v17 = v77[0];
          }
          v96 = 0;
          v95 = 0;
          v18 = (WTF::StringImpl *)*((_QWORD *)&v112 + 1);
          *((_QWORD *)&v112 + 1) = v17;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v7);
            else
              *(_DWORD *)v18 -= 2;
          }
          WTF::AtomStringImpl::addLiteral();
          v19 = v84;
          v21 = JSC::JSObject::get(Object, a2, (unint64_t)v84);
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v20);
            else
              *(_DWORD *)v19 -= 2;
          }
          if (*((_DWORD *)v114 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v114) & 1) != 0)
          {
LABEL_47:
            v22 = 0;
LABEL_48:
            *(_DWORD *)(a3 + 200) = 1;
            goto LABEL_137;
          }
          if (v21 == 10)
          {
            WebCore::throwRequiredMemberTypeError((int)a2, (int)&v114, "paymentDescription", 19, "ApplePayRecurringPaymentRequest", 32, "DOMString", 10);
            goto LABEL_47;
          }
          v84 = (WTF::StringImpl *)v21;
          v23 = (JSC::VM *)*((_QWORD *)a2 + 7);
          if ((v21 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v21 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v84, a2);
LABEL_55:
            if (*((_DWORD *)v23 + 20))
            {
              v72 = JSC::VM::hasExceptionsAfterHandlingTraps(v23);
              v25 = v77[0];
              if (v72)
              {
                v94 = 1;
                v77[0] = 0;
                if (v25)
                {
                  if (*(_DWORD *)v25 == 2)
                    WTF::StringImpl::destroy(v25, v20);
                  else
                    *(_DWORD *)v25 -= 2;
                }
                v30 = 1;
                goto LABEL_67;
              }
            }
            else
            {
              v25 = v77[0];
            }
            v94 = 0;
            v93 = 0;
            v26 = v97;
            v97 = v25;
            if (v26)
            {
              if (*(_DWORD *)v26 == 2)
                WTF::StringImpl::destroy(v26, v20);
              else
                *(_DWORD *)v26 -= 2;
            }
            WTF::AtomStringImpl::addLiteral();
            v27 = v84;
            v29 = (JSC::JSCell *)JSC::JSObject::get(Object, a2, (unint64_t)v84);
            if (v27)
            {
              if (*(_DWORD *)v27 == 2)
                WTF::StringImpl::destroy(v27, v28);
              else
                *(_DWORD *)v27 -= 2;
            }
            if (*((_DWORD *)v114 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v114) & 1) != 0)
            {
LABEL_66:
              v30 = 0;
LABEL_67:
              *(_DWORD *)(a3 + 200) = 1;
LABEL_135:
              ((void (*)(WTF::StringImpl **, uint64_t *))off_1E334B060[v30])(&v84, &v93);
LABEL_136:
              v22 = v96;
              if (v96 == -1)
                goto LABEL_138;
LABEL_137:
              ((void (*)(WTF::StringImpl **, uint64_t *))off_1E334B060[v22])(&v84, &v95);
              goto LABEL_138;
            }
            if (v29 == (JSC::JSCell *)10)
            {
              WebCore::throwRequiredMemberTypeError((int)a2, (int)&v114, "regularBilling", 15, "ApplePayRecurringPaymentRequest", 32, "ApplePayLineItem", 17);
              goto LABEL_66;
            }
            WebCore::convertDictionary<WebCore::ApplePayLineItem>(v29, (uint64_t)a2, (uint64_t)&v84);
            v31 = v92;
            if (v92)
            {
              *(_DWORD *)(a3 + 200) = 1;
              if ((_DWORD)v31 == -1)
              {
LABEL_134:
                v30 = v94;
                if (v94 == -1)
                  goto LABEL_136;
                goto LABEL_135;
              }
              goto LABEL_133;
            }
            v32 = v85;
            v33 = v86;
            v85 = 0;
            v86 = 0;
            *(_OWORD *)v77 = v87;
            *(_OWORD *)v78 = v88;
            v34 = v90;
            *(_QWORD *)&v78[16] = v89;
            v90 = 0;
            v35 = v91;
            v98 = (char)v84;
            v36 = (WTF::StringImpl *)v99;
            *(_QWORD *)&v99 = v32;
            if (v36)
            {
              if (*(_DWORD *)v36 == 2)
                WTF::StringImpl::destroy(v36, v7);
              else
                *(_DWORD *)v36 -= 2;
            }
            v37 = (WTF::StringImpl *)*((_QWORD *)&v99 + 1);
            *((_QWORD *)&v99 + 1) = v33;
            if (v37)
            {
              if (*(_DWORD *)v37 == 2)
                WTF::StringImpl::destroy(v37, v7);
              else
                *(_DWORD *)v37 -= 2;
            }
            v100 = *(_OWORD *)v77;
            *(_OWORD *)v101 = *(_OWORD *)v78;
            v38 = v102;
            *(_QWORD *)&v101[16] = *(_QWORD *)&v78[16];
            v102 = v34;
            if (v38)
            {
              if (*(_DWORD *)v38 == 2)
                WTF::StringImpl::destroy(v38, v7);
              else
                *(_DWORD *)v38 -= 2;
            }
            v103 = v35;
            WTF::AtomStringImpl::addLiteral();
            v39 = v77[0];
            v41 = JSC::JSObject::get(Object, a2, (unint64_t)v77[0]);
            if (v39)
            {
              if (*(_DWORD *)v39 == 2)
                WTF::StringImpl::destroy(v39, v40);
              else
                *(_DWORD *)v39 -= 2;
            }
            if (*((_DWORD *)v114 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v114))
              goto LABEL_190;
            if (v41 == 10)
            {
LABEL_96:
              WTF::AtomStringImpl::addLiteral();
              v46 = v77[0];
              v48 = (JSC::JSCell *)JSC::JSObject::get(Object, a2, (unint64_t)v77[0]);
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, v47);
                else
                  *(_DWORD *)v46 -= 2;
              }
              if (*((_DWORD *)v114 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v114))
              {
LABEL_190:
                *(_DWORD *)(a3 + 200) = 1;
                goto LABEL_133;
              }
              if (v48 != (JSC::JSCell *)10)
              {
                v49 = (WTF::StringImpl *)WebCore::convertDictionary<WebCore::ApplePayLineItem>(v48, (uint64_t)a2, (uint64_t)v77);
                v51 = v83;
                if (v83)
                {
                  *(_DWORD *)(a3 + 200) = 1;
                  if ((_DWORD)v51 != -1)
                    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B070[v51])(v74, v77);
                  goto LABEL_133;
                }
                v52 = v77[1];
                v53 = *(_QWORD *)v78;
                v77[1] = 0;
                *(_QWORD *)v78 = 0;
                *(_OWORD *)v74 = *(_OWORD *)&v78[8];
                v75 = v79;
                v54 = v81;
                v76 = v80;
                v81 = 0;
                v55 = v82;
                v104 = (char)v77[0];
                if (v111)
                {
                  v56 = (WTF::StringImpl *)v105;
                  *(_QWORD *)&v105 = v52;
                  if (v56)
                  {
                    if (*(_DWORD *)v56 == 2)
                      WTF::StringImpl::destroy(v56, v50);
                    else
                      *(_DWORD *)v56 -= 2;
                  }
                  v57 = (WTF::StringImpl *)*((_QWORD *)&v105 + 1);
                  *((_QWORD *)&v105 + 1) = v53;
                  if (v57)
                  {
                    if (*(_DWORD *)v57 == 2)
                      WTF::StringImpl::destroy(v57, v50);
                    else
                      *(_DWORD *)v57 -= 2;
                  }
                  v106 = *(_OWORD *)v74;
                  v107 = v75;
                  v49 = v109;
                  v108 = v76;
                  v109 = v54;
                  if (v49)
                  {
                    if (*(_DWORD *)v49 == 2)
                      v49 = (WTF::StringImpl *)WTF::StringImpl::destroy(v49, v50);
                    else
                      *(_DWORD *)v49 -= 2;
                  }
                  v110 = v55;
                }
                else
                {
                  *(_QWORD *)&v105 = v52;
                  *((_QWORD *)&v105 + 1) = v53;
                  v106 = *(_OWORD *)&v78[8];
                  v107 = v79;
                  v108 = v80;
                  v109 = v54;
                  v110 = v82;
                  v111 = 1;
                }
                _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore16ApplePayLineItemENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_((uint64_t)v49, (WTF::StringImpl *)v77);
              }
              v60 = v100;
              v61 = *(_OWORD *)v101;
              *(_OWORD *)(a3 + 16) = v99;
              *(_OWORD *)(a3 + 32) = v60;
              *(_QWORD *)a3 = v97;
              *(_BYTE *)(a3 + 8) = v98;
              v97 = 0;
              v99 = 0uLL;
              *(_OWORD *)(a3 + 48) = v61;
              v62 = v102;
              v102 = 0;
              *(_QWORD *)(a3 + 64) = *(_QWORD *)&v101[16];
              *(_QWORD *)(a3 + 72) = v62;
              *(_WORD *)(a3 + 80) = v103;
              *(_BYTE *)(a3 + 88) = 0;
              *(_BYTE *)(a3 + 168) = 0;
              if (v111)
              {
                *(_BYTE *)(a3 + 88) = v104;
                v63 = v105;
                v105 = 0uLL;
                v64 = v106;
                *(_OWORD *)(a3 + 96) = v63;
                *(_OWORD *)(a3 + 112) = v64;
                *(_OWORD *)(a3 + 128) = v107;
                v65 = v109;
                v109 = 0;
                *(_QWORD *)(a3 + 144) = v108;
                *(_QWORD *)(a3 + 152) = v65;
                *(_WORD *)(a3 + 160) = v110;
                *(_BYTE *)(a3 + 168) = 1;
              }
              v66 = v112;
              v112 = 0uLL;
              *(_OWORD *)(a3 + 176) = v66;
              v67 = v113;
              v113 = 0;
              *(_QWORD *)(a3 + 192) = v67;
              *(_DWORD *)(a3 + 200) = 0;
LABEL_133:
              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B070[v31])(v77, &v84);
              goto LABEL_134;
            }
            v74[0] = (WTF::StringImpl *)v41;
            v42 = (JSC::VM *)*((_QWORD *)a2 + 7);
            if ((v41 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v41 + 5) != 2)
            {
              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v74, a2);
LABEL_89:
              if (!*((_DWORD *)v42 + 20))
              {
                v44 = v115;
LABEL_91:
                LODWORD(v77[1]) = 0;
LABEL_92:
                v77[0] = 0;
                v45 = v113;
                v113 = v44;
                if (!v45)
                {
LABEL_95:
                  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)v74, (WTF::StringImpl *)v77);
                  goto LABEL_96;
                }
                if (*(_DWORD *)v45 != 2)
                {
                  *(_DWORD *)v45 -= 2;
                  goto LABEL_95;
                }
                WTF::StringImpl::destroy(v45, v40);
                v68 = 1;
                v69 = (int)v77[1];
LABEL_153:
                if (v69 != -1)
                  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v69])(v74, v77);
                if ((v68 & 1) == 0)
                  goto LABEL_133;
                goto LABEL_96;
              }
              v73 = JSC::VM::hasExceptionsAfterHandlingTraps(v42);
              v44 = v115;
              if ((v73 & 1) == 0)
                goto LABEL_91;
              LODWORD(v77[1]) = 1;
              v115 = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                {
                  WTF::StringImpl::destroy(v44, v40);
                  v69 = (int)v77[1];
                  if (!LODWORD(v77[1]))
                  {
                    v44 = v77[0];
                    goto LABEL_92;
                  }
LABEL_196:
                  v68 = 0;
                  *(_DWORD *)(a3 + 200) = 1;
                  goto LABEL_153;
                }
                *(_DWORD *)v44 -= 2;
              }
              v69 = 1;
              goto LABEL_196;
            }
            v43 = *(WTF::StringImpl **)(v41 + 8);
            if ((v43 & 1) != 0)
            {
              v43 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v41, a2);
              if (!v43)
                goto LABEL_88;
            }
            else if (!v43)
            {
LABEL_88:
              v115 = v43;
              goto LABEL_89;
            }
            *(_DWORD *)v43 += 2;
            goto LABEL_88;
          }
          v24 = *(WTF::StringImpl **)(v21 + 8);
          if ((v24 & 1) != 0)
          {
            v24 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v21, a2);
            if (!v24)
              goto LABEL_54;
          }
          else if (!v24)
          {
LABEL_54:
            v77[0] = v24;
            goto LABEL_55;
          }
          *(_DWORD *)v24 += 2;
          goto LABEL_54;
        }
        v16 = *(WTF::StringImpl **)(v14 + 8);
        if ((v16 & 1) != 0)
        {
          v16 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v14, a2);
          if (!v16)
            goto LABEL_35;
        }
        else if (!v16)
        {
LABEL_35:
          v77[0] = v16;
          goto LABEL_36;
        }
        *(_DWORD *)v16 += 2;
        goto LABEL_35;
      }
      v77[0] = (WTF::StringImpl *)v8;
      v9 = (JSC::VM *)*((_QWORD *)a2 + 7);
      if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v77, a2);
LABEL_17:
        if (!*((_DWORD *)v9 + 20))
        {
          v11 = v74[0];
LABEL_19:
          LODWORD(v85) = 0;
LABEL_20:
          v84 = 0;
          v12 = (WTF::StringImpl *)v112;
          *(_QWORD *)&v112 = v11;
          if (!v12)
          {
LABEL_23:
            _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)v77, (WTF::StringImpl *)&v84);
            goto LABEL_24;
          }
          if (*(_DWORD *)v12 != 2)
          {
            *(_DWORD *)v12 -= 2;
            goto LABEL_23;
          }
          WTF::StringImpl::destroy(v12, v7);
          v58 = 1;
          v59 = v85;
          goto LABEL_120;
        }
        v70 = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
        v11 = v74[0];
        if ((v70 & 1) == 0)
          goto LABEL_19;
        LODWORD(v85) = 1;
        v74[0] = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
          {
            WTF::StringImpl::destroy(v11, v7);
            v59 = v85;
            if (!(_DWORD)v85)
            {
              v11 = v84;
              goto LABEL_20;
            }
LABEL_170:
            v58 = 0;
            *(_DWORD *)(a3 + 200) = 1;
LABEL_120:
            if (v59 != -1)
              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v59])(v77, &v84);
            if ((v58 & 1) == 0)
              goto LABEL_138;
            goto LABEL_24;
          }
          *(_DWORD *)v11 -= 2;
        }
        v59 = 1;
        goto LABEL_170;
      }
      v10 = *(WTF::StringImpl **)(v8 + 8);
      if ((v10 & 1) != 0)
      {
        v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, a2);
        if (!v10)
          goto LABEL_16;
      }
      else if (!v10)
      {
LABEL_16:
        v74[0] = v10;
        goto LABEL_17;
      }
      *(_DWORD *)v10 += 2;
      goto LABEL_16;
    }
  }
  JSC::throwTypeError();
  *(_DWORD *)(a3 + 200) = 1;
}

unint64_t WebCore::convertDictionaryToJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, const WebCore::ApplePayRecurringPaymentRequest *a4)
{
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  __int128 v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  unsigned __int8 *v48;
  unsigned int v49;
  unsigned __int8 *v50;
  unsigned int v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unsigned __int8 *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  WTF::StringImpl *v60;
  unint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  __int16 v67;

  v7 = *((_QWORD *)this + 7);
  v8 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v9 = 8 * *(unsigned __int8 *)(v8 + 14);
  v10 = JSC::allocateCell<JSC::JSFinalObject>(v7, v9 + 16);
  v11 = *(_DWORD *)(v8 + 8);
  *(_DWORD *)v10 = v8 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  bzero((void *)(v10 + 16), v9);
  if (*(_BYTE *)(v7 + 755))
    __dmb(0xAu);
  v12 = *((_QWORD *)a3 + 22);
  if (!v12)
    goto LABEL_13;
  v13 = *((_QWORD *)this + 7);
  v14 = *(_DWORD *)(v12 + 4);
  if (v14)
  {
    if (v14 != 1)
    {
LABEL_6:
      v15 = *(_QWORD *)(v13 + 64760);
      if (!v15 || v12 != *(_QWORD *)(v15 + 8))
        v15 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_9;
    }
    v52 = *(unsigned __int8 **)(v12 + 8);
    if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    {
      v53 = *v52;
    }
    else
    {
      v58 = *(unsigned __int16 *)v52;
      if (v58 > 0xFF)
        goto LABEL_6;
      v53 = v58;
    }
    v15 = *(_QWORD *)(v13 + 8 * v53 + 42216);
  }
  else
  {
    v15 = *(_QWORD *)(v13 + 41968);
  }
LABEL_9:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v16 = v60;
  v60 = 0;
  v61 = v10;
  v62 = 0x1000000FFFFFFFFLL;
  *(_QWORD *)&v63 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v16, v15, 0, (uint64_t)&v60);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v17);
    else
      *(_DWORD *)v16 -= 2;
  }
LABEL_13:
  v18 = *((_QWORD *)this + 7);
  v19 = *((_QWORD *)a3 + 23);
  if (!v19 || (v20 = *(_DWORD *)(v19 + 4)) == 0)
  {
    v21 = *(_QWORD *)(v18 + 41968);
    goto LABEL_19;
  }
  if (v20 == 1)
  {
    v48 = *(unsigned __int8 **)(v19 + 8);
    if ((*(_BYTE *)(v19 + 16) & 4) != 0)
    {
      v49 = *v48;
    }
    else
    {
      v56 = *(unsigned __int16 *)v48;
      if (v56 > 0xFF)
        goto LABEL_16;
      v49 = v56;
    }
    v21 = *(_QWORD *)(v18 + 8 * v49 + 42216);
    goto LABEL_19;
  }
LABEL_16:
  v21 = *(_QWORD *)(v18 + 64760);
  if (!v21 || v19 != *(_QWORD *)(v21 + 8))
    v21 = JSC::jsStringWithCacheSlowCase();
LABEL_19:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v22 = v60;
  v60 = 0;
  v61 = v10;
  v62 = 0x1000000FFFFFFFFLL;
  *(_QWORD *)&v63 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v22, v21, 0, (uint64_t)&v60);
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
  v24 = *((_QWORD *)this + 7);
  v25 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3 || (v26 = *(_DWORD *)(v25 + 4)) == 0)
  {
    v27 = *(_QWORD *)(v24 + 41968);
    goto LABEL_29;
  }
  if (v26 != 1)
    goto LABEL_26;
  v50 = *(unsigned __int8 **)(v25 + 8);
  if ((*(_BYTE *)(v25 + 16) & 4) != 0)
  {
    v51 = *v50;
LABEL_85:
    v27 = *(_QWORD *)(v24 + 8 * v51 + 42216);
    goto LABEL_29;
  }
  v57 = *(unsigned __int16 *)v50;
  if (v57 <= 0xFF)
  {
    v51 = v57;
    goto LABEL_85;
  }
LABEL_26:
  v27 = *(_QWORD *)(v24 + 64760);
  if (!v27 || v25 != *(_QWORD *)(v27 + 8))
    v27 = JSC::jsStringWithCacheSlowCase();
LABEL_29:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v28 = v60;
  v60 = 0;
  v61 = v10;
  v62 = 0x1000000FFFFFFFFLL;
  *(_QWORD *)&v63 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v28, v27, 0, (uint64_t)&v60);
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v29);
    else
      *(_DWORD *)v28 -= 2;
  }
  v30 = WebCore::convertDictionaryToJS((uint64_t)this, (uint64_t)a2, (unsigned __int8 *)a3 + 8);
  if (*(_DWORD *)(v7 + 80))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
  }
  WTF::AtomStringImpl::addLiteral();
  v31 = v60;
  v60 = 0;
  v61 = v10;
  v62 = 0x1000000FFFFFFFFLL;
  *(_QWORD *)&v63 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v31, v30, 0, (uint64_t)&v60);
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v32);
    else
      *(_DWORD *)v31 -= 2;
  }
  v33 = *((_QWORD *)a3 + 24);
  if (!v33)
    goto LABEL_47;
  v34 = *((_QWORD *)this + 7);
  v35 = *(_DWORD *)(v33 + 4);
  if (v35)
  {
    if (v35 != 1)
    {
LABEL_40:
      v36 = *(_QWORD *)(v34 + 64760);
      if (!v36 || v33 != *(_QWORD *)(v36 + 8))
        v36 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_43;
    }
    v54 = *(unsigned __int8 **)(v33 + 8);
    if ((*(_BYTE *)(v33 + 16) & 4) != 0)
    {
      v55 = *v54;
    }
    else
    {
      v59 = *(unsigned __int16 *)v54;
      if (v59 > 0xFF)
        goto LABEL_40;
      v55 = v59;
    }
    v36 = *(_QWORD *)(v34 + 8 * v55 + 42216);
  }
  else
  {
    v36 = *(_QWORD *)(v34 + 41968);
  }
LABEL_43:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v37 = v60;
  v60 = 0;
  v61 = v10;
  v62 = 0x1000000FFFFFFFFLL;
  *(_QWORD *)&v63 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v37, v36, 0, (uint64_t)&v60);
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v38);
    else
      *(_DWORD *)v37 -= 2;
  }
LABEL_47:
  if (!*((_BYTE *)a3 + 168))
    return v10;
  LOBYTE(v60) = *((_BYTE *)a3 + 88);
  v39 = (WTF::StringImpl *)*((_QWORD *)a3 + 12);
  if (v39)
    *(_DWORD *)v39 += 2;
  v61 = (unint64_t)v39;
  v40 = (WTF::StringImpl *)*((_QWORD *)a3 + 13);
  if (v40)
    *(_DWORD *)v40 += 2;
  v62 = (uint64_t)v40;
  v41 = *((_OWORD *)a3 + 8);
  v63 = *((_OWORD *)a3 + 7);
  v64 = v41;
  v42 = (WTF::StringImpl *)*((_QWORD *)a3 + 19);
  v65 = *((_QWORD *)a3 + 18);
  if (v42)
    *(_DWORD *)v42 += 2;
  v66 = v42;
  v67 = *((_WORD *)a3 + 80);
  v44 = WebCore::convertDictionaryToJS((uint64_t)this, (uint64_t)a2, (unsigned __int8 *)&v60);
  if (!v42)
  {
LABEL_57:
    if (v40)
      goto LABEL_58;
    goto LABEL_60;
  }
  if (*(_DWORD *)v42 != 2)
  {
    *(_DWORD *)v42 -= 2;
    goto LABEL_57;
  }
  WTF::StringImpl::destroy(v42, v43);
  if (v40)
  {
LABEL_58:
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v43);
    else
      *(_DWORD *)v40 -= 2;
  }
LABEL_60:
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v43);
    else
      *(_DWORD *)v39 -= 2;
  }
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v45 = v60;
  v60 = 0;
  v61 = v10;
  v62 = 0x1000000FFFFFFFFLL;
  *(_QWORD *)&v63 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v45, v44, 0, (uint64_t)&v60);
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v46);
    else
      *(_DWORD *)v45 -= 2;
  }
  return v10;
}

void WebCore::convertDictionary<WebCore::ApplePayRequest>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *a2@<X0>, uint64_t a3@<X8>)
{
  unint64_t v5;
  JSC::Structure *Object;
  WTF::StringImpl *v7;
  unint64_t v8;
  unsigned __int16 v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  JSC::VM *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  JSC::JSCell *v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  __int128 v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  JSC::VM *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  JSC::VM *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  JSC::VM *v48;
  uint64_t v49;
  WTF *v50;
  int v51;
  int v52;
  WTF *v53;
  int v54;
  WTF::StringImpl *v55;
  int v56;
  char v57;
  int v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  JSC::JSCell *v61;
  unsigned int v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  __int128 v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  WTF::StringImpl *v69;
  unsigned int v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  JSC::VM *v74;
  void *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  JSC::VM *v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  JSC::VM *v89;
  uint64_t v90;
  void *v91;
  WTF::StringImpl *v92;
  int v93;
  int v94;
  WTF *v95;
  int v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  int v99;
  char v100;
  int v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  int v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  JSC::VM *v108;
  uint64_t v109;
  void *v110;
  WTF *v111;
  int v112;
  int v113;
  WTF *v114;
  int v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  int v118;
  char v119;
  int v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  JSC::JSCell *v123;
  unsigned int v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  __int128 v127;
  __int128 v128;
  unint64_t v129;
  __int128 v130;
  WTF::StringImpl *v131;
  unint64_t v132;
  __int128 v133;
  uint64_t v134;
  unint64_t v135;
  unsigned int v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  unint64_t v139;
  WTF::StringImpl *v140;
  unsigned __int16 v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  int v146;
  WTF *v147;
  WTF::StringImpl *v148;
  WTF *v149;
  int v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  uint64_t v155;
  int v156;
  int v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  unint64_t v163;
  JSC::VM *v164;
  double v165;
  __int16 v166;
  WTF::StringImpl *v167;
  uint64_t v168;
  WTF::StringImpl *v169;
  JSC::VM *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  unint64_t v176;
  uint64_t v177;
  int v178;
  WTF::StringImpl *v179;
  WTF *v180;
  uint64_t v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl **v184;
  uint64_t v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  char v188;
  int hasExceptionsAfterHandlingTraps;
  char v190;
  WTF *v191;
  WTF *v192;
  WTF::StringImpl *v193;
  char v194;
  WTF::StringImpl *v195;
  WTF *v196;
  WTF *v197;
  int v198;
  BOOL v199;
  int v200;
  uint64_t v201;
  int *v202;
  int v203;
  WTF::StringImpl *v204[2];
  int v205;
  uint64_t v206;
  int v207;
  WTF::StringImpl *v208[6];
  __int128 v209;
  uint64_t v210;
  unint64_t v211;
  WTF::StringImpl *v212;
  __int128 v213;
  unsigned __int128 v214;
  __int128 v215;
  uint64_t v216;
  WTF::StringImpl *v217[6];
  __int128 v218;
  uint64_t v219;
  unint64_t v220;
  WTF::StringImpl *v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  unsigned int v226;
  WTF *v227;
  int v228;
  int v229;
  char v230;
  __int128 v231;
  _BYTE v232[32];
  int v233;
  int v234;
  char v235;
  WTF::StringImpl *v236[2];
  __int128 v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  unint64_t v241;
  char v242;
  __int128 v243;
  WTF::StringImpl *v244;
  unint64_t v245;
  __int128 v246;
  uint64_t v247;
  char v248;
  WTF *v249;
  int v250;
  int v251;
  char v252;
  WTF::StringImpl *v253[2];
  __int128 v254;
  __int128 v255;
  __int128 v256;
  uint64_t v257;
  unint64_t v258;
  char v259;
  __int128 v260;
  WTF::StringImpl *v261;
  unint64_t v262;
  __int128 v263;
  uint64_t v264;
  char v265;
  WTF::StringImpl *v266;
  WTF *v267;
  WTF::StringImpl *v268;
  char v269[8];
  WTF::StringImpl *v270;
  WTF::StringImpl *v271;
  WTF::StringImpl *v272;
  WTF::StringImpl *v273;
  char v274;
  __int128 v275;
  uint64_t v276;
  unsigned int v277;
  unsigned int v278;
  WTF::StringImpl *v279;
  char v280;
  char v281;
  __int16 v282;
  WTF::StringImpl *v283;
  int v284;
  WTF::StringImpl *v285;
  uint64_t v286;
  WTF::StringImpl *v287;
  JSC::VM *v288;
  WTF::StringImpl *v289;
  uint64_t v290[3];

  v288 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v5 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
  }
  else if (((unint64_t)this & 0xFFFE000000000002) != 0
         || (Object = (JSC::Structure *)JSC::JSCell::getObject(this)) == 0)
  {
    JSC::throwTypeError();
    *(_DWORD *)(a3 + 600) = 1;
    return;
  }
  LOBYTE(v227) = 0;
  v230 = 0;
  v235 = 0;
  LOBYTE(v236[0]) = 0;
  v248 = 0;
  LOBYTE(v249) = 0;
  v252 = 0;
  LOBYTE(v253[0]) = 0;
  v265 = 0;
  v281 = 0;
  v282 = 0;
  v285 = 0;
  v231 = 0u;
  memset(v232, 0, 25);
  v268 = 0;
  v266 = 0;
  v267 = 0;
  v269[0] = 0;
  v284 = 0;
  v283 = 0;
  v287 = 0;
  if (v5 != 2)
  {
    WTF::AtomStringImpl::addLiteral();
    v8 = JSC::JSObject::get(Object, a2, (unint64_t)v217[0]);
    if (v217[0])
    {
      if (*(_DWORD *)v217[0] == 2)
        WTF::StringImpl::destroy(v217[0], v7);
      else
        *(_DWORD *)v217[0] -= 2;
    }
    if (*((_DWORD *)v288 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v288))
      goto LABEL_55;
    if (v8 != 10)
    {
      v217[0] = *((WTF::StringImpl **)a2 + 7);
      v9 = WebCore::parseEnumeration<WebCore::ApplePayLaterAvailability>(a2, v8);
      if (*((_DWORD *)v217[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v217[0]) & 1) != 0)
        goto LABEL_55;
      if (v9 <= 0xFFu)
      {
        JSC::throwTypeError();
        goto LABEL_55;
      }
      HIWORD(v284) = v9 | 0x100;
    }
    WTF::AtomStringImpl::addLiteral();
    v11 = JSC::JSObject::get(Object, a2, (unint64_t)v217[0]);
    if (v217[0])
    {
      if (*(_DWORD *)v217[0] == 2)
        WTF::StringImpl::destroy(v217[0], v10);
      else
        *(_DWORD *)v217[0] -= 2;
    }
    if (*((_DWORD *)v288 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v288))
      goto LABEL_55;
    if (v11 == 10)
    {
LABEL_32:
      WTF::AtomStringImpl::addLiteral();
      v16 = v217[0];
      v18 = (JSC::JSCell *)JSC::JSObject::get(Object, a2, (unint64_t)v217[0]);
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v17);
        else
          *(_DWORD *)v16 -= 2;
      }
      if (*((_DWORD *)v288 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v288))
        goto LABEL_55;
      if (v18 != (JSC::JSCell *)10)
      {
        WebCore::convertDictionary<WebCore::ApplePayPaymentContact>((uint64_t)v217, a2, v18);
        v19 = v226;
        if (v226)
        {
          *(_DWORD *)(a3 + 600) = 1;
          v31 = v19;
        }
        else
        {
          v20 = v217[0];
          v21 = v217[1];
          v208[0] = v217[0];
          v208[1] = v217[1];
          v22 = *(_OWORD *)&v217[2];
          memset(v217, 0, sizeof(v217));
          *(_OWORD *)&v208[2] = v22;
          *(_OWORD *)&v208[4] = *(_OWORD *)&v217[4];
          v23 = v218;
          v218 = 0u;
          v209 = v23;
          LOBYTE(v210) = 0;
          LOBYTE(v212) = 0;
          if ((_BYTE)v221)
          {
            v210 = v219;
            v24 = v220;
            v219 = 0;
            v220 = 0;
            v211 = v24;
            LOBYTE(v212) = 1;
          }
          v25 = v222;
          v222 = 0uLL;
          v213 = v25;
          v27 = *((_QWORD *)&v223 + 1);
          v26 = (WTF::StringImpl *)v223;
          v223 = 0uLL;
          v214 = __PAIR128__(v27, (unint64_t)v26);
          v28 = v224;
          v224 = 0uLL;
          v215 = v28;
          v29 = v225;
          v225 = 0;
          v216 = v29;
          if (v248)
          {
            WebCore::ApplePayPaymentContact::operator=(v236, v208);
          }
          else
          {
            v236[0] = v20;
            v236[1] = v21;
            memset(v208, 0, sizeof(v208));
            v237 = v22;
            v238 = *(_OWORD *)&v217[4];
            v209 = 0uLL;
            v239 = v23;
            LOBYTE(v240) = 0;
            v242 = 0;
            if ((_BYTE)v221)
            {
              v240 = v210;
              v30 = v211;
              v210 = 0;
              v211 = 0;
              v241 = v30;
              v242 = 1;
            }
            v213 = 0uLL;
            v243 = v25;
            v214 = 0uLL;
            v244 = v26;
            v245 = v27;
            v215 = 0uLL;
            v246 = v28;
            v216 = 0;
            v247 = v29;
            v248 = 1;
          }
          WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)v208, v26);
          v31 = v226;
        }
        if (v31 != -1)
          (*(&off_1E334B280 + v31))((int)v208, (WebCore::ApplePayPaymentContact *)v217);
        if (v19)
          goto LABEL_56;
      }
      WTF::AtomStringImpl::addLiteral();
      v32 = v217[0];
      v33 = JSC::JSObject::get(Object, a2, (unint64_t)v217[0]);
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v10);
        else
          *(_DWORD *)v32 -= 2;
      }
      if (*((_DWORD *)v288 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v288))
        goto LABEL_55;
      if (v33 == 10)
        goto LABEL_54;
      v217[0] = (WTF::StringImpl *)v33;
      v35 = (JSC::VM *)*((_QWORD *)a2 + 7);
      if ((v33 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v33 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v217, a2);
LABEL_66:
        if (*((_DWORD *)v35 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v35);
          v37 = v208[0];
          if (hasExceptionsAfterHandlingTraps)
          {
            v156 = 1;
            v207 = 1;
            v208[0] = 0;
            if (v37)
            {
              if (*(_DWORD *)v37 == 2)
                WTF::StringImpl::destroy(v37, v10);
              else
                *(_DWORD *)v37 -= 2;
            }
            *(_DWORD *)(a3 + 600) = 1;
            goto LABEL_307;
          }
        }
        else
        {
          v37 = v208[0];
        }
        v207 = 0;
        v206 = 0;
        v38 = *(WTF::StringImpl **)&v232[16];
        *(_QWORD *)&v232[16] = v37;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v10);
          else
            *(_DWORD *)v38 -= 2;
        }
        WTF::AtomStringImpl::addLiteral();
        v39 = v217[0];
        v40 = JSC::JSObject::get(Object, a2, (unint64_t)v217[0]);
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v10);
          else
            *(_DWORD *)v39 -= 2;
        }
        if (*((_DWORD *)v288 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v288))
          goto LABEL_152;
        if (v40 == 10)
          goto LABEL_89;
        v208[0] = (WTF::StringImpl *)v40;
        v41 = (JSC::VM *)*((_QWORD *)a2 + 7);
        if ((v40 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v40 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v208, a2);
LABEL_82:
          if (!*((_DWORD *)v41 + 20))
          {
            v43 = v204[0];
LABEL_84:
            LODWORD(v217[1]) = 0;
LABEL_85:
            v217[0] = 0;
            v44 = v283;
            v283 = v43;
            if (!v44)
            {
LABEL_88:
              _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)v208, (WTF::StringImpl *)v217);
              goto LABEL_89;
            }
            if (*(_DWORD *)v44 != 2)
            {
              *(_DWORD *)v44 -= 2;
              goto LABEL_88;
            }
            WTF::StringImpl::destroy(v44, v10);
            v100 = 1;
            v101 = (int)v217[1];
            goto LABEL_197;
          }
          v190 = JSC::VM::hasExceptionsAfterHandlingTraps(v41);
          v43 = v204[0];
          if ((v190 & 1) == 0)
            goto LABEL_84;
          LODWORD(v217[1]) = 1;
          v204[0] = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
            {
              WTF::StringImpl::destroy(v43, v10);
              v101 = (int)v217[1];
              if (!LODWORD(v217[1]))
              {
                v43 = v217[0];
                goto LABEL_85;
              }
LABEL_428:
              v100 = 0;
              *(_DWORD *)(a3 + 600) = 1;
LABEL_197:
              if (v101 != -1)
                ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v101])(v208, v217);
              if ((v100 & 1) == 0)
                goto LABEL_306;
LABEL_89:
              WTF::AtomStringImpl::addLiteral();
              v45 = v217[0];
              v47 = JSC::JSObject::get(Object, a2, (unint64_t)v217[0]);
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, v46);
                else
                  *(_DWORD *)v45 -= 2;
              }
              if (*((_DWORD *)v288 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v288))
                goto LABEL_152;
              if (v47 == 10)
                goto LABEL_133;
              v48 = (JSC::VM *)*((_QWORD *)a2 + 7);
              v290[0] = (uint64_t)v48;
              if ((v47 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v47 + 5) <= 0x16u)
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                JSC::throwTypeError();
                v55 = v208[0];
                v208[0] = 0;
                if (v55)
                {
                  if (*(_DWORD *)v55 == 2)
                    WTF::StringImpl::destroy(v55, v10);
                  else
                    *(_DWORD *)v55 -= 2;
                }
                v54 = 1;
                LODWORD(v217[2]) = 1;
              }
              else
              {
                v208[0] = 0;
                v208[1] = 0;
                v204[0] = (WTF::StringImpl *)v208;
                v49 = JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::ApplePayFeature>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(a2, v47, (uint64_t *)v204);
                if (!*((_DWORD *)v48 + 20) || (v49 = JSC::VM::hasExceptionsAfterHandlingTraps(v48), (v49 & 1) == 0))
                {
                  v50 = v208[0];
                  v51 = (int)v208[1];
                  v52 = HIDWORD(v208[1]);
                  LODWORD(v217[2]) = 0;
LABEL_98:
                  v217[0] = 0;
                  v217[1] = 0;
                  if (!v230)
                  {
                    v227 = v50;
                    v228 = v51;
                    v229 = v52;
                    v230 = 1;
                    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore15ApplePayFeatureELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(v49, v217);
                    goto LABEL_133;
                  }
                  v53 = v227;
                  if (v227)
                  {
                    v227 = 0;
                    v228 = 0;
                    WTF::fastFree(v53, v10);
                    v54 = (int)v217[2];
                  }
                  else
                  {
                    v54 = 0;
                  }
                  v227 = v50;
                  v56 = 1;
                  v228 = v51;
                  v229 = v52;
                  goto LABEL_129;
                }
                v191 = v208[0];
                v54 = 1;
                LODWORD(v217[2]) = 1;
                if (v208[0])
                {
                  v208[0] = 0;
                  LODWORD(v208[1]) = 0;
                  v49 = WTF::fastFree(v191, v10);
                  v54 = (int)v217[2];
                  if (!LODWORD(v217[2]))
                  {
                    v50 = v217[0];
                    v51 = (int)v217[1];
                    v52 = HIDWORD(v217[1]);
                    goto LABEL_98;
                  }
                }
              }
              v56 = 0;
              *(_DWORD *)(a3 + 600) = 1;
LABEL_129:
              if (v54 == -1)
              {
                if (!v56)
                  goto LABEL_306;
              }
              else
              {
                ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B2C8[v54])(v208, v217);
                if ((v56 & 1) == 0)
                  goto LABEL_306;
              }
LABEL_133:
              WTF::AtomStringImpl::addLiteral();
              v59 = v217[0];
              v61 = (JSC::JSCell *)JSC::JSObject::get(Object, a2, (unint64_t)v217[0]);
              if (v59)
              {
                if (*(_DWORD *)v59 == 2)
                  WTF::StringImpl::destroy(v59, v60);
                else
                  *(_DWORD *)v59 -= 2;
              }
              if (*((_DWORD *)v288 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v288))
                goto LABEL_152;
              if (v61 != (JSC::JSCell *)10)
              {
                WebCore::convertDictionary<WebCore::ApplePayInstallmentConfiguration>(v61, a2, (uint64_t)v217);
                v62 = DWORD2(v222);
                if (DWORD2(v222))
                {
                  *(_DWORD *)(a3 + 600) = 1;
                  v70 = v62;
                }
                else
                {
                  LOBYTE(v208[0]) = v217[0];
                  v63 = v217[1];
                  v64 = v217[2];
                  memset(&v217[1], 0, 32);
                  v208[1] = v63;
                  *(_OWORD *)&v208[2] = __PAIR128__((unint64_t)v217[3], (unint64_t)v64);
                  v208[4] = v217[4];
                  LOBYTE(v208[5]) = v217[5];
                  v65 = v218;
                  v218 = 0u;
                  v209 = v65;
                  v66 = v219;
                  v210 = v219;
                  v67 = v220;
                  v68 = HIDWORD(v220);
                  v219 = 0;
                  v220 = 0;
                  v211 = __PAIR64__(v68, v67);
                  v69 = v221;
                  v221 = 0;
                  v212 = v69;
                  LOBYTE(v213) = v222;
                  if (v281)
                  {
                    WebCore::ApplePayInstallmentConfiguration::operator=((uint64_t)v269, (uint64_t)v208);
                  }
                  else
                  {
                    v269[0] = (char)v217[0];
                    memset(&v208[1], 0, 32);
                    v270 = v63;
                    v271 = v64;
                    v272 = v217[3];
                    v273 = v217[4];
                    v274 = (char)v217[5];
                    v209 = 0uLL;
                    v275 = v65;
                    v210 = 0;
                    v211 = 0;
                    v276 = v66;
                    v277 = v67;
                    v278 = v68;
                    v212 = 0;
                    v279 = v69;
                    v280 = v222;
                    v281 = 1;
                  }
                  WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)v208, v69);
                  v70 = DWORD2(v222);
                }
                if (v70 != -1)
                  (*(&off_1E334B2D8 + v70))((int)v208, (WebCore::ApplePayInstallmentConfiguration *)v217);
                if (v62)
                  goto LABEL_306;
              }
              WTF::AtomStringImpl::addLiteral();
              v71 = v217[0];
              v73 = JSC::JSObject::get(Object, a2, (unint64_t)v217[0]);
              if (v71)
              {
                if (*(_DWORD *)v71 == 2)
                  WTF::StringImpl::destroy(v71, v72);
                else
                  *(_DWORD *)v71 -= 2;
              }
              if (*((_DWORD *)v288 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v288))
                goto LABEL_152;
              if (v73 == 10)
              {
                WebCore::throwRequiredMemberTypeError((int)a2, (int)&v288, "merchantCapabilities", 21, "ApplePayRequest", 16, "sequence", 9);
LABEL_152:
                *(_DWORD *)(a3 + 600) = 1;
                goto LABEL_306;
              }
              v74 = (JSC::VM *)*((_QWORD *)a2 + 7);
              v290[0] = (uint64_t)v74;
              if ((v73 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v73 + 5) <= 0x16u)
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                JSC::throwTypeError();
                v98 = v217[0];
                v217[0] = 0;
                if (v98)
                {
                  if (*(_DWORD *)v98 == 2)
                    WTF::StringImpl::destroy(v98, v97);
                  else
                    *(_DWORD *)v98 -= 2;
                }
                v205 = 1;
                goto LABEL_192;
              }
              v217[0] = 0;
              v217[1] = 0;
              v208[0] = (WTF::StringImpl *)v217;
              JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::ApplePayMerchantCapability>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayMerchantCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(a2, v73, (uint64_t *)v208);
              if (*((_DWORD *)v74 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v74))
              {
                v192 = v217[0];
                v205 = 1;
                if (v217[0])
                {
                  v217[0] = 0;
                  LODWORD(v217[1]) = 0;
                  WTF::fastFree(v192, v75);
                }
LABEL_192:
                v99 = 1;
LABEL_193:
                *(_DWORD *)(a3 + 600) = 1;
LABEL_305:
                ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B2E8[v99])(v217, v204);
                goto LABEL_306;
              }
              v76 = v217[0];
              v77 = v217[1];
              v205 = 0;
              v204[0] = 0;
              v204[1] = 0;
              v78 = (WTF *)v231;
              if ((_QWORD)v231)
              {
                *(_QWORD *)&v231 = 0;
                DWORD2(v231) = 0;
                WTF::fastFree(v78, v75);
              }
              *(_QWORD *)&v231 = v76;
              *((_QWORD *)&v231 + 1) = v77;
              WTF::AtomStringImpl::addLiteral();
              v79 = v217[0];
              v81 = JSC::JSObject::get(Object, a2, (unint64_t)v217[0]);
              if (v79)
              {
                if (*(_DWORD *)v79 == 2)
                  WTF::StringImpl::destroy(v79, v80);
                else
                  *(_DWORD *)v79 -= 2;
              }
              if (*((_DWORD *)v288 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v288) & 1) != 0)
              {
LABEL_303:
                v99 = 0;
                goto LABEL_193;
              }
              if (v81 == 10)
              {
LABEL_176:
                WTF::AtomStringImpl::addLiteral();
                v86 = v217[0];
                v88 = JSC::JSObject::get(Object, a2, (unint64_t)v217[0]);
                if (v86)
                {
                  if (*(_DWORD *)v86 == 2)
                    WTF::StringImpl::destroy(v86, v87);
                  else
                    *(_DWORD *)v86 -= 2;
                }
                if (*((_DWORD *)v288 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v288) & 1) != 0)
                  goto LABEL_303;
                if (v88 == 10)
                  goto LABEL_222;
                v89 = (JSC::VM *)*((_QWORD *)a2 + 7);
                v289 = v89;
                if ((v88 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v88 + 5) <= 0x16u)
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  JSC::throwTypeError();
                  v103 = v208[0];
                  v208[0] = 0;
                  if (v103)
                  {
                    if (*(_DWORD *)v103 == 2)
                      WTF::StringImpl::destroy(v103, v102);
                    else
                      *(_DWORD *)v103 -= 2;
                  }
                  v96 = 1;
                  LODWORD(v217[2]) = 1;
                }
                else
                {
                  v208[0] = 0;
                  v208[1] = 0;
                  v290[0] = (uint64_t)v208;
                  v90 = JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::ApplePayContactField>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(a2, v88, v290);
                  if (!*((_DWORD *)v89 + 20) || (v90 = JSC::VM::hasExceptionsAfterHandlingTraps(v89), (v90 & 1) == 0))
                  {
                    v92 = v208[0];
                    v93 = (int)v208[1];
                    v94 = HIDWORD(v208[1]);
                    LODWORD(v217[2]) = 0;
LABEL_185:
                    v217[0] = 0;
                    v217[1] = 0;
                    if (!v235)
                    {
                      *(_QWORD *)&v232[24] = v92;
                      v233 = v93;
                      v234 = v94;
                      v235 = 1;
                      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore20ApplePayContactFieldELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(v90, v217);
                      goto LABEL_222;
                    }
                    v95 = *(WTF **)&v232[24];
                    if (*(_QWORD *)&v232[24])
                    {
                      *(_QWORD *)&v232[24] = 0;
                      v233 = 0;
                      WTF::fastFree(v95, v91);
                      v96 = (int)v217[2];
                    }
                    else
                    {
                      v96 = 0;
                    }
                    *(_QWORD *)&v232[24] = v92;
                    v104 = 1;
                    v233 = v93;
                    v234 = v94;
                    goto LABEL_218;
                  }
                  v196 = v208[0];
                  v96 = 1;
                  LODWORD(v217[2]) = 1;
                  if (v208[0])
                  {
                    v208[0] = 0;
                    LODWORD(v208[1]) = 0;
                    v90 = WTF::fastFree(v196, v91);
                    v96 = (int)v217[2];
                    if (!LODWORD(v217[2]))
                    {
                      v92 = v217[0];
                      v93 = (int)v217[1];
                      v94 = HIDWORD(v217[1]);
                      goto LABEL_185;
                    }
                  }
                }
                v104 = 0;
                *(_DWORD *)(a3 + 600) = 1;
LABEL_218:
                if (v96 == -1)
                {
                  if (!v104)
                    goto LABEL_304;
                }
                else
                {
                  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B150[v96])(v208, v217);
                  if ((v104 & 1) == 0)
                    goto LABEL_304;
                }
LABEL_222:
                WTF::AtomStringImpl::addLiteral();
                v105 = v217[0];
                v107 = JSC::JSObject::get(Object, a2, (unint64_t)v217[0]);
                if (v105)
                {
                  if (*(_DWORD *)v105 == 2)
                    WTF::StringImpl::destroy(v105, v106);
                  else
                    *(_DWORD *)v105 -= 2;
                }
                if (*((_DWORD *)v288 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v288) & 1) != 0)
                  goto LABEL_303;
                if (v107 == 10)
                  goto LABEL_252;
                v108 = (JSC::VM *)*((_QWORD *)a2 + 7);
                v289 = v108;
                if ((v107 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v107 + 5) <= 0x16u)
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  JSC::throwTypeError();
                  v117 = v208[0];
                  v208[0] = 0;
                  if (v117)
                  {
                    if (*(_DWORD *)v117 == 2)
                      WTF::StringImpl::destroy(v117, v116);
                    else
                      *(_DWORD *)v117 -= 2;
                  }
                  v115 = 1;
                  LODWORD(v217[2]) = 1;
                }
                else
                {
                  v208[0] = 0;
                  v208[1] = 0;
                  v290[0] = (uint64_t)v208;
                  v109 = JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::ApplePayContactField>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(a2, v107, v290);
                  if (!*((_DWORD *)v108 + 20)
                    || (v109 = JSC::VM::hasExceptionsAfterHandlingTraps(v108), (v109 & 1) == 0))
                  {
                    v111 = v208[0];
                    v112 = (int)v208[1];
                    v113 = HIDWORD(v208[1]);
                    LODWORD(v217[2]) = 0;
LABEL_231:
                    v217[0] = 0;
                    v217[1] = 0;
                    if (v252)
                    {
                      v114 = v249;
                      if (v249)
                      {
                        v249 = 0;
                        v250 = 0;
                        WTF::fastFree(v114, v110);
                        v115 = (int)v217[2];
                      }
                      else
                      {
                        v115 = 0;
                      }
                      v249 = v111;
                      v118 = 1;
                      v250 = v112;
                      v251 = v113;
LABEL_248:
                      if (v115 == -1)
                      {
                        if (!v118)
                          goto LABEL_304;
                      }
                      else
                      {
                        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B150[v115])(v208, v217);
                        if ((v118 & 1) == 0)
                          goto LABEL_304;
                      }
                      goto LABEL_252;
                    }
                    v249 = v111;
                    v250 = v112;
                    v251 = v113;
                    v252 = 1;
                    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore20ApplePayContactFieldELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(v109, v217);
LABEL_252:
                    WTF::AtomStringImpl::addLiteral();
                    v121 = v217[0];
                    v123 = (JSC::JSCell *)JSC::JSObject::get(Object, a2, (unint64_t)v217[0]);
                    if (v121)
                    {
                      if (*(_DWORD *)v121 == 2)
                        WTF::StringImpl::destroy(v121, v122);
                      else
                        *(_DWORD *)v121 -= 2;
                    }
                    if (*((_DWORD *)v288 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v288) & 1) != 0)
                      goto LABEL_303;
                    if (v123 == (JSC::JSCell *)10)
                      goto LABEL_269;
                    WebCore::convertDictionary<WebCore::ApplePayPaymentContact>((uint64_t)v217, a2, v123);
                    v124 = v226;
                    if (v226)
                    {
                      *(_DWORD *)(a3 + 600) = 1;
                      v136 = v124;
                    }
                    else
                    {
                      v125 = v217[0];
                      v126 = v217[1];
                      v208[0] = v217[0];
                      v208[1] = v217[1];
                      v127 = *(_OWORD *)&v217[2];
                      memset(v217, 0, sizeof(v217));
                      *(_OWORD *)&v208[2] = v127;
                      *(_OWORD *)&v208[4] = *(_OWORD *)&v217[4];
                      v128 = v218;
                      v218 = 0u;
                      v209 = v128;
                      LOBYTE(v210) = 0;
                      LOBYTE(v212) = 0;
                      if ((_BYTE)v221)
                      {
                        v210 = v219;
                        v129 = v220;
                        v219 = 0;
                        v220 = 0;
                        v211 = v129;
                        LOBYTE(v212) = 1;
                      }
                      v130 = v222;
                      v222 = 0uLL;
                      v213 = v130;
                      v132 = *((_QWORD *)&v223 + 1);
                      v131 = (WTF::StringImpl *)v223;
                      v223 = 0uLL;
                      v214 = __PAIR128__(v132, (unint64_t)v131);
                      v133 = v224;
                      v224 = 0uLL;
                      v215 = v133;
                      v134 = v225;
                      v225 = 0;
                      v216 = v134;
                      if (v265)
                      {
                        WebCore::ApplePayPaymentContact::operator=(v253, v208);
                      }
                      else
                      {
                        v253[0] = v125;
                        v253[1] = v126;
                        memset(v208, 0, sizeof(v208));
                        v254 = v127;
                        v255 = *(_OWORD *)&v217[4];
                        v209 = 0uLL;
                        v256 = v128;
                        LOBYTE(v257) = 0;
                        v259 = 0;
                        if ((_BYTE)v221)
                        {
                          v257 = v210;
                          v135 = v211;
                          v210 = 0;
                          v211 = 0;
                          v258 = v135;
                          v259 = 1;
                        }
                        v213 = 0uLL;
                        v260 = v130;
                        v214 = 0uLL;
                        v261 = v131;
                        v262 = v132;
                        v215 = 0uLL;
                        v263 = v133;
                        v216 = 0;
                        v264 = v134;
                        v265 = 1;
                      }
                      WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)v208, v131);
                      v136 = v226;
                    }
                    if (v136 != -1)
                      (*(&off_1E334B280 + v136))((int)v208, (WebCore::ApplePayPaymentContact *)v217);
                    if (!v124)
                    {
LABEL_269:
                      WTF::AtomStringImpl::addLiteral();
                      v137 = v217[0];
                      v139 = JSC::JSObject::get(Object, a2, (unint64_t)v217[0]);
                      if (v137)
                      {
                        if (*(_DWORD *)v137 == 2)
                          WTF::StringImpl::destroy(v137, v138);
                        else
                          *(_DWORD *)v137 -= 2;
                      }
                      if (*((_DWORD *)v288 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v288) & 1) != 0)
                        goto LABEL_303;
                      if (v139 != 10)
                      {
                        v217[0] = *((WTF::StringImpl **)a2 + 7);
                        v140 = v217[0];
                        v141 = WebCore::parseEnumeration<WebCore::ApplePayShippingContactEditingMode>(a2, v139);
                        if (*((_DWORD *)v140 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v140) & 1) != 0)
                          goto LABEL_303;
                        if (v141 <= 0xFFu)
                        {
                          JSC::throwTypeError();
                          goto LABEL_303;
                        }
                        LOWORD(v284) = v141 | 0x100;
                      }
                      WTF::AtomStringImpl::addLiteral();
                      v142 = v217[0];
                      v144 = JSC::JSObject::get(Object, a2, (unint64_t)v217[0]);
                      if (v142)
                      {
                        if (*(_DWORD *)v142 == 2)
                          WTF::StringImpl::destroy(v142, v143);
                        else
                          *(_DWORD *)v142 -= 2;
                      }
                      if (*((_DWORD *)v288 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v288) & 1) != 0)
                        goto LABEL_303;
                      if (v144 == 10)
                        goto LABEL_297;
                      v208[0] = *((WTF::StringImpl **)a2 + 7);
                      if ((v144 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v144 + 5) <= 0x16u)
                      {
                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                        JSC::throwTypeError();
                        v152 = v217[0];
                        v217[0] = 0;
                        if (v152)
                        {
                          if (*(_DWORD *)v152 == 2)
                            WTF::StringImpl::destroy(v152, v151);
                          else
                            *(_DWORD *)v152 -= 2;
                        }
                        v146 = 1;
                        LODWORD(v217[2]) = 1;
                      }
                      else
                      {
                        WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert(a2, v144, (uint64_t)v217);
                        v146 = (int)v217[2];
                        if (!LODWORD(v217[2]))
                        {
                          v147 = v217[0];
                          v148 = v217[1];
                          v217[0] = 0;
                          v217[1] = 0;
                          if (HIDWORD(v268))
                          {
                            v180 = v267;
                            v181 = 8 * HIDWORD(v268);
                            do
                            {
                              v182 = *(WTF::StringImpl **)v180;
                              *(_QWORD *)v180 = 0;
                              if (v182)
                              {
                                if (*(_DWORD *)v182 == 2)
                                {
                                  v183 = v148;
                                  WTF::StringImpl::destroy(v182, v145);
                                  v148 = v183;
                                }
                                else
                                {
                                  *(_DWORD *)v182 -= 2;
                                }
                              }
                              v180 = (WTF *)((char *)v180 + 8);
                              v181 -= 8;
                            }
                            while (v181);
                          }
                          v149 = v267;
                          if (v267)
                          {
                            v267 = 0;
                            LODWORD(v268) = 0;
                            v193 = v148;
                            WTF::fastFree(v149, v145);
                            v148 = v193;
                          }
                          v267 = v147;
                          v268 = v148;
                          v150 = 1;
                          v146 = (int)v217[2];
LABEL_294:
                          if (v146 != -1)
                            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B270[v146])(v208, v217);
                          if (!v150)
                            goto LABEL_304;
LABEL_297:
                          WTF::AtomStringImpl::addLiteral();
                          v153 = v217[0];
                          v155 = JSC::JSObject::get(Object, a2, (unint64_t)v217[0]);
                          if (v153)
                          {
                            if (*(_DWORD *)v153 == 2)
                              WTF::StringImpl::destroy(v153, v154);
                            else
                              *(_DWORD *)v153 -= 2;
                          }
                          if (*((_DWORD *)v288 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v288) & 1) != 0)
                            goto LABEL_303;
                          if (v155 == 10)
                          {
                            WebCore::throwRequiredMemberTypeError((int)a2, (int)&v288, "supportedNetworks", 18, "ApplePayRequest", 16, "sequence", 9);
                            goto LABEL_303;
                          }
                          v208[0] = *((WTF::StringImpl **)a2 + 7);
                          if ((v155 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v155 + 5) <= 0x16u)
                          {
                            WTF::StringImpl::createWithoutCopyingNonEmpty();
                            JSC::throwTypeError();
                            v169 = v217[0];
                            v217[0] = 0;
                            if (v169)
                            {
                              if (*(_DWORD *)v169 == 2)
                                WTF::StringImpl::destroy(v169, v10);
                              else
                                *(_DWORD *)v169 -= 2;
                            }
                            v157 = 1;
                            LODWORD(v217[2]) = 1;
                          }
                          else
                          {
                            WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert(a2, v155, (uint64_t)v217);
                            v157 = (int)v217[2];
                            if (!LODWORD(v217[2]))
                            {
                              v158 = v217[0];
                              v159 = v217[1];
                              v217[0] = 0;
                              v217[1] = 0;
                              if (*(_DWORD *)&v232[12])
                              {
                                v184 = *(WTF::StringImpl ***)v232;
                                v185 = 8 * *(unsigned int *)&v232[12];
                                do
                                {
                                  v186 = *v184;
                                  *v184 = 0;
                                  if (v186)
                                  {
                                    if (*(_DWORD *)v186 == 2)
                                    {
                                      v187 = v159;
                                      WTF::StringImpl::destroy(v186, v10);
                                      v159 = v187;
                                    }
                                    else
                                    {
                                      *(_DWORD *)v186 -= 2;
                                    }
                                  }
                                  ++v184;
                                  v185 -= 8;
                                }
                                while (v185);
                              }
                              v160 = *(WTF **)v232;
                              if (*(_QWORD *)v232)
                              {
                                *(_QWORD *)v232 = 0;
                                *(_DWORD *)&v232[8] = 0;
                                v195 = v159;
                                WTF::fastFree(v160, v10);
                                v159 = v195;
                              }
                              *(_QWORD *)v232 = v158;
                              *(_QWORD *)&v232[8] = v159;
                              WTF::AtomStringImpl::addLiteral();
                              v161 = v208[0];
                              v163 = JSC::JSObject::get(Object, a2, (unint64_t)v208[0]);
                              if (v161)
                              {
                                if (*(_DWORD *)v161 == 2)
                                  WTF::StringImpl::destroy(v161, v162);
                                else
                                  *(_DWORD *)v161 -= 2;
                              }
                              if (*((_DWORD *)v288 + 20)
                                && JSC::VM::hasExceptionsAfterHandlingTraps(v288))
                              {
                                goto LABEL_331;
                              }
                              if (v163 == 10)
                                goto LABEL_325;
                              v164 = (JSC::VM *)*((_QWORD *)a2 + 7);
                              if (v163 >= 0xFFFE000000000000)
                              {
                                v199 = (_DWORD)v163 == 0;
                                goto LABEL_508;
                              }
                              *(_QWORD *)&v165 = v163 - 0x2000000000000;
                              if (v163 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                              {
                                if (v165 <= 0.0)
                                {
                                  v166 = v165 < 0.0;
                                  goto LABEL_323;
                                }
                              }
                              else
                              {
                                if ((v163 & 0xFFFE000000000002) != 0)
                                {
                                  v166 = v163 == 7;
                                  goto LABEL_323;
                                }
                                v200 = *(unsigned __int8 *)(v163 + 5);
                                if (v200 == 3)
                                {
                                  v203 = *(_DWORD *)(v163 + 8);
LABEL_504:
                                  v199 = v203 == 0;
                                  goto LABEL_508;
                                }
                                if (v200 == 2)
                                {
                                  v201 = *(_QWORD *)(v163 + 8);
                                  if ((v201 & 1) != 0)
                                    v202 = (int *)(v163 + 16);
                                  else
                                    v202 = (int *)(v201 + 4);
                                  v203 = *v202;
                                  goto LABEL_504;
                                }
                                if ((*(_BYTE *)(16 * (*(_DWORD *)v163 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                                {
                                  v199 = *(_QWORD *)(16 * (*(_DWORD *)v163 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_508:
                                  v166 = !v199;
                                  goto LABEL_323;
                                }
                              }
                              v166 = 1;
LABEL_323:
                              if (*((_DWORD *)v164 + 20)
                                && JSC::VM::hasExceptionsAfterHandlingTraps(v164))
                              {
                                goto LABEL_331;
                              }
                              v282 = v166 | 0x100;
LABEL_325:
                              WTF::AtomStringImpl::addLiteral();
                              v167 = v208[0];
                              v168 = JSC::JSObject::get(Object, a2, (unint64_t)v208[0]);
                              if (v167)
                              {
                                if (*(_DWORD *)v167 == 2)
                                  WTF::StringImpl::destroy(v167, v10);
                                else
                                  *(_DWORD *)v167 -= 2;
                              }
                              if (*((_DWORD *)v288 + 20)
                                && JSC::VM::hasExceptionsAfterHandlingTraps(v288))
                              {
                                goto LABEL_331;
                              }
                              if (v168 == 10)
                              {
                                WebCore::throwRequiredMemberTypeError((int)a2, (int)&v288, "merchantIdentifier", 19, "ApplePayRequest", 16, "DOMString", 10);
LABEL_331:
                                *(_DWORD *)(a3 + 600) = 1;
LABEL_373:
                                v157 = (int)v217[2];
LABEL_374:
                                if (v157 != -1)
                                  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B270[v157])(v208, v217);
                                v99 = v205;
                                if (v205 != -1)
                                  goto LABEL_305;
LABEL_306:
                                v156 = v207;
                                if (v207 == -1)
                                  goto LABEL_56;
LABEL_307:
                                ((void (*)(WTF::StringImpl **, uint64_t *))off_1E334B060[v156])(v217, &v206);
                                goto LABEL_56;
                              }
                              v290[0] = v168;
                              v170 = (JSC::VM *)*((_QWORD *)a2 + 7);
                              if ((v168 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v168 + 5) != 2)
                              {
                                JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v290, a2);
LABEL_346:
                                if (*((_DWORD *)v170 + 20))
                                {
                                  v198 = JSC::VM::hasExceptionsAfterHandlingTraps(v170);
                                  v172 = v289;
                                  if (v198)
                                  {
                                    v177 = 1;
                                    LODWORD(v208[1]) = 1;
                                    v289 = 0;
                                    if (v172)
                                    {
                                      if (*(_DWORD *)v172 == 2)
                                        WTF::StringImpl::destroy(v172, v10);
                                      else
                                        *(_DWORD *)v172 -= 2;
                                    }
                                    *(_DWORD *)(a3 + 600) = 1;
                                    goto LABEL_372;
                                  }
                                }
                                else
                                {
                                  v172 = v289;
                                }
                                LODWORD(v208[1]) = 0;
                                v208[0] = 0;
                                v173 = v287;
                                v287 = v172;
                                if (v173)
                                {
                                  if (*(_DWORD *)v173 == 2)
                                    WTF::StringImpl::destroy(v173, v10);
                                  else
                                    *(_DWORD *)v173 -= 2;
                                }
                                WTF::AtomStringImpl::addLiteral();
                                v174 = (WTF::StringImpl *)v290[0];
                                v176 = JSC::JSObject::get(Object, a2, v290[0]);
                                if (v174)
                                {
                                  if (*(_DWORD *)v174 == 2)
                                    WTF::StringImpl::destroy(v174, v175);
                                  else
                                    *(_DWORD *)v174 -= 2;
                                }
                                if (!*((_DWORD *)v288 + 20)
                                  || !JSC::VM::hasExceptionsAfterHandlingTraps(v288))
                                {
                                  if (v176 != 10)
                                  {
                                    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a2, v176, v290);
                                    if (HIDWORD(v290[0]))
                                    {
                                      v178 = 1;
                                    }
                                    else
                                    {
                                      v286 = LODWORD(v290[0]);
                                      WebCore::ApplePayRequestBase::ApplePayRequestBase(a3 + 8, (uint64_t *)&v227);
                                      v178 = 0;
                                      *(_QWORD *)(a3 + 584) = v286;
                                      v179 = v287;
                                      v287 = 0;
                                      *(_QWORD *)(a3 + 592) = v179;
                                    }
                                    v177 = 0;
                                    goto LABEL_371;
                                  }
                                  WebCore::throwRequiredMemberTypeError((int)a2, (int)&v288, "version", 8, "ApplePayRequest", 16, "unsigned long", 14);
                                }
                                v177 = 0;
                                v178 = 1;
LABEL_371:
                                *(_DWORD *)(a3 + 600) = v178;
LABEL_372:
                                ((void (*)(uint64_t *, WTF::StringImpl **))off_1E334B060[v177])(v290, v208);
                                goto LABEL_373;
                              }
                              v171 = *(WTF::StringImpl **)(v168 + 8);
                              if ((v171 & 1) != 0)
                              {
                                v171 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v168, a2);
                                if (!v171)
                                  goto LABEL_345;
                              }
                              else if (!v171)
                              {
LABEL_345:
                                v289 = v171;
                                goto LABEL_346;
                              }
                              *(_DWORD *)v171 += 2;
                              goto LABEL_345;
                            }
                          }
                          *(_DWORD *)(a3 + 600) = 1;
                          goto LABEL_374;
                        }
                      }
                      v150 = 0;
                      *(_DWORD *)(a3 + 600) = 1;
                      goto LABEL_294;
                    }
LABEL_304:
                    v99 = 0;
                    goto LABEL_305;
                  }
                  v197 = v208[0];
                  v115 = 1;
                  LODWORD(v217[2]) = 1;
                  if (v208[0])
                  {
                    v208[0] = 0;
                    LODWORD(v208[1]) = 0;
                    v109 = WTF::fastFree(v197, v110);
                    v115 = (int)v217[2];
                    if (!LODWORD(v217[2]))
                    {
                      v111 = v217[0];
                      v112 = (int)v217[1];
                      v113 = HIDWORD(v217[1]);
                      goto LABEL_231;
                    }
                  }
                }
                v118 = 0;
                *(_DWORD *)(a3 + 600) = 1;
                goto LABEL_248;
              }
              v208[0] = (WTF::StringImpl *)v81;
              v82 = (JSC::VM *)*((_QWORD *)a2 + 7);
              if ((v81 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v81 + 5) != 2)
              {
                JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v208, a2);
LABEL_169:
                if (!*((_DWORD *)v82 + 20))
                {
                  v84 = (WTF::StringImpl *)v290[0];
LABEL_171:
                  LODWORD(v217[1]) = 0;
LABEL_172:
                  v217[0] = 0;
                  v85 = v285;
                  v285 = v84;
                  if (!v85)
                  {
LABEL_175:
                    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)v208, (WTF::StringImpl *)v217);
                    goto LABEL_176;
                  }
                  if (*(_DWORD *)v85 != 2)
                  {
                    *(_DWORD *)v85 -= 2;
                    goto LABEL_175;
                  }
                  WTF::StringImpl::destroy(v85, v80);
                  v119 = 1;
                  v120 = (int)v217[1];
                  goto LABEL_242;
                }
                v194 = JSC::VM::hasExceptionsAfterHandlingTraps(v82);
                v84 = (WTF::StringImpl *)v290[0];
                if ((v194 & 1) == 0)
                  goto LABEL_171;
                LODWORD(v217[1]) = 1;
                v290[0] = 0;
                if (v84)
                {
                  if (*(_DWORD *)v84 == 2)
                  {
                    WTF::StringImpl::destroy(v84, v80);
                    v120 = (int)v217[1];
                    if (!LODWORD(v217[1]))
                    {
                      v84 = v217[0];
                      goto LABEL_172;
                    }
LABEL_455:
                    v119 = 0;
                    *(_DWORD *)(a3 + 600) = 1;
LABEL_242:
                    if (v120 != -1)
                      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v120])(v208, v217);
                    if ((v119 & 1) == 0)
                      goto LABEL_304;
                    goto LABEL_176;
                  }
                  *(_DWORD *)v84 -= 2;
                }
                v120 = 1;
                goto LABEL_455;
              }
              v83 = *(_QWORD *)(v81 + 8);
              if ((v83 & 1) != 0)
              {
                v83 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v81, a2);
                if (!v83)
                  goto LABEL_168;
              }
              else if (!v83)
              {
LABEL_168:
                v290[0] = v83;
                goto LABEL_169;
              }
              *(_DWORD *)v83 += 2;
              goto LABEL_168;
            }
            *(_DWORD *)v43 -= 2;
          }
          v101 = 1;
          goto LABEL_428;
        }
        v42 = *(WTF::StringImpl **)(v40 + 8);
        if ((v42 & 1) != 0)
        {
          v42 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v40, a2);
          if (!v42)
            goto LABEL_81;
        }
        else if (!v42)
        {
LABEL_81:
          v204[0] = v42;
          goto LABEL_82;
        }
        *(_DWORD *)v42 += 2;
        goto LABEL_81;
      }
      v36 = *(WTF::StringImpl **)(v33 + 8);
      if ((v36 & 1) != 0)
      {
        v36 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v33, a2);
        if (!v36)
          goto LABEL_65;
      }
      else if (!v36)
      {
LABEL_65:
        v208[0] = v36;
        goto LABEL_66;
      }
      *(_DWORD *)v36 += 2;
      goto LABEL_65;
    }
    v208[0] = (WTF::StringImpl *)v11;
    v12 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v208, a2);
LABEL_25:
      if (!*((_DWORD *)v12 + 20))
      {
        v14 = v204[0];
LABEL_27:
        LODWORD(v217[1]) = 0;
LABEL_28:
        v217[0] = 0;
        v15 = v266;
        v266 = v14;
        if (!v15)
        {
LABEL_31:
          _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)v208, (WTF::StringImpl *)v217);
          goto LABEL_32;
        }
        if (*(_DWORD *)v15 != 2)
        {
          *(_DWORD *)v15 -= 2;
          goto LABEL_31;
        }
        WTF::StringImpl::destroy(v15, v10);
        v57 = 1;
        v58 = (int)v217[1];
LABEL_116:
        if (v58 != -1)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v58])(v208, v217);
        if ((v57 & 1) == 0)
          goto LABEL_56;
        goto LABEL_32;
      }
      v188 = JSC::VM::hasExceptionsAfterHandlingTraps(v12);
      v14 = v204[0];
      if ((v188 & 1) == 0)
        goto LABEL_27;
      LODWORD(v217[1]) = 1;
      v204[0] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::destroy(v14, v10);
          v58 = (int)v217[1];
          if (!LODWORD(v217[1]))
          {
            v14 = v217[0];
            goto LABEL_28;
          }
LABEL_403:
          v57 = 0;
          *(_DWORD *)(a3 + 600) = 1;
          goto LABEL_116;
        }
        *(_DWORD *)v14 -= 2;
      }
      v58 = 1;
      goto LABEL_403;
    }
    v13 = *(WTF::StringImpl **)(v11 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v11, a2);
      if (!v13)
        goto LABEL_24;
    }
    else if (!v13)
    {
LABEL_24:
      v204[0] = v13;
      goto LABEL_25;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_24;
  }
LABEL_54:
  WebCore::throwRequiredMemberTypeError((int)a2, (int)&v288, "countryCode", 12, "ApplePayRequest", 16, "DOMString", 10);
LABEL_55:
  *(_DWORD *)(a3 + 600) = 1;
LABEL_56:
  v34 = v287;
  v287 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v10);
    else
      *(_DWORD *)v34 -= 2;
  }
  WebCore::ApplePayRequestBase::~ApplePayRequestBase((WebCore::ApplePayRequestBase *)&v227, v10);
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSApplePaySession>::construct(JSC *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  WebCore::Document *v9;
  void *v10;
  WebCore::JSDOMGlobalObject *v11;
  JSC::VM *v12;
  WTF *v13;
  JSCell *v14;
  uint64_t v15;
  JSC::JSCell *v16;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v18;
  JSC::JSGlobalObject *v19;
  JSC::VM *v20;
  JSC::JSObject *v21;
  JSC::Structure *v22;
  JSC::VM *FunctionRealm;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char **v30;
  int v31;
  JSC::JSCell *v32;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v34;
  JSC::Structure *v35;
  JSC::JSCell *v36;
  uint64_t v37;
  unint64_t SubclassStructure;
  JSValue v40;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  JSValue v44;
  uint64_t v45;
  WTF *v46;
  WTF::StringImpl *v47;
  int v48[2];
  WTF::StringImpl *v49;
  int v50;
  _DWORD v51[2];
  JSC::VM *v52;
  _BYTE v53[8];
  _BYTE v54[1240];
  unsigned int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 7);
  v52 = (JSC::VM *)v3;
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v40.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException((JSC::VM *)v3, this, v40);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v52, (uint64_t)"ApplePaySession", 16);
  v7 = v6;
  if (*(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1952150E4);
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *(_QWORD *)(a2 + 48), v51);
  if (v51[1])
    return 0;
  WebCore::convertDictionary<WebCore::ApplePayPaymentRequest>((uint64_t)v53, (JSC::VM **)this, *(JSC::JSCell **)(a2 + 56));
  v8 = v55;
  if (v55)
  {
    v14 = 0;
LABEL_30:
    if (v8 != -1)
      (*(&off_1E334B308 + v8))((int)&v46, (WebCore::ApplePayPaymentRequest *)v54);
    return v14;
  }
  v9 = (WebCore::Document *)v51[0];
  WebCore::ApplePayPaymentRequest::ApplePayPaymentRequest((uint64_t)&v46, (uint64_t)v54);
  WebCore::ApplePaySession::create((WebCore::PaymentSession *)(v7 - 192), v9, (uint64_t)&v46, (uint64_t)v48);
  WebCore::ApplePayPaymentRequest::~ApplePayPaymentRequest((WebCore::ApplePayPaymentRequest *)&v46, v10);
  if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
    goto LABEL_53;
  if (!v50)
  {
    v12 = *(JSC::VM **)(v5 + 40);
    v13 = *(WTF **)v48;
    *(_QWORD *)v48 = 0;
    v46 = v13;
    if (*(uint64_t (***)(WebCore::ApplePaySession *__hidden))v13 != &off_1E3352320)
    {
      __break(0xC471u);
      JUMPOUT(0x19521519CLL);
    }
    v14 = (JSCell *)WebCore::createWrapper<WebCore::ApplePaySession,WebCore::ApplePaySession>(v12, &v46, v11);
    if (v46)
    {
      v15 = *(_QWORD *)(*(_QWORD *)v46 - 24);
      if (*(_DWORD *)((char *)v46 + v15 + 8) == 1)
        (*(void (**)(char *))(*(_QWORD *)((char *)v46 + v15) + 8))((char *)v46 + v15);
      else
        --*(_DWORD *)((char *)v46 + v15 + 8);
    }
    goto LABEL_12;
  }
  if (v50 == 1)
  {
    v42 = (WTF::StringImpl *)LOBYTE(v48[0]);
    LOBYTE(v46) = v48[0];
    v43 = v49;
    v49 = 0;
    v47 = v43;
    if (!*(_QWORD *)(v3 + 16))
    {
      v44.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v48[0]), (JSC::JSGlobalObject *)&v47);
      JSC::VM::throwException((JSC::VM *)v3, this, v44);
      v43 = v47;
    }
    v47 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v42);
      else
        *(_DWORD *)v43 -= 2;
    }
    v14 = 0;
LABEL_12:
    if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
    {
LABEL_53:
      v14 = 0;
LABEL_27:
      if (v50 != -1)
        ((void (*)(WTF **, int *))off_1E334B2F8[v50])(&v46, v48);
      v8 = v55;
      goto LABEL_30;
    }
    v16 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v16 & 0xFFFE000000000002) != 0
      || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v16)) == 0
      || (v19 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
      || (v20 = (JSC::VM *)*((_QWORD *)this + 7),
          FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(this, Object, v18),
          *((_DWORD *)v20 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v20) & 1) != 0)
    {
LABEL_26:
      if (!*(_DWORD *)(v3 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) == 0)
        goto LABEL_27;
      goto LABEL_53;
    }
    v24 = *((_QWORD *)FunctionRealm + 412);
    if (v24)
    {
      v25 = *(_DWORD *)(v24 - 8);
      v26 = ((unint64_t)&WebCore::JSApplePaySession::s_info + ~((_QWORD)&WebCore::JSApplePaySession::s_info << 32)) ^ (((unint64_t)&WebCore::JSApplePaySession::s_info + ~((_QWORD)&WebCore::JSApplePaySession::s_info << 32)) >> 22);
      v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
      v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
      v29 = v25 & ((v28 >> 31) ^ v28);
      v30 = *(char ***)(v24 + 16 * v29);
      if (v30 == &WebCore::JSApplePaySession::s_info)
      {
LABEL_22:
        v21 = *(JSC::JSObject **)(v24 + 16 * v29 + 8);
        if (v21)
        {
LABEL_24:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v19, v21, v22);
          if (!*((_DWORD *)v20 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v20) & 1) == 0)
            JSC::JSObject::setStructure(v14, v20, SubclassStructure);
          goto LABEL_26;
        }
      }
      else
      {
        v31 = 1;
        while (v30)
        {
          v29 = ((_DWORD)v29 + v31) & v25;
          v30 = *(char ***)(v24 + 16 * v29);
          ++v31;
          if (v30 == &WebCore::JSApplePaySession::s_info)
            goto LABEL_22;
        }
      }
    }
    v32 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v20, FunctionRealm, v21);
    Structure = WebCore::JSApplePaySessionPrototype::createStructure((uint64_t *)v20, (uint64_t)FunctionRealm, v32);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v36 = (JSC::JSCell *)WebCore::JSApplePaySessionPrototype::create(v20, Structure, v34, v35);
    v37 = WebCore::JSApplePaySession::createStructure((uint64_t *)v20, (uint64_t)FunctionRealm, v36);
    v21 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v37, (uint64_t)&WebCore::JSApplePaySession::s_info);
    goto LABEL_24;
  }
  v45 = std::__throw_bad_variant_access[abi:sn180100]();
  return (JSCell *)WebCore::JSApplePaySession::analyzeHeap(v45);
}

uint64_t WebCore::JSApplePaySession::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 32);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSApplePaySessionPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSApplePaySessionPrototype::create(WebCore::JSApplePaySessionPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<24u>(this, (uint64_t)&WebCore::JSApplePaySession::s_info, (uint64_t)&WebCore::JSApplePaySessionPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSApplePaySession>,(WebCore::DOMConstructorID)53>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 424);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructor<WebCore::JSApplePaySession>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSApplePaySession::s_info + ~((_QWORD)&WebCore::JSApplePaySession::s_info << 32)) ^ (((unint64_t)&WebCore::JSApplePaySession::s_info + ~((_QWORD)&WebCore::JSApplePaySession::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSApplePaySession::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSApplePaySession::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSApplePaySessionPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSApplePaySessionPrototype::create((WebCore::JSApplePaySessionPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSApplePaySession::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSApplePaySession::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  JSC::reifyStaticProperties<12u>((JSC::VM *)a1, (uint64_t)&WebCore::JSApplePaySession::s_info, (uint64_t)&WebCore::JSApplePaySessionConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 424) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsApplePaySessionConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSApplePaySessionPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSApplePaySession>,(WebCore::DOMConstructorID)53>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsApplePaySession_onvalidatemerchant(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(WebCore **)(a2 + 24);
  v6 = (char *)v5 - 32;
  ++*(_DWORD *)((char *)v5 + *(_QWORD *)(*((_QWORD *)v5 - 4) - 24) - 24);
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v9 + 2232), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  v11 = *(_QWORD *)(*((_QWORD *)v5 - 4) - 24);
  if (*(_DWORD *)&v6[v11 + 8] == 1)
    (*(void (**)(char *))(*(_QWORD *)&v6[v11] + 8))(&v6[v11]);
  else
    --*(_DWORD *)&v6[v11 + 8];
  return v10;
}

BOOL WebCore::setJSApplePaySession_onvalidatemerchant(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSApplePaySession::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSApplePaySession::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      v12 = (char *)v11 - 32;
      ++*(_DWORD *)((char *)v11 + *(_QWORD *)(*((_QWORD *)v11 - 4) - 24) - 24);
      v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
        v14 = WebCore::threadGlobalDataSlow(a1);
      v15 = *(_QWORD *)(v14 + 40);
      if (!v15)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v14);
        v15 = *(_QWORD *)(v14 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v15 + 2232), a3, (_DWORD *)a2);
      v16 = *(_QWORD *)(*((_QWORD *)v11 - 4) - 24);
      if (*(_DWORD *)&v12[v16 + 8] == 1)
      {
        (*(void (**)(char *))(*(_QWORD *)&v12[v16] + 8))(&v12[v16]);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*(_DWORD *)&v12[v16 + 8];
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsApplePaySession_onpaymentmethodselected(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(WebCore **)(a2 + 24);
  v6 = (char *)v5 - 32;
  ++*(_DWORD *)((char *)v5 + *(_QWORD *)(*((_QWORD *)v5 - 4) - 24) - 24);
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v9 + 1456), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  v11 = *(_QWORD *)(*((_QWORD *)v5 - 4) - 24);
  if (*(_DWORD *)&v6[v11 + 8] == 1)
    (*(void (**)(char *))(*(_QWORD *)&v6[v11] + 8))(&v6[v11]);
  else
    --*(_DWORD *)&v6[v11 + 8];
  return v10;
}

BOOL WebCore::setJSApplePaySession_onpaymentmethodselected(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSApplePaySession::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSApplePaySession::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      v12 = (char *)v11 - 32;
      ++*(_DWORD *)((char *)v11 + *(_QWORD *)(*((_QWORD *)v11 - 4) - 24) - 24);
      v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
        v14 = WebCore::threadGlobalDataSlow(a1);
      v15 = *(_QWORD *)(v14 + 40);
      if (!v15)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v14);
        v15 = *(_QWORD *)(v14 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v15 + 1456), a3, (_DWORD *)a2);
      v16 = *(_QWORD *)(*((_QWORD *)v11 - 4) - 24);
      if (*(_DWORD *)&v12[v16 + 8] == 1)
      {
        (*(void (**)(char *))(*(_QWORD *)&v12[v16] + 8))(&v12[v16]);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*(_DWORD *)&v12[v16 + 8];
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsApplePaySession_onpaymentauthorized(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(WebCore **)(a2 + 24);
  v6 = (char *)v5 - 32;
  ++*(_DWORD *)((char *)v5 + *(_QWORD *)(*((_QWORD *)v5 - 4) - 24) - 24);
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v9 + 1440), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  v11 = *(_QWORD *)(*((_QWORD *)v5 - 4) - 24);
  if (*(_DWORD *)&v6[v11 + 8] == 1)
    (*(void (**)(char *))(*(_QWORD *)&v6[v11] + 8))(&v6[v11]);
  else
    --*(_DWORD *)&v6[v11 + 8];
  return v10;
}

BOOL WebCore::setJSApplePaySession_onpaymentauthorized(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSApplePaySession::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSApplePaySession::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      v12 = (char *)v11 - 32;
      ++*(_DWORD *)((char *)v11 + *(_QWORD *)(*((_QWORD *)v11 - 4) - 24) - 24);
      v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
        v14 = WebCore::threadGlobalDataSlow(a1);
      v15 = *(_QWORD *)(v14 + 40);
      if (!v15)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v14);
        v15 = *(_QWORD *)(v14 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v15 + 1440), a3, (_DWORD *)a2);
      v16 = *(_QWORD *)(*((_QWORD *)v11 - 4) - 24);
      if (*(_DWORD *)&v12[v16 + 8] == 1)
      {
        (*(void (**)(char *))(*(_QWORD *)&v12[v16] + 8))(&v12[v16]);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*(_DWORD *)&v12[v16 + 8];
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsApplePaySession_onshippingmethodselected(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(WebCore **)(a2 + 24);
  v6 = (char *)v5 - 32;
  ++*(_DWORD *)((char *)v5 + *(_QWORD *)(*((_QWORD *)v5 - 4) - 24) - 24);
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v9 + 1832), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  v11 = *(_QWORD *)(*((_QWORD *)v5 - 4) - 24);
  if (*(_DWORD *)&v6[v11 + 8] == 1)
    (*(void (**)(char *))(*(_QWORD *)&v6[v11] + 8))(&v6[v11]);
  else
    --*(_DWORD *)&v6[v11 + 8];
  return v10;
}

BOOL WebCore::setJSApplePaySession_onshippingmethodselected(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSApplePaySession::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSApplePaySession::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      v12 = (char *)v11 - 32;
      ++*(_DWORD *)((char *)v11 + *(_QWORD *)(*((_QWORD *)v11 - 4) - 24) - 24);
      v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
        v14 = WebCore::threadGlobalDataSlow(a1);
      v15 = *(_QWORD *)(v14 + 40);
      if (!v15)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v14);
        v15 = *(_QWORD *)(v14 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v15 + 1832), a3, (_DWORD *)a2);
      v16 = *(_QWORD *)(*((_QWORD *)v11 - 4) - 24);
      if (*(_DWORD *)&v12[v16 + 8] == 1)
      {
        (*(void (**)(char *))(*(_QWORD *)&v12[v16] + 8))(&v12[v16]);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*(_DWORD *)&v12[v16 + 8];
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsApplePaySession_onshippingcontactselected(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(WebCore **)(a2 + 24);
  v6 = (char *)v5 - 32;
  ++*(_DWORD *)((char *)v5 + *(_QWORD *)(*((_QWORD *)v5 - 4) - 24) - 24);
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v9 + 1824), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  v11 = *(_QWORD *)(*((_QWORD *)v5 - 4) - 24);
  if (*(_DWORD *)&v6[v11 + 8] == 1)
    (*(void (**)(char *))(*(_QWORD *)&v6[v11] + 8))(&v6[v11]);
  else
    --*(_DWORD *)&v6[v11 + 8];
  return v10;
}

BOOL WebCore::setJSApplePaySession_onshippingcontactselected(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSApplePaySession::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSApplePaySession::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      v12 = (char *)v11 - 32;
      ++*(_DWORD *)((char *)v11 + *(_QWORD *)(*((_QWORD *)v11 - 4) - 24) - 24);
      v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
        v14 = WebCore::threadGlobalDataSlow(a1);
      v15 = *(_QWORD *)(v14 + 40);
      if (!v15)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v14);
        v15 = *(_QWORD *)(v14 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v15 + 1824), a3, (_DWORD *)a2);
      v16 = *(_QWORD *)(*((_QWORD *)v11 - 4) - 24);
      if (*(_DWORD *)&v12[v16 + 8] == 1)
      {
        (*(void (**)(char *))(*(_QWORD *)&v12[v16] + 8))(&v12[v16]);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*(_DWORD *)&v12[v16 + 8];
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsApplePaySession_oncouponcodechanged(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(WebCore **)(a2 + 24);
  v6 = (char *)v5 - 32;
  ++*(_DWORD *)((char *)v5 + *(_QWORD *)(*((_QWORD *)v5 - 4) - 24) - 24);
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v9 + 536), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  v11 = *(_QWORD *)(*((_QWORD *)v5 - 4) - 24);
  if (*(_DWORD *)&v6[v11 + 8] == 1)
    (*(void (**)(char *))(*(_QWORD *)&v6[v11] + 8))(&v6[v11]);
  else
    --*(_DWORD *)&v6[v11 + 8];
  return v10;
}

BOOL WebCore::setJSApplePaySession_oncouponcodechanged(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSApplePaySession::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSApplePaySession::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      v12 = (char *)v11 - 32;
      ++*(_DWORD *)((char *)v11 + *(_QWORD *)(*((_QWORD *)v11 - 4) - 24) - 24);
      v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
        v14 = WebCore::threadGlobalDataSlow(a1);
      v15 = *(_QWORD *)(v14 + 40);
      if (!v15)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v14);
        v15 = *(_QWORD *)(v14 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v15 + 536), a3, (_DWORD *)a2);
      v16 = *(_QWORD *)(*((_QWORD *)v11 - 4) - 24);
      if (*(_DWORD *)&v12[v16 + 8] == 1)
      {
        (*(void (**)(char *))(*(_QWORD *)&v12[v16] + 8))(&v12[v16]);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*(_DWORD *)&v12[v16 + 8];
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsApplePaySession_oncancel(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(WebCore **)(a2 + 24);
  v6 = (char *)v5 - 32;
  ++*(_DWORD *)((char *)v5 + *(_QWORD *)(*((_QWORD *)v5 - 4) - 24) - 24);
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v9 + 344), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  v11 = *(_QWORD *)(*((_QWORD *)v5 - 4) - 24);
  if (*(_DWORD *)&v6[v11 + 8] == 1)
    (*(void (**)(char *))(*(_QWORD *)&v6[v11] + 8))(&v6[v11]);
  else
    --*(_DWORD *)&v6[v11 + 8];
  return v10;
}

BOOL WebCore::setJSApplePaySession_oncancel(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSApplePaySession::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSApplePaySession::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      v12 = (char *)v11 - 32;
      ++*(_DWORD *)((char *)v11 + *(_QWORD *)(*((_QWORD *)v11 - 4) - 24) - 24);
      v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
        v14 = WebCore::threadGlobalDataSlow(a1);
      v15 = *(_QWORD *)(v14 + 40);
      if (!v15)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v14);
        v15 = *(_QWORD *)(v14 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v15 + 344), a3, (_DWORD *)a2);
      v16 = *(_QWORD *)(*((_QWORD *)v11 - 4) - 24);
      if (*(_DWORD *)&v12[v16 + 8] == 1)
      {
        (*(void (**)(char *))(*(_QWORD *)&v12[v16] + 8))(&v12[v16]);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*(_DWORD *)&v12[v16 + 8];
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSApplePaySessionOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 16);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 8)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 24) + 64))(v5 - 24), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

_QWORD *WebCore::JSApplePaySessionOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD *v29;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = (_QWORD *)(v3 - 32);
  v5 = *(_QWORD *)(v3 - 32);
  ++*(_DWORD *)(*(_QWORD *)(v5 - 24) + v3 - 32 + 8);
  if (*(_DWORD *)(a3 + 48))
  {
    v11 = *(_QWORD *)(a3 + 32);
    v9 = (uint64_t *)(a3 + 32);
    v10 = v11;
    if (v11)
    {
      v12 = *(_DWORD *)(v10 - 8);
      v13 = ((unint64_t)v4 + ~((_QWORD)v4 << 32)) ^ (((unint64_t)v4 + ~((_QWORD)v4 << 32)) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = *(_QWORD **)(v10 + 16 * v16);
      if (v17 != v4)
      {
        v18 = 1;
        while (v17)
        {
          v16 = ((_DWORD)v16 + v18) & v12;
          v17 = *(_QWORD **)(v10 + 16 * v16);
          ++v18;
          if (v17 == v4)
            goto LABEL_12;
        }
        v16 = *(unsigned int *)(v10 - 4);
      }
LABEL_12:
      if (v16 != *(_DWORD *)(v10 - 4))
      {
        v19 = (_QWORD *)(v10 + 16 * v16);
        *v19 = -1;
        v22 = v19[1];
        v21 = v19 + 1;
        v20 = v22;
        if (v22)
        {
          *(_QWORD *)(v20 + 8) = 3;
          *v21 = 0;
        }
        ++*(_DWORD *)(*v9 - 16);
        v23 = *v9;
        if (*v9)
          v24 = *(_DWORD *)(v23 - 12) - 1;
        else
          v24 = -1;
        *(_DWORD *)(v23 - 12) = v24;
        v25 = *v9;
        if (*v9)
        {
          v26 = 6 * *(_DWORD *)(v25 - 12);
          v27 = *(_DWORD *)(v25 - 4);
          if (v26 < v27 && v27 >= 9)
          {
            v29 = v4;
            result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v9, v27 >> 1, 0);
            v4 = v29;
            v5 = *v29;
          }
        }
      }
    }
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  v7 = *(_QWORD *)(v5 - 24);
  if (*(_DWORD *)((char *)v4 + v7 + 8) == 1)
    return (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)((char *)v4 + v7) + 8))((char *)v4 + v7);
  --*(_DWORD *)((char *)v4 + v7 + 8);
  return result;
}

unint64_t WebCore::createWrapper<WebCore::ApplePaySession,WebCore::ApplePaySession>(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSEventTarget *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  WTF *v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *Allocator;
  uint64_t v48;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  WTF *v56;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSApplePaySession::s_info + ~((_QWORD)&WebCore::JSApplePaySession::s_info << 32)) ^ (((unint64_t)&WebCore::JSApplePaySession::s_info + ~((_QWORD)&WebCore::JSApplePaySession::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSApplePaySession::s_info)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSApplePaySession::s_info)
          goto LABEL_6;
      }
    }
  }
  v15 = (WebCore::JSEventTarget *)*((_QWORD *)a1 + 7);
  v16 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v15, a1, a3);
  Structure = WebCore::JSApplePaySessionPrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSApplePaySessionPrototype::create(v15, Structure, v18, v19);
  v21 = WebCore::JSApplePaySession::createStructure((uint64_t *)v15, (uint64_t)a1, v20);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, v21, (uint64_t)&WebCore::JSApplePaySession::s_info);
LABEL_8:
  v22 = *((_QWORD *)a1 + 7);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 424);
  if (v25)
    goto LABEL_31;
  v26 = *(_QWORD *)(v23 + 22648);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_13:
  v28 = *(_QWORD *)(v26 + 2824);
  v54 = *(_QWORD *)(v28 + 424);
  if (!v54)
  {
    v29 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v56, "IsoSpace T");
    v55 = 0;
    MEMORY[0x19AEA3204](v29, &v56, v22 + 192, v22 + 1872, 32, 8, &v55);
    v31 = (uint64_t)v55;
    v55 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v56;
    v56 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::fastFree(v32, v30);
      else
        --*(_DWORD *)v32;
    }
    v54 = v29;
    v33 = *(_QWORD *)(v28 + 424);
    *(_QWORD *)(v28 + 424) = v29;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = *(unsigned int *)(v26 + 2844);
    if ((_DWORD)v34 == *(_DWORD *)(v26 + 2840))
    {
      v35 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26 + 2832, v34 + 1, (unint64_t)&v54);
      v34 = *(unsigned int *)(v26 + 2844);
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = *v35;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = v29;
    }
    *(_DWORD *)(v26 + 2844) = v34 + 1;
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v24 + 424);
  *(_QWORD *)(v24 + 424) = v25;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v26);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_31:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_32:
    v25[3] = SlowCase + 32;
    goto LABEL_33;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v53 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v53);
    v25[5] = SlowCase + (int)v53;
    goto LABEL_32;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  v41 = *a2;
  *a2 = 0;
  v42 = (char *)v41 + 32;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  *(_QWORD *)(SlowCase + 24) = v42;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v43 = *((_QWORD *)a1 + 415);
  if ((byte_1EE337510 & 1) == 0)
  {
    qword_1EE337508 = (uint64_t)&off_1E334AF80;
    byte_1EE337510 = 1;
  }
  if (v5)
    v44 = (uint64_t *)((char *)v5 + 40);
  else
    v44 = 0;
  if (!*(_DWORD *)(v43 + 48))
  {
    if ((SlowCase & 8) != 0)
      v45 = (SlowCase - 112) | 1;
    else
      v45 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v45 & 1) != 0)
      v46 = v45 + 47;
    else
      v46 = *(_QWORD *)v45 + 32;
    Allocator = *(_QWORD **)(v46 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v46 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE337508;
    Allocator[2] = v43;
    v48 = *v44;
    *v44 = (uint64_t)Allocator;
    if (!v48)
      return SlowCase;
LABEL_58:
    *(_QWORD *)(v48 + 8) = 3;
    return SlowCase;
  }
  v56 = v5;
  if ((SlowCase & 8) != 0)
    v50 = (SlowCase - 112) | 1;
  else
    v50 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v50 & 1) != 0)
    v51 = v50 + 47;
  else
    v51 = *(_QWORD *)v50 + 32;
  v52 = *(_QWORD **)(v51 + 16);
  if (!v52)
    v52 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v51 + 16) = *v52;
  *v52 = SlowCase;
  v52[1] = &qword_1EE337508;
  v52[2] = v43;
  v55 = v52;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v43 + 32), (uint64_t *)&v56, (uint64_t *)&v55);
  v48 = (uint64_t)v55;
  if (v55)
    goto LABEL_58;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::ApplePaySession>(int a1, JSC::VM *a2, uint64_t (***a3)(WebCore::ApplePaySession *__hidden this))
{
  uint64_t v3;
  uint64_t (**v4)(WebCore::ApplePaySession *__hidden);
  unint64_t v5;
  uint64_t (**v6)(WebCore::ApplePaySession *__hidden);
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t (***v15)(WebCore::ApplePaySession *__hidden);
  int v16;
  WTF *v17;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v9 = *(_QWORD *)(v3 + 32);
    if (!v9)
      goto LABEL_5;
    v10 = *(_DWORD *)(v9 - 8);
    v11 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(uint64_t (****)(WebCore::ApplePaySession *__hidden))(v9 + 16 * v14);
    if (v15 != a3)
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(uint64_t (****)(WebCore::ApplePaySession *__hidden))(v9 + 16 * v14);
        ++v16;
        if (v15 == a3)
          goto LABEL_16;
      }
      goto LABEL_5;
    }
LABEL_16:
    v4 = *(uint64_t (***)(WebCore::ApplePaySession *__hidden))(v9 + 16 * v14 + 8);
    if (!v4)
      goto LABEL_5;
  }
  else
  {
    v4 = a3[5];
    if (!v4)
      goto LABEL_5;
  }
  if (((_BYTE)v4[1] & 3) == 0)
  {
    v5 = (unint64_t)*v4;
    if (*v4)
      return v5;
  }
LABEL_5:
  v6 = *a3;
  ++*(_DWORD *)((char *)a3 + (_QWORD)*(*a3 - 3) + 8);
  v17 = (WTF *)a3;
  if (v6 == &off_1E3352320)
  {
    v5 = WebCore::createWrapper<WebCore::ApplePaySession,WebCore::ApplePaySession>(a2, &v17, (WebCore::JSDOMGlobalObject *)a3);
    if (v17)
    {
      v7 = *(_QWORD *)(*(_QWORD *)v17 - 24);
      if (*(_DWORD *)((char *)v17 + v7 + 8) == 1)
        (*(void (**)(char *))(*(_QWORD *)((char *)v17 + v7) + 8))((char *)v17 + v7);
      else
        --*(_DWORD *)((char *)v17 + v7 + 8);
    }
    return v5;
  }
  result = 965;
  __break(0xC471u);
  return result;
}

_QWORD *WebCore::JSDOMConstructor<WebCore::JSApplePaySetup>::construct(JSC *this, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v27;
  JSC::Structure *v28;
  JSC::JSCell *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  unint64_t SlowCase;
  uint64_t (***v48)(WebCore::ContextDestructionObserver *__hidden);
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *Allocator;
  JSC::JSCell *v53;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v55;
  JSC::JSGlobalObject *v56;
  JSC::VM *v57;
  JSC::Structure *v58;
  uint64_t FunctionRealm;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char **v66;
  int v67;
  JSC::JSObject *v68;
  unint64_t v69;
  WebCore::JSDOMGlobalObject *v70;
  JSC::Structure *v71;
  JSC::JSCell *v72;
  uint64_t v73;
  unint64_t SubclassStructure;
  uint64_t v76;
  WTF::StringImpl **v77;
  WTF::StringImpl *v78;
  JSValue v79;
  unint64_t v81;
  JSC *v82;
  uint64_t v83;
  JSC::VM *v84;
  WTF::StringImpl *v85[2];
  WTF::StringImpl *v86[2];
  uint64_t v87;
  uint64_t (***v88)(WebCore::ContextDestructionObserver *__hidden);
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  unsigned int v92;
  JSC::VM *v93;
  uint64_t v94[2];

  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v93 = v3;
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v79.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (_QWORD *)JSC::VM::throwException(v3, this, v79);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v93, (uint64_t)"ApplePaySetup", 14);
  v7 = v6;
  WebCore::convertDictionary<WebCore::ApplePaySetupConfiguration>(*(JSC::JSCell **)(a2 + 48), (WTF::StringImpl **)this, (uint64_t)&v89);
  v8 = v92;
  if (!v92)
  {
    v9 = v89;
    v10 = v90;
    v89 = 0u;
    v90 = 0u;
    *(_OWORD *)v85 = v9;
    *(_OWORD *)v86 = v10;
    v11 = v91;
    v91 = 0;
    v87 = v11;
    WebCore::ApplePaySetup::create(v7, (uint64_t *)v85, (uint64_t *)&v88);
    v13 = v86[1];
    if (HIDWORD(v87))
    {
      v76 = 8 * HIDWORD(v87);
      v77 = (WTF::StringImpl **)v86[1];
      do
      {
        v78 = *v77;
        *v77 = 0;
        if (v78)
        {
          if (*(_DWORD *)v78 == 2)
            WTF::StringImpl::destroy(v78, v12);
          else
            *(_DWORD *)v78 -= 2;
        }
        ++v77;
        v76 -= 8;
      }
      while (v76);
    }
    if (v13)
    {
      v86[1] = 0;
      LODWORD(v87) = 0;
      WTF::fastFree(v13, v12);
    }
    if (v86[0])
    {
      if (*(_DWORD *)v86[0] == 2)
        WTF::StringImpl::destroy(v86[0], v12);
      else
        *(_DWORD *)v86[0] -= 2;
    }
    if (v85[1])
    {
      if (*(_DWORD *)v85[1] == 2)
        WTF::StringImpl::destroy(v85[1], v12);
      else
        *(_DWORD *)v85[1] -= 2;
    }
    if (v85[0])
    {
      if (*(_DWORD *)v85[0] == 2)
        WTF::StringImpl::destroy(v85[0], v12);
      else
        *(_DWORD *)v85[0] -= 2;
    }
    v14 = (WTF::StringImpl *)v88;
    if (*v88 != &off_1E33524C0)
    {
      __break(0xC471u);
      JUMPOUT(0x195217A18);
    }
    v83 = v8;
    v84 = v3;
    v15 = *(_QWORD *)(v5 + 40);
    v16 = *(_QWORD *)(v15 + 3296);
    if (v16)
    {
      v17 = *(_DWORD *)(v16 - 8);
      v18 = ((unint64_t)&WebCore::JSApplePaySetup::s_info + ~((_QWORD)&WebCore::JSApplePaySetup::s_info << 32)) ^ (((unint64_t)&WebCore::JSApplePaySetup::s_info + ~((_QWORD)&WebCore::JSApplePaySetup::s_info << 32)) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = *(char ***)(v16 + 16 * v21);
      if (v22 == &WebCore::JSApplePaySetup::s_info)
      {
LABEL_22:
        v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
        if (v24)
          goto LABEL_24;
      }
      else
      {
        v23 = 1;
        while (v22)
        {
          v21 = ((_DWORD)v21 + v23) & v17;
          v22 = *(char ***)(v16 + 16 * v21);
          ++v23;
          if (v22 == &WebCore::JSApplePaySetup::s_info)
            goto LABEL_22;
        }
      }
    }
    v25 = *(uint64_t **)(v15 + 56);
    Structure = WebCore::JSApplePaySetupPrototype::createStructure(v25, v15, *(JSC::JSCell **)(v15 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v29 = (JSC::JSCell *)WebCore::JSApplePaySetupPrototype::create((WebCore::JSApplePaySetupPrototype *)v25, Structure, v27, v28);
    v30 = WebCore::JSApplePaySetup::createStructure(v25, v15, v29);
    v24 = WebCore::cacheDOMStructure((JSCell *)v15, v30, (uint64_t)&WebCore::JSApplePaySetup::s_info);
LABEL_24:
    v82 = this;
    v31 = *(_QWORD *)(v15 + 56);
    v32 = *(_QWORD *)(v31 + 41456);
    v33 = *(_QWORD *)(v32 + 23536);
    v34 = *(_QWORD **)(v33 + 432);
    if (v34)
      goto LABEL_44;
    v35 = *(_QWORD *)(v32 + 22648);
    if (__ldaxr((unsigned __int8 *)v35))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v35))
    {
      goto LABEL_29;
    }
    MEMORY[0x19AEA534C](v35);
LABEL_29:
    v37 = *(_QWORD *)(v35 + 2824);
    if (!*(_QWORD *)(v37 + 432))
    {
      v38 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)v85, "IsoSpace T");
      v94[0] = 0;
      MEMORY[0x19AEA3204](v38, v85, v31 + 192, v31 + 1872, 32, 8, v94);
      v40 = v94[0];
      v94[0] = 0;
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      v41 = v85[0];
      v85[0] = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 1)
          WTF::fastFree(v41, v39);
        else
          --*(_DWORD *)v41;
      }
      v42 = *(_QWORD *)(v37 + 432);
      *(_QWORD *)(v37 + 432) = v38;
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    }
    v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v43 = *(_QWORD *)(v33 + 432);
    *(_QWORD *)(v33 + 432) = v34;
    if (v43)
    {
      v44 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v44, v45);
    }
    v46 = __ldxr((unsigned __int8 *)v35);
    if (v46 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v35))
      {
LABEL_44:
        SlowCase = v34[3];
        if (SlowCase >= v34[4])
        {
          SlowCase = v34[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_46:
            *(_DWORD *)SlowCase = 0;
            WebCore::JSDOMObject::JSDOMObject(SlowCase, v24);
            v48 = v88;
            v88 = 0;
            *(_QWORD *)(SlowCase + 24) = v48;
            if (*(_BYTE *)(v31 + 755))
              __dmb(0xAu);
            v49 = *(_QWORD *)(v15 + 3320);
            if ((byte_1EE337520 & 1) == 0)
            {
              qword_1EE337518 = (uint64_t)&off_1E334AFB0;
              byte_1EE337520 = 1;
            }
            v85[0] = v14;
            if ((SlowCase & 8) != 0)
              v50 = (SlowCase - 112) | 1;
            else
              v50 = SlowCase & 0xFFFFFFFFFFFFC000;
            if ((v50 & 1) != 0)
              v51 = v50 + 47;
            else
              v51 = *(_QWORD *)v50 + 32;
            Allocator = *(_QWORD **)(v51 + 16);
            if (!Allocator)
              Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
            *(_QWORD *)(v51 + 16) = *Allocator;
            *Allocator = SlowCase;
            Allocator[1] = &qword_1EE337518;
            Allocator[2] = v49;
            v94[0] = (uint64_t)Allocator;
            JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v49 + 32), (uint64_t *)v85, v94);
            if (v94[0])
              *(_QWORD *)(v94[0] + 8) = 3;
            v53 = *(JSC::JSCell **)(a2 + 40);
            if (((unint64_t)v53 & 0xFFFE000000000002) != 0)
              goto LABEL_72;
            Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v53);
            if (!Object)
              goto LABEL_72;
            v56 = Object;
            if (Object == *(JSC::JSGlobalObject **)(a2 + 24))
              goto LABEL_72;
            v57 = (JSC::VM *)*((_QWORD *)v82 + 7);
            FunctionRealm = JSC::getFunctionRealm(v82, Object, v55);
            if (*((_DWORD *)v57 + 20))
            {
              if ((JSC::VM::hasExceptionsAfterHandlingTraps(v57) & 1) != 0)
                goto LABEL_72;
            }
            v60 = *(_QWORD *)(FunctionRealm + 3296);
            if (v60)
            {
              v61 = *(_DWORD *)(v60 - 8);
              v62 = ((unint64_t)&WebCore::JSApplePaySetup::s_info
                   + ~((_QWORD)&WebCore::JSApplePaySetup::s_info << 32)) ^ (((unint64_t)&WebCore::JSApplePaySetup::s_info
                                                                           + ~((_QWORD)&WebCore::JSApplePaySetup::s_info << 32)) >> 22);
              v63 = 9 * ((v62 + ~(v62 << 13)) ^ ((v62 + ~(v62 << 13)) >> 8));
              v64 = (v63 ^ (v63 >> 15)) + ~((v63 ^ (v63 >> 15)) << 27);
              v65 = v61 & ((v64 >> 31) ^ v64);
              v66 = *(char ***)(v60 + 16 * v65);
              if (v66 == &WebCore::JSApplePaySetup::s_info)
              {
LABEL_68:
                v68 = *(JSC::JSObject **)(v60 + 16 * v65 + 8);
                if (v68)
                {
LABEL_70:
                  SubclassStructure = JSC::InternalFunction::createSubclassStructure(v82, v56, v68, v58);
                  if (!*((_DWORD *)v57 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v57) & 1) == 0)
                    JSC::JSObject::setStructure((JSCell *)SlowCase, v57, SubclassStructure);
LABEL_72:
                  if (*((_DWORD *)v84 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v84) & 1) != 0)
                    SlowCase = 0;
                  v8 = v83;
                  goto LABEL_74;
                }
              }
              else
              {
                v67 = 1;
                while (v66)
                {
                  v65 = ((_DWORD)v65 + v67) & v61;
                  v66 = *(char ***)(v60 + 16 * v65);
                  ++v67;
                  if (v66 == &WebCore::JSApplePaySetup::s_info)
                    goto LABEL_68;
                }
              }
            }
            v69 = WebCore::JSApplePaySetupPrototype::createStructure((uint64_t *)v57, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
            *(_DWORD *)(v69 + 16) |= 0x80000u;
            v72 = (JSC::JSCell *)WebCore::JSApplePaySetupPrototype::create(v57, v69, v70, v71);
            v73 = WebCore::JSApplePaySetup::createStructure((uint64_t *)v57, FunctionRealm, v72);
            v68 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v73, (uint64_t)&WebCore::JSApplePaySetup::s_info);
            goto LABEL_70;
          }
          v81 = *(_QWORD *)(SlowCase + 8) ^ v34[6];
          v34[4] = SlowCase + HIDWORD(v81);
          v34[5] = SlowCase + (int)v81;
        }
        v34[3] = SlowCase + 32;
        goto LABEL_46;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v35);
    goto LABEL_44;
  }
  SlowCase = 0;
LABEL_74:
  if ((_DWORD)v8 != -1)
    (*(&off_1E334B918 + v8))((int)v85, (WebCore::ApplePaySetupConfiguration *)&v89);
  return (_QWORD *)SlowCase;
}

_DWORD *WebCore::JSApplePaySetup::destroy(WebCore::JSApplePaySetup *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

uint64_t WebCore::JSApplePaySetup::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSApplePaySetupPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSApplePaySetupPrototype::create(WebCore::JSApplePaySetupPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSApplePaySetup::s_info, &WebCore::JSApplePaySetupPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSApplePaySetup>,(WebCore::DOMConstructorID)54>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 432);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSApplePaySetup>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000001, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSApplePaySetup::s_info + ~((_QWORD)&WebCore::JSApplePaySetup::s_info << 32)) ^ (((unint64_t)&WebCore::JSApplePaySetup::s_info + ~((_QWORD)&WebCore::JSApplePaySetup::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSApplePaySetup::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSApplePaySetup::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSApplePaySetupPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSApplePaySetupPrototype::create((WebCore::JSApplePaySetupPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSApplePaySetup::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSApplePaySetup::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 432) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsApplePaySetupConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSApplePaySetupPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSApplePaySetup>,(WebCore::DOMConstructorID)54>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSApplePaySetupOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[1];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[2] || (result = (*(uint64_t (**)(_QWORD *))(*v5 + 64))(v5), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

_QWORD *WebCore::JSApplePaySetupOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[6];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[6] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  --v3[6];
  return result;
}

WTF::StringImpl **WebCore::convertDictionary<WebCore::ApplePaySetupConfiguration>@<X0>(JSC::JSCell *this@<X1>, WTF::StringImpl **result@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  unsigned int v9;
  WTF *v10;
  WTF::StringImpl **v11;
  uint64_t Object;
  JSC::Structure *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  JSC::VM *v16;
  WTF::StringImpl *v17;
  int v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  JSC::VM *v24;
  WTF::StringImpl *v25;
  int v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  JSC::VM *v31;
  WTF::StringImpl *v32;
  int v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  int v38;
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF *v43;
  WTF::StringImpl *v44;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v46;
  char v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  int v51;
  JSC::VM *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;

  v4 = result[7];
  v52 = v4;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
LABEL_3:
    v8 = 0;
    v9 = 0;
    v10 = 0;
LABEL_4:
    *(_QWORD *)a3 = v5;
    *(_QWORD *)(a3 + 8) = v6;
    *(_QWORD *)(a3 + 16) = v7;
    *(_QWORD *)(a3 + 24) = v10;
    *(_DWORD *)(a3 + 32) = v8;
    *(_DWORD *)(a3 + 36) = v9;
    *(_DWORD *)(a3 + 40) = 0;
    return result;
  }
  v11 = result;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = (WTF::StringImpl **)JSC::throwTypeError();
LABEL_102:
    *(_DWORD *)(a3 + 40) = 1;
    return result;
  }
  v13 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v15 = JSC::JSObject::get(v13, (JSC::JSGlobalObject *)v11, (unint64_t)v49);
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v14);
    else
      *(_DWORD *)v49 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = (WTF::StringImpl **)JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_102;
  }
  if (v15 == 10)
  {
    v5 = 0;
    goto LABEL_23;
  }
  v54 = (WTF::StringImpl *)v15;
  v16 = v11[7];
  if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 2)
  {
    v17 = *(WTF::StringImpl **)(v15 + 8);
    if ((v17 & 1) != 0)
    {
      v17 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v15, (JSC::JSGlobalObject *)v11);
      if (!v17)
        goto LABEL_18;
    }
    else if (!v17)
    {
LABEL_18:
      v53 = v17;
      goto LABEL_19;
    }
    *(_DWORD *)v17 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v54, (JSC::JSGlobalObject *)v11);
LABEL_19:
  if (!*((_DWORD *)v16 + 20))
  {
    v5 = v53;
LABEL_21:
    LODWORD(v50) = 0;
    v18 = 0;
    v49 = 0;
    v19 = 1;
    goto LABEL_22;
  }
  v5 = v53;
  if ((JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) == 0)
    goto LABEL_21;
  v18 = 1;
  LODWORD(v50) = 1;
  v53 = 0;
  if (!v5)
    goto LABEL_120;
  if (*(_DWORD *)v5 != 2)
  {
    *(_DWORD *)v5 -= 2;
LABEL_120:
    v5 = 0;
    v19 = 0;
    *(_DWORD *)(a3 + 40) = 1;
    goto LABEL_22;
  }
  WTF::StringImpl::destroy(v5, v44);
  v18 = v50;
  *(_DWORD *)(a3 + 40) = 1;
  v5 = 0;
  v19 = 0;
LABEL_22:
  result = (WTF::StringImpl **)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v18])(&v54, &v49);
  if (!v19)
    goto LABEL_80;
LABEL_23:
  WTF::AtomStringImpl::addLiteral();
  v21 = v49;
  v23 = JSC::JSObject::get(v13, (JSC::JSGlobalObject *)v11, (unint64_t)v49);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v22);
    else
      *(_DWORD *)v21 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = (WTF::StringImpl **)JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
    {
      *(_DWORD *)(a3 + 40) = 1;
      goto LABEL_80;
    }
  }
  if (v23 == 10)
  {
    v6 = 0;
    goto LABEL_40;
  }
  v54 = (WTF::StringImpl *)v23;
  v24 = v11[7];
  if ((v23 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v23 + 5) == 2)
  {
    v25 = *(WTF::StringImpl **)(v23 + 8);
    if ((v25 & 1) != 0)
    {
      v25 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v23, (JSC::JSGlobalObject *)v11);
      if (!v25)
        goto LABEL_34;
    }
    else if (!v25)
    {
LABEL_34:
      v53 = v25;
      goto LABEL_35;
    }
    *(_DWORD *)v25 += 2;
    goto LABEL_34;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v54, (JSC::JSGlobalObject *)v11);
LABEL_35:
  if (!*((_DWORD *)v24 + 20))
  {
    v6 = v53;
LABEL_37:
    LODWORD(v50) = 0;
LABEL_38:
    v26 = 0;
    v49 = 0;
    v27 = 1;
    goto LABEL_39;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v24);
  v6 = v53;
  if ((hasExceptionsAfterHandlingTraps & 1) == 0)
    goto LABEL_37;
  v26 = 1;
  LODWORD(v50) = 1;
  v53 = 0;
  if (!v6)
    goto LABEL_127;
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
LABEL_127:
    v6 = 0;
    v27 = 0;
    *(_DWORD *)(a3 + 40) = 1;
    goto LABEL_39;
  }
  result = (WTF::StringImpl **)WTF::StringImpl::destroy(v6, v46);
  v26 = v50;
  if (!(_DWORD)v50)
  {
    v6 = v49;
    goto LABEL_38;
  }
  *(_DWORD *)(a3 + 40) = 1;
  if (v26 != -1)
  {
    v6 = 0;
    v27 = 0;
LABEL_39:
    result = (WTF::StringImpl **)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v26])(&v54, &v49);
    if (!v27)
      goto LABEL_77;
LABEL_40:
    WTF::AtomStringImpl::addLiteral();
    v28 = v49;
    v30 = JSC::JSObject::get(v13, (JSC::JSGlobalObject *)v11, (unint64_t)v49);
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v29);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (*((_DWORD *)v4 + 20))
    {
      result = (WTF::StringImpl **)JSC::VM::hasExceptionsAfterHandlingTraps(v4);
      if ((_DWORD)result)
      {
        *(_DWORD *)(a3 + 40) = 1;
        goto LABEL_77;
      }
    }
    if (v30 == 10)
    {
      v7 = 0;
      goto LABEL_57;
    }
    v54 = (WTF::StringImpl *)v30;
    v31 = v11[7];
    if ((v30 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v30 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v54, (JSC::JSGlobalObject *)v11);
LABEL_52:
      if (!*((_DWORD *)v31 + 20))
      {
        v7 = v53;
LABEL_54:
        LODWORD(v50) = 0;
LABEL_55:
        v33 = 0;
        v49 = 0;
        v34 = 1;
        goto LABEL_56;
      }
      v47 = JSC::VM::hasExceptionsAfterHandlingTraps(v31);
      v7 = v53;
      if ((v47 & 1) == 0)
        goto LABEL_54;
      v33 = 1;
      LODWORD(v50) = 1;
      v53 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
        {
          result = (WTF::StringImpl **)WTF::StringImpl::destroy(v7, v48);
          v33 = v50;
          if (!(_DWORD)v50)
          {
            v7 = v49;
            goto LABEL_55;
          }
          *(_DWORD *)(a3 + 40) = 1;
          if (v33 == -1)
          {
LABEL_77:
            if (v6)
            {
              if (*(_DWORD *)v6 == 2)
                result = (WTF::StringImpl **)WTF::StringImpl::destroy(v6, v20);
              else
                *(_DWORD *)v6 -= 2;
            }
            goto LABEL_80;
          }
          v7 = 0;
          v34 = 0;
LABEL_56:
          result = (WTF::StringImpl **)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v33])(&v54, &v49);
          if (!v34)
            goto LABEL_74;
LABEL_57:
          WTF::AtomStringImpl::addLiteral();
          v35 = v49;
          result = (WTF::StringImpl **)JSC::JSObject::get(v13, (JSC::JSGlobalObject *)v11, (unint64_t)v49);
          v37 = (uint64_t)result;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              result = (WTF::StringImpl **)WTF::StringImpl::destroy(v35, v36);
            else
              *(_DWORD *)v35 -= 2;
          }
          if (*((_DWORD *)v4 + 20))
          {
            result = (WTF::StringImpl **)JSC::VM::hasExceptionsAfterHandlingTraps(v4);
            if ((_DWORD)result)
            {
              *(_DWORD *)(a3 + 40) = 1;
              goto LABEL_74;
            }
          }
          if (v37 == 10)
            goto LABEL_3;
          v53 = v11[7];
          if ((v37 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v37 + 5) <= 0x16u)
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            JSC::throwTypeError();
            v41 = v54;
            v54 = 0;
            if (v41)
            {
              if (*(_DWORD *)v41 == 2)
                WTF::StringImpl::destroy(v41, v40);
              else
                *(_DWORD *)v41 -= 2;
            }
            v10 = 0;
            v9 = 0;
            v8 = 0;
            v39 = 0;
            v38 = 1;
            v51 = 1;
            *(_DWORD *)(a3 + 40) = 1;
          }
          else
          {
            result = (WTF::StringImpl **)WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert((JSC::JSGlobalObject *)v11, v37, (uint64_t)&v49);
            v38 = v51;
            if (v51)
            {
              *(_DWORD *)(a3 + 40) = 1;
              if (v38 == -1)
              {
LABEL_74:
                if (v7)
                {
                  if (*(_DWORD *)v7 == 2)
                    result = (WTF::StringImpl **)WTF::StringImpl::destroy(v7, v20);
                  else
                    *(_DWORD *)v7 -= 2;
                }
                goto LABEL_77;
              }
              v10 = 0;
              v9 = 0;
              v8 = 0;
              v39 = 0;
            }
            else
            {
              v10 = v49;
              v8 = v50;
              v9 = HIDWORD(v50);
              v39 = 1;
              v49 = 0;
              v50 = 0;
            }
          }
          result = (WTF::StringImpl **)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B270[v38])(&v54, &v49);
          if (v39)
            goto LABEL_4;
          if (v9)
          {
            v42 = 8 * v9;
            v43 = v10;
            do
            {
              result = *(WTF::StringImpl ***)v43;
              *(_QWORD *)v43 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v20);
                else
                  *(_DWORD *)result -= 2;
              }
              v43 = (WTF *)((char *)v43 + 8);
              v42 -= 8;
            }
            while (v42);
          }
          if (v10)
            result = (WTF::StringImpl **)WTF::fastFree(v10, v20);
          goto LABEL_74;
        }
        *(_DWORD *)v7 -= 2;
      }
      v7 = 0;
      v34 = 0;
      *(_DWORD *)(a3 + 40) = 1;
      goto LABEL_56;
    }
    v32 = *(WTF::StringImpl **)(v30 + 8);
    if ((v32 & 1) != 0)
    {
      v32 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v30, (JSC::JSGlobalObject *)v11);
      if (!v32)
        goto LABEL_51;
    }
    else if (!v32)
    {
LABEL_51:
      v53 = v32;
      goto LABEL_52;
    }
    *(_DWORD *)v32 += 2;
    goto LABEL_51;
  }
LABEL_80:
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      return (WTF::StringImpl **)WTF::StringImpl::destroy(v5, v20);
    else
      *(_DWORD *)v5 -= 2;
  }
  return result;
}

unint64_t WebCore::convertDictionaryToJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, const WebCore::ApplePaySetupConfiguration *a4)
{
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  char v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unsigned __int8 *v40;
  unsigned int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned __int8 *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  uint64_t v62;
  _DWORD *v63;
  WTF *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  _DWORD **v67;
  uint64_t v68;
  _QWORD *v69;
  _DWORD *v70;
  _DWORD **v71;
  uint64_t v72;
  _QWORD *v73;
  _DWORD *v74;
  WTF *v75;
  unint64_t v76;
  int v77;
  int v78;
  uint64_t v79;

  v7 = *((_QWORD *)this + 7);
  v8 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v9 = 8 * *(unsigned __int8 *)(v8 + 14);
  v10 = JSC::allocateCell<JSC::JSFinalObject>(v7, v9 + 16);
  v11 = *(_DWORD *)(v8 + 8);
  *(_DWORD *)v10 = v8 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  bzero((void *)(v10 + 16), v9);
  if (*(_BYTE *)(v7 + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
    goto LABEL_13;
  v13 = *((_QWORD *)this + 7);
  v14 = *(_DWORD *)(v12 + 4);
  if (v14)
  {
    if (v14 != 1)
    {
LABEL_6:
      v15 = *(_QWORD *)(v13 + 64760);
      if (!v15 || v12 != *(_QWORD *)(v15 + 8))
        v15 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_9;
    }
    v40 = *(unsigned __int8 **)(v12 + 8);
    if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    {
      v41 = *v40;
    }
    else
    {
      v46 = *(unsigned __int16 *)v40;
      if (v46 > 0xFF)
        goto LABEL_6;
      v41 = v46;
    }
    v15 = *(_QWORD *)(v13 + 8 * v41 + 42216);
  }
  else
  {
    v15 = *(_QWORD *)(v13 + 41968);
  }
LABEL_9:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v16 = v75;
  v75 = 0;
  v76 = v10;
  v77 = -1;
  v78 = 0x1000000;
  v79 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v16, v15, 0, (uint64_t)&v75);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v17);
    else
      *(_DWORD *)v16 -= 2;
  }
LABEL_13:
  v18 = *((_QWORD *)a3 + 1);
  if (!v18)
    goto LABEL_23;
  v19 = *((_QWORD *)this + 7);
  v20 = *(_DWORD *)(v18 + 4);
  if (v20)
  {
    if (v20 != 1)
    {
LABEL_16:
      v21 = *(_QWORD *)(v19 + 64760);
      if (!v21 || v18 != *(_QWORD *)(v21 + 8))
        v21 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_19;
    }
    v42 = *(unsigned __int8 **)(v18 + 8);
    if ((*(_BYTE *)(v18 + 16) & 4) != 0)
    {
      v43 = *v42;
    }
    else
    {
      v47 = *(unsigned __int16 *)v42;
      if (v47 > 0xFF)
        goto LABEL_16;
      v43 = v47;
    }
    v21 = *(_QWORD *)(v19 + 8 * v43 + 42216);
  }
  else
  {
    v21 = *(_QWORD *)(v19 + 41968);
  }
LABEL_19:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v22 = v75;
  v75 = 0;
  v76 = v10;
  v77 = -1;
  v78 = 0x1000000;
  v79 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v22, v21, 0, (uint64_t)&v75);
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
LABEL_23:
  v24 = *((_QWORD *)a3 + 2);
  if (!v24)
    goto LABEL_33;
  v25 = *((_QWORD *)this + 7);
  v26 = *(_DWORD *)(v24 + 4);
  if (v26)
  {
    if (v26 != 1)
    {
LABEL_26:
      v27 = *(_QWORD *)(v25 + 64760);
      if (!v27 || v24 != *(_QWORD *)(v27 + 8))
        v27 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_29;
    }
    v44 = *(unsigned __int8 **)(v24 + 8);
    if ((*(_BYTE *)(v24 + 16) & 4) != 0)
    {
      v45 = *v44;
    }
    else
    {
      v48 = *(unsigned __int16 *)v44;
      if (v48 > 0xFF)
        goto LABEL_26;
      v45 = v48;
    }
    v27 = *(_QWORD *)(v25 + 8 * v45 + 42216);
  }
  else
  {
    v27 = *(_QWORD *)(v25 + 41968);
  }
LABEL_29:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v28 = v75;
  v75 = 0;
  v76 = v10;
  v77 = -1;
  v78 = 0x1000000;
  v79 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v28, v27, 0, (uint64_t)&v75);
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v29);
    else
      *(_DWORD *)v28 -= 2;
  }
LABEL_33:
  v30 = *((unsigned int *)a3 + 9);
  if (!(_DWORD)v30)
  {
LABEL_34:
    v31 = 0;
    v32 = 0;
    v75 = 0;
    v76 = 0;
    v33 = 1;
    goto LABEL_35;
  }
  if (v30 >> 29)
    goto LABEL_117;
  v52 = 8 * v30;
  v53 = WTF::fastMalloc((WTF *)(8 * v30));
  v55 = (WTF *)v53;
  v56 = *((unsigned int *)a3 + 9);
  if ((_DWORD)v56)
  {
    v67 = (_DWORD **)*((_QWORD *)a3 + 3);
    v68 = 8 * v56;
    v69 = (_QWORD *)v53;
    do
    {
      v70 = *v67;
      if (*v67)
        *v70 += 2;
      *v69++ = v70;
      ++v67;
      v68 -= 8;
    }
    while (v68);
  }
  v57 = 0;
  do
  {
    v58 = *(WTF::StringImpl **)((char *)v55 + v57);
    *(_QWORD *)((char *)v55 + v57) = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v54);
      else
        *(_DWORD *)v58 -= 2;
    }
    v57 += 8;
  }
  while (v52 != v57);
  WTF::fastFree(v55, v54);
  v32 = *((unsigned int *)a3 + 9);
  if (!(_DWORD)v32)
    goto LABEL_34;
  if (v32 >> 29)
  {
LABEL_117:
    __break(0xC471u);
    JUMPOUT(0x195219390);
  }
  v59 = WTF::fastMalloc((WTF *)(8 * v32));
  v31 = (WTF *)v59;
  v60 = *((unsigned int *)a3 + 9);
  if ((_DWORD)v60)
  {
    v71 = (_DWORD **)*((_QWORD *)a3 + 3);
    v72 = 8 * v60;
    v73 = (_QWORD *)v59;
    do
    {
      v74 = *v71;
      if (*v71)
        *v74 += 2;
      *v73++ = v74;
      ++v71;
      v72 -= 8;
    }
    while (v72);
  }
  HIDWORD(v76) = v32;
  v61 = (WTF *)WTF::fastMalloc((WTF *)(8 * v32));
  v62 = 0;
  LODWORD(v76) = v32;
  v75 = v61;
  do
  {
    v63 = *(_DWORD **)((char *)v31 + v62);
    if (v63)
      *v63 += 2;
    *(_QWORD *)((char *)v61 + v62) = v63;
    v62 += 8;
  }
  while (8 * v32 != v62);
  v33 = 0;
LABEL_35:
  v35 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert<WTF::String,0ul>((uint64_t)this, (uint64_t)a2, (uint64_t)&v75);
  if (HIDWORD(v76))
  {
    v64 = v75;
    v65 = 8 * HIDWORD(v76);
    do
    {
      v66 = *(WTF::StringImpl **)v64;
      *(_QWORD *)v64 = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
          WTF::StringImpl::destroy(v66, v34);
        else
          *(_DWORD *)v66 -= 2;
      }
      v64 = (WTF *)((char *)v64 + 8);
      v65 -= 8;
    }
    while (v65);
  }
  v36 = v75;
  if (v75)
  {
    v75 = 0;
    LODWORD(v76) = 0;
    WTF::fastFree(v36, v34);
    if ((v33 & 1) != 0)
      goto LABEL_38;
  }
  else if ((v33 & 1) != 0)
  {
    goto LABEL_38;
  }
  v49 = 8 * v32;
  v50 = (WTF::StringImpl **)v31;
  do
  {
    v51 = *v50;
    *v50 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v34);
      else
        *(_DWORD *)v51 -= 2;
    }
    ++v50;
    v49 -= 8;
  }
  while (v49);
LABEL_38:
  if (v31)
    WTF::fastFree(v31, v34);
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v37 = v75;
  v75 = 0;
  v76 = v10;
  v77 = -1;
  v78 = 0x1000000;
  v79 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v37, v35, 0, (uint64_t)&v75);
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v38);
    else
      *(_DWORD *)v37 -= 2;
  }
  return v10;
}

uint64_t WebCore::JSApplePaySetupFeature::prototype(WebCore::JSApplePaySetupFeature *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v15;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSApplePaySetupFeature::s_info
      + ~((_QWORD)&WebCore::JSApplePaySetupFeature::s_info << 32)) ^ (((unint64_t)&WebCore::JSApplePaySetupFeature::s_info
                                                                     + ~((_QWORD)&WebCore::JSApplePaySetupFeature::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSApplePaySetupFeature::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSApplePaySetupFeature::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSApplePaySetupFeaturePrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSApplePaySetupFeaturePrototype::create(this, Structure, v15, v16);
    v18 = WebCore::JSApplePaySetupFeature::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSApplePaySetupFeature::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

_DWORD *WebCore::JSApplePaySetupFeature::destroy(WebCore::JSApplePaySetupFeature *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSApplePaySetupFeature::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSApplePaySetupFeature::visitChildren(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  result = JSC::JSObject::visitChildren();
  v5 = a1[4];
  if ((v5 & 0xFFFE000000000002) != 0 || v5 == 0)
    goto LABEL_6;
  if ((v5 & 8) != 0)
  {
    if ((*(_BYTE *)(v5 - 79) & 1) != 0)
      goto LABEL_21;
  }
  else
  {
    v11 = v5 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v14 = a1[4];
      v16 = v5 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
      v5 = v14;
      v11 = v16;
    }
    if (((*(_QWORD *)(v11 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) != 0)
    {
LABEL_21:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_6;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_6:
  v7 = a1[5];
  if ((v7 & 0xFFFE000000000002) == 0 && v7 != 0)
  {
    if ((v7 & 8) != 0)
    {
      if ((*(_BYTE *)(v7 - 79) & 1) != 0)
        goto LABEL_27;
    }
    else
    {
      v12 = v7 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v7 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v15 = a1[5];
        v17 = v7 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v7 & 0xFFFFFFFFFFFFC000));
        v7 = v15;
        v12 = v17;
      }
      if (((*(_QWORD *)(v12 + 8 * ((v7 >> 10) & 0xF) + 40) >> (v7 >> 4)) & 1) != 0)
      {
LABEL_27:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_11;
      }
    }
    result = JSC::SlotVisitor::appendSlow();
  }
LABEL_11:
  v9 = a1[6];
  if ((v9 & 0xFFFE000000000002) == 0 && v9 != 0)
  {
    if ((v9 & 8) != 0)
    {
      if ((*(_BYTE *)(v9 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      v13 = v9 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v9 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v9 & 0xFFFFFFFFFFFFC000));
        v13 = v9 & 0xFFFFFFFFFFFFC000;
      }
      if (((*(_QWORD *)(v13 + 8 * ((v9 >> 10) & 0xF) + 40) >> (v9 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (*(_QWORD *)(a2 + 168))
      return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WebCore::JSApplePaySetupFeature::visitChildren(WebCore::JSApplePaySetupFeature *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    result = JSC::JSObject::visitChildren();
    if ((*((_QWORD *)this + 4) & 0xFFFE000000000002) == 0)
      result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)this + 5) & 0xFFFE000000000002) == 0)
      result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)this + 6) & 0xFFFE000000000002) == 0)
      result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

_QWORD *WebCore::JSApplePaySetupFeature::JSApplePaySetupFeature(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *result;
  uint64_t v6;

  result = (_QWORD *)WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  result[3] = v6;
  result[4] = 0;
  result[5] = 0;
  result[6] = 0;
  return result;
}

{
  _QWORD *result;
  uint64_t v6;

  result = (_QWORD *)WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  result[3] = v6;
  result[4] = 0;
  result[5] = 0;
  result[6] = 0;
  return result;
}

unint64_t WebCore::JSApplePaySetupFeature::createPrototype(WebCore::JSApplePaySetupFeature *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  Structure = WebCore::JSApplePaySetupFeaturePrototype::createStructure((uint64_t *)this, (uint64_t)a2, a2[82]);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSApplePaySetupFeaturePrototype::create(this, Structure, v5, v6);
}

uint64_t WebCore::JSApplePaySetupFeaturePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSApplePaySetupFeaturePrototype::create(WebCore::JSApplePaySetupFeaturePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSApplePaySetupFeature::s_info, &WebCore::JSApplePaySetupFeaturePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSApplePaySetupFeature>,(WebCore::DOMConstructorID)55>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 440);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSApplePaySetupFeature>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSApplePaySetupFeature::s_info
         + ~((_QWORD)&WebCore::JSApplePaySetupFeature::s_info << 32)) ^ (((unint64_t)&WebCore::JSApplePaySetupFeature::s_info
                                                                        + ~((_QWORD)&WebCore::JSApplePaySetupFeature::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSApplePaySetupFeature::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSApplePaySetupFeature::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSApplePaySetupFeaturePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSApplePaySetupFeaturePrototype::create((WebCore::JSApplePaySetupFeaturePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSApplePaySetupFeature::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSApplePaySetupFeature::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 440) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsApplePaySetupFeatureConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSApplePaySetupFeaturePrototype::s_info != (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSApplePaySetupFeature>,(WebCore::DOMConstructorID)55>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsApplePaySetupFeature_type(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  JSC::VM *v5;
  WTF::StringImpl *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 32);
  if (!v2)
  {
    v5 = *(JSC::VM **)(a1 + 56);
    v6 = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24));
    v2 = WebCore::convertEnumerationToJS<WebCore::ApplePaySetupFeatureType>(*(_QWORD *)(a1 + 56), v6);
    if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    {
      return 0;
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a2 + 32) = v2;
      if ((v2 & 0xFFFE000000000002) == 0 && v2 && *(_DWORD *)(v7 + 760) >= *(unsigned __int8 *)(a2 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)a2);
    }
  }
  return v2;
}

uint64_t WebCore::jsApplePaySetupFeature_state(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  JSC::VM *v5;
  WTF::StringImpl *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 40);
  if (!v2)
  {
    v5 = *(JSC::VM **)(a1 + 56);
    v6 = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24));
    v2 = WebCore::convertEnumerationToJS<WebCore::ApplePaySetupFeatureState>(*(_QWORD *)(a1 + 56), v6);
    if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    {
      return 0;
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a2 + 40) = v2;
      if ((v2 & 0xFFFE000000000002) == 0 && v2 && *(_DWORD *)(v7 + 760) >= *(unsigned __int8 *)(a2 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v7 + 192), (const JSCell *)a2);
    }
  }
  return v2;
}

uint64_t WebCore::jsApplePaySetupFeature_supportsInstallments(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  JSC::VM *v4;

  v2 = *(_QWORD *)(a2 + 48);
  if (!v2)
  {
    v4 = *(JSC::VM **)(a1 + 56);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 32))(*(_QWORD *)(a2 + 24)))
      v2 = 7;
    else
      v2 = 6;
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
      return 0;
    else
      *(_QWORD *)(a2 + 48) = v2;
  }
  return v2;
}

uint64_t WebCore::JSApplePaySetupFeature::subspaceForImpl(WebCore::JSApplePaySetupFeature *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 440);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 440))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 56, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 440);
    *(_QWORD *)(v8 + 440) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 440);
  *(_QWORD *)(v3 + 440) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSApplePaySetupFeatureOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSApplePaySetupFeatureOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::ApplePaySetupFeature>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  WebCore::JSApplePaySetupFeature *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *Allocator;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)(a3 + 8);
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSApplePaySetupFeature::s_info
         + ~((_QWORD)&WebCore::JSApplePaySetupFeature::s_info << 32)) ^ (((unint64_t)&WebCore::JSApplePaySetupFeature::s_info
                                                                        + ~((_QWORD)&WebCore::JSApplePaySetupFeature::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSApplePaySetupFeature::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSApplePaySetupFeature::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSApplePaySetupFeaturePrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSApplePaySetupFeaturePrototype::create((WebCore::JSApplePaySetupFeaturePrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSApplePaySetupFeature::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSApplePaySetupFeature::s_info);
LABEL_16:
  v30 = *(WebCore::JSApplePaySetupFeature **)(a2 + 56);
  v31 = (_QWORD *)WebCore::JSApplePaySetupFeature::subspaceForImpl(v30, (JSC::VM *)a2);
  SlowCase = v31[3];
  if (SlowCase >= v31[4])
  {
    SlowCase = v31[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_18;
    }
    v37 = *(_QWORD *)(SlowCase + 8) ^ v31[6];
    v31[4] = SlowCase + HIDWORD(v37);
    v31[5] = SlowCase + (int)v37;
  }
  v31[3] = SlowCase + 64;
LABEL_18:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  *(_QWORD *)(SlowCase + 32) = 0;
  *(_QWORD *)(SlowCase + 40) = 0;
  *(_QWORD *)(SlowCase + 48) = 0;
  if (*((_BYTE *)v30 + 755))
    __dmb(0xAu);
  v32 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337530 & 1) == 0)
  {
    qword_1EE337528 = (uint64_t)&off_1E334AFE0;
    byte_1EE337530 = 1;
  }
  v39 = a3;
  if ((SlowCase & 8) != 0)
    v33 = (SlowCase - 112) | 1;
  else
    v33 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v33 & 1) != 0)
    v34 = v33 + 47;
  else
    v34 = *(_QWORD *)v33 + 32;
  Allocator = *(_QWORD **)(v34 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v34 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337528;
  Allocator[2] = v32;
  v38 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v32 + 32), &v39, (uint64_t *)&v38);
  if (v38)
    v38[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSApplePaySetupFeature::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSApplePaySetupFeature::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSApplePaySetupFeature::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::ApplePaySetupFeatureState>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  if ((byte_1EE3374E5 & 1) == 0)
  {
    dword_1ECE7B090 += 2;
    byte_1EE3374E5 = 1;
    dword_1ECE7B0B0 += 2;
    qword_1EE337628 = (uint64_t)&dword_1ECE7B090;
    unk_1EE337630 = &dword_1ECE7B0B0;
    dword_1ECE7B0D0 += 2;
    dword_1ECE7B0F0 += 2;
    qword_1EE337638 = (uint64_t)&dword_1ECE7B0D0;
    unk_1EE337640 = &dword_1ECE7B0F0;
  }
  v3 = *(_QWORD *)&_MergedGlobals_204[8 * a2 + 336];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumerationFromString<WebCore::ApplePaySetupFeatureState>(uint64_t *a1)
{
  uint64_t v1;
  const char *v2;
  int v3;
  unint64_t v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  uint16x8_t v10;
  char **v11;
  int v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  BOOL v22;

  v1 = *a1;
  if (!*a1)
    goto LABEL_62;
  v2 = *(const char **)(v1 + 8);
  v3 = *(_DWORD *)(v1 + 4);
  v4 = ((unint64_t)*(unsigned int *)(v1 + 16) >> 2) & 1;
  v5 = v3 != 9;
  if (v2 != "completed" && v3 == 9)
  {
    if ((_DWORD)v4)
    {
      if (*v2 != 99 || *(_DWORD *)(v2 + 1) != 1819307375 || *(_DWORD *)(v2 + 5) != 1684370533)
        goto LABEL_8;
    }
    else
    {
      if (*(_WORD *)v2 != 99)
      {
LABEL_8:
        v5 = 0;
LABEL_9:
        v6 = 9;
        goto LABEL_10;
      }
      v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 2), (int16x8_t)xmmword_1968DCD30);
      v15.i16[0] = vminvq_u16(v15);
      v5 = v15.i8[0];
      if (!v15.i32[0])
        goto LABEL_9;
    }
LABEL_52:
    v11 = &WebCore::parseEnumerationFromString<WebCore::ApplePaySetupFeatureState>(WTF::String const&)::mappings;
    goto LABEL_56;
  }
  if (v2 == "completed" && v3 == 9)
    goto LABEL_52;
  if (v2 != "supplementarySupported" && v3 == 22)
  {
    if ((_DWORD)v4)
    {
      if (*v2 != 115)
        goto LABEL_67;
      v10 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v2 + 6), (int8x16_t)xmmword_1968DCD50), vceqq_s8(*(int8x16_t *)(v2 + 1), (int8x16_t)xmmword_1968DCD40));
      v10.i8[0] = vminvq_u8((uint8x16_t)v10);
    }
    else
    {
      if (*(_WORD *)v2 != 115)
        goto LABEL_67;
      v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 2), (int16x8_t)xmmword_1968DCD60);
      v20.i16[0] = vminvq_u16(v20);
      if (!v20.i32[0])
        goto LABEL_67;
      v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 12), (int16x8_t)xmmword_1968DCD70);
      v21.i16[0] = vminvq_u16(v21);
      if (!v21.i32[0])
        goto LABEL_67;
      v10 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 28), (int16x8_t)xmmword_1968C0FC0);
      v10.i16[0] = vminvq_u16(v10);
    }
    if (v10.i32[0])
    {
LABEL_31:
      v11 = &off_1E3349E58;
LABEL_56:
      LODWORD(v1) = *((unsigned __int8 *)v11 + 16);
      v14 = 1;
      return v1 | (v14 << 8);
    }
LABEL_67:
    v6 = 22;
    goto LABEL_10;
  }
  v22 = v2 == "supplementarySupported" && v3 == 22;
  v6 = v3;
  if (v22)
    goto LABEL_31;
LABEL_10:
  if (v2 == "supported" || v5)
  {
    if (v2 != "supported" || v3 != 9)
    {
      v7 = v4 << 32;
      goto LABEL_37;
    }
LABEL_55:
    v11 = &off_1E3349E70;
    goto LABEL_56;
  }
  if (!v6)
    goto LABEL_55;
  if (!(_DWORD)v4)
  {
    if (*(_WORD *)v2 != 115
      || (v16 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 2), (int16x8_t)xmmword_1968C0FC0),
          v16.i16[0] = vminvq_u16(v16),
          !v16.i32[0]))
    {
      v7 = 0;
      goto LABEL_37;
    }
    goto LABEL_55;
  }
  if (*v2 == 115 && *(_DWORD *)(v2 + 1) == 1869639797 && *(_DWORD *)(v2 + 5) == 1684370546)
    goto LABEL_55;
  v7 = 1;
LABEL_37:
  if (v2 == "unsupported" || v6 != 11)
  {
    if (v6 == 11 && v2 == "unsupported")
      goto LABEL_43;
    goto LABEL_48;
  }
  if (v7)
  {
    if (*v2 == 117 && *(_QWORD *)(v2 + 1) == 0x74726F707075736ELL && *(_QWORD *)(v2 + 3) == 0x646574726F707075)
      goto LABEL_43;
    goto LABEL_48;
  }
  if (*(_WORD *)v2 != 117)
  {
LABEL_48:
    v14 = 0;
    goto LABEL_49;
  }
  v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 2), (int16x8_t)xmmword_1968DC3A0);
  v18.i16[0] = vminvq_u16(v18);
  LODWORD(v1) = v18.i32[0];
  if (!v18.i32[0])
  {
LABEL_62:
    v14 = 0;
    return v1 | (v14 << 8);
  }
  v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 6), (int16x8_t)xmmword_1968C0FC0);
  v19.i16[0] = vminvq_u16(v19);
  v14 = v19.i32[0];
  if (v19.i32[0])
  {
LABEL_43:
    v11 = &off_1E3349E88;
    goto LABEL_56;
  }
LABEL_49:
  LODWORD(v1) = 0;
  return v1 | (v14 << 8);
}

uint64_t WebCore::parseEnumeration<WebCore::ApplePaySetupFeatureState>(JSC::JSGlobalObject *a1, unint64_t this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v6;
  unint64_t v7;

  v7 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v2 = *(WTF::StringImpl **)(this + 8);
    if ((v2 & 1) != 0)
    {
      v2 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v2)
        goto LABEL_6;
    }
    else if (!v2)
    {
LABEL_6:
      v6 = v2;
      goto LABEL_7;
    }
    *(_DWORD *)v2 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v7, a1);
  v2 = v6;
LABEL_7:
  v4 = WebCore::parseEnumerationFromString<WebCore::ApplePaySetupFeatureState>((uint64_t *)&v6);
  v6 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v3);
    else
      *(_DWORD *)v2 -= 2;
  }
  return v4;
}

const char *WebCore::expectedEnumerationValues<WebCore::ApplePaySetupFeatureState>()
{
  return "\"unsupported\", \"supported\", \"supplementarySupported\", \"completed\"";
}

uint64_t WebCore::convertEnumerationToJS<WebCore::ApplePaySetupFeatureType>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  if ((byte_1EE3374E6 & 1) == 0)
  {
    unk_1EE337578 = &dword_1ECE7B110;
    dword_1ECE7B110 += 2;
    dword_1ECE7B130 += 2;
    unk_1EE337580 = &dword_1ECE7B130;
    byte_1EE3374E6 = 1;
  }
  v3 = *(_QWORD *)&_MergedGlobals_204[8 * a2 + 160];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumerationFromString<WebCore::ApplePaySetupFeatureType>(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  const char *v3;
  int v4;
  int v6;
  int v7;
  char **v10;
  uint16x8_t v11;

  v1 = *a1;
  if (!*a1)
    goto LABEL_11;
  v2 = *(_DWORD *)(v1 + 16);
  v3 = *(const char **)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 4);
  if (v3 != "appleCard" && v4 == 9)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 97 || *(_DWORD *)(v3 + 1) != 1701605488 || *(_DWORD *)(v3 + 5) != 1685217603)
        goto LABEL_11;
    }
    else
    {
      if (*(_WORD *)v3 != 97)
        goto LABEL_11;
      v11 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_1968DCD80);
      v11.i16[0] = vminvq_u16(v11);
      v6 = v11.i32[0];
      if (!v11.i32[0])
        goto LABEL_12;
    }
LABEL_29:
    v10 = &WebCore::parseEnumerationFromString<WebCore::ApplePaySetupFeatureType>(WTF::String const&)::mappings;
    goto LABEL_30;
  }
  if (v3 == "appleCard" && v4 == 9)
    goto LABEL_29;
  if (v3 == "applePay" || v4 != 8)
  {
    if (v4 != 8 || v3 != "applePay")
      goto LABEL_11;
    goto LABEL_26;
  }
  if ((v2 & 4) == 0)
  {
    if (*(_WORD *)v3 != 97)
      goto LABEL_11;
    if (*((_QWORD *)v3 + 1) != 0x79006100500065 || *(_QWORD *)(v3 + 2) != 0x65006C00700070)
      goto LABEL_11;
    goto LABEL_26;
  }
  if (*v3 == 97 && *(_DWORD *)(v3 + 1) == 1701605488 && *((_DWORD *)v3 + 1) == 2036420709)
  {
LABEL_26:
    v10 = &off_1E3349EB8;
LABEL_30:
    v7 = *((unsigned __int8 *)v10 + 16);
    v6 = 1;
    return v7 | (v6 << 8);
  }
LABEL_11:
  v6 = 0;
LABEL_12:
  v7 = 0;
  return v7 | (v6 << 8);
}

uint64_t WebCore::parseEnumeration<WebCore::ApplePaySetupFeatureType>(JSC::JSGlobalObject *a1, unint64_t this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v6;
  unint64_t v7;

  v7 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v2 = *(WTF::StringImpl **)(this + 8);
    if ((v2 & 1) != 0)
    {
      v2 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v2)
        goto LABEL_6;
    }
    else if (!v2)
    {
LABEL_6:
      v6 = v2;
      goto LABEL_7;
    }
    *(_DWORD *)v2 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v7, a1);
  v2 = v6;
LABEL_7:
  v4 = WebCore::parseEnumerationFromString<WebCore::ApplePaySetupFeatureType>((uint64_t *)&v6);
  v6 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v3);
    else
      *(_DWORD *)v2 -= 2;
  }
  return v4;
}

const char *WebCore::expectedEnumerationValues<WebCore::ApplePaySetupFeatureType>()
{
  return "\"applePay\", \"appleCard\"";
}

uint64_t WebCore::convertEnumerationToJS<WebCore::ApplePayShippingContactEditingMode>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  if ((byte_1EE3374E7 & 1) == 0)
  {
    dword_1ECE7B150 += 2;
    unk_1EE3375B0 = &dword_1ECE7B150;
    dword_1ECE7B170 += 2;
    unk_1EE3375B8 = &dword_1ECE7B170;
    dword_1ECE7B190 += 2;
    unk_1EE3375C0 = &dword_1ECE7B190;
    byte_1EE3374E7 = 1;
  }
  v3 = *(_QWORD *)&_MergedGlobals_204[8 * a2 + 216];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumerationFromString<WebCore::ApplePayShippingContactEditingMode>(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  const char *v3;
  int v4;
  int v6;
  __int32 v7;
  char **v10;
  uint16x8_t v11;
  uint64_t v13;
  uint64_t v14;
  uint16x8_t v18;
  uint16x8_t v19;

  v1 = *a1;
  if (!*a1)
    goto LABEL_11;
  v2 = *(_DWORD *)(v1 + 16);
  v3 = *(const char **)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 4);
  if (v3 != "available" && v4 == 9)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 97 || *(_DWORD *)(v3 + 1) != 1818845558 || *(_DWORD *)(v3 + 5) != 1701601889)
        goto LABEL_11;
    }
    else
    {
      if (*(_WORD *)v3 != 97)
        goto LABEL_11;
      v11 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_1968DCA80);
      v11.i16[0] = vminvq_u16(v11);
      v6 = v11.i32[0];
      if (!v11.i32[0])
        goto LABEL_12;
    }
    goto LABEL_29;
  }
  if (v3 == "available" && v4 == 9)
  {
LABEL_29:
    v10 = &WebCore::parseEnumerationFromString<WebCore::ApplePayShippingContactEditingMode>(WTF::String const&)::mappings;
    goto LABEL_30;
  }
  if (v3 != "enabled" && v4 == 7)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 101 || *(_DWORD *)(v3 + 1) != 1818386798 || *(_DWORD *)(v3 + 3) != 1684368482)
        goto LABEL_11;
    }
    else
    {
      if (*(_WORD *)v3 != 101)
        goto LABEL_11;
      v13 = *(_QWORD *)(v3 + 2);
      v14 = *(_QWORD *)(v3 + 6);
      if (v13 != 0x6C00620061006ELL || v14 != 0x640065006C0062)
        goto LABEL_11;
    }
    goto LABEL_26;
  }
  if (v3 == "enabled" && v4 == 7)
  {
LABEL_26:
    v10 = &off_1E3349EE8;
LABEL_30:
    v7 = *((unsigned __int8 *)v10 + 16);
    v6 = 1;
    return v7 | (v6 << 8);
  }
  if (v3 == "storePickup" || v4 != 11)
  {
    if (v4 == 11 && v3 == "storePickup")
      goto LABEL_55;
    goto LABEL_11;
  }
  if ((v2 & 4) != 0)
  {
    if (*v3 == 115 && *(_QWORD *)(v3 + 1) == 0x6B63695065726F74 && *(_QWORD *)(v3 + 3) == 0x70756B6369506572)
    {
LABEL_55:
      v10 = &off_1E3349F00;
      goto LABEL_30;
    }
    goto LABEL_11;
  }
  if (*(_WORD *)v3 != 115)
  {
LABEL_11:
    v6 = 0;
    goto LABEL_12;
  }
  v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_1968DCD20);
  v18.i16[0] = vminvq_u16(v18);
  v7 = v18.i32[0];
  if (!v18.i32[0])
  {
    v6 = 0;
    return v7 | (v6 << 8);
  }
  v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 6), (int16x8_t)xmmword_1968DCA10);
  v19.i16[0] = vminvq_u16(v19);
  v6 = v19.i32[0];
  if (v19.i32[0])
    goto LABEL_55;
LABEL_12:
  v7 = 0;
  return v7 | (v6 << 8);
}

uint64_t WebCore::parseEnumeration<WebCore::ApplePayShippingContactEditingMode>(JSC::JSGlobalObject *a1, unint64_t this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v6;
  unint64_t v7;

  v7 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v2 = *(WTF::StringImpl **)(this + 8);
    if ((v2 & 1) != 0)
    {
      v2 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v2)
        goto LABEL_6;
    }
    else if (!v2)
    {
LABEL_6:
      v6 = v2;
      goto LABEL_7;
    }
    *(_DWORD *)v2 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v7, a1);
  v2 = v6;
LABEL_7:
  v4 = WebCore::parseEnumerationFromString<WebCore::ApplePayShippingContactEditingMode>((uint64_t *)&v6);
  v6 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v3);
    else
      *(_DWORD *)v2 -= 2;
  }
  return v4;
}

const char *WebCore::expectedEnumerationValues<WebCore::ApplePayShippingContactEditingMode>()
{
  return "\"available\", \"enabled\", \"storePickup\"";
}

uint64_t WebCore::JSApplePayShippingContactSelectedEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSApplePayShippingContactSelectedEvent::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  result = JSC::JSObject::visitChildren();
  v5 = *(_QWORD *)(a1 + 32);
  if ((v5 & 0xFFFE000000000002) == 0 && v5 != 0)
  {
    if ((v5 & 8) != 0)
    {
      if ((*(_BYTE *)(v5 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      v7 = v5 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v9 = v5 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
        v5 = v8;
        v7 = v9;
      }
      if (((*(_QWORD *)(v7 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (*(_QWORD *)(a2 + 168))
      return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WebCore::JSApplePayShippingContactSelectedEvent::visitChildren(WebCore::JSApplePayShippingContactSelectedEvent *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    result = JSC::JSObject::visitChildren();
    if ((*((_QWORD *)this + 4) & 0xFFFE000000000002) == 0)
      result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSApplePayShippingContactSelectedEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSApplePayShippingContactSelectedEventPrototype::create(WebCore::JSApplePayShippingContactSelectedEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSApplePayShippingContactSelectedEvent::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSApplePayShippingContactSelectedEventPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::jsApplePayShippingContactSelectedEvent_shippingContact(WebCore *a1, uint64_t a2, uint64_t a3, const WebCore::ApplePayPaymentContact *a4)
{
  uint64_t v4;
  JSC::VM *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 32);
  if (!v4)
  {
    v7 = (JSC::VM *)*((_QWORD *)a1 + 7);
    WebCore::convertDictionaryToJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), (WebCore::JSDOMGlobalObject *)(*(_QWORD *)(a2 + 24) + 72), a4);
    v4 = v8;
    if (*((_DWORD *)v7 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v7) & 1) != 0)
    {
      return 0;
    }
    else
    {
      v9 = *((_QWORD *)a1 + 7);
      *(_QWORD *)(a2 + 32) = v4;
      if ((v4 & 0xFFFE000000000002) == 0 && v4 && *(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(a2 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v9 + 192), (const JSCell *)a2);
    }
  }
  return v4;
}

uint64_t WebCore::JSApplePayShippingContactSelectedEvent::subspaceForImpl(WebCore::JSApplePayShippingContactSelectedEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 448);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 448))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 40, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 448);
    *(_QWORD *)(v8 + 448) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 448);
  *(_QWORD *)(v3 + 448) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::convertDictionary<WebCore::ApplePayShippingMethod>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t result;
  JSC::VM *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSC::JSCell *v15;
  char v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  JSC::VM *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  JSC::VM *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  JSC::VM *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  BOOL v41;
  JSC::VM *v42;
  double v43;
  int v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v50;
  int v51;
  WTF::StringImpl *v52;
  BOOL v53;
  int v54;
  uint64_t v55;
  int *v56;
  int v57;
  char v58;
  char v59;
  WTF::StringImpl *v60;
  int v61;
  WTF::StringImpl *v62;
  int v63;
  _BYTE v64[21];
  __int128 v65;
  _BYTE v66[31];
  int v67;
  uint64_t v68;
  int v69;
  __int16 v70;
  char v71;
  JSC::VM *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  __int128 v75;
  __int128 v76;
  _OWORD v77[2];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v72 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_9;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    goto LABEL_10;
  }
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, *(unint64_t *)v64);
  if (*(_QWORD *)v64)
  {
    if (**(_DWORD **)v64 == 2)
      WTF::StringImpl::destroy(*(WTF::StringImpl **)v64, v7);
    else
      **(_DWORD **)v64 -= 2;
  }
  if (*((_DWORD *)v72 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v72);
    if ((_DWORD)result)
      goto LABEL_10;
  }
  if (v8 == 10)
  {
LABEL_9:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v72, "amount", 7, "ApplePayShippingMethod", 23, "DOMString", 10);
LABEL_10:
    *(_DWORD *)(a3 + 104) = 1;
    return result;
  }
  *(_QWORD *)v64 = v8;
  v10 = a2[7];
  if ((v8 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v8 + 5) == 2)
  {
    v11 = *(WTF::StringImpl **)(v8 + 8);
    if ((v11 & 1) != 0)
    {
      v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a2);
      if (!v11)
        goto LABEL_16;
    }
    else if (!v11)
    {
LABEL_16:
      v62 = v11;
      goto LABEL_17;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_16;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v64, (JSC::JSGlobalObject *)a2);
LABEL_17:
  if (!*((_DWORD *)v10 + 20))
  {
    v12 = v62;
    goto LABEL_19;
  }
  v12 = v62;
  if (!JSC::VM::hasExceptionsAfterHandlingTraps(v10))
  {
LABEL_19:
    v69 = 0;
    v68 = 0;
    WTF::AtomStringImpl::addLiteral();
    v13 = *(WTF::StringImpl **)v64;
    v15 = (JSC::JSCell *)JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, *(unint64_t *)v64);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v14);
      else
        *(_DWORD *)v13 -= 2;
    }
    if (*((_DWORD *)v72 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v72))
      goto LABEL_33;
    if (v15 == (JSC::JSCell *)10)
    {
      v16 = 0;
      v59 = 0;
    }
    else
    {
      WebCore::convertDictionary<WebCore::ApplePayDateComponentsRange>(v15, (JSC::JSGlobalObject *)a2, (uint64_t)v64);
      if (v67)
      {
LABEL_33:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_DWORD *)(a3 + 104) = 1;
        goto LABEL_92;
      }
      v16 = v64[4];
      v75 = *(_OWORD *)&v64[5];
      v76 = v65;
      v77[0] = *(_OWORD *)v66;
      *(_OWORD *)((char *)v77 + 15) = *(_OWORD *)&v66[15];
      v59 = 1;
    }
    WTF::AtomStringImpl::addLiteral();
    v17 = *(WTF::StringImpl **)v64;
    v19 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, *(unint64_t *)v64);
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v18);
      else
        *(_DWORD *)v17 -= 2;
    }
    if (*((_DWORD *)v72 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v72))
      goto LABEL_33;
    if (v19 == 10)
    {
      WebCore::throwRequiredMemberTypeError((int)a2, (int)&v72, "detail", 7, "ApplePayShippingMethod", 23, "DOMString", 10);
      goto LABEL_33;
    }
    v62 = (WTF::StringImpl *)v19;
    v24 = a2[7];
    if ((v19 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v19 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v62, (JSC::JSGlobalObject *)a2);
LABEL_40:
      v58 = v16;
      if (*((_DWORD *)v24 + 20))
      {
        v22 = v60;
        if (JSC::VM::hasExceptionsAfterHandlingTraps(v24))
        {
          v29 = 1;
          *(_DWORD *)&v64[8] = 1;
          v60 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v48);
            else
              *(_DWORD *)v22 -= 2;
          }
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_DWORD *)(a3 + 104) = 1;
          goto LABEL_91;
        }
      }
      else
      {
        v22 = v60;
      }
      *(_DWORD *)&v64[8] = 0;
      *(_QWORD *)v64 = 0;
      WTF::AtomStringImpl::addLiteral();
      v26 = v62;
      v28 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v62);
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v27);
        else
          *(_DWORD *)v26 -= 2;
      }
      if (*((_DWORD *)v72 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v72))
        goto LABEL_48;
      if (v28 == 10)
      {
        WebCore::throwRequiredMemberTypeError((int)a2, (int)&v72, "identifier", 11, "ApplePayShippingMethod", 23, "DOMString", 10);
LABEL_48:
        v29 = 0;
        v21 = 0;
        v23 = 0;
        *(_DWORD *)(a3 + 104) = 1;
LABEL_91:
        ((void (*)(WTF::StringImpl **, _BYTE *))off_1E334B060[v29])(&v62, v64);
        v20 = 0;
        goto LABEL_92;
      }
      v60 = (WTF::StringImpl *)v28;
      v30 = a2[7];
      if ((v28 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v28 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v60, (JSC::JSGlobalObject *)a2);
LABEL_55:
        if (*((_DWORD *)v30 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v30);
          v21 = v74;
          if (hasExceptionsAfterHandlingTraps)
          {
            v35 = 1;
            v63 = 1;
            v74 = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, v50);
              else
                *(_DWORD *)v21 -= 2;
            }
            v21 = 0;
            v23 = 0;
            *(_DWORD *)(a3 + 104) = 1;
            goto LABEL_90;
          }
        }
        else
        {
          v21 = v74;
        }
        v63 = 0;
        v62 = 0;
        WTF::AtomStringImpl::addLiteral();
        v32 = v60;
        v34 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v60);
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v33);
          else
            *(_DWORD *)v32 -= 2;
        }
        if (*((_DWORD *)v72 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v72))
          goto LABEL_63;
        if (v34 == 10)
        {
          WebCore::throwRequiredMemberTypeError((int)a2, (int)&v72, "label", 6, "ApplePayShippingMethod", 23, "DOMString", 10);
LABEL_63:
          v35 = 0;
          v23 = 0;
          *(_DWORD *)(a3 + 104) = 1;
LABEL_90:
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v35])(&v60, &v62);
          v29 = 0;
          goto LABEL_91;
        }
        v74 = (WTF::StringImpl *)v34;
        v36 = a2[7];
        if ((v34 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v34 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v74, (JSC::JSGlobalObject *)a2);
LABEL_71:
          if (*((_DWORD *)v36 + 20))
          {
            v51 = JSC::VM::hasExceptionsAfterHandlingTraps(v36);
            v23 = v73;
            if (v51)
            {
              v61 = 1;
              v73 = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2)
                  WTF::StringImpl::destroy(v23, v52);
                else
                  *(_DWORD *)v23 -= 2;
              }
              v23 = 0;
              v44 = 1;
              v45 = 1;
              goto LABEL_89;
            }
          }
          else
          {
            v23 = v73;
          }
          v61 = 0;
          v60 = 0;
          WTF::AtomStringImpl::addLiteral();
          v38 = v74;
          v40 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v74);
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, v39);
            else
              *(_DWORD *)v38 -= 2;
          }
          if (*((_DWORD *)v72 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v72) & 1) != 0)
          {
            v45 = 0;
            v44 = 1;
            goto LABEL_89;
          }
          if (v40 == 10)
          {
            v41 = 0;
LABEL_88:
            v44 = 0;
            v45 = 0;
            *(_QWORD *)a3 = v23;
            *(_QWORD *)(a3 + 8) = v22;
            *(_QWORD *)(a3 + 16) = v12;
            *(_QWORD *)(a3 + 24) = v21;
            *(_BYTE *)(a3 + 32) = v58;
            *(_OWORD *)(a3 + 33) = v75;
            *(_OWORD *)(a3 + 49) = v76;
            *(_OWORD *)(a3 + 65) = v77[0];
            *(_OWORD *)(a3 + 80) = *(_OWORD *)((char *)v77 + 15);
            *(_BYTE *)(a3 + 96) = v59;
            *(_WORD *)(a3 + 97) = v70;
            *(_BYTE *)(a3 + 99) = v71;
            *(_BYTE *)(a3 + 100) = v41;
            v21 = 0;
            v12 = 0;
            v22 = 0;
            v23 = 0;
LABEL_89:
            *(_DWORD *)(a3 + 104) = v44;
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v45])(&v74, &v60);
            v35 = 0;
            goto LABEL_90;
          }
          v42 = a2[7];
          if (v40 >= 0xFFFE000000000000)
          {
            v53 = (_DWORD)v40 == 0;
            goto LABEL_177;
          }
          *(_QWORD *)&v43 = v40 - 0x2000000000000;
          if (v40 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            if (v43 <= 0.0)
            {
              v41 = v43 < 0.0;
              goto LABEL_87;
            }
          }
          else
          {
            if ((v40 & 0xFFFE000000000002) != 0)
            {
              v41 = v40 == 7;
              goto LABEL_87;
            }
            v54 = *(unsigned __int8 *)(v40 + 5);
            if (v54 == 3)
            {
              v57 = *(_DWORD *)(v40 + 8);
LABEL_173:
              v53 = v57 == 0;
              goto LABEL_177;
            }
            if (v54 == 2)
            {
              v55 = *(_QWORD *)(v40 + 8);
              if ((v55 & 1) != 0)
                v56 = (int *)(v40 + 16);
              else
                v56 = (int *)(v55 + 4);
              v57 = *v56;
              goto LABEL_173;
            }
            if ((*(_BYTE *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0xA) & 1) != 0)
            {
              v53 = *(_QWORD *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_177:
              v41 = !v53;
LABEL_87:
              if (*((_DWORD *)v42 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v42) & 1) != 0)
              {
                v45 = 0;
                v44 = 1;
                goto LABEL_89;
              }
              goto LABEL_88;
            }
          }
          v41 = 1;
          goto LABEL_87;
        }
        v37 = *(WTF::StringImpl **)(v34 + 8);
        if ((v37 & 1) != 0)
        {
          v37 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v34, (JSC::JSGlobalObject *)a2);
          if (!v37)
            goto LABEL_70;
        }
        else if (!v37)
        {
LABEL_70:
          v73 = v37;
          goto LABEL_71;
        }
        *(_DWORD *)v37 += 2;
        goto LABEL_70;
      }
      v31 = *(WTF::StringImpl **)(v28 + 8);
      if ((v31 & 1) != 0)
      {
        v31 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v28, (JSC::JSGlobalObject *)a2);
        if (!v31)
          goto LABEL_54;
      }
      else if (!v31)
      {
LABEL_54:
        v74 = v31;
        goto LABEL_55;
      }
      *(_DWORD *)v31 += 2;
      goto LABEL_54;
    }
    v25 = *(WTF::StringImpl **)(v19 + 8);
    if ((v25 & 1) != 0)
    {
      v25 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v19, (JSC::JSGlobalObject *)a2);
      if (!v25)
        goto LABEL_39;
    }
    else if (!v25)
    {
LABEL_39:
      v60 = v25;
      goto LABEL_40;
    }
    *(_DWORD *)v25 += 2;
    goto LABEL_39;
  }
  v20 = 1;
  v69 = 1;
  v62 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v47);
    else
      *(_DWORD *)v12 -= 2;
  }
  v21 = 0;
  v12 = 0;
  v22 = 0;
  v23 = 0;
  *(_DWORD *)(a3 + 104) = 1;
LABEL_92:
  result = ((uint64_t (*)(_BYTE *, uint64_t *))off_1E334B060[v20])(v64, &v68);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      result = WTF::StringImpl::destroy(v21, v46);
      if (!v12)
        goto LABEL_98;
      goto LABEL_96;
    }
    *(_DWORD *)v21 -= 2;
  }
  if (!v12)
    goto LABEL_98;
LABEL_96:
  if (*(_DWORD *)v12 == 2)
    result = WTF::StringImpl::destroy(v12, v46);
  else
    *(_DWORD *)v12 -= 2;
LABEL_98:
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      result = WTF::StringImpl::destroy(v22, v46);
      if (!v23)
        return result;
      goto LABEL_102;
    }
    *(_DWORD *)v22 -= 2;
  }
  if (!v23)
    return result;
LABEL_102:
  if (*(_DWORD *)v23 == 2)
    return WTF::StringImpl::destroy(v23, v46);
  *(_DWORD *)v23 -= 2;
  return result;
}

uint64_t WebCore::JSApplePayShippingMethodSelectedEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSApplePayShippingMethodSelectedEvent::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  result = JSC::JSObject::visitChildren();
  v5 = *(_QWORD *)(a1 + 32);
  if ((v5 & 0xFFFE000000000002) == 0 && v5 != 0)
  {
    if ((v5 & 8) != 0)
    {
      if ((*(_BYTE *)(v5 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      v7 = v5 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v9 = v5 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
        v5 = v8;
        v7 = v9;
      }
      if (((*(_QWORD *)(v7 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (*(_QWORD *)(a2 + 168))
      return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WebCore::JSApplePayShippingMethodSelectedEvent::visitChildren(WebCore::JSApplePayShippingMethodSelectedEvent *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    result = JSC::JSObject::visitChildren();
    if ((*((_QWORD *)this + 4) & 0xFFFE000000000002) == 0)
      result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSApplePayShippingMethodSelectedEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSApplePayShippingMethodSelectedEventPrototype::create(WebCore::JSApplePayShippingMethodSelectedEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSApplePayShippingMethodSelectedEvent::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSApplePayShippingMethodSelectedEventPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::jsApplePayShippingMethodSelectedEvent_shippingMethod(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  JSC::VM *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 32);
  if (!v2)
  {
    v5 = *(JSC::VM **)(a1 + 56);
    v2 = WebCore::convertDictionaryToJS(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), (uint64_t *)(*(_QWORD *)(a2 + 24) + 72));
    if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    {
      return 0;
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a2 + 32) = v2;
      if ((v2 & 0xFFFE000000000002) == 0 && v2 && *(_DWORD *)(v6 + 760) >= *(unsigned __int8 *)(a2 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v6 + 192), (const JSCell *)a2);
    }
  }
  return v2;
}

uint64_t WebCore::JSApplePayShippingMethodSelectedEvent::subspaceForImpl(WebCore::JSApplePayShippingMethodSelectedEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 456);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 456))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 40, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 456);
    *(_QWORD *)(v8 + 456) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 456);
  *(_QWORD *)(v3 + 456) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSApplePayValidateMerchantEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSApplePayValidateMerchantEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSApplePayValidateMerchantEventPrototype::create(WebCore::JSApplePayValidateMerchantEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSApplePayValidateMerchantEvent::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSApplePayValidateMerchantEventPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::jsApplePayValidateMerchantEvent_validationURL(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 72);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::JSApplePayValidateMerchantEvent::subspaceForImpl(WebCore::JSApplePayValidateMerchantEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 464);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 464))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 464);
    *(_QWORD *)(v8 + 464) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 464);
  *(_QWORD *)(v3 + 464) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSSpeechSynthesisErrorEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  unint64_t v2;
  JSC::Structure *v3;
  int v6;
  JSC::JSCell *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  float v13;
  uint64_t Object;
  WTF::StringImpl *v15;
  JSC::VM *v16;
  double v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  JSC::VM *v20;
  double v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  JSC::VM *v24;
  double v25;
  BOOL v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  JSC::VM *v33;
  double v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  JSC::VM *v37;
  _DWORD *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  int v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WebCore::SpeechSynthesisUtterance *v46;
  unint64_t v47;
  float v48;
  WTF::StringImpl *v49;
  int v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WebCore::JSDOMGlobalObject *v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  JSC::VM *v57;
  uint64_t v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char **v64;
  int v65;
  unint64_t v66;
  WebCore::JSSpeechSynthesisEvent *v67;
  JSC::JSCell *v68;
  unint64_t Structure;
  JSC::Structure *v70;
  JSC::JSCell *v71;
  uint64_t v72;
  JSCell *v73;
  JSC::JSCell *v74;
  JSC::JSGlobalObject *v75;
  JSC::JSObject *v76;
  JSC::JSGlobalObject *v77;
  JSC::VM *v78;
  WebCore::JSDOMGlobalObject *v79;
  JSC::Structure *v80;
  JSC::VM *FunctionRealm;
  uint64_t v82;
  unsigned int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char **v88;
  int v89;
  JSC::JSCell *v90;
  unint64_t v91;
  JSC::Structure *v92;
  JSC::JSCell *v93;
  uint64_t v94;
  unint64_t SubclassStructure;
  _DWORD *v96;
  JSCell *v97;
  uint64_t v99;
  BOOL v100;
  char **v101;
  BOOL v102;
  BOOL v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  bmalloc::api *v107;
  void *v108;
  bmalloc::api *v109;
  void *v110;
  BOOL v111;
  JSC::VM *v112;
  _DWORD *v113;
  const char *v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  char **v118;
  unint64_t v119;
  JSValue v120;
  uint16x8_t v121;
  uint16x8_t v122;
  double v123;
  char hasExceptionsAfterHandlingTraps;
  int v125;
  uint16x8_t v126;
  uint16x8_t v127;
  BOOL v128;
  int v129;
  uint64_t v130;
  int *v131;
  int v132;
  BOOL v133;
  int v134;
  uint64_t v135;
  int *v136;
  int v137;
  BOOL v138;
  int v139;
  uint64_t v140;
  int *v141;
  int v142;
  uint64_t v143;
  BOOL v144;
  BOOL v145;
  BOOL v146;
  int v147;
  uint8x16_t v148;
  uint16x8_t v149;
  uint16x8_t v150;
  uint16x8_t v151;
  uint16x8_t v152;
  uint16x8_t v153;
  uint16x8_t v154;
  uint16x8_t v155;
  uint16x8_t v156;
  uint16x8_t v157;
  uint16x8_t v158;
  uint16x8_t v159;
  uint16x8_t v160;
  uint16x8_t v161;
  uint16x8_t v162;
  uint16x8_t v163;
  uint16x8_t v164;
  uint16x8_t v166;
  uint16x8_t v167;
  uint64_t v168;
  BOOL v169;
  uint64_t v170;
  JSC::VM *v171;
  WTF::StringImpl *v172;
  JSC::Structure *v173;
  uint64_t v174;
  unint64_t v175;
  float v176;
  WTF::StringImpl *v177;
  int v178;
  unsigned int v179;
  WTF::StringImpl *v180;
  int v181;
  _DWORD *v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  JSC::VM *v186[2];
  _DWORD *v187;

  v171 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v120.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v171, a1, v120);
  }
  v170 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v180);
  v6 = v181;
  if (v181)
  {
    v97 = 0;
    goto LABEL_145;
  }
  v7 = *(JSC::JSCell **)(a2 + 56);
  v186[0] = *((JSC::VM **)a1 + 7);
  v8 = (unint64_t)v7 & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)v7 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)v7 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v7)) == 0)
    {
      JSC::throwTypeError();
    }
    else
    {
      v3 = (JSC::Structure *)Object;
      WTF::AtomStringImpl::addLiteral();
      v2 = JSC::JSObject::get(v3, a1, (unint64_t)v172);
      if (v172)
      {
        if (*(_DWORD *)v172 == 2)
          WTF::StringImpl::destroy(v172, v15);
        else
          *(_DWORD *)v172 -= 2;
      }
      if (!*((_DWORD *)v186[0] + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v186[0]))
      {
        if (v2 == 10)
        {
          v11 = 0;
          goto LABEL_18;
        }
        v16 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v2 >= 0xFFFE000000000000)
          goto LABEL_287;
        *(_QWORD *)&v17 = v2 - 0x2000000000000;
        if (v2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          v11 = v17 > 0.0 || v17 < 0.0;
          goto LABEL_17;
        }
        if ((v2 & 0xFFFE000000000002) != 0)
        {
          v11 = v2 == 7;
          goto LABEL_17;
        }
        v129 = *(unsigned __int8 *)(v2 + 5);
        if (v129 == 3)
        {
          v132 = *(_DWORD *)(v2 + 8);
        }
        else
        {
          if (v129 != 2)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0xA) & 1) != 0)
            {
              v128 = *(_QWORD *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
              goto LABEL_317;
            }
            v11 = 1;
            goto LABEL_17;
          }
          v130 = *(_QWORD *)(v2 + 8);
          if ((v130 & 1) != 0)
            v131 = (int *)(v2 + 16);
          else
            v131 = (int *)(v130 + 4);
          v132 = *v131;
        }
        v128 = v132 == 0;
        goto LABEL_317;
      }
    }
    goto LABEL_217;
  }
  v9 = 0;
  v169 = 0;
  v10 = 0;
  v11 = 0;
  v3 = 0;
  v12 = 0;
  v184 = 0;
  v185 = 0;
  v13 = 0.0;
LABEL_74:
  v2 = *MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v2 += 2;
  v183 = 0;
  v182 = 0;
  if (v8 == 2)
  {
LABEL_92:
    WebCore::throwRequiredMemberTypeError((int)a1, (int)v186, "utterance", 10, "SpeechSynthesisErrorEventInit", 30, "SpeechSynthesisUtterance", 25);
LABEL_93:
    v3 = 0;
    goto LABEL_94;
  }
LABEL_87:
  WTF::AtomStringImpl::addLiteral();
  v8 = (unint64_t)v172;
  v40 = JSC::JSObject::get(v3, a1, (unint64_t)v172);
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v8, v39);
    else
      *(_DWORD *)v8 -= 2;
  }
  if (*((_DWORD *)v186[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v186[0]) & 1) != 0)
    goto LABEL_93;
  if (v40 == 10)
    goto LABEL_92;
  v172 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
  if ((v40 & 0xFFFE000000000002) != 0)
    goto LABEL_159;
  v99 = *(unsigned int *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x4C);
  v100 = *(_DWORD *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x4C) != 0;
  v101 = (char **)(16 * v99);
  if ((_DWORD)v99)
    v102 = v101 == &WebCore::JSSpeechSynthesisUtterance::s_info;
  else
    v102 = 1;
  if (!v102)
  {
    do
    {
      v101 = (char **)v101[2];
      v100 = v101 != 0;
    }
    while (v101 != &WebCore::JSSpeechSynthesisUtterance::s_info && v101 != 0);
  }
  if (!v100)
  {
LABEL_159:
    JSC::throwTypeError();
    goto LABEL_93;
  }
  v168 = v12;
  v104 = v10;
  v105 = *(_QWORD *)(v40 + 24);
  ++*(_DWORD *)(v105 - 8);
  WTF::AtomStringImpl::addLiteral();
  v106 = v172;
  v8 = JSC::JSObject::get(v3, a1, (unint64_t)v172);
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
      WTF::StringImpl::destroy(v106, v41);
    else
      *(_DWORD *)v106 -= 2;
  }
  v3 = (JSC::Structure *)(v105 - 40);
  if (*((_DWORD *)v186[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v186[0]) & 1) != 0)
    goto LABEL_94;
  if (v8 == 10)
  {
    WebCore::throwRequiredMemberTypeError((int)a1, (int)v186, "error", 6, "SpeechSynthesisErrorEventInit", 30, "SpeechSynthesisErrorCode", 25);
    goto LABEL_94;
  }
  v111 = v104;
  v112 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v186[1] = v112;
  v172 = (WTF::StringImpl *)v8;
  if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v172, a1);
    v113 = v187;
    if (v187)
      goto LABEL_175;
    goto LABEL_215;
  }
  v113 = *(_DWORD **)(v8 + 8);
  if ((v113 & 1) == 0)
  {
    if (!v113)
      goto LABEL_174;
    goto LABEL_173;
  }
  v113 = *(_DWORD **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, a1);
  if (v113)
LABEL_173:
    *v113 += 2;
LABEL_174:
  v187 = v113;
  if (v113)
  {
LABEL_175:
    v114 = (const char *)*((_QWORD *)v113 + 1);
    v115 = v113[1];
    v116 = ((unint64_t)v113[4] >> 2) & 1;
    if (v114 != "audio-busy" && v115 == 10)
    {
      if ((_DWORD)v116)
      {
        v117 = v168;
        if (*v114 == 97 && *(_QWORD *)(v114 + 1) == 0x7375622D6F696475)
        {
          v8 = v9;
          if (*(_QWORD *)(v114 + 2) == 0x797375622D6F6964)
          {
LABEL_181:
            v118 = &WebCore::parseEnumerationFromString<WebCore::SpeechSynthesisErrorCode>(WTF::String const&)::mappings;
LABEL_209:
            v119 = *((unsigned int *)v118 + 4) | 0x100000000;
            goto LABEL_234;
          }
          goto LABEL_233;
        }
      }
      else
      {
        v117 = v168;
        if (*(_WORD *)v114 == 97)
        {
          v8 = v9;
          v121 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v114 + 2), (int16x8_t)xmmword_1968DCD90);
          v121.i16[0] = vminvq_u16(v121);
          if (v121.i32[0])
          {
            v122 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v114 + 4), (int16x8_t)xmmword_1968DCDA0);
            v122.i16[0] = vminvq_u16(v122);
            if (v122.i32[0])
              goto LABEL_181;
          }
          goto LABEL_233;
        }
      }
      goto LABEL_232;
    }
    if (v114 == "audio-busy" && v115 == 10)
    {
      v8 = v9;
      v118 = &WebCore::parseEnumerationFromString<WebCore::SpeechSynthesisErrorCode>(WTF::String const&)::mappings;
LABEL_200:
      v117 = v168;
      goto LABEL_209;
    }
    if (v114 != "audio-hardware" && v115 == 14)
    {
      if ((_DWORD)v116)
      {
        if (*v114 == 97)
        {
          v117 = v168;
          if (*(_QWORD *)(v114 + 1) == 0x7261682D6F696475)
          {
            v8 = v9;
            if (*(_QWORD *)(v114 + 6) == 0x6572617764726168)
            {
              v118 = &off_1E334A238;
              goto LABEL_209;
            }
            goto LABEL_233;
          }
LABEL_232:
          v8 = v9;
LABEL_233:
          v119 = 0;
          goto LABEL_234;
        }
        v8 = v9;
        v119 = 0;
LABEL_219:
        v117 = v168;
        goto LABEL_234;
      }
      v8 = v9;
      if (*(_WORD *)v114 == 97)
      {
        v126 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v114 + 2), (int16x8_t)xmmword_1968DCDB0);
        v126.i16[0] = vminvq_u16(v126);
        if (v126.i32[0])
        {
          v127 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v114 + 12), (int16x8_t)xmmword_1968BFFF0);
          v127.i16[0] = vminvq_u16(v127);
          if (v127.i32[0])
            goto LABEL_277;
        }
      }
      goto LABEL_489;
    }
    v8 = v9;
    if (v114 == "audio-hardware" && v115 == 14)
    {
LABEL_277:
      v118 = &off_1E334A238;
LABEL_278:
      v111 = v104;
      goto LABEL_200;
    }
    if (v114 != "canceled" && v115 == 8)
    {
      if ((_DWORD)v116)
      {
        if (*v114 == 99 && *(_DWORD *)(v114 + 1) == 1701015137 && *((_DWORD *)v114 + 1) == 1684368485)
        {
LABEL_347:
          v118 = &off_1E334A250;
          goto LABEL_278;
        }
      }
      else if (*(_WORD *)v114 == 99)
      {
        v119 = 0;
        if (*(_QWORD *)(v114 + 2) == 0x650063006E0061)
        {
          v111 = v104;
          v117 = v168;
          if (*((_QWORD *)v114 + 1) == 0x640065006C0065)
          {
            v118 = &off_1E334A250;
            goto LABEL_209;
          }
LABEL_234:
          v187 = 0;
          if (*v113 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v113, v41);
          else
            *v113 -= 2;
          goto LABEL_236;
        }
        goto LABEL_490;
      }
LABEL_489:
      v119 = 0;
LABEL_490:
      v111 = v104;
      goto LABEL_219;
    }
    if (v114 == "canceled" && v115 == 8)
      goto LABEL_347;
    v143 = v116 << 32;
    v144 = v115 != 11;
    if (v114 != "interrupted" && v115 == 11)
    {
      if ((_DWORD)v116)
      {
        if (*v114 != 105
          || *(_QWORD *)(v114 + 1) != 0x747075727265746ELL
          || *(_QWORD *)(v114 + 3) != 0x6465747075727265)
        {
          v144 = 0;
          v145 = 0;
          v146 = 1;
          v147 = 11;
LABEL_387:
          v143 = 0x100000000;
          goto LABEL_415;
        }
LABEL_394:
        v118 = &off_1E334A268;
        goto LABEL_278;
      }
      if (*(_WORD *)v114 == 105)
      {
        v149 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v114 + 2), (int16x8_t)xmmword_1968DCDC0);
        v149.i16[0] = vminvq_u16(v149);
        v145 = v149.i8[0];
        if (v149.i32[0])
        {
          v150 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v114 + 6), (int16x8_t)xmmword_1968DCDD0);
          v150.i16[0] = vminvq_u16(v150);
          v145 = v150.i8[0];
          if (v150.i32[0])
            goto LABEL_394;
        }
        v144 = 0;
      }
      else
      {
        v144 = 0;
        v145 = 0;
      }
      v146 = 1;
      v147 = 11;
      goto LABEL_415;
    }
    if (v114 == "interrupted" && v115 == 11)
      goto LABEL_394;
    v145 = v115 == 16;
    v146 = v115 != 16;
    if (v114 != "invalid-argument" && v115 == 16)
    {
      if ((_DWORD)v116)
      {
        if (*v114 != 105
          || *(_QWORD *)(v114 + 1) != 0x612D64696C61766ELL
          || *((_QWORD *)v114 + 1) != 0x746E656D75677261)
        {
          v146 = 0;
          v147 = 16;
          goto LABEL_387;
        }
LABEL_398:
        v118 = &off_1E334A280;
        goto LABEL_278;
      }
      if (*(_WORD *)v114 == 105)
      {
        v151 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v114 + 2), (int16x8_t)xmmword_1968DCDE0);
        v151.i16[0] = vminvq_u16(v151);
        v146 = v151.i8[0];
        if (v151.i32[0])
        {
          v152 = (uint16x8_t)vceqq_s16(*((int16x8_t *)v114 + 1), (int16x8_t)xmmword_1968DCDF0);
          v152.i16[0] = vminvq_u16(v152);
          v146 = v152.i8[0];
          if (v152.i32[0])
            goto LABEL_398;
        }
      }
      else
      {
        v146 = 0;
      }
      v147 = 16;
      goto LABEL_415;
    }
    if (v114 == "invalid-argument" && v115 == 16)
      goto LABEL_398;
    if (v114 != "language-unavailable" && v115 == 20)
    {
      if ((_DWORD)v116)
      {
        if (*v114 != 108
          || (v148 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v114 + 4), (int8x16_t)xmmword_1968DCE10), vceqq_s8(*(int8x16_t *)(v114 + 1), (int8x16_t)xmmword_1968DCE00)), v148.i8[0] = vminvq_u8(v148), !v148.i32[0]))
        {
          v147 = 20;
          goto LABEL_387;
        }
      }
      else if (*(_WORD *)v114 != 108
             || (v153 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v114 + 2), (int16x8_t)xmmword_1968C0FA0),
                 v153.i16[0] = vminvq_u16(v153),
                 !v153.i32[0])
             || (v154 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v114 + 8), (int16x8_t)xmmword_1968DCE20),
                 v154.i16[0] = vminvq_u16(v154),
                 !v154.i32[0])
             || (v155 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v114 + 24), (int16x8_t)xmmword_1968DCA80),
                 v155.i16[0] = vminvq_u16(v155),
                 !v155.i32[0]))
      {
        v147 = 20;
        goto LABEL_415;
      }
LABEL_403:
      v118 = &off_1E334A298;
      goto LABEL_278;
    }
    if (v114 == "language-unavailable" && v115 == 20)
      goto LABEL_403;
    if (v114 == "network" || v115 != 7)
    {
      v147 = v113[1];
      if (v114 == "network" && v115 == 7)
        goto LABEL_407;
    }
    else
    {
      if ((_DWORD)v116)
      {
        if (*v114 != 110 || *(_DWORD *)(v114 + 1) != 1870099557 || *(_DWORD *)(v114 + 3) != 1802661751)
        {
          v147 = 7;
          goto LABEL_387;
        }
LABEL_407:
        v118 = &off_1E334A2B0;
        goto LABEL_278;
      }
      if (*(_WORD *)v114 != 110)
      {
        v147 = 7;
        goto LABEL_415;
      }
      v147 = 7;
      if (*(_QWORD *)(v114 + 2) == 0x6F007700740065 && *(_QWORD *)(v114 + 6) == 0x6B0072006F0077)
        goto LABEL_407;
    }
LABEL_415:
    if (v114 == "not-allowed" || v144)
    {
      if (v114 == "not-allowed" && v115 == 11)
        goto LABEL_429;
    }
    else
    {
      if (!v147)
        goto LABEL_429;
      if ((v143 & 0x100000000) != 0)
      {
        if (*v114 != 110
          || *(_QWORD *)(v114 + 1) != 0x776F6C6C612D746FLL
          || *(_QWORD *)(v114 + 3) != 0x6465776F6C6C612DLL)
        {
          v143 = 0x100000000;
          goto LABEL_430;
        }
LABEL_429:
        v118 = &off_1E334A2C8;
        goto LABEL_278;
      }
      if (*(_WORD *)v114 == 110)
      {
        v156 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v114 + 2), (int16x8_t)xmmword_1968C02D0);
        v156.i16[0] = vminvq_u16(v156);
        if (v156.i32[0])
        {
          v157 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v114 + 6), (int16x8_t)xmmword_1968C02E0);
          v157.i16[0] = vminvq_u16(v157);
          if (v157.i32[0])
            goto LABEL_429;
        }
      }
    }
LABEL_430:
    if (v114 == "synthesis-failed")
      v146 = 1;
    if (v146)
    {
      if (v114 != "synthesis-failed")
        v145 = 0;
      if (v145)
        goto LABEL_446;
    }
    else
    {
      if (!v147)
        goto LABEL_446;
      if ((v143 & 0x100000000) != 0)
      {
        if (*v114 != 115
          || *(_QWORD *)(v114 + 1) != 0x7369736568746E79
          || *((_QWORD *)v114 + 1) != 0x64656C6961662D73)
        {
          v143 = 0x100000000;
          goto LABEL_447;
        }
LABEL_446:
        v118 = &off_1E334A2E0;
        goto LABEL_278;
      }
      if (*(_WORD *)v114 == 115)
      {
        v158 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v114 + 2), (int16x8_t)xmmword_1968DCE30);
        v158.i16[0] = vminvq_u16(v158);
        if (v158.i32[0])
        {
          v159 = (uint16x8_t)vceqq_s16(*((int16x8_t *)v114 + 1), (int16x8_t)xmmword_1968DCE40);
          v159.i16[0] = vminvq_u16(v159);
          if (v159.i32[0])
            goto LABEL_446;
        }
      }
    }
LABEL_447:
    if (v114 == "synthesis-unavailable" || v147 != 21)
    {
      if (v114 != "synthesis-unavailable" || v147 != 21)
      {
        if (v114 == "text-too-long" || v147 != 13)
        {
          if (v114 != "text-too-long" || v147 != 13)
          {
            if (v114 == "voice-unavailable" || v147 != 17)
            {
              if (v147 != 17 || v114 != "voice-unavailable")
                goto LABEL_489;
            }
            else if ((v143 & 0x100000000) != 0)
            {
              if (*v114 != 118
                || *(_QWORD *)(v114 + 1) != 0x616E752D6563696FLL
                || *(_QWORD *)(v114 + 9) != 0x656C62616C696176)
              {
                goto LABEL_489;
              }
            }
            else
            {
              if (*(_WORD *)v114 != 118)
                goto LABEL_489;
              v166 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v114 + 2), (int16x8_t)xmmword_1968DCEA0);
              v166.i16[0] = vminvq_u16(v166);
              if (!v166.i32[0])
                goto LABEL_489;
              v167 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v114 + 18), (int16x8_t)xmmword_1968DCA80);
              v167.i16[0] = vminvq_u16(v167);
              if (!v167.i32[0])
                goto LABEL_489;
            }
            v118 = &off_1E334A328;
            goto LABEL_278;
          }
        }
        else if ((v143 & 0x100000000) != 0)
        {
          if (*v114 != 116
            || *(_QWORD *)(v114 + 1) != 0x2D6F6F742D747865
            || *(_QWORD *)(v114 + 5) != 0x676E6F6C2D6F6F74)
          {
            goto LABEL_489;
          }
        }
        else
        {
          if (*(_WORD *)v114 != 116)
            goto LABEL_489;
          v163 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v114 + 2), (int16x8_t)xmmword_1968DCE80);
          v163.i16[0] = vminvq_u16(v163);
          if (!v163.i32[0])
            goto LABEL_489;
          v164 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v114 + 10), (int16x8_t)xmmword_1968DCE90);
          v164.i16[0] = vminvq_u16(v164);
          if (!v164.i32[0])
            goto LABEL_489;
        }
        v118 = &off_1E334A310;
        goto LABEL_278;
      }
    }
    else
    {
      if ((v143 & 0x100000000) != 0)
      {
        if (*v114 != 115)
          goto LABEL_489;
        v160 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v114 + 5), (int8x16_t)xmmword_1968DCE60), vceqq_s8(*(int8x16_t *)(v114 + 1), (int8x16_t)xmmword_1968DCE50));
        v160.i8[0] = vminvq_u8((uint8x16_t)v160);
      }
      else
      {
        if (*(_WORD *)v114 != 115)
          goto LABEL_489;
        v161 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v114 + 2), (int16x8_t)xmmword_1968DCE30);
        v161.i16[0] = vminvq_u16(v161);
        if (!v161.i32[0])
          goto LABEL_489;
        v162 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v114 + 10), (int16x8_t)xmmword_1968DCE70);
        v162.i16[0] = vminvq_u16(v162);
        if (!v162.i32[0])
          goto LABEL_489;
        v160 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v114 + 26), (int16x8_t)xmmword_1968DCA80);
        v160.i16[0] = vminvq_u16(v160);
      }
      if (!v160.i32[0])
        goto LABEL_489;
    }
    v118 = &off_1E334A2F8;
    goto LABEL_278;
  }
LABEL_215:
  v8 = v9;
  v119 = 0;
  v117 = v168;
LABEL_236:
  if (*((_DWORD *)v112 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v112) & 1) != 0)
    goto LABEL_94;
  if (!HIDWORD(v119))
  {
    JSC::throwTypeError();
    goto LABEL_94;
  }
  v42 = 0;
  LOBYTE(v172) = v11;
  BYTE1(v172) = v111;
  BYTE2(v172) = v169;
  v173 = v3;
  v174 = v117;
  v175 = v8;
  v176 = v13;
  v177 = (WTF::StringImpl *)v2;
  v178 = v119;
  v3 = 0;
  v2 = 0;
LABEL_95:
  v179 = v42;
  if (v183 != -1)
    ((void (*)(_DWORD **, _DWORD **))off_1E334B060[v183])(&v187, &v182);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)v2, v41);
      if (!v3)
        goto LABEL_103;
      goto LABEL_101;
    }
    *(_DWORD *)v2 -= 2;
  }
  if (!v3)
    goto LABEL_103;
LABEL_101:
  if (*((_DWORD *)v3 + 8) == 1)
  {
    WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(v3, v41);
    bmalloc::api::isoDeallocate(v109, v110);
  }
  else
  {
    --*((_DWORD *)v3 + 8);
  }
LABEL_103:
  while (1)
  {
    v43 = v179;
    if (v179)
      break;
    if (!v181)
    {
      v44 = v180;
      v180 = 0;
      v46 = v173;
      v45 = v174;
      v47 = v175;
      v48 = v176;
      v49 = v177;
      v173 = 0;
      v177 = 0;
      v50 = v178;
      v51 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v51);
      *(_QWORD *)v51 = off_1E33A4B48;
      *(_QWORD *)(v51 + 8) = 0;
      v55 = *(_DWORD *)(v51 + 20) & 0xFFC00000 | (v44 != 0) | 0xD8200;
      *(_DWORD *)(v51 + 16) = 1;
      *(_DWORD *)(v51 + 20) = v55;
      if (v44)
        *(_DWORD *)v44 += 2;
      *(_QWORD *)(v51 + 24) = v44;
      *(_QWORD *)(v51 + 32) = 0;
      *(_QWORD *)(v51 + 40) = 0;
      *(_QWORD *)(v51 + 48) = 0;
      *(_QWORD *)(v51 + 56) = v54;
      *(_QWORD *)(v51 + 64) = 0;
      if (v46)
        ++*((_DWORD *)v46 + 8);
      *(_QWORD *)(v51 + 72) = v46;
      *(_QWORD *)(v51 + 80) = v45;
      *(_QWORD *)(v51 + 88) = v47;
      *(float *)(v51 + 96) = v48;
      if (v49)
      {
        v56 = *(_DWORD *)v49;
        *(_DWORD *)v49 += 2;
        *(_QWORD *)(v51 + 104) = v49;
        *(_QWORD *)v51 = off_1E3366F40;
        *(_DWORD *)(v51 + 112) = v50;
        v182 = (_DWORD *)v51;
        if (v56)
          *(_DWORD *)v49 = v56;
        else
          WTF::StringImpl::destroy(v49, v52);
      }
      else
      {
        *(_QWORD *)(v51 + 104) = 0;
        *(_QWORD *)v51 = off_1E3366F40;
        *(_DWORD *)(v51 + 112) = v50;
        v182 = (_DWORD *)v51;
      }
      if (v46)
      {
        if (*((_DWORD *)v46 + 8) != 1)
        {
          --*((_DWORD *)v46 + 8);
          goto LABEL_115;
        }
        WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(v46, v52);
        bmalloc::api::isoDeallocate(v107, v108);
        if (!v44)
        {
LABEL_118:
          if (*(void (***)(WebCore::SpeechSynthesisErrorEvent *__hidden))v51 != off_1E3366F40)
          {
            __break(0xC471u);
            JUMPOUT(0x19521EDB0);
          }
          v57 = *(JSC::VM **)(v170 + 40);
          v58 = *((_QWORD *)v57 + 412);
          if (!v58)
            goto LABEL_125;
          v59 = *(_DWORD *)(v58 - 8);
          v60 = ((unint64_t)&WebCore::JSSpeechSynthesisErrorEvent::s_info
               + ~((_QWORD)&WebCore::JSSpeechSynthesisErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechSynthesisErrorEvent::s_info
                                                                                   + ~((_QWORD)&WebCore::JSSpeechSynthesisErrorEvent::s_info << 32)) >> 22);
          v61 = 9 * ((v60 + ~(v60 << 13)) ^ ((v60 + ~(v60 << 13)) >> 8));
          v62 = (v61 ^ (v61 >> 15)) + ~((v61 ^ (v61 >> 15)) << 27);
          v63 = v59 & ((v62 >> 31) ^ v62);
          v64 = *(char ***)(v58 + 16 * v63);
          if (v64 == &WebCore::JSSpeechSynthesisErrorEvent::s_info)
          {
LABEL_124:
            v66 = *(_QWORD *)(v58 + 16 * v63 + 8);
            if (!v66)
              goto LABEL_125;
          }
          else
          {
            v65 = 1;
            while (v64)
            {
              v63 = ((_DWORD)v63 + v65) & v59;
              v64 = *(char ***)(v58 + 16 * v63);
              ++v65;
              if (v64 == &WebCore::JSSpeechSynthesisErrorEvent::s_info)
                goto LABEL_124;
            }
LABEL_125:
            v67 = (WebCore::JSSpeechSynthesisEvent *)*((_QWORD *)v57 + 7);
            v68 = (JSC::JSCell *)WebCore::JSSpeechSynthesisEvent::prototype(v67, *(JSC::VM **)(v170 + 40), v53);
            Structure = WebCore::JSSpeechSynthesisErrorEventPrototype::createStructure((uint64_t *)v67, (uint64_t)v57, v68);
            *(_DWORD *)(Structure + 16) |= 0x80000u;
            v71 = (JSC::JSCell *)WebCore::JSSpeechSynthesisErrorEventPrototype::create(v67, v57, Structure, v70);
            v72 = WebCore::JSSpeechSynthesisErrorEvent::createStructure((uint64_t *)v67, (uint64_t)v57, v71);
            v66 = WebCore::cacheDOMStructure((JSCell *)v57, v72, (uint64_t)&WebCore::JSSpeechSynthesisErrorEvent::s_info);
          }
          v73 = (JSCell *)WebCore::JSSpeechSynthesisErrorEvent::create(v66, v57, (uint64_t *)&v182);
          WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v57 + 415), v51, (uint64_t)v73);
          v74 = *(JSC::JSCell **)(a2 + 40);
          if (((unint64_t)v74 & 0xFFFE000000000002) != 0
            || (v75 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v74)) == 0
            || (v77 = v75, v75 == *(JSC::JSGlobalObject **)(a2 + 24))
            || (v78 = (JSC::VM *)*((_QWORD *)a1 + 7),
                FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v75, v76),
                *((_DWORD *)v78 + 20))
            && (JSC::VM::hasExceptionsAfterHandlingTraps(v78) & 1) != 0)
          {
LABEL_139:
            if (*((_DWORD *)v171 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v171) & 1) != 0)
              v73 = 0;
            v96 = v182;
            v182 = 0;
            if (v96)
            {
              if (v96[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v96 + 8))(v96);
              else
                --v96[4];
            }
            goto LABEL_143;
          }
          v82 = *((_QWORD *)FunctionRealm + 412);
          if (v82)
          {
            v83 = *(_DWORD *)(v82 - 8);
            v84 = ((unint64_t)&WebCore::JSSpeechSynthesisErrorEvent::s_info
                 + ~((_QWORD)&WebCore::JSSpeechSynthesisErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechSynthesisErrorEvent::s_info
                                                                                     + ~((_QWORD)&WebCore::JSSpeechSynthesisErrorEvent::s_info << 32)) >> 22);
            v85 = 9 * ((v84 + ~(v84 << 13)) ^ ((v84 + ~(v84 << 13)) >> 8));
            v86 = (v85 ^ (v85 >> 15)) + ~((v85 ^ (v85 >> 15)) << 27);
            v87 = v83 & ((v86 >> 31) ^ v86);
            v88 = *(char ***)(v82 + 16 * v87);
            if (v88 != &WebCore::JSSpeechSynthesisErrorEvent::s_info)
            {
              v89 = 1;
              while (v88)
              {
                v87 = ((_DWORD)v87 + v89) & v83;
                v88 = *(char ***)(v82 + 16 * v87);
                ++v89;
                if (v88 == &WebCore::JSSpeechSynthesisErrorEvent::s_info)
                  goto LABEL_135;
              }
              goto LABEL_136;
            }
LABEL_135:
            v79 = *(WebCore::JSDOMGlobalObject **)(v82 + 16 * v87 + 8);
            if (!v79)
              goto LABEL_136;
          }
          else
          {
LABEL_136:
            v90 = (JSC::JSCell *)WebCore::JSSpeechSynthesisEvent::prototype(v78, FunctionRealm, v79);
            v91 = WebCore::JSSpeechSynthesisErrorEventPrototype::createStructure((uint64_t *)v78, (uint64_t)FunctionRealm, v90);
            *(_DWORD *)(v91 + 16) |= 0x80000u;
            v93 = (JSC::JSCell *)WebCore::JSSpeechSynthesisErrorEventPrototype::create(v78, FunctionRealm, v91, v92);
            v94 = WebCore::JSSpeechSynthesisErrorEvent::createStructure((uint64_t *)v78, (uint64_t)FunctionRealm, v93);
            v79 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v94, (uint64_t)&WebCore::JSSpeechSynthesisErrorEvent::s_info);
          }
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v77, v79, v80);
          if (!*((_DWORD *)v78 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v78) & 1) == 0)
            JSC::JSObject::setStructure(v73, v78, SubclassStructure);
          goto LABEL_139;
        }
      }
      else
      {
LABEL_115:
        if (!v44)
          goto LABEL_118;
      }
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v52);
      else
        *(_DWORD *)v44 -= 2;
      goto LABEL_118;
    }
    v16 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_287:
    v128 = (_DWORD)v2 == 0;
LABEL_317:
    v11 = !v128;
LABEL_17:
    if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
      goto LABEL_217;
LABEL_18:
    WTF::AtomStringImpl::addLiteral();
    v18 = v172;
    v2 = JSC::JSObject::get(v3, a1, (unint64_t)v172);
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v19);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (*((_DWORD *)v186[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v186[0]))
      goto LABEL_217;
    if (v2 == 10)
    {
      v10 = 0;
      goto LABEL_29;
    }
    v20 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v2 >= 0xFFFE000000000000)
    {
      v133 = (_DWORD)v2 == 0;
      goto LABEL_324;
    }
    *(_QWORD *)&v21 = v2 - 0x2000000000000;
    if (v2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v2 & 0xFFFE000000000002) != 0)
      {
        v10 = v2 == 7;
        goto LABEL_28;
      }
      v134 = *(unsigned __int8 *)(v2 + 5);
      if (v134 == 3)
      {
        v137 = *(_DWORD *)(v2 + 8);
      }
      else
      {
        if (v134 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_328:
            v10 = 1;
            goto LABEL_28;
          }
          v133 = *(_QWORD *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_324;
        }
        v135 = *(_QWORD *)(v2 + 8);
        if ((v135 & 1) != 0)
          v136 = (int *)(v2 + 16);
        else
          v136 = (int *)(v135 + 4);
        v137 = *v136;
      }
      v133 = v137 == 0;
LABEL_324:
      v10 = !v133;
      goto LABEL_28;
    }
    if (v21 > 0.0)
      goto LABEL_328;
    v10 = v21 < 0.0;
LABEL_28:
    if (*((_DWORD *)v20 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v20))
      goto LABEL_217;
LABEL_29:
    WTF::AtomStringImpl::addLiteral();
    v22 = v172;
    v2 = JSC::JSObject::get(v3, a1, (unint64_t)v172);
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v23);
      else
        *(_DWORD *)v22 -= 2;
    }
    if (*((_DWORD *)v186[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v186[0]))
      goto LABEL_217;
    if (v2 == 10)
    {
      v169 = 0;
      goto LABEL_40;
    }
    v24 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v2 >= 0xFFFE000000000000)
    {
      v138 = (_DWORD)v2 == 0;
      goto LABEL_331;
    }
    *(_QWORD *)&v25 = v2 - 0x2000000000000;
    if (v2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v2 & 0xFFFE000000000002) != 0)
      {
        v26 = v2 == 7;
        goto LABEL_39;
      }
      v139 = *(unsigned __int8 *)(v2 + 5);
      if (v139 == 3)
      {
        v142 = *(_DWORD *)(v2 + 8);
      }
      else
      {
        if (v139 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_335:
            v26 = 1;
            goto LABEL_39;
          }
          v138 = *(_QWORD *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_331;
        }
        v140 = *(_QWORD *)(v2 + 8);
        if ((v140 & 1) != 0)
          v141 = (int *)(v2 + 16);
        else
          v141 = (int *)(v140 + 4);
        v142 = *v141;
      }
      v138 = v142 == 0;
LABEL_331:
      v26 = !v138;
      goto LABEL_39;
    }
    if (v25 > 0.0)
      goto LABEL_335;
    v26 = v25 < 0.0;
LABEL_39:
    v169 = v26;
    if (*((_DWORD *)v24 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v24))
      goto LABEL_217;
LABEL_40:
    WTF::AtomStringImpl::addLiteral();
    v27 = v172;
    v2 = JSC::JSObject::get(v3, a1, (unint64_t)v172);
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v28);
      else
        *(_DWORD *)v27 -= 2;
    }
    if (!*((_DWORD *)v186[0] + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v186[0]))
    {
      if (v2 == 10)
      {
        LODWORD(v12) = 0;
        v185 = 0;
      }
      else
      {
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, v2, &v185);
        if (HIDWORD(v185))
          goto LABEL_217;
        LODWORD(v12) = v185;
      }
      WTF::AtomStringImpl::addLiteral();
      v29 = v172;
      v2 = JSC::JSObject::get(v3, a1, (unint64_t)v172);
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v30);
        else
          *(_DWORD *)v29 -= 2;
      }
      if (!*((_DWORD *)v186[0] + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v186[0]) & 1) == 0)
      {
        if (v2 == 10)
        {
          LODWORD(v9) = 0;
          v184 = 0;
        }
        else
        {
          WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, v2, &v184);
          if (HIDWORD(v184))
            goto LABEL_217;
          LODWORD(v9) = v184;
        }
        WTF::AtomStringImpl::addLiteral();
        v31 = v172;
        v2 = JSC::JSObject::get(v3, a1, (unint64_t)v172);
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v32);
          else
            *(_DWORD *)v31 -= 2;
        }
        if (!*((_DWORD *)v186[0] + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v186[0]) & 1) == 0)
        {
          v13 = 0.0;
          if (v2 != 10)
          {
            v172 = (WTF::StringImpl *)v2;
            v33 = (JSC::VM *)*((_QWORD *)a1 + 7);
            v182 = v33;
            if (v2 >= 0xFFFE000000000000)
            {
              v34 = (double)(int)v2;
            }
            else if (v2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v172, a1);
            }
            else
            {
              *(_QWORD *)&v34 = v2 - 0x2000000000000;
            }
            if (*((_DWORD *)v33 + 20))
            {
              v123 = v34;
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v33);
              v34 = v123;
              if ((hasExceptionsAfterHandlingTraps & 1) != 0)
                goto LABEL_217;
            }
            if ((*(_QWORD *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
              || v34 < -3.40282347e38
              || v34 > 3.40282347e38)
            {
              JSC::throwTypeError();
              goto LABEL_217;
            }
            v13 = v34;
          }
          WTF::AtomStringImpl::addLiteral();
          v35 = v172;
          v2 = JSC::JSObject::get(v3, a1, (unint64_t)v172);
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, v36);
            else
              *(_DWORD *)v35 -= 2;
          }
          if (!*((_DWORD *)v186[0] + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v186[0]) & 1) == 0)
          {
            v12 = v12;
            v9 = v9;
            if (v2 == 10)
              goto LABEL_74;
            v172 = (WTF::StringImpl *)v2;
            v37 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if ((v2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v2 + 5) != 2)
            {
              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v172, a1);
            }
            else
            {
              v38 = *(_DWORD **)(v2 + 8);
              if ((v38 & 1) != 0)
              {
                v38 = *(_DWORD **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v2, a1);
                if (v38)
LABEL_82:
                  *v38 += 2;
              }
              else if (v38)
              {
                goto LABEL_82;
              }
              v187 = v38;
            }
            if (!*((_DWORD *)v37 + 20))
            {
              v2 = (unint64_t)v187;
LABEL_86:
              v183 = 0;
              v182 = 0;
              goto LABEL_87;
            }
            v125 = JSC::VM::hasExceptionsAfterHandlingTraps(v37);
            v2 = (unint64_t)v187;
            if (!v125)
              goto LABEL_86;
            v183 = 1;
            v187 = 0;
            if (v2)
            {
              if (*(_DWORD *)v2 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v2, v41);
              else
                *(_DWORD *)v2 -= 2;
            }
            v3 = 0;
            v2 = 0;
LABEL_94:
            v42 = 1;
            goto LABEL_95;
          }
        }
      }
    }
LABEL_217:
    v179 = 1;
  }
  v73 = 0;
  v97 = 0;
  if (v179 != -1)
  {
LABEL_143:
    ((void (*)(_DWORD **, WTF::StringImpl **))off_1E334BAC8[v43])(&v182, &v172);
    v97 = v73;
  }
  v6 = v181;
LABEL_145:
  if (v6 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334BAD8[v6])(&v172, &v180);
  return v97;
}

uint64_t WebCore::JSSpeechSynthesisErrorEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSpeechSynthesisEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSpeechSynthesisEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSpeechSynthesisEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSpeechSynthesisErrorEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSpeechSynthesisErrorEventPrototype::create(WebCore::JSSpeechSynthesisErrorEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSSpeechSynthesisErrorEvent::s_info, (uint64_t)&WebCore::JSSpeechSynthesisErrorEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSSpeechSynthesisErrorEvent>,(WebCore::DOMConstructorID)208>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1664);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSSpeechSynthesisEvent>,(WebCore::DOMConstructorID)209>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSSpeechSynthesisErrorEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSpeechSynthesisErrorEvent::s_info
         + ~((_QWORD)&WebCore::JSSpeechSynthesisErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSpeechSynthesisErrorEvent::s_info
                                                                             + ~((_QWORD)&WebCore::JSSpeechSynthesisErrorEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSpeechSynthesisErrorEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSpeechSynthesisErrorEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSpeechSynthesisEvent::prototype((WebCore::JSSpeechSynthesisEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSpeechSynthesisErrorEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSSpeechSynthesisErrorEventPrototype::create((WebCore::JSSpeechSynthesisErrorEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSSpeechSynthesisErrorEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSSpeechSynthesisErrorEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1664) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSpeechSynthesisErrorEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSpeechSynthesisErrorEventPrototype::s_info != (char **)(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                           + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSSpeechSynthesisErrorEvent>,(WebCore::DOMConstructorID)208>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsSpeechSynthesisErrorEvent_error(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(int *)(*((_QWORD *)a2 + 3) + 112);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = (uint64_t *)(v3 + 41968);
  if ((byte_1EE3374E8 & 1) == 0)
  {
    dword_1ECE7B1B0 += 2;
    qword_1EE337728 = (uint64_t)&dword_1ECE7B1B0;
    dword_1ECE7B1D0 += 2;
    qword_1EE337730 = (uint64_t)&dword_1ECE7B1D0;
    dword_1ECE7B1F0 += 2;
    qword_1EE337738 = (uint64_t)&dword_1ECE7B1F0;
    dword_1ECE7B210 += 2;
    qword_1EE337740 = (uint64_t)&dword_1ECE7B210;
    dword_1ECE7B230 += 2;
    qword_1EE337748 = (uint64_t)&dword_1ECE7B230;
    dword_1ECE7B250 += 2;
    qword_1EE337750 = (uint64_t)&dword_1ECE7B250;
    dword_1ECE7B270 += 2;
    qword_1EE337758 = (uint64_t)&dword_1ECE7B270;
    dword_1ECE7B290 += 2;
    qword_1EE337760 = (uint64_t)&dword_1ECE7B290;
    dword_1ECE7B2B0 += 2;
    qword_1EE337768 = (uint64_t)&dword_1ECE7B2B0;
    dword_1ECE7B2D0 += 2;
    qword_1EE337770 = (uint64_t)&dword_1ECE7B2D0;
    dword_1ECE7B2F0 += 2;
    qword_1EE337778 = (uint64_t)&dword_1ECE7B2F0;
    dword_1ECE7B310 += 2;
    qword_1EE337780 = (uint64_t)&dword_1ECE7B310;
    byte_1EE3374E8 = 1;
  }
  v5 = *(_QWORD *)&_MergedGlobals_204[8 * v2 + 592];
  if (!v5)
    return *v4;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v3 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v3 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v4;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::JSSpeechSynthesisErrorEvent::subspaceForImpl(WebCore::JSSpeechSynthesisErrorEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1688);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 1688))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 1688);
    *(_QWORD *)(v8 + 1688) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 1688);
  *(_QWORD *)(v3 + 1688) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::convertDictionary<WebCore::SpeechSynthesisEventInit>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  JSC::Structure *v9;
  uint64_t v10;
  float v11;
  uint64_t Object;
  WTF::StringImpl *v13;
  unint64_t v14;
  JSC::VM *v15;
  double v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  JSC::VM *v19;
  double v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  BOOL v23;
  JSC::VM *v24;
  double v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  uint64_t result;
  WTF::StringImpl *v29;
  unint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  JSC::VM *v33;
  double v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  JSC::VM *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  BOOL v46;
  char **v47;
  BOOL v48;
  uint64_t v50;
  double v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  int *v55;
  int v56;
  BOOL v57;
  int v58;
  uint64_t v59;
  int *v60;
  int v61;
  BOOL v62;
  int v63;
  uint64_t v64;
  int *v65;
  int v66;
  BOOL v67;
  WTF::StringImpl *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  JSC::VM *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;

  v72 = a2[7];
  v5 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    v67 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v70 = 0;
    v71 = 0;
    v11 = 0.0;
    goto LABEL_72;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    goto LABEL_125;
  }
  v9 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v14 = JSC::JSObject::get(v9, (JSC::JSGlobalObject *)a2, (unint64_t)v68);
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
      WTF::StringImpl::destroy(v68, v13);
    else
      *(_DWORD *)v68 -= 2;
  }
  if (*((_DWORD *)v72 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v72);
    if ((_DWORD)result)
      goto LABEL_125;
  }
  if (v14 == 10)
  {
    v8 = 0;
    goto LABEL_16;
  }
  v15 = a2[7];
  if (v14 >= 0xFFFE000000000000)
  {
    v52 = (_DWORD)v14 == 0;
    goto LABEL_202;
  }
  *(_QWORD *)&v16 = v14 - 0x2000000000000;
  if (v14 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v14 & 0xFFFE000000000002) != 0)
    {
      v8 = v14 == 7;
      goto LABEL_15;
    }
    v53 = *(unsigned __int8 *)(v14 + 5);
    if (v53 == 3)
    {
      v56 = *(_DWORD *)(v14 + 8);
    }
    else
    {
      if (v53 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v8 = 1;
          goto LABEL_15;
        }
        v52 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
        goto LABEL_202;
      }
      v54 = *(_QWORD *)(v14 + 8);
      if ((v54 & 1) != 0)
        v55 = (int *)(v14 + 16);
      else
        v55 = (int *)(v54 + 4);
      v56 = *v55;
    }
    v52 = v56 == 0;
LABEL_202:
    v8 = !v52;
    goto LABEL_15;
  }
  v8 = v16 > 0.0 || v16 < 0.0;
LABEL_15:
  if (*((_DWORD *)v15 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v15);
    if ((_DWORD)result)
      goto LABEL_125;
  }
LABEL_16:
  WTF::AtomStringImpl::addLiteral();
  v18 = JSC::JSObject::get(v9, (JSC::JSGlobalObject *)a2, (unint64_t)v68);
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
      WTF::StringImpl::destroy(v68, v17);
    else
      *(_DWORD *)v68 -= 2;
  }
  if (*((_DWORD *)v72 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v72);
    if ((_DWORD)result)
      goto LABEL_125;
  }
  if (v18 == 10)
  {
    v7 = 0;
    goto LABEL_27;
  }
  v19 = a2[7];
  if (v18 >= 0xFFFE000000000000)
  {
    v57 = (_DWORD)v18 == 0;
    goto LABEL_206;
  }
  *(_QWORD *)&v20 = v18 - 0x2000000000000;
  if (v18 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v20 <= 0.0)
    {
      v7 = v20 < 0.0;
      goto LABEL_26;
    }
    goto LABEL_193;
  }
  if ((v18 & 0xFFFE000000000002) != 0)
  {
    v7 = v18 == 7;
    goto LABEL_26;
  }
  v58 = *(unsigned __int8 *)(v18 + 5);
  if (v58 == 3)
  {
    v61 = *(_DWORD *)(v18 + 8);
LABEL_191:
    v57 = v61 == 0;
    goto LABEL_206;
  }
  if (v58 == 2)
  {
    v59 = *(_QWORD *)(v18 + 8);
    if ((v59 & 1) != 0)
      v60 = (int *)(v18 + 16);
    else
      v60 = (int *)(v59 + 4);
    v61 = *v60;
    goto LABEL_191;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0xA) & 1) == 0)
  {
LABEL_193:
    v7 = 1;
    goto LABEL_26;
  }
  v57 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_206:
  v7 = !v57;
LABEL_26:
  if (*((_DWORD *)v19 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v19);
    if ((_DWORD)result)
      goto LABEL_125;
  }
LABEL_27:
  WTF::AtomStringImpl::addLiteral();
  v22 = JSC::JSObject::get(v9, (JSC::JSGlobalObject *)a2, (unint64_t)v68);
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
      WTF::StringImpl::destroy(v68, v21);
    else
      *(_DWORD *)v68 -= 2;
  }
  if (*((_DWORD *)v72 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v72);
    if ((_DWORD)result)
      goto LABEL_125;
  }
  if (v22 == 10)
  {
    v23 = 0;
    goto LABEL_38;
  }
  v24 = a2[7];
  if (v22 >= 0xFFFE000000000000)
  {
    v62 = (_DWORD)v22 == 0;
    goto LABEL_196;
  }
  *(_QWORD *)&v25 = v22 - 0x2000000000000;
  if (v22 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v25 <= 0.0)
    {
      v23 = v25 < 0.0;
      goto LABEL_37;
    }
    goto LABEL_200;
  }
  if ((v22 & 0xFFFE000000000002) != 0)
  {
    v23 = v22 == 7;
    goto LABEL_37;
  }
  v63 = *(unsigned __int8 *)(v22 + 5);
  if (v63 == 3)
  {
    v66 = *(_DWORD *)(v22 + 8);
LABEL_195:
    v62 = v66 == 0;
    goto LABEL_196;
  }
  if (v63 == 2)
  {
    v64 = *(_QWORD *)(v22 + 8);
    if ((v64 & 1) != 0)
      v65 = (int *)(v22 + 16);
    else
      v65 = (int *)(v64 + 4);
    v66 = *v65;
    goto LABEL_195;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0xA) & 1) == 0)
  {
LABEL_200:
    v23 = 1;
    goto LABEL_37;
  }
  v62 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_196:
  v23 = !v62;
LABEL_37:
  if (*((_DWORD *)v24 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v24);
    if ((_DWORD)result)
      goto LABEL_125;
  }
LABEL_38:
  WTF::AtomStringImpl::addLiteral();
  v27 = JSC::JSObject::get(v9, (JSC::JSGlobalObject *)a2, (unint64_t)v68);
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
      WTF::StringImpl::destroy(v68, v26);
    else
      *(_DWORD *)v68 -= 2;
  }
  if (*((_DWORD *)v72 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v72);
    if ((_DWORD)result)
      goto LABEL_125;
  }
  if (v27 == 10)
  {
    LODWORD(v10) = 0;
    v71 = 0;
  }
  else
  {
    result = WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)a2, v27, &v71);
    if (HIDWORD(v71))
      goto LABEL_125;
    LODWORD(v10) = v71;
  }
  WTF::AtomStringImpl::addLiteral();
  v30 = JSC::JSObject::get(v9, (JSC::JSGlobalObject *)a2, (unint64_t)v68);
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
      WTF::StringImpl::destroy(v68, v29);
    else
      *(_DWORD *)v68 -= 2;
  }
  if (*((_DWORD *)v72 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v72);
    if ((result & 1) != 0)
      goto LABEL_125;
  }
  v67 = v23;
  if (v30 == 10)
  {
    LODWORD(v6) = 0;
    v70 = 0;
  }
  else
  {
    result = WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)a2, v30, &v70);
    if (HIDWORD(v70))
      goto LABEL_125;
    LODWORD(v6) = v70;
  }
  WTF::AtomStringImpl::addLiteral();
  v32 = (WTF::StringImpl *)JSC::JSObject::get(v9, (JSC::JSGlobalObject *)a2, (unint64_t)v68);
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
      WTF::StringImpl::destroy(v68, v31);
    else
      *(_DWORD *)v68 -= 2;
  }
  if (*((_DWORD *)v72 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v72);
    if ((result & 1) != 0)
      goto LABEL_125;
  }
  v11 = 0.0;
  if (v32 != (WTF::StringImpl *)10)
  {
    v68 = v32;
    v33 = a2[7];
    v74 = v33;
    if ((unint64_t)v32 >= 0xFFFE000000000000)
    {
      v34 = (double)(int)v32;
    }
    else if ((unint64_t)v32 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v68, (JSC::JSGlobalObject *)a2);
    }
    else
    {
      *(_QWORD *)&v34 = (char *)v32 - 0x2000000000000;
    }
    if (*((_DWORD *)v33 + 20))
    {
      v51 = v34;
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v33);
      v34 = v51;
      if ((result & 1) != 0)
        goto LABEL_125;
    }
    if ((*(_QWORD *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && v34 >= -3.40282347e38
      && v34 <= 3.40282347e38)
    {
      v11 = v34;
      goto LABEL_67;
    }
    result = JSC::throwTypeError();
LABEL_125:
    *(_DWORD *)(a3 + 48) = 1;
    return result;
  }
LABEL_67:
  WTF::AtomStringImpl::addLiteral();
  v35 = v68;
  v37 = JSC::JSObject::get(v9, (JSC::JSGlobalObject *)a2, (unint64_t)v68);
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v36);
    else
      *(_DWORD *)v35 -= 2;
  }
  if (*((_DWORD *)v72 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v72);
    if ((result & 1) != 0)
      goto LABEL_125;
  }
  v10 = v10;
  v6 = v6;
  if (v37 != 10)
  {
    v74 = (WTF::StringImpl *)v37;
    v39 = a2[7];
    if ((v37 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v37 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v74, (JSC::JSGlobalObject *)a2);
      goto LABEL_82;
    }
    v40 = *(WTF::StringImpl **)(v37 + 8);
    if ((v40 & 1) != 0)
    {
      v40 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v37, (JSC::JSGlobalObject *)a2);
      if (!v40)
        goto LABEL_81;
    }
    else if (!v40)
    {
LABEL_81:
      v73 = v40;
LABEL_82:
      if (*((_DWORD *)v39 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v39);
        v38 = v73;
        if ((_DWORD)result)
        {
          v69 = 1;
          v73 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              result = WTF::StringImpl::destroy(v38, v42);
            else
              *(_DWORD *)v38 -= 2;
          }
          v38 = 0;
          goto LABEL_91;
        }
      }
      else
      {
        v38 = v73;
      }
      v69 = 0;
      v68 = 0;
      goto LABEL_85;
    }
    *(_DWORD *)v40 += 2;
    goto LABEL_81;
  }
LABEL_72:
  v38 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v38 += 2;
  v69 = 0;
  v68 = 0;
  if (v5 == 2)
  {
LABEL_90:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v72, "utterance", 10, "SpeechSynthesisEventInit", 25, "SpeechSynthesisUtterance", 25);
    goto LABEL_91;
  }
LABEL_85:
  WTF::AtomStringImpl::addLiteral();
  v41 = v74;
  v43 = JSC::JSObject::get(v9, (JSC::JSGlobalObject *)a2, (unint64_t)v74);
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v42);
    else
      *(_DWORD *)v41 -= 2;
  }
  result = (uint64_t)v72;
  if (*((_DWORD *)v72 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v72);
    if ((result & 1) != 0)
      goto LABEL_91;
  }
  if (v43 == 10)
    goto LABEL_90;
  v74 = a2[7];
  if ((v43 & 0xFFFE000000000002) == 0)
  {
    v45 = *(unsigned int *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x4C);
    v46 = *(_DWORD *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x4C) != 0;
    v47 = (char **)(16 * v45);
    if ((_DWORD)v45)
      v48 = v47 == &WebCore::JSSpeechSynthesisUtterance::s_info;
    else
      v48 = 1;
    if (!v48)
    {
      do
      {
        v47 = (char **)v47[2];
        v46 = v47 != 0;
      }
      while (v47 != &WebCore::JSSpeechSynthesisUtterance::s_info && v47 != 0);
    }
    if (v46)
    {
      v44 = 0;
      v50 = *(_QWORD *)(v43 + 24);
      ++*(_DWORD *)(v50 - 8);
      *(_BYTE *)a3 = v8;
      *(_BYTE *)(a3 + 1) = v7;
      *(_BYTE *)(a3 + 2) = v67;
      *(_QWORD *)(a3 + 8) = v50 - 40;
      *(_QWORD *)(a3 + 16) = v10;
      *(_QWORD *)(a3 + 24) = v6;
      *(float *)(a3 + 32) = v11;
      *(_QWORD *)(a3 + 40) = v38;
      v38 = 0;
      goto LABEL_92;
    }
  }
  result = JSC::throwTypeError();
LABEL_91:
  v44 = 1;
LABEL_92:
  *(_DWORD *)(a3 + 48) = v44;
  if (v69 != -1)
    result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B060[v69])(&v74, &v68);
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      return WTF::StringImpl::destroy(v38, v42);
    else
      *(_DWORD *)v38 -= 2;
  }
  return result;
}

uint64_t WebCore::JSGestureEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSUIEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSUIEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSUIEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGestureEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGestureEventPrototype::create(WebCore::JSGestureEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<13u>(this, (uint64_t)&WebCore::JSGestureEvent::s_info, (uint64_t)&WebCore::JSGestureEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGestureEvent>,(WebCore::DOMConstructorID)0>(WebCore::JSEvent *this, JSC::VM *a2, const JSC::JSGlobalObject *a3)
{
  unint64_t *v3;
  unint64_t v4;
  uint64_t *v7;
  unint64_t v8;
  JSC::JSCell *Constructor;
  uint64_t Structure;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  WebCore::JSDOMGlobalObject *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char **v27;
  int v28;
  uint64_t v29;
  JSC::JSCell *v30;
  unint64_t v31;
  JSC::Structure *v32;
  JSC::JSCell *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;

  v3 = (unint64_t *)*((_QWORD *)a2 + 414);
  v4 = *v3;
  if (*v3)
    return v4;
  v7 = (uint64_t *)((char *)this + 40136);
  v8 = v3[496];
  if (!v8)
  {
    Constructor = (JSC::JSCell *)WebCore::JSEvent::getConstructor(this, a2, a3);
    Structure = WebCore::JSDOMConstructor<WebCore::JSUIEvent>::createStructure((uint64_t *)this, (int)a2, Constructor);
    v8 = WebCore::JSDOMConstructor<WebCore::JSUIEvent>::create((uint64_t)this, Structure, a2);
    *(_QWORD *)(*((_QWORD *)a2 + 414) + 3968) = v8;
    if (v8)
    {
      if (*((_DWORD *)this + 190) >= *((unsigned __int8 *)a2 + 7))
        JSC::Heap::writeBarrierSlowPath((WebCore::JSEvent *)((char *)this + 192), (const JSCell *)a2);
    }
  }
  LODWORD(v39) = 67099;
  if ((v8 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v8);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v7;
  if (*v7 < (unint64_t)v7[1])
    goto LABEL_8;
  SlowCase = v7[2];
  if ((SlowCase & 1) == 0)
  {
    v37 = *(_QWORD *)(SlowCase + 8) ^ v7[3];
    v7[1] = SlowCase + HIDWORD(v37);
    v7[2] = SlowCase + (int)v37;
LABEL_8:
    *v7 = SlowCase + 128;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_9:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v8, &v39, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGestureEvent>::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v13 = (_QWORD *)v7[165];
  v4 = v13[2846];
  if (v4 < v13[2847])
    goto LABEL_12;
  v4 = v13[2848];
  if ((v4 & 1) == 0)
  {
    v38 = *(_QWORD *)(v4 + 8) ^ v13[2849];
    v13[2847] = v4 + HIDWORD(v38);
    v13[2848] = v4 + (int)v38;
LABEL_12:
    v13[2846] = v4 + 48;
    goto LABEL_13;
  }
  JSC::sanitizeStackForVM();
  v4 = JSC::LocalAllocator::allocateSlowCase();
LABEL_13:
  *(_DWORD *)v4 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v14 = *(_QWORD *)(v7[227] + 1768);
  v39 = 0;
  v40 = v4;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v4, this, v14, 0xFFFE000000000000, 6, (uint64_t)&v39);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = JSC::JSString::create((uint64_t)this, &v39);
  v17 = v39;
  v39 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  *(_QWORD *)(v4 + 32) = v16;
  if (v16 && *((_DWORD *)this + 190) >= *(unsigned __int8 *)(v4 + 7))
    JSC::Heap::writeBarrierSlowPath((WebCore::JSEvent *)((char *)this + 192), (const JSCell *)v4);
  v18 = *(_QWORD *)(v7[227] + 1968);
  v39 = 0;
  v40 = v4;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v4, this, v18, v16, 6, (uint64_t)&v39);
  v20 = *(_QWORD *)(v7[227] + 2160);
  v21 = *((_QWORD *)a2 + 412);
  if (v21)
  {
    v22 = *(_DWORD *)(v21 - 8);
    v23 = ((unint64_t)&WebCore::JSGestureEvent::s_info + ~((_QWORD)&WebCore::JSGestureEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSGestureEvent::s_info + ~((_QWORD)&WebCore::JSGestureEvent::s_info << 32)) >> 22);
    v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
    v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
    v26 = v22 & ((v25 >> 31) ^ v25);
    v27 = *(char ***)(v21 + 16 * v26);
    if (v27 == &WebCore::JSGestureEvent::s_info)
    {
LABEL_22:
      v29 = *(_QWORD *)(v21 + 16 * v26 + 8);
      if (v29)
        goto LABEL_24;
    }
    else
    {
      v28 = 1;
      while (v27)
      {
        v26 = ((_DWORD)v26 + v28) & v22;
        v27 = *(char ***)(v21 + 16 * v26);
        ++v28;
        if (v27 == &WebCore::JSGestureEvent::s_info)
          goto LABEL_22;
      }
    }
  }
  v30 = (JSC::JSCell *)WebCore::JSUIEvent::prototype(this, a2, v19);
  v31 = WebCore::JSGestureEventPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v30);
  *(_DWORD *)(v31 + 16) |= 0x80000u;
  v33 = (JSC::JSCell *)WebCore::JSGestureEventPrototype::create(this, a2, v31, v32);
  v34 = WebCore::JSGestureEvent::createStructure((uint64_t *)this, (uint64_t)a2, v33);
  v29 = WebCore::cacheDOMStructure((JSCell *)a2, v34, (uint64_t)&WebCore::JSGestureEvent::s_info);
LABEL_24:
  v35 = *(_QWORD *)(v29 + 48);
  v39 = 0;
  v40 = v4;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v4, this, v20, v35, 14, (uint64_t)&v39);
  **((_QWORD **)a2 + 414) = v4;
  if (*((_DWORD *)this + 190) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((WebCore::JSEvent *)((char *)this + 192), (const JSCell *)a2);
  return v4;
}

unint64_t WebCore::jsGestureEventConstructor(uint64_t a1, unint64_t a2, const JSC::JSGlobalObject *a3)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGestureEventPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGestureEvent>,(WebCore::DOMConstructorID)0>(*(WebCore::JSEvent **)(a1 + 56), *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), a3);
  }
}

uint64_t WebCore::jsGestureEvent_target(WebCore::DOMWrapperWorld **a1, uint64_t a2, uint64_t a3, WebCore::EventTarget *a4)
{
  WebCore::JSDOMGlobalObject *v4;

  v4 = *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 48);
  if (v4)
    return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v4, a4);
  else
    return 2;
}

unint64_t WebCore::jsGestureEvent_scale(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 156);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

unint64_t WebCore::jsGestureEvent_rotation(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 160);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

unint64_t WebCore::jsGestureEvent_screenX(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(_QWORD *)(a2 + 24) + 88) | 0xFFFE000000000000;
}

unint64_t WebCore::jsGestureEvent_screenY(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(_QWORD *)(a2 + 24) + 92) | 0xFFFE000000000000;
}

unint64_t WebCore::jsGestureEvent_clientX(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(_QWORD *)(a2 + 24) + 96) / 64) | 0xFFFE000000000000;
}

unint64_t WebCore::jsGestureEvent_clientY(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(_QWORD *)(a2 + 24) + 100) / 64) | 0xFFFE000000000000;
}

uint64_t WebCore::jsGestureEvent_ctrlKey(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 84) & 2) != 0)
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsGestureEvent_shiftKey(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 84) & 8) != 0)
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsGestureEvent_altKey(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 84) & 1) != 0)
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsGestureEvent_metaKey(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 84) & 4) != 0)
    return 7;
  else
    return 6;
}

uint64_t WebCore::JSGestureEvent::subspaceForImpl(WebCore::JSGestureEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(uint64_t **)(v2 + 23536);
  v4 = *v3;
  if (*v3)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(uint64_t **)(v6 + 2824);
  if (!*v8)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *v8;
    *v8 = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *v3;
  *v3 = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSTouch>::construct(WebCore *a1, uint64_t a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;

  v8 = *(int *)(a2 + 32) - 1;
  if (v8 >= 8)
    v8 = 8;
  switch(v8)
  {
    case 0uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
      return WebCore::constructJSTouch2(a1, (JSC::JSGlobalObject *)a2, a3, a4, a5, a6, a7, a8);
    case 1uLL:
      v10 = *(_QWORD *)(a2 + 48);
      if (v10 == 10)
        return WebCore::constructJSTouch2(a1, (JSC::JSGlobalObject *)a2, a3, a4, a5, a6, a7, a8);
      if ((v10 & 0xFFFFFFFFFFFFFFF7) == 2)
        return WebCore::constructJSTouch1(a1, (JSC::JSGlobalObject *)a2, a3);
      if ((v10 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v10 + 5) < 0x17u)
        return (JSCell *)JSC::throwTypeError();
      if (&WebCore::JSWindowProxy::s_info == (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
        return WebCore::constructJSTouch2(a1, (JSC::JSGlobalObject *)a2, a3, a4, a5, a6, a7, a8);
      return WebCore::constructJSTouch1(a1, (JSC::JSGlobalObject *)a2, a3);
    default:
      return (JSCell *)JSC::throwTypeError();
  }
}

JSCell *WebCore::constructJSTouch2(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  JSCell *v25;
  uint64_t v26;
  char **v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF *v33;
  WTF *v34;
  JSC::VM *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  WTF *v42;
  JSC::VM *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  WTF *v50;
  JSC::VM *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  int v57;
  WTF *v58;
  JSC::VM *v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  double v66;
  WTF *v67;
  WTF *v68;
  JSC::VM *v69;
  JSC::VM *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  WTF::StringImpl *v76;
  WTF *v77;
  WTF::StringImpl *v78;
  WTF *v79;
  uint64_t *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  char **v85;
  double v88;
  int v89;
  int v90;
  int v91;
  int v92;
  JSC::VM *v93;
  WTF *v94;
  WTF *v95;
  WTF *v96[2];

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v11 = *((_QWORD *)a2 + 3);
  v12 = *((_DWORD *)a2 + 8);
  if (v12 == 1)
  {
    v16 = 0;
    v14 = 0;
    v93 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_8:
    v94 = v14;
    v96[0] = (WTF *)10;
LABEL_9:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v96, this);
    v18 = v17;
    goto LABEL_10;
  }
  v13 = *((_QWORD *)a2 + 6);
  if ((v13 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v14 = 0;
  }
  else
  {
    v96[0] = *((WTF **)this + 7);
    if ((v13 & 0xFFFE000000000002) != 0
      || *(unsigned __int8 *)(v13 + 5) < 0x17u
      || &WebCore::JSWindowProxy::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C))
      || (v29 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 3408),
          !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 104))(v29))
      || (v14 = *(WTF **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 104))(v29) + 112)) == 0)
    {
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v96, 0, "view", 5, "Touch", 6, a8, 0, 0, "WindowProxy", 12);
      return 0;
    }
    v12 = *((_DWORD *)a2 + 8);
  }
  v93 = v10;
  if ((unint64_t)(v12 - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v16 = 0;
    v10 = (JSC::VM *)*((_QWORD *)this + 7);
    goto LABEL_8;
  }
  v15 = *((_QWORD *)a2 + 7);
  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v15 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v16 = 0;
    goto LABEL_47;
  }
  v96[0] = *((WTF **)this + 7);
  if ((v15 & 0xFFFE000000000002) != 0)
  {
LABEL_26:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v96, 1, "target", 7, "Touch", 6, a8, 0, 0, "EventTarget", 12);
    return 0;
  }
  v26 = *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C);
  v27 = (char **)(16 * v26);
  if ((char **)(16 * v26) == &WebCore::JSWindowProxy::s_info)
  {
    v30 = (uint64_t *)(*(_QWORD *)(v15 + 16) + 3408);
    goto LABEL_46;
  }
  if ((_DWORD)v26)
    v28 = v27 == &WebCore::JSDOMWindow::s_info;
  else
    v28 = 1;
  if (v28)
  {
    if (!(_DWORD)v26)
      goto LABEL_26;
    goto LABEL_45;
  }
  v31 = 16 * v26;
  do
    v31 = *(_QWORD *)(v31 + 16);
  while ((char **)v31 != &WebCore::JSDOMWindow::s_info && v31 != 0);
  if (v31)
  {
LABEL_45:
    v30 = (uint64_t *)(v15 + 3408);
    goto LABEL_46;
  }
  if (v27 == &WebCore::JSWorkerGlobalScope::s_info)
    goto LABEL_154;
  v85 = v27;
  do
    v85 = (char **)v85[2];
  while (v85 != &WebCore::JSWorkerGlobalScope::s_info && v85 != 0);
  if (v85)
  {
LABEL_154:
    v16 = *(_QWORD *)(v15 + 3400) + 320;
    goto LABEL_47;
  }
  if (v27 != &WebCore::JSEventTarget::s_info)
  {
    do
      v27 = (char **)v27[2];
    while (v27 != &WebCore::JSEventTarget::s_info && v27 != 0);
    if (!v27)
      goto LABEL_26;
  }
  v30 = (uint64_t *)(v15 + 24);
LABEL_46:
  v16 = *v30;
  if (!*v30)
    goto LABEL_26;
LABEL_47:
  if ((unint64_t)(v12 - 4) >= 0xFFFFFFFFFFFFFFFDLL)
    goto LABEL_8;
  v94 = v14;
  v33 = (WTF *)*((_QWORD *)a2 + 8);
  v96[0] = v33;
  if ((unint64_t)v33 >= 0xFFFE000000000000)
  {
    v24 = (int)v33;
    goto LABEL_50;
  }
  v18 = (unint64_t)v33 - 0x2000000000000;
  if ((unint64_t)v33 - 0x2000000000000 >= 0xFFFC000000000000)
    goto LABEL_9;
LABEL_10:
  v19 = (v18 >> 52) & 0x7FF;
  v20 = v19 - 1023;
  v21 = v18 >> (51 - (v18 >> 52));
  if (v19 > 0x433)
    LODWORD(v21) = v18 << ((v18 >> 52) - 51);
  if (v19 >= 0x41F)
    v22 = v21;
  else
    v22 = (((1 << ((v18 >> 52) + 1)) - 1) & v21) + (1 << ((v18 >> 52) + 1));
  if ((v18 & 0x8000000000000000) == 0)
    v23 = v22;
  else
    v23 = -v22;
  if (v20 <= 0x53)
    v24 = v23;
  else
    v24 = 0;
LABEL_50:
  if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10))
    return 0;
  if ((unint64_t)(*((int *)a2 + 8) - 5) >= 0xFFFFFFFFFFFFFFFCLL)
  {
    v96[0] = (WTF *)10;
    v35 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_55:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v96, this);
    v37 = v36;
    goto LABEL_56;
  }
  v34 = (WTF *)*((_QWORD *)a2 + 9);
  v96[0] = v34;
  v35 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v34 >= 0xFFFE000000000000)
  {
    v92 = (int)v34;
    goto LABEL_67;
  }
  v37 = (unint64_t)v34 - 0x2000000000000;
  if ((unint64_t)v34 - 0x2000000000000 >= 0xFFFC000000000000)
    goto LABEL_55;
LABEL_56:
  v38 = (v37 >> 52) & 0x7FF;
  if ((v38 - 1023) <= 0x53)
  {
    v39 = v37 >> (51 - (v37 >> 52));
    if (v38 > 0x433)
      LODWORD(v39) = v37 << ((v37 >> 52) - 51);
    if (v38 >= 0x41F)
      v40 = v39;
    else
      v40 = (((1 << ((v37 >> 52) + 1)) - 1) & v39) + (1 << ((v37 >> 52) + 1));
    if ((v37 & 0x8000000000000000) == 0)
      v41 = v40;
    else
      v41 = -v40;
    v92 = v41;
  }
  else
  {
    v92 = 0;
  }
LABEL_67:
  if (*((_DWORD *)v35 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v35))
    return 0;
  v91 = v24;
  if ((unint64_t)(*((int *)a2 + 8) - 6) >= 0xFFFFFFFFFFFFFFFBLL)
  {
    v96[0] = (WTF *)10;
    v43 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_72:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v96, this);
    v45 = v44;
    goto LABEL_73;
  }
  v42 = (WTF *)*((_QWORD *)a2 + 10);
  v96[0] = v42;
  v43 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v42 >= 0xFFFE000000000000)
  {
    v90 = (int)v42;
    goto LABEL_84;
  }
  v45 = (unint64_t)v42 - 0x2000000000000;
  if ((unint64_t)v42 - 0x2000000000000 >= 0xFFFC000000000000)
    goto LABEL_72;
LABEL_73:
  v46 = (v45 >> 52) & 0x7FF;
  if ((v46 - 1023) <= 0x53)
  {
    v47 = v45 >> (51 - (v45 >> 52));
    if (v46 > 0x433)
      LODWORD(v47) = v45 << ((v45 >> 52) - 51);
    if (v46 >= 0x41F)
      v48 = v47;
    else
      v48 = (((1 << ((v45 >> 52) + 1)) - 1) & v47) + (1 << ((v45 >> 52) + 1));
    if ((v45 & 0x8000000000000000) == 0)
      v49 = v48;
    else
      v49 = -v48;
    v90 = v49;
  }
  else
  {
    v90 = 0;
  }
LABEL_84:
  if (*((_DWORD *)v43 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v43))
    return 0;
  if ((unint64_t)(*((int *)a2 + 8) - 7) >= 0xFFFFFFFFFFFFFFFALL)
  {
    v96[0] = (WTF *)10;
    v51 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_89:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v96, this);
    v53 = v52;
    goto LABEL_90;
  }
  v50 = (WTF *)*((_QWORD *)a2 + 11);
  v96[0] = v50;
  v51 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v50 >= 0xFFFE000000000000)
  {
    v89 = (int)v50;
    goto LABEL_101;
  }
  v53 = (unint64_t)v50 - 0x2000000000000;
  if ((unint64_t)v50 - 0x2000000000000 >= 0xFFFC000000000000)
    goto LABEL_89;
LABEL_90:
  v54 = (v53 >> 52) & 0x7FF;
  if ((v54 - 1023) <= 0x53)
  {
    v55 = v53 >> (51 - (v53 >> 52));
    if (v54 > 0x433)
      LODWORD(v55) = v53 << ((v53 >> 52) - 51);
    if (v54 >= 0x41F)
      v56 = v55;
    else
      v56 = (((1 << ((v53 >> 52) + 1)) - 1) & v55) + (1 << ((v53 >> 52) + 1));
    if ((v53 & 0x8000000000000000) == 0)
      v57 = v56;
    else
      v57 = -v56;
    v89 = v57;
  }
  else
  {
    v89 = 0;
  }
LABEL_101:
  if (*((_DWORD *)v51 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v51))
    return 0;
  if ((unint64_t)(*((int *)a2 + 8) - 8) >= 0xFFFFFFFFFFFFFFF9)
  {
    v96[0] = (WTF *)10;
    v59 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_106:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v96, this);
    v62 = v61;
    goto LABEL_107;
  }
  v58 = (WTF *)*((_QWORD *)a2 + 12);
  v96[0] = v58;
  v59 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v58 >= 0xFFFE000000000000)
  {
    v60 = (int)v58;
    goto LABEL_117;
  }
  v62 = (unint64_t)v58 - 0x2000000000000;
  if ((unint64_t)v58 - 0x2000000000000 >= 0xFFFC000000000000)
    goto LABEL_106;
LABEL_107:
  v63 = (v62 >> 52) & 0x7FF;
  if ((v63 - 1023) <= 0x53)
  {
    v64 = v62 >> (51 - (v62 >> 52));
    if (v63 > 0x433)
      LODWORD(v64) = v62 << ((v62 >> 52) - 51);
    if (v63 >= 0x41F)
      v65 = v64;
    else
      v65 = (((1 << ((v62 >> 52) + 1)) - 1) & v64) + (1 << ((v62 >> 52) + 1));
    if ((v62 & 0x8000000000000000) == 0)
      v60 = v65;
    else
      v60 = -v65;
  }
  else
  {
    v60 = 0;
  }
LABEL_117:
  if (*((_DWORD *)v59 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v59))
    return 0;
  v66 = 0.0;
  if ((unint64_t)(*((int *)a2 + 8) - 9) > 0xFFFFFFFFFFFFFFF7)
    goto LABEL_127;
  v67 = (WTF *)*((_QWORD *)a2 + 13);
  v68 = v94;
  if (v67 != (WTF *)10)
  {
    v70 = (JSC::VM *)*((_QWORD *)this + 7);
    v95 = v70;
    v96[0] = v67;
    if ((unint64_t)v67 >= 0xFFFE000000000000)
    {
      v66 = (double)(int)v67;
    }
    else if ((unint64_t)v67 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v96, this);
      v66 = v88;
    }
    else
    {
      *(_QWORD *)&v66 = (char *)v67 - 0x2000000000000;
    }
    if (*((_DWORD *)v70 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v70) & 1) != 0)
      return 0;
    if ((*(_QWORD *)&v66 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      JSC::throwTypeError();
      return 0;
    }
LABEL_127:
    v69 = v93;
    v68 = v94;
    goto LABEL_128;
  }
  v69 = v93;
LABEL_128:
  if (v68)
    ++*(_DWORD *)v68;
  v95 = v68;
  v71 = WTF::fastMalloc((WTF *)0x88);
  v75 = (WTF *)WebCore::Touch::Touch(v71, (WebCore::WindowProxy *)&v95, v16, v91, 0, (double)v92, (double)v90, (double)v89, (double)v60, 0.0, 0.0, 0.0, v66, v72, v73, v74, 0, 0);
  v77 = v95;
  v95 = 0;
  v96[0] = v75;
  if (v77)
  {
    if (*(_DWORD *)v77 == 1)
    {
      v81 = (uint64_t *)*((_QWORD *)v77 + 2);
      *((_QWORD *)v77 + 2) = 0;
      if (v81)
      {
        if (*v81)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v81, v76);
        WTF::fastFree((WTF *)v81, v76);
      }
      v82 = (unsigned int *)*((_QWORD *)v77 + 1);
      *((_QWORD *)v77 + 1) = 0;
      if (v82)
      {
        do
        {
          v83 = __ldaxr(v82);
          v84 = v83 - 1;
        }
        while (__stlxr(v84, v82));
        if (!v84)
        {
          atomic_store(1u, v82);
          WTF::fastFree((WTF *)v82, v76);
        }
      }
      WTF::fastFree(v77, v76);
    }
    else
    {
      --*(_DWORD *)v77;
    }
  }
  v25 = (JSCell *)WebCore::createWrapper<WebCore::Touch,WebCore::Touch>(*(_QWORD *)(v11 + 40), v96);
  WebCore::setSubclassStructureIfNeeded<WebCore::Touch>(this, (uint64_t)a2, v25);
  if (*((_DWORD *)v69 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v69) & 1) != 0)
    v25 = 0;
  v79 = v96[0];
  v96[0] = 0;
  if (v79)
    WTF::RefCounted<WebCore::Touch>::deref(v79, v78);
  return v25;
}

JSCell *WebCore::constructJSTouch1(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  JSC::JSCell *v6;
  uint64_t Object;
  JSC::Structure *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  double v12;
  JSC::VM *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF *v16;
  double v17;
  JSC::VM *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF *v21;
  double v22;
  JSC::VM *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF *v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  JSCell *v32;
  JSC::VM *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF *v37;
  double v38;
  JSC::VM *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF *v42;
  double v43;
  JSC::VM *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF *v47;
  double v48;
  JSC::VM *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF *v52;
  double v53;
  JSC::VM *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF *v57;
  double v58;
  JSC::VM *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF *v62;
  double v63;
  JSC::VM *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF *v67;
  double v68;
  JSC::VM *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF *v85;
  uint64_t v86;
  double v89;
  double v90;
  double v91;
  JSC::VM *v92;
  double v93;
  JSC::VM *v94;
  double v95;
  JSC::VM *v96;
  double v97;
  JSC::VM *v98;
  double v99;
  JSC::VM *v100;
  double v101;
  JSC::VM *v102;
  double v103;
  JSC::VM *v104;
  double v105;
  JSC::VM *v106;
  unint64_t v107;
  double v108;
  double v109;
  JSC::VM *v110;
  JSC::VM *v111;
  WTF *v112;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v5 = *((_QWORD *)a2 + 3);
  v6 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
  v110 = v4;
  if (((unint64_t)v6 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_39:
    v27 = "identifier";
    v28 = "long";
    v29 = (int)this;
    v30 = 11;
    v31 = 5;
LABEL_40:
    WebCore::throwRequiredMemberTypeError(v29, (int)&v110, v27, v30, "TouchInit", 10, v28, v31);
    return 0;
  }
  if (((unint64_t)v6 & 0xFFFE000000000002) != 0)
    goto LABEL_122;
  Object = JSC::JSCell::getObject(v6);
  if (!Object)
    goto LABEL_122;
  v9 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v11 = (WTF *)JSC::JSObject::get(v9, this, (unint64_t)v112);
  if (v112)
  {
    if (*(_DWORD *)v112 == 2)
      WTF::StringImpl::destroy(v112, v10);
    else
      *(_DWORD *)v112 -= 2;
  }
  if (*((_DWORD *)v110 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v110) & 1) != 0)
    return 0;
  v12 = 0.0;
  if (v11 != (WTF *)10)
  {
    v13 = (JSC::VM *)*((_QWORD *)this + 7);
    v111 = v13;
    v112 = v11;
    if ((unint64_t)v11 >= 0xFFFE000000000000)
    {
      v12 = (double)(int)v11;
    }
    else if ((unint64_t)v11 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v112, this);
      v12 = v89;
    }
    else
    {
      *(_QWORD *)&v12 = (char *)v11 - 0x2000000000000;
    }
    if (*((_DWORD *)v13 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) != 0)
      return 0;
    if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      goto LABEL_195;
  }
  WTF::AtomStringImpl::addLiteral();
  v14 = v112;
  v16 = (WTF *)JSC::JSObject::get(v9, this, (unint64_t)v112);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (*((_DWORD *)v110 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v110) & 1) != 0)
    return 0;
  v17 = 0.0;
  if (v16 != (WTF *)10)
  {
    v18 = (JSC::VM *)*((_QWORD *)this + 7);
    v111 = v18;
    v112 = v16;
    if ((unint64_t)v16 >= 0xFFFE000000000000)
    {
      v17 = (double)(int)v16;
    }
    else if ((unint64_t)v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v112, this);
      v17 = v90;
    }
    else
    {
      *(_QWORD *)&v17 = (char *)v16 - 0x2000000000000;
    }
    if (*((_DWORD *)v18 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
      return 0;
    if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      goto LABEL_195;
  }
  WTF::AtomStringImpl::addLiteral();
  v19 = v112;
  v21 = (WTF *)JSC::JSObject::get(v9, this, (unint64_t)v112);
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v20);
    else
      *(_DWORD *)v19 -= 2;
  }
  if (*((_DWORD *)v110 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v110) & 1) != 0)
    return 0;
  v22 = 0.0;
  if (v21 != (WTF *)10)
  {
    v23 = (JSC::VM *)*((_QWORD *)this + 7);
    v111 = v23;
    v112 = v21;
    if ((unint64_t)v21 >= 0xFFFE000000000000)
    {
      v22 = (double)(int)v21;
    }
    else if ((unint64_t)v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v112, this);
      v22 = v91;
    }
    else
    {
      *(_QWORD *)&v22 = (char *)v21 - 0x2000000000000;
    }
    if (*((_DWORD *)v23 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v23) & 1) != 0)
      return 0;
    if ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      goto LABEL_195;
  }
  WTF::AtomStringImpl::addLiteral();
  v24 = v112;
  v26 = (WTF *)JSC::JSObject::get(v9, this, (unint64_t)v112);
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v25);
    else
      *(_DWORD *)v24 -= 2;
  }
  if (*((_DWORD *)v110 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v110) & 1) != 0)
    return 0;
  if (v26 == (WTF *)10)
    goto LABEL_39;
  v112 = v26;
  v34 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v26 < 0xFFFE000000000000)
  {
    v75 = (unint64_t)v26 - 0x2000000000000;
    if ((unint64_t)v26 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v106 = (JSC::VM *)*((_QWORD *)this + 7);
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v112, this);
      v34 = v106;
      v75 = v107;
    }
    v76 = (v75 >> 52) & 0x7FF;
    if ((v76 - 1023) <= 0x53)
    {
      v78 = v75 >> (51 - (v75 >> 52));
      if (v76 > 0x433)
        LODWORD(v78) = v75 << ((v75 >> 52) - 51);
      if (v76 >= 0x41F)
        v79 = v78;
      else
        v79 = (((1 << ((v75 >> 52) + 1)) - 1) & v78) + (1 << ((v75 >> 52) + 1));
      if ((v75 & 0x8000000000000000) == 0)
        LODWORD(v26) = v79;
      else
        LODWORD(v26) = -v79;
    }
    else
    {
      LODWORD(v26) = 0;
    }
  }
  if (*((_DWORD *)v34 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v34))
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v35 = v112;
  v37 = (WTF *)JSC::JSObject::get(v9, this, (unint64_t)v112);
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v36);
    else
      *(_DWORD *)v35 -= 2;
  }
  if (*((_DWORD *)v110 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v110) & 1) != 0)
    return 0;
  v38 = 0.0;
  if (v37 != (WTF *)10)
  {
    v39 = (JSC::VM *)*((_QWORD *)this + 7);
    v111 = v39;
    v112 = v37;
    if ((unint64_t)v37 >= 0xFFFE000000000000)
    {
      v38 = (double)(int)v37;
    }
    else if ((unint64_t)v37 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v92 = v39;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v112, this);
      v39 = v92;
      v38 = v93;
    }
    else
    {
      *(_QWORD *)&v38 = (char *)v37 - 0x2000000000000;
    }
    if (*((_DWORD *)v39 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v39) & 1) != 0)
      return 0;
    if ((*(_QWORD *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      goto LABEL_195;
  }
  WTF::AtomStringImpl::addLiteral();
  v40 = v112;
  v42 = (WTF *)JSC::JSObject::get(v9, this, (unint64_t)v112);
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v41);
    else
      *(_DWORD *)v40 -= 2;
  }
  v109 = v38;
  if (*((_DWORD *)v110 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v110) & 1) != 0)
    return 0;
  v43 = 0.0;
  if (v42 != (WTF *)10)
  {
    v44 = (JSC::VM *)*((_QWORD *)this + 7);
    v111 = v44;
    v112 = v42;
    if ((unint64_t)v42 >= 0xFFFE000000000000)
    {
      v43 = (double)(int)v42;
    }
    else if ((unint64_t)v42 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v94 = v44;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v112, this);
      v44 = v94;
      v43 = v95;
    }
    else
    {
      *(_QWORD *)&v43 = (char *)v42 - 0x2000000000000;
    }
    if (*((_DWORD *)v44 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v44) & 1) != 0)
      return 0;
    if ((*(_QWORD *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      goto LABEL_195;
  }
  WTF::AtomStringImpl::addLiteral();
  v45 = v112;
  v47 = (WTF *)JSC::JSObject::get(v9, this, (unint64_t)v112);
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v46);
    else
      *(_DWORD *)v45 -= 2;
  }
  v108 = v43;
  if (*((_DWORD *)v110 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v110) & 1) != 0)
    return 0;
  v48 = 0.0;
  if (v47 != (WTF *)10)
  {
    v49 = (JSC::VM *)*((_QWORD *)this + 7);
    v111 = v49;
    v112 = v47;
    if ((unint64_t)v47 >= 0xFFFE000000000000)
    {
      v48 = (double)(int)v47;
    }
    else if ((unint64_t)v47 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v96 = v49;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v112, this);
      v49 = v96;
      v48 = v97;
    }
    else
    {
      *(_QWORD *)&v48 = (char *)v47 - 0x2000000000000;
    }
    if (*((_DWORD *)v49 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v49) & 1) != 0)
      return 0;
    if ((*(_QWORD *)&v48 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      goto LABEL_195;
  }
  WTF::AtomStringImpl::addLiteral();
  v50 = v112;
  v52 = (WTF *)JSC::JSObject::get(v9, this, (unint64_t)v112);
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v51);
    else
      *(_DWORD *)v50 -= 2;
  }
  if (*((_DWORD *)v110 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v110) & 1) != 0)
    return 0;
  v53 = 0.0;
  if (v52 != (WTF *)10)
  {
    v54 = (JSC::VM *)*((_QWORD *)this + 7);
    v111 = v54;
    v112 = v52;
    if ((unint64_t)v52 >= 0xFFFE000000000000)
    {
      v53 = (double)(int)v52;
    }
    else if ((unint64_t)v52 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v98 = v54;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v112, this);
      v54 = v98;
      v53 = v99;
    }
    else
    {
      *(_QWORD *)&v53 = (char *)v52 - 0x2000000000000;
    }
    if (*((_DWORD *)v54 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v54) & 1) != 0)
      return 0;
    if ((*(_QWORD *)&v53 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      goto LABEL_195;
  }
  WTF::AtomStringImpl::addLiteral();
  v55 = v112;
  v57 = (WTF *)JSC::JSObject::get(v9, this, (unint64_t)v112);
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v56);
    else
      *(_DWORD *)v55 -= 2;
  }
  if (*((_DWORD *)v110 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v110) & 1) != 0)
    return 0;
  v58 = 0.0;
  if (v57 != (WTF *)10)
  {
    v59 = (JSC::VM *)*((_QWORD *)this + 7);
    v111 = v59;
    v112 = v57;
    if ((unint64_t)v57 >= 0xFFFE000000000000)
    {
      v58 = (double)(int)v57;
    }
    else if ((unint64_t)v57 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v100 = v59;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v112, this);
      v59 = v100;
      v58 = v101;
    }
    else
    {
      *(_QWORD *)&v58 = (char *)v57 - 0x2000000000000;
    }
    if (*((_DWORD *)v59 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v59) & 1) != 0)
      return 0;
    if ((*(_QWORD *)&v58 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      goto LABEL_195;
  }
  WTF::AtomStringImpl::addLiteral();
  v60 = v112;
  v62 = (WTF *)JSC::JSObject::get(v9, this, (unint64_t)v112);
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy(v60, v61);
    else
      *(_DWORD *)v60 -= 2;
  }
  if (*((_DWORD *)v110 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v110) & 1) != 0)
    return 0;
  v63 = 0.0;
  if (v62 != (WTF *)10)
  {
    v64 = (JSC::VM *)*((_QWORD *)this + 7);
    v111 = v64;
    v112 = v62;
    if ((unint64_t)v62 >= 0xFFFE000000000000)
    {
      v63 = (double)(int)v62;
    }
    else if ((unint64_t)v62 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v102 = v64;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v112, this);
      v64 = v102;
      v63 = v103;
    }
    else
    {
      *(_QWORD *)&v63 = (char *)v62 - 0x2000000000000;
    }
    if (*((_DWORD *)v64 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v64) & 1) != 0)
      return 0;
    if ((*(_QWORD *)&v63 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      goto LABEL_195;
  }
  WTF::AtomStringImpl::addLiteral();
  v65 = v112;
  v67 = (WTF *)JSC::JSObject::get(v9, this, (unint64_t)v112);
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, v66);
    else
      *(_DWORD *)v65 -= 2;
  }
  if (*((_DWORD *)v110 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v110) & 1) != 0)
    return 0;
  v68 = 0.0;
  if (v67 != (WTF *)10)
  {
    v69 = (JSC::VM *)*((_QWORD *)this + 7);
    v111 = v69;
    v112 = v67;
    if ((unint64_t)v67 >= 0xFFFE000000000000)
    {
      v68 = (double)(int)v67;
    }
    else if ((unint64_t)v67 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v104 = v69;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v112, this);
      v69 = v104;
      v68 = v105;
    }
    else
    {
      *(_QWORD *)&v68 = (char *)v67 - 0x2000000000000;
    }
    if (*((_DWORD *)v69 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v69) & 1) != 0)
      return 0;
    if ((*(_QWORD *)&v68 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
LABEL_195:
      JSC::throwTypeError();
      return 0;
    }
  }
  WTF::AtomStringImpl::addLiteral();
  v70 = v112;
  v72 = JSC::JSObject::get(v9, this, (unint64_t)v112);
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
      WTF::StringImpl::destroy(v70, v71);
    else
      *(_DWORD *)v70 -= 2;
  }
  if (*((_DWORD *)v110 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v110) & 1) != 0)
    return 0;
  if (v72 == 10)
  {
    v27 = "target";
    v28 = "EventTarget";
    v29 = (int)this;
    v30 = 7;
    v31 = 12;
    goto LABEL_40;
  }
  v112 = (WTF *)*((_QWORD *)this + 7);
  if ((v72 & 0xFFFE000000000002) != 0)
  {
LABEL_122:
    JSC::throwTypeError();
    return 0;
  }
  v73 = *(unsigned int *)(16 * (*(_DWORD *)v72 & 0xFFFFFFFE) + 0x4C);
  v74 = 16 * v73;
  if ((char **)(16 * v73) == &WebCore::JSWindowProxy::s_info)
  {
    v77 = (uint64_t *)(*(_QWORD *)(v72 + 16) + 3408);
    goto LABEL_161;
  }
  if (!(_DWORD)v73 || (char **)v74 == &WebCore::JSDOMWindow::s_info)
  {
    if (!(_DWORD)v73)
      goto LABEL_122;
    goto LABEL_160;
  }
  v80 = 16 * v73;
  do
    v80 = *(_QWORD *)(v80 + 16);
  while ((char **)v80 != &WebCore::JSDOMWindow::s_info && v80 != 0);
  if (v80)
  {
LABEL_160:
    v77 = (uint64_t *)(v72 + 3408);
    goto LABEL_161;
  }
  if ((char **)v74 == &WebCore::JSWorkerGlobalScope::s_info)
    goto LABEL_178;
  v86 = v74;
  do
    v86 = *(_QWORD *)(v86 + 16);
  while ((char **)v86 != &WebCore::JSWorkerGlobalScope::s_info && v86 != 0);
  if (v86)
  {
LABEL_178:
    v82 = *(_QWORD *)(v72 + 3400) + 320;
    goto LABEL_162;
  }
  if ((char **)v74 != &WebCore::JSEventTarget::s_info)
  {
    do
      v74 = *(_QWORD *)(v74 + 16);
    while ((char **)v74 != &WebCore::JSEventTarget::s_info && v74 != 0);
    if (!v74)
      goto LABEL_122;
  }
  v77 = (uint64_t *)(v72 + 24);
LABEL_161:
  v82 = *v77;
  if (!*v77)
    goto LABEL_122;
LABEL_162:
  v83 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)v83 = 1;
  *(_QWORD *)(v83 + 8) = 0;
  if ((*(_BYTE *)(v82 + 22) & 2) != 0)
    *(_DWORD *)(v82 + 24) += 2;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 88))(v82);
  *(_QWORD *)(v83 + 16) = v82;
  *(_DWORD *)(v83 + 24) = (_DWORD)v26;
  *(double *)(v83 + 32) = v12;
  *(double *)(v83 + 40) = v17;
  *(double *)(v83 + 48) = v109;
  *(double *)(v83 + 56) = v108;
  *(double *)(v83 + 64) = v63;
  *(double *)(v83 + 72) = v68;
  *(double *)(v83 + 80) = v48;
  *(double *)(v83 + 88) = v53;
  *(double *)(v83 + 96) = v58;
  *(double *)(v83 + 104) = v22;
  *(_QWORD *)(v83 + 112) = 0;
  *(_QWORD *)(v83 + 120) = 0;
  *(_DWORD *)(v83 + 128) = 0;
  v112 = (WTF *)v83;
  v32 = (JSCell *)WebCore::createWrapper<WebCore::Touch,WebCore::Touch>(*(_QWORD *)(v5 + 40), &v112);
  WebCore::setSubclassStructureIfNeeded<WebCore::Touch>(this, (uint64_t)a2, v32);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    v32 = 0;
  v85 = v112;
  v112 = 0;
  if (v85)
    WTF::RefCounted<WebCore::Touch>::deref(v85, v84);
  return v32;
}

WTF *WebCore::JSTouch::destroy(WebCore::JSTouch *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
    return WTF::RefCounted<WebCore::Touch>::deref(result, a2);
  return result;
}

uint64_t WebCore::JSTouch::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSTouchPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSTouchPrototype::create(WebCore::JSTouchPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<16u>(this, (uint64_t)&WebCore::JSTouch::s_info, (uint64_t)&WebCore::JSTouchPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTouch>,(WebCore::DOMConstructorID)1>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 8);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSTouch>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSTouch::s_info + ~((_QWORD)&WebCore::JSTouch::s_info << 32)) ^ (((unint64_t)&WebCore::JSTouch::s_info + ~((_QWORD)&WebCore::JSTouch::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSTouch::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSTouch::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSTouchPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSTouchPrototype::create((WebCore::JSTouchPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSTouch::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSTouch::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 8) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsTouchConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTouchPrototype::s_info != (char **)(16
                                                     * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTouch>,(WebCore::DOMConstructorID)1>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsTouch_target(WebCore::DOMWrapperWorld **a1, uint64_t a2, uint64_t a3, WebCore::EventTarget *a4)
{
  WebCore::JSDOMGlobalObject *v4;

  v4 = *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 16);
  if (v4)
    return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v4, a4);
  else
    return 2;
}

unint64_t WebCore::jsTouch_identifier(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(_QWORD *)(a2 + 24) + 24) | 0xFFFE000000000000;
}

unint64_t WebCore::jsTouch_clientX(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 32);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsTouch_clientY(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 40);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsTouch_pageX(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 48);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsTouch_pageY(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 56);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsTouch_screenX(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 64);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsTouch_screenY(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 72);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsTouch_radiusX(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 80);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsTouch_radiusY(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 88);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsTouch_rotationAngle(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 96);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsTouch_force(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 104);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

uint64_t WebCore::jsTouch_touchType(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(int *)(*((_QWORD *)a2 + 3) + 128);
  if ((byte_1EE3374E9 & 1) == 0)
  {
    unk_1EE337588 = &dword_1ECE7B330;
    dword_1ECE7B330 += 2;
    dword_1ECE7B350 += 2;
    unk_1EE337590 = &dword_1ECE7B350;
    byte_1EE3374E9 = 1;
  }
  v5 = *(_QWORD *)&_MergedGlobals_204[8 * v4 + 176];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

unint64_t WebCore::jsTouch_altitudeAngle(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 112);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsTouch_azimuthAngle(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 120);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

uint64_t WebCore::JSTouchOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

WTF *WebCore::JSTouchOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  return WTF::RefCounted<WebCore::Touch>::deref(v3, a2);
}

unint64_t WebCore::createWrapper<WebCore::Touch,WebCore::Touch>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSTouch::s_info + ~((_QWORD)&WebCore::JSTouch::s_info << 32)) ^ (((unint64_t)&WebCore::JSTouch::s_info + ~((_QWORD)&WebCore::JSTouch::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSTouch::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSTouch::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSTouchPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSTouchPrototype::create((WebCore::JSTouchPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSTouch::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSTouch::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 8);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 8))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 8);
    *(_QWORD *)(v26 + 8) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 8);
  *(_QWORD *)(v22 + 8) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE337540 & 1) == 0)
  {
    qword_1EE337538 = (uint64_t)&off_1E334B010;
    byte_1EE337540 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337538;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSTouchEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  JSC::JSCell *v8;
  unint64_t *v9;
  JSC::Structure *v10;
  uint64_t **v11;
  uint64_t Object;
  WTF *v13;
  uint64_t *v14;
  unint64_t *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  BOOL v19;
  JSC::VM *v20;
  double v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  BOOL v25;
  JSC::VM *v26;
  double v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  BOOL v31;
  JSC::VM *v32;
  double v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  JSC::VM *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  uint64_t *v44;
  BOOL v45;
  JSC::VM *v46;
  double v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  unint64_t v50;
  BOOL v51;
  JSC::VM *v52;
  double v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  BOOL v57;
  JSC::VM *v58;
  double v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  unint64_t v62;
  BOOL v63;
  JSC::VM *v64;
  double v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  BOOL v69;
  JSC::VM *v70;
  double v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  unint64_t v74;
  BOOL v75;
  JSC::VM *v76;
  double v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  unint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  unint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  WTF *v94;
  int v95;
  int v96;
  int v97;
  unint64_t v98;
  WTF *v99;
  int v100;
  int v101;
  int v102;
  unint64_t v103;
  _QWORD *v104;
  WTF::StringImpl *v105;
  WebCore::JSDOMGlobalObject *v106;
  WTF *v107;
  WTF::StringImpl *v108;
  JSC::VM *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char **v117;
  int v118;
  unint64_t v119;
  WebCore::JSUIEvent *v120;
  JSC::JSCell *v121;
  unint64_t Structure;
  JSC::Structure *v123;
  JSC::JSCell *v124;
  uint64_t v125;
  JSCell *v126;
  JSC::JSCell *v127;
  JSC::JSGlobalObject *v128;
  JSC::JSObject *v129;
  JSC::JSGlobalObject *v130;
  JSC::VM *v131;
  JSC::JSObject *v132;
  JSC::Structure *v133;
  JSC::VM *FunctionRealm;
  uint64_t v135;
  unsigned int v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char **v141;
  int v142;
  JSC::JSCell *v143;
  unint64_t v144;
  JSC::Structure *v145;
  JSC::JSCell *v146;
  uint64_t v147;
  unint64_t SubclassStructure;
  _DWORD *v149;
  unsigned int *v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t *v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  int v165;
  JSValue v166;
  unint64_t v167;
  BOOL v168;
  int v169;
  uint64_t v170;
  int *v171;
  int v172;
  BOOL v173;
  int v174;
  uint64_t v175;
  int *v176;
  int v177;
  BOOL v178;
  int v179;
  uint64_t v180;
  int *v181;
  int v182;
  BOOL v183;
  int v184;
  uint64_t v185;
  int *v186;
  int v187;
  BOOL v188;
  int v189;
  uint64_t v190;
  int *v191;
  int v192;
  BOOL v193;
  int v194;
  uint64_t v195;
  int *v196;
  int v197;
  BOOL v198;
  int v199;
  uint64_t v200;
  int *v201;
  int v202;
  BOOL v203;
  int v204;
  uint64_t v205;
  int *v206;
  int v207;
  BOOL v208;
  int v209;
  uint64_t v210;
  int *v211;
  int v212;
  unint64_t *v213;
  uint64_t v214;
  JSC::VM *v215;
  __int16 v216;
  BOOL v217;
  WTF *v218;
  uint64_t v219;
  __int16 v220;
  _BYTE v221[28];
  _BYTE v222[16];
  int v223;
  char v224;
  _BYTE v225[16];
  int v226;
  char v227;
  _BYTE v228[16];
  int v229;
  char v230;
  int v231;
  unint64_t v232;
  int v233;
  __int16 v234;
  BOOL v235;
  WTF *v236;
  uint64_t v237;
  __int16 v238;
  _BYTE v239[28];
  _BYTE v240[16];
  int v241;
  unsigned __int8 v242;
  _BYTE v243[16];
  int v244;
  unsigned __int8 v245;
  _BYTE v246[16];
  int v247;
  unsigned __int8 v248;
  JSC::VM *v249;
  _BYTE *v250;
  unint64_t *v251;
  char v252[8];
  int v253;
  int v254;
  int v255;
  int v256;
  unint64_t *v257;
  char v258[8];
  int v259;
  int v260;
  int v261;
  int v262;
  unint64_t v263;
  _BYTE v264[16];
  int v265;
  unsigned __int8 v266;
  int v267;
  uint64_t *v268;
  uint64_t v269;
  int v270;
  char v271;
  int v272;
  uint64_t v273;

  v273 = *MEMORY[0x1E0C80C00];
  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v166.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v166);
  }
  v5 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v232);
  v7 = v233;
  if (v233)
  {
    v126 = 0;
    goto LABEL_323;
  }
  v214 = v5;
  v215 = v3;
  if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v10 = 0;
    v9 = (unint64_t *)*((_QWORD *)a1 + 7);
    v249 = (JSC::VM *)v9;
    LODWORD(v11) = 1;
  }
  else
  {
    v8 = *(JSC::JSCell **)(a2 + 56);
    v9 = (unint64_t *)*((_QWORD *)a1 + 7);
    v249 = (JSC::VM *)v9;
    if (((unint64_t)v8 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v10 = 0;
      LODWORD(v11) = 1;
    }
    else
    {
      if (((unint64_t)v8 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v8)) == 0)
      {
        JSC::throwTypeError();
        v126 = 0;
        v97 = 1;
        v231 = 1;
        goto LABEL_321;
      }
      v10 = (JSC::Structure *)Object;
      LODWORD(v11) = 0;
    }
  }
  v13 = 0;
  v234 = 0;
  v235 = 0;
  v236 = 0;
  v237 = 0;
  v238 = 0;
  *(_DWORD *)v239 = 0;
  *(_DWORD *)&v239[4] = 0;
  v242 = 0;
  v14 = (uint64_t *)v243;
  v243[0] = 0;
  v245 = 0;
  v15 = (unint64_t *)v246;
  v246[0] = 0;
  v248 = 0;
  *(_QWORD *)&v239[12] = 0;
  *(_QWORD *)&v239[20] = 0;
  v240[0] = 0;
  if ((v11 & 1) != 0)
    goto LABEL_58;
  WTF::AtomStringImpl::addLiteral();
  v16 = (WTF::StringImpl *)v263;
  v18 = JSC::JSObject::get(v10, a1, v263);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v17);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (!*((_DWORD *)v9 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9))
  {
    if (v18 == 10)
    {
      v19 = 0;
      goto LABEL_22;
    }
    v20 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v18 >= 0xFFFE000000000000)
      goto LABEL_446;
    *(_QWORD *)&v21 = v18 - 0x2000000000000;
    if (v18 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v21 <= 0.0)
      {
        v19 = v21 < 0.0;
        goto LABEL_21;
      }
    }
    else
    {
      if ((v18 & 0xFFFE000000000002) != 0)
      {
        v19 = v18 == 7;
        goto LABEL_21;
      }
      v169 = *(unsigned __int8 *)(v18 + 5);
      if (v169 == 3)
      {
        v172 = *(_DWORD *)(v18 + 8);
LABEL_528:
        v168 = v172 == 0;
        goto LABEL_582;
      }
      if (v169 == 2)
      {
        v170 = *(_QWORD *)(v18 + 8);
        if ((v170 & 1) != 0)
          v171 = (int *)(v18 + 16);
        else
          v171 = (int *)(v170 + 4);
        v172 = *v171;
        goto LABEL_528;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v168 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        goto LABEL_582;
      }
    }
    v19 = 1;
    goto LABEL_21;
  }
LABEL_148:
  v231 = 1;
  while (1)
  {
    if (v248)
    {
      if (v247 != -1)
        ((void (*)(unint64_t *, unint64_t *))off_1E334BFC0[v247])(&v263, v15);
      v247 = -1;
    }
    if (v245)
    {
      if (v244 != -1)
        ((void (*)(unint64_t *, uint64_t *))off_1E334BFC0[v244])(&v263, v14);
      v244 = -1;
    }
    if (v242)
    {
      if (v241 != -1)
        ((void (*)(unint64_t *, _BYTE *))off_1E334BFC0[v241])(&v263, v240);
      v241 = -1;
    }
    v18 = (unint64_t)v236;
    v236 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
      {
        v14 = *(uint64_t **)(v18 + 16);
        *(_QWORD *)(v18 + 16) = 0;
        if (v14)
        {
          if (*v14)
            WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v14, v6);
          WTF::fastFree((WTF *)v14, v6);
        }
        v151 = *(unsigned int **)(v18 + 8);
        *(_QWORD *)(v18 + 8) = 0;
        if (v151)
        {
          do
          {
            v152 = __ldaxr(v151);
            v153 = v152 - 1;
          }
          while (__stlxr(v153, v151));
          if (!v153)
          {
            atomic_store(1u, v151);
            WTF::fastFree((WTF *)v151, v6);
          }
        }
        WTF::fastFree((WTF *)v18, v6);
      }
      else
      {
        --*(_DWORD *)v18;
      }
    }
    v97 = v231;
    if (v231)
    {
      v126 = 0;
      goto LABEL_320;
    }
    if (!v233)
      break;
    v20 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_446:
    v168 = (_DWORD)v18 == 0;
LABEL_582:
    v19 = !v168;
LABEL_21:
    if (*((_DWORD *)v20 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v20))
      goto LABEL_148;
LABEL_22:
    LOBYTE(v234) = v19;
    WTF::AtomStringImpl::addLiteral();
    v22 = (WTF::StringImpl *)v263;
    v24 = JSC::JSObject::get(v10, a1, v263);
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v23);
      else
        *(_DWORD *)v22 -= 2;
    }
    if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9))
      goto LABEL_148;
    if (v24 == 10)
    {
      v25 = 0;
      goto LABEL_33;
    }
    v26 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v24 >= 0xFFFE000000000000)
    {
      v173 = (_DWORD)v24 == 0;
      goto LABEL_586;
    }
    *(_QWORD *)&v27 = v24 - 0x2000000000000;
    if (v24 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v24 & 0xFFFE000000000002) != 0)
      {
        v25 = v24 == 7;
        goto LABEL_32;
      }
      v174 = *(unsigned __int8 *)(v24 + 5);
      if (v174 == 3)
      {
        v177 = *(_DWORD *)(v24 + 8);
      }
      else
      {
        if (v174 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_534:
            v25 = 1;
            goto LABEL_32;
          }
          v173 = *(_QWORD *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_586;
        }
        v175 = *(_QWORD *)(v24 + 8);
        if ((v175 & 1) != 0)
          v176 = (int *)(v24 + 16);
        else
          v176 = (int *)(v175 + 4);
        v177 = *v176;
      }
      v173 = v177 == 0;
LABEL_586:
      v25 = !v173;
      goto LABEL_32;
    }
    if (v27 > 0.0)
      goto LABEL_534;
    v25 = v27 < 0.0;
LABEL_32:
    if (*((_DWORD *)v26 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v26))
      goto LABEL_148;
LABEL_33:
    HIBYTE(v234) = v25;
    WTF::AtomStringImpl::addLiteral();
    v28 = (WTF::StringImpl *)v263;
    v30 = JSC::JSObject::get(v10, a1, v263);
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v29);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9))
      goto LABEL_148;
    if (v30 == 10)
    {
      v31 = 0;
      goto LABEL_44;
    }
    v32 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v30 >= 0xFFFE000000000000)
    {
      v178 = (_DWORD)v30 == 0;
      goto LABEL_590;
    }
    *(_QWORD *)&v33 = v30 - 0x2000000000000;
    if (v30 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v30 & 0xFFFE000000000002) != 0)
      {
        v31 = v30 == 7;
        goto LABEL_43;
      }
      v179 = *(unsigned __int8 *)(v30 + 5);
      if (v179 == 3)
      {
        v182 = *(_DWORD *)(v30 + 8);
      }
      else
      {
        if (v179 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_538:
            v31 = 1;
            goto LABEL_43;
          }
          v178 = *(_QWORD *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_590;
        }
        v180 = *(_QWORD *)(v30 + 8);
        if ((v180 & 1) != 0)
          v181 = (int *)(v30 + 16);
        else
          v181 = (int *)(v180 + 4);
        v182 = *v181;
      }
      v178 = v182 == 0;
LABEL_590:
      v31 = !v178;
      goto LABEL_43;
    }
    if (v33 > 0.0)
      goto LABEL_538;
    v31 = v33 < 0.0;
LABEL_43:
    if (*((_DWORD *)v32 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v32))
      goto LABEL_148;
LABEL_44:
    v235 = v31;
    WTF::AtomStringImpl::addLiteral();
    v34 = (WTF::StringImpl *)v263;
    v36 = JSC::JSObject::get(v10, a1, v263);
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v35);
      else
        *(_DWORD *)v34 -= 2;
    }
    if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9))
      goto LABEL_148;
    if (v36 == 10)
    {
      LODWORD(v36) = 0;
    }
    else
    {
      v263 = v36;
      v37 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v36 < 0xFFFE000000000000)
      {
        v161 = v36 - 0x2000000000000;
        if (v36 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v263, a1);
          v161 = v167;
        }
        v162 = (v161 >> 52) & 0x7FF;
        if ((v162 - 1023) <= 0x53)
        {
          v164 = v161 >> (51 - (v161 >> 52));
          if (v162 > 0x433)
            LODWORD(v164) = v161 << ((v161 >> 52) - 51);
          if (v162 >= 0x41F)
            v165 = v164;
          else
            v165 = (((1 << ((v161 >> 52) + 1)) - 1) & v164) + (1 << ((v161 >> 52) + 1));
          if ((v161 & 0x8000000000000000) == 0)
            LODWORD(v36) = v165;
          else
            LODWORD(v36) = -v165;
        }
        else
        {
          LODWORD(v36) = 0;
        }
      }
      if (*((_DWORD *)v37 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v37) & 1) != 0)
        goto LABEL_148;
    }
    LODWORD(v237) = v36;
    WTF::AtomStringImpl::addLiteral();
    v38 = (WTF::StringImpl *)v263;
    v39 = JSC::JSObject::get(v10, a1, v263);
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v6);
      else
        *(_DWORD *)v38 -= 2;
    }
    if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9))
      goto LABEL_148;
    if ((v39 | 8) == 0xA)
    {
      v13 = 0;
    }
    else
    {
      v263 = *((_QWORD *)a1 + 7);
      if ((v39 & 0xFFFE000000000002) != 0
        || *(unsigned __int8 *)(v39 + 5) < 0x17u
        || &WebCore::JSWindowProxy::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x4C))
        || (v163 = *(_QWORD *)(*(_QWORD *)(v39 + 16) + 3408),
            !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v163 + 104))(v163))
        || (v13 = *(WTF **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v163 + 104))(v163) + 112)) == 0)
      {
        JSC::throwTypeError();
        goto LABEL_148;
      }
      ++*(_DWORD *)v13;
    }
LABEL_58:
    v40 = v236;
    v236 = v13;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
      {
        v9 = (unint64_t *)*((_QWORD *)v40 + 2);
        *((_QWORD *)v40 + 2) = 0;
        if (v9)
        {
          if (*v9)
            WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v9, v6);
          WTF::fastFree((WTF *)v9, v6);
        }
        v158 = (unsigned int *)*((_QWORD *)v40 + 1);
        *((_QWORD *)v40 + 1) = 0;
        if (v158)
        {
          do
          {
            v159 = __ldaxr(v158);
            v160 = v159 - 1;
          }
          while (__stlxr(v160, v158));
          if (!v160)
          {
            atomic_store(1u, v158);
            WTF::fastFree((WTF *)v158, v6);
          }
        }
        WTF::fastFree(v40, v6);
      }
      else
      {
        --*(_DWORD *)v40;
      }
    }
    if ((v11 & 1) != 0)
    {
      v238 = 0;
      HIDWORD(v237) = 0;
LABEL_134:
      v80 = 0;
      v264[0] = 0;
      v266 = 0;
      v267 = 0;
      LOBYTE(v257) = 0;
      LOBYTE(v260) = 0;
      goto LABEL_135;
    }
    WTF::AtomStringImpl::addLiteral();
    v41 = (WTF::StringImpl *)v263;
    v43 = JSC::JSObject::get(v10, a1, v263);
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v42);
      else
        *(_DWORD *)v41 -= 2;
    }
    v9 = (unint64_t *)v249;
    if (*((_DWORD *)v249 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v249))
      goto LABEL_148;
    v213 = v15;
    if (v43 != 10)
    {
      v46 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v43 >= 0xFFFE000000000000)
      {
        v44 = v14;
        v183 = (_DWORD)v43 == 0;
        goto LABEL_541;
      }
      *(_QWORD *)&v47 = v43 - 0x2000000000000;
      if (v43 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v44 = v14;
        if (v47 <= 0.0)
        {
          v45 = v47 < 0.0;
          goto LABEL_73;
        }
      }
      else
      {
        v44 = v14;
        if ((v43 & 0xFFFE000000000002) != 0)
        {
          v45 = v43 == 7;
          goto LABEL_73;
        }
        v184 = *(unsigned __int8 *)(v43 + 5);
        if (v184 == 3)
        {
          v187 = *(_DWORD *)(v43 + 8);
          goto LABEL_540;
        }
        if (v184 == 2)
        {
          v185 = *(_QWORD *)(v43 + 8);
          if ((v185 & 1) != 0)
            v186 = (int *)(v43 + 16);
          else
            v186 = (int *)(v185 + 4);
          v187 = *v186;
LABEL_540:
          v183 = v187 == 0;
LABEL_541:
          v45 = !v183;
LABEL_73:
          if (*((_DWORD *)v46 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v46))
            goto LABEL_444;
          goto LABEL_74;
        }
        if ((*(_BYTE *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0xA) & 1) != 0)
        {
          v183 = *(_QWORD *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_541;
        }
      }
      v45 = 1;
      goto LABEL_73;
    }
    v44 = v14;
    v45 = 0;
LABEL_74:
    BYTE6(v237) = v45;
    WTF::AtomStringImpl::addLiteral();
    v48 = (WTF::StringImpl *)v263;
    v50 = JSC::JSObject::get(v10, a1, v263);
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v49);
      else
        *(_DWORD *)v48 -= 2;
    }
    if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9))
    {
LABEL_444:
      v231 = 1;
      v14 = v44;
      v15 = v213;
    }
    else
    {
      if (v50 == 10)
      {
        v51 = 0;
        goto LABEL_85;
      }
      v52 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v50 >= 0xFFFE000000000000)
      {
        v188 = (_DWORD)v50 == 0;
        goto LABEL_548;
      }
      *(_QWORD *)&v53 = v50 - 0x2000000000000;
      if (v50 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v50 & 0xFFFE000000000002) != 0)
        {
          v51 = v50 == 7;
          goto LABEL_84;
        }
        v189 = *(unsigned __int8 *)(v50 + 5);
        if (v189 == 3)
        {
          v192 = *(_DWORD *)(v50 + 8);
        }
        else
        {
          if (v189 != 2)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0xA) & 1) == 0)
            {
LABEL_552:
              v51 = 1;
              goto LABEL_84;
            }
            v188 = *(_QWORD *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_548;
          }
          v190 = *(_QWORD *)(v50 + 8);
          if ((v190 & 1) != 0)
            v191 = (int *)(v50 + 16);
          else
            v191 = (int *)(v190 + 4);
          v192 = *v191;
        }
        v188 = v192 == 0;
LABEL_548:
        v51 = !v188;
        goto LABEL_84;
      }
      if (v53 > 0.0)
        goto LABEL_552;
      v51 = v53 < 0.0;
LABEL_84:
      if (*((_DWORD *)v52 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v52))
        goto LABEL_444;
LABEL_85:
      BYTE4(v237) = v51;
      WTF::AtomStringImpl::addLiteral();
      v54 = (WTF::StringImpl *)v263;
      v56 = JSC::JSObject::get(v10, a1, v263);
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v55);
        else
          *(_DWORD *)v54 -= 2;
      }
      if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9))
        goto LABEL_444;
      if (v56 == 10)
      {
        v57 = 0;
        goto LABEL_96;
      }
      v58 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v56 >= 0xFFFE000000000000)
      {
        v193 = (_DWORD)v56 == 0;
        goto LABEL_555;
      }
      *(_QWORD *)&v59 = v56 - 0x2000000000000;
      if (v56 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v56 & 0xFFFE000000000002) != 0)
        {
          v57 = v56 == 7;
          goto LABEL_95;
        }
        v194 = *(unsigned __int8 *)(v56 + 5);
        if (v194 == 3)
        {
          v197 = *(_DWORD *)(v56 + 8);
        }
        else
        {
          if (v194 != 2)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v56 & 0xFFFFFFFE) + 0xA) & 1) == 0)
            {
LABEL_559:
              v57 = 1;
              goto LABEL_95;
            }
            v193 = *(_QWORD *)(16 * (*(_DWORD *)v56 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_555;
          }
          v195 = *(_QWORD *)(v56 + 8);
          if ((v195 & 1) != 0)
            v196 = (int *)(v56 + 16);
          else
            v196 = (int *)(v195 + 4);
          v197 = *v196;
        }
        v193 = v197 == 0;
LABEL_555:
        v57 = !v193;
        goto LABEL_95;
      }
      if (v59 > 0.0)
        goto LABEL_559;
      v57 = v59 < 0.0;
LABEL_95:
      if (*((_DWORD *)v58 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v58))
        goto LABEL_444;
LABEL_96:
      HIBYTE(v237) = v57;
      WTF::AtomStringImpl::addLiteral();
      v60 = (WTF::StringImpl *)v263;
      v62 = JSC::JSObject::get(v10, a1, v263);
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, v61);
        else
          *(_DWORD *)v60 -= 2;
      }
      if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9))
        goto LABEL_444;
      if (v62 == 10)
      {
        v63 = 0;
        goto LABEL_107;
      }
      v64 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v62 >= 0xFFFE000000000000)
      {
        v198 = (_DWORD)v62 == 0;
        goto LABEL_562;
      }
      *(_QWORD *)&v65 = v62 - 0x2000000000000;
      if (v62 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v62 & 0xFFFE000000000002) != 0)
        {
          v63 = v62 == 7;
          goto LABEL_106;
        }
        v199 = *(unsigned __int8 *)(v62 + 5);
        if (v199 == 3)
        {
          v202 = *(_DWORD *)(v62 + 8);
        }
        else
        {
          if (v199 != 2)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v62 & 0xFFFFFFFE) + 0xA) & 1) == 0)
            {
LABEL_566:
              v63 = 1;
              goto LABEL_106;
            }
            v198 = *(_QWORD *)(16 * (*(_DWORD *)v62 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_562;
          }
          v200 = *(_QWORD *)(v62 + 8);
          if ((v200 & 1) != 0)
            v201 = (int *)(v62 + 16);
          else
            v201 = (int *)(v200 + 4);
          v202 = *v201;
        }
        v198 = v202 == 0;
LABEL_562:
        v63 = !v198;
        goto LABEL_106;
      }
      if (v65 > 0.0)
        goto LABEL_566;
      v63 = v65 < 0.0;
LABEL_106:
      if (*((_DWORD *)v64 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v64))
        goto LABEL_444;
LABEL_107:
      LOBYTE(v238) = v63;
      WTF::AtomStringImpl::addLiteral();
      v66 = (WTF::StringImpl *)v263;
      v68 = JSC::JSObject::get(v10, a1, v263);
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
          WTF::StringImpl::destroy(v66, v67);
        else
          *(_DWORD *)v66 -= 2;
      }
      if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9))
        goto LABEL_444;
      if (v68 == 10)
      {
        v69 = 0;
        goto LABEL_118;
      }
      v70 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v68 >= 0xFFFE000000000000)
      {
        v203 = (_DWORD)v68 == 0;
        goto LABEL_569;
      }
      *(_QWORD *)&v71 = v68 - 0x2000000000000;
      if (v68 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v68 & 0xFFFE000000000002) != 0)
        {
          v69 = v68 == 7;
          goto LABEL_117;
        }
        v204 = *(unsigned __int8 *)(v68 + 5);
        if (v204 == 3)
        {
          v207 = *(_DWORD *)(v68 + 8);
        }
        else
        {
          if (v204 != 2)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v68 & 0xFFFFFFFE) + 0xA) & 1) == 0)
            {
LABEL_573:
              v69 = 1;
              goto LABEL_117;
            }
            v203 = *(_QWORD *)(16 * (*(_DWORD *)v68 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_569;
          }
          v205 = *(_QWORD *)(v68 + 8);
          if ((v205 & 1) != 0)
            v206 = (int *)(v68 + 16);
          else
            v206 = (int *)(v205 + 4);
          v207 = *v206;
        }
        v203 = v207 == 0;
LABEL_569:
        v69 = !v203;
        goto LABEL_117;
      }
      if (v71 > 0.0)
        goto LABEL_573;
      v69 = v71 < 0.0;
LABEL_117:
      if (*((_DWORD *)v70 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v70))
        goto LABEL_444;
LABEL_118:
      HIBYTE(v238) = v69;
      WTF::AtomStringImpl::addLiteral();
      v72 = (WTF::StringImpl *)v263;
      v74 = JSC::JSObject::get(v10, a1, v263);
      if (v72)
      {
        if (*(_DWORD *)v72 == 2)
          WTF::StringImpl::destroy(v72, v73);
        else
          *(_DWORD *)v72 -= 2;
      }
      if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9))
        goto LABEL_444;
      if (v74 == 10)
      {
        v75 = 0;
        goto LABEL_129;
      }
      v76 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v74 >= 0xFFFE000000000000)
      {
        v208 = (_DWORD)v74 == 0;
        goto LABEL_576;
      }
      *(_QWORD *)&v77 = v74 - 0x2000000000000;
      if (v74 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v74 & 0xFFFE000000000002) != 0)
        {
          v75 = v74 == 7;
          goto LABEL_128;
        }
        v209 = *(unsigned __int8 *)(v74 + 5);
        if (v209 == 3)
        {
          v212 = *(_DWORD *)(v74 + 8);
        }
        else
        {
          if (v209 != 2)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v74 & 0xFFFFFFFE) + 0xA) & 1) == 0)
            {
LABEL_580:
              v75 = 1;
              goto LABEL_128;
            }
            v208 = *(_QWORD *)(16 * (*(_DWORD *)v74 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_576;
          }
          v210 = *(_QWORD *)(v74 + 8);
          if ((v210 & 1) != 0)
            v211 = (int *)(v74 + 16);
          else
            v211 = (int *)(v210 + 4);
          v212 = *v211;
        }
        v208 = v212 == 0;
LABEL_576:
        v75 = !v208;
        goto LABEL_128;
      }
      if (v77 > 0.0)
        goto LABEL_580;
      v75 = v77 < 0.0;
LABEL_128:
      if (*((_DWORD *)v76 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v76))
        goto LABEL_444;
LABEL_129:
      BYTE5(v237) = v75;
      WTF::AtomStringImpl::addLiteral();
      v78 = (WTF::StringImpl *)v263;
      v79 = JSC::JSObject::get(v10, a1, v263);
      if (v78)
      {
        if (*(_DWORD *)v78 == 2)
          WTF::StringImpl::destroy(v78, v6);
        else
          *(_DWORD *)v78 -= 2;
      }
      if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9))
        goto LABEL_444;
      v14 = v44;
      v15 = v213;
      if ((v79 | 8) == 0xA)
        goto LABEL_134;
      v9 = (unint64_t *)&v257;
      WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TouchList>,WebCore::IDLSequence<WebCore::IDLInterface<WebCore::Touch>>>>::convert((uint64_t)&v257, a1, v79);
      WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<WebCore::TouchList,WTF::RawPtrTraits<WebCore::TouchList>,WTF::DefaultRefDerefTraits<WebCore::TouchList>>,WTF::Vector<WTF::Ref<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::TouchList,WTF::RawPtrTraits<WebCore::TouchList>,WTF::DefaultRefDerefTraits<WebCore::TouchList>>,WTF::Vector<WTF::Ref<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v263, (uint64_t)&v257);
      if (v261 != -1)
        ((void (*)(unint64_t **, char *))off_1E334C280[v261])(&v251, v258);
      v82 = v267;
      if (v267)
      {
        v231 = 1;
        goto LABEL_245;
      }
      v80 = v266;
      LOBYTE(v257) = 0;
      LOBYTE(v260) = 0;
      if (v266)
      {
        v259 = -1;
        v83 = v265;
        if (v265 != -1)
        {
          ((void (*)(unint64_t **, unint64_t **, _BYTE *))off_1E334BFD0[v265])(&v251, &v257, v264);
          v259 = v83;
        }
        v80 = 1;
        LOBYTE(v260) = 1;
      }
LABEL_135:
      if (v248 != v80)
      {
        if (v248)
        {
          if (v247 != -1)
            ((void (*)(unint64_t **, unint64_t *))off_1E334BFC0[v247])(&v251, v15);
          v247 = -1;
          v248 = 0;
        }
        else
        {
          v246[0] = 0;
          v247 = -1;
          v81 = v259;
          if (v259 != -1)
          {
            ((void (*)(unint64_t **, unint64_t *, unint64_t **))off_1E334BFD0[v259])(&v251, v15, &v257);
            v247 = v81;
          }
          v248 = 1;
        }
        goto LABEL_161;
      }
      if (!v248)
        goto LABEL_164;
      if (v247 == -1)
      {
        if (v259 != -1)
        {
LABEL_160:
          v251 = v15;
          ((void (*)(unint64_t **, unint64_t *, unint64_t **))off_1E334BFE0[v259])(&v251, v15, &v257);
        }
      }
      else
      {
        if (v259 != -1)
          goto LABEL_160;
        ((void (*)(unint64_t **, unint64_t *))off_1E334BFC0[v247])(&v251, v15);
        v247 = -1;
      }
LABEL_161:
      if ((_BYTE)v260 && v259 != -1)
        ((void (*)(unint64_t **, unint64_t **))off_1E334BFC0[v259])(&v251, &v257);
LABEL_164:
      if ((_DWORD)v11)
        goto LABEL_170;
      WTF::AtomStringImpl::addLiteral();
      v9 = v257;
      v84 = JSC::JSObject::get(v10, a1, (unint64_t)v257);
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v9, v6);
        else
          *(_DWORD *)v9 -= 2;
      }
      if (!*((_DWORD *)v249 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v249))
      {
        if ((v84 | 8) == 0xA)
        {
LABEL_170:
          v85 = 0;
          v258[0] = 0;
          LOBYTE(v261) = 0;
          v262 = 0;
          LOBYTE(v251) = 0;
          LOBYTE(v254) = 0;
          goto LABEL_171;
        }
        v9 = (unint64_t *)&v251;
        WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TouchList>,WebCore::IDLSequence<WebCore::IDLInterface<WebCore::Touch>>>>::convert((uint64_t)&v251, a1, v84);
        WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<WebCore::TouchList,WTF::RawPtrTraits<WebCore::TouchList>,WTF::DefaultRefDerefTraits<WebCore::TouchList>>,WTF::Vector<WTF::Ref<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::TouchList,WTF::RawPtrTraits<WebCore::TouchList>,WTF::DefaultRefDerefTraits<WebCore::TouchList>>,WTF::Vector<WTF::Ref<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v257, (uint64_t)&v251);
        if (v255 != -1)
          ((void (*)(uint64_t **, char *))off_1E334C280[v255])(&v268, v252);
        v87 = v262;
        if (v262)
        {
          v231 = 1;
        }
        else
        {
          v85 = v261;
          LOBYTE(v251) = 0;
          LOBYTE(v254) = 0;
          if ((_BYTE)v261)
          {
            v253 = -1;
            v88 = v260;
            if (v260 != -1)
            {
              ((void (*)(uint64_t **, unint64_t **, char *))off_1E334BFD0[v260])(&v268, &v251, v258);
              v253 = v88;
            }
            v85 = 1;
            LOBYTE(v254) = 1;
          }
LABEL_171:
          if (v245 != v85)
          {
            if (v245)
            {
              if (v244 != -1)
                ((void (*)(uint64_t **, uint64_t *))off_1E334BFC0[v244])(&v268, v14);
              v244 = -1;
              v245 = 0;
            }
            else
            {
              v243[0] = 0;
              v244 = -1;
              v86 = v253;
              if (v253 != -1)
              {
                ((void (*)(uint64_t **, uint64_t *, unint64_t **))off_1E334BFD0[v253])(&v268, v14, &v251);
                v244 = v86;
              }
              v245 = 1;
            }
            goto LABEL_192;
          }
          if (v245)
          {
            if (v244 == -1)
            {
              if (v253 != -1)
                goto LABEL_191;
            }
            else
            {
              if (v253 == -1)
              {
                ((void (*)(uint64_t **, uint64_t *))off_1E334BFC0[v244])(&v268, v14);
                v244 = -1;
                goto LABEL_192;
              }
LABEL_191:
              v268 = v14;
              ((void (*)(uint64_t **, uint64_t *, unint64_t **))off_1E334BFE0[v253])(&v268, v14, &v251);
            }
LABEL_192:
            if ((_BYTE)v254 && v253 != -1)
              ((void (*)(uint64_t **, unint64_t **))off_1E334BFC0[v253])(&v268, &v251);
          }
          if ((_DWORD)v11)
            goto LABEL_201;
          WTF::AtomStringImpl::addLiteral();
          v9 = v251;
          v89 = JSC::JSObject::get(v10, a1, (unint64_t)v251);
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v9, v6);
            else
              *(_DWORD *)v9 -= 2;
          }
          if (*((_DWORD *)v249 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v249))
          {
            v231 = 1;
            goto LABEL_241;
          }
          if ((v89 | 8) == 0xA)
          {
LABEL_201:
            v90 = 0;
            v252[0] = 0;
            LOBYTE(v255) = 0;
            v256 = 0;
            LOBYTE(v268) = 0;
            v271 = 0;
            goto LABEL_202;
          }
          v11 = &v268;
          WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TouchList>,WebCore::IDLSequence<WebCore::IDLInterface<WebCore::Touch>>>>::convert((uint64_t)&v268, a1, v89);
          WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<WebCore::TouchList,WTF::RawPtrTraits<WebCore::TouchList>,WTF::DefaultRefDerefTraits<WebCore::TouchList>>,WTF::Vector<WTF::Ref<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::TouchList,WTF::RawPtrTraits<WebCore::TouchList>,WTF::DefaultRefDerefTraits<WebCore::TouchList>>,WTF::Vector<WTF::Ref<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v251, (uint64_t)&v268);
          if (v272 != -1)
            ((void (*)(_BYTE **, uint64_t *))off_1E334C280[v272])(&v250, &v269);
          v92 = v256;
          if (v256)
          {
            v231 = 1;
          }
          else
          {
            v90 = v255;
            LOBYTE(v268) = 0;
            v271 = 0;
            if ((_BYTE)v255)
            {
              v270 = -1;
              v93 = v254;
              if (v254 != -1)
              {
                ((void (*)(_BYTE **, uint64_t **, char *))off_1E334BFD0[v254])(&v250, &v268, v252);
                v270 = v93;
              }
              v90 = 1;
              v271 = 1;
            }
LABEL_202:
            v10 = (JSC::Structure *)v240;
            if (v242 != v90)
            {
              if (v242)
              {
                if (v241 != -1)
                  ((void (*)(_BYTE **, _BYTE *))off_1E334BFC0[v241])(&v250, v240);
                v241 = -1;
                v242 = 0;
              }
              else
              {
                v240[0] = 0;
                v241 = -1;
                v91 = v270;
                if (v270 != -1)
                {
                  ((void (*)(_BYTE **, _BYTE *, uint64_t **))off_1E334BFD0[v270])(&v250, v240, &v268);
                  v241 = v91;
                }
                v242 = 1;
              }
              goto LABEL_223;
            }
            if (v242)
            {
              if (v241 == -1)
              {
                if (v270 != -1)
                  goto LABEL_222;
              }
              else
              {
                if (v270 == -1)
                {
                  ((void (*)(_BYTE **, _BYTE *))off_1E334BFC0[v241])(&v250, v240);
                  v241 = -1;
                  goto LABEL_223;
                }
LABEL_222:
                v250 = v240;
                ((void (*)(_BYTE **, _BYTE *, uint64_t **))off_1E334BFE0[v270])(&v250, v240, &v268);
              }
LABEL_223:
              if (v271 && v270 != -1)
                ((void (*)(_BYTE **, uint64_t **))off_1E334BFC0[v270])(&v250, &v268);
            }
            v216 = v234;
            v217 = v235;
            v94 = v236;
            v236 = 0;
            v218 = v94;
            v219 = v237;
            v220 = v238;
            *(_OWORD *)&v221[12] = *(_OWORD *)&v239[12];
            *(_OWORD *)v221 = *(_OWORD *)v239;
            v11 = (uint64_t **)&v216;
            v222[0] = 0;
            v224 = 0;
            if (v242)
            {
              v223 = -1;
              v95 = v241;
              if (v241 != -1)
              {
                ((void (*)(uint64_t **, _BYTE *, _BYTE *))off_1E334BFD0[v241])(&v268, v222, v240);
                v223 = v95;
              }
              v224 = 1;
            }
            v225[0] = 0;
            v227 = 0;
            if (v245)
            {
              v226 = -1;
              v96 = v244;
              if (v244 != -1)
              {
                ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E334BFD0[v244])(&v268, v225, v14);
                v226 = v96;
              }
              v227 = 1;
            }
            v228[0] = 0;
            v230 = 0;
            if (v248)
            {
              v229 = -1;
              LODWORD(v11) = v247;
              if (v247 != -1)
              {
                ((void (*)(uint64_t **, _BYTE *, unint64_t *))off_1E334BFD0[v247])(&v268, v228, v15);
                v229 = (int)v11;
              }
              v230 = 1;
            }
            v231 = 0;
            v92 = v256;
          }
          if (v92 != -1)
            ((void (*)(uint64_t **, char *))off_1E334BFF0[v92])(&v268, v252);
LABEL_241:
          v87 = v262;
        }
        if (v87 != -1)
          ((void (*)(unint64_t **, char *))off_1E334BFF0[v87])(&v251, v258);
        goto LABEL_244;
      }
      v231 = 1;
LABEL_244:
      v82 = v267;
LABEL_245:
      if (v82 != -1)
        ((void (*)(unint64_t **, _BYTE *))off_1E334BFF0[v82])(&v257, v264);
    }
  }
  v98 = v232;
  v232 = 0;
  v257 = (unint64_t *)v98;
  v234 = v216;
  v235 = v217;
  v99 = v218;
  v218 = 0;
  v236 = v99;
  v237 = v219;
  v238 = v220;
  *(_OWORD *)&v239[12] = *(_OWORD *)&v221[12];
  *(_OWORD *)v239 = *(_OWORD *)v221;
  v240[0] = 0;
  v242 = 0;
  if (v224)
  {
    v241 = -1;
    v100 = v223;
    if (v223 != -1)
    {
      ((void (*)(unint64_t *, _BYTE *, _BYTE *))off_1E334BFD0[v223])(&v263, v240, v222);
      v241 = v100;
    }
    v242 = 1;
  }
  v243[0] = 0;
  v245 = 0;
  if (v227)
  {
    v244 = -1;
    v101 = v226;
    if (v226 != -1)
    {
      ((void (*)(unint64_t *, _BYTE *, _BYTE *))off_1E334BFD0[v226])(&v263, v243, v225);
      v244 = v101;
    }
    v245 = 1;
  }
  v246[0] = 0;
  v248 = 0;
  if (v230)
  {
    v247 = -1;
    v102 = v229;
    if (v229 != -1)
    {
      ((void (*)(unint64_t *, _BYTE *, _BYTE *))off_1E334BFD0[v229])(&v263, v246, v228);
      v247 = v102;
    }
    v248 = 1;
  }
  v103 = bmalloc::api::isoAllocate();
  v104 = (_QWORD *)WebCore::MouseRelatedEvent::MouseRelatedEvent(v103, 29, &v257, (unsigned __int8 *)&v234);
  *v104 = off_1E33A8D78;
  v104[20] = 0;
  WebCore::toTouchList((uint64_t)&v263, (uint64_t)v240);
  *(_QWORD *)(v103 + 168) = v263;
  WebCore::toTouchList((uint64_t)&v263, (uint64_t)v243);
  *(_QWORD *)(v103 + 176) = v263;
  WebCore::toTouchList((uint64_t)&v263, (uint64_t)v246);
  *(_QWORD *)(v103 + 184) = v263;
  *(_QWORD *)(v103 + 192) = 1065353216;
  v263 = v103;
  if (v248)
  {
    if (v247 != -1)
      ((void (*)(unint64_t **, _BYTE *))off_1E334BFC0[v247])(&v251, v246);
    v247 = -1;
  }
  if (v245)
  {
    if (v244 != -1)
      ((void (*)(unint64_t **, _BYTE *))off_1E334BFC0[v244])(&v251, v243);
    v244 = -1;
  }
  if (v242)
  {
    if (v241 != -1)
      ((void (*)(unint64_t **, _BYTE *))off_1E334BFC0[v241])(&v251, v240);
    v241 = -1;
  }
  v107 = v236;
  v236 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 1)
    {
      v154 = (uint64_t *)*((_QWORD *)v107 + 2);
      *((_QWORD *)v107 + 2) = 0;
      if (v154)
      {
        if (*v154)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v154, v105);
        WTF::fastFree((WTF *)v154, v105);
      }
      v155 = (unsigned int *)*((_QWORD *)v107 + 1);
      *((_QWORD *)v107 + 1) = 0;
      if (v155)
      {
        do
        {
          v156 = __ldaxr(v155);
          v157 = v156 - 1;
        }
        while (__stlxr(v157, v155));
        if (!v157)
        {
          atomic_store(1u, v155);
          WTF::fastFree((WTF *)v155, v105);
        }
      }
      WTF::fastFree(v107, v105);
    }
    else
    {
      --*(_DWORD *)v107;
    }
  }
  v108 = (WTF::StringImpl *)v257;
  v257 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
      WTF::StringImpl::destroy(v108, v105);
    else
      *(_DWORD *)v108 -= 2;
  }
  if (*(void (***)(WebCore::TouchEvent *__hidden))v103 != off_1E33A8D78)
  {
    __break(0xC471u);
    JUMPOUT(0x19522612CLL);
  }
  v109 = *(JSC::VM **)(v214 + 40);
  v110 = v263;
  v111 = *((_QWORD *)v109 + 412);
  if (!v111)
    goto LABEL_301;
  v112 = *(_DWORD *)(v111 - 8);
  v113 = ((unint64_t)&WebCore::JSTouchEvent::s_info + ~((_QWORD)&WebCore::JSTouchEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSTouchEvent::s_info + ~((_QWORD)&WebCore::JSTouchEvent::s_info << 32)) >> 22);
  v114 = 9 * ((v113 + ~(v113 << 13)) ^ ((v113 + ~(v113 << 13)) >> 8));
  v115 = (v114 ^ (v114 >> 15)) + ~((v114 ^ (v114 >> 15)) << 27);
  v116 = v112 & ((v115 >> 31) ^ v115);
  v117 = *(char ***)(v111 + 16 * v116);
  if (v117 == &WebCore::JSTouchEvent::s_info)
  {
LABEL_300:
    v119 = *(_QWORD *)(v111 + 16 * v116 + 8);
    if (!v119)
      goto LABEL_301;
  }
  else
  {
    v118 = 1;
    while (v117)
    {
      v116 = ((_DWORD)v116 + v118) & v112;
      v117 = *(char ***)(v111 + 16 * v116);
      ++v118;
      if (v117 == &WebCore::JSTouchEvent::s_info)
        goto LABEL_300;
    }
LABEL_301:
    v120 = (WebCore::JSUIEvent *)*((_QWORD *)v109 + 7);
    v121 = (JSC::JSCell *)WebCore::JSUIEvent::prototype(v120, *(JSC::VM **)(v214 + 40), v106);
    Structure = WebCore::JSTouchEventPrototype::createStructure((uint64_t *)v120, (uint64_t)v109, v121);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v124 = (JSC::JSCell *)WebCore::JSTouchEventPrototype::create(v120, v109, Structure, v123);
    v125 = WebCore::JSTouchEvent::createStructure((uint64_t *)v120, (uint64_t)v109, v124);
    v119 = WebCore::cacheDOMStructure((JSCell *)v109, v125, (uint64_t)&WebCore::JSTouchEvent::s_info);
  }
  v126 = (JSCell *)WebCore::JSTouchEvent::create(v119, v109, (uint64_t *)&v263);
  WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v109 + 415), v110, (uint64_t)v126);
  v127 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v127 & 0xFFFE000000000002) == 0)
  {
    v128 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v127);
    if (v128)
    {
      v130 = v128;
      if (v128 != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v131 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v128, v129);
        if (!*((_DWORD *)v131 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v131) & 1) == 0)
        {
          v135 = *((_QWORD *)FunctionRealm + 412);
          if (v135)
          {
            v136 = *(_DWORD *)(v135 - 8);
            v137 = ((unint64_t)&WebCore::JSTouchEvent::s_info + ~((_QWORD)&WebCore::JSTouchEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSTouchEvent::s_info + ~((_QWORD)&WebCore::JSTouchEvent::s_info << 32)) >> 22);
            v138 = 9 * ((v137 + ~(v137 << 13)) ^ ((v137 + ~(v137 << 13)) >> 8));
            v139 = (v138 ^ (v138 >> 15)) + ~((v138 ^ (v138 >> 15)) << 27);
            v140 = v136 & ((v139 >> 31) ^ v139);
            v141 = *(char ***)(v135 + 16 * v140);
            if (v141 == &WebCore::JSTouchEvent::s_info)
            {
LABEL_311:
              v132 = *(JSC::JSObject **)(v135 + 16 * v140 + 8);
              if (v132)
              {
LABEL_313:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v130, v132, v133);
                if (!*((_DWORD *)v131 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v131) & 1) == 0)
                  JSC::JSObject::setStructure(v126, v131, SubclassStructure);
                goto LABEL_315;
              }
            }
            else
            {
              v142 = 1;
              while (v141)
              {
                v140 = ((_DWORD)v140 + v142) & v136;
                v141 = *(char ***)(v135 + 16 * v140);
                ++v142;
                if (v141 == &WebCore::JSTouchEvent::s_info)
                  goto LABEL_311;
              }
            }
          }
          v143 = (JSC::JSCell *)WebCore::JSUIEvent::prototype(v131, FunctionRealm, v132);
          v144 = WebCore::JSTouchEventPrototype::createStructure((uint64_t *)v131, (uint64_t)FunctionRealm, v143);
          *(_DWORD *)(v144 + 16) |= 0x80000u;
          v146 = (JSC::JSCell *)WebCore::JSTouchEventPrototype::create(v131, FunctionRealm, v144, v145);
          v147 = WebCore::JSTouchEvent::createStructure((uint64_t *)v131, (uint64_t)FunctionRealm, v146);
          v132 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v147, (uint64_t)&WebCore::JSTouchEvent::s_info);
          goto LABEL_313;
        }
      }
    }
  }
LABEL_315:
  if (*((_DWORD *)v215 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v215) & 1) != 0)
    v126 = 0;
  v149 = (_DWORD *)v263;
  v263 = 0;
  if (v149)
  {
    if (v149[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v149 + 8))(v149);
    else
      --v149[4];
  }
  v97 = v231;
LABEL_320:
  if (v97 != -1)
LABEL_321:
    ((void (*)(__int16 *, __int16 *))off_1E334C000[v97])(&v234, &v216);
  v7 = v233;
LABEL_323:
  if (v7 != -1)
    ((void (*)(__int16 *, unint64_t *))off_1E334BAD8[v7])(&v216, &v232);
  return v126;
}

uint64_t WebCore::JSTouchEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSUIEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSUIEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSUIEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSTouchEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSTouchEventPrototype::create(WebCore::JSTouchEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<11u>(this, (uint64_t)&WebCore::JSTouchEvent::s_info, (uint64_t)&WebCore::JSTouchEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTouchEvent>,(WebCore::DOMConstructorID)2>(WebCore::JSEvent *this, JSC::VM *a2, const JSC::JSGlobalObject *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t *v7;
  unint64_t v8;
  JSC::JSCell *Constructor;
  uint64_t Structure;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  WebCore::JSDOMGlobalObject *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char **v27;
  int v28;
  uint64_t v29;
  JSC::JSCell *v30;
  unint64_t v31;
  JSC::Structure *v32;
  JSC::JSCell *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;

  v3 = *((_QWORD *)a2 + 414);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
    return v4;
  v7 = (uint64_t *)((char *)this + 40136);
  v8 = *(_QWORD *)(v3 + 3968);
  if (!v8)
  {
    Constructor = (JSC::JSCell *)WebCore::JSEvent::getConstructor(this, a2, a3);
    Structure = WebCore::JSDOMConstructor<WebCore::JSUIEvent>::createStructure((uint64_t *)this, (int)a2, Constructor);
    v8 = WebCore::JSDOMConstructor<WebCore::JSUIEvent>::create((uint64_t)this, Structure, a2);
    *(_QWORD *)(*((_QWORD *)a2 + 414) + 3968) = v8;
    if (v8)
    {
      if (*((_DWORD *)this + 190) >= *((unsigned __int8 *)a2 + 7))
        JSC::Heap::writeBarrierSlowPath((WebCore::JSEvent *)((char *)this + 192), (const JSCell *)a2);
    }
  }
  LODWORD(v39) = 67099;
  if ((v8 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v8);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v7;
  if (*v7 < (unint64_t)v7[1])
    goto LABEL_8;
  SlowCase = v7[2];
  if ((SlowCase & 1) == 0)
  {
    v37 = *(_QWORD *)(SlowCase + 8) ^ v7[3];
    v7[1] = SlowCase + HIDWORD(v37);
    v7[2] = SlowCase + (int)v37;
LABEL_8:
    *v7 = SlowCase + 128;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_9:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v8, &v39, &WebCore::JSDOMConstructor<WebCore::JSTouchEvent>::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v13 = (_QWORD *)v7[165];
  v4 = v13[2846];
  if (v4 < v13[2847])
    goto LABEL_12;
  v4 = v13[2848];
  if ((v4 & 1) == 0)
  {
    v38 = *(_QWORD *)(v4 + 8) ^ v13[2849];
    v13[2847] = v4 + HIDWORD(v38);
    v13[2848] = v4 + (int)v38;
LABEL_12:
    v13[2846] = v4 + 48;
    goto LABEL_13;
  }
  JSC::sanitizeStackForVM();
  v4 = JSC::LocalAllocator::allocateSlowCase();
LABEL_13:
  *(_DWORD *)v4 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v14 = *(_QWORD *)(v7[227] + 1768);
  v39 = 0;
  v40 = v4;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v4, this, v14, 0xFFFE000000000001, 6, (uint64_t)&v39);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = JSC::JSString::create((uint64_t)this, &v39);
  v17 = v39;
  v39 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  *(_QWORD *)(v4 + 32) = v16;
  if (v16 && *((_DWORD *)this + 190) >= *(unsigned __int8 *)(v4 + 7))
    JSC::Heap::writeBarrierSlowPath((WebCore::JSEvent *)((char *)this + 192), (const JSCell *)v4);
  v18 = *(_QWORD *)(v7[227] + 1968);
  v39 = 0;
  v40 = v4;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v4, this, v18, v16, 6, (uint64_t)&v39);
  v20 = *(_QWORD *)(v7[227] + 2160);
  v21 = *((_QWORD *)a2 + 412);
  if (v21)
  {
    v22 = *(_DWORD *)(v21 - 8);
    v23 = ((unint64_t)&WebCore::JSTouchEvent::s_info + ~((_QWORD)&WebCore::JSTouchEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSTouchEvent::s_info + ~((_QWORD)&WebCore::JSTouchEvent::s_info << 32)) >> 22);
    v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
    v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
    v26 = v22 & ((v25 >> 31) ^ v25);
    v27 = *(char ***)(v21 + 16 * v26);
    if (v27 == &WebCore::JSTouchEvent::s_info)
    {
LABEL_22:
      v29 = *(_QWORD *)(v21 + 16 * v26 + 8);
      if (v29)
        goto LABEL_24;
    }
    else
    {
      v28 = 1;
      while (v27)
      {
        v26 = ((_DWORD)v26 + v28) & v22;
        v27 = *(char ***)(v21 + 16 * v26);
        ++v28;
        if (v27 == &WebCore::JSTouchEvent::s_info)
          goto LABEL_22;
      }
    }
  }
  v30 = (JSC::JSCell *)WebCore::JSUIEvent::prototype(this, a2, v19);
  v31 = WebCore::JSTouchEventPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v30);
  *(_DWORD *)(v31 + 16) |= 0x80000u;
  v33 = (JSC::JSCell *)WebCore::JSTouchEventPrototype::create(this, a2, v31, v32);
  v34 = WebCore::JSTouchEvent::createStructure((uint64_t *)this, (uint64_t)a2, v33);
  v29 = WebCore::cacheDOMStructure((JSCell *)a2, v34, (uint64_t)&WebCore::JSTouchEvent::s_info);
LABEL_24:
  v35 = *(_QWORD *)(v29 + 48);
  v39 = 0;
  v40 = v4;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v4, this, v20, v35, 14, (uint64_t)&v39);
  *(_QWORD *)(*((_QWORD *)a2 + 414) + 16) = v4;
  if (*((_DWORD *)this + 190) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((WebCore::JSEvent *)((char *)this + 192), (const JSCell *)a2);
  return v4;
}

unint64_t WebCore::jsTouchEventConstructor(uint64_t a1, unint64_t a2, const JSC::JSGlobalObject *a3)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTouchEventPrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTouchEvent>,(WebCore::DOMConstructorID)2>(*(WebCore::JSEvent **)(a1 + 56), *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), a3);
  }
}

unint64_t WebCore::jsTouchEvent_touches(uint64_t a1, uint64_t a2)
{
  WTF *v3;

  v3 = *(WTF **)(*(_QWORD *)(a2 + 24) + 168);
  if (v3)
    return WebCore::wrap<WebCore::TouchList>(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v3);
  else
    return 2;
}

unint64_t WebCore::jsTouchEvent_targetTouches(uint64_t a1, uint64_t a2)
{
  WTF *v3;

  v3 = *(WTF **)(*(_QWORD *)(a2 + 24) + 176);
  if (v3)
    return WebCore::wrap<WebCore::TouchList>(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v3);
  else
    return 2;
}

unint64_t WebCore::jsTouchEvent_changedTouches(uint64_t a1, uint64_t a2)
{
  WTF *v3;

  v3 = *(WTF **)(*(_QWORD *)(a2 + 24) + 184);
  if (v3)
    return WebCore::wrap<WebCore::TouchList>(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v3);
  else
    return 2;
}

unint64_t WebCore::jsTouchEvent_scale(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 192);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

unint64_t WebCore::jsTouchEvent_rotation(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 196);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

uint64_t WebCore::jsTouchEvent_ctrlKey(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 84) & 2) != 0)
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsTouchEvent_shiftKey(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 84) & 8) != 0)
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsTouchEvent_altKey(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 84) & 1) != 0)
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsTouchEvent_metaKey(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 84) & 4) != 0)
    return 7;
  else
    return 6;
}

uint64_t WebCore::JSTouchEvent::subspaceForImpl(WebCore::JSTouchEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 16))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 16);
    *(_QWORD *)(v8 + 16) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSTouchList>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  JSCell *v8;
  JSC::JSCell *v9;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v11;
  JSC::JSGlobalObject *v12;
  JSC::VM *v13;
  JSC::Structure *v14;
  uint64_t FunctionRealm;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  JSC::JSObject *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  unint64_t SubclassStructure;
  WTF *v31;
  WTF *v32;
  uint64_t v34;
  WTF **v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  WTF *v39;
  WTF *v40;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v5 = *(_QWORD *)(a2 + 24);
  WebCore::convertVariadicArguments<WebCore::IDLInterface<WebCore::Touch>>((uint64_t)a1, a2, 0, &v40);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
  {
    v8 = 0;
    goto LABEL_19;
  }
  v6 = WTF::fastMalloc((WTF *)0x18);
  v39 = (WTF *)WebCore::TouchList::TouchList(v6, (unsigned int **)&v40);
  v8 = (JSCell *)WebCore::createWrapper<WebCore::TouchList,WebCore::TouchList>(*(_QWORD *)(v5 + 40), &v39);
  v9 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v9 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v9);
    if (Object)
    {
      v12 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v13 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = JSC::getFunctionRealm(a1, Object, v11);
        if (!*((_DWORD *)v13 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) == 0)
        {
          v16 = *(_QWORD *)(FunctionRealm + 3296);
          if (v16)
          {
            v17 = *(_DWORD *)(v16 - 8);
            v18 = ((unint64_t)&WebCore::JSTouchList::s_info + ~((_QWORD)&WebCore::JSTouchList::s_info << 32)) ^ (((unint64_t)&WebCore::JSTouchList::s_info + ~((_QWORD)&WebCore::JSTouchList::s_info << 32)) >> 22);
            v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
            v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
            v21 = v17 & ((v20 >> 31) ^ v20);
            v22 = *(char ***)(v16 + 16 * v21);
            if (v22 == &WebCore::JSTouchList::s_info)
            {
LABEL_11:
              v24 = *(JSC::JSObject **)(v16 + 16 * v21 + 8);
              if (v24)
              {
LABEL_13:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v12, v24, v14);
                if (!*((_DWORD *)v13 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) == 0)
                  JSC::JSObject::setStructure(v8, v13, SubclassStructure);
                goto LABEL_15;
              }
            }
            else
            {
              v23 = 1;
              while (v22)
              {
                v21 = ((_DWORD)v21 + v23) & v17;
                v22 = *(char ***)(v16 + 16 * v21);
                ++v23;
                if (v22 == &WebCore::JSTouchList::s_info)
                  goto LABEL_11;
              }
            }
          }
          Structure = WebCore::JSTouchListPrototype::createStructure((uint64_t *)v13, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v28 = (JSC::JSCell *)WebCore::JSTouchListPrototype::create(v13, Structure, v26, v27);
          v29 = WebCore::JSTouchList::createStructure((uint64_t *)v13, FunctionRealm, v28);
          v24 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v29, (uint64_t)&WebCore::JSTouchList::s_info);
          goto LABEL_13;
        }
      }
    }
  }
LABEL_15:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    v8 = 0;
  v31 = v39;
  v39 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 1)
    {
      v34 = *((unsigned int *)v31 + 5);
      if ((_DWORD)v34)
      {
        v35 = (WTF **)*((_QWORD *)v31 + 1);
        v36 = 8 * v34;
        do
        {
          v37 = *v35;
          *v35 = 0;
          if (v37)
            WTF::RefCounted<WebCore::Touch>::deref(v37, v7);
          ++v35;
          v36 -= 8;
        }
        while (v36);
      }
      v38 = (WTF *)*((_QWORD *)v31 + 1);
      if (v38)
      {
        *((_QWORD *)v31 + 1) = 0;
        *((_DWORD *)v31 + 4) = 0;
        WTF::fastFree(v38, v7);
      }
      WTF::fastFree(v31, v7);
    }
    else
    {
      --*(_DWORD *)v31;
    }
  }
LABEL_19:
  v32 = v40;
  v40 = 0;
  if (v32)
    WTF::fastFree(v32, v7);
  return v8;
}

uint64_t WebCore::JSTouchList::destroy(uint64_t this, JSC::JSCell *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;

  v2 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = *(unsigned int *)(v2 + 20);
      if ((_DWORD)v3)
      {
        v4 = *(WTF ***)(v2 + 8);
        v5 = 8 * v3;
        do
        {
          v6 = *v4;
          *v4 = 0;
          if (v6)
            WTF::RefCounted<WebCore::Touch>::deref(v6, a2);
          ++v4;
          v5 -= 8;
        }
        while (v5);
      }
      v7 = *(WTF **)(v2 + 8);
      if (v7)
      {
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
        WTF::fastFree(v7, a2);
      }
      return WTF::fastFree((WTF *)v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSTouchList::put(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  char **v11;
  BOOL v12;
  WebCore::JSDOMGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  JSC::VM *v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t result;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v32;
  int OwnProperty;
  int v34;
  int v35;
  char hasExceptionsAfterHandlingTraps;
  _BYTE v37[16];
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v8 = *(_QWORD *)(a5 + 8);
  if (v8 != a1)
    return JSC::JSObject::put();
  v9 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &WebCore::JSDOMGlobalObject::s_info && v11 != 0);
  }
  if (v10)
    v14 = (WebCore::JSDOMGlobalObject *)a2;
  else
    v14 = 0;
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v14);
  if (v15)
  {
    v16 = v15;
    if (!*(_BYTE *)(v15 + 274))
    {
      v17 = *(_BYTE **)(v15 + 496);
      if (!v17)
        v17 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v16 - 192));
      if (*(_QWORD *)v17)
      {
        v18 = *(_QWORD *)(*(_QWORD *)v17 + 8);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 680);
          if (*(_BYTE *)(v19 + 243))
          {
            if (!*(_BYTE *)(v19 + 242))
              goto LABEL_23;
          }
          else if ((*(_QWORD *)(v19 + 688) & 0x80000) == 0)
          {
            goto LABEL_23;
          }
          if (v17[65])
            return JSC::JSObject::put();
        }
      }
    }
  }
LABEL_23:
  if (!a3)
    return JSC::JSObject::put();
  v20 = *(_DWORD *)(a3 + 16);
  if ((v20 & 0x20) != 0)
    return JSC::JSObject::put();
  v21 = *(JSC::VM **)(a2 + 56);
  v22 = *(_BYTE **)(a3 + 8);
  v23 = *(unsigned int *)(a3 + 4);
  if ((v20 & 4) != 0)
  {
    if (!(_DWORD)v23)
      return JSC::JSObject::put();
    v24 = *v22 - 48;
    if (v24 > 9 || v23 >= 2 && *v22 == 48)
      return JSC::JSObject::put();
    v30 = v22 + 1;
    v31 = v23 - 1;
    while (v31)
    {
      if (v24 <= 0x19999999)
      {
        v32 = *v30 - 48;
        if (v32 <= 9)
        {
          v29 = __CFADD__(v32, 10 * v24);
          v24 = v32 + 10 * v24;
          ++v30;
          --v31;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  else
  {
    if (!(_DWORD)v23)
      return JSC::JSObject::put();
    v24 = *(unsigned __int16 *)v22 - 48;
    if (v24 > 9 || v23 >= 2 && *(_WORD *)v22 == 48)
      return JSC::JSObject::put();
    v26 = (unsigned __int16 *)(v22 + 2);
    v27 = v23 - 1;
    while (v27)
    {
      if (v24 <= 0x19999999)
      {
        v28 = *v26 - 48;
        if (v28 <= 9)
        {
          v29 = __CFADD__(v28, 10 * v24);
          v24 = v28 + 10 * v24;
          ++v26;
          --v27;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  if (v24 == -1)
    return JSC::JSObject::put();
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 14;
  v38 = 0xFFFFFFFF00000000;
  v40 = 0;
  v41 = 0;
  v39 = v8;
  v42 = 0x20000;
  v43 = 0;
  LOBYTE(v44) = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  OwnProperty = WebCore::JSTouchList::legacyPlatformObjectGetOwnProperty(a1, a2, a3, (uint64_t)v37);
  if (*((_DWORD *)v21 + 20)
    && (v35 = OwnProperty,
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v21),
        OwnProperty = v35,
        (hasExceptionsAfterHandlingTraps & 1) != 0)
    || OwnProperty
    && (JSC::PropertyDescriptor::setPropertySlot(), *((_DWORD *)v21 + 20))
    && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
  {
    result = 0;
  }
  else
  {
    result = JSC::ordinarySetWithOwnDescriptor();
  }
  if (v45)
  {
    v34 = *(_DWORD *)(v44 + 4);
    if (!v34)
    {
      __break(0xC471u);
      JUMPOUT(0x195227A34);
    }
    *(_DWORD *)(v44 + 4) = v34 - 1;
  }
  return result;
}

uint64_t WebCore::JSTouchList::putByIndex(JSC::JSObject *a1, JSC::JSCell *a2, JSC::JSGlobalObject *a3, uint64_t a4, objc_class *a5)
{
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  WebCore::JSDOMGlobalObject *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  JSValue v24;
  WTF::StringImpl *v25;

  v10 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
    while (v12 != &WebCore::JSDOMGlobalObject::s_info && v12 != 0);
  }
  if (v11)
    v15 = a2;
  else
    v15 = 0;
  v16 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v15);
  if (!v16)
    goto LABEL_22;
  v17 = v16;
  if (*(_BYTE *)(v16 + 274))
    goto LABEL_22;
  v18 = *(_BYTE **)(v16 + 496);
  if (!v18)
    v18 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v17 - 192));
  if (!*(_QWORD *)v18)
    goto LABEL_22;
  v19 = *(_QWORD *)(*(_QWORD *)v18 + 8);
  if (!v19)
    goto LABEL_22;
  v20 = *(_QWORD *)(v19 + 680);
  if (*(_BYTE *)(v20 + 243))
  {
    if (!*(_BYTE *)(v20 + 242))
      goto LABEL_22;
  }
  else if ((*(_QWORD *)(v20 + 688) & 0x80000) == 0)
  {
    goto LABEL_22;
  }
  if (v18[65])
  {
    v24.super.isa = a5;
    return JSC::JSObject::putByIndex(a1, a2, a3, a4, v24);
  }
LABEL_22:
  JSC::Identifier::from();
  v22 = JSC::ordinarySetSlow();
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v21);
    else
      *(_DWORD *)v25 -= 2;
  }
  return v22;
}

uint64_t WebCore::JSTouchList::deleteProperty(uint64_t a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMGlobalObject::s_info && v6 != 0);
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (v5)
    v10 = a2;
  else
    v10 = 0;
  v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
  if (v11)
  {
    v12 = v11;
    if (!*(_BYTE *)(v11 + 274))
    {
      v13 = *(_BYTE **)(v11 + 496);
      if (!v13)
        v13 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v12 - 192));
      if (*(_QWORD *)v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)v13 + 8);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 680);
          if (*(_BYTE *)(v15 + 243))
          {
            if (*(_BYTE *)(v15 + 242))
            {
LABEL_21:
              if (v13[65])
                return JSC::JSObject::deleteProperty();
            }
          }
          else if ((*(_QWORD *)(v15 + 688) & 0x80000) != 0)
          {
            goto LABEL_21;
          }
        }
      }
    }
  }
  if (a3)
  {
    v16 = *(_DWORD *)(a3 + 16);
    if ((v16 & 0x20) == 0)
    {
      v17 = *(_BYTE **)(a3 + 8);
      v18 = *(unsigned int *)(a3 + 4);
      if ((v16 & 4) != 0)
      {
        if (!(_DWORD)v18 || (v29 = *v17 - 48, v29 > 9) || v18 >= 2 && *v17 == 48)
        {
LABEL_46:
          v30 = 0;
          v31 = 0;
          v32 = 0;
        }
        else
        {
          v33 = v18 - 1;
          v34 = v17 + 1;
          while (v33)
          {
            if (v29 > 0x19999999)
              goto LABEL_46;
            v35 = *v34 - 48;
            if (v35 > 9)
              goto LABEL_46;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v28 = __CFADD__(v35, 10 * v29);
            v29 = v35 + 10 * v29;
            --v33;
            ++v34;
            if (v28)
              goto LABEL_47;
          }
          v30 = 0x100000000;
          if (v29 == -1)
          {
            v30 = 0;
            v31 = 0;
          }
          else
          {
            v31 = v29;
          }
          if (v29 == -1)
            v32 = 0;
          else
            v32 = v29 & 0xFFFFFF00;
        }
LABEL_47:
        v23 = v32 | v31;
        if ((v30 & 0x100000000) != 0)
          return *(_DWORD *)(v9 + 20) <= v23;
      }
      else
      {
        if ((_DWORD)v18
          && (v19 = *(unsigned __int16 *)v17 - 48, v19 <= 9)
          && (v18 < 2 || *(_WORD *)v17 != 48))
        {
          v25 = (unsigned __int16 *)(v17 + 2);
          v26 = v18 - 1;
          while (v26)
          {
            if (v19 <= 0x19999999)
            {
              v27 = *v25 - 48;
              if (v27 <= 9)
              {
                v28 = __CFADD__(v27, 10 * v19);
                v19 = v27 + 10 * v19;
                ++v25;
                --v26;
                if (!v28)
                  continue;
              }
            }
            goto LABEL_29;
          }
          v7 = v19 == -1;
          v22 = v19 & 0xFFFFFF00;
          v21 = v19;
          v20 = 0x100000000;
          if (v7)
          {
            v20 = 0;
            v21 = 0;
            v22 = 0;
          }
        }
        else
        {
LABEL_29:
          v20 = 0;
          v21 = 0;
          v22 = 0;
        }
        v23 = v22 | v21;
        if ((v20 & 0x100000000) != 0)
          return *(_DWORD *)(v9 + 20) <= v23;
      }
    }
  }
  return JSC::JSObject::deleteProperty();
}

uint64_t WebCore::JSTouchList::deletePropertyByIndex(WebCore::JSTouchList *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WebCore::JSDOMGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  v11 = *((_QWORD *)this + 3);
  if (v7)
    v12 = a2;
  else
    v12 = 0;
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v12);
  if (!v13)
    return *(_DWORD *)(v11 + 20) <= a3;
  v14 = v13;
  if (*(_BYTE *)(v13 + 274))
    return *(_DWORD *)(v11 + 20) <= a3;
  v15 = *(_BYTE **)(v13 + 496);
  if (!v15)
    v15 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v14 - 192));
  if (!*(_QWORD *)v15)
    return *(_DWORD *)(v11 + 20) <= a3;
  v16 = *(_QWORD *)(*(_QWORD *)v15 + 8);
  if (!v16)
    return *(_DWORD *)(v11 + 20) <= a3;
  v17 = *(_QWORD *)(v16 + 680);
  if (*(_BYTE *)(v17 + 243))
  {
    if (!*(_BYTE *)(v17 + 242))
      return *(_DWORD *)(v11 + 20) <= a3;
  }
  else if ((*(_QWORD *)(v17 + 688) & 0x80000) == 0)
  {
    return *(_DWORD *)(v11 + 20) <= a3;
  }
  if (!v15[65])
    return *(_DWORD *)(v11 + 20) <= a3;
  return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
}

uint64_t WebCore::JSTouchList::getOwnPropertySlotByIndex(WebCore::JSTouchList *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  uint64_t v7;
  WTF *v8;
  JSC::VM *v9;
  unint64_t v10;
  uint64_t result;

  if ((_DWORD)a3 == -1)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v7 = *((_QWORD *)this + 3);
  if (*(_DWORD *)(v7 + 20) <= a3)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v8 = *(WTF **)(*(_QWORD *)(v7 + 8) + 8 * a3);
  if (!v8)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v9 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v10 = WebCore::toJS(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), v8);
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
    return 0;
  *(_QWORD *)a4 = v10;
  *(_DWORD *)(a4 + 16) = 2;
  *(_QWORD *)(a4 + 32) = this;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

uint64_t WebCore::JSTouchList::getOwnPropertyNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  int v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44[2];
  char v45;
  WTF::StringImpl *v46;

  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 20);
  if (v4)
  {
    v5 = 0;
    v6 = a3 + 1;
    while (1)
    {
      JSC::Identifier::from();
      v8 = v43;
      v46 = v43;
      v9 = *((_DWORD *)v43 + 4);
      if ((v9 & 0x20) != 0)
      {
        if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v43 + 36) & 4) != 0)
          goto LABEL_60;
      }
      else if ((a3[3] & 2) == 0)
      {
        goto LABEL_60;
      }
      v10 = *a3;
      v11 = *(unsigned int *)(*a3 + 20);
      if (v11 <= 0x13)
      {
        if ((_DWORD)v11)
        {
          v12 = *(WTF::StringImpl ***)(v10 + 8);
          while (*v12 != v43)
          {
            ++v12;
            if (!--v11)
              goto LABEL_19;
          }
          goto LABEL_60;
        }
LABEL_19:
        if ((v9 & 0x20) != 0)
        {
          v33 = *(_DWORD *)v8 + 2;
        }
        else
        {
          if ((v9 & 0x10) != 0)
          {
            *(_DWORD *)v8 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v8 = v44[0];
          }
          v33 = *(_DWORD *)v8;
          *(_DWORD *)v8 += 2;
          if (!v33)
          {
            WTF::StringImpl::destroy(v8, v7);
LABEL_54:
            v34 = (uint64_t *)(v10 + 8);
            v44[0] = v8;
            v35 = *(unsigned int *)(v10 + 20);
            if ((_DWORD)v35 == *(_DWORD *)(v10 + 16))
            {
              v36 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)v44);
              v35 = *(unsigned int *)(v10 + 20);
              v37 = *(_QWORD *)(v10 + 8);
              v38 = *v36;
              *v36 = 0;
              *(_QWORD *)(v37 + 8 * v35) = v38;
            }
            else
            {
              v39 = *v34;
              v44[0] = 0;
              *(_QWORD *)(v39 + 8 * v35) = v8;
            }
            *(_DWORD *)(v10 + 20) = v35 + 1;
            v40 = v44[0];
            v44[0] = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v7);
              else
                *(_DWORD *)v40 -= 2;
            }
            goto LABEL_60;
          }
        }
        *(_DWORD *)v8 = v33;
        goto LABEL_54;
      }
      if (!*v6 || !*(_DWORD *)(*v6 - 12))
        break;
LABEL_17:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v46, (uint64_t)v44);
      if (v45)
      {
        v8 = v46;
        v10 = *a3;
        v9 = *((_DWORD *)v46 + 4);
        goto LABEL_19;
      }
LABEL_60:
      v41 = v43;
      v43 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v7);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (++v5 == v4)
        return JSC::JSObject::getOwnPropertyNames();
    }
    v13 = *(uint64_t **)(v10 + 8);
    v14 = &v13[v11];
    while (1)
    {
      v15 = *v13;
      v16 = *v6;
      if (*v6
        || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, 8u, 0), (v16 = *v6) != 0))
      {
        v17 = *(_DWORD *)(v16 - 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = (uint64_t *)(v16 + 8 * v21);
      v23 = *v22;
      if (*v22)
      {
        v24 = 0;
        v25 = 1;
        while (v23 != v15)
        {
          if (v23 == -1)
            v24 = v22;
          v21 = (v21 + v25) & v17;
          v22 = (uint64_t *)(v16 + 8 * v21);
          v23 = *v22;
          ++v25;
          if (!*v22)
          {
            if (v24)
            {
              *v24 = 0;
              --*(_DWORD *)(*v6 - 16);
              v22 = v24;
            }
            goto LABEL_34;
          }
        }
        goto LABEL_47;
      }
LABEL_34:
      *v22 = v15;
      v26 = *v6;
      v27 = *v6 ? *(_DWORD *)(v26 - 12) + 1 : 1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *v6;
      v29 = *v6 ? *(_DWORD *)(v28 - 12) : 0;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 > 0x400)
        break;
      if (3 * v31 <= 4 * v30)
      {
        if ((_DWORD)v31)
          goto LABEL_43;
        v32 = 8;
        goto LABEL_46;
      }
LABEL_47:
      if (++v13 == v14)
        goto LABEL_17;
    }
    if (v31 > 2 * v30)
      goto LABEL_47;
LABEL_43:
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_46:
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, v32, v22);
    goto LABEL_47;
  }
  return JSC::JSObject::getOwnPropertyNames();
}

uint64_t WebCore::JSTouchList::defineOwnProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  _BYTE *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;

  if (!a3)
    return JSC::JSObject::defineOwnProperty();
  v5 = *(_DWORD *)(a3 + 16);
  if ((v5 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty();
  v6 = *(_BYTE **)(a3 + 8);
  v7 = *(unsigned int *)(a3 + 4);
  if ((v5 & 4) != 0)
  {
    if (!(_DWORD)v7)
      return JSC::JSObject::defineOwnProperty();
    v8 = *v6 - 48;
    if (v8 > 9 || v7 >= 2 && *v6 == 48)
      return JSC::JSObject::defineOwnProperty();
    v14 = v7 - 1;
    v15 = v6 + 1;
    while (v14)
    {
      if (v8 <= 0x19999999)
      {
        v16 = *v15 - 48;
        if (v16 <= 9)
        {
          v13 = __CFADD__(v16, 10 * v8);
          v8 = v16 + 10 * v8;
          --v14;
          ++v15;
          if (!v13)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty();
    }
  }
  else
  {
    if (!(_DWORD)v7)
      return JSC::JSObject::defineOwnProperty();
    v8 = *(unsigned __int16 *)v6 - 48;
    if (v8 > 9 || v7 >= 2 && *(_WORD *)v6 == 48)
      return JSC::JSObject::defineOwnProperty();
    v10 = (unsigned __int16 *)(v6 + 2);
    v11 = v7 - 1;
    while (v11)
    {
      if (v8 <= 0x19999999)
      {
        v12 = *v10 - 48;
        if (v12 <= 9)
        {
          v13 = __CFADD__(v12, 10 * v8);
          v8 = v12 + 10 * v8;
          ++v10;
          --v11;
          if (!v13)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty();
    }
  }
  if (v8 == -1)
    return JSC::JSObject::defineOwnProperty();
  if (a5)
    JSC::throwTypeError();
  return 0;
}

uint64_t WebCore::JSTouchList::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSTouchListPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSTouchListPrototype::create(WebCore::JSTouchListPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  JSC::Structure *v20;
  int v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  JSC::Structure **v30;
  int *v31;
  int v32;
  int v33;
  JSC::Structure *v34;
  int v35;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v23 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v23);
    *((_QWORD *)this + 4865) = SlowCase + (int)v23;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSTouchList::s_info, &WebCore::JSTouchListPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2712);
  v10 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28) + 672);
  v11 = (WTF::StringImpl *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  if (((unint64_t)v11 >> 4)
    && (((unint64_t)v11 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x20)) == 0
    && (v12 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)), this)) != 0&& (v26 = v11, v13 = JSC::PropertyTable::get(v12, (uint64_t *)&v26), (_DWORD)v13 != -1))
  {
    if ((int)v13 > 63)
    {
      v24 = *(_QWORD *)(v10 + 8) - 8;
      v25 = 0x3F00000000 - (v13 << 32);
    }
    else
    {
      v24 = v10 + 16;
      v25 = v13 << 32;
    }
    v14 = *(_QWORD *)(v24 + (v25 >> 29));
  }
  else
  {
    v14 = 0;
  }
  v26 = 0;
  v27 = SlowCase;
  v28 = 0x1000000FFFFFFFFLL;
  v29 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v9, v14, 4, (uint64_t)&v26);
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v15);
  else
    *(_DWORD *)v11 -= 2;
  v16 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v18 = JSC::JSString::create((uint64_t)this, &v26);
  v19 = v26;
  v26 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v35 = *(_DWORD *)SlowCase;
  v34 = v20;
  v21 = JSC::Structure::outOfLineCapacity(v20);
  v32 = 0;
  v33 = v21;
  v26 = (WTF::StringImpl *)&v33;
  v27 = SlowCase;
  v28 = (uint64_t)this;
  v29 = &v35;
  v30 = &v34;
  v31 = &v32;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v20, this, v16, 6, (uint64_t)&v26);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v32, v18);
  *((_DWORD *)v20 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTouchList>,(WebCore::DOMConstructorID)3>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 24);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSTouchList>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSTouchList::s_info + ~((_QWORD)&WebCore::JSTouchList::s_info << 32)) ^ (((unint64_t)&WebCore::JSTouchList::s_info + ~((_QWORD)&WebCore::JSTouchList::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSTouchList::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSTouchList::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSTouchListPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSTouchListPrototype::create((WebCore::JSTouchListPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSTouchList::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSTouchList::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 24) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

uint64_t WebCore::JSTouchList::legacyPlatformObjectGetOwnProperty(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  JSC::VM *v6;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t result;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  uint64_t v41;
  WTF *v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;

  v6 = *(JSC::VM **)(a2 + 56);
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot();
    return 0;
  }
  v8 = *(_DWORD *)(a3 + 16);
  if ((v8 & 0x20) == 0)
  {
    v9 = *(_BYTE **)(a3 + 8);
    v10 = *(unsigned int *)(a3 + 4);
    if ((v8 & 4) != 0)
    {
      if (!(_DWORD)v10)
        goto LABEL_8;
      v11 = *v9 - 48;
      if (v11 > 9 || v10 >= 2 && *v9 == 48)
        goto LABEL_8;
      v38 = v10 - 1;
      v39 = v9 + 1;
      while (v38)
      {
        if (v11 <= 0x19999999)
        {
          v40 = *v39 - 48;
          if (v40 <= 9)
          {
            v24 = __CFADD__(v40, 10 * v11);
            v11 = v40 + 10 * v11;
            --v38;
            ++v39;
            if (!v24)
              continue;
          }
        }
        goto LABEL_8;
      }
    }
    else
    {
      if (!(_DWORD)v10)
        goto LABEL_8;
      v11 = *(unsigned __int16 *)v9 - 48;
      if (v11 > 9 || v10 >= 2 && *(_WORD *)v9 == 48)
        goto LABEL_8;
      v21 = (unsigned __int16 *)(v9 + 2);
      v22 = v10 - 1;
      while (v22)
      {
        if (v11 <= 0x19999999)
        {
          v23 = *v21 - 48;
          if (v23 <= 9)
          {
            v24 = __CFADD__(v23, 10 * v11);
            v11 = v23 + 10 * v11;
            ++v21;
            --v22;
            if (!v24)
              continue;
          }
        }
        goto LABEL_8;
      }
    }
    if (v11 != -1)
    {
      v41 = *(_QWORD *)(a1 + 24);
      if (*(_DWORD *)(v41 + 20) > v11)
      {
        v42 = *(WTF **)(*(_QWORD *)(v41 + 8) + 8 * v11);
        if (v42)
        {
          v43 = WebCore::toJS(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28), v42);
          if (!*((_DWORD *)v6 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) == 0)
          {
            *(_QWORD *)a4 = v43;
            *(_DWORD *)(a4 + 16) = 2;
            *(_QWORD *)(a4 + 32) = a1;
            result = 1;
            *(_BYTE *)(a4 + 49) = 1;
            return result;
          }
          return 0;
        }
      }
    }
  }
LABEL_8:
  if (!(a3 >> 4)
    || (v12 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), ((a3 >> 4) & ~*(_DWORD *)(v12 + 0x20)) != 0)
    || (v13 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v6)) == 0
    || (v49 = a3, v14 = JSC::PropertyTable::get(v13, (uint64_t *)&v49), (_DWORD)v14 == -1))
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      return 1;
    v15 = *(_DWORD *)(a3 + 16);
    if ((v15 & 0x20) != 0)
      return 0;
    v16 = *(_BYTE **)(a3 + 8);
    v17 = *(unsigned int *)(a3 + 4);
    if ((v15 & 4) != 0)
    {
      if ((_DWORD)v17)
      {
        v44 = *v16 - 48;
        if (v44 > 9 || v17 >= 2 && *v16 == 48)
        {
LABEL_80:
          v45 = 0;
        }
        else
        {
          v46 = v16 + 1;
          v47 = v17 - 1;
          while (v47)
          {
            if (v44 > 0x19999999)
              goto LABEL_80;
            v48 = *v46 - 48;
            if (v48 > 9)
              goto LABEL_80;
            v45 = 0;
            v24 = __CFADD__(v48, 10 * v44);
            v44 = v48 + 10 * v44;
            ++v46;
            --v47;
            if (v24)
              goto LABEL_81;
          }
          v45 = 0x100000000;
          if (v44 == -1)
            v45 = 0;
        }
      }
      else
      {
        v45 = 0;
      }
LABEL_81:
      if ((v45 & 0x100000000) == 0)
        return 0;
    }
    else
    {
      if ((_DWORD)v17)
      {
        v18 = *(unsigned __int16 *)v16 - 48;
        if (v18 > 9 || v17 >= 2 && *(_WORD *)v16 == 48)
        {
LABEL_19:
          v19 = 0;
        }
        else
        {
          v29 = (unsigned __int16 *)(v16 + 2);
          v30 = v17 - 1;
          while (v30)
          {
            if (v18 <= 0x19999999)
            {
              v31 = *v29 - 48;
              if (v31 <= 9)
              {
                v24 = __CFADD__(v31, 10 * v18);
                v18 = v31 + 10 * v18;
                ++v29;
                --v30;
                if (!v24)
                  continue;
              }
            }
            goto LABEL_19;
          }
          v32 = v18 == -1;
          v19 = 0x100000000;
          if (v32)
            v19 = 0;
        }
      }
      else
      {
        v19 = 0;
      }
      if ((v19 & 0x100000000) == 0)
        return 0;
    }
    return JSC::JSObject::getOwnPropertySlotByIndex();
  }
  if ((int)v14 > 63)
  {
    v25 = *(_QWORD *)(a1 + 8) - 8;
    v26 = 0x3F00000000 - (v14 << 32);
  }
  else
  {
    v25 = a1 + 16;
    v26 = v14 << 32;
  }
  v27 = *(_QWORD *)(v25 + (v26 >> 29));
  if ((v27 & 0xFFFE000000000002) != 0)
  {
LABEL_36:
    *(_QWORD *)a4 = v27;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(v14);
    *(_DWORD *)(a4 + 20) = v14;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v28 = *(unsigned __int8 *)(v27 + 5);
  if (v28 != 6)
  {
    if (v28 == 5)
    {
      JSC::JSObject::fillGetterPropertySlot();
      return 1;
    }
    goto LABEL_36;
  }
  v33 = *(_DWORD *)(v12 + 16) & 3;
  v35 = *(_QWORD *)(v27 + 8);
  v34 = *(_QWORD *)(v27 + 16);
  if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C))
  {
    v37 = *(_QWORD *)(v27 + 24);
    v36 = *(_QWORD *)(v27 + 32);
    *(_QWORD *)a4 = v35;
    *(_QWORD *)(a4 + 8) = v34;
    *(_DWORD *)(a4 + 16) = HIDWORD(v14);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v33 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v37;
    *(_QWORD *)(a4 + 80) = v36;
  }
  else
  {
    *(_QWORD *)a4 = v35;
    *(_QWORD *)(a4 + 8) = v34;
    *(_DWORD *)(a4 + 16) = HIDWORD(v14);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v33 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

unint64_t WebCore::jsTouchListConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSTouchListPrototype::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSTouchList>,(WebCore::DOMConstructorID)3>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsTouchList_length(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 20);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSTouchListOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSTouchListOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  WTF **v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_QWORD *)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_QWORD *)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = *(unsigned int *)(v3 + 20);
    if ((_DWORD)v24)
    {
      v25 = *(WTF ***)(v3 + 8);
      v26 = 8 * v24;
      do
      {
        v27 = *v25;
        *v25 = 0;
        if (v27)
          WTF::RefCounted<WebCore::Touch>::deref(v27, a2);
        ++v25;
        v26 -= 8;
      }
      while (v26);
    }
    v28 = *(WTF **)(v3 + 8);
    if (v28)
    {
      *(_QWORD *)(v3 + 8) = 0;
      *(_DWORD *)(v3 + 16) = 0;
      WTF::fastFree(v28, a2);
    }
    WTF::fastFree((WTF *)v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::createWrapper<WebCore::TouchList,WebCore::TouchList>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSTouchList::s_info + ~((_QWORD)&WebCore::JSTouchList::s_info << 32)) ^ (((unint64_t)&WebCore::JSTouchList::s_info + ~((_QWORD)&WebCore::JSTouchList::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSTouchList::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSTouchList::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSTouchListPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSTouchListPrototype::create((WebCore::JSTouchListPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSTouchList::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSTouchList::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 24);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 24))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 24);
    *(_QWORD *)(v26 + 24) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 24);
  *(_QWORD *)(v22 + 24) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE337550 & 1) == 0)
  {
    qword_1EE337548 = (uint64_t)&off_1E334B040;
    byte_1EE337550 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337548;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::TouchList>(uint64_t a1, WTF *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WTF *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  WTF *v13;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  WTF *v20;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(WTF **)(v2 + 16 * v7);
    if (v8 == a2)
    {
LABEL_6:
      v10 = *(_QWORD *)(v2 + 16 * v7 + 8);
      if (v10)
      {
        if ((*(_BYTE *)(v10 + 8) & 3) == 0)
        {
          v11 = *(_QWORD *)v10;
          if (*(_QWORD *)v10)
            return v11;
        }
      }
    }
    else
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(WTF **)(v2 + 16 * v7);
        ++v9;
        if (v8 == a2)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a2;
  v20 = a2;
  v11 = WebCore::createWrapper<WebCore::TouchList,WebCore::TouchList>(a1, &v20);
  v13 = v20;
  v20 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
    {
      v15 = *((unsigned int *)v13 + 5);
      if ((_DWORD)v15)
      {
        v16 = (WTF **)*((_QWORD *)v13 + 1);
        v17 = 8 * v15;
        do
        {
          v18 = *v16;
          *v16 = 0;
          if (v18)
            WTF::RefCounted<WebCore::Touch>::deref(v18, v12);
          ++v16;
          v17 -= 8;
        }
        while (v17);
      }
      v19 = (WTF *)*((_QWORD *)v13 + 1);
      if (v19)
      {
        *((_QWORD *)v13 + 1) = 0;
        *((_DWORD *)v13 + 4) = 0;
        WTF::fastFree(v19, v12);
      }
      WTF::fastFree(v13, v12);
    }
    else
    {
      --*(_DWORD *)v13;
    }
  }
  return v11;
}

void WebCore::JSApplePayErrorOwner::~JSApplePayErrorOwner(WebCore::JSApplePayErrorOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSApplePaySessionOwner::~JSApplePaySessionOwner(WebCore::JSApplePaySessionOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSApplePaySetupOwner::~JSApplePaySetupOwner(WebCore::JSApplePaySetupOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSApplePaySetupFeatureOwner::~JSApplePaySetupFeatureOwner(WebCore::JSApplePaySetupFeatureOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSTouchOwner::~JSTouchOwner(WebCore::JSTouchOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSTouchListOwner::~JSTouchListOwner(WebCore::JSTouchListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore16ApplePayLineItemENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest(WebCore::ApplePayAutomaticReloadPaymentRequest *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
}

uint64_t WebCore::ApplePayAutomaticReloadPaymentRequest::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  v6 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  v7 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  v9 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *((_OWORD *)a2 + 2);
  v11 = *((_OWORD *)a2 + 3);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v11;
  v12 = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = 0;
  v13 = *(WTF::StringImpl **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
  v14 = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = 0;
  v15 = *(WTF::StringImpl **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = 0;
  v17 = *(WTF::StringImpl **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v16;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = 0;
  v19 = *(WTF::StringImpl **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v18;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore37ApplePayAutomaticReloadPaymentRequestENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayAutomaticReloadPaymentRequest *this)
{
  WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest(this, this);
}

uint64_t WebCore::ApplePayDeferredPaymentRequest::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  v6 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  v7 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  v9 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *((_OWORD *)a2 + 2);
  v11 = *((_OWORD *)a2 + 3);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v11;
  v12 = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = 0;
  v13 = *(WTF::StringImpl **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  v14 = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = 0;
  v15 = *(WTF::StringImpl **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = 0;
  v17 = *(WTF::StringImpl **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v16;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = 0;
  v19 = *(WTF::StringImpl **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v18;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = 0;
  v21 = *(WTF::StringImpl **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v20;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, a2);
    else
      *(_DWORD *)v21 -= 2;
  }
  return a1;
}

void WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest(WebCore::ApplePayDeferredPaymentRequest *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore30ApplePayDeferredPaymentRequestENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayDeferredPaymentRequest *this)
{
  WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest(this, this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27ApplePayDisbursementRequestENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _BYTE *a2)
{
  WTF *v2;

  if (a2[16])
  {
    v2 = *(WTF **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)a2 = 0;
      *((_DWORD *)a2 + 2) = 0;
      WTF::fastFree(v2, a2);
    }
  }
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore16ApplePayLineItemELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, unsigned int *a2)
{
  return WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2, (WTF::StringImpl *)a2);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore27ApplePayPaymentTokenContextELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::ApplePayPaymentTokenContext *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *(WebCore::ApplePayPaymentTokenContext **)a2;
    v5 = 40 * v3;
    do
    {
      WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v4, a2);
      v4 = (WebCore::ApplePayPaymentTokenContext *)(v6 + 40);
      v5 -= 40;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WebCore::ApplePayRecurringPaymentRequest::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  v6 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  v7 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  v9 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *((_OWORD *)a2 + 2);
  v11 = *((_OWORD *)a2 + 3);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v11;
  v12 = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = 0;
  v13 = *(WTF::StringImpl **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
  std::__optional_storage_base<WebCore::ApplePayLineItem,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ApplePayLineItem,false>>(a1 + 88, (uint64_t)a2 + 88);
  v15 = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = 0;
  v16 = *(WTF::StringImpl **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v15;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = 0;
  v18 = *(WTF::StringImpl **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v17;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v14);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = 0;
  v20 = *(WTF::StringImpl **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v19;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v14);
    else
      *(_DWORD *)v20 -= 2;
  }
  return a1;
}

__n128 std::__optional_storage_base<WebCore::ApplePayLineItem,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ApplePayLineItem,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  __n128 result;
  __int128 v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  if (*(unsigned __int8 *)(a1 + 80) == *(unsigned __int8 *)(a2 + 80))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v4 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      v5 = *(WTF::StringImpl **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v4;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = 0;
      v7 = *(WTF::StringImpl **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      result = *(__n128 *)(a2 + 24);
      v9 = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = v9;
      *(__n128 *)(a1 + 24) = result;
      v10 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a2 + 64) = 0;
      v11 = *(WTF::StringImpl **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v10;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
    }
  }
  else if (*(_BYTE *)(a1 + 80))
  {
    v12 = *(WTF::StringImpl **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v14 -= 2;
    }
    *(_BYTE *)(a1 + 80) = 0;
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v15 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a1 + 8) = v15;
    v16 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 16) = v16;
    result = *(__n128 *)(a2 + 24);
    v17 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v17;
    *(__n128 *)(a1 + 24) = result;
    v18 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a1 + 64) = v18;
    *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
    *(_BYTE *)(a1 + 80) = 1;
  }
  return result;
}

void WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest(WebCore::ApplePayRecurringPaymentRequest *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  if (*((_BYTE *)this + 168))
  {
    v6 = (WTF::StringImpl *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = (WTF::StringImpl *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, a2);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = (WTF::StringImpl *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, a2);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore31ApplePayRecurringPaymentRequestENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayRecurringPaymentRequest *this)
{
  WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest(this, this);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore13ApplePayErrorENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a2;
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)(v6 + 8) == 1)
        {
          v7 = *(WTF::StringImpl **)(v6 + 16);
          *(_QWORD *)(v6 + 16) = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
          WTF::fastFree((WTF *)v6, a2);
        }
        else
        {
          --*(_DWORD *)(v6 + 8);
        }
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore22ApplePayShippingMethodELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  WTF *result;

  v3 = *(_DWORD *)(a2 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(*(WTF::StringImpl **)a2, (WTF::StringImpl *)(*(_QWORD *)a2 + 104 * v3));
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

void WebCore::ApplePayCouponCodeUpdate::~ApplePayCouponCodeUpdate(WebCore::ApplePayCouponCodeUpdate *this, void *a2)
{
  unsigned int v3;
  WTF *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF *v10;

  v3 = *((_DWORD *)this + 161);
  if (v3)
    WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(*((WTF::StringImpl **)this + 79), (WTF::StringImpl *)(*((_QWORD *)this + 79) + 104 * v3));
  v4 = (WTF *)*((_QWORD *)this + 79);
  if (v4)
  {
    *((_QWORD *)this + 79) = 0;
    *((_DWORD *)this + 160) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 157);
  if ((_DWORD)v5)
  {
    v6 = (uint64_t *)*((_QWORD *)this + 77);
    v7 = 8 * v5;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)(v8 + 8) == 1)
        {
          v9 = *(WTF::StringImpl **)(v8 + 16);
          *(_QWORD *)(v8 + 16) = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v9 -= 2;
          }
          WTF::fastFree((WTF *)v8, a2);
        }
        else
        {
          --*(_DWORD *)(v8 + 8);
        }
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v10 = (WTF *)*((_QWORD *)this + 77);
  if (v10)
  {
    *((_QWORD *)this + 77) = 0;
    *((_DWORD *)this + 156) = 0;
    WTF::fastFree(v10, a2);
  }
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase(this, a2);
}

void WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase(WebCore::ApplePayDetailsUpdateBase *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WebCore::ApplePayPaymentTokenContext *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  if (*((_BYTE *)this + 608))
  {
    if (*((_BYTE *)this + 600))
    {
      v3 = (WTF *)*((_QWORD *)this + 73);
      if (v3)
      {
        *((_QWORD *)this + 73) = 0;
        *((_DWORD *)this + 148) = 0;
        WTF::fastFree(v3, a2);
      }
    }
  }
  if (*((_BYTE *)this + 576))
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDetailsUpdateBase *)((char *)this + 448), (WTF::StringImpl *)a2);
  if (*((_BYTE *)this + 440))
  {
    v4 = *((unsigned int *)this + 109);
    if ((_DWORD)v4)
    {
      v5 = (WebCore::ApplePayPaymentTokenContext *)*((_QWORD *)this + 53);
      v6 = 40 * v4;
      do
      {
        WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v5, (WTF::StringImpl *)a2);
        v5 = (WebCore::ApplePayPaymentTokenContext *)(v7 + 40);
        v6 -= 40;
      }
      while (v6);
    }
    v8 = (WTF *)*((_QWORD *)this + 53);
    if (v8)
    {
      *((_QWORD *)this + 53) = 0;
      *((_DWORD *)this + 108) = 0;
      WTF::fastFree(v8, a2);
    }
  }
  if (*((_BYTE *)this + 416))
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayDetailsUpdateBase *)((char *)this + 304), (WTF::StringImpl *)a2);
  if (*((_BYTE *)this + 296))
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayDetailsUpdateBase *)((char *)this + 96), (WTF::StringImpl *)a2);
  WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 20, (WTF::StringImpl *)a2);
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore20ApplePayContactFieldELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void WebCore::ApplePayError::~ApplePayError(WebCore::ApplePayError *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::fastFree(this, a2);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore23ApplePayInstallmentItemELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::ApplePayInstallmentItem *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *(WebCore::ApplePayInstallmentItem **)a2;
    v5 = 48 * v3;
    do
    {
      WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem(v4, a2);
      v4 = (WebCore::ApplePayInstallmentItem *)(v6 + 48);
      v5 -= 48;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void WebCore::ApplePayModifier::~ApplePayModifier(WebCore::ApplePayModifier *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WebCore::ApplePayPaymentTokenContext *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  unsigned int v9;
  WTF *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  if (*((_BYTE *)this + 640))
  {
    if (*((_BYTE *)this + 632))
    {
      v3 = (WTF *)*((_QWORD *)this + 77);
      if (v3)
      {
        *((_QWORD *)this + 77) = 0;
        *((_DWORD *)this + 156) = 0;
        WTF::fastFree(v3, a2);
      }
    }
  }
  if (*((_BYTE *)this + 608))
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayModifier *)((char *)this + 480), (WTF::StringImpl *)a2);
  if (*((_BYTE *)this + 472))
  {
    v4 = *((unsigned int *)this + 117);
    if ((_DWORD)v4)
    {
      v5 = (WebCore::ApplePayPaymentTokenContext *)*((_QWORD *)this + 57);
      v6 = 40 * v4;
      do
      {
        WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v5, (WTF::StringImpl *)a2);
        v5 = (WebCore::ApplePayPaymentTokenContext *)(v7 + 40);
        v6 -= 40;
      }
      while (v6);
    }
    v8 = (WTF *)*((_QWORD *)this + 57);
    if (v8)
    {
      *((_QWORD *)this + 57) = 0;
      *((_DWORD *)this + 116) = 0;
      WTF::fastFree(v8, a2);
    }
  }
  if (*((_BYTE *)this + 448))
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayModifier *)((char *)this + 336), (WTF::StringImpl *)a2);
  if (*((_BYTE *)this + 328))
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayModifier *)((char *)this + 128), (WTF::StringImpl *)a2);
  v9 = *((_DWORD *)this + 31);
  if (v9)
    WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(*((WTF::StringImpl **)this + 14), (WTF::StringImpl *)(*((_QWORD *)this + 14) + 104 * v9));
  v10 = (WTF *)*((_QWORD *)this + 14);
  if (v10)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v10, a2);
  }
  WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 24, (WTF::StringImpl *)a2);
  if (*((_BYTE *)this + 88))
  {
    v12 = (WTF::StringImpl *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = (WTF::StringImpl *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = (WTF::StringImpl *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27ApplePayPaymentOrderDetailsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22ApplePayPaymentContactENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayPaymentContact *this)
{
  WebCore::ApplePayPaymentContact::~ApplePayPaymentContact(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore19ApplePayPaymentPassENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::ApplePayPaymentMethodUpdate::~ApplePayPaymentMethodUpdate(WebCore::ApplePayPaymentMethodUpdate *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int v4;
  WTF *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_DWORD *)this + 161);
  if (v4)
    WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(*((WTF::StringImpl **)this + 79), (WTF::StringImpl *)(*((_QWORD *)this + 79) + 104 * v4));
  v5 = (WTF *)*((_QWORD *)this + 79);
  if (v5)
  {
    *((_QWORD *)this + 79) = 0;
    *((_DWORD *)this + 160) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *((unsigned int *)this + 157);
  if ((_DWORD)v6)
  {
    v7 = (uint64_t *)*((_QWORD *)this + 77);
    v8 = 8 * v6;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)(v9 + 8) == 1)
        {
          v10 = *(WTF::StringImpl **)(v9 + 16);
          *(_QWORD *)(v9 + 16) = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, a2);
            else
              *(_DWORD *)v10 -= 2;
          }
          WTF::fastFree((WTF *)v9, a2);
        }
        else
        {
          --*(_DWORD *)(v9 + 8);
        }
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v11 = (WTF *)*((_QWORD *)this + 77);
  if (v11)
  {
    *((_QWORD *)this + 77) = 0;
    *((_DWORD *)this + 156) = 0;
    WTF::fastFree(v11, a2);
  }
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase(this, a2);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore15ApplePayFeatureELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WebCore::ApplePayInstallmentConfiguration::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WebCore::ApplePayInstallmentItem *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v7 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v9 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v11 = *(WTF::StringImpl **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v13 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v15 = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v16)
  {
    v17 = *(WebCore::ApplePayInstallmentItem **)(a1 + 64);
    v18 = 48 * v16;
    do
    {
      WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem(v17, (WTF::StringImpl *)a2);
      v17 = (WebCore::ApplePayInstallmentItem *)(v19 + 48);
      v18 -= 48;
    }
    while (v18);
  }
  v20 = *(WTF **)(a1 + 64);
  if (v20)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v20, (void *)a2);
  }
  v21 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 64) = v21;
  LODWORD(v21) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a1 + 72) = v21;
  LODWORD(v21) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_DWORD *)(a1 + 76) = v21;
  v22 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  v23 = *(WTF::StringImpl **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v22;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v23 -= 2;
  }
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore32ApplePayInstallmentConfigurationENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayInstallmentConfiguration *this)
{
  WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration(this, this);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore26ApplePayMerchantCapabilityELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void WebCore::ApplePayPaymentRequest::~ApplePayPaymentRequest(WebCore::ApplePayPaymentRequest *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WebCore::ApplePayPaymentTokenContext *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  WTF *v13;
  WTF::StringImpl *v14;

  if (*((_BYTE *)this + 1232))
  {
    if (*((_BYTE *)this + 1224))
    {
      v3 = (WTF *)*((_QWORD *)this + 151);
      if (v3)
      {
        *((_QWORD *)this + 151) = 0;
        *((_DWORD *)this + 304) = 0;
        WTF::fastFree(v3, a2);
      }
    }
  }
  if (*((_BYTE *)this + 1200))
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayPaymentRequest *)((char *)this + 1072), (WTF::StringImpl *)a2);
  if (*((_BYTE *)this + 1064))
  {
    v4 = *((unsigned int *)this + 265);
    if ((_DWORD)v4)
    {
      v5 = (WebCore::ApplePayPaymentTokenContext *)*((_QWORD *)this + 131);
      v6 = 40 * v4;
      do
      {
        WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v5, (WTF::StringImpl *)a2);
        v5 = (WebCore::ApplePayPaymentTokenContext *)(v7 + 40);
        v6 -= 40;
      }
      while (v6);
    }
    v8 = (WTF *)*((_QWORD *)this + 131);
    if (v8)
    {
      *((_QWORD *)this + 131) = 0;
      *((_DWORD *)this + 264) = 0;
      WTF::fastFree(v8, a2);
    }
  }
  if (*((_BYTE *)this + 1040))
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayPaymentRequest *)((char *)this + 928), (WTF::StringImpl *)a2);
  if (*((_BYTE *)this + 920))
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayPaymentRequest *)((char *)this + 720), (WTF::StringImpl *)a2);
  if (*((_BYTE *)this + 712))
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 174, (WTF::StringImpl *)a2);
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (*((_BYTE *)this + 608))
  {
    v12 = *((_DWORD *)this + 151);
    if (v12)
      WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(*((WTF::StringImpl **)this + 74), (WTF::StringImpl *)(*((_QWORD *)this + 74) + 104 * v12));
    v13 = (WTF *)*((_QWORD *)this + 74);
    if (v13)
    {
      *((_QWORD *)this + 74) = 0;
      *((_DWORD *)this + 150) = 0;
      WTF::fastFree(v13, a2);
    }
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  WebCore::ApplePayRequestBase::~ApplePayRequestBase(this, (WTF::StringImpl *)a2);
}

void WebCore::ApplePayRequestBase::~ApplePayRequestBase(WebCore::ApplePayRequestBase *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  WTF *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  if (*((_BYTE *)this + 536))
    WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayRequestBase *)((char *)this + 440), a2);
  v5 = *((unsigned int *)this + 109);
  if ((_DWORD)v5)
  {
    v15 = (WTF::StringImpl **)*((_QWORD *)this + 53);
    v16 = 8 * v5;
    do
    {
      v17 = *v15;
      *v15 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, a2);
        else
          *(_DWORD *)v17 -= 2;
      }
      ++v15;
      v16 -= 8;
    }
    while (v16);
  }
  v6 = (WTF *)*((_QWORD *)this + 53);
  if (v6)
  {
    *((_QWORD *)this + 53) = 0;
    *((_DWORD *)this + 108) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (*((_BYTE *)this + 408))
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayRequestBase *)((char *)this + 264), a2);
  if (*((_BYTE *)this + 256))
  {
    v8 = (WTF *)*((_QWORD *)this + 30);
    if (v8)
    {
      *((_QWORD *)this + 30) = 0;
      *((_DWORD *)this + 62) = 0;
      WTF::fastFree(v8, a2);
    }
  }
  if (*((_BYTE *)this + 232))
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayRequestBase *)((char *)this + 88), a2);
  if (*((_BYTE *)this + 80))
  {
    v9 = (WTF *)*((_QWORD *)this + 8);
    if (v9)
    {
      *((_QWORD *)this + 8) = 0;
      *((_DWORD *)this + 18) = 0;
      WTF::fastFree(v9, a2);
    }
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *((unsigned int *)this + 13);
  if ((_DWORD)v11)
  {
    v18 = (WTF::StringImpl **)*((_QWORD *)this + 5);
    v19 = 8 * v11;
    do
    {
      v20 = *v18;
      *v18 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, a2);
        else
          *(_DWORD *)v20 -= 2;
      }
      ++v18;
      v19 -= 8;
    }
    while (v19);
  }
  v12 = (WTF *)*((_QWORD *)this + 5);
  if (v12)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = (WTF *)*((_QWORD *)this + 3);
  if (v13)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v13, a2);
  }
  if (*((_BYTE *)this + 16))
  {
    v14 = *(WTF **)this;
    if (*(_QWORD *)this)
    {
      *(_QWORD *)this = 0;
      *((_DWORD *)this + 2) = 0;
      WTF::fastFree(v14, a2);
    }
  }
}

void WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(WebCore::ApplePayPaymentTokenContext *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

uint64_t WebCore::ApplePayPaymentRequest::ApplePayPaymentRequest(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  result = WebCore::ApplePayRequestBase::ApplePayRequestBase(a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 576);
  *(_QWORD *)(a2 + 576) = 0;
  *(_QWORD *)(result + 576) = v4;
  *(_BYTE *)(result + 584) = *(_BYTE *)(a2 + 584);
  *(_BYTE *)(result + 592) = 0;
  *(_BYTE *)(result + 608) = 0;
  if (*(_BYTE *)(a2 + 608))
  {
    *(_QWORD *)(result + 592) = 0;
    *(_QWORD *)(result + 600) = 0;
    v5 = *(_QWORD *)(a2 + 592);
    *(_QWORD *)(a2 + 592) = 0;
    *(_QWORD *)(result + 592) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 600);
    *(_DWORD *)(a2 + 600) = 0;
    *(_DWORD *)(result + 600) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 604);
    *(_DWORD *)(a2 + 604) = 0;
    *(_DWORD *)(result + 604) = v5;
    *(_BYTE *)(result + 608) = 1;
  }
  *(_BYTE *)(result + 616) = *(_BYTE *)(a2 + 616);
  v6 = *(_QWORD *)(a2 + 624);
  *(_QWORD *)(a2 + 624) = 0;
  *(_QWORD *)(result + 624) = v6;
  v7 = *(_QWORD *)(a2 + 632);
  *(_QWORD *)(a2 + 632) = 0;
  *(_QWORD *)(result + 632) = v7;
  v8 = *(_OWORD *)(a2 + 640);
  v9 = *(_OWORD *)(a2 + 656);
  *(_QWORD *)(result + 672) = *(_QWORD *)(a2 + 672);
  *(_OWORD *)(result + 640) = v8;
  *(_OWORD *)(result + 656) = v9;
  v10 = *(_QWORD *)(a2 + 680);
  *(_QWORD *)(a2 + 680) = 0;
  *(_QWORD *)(result + 680) = v10;
  *(_WORD *)(result + 688) = *(_WORD *)(a2 + 688);
  *(_BYTE *)(result + 696) = 0;
  *(_BYTE *)(result + 712) = 0;
  if (*(_BYTE *)(a2 + 712))
  {
    *(_QWORD *)(result + 696) = 0;
    *(_QWORD *)(result + 704) = 0;
    v11 = *(_QWORD *)(a2 + 696);
    *(_QWORD *)(a2 + 696) = 0;
    *(_QWORD *)(result + 696) = v11;
    LODWORD(v11) = *(_DWORD *)(a2 + 704);
    *(_DWORD *)(a2 + 704) = 0;
    *(_DWORD *)(result + 704) = v11;
    LODWORD(v11) = *(_DWORD *)(a2 + 708);
    *(_DWORD *)(a2 + 708) = 0;
    *(_DWORD *)(result + 708) = v11;
    *(_BYTE *)(result + 712) = 1;
  }
  *(_BYTE *)(result + 720) = 0;
  *(_BYTE *)(result + 920) = 0;
  if (*(_BYTE *)(a2 + 920))
  {
    v12 = *(_QWORD *)(a2 + 720);
    *(_QWORD *)(a2 + 720) = 0;
    *(_QWORD *)(result + 720) = v12;
    *(_BYTE *)(result + 728) = *(_BYTE *)(a2 + 728);
    v13 = *(_QWORD *)(a2 + 736);
    *(_QWORD *)(a2 + 736) = 0;
    *(_QWORD *)(result + 736) = v13;
    v14 = *(_QWORD *)(a2 + 744);
    *(_QWORD *)(a2 + 744) = 0;
    *(_QWORD *)(result + 744) = v14;
    v15 = *(_OWORD *)(a2 + 752);
    v16 = *(_OWORD *)(a2 + 768);
    *(_QWORD *)(result + 784) = *(_QWORD *)(a2 + 784);
    *(_OWORD *)(result + 752) = v15;
    *(_OWORD *)(result + 768) = v16;
    v17 = *(_QWORD *)(a2 + 792);
    *(_QWORD *)(a2 + 792) = 0;
    *(_QWORD *)(result + 792) = v17;
    *(_WORD *)(result + 800) = *(_WORD *)(a2 + 800);
    *(_BYTE *)(result + 808) = 0;
    *(_BYTE *)(result + 888) = 0;
    if (*(_BYTE *)(a2 + 888))
    {
      *(_BYTE *)(result + 808) = *(_BYTE *)(a2 + 808);
      v18 = *(_QWORD *)(a2 + 816);
      *(_QWORD *)(a2 + 816) = 0;
      *(_QWORD *)(result + 816) = v18;
      v19 = *(_QWORD *)(a2 + 824);
      *(_QWORD *)(a2 + 824) = 0;
      *(_QWORD *)(result + 824) = v19;
      v20 = *(_OWORD *)(a2 + 832);
      v21 = *(_OWORD *)(a2 + 848);
      *(_QWORD *)(result + 864) = *(_QWORD *)(a2 + 864);
      *(_OWORD *)(result + 832) = v20;
      *(_OWORD *)(result + 848) = v21;
      v22 = *(_QWORD *)(a2 + 872);
      *(_QWORD *)(a2 + 872) = 0;
      *(_QWORD *)(result + 872) = v22;
      *(_WORD *)(result + 880) = *(_WORD *)(a2 + 880);
      *(_BYTE *)(result + 888) = 1;
    }
    v23 = *(_QWORD *)(a2 + 896);
    *(_QWORD *)(a2 + 896) = 0;
    *(_QWORD *)(result + 896) = v23;
    v24 = *(_QWORD *)(a2 + 904);
    *(_QWORD *)(a2 + 904) = 0;
    *(_QWORD *)(result + 904) = v24;
    v25 = *(_QWORD *)(a2 + 912);
    *(_QWORD *)(a2 + 912) = 0;
    *(_QWORD *)(result + 912) = v25;
    *(_BYTE *)(result + 920) = 1;
  }
  *(_BYTE *)(result + 928) = 0;
  *(_BYTE *)(result + 1040) = 0;
  if (*(_BYTE *)(a2 + 1040))
  {
    v26 = *(_QWORD *)(a2 + 928);
    *(_QWORD *)(a2 + 928) = 0;
    *(_QWORD *)(result + 928) = v26;
    *(_BYTE *)(result + 936) = *(_BYTE *)(a2 + 936);
    v27 = *(_QWORD *)(a2 + 944);
    *(_QWORD *)(a2 + 944) = 0;
    *(_QWORD *)(result + 944) = v27;
    v28 = *(_QWORD *)(a2 + 952);
    *(_QWORD *)(a2 + 952) = 0;
    *(_QWORD *)(result + 952) = v28;
    v29 = *(_OWORD *)(a2 + 960);
    v30 = *(_OWORD *)(a2 + 976);
    *(_QWORD *)(result + 992) = *(_QWORD *)(a2 + 992);
    *(_OWORD *)(result + 960) = v29;
    *(_OWORD *)(result + 976) = v30;
    v31 = *(_QWORD *)(a2 + 1000);
    *(_QWORD *)(a2 + 1000) = 0;
    *(_QWORD *)(result + 1000) = v31;
    *(_WORD *)(result + 1008) = *(_WORD *)(a2 + 1008);
    v32 = *(_QWORD *)(a2 + 1016);
    *(_QWORD *)(a2 + 1016) = 0;
    *(_QWORD *)(result + 1016) = v32;
    v33 = *(_QWORD *)(a2 + 1024);
    *(_QWORD *)(a2 + 1024) = 0;
    *(_QWORD *)(result + 1024) = v33;
    v34 = *(_QWORD *)(a2 + 1032);
    *(_QWORD *)(a2 + 1032) = 0;
    *(_QWORD *)(result + 1032) = v34;
    *(_BYTE *)(result + 1040) = 1;
  }
  *(_BYTE *)(result + 1048) = 0;
  *(_BYTE *)(result + 1064) = 0;
  if (*(_BYTE *)(a2 + 1064))
  {
    *(_QWORD *)(result + 1048) = 0;
    *(_QWORD *)(result + 1056) = 0;
    v35 = *(_QWORD *)(a2 + 1048);
    *(_QWORD *)(a2 + 1048) = 0;
    *(_QWORD *)(result + 1048) = v35;
    LODWORD(v35) = *(_DWORD *)(a2 + 1056);
    *(_DWORD *)(a2 + 1056) = 0;
    *(_DWORD *)(result + 1056) = v35;
    LODWORD(v35) = *(_DWORD *)(a2 + 1060);
    *(_DWORD *)(a2 + 1060) = 0;
    *(_DWORD *)(result + 1060) = v35;
    *(_BYTE *)(result + 1064) = 1;
  }
  *(_BYTE *)(result + 1072) = 0;
  *(_BYTE *)(result + 1200) = 0;
  if (*(_BYTE *)(a2 + 1200))
  {
    v36 = *(_QWORD *)(a2 + 1072);
    *(_QWORD *)(a2 + 1072) = 0;
    *(_QWORD *)(result + 1072) = v36;
    *(_BYTE *)(result + 1080) = *(_BYTE *)(a2 + 1080);
    v37 = *(_QWORD *)(a2 + 1088);
    *(_QWORD *)(a2 + 1088) = 0;
    *(_QWORD *)(result + 1088) = v37;
    v38 = *(_QWORD *)(a2 + 1096);
    *(_QWORD *)(a2 + 1096) = 0;
    *(_QWORD *)(result + 1096) = v38;
    v39 = *(_OWORD *)(a2 + 1104);
    v40 = *(_OWORD *)(a2 + 1120);
    *(_QWORD *)(result + 1136) = *(_QWORD *)(a2 + 1136);
    *(_OWORD *)(result + 1120) = v40;
    *(_OWORD *)(result + 1104) = v39;
    v41 = *(_QWORD *)(a2 + 1144);
    *(_QWORD *)(a2 + 1144) = 0;
    *(_QWORD *)(result + 1144) = v41;
    *(_WORD *)(result + 1152) = *(_WORD *)(a2 + 1152);
    *(_QWORD *)(result + 1160) = *(_QWORD *)(a2 + 1160);
    v42 = *(_QWORD *)(a2 + 1168);
    *(_QWORD *)(a2 + 1168) = 0;
    *(_QWORD *)(result + 1168) = v42;
    v43 = *(_QWORD *)(a2 + 1176);
    *(_QWORD *)(a2 + 1176) = 0;
    *(_QWORD *)(result + 1176) = v43;
    v44 = *(_QWORD *)(a2 + 1184);
    *(_QWORD *)(a2 + 1184) = 0;
    *(_QWORD *)(result + 1184) = v44;
    v45 = *(_QWORD *)(a2 + 1192);
    *(_QWORD *)(a2 + 1192) = 0;
    *(_QWORD *)(result + 1192) = v45;
    *(_BYTE *)(result + 1200) = 1;
  }
  *(_BYTE *)(result + 1208) = 0;
  *(_BYTE *)(result + 1232) = 0;
  if (*(_BYTE *)(a2 + 1232))
  {
    *(_BYTE *)(result + 1224) = 0;
    if (*(_BYTE *)(a2 + 1224))
    {
      *(_QWORD *)(result + 1208) = 0;
      *(_QWORD *)(result + 1216) = 0;
      v46 = *(_QWORD *)(a2 + 1208);
      *(_QWORD *)(a2 + 1208) = 0;
      *(_QWORD *)(result + 1208) = v46;
      LODWORD(v46) = *(_DWORD *)(a2 + 1216);
      *(_DWORD *)(a2 + 1216) = 0;
      *(_DWORD *)(result + 1216) = v46;
      LODWORD(v46) = *(_DWORD *)(a2 + 1220);
      *(_DWORD *)(a2 + 1220) = 0;
      *(_DWORD *)(result + 1220) = v46;
      *(_BYTE *)(result + 1224) = 1;
    }
    *(_BYTE *)(result + 1232) = 1;
  }
  return result;
}

uint64_t WebCore::ApplePayRequestBase::ApplePayRequestBase(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (*((_BYTE *)a2 + 16))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v4 = *a2;
    *a2 = 0;
    *(_QWORD *)a1 = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(a1 + 8) = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(a1 + 12) = v4;
    *(_BYTE *)(a1 + 16) = 1;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v5 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 24) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = 0;
  *(_DWORD *)(a1 + 36) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v6 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(a1 + 40) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = 0;
  *(_DWORD *)(a1 + 48) = v6;
  v7 = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = 0;
  v8 = a2[7];
  a2[7] = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 52) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 80) = 0;
  if (*((_BYTE *)a2 + 80))
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    v9 = a2[8];
    a2[8] = 0;
    *(_QWORD *)(a1 + 64) = v9;
    LODWORD(v9) = *((_DWORD *)a2 + 18);
    *((_DWORD *)a2 + 18) = 0;
    *(_DWORD *)(a1 + 72) = v9;
    LODWORD(v9) = *((_DWORD *)a2 + 19);
    *((_DWORD *)a2 + 19) = 0;
    *(_DWORD *)(a1 + 76) = v9;
    *(_BYTE *)(a1 + 80) = 1;
  }
  *(_BYTE *)(a1 + 88) = 0;
  v10 = a1 + 88;
  *(_BYTE *)(a1 + 232) = 0;
  if (*((_BYTE *)a2 + 232))
  {
    std::construct_at[abi:sn180100]<WebCore::ApplePayPaymentContact,WebCore::ApplePayPaymentContact,WebCore::ApplePayPaymentContact*>(v10, a2 + 11);
    *(_BYTE *)(a1 + 232) = 1;
  }
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  if (*((_BYTE *)a2 + 256))
  {
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    v11 = a2[30];
    a2[30] = 0;
    *(_QWORD *)(a1 + 240) = v11;
    LODWORD(v11) = *((_DWORD *)a2 + 62);
    *((_DWORD *)a2 + 62) = 0;
    *(_DWORD *)(a1 + 248) = v11;
    LODWORD(v11) = *((_DWORD *)a2 + 63);
    *((_DWORD *)a2 + 63) = 0;
    *(_DWORD *)(a1 + 252) = v11;
    *(_BYTE *)(a1 + 256) = 1;
  }
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 408) = 0;
  if (*((_BYTE *)a2 + 408))
  {
    std::construct_at[abi:sn180100]<WebCore::ApplePayPaymentContact,WebCore::ApplePayPaymentContact,WebCore::ApplePayPaymentContact*>(a1 + 264, a2 + 33);
    *(_BYTE *)(a1 + 408) = 1;
  }
  v12 = a2[52];
  a2[52] = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 416) = v12;
  v13 = a2[53];
  a2[53] = 0;
  *(_QWORD *)(a1 + 424) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 108);
  *((_DWORD *)a2 + 108) = 0;
  *(_DWORD *)(a1 + 432) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 109);
  *((_DWORD *)a2 + 109) = 0;
  *(_DWORD *)(a1 + 436) = v13;
  *(_BYTE *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 536) = 0;
  if (*((_BYTE *)a2 + 536))
  {
    *(_BYTE *)(a1 + 440) = *((_BYTE *)a2 + 440);
    v14 = a2[56];
    a2[56] = 0;
    *(_QWORD *)(a1 + 448) = v14;
    v15 = a2[57];
    a2[57] = 0;
    *(_QWORD *)(a1 + 456) = v15;
    v16 = a2[58];
    a2[58] = 0;
    *(_QWORD *)(a1 + 464) = v16;
    v17 = a2[59];
    a2[59] = 0;
    *(_QWORD *)(a1 + 472) = v17;
    *(_BYTE *)(a1 + 480) = *((_BYTE *)a2 + 480);
    v18 = a2[61];
    a2[61] = 0;
    *(_QWORD *)(a1 + 488) = v18;
    v19 = a2[62];
    a2[62] = 0;
    *(_QWORD *)(a1 + 504) = 0;
    *(_QWORD *)(a1 + 512) = 0;
    *(_QWORD *)(a1 + 496) = v19;
    v20 = a2[63];
    a2[63] = 0;
    *(_QWORD *)(a1 + 504) = v20;
    LODWORD(v20) = *((_DWORD *)a2 + 128);
    *((_DWORD *)a2 + 128) = 0;
    *(_DWORD *)(a1 + 512) = v20;
    LODWORD(v20) = *((_DWORD *)a2 + 129);
    *((_DWORD *)a2 + 129) = 0;
    *(_DWORD *)(a1 + 516) = v20;
    v21 = a2[65];
    a2[65] = 0;
    *(_QWORD *)(a1 + 520) = v21;
    *(_BYTE *)(a1 + 528) = *((_BYTE *)a2 + 528);
    *(_BYTE *)(a1 + 536) = 1;
  }
  *(_WORD *)(a1 + 544) = *((_WORD *)a2 + 272);
  v22 = a2[69];
  a2[69] = 0;
  *(_QWORD *)(a1 + 552) = v22;
  *(_DWORD *)(a1 + 560) = *((_DWORD *)a2 + 140);
  v23 = a2[71];
  a2[71] = 0;
  *(_QWORD *)(a1 + 568) = v23;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore15ApplePaySessionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, char **a2)
{
  char *v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)v2 - 24);
    if (*(_DWORD *)&v2[v3 + 8] == 1)
      return (*(uint64_t (**)(char *))(*(_QWORD *)&v2[v3] + 8))(&v2[v3]);
    else
      --*(_DWORD *)&v2[v3 + 8];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore15ApplePaySessionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22ApplePayPaymentRequestENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayPaymentRequest *this)
{
  WebCore::ApplePayPaymentRequest::~ApplePayPaymentRequest(this, this);
}

uint64_t WebCore::jsApplePaySessionConstructorFunction_supportsVersion(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  _BOOL4 v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  uint64_t v19;
  JSValue v20;
  JSValue v22;
  _BYTE v23[8];
  uint64_t v24;
  int v25;
  _DWORD v26[2];
  _BYTE v27[8];
  WTF::StringImpl *v28;
  char v29;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v22);
  }
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v6)
    return 10;
  v7 = v6;
  if (*(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19522BE60);
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v26);
  if (v26[1])
    return 0;
  v8 = v26[0];
  if (v26[0])
  {
    WebCore::PaymentSession::canCreateSession((WebCore::PaymentSession *)(v7 - 192), (uint64_t)v27);
    if (v29)
    {
      v9 = v27[0];
      v10 = v28;
      goto LABEL_20;
    }
    v11 = *(_QWORD *)(v7 + 336);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 24);
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 8);
          if (v14)
          {
            v16 = WebCore::PaymentCoordinator::supportsVersion(*(WebCore::PaymentCoordinator **)(v14 + 1240), (WebCore::Document *)(v7 - 192), v8);
            v23[0] = v16;
            v25 = 0;
            if (v29)
            {
              v17 = v28;
              v28 = 0;
              if (v17)
              {
                if (*(_DWORD *)v17 == 2)
                  WTF::StringImpl::destroy(v17, v15);
                else
                  *(_DWORD *)v17 -= 2;
              }
            }
            v18 = 0;
            if (v16)
              v19 = 7;
            else
              v19 = 6;
            goto LABEL_26;
          }
        }
      }
    }
  }
  v10 = 0;
  v9 = 12;
LABEL_20:
  v23[0] = v9;
  v25 = 1;
  v27[0] = v9;
  v24 = 0;
  v28 = v10;
  if (!*((_QWORD *)v4 + 2))
  {
    v20.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v9, (JSC::JSGlobalObject *)&v28);
    JSC::VM::throwException(v4, this, v20);
    v10 = v28;
  }
  v28 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v9);
      v19 = 0;
      v18 = v25;
      goto LABEL_26;
    }
    *(_DWORD *)v10 -= 2;
  }
  v19 = 0;
  v18 = 1;
LABEL_26:
  off_1E334B4F8[v18](v27, v23);
  return v19;
}

uint64_t WebCore::jsApplePaySessionConstructorFunction_canMakePayments(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int Payments;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  JSValue v18;
  _BYTE v20[8];
  uint64_t v21;
  int v22;
  _BYTE v23[8];
  WTF::StringImpl *v24;
  char v25;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v5 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v5)
    return 10;
  v6 = v5;
  if (*(_BYTE *)(v5 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19522BFFCLL);
  }
  WebCore::PaymentSession::canCreateSession((WebCore::PaymentSession *)(v5 - 192), (uint64_t)v23);
  if (v25)
  {
    v17 = v23[0];
    v16 = v24;
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 336);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 24);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8);
          if (v10)
          {
            Payments = WebCore::PaymentCoordinator::canMakePayments(*(WebCore::PaymentCoordinator **)(v10 + 1240));
            v20[0] = Payments;
            v22 = 0;
            if (v25)
            {
              v13 = v24;
              v24 = 0;
              if (v13)
              {
                if (*(_DWORD *)v13 == 2)
                  WTF::StringImpl::destroy(v13, v11);
                else
                  *(_DWORD *)v13 -= 2;
              }
            }
            v14 = 0;
            if (Payments)
              v15 = 7;
            else
              v15 = 6;
            goto LABEL_22;
          }
        }
      }
    }
    v16 = 0;
    v17 = 12;
  }
  v20[0] = v17;
  v22 = 1;
  v23[0] = v17;
  v21 = 0;
  v24 = v16;
  if (!*((_QWORD *)v4 + 2))
  {
    v18.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v17, (JSC::JSGlobalObject *)&v24);
    JSC::VM::throwException(v4, this, v18);
    v16 = v24;
  }
  v24 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v17);
      v15 = 0;
      v14 = v22;
      goto LABEL_22;
    }
    *(_DWORD *)v16 -= 2;
  }
  v15 = 0;
  v14 = 1;
LABEL_22:
  off_1E334B4F8[v14](v23, v20);
  return v15;
}

unint64_t WebCore::jsApplePaySessionConstructorFunction_canMakePaymentsWithActiveCard(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  JSC::VM *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::VM *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  JSValue v29;
  WTF::StringImpl *v30;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  JSValue v34;
  WTF::StringImpl *v35;
  objc_class *v36;
  _DWORD *v37;
  WebCore::DOMGuardedObject *v38;
  uint64_t v39;
  int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43[2];
  WTF::StringImpl *v44;
  char v45;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19522C26CLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v38 = v15;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v29.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v17, this, v29);
  }
  else
  {
    v18 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
    if (v18)
    {
      v19 = v18;
      if (*(_BYTE *)(v18 + 274))
      {
        __break(0xC471u);
        JUMPOUT(0x19522C2A8);
      }
      v20 = *((_QWORD *)a2 + 6);
      *(_QWORD *)v43 = v20;
      v21 = (JSC::VM *)*((_QWORD *)this + 7);
      if ((v20 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v20 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v43, this);
LABEL_23:
        if (*((_DWORD *)v21 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v21);
          v23 = v41;
          if (hasExceptionsAfterHandlingTraps)
          {
            v40 = 1;
            v41 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2)
                WTF::StringImpl::destroy(v23, v30);
              else
                *(_DWORD *)v23 -= 2;
            }
            v26 = 1;
LABEL_30:
            ((void (*)(int *, uint64_t *))off_1E334B060[v26])(v43, &v39);
            v14 = v38;
            v38 = 0;
            if (!v14)
              goto LABEL_33;
            goto LABEL_31;
          }
        }
        else
        {
          v23 = v41;
        }
        v40 = 0;
        v39 = 0;
        v41 = v23;
        WebCore::ApplePaySession::canMakePaymentsWithActiveCard((WebCore::PaymentSession *)(v19 - 192), (uint64_t)&v41, (_DWORD **)&v38, (uint64_t)v43);
        v25 = v41;
        v41 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v24);
          else
            *(_DWORD *)v25 -= 2;
        }
        if (v45)
        {
          v32 = (WTF::StringImpl *)LOBYTE(v43[0]);
          LOBYTE(v41) = v43[0];
          v33 = v44;
          v44 = 0;
          v42 = v33;
          if (!*((_QWORD *)v17 + 2))
          {
            v34.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v43[0]), (JSC::JSGlobalObject *)&v42);
            JSC::VM::throwException(v17, this, v34);
            v33 = v42;
          }
          v42 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v32);
            else
              *(_DWORD *)v33 -= 2;
          }
          if (v45)
          {
            v35 = v44;
            v44 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v32);
              else
                *(_DWORD *)v35 -= 2;
            }
          }
        }
        v26 = 0;
        goto LABEL_30;
      }
      v22 = *(WTF::StringImpl **)(v20 + 8);
      if ((v22 & 1) != 0)
      {
        v22 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v20, this);
        if (!v22)
          goto LABEL_22;
      }
      else if (!v22)
      {
LABEL_22:
        v41 = v22;
        goto LABEL_23;
      }
      *(_DWORD *)v22 += 2;
      goto LABEL_22;
    }
  }
  v38 = 0;
LABEL_31:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_33:
  v27 = *(_QWORD *)(v10 + 16);
  if (v27)
  {
    if (*(_QWORD *)(v10 + 24) != v27)
    {
      v36 = *(objc_class **)(v27 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, (WebCore::DOMGuardedObject **)v43);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>(*(uint64_t *)v43, v36, 0);
      v37 = *(_DWORD **)v43;
      *(_QWORD *)v43 = 0;
      if (v37)
      {
        if (v37[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 16))(v37);
        else
          --v37[4];
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsApplePaySessionConstructorFunction_openPaymentSetup(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  JSC::VM *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::VM *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  JSValue v29;
  WTF::StringImpl *v30;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  JSValue v34;
  WTF::StringImpl *v35;
  objc_class *v36;
  _DWORD *v37;
  WebCore::DOMGuardedObject *v38;
  uint64_t v39;
  int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43[2];
  WTF::StringImpl *v44;
  char v45;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19522C660);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v38 = v15;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v29.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v17, this, v29);
  }
  else
  {
    v18 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
    if (v18)
    {
      v19 = v18;
      if (*(_BYTE *)(v18 + 274))
      {
        __break(0xC471u);
        JUMPOUT(0x19522C69CLL);
      }
      v20 = *((_QWORD *)a2 + 6);
      *(_QWORD *)v43 = v20;
      v21 = (JSC::VM *)*((_QWORD *)this + 7);
      if ((v20 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v20 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v43, this);
LABEL_23:
        if (*((_DWORD *)v21 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v21);
          v23 = v41;
          if (hasExceptionsAfterHandlingTraps)
          {
            v40 = 1;
            v41 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2)
                WTF::StringImpl::destroy(v23, v30);
              else
                *(_DWORD *)v23 -= 2;
            }
            v26 = 1;
LABEL_30:
            ((void (*)(int *, uint64_t *))off_1E334B060[v26])(v43, &v39);
            v14 = v38;
            v38 = 0;
            if (!v14)
              goto LABEL_33;
            goto LABEL_31;
          }
        }
        else
        {
          v23 = v41;
        }
        v40 = 0;
        v39 = 0;
        v41 = v23;
        WebCore::ApplePaySession::openPaymentSetup((WebCore::PaymentSession *)(v19 - 192), (uint64_t)&v41, (_DWORD **)&v38, (uint64_t)v43);
        v25 = v41;
        v41 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v24);
          else
            *(_DWORD *)v25 -= 2;
        }
        if (v45)
        {
          v32 = (WTF::StringImpl *)LOBYTE(v43[0]);
          LOBYTE(v41) = v43[0];
          v33 = v44;
          v44 = 0;
          v42 = v33;
          if (!*((_QWORD *)v17 + 2))
          {
            v34.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v43[0]), (JSC::JSGlobalObject *)&v42);
            JSC::VM::throwException(v17, this, v34);
            v33 = v42;
          }
          v42 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v32);
            else
              *(_DWORD *)v33 -= 2;
          }
          if (v45)
          {
            v35 = v44;
            v44 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v32);
              else
                *(_DWORD *)v35 -= 2;
            }
          }
        }
        v26 = 0;
        goto LABEL_30;
      }
      v22 = *(WTF::StringImpl **)(v20 + 8);
      if ((v22 & 1) != 0)
      {
        v22 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v20, this);
        if (!v22)
          goto LABEL_22;
      }
      else if (!v22)
      {
LABEL_22:
        v41 = v22;
        goto LABEL_23;
      }
      *(_DWORD *)v22 += 2;
      goto LABEL_22;
    }
  }
  v38 = 0;
LABEL_31:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_33:
  v27 = *(_QWORD *)(v10 + 16);
  if (v27)
  {
    if (*(_QWORD *)(v10 + 24) != v27)
    {
      v36 = *(objc_class **)(v27 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, (WebCore::DOMGuardedObject **)v43);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>(*(uint64_t *)v43, v36, 0);
      v37 = *(_DWORD **)v43;
      *(_QWORD *)v43 = 0;
      if (v37)
      {
        if (v37[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 16))(v37);
        else
          --v37[4];
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

uint64_t WebCore::jsApplePaySessionPrototypeFunction_begin(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSValue v16;
  WTF::StringImpl *v17;
  JSC::VM *v18;
  char v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  char v23;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "ApplePaySession", "begin");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSApplePaySession::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSApplePaySession::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "ApplePaySession", "begin");
  v11 = *(_QWORD *)(v4 + 24);
  v12 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v12)
    return 10;
  if (*(_BYTE *)(v12 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19522C8FCLL);
  }
  WebCore::ApplePaySession::begin((WebCore::ApplePaySession *)(v11 - 32), (WebCore::Document *)(v12 - 192), (uint64_t)&v21);
  if (!v23)
    return 10;
  v14 = (WTF::StringImpl *)v21;
  v19 = v21;
  v15 = v22;
  v22 = 0;
  v20 = v15;
  if (!*((_QWORD *)v5 + 2))
  {
    v16.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v21, (JSC::JSGlobalObject *)&v20);
    JSC::VM::throwException(v5, this, v16);
    v15 = v20;
  }
  v20 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (v23)
  {
    v17 = v22;
    v22 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 != 2)
      {
        result = 0;
        *(_DWORD *)v17 -= 2;
        return result;
      }
      WTF::StringImpl::destroy(v17, v14);
    }
  }
  return 0;
}

uint64_t WebCore::jsApplePaySessionPrototypeFunction_abort(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  JSValue v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  JSC::VM *v18;
  char v19;
  WTF::StringImpl *v20;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "ApplePaySession", "abort");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSApplePaySession::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSApplePaySession::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "ApplePaySession", "abort");
  v11 = *(_QWORD *)(v4 + 24);
  if ((*(_DWORD *)(v11 + 24) - 1) > 6)
  {
    v19 = 12;
    v20 = 0;
    if (!*((_QWORD *)v5 + 2))
    {
      v15.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)0xC, (JSC::JSGlobalObject *)&v20);
      JSC::VM::throwException(v5, this, v15);
      v17 = v20;
      v20 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    return 0;
  }
  else
  {
    *(_DWORD *)(v11 + 24) = 9;
    v12 = *(_QWORD *)(v11 - 16);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
        v12 = v13 - 96;
      else
        v12 = 0;
    }
    if (*(_BYTE *)(v12 + 274))
    {
      result = 96;
      __break(0xC471u);
    }
    else
    {
      WebCore::PaymentCoordinator::abortPaymentSession(*(char ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 336) + 8)
                                                                                         + 24)
                                                                             + 8)
                                                                 + 1240));
      return 10;
    }
  }
  return result;
}

uint64_t WebCore::jsApplePaySessionPrototypeFunction_completeMerchantValidation(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t result;
  JSValue v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSValue v15;
  WTF::StringImpl *v16;
  JSC::VM *v17;
  char v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  char v22;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v17 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v17, "ApplePaySession", "completeMerchantValidation");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSApplePaySession::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSApplePaySession::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v17, "ApplePaySession", "completeMerchantValidation");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v12.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v12);
  }
  WebCore::ApplePaySession::completeMerchantValidation((WTF::StringImpl *)(*(_QWORD *)(v5 + 24) - 32), *((_QWORD *)a2 + 6), (uint64_t)&v20);
  if (!v22)
    return 10;
  v13 = (WTF::StringImpl *)v20;
  v18 = v20;
  v14 = v21;
  v21 = 0;
  v19 = v14;
  if (!*((_QWORD *)v4 + 2))
  {
    v15.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v20, (JSC::JSGlobalObject *)&v19);
    JSC::VM::throwException(v4, this, v15);
    v14 = v19;
  }
  v19 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (v22)
  {
    v16 = v21;
    v21 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 != 2)
      {
        result = 0;
        *(_DWORD *)v16 -= 2;
        return result;
      }
      WTF::StringImpl::destroy(v16, v13);
    }
  }
  return 0;
}

_BYTE *WebCore::jsApplePaySessionPrototypeFunction_completeShippingMethodSelection(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  WTF::StringImpl **v13;
  JSC::JSCell *v14;
  uint64_t v15;
  JSC::Structure *Object;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  JSValue v20;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  long double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  JSC::VM *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  __int128 v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  JSC::JSCell *v48;
  int v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  JSC::JSCell *v59;
  int v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  WTF::StringImpl *v69;
  unsigned int v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  JSC::JSCell *v73;
  int v74;
  int v75;
  WTF::StringImpl *v76;
  int v77;
  WTF *v78;
  WTF *v79;
  int v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  JSC::VM *v84;
  WTF::StringImpl *v85;
  int v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  int v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  WTF::StringImpl **v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  int v98;
  WTF *v99;
  WTF *v100;
  WTF *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  JSC::VM *v105;
  uint64_t v106;
  int v107;
  WTF::StringImpl *v108;
  unsigned int v109;
  unsigned int v110;
  WTF *v111;
  uint64_t v112;
  uint64_t v113;
  WTF *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  JSC::JSCell *v119;
  unsigned int v120;
  __int128 v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  unsigned int v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  JSC::JSCell *v131;
  uint64_t v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  __int16 v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  uint64_t v143;
  void *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF *v147;
  WTF *v148;
  WTF *v149;
  WTF *v150;
  __int128 v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  WTF *v161;
  unint64_t v162;
  __int128 v163;
  __int128 v164;
  unsigned __int128 v165;
  WTF::StringImpl *v166;
  uint64_t v167;
  WTF *v168;
  unint64_t v169;
  int v170;
  uint64_t v171;
  WTF *v172;
  unsigned int v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  uint64_t v180;
  WTF::StringImpl *v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  unint64_t v185;
  __int128 v186;
  __int128 v187;
  unsigned __int128 v188;
  WTF::StringImpl *v189;
  uint64_t v190;
  WTF *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  WTF *v196;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  JSValue v200;
  WTF::StringImpl *v201;
  double v202;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  JSValue v206;
  WTF::StringImpl *v207;
  WebCore::ApplePayPaymentTokenContext *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD v212[2];
  WTF::StringImpl *v213;
  _BYTE v214[56];
  WTF::StringImpl *v215;
  uint64_t v216;
  WTF *v217;
  _BYTE v218[24];
  __int128 v219;
  __int128 v220;
  __int128 v221;
  uint64_t v222;
  uint64_t v223;
  __int16 v224;
  char v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;
  __int16 v231;
  char v232;
  __int128 v233;
  uint64_t v234;
  char v235;
  WTF::StringImpl *v236;
  char v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  WTF::StringImpl *v241;
  uint64_t v242;
  __int16 v243;
  __int128 v244;
  uint64_t v245;
  char v246;
  WTF *v247;
  unint64_t v248;
  char v249;
  WTF::StringImpl *v250;
  char v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  WTF::StringImpl *v255;
  uint64_t v256;
  __int16 v257;
  uint64_t v258;
  __int128 v259;
  unsigned __int128 v260;
  char v261;
  WTF *v262;
  unint64_t v263;
  char v264;
  char v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  uint64_t v269[2];
  WTF::StringImpl *v270[2];
  __int128 v271;
  __int128 v272;
  __int128 v273;
  WTF::StringImpl *v274;
  uint64_t v275;
  __int16 v276;
  uint64_t v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  uint64_t v281;
  uint64_t v282;
  __int16 v283;
  char v284;
  __int128 v285;
  uint64_t v286;
  WTF::StringImpl *v287;
  __int128 v288;
  __int128 v289;
  _BYTE v290[24];
  WTF::StringImpl *v291;
  __int16 v292;
  WTF *v293[2];
  uint64_t v294;
  char v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  uint64_t v299;
  uint64_t v300;
  __int16 v301;
  char v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  uint64_t v306;
  uint64_t v307;
  __int16 v308;
  char v309;
  __int128 v310;
  uint64_t v311;
  char v312;
  WTF::StringImpl *v313;
  char v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  WTF::StringImpl *v318;
  uint64_t v319;
  __int16 v320;
  __int128 v321;
  uint64_t v322;
  char v323;
  WTF *v324;
  unint64_t v325;
  char v326;
  WTF::StringImpl *v327;
  char v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  WTF::StringImpl *v332;
  uint64_t v333;
  __int16 v334;
  uint64_t v335;
  __int128 v336;
  unsigned __int128 v337;
  char v338;
  WTF *v339;
  unint64_t v340;
  unsigned __int8 v341;
  char v342;
  __int128 v343;
  JSC::VM *v344[2];
  WTF::StringImpl *v345;
  WTF::StringImpl *v346;
  _BYTE v347[48];
  WTF::StringImpl *v348;
  uint64_t v349;
  unsigned int v350;
  _QWORD v351[3];
  __int128 v352;
  __int128 v353;
  uint64_t v354;
  uint64_t v355;
  __int16 v356;
  char v357;
  __int128 v358;
  uint64_t v359;
  unsigned int v360;
  uint64_t v361;

  v361 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 7);
  v212[0] = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)v212, "ApplePaySession", "completeShippingMethodSelection");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSApplePaySession::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSApplePaySession::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)v212, "ApplePaySession", "completeShippingMethodSelection");
  v212[1] = v4;
  v12 = *((int *)a2 + 8) - 1;
  if (v12 >= 3)
    v12 = 3;
  if (!v12)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v20);
  }
  v13 = &v287;
  if (v12 == 3)
  {
    v17 = *(_QWORD *)(v5 + 24);
    v18 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
    v213 = v18;
    if ((unint64_t)v18 < 0xFFFE000000000000 || (v18 & 0x80000000) != 0)
    {
      if ((unint64_t)v18 >= 0xFFFE000000000000)
      {
        v23 = (double)(int)v18;
      }
      else if ((unint64_t)v18 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v213, this);
      }
      else
      {
        *(_QWORD *)&v23 = (char *)v18 - 0x2000000000000;
      }
      if (*(_DWORD *)(v4 + 80))
      {
        v202 = v23;
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
        v23 = v202;
        if ((hasExceptionsAfterHandlingTraps & 1) != 0)
          return 0;
      }
      LOWORD(v19) = 0;
      if (fabs(v23) != INFINITY && v23 != 0.0)
      {
        v24 = -floor(-v23);
        v25 = floor(v23);
        if (v23 >= 0.0)
          v26 = v25;
        else
          v26 = v24;
        v27 = fmod(v26, 65536.0);
        if (v27 < 0.0)
          v27 = v27 + 65536.0;
        v19 = (int)v27;
      }
    }
    else
    {
      LOWORD(v19) = (_WORD)v18;
    }
    WebCore::convertDictionary<WebCore::ApplePayLineItem>(*((JSC::JSCell **)a2 + 7), (uint64_t)this, (uint64_t)&v213);
    v28 = v217;
    if ((_DWORD)v217)
    {
      v41 = 0;
      v22 = 0;
      if ((_DWORD)v217 == -1)
        return (_BYTE *)v22;
      goto LABEL_58;
    }
    v29 = *((_QWORD *)a2 + 8);
    v30 = (JSC::VM *)*((_QWORD *)this + 7);
    v269[0] = (uint64_t)v30;
    if ((v29 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v29 + 5) <= 0x16u)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSC::throwTypeError();
      v44 = v287;
      v287 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v43);
        else
          *(_DWORD *)v44 -= 2;
      }
      v41 = 0;
      v42 = 1;
      LODWORD(v271) = 1;
      goto LABEL_57;
    }
    *(_QWORD *)&v288 = 0;
    v287 = 0;
    v345 = (WTF::StringImpl *)&v287;
    JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayLineItem>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, v29, (uint64_t *)&v345);
    if (*((_DWORD *)v30 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v30))
    {
      v42 = 1;
      LODWORD(v271) = 1;
      WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v287, v31);
      v41 = 0;
      goto LABEL_57;
    }
    v32 = v287;
    v287 = 0;
    LODWORD(v271) = 0;
    v33 = v288;
    *(_QWORD *)&v288 = 0;
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v287, v31);
    LOBYTE(v287) = (_BYTE)v213;
    v34 = *(_OWORD *)v214;
    *(_OWORD *)v214 = 0uLL;
    v288 = v34;
    v289 = *(_OWORD *)&v214[16];
    *(_OWORD *)v290 = *(_OWORD *)&v214[32];
    v35 = v215;
    v215 = 0;
    *(_QWORD *)&v290[16] = *(_QWORD *)&v214[48];
    v291 = v35;
    v292 = v216;
    v270[0] = 0;
    v269[0] = (uint64_t)v32;
    v270[1] = 0;
    v269[1] = v33;
    WebCore::ApplePaySession::completeShippingMethodSelection(v17 - 32, (void *)(unsigned __int16)v19, (uint64_t)&v287, v269, (uint64_t)&v345);
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v269, v36);
    v38 = v291;
    v291 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v37);
      else
        *(_DWORD *)v38 -= 2;
    }
    v39 = (WTF::StringImpl *)*((_QWORD *)&v288 + 1);
    *((_QWORD *)&v288 + 1) = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v37);
      else
        *(_DWORD *)v39 -= 2;
    }
    v40 = (WTF::StringImpl *)v288;
    *(_QWORD *)&v288 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v37);
      else
        *(_DWORD *)v40 -= 2;
    }
    if (!v347[0])
    {
      v41 = 10;
LABEL_52:
      v42 = 0;
LABEL_57:
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B100[v42])(&v287, v270);
LABEL_58:
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B070[v28])(&v287, &v213);
      return (_BYTE *)v41;
    }
    v204 = (WTF::StringImpl *)v345;
    LOBYTE(v287) = (_BYTE)v345;
    v205 = v346;
    v346 = 0;
    *(_QWORD *)&v288 = v205;
    if (!*(_QWORD *)(v4 + 16))
    {
      v206.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v345, (JSC::JSGlobalObject *)&v288);
      JSC::VM::throwException((JSC::VM *)v4, this, v206);
      v205 = (WTF::StringImpl *)v288;
    }
    *(_QWORD *)&v288 = 0;
    if (v205)
    {
      if (*(_DWORD *)v205 == 2)
        WTF::StringImpl::destroy(v205, v204);
      else
        *(_DWORD *)v205 -= 2;
    }
    if (v347[0])
    {
      v207 = v346;
      v346 = 0;
      if (v207)
      {
        if (*(_DWORD *)v207 != 2)
        {
          v41 = 0;
          *(_DWORD *)v207 -= 2;
          goto LABEL_52;
        }
        WTF::StringImpl::destroy(v207, v204);
      }
    }
    v41 = 0;
    goto LABEL_52;
  }
  if (v12 != 1)
    return (_BYTE *)JSC::throwTypeError();
  v14 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
  v15 = *(_QWORD *)(v5 + 24);
  v344[0] = (JSC::VM *)v4;
  if (((unint64_t)v14 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
  }
  else if (((unint64_t)v14 & 0xFFFE000000000002) != 0
         || (Object = (JSC::Structure *)JSC::JSCell::getObject(v14)) == 0)
  {
    JSC::throwTypeError();
    v22 = 0;
    v173 = 1;
    v268 = 1;
    goto LABEL_276;
  }
  LOBYTE(v287) = 1;
  v288 = 0u;
  LOBYTE(v289) = 0;
  *((_QWORD *)&v289 + 1) = 0x7FF8000000000000;
  v290[0] = 1;
  *(_DWORD *)&v290[4] = 1;
  *(int64x2_t *)&v290[8] = vdupq_n_s64(0x7FF8000000000000uLL);
  v291 = 0;
  v292 = 0;
  v312 = 0;
  v45 = &v287;
  LOBYTE(v313) = 0;
  v323 = 0;
  LOBYTE(v324) = 0;
  v326 = 0;
  LOBYTE(v327) = 0;
  v338 = 0;
  LOBYTE(v339) = 0;
  v342 = 0;
  LOBYTE(v294) = 0;
  *(_OWORD *)v293 = 0u;
  v343 = 0u;
  if (((unint64_t)v14 & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_63;
  WTF::AtomStringImpl::addLiteral();
  v48 = (JSC::JSCell *)JSC::JSObject::get(Object, this, (unint64_t)v213);
  if (v213)
  {
    if (*(_DWORD *)v213 == 2)
      WTF::StringImpl::destroy(v213, v47);
    else
      *(_DWORD *)v213 -= 2;
  }
  if (*((_DWORD *)v344[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v344[0]))
    goto LABEL_331;
  if (v48 != (JSC::JSCell *)10)
  {
    WebCore::convertDictionary<WebCore::ApplePayAutomaticReloadPaymentRequest>(v48, this, (uint64_t)&v345);
    v49 = v352;
    if ((_DWORD)v352)
    {
      v268 = 1;
      v56 = v352;
    }
    else
    {
      v50 = v345;
      v213 = v345;
      v214[0] = (_BYTE)v346;
      v51 = *(_QWORD *)v347;
      v52 = *(_QWORD *)&v347[8];
      *(_OWORD *)v347 = 0u;
      *(_QWORD *)&v214[8] = v51;
      *(_QWORD *)&v214[16] = v52;
      *(_OWORD *)&v214[24] = *(_OWORD *)&v347[16];
      *(_OWORD *)&v214[40] = *(_OWORD *)&v347[32];
      v53 = v349;
      v345 = 0;
      v349 = 0;
      v215 = v348;
      v216 = v53;
      LOWORD(v217) = v350;
      v54 = v351[0];
      v55 = v351[1];
      memset(v351, 0, sizeof(v351));
      *(_QWORD *)v218 = v54;
      *(_OWORD *)&v218[8] = __PAIR128__(v351[2], v55);
      if (v323)
      {
        WebCore::ApplePayAutomaticReloadPaymentRequest::operator=((uint64_t)&v313, (WTF::StringImpl *)&v213);
      }
      else
      {
        v213 = 0;
        v313 = v50;
        v314 = (char)v346;
        *(_OWORD *)&v214[8] = 0uLL;
        *(_QWORD *)&v315 = v51;
        *((_QWORD *)&v315 + 1) = v52;
        v316 = *(_OWORD *)&v347[16];
        v317 = *(_OWORD *)&v347[32];
        v216 = 0;
        v318 = v348;
        v319 = v53;
        v320 = v350;
        memset(v218, 0, sizeof(v218));
        *(_QWORD *)&v321 = v54;
        *((_QWORD *)&v321 + 1) = v55;
        v322 = v351[2];
        v323 = 1;
      }
      WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&v213, v46);
      v56 = v352;
    }
    if (v56 != -1)
      (*(&off_1E334B0D0 + v56))((int)v270, (WebCore::ApplePayAutomaticReloadPaymentRequest *)&v345);
    if (v49)
      goto LABEL_249;
  }
  WTF::AtomStringImpl::addLiteral();
  v57 = v345;
  v59 = (JSC::JSCell *)JSC::JSObject::get(Object, this, (unint64_t)v345);
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v58);
    else
      *(_DWORD *)v57 -= 2;
  }
  if (*((_DWORD *)v344[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v344[0]))
    goto LABEL_331;
  if (v59 != (JSC::JSCell *)10)
  {
    WebCore::convertDictionary<WebCore::ApplePayDeferredPaymentRequest>(v59, this, (uint64_t)&v345);
    v60 = v353;
    if ((_DWORD)v353)
    {
      v268 = 1;
      v70 = v353;
    }
    else
    {
      v61 = v345;
      v270[0] = v345;
      LOBYTE(v270[1]) = (_BYTE)v346;
      v62 = *(_QWORD *)v347;
      v63 = *(_QWORD *)&v347[8];
      *(_OWORD *)v347 = 0u;
      *(_QWORD *)&v271 = v62;
      *((_QWORD *)&v271 + 1) = v63;
      v272 = *(_OWORD *)&v347[16];
      v273 = *(_OWORD *)&v347[32];
      v64 = v349;
      v345 = 0;
      v349 = 0;
      v274 = v348;
      v275 = v64;
      v276 = v350;
      v65 = v351[1];
      v277 = v351[0];
      v278 = *(_OWORD *)&v351[1];
      v66 = v351[2];
      v67 = *((_QWORD *)&v352 + 1);
      v68 = v352;
      *(_QWORD *)&v279 = v352;
      *(_OWORD *)&v351[1] = 0u;
      v352 = 0u;
      *((_QWORD *)&v279 + 1) = v67;
      if (v338)
      {
        WebCore::ApplePayDeferredPaymentRequest::operator=((uint64_t)&v327, (WTF::StringImpl *)v270);
      }
      else
      {
        v69 = (WTF::StringImpl *)&v347[16];
        v270[0] = 0;
        v327 = v61;
        v328 = (char)v346;
        v271 = 0uLL;
        *(_QWORD *)&v329 = v62;
        *((_QWORD *)&v329 + 1) = v63;
        v330 = *(_OWORD *)&v347[16];
        v331 = *(_OWORD *)&v347[32];
        v332 = v348;
        v275 = 0;
        v333 = v64;
        v334 = v350;
        v335 = v351[0];
        *(_QWORD *)&v336 = v65;
        *((_QWORD *)&v336 + 1) = v66;
        v337 = __PAIR128__(v67, v68);
        v278 = 0uLL;
        v279 = 0uLL;
        v338 = 1;
      }
      WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)v270, v69);
      v70 = v353;
    }
    if (v70 != -1)
      (*(&off_1E334B0E0 + v70))((int)v270, (WebCore::ApplePayDeferredPaymentRequest *)&v345);
    if (v60)
      goto LABEL_249;
  }
  WTF::AtomStringImpl::addLiteral();
  v71 = v345;
  v73 = (JSC::JSCell *)JSC::JSObject::get(Object, this, (unint64_t)v345);
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
      WTF::StringImpl::destroy(v71, v72);
    else
      *(_DWORD *)v71 -= 2;
  }
  if (*((_DWORD *)v344[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v344[0]))
    goto LABEL_331;
  if (v73 != (JSC::JSCell *)10)
  {
    v211 = v15;
    WebCore::convertDictionary<WebCore::ApplePayDisbursementRequest>(v73, this, (uint64_t)&v345);
    v74 = *(_DWORD *)&v347[16];
    if (*(_DWORD *)&v347[16])
    {
      v268 = 1;
      v80 = *(_DWORD *)&v347[16];
LABEL_124:
      v15 = v211;
      if (v80 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B0F0[v80])(v270, &v346);
      if (v74)
        goto LABEL_249;
      goto LABEL_127;
    }
    v75 = v347[8];
    if (v347[8])
    {
      v76 = v346;
      v346 = 0;
      LODWORD(v13) = *(_DWORD *)v347;
      LODWORD(v45) = *(_DWORD *)&v347[4];
      *(_QWORD *)v347 = 0;
      v77 = 1;
      if (!v342)
      {
        v339 = v76;
        v340 = __PAIR64__(v45, v13);
        v341 = 1;
LABEL_121:
        v342 = 1;
LABEL_123:
        v80 = *(_DWORD *)&v347[16];
        goto LABEL_124;
      }
    }
    else
    {
      if (!v342)
      {
        LOBYTE(v339) = 0;
        v341 = 0;
        goto LABEL_121;
      }
      v77 = 0;
      v76 = 0;
    }
    if (v341 == v77)
    {
      if (v341)
      {
        v78 = v339;
        if (v339)
        {
          v339 = 0;
          LODWORD(v340) = 0;
          WTF::fastFree(v78, v46);
        }
        v339 = v76;
        v340 = __PAIR64__(v45, v13);
        goto LABEL_123;
      }
    }
    else
    {
      if (!v341)
      {
        v339 = v76;
        v340 = __PAIR64__(v45, v13);
        v341 = 1;
        goto LABEL_123;
      }
      v79 = v339;
      if (v339)
      {
        v339 = 0;
        LODWORD(v340) = 0;
        WTF::fastFree(v79, v46);
      }
      v341 = 0;
    }
    if (v75 && v76)
      WTF::fastFree(v76, v46);
    goto LABEL_123;
  }
LABEL_127:
  WTF::AtomStringImpl::addLiteral();
  v81 = v345;
  v83 = JSC::JSObject::get(Object, this, (unint64_t)v345);
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
      WTF::StringImpl::destroy(v81, v82);
    else
      *(_DWORD *)v81 -= 2;
  }
  if (*((_DWORD *)v344[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v344[0]))
    goto LABEL_331;
  if (v83 == 10)
    goto LABEL_164;
  v84 = (JSC::VM *)*((_QWORD *)this + 7);
  v269[0] = (uint64_t)v84;
  if ((v83 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v83 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v97 = v345;
    v345 = 0;
    if (v97)
    {
      if (*(_DWORD *)v97 == 2)
        WTF::StringImpl::destroy(v97, v46);
      else
        *(_DWORD *)v97 -= 2;
    }
    v89 = 1;
    *(_DWORD *)v347 = 1;
    goto LABEL_157;
  }
  v270[1] = 0;
  v270[0] = 0;
  v345 = (WTF::StringImpl *)v270;
  JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayLineItem>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, v83, (uint64_t *)&v345);
  if (*((_DWORD *)v84 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v84) & 1) != 0)
  {
    v86 = 1;
  }
  else
  {
    v86 = 0;
    v87 = v270[0];
    v270[0] = 0;
    v345 = v87;
    v88 = v270[1];
    v270[1] = 0;
    v346 = v88;
  }
  *(_DWORD *)v347 = v86;
  WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v270, v85);
  v89 = *(_DWORD *)v347;
  if (*(_DWORD *)v347)
  {
LABEL_157:
    v98 = 0;
    v268 = 1;
    goto LABEL_161;
  }
  v90 = v345;
  v345 = 0;
  v270[0] = v90;
  v91 = v346;
  v346 = 0;
  v270[1] = v91;
  if (HIDWORD(v293[1]))
  {
    v92 = 80 * HIDWORD(v293[1]);
    v93 = (WTF::StringImpl **)((char *)v293[0] + 64);
    do
    {
      v94 = *v93;
      *v93 = 0;
      if (v94)
      {
        if (*(_DWORD *)v94 == 2)
          WTF::StringImpl::destroy(v94, v46);
        else
          *(_DWORD *)v94 -= 2;
      }
      v95 = *(v93 - 6);
      *(v93 - 6) = 0;
      if (v95)
      {
        if (*(_DWORD *)v95 == 2)
          WTF::StringImpl::destroy(v95, v46);
        else
          *(_DWORD *)v95 -= 2;
      }
      v96 = *(v93 - 7);
      *(v93 - 7) = 0;
      if (v96)
      {
        if (*(_DWORD *)v96 == 2)
          WTF::StringImpl::destroy(v96, v46);
        else
          *(_DWORD *)v96 -= 2;
      }
      v93 += 10;
      v92 -= 80;
    }
    while (v92);
  }
  v99 = v293[0];
  if (v293[0])
  {
    v293[0] = 0;
    LODWORD(v293[1]) = 0;
    WTF::fastFree(v99, v46);
  }
  v100 = v270[0];
  v270[0] = 0;
  v293[0] = v100;
  v101 = v270[1];
  v270[1] = 0;
  v293[1] = v101;
  WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v270, v46);
  v98 = 1;
  v89 = *(_DWORD *)v347;
LABEL_161:
  if (v89 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B100[v89])(v270, &v345);
  if (!v98)
    goto LABEL_249;
LABEL_164:
  WTF::AtomStringImpl::addLiteral();
  v102 = v345;
  v104 = JSC::JSObject::get(Object, this, (unint64_t)v345);
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
      WTF::StringImpl::destroy(v102, v103);
    else
      *(_DWORD *)v102 -= 2;
  }
  if (*((_DWORD *)v344[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v344[0]))
    goto LABEL_331;
  if (v104 != 10)
  {
    v105 = (JSC::VM *)*((_QWORD *)this + 7);
    v344[1] = v105;
    if ((v104 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v104 + 5) <= 0x16u)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSC::throwTypeError();
      v116 = v270[0];
      v270[0] = 0;
      if (v116)
      {
        if (*(_DWORD *)v116 == 2)
          WTF::StringImpl::destroy(v116, v115);
        else
          *(_DWORD *)v116 -= 2;
      }
      v107 = 1;
      *(_DWORD *)v347 = 1;
      v268 = 1;
    }
    else
    {
      v270[1] = 0;
      v270[0] = 0;
      v269[0] = (uint64_t)v270;
      JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayPaymentTokenContext>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, v104, v269);
      if (*((_DWORD *)v105 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v105) & 1) != 0)
      {
        v208 = v270[0];
        *(_DWORD *)v347 = 1;
        if (HIDWORD(v270[1]))
        {
          v209 = 40 * HIDWORD(v270[1]);
          do
          {
            WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v208, v46);
            v208 = (WebCore::ApplePayPaymentTokenContext *)(v210 + 40);
            v209 -= 40;
          }
          while (v209);
          v208 = v270[0];
        }
        if (v208)
        {
          v270[0] = 0;
          LODWORD(v270[1]) = 0;
          WTF::fastFree(v208, v46);
        }
      }
      else
      {
        v345 = v270[0];
        v346 = v270[1];
        *(_DWORD *)v347 = 0;
      }
      v106 = v15;
      v107 = *(_DWORD *)v347;
      if (!*(_DWORD *)v347)
      {
        v108 = v345;
        v345 = 0;
        v109 = v346;
        v110 = HIDWORD(v346);
        v346 = 0;
        if (v326)
        {
          if (HIDWORD(v325))
          {
            v111 = v324;
            v112 = 40 * HIDWORD(v325);
            do
            {
              WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v111, v46);
              v111 = (WTF *)(v113 + 40);
              v112 -= 40;
            }
            while (v112);
          }
          v114 = v324;
          if (v324)
          {
            v324 = 0;
            LODWORD(v325) = 0;
            WTF::fastFree(v114, v46);
          }
          v324 = v108;
          v325 = __PAIR64__(v110, v109);
          if (*(_DWORD *)v347 != -1)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B110[*(unsigned int *)v347])(v270, &v345);
        }
        else
        {
          v324 = v108;
          v325 = __PAIR64__(v110, v109);
          v326 = 1;
        }
        v15 = v106;
        goto LABEL_191;
      }
      v268 = 1;
      if (*(_DWORD *)v347 == -1)
        goto LABEL_249;
    }
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B110[v107])(v270, &v345);
    goto LABEL_249;
  }
LABEL_191:
  WTF::AtomStringImpl::addLiteral();
  v117 = v345;
  v119 = (JSC::JSCell *)JSC::JSObject::get(Object, this, (unint64_t)v345);
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
      WTF::StringImpl::destroy(v117, v118);
    else
      *(_DWORD *)v117 -= 2;
  }
  if (*((_DWORD *)v344[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v344[0]))
    goto LABEL_331;
  if (v119 == (JSC::JSCell *)10)
    goto LABEL_203;
  WebCore::convertDictionary<WebCore::ApplePayRecurringPaymentRequest>(v119, this, (uint64_t)&v345);
  v120 = v360;
  if (v360)
  {
    v268 = 1;
    v128 = v360;
  }
  else
  {
    v270[0] = v345;
    LOBYTE(v270[1]) = (_BYTE)v346;
    v121 = *(_OWORD *)v347;
    v345 = 0;
    *(_QWORD *)v347 = 0;
    v271 = v121;
    v272 = *(_OWORD *)&v347[16];
    v273 = *(_OWORD *)&v347[32];
    v122 = v349;
    *(_QWORD *)&v347[8] = 0;
    v349 = 0;
    v274 = v348;
    v275 = v122;
    v276 = v350;
    LOBYTE(v277) = 0;
    v284 = 0;
    if (v357)
    {
      LOBYTE(v277) = v351[0];
      v123 = *(_OWORD *)&v351[1];
      *(_OWORD *)&v351[1] = 0uLL;
      v278 = v123;
      v279 = v352;
      v280 = v353;
      v124 = v355;
      v355 = 0;
      v281 = v354;
      v282 = v124;
      v283 = v356;
      v284 = 1;
    }
    v125 = v358;
    v358 = 0uLL;
    v285 = v125;
    v126 = v359;
    v359 = 0;
    v286 = v126;
    std::optional<WebCore::ApplePayRecurringPaymentRequest>::operator=[abi:sn180100]<WebCore::ApplePayRecurringPaymentRequest,void>((uint64_t)&v294, (WTF::StringImpl *)v270);
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)v270, v127);
    v128 = v360;
  }
  if (v128 != -1)
    (*(&off_1E334B120 + v128))((int)v270, (WebCore::ApplePayRecurringPaymentRequest *)&v345);
  if (!v120)
  {
LABEL_203:
    WTF::AtomStringImpl::addLiteral();
    v129 = v345;
    v131 = (JSC::JSCell *)JSC::JSObject::get(Object, this, (unint64_t)v345);
    if (v129)
    {
      if (*(_DWORD *)v129 == 2)
        WTF::StringImpl::destroy(v129, v130);
      else
        *(_DWORD *)v129 -= 2;
    }
    if (*((_DWORD *)v344[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v344[0]))
    {
LABEL_331:
      v268 = 1;
      goto LABEL_249;
    }
    if (v131 == (JSC::JSCell *)10)
    {
LABEL_63:
      WebCore::throwRequiredMemberTypeError((int)this, (int)v344, "newTotal", 9, "ApplePayShippingMethodUpdate", 29, "ApplePayLineItem", 17);
      v268 = 1;
      goto LABEL_249;
    }
    v132 = v15;
    WebCore::convertDictionary<WebCore::ApplePayLineItem>(v131, (uint64_t)this, (uint64_t)&v345);
    v133 = v350;
    if (!v350)
    {
      v134 = v346;
      v135 = *(_QWORD *)v347;
      v346 = 0;
      *(_QWORD *)v347 = 0;
      *(_OWORD *)v270 = *(_OWORD *)&v347[8];
      v271 = *(_OWORD *)&v347[24];
      v136 = v348;
      *(_QWORD *)&v272 = *(_QWORD *)&v347[40];
      v348 = 0;
      v137 = v349;
      LOBYTE(v287) = (_BYTE)v345;
      v138 = (WTF::StringImpl *)v288;
      *(_QWORD *)&v288 = v134;
      if (v138)
      {
        if (*(_DWORD *)v138 == 2)
          WTF::StringImpl::destroy(v138, v46);
        else
          *(_DWORD *)v138 -= 2;
      }
      v139 = (WTF::StringImpl *)*((_QWORD *)&v288 + 1);
      *((_QWORD *)&v288 + 1) = v135;
      if (v139)
      {
        if (*(_DWORD *)v139 == 2)
          WTF::StringImpl::destroy(v139, v46);
        else
          *(_DWORD *)v139 -= 2;
      }
      v289 = *(_OWORD *)v270;
      *(_OWORD *)v290 = v271;
      v140 = v291;
      *(_QWORD *)&v290[16] = v272;
      v291 = v136;
      v15 = v132;
      if (v140)
      {
        if (*(_DWORD *)v140 == 2)
          WTF::StringImpl::destroy(v140, v46);
        else
          *(_DWORD *)v140 -= 2;
      }
      v292 = v137;
      WTF::AtomStringImpl::addLiteral();
      v141 = v270[0];
      v143 = JSC::JSObject::get(Object, this, (unint64_t)v270[0]);
      if (v141)
      {
        if (*(_DWORD *)v141 == 2)
          WTF::StringImpl::destroy(v141, v142);
        else
          *(_DWORD *)v141 -= 2;
      }
      if (*((_DWORD *)v344[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v344[0]) & 1) != 0)
      {
        v170 = 1;
      }
      else
      {
        if (v143 != 10)
        {
          WebCore::Detail::SequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayShippingMethod>>>::convert((uint64_t)v270, this, v143);
          if ((_DWORD)v271)
          {
            v268 = 1;
            if ((_DWORD)v271 != -1)
              ((void (*)(uint64_t *, WTF::StringImpl **))off_1E334B140[v271])(v269, v270);
            v15 = v132;
            goto LABEL_248;
          }
          v145 = v270[0];
          v270[0] = 0;
          v146 = v270[1];
          v270[1] = 0;
          if (HIDWORD(v343))
            WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct((WTF::StringImpl *)v343, (WTF::StringImpl *)(v343 + 104 * HIDWORD(v343)));
          v147 = (WTF *)v343;
          if ((_QWORD)v343)
          {
            *(_QWORD *)&v343 = 0;
            DWORD2(v343) = 0;
            WTF::fastFree(v147, v144);
          }
          *(_QWORD *)&v343 = v145;
          *((_QWORD *)&v343 + 1) = v146;
          v148 = v270[0];
          if (HIDWORD(v270[1]))
          {
            WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(v270[0], (WTF::StringImpl *)((char *)v270[0] + 104 * HIDWORD(v270[1])));
            v148 = v270[0];
          }
          if (v148)
          {
            v270[0] = 0;
            LODWORD(v270[1]) = 0;
            WTF::fastFree(v148, v144);
          }
        }
        *(_OWORD *)v214 = v288;
        *(_OWORD *)&v214[16] = v289;
        LOBYTE(v213) = (_BYTE)v287;
        v288 = 0uLL;
        *(_OWORD *)&v214[32] = *(_OWORD *)v290;
        *(_QWORD *)&v214[48] = *(_QWORD *)&v290[16];
        v215 = v291;
        LOWORD(v216) = v292;
        v149 = v293[0];
        v291 = 0;
        v293[0] = 0;
        v217 = v149;
        v150 = v293[1];
        v293[1] = 0;
        *(_QWORD *)v218 = v150;
        v218[8] = 0;
        v235 = 0;
        if (v312)
        {
          *(_QWORD *)&v218[8] = v294;
          v218[16] = v295;
          v151 = v296;
          v294 = 0;
          v296 = 0uLL;
          v219 = v151;
          v220 = v297;
          v221 = v298;
          v152 = v300;
          v300 = 0;
          v222 = v299;
          v223 = v152;
          v224 = v301;
          v225 = 0;
          v232 = 0;
          if (v309)
          {
            v225 = v302;
            v153 = v303;
            v303 = 0uLL;
            v226 = v153;
            v227 = v304;
            v228 = v305;
            v154 = v307;
            v307 = 0;
            v229 = v306;
            v230 = v154;
            v231 = v308;
            v232 = 1;
          }
          v155 = v310;
          v310 = 0uLL;
          v233 = v155;
          v156 = v311;
          v311 = 0;
          v234 = v156;
          v235 = 1;
        }
        LOBYTE(v236) = 0;
        v246 = 0;
        if (v323)
        {
          v157 = v313;
          v313 = 0;
          v236 = v157;
          v237 = v314;
          v158 = v315;
          v315 = 0u;
          v238 = v158;
          v239 = v316;
          v240 = v317;
          v241 = v318;
          v242 = v319;
          v243 = v320;
          v159 = v321;
          v321 = 0u;
          v244 = v159;
          v160 = v322;
          v319 = 0;
          v322 = 0;
          v245 = v160;
          v246 = 1;
        }
        LOBYTE(v247) = 0;
        v249 = 0;
        if (v326)
        {
          v161 = v324;
          v324 = 0;
          v247 = v161;
          v162 = v325;
          v325 = 0;
          v248 = v162;
          v249 = 1;
        }
        LOBYTE(v250) = 0;
        v261 = 0;
        if (v338)
        {
          v163 = v329;
          v329 = 0u;
          v252 = v163;
          v253 = v330;
          v254 = v331;
          v164 = v336;
          v165 = v337;
          v336 = 0u;
          v337 = 0u;
          v166 = v327;
          v327 = 0;
          v250 = v166;
          v251 = v328;
          v255 = v332;
          v167 = v333;
          v333 = 0;
          v256 = v167;
          v257 = v334;
          v258 = v335;
          v259 = v164;
          v260 = v165;
          v261 = 1;
        }
        LOBYTE(v262) = 0;
        v265 = 0;
        if (v342)
        {
          v264 = 0;
          if (v341)
          {
            v168 = v339;
            v339 = 0;
            v262 = v168;
            v169 = v340;
            v340 = 0;
            v263 = v169;
            v264 = 1;
          }
          v265 = 1;
        }
        v170 = 0;
        v171 = *((_QWORD *)&v343 + 1);
        v266 = v343;
        v343 = 0uLL;
        v267 = v171;
      }
      v268 = v170;
LABEL_248:
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B070[v133])(v270, &v345);
      goto LABEL_249;
    }
    v268 = 1;
    if (v350 != -1)
      goto LABEL_248;
  }
LABEL_249:
  v172 = (WTF *)v343;
  if (HIDWORD(v343))
  {
    WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct((WTF::StringImpl *)v343, (WTF::StringImpl *)(v343 + 104 * HIDWORD(v343)));
    v172 = (WTF *)v343;
  }
  if (v172)
  {
    *(_QWORD *)&v343 = 0;
    DWORD2(v343) = 0;
    WTF::fastFree(v172, v46);
  }
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)&v287, v46);
  v173 = v268;
  if (!v268)
  {
    LOBYTE(v287) = (_BYTE)v213;
    v174 = *(_OWORD *)v214;
    *(_OWORD *)v214 = 0uLL;
    v288 = v174;
    v289 = *(_OWORD *)&v214[16];
    *(_OWORD *)v290 = *(_OWORD *)&v214[32];
    *(_QWORD *)&v290[16] = *(_QWORD *)&v214[48];
    v291 = v215;
    v292 = v216;
    v215 = 0;
    v293[0] = v217;
    *(_QWORD *)&v174 = *(_QWORD *)v218;
    v217 = 0;
    *(_QWORD *)v218 = 0;
    v293[1] = (WTF *)v174;
    LOBYTE(v294) = 0;
    v312 = 0;
    if (v235)
    {
      v294 = *(_QWORD *)&v218[8];
      v295 = v218[16];
      v175 = v219;
      *(_QWORD *)&v218[8] = 0;
      v219 = 0uLL;
      v296 = v175;
      v297 = v220;
      v298 = v221;
      v176 = v223;
      v223 = 0;
      v299 = v222;
      v300 = v176;
      v301 = v224;
      v302 = 0;
      v309 = 0;
      if (v232)
      {
        v302 = v225;
        v177 = v226;
        v226 = 0uLL;
        v303 = v177;
        v304 = v227;
        v305 = v228;
        v178 = v230;
        v230 = 0;
        v306 = v229;
        v307 = v178;
        v308 = v231;
        v309 = 1;
      }
      v179 = v233;
      v233 = 0uLL;
      v310 = v179;
      v180 = v234;
      v234 = 0;
      v311 = v180;
      v312 = 1;
    }
    LOBYTE(v313) = 0;
    v323 = 0;
    if (v246)
    {
      v181 = v236;
      v236 = 0;
      v313 = v181;
      v314 = v237;
      v182 = v238;
      v238 = 0u;
      v315 = v182;
      v316 = v239;
      v317 = v240;
      v318 = v241;
      v319 = v242;
      v320 = v243;
      v183 = v244;
      v244 = 0u;
      v321 = v183;
      v184 = v245;
      v242 = 0;
      v245 = 0;
      v322 = v184;
      v323 = 1;
    }
    LOBYTE(v324) = 0;
    v326 = 0;
    if (v249)
    {
      v324 = v247;
      v185 = v248;
      v247 = 0;
      v248 = 0;
      v325 = v185;
      v326 = 1;
    }
    LOBYTE(v327) = 0;
    v338 = 0;
    if (v261)
    {
      v186 = v252;
      v252 = 0u;
      v329 = v186;
      v330 = v253;
      v331 = v254;
      v187 = v259;
      v188 = v260;
      v259 = 0u;
      v260 = 0u;
      v189 = v250;
      v250 = 0;
      v327 = v189;
      v328 = v251;
      v332 = v255;
      v190 = v256;
      v256 = 0;
      v333 = v190;
      v334 = v257;
      v335 = v258;
      v336 = v187;
      v337 = v188;
      v338 = 1;
    }
    LOBYTE(v339) = 0;
    v342 = 0;
    if (v265)
    {
      v341 = 0;
      if (v264)
      {
        v191 = v262;
        v262 = 0;
        v339 = v191;
        v192 = v263;
        v263 = 0;
        v340 = v192;
        v341 = 1;
      }
      v342 = 1;
    }
    v193 = v266;
    v266 = 0;
    *(_QWORD *)&v343 = v193;
    v194 = v267;
    v267 = 0;
    *((_QWORD *)&v343 + 1) = v194;
    WebCore::ApplePaySession::completeShippingMethodSelection(v15 - 32, (uint64_t)&v287, (uint64_t)&v345);
    if (HIDWORD(v343))
      WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct((WTF::StringImpl *)v343, (WTF::StringImpl *)(v343 + 104 * HIDWORD(v343)));
    v196 = (WTF *)v343;
    if ((_QWORD)v343)
    {
      *(_QWORD *)&v343 = 0;
      DWORD2(v343) = 0;
      WTF::fastFree(v196, v195);
    }
    WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)&v287, v195);
    if (!v347[0])
    {
      v22 = 10;
LABEL_274:
      v173 = v268;
      goto LABEL_275;
    }
    v198 = (WTF::StringImpl *)v345;
    LOBYTE(v287) = (_BYTE)v345;
    v199 = v346;
    v346 = 0;
    *(_QWORD *)&v288 = v199;
    if (!*(_QWORD *)(v4 + 16))
    {
      v200.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v345, (JSC::JSGlobalObject *)&v288);
      JSC::VM::throwException((JSC::VM *)v4, this, v200);
      v199 = (WTF::StringImpl *)v288;
    }
    *(_QWORD *)&v288 = 0;
    if (v199)
    {
      if (*(_DWORD *)v199 == 2)
        WTF::StringImpl::destroy(v199, v198);
      else
        *(_DWORD *)v199 -= 2;
    }
    if (v347[0])
    {
      v201 = v346;
      v346 = 0;
      if (v201)
      {
        if (*(_DWORD *)v201 != 2)
        {
          v22 = 0;
          *(_DWORD *)v201 -= 2;
          goto LABEL_274;
        }
        WTF::StringImpl::destroy(v201, v198);
      }
    }
    v22 = 0;
    goto LABEL_274;
  }
  v22 = 0;
LABEL_275:
  if (v173 != -1)
LABEL_276:
    (*(&off_1E334B8C8 + v173))((int)&v287, (WebCore::ApplePayDetailsUpdateBase *)&v213);
  return (_BYTE *)v22;
}

_BYTE *WebCore::jsApplePaySessionPrototypeFunction_completeShippingContactSelection(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  WTF::StringImpl **v13;
  JSC::JSCell *v14;
  uint64_t v15;
  JSC::Structure *Object;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  JSValue v20;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  long double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  JSC::VM *v35;
  WTF *v36;
  WTF::StringImpl *v37;
  __int128 v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl **v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  JSC::JSCell *v54;
  int v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  JSC::JSCell *v65;
  int v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  WTF::StringImpl *v75;
  unsigned int v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  JSC::JSCell *v79;
  int v80;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF *v84;
  WTF *v85;
  int v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  JSC::VM *v90;
  WTF::StringImpl *v91;
  int v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  int v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  WTF::StringImpl **v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  int v104;
  WTF *v105;
  WTF *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  JSC::JSCell *v113;
  unsigned int v114;
  __int128 v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  unsigned int v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  JSC::JSCell *v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  __int16 v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  uint64_t v136;
  int v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  WTF *v144;
  int v145;
  WTF::StringImpl *v146;
  unsigned int v147;
  unsigned int v148;
  WTF *v149;
  uint64_t v150;
  uint64_t v151;
  WTF *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  int v156;
  WTF *v157;
  WTF::StringImpl *v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF *v162;
  WTF *v163;
  WTF *v164;
  WTF::StringImpl *v165;
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  WTF::StringImpl *v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  WTF *v176;
  unint64_t v177;
  __int128 v178;
  __int128 v179;
  unsigned __int128 v180;
  WTF::StringImpl *v181;
  uint64_t v182;
  WTF *v183;
  unint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  __int128 v192;
  uint64_t v193;
  __int128 v194;
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  unint64_t v200;
  __int128 v201;
  __int128 v202;
  unsigned __int128 v203;
  uint64_t v204;
  WTF *v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  JSValue v215;
  WTF::StringImpl *v216;
  double v217;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v219;
  WTF::StringImpl *v220;
  JSValue v221;
  WTF::StringImpl *v222;
  WebCore::ApplePayPaymentTokenContext *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  JSC::VM *v227;
  JSC::VM *v228;
  _QWORD v229[2];
  WTF::StringImpl *v230;
  _BYTE v231[56];
  WTF::StringImpl *v232;
  uint64_t v233;
  WTF *v234;
  _QWORD v235[3];
  __int128 v236;
  __int128 v237;
  __int128 v238;
  uint64_t v239;
  uint64_t v240;
  __int16 v241;
  char v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;
  __int16 v248;
  char v249;
  __int128 v250;
  uint64_t v251;
  char v252;
  WTF::StringImpl *v253;
  char v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  WTF::StringImpl *v258;
  uint64_t v259;
  __int16 v260;
  __int128 v261;
  uint64_t v262;
  char v263;
  WTF *v264;
  unint64_t v265;
  char v266;
  WTF::StringImpl *v267;
  char v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  WTF::StringImpl *v272;
  uint64_t v273;
  __int16 v274;
  uint64_t v275;
  __int128 v276;
  unsigned __int128 v277;
  char v278;
  WTF *v279;
  unint64_t v280;
  char v281;
  char v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  uint64_t v288[2];
  int v289;
  JSC::VM *v290[2];
  WTF *v291;
  WTF::StringImpl *v292;
  WTF::StringImpl *v293[2];
  __int128 v294;
  __int128 v295;
  __int128 v296;
  WTF::StringImpl *v297;
  uint64_t v298;
  __int16 v299;
  uint64_t v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  uint64_t v304;
  uint64_t v305;
  __int16 v306;
  char v307;
  __int128 v308;
  uint64_t v309;
  WTF::StringImpl *v310;
  __int128 v311;
  __int128 v312;
  _BYTE v313[24];
  WTF::StringImpl *v314;
  __int16 v315;
  WTF *v316;
  WTF::StringImpl *v317;
  uint64_t v318;
  char v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  uint64_t v323;
  uint64_t v324;
  __int16 v325;
  char v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  uint64_t v330;
  uint64_t v331;
  __int16 v332;
  char v333;
  __int128 v334;
  uint64_t v335;
  char v336;
  WTF::StringImpl *v337;
  char v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  WTF::StringImpl *v342;
  uint64_t v343;
  __int16 v344;
  __int128 v345;
  uint64_t v346;
  char v347;
  WTF *v348;
  unint64_t v349;
  char v350;
  WTF::StringImpl *v351;
  char v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  WTF::StringImpl *v356;
  uint64_t v357;
  __int16 v358;
  uint64_t v359;
  __int128 v360;
  unsigned __int128 v361;
  char v362;
  WTF *v363;
  unint64_t v364;
  unsigned __int8 v365;
  char v366;
  __int128 v367;
  __int128 v368;
  WTF::StringImpl *v369;
  WTF::StringImpl *v370;
  _BYTE v371[48];
  WTF::StringImpl *v372;
  uint64_t v373;
  unsigned int v374;
  _QWORD v375[3];
  __int128 v376;
  __int128 v377;
  uint64_t v378;
  uint64_t v379;
  __int16 v380;
  char v381;
  __int128 v382;
  uint64_t v383;
  unsigned int v384;
  uint64_t v385;

  v385 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v229[0] = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)v229, "ApplePaySession", "completeShippingContactSelection");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSApplePaySession::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSApplePaySession::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)v229, "ApplePaySession", "completeShippingContactSelection");
  v229[1] = v4;
  v12 = *((int *)a2 + 8) - 1;
  if (v12 >= 4)
    v12 = 4;
  if (!v12)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v20);
  }
  v13 = &v310;
  if (v12 == 4)
  {
    v17 = *(_QWORD *)(v5 + 24);
    v18 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
    v230 = v18;
    v228 = v4;
    if ((unint64_t)v18 < 0xFFFE000000000000 || (v18 & 0x80000000) != 0)
    {
      if ((unint64_t)v18 >= 0xFFFE000000000000)
      {
        v23 = (double)(int)v18;
      }
      else if ((unint64_t)v18 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v230, this);
      }
      else
      {
        *(_QWORD *)&v23 = (char *)v18 - 0x2000000000000;
      }
      if (*((_DWORD *)v4 + 20))
      {
        v217 = v23;
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
        v23 = v217;
        if ((hasExceptionsAfterHandlingTraps & 1) != 0)
          return 0;
      }
      LOWORD(v19) = 0;
      if (fabs(v23) != INFINITY && v23 != 0.0)
      {
        v24 = -floor(-v23);
        v25 = floor(v23);
        if (v23 >= 0.0)
          v26 = v25;
        else
          v26 = v24;
        v27 = fmod(v26, 65536.0);
        if (v27 < 0.0)
          v27 = v27 + 65536.0;
        v19 = (int)v27;
      }
    }
    else
    {
      LOWORD(v19) = (_WORD)v18;
    }
    WebCore::Detail::SequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayShippingMethod>>>::convert((uint64_t)v293, this, *((_QWORD *)a2 + 7));
    v28 = v294;
    if ((_DWORD)v294)
    {
      v50 = 0;
      v22 = 0;
      if ((_DWORD)v294 == -1)
        return (_BYTE *)v22;
      goto LABEL_64;
    }
    WebCore::convertDictionary<WebCore::ApplePayLineItem>(*((JSC::JSCell **)a2 + 8), (uint64_t)this, (uint64_t)&v230);
    v29 = v234;
    if ((_DWORD)v234)
    {
      v46 = 0;
      v50 = 0;
      if ((_DWORD)v234 == -1)
        goto LABEL_64;
      goto LABEL_63;
    }
    v30 = *((_QWORD *)a2 + 9);
    v31 = (WTF *)*((_QWORD *)this + 7);
    v291 = v31;
    if ((v30 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v30 + 5) <= 0x16u)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSC::throwTypeError();
      v49 = v310;
      v310 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
          WTF::StringImpl::destroy(v49, v48);
        else
          *(_DWORD *)v49 -= 2;
      }
      v46 = 0;
      v47 = 1;
      v289 = 1;
      goto LABEL_62;
    }
    *(_QWORD *)&v311 = 0;
    v310 = 0;
    v369 = (WTF::StringImpl *)&v310;
    JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayLineItem>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, v30, (uint64_t *)&v369);
    if (*((_DWORD *)v31 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v31))
    {
      v47 = 1;
      v289 = 1;
      WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v310, v32);
      v46 = 0;
      goto LABEL_62;
    }
    v33 = v17 - 32;
    v34 = v310;
    v310 = 0;
    v289 = 0;
    v35 = (JSC::VM *)v311;
    *(_QWORD *)&v311 = 0;
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v310, v32);
    v36 = v293[0];
    v293[0] = 0;
    v291 = v36;
    v37 = v293[1];
    v293[1] = 0;
    v292 = v37;
    LOBYTE(v310) = (_BYTE)v230;
    v38 = *(_OWORD *)v231;
    *(_OWORD *)v231 = 0uLL;
    v311 = v38;
    v312 = *(_OWORD *)&v231[16];
    *(_OWORD *)v313 = *(_OWORD *)&v231[32];
    v39 = v232;
    v232 = 0;
    *(_QWORD *)&v313[16] = *(_QWORD *)&v231[48];
    v314 = v39;
    v315 = v233;
    v288[0] = 0;
    v290[0] = v34;
    v288[1] = 0;
    v290[1] = v35;
    WebCore::ApplePaySession::completeShippingContactSelection(v33, (WTF::StringImpl *)(unsigned __int16)v19, (uint64_t *)&v291, (uint64_t)&v310, (uint64_t)v290, (uint64_t)&v369);
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v290, v40);
    v42 = v314;
    v314 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v41);
      else
        *(_DWORD *)v42 -= 2;
    }
    v43 = (WTF::StringImpl *)*((_QWORD *)&v311 + 1);
    *((_QWORD *)&v311 + 1) = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v41);
      else
        *(_DWORD *)v43 -= 2;
    }
    v44 = (WTF::StringImpl *)v311;
    *(_QWORD *)&v311 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v41);
      else
        *(_DWORD *)v44 -= 2;
    }
    if (HIDWORD(v292))
      WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(v291, (WTF *)((char *)v291 + 104 * HIDWORD(v292)));
    v45 = v291;
    if (v291)
    {
      v291 = 0;
      LODWORD(v292) = 0;
      WTF::fastFree(v45, v41);
    }
    if (!v371[0])
    {
      v46 = 10;
LABEL_57:
      v47 = 0;
LABEL_62:
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E334B100[v47])(&v310, v288);
LABEL_63:
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B070[v29])(&v310, &v230);
      v50 = v46;
LABEL_64:
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B140[v28])(&v230, v293);
      return (_BYTE *)v50;
    }
    v219 = (WTF::StringImpl *)v369;
    LOBYTE(v310) = (_BYTE)v369;
    v220 = v370;
    v370 = 0;
    *(_QWORD *)&v311 = v220;
    if (!*((_QWORD *)v228 + 2))
    {
      v221.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v369, (JSC::JSGlobalObject *)&v311);
      JSC::VM::throwException(v228, this, v221);
      v220 = (WTF::StringImpl *)v311;
    }
    *(_QWORD *)&v311 = 0;
    if (v220)
    {
      if (*(_DWORD *)v220 == 2)
        WTF::StringImpl::destroy(v220, v219);
      else
        *(_DWORD *)v220 -= 2;
    }
    if (v371[0])
    {
      v222 = v370;
      v370 = 0;
      if (v222)
      {
        if (*(_DWORD *)v222 != 2)
        {
          v46 = 0;
          *(_DWORD *)v222 -= 2;
          goto LABEL_57;
        }
        WTF::StringImpl::destroy(v222, v219);
      }
    }
    v46 = 0;
    goto LABEL_57;
  }
  if (v12 != 1)
    return (_BYTE *)JSC::throwTypeError();
  v14 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
  v15 = *(_QWORD *)(v5 + 24);
  v227 = v4;
  v290[0] = v4;
  if (((unint64_t)v14 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
  }
  else if (((unint64_t)v14 & 0xFFFE000000000002) != 0
         || (Object = (JSC::Structure *)JSC::JSCell::getObject(v14)) == 0)
  {
    JSC::throwTypeError();
    v22 = 0;
    v188 = 1;
    v287 = 1;
    goto LABEL_307;
  }
  v226 = v15;
  LOBYTE(v310) = 1;
  v311 = 0uLL;
  LOBYTE(v312) = 0;
  *((_QWORD *)&v312 + 1) = 0x7FF8000000000000;
  v313[0] = 1;
  *(_DWORD *)&v313[4] = 1;
  *(int64x2_t *)&v313[8] = vdupq_n_s64(0x7FF8000000000000uLL);
  v314 = 0;
  v315 = 0;
  v336 = 0;
  v51 = &v310;
  LOBYTE(v337) = 0;
  v347 = 0;
  LOBYTE(v348) = 0;
  v350 = 0;
  LOBYTE(v351) = 0;
  v362 = 0;
  LOBYTE(v363) = 0;
  v366 = 0;
  v317 = 0;
  v316 = 0;
  LOBYTE(v318) = 0;
  v367 = 0u;
  v368 = 0u;
  if (((unint64_t)v14 & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_69;
  WTF::AtomStringImpl::addLiteral();
  v54 = (JSC::JSCell *)JSC::JSObject::get(Object, this, (unint64_t)v230);
  if (v230)
  {
    if (*(_DWORD *)v230 == 2)
      WTF::StringImpl::destroy(v230, v53);
    else
      *(_DWORD *)v230 -= 2;
  }
  if (*((_DWORD *)v290[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v290[0]))
    goto LABEL_364;
  if (v54 != (JSC::JSCell *)10)
  {
    WebCore::convertDictionary<WebCore::ApplePayAutomaticReloadPaymentRequest>(v54, this, (uint64_t)&v369);
    v55 = v376;
    if ((_DWORD)v376)
    {
      v287 = 1;
      v62 = v376;
    }
    else
    {
      v56 = v369;
      v230 = v369;
      v231[0] = (_BYTE)v370;
      v57 = *(_QWORD *)v371;
      v58 = *(_QWORD *)&v371[8];
      *(_OWORD *)v371 = 0u;
      *(_QWORD *)&v231[8] = v57;
      *(_QWORD *)&v231[16] = v58;
      *(_OWORD *)&v231[24] = *(_OWORD *)&v371[16];
      *(_OWORD *)&v231[40] = *(_OWORD *)&v371[32];
      v59 = v373;
      v369 = 0;
      v373 = 0;
      v232 = v372;
      v233 = v59;
      LOWORD(v234) = v374;
      v60 = v375[0];
      v61 = v375[1];
      memset(v375, 0, sizeof(v375));
      v235[0] = v60;
      *(_OWORD *)&v235[1] = __PAIR128__(v375[2], v61);
      if (v347)
      {
        WebCore::ApplePayAutomaticReloadPaymentRequest::operator=((uint64_t)&v337, (WTF::StringImpl *)&v230);
      }
      else
      {
        v230 = 0;
        v337 = v56;
        v338 = (char)v370;
        *(_OWORD *)&v231[8] = 0uLL;
        *(_QWORD *)&v339 = v57;
        *((_QWORD *)&v339 + 1) = v58;
        v340 = *(_OWORD *)&v371[16];
        v341 = *(_OWORD *)&v371[32];
        v342 = v372;
        v343 = v59;
        v344 = v374;
        memset(v235, 0, sizeof(v235));
        *(_QWORD *)&v345 = v60;
        *((_QWORD *)&v345 + 1) = v61;
        v233 = 0;
        v346 = v375[2];
        v347 = 1;
      }
      WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&v230, v52);
      v62 = v376;
    }
    if (v62 != -1)
      (*(&off_1E334B0D0 + v62))((int)v293, (WebCore::ApplePayAutomaticReloadPaymentRequest *)&v369);
    if (v55)
      goto LABEL_288;
  }
  WTF::AtomStringImpl::addLiteral();
  v63 = v369;
  v65 = (JSC::JSCell *)JSC::JSObject::get(Object, this, (unint64_t)v369);
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, v64);
    else
      *(_DWORD *)v63 -= 2;
  }
  if (*((_DWORD *)v290[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v290[0]))
    goto LABEL_364;
  if (v65 != (JSC::JSCell *)10)
  {
    WebCore::convertDictionary<WebCore::ApplePayDeferredPaymentRequest>(v65, this, (uint64_t)&v369);
    v66 = v377;
    if ((_DWORD)v377)
    {
      v287 = 1;
      v76 = v377;
    }
    else
    {
      v67 = v369;
      v293[0] = v369;
      LOBYTE(v293[1]) = (_BYTE)v370;
      v68 = *(_QWORD *)v371;
      v69 = *(_QWORD *)&v371[8];
      *(_OWORD *)v371 = 0u;
      *(_QWORD *)&v294 = v68;
      *((_QWORD *)&v294 + 1) = v69;
      v295 = *(_OWORD *)&v371[16];
      v296 = *(_OWORD *)&v371[32];
      v70 = v373;
      v369 = 0;
      v373 = 0;
      v297 = v372;
      v298 = v70;
      v299 = v374;
      v71 = v375[1];
      v300 = v375[0];
      v301 = *(_OWORD *)&v375[1];
      v72 = v375[2];
      v73 = *((_QWORD *)&v376 + 1);
      v74 = v376;
      *(_QWORD *)&v302 = v376;
      *(_OWORD *)&v375[1] = 0u;
      v376 = 0u;
      *((_QWORD *)&v302 + 1) = v73;
      if (v362)
      {
        WebCore::ApplePayDeferredPaymentRequest::operator=((uint64_t)&v351, (WTF::StringImpl *)v293);
      }
      else
      {
        v75 = (WTF::StringImpl *)&v371[16];
        v293[0] = 0;
        v351 = v67;
        v352 = (char)v370;
        v294 = 0uLL;
        *(_QWORD *)&v353 = v68;
        *((_QWORD *)&v353 + 1) = v69;
        v354 = *(_OWORD *)&v371[16];
        v355 = *(_OWORD *)&v371[32];
        v356 = v372;
        v298 = 0;
        v357 = v70;
        v358 = v374;
        v359 = v375[0];
        *(_QWORD *)&v360 = v71;
        *((_QWORD *)&v360 + 1) = v72;
        v361 = __PAIR128__(v73, v74);
        v301 = 0uLL;
        v302 = 0uLL;
        v362 = 1;
      }
      WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)v293, v75);
      v76 = v377;
    }
    if (v76 != -1)
      (*(&off_1E334B0E0 + v76))((int)v293, (WebCore::ApplePayDeferredPaymentRequest *)&v369);
    if (v66)
      goto LABEL_288;
  }
  WTF::AtomStringImpl::addLiteral();
  v77 = v369;
  v79 = (JSC::JSCell *)JSC::JSObject::get(Object, this, (unint64_t)v369);
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
      WTF::StringImpl::destroy(v77, v78);
    else
      *(_DWORD *)v77 -= 2;
  }
  if (*((_DWORD *)v290[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v290[0]))
    goto LABEL_364;
  if (v79 != (JSC::JSCell *)10)
  {
    WebCore::convertDictionary<WebCore::ApplePayDisbursementRequest>(v79, this, (uint64_t)&v369);
    v80 = *(_DWORD *)&v371[16];
    if (*(_DWORD *)&v371[16])
    {
      v287 = 1;
      v86 = *(_DWORD *)&v371[16];
LABEL_130:
      if (v86 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B0F0[v86])(v293, &v370);
      if (v80)
        goto LABEL_288;
      goto LABEL_133;
    }
    v81 = v371[8];
    if (v371[8])
    {
      v82 = v370;
      v370 = 0;
      LODWORD(v13) = *(_DWORD *)v371;
      LODWORD(v51) = *(_DWORD *)&v371[4];
      *(_QWORD *)v371 = 0;
      v83 = 1;
      if (!v366)
      {
        v363 = v82;
        v364 = __PAIR64__(v51, v13);
        v365 = 1;
LABEL_127:
        v366 = 1;
LABEL_129:
        v86 = *(_DWORD *)&v371[16];
        goto LABEL_130;
      }
    }
    else
    {
      if (!v366)
      {
        LOBYTE(v363) = 0;
        v365 = 0;
        goto LABEL_127;
      }
      v83 = 0;
      v82 = 0;
    }
    if (v365 == v83)
    {
      if (v365)
      {
        v84 = v363;
        if (v363)
        {
          v363 = 0;
          LODWORD(v364) = 0;
          WTF::fastFree(v84, v52);
        }
        v363 = v82;
        v364 = __PAIR64__(v51, v13);
        goto LABEL_129;
      }
    }
    else
    {
      if (!v365)
      {
        v363 = v82;
        v364 = __PAIR64__(v51, v13);
        v365 = 1;
        goto LABEL_129;
      }
      v85 = v363;
      if (v363)
      {
        v363 = 0;
        LODWORD(v364) = 0;
        WTF::fastFree(v85, v52);
      }
      v365 = 0;
    }
    if (v81 && v82)
      WTF::fastFree(v82, v52);
    goto LABEL_129;
  }
LABEL_133:
  WTF::AtomStringImpl::addLiteral();
  v87 = v369;
  v89 = JSC::JSObject::get(Object, this, (unint64_t)v369);
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
      WTF::StringImpl::destroy(v87, v88);
    else
      *(_DWORD *)v87 -= 2;
  }
  if (*((_DWORD *)v290[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v290[0]))
    goto LABEL_364;
  if (v89 == 10)
    goto LABEL_170;
  v90 = (JSC::VM *)*((_QWORD *)this + 7);
  v288[0] = (uint64_t)v90;
  if ((v89 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v89 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v103 = v369;
    v369 = 0;
    if (v103)
    {
      if (*(_DWORD *)v103 == 2)
        WTF::StringImpl::destroy(v103, v52);
      else
        *(_DWORD *)v103 -= 2;
    }
    v95 = 1;
    *(_DWORD *)v371 = 1;
    goto LABEL_163;
  }
  v293[1] = 0;
  v293[0] = 0;
  v369 = (WTF::StringImpl *)v293;
  JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayLineItem>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, v89, (uint64_t *)&v369);
  if (*((_DWORD *)v90 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v90) & 1) != 0)
  {
    v92 = 1;
  }
  else
  {
    v92 = 0;
    v93 = v293[0];
    v293[0] = 0;
    v369 = v93;
    v94 = v293[1];
    v293[1] = 0;
    v370 = v94;
  }
  *(_DWORD *)v371 = v92;
  WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v293, v91);
  v95 = *(_DWORD *)v371;
  if (*(_DWORD *)v371)
  {
LABEL_163:
    v104 = 0;
    v287 = 1;
    goto LABEL_167;
  }
  v96 = v369;
  v369 = 0;
  v293[0] = v96;
  v97 = v370;
  v370 = 0;
  v293[1] = v97;
  if (HIDWORD(v317))
  {
    v98 = 80 * HIDWORD(v317);
    v99 = (WTF::StringImpl **)((char *)v316 + 64);
    do
    {
      v100 = *v99;
      *v99 = 0;
      if (v100)
      {
        if (*(_DWORD *)v100 == 2)
          WTF::StringImpl::destroy(v100, v52);
        else
          *(_DWORD *)v100 -= 2;
      }
      v101 = *(v99 - 6);
      *(v99 - 6) = 0;
      if (v101)
      {
        if (*(_DWORD *)v101 == 2)
          WTF::StringImpl::destroy(v101, v52);
        else
          *(_DWORD *)v101 -= 2;
      }
      v102 = *(v99 - 7);
      *(v99 - 7) = 0;
      if (v102)
      {
        if (*(_DWORD *)v102 == 2)
          WTF::StringImpl::destroy(v102, v52);
        else
          *(_DWORD *)v102 -= 2;
      }
      v99 += 10;
      v98 -= 80;
    }
    while (v98);
  }
  v105 = v316;
  if (v316)
  {
    v316 = 0;
    LODWORD(v317) = 0;
    WTF::fastFree(v105, v52);
  }
  v106 = v293[0];
  v293[0] = 0;
  v316 = v106;
  v107 = v293[1];
  v293[1] = 0;
  v317 = v107;
  WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v293, v52);
  v104 = 1;
  v95 = *(_DWORD *)v371;
LABEL_167:
  if (v95 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B100[v95])(v293, &v369);
  if (!v104)
    goto LABEL_288;
LABEL_170:
  WTF::AtomStringImpl::addLiteral();
  v108 = v369;
  v110 = JSC::JSObject::get(Object, this, (unint64_t)v369);
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
      WTF::StringImpl::destroy(v108, v109);
    else
      *(_DWORD *)v108 -= 2;
  }
  if (*((_DWORD *)v290[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v290[0]))
    goto LABEL_364;
  if (v110 != 10)
  {
    v144 = (WTF *)*((_QWORD *)this + 7);
    v291 = v144;
    if ((v110 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v110 + 5) <= 0x16u)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSC::throwTypeError();
      v154 = v293[0];
      v293[0] = 0;
      if (v154)
      {
        if (*(_DWORD *)v154 == 2)
          WTF::StringImpl::destroy(v154, v153);
        else
          *(_DWORD *)v154 -= 2;
      }
      v145 = 1;
      *(_DWORD *)v371 = 1;
      v287 = 1;
    }
    else
    {
      v293[1] = 0;
      v293[0] = 0;
      v288[0] = (uint64_t)v293;
      JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayPaymentTokenContext>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, v110, v288);
      if (*((_DWORD *)v144 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v144) & 1) != 0)
      {
        v223 = v293[0];
        *(_DWORD *)v371 = 1;
        if (HIDWORD(v293[1]))
        {
          v224 = 40 * HIDWORD(v293[1]);
          do
          {
            WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v223, v52);
            v223 = (WebCore::ApplePayPaymentTokenContext *)(v225 + 40);
            v224 -= 40;
          }
          while (v224);
          v223 = v293[0];
        }
        if (v223)
        {
          v293[0] = 0;
          LODWORD(v293[1]) = 0;
          WTF::fastFree(v223, v52);
        }
      }
      else
      {
        v369 = v293[0];
        v370 = v293[1];
        *(_DWORD *)v371 = 0;
      }
      v145 = *(_DWORD *)v371;
      if (!*(_DWORD *)v371)
      {
        v146 = v369;
        v369 = 0;
        v147 = v370;
        v148 = HIDWORD(v370);
        v370 = 0;
        if (v350)
        {
          if (HIDWORD(v349))
          {
            v149 = v348;
            v150 = 40 * HIDWORD(v349);
            do
            {
              WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v149, v52);
              v149 = (WTF *)(v151 + 40);
              v150 -= 40;
            }
            while (v150);
          }
          v152 = v348;
          if (v348)
          {
            v348 = 0;
            LODWORD(v349) = 0;
            WTF::fastFree(v152, v52);
          }
          v348 = v146;
          v349 = __PAIR64__(v148, v147);
          if (*(_DWORD *)v371 != -1)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B110[*(unsigned int *)v371])(v293, &v369);
        }
        else
        {
          v348 = v146;
          v349 = __PAIR64__(v148, v147);
          v350 = 1;
        }
        goto LABEL_175;
      }
      v287 = 1;
      if (*(_DWORD *)v371 == -1)
        goto LABEL_288;
    }
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B110[v145])(v293, &v369);
    goto LABEL_288;
  }
LABEL_175:
  WTF::AtomStringImpl::addLiteral();
  v111 = v369;
  v113 = (JSC::JSCell *)JSC::JSObject::get(Object, this, (unint64_t)v369);
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
      WTF::StringImpl::destroy(v111, v112);
    else
      *(_DWORD *)v111 -= 2;
  }
  if (*((_DWORD *)v290[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v290[0]))
    goto LABEL_364;
  if (v113 == (JSC::JSCell *)10)
    goto LABEL_187;
  WebCore::convertDictionary<WebCore::ApplePayRecurringPaymentRequest>(v113, this, (uint64_t)&v369);
  v114 = v384;
  if (v384)
  {
    v287 = 1;
    v122 = v384;
  }
  else
  {
    v293[0] = v369;
    LOBYTE(v293[1]) = (_BYTE)v370;
    v115 = *(_OWORD *)v371;
    v369 = 0;
    *(_QWORD *)v371 = 0;
    v294 = v115;
    v295 = *(_OWORD *)&v371[16];
    v296 = *(_OWORD *)&v371[32];
    v116 = v373;
    *(_QWORD *)&v371[8] = 0;
    v373 = 0;
    v297 = v372;
    v298 = v116;
    v299 = v374;
    LOBYTE(v300) = 0;
    v307 = 0;
    if (v381)
    {
      LOBYTE(v300) = v375[0];
      v117 = *(_OWORD *)&v375[1];
      *(_OWORD *)&v375[1] = 0uLL;
      v301 = v117;
      v302 = v376;
      v303 = v377;
      v118 = v379;
      v379 = 0;
      v304 = v378;
      v305 = v118;
      v306 = v380;
      v307 = 1;
    }
    v119 = v382;
    v382 = 0uLL;
    v308 = v119;
    v120 = v383;
    v383 = 0;
    v309 = v120;
    std::optional<WebCore::ApplePayRecurringPaymentRequest>::operator=[abi:sn180100]<WebCore::ApplePayRecurringPaymentRequest,void>((uint64_t)&v318, (WTF::StringImpl *)v293);
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)v293, v121);
    v122 = v384;
  }
  if (v122 != -1)
    (*(&off_1E334B120 + v122))((int)v293, (WebCore::ApplePayRecurringPaymentRequest *)&v369);
  if (!v114)
  {
LABEL_187:
    WTF::AtomStringImpl::addLiteral();
    v123 = v369;
    v125 = (JSC::JSCell *)JSC::JSObject::get(Object, this, (unint64_t)v369);
    if (v123)
    {
      if (*(_DWORD *)v123 == 2)
        WTF::StringImpl::destroy(v123, v124);
      else
        *(_DWORD *)v123 -= 2;
    }
    if (*((_DWORD *)v290[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v290[0]))
    {
LABEL_364:
      v287 = 1;
      goto LABEL_288;
    }
    if (v125 == (JSC::JSCell *)10)
    {
LABEL_69:
      WebCore::throwRequiredMemberTypeError((int)this, (int)v290, "newTotal", 9, "ApplePayShippingContactUpdate", 30, "ApplePayLineItem", 17);
      v287 = 1;
      goto LABEL_288;
    }
    WebCore::convertDictionary<WebCore::ApplePayLineItem>(v125, (uint64_t)this, (uint64_t)&v369);
    v126 = v374;
    if (v374)
      goto LABEL_381;
    v127 = v370;
    v128 = *(_QWORD *)v371;
    v370 = 0;
    *(_QWORD *)v371 = 0;
    *(_OWORD *)v293 = *(_OWORD *)&v371[8];
    v294 = *(_OWORD *)&v371[24];
    v129 = v372;
    *(_QWORD *)&v295 = *(_QWORD *)&v371[40];
    v372 = 0;
    v130 = v373;
    LOBYTE(v310) = (_BYTE)v369;
    v131 = (WTF::StringImpl *)v311;
    *(_QWORD *)&v311 = v127;
    if (v131)
    {
      if (*(_DWORD *)v131 == 2)
        WTF::StringImpl::destroy(v131, v52);
      else
        *(_DWORD *)v131 -= 2;
    }
    v132 = (WTF::StringImpl *)*((_QWORD *)&v311 + 1);
    *((_QWORD *)&v311 + 1) = v128;
    if (v132)
    {
      if (*(_DWORD *)v132 == 2)
        WTF::StringImpl::destroy(v132, v52);
      else
        *(_DWORD *)v132 -= 2;
    }
    v312 = *(_OWORD *)v293;
    *(_OWORD *)v313 = v294;
    v133 = v314;
    *(_QWORD *)&v313[16] = v295;
    v314 = v129;
    if (v133)
    {
      if (*(_DWORD *)v133 == 2)
        WTF::StringImpl::destroy(v133, v52);
      else
        *(_DWORD *)v133 -= 2;
    }
    v315 = v130;
    WTF::AtomStringImpl::addLiteral();
    v134 = v293[0];
    v136 = JSC::JSObject::get(Object, this, (unint64_t)v293[0]);
    if (v134)
    {
      if (*(_DWORD *)v134 == 2)
        WTF::StringImpl::destroy(v134, v135);
      else
        *(_DWORD *)v134 -= 2;
    }
    if (*((_DWORD *)v290[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v290[0]) & 1) != 0)
      goto LABEL_381;
    if (v136 == 10)
    {
LABEL_256:
      WTF::AtomStringImpl::addLiteral();
      v158 = v293[0];
      v159 = JSC::JSObject::get(Object, this, (unint64_t)v293[0]);
      if (v158)
      {
        if (*(_DWORD *)v158 == 2)
          WTF::StringImpl::destroy(v158, v52);
        else
          *(_DWORD *)v158 -= 2;
      }
      if (!*((_DWORD *)v290[0] + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v290[0]) & 1) == 0)
      {
        if (v159 != 10)
        {
          WebCore::Detail::SequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayShippingMethod>>>::convert((uint64_t)v293, this, v159);
          if ((_DWORD)v294)
          {
            v287 = 1;
            if ((_DWORD)v294 != -1)
              ((void (*)(uint64_t *, WTF::StringImpl **))off_1E334B140[v294])(v288, v293);
            goto LABEL_286;
          }
          v160 = v293[0];
          v293[0] = 0;
          v161 = v293[1];
          v293[1] = 0;
          if (HIDWORD(v368))
            WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct((WTF::StringImpl *)v368, (WTF::StringImpl *)(v368 + 104 * HIDWORD(v368)));
          v162 = (WTF *)v368;
          if ((_QWORD)v368)
          {
            *(_QWORD *)&v368 = 0;
            DWORD2(v368) = 0;
            WTF::fastFree(v162, v52);
          }
          *(_QWORD *)&v368 = v160;
          *((_QWORD *)&v368 + 1) = v161;
          v163 = v293[0];
          if (HIDWORD(v293[1]))
          {
            WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(v293[0], (WTF::StringImpl *)((char *)v293[0] + 104 * HIDWORD(v293[1])));
            v163 = v293[0];
          }
          if (v163)
          {
            v293[0] = 0;
            LODWORD(v293[1]) = 0;
            WTF::fastFree(v163, v52);
          }
        }
        *(_OWORD *)v231 = v311;
        *(_OWORD *)&v231[16] = v312;
        LOBYTE(v230) = (_BYTE)v310;
        v311 = 0uLL;
        *(_OWORD *)&v231[32] = *(_OWORD *)v313;
        *(_QWORD *)&v231[48] = *(_QWORD *)&v313[16];
        v232 = v314;
        LOWORD(v233) = v315;
        v164 = v316;
        v314 = 0;
        v316 = 0;
        v234 = v164;
        v165 = v317;
        v317 = 0;
        v235[0] = v165;
        LOBYTE(v235[1]) = 0;
        v252 = 0;
        if (v336)
        {
          v235[1] = v318;
          LOBYTE(v235[2]) = v319;
          v166 = v320;
          v318 = 0;
          v320 = 0uLL;
          v236 = v166;
          v237 = v321;
          v238 = v322;
          v167 = v324;
          v324 = 0;
          v239 = v323;
          v240 = v167;
          v241 = v325;
          v242 = 0;
          v249 = 0;
          if (v333)
          {
            v242 = v326;
            v168 = v327;
            v327 = 0uLL;
            v243 = v168;
            v244 = v328;
            v245 = v329;
            v169 = v331;
            v331 = 0;
            v246 = v330;
            v247 = v169;
            v248 = v332;
            v249 = 1;
          }
          v170 = v334;
          v334 = 0uLL;
          v250 = v170;
          v171 = v335;
          v335 = 0;
          v251 = v171;
          v252 = 1;
        }
        LOBYTE(v253) = 0;
        v263 = 0;
        if (v347)
        {
          v172 = v337;
          v337 = 0;
          v253 = v172;
          v254 = v338;
          v173 = v339;
          v339 = 0u;
          v255 = v173;
          v256 = v340;
          v257 = v341;
          v258 = v342;
          v259 = v343;
          v260 = v344;
          v174 = v345;
          v345 = 0u;
          v261 = v174;
          v175 = v346;
          v343 = 0;
          v346 = 0;
          v262 = v175;
          v263 = 1;
        }
        LOBYTE(v264) = 0;
        v266 = 0;
        if (v350)
        {
          v176 = v348;
          v348 = 0;
          v264 = v176;
          v177 = v349;
          v349 = 0;
          v265 = v177;
          v266 = 1;
        }
        LOBYTE(v267) = 0;
        v278 = 0;
        if (v362)
        {
          v178 = v353;
          v353 = 0u;
          v269 = v178;
          v270 = v354;
          v271 = v355;
          v179 = v360;
          v180 = v361;
          v360 = 0u;
          v361 = 0u;
          v181 = v351;
          v351 = 0;
          v267 = v181;
          v268 = v352;
          v272 = v356;
          v182 = v357;
          v357 = 0;
          v273 = v182;
          v274 = v358;
          v275 = v359;
          v276 = v179;
          v277 = v180;
          v278 = 1;
        }
        LOBYTE(v279) = 0;
        v282 = 0;
        if (v366)
        {
          v281 = 0;
          if (v365)
          {
            v183 = v363;
            v363 = 0;
            v279 = v183;
            v184 = v364;
            v364 = 0;
            v280 = v184;
            v281 = 1;
          }
          v282 = 1;
        }
        v185 = 0;
        v186 = *((_QWORD *)&v367 + 1);
        v283 = v367;
        v367 = 0uLL;
        v284 = v186;
        v187 = *((_QWORD *)&v368 + 1);
        v285 = v368;
        v368 = 0uLL;
        v286 = v187;
LABEL_285:
        v287 = v185;
LABEL_286:
        if ((_DWORD)v126 != -1)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B070[v126])(v293, &v369);
        goto LABEL_288;
      }
LABEL_381:
      v185 = 1;
      goto LABEL_285;
    }
    v288[0] = *((_QWORD *)this + 7);
    if ((v136 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v136 + 5) <= 0x16u)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSC::throwTypeError();
      v155 = v293[0];
      v293[0] = 0;
      if (v155)
      {
        if (*(_DWORD *)v155 == 2)
          WTF::StringImpl::destroy(v155, v52);
        else
          *(_DWORD *)v155 -= 2;
      }
      v137 = 1;
      LODWORD(v294) = 1;
    }
    else
    {
      WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::ApplePayError>>>::convert(this, v136, (uint64_t)v293);
      v137 = v294;
      if (!(_DWORD)v294)
      {
        v138 = v293[0];
        v293[0] = 0;
        v139 = v293[1];
        v293[1] = 0;
        if (HIDWORD(v367))
        {
          v140 = (uint64_t *)v367;
          v141 = 8 * HIDWORD(v367);
          do
          {
            v142 = *v140;
            *v140 = 0;
            if (v142)
            {
              if (*(_DWORD *)(v142 + 8) == 1)
              {
                v143 = *(WTF::StringImpl **)(v142 + 16);
                *(_QWORD *)(v142 + 16) = 0;
                if (v143)
                {
                  if (*(_DWORD *)v143 == 2)
                    WTF::StringImpl::destroy(v143, v52);
                  else
                    *(_DWORD *)v143 -= 2;
                }
                WTF::fastFree((WTF *)v142, v52);
              }
              else
              {
                --*(_DWORD *)(v142 + 8);
              }
            }
            ++v140;
            v141 -= 8;
          }
          while (v141);
        }
        v157 = (WTF *)v367;
        if ((_QWORD)v367)
        {
          *(_QWORD *)&v367 = 0;
          DWORD2(v367) = 0;
          WTF::fastFree(v157, v52);
        }
        *(_QWORD *)&v367 = v138;
        *((_QWORD *)&v367 + 1) = v139;
        v156 = 1;
        v137 = v294;
LABEL_253:
        if (v137 != -1)
          ((void (*)(uint64_t *, WTF::StringImpl **))off_1E334B130[v137])(v288, v293);
        if (!v156)
          goto LABEL_286;
        goto LABEL_256;
      }
    }
    v156 = 0;
    v287 = 1;
    goto LABEL_253;
  }
LABEL_288:
  WebCore::ApplePayCouponCodeUpdate::~ApplePayCouponCodeUpdate((WebCore::ApplePayCouponCodeUpdate *)&v310, v52);
  v188 = v287;
  if (!v287)
  {
    LOBYTE(v310) = (_BYTE)v230;
    v189 = *(_OWORD *)v231;
    *(_OWORD *)v231 = 0uLL;
    v311 = v189;
    v312 = *(_OWORD *)&v231[16];
    *(_OWORD *)v313 = *(_OWORD *)&v231[32];
    *(_QWORD *)&v313[16] = *(_QWORD *)&v231[48];
    v314 = v232;
    v315 = v233;
    v232 = 0;
    v316 = v234;
    *(_QWORD *)&v189 = v235[0];
    v234 = 0;
    v235[0] = 0;
    v317 = (WTF::StringImpl *)v189;
    LOBYTE(v318) = 0;
    v336 = 0;
    if (v252)
    {
      v318 = v235[1];
      v319 = v235[2];
      v190 = v236;
      v235[1] = 0;
      v236 = 0uLL;
      v320 = v190;
      v321 = v237;
      v322 = v238;
      v191 = v240;
      v240 = 0;
      v323 = v239;
      v324 = v191;
      v325 = v241;
      v326 = 0;
      v333 = 0;
      if (v249)
      {
        v326 = v242;
        v192 = v243;
        v243 = 0uLL;
        v327 = v192;
        v328 = v244;
        v329 = v245;
        v193 = v247;
        v247 = 0;
        v330 = v246;
        v331 = v193;
        v332 = v248;
        v333 = 1;
      }
      v194 = v250;
      v250 = 0uLL;
      v334 = v194;
      v195 = v251;
      v251 = 0;
      v335 = v195;
      v336 = 1;
    }
    LOBYTE(v337) = 0;
    v347 = 0;
    if (v263)
    {
      v337 = v253;
      v338 = v254;
      v196 = v255;
      v255 = 0u;
      v339 = v196;
      v340 = v256;
      v341 = v257;
      v197 = v259;
      v253 = 0;
      v259 = 0;
      v342 = v258;
      v343 = v197;
      v344 = v260;
      v198 = v261;
      v261 = 0u;
      v345 = v198;
      v199 = v262;
      v262 = 0;
      v346 = v199;
      v347 = 1;
    }
    LOBYTE(v348) = 0;
    v350 = 0;
    if (v266)
    {
      v348 = v264;
      v200 = v265;
      v264 = 0;
      v265 = 0;
      v349 = v200;
      v350 = 1;
    }
    LOBYTE(v351) = 0;
    v362 = 0;
    if (v278)
    {
      v201 = v269;
      v269 = 0u;
      v353 = v201;
      v354 = v270;
      v355 = v271;
      v202 = v276;
      v203 = v277;
      v276 = 0u;
      v277 = 0u;
      v351 = v267;
      v352 = v268;
      v356 = v272;
      v204 = v273;
      v267 = 0;
      v273 = 0;
      v357 = v204;
      v358 = v274;
      v359 = v275;
      v360 = v202;
      v361 = v203;
      v362 = 1;
    }
    LOBYTE(v363) = 0;
    v366 = 0;
    if (v282)
    {
      v365 = 0;
      if (v281)
      {
        v205 = v279;
        v279 = 0;
        v363 = v205;
        v206 = v280;
        v280 = 0;
        v364 = v206;
        v365 = 1;
      }
      v366 = 1;
    }
    v207 = v283;
    v283 = 0;
    *(_QWORD *)&v367 = v207;
    v208 = v284;
    v284 = 0;
    *((_QWORD *)&v367 + 1) = v208;
    v209 = v285;
    v285 = 0;
    *(_QWORD *)&v368 = v209;
    v210 = v286;
    v286 = 0;
    *((_QWORD *)&v368 + 1) = v210;
    WebCore::ApplePaySession::completeShippingContactSelection(v226 - 32, (uint64_t)&v310, (uint64_t)&v369);
    WebCore::ApplePayCouponCodeUpdate::~ApplePayCouponCodeUpdate((WebCore::ApplePayCouponCodeUpdate *)&v310, v211);
    if (!v371[0])
    {
      v22 = 10;
LABEL_305:
      v188 = v287;
      goto LABEL_306;
    }
    v213 = (WTF::StringImpl *)v369;
    LOBYTE(v310) = (_BYTE)v369;
    v214 = v370;
    v370 = 0;
    *(_QWORD *)&v311 = v214;
    if (!*((_QWORD *)v227 + 2))
    {
      v215.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v369, (JSC::JSGlobalObject *)&v311);
      JSC::VM::throwException(v227, this, v215);
      v214 = (WTF::StringImpl *)v311;
    }
    *(_QWORD *)&v311 = 0;
    if (v214)
    {
      if (*(_DWORD *)v214 == 2)
        WTF::StringImpl::destroy(v214, v213);
      else
        *(_DWORD *)v214 -= 2;
    }
    if (v371[0])
    {
      v216 = v370;
      v370 = 0;
      if (v216)
      {
        if (*(_DWORD *)v216 != 2)
        {
          v22 = 0;
          *(_DWORD *)v216 -= 2;
          goto LABEL_305;
        }
        WTF::StringImpl::destroy(v216, v213);
      }
    }
    v22 = 0;
    goto LABEL_305;
  }
  v22 = 0;
LABEL_306:
  if (v188 != -1)
LABEL_307:
    (*(&off_1E334B8D8 + v188))((int)&v310, (WebCore::ApplePayCouponCodeUpdate *)&v230);
  return (_BYTE *)v22;
}

_BYTE *WebCore::jsApplePaySessionPrototypeFunction_completePaymentMethodSelection(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  JSC::JSCell *v13;
  uint64_t v14;
  JSC::Structure *Object;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  __int128 v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  JSValue v29;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  JSC::JSCell *v36;
  int v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  JSC::JSCell *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  WTF::StringImpl *v57;
  unsigned int v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  JSC::JSCell *v61;
  unsigned int v62;
  int v63;
  int v64;
  JSC::Structure *v65;
  uint64_t v66;
  WTF *v67;
  int v68;
  WTF *v69;
  unsigned int v70;
  WTF *v71;
  int v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl **v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  int v88;
  WTF *v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  JSC::JSCell *v96;
  unsigned int v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  unsigned int v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  JSC::JSCell *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  __int16 v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  int v120;
  __int128 v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  JSC::VM *v126;
  int v127;
  WTF *v128;
  unsigned int v129;
  unsigned int v130;
  WTF *v131;
  uint64_t v132;
  uint64_t v133;
  WTF *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  int v138;
  WTF *v139;
  WTF::StringImpl *v140;
  uint64_t v141;
  JSC::VM *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  uint64_t v147;
  __int128 v148;
  WTF *v149;
  WTF *v150;
  WTF *v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  WTF *v163;
  unint64_t v164;
  __int128 v165;
  __int128 v166;
  unsigned __int128 v167;
  uint64_t v168;
  uint64_t v169;
  WTF *v170;
  unint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  uint64_t v180;
  __int128 v181;
  uint64_t v182;
  WTF::StringImpl *v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  unint64_t v187;
  __int128 v188;
  __int128 v189;
  unsigned __int128 v190;
  uint64_t v191;
  uint64_t v192;
  WTF *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  JSValue v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  JSValue v206;
  WTF::StringImpl *v207;
  WebCore::ApplePayPaymentTokenContext *v208;
  uint64_t v209;
  uint64_t v210;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v212;
  _QWORD v213[2];
  WTF::StringImpl *v214;
  _BYTE v215[56];
  WTF::StringImpl *v216;
  uint64_t v217;
  WTF *v218;
  __int128 v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  uint64_t v225;
  __int16 v226;
  char v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  uint64_t v232;
  __int16 v233;
  char v234;
  __int128 v235;
  uint64_t v236;
  char v237;
  WTF::StringImpl *v238;
  char v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  WTF::StringImpl *v243;
  uint64_t v244;
  __int16 v245;
  __int128 v246;
  uint64_t v247;
  char v248;
  WTF *v249;
  unint64_t v250;
  char v251;
  uint64_t v252;
  char v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  WTF::StringImpl *v257;
  uint64_t v258;
  __int16 v259;
  uint64_t v260;
  __int128 v261;
  unsigned __int128 v262;
  char v263;
  WTF *v264;
  unint64_t v265;
  char v266;
  char v267;
  __int128 v268;
  __int128 v269;
  WTF::StringImpl *v270;
  int v271;
  WTF::StringImpl *v272[2];
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  WTF::StringImpl *v277;
  uint64_t v278;
  __int16 v279;
  uint64_t v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  uint64_t v284;
  uint64_t v285;
  __int16 v286;
  char v287;
  __int128 v288;
  uint64_t v289;
  char v290[8];
  __int128 v291;
  __int128 v292;
  _BYTE v293[24];
  WTF::StringImpl *v294;
  __int16 v295;
  WTF *v296;
  uint64_t v297;
  uint64_t v298;
  char v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  uint64_t v303;
  uint64_t v304;
  __int16 v305;
  char v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  uint64_t v310;
  uint64_t v311;
  __int16 v312;
  char v313;
  __int128 v314;
  uint64_t v315;
  char v316;
  WTF::StringImpl *v317;
  char v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  WTF::StringImpl *v322;
  uint64_t v323;
  __int16 v324;
  __int128 v325;
  uint64_t v326;
  char v327;
  WTF *v328;
  unint64_t v329;
  char v330;
  uint64_t v331;
  char v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  WTF::StringImpl *v336;
  uint64_t v337;
  __int16 v338;
  uint64_t v339;
  __int128 v340;
  unsigned __int128 v341;
  char v342;
  WTF *v343;
  unint64_t v344;
  unsigned __int8 v345;
  char v346;
  __int128 v347;
  __int128 v348;
  WTF::StringImpl *v349;
  JSC::VM *v350[2];
  __int128 v351;
  _BYTE v352[48];
  WTF::StringImpl *v353;
  uint64_t v354;
  unsigned int v355;
  _QWORD v356[3];
  __int128 v357;
  __int128 v358;
  uint64_t v359;
  uint64_t v360;
  __int16 v361;
  char v362;
  __int128 v363;
  uint64_t v364;
  unsigned int v365;
  uint64_t v366;

  v366 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v213[0] = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)v213, "ApplePaySession", "completePaymentMethodSelection");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSApplePaySession::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSApplePaySession::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)v213, "ApplePaySession", "completePaymentMethodSelection");
  v213[1] = v4;
  v12 = *((int *)a2 + 8) - 1;
  if (v12 >= 2)
    v12 = 2;
  if (!v12)
  {
    v29.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v29);
  }
  if (v12 == 2)
  {
    v16 = *(_QWORD *)(v5 + 24);
    WebCore::convertDictionary<WebCore::ApplePayLineItem>(*((JSC::JSCell **)a2 + 6), (uint64_t)this, (uint64_t)v290);
    v17 = v296;
    if ((_DWORD)v296)
    {
      v27 = 0;
      v31 = 0;
      if ((_DWORD)v296 == -1)
        return (_BYTE *)v31;
      goto LABEL_32;
    }
    v18 = *((_QWORD *)a2 + 7);
    v19 = (WTF::StringImpl *)*((_QWORD *)this + 7);
    v272[0] = v19;
    if ((v18 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v18 + 5) <= 0x16u)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSC::throwTypeError();
      v33 = v214;
      v214 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v32);
        else
          *(_DWORD *)v33 -= 2;
      }
      v27 = 0;
      v28 = 1;
      LODWORD(v274) = 1;
      goto LABEL_31;
    }
    v214 = 0;
    *(_QWORD *)v215 = 0;
    *(_QWORD *)&v351 = &v214;
    JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayLineItem>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, v18, (uint64_t *)&v351);
    if (*((_DWORD *)v19 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v19))
    {
      v28 = 1;
      LODWORD(v274) = 1;
      WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v214, v20);
      v27 = 0;
      goto LABEL_31;
    }
    v21 = v214;
    v214 = 0;
    LODWORD(v274) = 0;
    v22 = *(_QWORD *)v215;
    *(_QWORD *)v215 = 0;
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v214, v20);
    v23 = v291;
    *(_OWORD *)&v215[16] = v292;
    *(_OWORD *)&v215[32] = *(_OWORD *)v293;
    v24 = v294;
    v294 = 0;
    v273 = 0uLL;
    v237 = 0;
    LOBYTE(v238) = 0;
    v248 = 0;
    LOBYTE(v249) = 0;
    v251 = 0;
    LOBYTE(v252) = 0;
    v263 = 0;
    LOBYTE(v264) = 0;
    v267 = 0;
    BYTE8(v219) = 0;
    v268 = 0u;
    v269 = 0u;
    v270 = 0;
    LOBYTE(v214) = v290[0];
    v291 = 0uLL;
    *(_OWORD *)v215 = v23;
    *(_QWORD *)&v215[48] = *(_QWORD *)&v293[16];
    v216 = v24;
    LOWORD(v217) = v295;
    v272[0] = 0;
    v218 = v21;
    v272[1] = 0;
    *(_QWORD *)&v219 = v22;
    WebCore::ApplePaySession::completePaymentMethodSelection(v16 - 32, (uint64_t)&v214, (uint64_t)&v351);
    WebCore::ApplePayPaymentMethodUpdate::~ApplePayPaymentMethodUpdate((WebCore::ApplePayPaymentMethodUpdate *)&v214, v25);
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v272, v26);
    if (!v352[0])
    {
      v27 = 10;
LABEL_24:
      v28 = 0;
LABEL_31:
      ((void (*)(WTF::StringImpl **, __int128 *))off_1E334B100[v28])(&v214, &v273);
LABEL_32:
      ((void (*)(WTF::StringImpl **, char *))off_1E334B070[v17])(&v214, v290);
      return (_BYTE *)v27;
    }
    v204 = (WTF::StringImpl *)v351;
    LOBYTE(v214) = v351;
    v205 = (WTF::StringImpl *)*((_QWORD *)&v351 + 1);
    *((_QWORD *)&v351 + 1) = 0;
    *(_QWORD *)v215 = v205;
    if (!*((_QWORD *)v4 + 2))
    {
      v206.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v351, (JSC::JSGlobalObject *)v215);
      JSC::VM::throwException(v4, this, v206);
      v205 = *(WTF::StringImpl **)v215;
    }
    *(_QWORD *)v215 = 0;
    if (v205)
    {
      if (*(_DWORD *)v205 == 2)
        WTF::StringImpl::destroy(v205, v204);
      else
        *(_DWORD *)v205 -= 2;
    }
    if (v352[0])
    {
      v207 = (WTF::StringImpl *)*((_QWORD *)&v351 + 1);
      *((_QWORD *)&v351 + 1) = 0;
      if (v207)
      {
        if (*(_DWORD *)v207 != 2)
        {
          v27 = 0;
          *(_DWORD *)v207 -= 2;
          goto LABEL_24;
        }
        WTF::StringImpl::destroy(v207, v204);
      }
    }
    v27 = 0;
    goto LABEL_24;
  }
  v13 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
  v14 = *(_QWORD *)(v5 + 24);
  v350[0] = v4;
  if (((unint64_t)v13 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
  }
  else if (((unint64_t)v13 & 0xFFFE000000000002) != 0
         || (Object = (JSC::Structure *)JSC::JSCell::getObject(v13)) == 0)
  {
    JSC::throwTypeError();
    v31 = 0;
    v175 = 1;
    v271 = 1;
    goto LABEL_289;
  }
  v290[0] = 1;
  v291 = 0uLL;
  LOBYTE(v292) = 0;
  *((_QWORD *)&v292 + 1) = 0x7FF8000000000000;
  v293[0] = 1;
  *(_DWORD *)&v293[4] = 1;
  *(int64x2_t *)&v293[8] = vdupq_n_s64(0x7FF8000000000000uLL);
  v294 = 0;
  v295 = 0;
  v316 = 0;
  LOBYTE(v317) = 0;
  v327 = 0;
  LOBYTE(v328) = 0;
  v330 = 0;
  LOBYTE(v331) = 0;
  v342 = 0;
  LOBYTE(v343) = 0;
  v346 = 0;
  v297 = 0;
  v296 = 0;
  LOBYTE(v298) = 0;
  v347 = 0u;
  v348 = 0u;
  v349 = 0;
  if (((unint64_t)v13 & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_37;
  WTF::AtomStringImpl::addLiteral();
  v36 = (JSC::JSCell *)JSC::JSObject::get(Object, this, (unint64_t)v214);
  if (v214)
  {
    if (*(_DWORD *)v214 == 2)
      WTF::StringImpl::destroy(v214, v35);
    else
      *(_DWORD *)v214 -= 2;
  }
  if (*((_DWORD *)v350[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v350[0]))
    goto LABEL_346;
  if (v36 != (JSC::JSCell *)10)
  {
    WebCore::convertDictionary<WebCore::ApplePayAutomaticReloadPaymentRequest>(v36, this, (uint64_t)&v351);
    v37 = v357;
    if ((_DWORD)v357)
    {
      v271 = 1;
      v44 = v357;
    }
    else
    {
      v38 = (WTF::StringImpl *)v351;
      *(_QWORD *)&v351 = 0;
      v214 = v38;
      v215[0] = BYTE8(v351);
      v39 = *(_QWORD *)v352;
      v40 = *(_QWORD *)&v352[8];
      *(_OWORD *)v352 = 0u;
      *(_QWORD *)&v215[8] = v39;
      *(_QWORD *)&v215[16] = v40;
      *(_OWORD *)&v215[24] = *(_OWORD *)&v352[16];
      *(_OWORD *)&v215[40] = *(_OWORD *)&v352[32];
      v41 = v354;
      v216 = v353;
      v217 = v354;
      LOWORD(v218) = v355;
      v42 = v356[0];
      v43 = v356[1];
      memset(v356, 0, sizeof(v356));
      *(_QWORD *)&v219 = v42;
      *((_QWORD *)&v219 + 1) = v43;
      v354 = 0;
      v220 = v356[2];
      if (v327)
      {
        WebCore::ApplePayAutomaticReloadPaymentRequest::operator=((uint64_t)&v317, (WTF::StringImpl *)&v214);
      }
      else
      {
        v214 = 0;
        v317 = v38;
        v318 = BYTE8(v351);
        *(_OWORD *)&v215[8] = 0uLL;
        *(_QWORD *)&v319 = v39;
        *((_QWORD *)&v319 + 1) = v40;
        v320 = *(_OWORD *)&v352[16];
        v321 = *(_OWORD *)&v352[32];
        v217 = 0;
        v322 = v353;
        v323 = v41;
        v324 = v355;
        v219 = 0uLL;
        *(_QWORD *)&v325 = v42;
        *((_QWORD *)&v325 + 1) = v43;
        v220 = 0;
        v326 = v356[2];
        v327 = 1;
      }
      WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&v214, v34);
      v44 = v357;
    }
    if (v44 != -1)
      (*(&off_1E334B0D0 + v44))((int)&v273, (WebCore::ApplePayAutomaticReloadPaymentRequest *)&v351);
    if (v37)
      goto LABEL_270;
  }
  WTF::AtomStringImpl::addLiteral();
  v45 = (WTF::StringImpl *)v351;
  v47 = (JSC::JSCell *)JSC::JSObject::get(Object, this, v351);
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v46);
    else
      *(_DWORD *)v45 -= 2;
  }
  if (*((_DWORD *)v350[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v350[0]))
    goto LABEL_346;
  if (v47 != (JSC::JSCell *)10)
  {
    WebCore::convertDictionary<WebCore::ApplePayDeferredPaymentRequest>(v47, this, (uint64_t)&v351);
    v48 = v358;
    if ((_DWORD)v358)
    {
      v271 = 1;
      v58 = v358;
    }
    else
    {
      v49 = v351;
      *(_QWORD *)&v351 = 0;
      *(_QWORD *)&v273 = v49;
      BYTE8(v273) = BYTE8(v351);
      v50 = *(_QWORD *)v352;
      v51 = *(_QWORD *)&v352[8];
      *(_OWORD *)v352 = 0u;
      *(_QWORD *)&v274 = v50;
      *((_QWORD *)&v274 + 1) = v51;
      v275 = *(_OWORD *)&v352[16];
      v276 = *(_OWORD *)&v352[32];
      v52 = v354;
      v354 = 0;
      v277 = v353;
      v278 = v52;
      v279 = v355;
      v53 = v356[1];
      v280 = v356[0];
      v281 = *(_OWORD *)&v356[1];
      v54 = v356[2];
      v55 = *((_QWORD *)&v357 + 1);
      v56 = v357;
      *(_QWORD *)&v282 = v357;
      *(_OWORD *)&v356[1] = 0u;
      v357 = 0u;
      *((_QWORD *)&v282 + 1) = v55;
      if (v342)
      {
        WebCore::ApplePayDeferredPaymentRequest::operator=((uint64_t)&v331, (WTF::StringImpl *)&v273);
      }
      else
      {
        v57 = (WTF::StringImpl *)&v352[16];
        v331 = v49;
        v332 = BYTE8(v351);
        v274 = 0uLL;
        *(_QWORD *)&v333 = v50;
        *((_QWORD *)&v333 + 1) = v51;
        v334 = *(_OWORD *)&v352[16];
        v335 = *(_OWORD *)&v352[32];
        v336 = v353;
        *(_QWORD *)&v273 = 0;
        v278 = 0;
        v337 = v52;
        v338 = v355;
        v339 = v356[0];
        *(_QWORD *)&v340 = v53;
        *((_QWORD *)&v340 + 1) = v54;
        v341 = __PAIR128__(v55, v56);
        v281 = 0uLL;
        v282 = 0uLL;
        v342 = 1;
      }
      WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)&v273, v57);
      v58 = v358;
    }
    if (v58 != -1)
      (*(&off_1E334B0E0 + v58))((int)&v273, (WebCore::ApplePayDeferredPaymentRequest *)&v351);
    if (v48)
      goto LABEL_270;
  }
  WTF::AtomStringImpl::addLiteral();
  v59 = (WTF::StringImpl *)v351;
  v61 = (JSC::JSCell *)JSC::JSObject::get(Object, this, v351);
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, v60);
    else
      *(_DWORD *)v59 -= 2;
  }
  if (*((_DWORD *)v350[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v350[0]))
    goto LABEL_346;
  if (v61 != (JSC::JSCell *)10)
  {
    WebCore::convertDictionary<WebCore::ApplePayDisbursementRequest>(v61, this, (uint64_t)&v351);
    v63 = *(_DWORD *)&v352[16];
    if (*(_DWORD *)&v352[16])
    {
      v271 = 1;
      v72 = *(_DWORD *)&v352[16];
LABEL_96:
      if (v72 != -1)
        ((void (*)(__int128 *, char *))off_1E334B0F0[v72])(&v273, (char *)&v351 + 8);
      if (v63)
        goto LABEL_270;
      goto LABEL_99;
    }
    v64 = v352[8];
    if (v352[8])
    {
      v65 = Object;
      v66 = v14;
      v67 = (WTF *)*((_QWORD *)&v351 + 1);
      *((_QWORD *)&v351 + 1) = 0;
      LODWORD(v14) = *(_DWORD *)v352;
      v62 = *(_DWORD *)&v352[4];
      *(_QWORD *)v352 = 0;
      v68 = 1;
      if (!v346)
      {
        v343 = v67;
        v344 = __PAIR64__(v62, v14);
        v345 = 1;
        v14 = v66;
        Object = v65;
LABEL_92:
        v346 = 1;
LABEL_95:
        v72 = *(_DWORD *)&v352[16];
        goto LABEL_96;
      }
    }
    else
    {
      if (!v346)
      {
        LOBYTE(v343) = 0;
        v345 = 0;
        goto LABEL_92;
      }
      v65 = Object;
      v66 = v14;
      v68 = 0;
      v67 = 0;
    }
    if (v345 == v68)
    {
      if (v345)
      {
        v69 = v343;
        if (v343)
        {
          v343 = 0;
          LODWORD(v344) = 0;
          v70 = v62;
          WTF::fastFree(v69, v34);
          v62 = v70;
        }
        v343 = v67;
        v344 = __PAIR64__(v62, v14);
        goto LABEL_94;
      }
    }
    else
    {
      if (!v345)
      {
        v343 = v67;
        v344 = __PAIR64__(v62, v14);
        v345 = 1;
LABEL_94:
        v14 = v66;
        Object = v65;
        goto LABEL_95;
      }
      v71 = v343;
      if (v343)
      {
        v343 = 0;
        LODWORD(v344) = 0;
        WTF::fastFree(v71, v34);
      }
      v345 = 0;
    }
    v14 = v66;
    Object = v65;
    if (v64 && v67)
      WTF::fastFree(v67, v34);
    goto LABEL_95;
  }
LABEL_99:
  WTF::AtomStringImpl::addLiteral();
  v73 = (WTF::StringImpl *)v351;
  v75 = JSC::JSObject::get(Object, this, v351);
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
      WTF::StringImpl::destroy(v73, v74);
    else
      *(_DWORD *)v73 -= 2;
  }
  if (*((_DWORD *)v350[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v350[0]))
    goto LABEL_346;
  if (v75 == 10)
    goto LABEL_136;
  v76 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  v272[0] = v76;
  if ((v75 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v75 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v87 = (WTF::StringImpl *)v351;
    *(_QWORD *)&v351 = 0;
    if (v87)
    {
      if (*(_DWORD *)v87 == 2)
        WTF::StringImpl::destroy(v87, v34);
      else
        *(_DWORD *)v87 -= 2;
    }
    v80 = 1;
    *(_DWORD *)v352 = 1;
    goto LABEL_129;
  }
  v273 = 0uLL;
  *(_QWORD *)&v351 = &v273;
  JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayLineItem>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, v75, (uint64_t *)&v351);
  if (*((_DWORD *)v76 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v76) & 1) != 0)
  {
    v78 = 1;
  }
  else
  {
    v78 = 0;
    v79 = *((_QWORD *)&v273 + 1);
    *(_QWORD *)&v351 = v273;
    v273 = 0uLL;
    *((_QWORD *)&v351 + 1) = v79;
  }
  *(_DWORD *)v352 = v78;
  WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v273, v77);
  v80 = *(_DWORD *)v352;
  if (*(_DWORD *)v352)
  {
LABEL_129:
    v88 = 0;
    v271 = 1;
    goto LABEL_133;
  }
  v81 = *((_QWORD *)&v351 + 1);
  *(_QWORD *)&v273 = v351;
  v351 = 0uLL;
  *((_QWORD *)&v273 + 1) = v81;
  if (HIDWORD(v297))
  {
    v82 = 80 * HIDWORD(v297);
    v83 = (WTF::StringImpl **)((char *)v296 + 64);
    do
    {
      v84 = *v83;
      *v83 = 0;
      if (v84)
      {
        if (*(_DWORD *)v84 == 2)
          WTF::StringImpl::destroy(v84, v34);
        else
          *(_DWORD *)v84 -= 2;
      }
      v85 = *(v83 - 6);
      *(v83 - 6) = 0;
      if (v85)
      {
        if (*(_DWORD *)v85 == 2)
          WTF::StringImpl::destroy(v85, v34);
        else
          *(_DWORD *)v85 -= 2;
      }
      v86 = *(v83 - 7);
      *(v83 - 7) = 0;
      if (v86)
      {
        if (*(_DWORD *)v86 == 2)
          WTF::StringImpl::destroy(v86, v34);
        else
          *(_DWORD *)v86 -= 2;
      }
      v83 += 10;
      v82 -= 80;
    }
    while (v82);
  }
  v89 = v296;
  if (v296)
  {
    v296 = 0;
    LODWORD(v297) = 0;
    WTF::fastFree(v89, v34);
  }
  v90 = *((_QWORD *)&v273 + 1);
  v296 = (WTF *)v273;
  v273 = 0uLL;
  v297 = v90;
  WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v273, v34);
  v88 = 1;
  v80 = *(_DWORD *)v352;
LABEL_133:
  if (v80 != -1)
    ((void (*)(__int128 *, __int128 *))off_1E334B100[v80])(&v273, &v351);
  if (!v88)
    goto LABEL_270;
LABEL_136:
  WTF::AtomStringImpl::addLiteral();
  v91 = (WTF::StringImpl *)v351;
  v93 = JSC::JSObject::get(Object, this, v351);
  if (v91)
  {
    if (*(_DWORD *)v91 == 2)
      WTF::StringImpl::destroy(v91, v92);
    else
      *(_DWORD *)v91 -= 2;
  }
  if (*((_DWORD *)v350[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v350[0]))
    goto LABEL_346;
  if (v93 != 10)
  {
    v126 = (JSC::VM *)*((_QWORD *)this + 7);
    v350[1] = v126;
    if ((v93 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v93 + 5) <= 0x16u)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSC::throwTypeError();
      v136 = (WTF::StringImpl *)v273;
      *(_QWORD *)&v273 = 0;
      if (v136)
      {
        if (*(_DWORD *)v136 == 2)
          WTF::StringImpl::destroy(v136, v135);
        else
          *(_DWORD *)v136 -= 2;
      }
      v127 = 1;
      *(_DWORD *)v352 = 1;
      v271 = 1;
    }
    else
    {
      v273 = 0uLL;
      v272[0] = (WTF::StringImpl *)&v273;
      JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayPaymentTokenContext>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, v93, (uint64_t *)v272);
      if (*((_DWORD *)v126 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v126) & 1) != 0)
      {
        v208 = (WebCore::ApplePayPaymentTokenContext *)v273;
        *(_DWORD *)v352 = 1;
        if (HIDWORD(v273))
        {
          v209 = 40 * HIDWORD(v273);
          do
          {
            WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v208, v34);
            v208 = (WebCore::ApplePayPaymentTokenContext *)(v210 + 40);
            v209 -= 40;
          }
          while (v209);
          v208 = (WebCore::ApplePayPaymentTokenContext *)v273;
        }
        if (v208)
        {
          *(_QWORD *)&v273 = 0;
          DWORD2(v273) = 0;
          WTF::fastFree(v208, v34);
        }
      }
      else
      {
        v351 = v273;
        *(_DWORD *)v352 = 0;
      }
      v127 = *(_DWORD *)v352;
      if (!*(_DWORD *)v352)
      {
        v128 = (WTF *)v351;
        v129 = DWORD2(v351);
        v130 = HIDWORD(v351);
        v351 = 0uLL;
        if (v330)
        {
          if (HIDWORD(v329))
          {
            v131 = v328;
            v132 = 40 * HIDWORD(v329);
            do
            {
              WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v131, v34);
              v131 = (WTF *)(v133 + 40);
              v132 -= 40;
            }
            while (v132);
          }
          v134 = v328;
          if (v328)
          {
            v328 = 0;
            LODWORD(v329) = 0;
            WTF::fastFree(v134, v34);
          }
          v328 = v128;
          v329 = __PAIR64__(v130, v129);
          if (*(_DWORD *)v352 != -1)
            ((void (*)(__int128 *, __int128 *))off_1E334B110[*(unsigned int *)v352])(&v273, &v351);
        }
        else
        {
          v328 = v128;
          v329 = __PAIR64__(v130, v129);
          v330 = 1;
        }
        goto LABEL_141;
      }
      v271 = 1;
      if (*(_DWORD *)v352 == -1)
        goto LABEL_270;
    }
    ((void (*)(__int128 *, __int128 *))off_1E334B110[v127])(&v273, &v351);
    goto LABEL_270;
  }
LABEL_141:
  WTF::AtomStringImpl::addLiteral();
  v94 = (WTF::StringImpl *)v351;
  v96 = (JSC::JSCell *)JSC::JSObject::get(Object, this, v351);
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
      WTF::StringImpl::destroy(v94, v95);
    else
      *(_DWORD *)v94 -= 2;
  }
  if (*((_DWORD *)v350[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v350[0]))
    goto LABEL_346;
  if (v96 == (JSC::JSCell *)10)
    goto LABEL_153;
  WebCore::convertDictionary<WebCore::ApplePayRecurringPaymentRequest>(v96, this, (uint64_t)&v351);
  v97 = v365;
  if (v365)
  {
    v271 = 1;
    v105 = v365;
  }
  else
  {
    *(_QWORD *)&v273 = v351;
    BYTE8(v273) = BYTE8(v351);
    v98 = *(_OWORD *)v352;
    *(_QWORD *)&v351 = 0;
    *(_QWORD *)v352 = 0;
    v274 = v98;
    v275 = *(_OWORD *)&v352[16];
    v276 = *(_OWORD *)&v352[32];
    v99 = v354;
    *(_QWORD *)&v352[8] = 0;
    v354 = 0;
    v277 = v353;
    v278 = v99;
    v279 = v355;
    LOBYTE(v280) = 0;
    v287 = 0;
    if (v362)
    {
      LOBYTE(v280) = v356[0];
      v100 = *(_OWORD *)&v356[1];
      v356[1] = 0;
      v356[2] = 0;
      v281 = v100;
      v282 = v357;
      v283 = v358;
      v101 = v360;
      v360 = 0;
      v284 = v359;
      v285 = v101;
      v286 = v361;
      v287 = 1;
    }
    v102 = v363;
    v363 = 0uLL;
    v288 = v102;
    v103 = v364;
    v364 = 0;
    v289 = v103;
    std::optional<WebCore::ApplePayRecurringPaymentRequest>::operator=[abi:sn180100]<WebCore::ApplePayRecurringPaymentRequest,void>((uint64_t)&v298, (WTF::StringImpl *)&v273);
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)&v273, v104);
    v105 = v365;
  }
  if (v105 != -1)
    (*(&off_1E334B120 + v105))((int)&v273, (WebCore::ApplePayRecurringPaymentRequest *)&v351);
  if (!v97)
  {
LABEL_153:
    WTF::AtomStringImpl::addLiteral();
    v106 = (WTF::StringImpl *)v351;
    v108 = (JSC::JSCell *)JSC::JSObject::get(Object, this, v351);
    if (v106)
    {
      if (*(_DWORD *)v106 == 2)
        WTF::StringImpl::destroy(v106, v107);
      else
        *(_DWORD *)v106 -= 2;
    }
    if (*((_DWORD *)v350[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v350[0]))
    {
LABEL_346:
      v271 = 1;
      goto LABEL_270;
    }
    if (v108 == (JSC::JSCell *)10)
    {
LABEL_37:
      WebCore::throwRequiredMemberTypeError((int)this, (int)v350, "newTotal", 9, "ApplePayPaymentMethodUpdate", 28, "ApplePayLineItem", 17);
      v271 = 1;
      goto LABEL_270;
    }
    v212 = v14;
    WebCore::convertDictionary<WebCore::ApplePayLineItem>(v108, (uint64_t)this, (uint64_t)&v351);
    v109 = v355;
    if (v355)
      goto LABEL_372;
    v110 = *((_QWORD *)&v351 + 1);
    v111 = *(_QWORD *)v352;
    *((_QWORD *)&v351 + 1) = 0;
    *(_QWORD *)v352 = 0;
    v273 = *(_OWORD *)&v352[8];
    v274 = *(_OWORD *)&v352[24];
    v112 = v353;
    *(_QWORD *)&v275 = *(_QWORD *)&v352[40];
    v353 = 0;
    v113 = v354;
    v290[0] = v351;
    v114 = (WTF::StringImpl *)v291;
    *(_QWORD *)&v291 = v110;
    if (v114)
    {
      if (*(_DWORD *)v114 == 2)
        WTF::StringImpl::destroy(v114, v34);
      else
        *(_DWORD *)v114 -= 2;
    }
    v115 = (WTF::StringImpl *)*((_QWORD *)&v291 + 1);
    *((_QWORD *)&v291 + 1) = v111;
    if (v115)
    {
      if (*(_DWORD *)v115 == 2)
        WTF::StringImpl::destroy(v115, v34);
      else
        *(_DWORD *)v115 -= 2;
    }
    v292 = v273;
    *(_OWORD *)v293 = v274;
    v116 = v294;
    *(_QWORD *)&v293[16] = v275;
    v294 = v112;
    if (v116)
    {
      if (*(_DWORD *)v116 == 2)
        WTF::StringImpl::destroy(v116, v34);
      else
        *(_DWORD *)v116 -= 2;
    }
    v295 = v113;
    WTF::AtomStringImpl::addLiteral();
    v117 = (WTF::StringImpl *)v273;
    v119 = JSC::JSObject::get(Object, this, v273);
    if (v117)
    {
      if (*(_DWORD *)v117 == 2)
        WTF::StringImpl::destroy(v117, v118);
      else
        *(_DWORD *)v117 -= 2;
    }
    if (*((_DWORD *)v350[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v350[0]))
    {
      v271 = 1;
      goto LABEL_268;
    }
    if (v119 == 10)
      goto LABEL_221;
    v272[0] = *((WTF::StringImpl **)this + 7);
    if ((v119 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v119 + 5) <= 0x16u)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSC::throwTypeError();
      v137 = (WTF::StringImpl *)v273;
      *(_QWORD *)&v273 = 0;
      if (v137)
      {
        if (*(_DWORD *)v137 == 2)
          WTF::StringImpl::destroy(v137, v34);
        else
          *(_DWORD *)v137 -= 2;
      }
      v120 = 1;
      LODWORD(v274) = 1;
    }
    else
    {
      WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::ApplePayError>>>::convert(this, v119, (uint64_t)&v273);
      v120 = v274;
      if (!(_DWORD)v274)
      {
        v121 = v273;
        v273 = 0uLL;
        if (HIDWORD(v347))
        {
          v122 = (uint64_t *)v347;
          v123 = 8 * HIDWORD(v347);
          do
          {
            v124 = *v122;
            *v122 = 0;
            if (v124)
            {
              if (*(_DWORD *)(v124 + 8) == 1)
              {
                v125 = *(WTF::StringImpl **)(v124 + 16);
                *(_QWORD *)(v124 + 16) = 0;
                if (v125)
                {
                  if (*(_DWORD *)v125 == 2)
                    WTF::StringImpl::destroy(v125, v34);
                  else
                    *(_DWORD *)v125 -= 2;
                }
                WTF::fastFree((WTF *)v124, v34);
              }
              else
              {
                --*(_DWORD *)(v124 + 8);
              }
            }
            ++v122;
            v123 -= 8;
          }
          while (v123);
        }
        v139 = (WTF *)v347;
        if ((_QWORD)v347)
        {
          *(_QWORD *)&v347 = 0;
          DWORD2(v347) = 0;
          WTF::fastFree(v139, v34);
        }
        v347 = v121;
        v138 = 1;
        v120 = v274;
LABEL_218:
        if (v120 != -1)
          ((void (*)(WTF::StringImpl **, __int128 *))off_1E334B130[v120])(v272, &v273);
        if (!v138)
          goto LABEL_267;
LABEL_221:
        WTF::AtomStringImpl::addLiteral();
        v140 = (WTF::StringImpl *)v273;
        v141 = JSC::JSObject::get(Object, this, v273);
        if (v140)
        {
          if (*(_DWORD *)v140 == 2)
            WTF::StringImpl::destroy(v140, v34);
          else
            *(_DWORD *)v140 -= 2;
        }
        if (*((_DWORD *)v350[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v350[0]) & 1) != 0)
          goto LABEL_372;
        if (v141 == 10)
        {
LABEL_237:
          WTF::AtomStringImpl::addLiteral();
          v146 = (WTF::StringImpl *)v273;
          v147 = JSC::JSObject::get(Object, this, v273);
          if (v146)
          {
            if (*(_DWORD *)v146 == 2)
              WTF::StringImpl::destroy(v146, v34);
            else
              *(_DWORD *)v146 -= 2;
          }
          if (*((_DWORD *)v350[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v350[0]) & 1) != 0)
          {
LABEL_372:
            v172 = 1;
LABEL_266:
            v271 = v172;
            goto LABEL_267;
          }
          if (v147 == 10)
          {
LABEL_251:
            *(_OWORD *)v215 = v291;
            *(_OWORD *)&v215[16] = v292;
            LOBYTE(v214) = v290[0];
            v291 = 0uLL;
            *(_OWORD *)&v215[32] = *(_OWORD *)v293;
            *(_QWORD *)&v215[48] = *(_QWORD *)&v293[16];
            v216 = v294;
            LOWORD(v217) = v295;
            v151 = v296;
            v294 = 0;
            v296 = 0;
            v218 = v151;
            v152 = v297;
            v297 = 0;
            *(_QWORD *)&v219 = v152;
            BYTE8(v219) = 0;
            v237 = 0;
            if (v316)
            {
              *((_QWORD *)&v219 + 1) = v298;
              LOBYTE(v220) = v299;
              v153 = v300;
              v298 = 0;
              v300 = 0uLL;
              v221 = v153;
              v222 = v301;
              v223 = v302;
              v154 = v304;
              v304 = 0;
              v224 = v303;
              v225 = v154;
              v226 = v305;
              v227 = 0;
              v234 = 0;
              if (v313)
              {
                v227 = v306;
                v155 = v307;
                v307 = 0uLL;
                v228 = v155;
                v229 = v308;
                v230 = v309;
                v156 = v311;
                v311 = 0;
                v231 = v310;
                v232 = v156;
                v233 = v312;
                v234 = 1;
              }
              v157 = v314;
              v314 = 0uLL;
              v235 = v157;
              v158 = v315;
              v315 = 0;
              v236 = v158;
              v237 = 1;
            }
            LOBYTE(v238) = 0;
            v248 = 0;
            if (v327)
            {
              v159 = v317;
              v317 = 0;
              v238 = v159;
              v239 = v318;
              v160 = v319;
              v319 = 0u;
              v240 = v160;
              v241 = v320;
              v242 = v321;
              v243 = v322;
              v244 = v323;
              v245 = v324;
              v161 = v325;
              v325 = 0u;
              v246 = v161;
              v162 = v326;
              v323 = 0;
              v326 = 0;
              v247 = v162;
              v248 = 1;
            }
            LOBYTE(v249) = 0;
            v251 = 0;
            if (v330)
            {
              v163 = v328;
              v328 = 0;
              v249 = v163;
              v164 = v329;
              v329 = 0;
              v250 = v164;
              v251 = 1;
            }
            LOBYTE(v252) = 0;
            v263 = 0;
            if (v342)
            {
              v165 = v333;
              v333 = 0u;
              v254 = v165;
              v255 = v334;
              v256 = v335;
              v166 = v340;
              v167 = v341;
              v340 = 0u;
              v341 = 0u;
              v168 = v331;
              v331 = 0;
              v252 = v168;
              v253 = v332;
              v257 = v336;
              v169 = v337;
              v337 = 0;
              v258 = v169;
              v259 = v338;
              v260 = v339;
              v261 = v166;
              v262 = v167;
              v263 = 1;
            }
            LOBYTE(v264) = 0;
            v267 = 0;
            if (v346)
            {
              v266 = 0;
              if (v345)
              {
                v170 = v343;
                v343 = 0;
                v264 = v170;
                v171 = v344;
                v344 = 0;
                v265 = v171;
                v266 = 1;
              }
              v267 = 1;
            }
            v172 = 0;
            *(_QWORD *)&v268 = v347;
            *(_QWORD *)&v269 = v348;
            v270 = v349;
            v173 = *((_QWORD *)&v347 + 1);
            v347 = 0uLL;
            *((_QWORD *)&v268 + 1) = v173;
            v174 = *((_QWORD *)&v348 + 1);
            v348 = 0uLL;
            *((_QWORD *)&v269 + 1) = v174;
            v349 = 0;
            goto LABEL_266;
          }
          WebCore::Detail::SequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayShippingMethod>>>::convert((uint64_t)&v273, this, v147);
          if (!(_DWORD)v274)
          {
            v148 = v273;
            v273 = 0uLL;
            if (HIDWORD(v348))
              WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct((WTF::StringImpl *)v348, (WTF::StringImpl *)(v348 + 104 * HIDWORD(v348)));
            v149 = (WTF *)v348;
            if ((_QWORD)v348)
            {
              *(_QWORD *)&v348 = 0;
              DWORD2(v348) = 0;
              WTF::fastFree(v149, v34);
            }
            v348 = v148;
            v150 = (WTF *)v273;
            if (HIDWORD(v273))
            {
              WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct((WTF::StringImpl *)v273, (WTF::StringImpl *)(v273 + 104 * HIDWORD(v273)));
              v150 = (WTF *)v273;
            }
            if (v150)
            {
              *(_QWORD *)&v273 = 0;
              DWORD2(v273) = 0;
              WTF::fastFree(v150, v34);
            }
            goto LABEL_251;
          }
          v271 = 1;
          if ((_DWORD)v274 != -1)
            ((void (*)(WTF::StringImpl **, __int128 *))off_1E334B140[v274])(v272, &v273);
LABEL_267:
          if ((_DWORD)v109 == -1)
          {
LABEL_269:
            v14 = v212;
            goto LABEL_270;
          }
LABEL_268:
          ((void (*)(__int128 *, __int128 *))off_1E334B070[v109])(&v273, &v351);
          goto LABEL_269;
        }
        *(_QWORD *)&v273 = v141;
        v142 = (JSC::VM *)*((_QWORD *)this + 7);
        if ((v141 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v141 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v273, this);
          goto LABEL_232;
        }
        v143 = *(WTF::StringImpl **)(v141 + 8);
        if ((v143 & 1) != 0)
        {
          v143 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v141, this);
          if (!v143)
            goto LABEL_231;
        }
        else if (!v143)
        {
LABEL_231:
          v272[0] = v143;
LABEL_232:
          if (*((_DWORD *)v142 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v142);
            v144 = v272[0];
            if (hasExceptionsAfterHandlingTraps)
            {
              v272[0] = 0;
              if (v144)
              {
                if (*(_DWORD *)v144 == 2)
                  WTF::StringImpl::destroy(v144, v34);
                else
                  *(_DWORD *)v144 -= 2;
              }
              goto LABEL_372;
            }
          }
          else
          {
            v144 = v272[0];
          }
          v145 = v349;
          v349 = v144;
          if (v145)
          {
            if (*(_DWORD *)v145 == 2)
              WTF::StringImpl::destroy(v145, v34);
            else
              *(_DWORD *)v145 -= 2;
          }
          goto LABEL_237;
        }
        *(_DWORD *)v143 += 2;
        goto LABEL_231;
      }
    }
    v138 = 0;
    v271 = 1;
    goto LABEL_218;
  }
LABEL_270:
  WebCore::ApplePayPaymentMethodUpdate::~ApplePayPaymentMethodUpdate((WebCore::ApplePayPaymentMethodUpdate *)v290, v34);
  v175 = v271;
  if (!v271)
  {
    v290[0] = (char)v214;
    v176 = *(_OWORD *)v215;
    *(_QWORD *)v215 = 0;
    *(_QWORD *)&v215[8] = 0;
    v291 = v176;
    v292 = *(_OWORD *)&v215[16];
    *(_OWORD *)v293 = *(_OWORD *)&v215[32];
    *(_QWORD *)&v293[16] = *(_QWORD *)&v215[48];
    v294 = v216;
    v295 = v217;
    v216 = 0;
    v296 = v218;
    *(_QWORD *)&v176 = v219;
    v218 = 0;
    *(_QWORD *)&v219 = 0;
    v297 = v176;
    LOBYTE(v298) = 0;
    v316 = 0;
    if (v237)
    {
      v298 = *((_QWORD *)&v219 + 1);
      v299 = v220;
      v177 = v221;
      *((_QWORD *)&v219 + 1) = 0;
      v221 = 0uLL;
      v300 = v177;
      v301 = v222;
      v302 = v223;
      v178 = v225;
      v225 = 0;
      v303 = v224;
      v304 = v178;
      v305 = v226;
      v306 = 0;
      v313 = 0;
      if (v234)
      {
        v306 = v227;
        v179 = v228;
        v228 = 0uLL;
        v307 = v179;
        v308 = v229;
        v309 = v230;
        v180 = v232;
        v232 = 0;
        v310 = v231;
        v311 = v180;
        v312 = v233;
        v313 = 1;
      }
      v181 = v235;
      v235 = 0uLL;
      v314 = v181;
      v182 = v236;
      v236 = 0;
      v315 = v182;
      v316 = 1;
    }
    LOBYTE(v317) = 0;
    v327 = 0;
    if (v248)
    {
      v183 = v238;
      v238 = 0;
      v317 = v183;
      v318 = v239;
      v184 = v240;
      v240 = 0u;
      v319 = v184;
      v320 = v241;
      v321 = v242;
      v322 = v243;
      v323 = v244;
      v324 = v245;
      v185 = v246;
      v246 = 0u;
      v325 = v185;
      v186 = v247;
      v244 = 0;
      v247 = 0;
      v326 = v186;
      v327 = 1;
    }
    LOBYTE(v328) = 0;
    v330 = 0;
    if (v251)
    {
      v328 = v249;
      v187 = v250;
      v249 = 0;
      v250 = 0;
      v329 = v187;
      v330 = 1;
    }
    LOBYTE(v331) = 0;
    v342 = 0;
    if (v263)
    {
      v188 = v254;
      v254 = 0u;
      v333 = v188;
      v334 = v255;
      v335 = v256;
      v189 = v261;
      v190 = v262;
      v261 = 0u;
      v262 = 0u;
      v191 = v252;
      v252 = 0;
      v331 = v191;
      v332 = v253;
      v336 = v257;
      v192 = v258;
      v258 = 0;
      v337 = v192;
      v338 = v259;
      v339 = v260;
      v340 = v189;
      v341 = v190;
      v342 = 1;
    }
    LOBYTE(v343) = 0;
    v346 = 0;
    if (v267)
    {
      v345 = 0;
      if (v266)
      {
        v193 = v264;
        v264 = 0;
        v343 = v193;
        v194 = v265;
        v265 = 0;
        v344 = v194;
        v345 = 1;
      }
      v346 = 1;
    }
    v195 = *((_QWORD *)&v268 + 1);
    *(_QWORD *)&v347 = v268;
    v268 = 0uLL;
    *((_QWORD *)&v347 + 1) = v195;
    v196 = *((_QWORD *)&v269 + 1);
    *(_QWORD *)&v348 = v269;
    v269 = 0uLL;
    *((_QWORD *)&v348 + 1) = v196;
    v197 = v270;
    v270 = 0;
    v349 = v197;
    WebCore::ApplePaySession::completePaymentMethodSelection(v14 - 32, (uint64_t)v290, (uint64_t)&v351);
    WebCore::ApplePayPaymentMethodUpdate::~ApplePayPaymentMethodUpdate((WebCore::ApplePayPaymentMethodUpdate *)v290, v198);
    if (!v352[0])
    {
      v31 = 10;
LABEL_287:
      v175 = v271;
      goto LABEL_288;
    }
    v200 = (WTF::StringImpl *)v351;
    v290[0] = v351;
    v201 = (WTF::StringImpl *)*((_QWORD *)&v351 + 1);
    *((_QWORD *)&v351 + 1) = 0;
    *(_QWORD *)&v291 = v201;
    if (!*((_QWORD *)v4 + 2))
    {
      v202.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v351, (JSC::JSGlobalObject *)&v291);
      JSC::VM::throwException(v4, this, v202);
      v201 = (WTF::StringImpl *)v291;
    }
    *(_QWORD *)&v291 = 0;
    if (v201)
    {
      if (*(_DWORD *)v201 == 2)
        WTF::StringImpl::destroy(v201, v200);
      else
        *(_DWORD *)v201 -= 2;
    }
    if (v352[0])
    {
      v203 = (WTF::StringImpl *)*((_QWORD *)&v351 + 1);
      *((_QWORD *)&v351 + 1) = 0;
      if (v203)
      {
        if (*(_DWORD *)v203 != 2)
        {
          v31 = 0;
          *(_DWORD *)v203 -= 2;
          goto LABEL_287;
        }
        WTF::StringImpl::destroy(v203, v200);
      }
    }
    v31 = 0;
    goto LABEL_287;
  }
  v31 = 0;
LABEL_288:
  if (v175 != -1)
LABEL_289:
    (*(&off_1E334B8E8 + v175))((int)v290, (WebCore::ApplePayPaymentMethodUpdate *)&v214);
  return (_BYTE *)v31;
}

_BYTE *WebCore::jsApplePaySessionPrototypeFunction_completeCouponCodeChange(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  JSC::JSCell *v12;
  JSC::Structure *Object;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSC::JSCell *v17;
  int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  JSC::JSCell *v28;
  int v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  JSC::JSCell *v42;
  unsigned int v43;
  int v44;
  int v45;
  WTF::StringImpl *v46;
  int v47;
  WTF *v48;
  unsigned int v49;
  WTF *v50;
  int v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF::StringImpl **v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  int v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  WTF::StringImpl **v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  int v69;
  WTF *v70;
  WTF *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  JSC::JSCell *v78;
  unsigned int v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  unsigned int v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  JSC::JSCell *v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  __int16 v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  int v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  JSC::VM *v109;
  int v110;
  WTF::StringImpl *v111;
  unsigned int v112;
  unsigned int v113;
  WTF *v114;
  uint64_t v115;
  uint64_t v116;
  WTF *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  int v121;
  WTF *v122;
  WTF::StringImpl *v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130;
  __int128 v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  WTF *v141;
  unint64_t v142;
  __int128 v143;
  __int128 v144;
  unsigned __int128 v145;
  uint64_t v146;
  WTF *v147;
  unint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  unint64_t v164;
  __int128 v165;
  __int128 v166;
  unsigned __int128 v167;
  WTF::StringImpl *v168;
  uint64_t v169;
  WTF *v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  JSValue v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  JSValue v183;
  WTF::StringImpl *v184;
  WebCore::ApplePayPaymentTokenContext *v185;
  uint64_t v186;
  uint64_t v187;
  JSC::VM *v188;
  uint64_t v189;
  JSC::VM *v190;
  WTF::StringImpl *v191;
  _BYTE v192[56];
  WTF::StringImpl *v193;
  uint64_t v194;
  WTF *v195;
  _BYTE v196[24];
  __int128 v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  uint64_t v201;
  __int16 v202;
  char v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  __int16 v209;
  char v210;
  __int128 v211;
  uint64_t v212;
  char v213;
  WTF::StringImpl *v214;
  char v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  WTF::StringImpl *v219;
  uint64_t v220;
  __int16 v221;
  __int128 v222;
  uint64_t v223;
  char v224;
  WTF *v225;
  unint64_t v226;
  char v227;
  WTF::StringImpl *v228;
  char v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  WTF::StringImpl *v233;
  uint64_t v234;
  __int16 v235;
  uint64_t v236;
  __int128 v237;
  unsigned __int128 v238;
  char v239;
  WTF *v240;
  unint64_t v241;
  char v242;
  char v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  WTF::StringImpl *v249[2];
  __int128 v250;
  __int128 v251;
  __int128 v252;
  WTF::StringImpl *v253;
  uint64_t v254;
  __int16 v255;
  uint64_t v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;
  uint64_t v261;
  __int16 v262;
  char v263;
  __int128 v264;
  uint64_t v265;
  char v266[8];
  __int128 v267;
  __int128 v268;
  _BYTE v269[24];
  WTF::StringImpl *v270;
  __int16 v271;
  WTF *v272;
  WTF::StringImpl *v273;
  uint64_t v274;
  char v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  uint64_t v279;
  uint64_t v280;
  __int16 v281;
  char v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  uint64_t v286;
  uint64_t v287;
  __int16 v288;
  char v289;
  __int128 v290;
  uint64_t v291;
  char v292;
  WTF::StringImpl *v293;
  char v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  WTF::StringImpl *v298;
  uint64_t v299;
  __int16 v300;
  __int128 v301;
  uint64_t v302;
  char v303;
  WTF *v304;
  unint64_t v305;
  char v306;
  WTF::StringImpl *v307;
  char v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  WTF::StringImpl *v312;
  uint64_t v313;
  __int16 v314;
  uint64_t v315;
  __int128 v316;
  unsigned __int128 v317;
  char v318;
  WTF *v319;
  unint64_t v320;
  unsigned __int8 v321;
  char v322;
  __int128 v323;
  __int128 v324;
  JSC::VM *v325[2];
  WTF::StringImpl **v326;
  WTF::StringImpl *v327;
  WTF::StringImpl *v328;
  _BYTE v329[48];
  WTF::StringImpl *v330;
  uint64_t v331;
  unsigned int v332;
  _QWORD v333[3];
  __int128 v334;
  __int128 v335;
  uint64_t v336;
  uint64_t v337;
  __int16 v338;
  char v339;
  __int128 v340;
  uint64_t v341;
  unsigned int v342;
  uint64_t v343;

  v343 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v190 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v190, "ApplePaySession", "completeCouponCodeChange");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSApplePaySession::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSApplePaySession::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v190, "ApplePaySession", "completeCouponCodeChange");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v180.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v180);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
  v325[0] = v4;
  if (((unint64_t)v12 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
  }
  else if (((unint64_t)v12 & 0xFFFE000000000002) != 0
         || (Object = (JSC::Structure *)JSC::JSCell::getObject(v12)) == 0)
  {
    JSC::throwTypeError();
    v177 = 0;
    v152 = 1;
    v248 = 1;
    goto LABEL_252;
  }
  LODWORD(v14) = 1;
  v266[0] = 1;
  v267 = 0uLL;
  LOBYTE(v268) = 0;
  *((_QWORD *)&v268 + 1) = 0x7FF8000000000000;
  v269[0] = 1;
  *(_DWORD *)&v269[4] = 1;
  *(int64x2_t *)&v269[8] = vdupq_n_s64(0x7FF8000000000000uLL);
  v270 = 0;
  v271 = 0;
  v292 = 0;
  LOBYTE(v293) = 0;
  v303 = 0;
  LOBYTE(v304) = 0;
  v306 = 0;
  LOBYTE(v307) = 0;
  v318 = 0;
  LOBYTE(v319) = 0;
  v322 = 0;
  v273 = 0;
  v272 = 0;
  LOBYTE(v274) = 0;
  v323 = 0u;
  v324 = 0u;
  if (((unint64_t)v12 & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_18;
  WTF::AtomStringImpl::addLiteral();
  v17 = (JSC::JSCell *)JSC::JSObject::get(Object, this, (unint64_t)v191);
  if (v191)
  {
    if (*(_DWORD *)v191 == 2)
      WTF::StringImpl::destroy(v191, v16);
    else
      *(_DWORD *)v191 -= 2;
  }
  if (*((_DWORD *)v325[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v325[0]))
    goto LABEL_293;
  if (v17 != (JSC::JSCell *)10)
  {
    v14 = &v327;
    WebCore::convertDictionary<WebCore::ApplePayAutomaticReloadPaymentRequest>(v17, this, (uint64_t)&v327);
    v18 = v334;
    if ((_DWORD)v334)
    {
      v248 = 1;
      v25 = v334;
    }
    else
    {
      v19 = v327;
      v191 = v327;
      v192[0] = (_BYTE)v328;
      v20 = *(_QWORD *)v329;
      v21 = *(_QWORD *)&v329[8];
      *(_OWORD *)v329 = 0u;
      *(_QWORD *)&v192[8] = v20;
      *(_QWORD *)&v192[16] = v21;
      *(_OWORD *)&v192[24] = *(_OWORD *)&v329[16];
      *(_OWORD *)&v192[40] = *(_OWORD *)&v329[32];
      v22 = v331;
      v327 = 0;
      v331 = 0;
      v193 = v330;
      v194 = v22;
      LOWORD(v195) = v332;
      v23 = v333[0];
      v24 = v333[1];
      memset(v333, 0, sizeof(v333));
      *(_QWORD *)v196 = v23;
      *(_OWORD *)&v196[8] = __PAIR128__(v333[2], v24);
      if (v303)
      {
        WebCore::ApplePayAutomaticReloadPaymentRequest::operator=((uint64_t)&v293, (WTF::StringImpl *)&v191);
      }
      else
      {
        v191 = 0;
        v293 = v19;
        v294 = (char)v328;
        *(_OWORD *)&v192[8] = 0uLL;
        *(_QWORD *)&v295 = v20;
        *((_QWORD *)&v295 + 1) = v21;
        v296 = *(_OWORD *)&v329[16];
        v297 = *(_OWORD *)&v329[32];
        v194 = 0;
        v298 = v330;
        v299 = v22;
        v300 = v332;
        memset(v196, 0, sizeof(v196));
        *(_QWORD *)&v301 = v23;
        *((_QWORD *)&v301 + 1) = v24;
        v302 = v333[2];
        v303 = 1;
      }
      WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&v191, v15);
      v25 = v334;
    }
    if (v25 != -1)
      (*(&off_1E334B0D0 + v25))((int)v249, (WebCore::ApplePayAutomaticReloadPaymentRequest *)&v327);
    if (v18)
      goto LABEL_233;
  }
  WTF::AtomStringImpl::addLiteral();
  v26 = v327;
  v28 = (JSC::JSCell *)JSC::JSObject::get(Object, this, (unint64_t)v327);
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v27);
    else
      *(_DWORD *)v26 -= 2;
  }
  if (*((_DWORD *)v325[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v325[0]))
    goto LABEL_293;
  if (v28 != (JSC::JSCell *)10)
  {
    WebCore::convertDictionary<WebCore::ApplePayDeferredPaymentRequest>(v28, this, (uint64_t)&v327);
    v29 = v335;
    if ((_DWORD)v335)
    {
      v248 = 1;
      v39 = v335;
    }
    else
    {
      v30 = v327;
      v249[0] = v327;
      LOBYTE(v249[1]) = (_BYTE)v328;
      v31 = *(_QWORD *)v329;
      v32 = *(_QWORD *)&v329[8];
      *(_OWORD *)v329 = 0u;
      *(_QWORD *)&v250 = v31;
      *((_QWORD *)&v250 + 1) = v32;
      v251 = *(_OWORD *)&v329[16];
      v252 = *(_OWORD *)&v329[32];
      v33 = v331;
      v327 = 0;
      v331 = 0;
      v253 = v330;
      v254 = v33;
      v255 = v332;
      v34 = v333[1];
      v256 = v333[0];
      v257 = *(_OWORD *)&v333[1];
      v35 = v333[2];
      v36 = *((_QWORD *)&v334 + 1);
      v37 = v334;
      *(_QWORD *)&v258 = v334;
      *(_OWORD *)&v333[1] = 0u;
      v334 = 0u;
      *((_QWORD *)&v258 + 1) = v36;
      if (v318)
      {
        WebCore::ApplePayDeferredPaymentRequest::operator=((uint64_t)&v307, (WTF::StringImpl *)v249);
      }
      else
      {
        v38 = (WTF::StringImpl *)&v329[16];
        v249[0] = 0;
        v307 = v30;
        v308 = (char)v328;
        v250 = 0uLL;
        *(_QWORD *)&v309 = v31;
        *((_QWORD *)&v309 + 1) = v32;
        v310 = *(_OWORD *)&v329[16];
        v311 = *(_OWORD *)&v329[32];
        v312 = v330;
        v254 = 0;
        v313 = v33;
        v314 = v332;
        v315 = v333[0];
        *(_QWORD *)&v316 = v34;
        *((_QWORD *)&v316 + 1) = v35;
        v317 = __PAIR128__(v36, v37);
        v257 = 0uLL;
        v258 = 0uLL;
        v318 = 1;
      }
      WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)v249, v38);
      v39 = v335;
    }
    if (v39 != -1)
      (*(&off_1E334B0E0 + v39))((int)v249, (WebCore::ApplePayDeferredPaymentRequest *)&v327);
    if (v29)
      goto LABEL_233;
  }
  WTF::AtomStringImpl::addLiteral();
  v40 = v327;
  v42 = (JSC::JSCell *)JSC::JSObject::get(Object, this, (unint64_t)v327);
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v41);
    else
      *(_DWORD *)v40 -= 2;
  }
  if (*((_DWORD *)v325[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v325[0]))
    goto LABEL_293;
  if (v42 != (JSC::JSCell *)10)
  {
    WebCore::convertDictionary<WebCore::ApplePayDisbursementRequest>(v42, this, (uint64_t)&v327);
    v44 = *(_DWORD *)&v329[16];
    if (*(_DWORD *)&v329[16])
    {
      v248 = 1;
      v51 = *(_DWORD *)&v329[16];
LABEL_75:
      if (v51 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B0F0[v51])(v249, &v328);
      if (v44)
        goto LABEL_233;
      goto LABEL_78;
    }
    v45 = v329[8];
    if (v329[8])
    {
      v46 = v328;
      v328 = 0;
      LODWORD(v14) = *(_DWORD *)v329;
      v43 = *(_DWORD *)&v329[4];
      *(_QWORD *)v329 = 0;
      v47 = 1;
      if (!v322)
      {
        v319 = v46;
        v320 = __PAIR64__(v43, v14);
        v321 = 1;
LABEL_72:
        v322 = 1;
LABEL_74:
        v51 = *(_DWORD *)&v329[16];
        goto LABEL_75;
      }
    }
    else
    {
      if (!v322)
      {
        LOBYTE(v319) = 0;
        v321 = 0;
        goto LABEL_72;
      }
      v47 = 0;
      v46 = 0;
    }
    if (v321 == v47)
    {
      if (v321)
      {
        v48 = v319;
        if (v319)
        {
          v319 = 0;
          LODWORD(v320) = 0;
          v49 = v43;
          WTF::fastFree(v48, v15);
          v43 = v49;
        }
        v319 = v46;
        v320 = __PAIR64__(v43, v14);
        goto LABEL_74;
      }
    }
    else
    {
      if (!v321)
      {
        v319 = v46;
        v320 = __PAIR64__(v43, v14);
        v321 = 1;
        goto LABEL_74;
      }
      v50 = v319;
      if (v319)
      {
        v319 = 0;
        LODWORD(v320) = 0;
        WTF::fastFree(v50, v15);
      }
      v321 = 0;
    }
    if (v45 && v46)
      WTF::fastFree(v46, v15);
    goto LABEL_74;
  }
LABEL_78:
  WTF::AtomStringImpl::addLiteral();
  v52 = v327;
  v54 = JSC::JSObject::get(Object, this, (unint64_t)v327);
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, v53);
    else
      *(_DWORD *)v52 -= 2;
  }
  if (*((_DWORD *)v325[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v325[0]))
    goto LABEL_293;
  if (v54 == 10)
    goto LABEL_115;
  v55 = (WTF::StringImpl **)*((_QWORD *)this + 7);
  v326 = v55;
  if ((v54 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v54 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v68 = v327;
    v327 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, v15);
      else
        *(_DWORD *)v68 -= 2;
    }
    v60 = 1;
    *(_DWORD *)v329 = 1;
    goto LABEL_108;
  }
  v249[1] = 0;
  v249[0] = 0;
  v327 = (WTF::StringImpl *)v249;
  JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayLineItem>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, v54, (uint64_t *)&v327);
  if (*((_DWORD *)v55 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v55) & 1) != 0)
  {
    v57 = 1;
  }
  else
  {
    v57 = 0;
    v58 = v249[0];
    v249[0] = 0;
    v327 = v58;
    v59 = v249[1];
    v249[1] = 0;
    v328 = v59;
  }
  *(_DWORD *)v329 = v57;
  WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v249, v56);
  v60 = *(_DWORD *)v329;
  if (*(_DWORD *)v329)
  {
LABEL_108:
    v69 = 0;
    v248 = 1;
    goto LABEL_112;
  }
  v61 = v327;
  v327 = 0;
  v249[0] = v61;
  v62 = v328;
  v328 = 0;
  v249[1] = v62;
  if (HIDWORD(v273))
  {
    v63 = 80 * HIDWORD(v273);
    v64 = (WTF::StringImpl **)((char *)v272 + 64);
    do
    {
      v65 = *v64;
      *v64 = 0;
      if (v65)
      {
        if (*(_DWORD *)v65 == 2)
          WTF::StringImpl::destroy(v65, v15);
        else
          *(_DWORD *)v65 -= 2;
      }
      v66 = *(v64 - 6);
      *(v64 - 6) = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
          WTF::StringImpl::destroy(v66, v15);
        else
          *(_DWORD *)v66 -= 2;
      }
      v67 = *(v64 - 7);
      *(v64 - 7) = 0;
      if (v67)
      {
        if (*(_DWORD *)v67 == 2)
          WTF::StringImpl::destroy(v67, v15);
        else
          *(_DWORD *)v67 -= 2;
      }
      v64 += 10;
      v63 -= 80;
    }
    while (v63);
  }
  v70 = v272;
  if (v272)
  {
    v272 = 0;
    LODWORD(v273) = 0;
    WTF::fastFree(v70, v15);
  }
  v71 = v249[0];
  v249[0] = 0;
  v272 = v71;
  v72 = v249[1];
  v249[1] = 0;
  v273 = v72;
  WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v249, v15);
  v69 = 1;
  v60 = *(_DWORD *)v329;
LABEL_112:
  if (v60 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B100[v60])(v249, &v327);
  if (!v69)
    goto LABEL_233;
LABEL_115:
  WTF::AtomStringImpl::addLiteral();
  v73 = v327;
  v75 = JSC::JSObject::get(Object, this, (unint64_t)v327);
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
      WTF::StringImpl::destroy(v73, v74);
    else
      *(_DWORD *)v73 -= 2;
  }
  if (*((_DWORD *)v325[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v325[0]))
    goto LABEL_293;
  if (v75 != 10)
  {
    v109 = (JSC::VM *)*((_QWORD *)this + 7);
    v325[1] = v109;
    if ((v75 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v75 + 5) <= 0x16u)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSC::throwTypeError();
      v119 = v249[0];
      v249[0] = 0;
      if (v119)
      {
        if (*(_DWORD *)v119 == 2)
          WTF::StringImpl::destroy(v119, v118);
        else
          *(_DWORD *)v119 -= 2;
      }
      v110 = 1;
      *(_DWORD *)v329 = 1;
      v248 = 1;
    }
    else
    {
      v249[1] = 0;
      v249[0] = 0;
      v326 = v249;
      JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayPaymentTokenContext>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, v75, (uint64_t *)&v326);
      if (*((_DWORD *)v109 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v109) & 1) != 0)
      {
        v185 = v249[0];
        *(_DWORD *)v329 = 1;
        if (HIDWORD(v249[1]))
        {
          v186 = 40 * HIDWORD(v249[1]);
          do
          {
            WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v185, v15);
            v185 = (WebCore::ApplePayPaymentTokenContext *)(v187 + 40);
            v186 -= 40;
          }
          while (v186);
          v185 = v249[0];
        }
        if (v185)
        {
          v249[0] = 0;
          LODWORD(v249[1]) = 0;
          WTF::fastFree(v185, v15);
        }
      }
      else
      {
        v327 = v249[0];
        v328 = v249[1];
        *(_DWORD *)v329 = 0;
      }
      v110 = *(_DWORD *)v329;
      if (!*(_DWORD *)v329)
      {
        v111 = v327;
        v327 = 0;
        v112 = v328;
        v113 = HIDWORD(v328);
        v328 = 0;
        if (v306)
        {
          if (HIDWORD(v305))
          {
            v114 = v304;
            v115 = 40 * HIDWORD(v305);
            do
            {
              WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v114, v15);
              v114 = (WTF *)(v116 + 40);
              v115 -= 40;
            }
            while (v115);
          }
          v117 = v304;
          if (v304)
          {
            v304 = 0;
            LODWORD(v305) = 0;
            WTF::fastFree(v117, v15);
          }
          v304 = v111;
          v305 = __PAIR64__(v113, v112);
          if (*(_DWORD *)v329 != -1)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B110[*(unsigned int *)v329])(v249, &v327);
        }
        else
        {
          v304 = v111;
          v305 = __PAIR64__(v113, v112);
          v306 = 1;
        }
        goto LABEL_120;
      }
      v248 = 1;
      if (*(_DWORD *)v329 == -1)
        goto LABEL_233;
    }
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B110[v110])(v249, &v327);
    goto LABEL_233;
  }
LABEL_120:
  WTF::AtomStringImpl::addLiteral();
  v76 = v327;
  v78 = (JSC::JSCell *)JSC::JSObject::get(Object, this, (unint64_t)v327);
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
      WTF::StringImpl::destroy(v76, v77);
    else
      *(_DWORD *)v76 -= 2;
  }
  if (*((_DWORD *)v325[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v325[0]))
    goto LABEL_293;
  if (v78 == (JSC::JSCell *)10)
    goto LABEL_132;
  WebCore::convertDictionary<WebCore::ApplePayRecurringPaymentRequest>(v78, this, (uint64_t)&v327);
  v79 = v342;
  if (v342)
  {
    v248 = 1;
    v87 = v342;
  }
  else
  {
    v249[0] = v327;
    LOBYTE(v249[1]) = (_BYTE)v328;
    v80 = *(_OWORD *)v329;
    v327 = 0;
    *(_QWORD *)v329 = 0;
    v250 = v80;
    v251 = *(_OWORD *)&v329[16];
    v252 = *(_OWORD *)&v329[32];
    v81 = v331;
    *(_QWORD *)&v329[8] = 0;
    v331 = 0;
    v253 = v330;
    v254 = v81;
    v255 = v332;
    LOBYTE(v256) = 0;
    v263 = 0;
    if (v339)
    {
      LOBYTE(v256) = v333[0];
      v82 = *(_OWORD *)&v333[1];
      *(_OWORD *)&v333[1] = 0uLL;
      v257 = v82;
      v258 = v334;
      v259 = v335;
      v83 = v337;
      v337 = 0;
      v260 = v336;
      v261 = v83;
      v262 = v338;
      v263 = 1;
    }
    v84 = v340;
    v340 = 0uLL;
    v264 = v84;
    v85 = v341;
    v341 = 0;
    v265 = v85;
    std::optional<WebCore::ApplePayRecurringPaymentRequest>::operator=[abi:sn180100]<WebCore::ApplePayRecurringPaymentRequest,void>((uint64_t)&v274, (WTF::StringImpl *)v249);
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)v249, v86);
    v87 = v342;
  }
  if (v87 != -1)
    (*(&off_1E334B120 + v87))((int)v249, (WebCore::ApplePayRecurringPaymentRequest *)&v327);
  if (!v79)
  {
LABEL_132:
    WTF::AtomStringImpl::addLiteral();
    v88 = v327;
    v90 = (JSC::JSCell *)JSC::JSObject::get(Object, this, (unint64_t)v327);
    if (v88)
    {
      if (*(_DWORD *)v88 == 2)
        WTF::StringImpl::destroy(v88, v89);
      else
        *(_DWORD *)v88 -= 2;
    }
    if (*((_DWORD *)v325[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v325[0]))
    {
LABEL_293:
      v248 = 1;
      goto LABEL_233;
    }
    if (v90 == (JSC::JSCell *)10)
    {
LABEL_18:
      WebCore::throwRequiredMemberTypeError((int)this, (int)v325, "newTotal", 9, "ApplePayCouponCodeUpdate", 25, "ApplePayLineItem", 17);
      v248 = 1;
      goto LABEL_233;
    }
    v189 = v11;
    WebCore::convertDictionary<WebCore::ApplePayLineItem>(v90, (uint64_t)this, (uint64_t)&v327);
    v91 = v332;
    if (v332)
      goto LABEL_309;
    v92 = v328;
    v93 = *(_QWORD *)v329;
    v328 = 0;
    *(_QWORD *)v329 = 0;
    *(_OWORD *)v249 = *(_OWORD *)&v329[8];
    v250 = *(_OWORD *)&v329[24];
    v94 = v330;
    *(_QWORD *)&v251 = *(_QWORD *)&v329[40];
    v330 = 0;
    v95 = v331;
    v266[0] = (char)v327;
    v96 = (WTF::StringImpl *)v267;
    *(_QWORD *)&v267 = v92;
    if (v96)
    {
      if (*(_DWORD *)v96 == 2)
        WTF::StringImpl::destroy(v96, v15);
      else
        *(_DWORD *)v96 -= 2;
    }
    v97 = (WTF::StringImpl *)*((_QWORD *)&v267 + 1);
    *((_QWORD *)&v267 + 1) = v93;
    if (v97)
    {
      if (*(_DWORD *)v97 == 2)
        WTF::StringImpl::destroy(v97, v15);
      else
        *(_DWORD *)v97 -= 2;
    }
    v268 = *(_OWORD *)v249;
    *(_OWORD *)v269 = v250;
    v98 = v270;
    *(_QWORD *)&v269[16] = v251;
    v270 = v94;
    if (v98)
    {
      if (*(_DWORD *)v98 == 2)
        WTF::StringImpl::destroy(v98, v15);
      else
        *(_DWORD *)v98 -= 2;
    }
    v271 = v95;
    WTF::AtomStringImpl::addLiteral();
    v99 = v249[0];
    v101 = JSC::JSObject::get(Object, this, (unint64_t)v249[0]);
    if (v99)
    {
      if (*(_DWORD *)v99 == 2)
        WTF::StringImpl::destroy(v99, v100);
      else
        *(_DWORD *)v99 -= 2;
    }
    if (*((_DWORD *)v325[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v325[0]) & 1) != 0)
      goto LABEL_309;
    if (v101 == 10)
    {
LABEL_200:
      WTF::AtomStringImpl::addLiteral();
      v123 = v249[0];
      v124 = JSC::JSObject::get(Object, this, (unint64_t)v249[0]);
      if (v123)
      {
        if (*(_DWORD *)v123 == 2)
          WTF::StringImpl::destroy(v123, v15);
        else
          *(_DWORD *)v123 -= 2;
      }
      if (!*((_DWORD *)v325[0] + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v325[0]) & 1) == 0)
      {
        if (v124 != 10)
        {
          WebCore::Detail::SequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayShippingMethod>>>::convert((uint64_t)v249, this, v124);
          if ((_DWORD)v250)
          {
            v248 = 1;
            if ((_DWORD)v250 != -1)
              ((void (*)(WTF::StringImpl ***, WTF::StringImpl **))off_1E334B140[v250])(&v326, v249);
            goto LABEL_230;
          }
          v125 = v249[0];
          v249[0] = 0;
          v126 = v249[1];
          v249[1] = 0;
          if (HIDWORD(v324))
            WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct((WTF::StringImpl *)v324, (WTF::StringImpl *)(v324 + 104 * HIDWORD(v324)));
          v127 = (WTF *)v324;
          if ((_QWORD)v324)
          {
            *(_QWORD *)&v324 = 0;
            DWORD2(v324) = 0;
            WTF::fastFree(v127, v15);
          }
          *(_QWORD *)&v324 = v125;
          *((_QWORD *)&v324 + 1) = v126;
          v128 = v249[0];
          if (HIDWORD(v249[1]))
          {
            WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(v249[0], (WTF::StringImpl *)((char *)v249[0] + 104 * HIDWORD(v249[1])));
            v128 = v249[0];
          }
          if (v128)
          {
            v249[0] = 0;
            LODWORD(v249[1]) = 0;
            WTF::fastFree(v128, v15);
          }
        }
        *(_OWORD *)v192 = v267;
        *(_OWORD *)&v192[16] = v268;
        LOBYTE(v191) = v266[0];
        v267 = 0uLL;
        *(_OWORD *)&v192[32] = *(_OWORD *)v269;
        *(_QWORD *)&v192[48] = *(_QWORD *)&v269[16];
        v193 = v270;
        LOWORD(v194) = v271;
        v129 = v272;
        v270 = 0;
        v272 = 0;
        v195 = v129;
        v130 = v273;
        v273 = 0;
        *(_QWORD *)v196 = v130;
        v196[8] = 0;
        v213 = 0;
        if (v292)
        {
          *(_QWORD *)&v196[8] = v274;
          v196[16] = v275;
          v131 = v276;
          v274 = 0;
          v276 = 0uLL;
          v197 = v131;
          v198 = v277;
          v199 = v278;
          v132 = v280;
          v280 = 0;
          v200 = v279;
          v201 = v132;
          v202 = v281;
          v203 = 0;
          v210 = 0;
          if (v289)
          {
            v203 = v282;
            v133 = v283;
            v283 = 0uLL;
            v204 = v133;
            v205 = v284;
            v206 = v285;
            v134 = v287;
            v287 = 0;
            v207 = v286;
            v208 = v134;
            v209 = v288;
            v210 = 1;
          }
          v135 = v290;
          v290 = 0uLL;
          v211 = v135;
          v136 = v291;
          v291 = 0;
          v212 = v136;
          v213 = 1;
        }
        LOBYTE(v214) = 0;
        v224 = 0;
        if (v303)
        {
          v214 = v293;
          v215 = v294;
          v137 = v295;
          v295 = 0u;
          v216 = v137;
          v217 = v296;
          v218 = v297;
          v138 = v299;
          v293 = 0;
          v299 = 0;
          v219 = v298;
          v220 = v138;
          v221 = v300;
          v139 = v301;
          v301 = 0u;
          v222 = v139;
          v140 = v302;
          v302 = 0;
          v223 = v140;
          v224 = 1;
        }
        LOBYTE(v225) = 0;
        v227 = 0;
        if (v306)
        {
          v141 = v304;
          v304 = 0;
          v225 = v141;
          v142 = v305;
          v305 = 0;
          v226 = v142;
          v227 = 1;
        }
        LOBYTE(v228) = 0;
        v239 = 0;
        if (v318)
        {
          v143 = v309;
          v309 = 0u;
          v230 = v143;
          v231 = v310;
          v232 = v311;
          v144 = v316;
          v145 = v317;
          v316 = 0u;
          v317 = 0u;
          v228 = v307;
          v229 = v308;
          v233 = v312;
          v146 = v313;
          v307 = 0;
          v313 = 0;
          v234 = v146;
          v235 = v314;
          v236 = v315;
          v237 = v144;
          v238 = v145;
          v239 = 1;
        }
        LOBYTE(v240) = 0;
        v243 = 0;
        if (v322)
        {
          v242 = 0;
          if (v321)
          {
            v147 = v319;
            v319 = 0;
            v240 = v147;
            v148 = v320;
            v320 = 0;
            v241 = v148;
            v242 = 1;
          }
          v243 = 1;
        }
        v149 = 0;
        v150 = *((_QWORD *)&v323 + 1);
        v244 = v323;
        v323 = 0uLL;
        v245 = v150;
        v151 = *((_QWORD *)&v324 + 1);
        v246 = v324;
        v324 = 0uLL;
        v247 = v151;
LABEL_229:
        v248 = v149;
LABEL_230:
        if ((_DWORD)v91 != -1)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B070[v91])(v249, &v327);
        v11 = v189;
        goto LABEL_233;
      }
LABEL_309:
      v149 = 1;
      goto LABEL_229;
    }
    v326 = (WTF::StringImpl **)*((_QWORD *)this + 7);
    if ((v101 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v101 + 5) <= 0x16u)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSC::throwTypeError();
      v120 = v249[0];
      v249[0] = 0;
      if (v120)
      {
        if (*(_DWORD *)v120 == 2)
          WTF::StringImpl::destroy(v120, v15);
        else
          *(_DWORD *)v120 -= 2;
      }
      v102 = 1;
      LODWORD(v250) = 1;
    }
    else
    {
      v188 = v4;
      WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::ApplePayError>>>::convert(this, v101, (uint64_t)v249);
      v102 = v250;
      if (!(_DWORD)v250)
      {
        v103 = v249[0];
        v249[0] = 0;
        v104 = v249[1];
        v249[1] = 0;
        if (HIDWORD(v323))
        {
          v105 = (uint64_t *)v323;
          v106 = 8 * HIDWORD(v323);
          do
          {
            v107 = *v105;
            *v105 = 0;
            if (v107)
            {
              if (*(_DWORD *)(v107 + 8) == 1)
              {
                v108 = *(WTF::StringImpl **)(v107 + 16);
                *(_QWORD *)(v107 + 16) = 0;
                if (v108)
                {
                  if (*(_DWORD *)v108 == 2)
                    WTF::StringImpl::destroy(v108, v15);
                  else
                    *(_DWORD *)v108 -= 2;
                }
                WTF::fastFree((WTF *)v107, v15);
              }
              else
              {
                --*(_DWORD *)(v107 + 8);
              }
            }
            ++v105;
            v106 -= 8;
          }
          while (v106);
        }
        v122 = (WTF *)v323;
        if ((_QWORD)v323)
        {
          *(_QWORD *)&v323 = 0;
          DWORD2(v323) = 0;
          WTF::fastFree(v122, v15);
        }
        *(_QWORD *)&v323 = v103;
        *((_QWORD *)&v323 + 1) = v104;
        v121 = 1;
        v102 = v250;
        v4 = v188;
LABEL_197:
        if (v102 != -1)
          ((void (*)(WTF::StringImpl ***, WTF::StringImpl **))off_1E334B130[v102])(&v326, v249);
        if (!v121)
          goto LABEL_230;
        goto LABEL_200;
      }
    }
    v121 = 0;
    v248 = 1;
    goto LABEL_197;
  }
LABEL_233:
  WebCore::ApplePayCouponCodeUpdate::~ApplePayCouponCodeUpdate((WebCore::ApplePayCouponCodeUpdate *)v266, v15);
  v152 = v248;
  if (!v248)
  {
    v266[0] = (char)v191;
    v153 = *(_OWORD *)v192;
    *(_OWORD *)v192 = 0uLL;
    v267 = v153;
    v268 = *(_OWORD *)&v192[16];
    *(_OWORD *)v269 = *(_OWORD *)&v192[32];
    *(_QWORD *)&v269[16] = *(_QWORD *)&v192[48];
    v270 = v193;
    v271 = v194;
    v193 = 0;
    v272 = v195;
    *(_QWORD *)&v153 = *(_QWORD *)v196;
    v195 = 0;
    *(_QWORD *)v196 = 0;
    v273 = (WTF::StringImpl *)v153;
    LOBYTE(v274) = 0;
    v292 = 0;
    if (v213)
    {
      v274 = *(_QWORD *)&v196[8];
      v275 = v196[16];
      v154 = v197;
      *(_QWORD *)&v196[8] = 0;
      v197 = 0uLL;
      v276 = v154;
      v277 = v198;
      v278 = v199;
      v155 = v201;
      v201 = 0;
      v279 = v200;
      v280 = v155;
      v281 = v202;
      v282 = 0;
      v289 = 0;
      if (v210)
      {
        v282 = v203;
        v156 = v204;
        v204 = 0uLL;
        v283 = v156;
        v284 = v205;
        v285 = v206;
        v157 = v208;
        v208 = 0;
        v286 = v207;
        v287 = v157;
        v288 = v209;
        v289 = 1;
      }
      v158 = v211;
      v211 = 0uLL;
      v290 = v158;
      v159 = v212;
      v212 = 0;
      v291 = v159;
      v292 = 1;
    }
    LOBYTE(v293) = 0;
    v303 = 0;
    if (v224)
    {
      v160 = v214;
      v214 = 0;
      v293 = v160;
      v294 = v215;
      v161 = v216;
      v216 = 0u;
      v295 = v161;
      v296 = v217;
      v297 = v218;
      v298 = v219;
      v299 = v220;
      v300 = v221;
      v162 = v222;
      v222 = 0u;
      v301 = v162;
      v163 = v223;
      v220 = 0;
      v223 = 0;
      v302 = v163;
      v303 = 1;
    }
    LOBYTE(v304) = 0;
    v306 = 0;
    if (v227)
    {
      v304 = v225;
      v164 = v226;
      v225 = 0;
      v226 = 0;
      v305 = v164;
      v306 = 1;
    }
    LOBYTE(v307) = 0;
    v318 = 0;
    if (v239)
    {
      v165 = v230;
      v230 = 0u;
      v309 = v165;
      v310 = v231;
      v311 = v232;
      v166 = v237;
      v167 = v238;
      v237 = 0u;
      v238 = 0u;
      v168 = v228;
      v228 = 0;
      v307 = v168;
      v308 = v229;
      v312 = v233;
      v169 = v234;
      v234 = 0;
      v313 = v169;
      v314 = v235;
      v315 = v236;
      v316 = v166;
      v317 = v167;
      v318 = 1;
    }
    LOBYTE(v319) = 0;
    v322 = 0;
    if (v243)
    {
      v321 = 0;
      if (v242)
      {
        v170 = v240;
        v240 = 0;
        v319 = v170;
        v171 = v241;
        v241 = 0;
        v320 = v171;
        v321 = 1;
      }
      v322 = 1;
    }
    v172 = v244;
    v244 = 0;
    *(_QWORD *)&v323 = v172;
    v173 = v245;
    v245 = 0;
    *((_QWORD *)&v323 + 1) = v173;
    v174 = v246;
    v246 = 0;
    *(_QWORD *)&v324 = v174;
    v175 = v247;
    v247 = 0;
    *((_QWORD *)&v324 + 1) = v175;
    WebCore::ApplePaySession::completeCouponCodeChange(v11 - 32, (uint64_t)v266, (uint64_t)&v327);
    WebCore::ApplePayCouponCodeUpdate::~ApplePayCouponCodeUpdate((WebCore::ApplePayCouponCodeUpdate *)v266, v176);
    if (!v329[0])
    {
      v177 = 10;
LABEL_250:
      v152 = v248;
      goto LABEL_251;
    }
    v181 = (WTF::StringImpl *)v327;
    v266[0] = (char)v327;
    v182 = v328;
    v328 = 0;
    *(_QWORD *)&v267 = v182;
    if (!*((_QWORD *)v4 + 2))
    {
      v183.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v327, (JSC::JSGlobalObject *)&v267);
      JSC::VM::throwException(v4, this, v183);
      v182 = (WTF::StringImpl *)v267;
    }
    *(_QWORD *)&v267 = 0;
    if (v182)
    {
      if (*(_DWORD *)v182 == 2)
        WTF::StringImpl::destroy(v182, v181);
      else
        *(_DWORD *)v182 -= 2;
    }
    if (v329[0])
    {
      v184 = v328;
      v328 = 0;
      if (v184)
      {
        if (*(_DWORD *)v184 != 2)
        {
          v177 = 0;
          *(_DWORD *)v184 -= 2;
          goto LABEL_250;
        }
        WTF::StringImpl::destroy(v184, v181);
      }
    }
    v177 = 0;
    goto LABEL_250;
  }
  v177 = 0;
LABEL_251:
  if (v152 != -1)
LABEL_252:
    (*(&off_1E334B8F8 + v152))((int)v266, (WebCore::ApplePayCouponCodeUpdate *)&v191);
  return (_BYTE *)v177;
}

_BYTE *WebCore::jsApplePaySessionPrototypeFunction_completePayment(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  JSValue v11;
  JSC::JSCell *v13;
  JSC::VM *v14;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v14 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v14, "ApplePaySession", "completePayment");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSApplePaySession::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSApplePaySession::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v14, "ApplePaySession", "completePayment");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v11.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v11);
  }
  else
  {
    v13 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
    if (((unint64_t)v13 & 0xFFFFFFFFFFFFFFF7) != 2
      && (((unint64_t)v13 & 0xFFFE000000000002) != 0 || *((unsigned __int8 *)v13 + 5) < 0x17u))
    {
      return (_BYTE *)WebCore::jsApplePaySessionPrototypeFunction_completePayment2Body(this, (unint64_t)v13, *(_QWORD *)(v5 + 24));
    }
    else
    {
      return (_BYTE *)WebCore::jsApplePaySessionPrototypeFunction_completePayment1Body(this, v13, *(_QWORD *)(v5 + 24));
    }
  }
}

uint64_t WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  *(_BYTE *)result = *(_BYTE *)a2;
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(result + 8) = v2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(result + 16) = v3;
  v4 = *(_OWORD *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(result + 40) = v5;
  *(_OWORD *)(result + 24) = v4;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(result + 64) = v6;
  *(_WORD *)(result + 72) = *(_WORD *)(a2 + 72);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(result + 80) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_DWORD *)(result + 88) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_DWORD *)(result + 92) = v7;
  *(_BYTE *)(result + 96) = 0;
  *(_BYTE *)(result + 296) = 0;
  if (*(_BYTE *)(a2 + 296))
  {
    v8 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(result + 96) = v8;
    *(_BYTE *)(result + 104) = *(_BYTE *)(a2 + 104);
    v9 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(result + 112) = v9;
    v10 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(result + 120) = v10;
    v11 = *(_OWORD *)(a2 + 128);
    v12 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(result + 160) = *(_QWORD *)(a2 + 160);
    *(_OWORD *)(result + 128) = v11;
    *(_OWORD *)(result + 144) = v12;
    v13 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a2 + 168) = 0;
    *(_QWORD *)(result + 168) = v13;
    *(_WORD *)(result + 176) = *(_WORD *)(a2 + 176);
    *(_BYTE *)(result + 184) = 0;
    *(_BYTE *)(result + 264) = 0;
    if (*(_BYTE *)(a2 + 264))
    {
      *(_BYTE *)(result + 184) = *(_BYTE *)(a2 + 184);
      v14 = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a2 + 192) = 0;
      *(_QWORD *)(result + 192) = v14;
      v15 = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a2 + 200) = 0;
      *(_QWORD *)(result + 200) = v15;
      v16 = *(_OWORD *)(a2 + 208);
      v17 = *(_OWORD *)(a2 + 224);
      *(_QWORD *)(result + 240) = *(_QWORD *)(a2 + 240);
      *(_OWORD *)(result + 208) = v16;
      *(_OWORD *)(result + 224) = v17;
      v18 = *(_QWORD *)(a2 + 248);
      *(_QWORD *)(a2 + 248) = 0;
      *(_QWORD *)(result + 248) = v18;
      *(_WORD *)(result + 256) = *(_WORD *)(a2 + 256);
      *(_BYTE *)(result + 264) = 1;
    }
    v19 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a2 + 272) = 0;
    *(_QWORD *)(result + 272) = v19;
    v20 = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a2 + 280) = 0;
    *(_QWORD *)(result + 280) = v20;
    v21 = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a2 + 288) = 0;
    *(_QWORD *)(result + 288) = v21;
    *(_BYTE *)(result + 296) = 1;
  }
  *(_BYTE *)(result + 304) = 0;
  *(_BYTE *)(result + 416) = 0;
  if (*(_BYTE *)(a2 + 416))
  {
    v22 = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a2 + 304) = 0;
    *(_QWORD *)(result + 304) = v22;
    *(_BYTE *)(result + 312) = *(_BYTE *)(a2 + 312);
    v23 = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a2 + 320) = 0;
    *(_QWORD *)(result + 320) = v23;
    v24 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a2 + 328) = 0;
    *(_QWORD *)(result + 328) = v24;
    v25 = *(_OWORD *)(a2 + 336);
    v26 = *(_OWORD *)(a2 + 352);
    *(_QWORD *)(result + 368) = *(_QWORD *)(a2 + 368);
    *(_OWORD *)(result + 336) = v25;
    *(_OWORD *)(result + 352) = v26;
    v27 = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a2 + 376) = 0;
    *(_QWORD *)(result + 376) = v27;
    *(_WORD *)(result + 384) = *(_WORD *)(a2 + 384);
    v28 = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(a2 + 392) = 0;
    *(_QWORD *)(result + 392) = v28;
    v29 = *(_QWORD *)(a2 + 400);
    *(_QWORD *)(a2 + 400) = 0;
    *(_QWORD *)(result + 400) = v29;
    v30 = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a2 + 408) = 0;
    *(_QWORD *)(result + 408) = v30;
    *(_BYTE *)(result + 416) = 1;
  }
  *(_BYTE *)(result + 424) = 0;
  *(_BYTE *)(result + 440) = 0;
  if (*(_BYTE *)(a2 + 440))
  {
    *(_QWORD *)(result + 424) = 0;
    *(_QWORD *)(result + 432) = 0;
    v31 = *(_QWORD *)(a2 + 424);
    *(_QWORD *)(a2 + 424) = 0;
    *(_QWORD *)(result + 424) = v31;
    LODWORD(v31) = *(_DWORD *)(a2 + 432);
    *(_DWORD *)(a2 + 432) = 0;
    *(_DWORD *)(result + 432) = v31;
    LODWORD(v31) = *(_DWORD *)(a2 + 436);
    *(_DWORD *)(a2 + 436) = 0;
    *(_DWORD *)(result + 436) = v31;
    *(_BYTE *)(result + 440) = 1;
  }
  *(_BYTE *)(result + 448) = 0;
  *(_BYTE *)(result + 576) = 0;
  if (*(_BYTE *)(a2 + 576))
  {
    v32 = *(_QWORD *)(a2 + 448);
    *(_QWORD *)(a2 + 448) = 0;
    *(_QWORD *)(result + 448) = v32;
    *(_BYTE *)(result + 456) = *(_BYTE *)(a2 + 456);
    v33 = *(_QWORD *)(a2 + 464);
    *(_QWORD *)(a2 + 464) = 0;
    *(_QWORD *)(result + 464) = v33;
    v34 = *(_QWORD *)(a2 + 472);
    *(_QWORD *)(a2 + 472) = 0;
    *(_QWORD *)(result + 472) = v34;
    v35 = *(_OWORD *)(a2 + 480);
    v36 = *(_OWORD *)(a2 + 496);
    *(_QWORD *)(result + 512) = *(_QWORD *)(a2 + 512);
    *(_OWORD *)(result + 480) = v35;
    *(_OWORD *)(result + 496) = v36;
    v37 = *(_QWORD *)(a2 + 520);
    *(_QWORD *)(a2 + 520) = 0;
    *(_QWORD *)(result + 520) = v37;
    *(_WORD *)(result + 528) = *(_WORD *)(a2 + 528);
    *(_QWORD *)(result + 536) = *(_QWORD *)(a2 + 536);
    v38 = *(_QWORD *)(a2 + 544);
    *(_QWORD *)(a2 + 544) = 0;
    *(_QWORD *)(result + 544) = v38;
    v39 = *(_QWORD *)(a2 + 552);
    *(_QWORD *)(a2 + 552) = 0;
    *(_QWORD *)(result + 552) = v39;
    v40 = *(_QWORD *)(a2 + 560);
    *(_QWORD *)(a2 + 560) = 0;
    *(_QWORD *)(result + 560) = v40;
    v41 = *(_QWORD *)(a2 + 568);
    *(_QWORD *)(a2 + 568) = 0;
    *(_QWORD *)(result + 568) = v41;
    *(_BYTE *)(result + 576) = 1;
  }
  *(_BYTE *)(result + 584) = 0;
  *(_BYTE *)(result + 608) = 0;
  if (*(_BYTE *)(a2 + 608))
  {
    *(_BYTE *)(result + 600) = 0;
    if (*(_BYTE *)(a2 + 600))
    {
      *(_QWORD *)(result + 584) = 0;
      *(_QWORD *)(result + 592) = 0;
      v42 = *(_QWORD *)(a2 + 584);
      *(_QWORD *)(a2 + 584) = 0;
      *(_QWORD *)(result + 584) = v42;
      LODWORD(v42) = *(_DWORD *)(a2 + 592);
      *(_DWORD *)(a2 + 592) = 0;
      *(_DWORD *)(result + 592) = v42;
      LODWORD(v42) = *(_DWORD *)(a2 + 596);
      *(_DWORD *)(a2 + 596) = 0;
      *(_DWORD *)(result + 596) = v42;
      *(_BYTE *)(result + 600) = 1;
    }
    *(_BYTE *)(result + 608) = 1;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore28ApplePayShippingMethodUpdateENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayDetailsUpdateBase *this)
{
  unsigned int v3;
  WTF *v4;

  v3 = *((_DWORD *)this + 157);
  if (v3)
    WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(*((WTF::StringImpl **)this + 77), (WTF::StringImpl *)(*((_QWORD *)this + 77) + 104 * v3));
  v4 = (WTF *)*((_QWORD *)this + 77);
  if (v4)
  {
    *((_QWORD *)this + 77) = 0;
    *((_DWORD *)this + 156) = 0;
    WTF::fastFree(v4, this);
  }
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase(this, this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore29ApplePayShippingContactUpdateENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayCouponCodeUpdate *this)
{
  WebCore::ApplePayCouponCodeUpdate::~ApplePayCouponCodeUpdate(this, this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27ApplePayPaymentMethodUpdateENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayPaymentMethodUpdate *this)
{
  WebCore::ApplePayPaymentMethodUpdate::~ApplePayPaymentMethodUpdate(this, this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore24ApplePayCouponCodeUpdateENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayCouponCodeUpdate *this)
{
  WebCore::ApplePayCouponCodeUpdate::~ApplePayCouponCodeUpdate(this, this);
}

uint64_t WebCore::jsApplePaySessionPrototypeFunction_completePayment1Body(JSC::JSGlobalObject *a1, JSC::JSCell *this, uint64_t a3)
{
  unint64_t v3;
  JSC::VM *v6;
  uint64_t Object;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  JSC::JSCell *v23;
  int v24;
  __int128 v25;
  __int128 v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  int v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  __int128 v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  JSC::VM *v52;
  double v53;
  double v54;
  double v55;
  long double v56;
  double v57;
  WTF::StringImpl *v58;
  __int128 v59;
  __int128 v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  JSValue v63;
  WTF::StringImpl *v64;
  double v65;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  __int128 v70;
  __int128 v71;
  char v72;
  int v73;
  WTF::StringImpl *v74[2];
  WTF::StringImpl *v75[2];
  WTF::StringImpl *v76[2];
  __int128 v77;
  int v78;
  unsigned __int16 v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  __int128 v82;
  __int128 v83;
  char v84;
  JSC::VM *v85;

  v6 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v85 = v6;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v84 = 0;
    v80 = 0;
    v81 = 0;
    LOBYTE(v82) = 0;
    goto LABEL_64;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    JSC::throwTypeError();
    v50 = 0;
    v33 = 1;
    v73 = 1;
    goto LABEL_100;
  }
  v3 = Object;
  v84 = 0;
  v80 = 0;
  v81 = 0;
  LOBYTE(v82) = 0;
  WTF::AtomStringImpl::addLiteral();
  v9 = JSC::JSObject::get((JSC::Structure *)v3, a1, (unint64_t)v67);
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, v8);
    else
      *(_DWORD *)v67 -= 2;
  }
  if (*((_DWORD *)v85 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v85) & 1) != 0)
    goto LABEL_65;
  if (v9 == 10)
    goto LABEL_36;
  v74[0] = *((WTF::StringImpl **)a1 + 7);
  if ((v9 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v9 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v18 = v67;
    v67 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v10);
      else
        *(_DWORD *)v18 -= 2;
    }
    v11 = 1;
    LODWORD(v77) = 1;
    goto LABEL_29;
  }
  WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::ApplePayError>>>::convert(a1, v9, (uint64_t)v76);
  v11 = v77;
  if ((_DWORD)v77)
  {
LABEL_29:
    v19 = 0;
    v73 = 1;
    goto LABEL_33;
  }
  v12 = v76[0];
  v13 = v76[1];
  v76[0] = 0;
  v76[1] = 0;
  if (HIDWORD(v81))
  {
    v14 = v80;
    v15 = 8 * HIDWORD(v81);
    do
    {
      v16 = *(_QWORD *)v14;
      *(_QWORD *)v14 = 0;
      if (v16)
      {
        if (*(_DWORD *)(v16 + 8) == 1)
        {
          v17 = *(WTF::StringImpl **)(v16 + 16);
          *(_QWORD *)(v16 + 16) = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v10);
            else
              *(_DWORD *)v17 -= 2;
          }
          WTF::fastFree((WTF *)v16, v10);
        }
        else
        {
          --*(_DWORD *)(v16 + 8);
        }
      }
      v14 = (WTF::StringImpl *)((char *)v14 + 8);
      v15 -= 8;
    }
    while (v15);
  }
  v20 = v80;
  if (v80)
  {
    v80 = 0;
    LODWORD(v81) = 0;
    WTF::fastFree(v20, v10);
  }
  v80 = v12;
  v81 = v13;
  v19 = 1;
  v11 = v77;
LABEL_33:
  if (v11 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B130[v11])(v74, v76);
  if (!v19)
    goto LABEL_58;
LABEL_36:
  WTF::AtomStringImpl::addLiteral();
  v21 = v76[0];
  v23 = (JSC::JSCell *)JSC::JSObject::get((JSC::Structure *)v3, a1, (unint64_t)v76[0]);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v22);
    else
      *(_DWORD *)v21 -= 2;
  }
  if (*((_DWORD *)v85 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v85) & 1) != 0)
    goto LABEL_65;
  if (v23 != (JSC::JSCell *)10)
  {
    WebCore::convertDictionary<WebCore::ApplePayPaymentOrderDetails>((uint64_t)v76, (JSC::VM **)a1, v23);
    v24 = v78;
    if (v78)
    {
      v73 = 1;
      v31 = v78;
    }
    else
    {
      v25 = *(_OWORD *)v76;
      v26 = v77;
      *(_OWORD *)v76 = 0u;
      v77 = 0u;
      *(_OWORD *)v74 = v25;
      *(_OWORD *)v75 = v26;
      std::optional<WebCore::ApplePayPaymentOrderDetails>::operator=[abi:sn180100]<WebCore::ApplePayPaymentOrderDetails,void>((uint64_t)&v82, (WTF::StringImpl *)v74);
      v27 = v75[1];
      v75[1] = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v10);
        else
          *(_DWORD *)v27 -= 2;
      }
      v28 = v75[0];
      v75[0] = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v10);
        else
          *(_DWORD *)v28 -= 2;
      }
      v29 = v74[1];
      v74[1] = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v10);
        else
          *(_DWORD *)v29 -= 2;
      }
      v30 = v74[0];
      v74[0] = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v10);
        else
          *(_DWORD *)v30 -= 2;
      }
      v31 = v78;
    }
    if (v31 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E334B238[v31])(v74, v76);
    if (v24)
    {
LABEL_58:
      v32 = 0;
      v33 = 1;
      goto LABEL_67;
    }
  }
  WTF::AtomStringImpl::addLiteral();
  v34 = v76[0];
  v3 = JSC::JSObject::get((JSC::Structure *)v3, a1, (unint64_t)v76[0]);
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v10);
    else
      *(_DWORD *)v34 -= 2;
  }
  if (*((_DWORD *)v85 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v85) & 1) != 0)
    goto LABEL_65;
  if (v3 != 10)
  {
    v76[0] = (WTF::StringImpl *)v3;
    v52 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v3 < 0xFFFE000000000000 || (v3 & 0x80000000) != 0)
    {
      if (v3 >= 0xFFFE000000000000)
      {
        v53 = (double)(int)v3;
      }
      else if (v3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v76, a1);
      }
      else
      {
        *(_QWORD *)&v53 = v3 - 0x2000000000000;
      }
      if (*((_DWORD *)v52 + 20))
      {
        v65 = v53;
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v52);
        v53 = v65;
        if ((hasExceptionsAfterHandlingTraps & 1) != 0)
          goto LABEL_65;
      }
      LOWORD(v3) = 0;
      if (fabs(v53) != INFINITY && v53 != 0.0)
      {
        v54 = -floor(-v53);
        v55 = floor(v53);
        if (v53 >= 0.0)
          v56 = v55;
        else
          v56 = v54;
        v57 = fmod(v56, 65536.0);
        if (v57 < 0.0)
          v57 = v57 + 65536.0;
        LODWORD(v3) = (int)v57;
      }
    }
    v79 = v3;
    LOWORD(v67) = v3;
    v68 = v80;
    v58 = v81;
    v80 = 0;
    v81 = 0;
    v69 = v58;
    LOBYTE(v70) = 0;
    v72 = 0;
    if (v84)
    {
      v33 = 0;
      v59 = v82;
      v82 = 0u;
      v60 = v83;
      v83 = 0u;
      v70 = v59;
      v71 = v60;
      v32 = 1;
      v72 = 1;
    }
    else
    {
      v32 = 0;
      v33 = 0;
    }
    goto LABEL_66;
  }
LABEL_64:
  WebCore::throwRequiredMemberTypeError((int)a1, (int)&v85, "status", 7, "ApplePayPaymentAuthorizationResult", 35, "unsigned short", 15);
LABEL_65:
  v32 = 0;
  v33 = 1;
LABEL_66:
  v73 = v33;
LABEL_67:
  std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v82, v10);
  if (HIDWORD(v81))
  {
    v36 = v80;
    v37 = 8 * HIDWORD(v81);
    do
    {
      v38 = *(_QWORD *)v36;
      *(_QWORD *)v36 = 0;
      if (v38)
      {
        if (*(_DWORD *)(v38 + 8) == 1)
        {
          v39 = *(WTF::StringImpl **)(v38 + 16);
          *(_QWORD *)(v38 + 16) = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
              WTF::StringImpl::destroy(v39, v35);
            else
              *(_DWORD *)v39 -= 2;
          }
          WTF::fastFree((WTF *)v38, v35);
        }
        else
        {
          --*(_DWORD *)(v38 + 8);
        }
      }
      v36 = (WTF::StringImpl *)((char *)v36 + 8);
      v37 -= 8;
    }
    while (v37);
  }
  v40 = v80;
  if (v80)
  {
    v80 = 0;
    LODWORD(v81) = 0;
    WTF::fastFree(v40, v35);
  }
  if (v33)
    goto LABEL_148;
  v79 = v3;
  v80 = v68;
  v41 = v69;
  v68 = 0;
  v69 = 0;
  v81 = v41;
  LOBYTE(v82) = 0;
  v84 = 0;
  if (v32)
  {
    v82 = v70;
    v42 = v71;
    v70 = 0u;
    v71 = 0u;
    v83 = v42;
    v84 = 1;
  }
  WebCore::ApplePaySession::completePayment(a3 - 32, &v79, v76);
  std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v82, v43);
  if (HIDWORD(v81))
  {
    v45 = v80;
    v46 = 8 * HIDWORD(v81);
    do
    {
      v47 = *(_QWORD *)v45;
      *(_QWORD *)v45 = 0;
      if (v47)
      {
        if (*(_DWORD *)(v47 + 8) == 1)
        {
          v48 = *(WTF::StringImpl **)(v47 + 16);
          *(_QWORD *)(v47 + 16) = 0;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2)
              WTF::StringImpl::destroy(v48, v44);
            else
              *(_DWORD *)v48 -= 2;
          }
          WTF::fastFree((WTF *)v47, v44);
        }
        else
        {
          --*(_DWORD *)(v47 + 8);
        }
      }
      v45 = (WTF::StringImpl *)((char *)v45 + 8);
      v46 -= 8;
    }
    while (v46);
  }
  v49 = v80;
  if (v80)
  {
    v80 = 0;
    LODWORD(v81) = 0;
    WTF::fastFree(v49, v44);
  }
  if ((_BYTE)v77)
  {
    v61 = (WTF::StringImpl *)LOBYTE(v76[0]);
    LOBYTE(v79) = v76[0];
    v62 = v76[1];
    v76[1] = 0;
    v80 = v62;
    if (!*((_QWORD *)v6 + 2))
    {
      v63.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v76[0]), (JSC::JSGlobalObject *)&v80);
      JSC::VM::throwException(v6, a1, v63);
      v62 = v80;
    }
    v80 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
        WTF::StringImpl::destroy(v62, v61);
      else
        *(_DWORD *)v62 -= 2;
    }
    if ((_BYTE)v77)
    {
      v64 = v76[1];
      v76[1] = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 != 2)
        {
          v50 = 0;
          *(_DWORD *)v64 -= 2;
          goto LABEL_100;
        }
        WTF::StringImpl::destroy(v64, v61);
      }
    }
LABEL_148:
    v50 = 0;
    goto LABEL_100;
  }
  v50 = 10;
LABEL_100:
  ((void (*)(unsigned __int16 *, WTF::StringImpl **))off_1E334B908[v33])(&v79, &v67);
  return v50;
}

uint64_t WebCore::jsApplePaySessionPrototypeFunction_completePayment2Body(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double v7;
  int v8;
  double v9;
  double v10;
  double v11;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSValue v15;
  double v16;
  WTF::StringImpl *v17;
  int v18[2];
  WTF::StringImpl *v19;
  char v20;

  v5 = *((_QWORD *)a1 + 7);
  *(_QWORD *)v18 = a2;
  if (a2 >= 0xFFFE000000000000 && (a2 & 0x80000000) == 0)
  {
    LOWORD(v8) = a2;
  }
  else
  {
    if (a2 >= 0xFFFE000000000000)
    {
      v7 = (double)(int)a2;
    }
    else if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v18, a1);
      v7 = v16;
    }
    else
    {
      *(_QWORD *)&v7 = a2 - 0x2000000000000;
    }
    if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      return 0;
    LOWORD(v8) = 0;
    if (fabs(v7) != INFINITY && v7 != 0.0)
    {
      v9 = -floor(-v7);
      v10 = floor(v7);
      if (v7 >= 0.0)
        v9 = v10;
      v11 = fmod(v9, 65536.0);
      if (v11 < 0.0)
        v11 = v11 + 65536.0;
      v8 = (int)v11;
    }
  }
  WebCore::ApplePaySession::completePayment((WebCore::ApplePaySession *)(a3 - 32), v8, v18);
  if (!v20)
    return 10;
  v13 = (WTF::StringImpl *)LOBYTE(v18[0]);
  v14 = v19;
  v17 = v19;
  if (!*(_QWORD *)(v5 + 16))
  {
    v15.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v18[0]), (JSC::JSGlobalObject *)&v17);
    JSC::VM::throwException((JSC::VM *)v5, a1, v15);
    v14 = v17;
  }
  v17 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  return 0;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore34ApplePayPaymentAuthorizationResultENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *result;

  std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100](a2 + 24, (WTF::StringImpl *)a2);
  v4 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(a2 + 8);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)(v7 + 8) == 1)
        {
          v8 = *(WTF::StringImpl **)(v7 + 16);
          *(_QWORD *)(v7 + 16) = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, v3);
            else
              *(_DWORD *)v8 -= 2;
          }
          WTF::fastFree((WTF *)v7, v3);
        }
        else
        {
          --*(_DWORD *)(v7 + 8);
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  result = *(WTF **)(a2 + 8);
  if (result)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

void WebCore::ApplePaySetupConfiguration::~ApplePaySetupConfiguration(WebCore::ApplePaySetupConfiguration *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;

  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v8 = (WTF::StringImpl **)*((_QWORD *)this + 3);
    v9 = 8 * v3;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26ApplePaySetupConfigurationENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePaySetupConfiguration *this)
{
  WebCore::ApplePaySetupConfiguration::~ApplePaySetupConfiguration(this, this);
}

unint64_t WebCore::jsApplePaySetupPrototypeFunction_getSetupFeatures(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  WebCore::DOMGuardedObject *v25;
  uint64_t v26;
  void (*v28)(void);
  objc_class *v29;
  WebCore::DOMGuardedObject *v30;
  WebCore::DOMGuardedObject *v31;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195234DA8);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_35;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSApplePaySetup::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSApplePaySetup::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_35:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"ApplePaySetup", "getSetupFeatures", v16);
    goto LABEL_36;
  }
  v23 = *(_QWORD *)(v17 + 24);
  v24 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v24)
  {
LABEL_36:
    if (*((_DWORD *)v14 + 4) != 1)
    {
      --*((_DWORD *)v14 + 4);
      goto LABEL_30;
    }
    v28 = *(void (**)(void))(*(_QWORD *)v14 + 16);
    goto LABEL_34;
  }
  if (*(_BYTE *)(v24 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x195234DC8);
  }
  v31 = v14;
  WebCore::ApplePaySetup::getSetupFeatures(v23, (WebCore::PaymentSession *)(v24 - 192), (uint64_t *)&v31);
  v25 = v31;
  v31 = 0;
  if (v25)
  {
    if (*((_DWORD *)v25 + 4) != 1)
    {
      --*((_DWORD *)v25 + 4);
      goto LABEL_30;
    }
    v28 = *(void (**)(void))(*(_QWORD *)v25 + 16);
LABEL_34:
    v28();
  }
LABEL_30:
  v26 = *(_QWORD *)(v10 + 16);
  if (v26)
  {
    if (*(_QWORD *)(v10 + 24) != v26)
    {
      v29 = *(objc_class **)(v26 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v31);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v31, v29, 0);
      v30 = v31;
      v31 = 0;
      if (v30)
      {
        if (*((_DWORD *)v30 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v30 + 16))(v30);
        else
          --*((_DWORD *)v30 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsApplePaySetupPrototypeFunction_begin(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSValue v29;
  int i;
  unsigned int v31;
  uint64_t IndexQuickly;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  WTF *v41;
  void *v42;
  _DWORD *v43;
  WTF *v44;
  uint64_t v45;
  _DWORD *v46;
  WTF *v47;
  uint64_t v48;
  objc_class *v50;
  WTF::StringImpl *v51;
  JSC::VM *v52;
  JSValue v53;
  int hasExceptionsAfterHandlingTraps;
  void *v55;
  uint64_t v56;
  WTF *v57;
  _DWORD *v58;
  uint64_t v59;
  WTF::StringImpl *v60[2];
  int v61;
  _DWORD *v62;
  WTF *v63;
  uint64_t v64;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195235324);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_86;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSApplePaySetup::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSApplePaySetup::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_86:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"ApplePaySetup", "begin", v17);
  }
  else if (*((_DWORD *)a2 + 8) == 1)
  {
    v52 = (JSC::VM *)*((_QWORD *)this + 7);
    v53.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v52, this, v53);
  }
  else
  {
    v24 = *(_QWORD *)(v18 + 24);
    v25 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
    if (v25)
    {
      v26 = v25;
      if (*(_BYTE *)(v25 + 274))
      {
        __break(0xC471u);
        JUMPOUT(0x1952353D4);
      }
      v27 = *((_QWORD *)a2 + 6);
      v28 = *((_QWORD *)this + 7);
      v62 = (_DWORD *)v28;
      if ((v27 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v27 + 5) <= 0x16u)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        JSC::throwTypeError();
        v34 = v60[0];
        v60[0] = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v33);
          else
            *(_DWORD *)v34 -= 2;
        }
        v35 = 1;
        v61 = 1;
      }
      else
      {
        v63 = 0;
        v64 = 0;
        v59 = v24;
        if (JSC::getIterationMode() == 2)
        {
          for (i = 1; ; ++i)
          {
            v31 = (*(_BYTE *)(v27 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v27 + 8) - 8) : 0;
            if (i - 1 >= v31)
              break;
            IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v27, i - 1, 0);
            if (!IndexQuickly)
              IndexQuickly = JSC::JSObject::get((JSC::JSObject *)v27, this, (i - 1));
            if (*(_DWORD *)(v28 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v28) & 1) != 0)
              break;
            WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::ApplePaySetupFeature>>::convert((uint64_t)this, IndexQuickly, (uint64_t)&v63);
            if (*(_QWORD *)(v28 + 16))
            {
              v39 = JSC::JSArrayIterator::create();
              v40 = i | 0xFFFE000000000000;
              if (i < 0)
                v40 = COERCE__INT64((double)i) + 0x2000000000000;
              *(_QWORD *)(v39 + 16) = v40;
              goto LABEL_61;
            }
          }
        }
        else
        {
          JSC::iteratorForIterable(this, (JSC::JSGlobalObject *)v27, v29);
          if (!*(_DWORD *)(v28 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v28) & 1) == 0)
          {
            while (1)
            {
              v36 = JSC::iteratorStep();
              if (*(_QWORD *)(v28 + 16) || v36 == 6)
                break;
              v38 = JSC::iteratorValue();
              if (*(_DWORD *)(v28 + 80))
              {
                if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v28) & 1) != 0)
                  break;
              }
              WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::ApplePaySetupFeature>>::convert((uint64_t)this, v38, (uint64_t)&v63);
              if (*(_QWORD *)(v28 + 16))
              {
LABEL_61:
                JSC::iteratorClose();
                break;
              }
            }
          }
        }
        if (!*(_DWORD *)(v28 + 80))
        {
          v41 = v63;
LABEL_64:
          v61 = 0;
          v60[0] = 0;
          v60[1] = 0;
          v62 = v14;
          v63 = v41;
          WebCore::ApplePaySetup::begin(v59, (WebCore::PaymentSession *)(v26 - 192), (uint64_t)&v63, (uint64_t *)&v62);
          v43 = v62;
          v62 = 0;
          if (v43)
          {
            if (v43[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 16))(v43);
            else
              --v43[4];
          }
          if (HIDWORD(v64))
          {
            v44 = v63;
            v45 = 8 * HIDWORD(v64);
            do
            {
              v46 = *(_DWORD **)v44;
              *(_QWORD *)v44 = 0;
              if (v46)
              {
                if (v46[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
                else
                  --v46[2];
              }
              v44 = (WTF *)((char *)v44 + 8);
              v45 -= 8;
            }
            while (v45);
          }
          v47 = v63;
          if (v63)
          {
            v63 = 0;
            LODWORD(v64) = 0;
            WTF::fastFree(v47, v42);
          }
          v14 = 0;
          v35 = 0;
          goto LABEL_78;
        }
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v28);
        v41 = v63;
        if (!hasExceptionsAfterHandlingTraps)
          goto LABEL_64;
        v61 = 1;
        if (HIDWORD(v64))
        {
          v56 = 8 * HIDWORD(v64);
          v57 = v63;
          do
          {
            v58 = *(_DWORD **)v57;
            *(_QWORD *)v57 = 0;
            if (v58)
            {
              if (v58[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v58 + 8))(v58);
              else
                --v58[2];
            }
            v57 = (WTF *)((char *)v57 + 8);
            v56 -= 8;
          }
          while (v56);
        }
        if (v41)
          WTF::fastFree(v41, v55);
        v35 = 1;
      }
LABEL_78:
      ((void (*)(WTF **, WTF::StringImpl **))off_1E334B9A0[v35])(&v63, v60);
      if (!v14)
        goto LABEL_81;
    }
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_81:
  v48 = *(_QWORD *)(v10 + 16);
  if (v48)
  {
    if (*(_QWORD *)(v10 + 24) != v48)
    {
      v50 = *(objc_class **)(v48 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, v60);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v60[0], v50, 0);
      v51 = v60[0];
      v60[0] = 0;
      if (v51)
      {
        if (*((_DWORD *)v51 + 4) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v51 + 16))(v51);
        else
          --*((_DWORD *)v51 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

uint64_t WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::ApplePaySetupFeature>>::convert(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *(_QWORD *)(result + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError();
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSApplePaySetupFeature::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSApplePaySetupFeature::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwTypeError();
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
    return JSC::throwTypeError();
  ++*(_DWORD *)(v9 + 8);
  v15 = v9;
  v10 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a3 + 8))
  {
    v11 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v10 + 1, (unint64_t)&v15);
    v12 = *(unsigned int *)(a3 + 12);
    v13 = *(char **)a3;
    v14 = *(_QWORD *)v11;
    *(_QWORD *)v11 = 0;
    *(_QWORD *)&v13[8 * v12] = v14;
    result = v15;
    *(_DWORD *)(a3 + 12) = v12 + 1;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 8);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v10) = v9;
    *(_DWORD *)(a3 + 12) = v10 + 1;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore20ApplePaySetupFeatureENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *a2;
    v5 = 8 * v3;
    do
    {
      v6 = *(_DWORD **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WebCore::SpeechSynthesisUtterance *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore29SpeechSynthesisErrorEventInitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebCore::SpeechSynthesisUtterance *result;
  bmalloc::api *v5;
  void *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = (WebCore::SpeechSynthesisUtterance *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 8) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(result, a2);
      return (WebCore::SpeechSynthesisUtterance *)bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)result + 8);
    }
  }
  return result;
}

_BYTE *WebCore::jsGestureEventPrototypeFunction_initGestureEvent(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  unint64_t v13;
  uint64_t v14;
  int32x2_t v15;
  int v16;
  unint64_t v17;
  JSC::VM *v18;
  double v19;
  _BOOL4 i;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  JSC::VM *v28;
  unsigned int v29;
  unint64_t v30;
  JSC::VM *v31;
  uint64_t v32;
  unint64_t v33;
  JSC::VM *v34;
  int v35;
  unint64_t v36;
  JSC::VM *v37;
  unint64_t v38;
  JSC::VM *v39;
  double v40;
  BOOL v41;
  double v42;
  BOOL v43;
  unint64_t v44;
  double v45;
  BOOL v46;
  unint64_t v47;
  double v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL4 v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  unsigned int v68;
  unint64_t v69;
  unsigned int v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  double v75;
  double v76;
  float v77;
  uint64_t v78;
  float v79;
  WTF::StringImpl *v80;
  WTF *v81;
  WTF::StringImpl *v82;
  uint64_t *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  JSValue v92;
  _BOOL4 v93;
  uint64_t v94;
  _BOOL4 v95;
  JSC::VM *v96;
  uint64_t v97;
  _DWORD *v98;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v100;
  uint64_t v101;
  _DWORD *v102;
  int v103;
  uint64_t v104;
  _DWORD *v105;
  int v106;
  uint64_t v107;
  _DWORD *v108;
  int v109;
  uint64_t v110;
  _DWORD *v111;
  int v112;
  int v113;
  _BOOL4 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  JSC::VM *v119;
  char v120;
  int v121;
  double v122;
  double v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  _BOOL4 v128;
  uint64_t v129;
  _DWORD *v130;
  int v131;
  unsigned int v132;
  unint64_t v133;
  _BOOL4 v134;
  uint64_t v135;
  _DWORD *v136;
  int v137;
  unsigned int v138;
  unint64_t v139;
  _BOOL4 v140;
  uint64_t v141;
  _DWORD *v142;
  unsigned int v143;
  int v144;
  int v145;
  uint64_t v146;
  int *v147;
  int v148;
  int v149;
  uint64_t v150;
  int *v151;
  int v152;
  int v153;
  uint64_t v154;
  int *v155;
  int v156;
  int v157;
  uint64_t v158;
  int *v159;
  int v160;
  int v161;
  uint64_t v162;
  int *v163;
  int v164;
  int v165;
  uint64_t v166;
  int *v167;
  int v168;
  BOOL v169;
  BOOL v170;
  BOOL v171;
  BOOL v172;
  BOOL v173;
  uint64_t v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  BOOL v179;
  BOOL v180;
  BOOL v181;
  BOOL v182;
  BOOL v183;
  BOOL v184;
  BOOL v185;
  BOOL v186;
  BOOL v187;
  BOOL v188;
  BOOL v189;
  BOOL v190;
  BOOL v191;
  BOOL v192;
  BOOL v193;
  BOOL v194;
  BOOL v195;
  BOOL v196;
  BOOL v197;
  BOOL v198;
  _DWORD *v199;
  _DWORD *v200;
  _DWORD *v201;
  _DWORD *v202;
  _DWORD *v203;
  _DWORD *v204;
  _DWORD *v205;
  _DWORD *v206;
  _DWORD *v207;
  _DWORD *v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  JSC::VM *v254;
  int v255;
  int v256;
  int v257;
  _BOOL4 v258;
  _BOOL4 v259;
  _BOOL4 v260;
  _BOOL4 v261;
  _BOOL4 v262;
  _BOOL4 v263;
  _BOOL4 v264;
  _BOOL4 v265;
  _BOOL4 v266;
  _BOOL4 v267;
  _BOOL4 v268;
  _BOOL4 v269;
  _BOOL4 v270;
  _BOOL4 v271;
  unsigned int *v272;
  JSC::VM *v273;
  JSC::VM *v274;
  JSC::VM *v275;
  JSC::VM *v276;
  uint64_t v277;
  int v278;
  JSC::JSGlobalObject *v279;
  _QWORD v280[2];

  v4 = 0xFFFE000000000002;
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v276 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v276, "GestureEvent", "initGestureEvent");
  v7 = a2;
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSGestureEvent::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSGestureEvent::s_info && v10 != 0);
  }
  if (!v9)
    return WebCore::throwThisTypeError((int)this, (int)&v276, "GestureEvent", "initGestureEvent");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 0xF)
  {
    v92.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v5, this, v92);
  }
  v13 = *(_QWORD *)(v6 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v277);
  v16 = v278;
  if (v278)
  {
    v50 = 0;
    goto LABEL_162;
  }
  v17 = *((_QWORD *)v7 + 7);
  v18 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v17 >= 0xFFFE000000000000)
    goto LABEL_237;
  *(_QWORD *)&v19 = v17 - 0x2000000000000;
  if (v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v17 & 0xFFFE000000000002) != 0)
    {
      i = v17 == 7;
      goto LABEL_18;
    }
    v145 = *(unsigned __int8 *)(v17 + 5);
    if (v145 == 3)
    {
      v148 = *(_DWORD *)(v17 + 8);
    }
    else
    {
      if (v145 != 2)
      {
        i = (*(_BYTE *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0xA) & 1) == 0
         || *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x28) != (_QWORD)this;
        goto LABEL_318;
      }
      v146 = *(_QWORD *)(v17 + 8);
      if ((v146 & 1) != 0)
        v147 = (int *)(v17 + 16);
      else
        v147 = (int *)(v146 + 4);
      v148 = *v147;
    }
    i = v148 != 0;
LABEL_318:
    v4 = 0xFFFE000000000002;
    goto LABEL_18;
  }
  for (i = v19 > 0.0 || v19 < 0.0; ; i = v17 != 0)
  {
LABEL_18:
    if (*((_DWORD *)v18 + 20))
    {
      v93 = i;
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
      {
        v50 = 0;
        goto LABEL_161;
      }
      v18 = (JSC::VM *)*((_QWORD *)this + 7);
      i = v93;
    }
    v21 = *((_QWORD *)v7 + 8);
    if (v21 >= 0xFFFE000000000000)
    {
      v22 = (_DWORD)v21 != 0;
      goto LABEL_23;
    }
    if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v21 & v4) != 0)
      {
        v22 = v21 == 7;
        goto LABEL_23;
      }
      v149 = *(unsigned __int8 *)(v21 + 5);
      if (v149 == 3)
      {
        v152 = *(_DWORD *)(v21 + 8);
      }
      else
      {
        if (v149 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v22 = 1;
LABEL_323:
            v4 = 0xFFFE000000000002;
            goto LABEL_23;
          }
          v169 = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_320:
          v22 = !v169;
          goto LABEL_323;
        }
        v150 = *(_QWORD *)(v21 + 8);
        if ((v150 & 1) != 0)
          v151 = (int *)(v21 + 16);
        else
          v151 = (int *)(v150 + 4);
        v152 = *v151;
      }
      v169 = v152 == 0;
      goto LABEL_320;
    }
    v22 = COERCE_DOUBLE(v21 - 0x2000000000000) > 0.0
       || (unint64_t)(COERCE_DOUBLE(v21 - 0x2000000000000) < 0.0);
LABEL_23:
    if (*((_DWORD *)v18 + 20))
    {
      v94 = v22;
      v95 = i;
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
      {
        v50 = 0;
        goto LABEL_161;
      }
      v18 = (JSC::VM *)*((_QWORD *)this + 7);
      i = v95;
      v22 = v94;
      v4 = 0xFFFE000000000002;
    }
    v23 = *((_QWORD *)v7 + 9);
    if ((v23 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v24 = 0;
    }
    else
    {
      v280[0] = v18;
      if ((v23 & v4) != 0
        || *(unsigned __int8 *)(v23 + 5) < 0x17u
        || &WebCore::JSWindowProxy::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x4C))
        || (v61 = *(_QWORD *)(*(_QWORD *)(v23 + 16) + 3408),
            v62 = i,
            v63 = v22,
            !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 104))(v61))
        || (v24 = *(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 104))(v61) + 112)) == 0)
      {
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v280, 3, "view", 5, "GestureEvent", 13, v14, "initGestureEvent", 17, "WindowProxy", 12);
        v50 = 0;
        goto LABEL_161;
      }
      v22 = v63;
      i = v62;
      v18 = (JSC::VM *)*((_QWORD *)this + 7);
      v4 = 0xFFFE000000000002;
    }
    v25 = *((_QWORD *)v7 + 10);
    v280[0] = v25;
    if (v25 < 0xFFFE000000000000)
    {
      v53 = v25 - 0x2000000000000;
      if (v25 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        v270 = i;
        v124 = v22;
        v207 = v24;
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v280, this);
        v24 = v207;
        v22 = v124;
        v4 = 0xFFFE000000000002;
        i = v270;
        v53 = v125;
      }
      v54 = (v53 >> 52) & 0x7FF;
      if ((v54 - 1023) <= 0x53)
      {
        v65 = v53 >> (51 - (v53 >> 52));
        if (v54 > 0x433)
          LODWORD(v65) = v53 << ((v53 >> 52) - 51);
        if (v54 >= 0x41F)
          v66 = v65;
        else
          v66 = (((1 << ((v53 >> 52) + 1)) - 1) & v65) + (1 << ((v53 >> 52) + 1));
        if ((v53 & 0x8000000000000000) == 0)
          v26 = v66;
        else
          v26 = -v66;
      }
      else
      {
        v26 = 0;
      }
    }
    else
    {
      v26 = v25;
    }
    if (*((_DWORD *)v18 + 20))
    {
      v96 = v18;
      v258 = i;
      v97 = v22;
      v98 = v24;
      v244 = v26;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v96);
      v26 = v244;
      v24 = v98;
      v22 = v97;
      v4 = 0xFFFE000000000002;
      i = v258;
      if (hasExceptionsAfterHandlingTraps)
      {
        v50 = 0;
        goto LABEL_161;
      }
    }
    v272 = (unsigned int *)v13;
    v27 = *((_QWORD *)v7 + 11);
    v280[0] = v27;
    v28 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v27 < 0xFFFE000000000000)
    {
      v55 = v27 - 0x2000000000000;
      if (v27 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        v271 = i;
        v126 = v22;
        v208 = v24;
        v256 = v26;
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v280, this);
        v26 = v256;
        v24 = v208;
        v22 = v126;
        v4 = 0xFFFE000000000002;
        i = v271;
        v55 = v127;
      }
      v56 = (v55 >> 52) & 0x7FF;
      if ((v56 - 1023) <= 0x53)
      {
        v67 = v55 >> (51 - (v55 >> 52));
        if (v56 > 0x433)
          LODWORD(v67) = v55 << ((v55 >> 52) - 51);
        if (v56 >= 0x41F)
          v68 = v67;
        else
          v68 = (((1 << ((v55 >> 52) + 1)) - 1) & v67) + (1 << ((v55 >> 52) + 1));
        if ((v55 & 0x8000000000000000) == 0)
          v29 = v68;
        else
          v29 = -v68;
      }
      else
      {
        v29 = 0;
      }
    }
    else
    {
      v29 = v27;
    }
    if (*((_DWORD *)v28 + 20))
    {
      v100 = v28;
      v259 = i;
      v101 = v22;
      v102 = v24;
      v232 = v29;
      v245 = v26;
      v103 = JSC::VM::hasExceptionsAfterHandlingTraps(v100);
      v29 = v232;
      v26 = v245;
      v24 = v102;
      v22 = v101;
      v4 = 0xFFFE000000000002;
      i = v259;
      if (v103)
      {
        v50 = 0;
        goto LABEL_161;
      }
    }
    v30 = *((_QWORD *)v7 + 12);
    v280[0] = v30;
    v31 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v30 < 0xFFFE000000000000)
    {
      v57 = v30 - 0x2000000000000;
      if (v30 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        v275 = (JSC::VM *)*((_QWORD *)this + 7);
        v128 = i;
        v129 = v22;
        v130 = v24;
        v131 = v26;
        v132 = v29;
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v280, this);
        v29 = v132;
        v26 = v131;
        v24 = v130;
        v22 = v129;
        v4 = 0xFFFE000000000002;
        i = v128;
        v31 = v275;
        v57 = v133;
      }
      v58 = (v57 >> 52) & 0x7FF;
      if ((v58 - 1023) <= 0x53)
      {
        v69 = v57 >> (51 - (v57 >> 52));
        if (v58 > 0x433)
          LODWORD(v69) = v57 << ((v57 >> 52) - 51);
        if (v58 >= 0x41F)
          v70 = v69;
        else
          v70 = (((1 << ((v57 >> 52) + 1)) - 1) & v69) + (1 << ((v57 >> 52) + 1));
        if ((v57 & 0x8000000000000000) == 0)
          v32 = v70;
        else
          v32 = -v70;
      }
      else
      {
        v32 = 0;
      }
    }
    else
    {
      v32 = v30;
    }
    if (*((_DWORD *)v31 + 20))
    {
      v260 = i;
      v104 = v22;
      v105 = v24;
      v233 = v29;
      v246 = v26;
      v219 = v32;
      v106 = JSC::VM::hasExceptionsAfterHandlingTraps(v31);
      v32 = v219;
      v29 = v233;
      v26 = v246;
      v24 = v105;
      v22 = v104;
      v4 = 0xFFFE000000000002;
      i = v260;
      if (v106)
      {
        v50 = 0;
        goto LABEL_161;
      }
    }
    v33 = *((_QWORD *)v7 + 13);
    v280[0] = v33;
    v34 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v33 < 0xFFFE000000000000)
    {
      v59 = v33 - 0x2000000000000;
      if (v33 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        v274 = (JSC::VM *)*((_QWORD *)this + 7);
        v134 = i;
        v135 = v22;
        v136 = v24;
        v137 = v26;
        v138 = v29;
        v230 = v32;
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v280, this);
        v32 = v230;
        v29 = v138;
        v26 = v137;
        v24 = v136;
        v22 = v135;
        v4 = 0xFFFE000000000002;
        i = v134;
        v34 = v274;
        v59 = v139;
      }
      v60 = (v59 >> 52) & 0x7FF;
      if ((v60 - 1023) <= 0x53)
      {
        v71 = v59 >> (51 - (v59 >> 52));
        if (v60 > 0x433)
          LODWORD(v71) = v59 << ((v59 >> 52) - 51);
        if (v60 >= 0x41F)
          v72 = v71;
        else
          v72 = (((1 << ((v59 >> 52) + 1)) - 1) & v71) + (1 << ((v59 >> 52) + 1));
        if ((v59 & 0x8000000000000000) == 0)
          v35 = v72;
        else
          v35 = -v72;
      }
      else
      {
        v35 = 0;
      }
    }
    else
    {
      v35 = v33;
    }
    if (*((_DWORD *)v34 + 20))
    {
      v261 = i;
      v107 = v22;
      v108 = v24;
      v234 = v29;
      v247 = v26;
      v209 = v35;
      v220 = v32;
      v109 = JSC::VM::hasExceptionsAfterHandlingTraps(v34);
      v35 = v209;
      v32 = v220;
      v29 = v234;
      v26 = v247;
      v24 = v108;
      v22 = v107;
      v4 = 0xFFFE000000000002;
      i = v261;
      if (v109)
      {
        v50 = 0;
        goto LABEL_161;
      }
    }
    v36 = *((_QWORD *)v7 + 14);
    v280[0] = v36;
    v37 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v36 < 0xFFFE000000000000 && v36 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v273 = (JSC::VM *)*((_QWORD *)this + 7);
      v140 = i;
      v141 = v22;
      v142 = v24;
      v257 = v26;
      v143 = v29;
      v231 = v32;
      v144 = v35;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v280, this);
      v35 = v144;
      v32 = v231;
      v29 = v143;
      v26 = v257;
      v24 = v142;
      v22 = v141;
      v4 = 0xFFFE000000000002;
      i = v140;
      v37 = v273;
    }
    if (*((_DWORD *)v37 + 20))
    {
      v262 = i;
      v110 = v22;
      v111 = v24;
      v235 = v29;
      v248 = v26;
      v210 = v35;
      v221 = v32;
      v112 = JSC::VM::hasExceptionsAfterHandlingTraps(v37);
      v35 = v210;
      v32 = v221;
      v29 = v235;
      v26 = v248;
      v24 = v111;
      v22 = v110;
      v4 = 0xFFFE000000000002;
      i = v262;
      if (v112)
      {
        v50 = 0;
        goto LABEL_161;
      }
    }
    v38 = *((_QWORD *)v7 + 15);
    v39 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v38 >= 0xFFFE000000000000)
    {
      v41 = (_DWORD)v38 != 0;
      goto LABEL_44;
    }
    *(_QWORD *)&v40 = v38 - 0x2000000000000;
    if (v38 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v38 & v4) != 0)
      {
        v41 = v38 == 7;
        goto LABEL_44;
      }
      v153 = *(unsigned __int8 *)(v38 + 5);
      if (v153 == 3)
      {
        v156 = *(_DWORD *)(v38 + 8);
LABEL_302:
        v170 = v156 == 0;
        goto LABEL_325;
      }
      if (v153 == 2)
      {
        v154 = *(_QWORD *)(v38 + 8);
        if ((v154 & 1) != 0)
          v155 = (int *)(v38 + 16);
        else
          v155 = (int *)(v154 + 4);
        v156 = *v155;
        goto LABEL_302;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v170 = *(_QWORD *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_325:
        v41 = !v170;
        goto LABEL_328;
      }
LABEL_304:
      v41 = 1;
      goto LABEL_328;
    }
    if (v40 > 0.0)
      goto LABEL_304;
    v41 = v40 < 0.0;
LABEL_328:
    v4 = 0xFFFE000000000002;
LABEL_44:
    if (*((_DWORD *)v39 + 20))
    {
      v191 = v41;
      v211 = v35;
      v222 = v32;
      v236 = v29;
      v113 = v26;
      v199 = v24;
      v175 = v22;
      v114 = i;
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v39) & 1) != 0)
      {
        v50 = 0;
        goto LABEL_161;
      }
      v39 = (JSC::VM *)*((_QWORD *)this + 7);
      i = v114;
      v22 = v175;
      v4 = 0xFFFE000000000002;
      v24 = v199;
      v26 = v113;
      v32 = v222;
      v29 = v236;
      v35 = v211;
      v41 = v191;
    }
    v13 = *((_QWORD *)v7 + 16);
    if (v13 >= 0xFFFE000000000000)
    {
      v43 = (_DWORD)v13 != 0;
      goto LABEL_49;
    }
    *(_QWORD *)&v42 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v13 & v4) != 0)
      {
        v43 = v13 == 7;
        goto LABEL_49;
      }
      v157 = *(unsigned __int8 *)(v13 + 5);
      if (v157 == 3)
      {
        v160 = *(_DWORD *)(v13 + 8);
LABEL_306:
        v171 = v160 == 0;
        goto LABEL_330;
      }
      if (v157 == 2)
      {
        v158 = *(_QWORD *)(v13 + 8);
        if ((v158 & 1) != 0)
          v159 = (int *)(v13 + 16);
        else
          v159 = (int *)(v158 + 4);
        v160 = *v159;
        goto LABEL_306;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v171 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_330:
        v43 = !v171;
        goto LABEL_333;
      }
LABEL_308:
      v43 = 1;
      goto LABEL_333;
    }
    if (v42 > 0.0)
      goto LABEL_308;
    v43 = v42 < 0.0;
LABEL_333:
    v4 = 0xFFFE000000000002;
LABEL_49:
    if (*((_DWORD *)v39 + 20))
    {
      v184 = v43;
      v192 = v41;
      v212 = v35;
      v223 = v32;
      v237 = v29;
      v249 = v26;
      v200 = v24;
      v115 = v22;
      v263 = i;
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v39) & 1) != 0)
      {
        v50 = 0;
        goto LABEL_161;
      }
      v39 = (JSC::VM *)*((_QWORD *)this + 7);
      i = v263;
      v22 = v115;
      v4 = 0xFFFE000000000002;
      v24 = v200;
      v29 = v237;
      v26 = v249;
      v35 = v212;
      v32 = v223;
      v43 = v184;
      v41 = v192;
    }
    v44 = *((_QWORD *)v7 + 17);
    if (v44 >= 0xFFFE000000000000)
    {
      v46 = (_DWORD)v44 != 0;
      goto LABEL_54;
    }
    *(_QWORD *)&v45 = v44 - 0x2000000000000;
    if (v44 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v44 & v4) != 0)
      {
        v46 = v44 == 7;
        goto LABEL_54;
      }
      v161 = *(unsigned __int8 *)(v44 + 5);
      if (v161 == 3)
      {
        v164 = *(_DWORD *)(v44 + 8);
LABEL_310:
        v172 = v164 == 0;
        goto LABEL_335;
      }
      if (v161 == 2)
      {
        v162 = *(_QWORD *)(v44 + 8);
        if ((v162 & 1) != 0)
          v163 = (int *)(v44 + 16);
        else
          v163 = (int *)(v162 + 4);
        v164 = *v163;
        goto LABEL_310;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v172 = *(_QWORD *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_335:
        v46 = !v172;
        goto LABEL_338;
      }
LABEL_312:
      v46 = 1;
      goto LABEL_338;
    }
    if (v45 > 0.0)
      goto LABEL_312;
    v46 = v45 < 0.0;
LABEL_338:
    v4 = 0xFFFE000000000002;
LABEL_54:
    if (*((_DWORD *)v39 + 20))
    {
      v185 = v43;
      v193 = v41;
      v213 = v35;
      v224 = v32;
      v238 = v29;
      v250 = v26;
      v201 = v24;
      v116 = v22;
      v264 = i;
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v39) & 1) != 0)
      {
        v50 = 0;
        goto LABEL_161;
      }
      v39 = (JSC::VM *)*((_QWORD *)this + 7);
      i = v264;
      v22 = v116;
      v4 = 0xFFFE000000000002;
      v24 = v201;
      v29 = v238;
      v26 = v250;
      v35 = v213;
      v32 = v224;
      v43 = v185;
      v41 = v193;
    }
    v47 = *((_QWORD *)v7 + 18);
    if (v47 >= 0xFFFE000000000000)
    {
      v49 = (_DWORD)v47 != 0;
      goto LABEL_59;
    }
    *(_QWORD *)&v48 = v47 - 0x2000000000000;
    if (v47 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v47 & v4) != 0)
      {
        v49 = v47 == 7;
        goto LABEL_59;
      }
      v165 = *(unsigned __int8 *)(v47 + 5);
      if (v165 == 3)
      {
        v168 = *(_DWORD *)(v47 + 8);
LABEL_314:
        v173 = v168 == 0;
        goto LABEL_340;
      }
      if (v165 == 2)
      {
        v166 = *(_QWORD *)(v47 + 8);
        if ((v166 & 1) != 0)
          v167 = (int *)(v47 + 16);
        else
          v167 = (int *)(v166 + 4);
        v168 = *v167;
        goto LABEL_314;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v173 = *(_QWORD *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_340:
        v49 = !v173;
        goto LABEL_343;
      }
LABEL_316:
      v49 = 1;
      goto LABEL_343;
    }
    if (v48 > 0.0)
      goto LABEL_316;
    v49 = v48 < 0.0;
LABEL_343:
    v4 = 0xFFFE000000000002;
LABEL_59:
    if (*((_DWORD *)v39 + 20))
    {
      v179 = v49;
      v186 = v43;
      v194 = v41;
      v214 = v35;
      v225 = v32;
      v239 = v29;
      v251 = v26;
      v202 = v24;
      v117 = v22;
      v265 = i;
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v39) & 1) != 0)
      {
        v50 = 0;
        goto LABEL_161;
      }
      v39 = (JSC::VM *)*((_QWORD *)this + 7);
      i = v265;
      v22 = v117;
      v4 = 0xFFFE000000000002;
      v24 = v202;
      v29 = v239;
      v26 = v251;
      v35 = v214;
      v32 = v225;
      v43 = v186;
      v41 = v194;
      v49 = v179;
    }
    v17 = *((_QWORD *)v7 + 19);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) != 2)
    {
      v280[0] = v39;
      if ((v17 & v4) != 0)
        goto LABEL_67;
      v51 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v52 = 16 * v51;
      if ((char **)(16 * v51) == &WebCore::JSWindowProxy::s_info)
      {
        v64 = (_QWORD *)(*(_QWORD *)(v17 + 16) + 3408);
      }
      else
      {
        if ((_DWORD)v51 && (char **)v52 != &WebCore::JSDOMWindow::s_info)
        {
          v73 = 16 * v51;
          do
            v73 = *(_QWORD *)(v73 + 16);
          while ((char **)v73 != &WebCore::JSDOMWindow::s_info && v73 != 0);
          if (!v73)
          {
            if ((char **)v52 == &WebCore::JSWorkerGlobalScope::s_info)
              goto LABEL_137;
            v88 = v52;
            do
              v88 = *(_QWORD *)(v88 + 16);
            while ((char **)v88 != &WebCore::JSWorkerGlobalScope::s_info && v88 != 0);
            if (v88)
              goto LABEL_137;
            if ((char **)v52 != &WebCore::JSEventTarget::s_info)
            {
              do
                v52 = *(_QWORD *)(v52 + 16);
              while ((char **)v52 != &WebCore::JSEventTarget::s_info && v52 != 0);
              if (!v52)
              {
LABEL_67:
                WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v280, 13, "target", 7, "GestureEvent", 13, v32, "initGestureEvent", 17, "EventTarget", 12);
                v50 = 0;
                goto LABEL_161;
              }
            }
            v64 = (_QWORD *)(v17 + 24);
            goto LABEL_136;
          }
        }
        else if (!(_DWORD)v51)
        {
          goto LABEL_67;
        }
        v64 = (_QWORD *)(v17 + 3408);
      }
LABEL_136:
      if (!*v64)
        goto LABEL_67;
    }
LABEL_137:
    v4 = *((_QWORD *)v7 + 20);
    v279 = v39;
    v280[0] = v4;
    if (v4 >= 0xFFFE000000000000)
    {
      v75 = (double)(int)v4;
    }
    else if (v4 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v254 = v39;
      v177 = v22;
      v182 = v49;
      v268 = i;
      v205 = v24;
      v121 = v26;
      v228 = v32;
      v242 = v29;
      v217 = v35;
      v189 = v43;
      v197 = v41;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v280, this);
      v49 = v182;
      v43 = v189;
      v41 = v197;
      v35 = v217;
      v32 = v228;
      v29 = v242;
      v26 = v121;
      v24 = v205;
      v22 = v177;
      i = v268;
      v39 = v254;
      v75 = v122;
    }
    else
    {
      *(_QWORD *)&v75 = v4 - 0x2000000000000;
    }
    if (*((_DWORD *)v39 + 20))
    {
      v266 = i;
      v176 = v22;
      v180 = v49;
      v203 = v24;
      v240 = v29;
      v252 = v26;
      v215 = v35;
      v226 = v32;
      v187 = v43;
      v195 = v41;
      v118 = JSC::VM::hasExceptionsAfterHandlingTraps(v39);
      v49 = v180;
      v43 = v187;
      v41 = v195;
      v35 = v215;
      v32 = v226;
      v29 = v240;
      v26 = v252;
      v24 = v203;
      v22 = v176;
      i = v266;
      if ((v118 & 1) != 0)
        goto LABEL_225;
    }
    if ((*(_QWORD *)&v75 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v75 < -3.40282347e38 || v75 > 3.40282347e38)
    {
      JSC::throwTypeError();
LABEL_225:
      v50 = 0;
      goto LABEL_161;
    }
    v18 = (JSC::VM *)*((_QWORD *)v7 + 21);
    v7 = (JSC::JSGlobalObject *)*((_QWORD *)this + 7);
    v279 = v7;
    v280[0] = v18;
    if ((unint64_t)v18 >= 0xFFFE000000000000)
    {
      v76 = (double)(int)v18;
    }
    else if ((unint64_t)v18 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v178 = v22;
      v183 = v49;
      v269 = i;
      v206 = v24;
      v243 = v29;
      v255 = v26;
      v218 = v35;
      v229 = v32;
      v190 = v43;
      v198 = v41;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v280, this);
      v49 = v183;
      v43 = v190;
      v41 = v198;
      v35 = v218;
      v32 = v229;
      v29 = v243;
      v26 = v255;
      v24 = v206;
      v22 = v178;
      i = v269;
      v76 = v123;
    }
    else
    {
      *(_QWORD *)&v76 = (char *)v18 - 0x2000000000000;
    }
    if (*((_DWORD *)v7 + 20))
    {
      v119 = v7;
      v267 = i;
      v7 = (JSC::JSGlobalObject *)v22;
      v204 = v24;
      v241 = v29;
      v253 = v26;
      v216 = v35;
      v227 = v32;
      v188 = v43;
      v196 = v41;
      v181 = v49;
      v120 = JSC::VM::hasExceptionsAfterHandlingTraps(v119);
      v49 = v181;
      v43 = v188;
      v41 = v196;
      v35 = v216;
      v32 = v227;
      v29 = v241;
      v26 = v253;
      v24 = v204;
      LODWORD(v22) = (_DWORD)v7;
      i = v267;
      if ((v120 & 1) != 0)
        goto LABEL_229;
    }
    if ((*(_QWORD *)&v76 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v76 < -3.40282347e38 || v76 > 3.40282347e38)
      break;
    if (!v278)
    {
      v78 = v277;
      v277 = 0;
      v280[0] = v78;
      if (v24)
        ++*v24;
      v279 = (JSC::JSGlobalObject *)v24;
      BYTE3(v174) = v49;
      BYTE2(v174) = v46;
      BYTE1(v174) = v43;
      LOBYTE(v174) = v41;
      v77 = v75;
      v79 = v76;
      WebCore::GestureEvent::initGestureEvent(v272, (const WTF::AtomString *)v280, i, v22, (_DWORD **)&v279, v26, v29, v32, v77, v79, v15, v35, SBYTE1(v35), SBYTE2(v35), SHIBYTE(v35), v174);
      v81 = v279;
      v279 = 0;
      if (v81)
      {
        if (*(_DWORD *)v81 == 1)
        {
          v84 = (uint64_t *)*((_QWORD *)v81 + 2);
          *((_QWORD *)v81 + 2) = 0;
          if (v84)
          {
            if (*v84)
              WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v84, v80);
            WTF::fastFree((WTF *)v84, v80);
          }
          v85 = (unsigned int *)*((_QWORD *)v81 + 1);
          *((_QWORD *)v81 + 1) = 0;
          if (v85)
          {
            do
            {
              v86 = __ldaxr(v85);
              v87 = v86 - 1;
            }
            while (__stlxr(v87, v85));
            if (!v87)
            {
              atomic_store(1u, v85);
              WTF::fastFree((WTF *)v85, v80);
            }
          }
          WTF::fastFree(v81, v80);
        }
        else
        {
          --*(_DWORD *)v81;
        }
      }
      v82 = (WTF::StringImpl *)v280[0];
      v280[0] = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 2)
          WTF::StringImpl::destroy(v82, v80);
        else
          *(_DWORD *)v82 -= 2;
      }
      v50 = 10;
      goto LABEL_161;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_237:
    ;
  }
  JSC::throwTypeError();
LABEL_229:
  v50 = 0;
LABEL_161:
  v16 = v278;
LABEL_162:
  if (v16 != -1)
    ((void (*)(_QWORD *, uint64_t *))off_1E334BAD8[v16])(v280, &v277);
  return (_BYTE *)v50;
}

JSCell *WebCore::setSubclassStructureIfNeeded<WebCore::Touch>(JSC *a1, uint64_t a2, JSCell *a3)
{
  JSCell *result;
  JSC::JSObject *v7;
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  uint64_t FunctionRealm;
  JSC::Structure *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  int v21;
  JSC::JSObject *v22;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v24;
  JSC::Structure *v25;
  JSC::JSCell *v26;
  uint64_t v27;
  unint64_t SubclassStructure;

  result = *(JSCell **)(a2 + 40);
  if (((unint64_t)result & 0xFFFE000000000002) == 0)
  {
    result = (JSCell *)JSC::JSCell::getObject((JSC::JSCell *)result);
    if (result && result != *(JSCell **)(a2 + 24))
    {
      v9 = (JSC::JSGlobalObject *)result;
      v10 = (JSC::VM *)*((_QWORD *)a1 + 7);
      FunctionRealm = JSC::getFunctionRealm(a1, (JSC::JSGlobalObject *)result, v7);
      v13 = FunctionRealm;
      if (!*((_DWORD *)v10 + 20)
        || (result = (JSCell *)JSC::VM::hasExceptionsAfterHandlingTraps(v10), (result & 1) == 0))
      {
        v14 = *(_QWORD *)(v13 + 3296);
        if (v14)
        {
          v15 = *(_DWORD *)(v14 - 8);
          v16 = ((unint64_t)&WebCore::JSTouch::s_info + ~((_QWORD)&WebCore::JSTouch::s_info << 32)) ^ (((unint64_t)&WebCore::JSTouch::s_info + ~((_QWORD)&WebCore::JSTouch::s_info << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = *(char ***)(v14 + 16 * v19);
          if (v20 == &WebCore::JSTouch::s_info)
          {
LABEL_14:
            v22 = *(JSC::JSObject **)(v14 + 16 * v19 + 8);
            if (v22)
            {
LABEL_16:
              SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v9, v22, v12);
              if (!*((_DWORD *)v10 + 20))
                return JSC::JSObject::setStructure(a3, v10, SubclassStructure);
              result = (JSCell *)JSC::VM::hasExceptionsAfterHandlingTraps(v10);
              if ((result & 1) == 0)
                return JSC::JSObject::setStructure(a3, v10, SubclassStructure);
              return result;
            }
          }
          else
          {
            v21 = 1;
            while (v20)
            {
              v19 = ((_DWORD)v19 + v21) & v15;
              v20 = *(char ***)(v14 + 16 * v19);
              ++v21;
              if (v20 == &WebCore::JSTouch::s_info)
                goto LABEL_14;
            }
          }
        }
        Structure = WebCore::JSTouchPrototype::createStructure((uint64_t *)v10, v13, *(JSC::JSCell **)(v13 + 656));
        *(_DWORD *)(Structure + 16) |= 0x80000u;
        v26 = (JSC::JSCell *)WebCore::JSTouchPrototype::create(v10, Structure, v24, v25);
        v27 = WebCore::JSTouch::createStructure((uint64_t *)v10, v13, v26);
        v22 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)v13, v27, (uint64_t)&WebCore::JSTouch::s_info);
        goto LABEL_16;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSTouch::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9TouchListENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6VectorINS8_3RefINSA_5TouchENSC_ISJ_EENSE_ISJ_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSG_SP_EEEEEEDcST_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;

  v2 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = *(unsigned int *)(v2 + 20);
      if ((_DWORD)v3)
      {
        v4 = *(WTF ***)(v2 + 8);
        v5 = 8 * v3;
        do
        {
          v6 = *v4;
          *v4 = 0;
          if (v6)
            WTF::RefCounted<WebCore::Touch>::deref(v6, a2);
          ++v4;
          v5 -= 8;
        }
        while (v5);
      }
      v7 = *(WTF **)(v2 + 8);
      if (v7)
      {
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
        WTF::fastFree(v7, a2);
      }
      WTF::fastFree((WTF *)v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9TouchListENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6VectorINS8_3RefINSA_5TouchENSC_ISJ_EENSE_ISJ_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSG_SP_EEEEEEDcST_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *(WTF ***)a2;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        WTF::RefCounted<WebCore::Touch>::deref(v6, a2);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9TouchListENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6VectorINS8_3RefINSA_5TouchENSC_ISJ_EENSE_ISJ_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SP_EEEOS15_EEEDcSX_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9TouchListENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6VectorINS8_3RefINSA_5TouchENSC_ISJ_EENSE_ISJ_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SP_EEEOS15_EEEDcSX_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9TouchListENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6VectorINS8_3RefINSA_5TouchENSC_ISJ_EENSE_ISJ_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISQ_LNS0_6_TraitE1EEEEEvOT_EUlRSW_OT0_E_JRNS0_6__baseILSU_1EJSG_SP_EEEOS14_EEEDcSW_DpT0_(uint64_t result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF **v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  char v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E334BFC0[v5])(&v14, v4);
LABEL_7:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 16) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *(_QWORD *)a2;
  *(_QWORD *)a2 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      v9 = *(unsigned int *)(v7 + 20);
      if ((_DWORD)v9)
      {
        v10 = *(WTF ***)(v7 + 8);
        v11 = 8 * v9;
        do
        {
          v12 = *v10;
          *v10 = 0;
          if (v12)
            WTF::RefCounted<WebCore::Touch>::deref(v12, a2);
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
      v13 = *(WTF **)(v7 + 8);
      if (v13)
      {
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 16) = 0;
        WTF::fastFree(v13, a2);
      }
      return WTF::fastFree((WTF *)v7, a2);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9TouchListENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6VectorINS8_3RefINSA_5TouchENSC_ISJ_EENSE_ISJ_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISQ_LNS0_6_TraitE1EEEEEvOT_EUlRSW_OT0_E_JRNS0_6__baseILSU_1EJSG_SP_EEEOS14_EEEDcSW_DpT0_(WTF *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  WTF **v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 1)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1E334BFC0[v5])(&v13, v4);
LABEL_12:
    *(_DWORD *)(v4 + 16) = -1;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    v12 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v12;
    LODWORD(v12) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    *(_DWORD *)(v4 + 8) = v12;
    LODWORD(v12) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    *(_DWORD *)(v4 + 12) = v12;
    *(_DWORD *)(v4 + 16) = 1;
    return result;
  }
  v7 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v7)
  {
    v8 = *(WTF ***)a2;
    v9 = 8 * v7;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
        WTF::RefCounted<WebCore::Touch>::deref(v10, a2);
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v11 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v11;
  LODWORD(v11) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *((_DWORD *)a2 + 2) = v11;
  LODWORD(v11) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *((_DWORD *)a2 + 3) = v11;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_7variantIJN3WTF6RefPtrIN7WebCore9TouchListENSA_12RawPtrTraitsISD_EENSA_21DefaultRefDerefTraitsISD_EEEENSA_6VectorINSA_3RefINSC_5TouchENSE_ISL_EENSG_ISL_EEEELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEEENSC_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSW_1EJST_SU_EEEEEEDcSY_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E334BFC0[v3])(&v5, a2);
    *(_DWORD *)(a2 + 16) = -1;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10TouchEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  char v12;
  char v13;

  if (*(_BYTE *)(a2 + 144))
  {
    v3 = *(unsigned int *)(a2 + 136);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E334BFC0[v3])(&v11, a2 + 120);
    *(_DWORD *)(a2 + 136) = -1;
  }
  if (*(_BYTE *)(a2 + 112))
  {
    v4 = *(unsigned int *)(a2 + 104);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_1E334BFC0[v4])(&v12, a2 + 88);
    *(_DWORD *)(a2 + 104) = -1;
  }
  if (*(_BYTE *)(a2 + 80))
  {
    v5 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t))off_1E334BFC0[v5])(&v13, a2 + 56);
    *(_DWORD *)(a2 + 72) = -1;
  }
  v6 = *(WTF **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      v7 = (uint64_t *)*((_QWORD *)v6 + 2);
      *((_QWORD *)v6 + 2) = 0;
      if (v7)
      {
        if (*v7)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v7, (WTF::StringImpl *)a2);
        WTF::fastFree((WTF *)v7, (void *)a2);
      }
      v8 = (unsigned int *)*((_QWORD *)v6 + 1);
      *((_QWORD *)v6 + 1) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, (void *)a2);
        }
      }
      WTF::fastFree(v6, (void *)a2);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
}

_BYTE *WebCore::jsTouchEventPrototypeFunction_initTouchEvent(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::JSGlobalObject *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  JSC::VM *v18;
  double v19;
  int v20;
  uint64_t v21;
  int *v22;
  int v23;
  _BOOL4 v24;
  unint64_t v25;
  JSC::VM *v26;
  int v27;
  uint64_t v28;
  int *v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  unint64_t v33;
  JSC::VM *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  JSC::VM *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  unsigned int v49;
  unint64_t v50;
  JSC::VM *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  JSC::VM *v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  JSC::VM *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  JSC::VM *v79;
  double v80;
  int v81;
  uint64_t v82;
  int *v83;
  int v84;
  char v85;
  unint64_t v86;
  JSC::VM *v87;
  double v88;
  int v89;
  uint64_t v90;
  _DWORD *v91;
  char v92;
  JSC::VM *v93;
  double v94;
  int v95;
  uint64_t v96;
  int *v97;
  int v98;
  char v99;
  unint64_t v100;
  JSC::VM *v101;
  double v102;
  int v103;
  uint64_t v104;
  int *v105;
  int v106;
  unsigned __int8 v107;
  float v108;
  uint64_t v109;
  _DWORD *v110;
  _DWORD *v111;
  uint64_t v112;
  uint64_t v113;
  _BOOL4 v114;
  uint64_t v115;
  uint64_t v117;
  uint64_t v118;
  _BOOL4 v119;
  char **v120;
  BOOL v121;
  uint64_t v123;
  _BOOL4 v124;
  char **v125;
  BOOL v126;
  unint64_t v128;
  JSC::JSGlobalObject *v129;
  double v130;
  float v131;
  WTF::StringImpl *v132;
  double v133;
  uint64_t v134;
  WTF *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  uint64_t v139;
  uint64_t *v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v144;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v146;
  unsigned int v147;
  int v148;
  JSC::VM *v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  JSC::VM *v162;
  char v163;
  JSC::VM *v164;
  unsigned int v165;
  unsigned __int8 v166;
  char v167;
  double v168;
  unsigned __int8 v169;
  BOOL i;
  BOOL v171;
  BOOL v172;
  BOOL v173;
  BOOL v174;
  BOOL v175;
  double v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  float v180;
  float v181;
  unsigned int v182;
  double v183;
  unsigned int v184;
  unsigned int v185;
  _DWORD *v186;
  _DWORD *v187;
  _DWORD *v188;
  _DWORD *v189;
  unsigned __int8 v190;
  unsigned __int8 v191;
  uint64_t v192;
  unsigned __int8 v193;
  uint64_t v194;
  char v195;
  char v196;
  char v197;
  char v198;
  char v199;
  char v200;
  char v201;
  char v202;
  char v203;
  char v204;
  char v205;
  char v206;
  char v207;
  char v208;
  char v209;
  char v210;
  char v211;
  char v212;
  char v213;
  char v214;
  char v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  uint64_t v224;
  int v225;
  unsigned int v226;
  int v227;
  int v228;
  JSC::JSGlobalObject *v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  JSC::JSGlobalObject *v233;
  _QWORD v234[2];

  v230 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v230, "TouchEvent", "initTouchEvent");
  v5 = a2;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSTouchEvent::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSTouchEvent::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v230, "TouchEvent", "initTouchEvent");
  v11 = 0xFFFE000000000002;
  v12 = *(_QWORD *)(v4 + 24);
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, v13, (uint64_t)&v231);
  v15 = v232;
  if (v232)
  {
    v35 = 0;
    goto LABEL_264;
  }
  v16 = *((int *)v5 + 8);
  if ((unint64_t)(v16 - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v18 = (JSC::VM *)*((_QWORD *)this + 7);
    v17 = 10;
    goto LABEL_27;
  }
  v17 = *((_QWORD *)v5 + 7);
  v18 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v17 >= 0xFFFE000000000000)
    goto LABEL_323;
  *(_QWORD *)&v19 = v17 - 0x2000000000000;
  if (v17 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v24 = v19 > 0.0 || v19 < 0.0;
    goto LABEL_28;
  }
  if ((v17 & 0xFFFE000000000002) != 0)
  {
LABEL_27:
    v24 = v17 == 7;
    goto LABEL_28;
  }
  v20 = *(unsigned __int8 *)(v17 + 5);
  if (v20 == 3)
  {
    v23 = *(_DWORD *)(v17 + 8);
  }
  else
  {
    if (v20 != 2)
    {
      v24 = (*(_BYTE *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0xA) & 1) == 0
         || *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x28) != (_QWORD)this;
      goto LABEL_28;
    }
    v21 = *(_QWORD *)(v17 + 8);
    if ((v21 & 1) != 0)
      v22 = (int *)(v17 + 16);
    else
      v22 = (int *)(v21 + 4);
    v23 = *v22;
  }
  for (i = v23 == 0; ; i = (_DWORD)v17 == 0)
  {
    v24 = !i;
LABEL_28:
    if (*((_DWORD *)v18 + 20))
    {
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
      {
        v35 = 0;
        goto LABEL_263;
      }
      v16 = *((int *)v5 + 8);
    }
    if ((unint64_t)(v16 - 4) >= 0xFFFFFFFFFFFFFFFDLL)
    {
      v26 = (JSC::VM *)*((_QWORD *)this + 7);
      v25 = 10;
LABEL_40:
      v31 = v25 == 7;
      goto LABEL_41;
    }
    v25 = *((_QWORD *)v5 + 8);
    v26 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v25 >= 0xFFFE000000000000)
    {
      v171 = (_DWORD)v25 == 0;
      goto LABEL_356;
    }
    if (v25 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v31 = COERCE_DOUBLE(v25 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v25 - 0x2000000000000) < 0.0;
    }
    else
    {
      if ((v25 & v11) != 0)
        goto LABEL_40;
      v27 = *(unsigned __int8 *)(v25 + 5);
      if (v27 == 3)
      {
        v30 = *(_DWORD *)(v25 + 8);
        goto LABEL_355;
      }
      if (v27 == 2)
      {
        v28 = *(_QWORD *)(v25 + 8);
        if ((v28 & 1) != 0)
          v29 = (int *)(v25 + 16);
        else
          v29 = (int *)(v28 + 4);
        v30 = *v29;
LABEL_355:
        v171 = v30 == 0;
LABEL_356:
        v31 = !v171;
        goto LABEL_41;
      }
      v31 = (*(_BYTE *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0xA) & 1) == 0
         || *(_QWORD *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x28) != (_QWORD)this;
    }
LABEL_41:
    if (*((_DWORD *)v26 + 20))
    {
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v26) & 1) != 0)
      {
        v35 = 0;
        goto LABEL_263;
      }
      v16 = *((int *)v5 + 8);
    }
    if ((unint64_t)(v16 - 5) > 0xFFFFFFFFFFFFFFFBLL)
    {
      v229 = 0;
    }
    else
    {
      v32 = *((_QWORD *)v5 + 9);
      if ((v32 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v229 = 0;
      }
      else
      {
        v234[0] = *((_QWORD *)this + 7);
        if ((v32 & v11) != 0
          || *(unsigned __int8 *)(v32 + 5) < 0x17u
          || &WebCore::JSWindowProxy::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x4C))
          || (v139 = *(_QWORD *)(*(_QWORD *)(v32 + 16) + 3408),
              !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v139 + 104))(v139))
          || (v229 = *(JSC::JSGlobalObject **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v139 + 104))(v139) + 112)) == 0)
        {
          WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v234, 3, "view", 5, "TouchEvent", 11, v14, "initTouchEvent", 15, "WindowProxy", 12);
          v35 = 0;
          goto LABEL_263;
        }
        v16 = *((int *)v5 + 8);
      }
    }
    v228 = v31;
    if ((unint64_t)(v16 - 6) >= 0xFFFFFFFFFFFFFFFBLL)
    {
      v234[0] = 10;
      v34 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_54:
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v234, this);
      v37 = v36;
      goto LABEL_55;
    }
    v33 = *((_QWORD *)v5 + 10);
    v234[0] = v33;
    v34 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v33 >= 0xFFFE000000000000)
    {
      v227 = v33;
      goto LABEL_66;
    }
    v37 = v33 - 0x2000000000000;
    if (v33 - 0x2000000000000 >= 0xFFFC000000000000)
      goto LABEL_54;
LABEL_55:
    v38 = (v37 >> 52) & 0x7FF;
    if ((v38 - 1023) <= 0x53)
    {
      v39 = v37 >> (51 - (v37 >> 52));
      if (v38 > 0x433)
        LODWORD(v39) = v37 << ((v37 >> 52) - 51);
      v40 = v38 >= 0x41F
          ? v39
          : (((1 << ((v37 >> 52) + 1)) - 1) & v39) + (1 << ((v37 >> 52) + 1));
      v41 = (v37 & 0x8000000000000000) == 0 ? v40 : -v40;
      v227 = v41;
    }
    else
    {
      v227 = 0;
    }
LABEL_66:
    if (*((_DWORD *)v34 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v34))
    {
      v35 = 0;
      goto LABEL_263;
    }
    v225 = v24;
    if ((unint64_t)(*((int *)v5 + 8) - 7) >= 0xFFFFFFFFFFFFFFFALL)
    {
      v234[0] = 10;
      v43 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_71:
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v234, this);
      v45 = v44;
      goto LABEL_72;
    }
    v42 = *((_QWORD *)v5 + 11);
    v234[0] = v42;
    v43 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v42 >= 0xFFFE000000000000)
    {
      v226 = v42;
      goto LABEL_83;
    }
    v45 = v42 - 0x2000000000000;
    if (v42 - 0x2000000000000 >= 0xFFFC000000000000)
      goto LABEL_71;
LABEL_72:
    v46 = (v45 >> 52) & 0x7FF;
    if ((v46 - 1023) <= 0x53)
    {
      v47 = v45 >> (51 - (v45 >> 52));
      if (v46 > 0x433)
        LODWORD(v47) = v45 << ((v45 >> 52) - 51);
      v48 = v46 >= 0x41F
          ? v47
          : (((1 << ((v45 >> 52) + 1)) - 1) & v47) + (1 << ((v45 >> 52) + 1));
      v49 = (v45 & 0x8000000000000000) == 0 ? v48 : -v48;
      v226 = v49;
    }
    else
    {
      v226 = 0;
    }
LABEL_83:
    if (*((_DWORD *)v43 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v43))
    {
      v35 = 0;
      goto LABEL_263;
    }
    v224 = v12;
    if ((unint64_t)(*((int *)v5 + 8) - 8) >= 0xFFFFFFFFFFFFFFF9)
    {
      v234[0] = 10;
      v51 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_88:
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v234, this);
      v54 = v53;
      goto LABEL_89;
    }
    v50 = *((_QWORD *)v5 + 12);
    v234[0] = v50;
    v51 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v50 >= 0xFFFE000000000000)
    {
      v52 = v50;
      goto LABEL_99;
    }
    v54 = v50 - 0x2000000000000;
    if (v50 - 0x2000000000000 >= 0xFFFC000000000000)
      goto LABEL_88;
LABEL_89:
    v55 = (v54 >> 52) & 0x7FF;
    if ((v55 - 1023) <= 0x53)
    {
      v56 = v54 >> (51 - (v54 >> 52));
      if (v55 > 0x433)
        LODWORD(v56) = v54 << ((v54 >> 52) - 51);
      v57 = v55 >= 0x41F
          ? v56
          : (((1 << ((v54 >> 52) + 1)) - 1) & v56) + (1 << ((v54 >> 52) + 1));
      v52 = (v54 & 0x8000000000000000) == 0 ? v57 : -v57;
    }
    else
    {
      v52 = 0;
    }
LABEL_99:
    if (*((_DWORD *)v51 + 20))
    {
      v144 = v52;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v51);
      v52 = v144;
      if (hasExceptionsAfterHandlingTraps)
      {
        v35 = 0;
        goto LABEL_263;
      }
    }
    if ((unint64_t)(*((int *)v5 + 8) - 9) >= 0xFFFFFFFFFFFFFFF8)
    {
      v61 = v52;
      v234[0] = 10;
      v59 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_104:
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v234, this);
      v63 = v62;
      goto LABEL_105;
    }
    v58 = *((_QWORD *)v5 + 13);
    v234[0] = v58;
    v59 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v58 >= 0xFFFE000000000000)
    {
      v60 = v58;
      goto LABEL_115;
    }
    v61 = v52;
    v63 = v58 - 0x2000000000000;
    if (v58 - 0x2000000000000 >= 0xFFFC000000000000)
      goto LABEL_104;
LABEL_105:
    v64 = (v63 >> 52) & 0x7FF;
    v52 = v61;
    if ((v64 - 1023) <= 0x53)
    {
      v65 = v63 >> (51 - (v63 >> 52));
      if (v64 > 0x433)
        LODWORD(v65) = v63 << ((v63 >> 52) - 51);
      v66 = v64 >= 0x41F
          ? v65
          : (((1 << ((v63 >> 52) + 1)) - 1) & v65) + (1 << ((v63 >> 52) + 1));
      v60 = (v63 & 0x8000000000000000) == 0 ? v66 : -v66;
    }
    else
    {
      v60 = 0;
    }
LABEL_115:
    if (*((_DWORD *)v59 + 20))
    {
      v146 = v52;
      v147 = v60;
      v148 = JSC::VM::hasExceptionsAfterHandlingTraps(v59);
      v60 = v147;
      v52 = v146;
      if (v148)
      {
        v35 = 0;
        goto LABEL_263;
      }
    }
    if ((unint64_t)(*((int *)v5 + 8) - 10) >= 0xFFFFFFFFFFFFFFF7)
    {
      v70 = v60;
      v71 = v52;
      v234[0] = 10;
      v68 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_120:
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v234, this);
      v73 = v72;
      goto LABEL_121;
    }
    v67 = *((_QWORD *)v5 + 14);
    v234[0] = v67;
    v68 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v67 >= 0xFFFE000000000000)
    {
      v69 = v67;
      goto LABEL_131;
    }
    v70 = v60;
    v71 = v52;
    v73 = v67 - 0x2000000000000;
    if (v67 - 0x2000000000000 >= 0xFFFC000000000000)
      goto LABEL_120;
LABEL_121:
    v74 = (v73 >> 52) & 0x7FF;
    v52 = v71;
    v60 = v70;
    if ((v74 - 1023) <= 0x53)
    {
      v75 = v73 >> (51 - (v73 >> 52));
      if (v74 > 0x433)
        LODWORD(v75) = v73 << ((v73 >> 52) - 51);
      v76 = v74 >= 0x41F
          ? v75
          : (((1 << ((v73 >> 52) + 1)) - 1) & v75) + (1 << ((v73 >> 52) + 1));
      v69 = (v73 & 0x8000000000000000) == 0 ? v76 : -v76;
    }
    else
    {
      v69 = 0;
    }
LABEL_131:
    if (*((_DWORD *)v68 + 20))
    {
      v149 = v68;
      v150 = v52;
      v151 = v60;
      v152 = v69;
      v153 = JSC::VM::hasExceptionsAfterHandlingTraps(v149);
      v69 = v152;
      v60 = v151;
      v52 = v150;
      if (v153)
      {
        v35 = 0;
        goto LABEL_263;
      }
    }
    v77 = *((int *)v5 + 8);
    if ((unint64_t)(v77 - 11) >= 0xFFFFFFFFFFFFFFF6)
    {
      v79 = (JSC::VM *)*((_QWORD *)this + 7);
      v78 = 10;
LABEL_143:
      v85 = v78 == 7;
      goto LABEL_144;
    }
    v78 = *((_QWORD *)v5 + 15);
    v79 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v78 >= 0xFFFE000000000000)
    {
      v172 = (_DWORD)v78 == 0;
      goto LABEL_373;
    }
    *(_QWORD *)&v80 = v78 - 0x2000000000000;
    if (v78 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v85 = v80 > 0.0 || v80 < 0.0;
    }
    else
    {
      if ((v78 & 0xFFFE000000000002) != 0)
        goto LABEL_143;
      v81 = *(unsigned __int8 *)(v78 + 5);
      if (v81 == 3)
      {
        v84 = *(_DWORD *)(v78 + 8);
LABEL_372:
        v172 = v84 == 0;
LABEL_373:
        v85 = !v172;
        goto LABEL_144;
      }
      if (v81 == 2)
      {
        v82 = *(_QWORD *)(v78 + 8);
        if ((v82 & 1) != 0)
          v83 = (int *)(v78 + 16);
        else
          v83 = (int *)(v82 + 4);
        v84 = *v83;
        goto LABEL_372;
      }
      v85 = (*(_BYTE *)(16 * (*(_DWORD *)v78 & 0xFFFFFFFE) + 0xA) & 1) == 0
         || *(_QWORD *)(16 * (*(_DWORD *)v78 & 0xFFFFFFFE) + 0x28) != (_QWORD)this;
    }
LABEL_144:
    if (*((_DWORD *)v79 + 20))
    {
      v208 = v85;
      v216 = v69;
      v154 = v60;
      v155 = v52;
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v79) & 1) != 0)
      {
        v35 = 0;
        goto LABEL_263;
      }
      v77 = *((int *)v5 + 8);
      v52 = v155;
      v60 = v154;
      v85 = v208;
      v69 = v216;
    }
    if ((unint64_t)(v77 - 12) >= 0xFFFFFFFFFFFFFFF5)
    {
      v87 = (JSC::VM *)*((_QWORD *)this + 7);
      v86 = 10;
LABEL_156:
      v92 = v86 == 7;
      goto LABEL_157;
    }
    v86 = *((_QWORD *)v5 + 16);
    v87 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v86 >= 0xFFFE000000000000)
    {
      v92 = (_DWORD)v86 != 0;
      goto LABEL_157;
    }
    *(_QWORD *)&v88 = v86 - 0x2000000000000;
    if (v86 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v92 = v88 > 0.0 || v88 < 0.0;
    }
    else
    {
      if ((v86 & 0xFFFE000000000002) != 0)
        goto LABEL_156;
      v89 = *(unsigned __int8 *)(v86 + 5);
      if (v89 == 3)
      {
        v173 = *(_DWORD *)(v86 + 8) == 0;
LABEL_388:
        v92 = !v173;
        goto LABEL_157;
      }
      if (v89 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v86 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v92 = 1;
          goto LABEL_157;
        }
        v173 = *(_QWORD *)(16 * (*(_DWORD *)v86 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
        goto LABEL_388;
      }
      v90 = *(_QWORD *)(v86 + 8);
      v91 = (_DWORD *)((v90 & 1) != 0 ? v86 + 16 : v90 + 4);
      v92 = *v91 != 0;
    }
LABEL_157:
    if (*((_DWORD *)v87 + 20))
    {
      v201 = v92;
      v209 = v85;
      v217 = v69;
      v156 = v60;
      v157 = v52;
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v87) & 1) != 0)
      {
        v35 = 0;
        goto LABEL_263;
      }
      v77 = *((int *)v5 + 8);
      v52 = v157;
      v60 = v156;
      v85 = v209;
      v69 = v217;
      v92 = v201;
    }
    if ((unint64_t)(v77 - 13) >= 0xFFFFFFFFFFFFFFF4)
    {
      v93 = (JSC::VM *)*((_QWORD *)this + 7);
      v11 = 10;
LABEL_169:
      v99 = v11 == 7;
      goto LABEL_170;
    }
    v11 = *((_QWORD *)v5 + 17);
    v93 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v11 >= 0xFFFE000000000000)
    {
      v99 = (_DWORD)v11 != 0;
      goto LABEL_170;
    }
    *(_QWORD *)&v94 = v11 - 0x2000000000000;
    if (v11 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v11 & 0xFFFE000000000002) != 0)
        goto LABEL_169;
      v95 = *(unsigned __int8 *)(v11 + 5);
      if (v95 == 3)
      {
        v98 = *(_DWORD *)(v11 + 8);
      }
      else
      {
        if (v95 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v99 = 1;
            goto LABEL_170;
          }
          v174 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
          goto LABEL_366;
        }
        v96 = *(_QWORD *)(v11 + 8);
        if ((v96 & 1) != 0)
          v97 = (int *)(v11 + 16);
        else
          v97 = (int *)(v96 + 4);
        v98 = *v97;
      }
      v174 = v98 == 0;
LABEL_366:
      v99 = !v174;
      goto LABEL_170;
    }
    v99 = v94 > 0.0 || v94 < 0.0;
LABEL_170:
    if (*((_DWORD *)v93 + 20))
    {
      v195 = v99;
      v202 = v92;
      v210 = v85;
      v218 = v69;
      v158 = v60;
      v159 = v52;
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v93) & 1) != 0)
      {
        v35 = 0;
        goto LABEL_263;
      }
      v77 = *((int *)v5 + 8);
      v52 = v159;
      v60 = v158;
      v85 = v210;
      v69 = v218;
      v99 = v195;
      v92 = v202;
    }
    if ((unint64_t)(v77 - 14) >= 0xFFFFFFFFFFFFFFF3)
    {
      v101 = (JSC::VM *)*((_QWORD *)this + 7);
      v100 = 10;
LABEL_182:
      v107 = v100 == 7;
      goto LABEL_183;
    }
    v100 = *((_QWORD *)v5 + 18);
    v101 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v100 >= 0xFFFE000000000000)
    {
      v107 = (_DWORD)v100 != 0;
      goto LABEL_183;
    }
    *(_QWORD *)&v102 = v100 - 0x2000000000000;
    if (v100 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v100 & 0xFFFE000000000002) != 0)
        goto LABEL_182;
      v103 = *(unsigned __int8 *)(v100 + 5);
      if (v103 == 3)
      {
        v106 = *(_DWORD *)(v100 + 8);
      }
      else
      {
        if (v103 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v100 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v107 = 1;
            goto LABEL_183;
          }
          v175 = *(_QWORD *)(16 * (*(_DWORD *)v100 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
          goto LABEL_380;
        }
        v104 = *(_QWORD *)(v100 + 8);
        if ((v104 & 1) != 0)
          v105 = (int *)(v100 + 16);
        else
          v105 = (int *)(v104 + 4);
        v106 = *v105;
      }
      v175 = v106 == 0;
LABEL_380:
      v107 = !v175;
      goto LABEL_183;
    }
    v107 = v102 > 0.0 || v102 < 0.0;
LABEL_183:
    if (*((_DWORD *)v101 + 20))
    {
      v190 = v107;
      v196 = v99;
      v203 = v92;
      v211 = v85;
      v219 = v69;
      v160 = v60;
      v161 = v52;
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v101) & 1) != 0)
      {
        v35 = 0;
        goto LABEL_263;
      }
      v77 = *((int *)v5 + 8);
      v52 = v161;
      v60 = v160;
      v85 = v211;
      v69 = v219;
      v99 = v196;
      v92 = v203;
      v107 = v190;
    }
    v108 = 1.0;
    if ((unint64_t)(v77 - 15) > 0xFFFFFFFFFFFFFFF1)
    {
      v111 = 0;
      v110 = 0;
      v17 = 0;
      v112 = 10;
    }
    else
    {
      v109 = *((_QWORD *)v5 + 19);
      if ((v109 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v110 = 0;
      }
      else
      {
        v234[0] = *((_QWORD *)this + 7);
        if ((v109 & 0xFFFE000000000002) != 0)
          goto LABEL_198;
        v113 = *(unsigned int *)(16 * (*(_DWORD *)v109 & 0xFFFFFFFE) + 0x4C);
        v114 = *(_DWORD *)(16 * (*(_DWORD *)v109 & 0xFFFFFFFE) + 0x4C) != 0;
        if ((_DWORD)v113)
        {
          v115 = 16 * v113;
          if ((char **)v115 != &WebCore::JSTouchList::s_info)
          {
            do
            {
              v115 = *(_QWORD *)(v115 + 16);
              v114 = v115 != 0;
            }
            while ((char **)v115 != &WebCore::JSTouchList::s_info && v115 != 0);
          }
        }
        if (!v114 || (v110 = *(_DWORD **)(v109 + 24)) == 0)
        {
LABEL_198:
          WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v234, 13, "touches", 8, "TouchEvent", 11, v52, "initTouchEvent", 15, "TouchList", 10);
          v35 = 0;
          goto LABEL_263;
        }
      }
      if ((unint64_t)(v77 - 16) > 0xFFFFFFFFFFFFFFF0)
      {
        v111 = 0;
        v17 = 0;
        v112 = 10;
      }
      else
      {
        v117 = *((_QWORD *)v5 + 20);
        if ((v117 & 0xFFFFFFFFFFFFFFF7) == 2)
        {
          v17 = 0;
        }
        else
        {
          v234[0] = *((_QWORD *)this + 7);
          if ((v117 & 0xFFFE000000000002) != 0)
            goto LABEL_214;
          v118 = *(unsigned int *)(16 * (*(_DWORD *)v117 & 0xFFFFFFFE) + 0x4C);
          v119 = *(_DWORD *)(16 * (*(_DWORD *)v117 & 0xFFFFFFFE) + 0x4C) != 0;
          v120 = (char **)(16 * v118);
          if ((_DWORD)v118)
            v121 = v120 == &WebCore::JSTouchList::s_info;
          else
            v121 = 1;
          if (!v121)
          {
            do
            {
              v120 = (char **)v120[2];
              v119 = v120 != 0;
            }
            while (v120 != &WebCore::JSTouchList::s_info && v120 != 0);
          }
          if (!v119 || (v17 = *(_QWORD *)(v117 + 24)) == 0)
          {
LABEL_214:
            WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v234, 14, "targetTouches", 14, "TouchEvent", 11, v52, "initTouchEvent", 15, "TouchList", 10);
            v35 = 0;
            goto LABEL_263;
          }
        }
        if ((unint64_t)(v77 - 17) > 0xFFFFFFFFFFFFFFEFLL)
        {
          v111 = 0;
          v112 = 10;
        }
        else
        {
          v112 = *((_QWORD *)v5 + 21);
          if ((v112 & 0xFFFFFFFFFFFFFFF7) == 2)
          {
            v111 = 0;
          }
          else
          {
            v234[0] = *((_QWORD *)this + 7);
            if ((v112 & 0xFFFE000000000002) != 0)
              goto LABEL_230;
            v123 = *(unsigned int *)(16 * (*(_DWORD *)v112 & 0xFFFFFFFE) + 0x4C);
            v124 = *(_DWORD *)(16 * (*(_DWORD *)v112 & 0xFFFFFFFE) + 0x4C) != 0;
            v125 = (char **)(16 * v123);
            if ((_DWORD)v123)
              v126 = v125 == &WebCore::JSTouchList::s_info;
            else
              v126 = 1;
            if (!v126)
            {
              do
              {
                v125 = (char **)v125[2];
                v124 = v125 != 0;
              }
              while (v125 != &WebCore::JSTouchList::s_info && v125 != 0);
            }
            if (!v124 || (v111 = *(_DWORD **)(v112 + 24)) == 0)
            {
LABEL_230:
              WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v234, 15, "changedTouches", 15, "TouchEvent", 11, v52, "initTouchEvent", 15, "TouchList", 10);
              v35 = 0;
              goto LABEL_263;
            }
          }
          if ((unint64_t)(v77 - 18) <= 0xFFFFFFFFFFFFFFEELL)
          {
            v128 = *((_QWORD *)v5 + 22);
            if (v128 != 10)
            {
              v129 = (JSC::JSGlobalObject *)*((_QWORD *)this + 7);
              v233 = v129;
              v234[0] = v128;
              if (v128 >= 0xFFFE000000000000)
              {
                v130 = (double)(int)v128;
              }
              else if (v128 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
              {
                v189 = v110;
                v194 = v112;
                v179 = v52;
                v185 = v60;
                v215 = v85;
                v223 = v69;
                v200 = v99;
                v207 = v92;
                v169 = v107;
                JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v234, this);
                v110 = v189;
                v112 = v194;
                v107 = v169;
                v99 = v200;
                v92 = v207;
                v85 = v215;
                v69 = v223;
                v60 = v185;
                v52 = v179;
              }
              else
              {
                *(_QWORD *)&v130 = v128 - 0x2000000000000;
              }
              if (*((_DWORD *)v129 + 20))
              {
                v164 = v129;
                v183 = v130;
                v177 = v52;
                v165 = v60;
                v213 = v85;
                v221 = v69;
                v198 = v99;
                v205 = v92;
                v187 = v110;
                v192 = v112;
                v166 = v107;
                v167 = JSC::VM::hasExceptionsAfterHandlingTraps(v164);
                v110 = v187;
                v112 = v192;
                v107 = v166;
                v99 = v198;
                v92 = v205;
                v85 = v213;
                v69 = v221;
                v60 = v165;
                v52 = v177;
                v130 = v183;
                if ((v167 & 1) != 0)
                  goto LABEL_319;
              }
              if ((*(_QWORD *)&v130 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                || v130 < -3.40282347e38
                || v130 > 3.40282347e38)
              {
                JSC::throwTypeError();
LABEL_319:
                v35 = 0;
                goto LABEL_263;
              }
              v108 = v130;
              v77 = *((int *)v5 + 8);
            }
          }
        }
      }
    }
    v131 = 0.0;
    v132 = (WTF::StringImpl *)v112;
    if ((unint64_t)(v77 - 19) > 0xFFFFFFFFFFFFFFEDLL)
    {
      v12 = 10;
    }
    else
    {
      v12 = *((_QWORD *)v5 + 23);
      if (v12 != 10)
      {
        v5 = (JSC::JSGlobalObject *)*((_QWORD *)this + 7);
        v233 = v5;
        v234[0] = v12;
        if (v12 >= 0xFFFE000000000000)
        {
          v133 = (double)(int)v12;
        }
        else if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          v181 = v108;
          v178 = v52;
          v184 = v60;
          v214 = v85;
          v222 = v69;
          v199 = v99;
          v206 = v92;
          v193 = v107;
          v188 = v110;
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v234, this);
          v110 = v188;
          v107 = v193;
          v99 = v199;
          v92 = v206;
          v85 = v214;
          v69 = v222;
          v60 = v184;
          v52 = v178;
          v133 = v168;
          v108 = v181;
        }
        else
        {
          *(_QWORD *)&v133 = v12 - 0x2000000000000;
        }
        if (*((_DWORD *)v5 + 20))
        {
          v162 = v5;
          v180 = v108;
          v176 = v133;
          v5 = (JSC::JSGlobalObject *)v52;
          v182 = v60;
          v212 = v85;
          v220 = v69;
          v197 = v99;
          v204 = v92;
          v191 = v107;
          v186 = v110;
          v163 = JSC::VM::hasExceptionsAfterHandlingTraps(v162);
          v110 = v186;
          v107 = v191;
          v99 = v197;
          v92 = v204;
          v85 = v212;
          v69 = v220;
          v60 = v182;
          v52 = (uint64_t)v5;
          v133 = v176;
          v108 = v180;
          if ((v163 & 1) != 0)
            goto LABEL_315;
        }
        if ((*(_QWORD *)&v133 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || v133 < -3.40282347e38
          || v133 > 3.40282347e38)
        {
          JSC::throwTypeError();
LABEL_315:
          v35 = 0;
          goto LABEL_263;
        }
        v131 = v133;
      }
    }
    if (!v232)
      break;
    v18 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_323:
    ;
  }
  v134 = v231;
  v231 = 0;
  v234[0] = v134;
  if (v229)
    ++*(_DWORD *)v229;
  v233 = v229;
  WebCore::TouchEvent::initTouchEvent(v224, (const WTF::AtomString *)v234, v225, v228, (_DWORD **)&v233, v227, v226, v52, v108, v131, v60, v69, v85, v92, v99, v107, v110, (_DWORD *)v17, v111);
  v135 = v233;
  v233 = 0;
  v136 = v132;
  if (v135)
  {
    if (*(_DWORD *)v135 == 1)
    {
      v140 = (uint64_t *)*((_QWORD *)v135 + 2);
      *((_QWORD *)v135 + 2) = 0;
      if (v140)
      {
        if (*v140)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v140, v132);
        WTF::fastFree((WTF *)v140, v136);
      }
      v141 = (unsigned int *)*((_QWORD *)v135 + 1);
      *((_QWORD *)v135 + 1) = 0;
      if (v141)
      {
        do
        {
          v142 = __ldaxr(v141);
          v143 = v142 - 1;
        }
        while (__stlxr(v143, v141));
        if (!v143)
        {
          atomic_store(1u, v141);
          WTF::fastFree((WTF *)v141, v136);
        }
      }
      WTF::fastFree(v135, v136);
      v136 = v132;
    }
    else
    {
      --*(_DWORD *)v135;
    }
  }
  v137 = (WTF::StringImpl *)v234[0];
  v234[0] = 0;
  if (v137)
  {
    if (*(_DWORD *)v137 == 2)
      WTF::StringImpl::destroy(v137, v136);
    else
      *(_DWORD *)v137 -= 2;
  }
  v35 = 10;
LABEL_263:
  v15 = v232;
LABEL_264:
  if (v15 != -1)
    ((void (*)(_QWORD *, uint64_t *))off_1E334BAD8[v15])(v234, &v231);
  return (_BYTE *)v35;
}

unint64_t WebCore::jsTouchListPrototypeFunction_item(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF *v12;
  JSValue v14;
  JSC::VM *v15;
  _DWORD v16[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v15 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "TouchList", "item");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSTouchList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSTouchList::s_info && v8 != 0);
  }
  if (!v7)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "TouchList", "item");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v16);
    if (v16[1])
    {
      return 0;
    }
    else if (*(_DWORD *)(v11 + 20) > v16[0] && (v12 = *(WTF **)(*(_QWORD *)(v11 + 8) + 8 * v16[0])) != 0)
    {
      return WebCore::toJS(*(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28), v12);
    }
    else
    {
      return 2;
    }
  }
}

unsigned int *WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 80 * v3;
    v5 = (WTF::StringImpl **)(*(_QWORD *)a1 + 64);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(v5 - 6);
      *(v5 - 6) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(v5 - 7);
      *(v5 - 7) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v5 += 10;
      v4 -= 80;
    }
    while (v4);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      v4 = v3[3];
      v3[3] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      v5 = v3[2];
      v3[2] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = v3[1];
      v3[1] = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 13;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayLineItem>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  JSValue v8;
  int i;
  unsigned int v10;
  JSC::JSCell *IndexQuickly;
  JSC::JSCell *v13;
  uint64_t v14;
  unint64_t v15;

  v6 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v10 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v10)
        break;
      IndexQuickly = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
      if (*(_DWORD *)(v6 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
        if ((result & 1) != 0)
          break;
      }
      result = WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::ApplePayLineItem>>::convert((uint64_t)a1, IndexQuickly, *a3);
      if (*(_QWORD *)(v6 + 16))
      {
        v14 = JSC::JSArrayIterator::create();
        v15 = i | 0xFFFE000000000000;
        if (i < 0)
          v15 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v14 + 16) = v15;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, v8);
    if (!*(_DWORD *)(v6 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v6 + 16) || result == 6)
          break;
        v13 = (JSC::JSCell *)JSC::iteratorValue();
        if (*(_DWORD *)(v6 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
          if ((result & 1) != 0)
            break;
        }
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::ApplePayLineItem>>::convert((uint64_t)a1, v13, *a3);
        if (*(_QWORD *)(v6 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

uint64_t WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::ApplePayLineItem>>::convert(uint64_t a1, JSC::JSCell *a2, uint64_t a3)
{
  uint64_t result;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  __int16 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  _BYTE v25[8];
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  __int16 v32;
  _BYTE v33[8];
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  __int16 v40;
  unsigned int v41;

  result = WebCore::convertDictionary<WebCore::ApplePayLineItem>(a2, a1, (uint64_t)v33);
  v6 = v41;
  if (!v41)
  {
    v25[0] = v33[0];
    v7 = v34;
    v8 = v35;
    v34 = 0;
    v35 = 0;
    v26 = v7;
    v27 = v8;
    v28 = v36;
    v29 = v37;
    v9 = v39;
    v39 = 0;
    v30 = v38;
    v31 = v9;
    v10 = v40;
    v32 = v40;
    v11 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v11 == *(_DWORD *)(a3 + 8))
    {
      v12 = WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v11 + 1, (unint64_t)v25);
      v13 = *(_QWORD *)a3 + 80 * *(unsigned int *)(a3 + 12);
      *(_BYTE *)v13 = *v12;
      v14 = *((_QWORD *)v12 + 1);
      *((_QWORD *)v12 + 1) = 0;
      *(_QWORD *)(v13 + 8) = v14;
      v15 = *((_QWORD *)v12 + 2);
      *((_QWORD *)v12 + 2) = 0;
      *(_QWORD *)(v13 + 16) = v15;
      v16 = *(_OWORD *)(v12 + 24);
      v17 = *(_OWORD *)(v12 + 40);
      *(_QWORD *)(v13 + 56) = *((_QWORD *)v12 + 7);
      *(_OWORD *)(v13 + 40) = v17;
      *(_OWORD *)(v13 + 24) = v16;
      v18 = *((_QWORD *)v12 + 8);
      *((_QWORD *)v12 + 8) = 0;
      *(_QWORD *)(v13 + 64) = v18;
      *(_WORD *)(v13 + 72) = *((_WORD *)v12 + 36);
      v19 = v31;
      ++*(_DWORD *)(a3 + 12);
      v31 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v5);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    else
    {
      v20 = *(_QWORD *)a3 + 80 * v11;
      *(_BYTE *)v20 = v33[0];
      v26 = 0;
      *(_QWORD *)(v20 + 8) = v7;
      v27 = 0;
      *(_QWORD *)(v20 + 16) = v8;
      v21 = v28;
      v22 = v30;
      *(_OWORD *)(v20 + 40) = v29;
      *(_OWORD *)(v20 + 24) = v21;
      *(_QWORD *)(v20 + 56) = v22;
      *(_QWORD *)(v20 + 64) = v9;
      *(_WORD *)(v20 + 72) = v10;
      ++*(_DWORD *)(a3 + 12);
      v31 = 0;
    }
    v23 = v27;
    v27 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v5);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v26;
    v26 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v5);
      else
        *(_DWORD *)v24 -= 2;
    }
    return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E334B070[v6])(v25, v33);
  }
  if (v41 != -1)
    return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E334B070[v6])(v25, v33);
  return result;
}

char *WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 80 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x3333334)
      {
        __break(0xC471u);
        JUMPOUT(0x19523919CLL);
      }
      v17 = (WTF::StringImpl *)((char *)v5 + 80 * *(unsigned int *)(a1 + 12));
      v18 = 80 * v16;
      v19 = WTF::fastMalloc((WTF *)(80 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF0) / 0x50;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::ApplePayLineItem>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v9 >= 0x3333334)
      {
        __break(0xC471u);
        JUMPOUT(0x1952391A4);
      }
      v10 = 80 * v9;
      v11 = WTF::fastMalloc((WTF *)(80 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF0) / 0x50;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::ApplePayLineItem>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::ApplePayLineItem>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *(_BYTE *)a3 = *(_BYTE *)v5;
      v6 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a3 + 8) = v6;
      v7 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v7;
      v8 = *(_OWORD *)((char *)v5 + 24);
      v9 = *(_OWORD *)((char *)v5 + 40);
      *(_QWORD *)(a3 + 56) = *((_QWORD *)v5 + 7);
      *(_OWORD *)(a3 + 40) = v9;
      *(_OWORD *)(a3 + 24) = v8;
      v10 = *((_QWORD *)v5 + 8);
      *((_QWORD *)v5 + 8) = 0;
      *(_QWORD *)(a3 + 64) = v10;
      *(_WORD *)(a3 + 72) = *((_WORD *)v5 + 36);
      v11 = (WTF::StringImpl *)*((_QWORD *)v5 + 8);
      *((_QWORD *)v5 + 8) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = (WTF::StringImpl *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      result = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 80);
      a3 += 80;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayPaymentTokenContext>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  JSValue v8;
  int i;
  unsigned int v10;
  JSC::JSCell *IndexQuickly;
  JSC::JSCell *v13;
  uint64_t v14;
  unint64_t v15;

  v6 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v10 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v10)
        break;
      IndexQuickly = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
      if (*(_DWORD *)(v6 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
        if ((result & 1) != 0)
          break;
      }
      result = WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::ApplePayPaymentTokenContext>>::convert((JSC::VM **)a1, IndexQuickly, *a3);
      if (*(_QWORD *)(v6 + 16))
      {
        v14 = JSC::JSArrayIterator::create();
        v15 = i | 0xFFFE000000000000;
        if (i < 0)
          v15 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v14 + 16) = v15;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, v8);
    if (!*(_DWORD *)(v6 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v6 + 16) || result == 6)
          break;
        v13 = (JSC::JSCell *)JSC::iteratorValue();
        if (*(_DWORD *)(v6 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
          if ((result & 1) != 0)
            break;
        }
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::ApplePayPaymentTokenContext>>::convert((JSC::VM **)a1, v13, *a3);
        if (*(_QWORD *)(v6 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

uint64_t WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::ApplePayPaymentTokenContext>>::convert(JSC::VM **a1, JSC::JSCell *a2, uint64_t a3)
{
  uint64_t result;
  WTF::StringImpl *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  _QWORD *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  __int128 v26;
  __int128 v27;
  WTF::StringImpl *v28;
  __int128 v29;
  __int128 v30;
  WTF::StringImpl *v31;
  unsigned int v32;

  result = WebCore::convertDictionary<WebCore::ApplePayPaymentTokenContext>(a2, a1, (uint64_t)&v29);
  v6 = v32;
  if (!v32)
  {
    v7 = v29;
    v26 = v29;
    v8 = v30;
    v29 = 0u;
    v30 = 0u;
    v27 = v8;
    v9 = v31;
    v31 = 0;
    v28 = v9;
    v10 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v10 == *(_DWORD *)(a3 + 8))
    {
      v11 = (uint64_t *)WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v10 + 1, (unint64_t)&v26);
      v12 = *(_DWORD *)(a3 + 12);
      v13 = (_QWORD *)(*(_QWORD *)a3 + 40 * v12);
      v14 = *v11;
      *v11 = 0;
      *v13 = v14;
      v15 = v11[1];
      v11[1] = 0;
      v13[1] = v15;
      v16 = v11[2];
      v11[2] = 0;
      v13[2] = v16;
      v17 = v11[3];
      v11[3] = 0;
      v13[3] = v17;
      v18 = v11[4];
      v11[4] = 0;
      v13[4] = v18;
      v19 = v28;
      *(_DWORD *)(a3 + 12) = v12 + 1;
      v28 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v5);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    else
    {
      v20 = *(_QWORD *)a3;
      *(_QWORD *)&v26 = 0;
      v21 = (_QWORD *)(v20 + 40 * v10);
      *v21 = v7;
      *((_QWORD *)&v26 + 1) = 0;
      v21[1] = *((_QWORD *)&v7 + 1);
      *(_QWORD *)&v27 = 0;
      v21[2] = v8;
      *((_QWORD *)&v27 + 1) = 0;
      v21[3] = *((_QWORD *)&v8 + 1);
      v21[4] = v9;
      *(_DWORD *)(a3 + 12) = v10 + 1;
      v28 = 0;
    }
    v22 = (WTF::StringImpl *)*((_QWORD *)&v27 + 1);
    *((_QWORD *)&v27 + 1) = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v5);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = (WTF::StringImpl *)v27;
    *(_QWORD *)&v27 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v5);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = (WTF::StringImpl *)*((_QWORD *)&v26 + 1);
    *((_QWORD *)&v26 + 1) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v5);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = (WTF::StringImpl *)v26;
    *(_QWORD *)&v26 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v5);
      else
        *(_DWORD *)v25 -= 2;
    }
    return (*(&off_1E334C240 + v6))((int)&v26, (WebCore::ApplePayPaymentTokenContext *)&v29);
  }
  if (v32 != -1)
    return (*(&off_1E334C240 + v6))((int)&v26, (WebCore::ApplePayPaymentTokenContext *)&v29);
  return result;
}

unint64_t WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  _QWORD *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0x6666667)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(_DWORD *)(result + 12);
    v5 = 40 * a2;
    v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v2 = v6;
    if (v4)
    {
      v8 = (_QWORD *)v6;
      v9 = v3;
      do
      {
        v10 = *(_QWORD *)v9;
        *(_QWORD *)v9 = 0;
        *v8 = v10;
        v11 = *((_QWORD *)v9 + 1);
        *((_QWORD *)v9 + 1) = 0;
        v8[1] = v11;
        v12 = *((_QWORD *)v9 + 2);
        *((_QWORD *)v9 + 2) = 0;
        v8[2] = v12;
        v13 = *((_QWORD *)v9 + 3);
        *((_QWORD *)v9 + 3) = 0;
        v8[3] = v13;
        v14 = *((_QWORD *)v9 + 4);
        *((_QWORD *)v9 + 4) = 0;
        v8[4] = v14;
        WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v9, v7);
        v9 = (WTF *)(v15 + 40);
        v8 += 5;
      }
      while (v9 != (WTF *)((char *)v3 + 40 * v4));
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27ApplePayPaymentTokenContextENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayPaymentTokenContext *this)
{
  WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(this, this);
}

uint64_t WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::ApplePayError>>>::convert@<X0>(JSC::JSGlobalObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  uint64_t v13;
  WTF **v14;

  v12 = 0;
  v13 = 0;
  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v14 = &v12;
  result = JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::ApplePayError>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(a1, a2, (uint64_t *)&v14);
  if (*((_DWORD *)v4 + 20) && (result = JSC::VM::hasExceptionsAfterHandlingTraps(v4), (result & 1) != 0))
  {
    v7 = HIDWORD(v13);
    v8 = v12;
    *(_DWORD *)(a3 + 16) = 1;
    if ((_DWORD)v7)
    {
      v9 = 8 * v7;
      do
      {
        v10 = *(_QWORD *)v8;
        *(_QWORD *)v8 = 0;
        if (v10)
        {
          if (*(_DWORD *)(v10 + 8) == 1)
          {
            v11 = *(WTF::StringImpl **)(v10 + 16);
            *(_QWORD *)(v10 + 16) = 0;
            if (v11)
            {
              if (*(_DWORD *)v11 == 2)
                WTF::StringImpl::destroy(v11, v6);
              else
                *(_DWORD *)v11 -= 2;
            }
            result = WTF::fastFree((WTF *)v10, v6);
          }
          else
          {
            --*(_DWORD *)(v10 + 8);
          }
        }
        v8 = (WTF *)((char *)v8 + 8);
        v9 -= 8;
      }
      while (v9);
      v8 = v12;
    }
    if (v8)
    {
      v12 = 0;
      LODWORD(v13) = 0;
      return WTF::fastFree(v8, v6);
    }
  }
  else
  {
    *(_QWORD *)a3 = v12;
    *(_QWORD *)(a3 + 8) = v13;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::ApplePayError>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  JSValue v8;
  int i;
  unsigned int v10;
  uint64_t IndexQuickly;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v6 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v10 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v10)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
      if (*(_DWORD *)(v6 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
        if ((result & 1) != 0)
          break;
      }
      v16 = v6;
      result = (uint64_t)WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::ApplePayError>>::convert((uint64_t)&v16, (uint64_t)a1, IndexQuickly, *a3);
      if (*(_QWORD *)(v6 + 16))
      {
        v14 = JSC::JSArrayIterator::create();
        v15 = i | 0xFFFE000000000000;
        if (i < 0)
          v15 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v14 + 16) = v15;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, v8);
    if (!*(_DWORD *)(v6 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v6 + 16) || result == 6)
          break;
        v13 = JSC::iteratorValue();
        if (*(_DWORD *)(v6 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
          if ((result & 1) != 0)
            break;
        }
        v16 = v6;
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::ApplePayError>>::convert((uint64_t)&v16, (uint64_t)a1, v13, *a3);
        if (*(_QWORD *)(v6 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

char *WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::ApplePayError>>::convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *result;
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  WTF *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  WTF *v17;
  WTF::StringImpl *v18;
  WTF *v19;

  result = (char *)a2;
  v19 = *(WTF **)(a2 + 56);
  if ((a3 & 0xFFFE000000000002) != 0)
    return (char *)JSC::throwTypeError();
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSApplePayError::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSApplePayError::s_info && v8 != 0);
  }
  if (!v7)
    return (char *)JSC::throwTypeError();
  v11 = *(WTF **)(a3 + 24);
  if (!v11)
    return (char *)JSC::throwTypeError();
  ++*((_DWORD *)v11 + 2);
  v19 = v11;
  v12 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v12 == *(_DWORD *)(a4 + 8))
  {
    result = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a4, v12 + 1, (unint64_t)&v19);
    v14 = *(unsigned int *)(a4 + 12);
    v15 = *(char **)a4;
    v16 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    *(_QWORD *)&v15[8 * v14] = v16;
    v17 = v19;
    *(_DWORD *)(a4 + 12) = v14 + 1;
    v19 = 0;
    if (v17)
    {
      if (*((_DWORD *)v17 + 2) == 1)
      {
        v18 = (WTF::StringImpl *)*((_QWORD *)v17 + 2);
        *((_QWORD *)v17 + 2) = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v13);
          else
            *(_DWORD *)v18 -= 2;
        }
        return (char *)WTF::fastFree(v17, v13);
      }
      else
      {
        --*((_DWORD *)v17 + 2);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v12) = v11;
    *(_DWORD *)(a4 + 12) = v12 + 1;
  }
  return result;
}

WTF::StringImpl *WebCore::Detail::SequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::ApplePayShippingMethod>>>::convert(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3)
{
  uint64_t v5;
  JSValue v7;
  int i;
  unsigned int v9;
  JSC::JSCell *IndexQuickly;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  uint64_t v13;
  JSC::JSCell *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  char hasExceptionsAfterHandlingTraps;
  unsigned int v20;
  WTF::StringImpl *v21;
  uint64_t v22;

  v5 = *((_QWORD *)a2 + 7);
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    result = v21;
    v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
    *(_DWORD *)(a1 + 16) = 1;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    if (JSC::getIterationMode() == 2)
    {
      for (i = 1; ; ++i)
      {
        v9 = (*(_BYTE *)(a3 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a3 + 8) - 8) : 0;
        if (i - 1 >= v9)
          break;
        IndexQuickly = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a3, i - 1, 0);
        if (!IndexQuickly)
          IndexQuickly = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)a3, a2, (i - 1));
        if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
          break;
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::ApplePayShippingMethod>>::convert((JSC::VM **)a2, IndexQuickly, (uint64_t)&v21);
        if (*(_QWORD *)(v5 + 16))
        {
          v16 = JSC::JSArrayIterator::create();
          v17 = i | 0xFFFE000000000000;
          if (i < 0)
            v17 = COERCE__INT64((double)i) + 0x2000000000000;
          *(_QWORD *)(v16 + 16) = v17;
          goto LABEL_34;
        }
      }
    }
    else
    {
      JSC::iteratorForIterable(a2, (JSC::JSGlobalObject *)a3, v7);
      if (!*(_DWORD *)(v5 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) == 0)
      {
        while (1)
        {
          v13 = JSC::iteratorStep();
          if (*(_QWORD *)(v5 + 16) || v13 == 6)
            break;
          v15 = (JSC::JSCell *)JSC::iteratorValue();
          if (*(_DWORD *)(v5 + 80))
          {
            if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
              break;
          }
          WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::ApplePayShippingMethod>>::convert((JSC::VM **)a2, v15, (uint64_t)&v21);
          if (*(_QWORD *)(v5 + 16))
          {
LABEL_34:
            JSC::iteratorClose();
            break;
          }
        }
      }
    }
    if (!*(_DWORD *)(v5 + 80))
    {
      result = v21;
LABEL_37:
      *(_QWORD *)a1 = result;
      *(_QWORD *)(a1 + 8) = v22;
      *(_DWORD *)(a1 + 16) = 0;
      return result;
    }
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5);
    result = v21;
    if ((hasExceptionsAfterHandlingTraps & 1) == 0)
      goto LABEL_37;
    v20 = HIDWORD(v22);
    *(_DWORD *)(a1 + 16) = 1;
    if (v20)
    {
      WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(result, (WTF::StringImpl *)((char *)result + 104 * v20));
      result = v21;
    }
    if (result)
    {
      v21 = 0;
      LODWORD(v22) = 0;
      return (WTF::StringImpl *)WTF::fastFree(result, v18);
    }
  }
  return result;
}

uint64_t WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::ApplePayShippingMethod>>::convert(JSC::VM **a1, JSC::JSCell *a2, uint64_t a3)
{
  uint64_t result;
  WTF::StringImpl *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[21];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[21];
  unsigned int v39;

  result = WebCore::convertDictionary<WebCore::ApplePayShippingMethod>(a2, a1, (uint64_t)&v33);
  v6 = v39;
  if (!v39)
  {
    v7 = v33;
    v27 = v33;
    v8 = v34;
    v33 = 0u;
    v34 = 0u;
    v28 = v8;
    v31 = v37;
    *(_OWORD *)v32 = *(_OWORD *)v38;
    *(_QWORD *)&v32[13] = *(_QWORD *)&v38[13];
    v30 = v36;
    v29 = v35;
    v9 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v9 == *(_DWORD *)(a3 + 8))
    {
      v10 = WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v9 + 1, (unint64_t)&v27);
      v11 = *(_QWORD *)a3 + 104 * *(unsigned int *)(a3 + 12);
      v12 = *(_QWORD *)v10;
      *(_QWORD *)v10 = 0;
      *(_QWORD *)v11 = v12;
      v13 = *((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = 0;
      *(_QWORD *)(v11 + 8) = v13;
      v14 = *((_QWORD *)v10 + 2);
      *((_QWORD *)v10 + 2) = 0;
      *(_QWORD *)(v11 + 16) = v14;
      v15 = *((_QWORD *)v10 + 3);
      *((_QWORD *)v10 + 3) = 0;
      *(_QWORD *)(v11 + 24) = v15;
      *(_OWORD *)(v11 + 32) = *((_OWORD *)v10 + 2);
      v16 = *((_OWORD *)v10 + 3);
      v17 = *((_OWORD *)v10 + 4);
      v18 = *((_OWORD *)v10 + 5);
      *(_QWORD *)(v11 + 93) = *(_QWORD *)(v10 + 93);
      *(_OWORD *)(v11 + 64) = v17;
      *(_OWORD *)(v11 + 80) = v18;
      *(_OWORD *)(v11 + 48) = v16;
      v19 = (WTF::StringImpl *)*((_QWORD *)&v28 + 1);
      ++*(_DWORD *)(a3 + 12);
      *((_QWORD *)&v28 + 1) = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v5);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    else
    {
      v20 = *(_QWORD *)a3 + 104 * v9;
      *(_QWORD *)&v27 = 0;
      *(_QWORD *)v20 = v7;
      *((_QWORD *)&v27 + 1) = 0;
      *(_QWORD *)(v20 + 8) = *((_QWORD *)&v7 + 1);
      *(_QWORD *)&v28 = 0;
      *(_OWORD *)(v20 + 16) = v8;
      v22 = v31;
      v21 = *(_OWORD *)v32;
      v23 = v30;
      *(_QWORD *)(v20 + 93) = *(_QWORD *)&v32[13];
      *(_OWORD *)(v20 + 64) = v22;
      *(_OWORD *)(v20 + 80) = v21;
      *(_OWORD *)(v20 + 48) = v23;
      *(_OWORD *)(v20 + 32) = v29;
      ++*(_DWORD *)(a3 + 12);
      *((_QWORD *)&v28 + 1) = 0;
    }
    v24 = (WTF::StringImpl *)v28;
    *(_QWORD *)&v28 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v5);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = (WTF::StringImpl *)*((_QWORD *)&v27 + 1);
    *((_QWORD *)&v27 + 1) = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v5);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = (WTF::StringImpl *)v27;
    *(_QWORD *)&v27 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v5);
      else
        *(_DWORD *)v26 -= 2;
    }
    return ((uint64_t (*)(__int128 *, __int128 *))off_1E334C250[v6])(&v27, &v33);
  }
  if (v39 != -1)
    return ((uint64_t (*)(__int128 *, __int128 *))off_1E334C250[v6])(&v27, &v33);
  return result;
}

char *WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 104 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x2762763)
      {
        __break(0xC471u);
        JUMPOUT(0x19523A2CCLL);
      }
      v17 = (WTF::StringImpl *)((char *)v5 + 104 * *(unsigned int *)(a1 + 12));
      v18 = 104 * v16;
      v19 = WTF::fastMalloc((WTF *)(104 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x68;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::ApplePayShippingMethod>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v9 >= 0x2762763)
      {
        __break(0xC471u);
        JUMPOUT(0x19523A2D4);
      }
      v10 = 104 * v9;
      v11 = WTF::fastMalloc((WTF *)(104 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x68;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::ApplePayShippingMethod>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::ApplePayShippingMethod>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      v7 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a3 + 8) = v7;
      v8 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v8;
      v9 = *((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      *(_QWORD *)(a3 + 24) = v9;
      *(_OWORD *)(a3 + 32) = *((_OWORD *)v5 + 2);
      v10 = *((_OWORD *)v5 + 3);
      v11 = *((_OWORD *)v5 + 4);
      v12 = *((_OWORD *)v5 + 5);
      *(_QWORD *)(a3 + 93) = *(_QWORD *)((char *)v5 + 93);
      *(_OWORD *)(a3 + 64) = v11;
      *(_OWORD *)(a3 + 80) = v12;
      *(_OWORD *)(a3 + 48) = v10;
      v13 = (WTF::StringImpl *)*((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = (WTF::StringImpl *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, a2);
        else
          *(_DWORD *)v15 -= 2;
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 104);
      a3 += 104;
    }
    while (v5 != a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22ApplePayShippingMethodENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::ApplePayContactField>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  JSValue v8;
  int i;
  unsigned int v10;
  unint64_t IndexQuickly;
  uint64_t v12;
  JSC::VM *v13;
  unsigned __int16 v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  JSC::VM *v19;
  unsigned __int16 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  JSC::VM *v25;

  v6 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v10 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v10)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
      if (*(_DWORD *)(v6 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
        if ((result & 1) != 0)
          break;
      }
      v12 = *a3;
      v25 = (JSC::VM *)*((_QWORD *)a1 + 7);
      v13 = v25;
      result = WebCore::parseEnumeration<WebCore::ApplePayContactField>(a1, IndexQuickly);
      v14 = result;
      if (!*((_DWORD *)v13 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v13), (result & 1) == 0))
      {
        if (v14 <= 0xFFu)
        {
          result = JSC::throwTypeError();
        }
        else
        {
          LOBYTE(v25) = v14;
          v15 = *(unsigned int *)(v12 + 12);
          if ((_DWORD)v15 == *(_DWORD *)(v12 + 8))
          {
            result = (uint64_t)WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v12, (WTF *)(v15 + 1), (unint64_t)&v25);
            v15 = *(unsigned int *)(v12 + 12);
            *(_BYTE *)(*(_QWORD *)v12 + v15) = *(_BYTE *)result;
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)v12 + v15) = v14;
          }
          *(_DWORD *)(v12 + 12) = v15 + 1;
        }
      }
      if (*(_QWORD *)(v6 + 16))
      {
        v23 = JSC::JSArrayIterator::create();
        v24 = i | 0xFFFE000000000000;
        if (i < 0)
          v24 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v23 + 16) = v24;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, v8);
    if (!*(_DWORD *)(v6 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v6 + 16) || result == 6)
          break;
        v17 = JSC::iteratorValue();
        if (*(_DWORD *)(v6 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
          if ((result & 1) != 0)
            break;
        }
        v18 = *a3;
        v25 = (JSC::VM *)*((_QWORD *)a1 + 7);
        v19 = v25;
        v20 = WebCore::parseEnumeration<WebCore::ApplePayContactField>(a1, v17);
        if (!*((_DWORD *)v19 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) == 0)
        {
          if (v20 <= 0xFFu)
          {
            JSC::throwTypeError();
          }
          else
          {
            LOBYTE(v25) = v20;
            v21 = *(unsigned int *)(v18 + 12);
            if ((_DWORD)v21 == *(_DWORD *)(v18 + 8))
            {
              v22 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v18, (WTF *)(v21 + 1), (unint64_t)&v25);
              v21 = *(unsigned int *)(v18 + 12);
              *(_BYTE *)(*(_QWORD *)v18 + v21) = *v22;
            }
            else
            {
              *(_BYTE *)(*(_QWORD *)v18 + v21) = v20;
            }
            *(_DWORD *)(v18 + 12) = v21 + 1;
          }
        }
        if (*(_QWORD *)(v6 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

uint64_t WebCore::JSApplePayError::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::ApplePayInstallmentItem>>::convert(uint64_t result, JSC::JSCell *this, uint64_t a3)
{
  JSC::VM *v4;
  char v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  JSC::JSGlobalObject *v11;
  uint64_t Object;
  JSC::Structure *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  JSC::VM *v16;
  _DWORD *v17;
  int v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  JSC::VM *v23;
  WTF::StringImpl *v24;
  int v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  JSC::VM *v30;
  WTF::StringImpl *v31;
  int v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  JSC::VM *v37;
  WTF::StringImpl *v38;
  int v39;
  int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  JSC::VM *v44;
  WTF::StringImpl *v45;
  int v46;
  int v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  JSC::VM *v50;
  const char *v51;
  int v52;
  unint64_t v53;
  int v54;
  char **v55;
  BOOL v56;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v58;
  char v59;
  WTF::StringImpl *v60;
  int v61;
  uint64_t v62;
  char v63;
  WTF::StringImpl *v64;
  char v65;
  WTF::StringImpl *v66;
  BOOL v67;
  char v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v90;
  __int128 v91;
  __int128 v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  __int128 v95;
  __int128 v96;
  WTF::StringImpl *v97;
  unsigned int v98;
  JSC::VM *v99;
  WTF::StringImpl *v100;
  _QWORD v101[2];

  v4 = *(JSC::VM **)(result + 56);
  v99 = v4;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
LABEL_3:
    LOBYTE(v94) = v5;
    *(_QWORD *)&v95 = v10;
    *((_QWORD *)&v95 + 1) = v8;
    *(_QWORD *)&v96 = v7;
    *((_QWORD *)&v96 + 1) = v9;
    v97 = v6;
    v98 = 0;
    goto LABEL_257;
  }
  v11 = (JSC::JSGlobalObject *)result;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
LABEL_149:
    v98 = 1;
    goto LABEL_257;
  }
  v13 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v15 = JSC::JSObject::get(v13, v11, (unint64_t)v94);
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
      WTF::StringImpl::destroy(v94, v14);
    else
      *(_DWORD *)v94 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_149;
  }
  if (v15 == 10)
  {
    v10 = 0;
    goto LABEL_22;
  }
  v94 = (WTF::StringImpl *)v15;
  v16 = (JSC::VM *)*((_QWORD *)v11 + 7);
  if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 2)
  {
    v17 = *(_DWORD **)(v15 + 8);
    if ((v17 & 1) != 0)
    {
      v17 = *(_DWORD **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v15, v11);
      if (!v17)
        goto LABEL_17;
    }
    else if (!v17)
    {
LABEL_17:
      v101[0] = v17;
      goto LABEL_18;
    }
    *v17 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v94, v11);
LABEL_18:
  if (!*((_DWORD *)v16 + 20))
  {
    v10 = (WTF::StringImpl *)v101[0];
LABEL_20:
    LODWORD(v91) = 0;
    v18 = 0;
    v90 = 0;
    v19 = 1;
    goto LABEL_21;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v16);
  v10 = (WTF::StringImpl *)v101[0];
  if ((hasExceptionsAfterHandlingTraps & 1) == 0)
    goto LABEL_20;
  v18 = 1;
  LODWORD(v91) = 1;
  v101[0] = 0;
  if (!v10)
    goto LABEL_167;
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
LABEL_167:
    v10 = 0;
    v19 = 0;
    v98 = 1;
    goto LABEL_21;
  }
  WTF::StringImpl::destroy(v10, v58);
  v18 = v91;
  v98 = 1;
  v10 = 0;
  v19 = 0;
LABEL_21:
  result = ((uint64_t (*)(_QWORD *, WTF::StringImpl **))off_1E334B060[v18])(v101, &v90);
  if (!v19)
    goto LABEL_254;
LABEL_22:
  WTF::AtomStringImpl::addLiteral();
  v20 = v90;
  v22 = JSC::JSObject::get(v13, v11, (unint64_t)v90);
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v21);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
    {
      v98 = 1;
      if (!v10)
        goto LABEL_257;
      goto LABEL_255;
    }
  }
  if (v22 == 10)
  {
    v9 = 0;
    goto LABEL_39;
  }
  v101[0] = v22;
  v23 = (JSC::VM *)*((_QWORD *)v11 + 7);
  if ((v22 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v22 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v101, v11);
    goto LABEL_34;
  }
  v24 = *(WTF::StringImpl **)(v22 + 8);
  if ((v24 & 1) != 0)
  {
    v24 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v22, v11);
    if (!v24)
      goto LABEL_33;
    goto LABEL_32;
  }
  if (v24)
LABEL_32:
    *(_DWORD *)v24 += 2;
LABEL_33:
  v100 = v24;
LABEL_34:
  if (!*((_DWORD *)v23 + 20))
  {
    v9 = v100;
LABEL_36:
    LODWORD(v91) = 0;
LABEL_37:
    v25 = 0;
    v90 = 0;
    v26 = 1;
    goto LABEL_38;
  }
  v59 = JSC::VM::hasExceptionsAfterHandlingTraps(v23);
  v9 = v100;
  if ((v59 & 1) == 0)
    goto LABEL_36;
  v25 = 1;
  LODWORD(v91) = 1;
  v100 = 0;
  if (!v9)
    goto LABEL_174;
  if (*(_DWORD *)v9 != 2)
  {
    *(_DWORD *)v9 -= 2;
LABEL_174:
    v9 = 0;
    v26 = 0;
    v98 = 1;
    goto LABEL_38;
  }
  result = WTF::StringImpl::destroy(v9, v60);
  v25 = v91;
  if (!(_DWORD)v91)
  {
    v9 = v90;
    goto LABEL_37;
  }
  v98 = 1;
  if ((_DWORD)v91 != -1)
  {
    v9 = 0;
    v26 = 0;
LABEL_38:
    result = ((uint64_t (*)(_QWORD *, WTF::StringImpl **))off_1E334B060[v25])(v101, &v90);
    if (!v26)
      goto LABEL_243;
LABEL_39:
    WTF::AtomStringImpl::addLiteral();
    v27 = v90;
    v29 = JSC::JSObject::get(v13, v11, (unint64_t)v90);
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v28);
      else
        *(_DWORD *)v27 -= 2;
    }
    if (*((_DWORD *)v4 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
      if ((_DWORD)result)
      {
        v8 = 0;
LABEL_169:
        v7 = 0;
LABEL_177:
        v98 = 1;
        goto LABEL_245;
      }
    }
    if (v29 == 10)
    {
      v8 = 0;
      goto LABEL_56;
    }
    v101[0] = v29;
    v30 = (JSC::VM *)*((_QWORD *)v11 + 7);
    if ((v29 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v29 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v101, v11);
      goto LABEL_51;
    }
    v31 = *(WTF::StringImpl **)(v29 + 8);
    if ((v31 & 1) != 0)
    {
      v31 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v29, v11);
      if (!v31)
        goto LABEL_50;
    }
    else if (!v31)
    {
LABEL_50:
      v100 = v31;
LABEL_51:
      if (!*((_DWORD *)v30 + 20))
      {
        v8 = v100;
LABEL_53:
        LODWORD(v91) = 0;
LABEL_54:
        v32 = 0;
        v90 = 0;
        v33 = 1;
        goto LABEL_55;
      }
      v63 = JSC::VM::hasExceptionsAfterHandlingTraps(v30);
      v8 = v100;
      if ((v63 & 1) == 0)
        goto LABEL_53;
      v32 = 1;
      LODWORD(v91) = 1;
      v100 = 0;
      if (!v8)
        goto LABEL_192;
      if (*(_DWORD *)v8 != 2)
      {
        *(_DWORD *)v8 -= 2;
LABEL_192:
        v8 = 0;
        v33 = 0;
        v98 = 1;
        goto LABEL_55;
      }
      result = WTF::StringImpl::destroy(v8, v64);
      v32 = v91;
      if (!(_DWORD)v91)
      {
        v8 = v90;
        goto LABEL_54;
      }
      v98 = 1;
      if ((_DWORD)v91 != -1)
      {
        v8 = 0;
        v33 = 0;
LABEL_55:
        result = ((uint64_t (*)(_QWORD *, WTF::StringImpl **))off_1E334B060[v32])(v101, &v90);
        if (!v33)
          goto LABEL_244;
LABEL_56:
        WTF::AtomStringImpl::addLiteral();
        v34 = v90;
        v36 = JSC::JSObject::get(v13, v11, (unint64_t)v90);
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v35);
          else
            *(_DWORD *)v34 -= 2;
        }
        if (*((_DWORD *)v4 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
          if ((_DWORD)result)
            goto LABEL_169;
        }
        if (v36 == 10)
        {
          v7 = 0;
          goto LABEL_73;
        }
        v101[0] = v36;
        v37 = (JSC::VM *)*((_QWORD *)v11 + 7);
        if ((v36 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v36 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v101, v11);
          goto LABEL_68;
        }
        v38 = *(WTF::StringImpl **)(v36 + 8);
        if ((v38 & 1) != 0)
        {
          v38 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v36, v11);
          if (!v38)
            goto LABEL_67;
        }
        else if (!v38)
        {
LABEL_67:
          v100 = v38;
LABEL_68:
          if (!*((_DWORD *)v37 + 20))
          {
            v7 = v100;
LABEL_70:
            LODWORD(v91) = 0;
LABEL_71:
            v39 = 0;
            v90 = 0;
            v40 = 1;
            goto LABEL_72;
          }
          v65 = JSC::VM::hasExceptionsAfterHandlingTraps(v37);
          v7 = v100;
          if ((v65 & 1) == 0)
            goto LABEL_70;
          v39 = 1;
          LODWORD(v91) = 1;
          v100 = 0;
          if (!v7)
            goto LABEL_199;
          if (*(_DWORD *)v7 != 2)
          {
            *(_DWORD *)v7 -= 2;
LABEL_199:
            v7 = 0;
            v40 = 0;
            v98 = 1;
            goto LABEL_72;
          }
          result = WTF::StringImpl::destroy(v7, v66);
          v39 = v91;
          if (!(_DWORD)v91)
          {
            v7 = v90;
            goto LABEL_71;
          }
          v98 = 1;
          if ((_DWORD)v91 != -1)
          {
            v7 = 0;
            v40 = 0;
LABEL_72:
            result = ((uint64_t (*)(_QWORD *, WTF::StringImpl **))off_1E334B060[v39])(v101, &v90);
            if (!v40)
              goto LABEL_245;
LABEL_73:
            WTF::AtomStringImpl::addLiteral();
            v41 = v90;
            v43 = JSC::JSObject::get(v13, v11, (unint64_t)v90);
            if (v41)
            {
              if (*(_DWORD *)v41 == 2)
                WTF::StringImpl::destroy(v41, v42);
              else
                *(_DWORD *)v41 -= 2;
            }
            if (*((_DWORD *)v4 + 20))
            {
              result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
              if ((_DWORD)result)
                goto LABEL_177;
            }
            if (v43 == 10)
            {
              v6 = 0;
              goto LABEL_90;
            }
            v101[0] = v43;
            v44 = (JSC::VM *)*((_QWORD *)v11 + 7);
            if ((v43 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v43 + 5) != 2)
            {
              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v101, v11);
LABEL_85:
              if (!*((_DWORD *)v44 + 20))
              {
                v6 = v100;
LABEL_87:
                LODWORD(v91) = 0;
LABEL_88:
                v46 = 0;
                v90 = 0;
                v47 = 1;
                goto LABEL_89;
              }
              v68 = JSC::VM::hasExceptionsAfterHandlingTraps(v44);
              v6 = v100;
              if ((v68 & 1) == 0)
                goto LABEL_87;
              v46 = 1;
              LODWORD(v91) = 1;
              v100 = 0;
              if (v6)
              {
                if (*(_DWORD *)v6 == 2)
                {
                  result = WTF::StringImpl::destroy(v6, v69);
                  v46 = v91;
                  if (!(_DWORD)v91)
                  {
                    v6 = v90;
                    goto LABEL_88;
                  }
                  v98 = 1;
                  if ((_DWORD)v91 == -1)
                    goto LABEL_245;
                  v6 = 0;
                  v47 = 0;
LABEL_89:
                  result = ((uint64_t (*)(_QWORD *, WTF::StringImpl **))off_1E334B060[v46])(v101, &v90);
                  if (!v47)
                    goto LABEL_226;
LABEL_90:
                  WTF::AtomStringImpl::addLiteral();
                  v48 = v90;
                  result = JSC::JSObject::get(v13, v11, (unint64_t)v90);
                  v49 = result;
                  if (v48)
                  {
                    if (*(_DWORD *)v48 == 2)
                      result = WTF::StringImpl::destroy(v48, this);
                    else
                      *(_DWORD *)v48 -= 2;
                  }
                  if (*((_DWORD *)v4 + 20))
                  {
                    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
                    if ((result & 1) != 0)
                    {
LABEL_225:
                      v98 = 1;
LABEL_226:
                      if (v6)
                      {
                        if (*(_DWORD *)v6 == 2)
                          result = WTF::StringImpl::destroy(v6, this);
                        else
                          *(_DWORD *)v6 -= 2;
                      }
LABEL_245:
                      if (v9)
                      {
                        if (*(_DWORD *)v9 == 2)
                        {
                          result = WTF::StringImpl::destroy(v9, this);
                          if (!v7)
                            goto LABEL_251;
                          goto LABEL_249;
                        }
                        *(_DWORD *)v9 -= 2;
                      }
                      if (!v7)
                        goto LABEL_251;
LABEL_249:
                      if (*(_DWORD *)v7 == 2)
                        result = WTF::StringImpl::destroy(v7, this);
                      else
                        *(_DWORD *)v7 -= 2;
LABEL_251:
                      if (v8)
                      {
                        if (*(_DWORD *)v8 == 2)
                        {
                          result = WTF::StringImpl::destroy(v8, this);
                          if (!v10)
                            goto LABEL_257;
                          goto LABEL_255;
                        }
                        *(_DWORD *)v8 -= 2;
                      }
                      goto LABEL_254;
                    }
                  }
                  if (v49 == 10)
                  {
                    v5 = 0;
                    goto LABEL_3;
                  }
                  v50 = (JSC::VM *)*((_QWORD *)v11 + 7);
                  v100 = v50;
                  v90 = (WTF::StringImpl *)v49;
                  if ((v49 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v49 + 5) != 2)
                  {
                    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v90, v11);
                    result = v101[0];
                    if (v101[0])
                      goto LABEL_102;
                    goto LABEL_151;
                  }
                  result = *(_QWORD *)(v49 + 8);
                  if ((result & 1) != 0)
                  {
                    result = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v49, v11);
                    if (!result)
                    {
LABEL_101:
                      v101[0] = result;
                      if (result)
                      {
LABEL_102:
                        v51 = *(const char **)(result + 8);
                        v52 = *(_DWORD *)(result + 4);
                        v53 = ((unint64_t)*(unsigned int *)(result + 16) >> 2) & 1;
                        if (v51 != "generic" && v52 == 7)
                        {
                          if ((_DWORD)v53)
                          {
                            if (*v51 != 103 || *(_DWORD *)(v51 + 1) != 1919250021 || *(_DWORD *)(v51 + 3) != 1667854949)
                              goto LABEL_108;
                            goto LABEL_118;
                          }
                          if (*(_WORD *)v51 != 103)
                          {
LABEL_108:
                            v5 = 0;
                            v54 = 0;
                            goto LABEL_120;
                          }
                          v5 = 0;
                          if (*(_QWORD *)(v51 + 2) != 0x720065006E0065)
                          {
                            v54 = 0;
                            goto LABEL_120;
                          }
                          v54 = 0;
                          if (*(_QWORD *)(v51 + 6) != 0x63006900720065)
                          {
LABEL_120:
                            v101[0] = 0;
                            if (*(_DWORD *)result == 2)
                              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, this);
                            else
                              *(_DWORD *)result -= 2;
LABEL_122:
                            if (!*((_DWORD *)v50 + 20)
                              || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v50), (result & 1) == 0))
                            {
                              if (v54)
                                goto LABEL_3;
                              result = JSC::throwTypeError();
                            }
                            goto LABEL_225;
                          }
LABEL_118:
                          v55 = &WebCore::parseEnumerationFromString<WebCore::ApplePayInstallmentItemType>(WTF::String const&)::mappings;
LABEL_119:
                          v5 = *((_BYTE *)v55 + 16);
                          v54 = 1;
                          goto LABEL_120;
                        }
                        if (v51 == "generic" && v52 == 7)
                          goto LABEL_118;
                        v56 = v52 != 3;
                        if (v51 == "mac" || v52 != 3)
                        {
                          if (v51 == "mac")
                          {
                            v61 = *(_DWORD *)(result + 4);
                            if (v52 == 3)
                            {
LABEL_140:
                              v55 = &off_1E3348F48;
                              goto LABEL_119;
                            }
                          }
                          else
                          {
                            v61 = *(_DWORD *)(result + 4);
                          }
                        }
                        else
                        {
                          if ((_DWORD)v53)
                          {
                            if (*v51 == 109 && *(_WORD *)(v51 + 1) == 25441)
                              goto LABEL_140;
                          }
                          else if (*(_WORD *)v51 == 109 && *(_DWORD *)(v51 + 2) == 6488161)
                          {
                            goto LABEL_140;
                          }
                          v56 = 0;
                          v61 = 3;
                        }
                        v62 = v53 << 32;
                        if (v51 == "pad" || v56)
                        {
                          if (v51 == "pad" && v52 == 3)
                            goto LABEL_187;
                        }
                        else
                        {
                          if (!v61)
                          {
LABEL_187:
                            v55 = &off_1E3348F60;
                            goto LABEL_119;
                          }
                          if ((_DWORD)v53)
                          {
                            if (*v51 == 112 && *(_WORD *)(v51 + 1) == 25697)
                              goto LABEL_187;
                          }
                          else
                          {
                            if (*(_WORD *)v51 == 112 && *(_DWORD *)(v51 + 2) == 6553697)
                              goto LABEL_187;
                            v62 = 0;
                          }
                        }
                        v67 = v61 != 5;
                        if (v51 == "phone" || v61 != 5)
                        {
                          if (v51 == "phone" && v61 == 5)
                            goto LABEL_209;
                        }
                        else if (v62)
                        {
                          if (*v51 == 112 && *(_WORD *)(v51 + 1) == 28520 && *(_WORD *)(v51 + 3) == 25966)
                          {
LABEL_209:
                            v55 = &off_1E3348F78;
                            goto LABEL_119;
                          }
                          v62 = 1;
                        }
                        else
                        {
                          if (*(_WORD *)v51 == 112 && *(_QWORD *)(v51 + 2) == 0x65006E006F0068)
                            goto LABEL_209;
                          v62 = 0;
                        }
                        if (v51 == "watch")
                          v67 = 1;
                        if (v67)
                        {
                          if (v61 != 5 || v51 != "watch")
                            goto LABEL_108;
                        }
                        else if (v62)
                        {
                          if (*v51 != 119 || *(_WORD *)(v51 + 1) != 29793 || *(_WORD *)(v51 + 3) != 26723)
                            goto LABEL_108;
                        }
                        else if (*(_WORD *)v51 != 119 || *(_QWORD *)(v51 + 2) != 0x68006300740061)
                        {
                          goto LABEL_108;
                        }
                        v55 = &off_1E3348F90;
                        goto LABEL_119;
                      }
LABEL_151:
                      v5 = 0;
                      v54 = 0;
                      goto LABEL_122;
                    }
                  }
                  else if (!result)
                  {
                    goto LABEL_101;
                  }
                  *(_DWORD *)result += 2;
                  goto LABEL_101;
                }
                *(_DWORD *)v6 -= 2;
              }
              v6 = 0;
              v47 = 0;
              v98 = 1;
              goto LABEL_89;
            }
            v45 = *(WTF::StringImpl **)(v43 + 8);
            if ((v45 & 1) != 0)
            {
              v45 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v43, v11);
              if (!v45)
                goto LABEL_84;
            }
            else if (!v45)
            {
LABEL_84:
              v100 = v45;
              goto LABEL_85;
            }
            *(_DWORD *)v45 += 2;
            goto LABEL_84;
          }
LABEL_244:
          v7 = 0;
          goto LABEL_245;
        }
        *(_DWORD *)v38 += 2;
        goto LABEL_67;
      }
LABEL_243:
      v8 = 0;
      goto LABEL_244;
    }
    *(_DWORD *)v31 += 2;
    goto LABEL_50;
  }
LABEL_254:
  if (!v10)
    goto LABEL_257;
LABEL_255:
  if (*(_DWORD *)v10 == 2)
    result = WTF::StringImpl::destroy(v10, this);
  else
    *(_DWORD *)v10 -= 2;
LABEL_257:
  v70 = v98;
  if (!v98)
  {
    LOBYTE(v90) = (_BYTE)v94;
    v71 = v95;
    v91 = v95;
    v72 = v96;
    v95 = 0u;
    v96 = 0u;
    v92 = v72;
    v73 = v97;
    v97 = 0;
    v93 = v73;
    v74 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v74 == *(_DWORD *)(a3 + 8))
    {
      v75 = WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v74 + 1, (unint64_t)&v90);
      v76 = *(_DWORD *)(a3 + 12);
      v77 = *(_QWORD *)a3 + 48 * v76;
      *(_BYTE *)v77 = *(_BYTE *)v75;
      v78 = *(_QWORD *)(v75 + 8);
      *(_QWORD *)(v75 + 8) = 0;
      *(_QWORD *)(v77 + 8) = v78;
      v79 = *(_QWORD *)(v75 + 16);
      *(_QWORD *)(v75 + 16) = 0;
      *(_QWORD *)(v77 + 16) = v79;
      v80 = *(_QWORD *)(v75 + 24);
      *(_QWORD *)(v75 + 24) = 0;
      *(_QWORD *)(v77 + 24) = v80;
      v81 = *(_QWORD *)(v75 + 32);
      *(_QWORD *)(v75 + 32) = 0;
      *(_QWORD *)(v77 + 32) = v81;
      v82 = *(_QWORD *)(v75 + 40);
      *(_QWORD *)(v75 + 40) = 0;
      *(_QWORD *)(v77 + 40) = v82;
      v83 = v93;
      *(_DWORD *)(a3 + 12) = v76 + 1;
      v93 = 0;
      if (v83)
      {
        if (*(_DWORD *)v83 == 2)
          WTF::StringImpl::destroy(v83, this);
        else
          *(_DWORD *)v83 -= 2;
      }
    }
    else
    {
      v84 = *(_QWORD *)a3 + 48 * v74;
      *(_BYTE *)v84 = (_BYTE)v94;
      *(_QWORD *)&v91 = 0;
      *(_QWORD *)(v84 + 8) = v71;
      *((_QWORD *)&v91 + 1) = 0;
      *(_QWORD *)(v84 + 16) = *((_QWORD *)&v71 + 1);
      *(_QWORD *)&v92 = 0;
      *(_QWORD *)(v84 + 24) = v72;
      *((_QWORD *)&v92 + 1) = 0;
      *(_QWORD *)(v84 + 32) = *((_QWORD *)&v72 + 1);
      *(_QWORD *)(v84 + 40) = v73;
      *(_DWORD *)(a3 + 12) = v74 + 1;
      v93 = 0;
    }
    v85 = (WTF::StringImpl *)*((_QWORD *)&v92 + 1);
    *((_QWORD *)&v92 + 1) = 0;
    if (v85)
    {
      if (*(_DWORD *)v85 == 2)
        WTF::StringImpl::destroy(v85, this);
      else
        *(_DWORD *)v85 -= 2;
    }
    v86 = (WTF::StringImpl *)v92;
    *(_QWORD *)&v92 = 0;
    if (v86)
    {
      if (*(_DWORD *)v86 == 2)
        WTF::StringImpl::destroy(v86, this);
      else
        *(_DWORD *)v86 -= 2;
    }
    v87 = (WTF::StringImpl *)*((_QWORD *)&v91 + 1);
    *((_QWORD *)&v91 + 1) = 0;
    if (v87)
    {
      if (*(_DWORD *)v87 == 2)
        WTF::StringImpl::destroy(v87, this);
      else
        *(_DWORD *)v87 -= 2;
    }
    v88 = (WTF::StringImpl *)v91;
    *(_QWORD *)&v91 = 0;
    if (v88)
    {
      if (*(_DWORD *)v88 == 2)
        WTF::StringImpl::destroy(v88, this);
      else
        *(_DWORD *)v88 -= 2;
    }
    return (*(&off_1E334C260 + v70))((int)&v90, (WebCore::ApplePayInstallmentItem *)&v94);
  }
  if (v98 != -1)
    return (*(&off_1E334C260 + v70))((int)&v90, (WebCore::ApplePayInstallmentItem *)&v94);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore23ApplePayInstallmentItemENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayInstallmentItem *this)
{
  WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem(this, this);
}

uint64_t WebCore::ApplePayModifier::ApplePayModifier(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  *(_QWORD *)result = *(_QWORD *)a2;
  *(_BYTE *)(result + 8) = 0;
  *(_BYTE *)(result + 88) = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
    v2 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(result + 16) = v2;
    v3 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(result + 24) = v3;
    v4 = *(_OWORD *)(a2 + 32);
    v5 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(result + 32) = v4;
    *(_OWORD *)(result + 48) = v5;
    v6 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(result + 72) = v6;
    *(_WORD *)(result + 80) = *(_WORD *)(a2 + 80);
    *(_BYTE *)(result + 88) = 1;
  }
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(result + 96) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(result + 104) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_DWORD *)(result + 108) = v7;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 120) = 0;
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(result + 112) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_DWORD *)(result + 120) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(_DWORD *)(result + 124) = v8;
  *(_BYTE *)(result + 128) = 0;
  *(_BYTE *)(result + 328) = 0;
  if (*(_BYTE *)(a2 + 328))
  {
    v9 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(result + 128) = v9;
    *(_BYTE *)(result + 136) = *(_BYTE *)(a2 + 136);
    v10 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(result + 144) = v10;
    v11 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(result + 152) = v11;
    v12 = *(_OWORD *)(a2 + 160);
    v13 = *(_OWORD *)(a2 + 176);
    *(_QWORD *)(result + 192) = *(_QWORD *)(a2 + 192);
    *(_OWORD *)(result + 160) = v12;
    *(_OWORD *)(result + 176) = v13;
    v14 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a2 + 200) = 0;
    *(_QWORD *)(result + 200) = v14;
    *(_WORD *)(result + 208) = *(_WORD *)(a2 + 208);
    *(_BYTE *)(result + 216) = 0;
    *(_BYTE *)(result + 296) = 0;
    if (*(_BYTE *)(a2 + 296))
    {
      *(_BYTE *)(result + 216) = *(_BYTE *)(a2 + 216);
      v15 = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a2 + 224) = 0;
      *(_QWORD *)(result + 224) = v15;
      v16 = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a2 + 232) = 0;
      *(_QWORD *)(result + 232) = v16;
      v17 = *(_OWORD *)(a2 + 240);
      v18 = *(_OWORD *)(a2 + 256);
      *(_QWORD *)(result + 272) = *(_QWORD *)(a2 + 272);
      *(_OWORD *)(result + 240) = v17;
      *(_OWORD *)(result + 256) = v18;
      v19 = *(_QWORD *)(a2 + 280);
      *(_QWORD *)(a2 + 280) = 0;
      *(_QWORD *)(result + 280) = v19;
      *(_WORD *)(result + 288) = *(_WORD *)(a2 + 288);
      *(_BYTE *)(result + 296) = 1;
    }
    v20 = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a2 + 304) = 0;
    *(_QWORD *)(result + 304) = v20;
    v21 = *(_QWORD *)(a2 + 312);
    *(_QWORD *)(a2 + 312) = 0;
    *(_QWORD *)(result + 312) = v21;
    v22 = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a2 + 320) = 0;
    *(_QWORD *)(result + 320) = v22;
    *(_BYTE *)(result + 328) = 1;
  }
  *(_BYTE *)(result + 336) = 0;
  *(_BYTE *)(result + 448) = 0;
  if (*(_BYTE *)(a2 + 448))
  {
    v23 = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a2 + 336) = 0;
    *(_QWORD *)(result + 336) = v23;
    *(_BYTE *)(result + 344) = *(_BYTE *)(a2 + 344);
    v24 = *(_QWORD *)(a2 + 352);
    *(_QWORD *)(a2 + 352) = 0;
    *(_QWORD *)(result + 352) = v24;
    v25 = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a2 + 360) = 0;
    *(_QWORD *)(result + 360) = v25;
    v26 = *(_OWORD *)(a2 + 368);
    v27 = *(_OWORD *)(a2 + 384);
    *(_QWORD *)(result + 400) = *(_QWORD *)(a2 + 400);
    *(_OWORD *)(result + 368) = v26;
    *(_OWORD *)(result + 384) = v27;
    v28 = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a2 + 408) = 0;
    *(_QWORD *)(result + 408) = v28;
    *(_WORD *)(result + 416) = *(_WORD *)(a2 + 416);
    v29 = *(_QWORD *)(a2 + 424);
    *(_QWORD *)(a2 + 424) = 0;
    *(_QWORD *)(result + 424) = v29;
    v30 = *(_QWORD *)(a2 + 432);
    *(_QWORD *)(a2 + 432) = 0;
    *(_QWORD *)(result + 432) = v30;
    v31 = *(_QWORD *)(a2 + 440);
    *(_QWORD *)(a2 + 440) = 0;
    *(_QWORD *)(result + 440) = v31;
    *(_BYTE *)(result + 448) = 1;
  }
  *(_BYTE *)(result + 456) = 0;
  *(_BYTE *)(result + 472) = 0;
  if (*(_BYTE *)(a2 + 472))
  {
    *(_QWORD *)(result + 456) = 0;
    *(_QWORD *)(result + 464) = 0;
    v32 = *(_QWORD *)(a2 + 456);
    *(_QWORD *)(a2 + 456) = 0;
    *(_QWORD *)(result + 456) = v32;
    LODWORD(v32) = *(_DWORD *)(a2 + 464);
    *(_DWORD *)(a2 + 464) = 0;
    *(_DWORD *)(result + 464) = v32;
    LODWORD(v32) = *(_DWORD *)(a2 + 468);
    *(_DWORD *)(a2 + 468) = 0;
    *(_DWORD *)(result + 468) = v32;
    *(_BYTE *)(result + 472) = 1;
  }
  *(_BYTE *)(result + 480) = 0;
  *(_BYTE *)(result + 608) = 0;
  if (*(_BYTE *)(a2 + 608))
  {
    v33 = *(_QWORD *)(a2 + 480);
    *(_QWORD *)(a2 + 480) = 0;
    *(_QWORD *)(result + 480) = v33;
    *(_BYTE *)(result + 488) = *(_BYTE *)(a2 + 488);
    v34 = *(_QWORD *)(a2 + 496);
    *(_QWORD *)(a2 + 496) = 0;
    *(_QWORD *)(result + 496) = v34;
    v35 = *(_QWORD *)(a2 + 504);
    *(_QWORD *)(a2 + 504) = 0;
    *(_QWORD *)(result + 504) = v35;
    v36 = *(_OWORD *)(a2 + 512);
    v37 = *(_OWORD *)(a2 + 528);
    *(_QWORD *)(result + 544) = *(_QWORD *)(a2 + 544);
    *(_OWORD *)(result + 512) = v36;
    *(_OWORD *)(result + 528) = v37;
    v38 = *(_QWORD *)(a2 + 552);
    *(_QWORD *)(a2 + 552) = 0;
    *(_QWORD *)(result + 552) = v38;
    *(_WORD *)(result + 560) = *(_WORD *)(a2 + 560);
    *(_QWORD *)(result + 568) = *(_QWORD *)(a2 + 568);
    v39 = *(_QWORD *)(a2 + 576);
    *(_QWORD *)(a2 + 576) = 0;
    *(_QWORD *)(result + 576) = v39;
    v40 = *(_QWORD *)(a2 + 584);
    *(_QWORD *)(a2 + 584) = 0;
    *(_QWORD *)(result + 584) = v40;
    v41 = *(_QWORD *)(a2 + 592);
    *(_QWORD *)(a2 + 592) = 0;
    *(_QWORD *)(result + 592) = v41;
    v42 = *(_QWORD *)(a2 + 600);
    *(_QWORD *)(a2 + 600) = 0;
    *(_QWORD *)(result + 600) = v42;
    *(_BYTE *)(result + 608) = 1;
  }
  *(_BYTE *)(result + 616) = 0;
  *(_BYTE *)(result + 640) = 0;
  if (*(_BYTE *)(a2 + 640))
  {
    *(_BYTE *)(result + 632) = 0;
    if (*(_BYTE *)(a2 + 632))
    {
      *(_QWORD *)(result + 616) = 0;
      *(_QWORD *)(result + 624) = 0;
      v43 = *(_QWORD *)(a2 + 616);
      *(_QWORD *)(a2 + 616) = 0;
      *(_QWORD *)(result + 616) = v43;
      LODWORD(v43) = *(_DWORD *)(a2 + 624);
      *(_DWORD *)(a2 + 624) = 0;
      *(_DWORD *)(result + 624) = v43;
      LODWORD(v43) = *(_DWORD *)(a2 + 628);
      *(_DWORD *)(a2 + 628) = 0;
      *(_DWORD *)(result + 628) = v43;
      *(_BYTE *)(result + 632) = 1;
    }
    *(_BYTE *)(result + 640) = 1;
  }
  return result;
}

uint64_t WebCore::ApplePayPaymentContact::ApplePayPaymentContact(uint64_t this, const WebCore::ApplePayPaymentContact *a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _DWORD **v22;
  uint64_t v23;
  _DWORD *v24;

  v3 = this;
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)this = v4;
  v5 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(this + 8) = v5;
  v6 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(this + 16) = v6;
  v7 = (_DWORD *)*((_QWORD *)a2 + 3);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(this + 24) = v7;
  v8 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(this + 32) = v8;
  v9 = (_DWORD *)*((_QWORD *)a2 + 5);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(this + 40) = v9;
  v10 = (_DWORD *)*((_QWORD *)a2 + 6);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(this + 48) = v10;
  v11 = (_DWORD *)*((_QWORD *)a2 + 7);
  if (v11)
    *v11 += 2;
  *(_BYTE *)(this + 64) = 0;
  *(_QWORD *)(this + 56) = v11;
  *(_BYTE *)(this + 80) = 0;
  if (*((_BYTE *)a2 + 80))
  {
    v12 = *((unsigned int *)a2 + 19);
    *(_QWORD *)(this + 64) = 0;
    *(_QWORD *)(this + 72) = 0;
    *(_DWORD *)(this + 76) = v12;
    if ((_DWORD)v12)
    {
      if (v12 >> 29)
      {
        __break(0xC471u);
        return this;
      }
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v12));
      *(_DWORD *)(v3 + 72) = v12;
      *(_QWORD *)(v3 + 64) = v20;
      v21 = *((unsigned int *)a2 + 19);
      if ((_DWORD)v21)
      {
        v22 = (_DWORD **)*((_QWORD *)a2 + 8);
        v23 = 8 * v21;
        do
        {
          v24 = *v22;
          if (*v22)
            *v24 += 2;
          *v20++ = v24;
          ++v22;
          v23 -= 8;
        }
        while (v23);
      }
    }
    *(_BYTE *)(v3 + 80) = 1;
  }
  v13 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v13)
    *v13 += 2;
  *(_QWORD *)(v3 + 88) = v13;
  v14 = (_DWORD *)*((_QWORD *)a2 + 12);
  if (v14)
    *v14 += 2;
  *(_QWORD *)(v3 + 96) = v14;
  v15 = (_DWORD *)*((_QWORD *)a2 + 13);
  if (v15)
    *v15 += 2;
  *(_QWORD *)(v3 + 104) = v15;
  v16 = (_DWORD *)*((_QWORD *)a2 + 14);
  if (v16)
    *v16 += 2;
  *(_QWORD *)(v3 + 112) = v16;
  v17 = (_DWORD *)*((_QWORD *)a2 + 15);
  if (v17)
    *v17 += 2;
  *(_QWORD *)(v3 + 120) = v17;
  v18 = (_DWORD *)*((_QWORD *)a2 + 16);
  if (v18)
    *v18 += 2;
  *(_QWORD *)(v3 + 128) = v18;
  v19 = (_DWORD *)*((_QWORD *)a2 + 17);
  if (v19)
    *v19 += 2;
  *(_QWORD *)(v3 + 136) = v19;
  return v3;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::ApplePayFeature>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  JSValue v8;
  int i;
  unsigned int v10;
  unint64_t IndexQuickly;
  uint64_t v12;
  JSC::VM *v13;
  unsigned __int16 v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  JSC::VM *v19;
  unsigned __int16 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  JSC::VM *v25;

  v6 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v10 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v10)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
      if (*(_DWORD *)(v6 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
        if ((result & 1) != 0)
          break;
      }
      v12 = *a3;
      v25 = (JSC::VM *)*((_QWORD *)a1 + 7);
      v13 = v25;
      result = WebCore::parseEnumeration<WebCore::ApplePayFeature>(a1, IndexQuickly);
      v14 = result;
      if (!*((_DWORD *)v13 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v13), (result & 1) == 0))
      {
        if (v14 <= 0xFFu)
        {
          result = JSC::throwTypeError();
        }
        else
        {
          LOBYTE(v25) = v14;
          v15 = *(unsigned int *)(v12 + 12);
          if ((_DWORD)v15 == *(_DWORD *)(v12 + 8))
          {
            result = (uint64_t)WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v12, (WTF *)(v15 + 1), (unint64_t)&v25);
            v15 = *(unsigned int *)(v12 + 12);
            *(_BYTE *)(*(_QWORD *)v12 + v15) = *(_BYTE *)result;
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)v12 + v15) = v14;
          }
          *(_DWORD *)(v12 + 12) = v15 + 1;
        }
      }
      if (*(_QWORD *)(v6 + 16))
      {
        v23 = JSC::JSArrayIterator::create();
        v24 = i | 0xFFFE000000000000;
        if (i < 0)
          v24 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v23 + 16) = v24;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, v8);
    if (!*(_DWORD *)(v6 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v6 + 16) || result == 6)
          break;
        v17 = JSC::iteratorValue();
        if (*(_DWORD *)(v6 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
          if ((result & 1) != 0)
            break;
        }
        v18 = *a3;
        v25 = (JSC::VM *)*((_QWORD *)a1 + 7);
        v19 = v25;
        v20 = WebCore::parseEnumeration<WebCore::ApplePayFeature>(a1, v17);
        if (!*((_DWORD *)v19 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) == 0)
        {
          if (v20 <= 0xFFu)
          {
            JSC::throwTypeError();
          }
          else
          {
            LOBYTE(v25) = v20;
            v21 = *(unsigned int *)(v18 + 12);
            if ((_DWORD)v21 == *(_DWORD *)(v18 + 8))
            {
              v22 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v18, (WTF *)(v21 + 1), (unint64_t)&v25);
              v21 = *(unsigned int *)(v18 + 12);
              *(_BYTE *)(*(_QWORD *)v18 + v21) = *v22;
            }
            else
            {
              *(_BYTE *)(*(_QWORD *)v18 + v21) = v20;
            }
            *(_DWORD *)(v18 + 12) = v21 + 1;
          }
        }
        if (*(_QWORD *)(v6 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::ApplePayMerchantCapability>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::ApplePayMerchantCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  JSValue v8;
  int i;
  unsigned int v10;
  unint64_t IndexQuickly;
  uint64_t v12;
  JSC::VM *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  JSC::VM *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  JSC::VM *v25;

  v6 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v10 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v10)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
      if (*(_DWORD *)(v6 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
        if ((result & 1) != 0)
          break;
      }
      v12 = *a3;
      v25 = (JSC::VM *)*((_QWORD *)a1 + 7);
      v13 = v25;
      result = WebCore::parseEnumeration<WebCore::ApplePayMerchantCapability>(a1, IndexQuickly);
      v14 = result;
      if (!*((_DWORD *)v13 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v13), (result & 1) == 0))
      {
        if (HIDWORD(v14))
        {
          LODWORD(v25) = v14;
          v15 = *(unsigned int *)(v12 + 12);
          if ((_DWORD)v15 == *(_DWORD *)(v12 + 8))
          {
            result = (uint64_t)WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v12, v15 + 1, (unint64_t)&v25);
            v15 = *(unsigned int *)(v12 + 12);
            *(_DWORD *)(*(_QWORD *)v12 + 4 * v15) = *(_DWORD *)result;
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)v12 + 4 * v15) = v14;
          }
          *(_DWORD *)(v12 + 12) = v15 + 1;
        }
        else
        {
          result = JSC::throwTypeError();
        }
      }
      if (*(_QWORD *)(v6 + 16))
      {
        v23 = JSC::JSArrayIterator::create();
        v24 = i | 0xFFFE000000000000;
        if (i < 0)
          v24 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v23 + 16) = v24;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, v8);
    if (!*(_DWORD *)(v6 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v6 + 16) || result == 6)
          break;
        v17 = JSC::iteratorValue();
        if (*(_DWORD *)(v6 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
          if ((result & 1) != 0)
            break;
        }
        v18 = *a3;
        v25 = (JSC::VM *)*((_QWORD *)a1 + 7);
        v19 = v25;
        v20 = WebCore::parseEnumeration<WebCore::ApplePayMerchantCapability>(a1, v17);
        if (!*((_DWORD *)v19 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) == 0)
        {
          if (HIDWORD(v20))
          {
            LODWORD(v25) = v20;
            v21 = *(unsigned int *)(v18 + 12);
            if ((_DWORD)v21 == *(_DWORD *)(v18 + 8))
            {
              v22 = WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v18, v21 + 1, (unint64_t)&v25);
              v21 = *(unsigned int *)(v18 + 12);
              *(_DWORD *)(*(_QWORD *)v18 + 4 * v21) = *(_DWORD *)v22;
            }
            else
            {
              *(_DWORD *)(*(_QWORD *)v18 + 4 * v21) = v20;
            }
            *(_DWORD *)(v18 + 12) = v21 + 1;
          }
          else
          {
            JSC::throwTypeError();
          }
        }
        if (*(_QWORD *)(v6 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

uint64_t WebCore::JSApplePaySession::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSApplePaySetup::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSApplePaySetupFeature::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TouchList>,WebCore::IDLSequence<WebCore::IDLInterface<WebCore::Touch>>>>::convert(uint64_t result, JSC *this, unint64_t a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v7;
  _BOOL4 v8;
  char **v9;
  BOOL v10;
  _DWORD *v12;
  JSC::JSObject *v13;
  uint64_t v14;
  JSValue v15;
  int i;
  unsigned int v17;
  uint64_t IndexQuickly;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  WTF *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF *v31;
  _QWORD v32[2];
  int v33;
  JSC::VM *v34;
  WTF *v35;
  uint64_t v36;

  v4 = result;
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v34 = v5;
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_17;
  v7 = *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSTouchList::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSTouchList::s_info && v9 != 0);
  }
  if (v8)
  {
    v12 = *(_DWORD **)(a3 + 24);
    if (v12)
    {
      ++*v12;
      *(_QWORD *)(result + 8) = v12;
      *(_DWORD *)(result + 24) = 0;
      *(_DWORD *)(result + 32) = 0;
      return result;
    }
  }
  if (*(unsigned __int8 *)(a3 + 5) < 0x17u)
    goto LABEL_17;
  v13 = (JSC::JSObject *)JSC::iteratorMethod(this, (JSC::JSGlobalObject *)a3, (JSC::JSObject *)a3);
  if (*((_DWORD *)v5 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
    if ((_DWORD)result)
      goto LABEL_18;
  }
  if (v13 == (JSC::JSObject *)10)
  {
LABEL_17:
    result = JSC::throwTypeError();
LABEL_18:
    *(_DWORD *)(v4 + 32) = 1;
    return result;
  }
  v35 = 0;
  v36 = 0;
  v14 = *((_QWORD *)this + 7);
  if (JSC::getIterationMode() == 2)
  {
    for (i = 1; ; ++i)
    {
      v17 = (*(_BYTE *)(a3 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a3 + 8) - 8) : 0;
      if (i - 1 >= v17)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a3, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)a3, this, (i - 1));
      if (*(_DWORD *)(v14 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14) & 1) != 0)
        break;
      WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::Touch>>::convert(this, IndexQuickly, (uint64_t)&v35);
      if (*(_QWORD *)(v14 + 16))
      {
        v22 = JSC::JSArrayIterator::create();
        v23 = i | 0xFFFE000000000000;
        if (i < 0)
          v23 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v22 + 16) = v23;
        goto LABEL_45;
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(this, (JSC::JSGlobalObject *)a3, v13, v15);
    if (!*(_DWORD *)(v14 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14) & 1) == 0)
    {
      while (1)
      {
        v19 = JSC::iteratorStep();
        if (*(_QWORD *)(v14 + 16) || v19 == 6)
          break;
        v21 = JSC::iteratorValue();
        if (*(_DWORD *)(v14 + 80))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14) & 1) != 0)
            break;
        }
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::Touch>>::convert(this, v21, (uint64_t)&v35);
        if (*(_QWORD *)(v14 + 16))
        {
LABEL_45:
          JSC::iteratorClose();
          break;
        }
      }
    }
  }
  if (*(_DWORD *)(v14 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14);
    v24 = v35;
    if (hasExceptionsAfterHandlingTraps)
    {
      v33 = 1;
      if (HIDWORD(v36))
      {
        v30 = 8 * HIDWORD(v36);
        do
        {
          v31 = *(WTF **)v24;
          *(_QWORD *)v24 = 0;
          if (v31)
            WTF::RefCounted<WebCore::Touch>::deref(v31, v29);
          v24 = (WTF *)((char *)v24 + 8);
          v30 -= 8;
        }
        while (v30);
        v24 = v35;
      }
      if (v24)
      {
        v35 = 0;
        LODWORD(v36) = 0;
        WTF::fastFree(v24, v29);
      }
      v25 = 1;
      v26 = 1;
      goto LABEL_49;
    }
  }
  else
  {
    v24 = v35;
  }
  v25 = 0;
  v26 = 0;
  v33 = 0;
  v27 = v36;
  v32[0] = 0;
  v32[1] = 0;
  *(_QWORD *)(v4 + 8) = v24;
  *(_QWORD *)(v4 + 16) = v27;
  *(_DWORD *)(v4 + 24) = 1;
LABEL_49:
  *(_DWORD *)(v4 + 32) = v25;
  return ((uint64_t (*)(WTF **, _QWORD *))off_1E334C270[v26])(&v35, v32);
}

WTF *WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::Touch>>::convert(WTF *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  WTF *v9;
  uint64_t v10;
  char *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  WTF *v16;

  v16 = (WTF *)*((_QWORD *)result + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return (WTF *)JSC::throwTypeError();
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSTouch::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSTouch::s_info && v6 != 0);
  }
  if (!v5)
    return (WTF *)JSC::throwTypeError();
  v9 = *(WTF **)(a2 + 24);
  if (!v9)
    return (WTF *)JSC::throwTypeError();
  ++*(_DWORD *)v9;
  v16 = v9;
  v10 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a3 + 8))
  {
    v11 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v10 + 1, (unint64_t)&v16);
    v13 = *(unsigned int *)(a3 + 12);
    v14 = *(char **)a3;
    v15 = *(_QWORD *)v11;
    *(_QWORD *)v11 = 0;
    *(_QWORD *)&v14[8 * v13] = v15;
    result = v16;
    *(_DWORD *)(a3 + 12) = v13 + 1;
    v16 = 0;
    if (result)
      return WTF::RefCounted<WebCore::Touch>::deref(result, v12);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v10) = v9;
    *(_DWORD *)(a3 + 12) = v10 + 1;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore5TouchENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *(WTF ***)a2;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        WTF::RefCounted<WebCore::Touch>::deref(v6, a2);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<WebCore::TouchList,WTF::RawPtrTraits<WebCore::TouchList>,WTF::DefaultRefDerefTraits<WebCore::TouchList>>,WTF::Vector<WTF::Ref<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::TouchList,WTF::RawPtrTraits<WebCore::TouchList>,WTF::DefaultRefDerefTraits<WebCore::TouchList>>,WTF::Vector<WTF::Ref<WebCore::Touch,WTF::RawPtrTraits<WebCore::Touch>,WTF::DefaultRefDerefTraits<WebCore::Touch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)();
  int v5;
  _BYTE v7[16];
  int v8;
  _BYTE v9[16];
  int v10;
  unsigned __int8 v11;
  char v12;

  if (*(_DWORD *)(a2 + 32))
  {
    *(_DWORD *)(a1 + 40) = 1;
    return a1;
  }
  v7[0] = 0;
  v8 = -1;
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
  {
    v9[0] = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 24) = -1;
    *(_BYTE *)(a1 + 32) = 1;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    v4 = off_1E334BFD0[v3];
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v4)(v9, v7, a2 + 8);
    v8 = v3;
    v9[0] = 0;
    v10 = -1;
    ((void (*)(char *, _BYTE *, _BYTE *))v4)(&v12, v9, v7);
    v10 = v3;
    v11 = 1;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 24) = -1;
    ((void (*)(char *, uint64_t, _BYTE *))v4)(&v12, a1 + 8, v9);
    *(_DWORD *)(a1 + 24) = v3;
    v5 = v11;
    *(_BYTE *)(a1 + 32) = 1;
    *(_DWORD *)(a1 + 40) = 0;
    if (!v5)
      goto LABEL_9;
    if (v10 != -1)
      ((void (*)(char *, _BYTE *))off_1E334BFC0[v10])(&v12, v9);
  }
  v10 = -1;
LABEL_9:
  if (v8 != -1)
    ((void (*)(char *, _BYTE *))off_1E334BFC0[v8])(&v12, v7);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore9TouchListENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENS9_6VectorINS9_3RefINSB_5TouchENSD_ISK_EENSF_ISK_EEEELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSU_1EJSR_SS_EEEEEEDcSW_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E334BFC0[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t WebCore::JSTouchList::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

double WebCore::CDMPrivateMediaSourceAVFObjC::parseKeySystem(WebCore::CDMPrivateMediaSourceAVFObjC *this, const WTF::String *a2)
{
  double result;
  uint64_t v5;
  const char *v6;
  unsigned int v7;
  int v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  const char **v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  const char *v30;
  unint64_t v31;
  __int16 v32;
  char v33;
  char *v34;
  double v35;

  if ((_MergedGlobals_122 & 1) == 0)
    goto LABEL_47;
  while ((JSC::Yarr::RegularExpression::match() & 0x80000000) == 0)
  {
    v5 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v6 = *(const char **)(v5 + 8);
      v7 = *(_DWORD *)(v5 + 4);
      v8 = (*(_DWORD *)(v5 + 16) >> 2) & 1;
      if (v7 >= 0xF)
      {
        if (v8)
        {
          v9 = v6 + 14;
          v8 = 1;
          v10 = 1;
          goto LABEL_7;
        }
        v11 = WTF::parseInteger<int,char16_t>((uint64_t)(v6 + 28), 1, 10, 0);
        goto LABEL_10;
      }
      goto LABEL_49;
    }
    v7 = 0;
    v6 = 0;
    v10 = 0;
    v8 = 1;
    while (1)
    {
      v9 = "";
LABEL_7:
      v11 = WTF::parseInteger<int,unsigned char>((uint64_t)v9, v10, 10, 0);
LABEL_10:
      a2 = (const WTF::String *)v11;
      if ((v11 & 0xFF00000000) != 0)
        break;
      std::__throw_bad_optional_access[abi:sn180100]();
LABEL_49:
      v10 = 0;
    }
    v34 = 0;
    v35 = 0.0;
    if (v7 < 0x11)
    {
      v12 = 0x100000000;
      v14 = "";
    }
    else
    {
      v12 = v7 - 16;
      v13 = v7 - 16;
      if (v8)
      {
        if (v13 < v12)
          goto LABEL_46;
        v14 = v6 + 16;
        v12 |= 0x100000000uLL;
      }
      else
      {
        if (v13 < v12)
          goto LABEL_46;
        v14 = v6 + 32;
      }
    }
    v30 = v14;
    v31 = v12;
    v32 = 44;
    v33 = 0;
    v26 = &v30;
    v27 = 0;
    v29 = (_DWORD)v12 == 0;
    WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v26);
    v15 = v31;
    while (1)
    {
      if (v27 == v15 && v29)
      {
        v24 = v34;
        *(_DWORD *)this = (_DWORD)a2;
        *((_QWORD *)this + 1) = v24;
        result = v35;
        *((double *)this + 2) = v35;
        *((_BYTE *)this + 24) = 1;
        return result;
      }
      v17 = *((unsigned int *)v26 + 2);
      if (v17 <= v27)
      {
        v21 = 0;
        v20 = "";
LABEL_33:
        v22 = WTF::parseInteger<int,unsigned char>((uint64_t)v20, v21, 10, 0);
        goto LABEL_35;
      }
      LODWORD(v18) = v28;
      if (v17 - v27 <= v28)
      {
        if (!v27)
        {
          v20 = *v26;
          v18 = (uint64_t)v26[1];
          goto LABEL_32;
        }
        LODWORD(v18) = v17 - v27;
      }
      v18 = v18;
      v19 = v17 - v27;
      if (*((_BYTE *)v26 + 12))
      {
        if (v19 < v18)
          goto LABEL_46;
        v20 = &(*v26)[v27];
        v18 = v18 | 0x100000000;
      }
      else
      {
        if (v19 < v18)
          goto LABEL_46;
        v20 = &(*v26)[2 * v27];
      }
LABEL_32:
      v21 = v18;
      if ((v18 & 0xFF00000000) != 0)
        goto LABEL_33;
      v22 = WTF::parseInteger<int,char16_t>((uint64_t)v20, v18, 10, 0);
LABEL_35:
      v25 = v22;
      if ((v22 & 0xFF00000000) == 0)
        break;
      if (HIDWORD(v35) == LODWORD(v35))
      {
        v23 = WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v34, HIDWORD(v35) + 1, (unint64_t)&v25);
        *(_DWORD *)&v34[4 * HIDWORD(v35)] = *(_DWORD *)v23;
      }
      else
      {
        *(_DWORD *)&v34[4 * HIDWORD(v35)] = v22;
      }
      ++HIDWORD(v35);
      WTF::StringView::SplitResult::Iterator::operator++();
    }
    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_46:
    __break(1u);
LABEL_47:
    JSC::Yarr::RegularExpression::RegularExpression();
    _MergedGlobals_122 = 1;
  }
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 24) = 0;
  return result;
}

void sub_19523D150(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18)
{
  if (a17)
    WTF::fastFree(a17, a2);
  _Unwind_Resume(exception_object);
}

void WebCore::CDMPrivateMediaSourceAVFObjC::~CDMPrivateMediaSourceAVFObjC(WebCore::CDMPrivateMediaSourceAVFObjC *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;

  *(_QWORD *)this = off_1E334CCC0;
  v3 = (WTF *)*((_QWORD *)this + 2);
  v4 = *((unsigned int *)this + 7);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = v3;
    do
    {
      v7 = *(_QWORD *)v6;
      v6 = (WTF *)((char *)v6 + 8);
      *(_QWORD *)(v7 + 24) = 0;
      v5 -= 8;
    }
    while (v5);
  }
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;

  *(_QWORD *)this = off_1E334CCC0;
  v3 = (WTF *)*((_QWORD *)this + 2);
  v4 = *((unsigned int *)this + 7);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = v3;
    do
    {
      v7 = *(_QWORD *)v6;
      v6 = (WTF *)((char *)v6 + 8);
      *(_QWORD *)(v7 + 24) = 0;
      v5 -= 8;
    }
    while (v5);
  }
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  WTF::fastFree(this, a2);
}

BOOL WebCore::CDMPrivateMediaSourceAVFObjC::supportsKeySystem(WebCore::CDMPrivateMediaSourceAVFObjC *this, const WTF::String *a2)
{
  unsigned int (*v3)(int *, _QWORD);
  _BOOL8 v4;
  PAL *v5;
  void *v6;
  void *v8;
  int v9;
  WTF *v10;
  char v11;

  {
    if (WebCore::canLoad_VideoToolbox_VTGetGVADecoderAvailability(void)::loaded)
    {
      v3 = (unsigned int (*)(int *, _QWORD))WebCore::softLinkVideoToolboxVTGetGVADecoderAvailability;
LABEL_4:
      v9 = 0;
      v4 = 0;
      if (v3(&v9, 0) || !v9)
        return v4;
    }
  }
  else
  {
    v8 = (void *)WebCore::VideoToolboxLibrary(0);
    v3 = (unsigned int (*)(int *, _QWORD))dlsym(v8, "VTGetGVADecoderAvailability");
    WebCore::softLinkVideoToolboxVTGetGVADecoderAvailability = v3;
    WebCore::canLoad_VideoToolbox_VTGetGVADecoderAvailability(void)::loaded = v3 != 0;
    if (v3)
      goto LABEL_4;
  }
  WebCore::CDMPrivateMediaSourceAVFObjC::parseKeySystem((WebCore::CDMPrivateMediaSourceAVFObjC *)&v9, this);
  if (!v11)
    return 0;
  v4 = v9 != 3 || PAL::getAVContentKeySessionClass[0](v5);
  if (v10)
    WTF::fastFree(v10, v6);
  return v4;
}

void sub_19523D340(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
    WTF::fastFree(a10, a2);
  _Unwind_Resume(exception_object);
}

BOOL WebCore::CDMPrivateMediaSourceAVFObjC::supportsKeySystemAndMimeType(WebCore::CDMPrivateMediaSourceAVFObjC *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v4;
  _BOOL8 v5;
  int v7;
  WTF::StringImpl *v8;
  double v9;
  double v10;
  float v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  void *v15;
  double v16;
  double v17;
  float v18;
  unsigned int isContentTypeSupported;
  const WebCore::ContentType *v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  char v24;
  _QWORD v25[5];
  __int16 v26;
  char v27;
  _QWORD v28[2];
  _BYTE v29[24];
  _BYTE v30[96];

  if (!WebCore::CDMPrivateMediaSourceAVFObjC::supportsKeySystem(this, a2))
    return 0;
  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v7 = *(_DWORD *)(v4 + 4);
    if (v7)
    {
      if (v7 != 10)
        goto LABEL_8;
      v21 = *(_QWORD *)(v4 + 8);
      if ((*(_BYTE *)(v4 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v21 & 0xDF) == 0x4B
          && (*(_BYTE *)(v21 + 1) & 0xDF) == 0x45
          && (*(_BYTE *)(v21 + 2) & 0xDF) == 0x59
          && (*(_BYTE *)(v21 + 3) & 0xDF) == 0x52
          && (*(_BYTE *)(v21 + 4) & 0xDF) == 0x45
          && (*(_BYTE *)(v21 + 5) & 0xDF) == 0x4C
          && (*(_BYTE *)(v21 + 6) & 0xDF) == 0x45
          && (*(_BYTE *)(v21 + 7) & 0xDF) == 0x41
          && (*(_BYTE *)(v21 + 8) & 0xDF) == 0x53)
        {
          v22 = *(unsigned __int8 *)(v21 + 9);
          goto LABEL_31;
        }
      }
      else if ((*(_WORD *)v21 & 0xFFDF) == 0x4B
             && (*(_WORD *)(v21 + 2) & 0xFFDF) == 0x45
             && (*(_WORD *)(v21 + 4) & 0xFFDF) == 0x59
             && (*(_WORD *)(v21 + 6) & 0xFFDF) == 0x52
             && (*(_WORD *)(v21 + 8) & 0xFFDF) == 0x45
             && (*(_WORD *)(v21 + 10) & 0xFFDF) == 0x4C
             && (*(_WORD *)(v21 + 12) & 0xFFDF) == 0x45
             && (*(_WORD *)(v21 + 14) & 0xFFDF) == 0x41
             && (*(_WORD *)(v21 + 16) & 0xFFDF) == 0x53)
      {
        v22 = *(unsigned __int16 *)(v21 + 18);
LABEL_31:
        if ((v22 & 0xFFFFFFDF) != 0x45)
          goto LABEL_8;
        return 1;
      }
LABEL_8:
      v23 = 0;
      v24 = 0;
      v25[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v25);
      v27 = 0;
      v29[16] = 0;
      v30[0] = 0;
      v30[16] = 0;
      v30[24] = 0;
      v30[40] = 0;
      v30[48] = 0;
      v30[64] = 0;
      v30[72] = 0;
      v30[88] = 0;
      v28[0] = 0;
      v28[1] = 0;
      v29[0] = 0;
      v26 = 1;
      v12 = *(WTF::StringImpl **)a2;
      if (*(_QWORD *)a2)
        *(_DWORD *)v12 += 2;
      v13 = v23;
      v23 = v12;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
        {
          WTF::StringImpl::destroy(v13, v8);
          v24 = 0;
          if (!(_BYTE)v26)
          {
            v14 = 0;
LABEL_19:
            v5 = v14 != 0;
            WebCore::MediaEngineSupportParameters::~MediaEngineSupportParameters((WebCore::MediaEngineSupportParameters *)&v23, v15);
            return v5;
          }
LABEL_14:
          v14 = WebCore::contentTypeMeetsContainerAndCodecTypeRequirements((WebCore::ContentType *)&v23, (uint64_t)v29, (uint64_t)v30, v9, v10, v11);
          if (v14)
          {
            isContentTypeSupported = WebCore::SourceBufferParserWebM::isContentTypeSupported((WebCore::SourceBufferParserWebM *)&v23, (const WebCore::ContentType *)v15, v16, v17, v18);
            v14 = WebCore::SourceBufferParserAVFObjC::isContentTypeSupported((WebCore::SourceBufferParserAVFObjC *)&v23, v20);
            if (isContentTypeSupported > v14)
              v14 = isContentTypeSupported;
            if (v14 == 1)
              v14 = WebCore::contentTypeMeetsHardwareDecodeRequirements((uint64_t)&v23, (uint64_t)v28);
          }
          goto LABEL_19;
        }
        *(_DWORD *)v13 -= 2;
      }
      v24 = 0;
      goto LABEL_14;
    }
  }
  return 1;
}

void sub_19523D5F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WebCore::CDMPrivateMediaSourceAVFObjC::supportsMIMEType(WebCore::CDMPrivateMediaSourceAVFObjC *this, WTF::StringImpl **a2)
{
  _BOOL8 v3;
  WTF::StringImpl *v4;
  double v5;
  double v6;
  float v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  void *v11;
  double v12;
  double v13;
  float v14;
  unsigned int isContentTypeSupported;
  const WebCore::ContentType *v16;
  WTF::StringImpl *v18;
  char v19;
  _QWORD v20[5];
  __int16 v21;
  char v22;
  _QWORD v23[2];
  _BYTE v24[24];
  _BYTE v25[96];

  if ((MEMORY[0x19AEA53F4](*a2, "keyrelease", 10) & 1) == 0)
  {
    v18 = 0;
    v19 = 0;
    v20[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v20);
    v22 = 0;
    v24[16] = 0;
    v25[0] = 0;
    v25[16] = 0;
    v25[24] = 0;
    v25[40] = 0;
    v25[48] = 0;
    v25[64] = 0;
    v25[72] = 0;
    v25[88] = 0;
    v23[0] = 0;
    v23[1] = 0;
    v24[0] = 0;
    v21 = 1;
    v8 = *a2;
    if (*a2)
      *(_DWORD *)v8 += 2;
    v9 = v18;
    v18 = v8;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        WTF::StringImpl::destroy(v9, v4);
        v19 = 0;
        if (!(_BYTE)v21)
        {
          v10 = 0;
LABEL_14:
          v3 = v10 != 0;
          WebCore::MediaEngineSupportParameters::~MediaEngineSupportParameters((WebCore::MediaEngineSupportParameters *)&v18, v11);
          return v3;
        }
LABEL_9:
        v10 = WebCore::contentTypeMeetsContainerAndCodecTypeRequirements((WebCore::ContentType *)&v18, (uint64_t)v24, (uint64_t)v25, v5, v6, v7);
        if (v10)
        {
          isContentTypeSupported = WebCore::SourceBufferParserWebM::isContentTypeSupported((WebCore::SourceBufferParserWebM *)&v18, (const WebCore::ContentType *)v11, v12, v13, v14);
          v10 = WebCore::SourceBufferParserAVFObjC::isContentTypeSupported((WebCore::SourceBufferParserAVFObjC *)&v18, v16);
          if (isContentTypeSupported > v10)
            v10 = isContentTypeSupported;
          if (v10 == 1)
            v10 = WebCore::contentTypeMeetsHardwareDecodeRequirements((uint64_t)&v18, (uint64_t)v23);
        }
        goto LABEL_14;
      }
      *(_DWORD *)v9 -= 2;
    }
    v19 = 0;
    goto LABEL_9;
  }
  return 1;
}

void sub_19523D790(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::CDMPrivateMediaSourceAVFObjC::createSession(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  const WTF::String *v6;
  WTF::StringImpl *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  uint64_t *v16;
  int v17;
  WTF *v18;
  char v19;

  v6 = *(const WTF::String **)(a1 + 8);
  v7 = *(WTF::StringImpl **)v6;
  if (*(_QWORD *)v6)
    *(_DWORD *)v7 += 2;
  WebCore::CDMPrivateMediaSourceAVFObjC::parseKeySystem((WebCore::CDMPrivateMediaSourceAVFObjC *)&v17, v6);
  if (v19)
  {
    v9 = WTF::fastMalloc((WTF *)0xD8);
    WebCore::CDMSessionAVContentKeySession::CDMSessionAVContentKeySession(v9, (uint64_t *)&v18, v17, a1, a2);
    v10 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      v11 = v10 + (v10 >> 2);
      if (v11 >= 0x10)
        v12 = v11 + 1;
      else
        v12 = 16;
      if (v12 <= v10 + 1)
        v13 = v10 + 1;
      else
        v13 = v12;
      if (v13 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v14 = *(void **)(a1 + 16);
      v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
      *(_DWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 16) = v15;
      memcpy(v15, v14, 8 * v10);
      if (v14)
      {
        if (*(void **)(a1 + 16) == v14)
        {
          *(_QWORD *)(a1 + 16) = 0;
          *(_DWORD *)(a1 + 24) = 0;
        }
        WTF::fastFree((WTF *)v14, v8);
      }
      v10 = *(unsigned int *)(a1 + 28);
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 8 * v10);
    }
    else
    {
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 8 * v10);
    }
    *v16 = v9;
    *(_DWORD *)(a1 + 28) = v10 + 1;
    *a3 = v9;
    if (v19 && v18)
    {
      WTF::fastFree(v18, v8);
      if (!v7)
        return;
    }
    else if (!v7)
    {
      return;
    }
  }
  else
  {
    *a3 = 0;
    if (!v7)
      return;
  }
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v8);
  else
    *(_DWORD *)v7 -= 2;
}

void sub_19523D980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, uint64_t a11, char a12)
{
  WTF::StringImpl *v12;
  uint64_t v13;
  void *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12 && a10)
    WTF::fastFree(a10, v15);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v12 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaPlaybackTargetContextCocoa::MediaPlaybackTargetContextCocoa(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  *(_BYTE *)(result + 8) = 0;
  *(_QWORD *)result = off_1E334CCF0;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v2;
  return result;
}

{
  uint64_t v2;

  *(_BYTE *)(result + 8) = 0;
  *(_QWORD *)result = off_1E334CCF0;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v2;
  return result;
}

void WebCore::MediaPlaybackTargetContextCocoa::~MediaPlaybackTargetContextCocoa(WebCore::MediaPlaybackTargetContextCocoa *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    CFRelease(v2);
}

{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    CFRelease(v2);
}

void WebCore::MediaPlaybackTargetContextCocoa::~MediaPlaybackTargetContextCocoa(WebCore::MediaPlaybackTargetContextCocoa *this, void *a2)
{
  const void *v3;

  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  WTF::fastFree(this, a2);
}

CFTypeRef WebCore::MediaPlaybackTargetContextCocoa::outputContext@<X0>(WebCore::MediaPlaybackTargetContextCocoa *this@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef result;

  result = (CFTypeRef)*((_QWORD *)this + 2);
  *a2 = result;
  if (result)
    return CFRetain(result);
  return result;
}

void WebCore::MediaPlaybackTargetContextCocoa::deviceName(id *this@<X0>, uint64_t a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend(this[2], "supportsMultipleOutputDevices") & 1) == 0)
  {
    objc_msgSend(this[2], "deviceName");
    JUMPOUT(0x19AEA5508);
  }
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v5 = (void *)objc_msgSend(this[2], "outputDevices", 0);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v5);
        objc_msgSend(v4, "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v8++), "deviceName"));
      }
      while (v6 != v8);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v6);
  }
  MEMORY[0x19AEA5508](a2, objc_msgSend(v4, "componentsJoinedByString:", CFSTR(" + ")));
  if (v4)
    CFRelease(v4);
}

void sub_19523DC5C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

BOOL WebCore::MediaPlaybackTargetContextCocoa::hasActiveRoute(id *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  BOOL v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((objc_opt_respondsToSelector() & 1) != 0
    && objc_msgSend(this[2], "supportsMultipleOutputDevices")
    && (objc_opt_respondsToSelector() & 1) != 0)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v2 = (void *)objc_msgSend(this[2], "outputDevices", 0);
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v11;
      while (2)
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v11 != v5)
            objc_enumerationMutation(v2);
          if ((objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * i), "deviceFeatures") & 5) != 0)
            return 1;
        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        if (v4)
          continue;
        break;
      }
    }
  }
  else if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v7 = (void *)objc_msgSend(this[2], "outputDevice");
    if (v7)
    {
      v8 = (objc_msgSend(v7, "deviceFeatures") & 5) == 0;
      return !v8;
    }
  }
  v8 = objc_msgSend(this[2], "deviceName") == 0;
  return !v8;
}

uint64_t WebCore::MediaPlaybackTargetContextCocoa::supportsRemoteVideoPlayback(id *this)
{
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((objc_opt_respondsToSelector() & 1) != 0
    && objc_msgSend(this[2], "supportsMultipleOutputDevices")
    && (objc_opt_respondsToSelector() & 1) != 0)
  {
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v2 = (void *)objc_msgSend(this[2], "outputDevices", 0);
    result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (!result)
      return result;
    v4 = result;
    v5 = *(_QWORD *)v9;
LABEL_6:
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)v9 != v5)
        objc_enumerationMutation(v2);
      if ((objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v6), "deviceFeatures") & 4) != 0)
        break;
      if (v4 == ++v6)
      {
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
        result = 0;
        if (v4)
          goto LABEL_6;
        return result;
      }
    }
  }
  else
  {
    v7 = (void *)objc_msgSend(this[2], "outputDevice");
    if (!v7 || (objc_msgSend(v7, "deviceFeatures") & 4) == 0)
      return 0;
  }
  return 1;
}

uint64_t WebCore::MediaPlaybackTargetCocoa::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  const void *v6;

  result = WTF::fastMalloc((WTF *)0x28);
  v5 = result;
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E334CD28;
  v6 = *(const void **)(a1 + 16);
  if (v6)
    result = (uint64_t)CFRetain(v6);
  *(_BYTE *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 16) = off_1E334CCF0;
  *(_QWORD *)(v5 + 32) = v6;
  *a2 = v5;
  return result;
}

void sub_19523DFB4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebCore::MediaPlaybackTargetCocoa::create(WebCore::MediaPlaybackTargetCocoa *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  const void *v6;

  v3 = objc_msgSend((id)objc_msgSend((id)PAL::getAVAudioSessionClass(this), "sharedInstance"), "routingContextUID");
  v4 = WTF::fastMalloc((WTF *)0x28);
  v5 = (const void *)objc_msgSend((id)PAL::getAVOutputContextClass[0]((PAL *)v4), "outputContextForID:", v3);
  v6 = v5;
  if (v5)
  {
    CFRetain(v5);
    *(_DWORD *)(v4 + 8) = 1;
    *(_QWORD *)v4 = off_1E334CD28;
    CFRetain(v6);
    *(_BYTE *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 16) = off_1E334CCF0;
    *(_QWORD *)(v4 + 32) = v6;
    *a2 = v4;
    CFRelease(v6);
  }
  else
  {
    *(_DWORD *)(v4 + 8) = 1;
    *(_QWORD *)v4 = off_1E334CD28;
    *(_BYTE *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 16) = off_1E334CCF0;
    *(_QWORD *)(v4 + 32) = 0;
    *a2 = v4;
  }
}

void sub_19523E0B0(_Unwind_Exception *a1)
{
  WTF *v1;
  const void *v2;
  void *v4;

  CFRelease(v2);
  WTF::fastFree(v1, v4);
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaSelectionOptionAVFObjC::assetTrack(id *this)
{
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(this[2], "track");
  else
    return 0;
}

uint64_t WebCore::MediaSelectionGroupAVFObjC::MediaSelectionGroupAVFObjC(uint64_t a1, CFTypeRef cf, CFTypeRef a3, uint64_t a4)
{
  unint64_t StatusReg;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = cf;
  if (cf)
    CFRetain(cf);
  *(_QWORD *)(a1 + 16) = a3;
  if (a3)
    CFRetain(a3);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = off_1E3407128;
  *(_QWORD *)(a1 + 32) = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v8 = *(unsigned int **)(StatusReg + 736);
  if (!v8)
    v8 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 40) = off_1E31F7378;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E334D238;
  v10[1] = WebCore::MediaSelectionGroupAVFObjC::selectionTimerFired;
  v10[2] = 0;
  v10[3] = a1;
  *(_QWORD *)(a1 + 88) = v10;
  *(_BYTE *)(a1 + 96) = 1;
  WebCore::MediaSelectionGroupAVFObjC::updateOptions(a1, a4);
  return a1;
}

void sub_19523E208(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaSelectionGroupAVFObjC::selectionTimerFired(WebCore::MediaSelectionGroupAVFObjC *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (void *)*((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = *(_QWORD *)(v3 + 16);
  else
    v4 = 0;
  return objc_msgSend(v2, "selectMediaOption:inMediaSelectionGroup:", v4, *((_QWORD *)this + 2));
}

void WebCore::MediaSelectionGroupAVFObjC::updateOptions(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  WTF *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  PAL *v40;
  PAL *v41;
  const void *v42;
  uint64_t v43;
  PAL *v44;
  const void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  _QWORD *v54;
  const void *v55;
  _QWORD *v56;
  int v57;
  WTF *v58;
  uint64_t v59;
  int v60;
  WTF *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  const void *v67;
  const void *v68;
  void *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  PAL *v72;
  CFTypeRef v73;
  WTF *v74;
  PAL *v75;
  void *v76;
  PAL *v77;
  CFTypeRef v78;
  WTF::MonotonicTime *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  WTF::MonotonicTime *v87;
  int v88;
  double v89;
  WTF::StringImpl **v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  void *v94;
  void *v95;
  id v96;
  id obj;
  uint64_t v98;
  CFTypeRef v99;
  int v100;
  unsigned int v101;
  CFTypeRef cf;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _BYTE v111[128];
  _BYTE v112[128];
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v3 = objc_alloc(MEMORY[0x1E0C99E60]);
  v98 = a1;
  v94 = (void *)objc_msgSend(v3, "initWithArray:", objc_msgSend((id)PAL::getAVMediaSelectionGroupClass[0]((PAL *)v3), "playableMediaSelectionOptionsFromArray:", objc_msgSend(*(id *)(a1 + 16), "options")));
  v4 = objc_alloc(MEMORY[0x1E0C99E20]);
  v6 = (uint64_t *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
    LODWORD(v5) = *(_DWORD *)(v5 - 12);
  v95 = (void *)objc_msgSend(v4, "initWithCapacity:", v5);
  v7 = *v6;
  if (*v6)
  {
    v8 = *(unsigned int *)(v7 - 4);
    v9 = (_QWORD *)(v7 + 16 * v8);
    if (*(_DWORD *)(v7 - 12))
    {
      v10 = (_QWORD *)*v6;
      if ((_DWORD)v8)
      {
        v11 = 16 * v8;
        v10 = (_QWORD *)*v6;
        while ((unint64_t)(*v10 + 1) <= 1)
        {
          v10 += 2;
          v11 -= 16;
          if (!v11)
          {
            v10 = v9;
            break;
          }
        }
      }
      if (v7)
        goto LABEL_11;
      goto LABEL_15;
    }
    v10 = (_QWORD *)(v7 + 16 * v8);
  }
  else
  {
    v10 = 0;
    v8 = 0;
  }
  v9 = (_QWORD *)(v7 + 16 * v8);
  if (v7)
  {
LABEL_11:
    v12 = (_QWORD *)(v7 + 16 * *(unsigned int *)(v7 - 4));
    goto LABEL_16;
  }
LABEL_15:
  v12 = 0;
LABEL_16:
  while (v10 != v12)
  {
    objc_msgSend(v95, "addObject:", *v10);
    v13 = v10 + 2;
    v10 = v9;
    if (v13 != v9)
    {
      v10 = v13;
      while ((unint64_t)(*v10 + 1) <= 1)
      {
        v10 += 2;
        if (v10 == v9)
        {
          v10 = v9;
          break;
        }
      }
    }
  }
  v96 = (id)objc_msgSend(v94, "mutableCopy");
  objc_msgSend(v96, "minusSet:", v95);
  v14 = (void *)objc_msgSend(v95, "mutableCopy");
  objc_msgSend(v14, "minusSet:", v94);
  v109 = 0u;
  v110 = 0u;
  v107 = 0u;
  v108 = 0u;
  obj = v14;
  v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v107, v112, 16);
  if (v16)
  {
    v17 = *(_QWORD *)v108;
    do
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v108 != v17)
          objc_enumerationMutation(obj);
        v19 = *(_QWORD *)(*((_QWORD *)&v107 + 1) + 8 * v18);
        v20 = *(_QWORD *)(v98 + 32);
        if (v20 && v19 == *(_QWORD *)(v20 + 16))
          *(_QWORD *)(v98 + 32) = 0;
        v21 = *v6;
        if (*v6)
        {
          v22 = *(_DWORD *)(v21 - 8);
          v23 = (~(v19 << 32) + v19) ^ ((unint64_t)(~(v19 << 32) + v19) >> 22);
          v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
          v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
          v26 = v22 & ((v25 >> 31) ^ v25);
          v27 = *(_QWORD *)(v21 + 16 * v26);
          if (v27 != v19)
          {
            v28 = 1;
            while (v27)
            {
              v26 = ((_DWORD)v26 + v28) & v22;
              v27 = *(_QWORD *)(v21 + 16 * v26);
              ++v28;
              if (v27 == v19)
                goto LABEL_38;
            }
            v26 = *(unsigned int *)(v21 - 4);
          }
LABEL_38:
          if (v26 != *(_DWORD *)(v21 - 4))
          {
            v29 = (_QWORD *)(v21 + 16 * v26);
            v30 = (WTF *)v29[1];
            *v29 = -1;
            v29[1] = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 1)
              {
                v37 = (const void *)*((_QWORD *)v30 + 2);
                *((_QWORD *)v30 + 2) = 0;
                if (v37)
                  CFRelease(v37);
                WTF::fastFree(v30, v15);
              }
              else
              {
                --*(_DWORD *)v30;
              }
            }
            ++*(_DWORD *)(*v6 - 16);
            v31 = *v6;
            if (*v6)
              v32 = *(_DWORD *)(v31 - 12) - 1;
            else
              v32 = -1;
            *(_DWORD *)(v31 - 12) = v32;
            v33 = *v6;
            if (*v6)
            {
              v34 = 6 * *(_DWORD *)(v33 - 12);
              v35 = *(_DWORD *)(v33 - 4);
              if (v34 < v35 && v35 >= 9)
                WTF::HashTable<void const*,WTF::KeyValuePair<void const*,WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(v6, v35 >> 1);
            }
          }
        }
        ++v18;
      }
      while (v18 != v16);
      v38 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v107, v112, 16);
      v16 = v38;
    }
    while (v38);
  }
  v39 = objc_msgSend(*(id *)(v98 + 8), "selectedMediaOptionInMediaSelectionGroup:", *(_QWORD *)(v98 + 16));
  v105 = 0u;
  v106 = 0u;
  v103 = 0u;
  v104 = 0u;
  v40 = (PAL *)objc_msgSend(v96, "countByEnumeratingWithState:objects:count:", &v103, v111, 16);
  v41 = v40;
  v42 = obj;
  if (v40)
  {
    v43 = *(_QWORD *)v104;
    do
    {
      v44 = 0;
      do
      {
        if (*(_QWORD *)v104 != v43)
          objc_enumerationMutation(v96);
        v45 = *(const void **)(*((_QWORD *)&v103 + 1) + 8 * (_QWORD)v44);
        v47 = WTF::fastMalloc((WTF *)0x18);
        *(_DWORD *)v47 = 1;
        *(_QWORD *)(v47 + 8) = v98;
        *(_QWORD *)(v47 + 16) = v45;
        if (v45)
          CFRetain(v45);
        if (v45 == (const void *)v39)
          *(_QWORD *)(v98 + 32) = v47;
        v48 = *v6;
        if (*v6
          || (WTF::HashTable<void const*,WTF::KeyValuePair<void const*,WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(v6, 8u), (v48 = *v6) != 0))
        {
          v49 = *(_DWORD *)(v48 - 8);
        }
        else
        {
          v49 = 0;
        }
        v50 = ((unint64_t)v45 + ~((_QWORD)v45 << 32)) ^ (((unint64_t)v45 + ~((_QWORD)v45 << 32)) >> 22);
        v51 = 9 * ((v50 + ~(v50 << 13)) ^ ((v50 + ~(v50 << 13)) >> 8));
        v52 = (v51 ^ (v51 >> 15)) + ~((v51 ^ (v51 >> 15)) << 27);
        v53 = v49 & ((v52 >> 31) ^ v52);
        v54 = (_QWORD *)(v48 + 16 * v53);
        v55 = (const void *)*v54;
        if (*v54)
        {
          v56 = 0;
          v57 = 1;
          while (v55 != v45)
          {
            if (v55 == (const void *)-1)
              v56 = v54;
            v53 = (v53 + v57) & v49;
            v54 = (_QWORD *)(v48 + 16 * v53);
            v55 = (const void *)*v54;
            ++v57;
            if (!*v54)
            {
              if (v56)
              {
                *v56 = 0;
                v56[1] = 0;
                --*(_DWORD *)(*v6 - 16);
                v54 = v56;
              }
              goto LABEL_78;
            }
          }
          v61 = (WTF *)v54[1];
          v54[1] = v47;
          if (v61)
          {
            if (*(_DWORD *)v61 == 1)
            {
              v68 = (const void *)*((_QWORD *)v61 + 2);
              *((_QWORD *)v61 + 2) = 0;
              if (v68)
                CFRelease(v68);
              WTF::fastFree(v61, v46);
            }
            else
            {
              --*(_DWORD *)v61;
            }
          }
        }
        else
        {
LABEL_78:
          v58 = (WTF *)v54[1];
          *v54 = v45;
          v54[1] = v47;
          if (v58)
          {
            if (*(_DWORD *)v58 == 1)
            {
              v67 = (const void *)*((_QWORD *)v58 + 2);
              *((_QWORD *)v58 + 2) = 0;
              if (v67)
                CFRelease(v67);
              WTF::fastFree(v58, v46);
            }
            else
            {
              --*(_DWORD *)v58;
            }
          }
          v59 = *v6;
          if (*v6)
            v60 = *(_DWORD *)(v59 - 12) + 1;
          else
            v60 = 1;
          v42 = obj;
          *(_DWORD *)(v59 - 12) = v60;
          v62 = *v6;
          if (*v6)
            v63 = *(_DWORD *)(v62 - 12);
          else
            v63 = 0;
          v64 = (*(_DWORD *)(v62 - 16) + v63);
          v65 = *(unsigned int *)(v62 - 4);
          if (v65 <= 0x400)
          {
            if (3 * v65 > 4 * v64)
              goto LABEL_97;
            if ((_DWORD)v65)
LABEL_93:
              v66 = (_DWORD)v65 << (6 * *(_DWORD *)(v62 - 12) >= (2 * v65));
            else
              v66 = 8;
            WTF::HashTable<void const*,WTF::KeyValuePair<void const*,WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(v6, v66);
            goto LABEL_97;
          }
          if (v65 <= 2 * v64)
            goto LABEL_93;
        }
LABEL_97:
        v44 = (PAL *)((char *)v44 + 1);
      }
      while (v44 != v41);
      v40 = (PAL *)objc_msgSend(v96, "countByEnumeratingWithState:objects:count:", &v103, v111, 16);
      v41 = v40;
    }
    while (v40);
  }
  if (*(_BYTE *)(v98 + 96))
  {
    v69 = (void *)PAL::getAVMediaSelectionGroupClass[0](v40);
    v70 = objc_msgSend(*(id *)(v98 + 16), "options");
    WTF::userPreferredLanguages();
    WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v99, (uint64_t *)&cf);
    v72 = (PAL *)objc_msgSend(v69, "mediaSelectionOptionsFromArray:filteredAndSortedAccordingToPreferredLanguages:", v70, cf);
    v73 = cf;
    cf = 0;
    if (v73)
      CFRelease(v73);
    if (v101)
    {
      v90 = (WTF::StringImpl **)v99;
      v91 = 8 * v101;
      do
      {
        v92 = *v90;
        *v90 = 0;
        if (v92)
        {
          if (*(_DWORD *)v92 == 2)
            WTF::StringImpl::destroy(v92, v71);
          else
            *(_DWORD *)v92 -= 2;
        }
        ++v90;
        v91 -= 8;
      }
      while (v91);
    }
    v74 = (WTF *)v99;
    if (v99)
    {
      v99 = 0;
      v100 = 0;
      WTF::fastFree(v74, v71);
    }
    v42 = obj;
    if (-[PAL count](v72, "count") || *(_DWORD *)(a2 + 12))
    {
      v75 = (PAL *)-[PAL count](v72, "count");
      if (!v75)
      {
        v75 = (PAL *)objc_msgSend(*(id *)(v98 + 16), "options");
        v72 = v75;
      }
      v76 = (void *)PAL::getAVMediaSelectionGroupClass[0](v75);
      WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a2, (uint64_t *)&v99);
      v77 = (PAL *)objc_msgSend(v76, "mediaSelectionOptionsFromArray:withMediaCharacteristics:", v72, v99);
      v78 = v99;
      v99 = 0;
      if (v78)
        CFRelease(v78);
      if (v77 && -[PAL count](v77, "count"))
        v72 = v77;
      if (-[PAL count](v72, "count"))
      {
        v79 = (WTF::MonotonicTime *)-[PAL objectAtIndex:](v72, "objectAtIndex:", 0);
        v80 = *(_QWORD *)(v98 + 32);
        if (!v80 || *(WTF::MonotonicTime **)(v80 + 16) != v79)
        {
          v81 = *v6;
          if (*v6)
          {
            v82 = *(_DWORD *)(v81 - 8);
            v83 = ((unint64_t)v79 + ~((_QWORD)v79 << 32)) ^ (((unint64_t)v79 + ~((_QWORD)v79 << 32)) >> 22);
            v84 = 9 * ((v83 + ~(v83 << 13)) ^ ((v83 + ~(v83 << 13)) >> 8));
            v85 = (v84 ^ (v84 >> 15)) + ~((v84 ^ (v84 >> 15)) << 27);
            v86 = v82 & ((v85 >> 31) ^ v85);
            v87 = *(WTF::MonotonicTime **)(v81 + 16 * v86);
            if (v87 == v79)
            {
LABEL_131:
              v81 = *(_QWORD *)(v81 + 16 * v86 + 8);
            }
            else
            {
              v88 = 1;
              while (v87)
              {
                v86 = ((_DWORD)v86 + v88) & v82;
                v87 = *(WTF::MonotonicTime **)(v81 + 16 * v86);
                ++v88;
                if (v87 == v79)
                  goto LABEL_131;
              }
              v81 = 0;
            }
          }
          *(_QWORD *)(v98 + 32) = v81;
          *(_QWORD *)(v98 + 64) = 0;
          WTF::MonotonicTime::now(v79);
          WebCore::TimerBase::setNextFireTime(v98 + 40, v89 + 0.0);
        }
      }
    }
  }
  if (v42)
    CFRelease(v42);
  if (v96)
    CFRelease(v96);
  if (v95)
    CFRelease(v95);
  if (v94)
    CFRelease(v94);
}

void sub_19523EC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, CFTypeRef a12, CFTypeRef cf, uint64_t a14, uint64_t a15, CFTypeRef a16, int a17, int a18, CFTypeRef a19)
{
  const void *v19;

  if (v19)
    CFRelease(v19);
  if (cf)
    CFRelease(cf);
  if (a12)
    CFRelease(a12);
  if (a11)
    CFRelease(a11);
  _Unwind_Resume(exception_object);
}

void WebCore::MediaSelectionGroupAVFObjC::~MediaSelectionGroupAVFObjC(WebCore::MediaSelectionGroupAVFObjC *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  WTF **v12;
  WTF *v13;
  const void *v14;
  const void *v15;
  const void *v16;

  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (!v2)
  {
    v5 = 0;
    v3 = 0;
LABEL_10:
    v4 = &v2[2 * v3];
    goto LABEL_11;
  }
  v3 = *((unsigned int *)v2 - 1);
  v4 = &v2[2 * v3];
  if (!*((_DWORD *)v2 - 3))
  {
    v5 = &v2[2 * v3];
    goto LABEL_10;
  }
  v5 = (_QWORD *)*((_QWORD *)this + 3);
  if ((_DWORD)v3)
  {
    v6 = 16 * v3;
    v5 = (_QWORD *)*((_QWORD *)this + 3);
    while ((unint64_t)(*v5 + 1) <= 1)
    {
      v5 += 2;
      v6 -= 16;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_11:
  if (v2)
    v2 += 2 * *((unsigned int *)v2 - 1);
  while (v5 != v2)
  {
    *(_QWORD *)(v5[1] + 8) = 0;
    v7 = v5 + 2;
    v5 = v4;
    if (v7 != v4)
    {
      v5 = v7;
      while ((unint64_t)(*v5 + 1) <= 1)
      {
        v5 += 2;
        if (v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
  }
  *((_QWORD *)this + 5) = off_1E31F7378;
  v8 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  WebCore::TimerBase::~TimerBase((WebCore::MediaSelectionGroupAVFObjC *)((char *)this + 40));
  v10 = *((_QWORD *)this + 3);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v11)
    {
      v12 = (WTF **)(v10 + 8);
      do
      {
        if (*(v12 - 1) != (WTF *)-1)
        {
          v13 = *v12;
          *v12 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 1)
            {
              v14 = (const void *)*((_QWORD *)v13 + 2);
              *((_QWORD *)v13 + 2) = 0;
              if (v14)
                CFRelease(v14);
              WTF::fastFree(v13, v9);
            }
            else
            {
              --*(_DWORD *)v13;
            }
          }
        }
        v12 += 2;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree((WTF *)(v10 - 16), v9);
  }
  v15 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v15)
    CFRelease(v15);
  v16 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v16)
    CFRelease(v16);
}

void WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  const WTF::String *v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  const void *v10;
  CFTypeRef cf;

  v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a1 + 12));
  *a2 = v4;
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6)
  {
    v7 = (void *)v4;
    v8 = *(WTF **)a1;
    v9 = 8 * v6;
    do
    {
      WTF::makeNSArrayElement(v8, v5);
      if (cf)
      {
        objc_msgSend(v7, "addObject:");
        v10 = cf;
        cf = 0;
        CFRelease(v10);
      }
      v8 = (WTF *)((char *)v8 + 8);
      v9 -= 8;
    }
    while (v9);
  }
}

void sub_19523EFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  _QWORD *v10;
  const void *v11;

  if (cf)
    CFRelease(cf);
  *v10 = 0;
  if (v11)
    CFRelease(v11);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AVAssetMIMETypeCache::canDecodeExtendedType(WebCore::AVAssetMIMETypeCache *this, PAL **a2, double a3, double a4, float a5)
{
  PAL *v5;
  char v6;
  double v7;
  double v8;
  float v9;
  WTF::StringImpl *v10;
  double v11;
  double v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  BOOL v16;
  _BOOL8 v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;
  double v22;
  double v23;
  float v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF *v33;
  WTF::StringImpl *v34;
  uint64_t inited;
  WTF::StringImpl *v36;
  void *v37;
  const __CFString *v38;
  char v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  void *v43;
  const __CFString *v44;
  uint64_t v45;
  PAL *v46;
  WTF *v48;
  void *v49;
  void *v50;
  void *v51;
  unint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  WTF::StringImpl *v59;
  int v60;
  unsigned int v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  PAL *v64;
  char v65;
  unsigned int v66;
  WTF *v67[2];
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[2];

  v71[1] = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if (*a2)
    *(_DWORD *)v5 += 2;
  v64 = v5;
  v65 = *((_BYTE *)a2 + 8);
  WebCore::ContentType::containerType((WebCore::ContentType *)&v64, a3, a4, a5);
  v6 = MEMORY[0x19AEA53F4](v63, "video/mp4", 9);
  if ((v6 & 1) != 0
    || (WebCore::ContentType::containerType((WebCore::ContentType *)&v64, v7, v8, v9),
        MEMORY[0x19AEA53F4](v62, "audio/mp4", 9)))
  {
    WebCore::ContentType::codecs((WebCore::ContentType *)&v64, (uint64_t)&v59, v9);
    if (v61)
    {
      v13 = 0;
      while ((MEMORY[0x19AEA53F4](*((_QWORD *)v59 + v13), "opus", 4) & 1) == 0)
      {
        ++v13;
        v15 = v61;
        if (v13 >= v61)
        {
          v16 = 0;
          if (!v61)
            goto LABEL_16;
          goto LABEL_74;
        }
      }
      if (byte_1ECE818E2 == 1)
      {
        LOBYTE(v17) = byte_1ECE818E1 != 0;
      }
      else
      {
        if (!WebCore::PlatformMediaSessionManager::m_opusDecoderEnabled)
          goto LABEL_105;
        if (WebCore::registerOpusDecoderIfNeeded(void)::onceToken != -1)
          dispatch_once(&WebCore::registerOpusDecoderIfNeeded(void)::onceToken, &__block_literal_global_51);
        if (WebCore::registerOpusDecoderIfNeeded(void)::available)
        {
          v69 = 0;
          *(_OWORD *)v67 = 0u;
          v68 = 0u;
          LODWORD(v67[1]) = 1869641075;
          v66 = 0;
          LOBYTE(v17) = 0;
          if (!PAL::softLinkAudioToolboxAudioFormatGetPropertyInfo((PAL *)0x6164636C, 0x28u, v67, &v66, v14)&& v66 >= 4)
          {
            v48 = (WTF *)(4 * ((unint64_t)v66 >> 2));
            v49 = (void *)WTF::fastMalloc(v48);
            bzero(v49, (size_t)v48);
            if (PAL::softLinkAudioToolboxAudioFormatGetProperty((PAL *)0x6164636C, 0x28u, v67, &v66, (unsigned int *)v49, v50))
            {
              LOBYTE(v17) = 0;
            }
            else
            {
              v52 = 0;
              v53 = (unsigned int *)v49;
              do
              {
                v55 = *v53++;
                v54 = v55;
                v56 = v55 & 0xFFFF0000;
                v57 = (unsigned __int16)v55;
                if (v52 > (unsigned __int16)v55)
                  v57 = v52;
                if (v56 != 9633792 && v54 <= 0xFFFEFFFF)
                  v52 = v57;
                v48 = (WTF *)((char *)v48 - 4);
              }
              while (v48);
              v17 = v52 > 2;
            }
            WTF::fastFree((WTF *)v49, v51);
          }
        }
        else
        {
LABEL_105:
          LOBYTE(v17) = 0;
        }
        byte_1ECE818E1 = v17;
        byte_1ECE818E2 = 1;
      }
      v16 = !v17;
      v15 = v61;
      if (v61)
      {
LABEL_74:
        v40 = v59;
        v41 = 8 * v15;
        do
        {
          v42 = *(WTF::StringImpl **)v40;
          *(_QWORD *)v40 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
              WTF::StringImpl::destroy(v42, v10);
            else
              *(_DWORD *)v42 -= 2;
          }
          v40 = (WTF::StringImpl *)((char *)v40 + 8);
          v41 -= 8;
        }
        while (v41);
      }
    }
    else
    {
      v16 = 0;
    }
LABEL_16:
    v18 = v59;
    if (v59)
    {
      v59 = 0;
      v60 = 0;
      WTF::fastFree(v18, v10);
      if ((v6 & 1) != 0)
        goto LABEL_21;
    }
    else if ((v6 & 1) != 0)
    {
      goto LABEL_21;
    }
  }
  else
  {
    v16 = 0;
  }
  v19 = v62;
  v62 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v10);
    else
      *(_DWORD *)v19 -= 2;
  }
LABEL_21:
  v20 = v63;
  v63 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::destroy(v20, v10);
      if (v16)
        goto LABEL_90;
      goto LABEL_25;
    }
    *(_DWORD *)v20 -= 2;
  }
  if (v16)
    goto LABEL_90;
LABEL_25:
  WebCore::ContentType::containerType((WebCore::ContentType *)&v64, v11, v12, v9);
  v21 = MEMORY[0x19AEA53F4](v59, "video/mp4", 9);
  if ((v21 & 1) != 0
    || (WebCore::ContentType::containerType((WebCore::ContentType *)&v64, v22, v23, v24),
        MEMORY[0x19AEA53F4](v63, "audio/mp4", 9)))
  {
    WebCore::ContentType::codecs((WebCore::ContentType *)&v64, (uint64_t)v67, v24);
    if (HIDWORD(v67[1]))
    {
      v26 = 0;
      do
      {
        v27 = MEMORY[0x19AEA53F4](*((_QWORD *)v67[0] + v26), "flac", 4);
        v28 = v27;
        if (++v26 >= (unint64_t)HIDWORD(v67[1]))
          v29 = 1;
        else
          v29 = v27;
      }
      while (v29 != 1);
      if (HIDWORD(v67[1]))
      {
        v30 = (WTF::StringImpl **)v67[0];
        v31 = 8 * HIDWORD(v67[1]);
        do
        {
          v32 = *v30;
          *v30 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, v25);
            else
              *(_DWORD *)v32 -= 2;
          }
          ++v30;
          v31 -= 8;
        }
        while (v31);
      }
    }
    else
    {
      v28 = 0;
    }
    v33 = v67[0];
    if (v67[0])
    {
      v67[0] = 0;
      LODWORD(v67[1]) = 0;
      WTF::fastFree(v33, v25);
      if ((v21 & 1) != 0)
        goto LABEL_49;
    }
    else if ((v21 & 1) != 0)
    {
      goto LABEL_49;
    }
  }
  else
  {
    v28 = 0;
  }
  v34 = v63;
  v63 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v25);
    else
      *(_DWORD *)v34 -= 2;
  }
LABEL_49:
  inited = (uint64_t)v59;
  v59 = 0;
  if (inited)
  {
    if (*(_DWORD *)inited == 2)
    {
      inited = WTF::StringImpl::destroy((WTF::StringImpl *)inited, v25);
      if (!v28)
        goto LABEL_59;
      goto LABEL_53;
    }
    *(_DWORD *)inited -= 2;
  }
  if (!v28)
    goto LABEL_59;
LABEL_53:
  inited = (uint64_t)v64;
  if (v64)
  {
    WTF::StringImpl::replace();
    inited = (uint64_t)v64;
    v64 = v67[0];
    if (inited)
    {
      if (*(_DWORD *)inited == 2)
        inited = WTF::StringImpl::destroy((WTF::StringImpl *)inited, v36);
      else
        *(_DWORD *)inited -= 2;
    }
  }
  else
  {
    v64 = 0;
  }
  v65 = 0;
LABEL_59:
  {
    if (!PAL::canLoad_AVFoundation_AVURLAssetExtendedMIMETypePlayabilityTreatPlaylistMIMETypesAsISOBMFFMediaDataContainersKey(void)::loaded)
      goto LABEL_85;
  }
  else
  {
    inited = PAL::init_AVFoundation_AVURLAssetExtendedMIMETypePlayabilityTreatPlaylistMIMETypesAsISOBMFFMediaDataContainersKey((PAL *)inited);
    PAL::canLoad_AVFoundation_AVURLAssetExtendedMIMETypePlayabilityTreatPlaylistMIMETypesAsISOBMFFMediaDataContainersKey(void)::loaded = inited;
    if (!(_DWORD)inited)
      goto LABEL_85;
  }
  PAL::getAVURLAssetClass[0]((PAL *)inited);
  inited = objc_opt_respondsToSelector();
  if ((inited & 1) != 0)
  {
    v37 = (void *)PAL::getAVURLAssetClass[0]((PAL *)inited);
    if (v64)
      v38 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v38 = &stru_1E3487BC0;
    v70 = PAL::constantAVFoundationAVURLAssetExtendedMIMETypePlayabilityTreatPlaylistMIMETypesAsISOBMFFMediaDataContainersKey;
    v71[0] = MEMORY[0x1E0C9AAB0];
    v39 = objc_msgSend(v37, "isPlayableExtendedMIMEType:options:", v38, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v71, &v70, 1));
    goto LABEL_88;
  }
LABEL_85:
  v43 = (void *)PAL::getAVURLAssetClass[0]((PAL *)inited);
  if (v64)
    v44 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v44 = &stru_1E3487BC0;
  v39 = objc_msgSend(v43, "isPlayableExtendedMIMEType:", v44);
LABEL_88:
  if ((v39 & 1) != 0)
  {
    v45 = 1;
    goto LABEL_91;
  }
LABEL_90:
  v45 = 0;
LABEL_91:
  v46 = v64;
  v64 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v10);
    else
      *(_DWORD *)v46 -= 2;
  }
  return v45;
}

void sub_19523F610(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl **a10, int a11, unsigned int a12, WTF::StringImpl *a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, WTF *a18, int a19, int a20)
{
  char v20;
  WTF *v21;
  WTF::StringImpl *v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl *v26;

  WTF::fastFree(v21, a2);
  if (a12)
  {
    v24 = a10;
    v25 = 8 * a12;
    do
    {
      v26 = *v24;
      *v24 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v23);
        else
          *(_DWORD *)v26 -= 2;
      }
      ++v24;
      v25 -= 8;
    }
    while (v25);
  }
  if (a10)
  {
    WTF::fastFree((WTF *)a10, v23);
    if ((v20 & 1) != 0)
      goto LABEL_7;
  }
  else if ((v20 & 1) != 0)
  {
    goto LABEL_7;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, v23);
    else
      *(_DWORD *)a13 -= 2;
  }
LABEL_7:
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, v23);
    else
      *(_DWORD *)a14 -= 2;
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, v23);
    else
      *(_DWORD *)a15 -= 2;
  }
  _Unwind_Resume(a1);
}

BOOL WebCore::AVAssetMIMETypeCache::isUnsupportedContainerType(WebCore::AVAssetMIMETypeCache *this, const WTF::String *a2)
{
  _BOOL8 v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  const char *v7;
  int v8;
  char **v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  WTF::StringImpl *v16;

  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
    return 0;
  WTF::String::convertToASCIILowercase(a2);
  if (!v16)
    return 1;
  if ((WTF::StringImpl::startsWith() & 1) == 0
    && (WTF::StringImpl::startsWith() & 1) == 0
    && (WTF::StringImpl::startsWith() & 1) == 0)
  {
    v2 = 1;
    v5 = v16;
    goto LABEL_37;
  }
  v5 = v16;
  v6 = *((_DWORD *)v16 + 4);
  v7 = (const char *)*((_QWORD *)v16 + 1);
  v8 = *((_DWORD *)v16 + 1);
  if (v7 != "video/h264" && v8 == 10)
  {
    if ((v6 & 4) != 0)
    {
      if (*v7 == 118 && *(_QWORD *)(v7 + 1) == 0x3632682F6F656469)
      {
        if (*(_QWORD *)(v7 + 2) == 0x343632682F6F6564)
          v10 = &WebCore::AVAssetMIMETypeCache::isUnsupportedContainerType(WTF::String const&)::unsupportedTypesArray;
        else
          v10 = &WebCore::AVAssetMIMETypeCache::isStaticContainerType(WTF::StringView)::staticContainerTypesArray;
        goto LABEL_36;
      }
    }
    else if (*(_WORD *)v7 == 118)
    {
      v11 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v7 + 2), (int16x8_t)xmmword_1968DCEC0);
      v11.i16[0] = vminvq_u16(v11);
      if (v11.i32[0])
      {
        v12 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v7 + 4), (int16x8_t)xmmword_1968DCED0);
        v12.i16[0] = vminvq_u16(v12);
        if (v12.i32[0])
          goto LABEL_22;
      }
    }
    goto LABEL_35;
  }
  if (v7 != "video/h264" || v8 != 10)
  {
    if (v7 == "video/x-flv" || v8 != 11)
    {
      if (v8 == 11 && v7 == "video/x-flv")
        goto LABEL_30;
    }
    else if ((v6 & 4) != 0)
    {
      if (*v7 == 118 && *(_QWORD *)(v7 + 1) == 0x662D782F6F656469 && *(_QWORD *)(v7 + 3) == 0x766C662D782F6F65)
      {
LABEL_30:
        v10 = &off_1E334CD58;
        goto LABEL_36;
      }
    }
    else if (*(_WORD *)v7 == 118)
    {
      v13 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v7 + 2), (int16x8_t)xmmword_1968DCEE0);
      v13.i16[0] = vminvq_u16(v13);
      if (v13.i32[0])
      {
        v14 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v7 + 6), (int16x8_t)xmmword_1968DCEF0);
        v14.i16[0] = vminvq_u16(v14);
        if (v14.i32[0])
          goto LABEL_30;
      }
    }
LABEL_35:
    v10 = &WebCore::AVAssetMIMETypeCache::isStaticContainerType(WTF::StringView)::staticContainerTypesArray;
    goto LABEL_36;
  }
LABEL_22:
  v10 = &WebCore::AVAssetMIMETypeCache::isUnsupportedContainerType(WTF::String const&)::unsupportedTypesArray;
LABEL_36:
  v2 = (char *)v10
     - (char *)&WebCore::AVAssetMIMETypeCache::isUnsupportedContainerType(WTF::String const&)::unsupportedTypesArray != 32;
LABEL_37:
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, v4);
  else
    *(_DWORD *)v5 -= 2;
  return v2;
}

void sub_19523FA5C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AVAssetMIMETypeCache::isStaticContainerType(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  char *v3;
  char **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  char *v15;
  char *v16;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  char *v26;
  unint64_t v27;
  char *v28;
  int v29;
  int v30;
  char *v31;
  unsigned __int16 v32;
  int v33;

  v3 = (char *)a3;
  v4 = &WebCore::AVAssetMIMETypeCache::isStaticContainerType(WTF::StringView)::staticContainerTypesArray;
  v5 = a3 & 0xFF00000000;
  if ((a3 & 0xFF00000000) != 0)
  {
    if (!(_DWORD)a3)
      goto LABEL_14;
    v6 = 0;
    v7 = 31;
    do
    {
      v8 = v7 >> 1;
      v9 = v6 + (v7 >> 1);
      v10 = (&WebCore::AVAssetMIMETypeCache::isStaticContainerType(WTF::StringView)::staticContainerTypesArray)[2 * v9];
      v11 = v3;
      v12 = a2;
      while (1)
      {
        v13 = *v10;
        if (!*v10)
          break;
        v14 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v12);
        if (v14 != v13)
        {
          if (v13 >= v14)
            goto LABEL_11;
          break;
        }
        ++v10;
        ++v12;
        if (!--v11)
          goto LABEL_11;
      }
      v6 = v9 + 1;
      v8 = v7 + ~v8;
LABEL_11:
      v7 = v8;
    }
    while (v8);
  }
  else
  {
    if (!(_DWORD)a3)
      goto LABEL_14;
    v6 = 0;
    v18 = 31;
    do
    {
      v19 = v18 >> 1;
      v20 = v6 + (v18 >> 1);
      v21 = (&WebCore::AVAssetMIMETypeCache::isStaticContainerType(WTF::StringView)::staticContainerTypesArray)[2 * v20];
      v22 = 2 * (_QWORD)v3;
      v23 = a2;
      while (1)
      {
        v24 = *v21;
        if (!*v21)
          break;
        v25 = *(unsigned __int16 *)v23 | (32 * (*(unsigned __int16 *)v23 - 65 < 0x1A));
        if (v25 != v24)
        {
          if (v24 >= v25)
            goto LABEL_28;
          break;
        }
        ++v21;
        v23 += 2;
        v22 -= 2;
        if (!v22)
          goto LABEL_28;
      }
      v6 = v20 + 1;
      v19 = v18 + ~v19;
LABEL_28:
      v18 = v19;
    }
    while (v19);
  }
  if (v6 == 31)
    return 0;
  v4 = &(&WebCore::AVAssetMIMETypeCache::isStaticContainerType(WTF::StringView)::staticContainerTypesArray)[2 * v6];
LABEL_14:
  v15 = v4[1];
  if (v15)
    v16 = v15 - 1;
  else
    v16 = 0;
  if (v16 != v3)
    return 0;
  v26 = *v4;
  if (!v5)
  {
    if (!v3)
      return 1;
    if ((*(unsigned __int16 *)a2 | 0x20) == (unsigned __int16)*v26)
    {
      v27 = 0;
      v31 = v26 + 1;
      while (v3 - 1 != (char *)v27)
      {
        v32 = v31[v27];
        v33 = *(unsigned __int16 *)&a2[2 * v27++ + 2] | 0x20;
        if (v33 != v32)
          return v27 >= (unint64_t)v3;
      }
      goto LABEL_43;
    }
    return 0;
  }
  if (!v3)
    return 1;
  if ((*a2 | 0x20) != *v26)
    return 0;
  v27 = 0;
  v28 = v26 + 1;
  while (v3 - 1 != (char *)v27)
  {
    v29 = v28[v27];
    v30 = a2[++v27] | 0x20;
    if (v30 != v29)
      return v27 >= (unint64_t)v3;
  }
LABEL_43:
  v27 = (unint64_t)v3;
  return v27 >= (unint64_t)v3;
}

WTF *WebCore::AVAssetMIMETypeCache::addSupportedTypes(WTF *result, uint64_t a2, const WTF::StringImpl *a3)
{
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  _BYTE v8[24];

  v4 = result;
  if (!*((_BYTE *)result + 16))
  {
    *((_QWORD *)result + 1) = 0;
    *((_BYTE *)result + 16) = 1;
  }
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(WTF::StringImpl ***)a2;
    v7 = 8 * v5;
    while (*((_BYTE *)v4 + 16))
    {
      result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)v4 + 1, v6++, a3, (uint64_t)v8);
      v7 -= 8;
      if (!v7)
        goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
LABEL_7:
    result = (WTF *)*((_QWORD *)v4 + 8);
    if (result)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 48))(result, a2);
  }
  return result;
}

PAL *WebCore::AVAssetMIMETypeCache::initializeCache(uint64_t a1, _QWORD **a2)
{
  PAL *result;
  PAL *v5;
  uint64_t v6;
  PAL *v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  WTF **v15;
  int i;
  unsigned int v17;
  WTF **v18;
  WTF *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _QWORD *v22;
  int v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t j;
  WTF::StringImpl *v33;
  _QWORD *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  unsigned int v49;
  _DWORD *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  id obj;
  WTF::StringImpl *v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[128];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  result = (PAL *)PAL::AVFoundationLibrary((PAL *)1);
  if (!result)
    return result;
  v56 = a1;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  obj = (id)objc_msgSend((id)PAL::getAVURLAssetClass[0](result), "audiovisualMIMETypes");
  result = (PAL *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v64, 16);
  v5 = result;
  if (!result)
    goto LABEL_67;
  v6 = *(_QWORD *)v61;
  do
  {
    v7 = 0;
    do
    {
      if (*(_QWORD *)v61 != v6)
        objc_enumerationMutation(obj);
      MEMORY[0x19AEA5508](&v58, *(_QWORD *)(*((_QWORD *)&v60 + 1) + 8 * (_QWORD)v7));
      v10 = *a2;
      if (*a2
        || (v11 = WTF::fastZeroedMalloc((WTF *)0x50),
            *a2 = (_QWORD *)(v11 + 16),
            *(_DWORD *)(v11 + 12) = 8,
            *((_DWORD *)*a2 - 2) = 7,
            *((_DWORD *)*a2 - 4) = 0,
            *((_DWORD *)*a2 - 3) = 0,
            (v10 = *a2) != 0))
      {
        v12 = *((_DWORD *)v10 - 2);
      }
      else
      {
        v12 = 0;
      }
      v13 = *((_DWORD *)v58 + 4);
      if (v13 < 0x100)
        v14 = WTF::StringImpl::hashSlowCase(v58);
      else
        v14 = v13 >> 8;
      v15 = 0;
      for (i = 1; ; ++i)
      {
        v17 = v14 & v12;
        v18 = (WTF **)&v10[v14 & v12];
        v19 = *v18;
        if (*v18 == (WTF *)-1)
        {
          v15 = (WTF **)&v10[v17];
          goto LABEL_19;
        }
        if (!v19)
          break;
        if ((WTF::equal(v19, v58, v9) & 1) != 0)
          goto LABEL_55;
LABEL_19:
        v14 = i + v17;
      }
      if (v15)
      {
        *v15 = 0;
        --*((_DWORD *)*a2 - 4);
        v18 = v15;
      }
      v20 = v58;
      v58 = 0;
      v21 = *v18;
      *v18 = v20;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v8);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = *a2;
      if (*a2)
        v23 = *((_DWORD *)v22 - 3) + 1;
      else
        v23 = 1;
      *((_DWORD *)v22 - 3) = v23;
      v24 = *a2;
      if (*a2)
        v25 = *((_DWORD *)v24 - 3);
      else
        v25 = 0;
      v26 = (*((_DWORD *)v24 - 4) + v25);
      v27 = *((unsigned int *)v24 - 1);
      if (v27 > 0x400)
      {
        if (v27 <= 2 * v26)
        {
LABEL_34:
          v28 = *((_DWORD *)v24 - 3);
          v29 = (_DWORD)v27 << (6 * v28 >= (2 * v27));
          goto LABEL_35;
        }
      }
      else if (3 * v27 <= 4 * v26)
      {
        if ((_DWORD)v27)
          goto LABEL_34;
        v28 = *((_DWORD *)v24 - 3);
        v29 = 8;
LABEL_35:
        v30 = WTF::fastZeroedMalloc((WTF *)(8 * v29 + 16));
        *a2 = (_QWORD *)(v30 + 16);
        *(_DWORD *)(v30 + 12) = v29;
        *((_DWORD *)*a2 - 2) = v29 - 1;
        *((_DWORD *)*a2 - 4) = 0;
        *((_DWORD *)*a2 - 3) = v28;
        if ((_DWORD)v27)
        {
          for (j = 0; j != v27; ++j)
          {
            v33 = (WTF::StringImpl *)v24[j];
            if (v33)
            {
              if (v33 != (WTF::StringImpl *)-1)
              {
                v34 = *a2;
                v35 = *a2 ? *((_DWORD *)v34 - 2) : 0;
                v36 = *((_DWORD *)v33 + 4);
                v37 = v36 < 0x100 ? WTF::StringImpl::hashSlowCase(v33) : v36 >> 8;
                v38 = 0;
                do
                {
                  v39 = v37 & v35;
                  v37 = ++v38 + v39;
                }
                while (v34[v39]);
                v34[v39] = 0;
                v40 = v24[j];
                v24[j] = 0;
                v34[v39] = v40;
                v41 = (WTF::StringImpl *)v24[j];
                v24[j] = 0;
                if (v41)
                {
                  if (*(_DWORD *)v41 == 2)
                    WTF::StringImpl::destroy(v41, v31);
                  else
                    *(_DWORD *)v41 -= 2;
                }
              }
            }
            else
            {
              v24[j] = 0;
            }
          }
        }
        WTF::fastFree((WTF *)(v24 - 2), v31);
      }
LABEL_55:
      v42 = v58;
      v58 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v8);
        else
          *(_DWORD *)v42 -= 2;
      }
      v7 = (PAL *)((char *)v7 + 1);
    }
    while (v7 != v5);
    result = (PAL *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v64, 16);
    v5 = result;
  }
  while (result);
LABEL_67:
  v43 = v56;
  if (*(_QWORD *)(v56 + 64))
  {
    v44 = 0;
    v58 = 0;
    v59 = 0;
    if (!*a2)
      goto LABEL_72;
    v45 = *((unsigned int *)*a2 - 3);
    if (!(_DWORD)v45)
      goto LABEL_98;
    if (v45 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v44 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v45));
      LODWORD(v59) = v45;
      v58 = v44;
      v43 = v56;
      while (1)
      {
LABEL_72:
        v46 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
        v48 = *a2;
        if (*a2)
          v48 += *((unsigned int *)v48 - 1);
        if (v48 != v46)
        {
          v49 = 0;
          do
          {
            v50 = (_DWORD *)*v46;
            if (*v46)
              *v50 += 2;
            *((_QWORD *)v44 + v49) = v50;
            while (++v46 != v47)
            {
              if ((unint64_t)(*v46 + 1) > 1)
                goto LABEL_83;
            }
            v46 = v47;
LABEL_83:
            ++v49;
          }
          while (v46 != v48);
          HIDWORD(v59) = v49;
        }
        v51 = *(_QWORD *)(v43 + 64);
        if (v51)
          break;
        std::__throw_bad_function_call[abi:sn180100]();
        __break(1u);
LABEL_98:
        v44 = 0;
      }
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v51 + 48))(v51, &v58);
      if (HIDWORD(v59))
      {
        v53 = v58;
        v54 = 8 * HIDWORD(v59);
        do
        {
          v55 = *(WTF::StringImpl **)v53;
          *(_QWORD *)v53 = 0;
          if (v55)
          {
            if (*(_DWORD *)v55 == 2)
              WTF::StringImpl::destroy(v55, v52);
            else
              *(_DWORD *)v55 -= 2;
          }
          v53 = (WTF::StringImpl *)((char *)v53 + 8);
          v54 -= 8;
        }
        while (v54);
      }
      result = v58;
      if (v58)
      {
        v58 = 0;
        LODWORD(v59) = 0;
        return (PAL *)WTF::fastFree(result, v52);
      }
    }
  }
  return result;
}

void sub_195240218(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, int a12, int a13)
{
  WTF *v13;

  if (v13)
    WTF::fastFree(v13, a2);
  _Unwind_Resume(exception_object);
}

uint64_t *WebCore::AVStreamDataParserMIMETypeCache::singleton(WebCore::AVStreamDataParserMIMETypeCache *this)
{
  {
    unk_1EE2F4EB8 = 0u;
    unk_1EE2F4EA8 = 0u;
    WebCore::AVStreamDataParserMIMETypeCache::singleton(void)::cache = (uint64_t)off_1E334D068;
  }
  return &WebCore::AVStreamDataParserMIMETypeCache::singleton(void)::cache;
}

uint64_t WebCore::AVStreamDataParserMIMETypeCache::isAvailable(WebCore::AVStreamDataParserMIMETypeCache *this)
{
  uint64_t v1;

  v1 = PAL::AVFoundationLibrary(0);
  if (v1)
  {
    PAL::getAVStreamDataParserClass((PAL *)v1);
    LOBYTE(v1) = objc_opt_respondsToSelector();
  }
  return v1 & 1;
}

uint64_t WebCore::AVStreamDataParserMIMETypeCache::canDecodeType(WebCore::AVStreamDataParserMIMETypeCache *this, WTF::StringImpl **a2)
{
  PAL *v4;
  const WTF::StringImpl *v5;
  WebCore::MIMETypeCache *v6;
  uint64_t result;

  v4 = (PAL *)PAL::AVFoundationLibrary(0);
  if (v4)
  {
    PAL::getAVStreamDataParserClass(v4);
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v6 = this;
      return WebCore::MIMETypeCache::canDecodeType(v6, a2, v5);
    }
  }
  {
    qword_1ECE88A28 = 0;
    qword_1ECE88A30 = 0;
    unk_1ECE88A18 = 0u;
    *(__int128 *)((char *)&xmmword_1ECE88A00 + 8) = 0u;
    *(_OWORD *)&qword_1ECE889F8 = 0u;
    WebCore::AVAssetMIMETypeCache::singleton(void)::cache = (uint64_t)off_1E334D010;
  }
  result = PAL::AVFoundationLibrary((PAL *)1);
  if (result)
  {
    v6 = (WebCore::MIMETypeCache *)&WebCore::AVAssetMIMETypeCache::singleton(void)::cache;
    return WebCore::MIMETypeCache::canDecodeType(v6, a2, v5);
  }
  return result;
}

uint64_t *WebCore::AVStreamDataParserMIMETypeCache::supportedTypes(WebCore::AVStreamDataParserMIMETypeCache *this)
{
  PAL *v2;
  uint64_t *v3;
  uint64_t *v4;

  v2 = (PAL *)PAL::AVFoundationLibrary(0);
  if (v2)
  {
    PAL::getAVStreamDataParserClass(v2);
    if ((objc_opt_respondsToSelector() & 1) != 0)
      goto LABEL_7;
  }
  v3 = &WebCore::MathMLNames::rspaceAttr;
    goto LABEL_12;
  while (1)
  {
    if (PAL::AVFoundationLibrary((PAL *)1))
    {
      v4 = &qword_1ECE889F8;
      if ((_BYTE)xmmword_1ECE88A00)
        return v4;
      this = (WebCore::AVStreamDataParserMIMETypeCache *)&WebCore::AVAssetMIMETypeCache::singleton(void)::cache;
      qword_1ECE889F8 = 0;
      v4 = &qword_1ECE889F8;
    }
    else
    {
LABEL_7:
      v4 = (uint64_t *)((char *)this + 8);
      if (*((_BYTE *)this + 16))
        return v4;
      *((_QWORD *)this + 1) = 0;
    }
    *((_BYTE *)this + 16) = 1;
    (*(void (**)(WebCore::AVStreamDataParserMIMETypeCache *, uint64_t *))(*(_QWORD *)this + 56))(this, v4);
    v3 = (uint64_t *)*((unsigned __int8 *)this + 16);
    if (*((_BYTE *)this + 16))
      break;
    __break(1u);
LABEL_12:
    qword_1ECE88A28 = 0;
    qword_1ECE88A30 = 0;
    unk_1ECE88A18 = 0u;
    *(__int128 *)((char *)&xmmword_1ECE88A00 + 8) = 0u;
    *(_OWORD *)&qword_1ECE889F8 = 0u;
    WebCore::AVAssetMIMETypeCache::singleton(void)::cache = (uint64_t)off_1E334D010;
    *((_BYTE *)v3 + 2616) = 1;
  }
  return v4;
}

uint64_t WebCore::AVStreamDataParserMIMETypeCache::canDecodeExtendedType(WebCore::AVStreamDataParserMIMETypeCache *this, const WebCore::ContentType *a2)
{
  uint64_t v3;
  uint64_t *AVStreamDataParserClass;
  const __CFString *v5;
  double v7;
  double v8;
  float v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16[2];

  PAL::getAVStreamDataParserClass(this);
  v3 = objc_opt_respondsToSelector();
  if ((v3 & 1) != 0)
  {
    AVStreamDataParserClass = (uint64_t *)PAL::getAVStreamDataParserClass((PAL *)v3);
    if (*(_QWORD *)a2)
    {
      v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
      return objc_msgSend(AVStreamDataParserClass, "canParseExtendedMIMEType:", v5);
    }
LABEL_31:
    v5 = &stru_1E3487BC0;
    return objc_msgSend(AVStreamDataParserClass, "canParseExtendedMIMEType:", v5);
  }
  {
    qword_1ECE88A28 = 0;
    qword_1ECE88A30 = 0;
    unk_1ECE88A18 = 0u;
    *(__int128 *)((char *)&xmmword_1ECE88A00 + 8) = 0u;
    *(_OWORD *)&qword_1ECE889F8 = 0u;
    WebCore::AVAssetMIMETypeCache::singleton(void)::cache = (uint64_t)off_1E334D010;
  }
  if (PAL::AVFoundationLibrary((PAL *)1))
  {
    if (!(_BYTE)xmmword_1ECE88A00)
    {
      AVStreamDataParserClass = &WebCore::AVAssetMIMETypeCache::singleton(void)::cache;
      qword_1ECE889F8 = 0;
      LOBYTE(xmmword_1ECE88A00) = 1;
      (*(void (**)(uint64_t *, uint64_t *))(WebCore::AVAssetMIMETypeCache::singleton(void)::cache + 56))(&WebCore::AVAssetMIMETypeCache::singleton(void)::cache, &qword_1ECE889F8);
      if (!(_BYTE)xmmword_1ECE88A00)
        goto LABEL_30;
    }
    if (qword_1ECE889F8 && *(_DWORD *)(qword_1ECE889F8 - 12))
    {
      WebCore::ContentType::containerType(a2, v7, v8, v9);
      if (v15)
        AVStreamDataParserClass = (uint64_t *)*((_QWORD *)v15 + 1);
      else
        AVStreamDataParserClass = 0;
      if ((_BYTE)xmmword_1ECE88A00
        || (qword_1ECE889F8 = 0,
            LOBYTE(xmmword_1ECE88A00) = 1,
            (*(void (**)(uint64_t *, uint64_t *))(WebCore::AVAssetMIMETypeCache::singleton(void)::cache + 56))(&WebCore::AVAssetMIMETypeCache::singleton(void)::cache, &qword_1ECE889F8), (_BYTE)xmmword_1ECE88A00))
      {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)&qword_1ECE889F8);
        if (*(_QWORD *)a2)
        {
          WTF::StringImpl::replace();
          v16[0] = v16[1];
        }
        else
        {
          v16[0] = 0;
        }
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v11);
          else
            *(_DWORD *)v15 -= 2;
        }
        v10 = WebCore::MIMETypeCache::canDecodeType((WebCore::MIMETypeCache *)&WebCore::AVAssetMIMETypeCache::singleton(void)::cache, v16, v12) == 1;
        v14 = v16[0];
        v16[0] = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v13);
          else
            *(_DWORD *)v14 -= 2;
        }
        return v10;
      }
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
  }
  return 0;
}

void sub_195240770(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AVStreamDataParserMIMETypeCache::initializeCache(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl **v14;
  int i;
  unsigned int v16;
  WTF::StringImpl **v17;
  WTF *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  WTF::StringImpl *v27;
  id obj;
  WTF::StringImpl *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  result = PAL::AVFoundationLibrary(0);
  if (result)
  {
    PAL::getAVStreamDataParserClass((PAL *)result);
    result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
    {
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      obj = (id)objc_msgSend((id)PAL::getAVStreamDataParserClass((PAL *)result), "audiovisualMIMETypes");
      result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
      v4 = result;
      if (result)
      {
        v5 = *(_QWORD *)v31;
        do
        {
          v6 = 0;
          do
          {
            if (*(_QWORD *)v31 != v5)
              objc_enumerationMutation(obj);
            MEMORY[0x19AEA5508](&v29, *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * v6));
            v9 = *a2;
            if (*a2
              || (v10 = WTF::fastZeroedMalloc((WTF *)0x50),
                  *a2 = v10 + 16,
                  *(_DWORD *)(v10 + 12) = 8,
                  *(_DWORD *)(*a2 - 8) = 7,
                  *(_DWORD *)(*a2 - 16) = 0,
                  *(_DWORD *)(*a2 - 12) = 0,
                  (v9 = *a2) != 0))
            {
              v11 = *(_DWORD *)(v9 - 8);
            }
            else
            {
              v11 = 0;
            }
            v12 = *((_DWORD *)v29 + 4);
            if (v12 < 0x100)
              v13 = WTF::StringImpl::hashSlowCase(v29);
            else
              v13 = v12 >> 8;
            v14 = 0;
            for (i = 1; ; ++i)
            {
              v16 = v13 & v11;
              v17 = (WTF::StringImpl **)(v9 + 8 * (v13 & v11));
              v18 = *v17;
              if (*v17 == (WTF::StringImpl *)-1)
              {
                v14 = (WTF::StringImpl **)(v9 + 8 * v16);
                goto LABEL_20;
              }
              if (!v18)
                break;
              if ((WTF::equal(v18, v29, v8) & 1) != 0)
                goto LABEL_35;
LABEL_20:
              v13 = i + v16;
            }
            if (v14)
            {
              *v14 = 0;
              --*(_DWORD *)(*a2 - 16);
              v17 = v14;
            }
            v19 = v29;
            v29 = 0;
            v20 = *v17;
            *v17 = v19;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, v7);
              else
                *(_DWORD *)v20 -= 2;
            }
            v21 = *a2;
            if (*a2)
              v22 = *(_DWORD *)(v21 - 12) + 1;
            else
              v22 = 1;
            *(_DWORD *)(v21 - 12) = v22;
            v23 = *a2;
            if (*a2)
              v24 = *(_DWORD *)(v23 - 12);
            else
              v24 = 0;
            v25 = (*(_DWORD *)(v23 - 16) + v24);
            v26 = *(unsigned int *)(v23 - 4);
            if (v26 > 0x400)
            {
              if (v26 <= 2 * v25)
LABEL_34:
                WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a2, v17);
            }
            else if (3 * v26 <= 4 * v25)
            {
              goto LABEL_34;
            }
LABEL_35:
            v27 = v29;
            v29 = 0;
            if (v27)
            {
              if (*(_DWORD *)v27 == 2)
                WTF::StringImpl::destroy(v27, v7);
              else
                *(_DWORD *)v27 -= 2;
            }
            ++v6;
          }
          while (v6 != v4);
          result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
          v4 = result;
        }
        while (result);
      }
    }
  }
  return result;
}

void sub_195240A64(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AudioTrackPrivateAVFObjC::AudioTrackPrivateAVFObjC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  *(_DWORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 88) = 6;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)a1 = off_1E334CF68;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 128) = v3;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v5 = (uint64_t *)(a1 + 136);
  *v4 = off_1E334D260;
  v4[1] = a1;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = v4;
  v6 = *(_QWORD *)(a1 + 128);
  v7 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = a1 + 136;
  v9 = *(unsigned int **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v7;
  if (!v9)
    goto LABEL_14;
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  v7 = *v5;
  if (*v5)
  {
LABEL_14:
    do
      v12 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v12 + 1, (unsigned int *)v7));
  }
  v13 = *(unsigned int **)(v6 + 48);
  *(_QWORD *)(v6 + 48) = v7;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v8);
    }
  }
  WebCore::AudioTrackPrivateAVFObjC::resetPropertiesFromTrack((WebCore::AudioTrackPrivateAVFObjC *)a1);
  return a1;
}

void sub_195240BD0(_Unwind_Exception *a1, void *a2)
{
  WebCore::AudioTrackPrivateAVF *v2;
  WebCore::AVTrackPrivateAVFObjCImpl *v4;
  WTF *v5;
  void *v6;

  v4 = (WebCore::AVTrackPrivateAVFObjCImpl *)*((_QWORD *)v2 + 16);
  *((_QWORD *)v2 + 16) = 0;
  if (v4)
  {
    WebCore::AVTrackPrivateAVFObjCImpl::~AVTrackPrivateAVFObjCImpl(v4, a2);
    WTF::fastFree(v5, v6);
  }
  WebCore::AudioTrackPrivateAVF::~AudioTrackPrivateAVF(v2, (WTF::StringImpl *)a2);
  _Unwind_Resume(a1);
}

WebCore::AudioTrackPrivateAVFObjC *WebCore::AudioTrackPrivateAVFObjC::AudioTrackPrivateAVFObjC(WebCore::AudioTrackPrivateAVFObjC *this, AVPlayerItemTrack *a2)
{
  WebCore::AVTrackPrivateAVFObjCImpl *v4;
  void *v5;
  WTF *v6;
  void *v7;
  WebCore::AVTrackPrivateAVFObjCImpl *v9;

  v4 = (WebCore::AVTrackPrivateAVFObjCImpl *)WTF::fastMalloc((WTF *)0x38);
  WebCore::AVTrackPrivateAVFObjCImpl::AVTrackPrivateAVFObjCImpl(v4, a2);
  v9 = v4;
  WebCore::AudioTrackPrivateAVFObjC::AudioTrackPrivateAVFObjC((uint64_t)this, (uint64_t *)&v9);
  if (v9)
  {
    WebCore::AVTrackPrivateAVFObjCImpl::~AVTrackPrivateAVFObjCImpl(v9, v5);
    WTF::fastFree(v6, v7);
  }
  return this;
}

void sub_195240CC4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::AVTrackPrivateAVFObjCImpl *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    WebCore::AVTrackPrivateAVFObjCImpl::~AVTrackPrivateAVFObjCImpl(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

WebCore::AudioTrackPrivateAVFObjC *WebCore::AudioTrackPrivateAVFObjC::AudioTrackPrivateAVFObjC(WebCore::AudioTrackPrivateAVFObjC *this, id *a2)
{
  WebCore::AVTrackPrivateAVFObjCImpl *v4;
  void *v5;
  WTF *v6;
  void *v7;
  WebCore::AVTrackPrivateAVFObjCImpl *v9;

  v4 = (WebCore::AVTrackPrivateAVFObjCImpl *)WTF::fastMalloc((WTF *)0x38);
  WebCore::AVTrackPrivateAVFObjCImpl::AVTrackPrivateAVFObjCImpl(v4, a2);
  v9 = v4;
  WebCore::AudioTrackPrivateAVFObjC::AudioTrackPrivateAVFObjC((uint64_t)this, (uint64_t *)&v9);
  if (v9)
  {
    WebCore::AVTrackPrivateAVFObjCImpl::~AVTrackPrivateAVFObjCImpl(v9, v5);
    WTF::fastFree(v6, v7);
  }
  return this;
}

void sub_195240D54(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::AVTrackPrivateAVFObjCImpl *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    WebCore::AVTrackPrivateAVFObjCImpl::~AVTrackPrivateAVFObjCImpl(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebCore::AudioTrackPrivateAVFObjC::resetPropertiesFromTrack(WebCore::AudioTrackPrivateAVFObjC *this)
{
  uint64_t v2;
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  const WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *result;
  WTF::StringImpl *v30[3];

  v2 = *((_QWORD *)this + 16);
  v3 = *(void **)(v2 + 8);
  if (v3)
  {
    v4 = objc_msgSend(v3, "isEnabled");
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 24);
    v4 = v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0 && *(_QWORD *)(v6 + 32) == v5;
  }
  if (*((unsigned __int8 *)this + 48) != v4)
  {
    *((_BYTE *)this + 48) = v4;
    v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v7 = off_1E32066C8;
    *((_BYTE *)v7 + 8) = v4;
    v30[0] = v7;
    WebCore::TrackPrivateBase::notifyClients((uint64_t)this, (uint64_t *)v30);
    v8 = v30[0];
    v30[0] = 0;
    if (v8)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 10);
    if (v9)
      (*(void (**)(uint64_t, WebCore::AudioTrackPrivateAVFObjC *, _QWORD))(*(_QWORD *)v9 + 16))(v9, this, *((unsigned __int8 *)this + 48));
  }
  v10 = *((_QWORD *)this + 16);
  v11 = *(void **)(v10 + 32);
  if (v11)
  {
    v12 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v11, "asset"), "tracks"), "indexOfObject:", *(_QWORD *)(v10 + 32));
  }
  else if (*(_QWORD *)(v10 + 24))
  {
    v13 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(v10 + 16), "asset"), "tracks"), "count");
    v14 = *(_QWORD *)(v10 + 24);
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
      v16 = objc_msgSend((id)objc_msgSend(*(id *)(v15 + 16), "options"), "indexOfObject:", *(_QWORD *)(v14 + 16));
    else
      v16 = 0;
    v12 = v16 + v13;
  }
  else
  {
    v12 = 0;
  }
  *((_DWORD *)this + 30) = v12;
  *((_BYTE *)this + 88) = WebCore::AVTrackPrivateAVFObjCImpl::audioKind(*((WebCore::AVTrackPrivateAVFObjCImpl **)this
                                                                        + 16));
  v17 = *((_QWORD *)this + 16);
  v18 = *(void **)(v17 + 32);
  if (v18)
  {
    v19 = (int)objc_msgSend(v18, "trackID");
  }
  else
  {
    v20 = *(_QWORD *)(v17 + 24);
    if (v20)
      v19 = objc_msgSend((id)objc_msgSend(*(id *)(v20 + 16), "optionID"), "unsignedLongLongValue");
    else
      v19 = 0;
  }
  *((_QWORD *)this + 12) = v19;
  WebCore::AVTrackPrivateAVFObjCImpl::label(*((WebCore::AVTrackPrivateAVFObjCImpl **)this + 16), v30);
  v22 = v30[0];
  if (v30[0])
    *(_DWORD *)v30[0] += 2;
  v23 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v22;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::destroy(v23, v21);
      v22 = v30[0];
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  v30[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  WebCore::AVTrackPrivateAVFObjCImpl::language(*((WTF::StringImpl **)this + 16), v30);
  v25 = v30[0];
  if (v30[0])
    *(_DWORD *)v30[0] += 2;
  v26 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = v25;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::destroy(v26, v24);
      v25 = v30[0];
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  v30[0] = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  WebCore::AVTrackPrivateAVFObjCImpl::audioTrackConfiguration(*((WebCore::AVTrackPrivateAVFObjCImpl **)this + 16), (uint64_t)v30);
  WebCore::AudioTrackPrivate::setConfiguration((uint64_t)this, (uint64_t)v30, v27);
  result = v30[0];
  v30[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_195241018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebCore::AudioTrackPrivateAVF::~AudioTrackPrivateAVF(WebCore::AudioTrackPrivateAVF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = off_1E334D0C0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = off_1E334D168;
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  *(_QWORD *)this = &unk_1E340FFE8;
  v7 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::AudioTrackPrivateAVF::~AudioTrackPrivateAVF(this, a2);
  WTF::fastFree(v2, v3);
}

_BYTE *WebCore::AudioTrackPrivate::setEnabled(_BYTE *this, int a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (this[48] != a2)
  {
    v2 = a2;
    v3 = (uint64_t)this;
    this[48] = a2;
    v4 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E32066C8;
    *(_BYTE *)(v4 + 8) = v2;
    v6 = v4;
    WebCore::TrackPrivateBase::notifyClients(v3, &v6);
    v5 = v6;
    v6 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    this = *(_BYTE **)(v3 + 80);
    if (this)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)this + 16))(this, v3, *(unsigned __int8 *)(v3 + 48));
  }
  return this;
}

void sub_195241210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AudioTrackPrivate::setConfiguration(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  result = WTF::equal(*(WTF **)a2, *(const WTF::StringImpl **)(a1 + 56), a3);
  if (!(_DWORD)result
    || *(_DWORD *)(a2 + 8) != *(_DWORD *)(a1 + 64)
    || *(_DWORD *)(a2 + 12) != *(_DWORD *)(a1 + 68)
    || *(_QWORD *)(a2 + 16) != *(_QWORD *)(a1 + 72))
  {
    v7 = *(WTF **)a2;
    *(_QWORD *)a2 = 0;
    v8 = *(WTF::StringImpl **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v7;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v6);
        v7 = *(WTF **)(a1 + 56);
      }
      else
      {
        *(_DWORD *)v8 -= 2;
      }
    }
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 8);
    if (v7)
      *(_DWORD *)v7 += 2;
    v10 = *(_OWORD *)(a1 + 64);
    v9 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v9 = &off_1E334D210;
    *(_QWORD *)(v9 + 8) = v7;
    *(_OWORD *)(v9 + 16) = v10;
    v11 = v9;
    WebCore::TrackPrivateBase::notifyClients(a1, &v11);
    result = v11;
    v11 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_19524133C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

void *WebCore::AudioTrackPrivateAVFObjC::setEnabled(WebCore::AudioTrackPrivateAVFObjC *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;

  if (*((unsigned __int8 *)this + 48) != (_DWORD)a2)
  {
    *((_BYTE *)this + 48) = a2;
    v4 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E32066C8;
    *(_BYTE *)(v4 + 8) = a2;
    v13 = v4;
    WebCore::TrackPrivateBase::notifyClients((uint64_t)this, &v13);
    v5 = v13;
    v13 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 10);
    if (v6)
      (*(void (**)(uint64_t, WebCore::AudioTrackPrivateAVFObjC *, _QWORD))(*(_QWORD *)v6 + 16))(v6, this, *((unsigned __int8 *)this + 48));
  }
  v7 = *((_QWORD *)this + 16);
  result = *(void **)(v7 + 8);
  if (result)
    return (void *)objc_msgSend(result, "setEnabled:", a2);
  v9 = *(_QWORD *)(v7 + 24);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 32);
      if ((v11 == v9) != (_DWORD)a2)
      {
        if (!(_DWORD)a2)
          v9 = 0;
        if (v11 != v9)
        {
          *(_BYTE *)(v10 + 96) = 0;
          *(_QWORD *)(v10 + 32) = v9;
          if ((*(_QWORD *)(v10 + 72) & 0xFFFFFFFFFFFFLL) != 0
            && *(double *)((*(_QWORD *)(v10 + 72) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
          {
            result = (void *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v10 + 40));
          }
          *(_QWORD *)(v10 + 64) = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
          return (void *)WebCore::TimerBase::setNextFireTime(v10 + 40, v12 + 0.0);
        }
      }
    }
  }
  return result;
}

void sub_1952414B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *WebCore::CDMPrivateFairPlayStreaming::keyIDsForRequest@<X0>(WebCore::CDMPrivateFairPlayStreaming *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  uint64_t *result;
  WebCore::CDMPrivateFairPlayStreaming *v15;
  void *v16;
  void *v17;
  WTF::StringImpl *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22[2];
  char v23;
  uint64_t v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  -[WebCore::CDMPrivateFairPlayStreaming identifier](this, "identifier");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    WebCore::FragmentedSharedBuffer::create((WebCore::FragmentedSharedBuffer *)objc_msgSend((id)-[WebCore::CDMPrivateFairPlayStreaming identifier](this, "identifier"), "dataUsingEncoding:", 4), v22);
    v5 = WTF::fastMalloc((WTF *)0x38);
    v24[0] = WebCore::SharedBuffer::SharedBuffer(v5, v22);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(v22, v6);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *(_DWORD *)(a2 + 8) = 1;
    *(_QWORD *)a2 = v7;
    v9 = (unsigned int *)v24[0];
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
LABEL_8:
    *v7 = v9;
    ++*(_DWORD *)(a2 + 12);
    return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v24, v8);
  }
  -[WebCore::CDMPrivateFairPlayStreaming identifier](this, "identifier");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    WebCore::FragmentedSharedBuffer::create((WebCore::FragmentedSharedBuffer *)-[WebCore::CDMPrivateFairPlayStreaming identifier](this, "identifier"), v22);
    v11 = WTF::fastMalloc((WTF *)0x38);
    v24[0] = WebCore::SharedBuffer::SharedBuffer(v11, v22);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(v22, v12);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *(_DWORD *)(a2 + 8) = 1;
    *(_QWORD *)a2 = v7;
    v9 = (unsigned int *)v24[0];
    do
      v13 = __ldaxr(v9);
    while (__stlxr(v13 + 1, v9));
    goto LABEL_8;
  }
  result = (uint64_t *)-[WebCore::CDMPrivateFairPlayStreaming initializationData](this, "initializationData");
  if (!result)
    goto LABEL_14;
  WebCore::FragmentedSharedBuffer::create((WebCore::FragmentedSharedBuffer *)-[WebCore::CDMPrivateFairPlayStreaming initializationData](this, "initializationData"), v24);
  v15 = (WebCore::CDMPrivateFairPlayStreaming *)WTF::fastMalloc((WTF *)0x38);
  v21 = WebCore::SharedBuffer::SharedBuffer((uint64_t)v15, v24);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(v24, v16);
  WebCore::CDMPrivateFairPlayStreaming::extractKeyIDsSinf(v15, (uint64_t)v22);
  result = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v21, v17);
  if (v23
    || (WebCore::FragmentedSharedBuffer::create((WebCore::FragmentedSharedBuffer *)-[WebCore::CDMPrivateFairPlayStreaming initializationData](this, "initializationData", v21), v24), v18 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x38), v21 = WebCore::SharedBuffer::SharedBuffer((uint64_t)v18, v24), WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(v24, v19), WebCore::CDMPrivateFairPlayStreaming::extractKeyIDsMpts(v18, (uint64_t)v22), result = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v21, v20), v23))
  {
    *(_QWORD *)a2 = v22[0];
    *(_QWORD *)(a2 + 8) = v22[1];
  }
  else
  {
LABEL_14:
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  return result;
}

void sub_195241710(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a9, a2);
  _Unwind_Resume(a1);
}

void WebCore::AVAssetMIMETypeCache::~AVAssetMIMETypeCache(WebCore::AVAssetMIMETypeCache *this, WTF::StringImpl *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;

  v3 = (char *)this + 40;
  v4 = (char *)*((_QWORD *)this + 8);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
    goto LABEL_5;
  }
  if (v4)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  *(_QWORD *)this = off_1E340DCB0;
  if (*((_BYTE *)this + 32))
  {
    v6 = *((_QWORD *)this + 3);
    if (v6)
    {
      v7 = *(unsigned int *)(v6 - 4);
      if ((_DWORD)v7)
      {
        v8 = (WTF::StringImpl **)*((_QWORD *)this + 3);
        do
        {
          v9 = *v8;
          if (*v8 != (WTF::StringImpl *)-1)
          {
            *v8 = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 2)
                WTF::StringImpl::destroy(v9, a2);
              else
                *(_DWORD *)v9 -= 2;
            }
          }
          v8 += 2;
          --v7;
        }
        while (v7);
      }
      WTF::fastFree((WTF *)(v6 - 16), a2);
    }
  }
  if (*((_BYTE *)this + 16))
  {
    v10 = (WTF::StringImpl **)*((_QWORD *)this + 1);
    if (v10)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, a2);
  }
}

{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;

  v3 = (char *)this + 40;
  v4 = (char *)*((_QWORD *)this + 8);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
    goto LABEL_5;
  }
  if (v4)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  *(_QWORD *)this = off_1E340DCB0;
  if (*((_BYTE *)this + 32))
  {
    v6 = *((_QWORD *)this + 3);
    if (v6)
    {
      v7 = *(unsigned int *)(v6 - 4);
      if ((_DWORD)v7)
      {
        v8 = (WTF::StringImpl **)*((_QWORD *)this + 3);
        do
        {
          v9 = *v8;
          if (*v8 != (WTF::StringImpl *)-1)
          {
            *v8 = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 2)
                WTF::StringImpl::destroy(v9, a2);
              else
                *(_DWORD *)v9 -= 2;
            }
          }
          v8 += 2;
          --v7;
        }
        while (v7);
      }
      WTF::fastFree((WTF *)(v6 - 16), a2);
    }
  }
  if (*((_BYTE *)this + 16))
  {
    v10 = (WTF::StringImpl **)*((_QWORD *)this + 1);
    if (v10)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, a2);
  }
  WTF::fastFree(this, a2);
}

void WebCore::AVStreamDataParserMIMETypeCache::~AVStreamDataParserMIMETypeCache(WebCore::AVStreamDataParserMIMETypeCache *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;

  *(_QWORD *)this = off_1E340DCB0;
  if (*((_BYTE *)this + 32))
  {
    v3 = *((_QWORD *)this + 3);
    if (v3)
    {
      v4 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v4)
      {
        v5 = (WTF::StringImpl **)*((_QWORD *)this + 3);
        do
        {
          v6 = *v5;
          if (*v5 != (WTF::StringImpl *)-1)
          {
            *v5 = 0;
            if (v6)
            {
              if (*(_DWORD *)v6 == 2)
                WTF::StringImpl::destroy(v6, a2);
              else
                *(_DWORD *)v6 -= 2;
            }
          }
          v5 += 2;
          --v4;
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
  }
  if (*((_BYTE *)this + 16))
  {
    v7 = (WTF::StringImpl **)*((_QWORD *)this + 1);
    if (v7)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v7, a2);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;

  *(_QWORD *)this = off_1E340DCB0;
  if (*((_BYTE *)this + 32))
  {
    v3 = *((_QWORD *)this + 3);
    if (v3)
    {
      v4 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v4)
      {
        v5 = (WTF::StringImpl **)*((_QWORD *)this + 3);
        do
        {
          v6 = *v5;
          if (*v5 != (WTF::StringImpl *)-1)
          {
            *v5 = 0;
            if (v6)
            {
              if (*(_DWORD *)v6 == 2)
                WTF::StringImpl::destroy(v6, a2);
              else
                *(_DWORD *)v6 -= 2;
            }
          }
          v5 += 2;
          --v4;
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
  }
  if (*((_BYTE *)this + 16))
  {
    v7 = (WTF::StringImpl **)*((_QWORD *)this + 1);
    if (v7)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v7, a2);
  }
  WTF::fastFree(this, a2);
}

void WebCore::AudioTrackPrivateAVFObjC::~AudioTrackPrivateAVFObjC(WebCore::AudioTrackPrivateAVFObjC *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::AVTrackPrivateAVFObjCImpl *v8;
  WTF *v9;
  void *v10;

  *(_QWORD *)this = off_1E334CF68;
  v3 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 17);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 17) = 0;
  }
  v8 = (WebCore::AVTrackPrivateAVFObjCImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v8)
  {
    WebCore::AVTrackPrivateAVFObjCImpl::~AVTrackPrivateAVFObjCImpl(v8, a2);
    WTF::fastFree(v9, v10);
  }
  WebCore::AudioTrackPrivateAVF::~AudioTrackPrivateAVF(this, (WTF::StringImpl *)a2);
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::AVTrackPrivateAVFObjCImpl *v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  void *v12;

  *(_QWORD *)this = off_1E334CF68;
  v3 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 17);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 17) = 0;
  }
  v8 = (WebCore::AVTrackPrivateAVFObjCImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v8)
  {
    WebCore::AVTrackPrivateAVFObjCImpl::~AVTrackPrivateAVFObjCImpl(v8, a2);
    WTF::fastFree(v9, v10);
  }
  WebCore::AudioTrackPrivateAVF::~AudioTrackPrivateAVF(this, (WTF::StringImpl *)a2);
  WTF::fastFree(v11, v12);
}

const char *WebCore::AudioTrackPrivate::logClassName(WebCore::AudioTrackPrivate *this)
{
  return "AudioTrackPrivate";
}

uint64_t WebCore::AudioTrackPrivateAVF::id(WebCore::AudioTrackPrivateAVF *this)
{
  return *((_QWORD *)this + 12);
}

uint64_t WebCore::AudioTrackPrivateAVF::label@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 104);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::AudioTrackPrivateAVF::language@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 112);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::AudioTrackPrivateAVF::trackIndex(WebCore::AudioTrackPrivateAVF *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t WebCore::AudioTrackPrivate::type(WebCore::AudioTrackPrivate *this)
{
  return 1;
}

uint64_t WebCore::AudioTrackPrivateAVF::kind(WebCore::AudioTrackPrivateAVF *this)
{
  return *((unsigned __int8 *)this + 88);
}

uint64_t WebCore::AudioTrackPrivate::isBackedByMediaStreamTrack(WebCore::AudioTrackPrivate *this)
{
  return 0;
}

void WebCore::MediaPlaybackTargetCocoa::~MediaPlaybackTargetCocoa(WebCore::MediaPlaybackTargetCocoa *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    CFRelease(v2);
}

void WebCore::MediaPlaybackTargetCocoa::~MediaPlaybackTargetCocoa(WebCore::MediaPlaybackTargetCocoa *this, void *a2)
{
  const void *v3;

  v3 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(v3);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::MediaPlaybackTargetCocoa::targetType(WebCore::MediaPlaybackTargetCocoa *this)
{
  return 0;
}

uint64_t WebCore::MediaPlaybackTargetCocoa::targetContext(WebCore::MediaPlaybackTargetCocoa *this)
{
  return (uint64_t)this + 16;
}

void WebCore::AudioTrackPrivate::~AudioTrackPrivate(WebCore::AudioTrackPrivate *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = off_1E334D168;
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = &unk_1E340FFE8;
  v5 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;

  *(_QWORD *)this = off_1E334D168;
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = &unk_1E340FFE8;
  v5 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  WTF::fastFree(this, v9);
}

uint64_t WebCore::AudioTrackPrivate::kind(WebCore::AudioTrackPrivate *this)
{
  return 6;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN7WebCore17AudioTrackPrivate16setConfigurationEONS2_31PlatformAudioTrackConfigurationEEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E334D210;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore17AudioTrackPrivate16setConfigurationEONS2_31PlatformAudioTrackConfigurationEEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E334D210;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore17AudioTrackPrivate16setConfigurationEONS2_31PlatformAudioTrackConfigurationEEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEE4callESA_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1 + 8);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::MediaSelectionGroupAVFObjC::*&)(void),WebCore::MediaSelectionGroupAVFObjC*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::HashTable<void const*,WTF::KeyValuePair<void const*,WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  const void *v29;
  const void *v30;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = v5;
    while (1)
    {
      v11 = (uint64_t *)(v4 + 16 * v9);
      v12 = *v11;
      if (*v11 != -1)
      {
        if (v12)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (uint64_t *)(v15 + 16 * v22);
          v25 = (WTF *)v24[1];
          v24[1] = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 1)
            {
              v29 = (const void *)*((_QWORD *)v25 + 2);
              *((_QWORD *)v25 + 2) = 0;
              if (v29)
                CFRelease(v29);
              WTF::fastFree(v25, v8);
            }
            else
            {
              --*(_DWORD *)v25;
            }
          }
          *v24 = *v11;
          v26 = v4 + 16 * v9;
          v27 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          v24[1] = v27;
          v14 = *(WTF **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (!v14)
            goto LABEL_22;
          if (*(_DWORD *)v14 == 1)
          {
            v30 = (const void *)*((_QWORD *)v14 + 2);
            *((_QWORD *)v14 + 2) = 0;
            if (v30)
              CFRelease(v30);
            goto LABEL_26;
          }
          --*(_DWORD *)v14;
        }
        else
        {
          v13 = v4 + 16 * v9;
          v14 = *(WTF **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 1)
            {
              v28 = (const void *)*((_QWORD *)v14 + 2);
              *((_QWORD *)v14 + 2) = 0;
              if (v28)
                CFRelease(v28);
LABEL_26:
              WTF::fastFree(v14, v8);
              goto LABEL_22;
            }
            --*(_DWORD *)v14;
          }
        }
      }
LABEL_22:
      if (++v9 == v10)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::AudioTrackPrivateAVFObjC::AudioTrackPrivateAVFObjC(std::unique_ptr<WebCore::AVTrackPrivateAVFObjCImpl> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  const WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5[3];

  v1 = *(_QWORD *)(a1 + 8);
  WebCore::AVTrackPrivateAVFObjCImpl::audioTrackConfiguration(*(WebCore::AVTrackPrivateAVFObjCImpl **)(v1 + 128), (uint64_t)v5);
  WebCore::AudioTrackPrivate::setConfiguration(v1, (uint64_t)v5, v2);
  result = v5[0];
  v5[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_195242228(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebCore::BarcodeDetector::create@<X0>(_QWORD *result@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  WebCore::Node *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Page *v10;
  uint64_t v12;
  int v13;
  WTF *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned int v19;
  void *v20;
  int v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;

  v3 = result;
  if (*((_BYTE *)result + 274))
    v5 = 0;
  else
    v5 = (WebCore::Node *)(result - 24);
  if (*((_BYTE *)result + 274))
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 64))(result);
    *(_BYTE *)a3 = 16;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  v6 = *((_DWORD *)result - 42);
  *((_DWORD *)result - 42) = v6 + 2;
  v7 = result[42];
  if (v7
    && (v8 = *(_QWORD *)(v7 + 8)) != 0
    && (v9 = *(_QWORD *)(v8 + 24)) != 0
    && (v10 = *(WebCore::Page **)(v9 + 8)) != 0)
  {
    ++*(_DWORD *)v10;
    v12 = *((_QWORD *)v10 + 6);
    v25 = 0;
    v26 = 0;
    v13 = *((_DWORD *)a2 + 3);
    if (v13)
    {
      v14 = (WTF *)WTF::fastMalloc((WTF *)*((unsigned int *)a2 + 3));
      LODWORD(v26) = v13;
      v25 = v14;
      v15 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v15)
      {
        v16 = **a2;
        if (v16 > 0xD)
        {
LABEL_15:
          __break(0xC471u);
          JUMPOUT(0x195242344);
        }
        v17 = *a2 + 1;
        v18 = v15 - 1;
        while (1)
        {
          *(_BYTE *)v14 = v16;
          if (!v18)
            break;
          v19 = *v17++;
          LOBYTE(v16) = v19;
          v14 = (WTF *)((char *)v14 + 1);
          --v18;
          if (v19 >= 0xE)
            goto LABEL_15;
        }
        HIDWORD(v26) = v15;
      }
    }
    (*(void (**)(uint64_t *__return_ptr, _QWORD, WTF **))(**(_QWORD **)(v12 + 16) + 952))(&v27, *(_QWORD *)(v12 + 16), &v25);
    result = v25;
    if (v25)
    {
      v25 = 0;
      LODWORD(v26) = 0;
      result = (_QWORD *)WTF::fastFree((WTF *)result, v20);
    }
    if (v27)
    {
      result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      v21 = 0;
      v22 = v27;
      *(_DWORD *)result = 1;
      result[1] = v22;
      *(_QWORD *)a3 = result;
    }
    else
    {
      *(_BYTE *)a3 = 16;
      *(_QWORD *)(a3 + 8) = 0;
      v21 = 1;
    }
    *(_DWORD *)(a3 + 16) = v21;
    if (*(_DWORD *)v10 == 1)
    {
      WebCore::Page::~Page(v10);
      result = (_QWORD *)WTF::fastFree(v23, v24);
    }
    else
    {
      --*(_DWORD *)v10;
    }
    v6 = *((_DWORD *)v3 - 42) - 2;
    if (*((_DWORD *)v3 - 42) != 2)
      goto LABEL_28;
  }
  else
  {
    *(_BYTE *)a3 = 16;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    if (v6)
    {
LABEL_28:
      *((_DWORD *)v3 - 42) = v6;
      return result;
    }
  }
  if ((*((_WORD *)v5 + 15) & 0x400) == 0)
    return (_QWORD *)WebCore::Node::removedLastRef(v5);
  return result;
}

unsigned int *WebCore::BarcodeDetector::getSupportedFormats@<X0>(unsigned int *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  WTF *v12;
  void *v13;
  unsigned int *v14;

  v3 = result;
  if (*((_BYTE *)result + 274))
  {
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 64))(result);
    *(_BYTE *)a3 = 16;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    *(result - 42) += 2;
    v5 = *((_QWORD *)result + 42);
    if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0 && (v7 = *(_QWORD *)(v6 + 24)) != 0 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
    {
      ++*(_DWORD *)v8;
      v9 = *(_QWORD *)(v8 + 48);
      v10 = *a2;
      *a2 = 0;
      v11 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v11 = &off_1E334D398;
      *((_QWORD *)v11 + 1) = v10;
      v14 = v11;
      (*(void (**)(_QWORD, unsigned int **))(**(_QWORD **)(v9 + 16) + 960))(*(_QWORD *)(v9 + 16), &v14);
      result = v14;
      v14 = 0;
      if (result)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      if (*(_DWORD *)v8 == 1)
      {
        WebCore::Page::~Page(v8);
        result = (unsigned int *)WTF::fastFree(v12, v13);
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
    else
    {
      *(_BYTE *)a3 = 16;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
    if (*(v3 - 42) == 2)
    {
      if ((*((_WORD *)v3 - 81) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 48), a2);
    }
    else
    {
      *(v3 - 42) -= 2;
    }
  }
  return result;
}

_QWORD *WebCore::FaceDetector::create@<X0>(_QWORD *result@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Page *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  int v14;
  uint64_t v15;

  v3 = result;
  if (*((_BYTE *)result + 274))
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 64))(result);
    *(_BYTE *)a3 = 16;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
  }
  else
  {
    *((_DWORD *)result - 42) += 2;
    v5 = result[42];
    if (v5
      && (v6 = *(_QWORD *)(v5 + 8)) != 0
      && (v7 = *(_QWORD *)(v6 + 24)) != 0
      && (v8 = *(WebCore::Page **)(v7 + 8)) != 0)
    {
      ++*(_DWORD *)v8;
      v9 = *((_QWORD *)v8 + 6);
      v14 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, int *))(**(_QWORD **)(v9 + 16) + 968))(&v15, *(_QWORD *)(v9 + 16), &v14);
      if (v15)
      {
        result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        v10 = 0;
        v11 = v15;
        *(_DWORD *)result = 1;
        result[1] = v11;
        *(_QWORD *)a3 = result;
      }
      else
      {
        *(_BYTE *)a3 = 16;
        *(_QWORD *)(a3 + 8) = 0;
        v10 = 1;
      }
      *(_DWORD *)(a3 + 16) = v10;
      if (*(_DWORD *)v8 == 1)
      {
        WebCore::Page::~Page(v8);
        result = (_QWORD *)WTF::fastFree(v12, v13);
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
    else
    {
      *(_BYTE *)a3 = 16;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 16) = 1;
    }
    if (*((_DWORD *)v3 - 42) == 2)
    {
      if ((*((_WORD *)v3 - 81) & 0x400) == 0)
        return (_QWORD *)WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 24));
    }
    else
    {
      *((_DWORD *)v3 - 42) -= 2;
    }
  }
  return result;
}

_QWORD *WebCore::TextDetector::create@<X0>(_QWORD *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Page *v8;
  int v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  uint64_t v13;

  v3 = this;
  if (*((_BYTE *)this + 274))
  {
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *, WebCore::ScriptExecutionContext *))(*this + 64))(this, a2);
    *(_BYTE *)a3 = 16;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
  }
  else
  {
    *((_DWORD *)this - 42) += 2;
    v5 = this[42];
    if (v5
      && (v6 = *(_QWORD *)(v5 + 8)) != 0
      && (v7 = *(_QWORD *)(v6 + 24)) != 0
      && (v8 = *(WebCore::Page **)(v7 + 8)) != 0)
    {
      ++*(_DWORD *)v8;
      this = (*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)(*((_QWORD *)v8 + 6) + 16) + 976))(&v13);
      if (v13)
      {
        this = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        v9 = 0;
        v10 = v13;
        *(_DWORD *)this = 1;
        this[1] = v10;
        *(_QWORD *)a3 = this;
      }
      else
      {
        *(_BYTE *)a3 = 16;
        *(_QWORD *)(a3 + 8) = 0;
        v9 = 1;
      }
      *(_DWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)v8 == 1)
      {
        WebCore::Page::~Page(v8);
        this = (_QWORD *)WTF::fastFree(v11, v12);
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
    else
    {
      *(_BYTE *)a3 = 16;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 16) = 1;
    }
    if (*((_DWORD *)v3 - 42) == 2)
    {
      if ((*((_WORD *)v3 - 81) & 0x400) == 0)
        return (_QWORD *)WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 24));
    }
    else
    {
      *((_DWORD *)v3 - 42) -= 2;
    }
  }
  return this;
}

void WebCore::GPU::~GPU(WebCore::GPU *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  WTF *v7;
  uint64_t v8;
  _DWORD **v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD **v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD **v16;
  _DWORD *v17;

  v3 = (WTF *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  v5 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = (WTF *)*((_QWORD *)this + 3);
  if (v5 <= v6)
  {
    if (v5 == v6)
      goto LABEL_25;
    v11 = 16 * v6 - 16 * v5;
    v12 = (_DWORD **)((char *)v7 + 16 * v5 + 8);
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        if (v13[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
        else
          --v13[4];
      }
      v12 += 2;
      v11 -= 16;
    }
    while (v11);
  }
  else
  {
    if (v6)
    {
      v8 = 16 * v6;
      v9 = (_DWORD **)((char *)v7 + 8);
      do
      {
        v10 = *v9;
        *v9 = 0;
        if (v10)
        {
          if (v10[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
          else
            --v10[4];
        }
        v9 += 2;
        v8 -= 16;
      }
      while (v8);
      v7 = (WTF *)*((_QWORD *)this + 3);
      v5 = *((_QWORD *)this + 1);
    }
    v14 = *((unsigned int *)this + 8);
    if (v5 != v14)
    {
      v15 = 16 * v14 - 16 * v5;
      v16 = (_DWORD **)((char *)v7 + 16 * v5 + 8);
      do
      {
        v17 = *v16;
        *v16 = 0;
        if (v17)
        {
          if (v17[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
          else
            --v17[4];
        }
        v16 += 2;
        v15 -= 16;
      }
      while (v15);
    }
  }
  v7 = (WTF *)*((_QWORD *)this + 3);
LABEL_25:
  if (v7)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v7, a2);
  }
}

uint64_t WebCore::GPUAdapter::limits@<X0>(WebCore::GPUAdapter *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t result;

  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  v4 = WTF::fastMalloc((WTF *)0x98);
  v5 = *(_DWORD *)(v3 + 88);
  v6 = *(_QWORD *)(v3 + 96);
  *(_DWORD *)v4 = 1;
  v7 = *(_OWORD *)(v3 + 4);
  v8 = *(_OWORD *)(v3 + 20);
  v9 = *(_OWORD *)(v3 + 36);
  v10 = *(_QWORD *)(v3 + 52);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(v3 + 64);
  v11 = *(_QWORD *)(v3 + 80);
  *(_DWORD *)(v4 + 88) = v5;
  *(_QWORD *)(v4 + 96) = v6;
  v12 = *(_OWORD *)(v3 + 104);
  v13 = *(_OWORD *)(v3 + 120);
  v14 = *(_OWORD *)(v3 + 136);
  *(_OWORD *)(v4 + 4) = v7;
  *(_OWORD *)(v4 + 20) = v8;
  *(_OWORD *)(v4 + 36) = v9;
  *(_QWORD *)(v4 + 52) = v10;
  *(_QWORD *)(v4 + 80) = v11;
  *(_OWORD *)(v4 + 104) = v12;
  *(_OWORD *)(v4 + 120) = v13;
  *(_OWORD *)(v4 + 136) = v14;
  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = v4;
  *a2 = result;
  return result;
}

WTF::StringImpl *WebCore::GPUAdapter::requestDevice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 **v15;
  void *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *result;
  WTF::StringImpl *v29;
  int v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  WTF *v43;
  void *v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  size_t v51;
  uint64_t v52;
  char v53;
  WTF::StringImpl *v54;
  WTF *v55;
  _QWORD *v56;
  int v57;
  unsigned int v58;
  void *v59;
  size_t v60;
  _QWORD *v61;
  WTF *v62;
  _DWORD *v63;
  objc_class *v64;
  uint64_t v65;
  WTF::StringImpl **v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  _QWORD *v75;
  WTF::StringImpl **v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF *v79;
  WTF *v80;
  uint64_t v81;
  WTF *v82;
  WTF::StringImpl *v83[2];
  WTF *v84[2];
  uint64_t v85;
  int v86;
  objc_class *v87;

  v10 = *(_QWORD **)(a1 + 8);
  if (!*(_BYTE *)(a3 + 48))
    goto LABEL_43;
  v5 = a3;
  v12 = v10[3];
  v4 = *(uint64_t **)(v12 + 8);
  v13 = *(unsigned int *)(v12 + 20);
  v87 = 0;
  if ((_DWORD)v13)
  {
    v14 = 8 * v13;
    do
    {
      v15 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::GPUFeatureName> [11]>::tryGet<WTF::String>((unsigned __int8 ***)&WebCore::convertFeatureNameToEnum(WTF::String const&)::enumerationMapping, v4);
      if (!v15)
        goto LABEL_119;
      v86 = *(unsigned __int8 *)v15;
      WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)&v87, &v86, (uint64_t)v83);
      ++v4;
      v14 -= 8;
    }
    while (v14);
    v17 = *(unsigned int *)(v5 + 20);
    if ((_DWORD)v17)
    {
      if (v87)
      {
        v18 = *(unsigned __int8 **)(v5 + 8);
        v19 = &v18[v17];
        v20 = *((_DWORD *)v87 - 2);
        while (1)
        {
          v21 = *v18;
          v22 = 9 * ((~(v21 << 15) + v21) ^ ((~(v21 << 15) + v21) >> 10));
          v23 = (((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) ^ (((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) >> 16)) & v20;
          v24 = *((_DWORD *)v87 + v23);
          if (v24 != v21)
            break;
LABEL_10:
          if (++v18 == v19)
            goto LABEL_22;
        }
        v25 = 1;
        while (v24 != -1)
        {
          v23 = (v23 + v25) & v20;
          v24 = *((_DWORD *)v87 + v23);
          ++v25;
          if (v24 == v21)
            goto LABEL_10;
        }
        WTF::fastFree((objc_class *)((char *)v87 - 16), v16);
      }
LABEL_19:
      v26 = *a4;
      v87 = 0;
      LOBYTE(v83[0]) = 33;
      v83[1] = 0;
      WebCore::DeferredPromise::reject(v26, (unsigned __int8 *)v83, 0, &v87);
      result = v83[1];
      v83[1] = 0;
      if (!result)
        return result;
      goto LABEL_109;
    }
    if (v87)
LABEL_22:
      WTF::fastFree((objc_class *)((char *)v87 - 16), v16);
  }
  else if (*(_DWORD *)(a3 + 20))
  {
    goto LABEL_19;
  }
  v10 = *(_QWORD **)(a1 + 8);
  if (!*(_BYTE *)(v5 + 48))
  {
LABEL_43:
    v42 = 0;
    v85 = 0;
    *(_OWORD *)v83 = 0u;
    *(_OWORD *)v84 = 0u;
LABEL_44:
    v45 = 1;
    goto LABEL_45;
  }
  v29 = *(WTF::StringImpl **)v5;
  if (*(_QWORD *)v5)
    *(_DWORD *)v29 += 2;
  v83[1] = 0;
  v84[0] = 0;
  v83[0] = v29;
  v30 = *(_DWORD *)(v5 + 20);
  if (v30)
  {
    v31 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)*(unsigned int *)(v5 + 20));
    LODWORD(v84[0]) = v30;
    v83[1] = v31;
    v32 = *(unsigned int *)(v5 + 20);
    if ((_DWORD)v32)
    {
      v33 = 0;
      v34 = *(_QWORD *)(v5 + 8);
      do
      {
        v35 = *(unsigned __int8 *)(v34 + v33);
        if (v35 >= 0xB)
        {
          __break(0xC471u);
          JUMPOUT(0x1952430E4);
        }
        *((_BYTE *)v31 + v33) = v35;
        HIDWORD(v84[0]) = ++v33;
      }
      while (v32 != v33);
    }
  }
  v36 = *(unsigned int *)(v5 + 36);
  v84[1] = 0;
  LODWORD(v85) = 0;
  HIDWORD(v85) = v36;
  if ((_DWORD)v36)
  {
    if (v36 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1952430F4);
    }
    v37 = (WTF *)WTF::fastMalloc((WTF *)(16 * v36));
    LODWORD(v85) = v36;
    v84[1] = v37;
    v38 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v38)
    {
      v39 = *(_QWORD *)(v5 + 24);
      v40 = v39 + 16 * v38;
      do
      {
        v41 = *(_DWORD **)v39;
        if (*(_QWORD *)v39)
          *v41 += 2;
        *(_QWORD *)v37 = v41;
        *((_QWORD *)v37 + 1) = *(_QWORD *)(v39 + 8);
        v39 += 16;
        v37 = (WTF *)((char *)v37 + 16);
      }
      while (v39 != v40);
    }
  }
  if (!*(_BYTE *)(v5 + 48))
  {
    v42 = 0;
    goto LABEL_44;
  }
  v42 = *(WTF::StringImpl **)v5;
  if (*(_QWORD *)v5)
    *(_DWORD *)v42 += 2;
  v43 = (WTF *)*(unsigned int *)(v5 + 20);
  if ((_DWORD)v43)
  {
    v7 = *(_DWORD *)(v5 + 20);
    v44 = (void *)WTF::fastMalloc(v43);
    memcpy(v44, *(const void **)(v5 + 8), *(unsigned int *)(v5 + 20));
  }
  else
  {
    v7 = 0;
    v44 = 0;
  }
  v4 = (uint64_t *)*(unsigned int *)(v5 + 36);
  if ((_DWORD)v4)
  {
    if (v4 >> 28)
    {
LABEL_119:
      __break(0xC471u);
      JUMPOUT(0x1952430BCLL);
    }
    v68 = WTF::fastMalloc((WTF *)(16 * (_QWORD)v4));
    v6 = (WTF *)v68;
    v69 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v69)
    {
      v70 = 0;
      v71 = *(_QWORD *)(v5 + 24);
      v72 = v71 + 16 * v69;
      do
      {
        v73 = v71 + v70;
        v74 = *(_DWORD **)(v71 + v70);
        if (v74)
          *v74 += 2;
        v75 = (_QWORD *)(v68 + v70);
        *v75 = v74;
        v75[1] = *(_QWORD *)(v73 + 8);
        v70 += 16;
      }
      while (v73 + 16 != v72);
    }
  }
  else
  {
    v6 = 0;
  }
  v82 = (WTF *)v44;
  v5 = *(_QWORD *)(v5 + 40);
  v45 = 0;
  if (v5)
    *(_DWORD *)v5 += 2;
LABEL_45:
  v46 = *a4;
  *a4 = 0;
  v47 = *(char *)(a2 + 274);
  if (v47 <= 2)
    *(_DWORD *)(a2 + qword_1968DCF20[v47]) += dword_1968DCF38[v47];
  v48 = WTF::fastMalloc((WTF *)0x50);
  v49 = v48;
  *(_QWORD *)v48 = &off_1E334D4D8;
  *(_BYTE *)(v48 + 8) = 0;
  *(_BYTE *)(v48 + 56) = 0;
  if ((v45 & 1) == 0)
  {
    if (v42)
      *(_DWORD *)v42 += 2;
    *(_QWORD *)(v48 + 16) = 0;
    *(_QWORD *)(v48 + 24) = 0;
    *(_QWORD *)(v48 + 8) = v42;
    v50 = v7;
    *(_DWORD *)(v48 + 28) = v7;
    if (v7)
    {
      v81 = a2;
      v51 = v7;
      v52 = v46;
      v53 = v45;
      v54 = v42;
      v55 = v6;
      v56 = v10;
      v57 = (int)v4;
      v58 = v50;
      v59 = (void *)WTF::fastMalloc((WTF *)v50);
      *(_DWORD *)(v49 + 24) = v58;
      LODWORD(v4) = v57;
      v10 = v56;
      v6 = v55;
      v42 = v54;
      v45 = v53;
      v46 = v52;
      *(_QWORD *)(v49 + 16) = v59;
      v60 = v51;
      a2 = v81;
      memcpy(v59, v82, v60);
    }
    *(_QWORD *)(v49 + 32) = 0;
    *(_QWORD *)(v49 + 40) = 0;
    *(_DWORD *)(v49 + 44) = (_DWORD)v4;
    if ((_DWORD)v4)
    {
      if (v4 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x1952430ECLL);
      }
      v61 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v4));
      *(_DWORD *)(v49 + 40) = (_DWORD)v4;
      *(_QWORD *)(v49 + 32) = v61;
      v62 = v6;
      do
      {
        v63 = *(_DWORD **)v62;
        if (*(_QWORD *)v62)
          *v63 += 2;
        *v61 = v63;
        v61[1] = *((_QWORD *)v62 + 1);
        v62 = (WTF *)((char *)v62 + 16);
        v61 += 2;
      }
      while (v62 != (WTF *)((char *)v6 + 16 * v4));
    }
    if (v5)
      *(_DWORD *)v5 += 2;
    *(_QWORD *)(v49 + 48) = v5;
    *(_BYTE *)(v49 + 56) = 1;
  }
  *(_QWORD *)(v49 + 64) = v46;
  *(_QWORD *)(v49 + 72) = a2;
  v87 = (objc_class *)v49;
  (*(void (**)(_QWORD *, WTF::StringImpl **, objc_class **))(*v10 + 16))(v10, v83, &v87);
  v64 = v87;
  v87 = 0;
  if (v64)
    (*(void (**)(objc_class *))(*(_QWORD *)v64 + 8))(v64);
  if ((v45 & 1) == 0)
  {
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
      {
        WTF::StringImpl::destroy((WTF::StringImpl *)v5, v27);
        if ((_DWORD)v4)
        {
LABEL_68:
          v65 = 16 * v4;
          v66 = (WTF::StringImpl **)v6;
          do
          {
            v67 = *v66;
            *v66 = 0;
            if (v67)
            {
              if (*(_DWORD *)v67 == 2)
                WTF::StringImpl::destroy(v67, v27);
              else
                *(_DWORD *)v67 -= 2;
            }
            v66 += 2;
            v65 -= 16;
          }
          while (v65);
        }
LABEL_89:
        if (v6)
          WTF::fastFree(v6, v27);
        if (v82)
          WTF::fastFree(v82, v27);
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v27);
          else
            *(_DWORD *)v42 -= 2;
        }
        goto LABEL_96;
      }
      *(_DWORD *)v5 -= 2;
    }
    if ((_DWORD)v4)
      goto LABEL_68;
    goto LABEL_89;
  }
LABEL_96:
  if (HIDWORD(v85))
  {
    v76 = (WTF::StringImpl **)v84[1];
    v77 = 16 * HIDWORD(v85);
    do
    {
      v78 = *v76;
      *v76 = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 2)
          WTF::StringImpl::destroy(v78, v27);
        else
          *(_DWORD *)v78 -= 2;
      }
      v76 += 2;
      v77 -= 16;
    }
    while (v77);
  }
  v79 = v84[1];
  if (v84[1])
  {
    v84[1] = 0;
    LODWORD(v85) = 0;
    WTF::fastFree(v79, v27);
  }
  v80 = v83[1];
  if (v83[1])
  {
    v83[1] = 0;
    LODWORD(v84[0]) = 0;
    WTF::fastFree(v80, v27);
  }
  result = v83[0];
  v83[0] = 0;
  if (result)
  {
LABEL_109:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::GPUAdapter::requestAdapterInfo(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WTF::StringImpl *v4;
  WTF *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v4 = *(WTF::StringImpl **)(*(_QWORD *)(a1 + 8) + 16);
  if (v4)
  {
    *(_DWORD *)v4 += 2;
    v5 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_DWORD *)v4 += 2;
  }
  else
  {
    v5 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
  }
  *((_QWORD *)v5 + 1) = v4;
  result = WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::GPUAdapterInfo>>(*a3, v5);
  if (*(_DWORD *)v5 != 1)
  {
    --*(_DWORD *)v5;
    if (!v4)
      return result;
    goto LABEL_5;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
  *((_QWORD *)v5 + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = WTF::fastFree(v5, v7);
  if (v4)
  {
LABEL_5:
    if (*(_DWORD *)v4 == 2)
      return WTF::StringImpl::destroy(v4, v7);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

void WebCore::GPUBuffer::~GPUBuffer(WebCore::GPUBuffer *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;
  WTF *v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *((_QWORD *)this + 31);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = (WTF *)*((_QWORD *)this + 12);
  if ((WebCore::GPUBuffer *)((char *)this + 112) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v4, a2);
  }
  v6 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v17 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v17)
      {
        v20 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v17));
        v6 = v20;
      }
      v18 = *(WTF **)(v6 + 16);
      if (v18)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v19 = v6;
        WTF::fastFree(v18, a2);
        v6 = v19;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  if (*((_BYTE *)this + 80))
  {
    v9 = (_DWORD *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v9)
    {
      if (v9[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
      else
        --v9[4];
    }
  }
  v10 = *((unsigned int *)this + 9);
  if ((_DWORD)v10)
    WTF::VectorDestructor<true,WebCore::GPUBuffer::ArrayBufferWithOffset>::destruct(*((_QWORD *)this + 3), (_QWORD **)(*((_QWORD *)this + 3) + 16 * v10));
  v11 = (WTF *)*((_QWORD *)this + 3);
  if (v11)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v11, a2);
  }
  v12 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  v13 = *((_QWORD *)this + 1);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 0;
    v14 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WebCore::GPUBuffer::mapAsync(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  objc_class *v26;

  if (*(_BYTE *)(a1 + 80))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = *a7;
    v26 = 0;
    LOBYTE(v24) = 30;
    if (v23)
      *(_DWORD *)v23 += 2;
    v25 = v23;
    WebCore::DeferredPromise::reject(v8, (unsigned __int8 *)&v24, 0, &v26);
    v10 = v25;
    v25 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = (uint64_t)v23;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        return WTF::StringImpl::destroy(v23, v9);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 68))
      *(_BYTE *)(a1 + 68) = 1;
    v17 = *a7;
    *(_DWORD *)(v17 + 16) = *(_DWORD *)(*a7 + 16) + 1;
    *(_QWORD *)(a1 + 72) = v17;
    *(_BYTE *)(a1 + 80) = 1;
    v18 = *(_QWORD *)(a1 + 16);
    v19 = a2 & 3;
    if (a4)
      v20 = a3;
    else
      v20 = 0;
    v21 = *a7;
    *a7 = 0;
    ++*(_DWORD *)a1;
    v22 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v22 = &off_1E334D500;
    *(_QWORD *)(v22 + 8) = v21;
    *(_QWORD *)(v22 + 16) = a1;
    *(_QWORD *)(v22 + 24) = a3;
    *(_BYTE *)(v22 + 32) = a4;
    *(_QWORD *)(v22 + 40) = a5;
    *(_BYTE *)(v22 + 48) = a6;
    v24 = v22;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v18 + 16))(v18, v19, v20, a5, a6, &v24);
    result = v24;
    v24 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::GPUBuffer::getMappedRange@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>, __n128 a7@<Q0>)
{
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 **v16;
  unint64_t **v17;
  unint64_t *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  __n128 *v32;
  __n128 *v33;
  uint64_t v34;
  __n128 *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v43;
  unint64_t *v44;
  unint64_t *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t *v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  int v58;
  unint64_t *v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  void *v65;
  unint64_t v66;
  __n128 *v67;
  __n128 *v68;
  unint64_t *v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  uint64_t v74;
  __n128 *v75;
  __n128 *v76;
  uint64_t v77;
  __n128 *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  __n128 *v85;
  uint64_t v86;
  __n128 *v87;
  __n128 v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  _QWORD *v97;
  BOOL v98;
  uint64_t v99;
  void *v100;
  WTF *v101;
  WTF *v102;
  _QWORD *v103;
  __n128 v104;
  unint64_t v105;
  unint64_t v106;

  if (*(_BYTE *)(a1 + 68) != 2 || *(_BYTE *)(a1 + 256))
    goto LABEL_3;
  if (a3)
  {
    v10 = a2;
    v106 = a2;
    v11 = *(_QWORD *)(a1 + 40);
    if (a2 > v11)
    {
LABEL_3:
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a6 = 30;
      *(_DWORD *)(a6 + 16) = 1;
      return result;
    }
  }
  else
  {
    v10 = 0;
    v106 = 0;
    v11 = *(_QWORD *)(a1 + 40);
  }
  if (a5)
    v12 = a4;
  else
    v12 = v11 - v10;
  v105 = v12;
  v13 = v10 + v12;
  if (__CFADD__(v10, v12))
    v14 = 0;
  else
    v14 = v10 + v12;
  if (__CFADD__(v10, v12))
    goto LABEL_3;
  if ((v10 & 7) != 0)
    goto LABEL_3;
  if ((v12 & 3) != 0)
    goto LABEL_3;
  v15 = *(_QWORD *)(a1 + 48);
  if (v10 < v15 || v13 > *(_QWORD *)(a1 + 56) + v15 || v13 > v11)
    goto LABEL_3;
  v16 = (__n128 **)(a1 + 96);
  v17 = (unint64_t **)(a1 + 248);
  if (v10 == v13)
  {
    v18 = *v17;
    if (*v17)
    {
      v19 = *((_DWORD *)v18 - 2);
      v20 = (v10 + ~(v10 << 32)) ^ ((v10 + ~(v10 << 32)) >> 22);
      v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
      v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
      v23 = v19 & ((v22 >> 31) ^ v22);
      v24 = v18[v23];
      if (v24 == v10)
        goto LABEL_3;
      v25 = 1;
      while (v24 != -1)
      {
        v23 = (v23 + v25) & v19;
        v24 = v18[v23];
        ++v25;
        if (v24 == v10)
          goto LABEL_3;
      }
    }
    v28 = (_DWORD *)(a1 + 108);
    v26 = *(unsigned int *)(a1 + 108);
    if ((_DWORD)v26)
    {
      v29 = 16 * v26;
      v30 = (unint64_t *)(*(_QWORD *)(a1 + 96) + 8);
      while (*(v30 - 1) >= v10 || *v30 <= v10)
      {
        v30 += 2;
        v29 -= 16;
        if (!v29)
          goto LABEL_89;
      }
      goto LABEL_3;
    }
    if (v10 != v14)
    {
      LODWORD(v26) = 0;
      v31 = 0;
      v104.n128_u64[0] = v10;
      v104.n128_u64[1] = v14;
      goto LABEL_110;
    }
    goto LABEL_90;
  }
  v26 = *(unsigned int *)(a1 + 108);
  if (!*(_BYTE *)(a1 + 240))
  {
    if ((_DWORD)v26)
    {
      a7 = std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*,false>((__n128 *)*(_QWORD *)(a1 + 96), (__n128 *)(*(_QWORD *)(a1 + 96) + 16 * v26), 126 - 2 * __clz(v26), 1, a7);
      v27 = *(unsigned int *)(a1 + 108);
      if (!(_DWORD)v27)
      {
        __break(0xC471u);
        JUMPOUT(0x195243E40);
      }
      if ((_DWORD)v27 != 1)
      {
        v32 = *v16;
        v33 = *v16 + 1;
        v34 = v27 - 1;
        LODWORD(v26) = 1;
        v35 = *v16;
        while (1)
        {
          a7 = *v33;
          v36 = v35->n128_u64[1];
          v37 = v33->n128_u64[1];
          if (v37 > v36)
          {
            if (a7.n128_u64[0] <= v36)
            {
              v38 = v35->n128_u64[0];
              if (v35->n128_u64[0] == v37)
              {
                v38 = 0;
                v37 = 0;
              }
              v35->n128_u64[0] = v38;
              v35->n128_u64[1] = v37;
            }
            else
            {
              if (v27 <= v26)
              {
                __break(0xC471u);
                goto LABEL_187;
              }
              v35 = &v32[v26];
              LODWORD(v26) = v26 + 1;
              *v35 = a7;
            }
          }
          ++v33;
          if (!--v34)
            goto LABEL_52;
        }
      }
      LODWORD(v26) = 1;
LABEL_52:
      *(_DWORD *)(a1 + 108) = v26;
    }
    *(_BYTE *)(a1 + 240) = 1;
  }
  if ((_DWORD)v26)
  {
    v39 = v26;
    v40 = &(*v16)->n128_u64[1];
    v41 = 0xFFFFFFFFLL;
    while (v13 <= *(v40 - 1) || *v40 <= v10)
    {
      v40 += 2;
      --v41;
      if (!--v39)
        goto LABEL_64;
    }
    if (v41)
      goto LABEL_3;
  }
LABEL_64:
  v18 = *v17;
  if (!*v17)
  {
    v45 = 0;
    v43 = 0;
LABEL_73:
    v44 = &v18[v43];
    goto LABEL_74;
  }
  v43 = *((unsigned int *)v18 - 1);
  v44 = &v18[v43];
  if (!*((_DWORD *)v18 - 3))
  {
    v45 = &v18[v43];
    goto LABEL_73;
  }
  v45 = *v17;
  if ((_DWORD)v43)
  {
    v46 = 8 * v43;
    v45 = *v17;
    while (*v45 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v45;
      v46 -= 8;
      if (!v46)
      {
        v45 = v44;
        break;
      }
    }
  }
LABEL_74:
  if (v18)
    v47 = &v18[*((unsigned int *)v18 - 1)];
  else
    v47 = 0;
  if (v47 != v45)
  {
    while (*v45 <= v10 || *v45 >= v14)
    {
      v49 = v45 + 1;
      v45 = v44;
      if (v49 != v44)
      {
        v45 = v49;
        while (*v45 >= 0xFFFFFFFFFFFFFFFELL)
        {
          if (++v45 == v44)
          {
            v45 = v44;
            break;
          }
        }
      }
      if (v45 == v47)
        goto LABEL_89;
    }
    goto LABEL_3;
  }
LABEL_89:
  if (v10 != v14)
  {
    v104.n128_u64[0] = v10;
    v104.n128_u64[1] = v14;
    v28 = (_DWORD *)(a1 + 108);
    if ((_DWORD)v26)
    {
      v61 = (uint64_t)&(*v16)[v26];
      v63 = *(_QWORD *)(v61 - 16);
      v62 = *(_QWORD *)(v61 - 8);
      if (v63 <= v10 && v62 >= v14)
      {
LABEL_147:
        if (!*(_BYTE *)(a1 + 240))
        {
          if ((_DWORD)v26)
          {
            std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*,false>(*v16, &(*v16)[v26], 126 - 2 * __clz(v26), 1, a7);
            v82 = *v28;
            if (!(_DWORD)v82)
            {
              __break(0xC471u);
              JUMPOUT(0x195243E50);
            }
            v83 = v82 - 1;
            if (v82 == 1)
            {
              LODWORD(v84) = 1;
            }
            else
            {
              v85 = *v16;
              v86 = (uint64_t)&(*v16)[1];
              v84 = 1;
              v87 = *v16;
              do
              {
                v88 = *(__n128 *)v86;
                v89 = v87->n128_u64[1];
                v90 = *(_QWORD *)(v86 + 8);
                if (v90 > v89)
                {
                  if (v88.n128_u64[0] <= v89)
                  {
                    v91 = v87->n128_u64[0];
                    if (v87->n128_u64[0] == v90)
                    {
                      v91 = 0;
                      v90 = 0;
                    }
                    v87->n128_u64[0] = v91;
                    v87->n128_u64[1] = v90;
                  }
                  else
                  {
                    if (v82 <= v84)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195243E38);
                    }
                    v87 = &v85[v84++];
                    *v87 = v88;
                  }
                }
                v86 += 16;
                --v83;
              }
              while (v83);
            }
            *v28 = v84;
          }
          *(_BYTE *)(a1 + 240) = 1;
        }
        goto LABEL_163;
      }
      v31 = v26;
    }
    else
    {
      v31 = 0;
    }
LABEL_110:
    *(_BYTE *)(a1 + 240) = 0;
    v65 = (void *)(v31 + 1);
    v66 = *(unsigned int *)(a1 + 104);
    if (v31 + 1 >= v66)
    {
      if ((_DWORD)v26 == (_DWORD)v66)
      {
        v68 = (__n128 *)WTF::Vector<WTF::Range<unsigned long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 96, v65, (unint64_t)&v104);
        a7 = *v68;
        (*v16)[*v28] = *v68;
      }
      else
      {
        a7 = v104;
        (*v16)[v31] = v104;
      }
      v26 = (*(_DWORD *)(a1 + 108) + 1);
      *(_DWORD *)(a1 + 108) = v26;
      if (!*(_BYTE *)(a1 + 240))
      {
        if ((_DWORD)v26)
        {
          a7 = std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*,false>(*v16, &(*v16)[v26], 126 - 2 * __clz(v26), 1, a7);
          v74 = *v28;
          if (!(_DWORD)v74)
          {
            __break(0xC471u);
LABEL_187:
            JUMPOUT(0x195243E30);
          }
          if ((_DWORD)v74 == 1)
          {
            LODWORD(v26) = 1;
          }
          else
          {
            v75 = *v16;
            v76 = *v16 + 1;
            v77 = v74 - 1;
            LODWORD(v26) = 1;
            v78 = *v16;
            do
            {
              a7 = *v76;
              v79 = v78->n128_u64[1];
              v80 = v76->n128_u64[1];
              if (v80 > v79)
              {
                if (a7.n128_u64[0] <= v79)
                {
                  v81 = v78->n128_u64[0];
                  if (v78->n128_u64[0] == v80)
                  {
                    v81 = 0;
                    v80 = 0;
                  }
                  v78->n128_u64[0] = v81;
                  v78->n128_u64[1] = v80;
                }
                else
                {
                  if (v74 <= v26)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195243E48);
                  }
                  v78 = &v75[v26];
                  LODWORD(v26) = v26 + 1;
                  *v78 = a7;
                }
              }
              ++v76;
              --v77;
            }
            while (v77);
          }
          *v28 = v26;
        }
        *(_BYTE *)(a1 + 240) = 1;
      }
    }
    else
    {
      if ((_DWORD)v26 == (_DWORD)v66)
      {
        v67 = (__n128 *)WTF::Vector<WTF::Range<unsigned long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 96, v65, (unint64_t)&v104);
        a7 = *v67;
        (*v16)[*v28] = *v67;
      }
      else
      {
        a7 = v104;
        (*v16)[v31] = v104;
      }
      LODWORD(v26) = *v28 + 1;
      *v28 = v26;
    }
    goto LABEL_147;
  }
LABEL_90:
  if (v18
    || (WTF::HashTable<unsigned long,unsigned long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash((uint64_t *)(a1 + 248), 8u), (v18 = *v17) != 0))
  {
    v50 = *((_DWORD *)v18 - 2);
  }
  else
  {
    v50 = 0;
  }
  v51 = (v10 + ~(v10 << 32)) ^ ((v10 + ~(v10 << 32)) >> 22);
  v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
  v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
  v54 = v50 & ((v53 >> 31) ^ v53);
  v55 = &v18[v54];
  v56 = *v55;
  if (*v55 != -1)
  {
    v57 = 0;
    v58 = 1;
    while (v56 != v10)
    {
      if (v56 == -2)
        v57 = v55;
      v54 = (v54 + v58) & v50;
      v55 = &v18[v54];
      v56 = *v55;
      ++v58;
      if (*v55 == -1)
      {
        if (v57)
        {
          *v57 = -1;
          --*((_DWORD *)*v17 - 4);
          v55 = v57;
        }
        goto LABEL_101;
      }
    }
    goto LABEL_163;
  }
LABEL_101:
  *v55 = v10;
  v59 = *v17;
  if (*v17)
    v60 = *((_DWORD *)v59 - 3) + 1;
  else
    v60 = 1;
  *((_DWORD *)v59 - 3) = v60;
  v69 = *v17;
  if (*v17)
    v70 = *((_DWORD *)v69 - 3);
  else
    v70 = 0;
  v71 = (*((_DWORD *)v69 - 4) + v70);
  v72 = *((unsigned int *)v69 - 1);
  if (v72 > 0x400)
  {
    if (v72 > 2 * v71)
      goto LABEL_163;
    goto LABEL_122;
  }
  if (3 * v72 <= 4 * v71)
  {
    if (!(_DWORD)v72)
    {
      v73 = 8;
      goto LABEL_133;
    }
LABEL_122:
    v73 = (_DWORD)v72 << (6 * *((_DWORD *)v69 - 3) >= (2 * v72));
LABEL_133:
    WTF::HashTable<unsigned long,unsigned long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash((uint64_t *)(a1 + 248), v73);
  }
LABEL_163:
  v104.n128_u64[0] = 0;
  v92 = *(_QWORD *)(a1 + 16);
  v93 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v93 = off_1E334D528;
  v93[1] = a1;
  v93[2] = &v105;
  v93[3] = &v104;
  v93[4] = &v106;
  v103 = v93;
  (*(void (**)(uint64_t, unint64_t, unint64_t, uint64_t, _QWORD **))(*(_QWORD *)v92 + 24))(v92, v10, v12, 1, &v103);
  v94 = (uint64_t)v103;
  v103 = 0;
  if (v94)
    (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
  v95 = v104.n128_u64[0];
  if (v104.n128_u64[0])
  {
    v103 = 0;
    v104.n128_u64[0] = 0;
    *(_QWORD *)a6 = v95;
    result = (uint64_t)WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v103);
    v96 = 0;
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a6 = 30;
    v96 = 1;
  }
  *(_DWORD *)(a6 + 16) = v96;
  v97 = (_QWORD *)v104.n128_u64[0];
  v104.n128_u64[0] = 0;
  if (v97)
  {
    v98 = *(_DWORD *)v97 == 2;
    *(_DWORD *)v97 -= 2;
    if (v98)
    {
      v99 = v97[10];
      if (v99)
      {
        *(_QWORD *)(v99 + 8) = 3;
        v97[10] = 0;
      }
      if ((v97[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v97 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v97 + 2));
      v101 = (WTF *)v97[1];
      if ((v101 & 1) == 0 && v101)
      {
        v102 = *(WTF **)v101;
        if (*(_QWORD *)v101)
        {
          *(_QWORD *)v101 = 0;
          *((_DWORD *)v101 + 2) = 0;
          WTF::fastFree(v102, v100);
        }
        WTF::fastFree(v101, v100);
      }
      return WTF::fastFree((WTF *)v97, v100);
    }
  }
  return result;
}

WTF *WebCore::GPUBuffer::internalUnmap(WebCore::GPUBuffer *this, WebCore::ScriptExecutionContext *a2)
{
  WTF *v4;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *result;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  WTF::StringImpl *v26[2];
  __int128 v27;
  __int128 v28;
  char v29;
  objc_class *v30;

  *((_BYTE *)this + 257) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  if (*((_DWORD *)this + 26))
  {
    if (*((_DWORD *)this + 27))
      *((_DWORD *)this + 27) = 0;
    v4 = (WTF *)*((_QWORD *)this + 12);
    if ((WebCore::GPUBuffer *)((char *)this + 112) != v4 && v4 != 0)
    {
      *((_QWORD *)this + 12) = 0;
      *((_DWORD *)this + 26) = 0;
      WTF::fastFree(v4, a2);
      v4 = (WTF *)*((_QWORD *)this + 12);
    }
    if (!v4)
    {
      *((_QWORD *)this + 12) = (char *)this + 112;
      *((_DWORD *)this + 26) = 8;
    }
  }
  *((_BYTE *)this + 240) = 1;
  v6 = *((_QWORD *)this + 31);
  if (v6)
  {
    *((_QWORD *)this + 31) = 0;
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  if (*((_BYTE *)this + 80))
  {
    v7 = *((_QWORD *)this + 9);
    v30 = 0;
    LOBYTE(v26[0]) = 16;
    v26[1] = 0;
    WebCore::DeferredPromise::reject(v7, (unsigned __int8 *)v26, 0, &v30);
    v9 = v26[1];
    v26[1] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    if (*((_BYTE *)this + 80))
    {
      v10 = (_DWORD *)*((_QWORD *)this + 9);
      *((_QWORD *)this + 9) = 0;
      if (v10)
      {
        if (v10[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
        else
          --v10[4];
      }
      *((_BYTE *)this + 80) = 0;
    }
  }
  *((_BYTE *)this + 68) = 0;
  v11 = *((unsigned int *)this + 9);
  if ((_DWORD)v11)
  {
    v12 = (_QWORD *)*((_QWORD *)this + 3);
    v13 = 16 * v11;
    v14 = MEMORY[0x1E0CC10F8];
    v15 = (_BYTE *)MEMORY[0x1E0CC10F0];
    do
    {
      v16 = *v12;
      if (!*v12)
        goto LABEL_38;
      v17 = *(_QWORD *)(v16 + 16);
      if (!v17)
        goto LABEL_38;
      v18 = *(_QWORD *)(v14 + 56);
      if (v18 && (*(_BYTE *)(v14 + 34) || !*v15) && !((v17 & 0x3FFFFFFFFLL) + v18))
        goto LABEL_38;
      if (*(_BYTE *)(v16 + 64) && (v22 = *(_QWORD *)(v16 + 32)) != 0)
      {
        if (!*(_QWORD *)(v22 + 32))
          goto LABEL_38;
      }
      else if (!*(_QWORD *)(v16 + 48))
      {
        goto LABEL_38;
      }
      if (v18 && (*(_BYTE *)(v14 + 34) || !*v15))
        v17 = (v17 & 0x3FFFFFFFFLL) + v18;
      if (*(_BYTE *)(v16 + 64) && (v23 = *(_QWORD *)(v16 + 32)) != 0)
        v19 = *(_QWORD *)(v23 + 32);
      else
        v19 = *(_QWORD *)(v16 + 48);
      result = (WTF *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), v17, v19, v12[1]);
      v29 = 0;
      v27 = 0u;
      v28 = 0u;
      *(_OWORD *)v26 = 0u;
      v21 = *(_DWORD *)(*v12 + 88);
      if (!v21)
      {
        __break(0xC471u);
        return result;
      }
      *(_DWORD *)(*v12 + 88) = v21 - 1;
      (*(void (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 344))(a2);
      JSC::ArrayBuffer::transferTo();
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)v26);
LABEL_38:
      v12 += 2;
      v13 -= 16;
    }
    while (v13);
  }
  result = (WTF *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
  if (*((_DWORD *)this + 8))
  {
    v25 = *((unsigned int *)this + 9);
    if ((_DWORD)v25)
    {
      WTF::VectorDestructor<true,WebCore::GPUBuffer::ArrayBufferWithOffset>::destruct(*((_QWORD *)this + 3), (_QWORD **)(*((_QWORD *)this + 3) + 16 * v25));
      *((_DWORD *)this + 9) = 0;
    }
    result = (WTF *)*((_QWORD *)this + 3);
    if (result)
    {
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 8) = 0;
      return (WTF *)WTF::fastFree(result, v24);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add@<X0>(uint64_t *result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  int v14;
  int *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = 9 * ((v9 + ~(v9 << 15)) ^ ((v9 + ~(v9 << 15)) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = (v11 ^ HIWORD(v11)) & v8;
  v13 = (int *)(v6 + 4 * v12);
  v14 = *v13;
  if (*v13 != -1)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == v9)
      {
        if ((v7 & 1) != 0)
          v19 = 0;
        else
          v19 = *(unsigned int *)(v6 - 4);
        v25 = 0;
        v24 = v6 + 4 * v19;
        goto LABEL_27;
      }
      if (v14 == -2)
        v15 = v13;
      v12 = (v12 + v16) & v8;
      v13 = (int *)(v6 + 4 * v12);
      v14 = *v13;
      ++v16;
    }
    while (*v13 != -1);
    if (v15)
    {
      *v15 = -1;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v13 = v15;
    }
  }
  *v13 = v9;
  v17 = *v4;
  if (*v4)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v20 = *v4;
  if (*v4)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 <= 2 * v22)
    {
LABEL_22:
      result = (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(v4, v13);
      v13 = (int *)result;
      v20 = *v4;
      if (*v4)
        v23 = *(unsigned int *)(v20 - 4);
      else
        v23 = 0;
    }
  }
  else if (3 * v23 <= 4 * v22)
  {
    goto LABEL_22;
  }
  v24 = v20 + 4 * v23;
  v25 = 1;
LABEL_27:
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 16) = v25;
  return result;
}

{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  int *v23;
  int v24;
  uint64_t v25;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = 9 * ((v9 + ~(v9 << 15)) ^ ((v9 + ~(v9 << 15)) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = (v11 ^ HIWORD(v11)) & v8;
  v13 = (int *)(v6 + 4 * v12);
  v14 = *v13;
  if (*v13 != -1)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v14 == v9)
      {
        if ((v7 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v6 - 4);
        v22 = 0;
        v21 = v6 + 4 * v25;
        goto LABEL_12;
      }
      if (v14 == -2)
        v23 = v13;
      v12 = (v12 + v24) & v8;
      v13 = (int *)(v6 + 4 * v12);
      v14 = *v13;
      ++v24;
    }
    while (*v13 != -1);
    if (v23)
    {
      *v23 = -1;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v13 = v23;
    }
  }
  *v13 = v9;
  v15 = *v4;
  if (*v4)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *v4;
  if (*v4)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19)
      goto LABEL_11;
LABEL_16:
    result = (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(v4, v13);
    v13 = (int *)result;
    v17 = *v4;
    if (*v4)
      v20 = *(unsigned int *)(v17 - 4);
    else
      v20 = 0;
    goto LABEL_11;
  }
  if (3 * v20 <= 4 * v19)
    goto LABEL_16;
LABEL_11:
  v21 = v17 + 4 * v20;
  v22 = 1;
LABEL_12:
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v21;
  *(_BYTE *)(a3 + 16) = v22;
  return result;
}

_DWORD *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(uint64_t *a1, int *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *result;
  uint64_t v14;
  int *v15;
  _DWORD *v16;

  v4 = *a1;
  if (!*a1)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_3;
  }
  v5 = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!v5)
  {
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v7 = v5 << (6 * v6 >= 2 * v5);
LABEL_4:
  v8 = WTF::fastMalloc((WTF *)(4 * v7 + 16));
  v10 = v8;
  v11 = v8 + 16;
  if (v7)
    memset((void *)(v8 + 16), 255, 4 * v7);
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  v12 = 0;
  if (v5)
  {
    v14 = v5;
    v15 = (int *)v4;
    do
    {
      if (*v15 <= 0xFFFFFFFD)
      {
        v16 = WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::reinsert(a1, v15);
        if (v15 == a2)
          v12 = v16;
      }
      ++v15;
      --v14;
    }
    while (v14);
    goto LABEL_16;
  }
  result = 0;
  if (v4)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v4 - 16), v9);
    return v12;
  }
  return result;
}

_DWORD *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::reinsert(uint64_t *a1, int *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  _DWORD *result;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = *a2;
  v6 = 9 * ((v5 + ~(v5 << 15)) ^ ((v5 + ~(v5 << 15)) >> 10));
  v7 = ((v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11)) ^ (((v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11)) >> 16);
  do
  {
    v8 = v7 & v3;
    v7 = ++v4 + v8;
  }
  while (*(_DWORD *)(v2 + 4 * v8) != -1);
  result = (_DWORD *)(v2 + 4 * v8);
  *result = v5;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::BarcodeDetector::getSupportedFormats(WebCore::ScriptExecutionContext &,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::BarcodeFormat>>> &&)::$_0,void,WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E334D398;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BarcodeDetector::getSupportedFormats(WebCore::ScriptExecutionContext &,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::BarcodeFormat>>> &&)::$_0,void,WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E334D398;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BarcodeDetector::getSupportedFormats(WebCore::ScriptExecutionContext &,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::BarcodeFormat>>> &&)::$_0,void,WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t result;
  WTF *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  JSC::VM *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl **v24;
  int v25;
  unsigned __int8 *v26;
  unsigned int v27;
  JSValue v28;
  void *v29;
  objc_class *v30;
  JSC::VM *v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44[8];
  WTF::StringImpl *v45;
  int v46;
  BOOL v47;
  uint64_t v48;
  WTF *v49;
  _OWORD v50[4];
  uint64_t v51;
  JSC::VM *v52;

  result = *((unsigned int *)a2 + 3);
  if ((_DWORD)result)
  {
    result = WTF::fastMalloc((WTF *)result);
    v5 = (WTF *)result;
    v6 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v6)
    {
      v7 = **a2;
      if (v7 > 0xD)
      {
LABEL_7:
        __break(0xC471u);
        JUMPOUT(0x19524455CLL);
      }
      v8 = 0;
      v9 = (uint64_t)(*a2 + 1);
      while (1)
      {
        *(_BYTE *)(result + v8) = v7;
        if (v6 - 1 == v8)
          break;
        v7 = *(unsigned __int8 *)(v9 + v8++);
        if (v7 >= 0xE)
          goto LABEL_7;
      }
    }
  }
  else
  {
    v5 = 0;
    LODWORD(v6) = 0;
  }
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(v10 + 24);
  if (v11 && *(_QWORD *)v11 && (*(_BYTE *)(v11 + 8) & 3) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
    if (!v12 || (*(_BYTE *)(v12 + 8) & 3) != 0)
      v13 = 0;
    else
      v13 = *(uint64_t **)v12;
    v14 = v13[7];
    MEMORY[0x19AEA3294](v44, v14);
    v15 = **(_QWORD **)(v10 + 32);
    v16 = (JSC::VM *)v13[7];
    v52 = v16;
    v47 = 0;
    v48 = 0x800000000;
    v49 = (WTF *)((char *)v50 + 8);
    memset(v50, 0, sizeof(v50));
    v51 = 0;
    if (v6 >= 9)
    {
      v43 = v10;
      v17 = v6;
      v41 = v15;
      v42 = v14;
      v47 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v48) == 1;
      goto LABEL_18;
    }
    if ((_DWORD)v6)
    {
      v41 = v15;
      v42 = v14;
      v43 = v10;
      v17 = v6;
LABEL_18:
      v18 = v5;
      while (1)
      {
        v19 = v13[7];
        v20 = (WTF::StringImpl ***)(v19 + 41968);
        WebCore::convertEnumerationToString(*(unsigned __int8 *)v18, &v45);
        v22 = v45;
        if (v45)
          break;
        v24 = *v20;
LABEL_27:
        if (*((_DWORD *)v16 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
        {
          v30 = 0;
          v14 = v42;
          v10 = v43;
          goto LABEL_49;
        }
        v25 = v48;
        if ((_DWORD)v48 == HIDWORD(v48) || v49 != (WTF *)((char *)v50 + 8) && v49)
        {
          v28.super.isa = (Class)v24;
          if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v48, v28) == 1)
            v47 = 1;
        }
        else
        {
          *((_QWORD *)v49 + v48) = v24;
          LODWORD(v48) = v25 + 1;
        }
        v18 = (WTF *)((char *)v18 + 1);
        if (!--v17)
        {
          v14 = v42;
          v10 = v43;
          v15 = v41;
          if (!v47)
            goto LABEL_47;
          JSC::throwOutOfMemoryError();
LABEL_65:
          v30 = 0;
          goto LABEL_49;
        }
      }
      v23 = *((_DWORD *)v45 + 1);
      if (v23)
      {
        if (v23 != 1)
        {
LABEL_22:
          v24 = *(WTF::StringImpl ***)(v19 + 64760);
          if (!v24 || v45 != v24[1])
            v24 = (WTF::StringImpl **)JSC::jsStringWithCacheSlowCase();
          goto LABEL_25;
        }
        v26 = (unsigned __int8 *)*((_QWORD *)v45 + 1);
        if ((*((_BYTE *)v45 + 16) & 4) != 0)
        {
          v27 = *v26;
        }
        else
        {
          v27 = *(unsigned __int16 *)v26;
          if (v27 > 0xFF)
            goto LABEL_22;
          v27 = v27;
        }
        v24 = *(WTF::StringImpl ***)(v19 + 8 * v27 + 42216);
      }
      else
      {
        v24 = *v20;
      }
LABEL_25:
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
      goto LABEL_27;
    }
LABEL_47:
    v45 = v49;
    v46 = v48;
    v31 = *(JSC::VM **)(v15 + 56);
    if (*((_DWORD *)v31 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v31) & 1) != 0)
      goto LABEL_65;
    v30 = (objc_class *)JSC::constructArray();
LABEL_49:
    v32 = *(uint64_t **)&v50[0];
    if (*(_QWORD *)&v50[0])
    {
      v45 = (WTF::StringImpl *)&v48;
      v35 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v50[0], (uint64_t *)&v45);
      WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v32, v35);
    }
    if (v49 != (WTF *)((char *)v50 + 8) && v49)
      WTF::fastFree(v49, v29);
    v33 = *(_QWORD *)(v14 + 16);
    if (!v33)
    {
      WebCore::DeferredPromise::callFunction(v10, v13, 0, v30);
      v33 = *(_QWORD *)(v14 + 16);
      if (!v33)
        goto LABEL_54;
    }
    v34 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v13);
    if (!(*(unsigned int (**)(_QWORD *))(*v34 + 64))(v34))
    {
LABEL_62:
      WebCore::reportException((JSC::JSGlobalObject *)v13, v33, 0, 0, 0);
LABEL_54:
      result = MEMORY[0x19AEA32A0](v44);
      goto LABEL_55;
    }
    v36 = v34[43];
    if (*(_QWORD *)(v14 + 24) == v33)
    {
LABEL_79:
      *(_BYTE *)(*(_QWORD *)(v36 + 8) + 93442) = 1;
      *(_BYTE *)(v10 + 44) = 1;
      goto LABEL_62;
    }
    if (!v36)
      goto LABEL_62;
    v37 = (unsigned __int8 *)(v36 + 40);
    if (__ldaxr((unsigned __int8 *)(v36 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v37))
    {
      goto LABEL_73;
    }
    MEMORY[0x19AEA534C](v36 + 40);
LABEL_73:
    v39 = *(unsigned __int8 *)(v36 + 41);
    v40 = __ldxr(v37);
    if (v40 == 1)
    {
      if (!__stlxr(0, v37))
      {
LABEL_78:
        if (!v39)
          goto LABEL_62;
        goto LABEL_79;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v36 + 40));
    goto LABEL_78;
  }
LABEL_55:
  if (v5)
    return WTF::fastFree(v5, a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::BarcodeDetector::detect(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedBarcode>>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  _DWORD *v3;

  *a1 = &off_1E334D3C0;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BarcodeDetector::detect(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedBarcode>>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E334D3C0;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BarcodeDetector::detect(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedBarcode>>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&>::call(uint64_t a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v21[2];

  if (a2[4])
    goto LABEL_2;
  v5 = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  v6 = *((_QWORD *)v5 + 2);
  *((_QWORD *)v5 + 2) = 0;
  if (v5[2] == 1)
  {
    if (*(_QWORD *)v5)
    {
      *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
      *(_QWORD *)v5 = 0;
    }
    bmalloc::api::isoDeallocate((bmalloc::api *)v5, a2);
    if (!v6)
      goto LABEL_2;
  }
  else
  {
    --v5[2];
    if (!v6)
    {
LABEL_2:
      v21[0] = 0;
      v21[1] = 0;
      WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedBarcode>>>(*(_QWORD *)(a1 + 16), (uint64_t)v21);
      return WTF::Vector<WebCore::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v3);
    }
  }
  v21[0] = v6;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E334D3E8;
  v9[1] = v8;
  v20 = v9;
  (*(void (**)(uint64_t, _QWORD *, _QWORD **))(*(_QWORD *)v7 + 16))(v7, v21, &v20);
  result = (uint64_t)v20;
  v20 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v11 = v21[0];
  v21[0] = 0;
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (__ldaxr((unsigned __int8 *)v12))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v12))
    {
      goto LABEL_17;
    }
    result = MEMORY[0x19AEA534C](v12);
LABEL_17:
    v14 = *(_QWORD *)(v12 + 8);
    v15 = v14 - 1;
    *(_QWORD *)(v12 + 8) = v14 - 1;
    if (v14 == 1)
    {
      v19 = *(_QWORD *)(v12 + 16);
      v16 = *(_QWORD *)(v12 + 24);
      *(_QWORD *)(v12 + 24) = 0;
      v17 = v19 != 0;
    }
    else
    {
      v16 = 0;
      v17 = 1;
    }
    v18 = __ldxr((unsigned __int8 *)v12);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v12))
      {
LABEL_24:
        if (!v15)
        {
          if (v16)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          if (!v17)
            return WTF::fastFree((WTF *)v12, v10);
        }
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v12);
    goto LABEL_24;
  }
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedBarcode>>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  JSC *v6;
  uint64_t v7;
  uint64_t v8;
  JSC::VM *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  int v14;
  BOOL v15;
  JSValue v16;
  void *v17;
  JSC::VM *v18;
  objc_class *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v27;
  int v28;
  uint64_t v29;
  WTF *v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  WTF *v34;
  _OWORD v35[4];
  uint64_t v36;
  JSC::VM *v37;

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(JSC **)v5;
    v7 = *((_QWORD *)v6 + 7);
    MEMORY[0x19AEA3294](&v29, v7);
    v8 = **(_QWORD **)(v4 + 32);
    v9 = (JSC::VM *)*((_QWORD *)v6 + 7);
    v37 = v9;
    v32 = 0;
    v33 = 0x800000000;
    v34 = (WTF *)((char *)v35 + 8);
    memset(v35, 0, sizeof(v35));
    v36 = 0;
    v10 = *(_DWORD *)(a2 + 12);
    if (v10 >= 9)
    {
      v32 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v33) == 1;
      v10 = *(_DWORD *)(a2 + 12);
      if (v10)
      {
LABEL_9:
        v11 = *(_QWORD *)a2;
        v12 = 40 * v10;
        do
        {
          v13 = (objc_class *)WebCore::convertDictionaryToJS(v6, v8, v11);
          if (*((_DWORD *)v9 + 20))
          {
            if ((JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
              goto LABEL_41;
          }
          v14 = v33;
          if ((_DWORD)v33 != HIDWORD(v33) && (v34 != (WTF *)((char *)v35 + 8) ? (v15 = v34 == 0) : (v15 = 1), v15))
          {
            *((_QWORD *)v34 + v33) = v13;
            LODWORD(v33) = v14 + 1;
          }
          else
          {
            v16.super.isa = v13;
            if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v33, v16) == 1)
              v32 = 1;
          }
          v11 += 40;
          v12 -= 40;
        }
        while (v12);
      }
    }
    else if (v10)
    {
      goto LABEL_9;
    }
    if (v32)
    {
      JSC::throwOutOfMemoryError();
    }
    else
    {
      v30 = v34;
      v31 = v33;
      v18 = *(JSC::VM **)(v8 + 56);
      if (!*((_DWORD *)v18 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) == 0)
      {
        v19 = (objc_class *)JSC::constructArray();
        goto LABEL_28;
      }
    }
LABEL_41:
    v19 = 0;
LABEL_28:
    v20 = *(uint64_t **)&v35[0];
    if (*(_QWORD *)&v35[0])
    {
      v30 = (WTF *)&v33;
      v23 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v35[0], (uint64_t *)&v30);
      WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v20, v23);
    }
    if (v34 != (WTF *)((char *)v35 + 8) && v34)
      WTF::fastFree(v34, v17);
    v21 = *(_QWORD *)(v7 + 16);
    if (!v21)
    {
      WebCore::DeferredPromise::callFunction(v4, (uint64_t *)v6, 0, v19);
      v21 = *(_QWORD *)(v7 + 16);
      if (!v21)
        return MEMORY[0x19AEA32A0](&v29);
    }
    v22 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v22 + 64))(v22))
    {
LABEL_38:
      WebCore::reportException(v6, v21, 0, 0, 0);
      return MEMORY[0x19AEA32A0](&v29);
    }
    v24 = v22[43];
    if (*(_QWORD *)(v7 + 24) == v21)
    {
LABEL_55:
      *(_BYTE *)(*(_QWORD *)(v24 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_38;
    }
    if (!v24)
      goto LABEL_38;
    v25 = (unsigned __int8 *)(v24 + 40);
    if (__ldaxr((unsigned __int8 *)(v24 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v25))
    {
      goto LABEL_49;
    }
    MEMORY[0x19AEA534C](v24 + 40);
LABEL_49:
    v27 = *(unsigned __int8 *)(v24 + 41);
    v28 = __ldxr(v25);
    if (v28 == 1)
    {
      if (!__stlxr(0, v25))
      {
LABEL_54:
        if (!v27)
          goto LABEL_38;
        goto LABEL_55;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v24 + 40));
    goto LABEL_54;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl *v7;
  bmalloc::api *v8;
  WTF *v9;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = 40 * v3;
    v5 = *(_QWORD *)a1 + 24;
    do
    {
      v6 = *(WTF **)v5;
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
        WTF::fastFree(v6, a2);
      }
      v7 = *(WTF::StringImpl **)(v5 - 16);
      *(_QWORD *)(v5 - 16) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(bmalloc::api **)(v5 - 24);
      *(_QWORD *)(v5 - 24) = 0;
      if (v8)
      {
        if (*((_DWORD *)v8 + 2) == 1)
        {
          if (*(_QWORD *)v8)
          {
            *(_QWORD *)(*(_QWORD *)v8 + 8) = 3;
            *(_QWORD *)v8 = 0;
          }
          bmalloc::api::isoDeallocate(v8, a2);
        }
        else
        {
          --*((_DWORD *)v8 + 2);
        }
      }
      v5 += 40;
      v4 -= 40;
    }
    while (v4);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::BarcodeDetector::detect(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedBarcode>>> &&)::$_0::operator()(WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&)::{lambda(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)#1},void,WTF::CrashOnOverflow>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E334D3E8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BarcodeDetector::detect(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedBarcode>>> &&)::$_0::operator()(WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&)::{lambda(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)#1},void,WTF::CrashOnOverflow>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E334D3E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BarcodeDetector::detect(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedBarcode>>> &&)::$_0::operator()(WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&)::{lambda(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)#1},void,WTF::CrashOnOverflow>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float32x2_t *v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v25;
  float64x2_t v26;
  float64x2_t v27;
  uint64_t v28;
  uint64_t v29;

  v28 = 0;
  v29 = 0;
  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    if (v3 >= 0x6666667)
    {
LABEL_20:
      __break(0xC471u);
      JUMPOUT(0x19524526CLL);
    }
    v5 = 40 * v3;
    v6 = WTF::fastMalloc((WTF *)(40 * v3));
    LODWORD(v29) = (v5 & 0xFFFFFFF8) / 0x28;
    v28 = v6;
    if (*((_DWORD *)a2 + 3))
    {
      v7 = v6;
      v25 = a1;
      v8 = 0;
      do
      {
        v9 = *a2;
        v10 = (float32x2_t *)(*a2 + 48 * v8);
        v26 = vcvtq_f64_f32(*v10);
        v27 = vcvtq_f64_f32(v10[1]);
        v11 = bmalloc::api::isoAllocate();
        *(_QWORD *)v11 = 0;
        *(_DWORD *)(v11 + 8) = 1;
        *(float64x2_t *)(v11 + 16) = v26;
        *(float64x2_t *)(v11 + 32) = v27;
        v12 = (_DWORD *)v10[2];
        if (v12)
          *v12 += 2;
        v13 = *(unsigned __int8 *)(v9 + 48 * v8 + 24);
        if (v13 >= 0xE)
          goto LABEL_20;
        v14 = v9 + 48 * v8;
        v17 = *(_DWORD *)(v14 + 44);
        v16 = (unsigned int *)(v14 + 44);
        v15 = v17;
        if (v17)
        {
          if (v15 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x195245274);
          }
          v18 = WTF::fastMalloc((WTF *)(16 * v15));
          v19 = *v16;
          if ((_DWORD)v19)
          {
            v20 = 0;
            v21 = *(_QWORD *)(v16 - 3);
            do
            {
              *(float64x2_t *)(v18 + 16 * v20) = vcvtq_f64_f32(*(float32x2_t *)(v21 + 8 * v20));
              ++v20;
            }
            while (v19 != v20);
          }
        }
        else
        {
          LODWORD(v19) = 0;
          v18 = 0;
        }
        v22 = v7 + 40 * v8;
        *(_QWORD *)v22 = v11;
        *(_QWORD *)(v22 + 8) = v12;
        *(_BYTE *)(v22 + 16) = v13;
        *(_QWORD *)(v22 + 24) = v18;
        *(_QWORD *)(v22 + 32) = 0;
        *(_DWORD *)(v22 + 32) = v15;
        *(_DWORD *)(v22 + 36) = v19;
        ++v8;
      }
      while (v8 < *((unsigned int *)a2 + 3));
      HIDWORD(v29) = v8;
      a1 = v25;
    }
  }
  WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedBarcode>>>(*(_QWORD *)(a1 + 8), (uint64_t)&v28);
  return WTF::Vector<WebCore::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v23);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FaceDetector::detect(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedFace>>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  _DWORD *v3;

  *a1 = &off_1E334D410;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FaceDetector::detect(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedFace>>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E334D410;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FaceDetector::detect(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedFace>>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&>::call(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v20[2];

  if (a2[4])
    goto LABEL_2;
  v4 = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  v5 = *((_QWORD *)v4 + 2);
  *((_QWORD *)v4 + 2) = 0;
  if (v4[2] == 1)
  {
    if (*(_QWORD *)v4)
    {
      *(_QWORD *)(*(_QWORD *)v4 + 8) = 3;
      *(_QWORD *)v4 = 0;
    }
    bmalloc::api::isoDeallocate((bmalloc::api *)v4, a2);
    if (!v5)
      goto LABEL_2;
  }
  else
  {
    --v4[2];
    if (!v5)
    {
LABEL_2:
      v20[0] = 0;
      v20[1] = 0;
      return WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedFace>>>(*(_QWORD *)(a1 + 16), (uint64_t)v20);
    }
  }
  v20[0] = v5;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E334D438;
  v8[1] = v7;
  v19 = v8;
  (*(void (**)(uint64_t, _QWORD *, _QWORD **))(*(_QWORD *)v6 + 16))(v6, v20, &v19);
  result = (uint64_t)v19;
  v19 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v10 = v20[0];
  v20[0] = 0;
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11))
    {
      goto LABEL_17;
    }
    result = MEMORY[0x19AEA534C](v11);
LABEL_17:
    v13 = *(_QWORD *)(v11 + 8);
    v14 = v13 - 1;
    *(_QWORD *)(v11 + 8) = v13 - 1;
    if (v13 == 1)
    {
      v18 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v11 + 24) = 0;
      v16 = v18 != 0;
    }
    else
    {
      v15 = 0;
      v16 = 1;
    }
    v17 = __ldxr((unsigned __int8 *)v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
LABEL_24:
        if (!v14)
        {
          if (v15)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          if (!v16)
            return WTF::fastFree((WTF *)v11, v9);
        }
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v11);
    goto LABEL_24;
  }
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedFace>>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  JSC::VM *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  int v14;
  BOOL v15;
  JSValue v16;
  void *v17;
  JSC::VM *v18;
  objc_class *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v27;
  int v28;
  uint64_t v29;
  WTF *v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  WTF *v34;
  _OWORD v35[4];
  uint64_t v36;
  JSC::VM *v37;

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](&v29, v7);
    v8 = **(_QWORD **)(v4 + 32);
    v9 = (JSC::VM *)v6[7];
    v37 = v9;
    v32 = 0;
    v33 = 0x800000000;
    v34 = (WTF *)((char *)v35 + 8);
    memset(v35, 0, sizeof(v35));
    v36 = 0;
    v10 = *(_DWORD *)(a2 + 12);
    if (v10 >= 9)
    {
      v32 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v33) == 1;
      v10 = *(_DWORD *)(a2 + 12);
      if (v10)
      {
LABEL_9:
        v11 = *(_QWORD *)a2;
        v12 = 32 * v10;
        do
        {
          v13 = (objc_class *)WebCore::convertDictionaryToJS(v6, v8, v11);
          if (*((_DWORD *)v9 + 20))
          {
            if ((JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
              goto LABEL_41;
          }
          v14 = v33;
          if ((_DWORD)v33 != HIDWORD(v33) && (v34 != (WTF *)((char *)v35 + 8) ? (v15 = v34 == 0) : (v15 = 1), v15))
          {
            *((_QWORD *)v34 + v33) = v13;
            LODWORD(v33) = v14 + 1;
          }
          else
          {
            v16.super.isa = v13;
            if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v33, v16) == 1)
              v32 = 1;
          }
          v11 += 32;
          v12 -= 32;
        }
        while (v12);
      }
    }
    else if (v10)
    {
      goto LABEL_9;
    }
    if (v32)
    {
      JSC::throwOutOfMemoryError();
    }
    else
    {
      v30 = v34;
      v31 = v33;
      v18 = *(JSC::VM **)(v8 + 56);
      if (!*((_DWORD *)v18 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) == 0)
      {
        v19 = (objc_class *)JSC::constructArray();
        goto LABEL_28;
      }
    }
LABEL_41:
    v19 = 0;
LABEL_28:
    v20 = *(uint64_t **)&v35[0];
    if (*(_QWORD *)&v35[0])
    {
      v30 = (WTF *)&v33;
      v23 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v35[0], (uint64_t *)&v30);
      WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v20, v23);
    }
    if (v34 != (WTF *)((char *)v35 + 8) && v34)
      WTF::fastFree(v34, v17);
    v21 = *(_QWORD *)(v7 + 16);
    if (!v21)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v19);
      v21 = *(_QWORD *)(v7 + 16);
      if (!v21)
        return MEMORY[0x19AEA32A0](&v29);
    }
    v22 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v22 + 64))(v22))
    {
LABEL_38:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v21, 0, 0, 0);
      return MEMORY[0x19AEA32A0](&v29);
    }
    v24 = v22[43];
    if (*(_QWORD *)(v7 + 24) == v21)
    {
LABEL_55:
      *(_BYTE *)(*(_QWORD *)(v24 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_38;
    }
    if (!v24)
      goto LABEL_38;
    v25 = (unsigned __int8 *)(v24 + 40);
    if (__ldaxr((unsigned __int8 *)(v24 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v25))
    {
      goto LABEL_49;
    }
    MEMORY[0x19AEA534C](v24 + 40);
LABEL_49:
    v27 = *(unsigned __int8 *)(v24 + 41);
    v28 = __ldxr(v25);
    if (v28 == 1)
    {
      if (!__stlxr(0, v25))
      {
LABEL_54:
        if (!v27)
          goto LABEL_38;
        goto LABEL_55;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v24 + 40));
    goto LABEL_54;
  }
  return result;
}

bmalloc::api *WTF::VectorDestructor<true,WebCore::DetectedFace>::destruct(bmalloc::api *result, bmalloc::api *a2)
{
  bmalloc::api *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;

  if (result != a2)
  {
    v3 = result;
    do
    {
      if (*((_BYTE *)v3 + 24))
      {
        v4 = *((unsigned int *)v3 + 5);
        v5 = (WTF *)*((_QWORD *)v3 + 1);
        if ((_DWORD)v4)
        {
          v6 = 24 * v4;
          do
          {
            v7 = *(WTF **)v5;
            if (*(_QWORD *)v5)
            {
              *(_QWORD *)v5 = 0;
              *((_DWORD *)v5 + 2) = 0;
              WTF::fastFree(v7, a2);
            }
            v5 = (WTF *)((char *)v5 + 24);
            v6 -= 24;
          }
          while (v6);
          v5 = (WTF *)*((_QWORD *)v3 + 1);
        }
        if (v5)
        {
          *((_QWORD *)v3 + 1) = 0;
          *((_DWORD *)v3 + 4) = 0;
          WTF::fastFree(v5, a2);
        }
      }
      result = *(bmalloc::api **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
        {
          if (*(_QWORD *)result)
          {
            *(_QWORD *)(*(_QWORD *)result + 8) = 3;
            *(_QWORD *)result = 0;
          }
          result = (bmalloc::api *)bmalloc::api::isoDeallocate(result, a2);
        }
        else
        {
          --*((_DWORD *)result + 2);
        }
      }
      v3 = (bmalloc::api *)((char *)v3 + 32);
    }
    while (v3 != a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FaceDetector::detect(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedFace>>> &&)::$_0::operator()(WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&)::{lambda(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)#1},void,WTF::CrashOnOverflow>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E334D438;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FaceDetector::detect(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedFace>>> &&)::$_0::operator()(WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&)::{lambda(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)#1},void,WTF::CrashOnOverflow>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E334D438;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FaceDetector::detect(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedFace>>> &&)::$_0::operator()(WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&)::{lambda(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)#1},void,WTF::CrashOnOverflow>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;
  unint64_t v7;
  uint64_t v8;
  float32x2_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  float32x2_t *v19;
  float32x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t *v29;
  _BYTE *v30;
  unsigned int v31;
  char *v32;
  uint64_t *v33;
  char *v34;
  void *v35;
  uint64_t *v37;
  WTF *v38;
  float64x2_t v39;
  float64x2_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;

  v42 = 0;
  v43 = 0;
  v3 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v3)
    return WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedFace>>>(*(_QWORD *)(a1 + 8), (uint64_t)&v42);
  if (v3 >> 27)
  {
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x195245C80);
  }
  v4 = a2;
  v5 = WTF::fastMalloc((WTF *)(32 * v3));
  v6 = (WTF *)v5;
  LODWORD(v43) = v3;
  v42 = v5;
  if (!*((_DWORD *)v4 + 3))
  {
    WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedFace>>>(*(_QWORD *)(a1 + 8), (uint64_t)&v42);
    return WTF::fastFree(v6, v35);
  }
  v37 = v4;
  v7 = 0;
  v38 = (WTF *)v5;
  do
  {
    v8 = *v4;
    v9 = (float32x2_t *)(*v4 + 40 * v7);
    v39 = vcvtq_f64_f32(*v9);
    v40 = vcvtq_f64_f32(v9[1]);
    v10 = bmalloc::api::isoAllocate();
    v11 = v10;
    *(_QWORD *)v10 = 0;
    *(_DWORD *)(v10 + 8) = 1;
    *(float64x2_t *)(v10 + 16) = v39;
    *(float64x2_t *)(v10 + 32) = v40;
    if (!v9[4].i8[0])
    {
      v32 = (char *)v6 + 32 * v7;
      *(_QWORD *)v32 = v10;
      v32[8] = 0;
      v32[24] = 0;
      goto LABEL_25;
    }
    v12 = v8 + 40 * v7;
    v15 = *(_DWORD *)(v12 + 28);
    v14 = (_DWORD *)(v12 + 28);
    v13 = v15;
    if (v15)
    {
      if (v13 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x195245C90);
      }
      v16 = 24 * v13;
      v17 = WTF::fastMalloc((WTF *)(24 * v13));
      v41 = (v16 & 0xFFFFFFF8) / 0x18;
      if (*v14)
      {
        v18 = 0;
        v19 = v9 + 2;
        do
        {
          v20 = *v19;
          v21 = *(_QWORD *)v19 + 24 * v18;
          v22 = *(unsigned int *)(v21 + 12);
          if ((_DWORD)v22)
          {
            if (v22 >> 28)
            {
              __break(0xC471u);
              JUMPOUT(0x195245C88);
            }
            v23 = WTF::fastMalloc((WTF *)(16 * v22));
            v24 = *(unsigned int *)(v21 + 12);
            if ((_DWORD)v24)
            {
              v25 = 0;
              v26 = *(_QWORD *)v21;
              do
              {
                *(float64x2_t *)(v23 + 16 * v25) = vcvtq_f64_f32(*(float32x2_t *)(v26 + 8 * v25));
                ++v25;
              }
              while (v24 != v25);
            }
          }
          else
          {
            v23 = 0;
            LODWORD(v24) = 0;
          }
          v27 = *(unsigned __int8 *)(*(_QWORD *)&v20 + 24 * v18 + 16);
          if (v27 >= 3)
            goto LABEL_34;
          v28 = v17 + 24 * v18;
          *(_QWORD *)v28 = v23;
          *(_DWORD *)(v28 + 8) = v22;
          *(_DWORD *)(v28 + 12) = v24;
          *(_BYTE *)(v28 + 16) = v27;
          ++v18;
        }
        while (v18 < *v14);
        v4 = v37;
        v6 = v38;
        v29 = (uint64_t *)((char *)v38 + 32 * v7);
        *v29 = v11;
        v30 = v29 + 1;
        v31 = v41;
        goto LABEL_24;
      }
      v31 = (v16 & 0xFFFFFFF8) / 0x18;
    }
    else
    {
      v31 = 0;
      v17 = 0;
    }
    LODWORD(v18) = 0;
    v33 = (uint64_t *)((char *)v6 + 32 * v7);
    *v33 = v11;
    v30 = v33 + 1;
LABEL_24:
    *v30 = 0;
    v34 = (char *)v6 + 32 * v7;
    *((_QWORD *)v34 + 2) = 0;
    *(_QWORD *)v30 = v17;
    *((_DWORD *)v34 + 4) = v31;
    *((_DWORD *)v34 + 5) = v18;
    v34[24] = 1;
LABEL_25:
    ++v7;
  }
  while (v7 < *((unsigned int *)v4 + 3));
  HIDWORD(v43) = v7;
  WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedFace>>>(*(_QWORD *)(a1 + 8), (uint64_t)&v42);
  if ((_DWORD)v7)
    WTF::VectorDestructor<true,WebCore::DetectedFace>::destruct(v6, (WTF *)((char *)v6 + 32 * v7));
  return WTF::fastFree(v6, v35);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::TextDetector::detect(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedText>>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  _DWORD *v3;

  *a1 = &off_1E334D460;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextDetector::detect(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedText>>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E334D460;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextDetector::detect(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedText>>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&>::call(uint64_t a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v21[2];

  if (a2[4])
    goto LABEL_2;
  v5 = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  v6 = *((_QWORD *)v5 + 2);
  *((_QWORD *)v5 + 2) = 0;
  if (v5[2] == 1)
  {
    if (*(_QWORD *)v5)
    {
      *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
      *(_QWORD *)v5 = 0;
    }
    bmalloc::api::isoDeallocate((bmalloc::api *)v5, a2);
    if (!v6)
      goto LABEL_2;
  }
  else
  {
    --v5[2];
    if (!v6)
    {
LABEL_2:
      v21[0] = 0;
      v21[1] = 0;
      WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedText>>>(*(_QWORD *)(a1 + 16), (uint64_t)v21);
      return WTF::Vector<WebCore::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v3);
    }
  }
  v21[0] = v6;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E334D488;
  v9[1] = v8;
  v20 = v9;
  (*(void (**)(uint64_t, _QWORD *, _QWORD **))(*(_QWORD *)v7 + 16))(v7, v21, &v20);
  result = (uint64_t)v20;
  v20 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v11 = v21[0];
  v21[0] = 0;
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (__ldaxr((unsigned __int8 *)v12))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v12))
    {
      goto LABEL_17;
    }
    result = MEMORY[0x19AEA534C](v12);
LABEL_17:
    v14 = *(_QWORD *)(v12 + 8);
    v15 = v14 - 1;
    *(_QWORD *)(v12 + 8) = v14 - 1;
    if (v14 == 1)
    {
      v19 = *(_QWORD *)(v12 + 16);
      v16 = *(_QWORD *)(v12 + 24);
      *(_QWORD *)(v12 + 24) = 0;
      v17 = v19 != 0;
    }
    else
    {
      v16 = 0;
      v17 = 1;
    }
    v18 = __ldxr((unsigned __int8 *)v12);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v12))
      {
LABEL_24:
        if (!v15)
        {
          if (v16)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          if (!v17)
            return WTF::fastFree((WTF *)v12, v10);
        }
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v12);
    goto LABEL_24;
  }
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedText>>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  JSC *v6;
  uint64_t v7;
  uint64_t v8;
  JSC::VM *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  int v14;
  BOOL v15;
  JSValue v16;
  void *v17;
  JSC::VM *v18;
  objc_class *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v27;
  int v28;
  uint64_t v29;
  WTF *v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  WTF *v34;
  _OWORD v35[4];
  uint64_t v36;
  JSC::VM *v37;

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(JSC **)v5;
    v7 = *((_QWORD *)v6 + 7);
    MEMORY[0x19AEA3294](&v29, v7);
    v8 = **(_QWORD **)(v4 + 32);
    v9 = (JSC::VM *)*((_QWORD *)v6 + 7);
    v37 = v9;
    v32 = 0;
    v33 = 0x800000000;
    v34 = (WTF *)((char *)v35 + 8);
    memset(v35, 0, sizeof(v35));
    v36 = 0;
    v10 = *(_DWORD *)(a2 + 12);
    if (v10 >= 9)
    {
      v32 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v33) == 1;
      v10 = *(_DWORD *)(a2 + 12);
      if (v10)
      {
LABEL_9:
        v11 = *(_QWORD *)a2;
        v12 = 32 * v10;
        do
        {
          v13 = (objc_class *)WebCore::convertDictionaryToJS(v6, v8, v11);
          if (*((_DWORD *)v9 + 20))
          {
            if ((JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
              goto LABEL_41;
          }
          v14 = v33;
          if ((_DWORD)v33 != HIDWORD(v33) && (v34 != (WTF *)((char *)v35 + 8) ? (v15 = v34 == 0) : (v15 = 1), v15))
          {
            *((_QWORD *)v34 + v33) = v13;
            LODWORD(v33) = v14 + 1;
          }
          else
          {
            v16.super.isa = v13;
            if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v33, v16) == 1)
              v32 = 1;
          }
          v11 += 32;
          v12 -= 32;
        }
        while (v12);
      }
    }
    else if (v10)
    {
      goto LABEL_9;
    }
    if (v32)
    {
      JSC::throwOutOfMemoryError();
    }
    else
    {
      v30 = v34;
      v31 = v33;
      v18 = *(JSC::VM **)(v8 + 56);
      if (!*((_DWORD *)v18 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) == 0)
      {
        v19 = (objc_class *)JSC::constructArray();
        goto LABEL_28;
      }
    }
LABEL_41:
    v19 = 0;
LABEL_28:
    v20 = *(uint64_t **)&v35[0];
    if (*(_QWORD *)&v35[0])
    {
      v30 = (WTF *)&v33;
      v23 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v35[0], (uint64_t *)&v30);
      WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v20, v23);
    }
    if (v34 != (WTF *)((char *)v35 + 8) && v34)
      WTF::fastFree(v34, v17);
    v21 = *(_QWORD *)(v7 + 16);
    if (!v21)
    {
      WebCore::DeferredPromise::callFunction(v4, (uint64_t *)v6, 0, v19);
      v21 = *(_QWORD *)(v7 + 16);
      if (!v21)
        return MEMORY[0x19AEA32A0](&v29);
    }
    v22 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v22 + 64))(v22))
    {
LABEL_38:
      WebCore::reportException(v6, v21, 0, 0, 0);
      return MEMORY[0x19AEA32A0](&v29);
    }
    v24 = v22[43];
    if (*(_QWORD *)(v7 + 24) == v21)
    {
LABEL_55:
      *(_BYTE *)(*(_QWORD *)(v24 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_38;
    }
    if (!v24)
      goto LABEL_38;
    v25 = (unsigned __int8 *)(v24 + 40);
    if (__ldaxr((unsigned __int8 *)(v24 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v25))
    {
      goto LABEL_49;
    }
    MEMORY[0x19AEA534C](v24 + 40);
LABEL_49:
    v27 = *(unsigned __int8 *)(v24 + 41);
    v28 = __ldxr(v25);
    if (v28 == 1)
    {
      if (!__stlxr(0, v25))
      {
LABEL_54:
        if (!v27)
          goto LABEL_38;
        goto LABEL_55;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v24 + 40));
    goto LABEL_54;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl *v7;
  bmalloc::api *v8;
  WTF *v9;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = 32 * v3;
    v5 = *(_QWORD *)a1 + 16;
    do
    {
      v6 = *(WTF **)v5;
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
        WTF::fastFree(v6, a2);
      }
      v7 = *(WTF::StringImpl **)(v5 - 8);
      *(_QWORD *)(v5 - 8) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(bmalloc::api **)(v5 - 16);
      *(_QWORD *)(v5 - 16) = 0;
      if (v8)
      {
        if (*((_DWORD *)v8 + 2) == 1)
        {
          if (*(_QWORD *)v8)
          {
            *(_QWORD *)(*(_QWORD *)v8 + 8) = 3;
            *(_QWORD *)v8 = 0;
          }
          bmalloc::api::isoDeallocate(v8, a2);
        }
        else
        {
          --*((_DWORD *)v8 + 2);
        }
      }
      v5 += 32;
      v4 -= 32;
    }
    while (v4);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::TextDetector::detect(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedText>>> &&)::$_0::operator()(WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&)::{lambda(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)#1},void,WTF::CrashOnOverflow>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E334D488;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextDetector::detect(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedText>>> &&)::$_0::operator()(WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&)::{lambda(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)#1},void,WTF::CrashOnOverflow>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E334D488;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextDetector::detect(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>> &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedText>>> &&)::$_0::operator()(WebCore::ExceptionOr<WTF::Ref<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>> &&)::{lambda(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)#1},void,WTF::CrashOnOverflow>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  float32x2_t *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  float64x2_t v23;
  float64x2_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = 0;
  v26 = 0;
  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    if (v3 >> 27)
    {
LABEL_17:
      __break(0xC471u);
      JUMPOUT(0x19524655CLL);
    }
    v5 = WTF::fastMalloc((WTF *)(32 * v3));
    LODWORD(v26) = v3;
    v25 = v5;
    if (*((_DWORD *)a2 + 3))
    {
      v6 = v5;
      v7 = 0;
      do
      {
        v8 = *a2;
        v9 = (float32x2_t *)(*a2 + 40 * v7);
        v23 = vcvtq_f64_f32(*v9);
        v24 = vcvtq_f64_f32(v9[1]);
        v10 = bmalloc::api::isoAllocate();
        *(_QWORD *)v10 = 0;
        *(_DWORD *)(v10 + 8) = 1;
        *(float64x2_t *)(v10 + 16) = v23;
        *(float64x2_t *)(v10 + 32) = v24;
        v11 = (_DWORD *)v9[2];
        if (v11)
          *v11 += 2;
        v12 = v8 + 40 * v7;
        v15 = *(_DWORD *)(v12 + 36);
        v13 = (unsigned int *)(v12 + 36);
        v14 = v15;
        if (v15)
        {
          if (v14 >> 28)
            goto LABEL_17;
          v16 = WTF::fastMalloc((WTF *)(16 * v14));
          v17 = *v13;
          if ((_DWORD)v17)
          {
            v18 = 0;
            v19 = *(_QWORD *)(v13 - 3);
            do
            {
              *(float64x2_t *)(v16 + 16 * v18) = vcvtq_f64_f32(*(float32x2_t *)(v19 + 8 * v18));
              ++v18;
            }
            while (v17 != v18);
          }
        }
        else
        {
          v16 = 0;
          LODWORD(v17) = 0;
        }
        v20 = v6 + 32 * v7;
        *(_QWORD *)v20 = v10;
        *(_QWORD *)(v20 + 8) = v11;
        *(_QWORD *)(v20 + 16) = v16;
        *(_QWORD *)(v20 + 24) = 0;
        *(_DWORD *)(v20 + 24) = v14;
        *(_DWORD *)(v20 + 28) = v17;
        ++v7;
      }
      while (v7 < *((unsigned int *)a2 + 3));
      HIDWORD(v26) = v7;
    }
  }
  WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::DetectedText>>>(*(_QWORD *)(a1 + 8), (uint64_t)&v25);
  return WTF::Vector<WebCore::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v21);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::GPU::requestAdapter(std::optional<WebCore::GPURequestAdapterOptions> const&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::GPUAdapter>>> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::Adapter,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E334D4B0;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GPU::requestAdapter(std::optional<WebCore::GPURequestAdapterOptions> const&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::GPUAdapter>>> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::Adapter,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E334D4B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GPU::requestAdapter(std::optional<WebCore::GPURequestAdapterOptions> const&,WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::GPUAdapter>>> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::Adapter,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t result;
  void *v6;
  _DWORD *v7;

  v3 = *a2;
  if (!*a2)
    return WebCore::DeferredPromise::resolve<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::GPUAdapter>>>(*(_QWORD *)(a1 + 8), 0);
  *a2 = 0;
  v4 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *((_QWORD *)v4 + 1) = v3;
  result = WebCore::DeferredPromise::resolve<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::GPUAdapter>>>(*(_QWORD *)(a1 + 8), v4);
  if (*(_DWORD *)v4 == 1)
  {
    v7 = (_DWORD *)*((_QWORD *)v4 + 1);
    *((_QWORD *)v4 + 1) = 0;
    if (v7)
    {
      if (v7[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      else
        --v7[2];
    }
    return WTF::fastFree(v4, v6);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::GPUAdapter>>>(uint64_t result, WTF *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v16;
  int v17;
  _BYTE v18[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v18, v7);
    v8 = *(_QWORD *)(v4 + 32);
    if (!v8 || (*(_BYTE *)(v8 + 8) & 3) != 0)
    {
      v9 = 0;
      if (a2)
        goto LABEL_10;
    }
    else
    {
      v9 = *(_QWORD *)v8;
      if (a2)
      {
LABEL_10:
        v10 = WebCore::wrap<WebCore::GPUAdapter>((uint64_t)v6, v9, a2);
LABEL_14:
        v11 = *(_QWORD *)(v7 + 16);
        if (!v11)
        {
          WebCore::DeferredPromise::callFunction(v4, v6, 0, (objc_class *)v10);
          v11 = *(_QWORD *)(v7 + 16);
          if (!v11)
            return MEMORY[0x19AEA32A0](v18);
        }
        v12 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
        if (!(*(unsigned int (**)(_QWORD *))(*v12 + 64))(v12))
        {
LABEL_19:
          WebCore::reportException((JSC::JSGlobalObject *)v6, v11, 0, 0, 0);
          return MEMORY[0x19AEA32A0](v18);
        }
        v13 = v12[43];
        if (*(_QWORD *)(v7 + 24) == v11)
        {
LABEL_32:
          *(_BYTE *)(*(_QWORD *)(v13 + 8) + 93442) = 1;
          *(_BYTE *)(v4 + 44) = 1;
          goto LABEL_19;
        }
        if (!v13)
          goto LABEL_19;
        v14 = (unsigned __int8 *)(v13 + 40);
        if (__ldaxr((unsigned __int8 *)(v13 + 40)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v14))
        {
          goto LABEL_26;
        }
        MEMORY[0x19AEA534C](v13 + 40);
LABEL_26:
        v16 = *(unsigned __int8 *)(v13 + 41);
        v17 = __ldxr(v14);
        if (v17 == 1)
        {
          if (!__stlxr(0, v14))
          {
LABEL_31:
            if (!v16)
              goto LABEL_19;
            goto LABEL_32;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v13 + 40));
        goto LABEL_31;
      }
    }
    v10 = 2;
    goto LABEL_14;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GPUAdapter::requestDevice(WebCore::ScriptExecutionContext &,std::optional<WebCore::GPUDeviceDescriptor> const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::GPUDevice>> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::Device,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>> &&>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  int v4;
  _DWORD *v5;

  *(_QWORD *)a1 = &off_1E334D4D8;
  v3 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v3)
  {
    v4 = *(unsigned __int8 *)(v3 + 274);
    if (*(_BYTE *)(v3 + 274))
    {
      if (v4 == 1)
      {
        if (*(_DWORD *)(v3 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
        else
          --*(_DWORD *)(v3 + 312);
      }
      else if (v4 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 312));
      }
    }
    else if (*(_DWORD *)(v3 - 168) == 2)
    {
      if ((*(_WORD *)(v3 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v3 - 168) -= 2;
    }
  }
  v5 = *(_DWORD **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  if (*(_BYTE *)(a1 + 56))
    WebCore::GPUDeviceDescriptor::~GPUDeviceDescriptor((WebCore::GPUDeviceDescriptor *)(a1 + 8), (WTF::StringImpl *)a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GPUAdapter::requestDevice(WebCore::ScriptExecutionContext &,std::optional<WebCore::GPUDeviceDescriptor> const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::GPUDevice>> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::Device,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  int v4;
  _DWORD *v5;

  *(_QWORD *)this = &off_1E334D4D8;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    v4 = *(unsigned __int8 *)(v3 + 274);
    if (*(_BYTE *)(v3 + 274))
    {
      if (v4 == 1)
      {
        if (*(_DWORD *)(v3 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
        else
          --*(_DWORD *)(v3 + 312);
      }
      else if (v4 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 312));
      }
    }
    else if (*(_DWORD *)(v3 - 168) == 2)
    {
      if ((*(_WORD *)(v3 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v3 - 168) -= 2;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  if (*((_BYTE *)this + 56))
    WebCore::GPUDeviceDescriptor::~GPUDeviceDescriptor((WTF *)((char *)this + 8), (WTF::StringImpl *)a2);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::GPUAdapter::requestDevice(WebCore::ScriptExecutionContext &,std::optional<WebCore::GPUDeviceDescriptor> const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::GPUDevice>> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::Device,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>> &&>::call(uint64_t a1, _QWORD *a2)
{
  WebCore::ContextDestructionObserver *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WebCore::ScriptExecutionContext *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  uint64_t v13;
  uint64_t v14;
  objc_class *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v22;
  int v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  v6 = a1;
  v7 = (_DWORD *)*a2;
  if (*a2)
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v8 = *(WTF::StringImpl **)(a1 + 48);
      if (v8)
        *(_DWORD *)v8 += 2;
      v9 = *(WebCore::ScriptExecutionContext **)(a1 + 72);
      v24 = v7;
      *a2 = 0;
      v26 = v8;
      v2 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
      WebCore::GPUDevice::GPUDevice(v2, v9, (uint64_t *)&v24, (uint64_t *)&v26);
      v11 = v26;
      v26 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
      if (v24)
      {
        if (v24[2] == 1)
          (*(void (**)(void))(*(_QWORD *)v24 + 8))();
        else
          --v24[2];
      }
      result = (WTF::StringImpl *)WebCore::ActiveDOMObject::suspendIfNeeded(v2);
      v6 = *(_QWORD *)(v6 + 64);
      v13 = *(_QWORD *)(v6 + 24);
      if (!v13 || !*(_QWORD *)v13 || (*(_BYTE *)(v13 + 8) & 3) != 0)
        goto LABEL_20;
      v14 = *(_QWORD *)(v6 + 32);
      if (!v14 || (*(_BYTE *)(v14 + 8) & 3) != 0)
        v3 = 0;
      else
        v3 = *(uint64_t **)v14;
      v5 = v3[7];
      MEMORY[0x19AEA3294](&v24, v5);
      v15 = (objc_class *)WebCore::wrap<WebCore::GPUDevice>((int)v3, **(JSC::VM ***)(v6 + 32), (uint64_t)v2);
      v4 = *(_QWORD *)(v5 + 16);
      if (!v4)
      {
        WebCore::DeferredPromise::callFunction(v6, v3, 0, v15);
        v4 = *(_QWORD *)(v5 + 16);
        if (!v4)
        {
LABEL_19:
          result = (WTF::StringImpl *)MEMORY[0x19AEA32A0](&v24);
LABEL_20:
          if (*((_DWORD *)v2 + 6) == 1)
            return (WTF::StringImpl *)(*(uint64_t (**)(WebCore::ContextDestructionObserver *))(*(_QWORD *)v2 + 16))(v2);
          --*((_DWORD *)v2 + 6);
          return result;
        }
      }
    }
    else
    {
      __break(1u);
    }
    v18 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v3);
    if (!(*(unsigned int (**)(_QWORD *))(*v18 + 64))(v18))
    {
LABEL_32:
      WebCore::reportException((JSC::JSGlobalObject *)v3, v4, 0, 0, 0);
      goto LABEL_19;
    }
    v19 = v18[43];
    if (*(_QWORD *)(v5 + 24) == v4)
    {
LABEL_46:
      *(_BYTE *)(*(_QWORD *)(v19 + 8) + 93442) = 1;
      *(_BYTE *)(v6 + 44) = 1;
      goto LABEL_32;
    }
    if (!v19)
      goto LABEL_32;
    v20 = (unsigned __int8 *)(v19 + 40);
    if (__ldaxr((unsigned __int8 *)(v19 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v20))
    {
      goto LABEL_40;
    }
    MEMORY[0x19AEA534C](v19 + 40);
LABEL_40:
    v22 = *(unsigned __int8 *)(v19 + 41);
    v23 = __ldxr(v20);
    if (v23 == 1)
    {
      if (!__stlxr(0, v20))
      {
LABEL_45:
        if (!v22)
          goto LABEL_32;
        goto LABEL_46;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v19 + 40));
    goto LABEL_45;
  }
  v16 = *(_QWORD *)(a1 + 64);
  v25 = 0;
  v26 = 0;
  LOBYTE(v24) = 30;
  WebCore::DeferredPromise::reject(v16, (unsigned __int8 *)&v24, 0, &v26);
  result = v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::GPUAdapterInfo>>(uint64_t result, WTF *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::wrap<WebCore::GPUAdapterInfo>((uint64_t)v6, **(_QWORD **)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

uint64_t WTF::VectorDestructor<true,WebCore::GPUBuffer::ArrayBufferWithOffset>::destruct(uint64_t result, _QWORD **a2)
{
  _QWORD **v3;
  _QWORD *v4;
  BOOL v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  WTF *v9;

  if ((_QWORD **)result != a2)
  {
    v3 = (_QWORD **)result;
    do
    {
      v4 = *v3;
      *v3 = 0;
      if (v4)
      {
        v5 = *(_DWORD *)v4 == 2;
        *(_DWORD *)v4 -= 2;
        if (v5)
        {
          v6 = v4[10];
          if (v6)
          {
            *(_QWORD *)(v6 + 8) = 3;
            v4[10] = 0;
          }
          if ((v4[9] & 1) == 0)
            JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v4 + 9));
          JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v4 + 2));
          v8 = (WTF *)v4[1];
          if ((v8 & 1) == 0 && v8)
          {
            v9 = *(WTF **)v8;
            if (*(_QWORD *)v8)
            {
              *(_QWORD *)v8 = 0;
              *((_DWORD *)v8 + 2) = 0;
              WTF::fastFree(v9, v7);
            }
            WTF::fastFree(v8, v7);
          }
          result = WTF::fastFree((WTF *)v4, v7);
        }
      }
      v3 += 2;
    }
    while (v3 != a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::GPUBuffer::mapAsync(unsigned int,std::optional<unsigned long long>,std::optional<unsigned long long>,WebCore::DOMPromiseDeferred<WebCore::IDLNull> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::GPUBuffer *v3;
  _DWORD *v4;
  WTF *v6;
  void *v7;

  *a1 = &off_1E334D500;
  v3 = (WebCore::GPUBuffer *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::GPUBuffer::~GPUBuffer(v3, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GPUBuffer::mapAsync(unsigned int,std::optional<unsigned long long>,std::optional<unsigned long long>,WebCore::DOMPromiseDeferred<WebCore::IDLNull> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::GPUBuffer *v3;
  _DWORD *v4;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = &off_1E334D500;
  v3 = (WebCore::GPUBuffer *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::GPUBuffer::~GPUBuffer(v3, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GPUBuffer::mapAsync(unsigned int,std::optional<unsigned long long>,std::optional<unsigned long long>,WebCore::DOMPromiseDeferred<WebCore::IDLNull> &&)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v3;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t result;
  uint64_t v12;
  WTF::StringImpl *v13;
  unsigned __int8 v14[8];
  WTF::StringImpl *v15;
  objc_class *v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v3 + 80))
  {
    v5 = *(_DWORD **)(v3 + 72);
    *(_QWORD *)(v3 + 72) = 0;
    if (v5)
    {
      if (v5[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
      else
        --v5[4];
    }
    *(_BYTE *)(v3 + 80) = 0;
    v6 = *(_QWORD *)(a1 + 16);
    if (a2)
    {
      *(_BYTE *)(v6 + 68) = 2;
      if (*(_BYTE *)(a1 + 32))
        v7 = *(_QWORD *)(a1 + 24);
      else
        v7 = 0;
      *(_QWORD *)(v6 + 48) = v7;
      if (*(_BYTE *)(a1 + 48))
        v12 = *(_QWORD *)(a1 + 40);
      else
        v12 = *(_QWORD *)(v6 + 40) - v7;
      *(_QWORD *)(v6 + 56) = v12;
      return WebCore::DeferredPromise::resolve<WebCore::IDLNull>(*(_QWORD *)(a1 + 8));
    }
    if (*(_BYTE *)(v6 + 68) == 1)
      *(_BYTE *)(v6 + 68) = 0;
  }
  else if (!*(_BYTE *)(v3 + 256))
  {
    return WebCore::DeferredPromise::resolve<WebCore::IDLNull>(*(_QWORD *)(a1 + 8));
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = *(_QWORD *)(a1 + 8);
  v16 = 0;
  v14[0] = 30;
  if (v13)
    *(_DWORD *)v13 += 2;
  v15 = v13;
  WebCore::DeferredPromise::reject(v8, v14, 0, &v16);
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = (uint64_t)v13;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      return WTF::StringImpl::destroy(v13, v9);
    else
      *(_DWORD *)v13 -= 2;
  }
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLNull>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v11;
  int v12;
  _BYTE v13[8];

  v1 = *(_QWORD *)(result + 24);
  if (v1 && *(_QWORD *)v1 && (*(_BYTE *)(v1 + 8) & 3) == 0)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 32);
    if (!v3 || (*(_BYTE *)(v3 + 8) & 3) != 0)
      v4 = 0;
    else
      v4 = *(uint64_t **)v3;
    v5 = v4[7];
    MEMORY[0x19AEA3294](v13, v5);
    v6 = *(_QWORD *)(v5 + 16);
    if (!v6)
    {
      WebCore::DeferredPromise::callFunction(v2, v4, 0, (objc_class *)2);
      v6 = *(_QWORD *)(v5 + 16);
      if (!v6)
        return MEMORY[0x19AEA32A0](v13);
    }
    v7 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v4);
    if (!(*(unsigned int (**)(_QWORD *))(*v7 + 64))(v7))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v4, v6, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v13);
    }
    v8 = v7[43];
    if (*(_QWORD *)(v5 + 24) == v6)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v8 + 8) + 93442) = 1;
      *(_BYTE *)(v2 + 44) = 1;
      goto LABEL_12;
    }
    if (!v8)
      goto LABEL_12;
    v9 = (unsigned __int8 *)(v8 + 40);
    if (__ldaxr((unsigned __int8 *)(v8 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v8 + 40);
LABEL_20:
    v11 = *(unsigned __int8 *)(v8 + 41);
    v12 = __ldxr(v9);
    if (v12 == 1)
    {
      if (!__stlxr(0, v9))
      {
LABEL_25:
        if (!v11)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v8 + 40));
    goto LABEL_25;
  }
  return result;
}

uint64_t WTF::HashTable<unsigned long,unsigned long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(8 * a2 + 16));
  v9 = result;
  v10 = result + 16;
  if (a2)
    result = (uint64_t)memset((void *)(result + 16), 255, 8 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v12 = *(_QWORD *)(v4 + 8 * i);
      if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v13 = *a1;
        if (*a1)
          v14 = *(_DWORD *)(v13 - 8);
        else
          v14 = 0;
        v15 = (v12 + ~(v12 << 32)) ^ ((v12 + ~(v12 << 32)) >> 22);
        v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
        v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
        v18 = v14 & ((v17 >> 31) ^ v17);
        v19 = 1;
        do
        {
          result = v18;
          v8 = *(void **)(v13 + 8 * v18);
          v18 = ((_DWORD)v18 + v19++) & v14;
        }
        while (v8 != (void *)-1);
        *(_QWORD *)(v13 + 8 * result) = v12;
      }
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

char *WTF::Vector<WTF::Range<unsigned long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  WTF *v19;
  __int128 v20;
  WTF *v21;
  uint64_t v22;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 16 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v21 = *(WTF **)a1;
        return (char *)v21 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
      if (v10 < 9)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 8;
        goto LABEL_34;
      }
      if (!(v10 >> 28))
      {
        v11 = WTF::fastMalloc((WTF *)(16 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_34:
        v22 = 0;
        do
        {
          *(_OWORD *)(v11 + v22) = *(_OWORD *)((char *)v5 + v22);
          v22 += 16;
        }
        while (16 * v6 != v22);
        v21 = *(WTF **)a1;
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if (v21 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, a2);
          v21 = *(WTF **)a1;
        }
        return (char *)v21 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x19524764CLL);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 9)
    {
      v17 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    else
    {
      if (v15 >> 28)
        goto LABEL_43;
      v17 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    v18 = 16 * v16;
    v19 = v5;
    do
    {
      v20 = *(_OWORD *)v19;
      v19 = (WTF *)((char *)v19 + 16);
      *v17++ = v20;
      v18 -= 16;
    }
    while (v18);
LABEL_27:
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
  }
  return (char *)v3;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 *v29;
  __n128 *v30;
  __n128 *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  unint64_t v38;
  unint64_t v39;
  __n128 *v40;
  uint64_t v41;
  unint64_t v42;
  __n128 *v43;
  __n128 *v44;
  __n128 *v45;
  unint64_t v46;
  unint64_t v47;
  __n128 *v48;
  __n128 *v49;
  unint64_t v50;
  unint64_t v51;
  __n128 *v52;
  BOOL v53;
  __n128 v54;
  unint64_t v55;
  __n128 *v56;
  unint64_t v57;
  unint64_t n128_u64;
  __n128 *v59;
  unint64_t v60;
  __n128 *v61;
  unint64_t v62;
  unint64_t v63;
  __n128 *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  __n128 *v70;
  unint64_t v71;
  BOOL v73;
  uint64_t v74;
  __n128 *v75;
  __n128 *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  __n128 *v81;
  int64_t v82;
  int64_t v83;
  uint64_t v84;
  __n128 *v85;
  unint64_t v86;
  BOOL v87;
  __n128 *v88;
  unint64_t v89;
  uint64_t v90;
  __n128 *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  __n128 *v98;
  __n128 *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  __n128 *v104;
  unint64_t v105;
  unint64_t v106;
  __n128 *v107;
  uint64_t v108;
  uint64_t v109;
  __n128 *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  __n128 *v114;
  __n128 *v115;
  unint64_t v116;
  __n128 v117;
  __n128 v118;
  __n128 v119;
  __n128 v120;
  __n128 v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*>(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v3;
  __n128 *v4;
  unint64_t v5;
  __n128 *v6;
  unint64_t v7;
  __n128 *v8;
  unint64_t v9;
  unint64_t v10;
  __n128 v11;
  __int128 *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 v16;
  unint64_t v17;
  __int128 *v18;
  unint64_t v19;
  __n128 *v20;
  unint64_t v21;
  __int128 v22;
  __n128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __n128 v28;
  __n128 *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  __int128 v37;
  __int128 v38;
  __n128 v39;
  __int128 v40;
  __int128 v41;

  v3 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      v5 = a2[-1].n128_u64[0];
      v4 = a2 - 1;
      if (v5 < a1->n128_u64[0])
        goto LABEL_9;
      return 1;
    case 3:
      v12 = (__int128 *)&a1[1];
      v13 = a1[1].n128_u64[0];
      v15 = a2[-1].n128_u64[0];
      v4 = a2 - 1;
      v14 = v15;
      if (v13 >= a1->n128_u64[0])
      {
        if (v14 < v13)
        {
          v25 = *v12;
          *v12 = (__int128)*v4;
          *v4 = (__n128)v25;
LABEL_45:
          if (a1[1].n128_u64[0] < a1->n128_u64[0])
          {
            v41 = (__int128)*a1;
            *a1 = (__n128)*v12;
            *v12 = v41;
          }
        }
      }
      else
      {
        if (v14 < v13)
        {
LABEL_9:
          v16 = *a1;
          *a1 = *v4;
LABEL_10:
          *v4 = v16;
          return 1;
        }
        v37 = (__int128)*a1;
        *a1 = (__n128)*v12;
        *v12 = v37;
        if (v4->n128_u64[0] < a1[1].n128_u64[0])
        {
          v16 = (__n128)*v12;
          *v12 = (__int128)*v4;
          goto LABEL_10;
        }
      }
      return 1;
    case 4:
      v12 = (__int128 *)&a1[1];
      v17 = a1[1].n128_u64[0];
      v18 = (__int128 *)&a1[2];
      v19 = a1[2].n128_u64[0];
      v20 = a2 - 1;
      v21 = a1->n128_u64[0];
      if (v17 >= a1->n128_u64[0])
      {
        if (v19 < v17)
        {
          v26 = *v12;
          *v12 = *v18;
          *v18 = v26;
          if (*(_QWORD *)v12 < v21)
          {
            v27 = (__int128)*a1;
            *a1 = (__n128)*v12;
            *v12 = v27;
          }
        }
      }
      else
      {
        if (v19 >= v17)
        {
          v38 = (__int128)*a1;
          *a1 = (__n128)*v12;
          *v12 = v38;
          if (v19 >= a1[1].n128_u64[0])
            goto LABEL_42;
          v22 = *v12;
          *v12 = *v18;
        }
        else
        {
          v22 = (__int128)*a1;
          *a1 = (__n128)*v18;
        }
        *v18 = v22;
      }
LABEL_42:
      if (v20->n128_u64[0] >= *(_QWORD *)v18)
        return 1;
      v39 = (__n128)*v18;
      *v18 = (__int128)*v20;
      *v20 = v39;
      if (*(_QWORD *)v18 >= *(_QWORD *)v12)
        return 1;
      v40 = *v12;
      *v12 = *v18;
      *v18 = v40;
      goto LABEL_45;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*>(a1, a1 + 1, a1[2].n128_u64, (__n128 *)a1[3].n128_u64, (__n128 *)a2[-1].n128_u64, a3);
      return 1;
    default:
      v6 = a1 + 2;
      v7 = a1[2].n128_u64[0];
      v8 = a1 + 1;
      v9 = a1[1].n128_u64[0];
      v10 = a1->n128_u64[0];
      if (v9 >= a1->n128_u64[0])
      {
        if (v7 < v9)
        {
          v23 = *v8;
          *v8 = *v6;
          *v6 = v23;
          if (v8->n128_u64[0] < v10)
          {
            v24 = *a1;
            *a1 = *v8;
            *v8 = v24;
          }
        }
      }
      else
      {
        if (v7 >= v9)
        {
          v28 = *a1;
          *a1 = *v8;
          *v8 = v28;
          if (v7 >= a1[1].n128_u64[0])
            goto LABEL_26;
          v11 = *v8;
          *v8 = *v6;
        }
        else
        {
          v11 = *a1;
          *a1 = *v6;
        }
        *v6 = v11;
      }
LABEL_26:
      v29 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v30 = 0;
      v31 = 0;
      while (1)
      {
        v32 = v29->n128_u64[0];
        if (v29->n128_u64[0] < v6->n128_u64[0])
        {
          v33 = v29->n128_i64[1];
          v34 = v30;
          while (1)
          {
            *(__n128 *)((char *)a1 + v34 + 48) = *(__n128 *)((char *)a1 + v34 + 32);
            if (v34 == -32)
              break;
            v35 = *(unint64_t *)((char *)a1[1].n128_u64 + v34);
            v34 -= 16;
            if (v32 >= v35)
            {
              v36 = (unint64_t *)((char *)a1[3].n128_u64 + v34);
              goto LABEL_34;
            }
          }
          v36 = (unint64_t *)a1;
LABEL_34:
          *v36 = v32;
          v36[1] = v33;
          if (++v31 == 8)
            return &v29[1] == a2;
        }
        v6 = v29;
        v30 += 16;
        if (++v29 == a2)
          return 1;
      }
  }
}

__n128 std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*>(__n128 *a1, __n128 *a2, unint64_t *a3, _OWORD *a4, _OWORD *a5, __n128 result)
{
  unint64_t v6;
  unint64_t v7;

  v6 = a2->n128_u64[0];
  v7 = *a3;
  if (a2->n128_u64[0] >= a1->n128_u64[0])
  {
    if (v7 < v6)
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  else
  {
    if (v7 < v6)
    {
      result = *a1;
      *a1 = *(__n128 *)a3;
LABEL_9:
      *(__n128 *)a3 = result;
      goto LABEL_10;
    }
    result = *a1;
    *a1 = *a2;
    *a2 = result;
    if (*a3 < a2->n128_u64[0])
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_QWORD *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < a2->n128_u64[0])
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  if (*(_QWORD *)a5 < *(_QWORD *)a4)
  {
    result = *(__n128 *)a4;
    *a4 = *a5;
    *a5 = result;
    if (*(_QWORD *)a4 < *a3)
    {
      result = *(__n128 *)a3;
      *(_OWORD *)a3 = *a4;
      *a4 = result;
      if (*a3 < a2->n128_u64[0])
      {
        result = *a2;
        *a2 = *(__n128 *)a3;
        *(__n128 *)a3 = result;
        if (a2->n128_u64[0] < a1->n128_u64[0])
        {
          result = *a1;
          *a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GPUBuffer::getMappedRange(std::optional<unsigned long long>,std::optional<unsigned long long>)::$_0,void,WebCore::WebGPU::Buffer::MappedRange>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  WTF *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  WTF *v27;
  WTF *v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD **v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  WTF *v39;
  WTF *v40;
  _DWORD *v41;
  _DWORD *v42;
  WTF *v43;
  WTF *v44;
  _DWORD *v45;
  uint64_t v46;

  v2 = result;
  v3 = *(_QWORD *)(result + 8);
  if (a2)
  {
    v4 = **(_QWORD **)(result + 32);
    JSC::ArrayBuffer::create();
    v5 = v45;
    v45 = 0;
    result = (uint64_t)WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v45);
    if (v5)
      *v5 += 2;
    v45 = v5;
    v46 = v4;
    v6 = *(unsigned int *)(v3 + 36);
    if ((_DWORD)v6 == *(_DWORD *)(v3 + 32))
    {
      result = (uint64_t)WTF::Vector<WebCore::GPUBuffer::ArrayBufferWithOffset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 24, v6 + 1, (unint64_t)&v45);
      v7 = *(unsigned int *)(v3 + 36);
      v8 = (_QWORD *)(*(_QWORD *)(v3 + 24) + 16 * v7);
      v9 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *v8 = v9;
      v8[1] = *(_QWORD *)(result + 8);
      v10 = (uint64_t)v45;
      v11 = v7 + 1;
      *(_DWORD *)(v3 + 36) = v11;
      v45 = 0;
      if (v10)
      {
        v12 = *(_DWORD *)v10 == 2;
        *(_DWORD *)v10 -= 2;
        if (v12)
        {
          v41 = v5;
          v43 = (WTF *)v10;
          v13 = *(_QWORD *)(v10 + 80);
          if (v13)
          {
            *(_QWORD *)(v13 + 8) = 3;
            *(_QWORD *)(v10 + 80) = 0;
          }
          if ((*(_BYTE *)(v10 + 72) & 1) == 0)
            JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v10 + 72));
          JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v43 + 16));
          v15 = (WTF *)*((_QWORD *)v43 + 1);
          if ((v15 & 1) == 0 && v15)
          {
            v16 = *(WTF **)v15;
            if (*(_QWORD *)v15)
            {
              *(_QWORD *)v15 = 0;
              *((_DWORD *)v15 + 2) = 0;
              WTF::fastFree(v16, v14);
            }
            WTF::fastFree(v15, v14);
          }
          result = WTF::fastFree(v43, v14);
          v11 = *(_DWORD *)(v3 + 36);
          v5 = v41;
        }
      }
    }
    else
    {
      v29 = (_QWORD *)(*(_QWORD *)(v3 + 24) + 16 * v6);
      *v29 = v5;
      v29[1] = v4;
      v11 = v6 + 1;
      *(_DWORD *)(v3 + 36) = v11;
    }
    if (!v11)
    {
      __break(0xC471u);
      JUMPOUT(0x195248A78);
    }
    v30 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 16 * v11 - 16);
    v31 = *(_DWORD *)(v30 + 88);
    if (v31 == -1)
      goto LABEL_67;
LABEL_47:
    *(_DWORD *)(v30 + 88) = v31 + 1;
    v33 = *(_QWORD *)(v3 + 88);
    if (v33)
    {
      v34 = *(_QWORD *)(v33 + 8);
      if (v34)
        result = (uint64_t)WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(v34 + 56, (_QWORD *)v3, (uint64_t)&v45);
    }
    v35 = *(_QWORD ***)(v2 + 24);
    v36 = *v35;
    *v35 = v5;
    if (v36)
    {
      v12 = *(_DWORD *)v36 == 2;
      *(_DWORD *)v36 -= 2;
      if (v12)
      {
        v37 = v36[10];
        if (v37)
        {
          *(_QWORD *)(v37 + 8) = 3;
          v36[10] = 0;
        }
        if ((v36[9] & 1) == 0)
          JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v36 + 9));
        JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v36 + 2));
        v39 = (WTF *)v36[1];
        if (v39 && (v39 & 1) == 0)
        {
          v40 = *(WTF **)v39;
          if (*(_QWORD *)v39)
          {
            *(_QWORD *)v39 = 0;
            *((_DWORD *)v39 + 2) = 0;
            WTF::fastFree(v40, v38);
          }
          WTF::fastFree(v39, v38);
        }
        return WTF::fastFree((WTF *)v36, v38);
      }
    }
    return result;
  }
  v17 = (uint64_t *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32))
  {
    v18 = *(unsigned int *)(v3 + 36);
    if ((_DWORD)v18)
    {
      WTF::VectorDestructor<true,WebCore::GPUBuffer::ArrayBufferWithOffset>::destruct(*(_QWORD *)(v3 + 24), (_QWORD **)(*(_QWORD *)(v3 + 24) + 16 * v18));
      *(_DWORD *)(v3 + 36) = 0;
    }
    result = *v17;
    if (*v17)
    {
      *(_QWORD *)(v3 + 24) = 0;
      *(_DWORD *)(v3 + 32) = 0;
      result = WTF::fastFree((WTF *)result, a2);
    }
  }
  if (*(_BYTE *)(v3 + 257) || !**(_QWORD **)(v2 + 16))
  {
    JSC::ArrayBuffer::create(0);
    v5 = v45;
    v45 = 0;
    result = (uint64_t)WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v45);
    if (v5)
      *v5 += 2;
    v45 = v5;
    v46 = 0;
    v19 = *(unsigned int *)(v3 + 36);
    if ((_DWORD)v19 == *(_DWORD *)(v3 + 32))
    {
      result = (uint64_t)WTF::Vector<WebCore::GPUBuffer::ArrayBufferWithOffset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 24, v19 + 1, (unint64_t)&v45);
      v20 = *(unsigned int *)(v3 + 36);
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 24) + 16 * v20);
      v22 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *v21 = v22;
      v21[1] = *(_QWORD *)(result + 8);
      v23 = (uint64_t)v45;
      v24 = v20 + 1;
      *(_DWORD *)(v3 + 36) = v24;
      v45 = 0;
      if (v23)
      {
        v12 = *(_DWORD *)v23 == 2;
        *(_DWORD *)v23 -= 2;
        if (v12)
        {
          v42 = v5;
          v44 = (WTF *)v23;
          v25 = *(_QWORD *)(v23 + 80);
          if (v25)
          {
            *(_QWORD *)(v25 + 8) = 3;
            *(_QWORD *)(v23 + 80) = 0;
          }
          if ((*(_BYTE *)(v23 + 72) & 1) == 0)
            JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v23 + 72));
          JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v44 + 16));
          v27 = (WTF *)*((_QWORD *)v44 + 1);
          if ((v27 & 1) == 0 && v27)
          {
            v28 = *(WTF **)v27;
            if (*(_QWORD *)v27)
            {
              *(_QWORD *)v27 = 0;
              *((_DWORD *)v27 + 2) = 0;
              WTF::fastFree(v28, v26);
            }
            WTF::fastFree(v27, v26);
          }
          result = WTF::fastFree(v44, v26);
          v24 = *(_DWORD *)(v3 + 36);
          v5 = v42;
        }
      }
    }
    else
    {
      v32 = (_QWORD *)(*(_QWORD *)(v3 + 24) + 16 * v19);
      *v32 = v5;
      v32[1] = 0;
      v24 = v19 + 1;
      *(_DWORD *)(v3 + 36) = v24;
    }
    if (!v24)
    {
      __break(0xC471u);
      JUMPOUT(0x195248A80);
    }
    v30 = *(_QWORD *)(*v17 + 16 * v24 - 16);
    v31 = *(_DWORD *)(v30 + 88);
    if (v31 == -1)
    {
LABEL_67:
      __break(0xC471u);
      JUMPOUT(0x195248944);
    }
    goto LABEL_47;
  }
  return result;
}

char *WTF::Vector<WebCore::GPUBuffer::ArrayBufferWithOffset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  WTF *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = (_QWORD *)((char *)v5 + 16 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x195248BDCLL);
      }
      v18 = (_QWORD *)((char *)v5 + 16 * *(unsigned int *)(a1 + 12));
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::GPUBuffer::ArrayBufferWithOffset>::move((uint64_t)v5, v18, v19);
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 <= v7)
    {
      v13 = *(WTF **)a1;
    }
    else
    {
      if (v10 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x195248BE4);
      }
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::GPUBuffer::ArrayBufferWithOffset>::move((uint64_t)v5, v6, v11);
      v13 = *(WTF **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF **)a1;
      }
    }
    return (char *)v13 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
  }
  return (char *)v3;
}

uint64_t WTF::VectorMover<false,WebCore::GPUBuffer::ArrayBufferWithOffset>::move(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  WTF *v13;

  if ((_QWORD *)result != a2)
  {
    v5 = (_QWORD *)result;
    do
    {
      v6 = (_QWORD *)*v5;
      v7 = v5[1];
      *v5 = 0;
      *a3 = v6;
      a3[1] = v7;
      v8 = (_QWORD *)*v5;
      *v5 = 0;
      if (v8)
      {
        v9 = *(_DWORD *)v8 == 2;
        *(_DWORD *)v8 -= 2;
        if (v9)
        {
          v10 = v8[10];
          if (v10)
          {
            *(_QWORD *)(v10 + 8) = 3;
            v8[10] = 0;
          }
          if ((v8[9] & 1) == 0)
            JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v8 + 9));
          JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v8 + 2));
          v12 = (WTF *)v8[1];
          if ((v12 & 1) == 0 && v12)
          {
            v13 = *(WTF **)v12;
            if (*(_QWORD *)v12)
            {
              *(_QWORD *)v12 = 0;
              *((_DWORD *)v12 + 2) = 0;
              WTF::fastFree(v13, v11);
            }
            WTF::fastFree(v12, v11);
          }
          result = WTF::fastFree((WTF *)v8, v11);
        }
      }
      v5 += 2;
      a3 += 2;
    }
    while (v5 != a2);
  }
  return result;
}

void sub_195248E44(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  int v4;
  int v5;

  v4 = __ldxr(v2);
  if (v4 == 1)
  {
    if (!__stlxr(0, v2))
    {
LABEL_6:
      v5 = __ldxr(v1);
      if (v5 == 1)
      {
        if (!__stlxr(0, v1))
LABEL_11:
          _Unwind_Resume(exception_object);
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v1);
      goto LABEL_11;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  goto LABEL_6;
}

void sub_195248F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::CDMSessionAVContentKeySession::CDMSessionAVContentKeySession(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[4];

  *(_QWORD *)a1 = off_1E334D680;
  *(_QWORD *)(a1 + 8) = &unk_1E334D700;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a4;
  v9 = a5[1];
  if (v9)
    goto LABEL_17;
  v9 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = a5;
  v11 = (unsigned int *)a5[1];
  a5[1] = v9;
  if (!v11)
    goto LABEL_17;
  do
  {
    v12 = __ldaxr(v11);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v11));
  if (!v13)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, v10);
  }
  v9 = a5[1];
  if (v9)
  {
LABEL_17:
    do
      v14 = __ldaxr((unsigned int *)v9);
    while (__stlxr(v14 + 1, (unsigned int *)v9));
  }
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 32) = v9;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_BYTE *)(a1 + 72) = 0;
  v15 = (*(uint64_t (**)(_QWORD *))(*a5 + 40))(a5);
  v16 = (unsigned int *)(v15 + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  *(_QWORD *)(a1 + 80) = v15;
  v18 = (*(uint64_t (**)(_QWORD *))(*a5 + 48))(a5);
  *(_QWORD *)a1 = off_1E334D550;
  *(_QWORD *)(a1 + 8) = &unk_1E334D5D0;
  *(_QWORD *)(a1 + 88) = v18;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = -[WebCDMSessionAVContentKeySessionDelegate initWithParent:]([WebCDMSessionAVContentKeySessionDelegate alloc], "initWithParent:", a1);
  WTF::WorkQueue::create();
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 124) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  v19 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 168) = v19;
  LODWORD(v19) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 176) = v19;
  LODWORD(v19) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 180) = v19;
  *(_DWORD *)(a1 + 184) = a3;
  *(_QWORD *)(a1 + 188) = 1;
  v20 = (*(uint64_t (**)(_QWORD *))(*a5 + 40))(a5);
  v21 = (unsigned int *)(v20 + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  *(_QWORD *)(a1 + 200) = v20;
  *(_QWORD *)(a1 + 208) = (*(uint64_t (**)(_QWORD *))(*a5 + 48))(a5);
  v23 = *(_QWORD *)(a1 + 80);
  v24 = *(_QWORD *)(a1 + 88);
  v26[0] = "CDMSessionAVContentKeySession";
  v26[1] = 30;
  v26[2] = "CDMSessionAVContentKeySession";
  v26[3] = v24;
  if (*(_BYTE *)(v23 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)v26);
  return a1;
}

void sub_1952491C4(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = *(unsigned int **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)(v2 + 16) = 0;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::CDMSessionMediaSourceAVFObjC::~CDMSessionMediaSourceAVFObjC(WebCore::CDMSessionMediaSourceAVFObjC *this, WebCore::CDMSessionMediaSourceAVFObjC **a2)
{
  char *v3;
  uint64_t v4;
  WebCore::CDMSessionMediaSourceAVFObjC **v5;
  uint64_t v6;
  WebCore::CDMSessionMediaSourceAVFObjC **v7;
  int v8;
  uint64_t v9;
  WebCore::CDMSessionMediaSourceAVFObjC **v10;
  WebCore::CDMSessionMediaSourceAVFObjC **v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::CDMSessionMediaSourceAVFObjC **v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  _DWORD *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;

  *(_QWORD *)this = off_1E334D680;
  *((_QWORD *)this + 1) = &unk_1E334D700;
  v3 = (char *)this + 8;
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = *(WebCore::CDMSessionMediaSourceAVFObjC ***)(v4 + 16);
    v6 = *(unsigned int *)(v4 + 28);
    v7 = &v5[v6];
    if ((_DWORD)v6)
    {
      v8 = 0;
      v9 = *(_QWORD *)(v4 + 16);
      a2 = &v5[v6];
      v10 = a2;
      do
      {
        if (*v5 == this)
        {
          v11 = v5;
          if (v10 != (WebCore::CDMSessionMediaSourceAVFObjC **)(*(_QWORD *)(v4 + 16) + 8 * *(unsigned int *)(v4 + 28)))
          {
            if (v5 == a2)
            {
              v11 = v10;
            }
            else
            {
              v12 = v9 - (_QWORD)a2;
              memmove(v10, a2, v9 - (_QWORD)a2);
              v11 = (WebCore::CDMSessionMediaSourceAVFObjC **)((char *)v10 + v12);
            }
          }
          a2 = v5 + 1;
          ++v8;
          v10 = v11;
        }
        ++v5;
        v9 += 8;
      }
      while (v5 < v7);
      v5 = *(WebCore::CDMSessionMediaSourceAVFObjC ***)(v4 + 16);
      v13 = *(unsigned int *)(v4 + 28);
      LODWORD(v6) = *(_DWORD *)(v4 + 28);
      v7 = v10;
    }
    else
    {
      v13 = 0;
      v8 = 0;
      a2 = &v5[v6];
    }
    v14 = &v5[v13];
    if (a2 != v14)
    {
      memmove(v7, a2, (char *)v14 - (char *)a2);
      LODWORD(v6) = *(_DWORD *)(v4 + 28);
    }
    *(_DWORD *)(v4 + 28) = v6 - v8;
  }
  v15 = *((unsigned int *)this + 13);
  if ((_DWORD)v15)
  {
    v16 = (uint64_t *)*((_QWORD *)this + 5);
    v17 = &v16[v15];
    do
    {
      v18 = *v16;
      v19 = *(unsigned int *)(*v16 + 420);
      v20 = *(_QWORD *)(*v16 + 408);
      if ((_DWORD)v19)
      {
        v21 = 0;
        while (*(char **)(v20 + 8 * v21) != v3)
        {
          if (v19 == ++v21)
            goto LABEL_22;
        }
      }
      else
      {
LABEL_22:
        v21 = -1;
      }
      memmove((void *)(v20 + 8 * v21), (const void *)(v20 + 8 * v21 + 8), 8 * v19 - (8 * v21 + 8));
      --*(_DWORD *)(v18 + 420);
      ++v16;
    }
    while (v16 != v17);
  }
  if (*((_DWORD *)this + 12))
  {
    v22 = *((unsigned int *)this + 13);
    v23 = (WTF *)*((_QWORD *)this + 5);
    if ((_DWORD)v22)
    {
      v24 = 8 * v22;
      do
      {
        v25 = *(_QWORD *)v23;
        *(_QWORD *)v23 = 0;
        if (v25)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v25 + 8));
        v23 = (WTF *)((char *)v23 + 8);
        v24 -= 8;
      }
      while (v24);
      *((_DWORD *)this + 13) = 0;
      v23 = (WTF *)*((_QWORD *)this + 5);
    }
    if (v23)
    {
      *((_QWORD *)this + 5) = 0;
      *((_DWORD *)this + 12) = 0;
      WTF::fastFree(v23, a2);
    }
  }
  v26 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v26)
  {
    v27 = v26 + 2;
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      atomic_store(1u, v26 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
    }
  }
  v30 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v31)
  {
    if (*v31 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v31;
  }
  v32 = *((unsigned int *)this + 13);
  v33 = (WTF *)*((_QWORD *)this + 5);
  if ((_DWORD)v32)
  {
    v34 = 8 * v32;
    do
    {
      v35 = *(_QWORD *)v33;
      *(_QWORD *)v33 = 0;
      if (v35)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v35 + 8));
      v33 = (WTF *)((char *)v33 + 8);
      v34 -= 8;
    }
    while (v34);
    v33 = (WTF *)*((_QWORD *)this + 5);
  }
  if (v33)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v33, a2);
  }
  v36 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v36)
  {
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      atomic_store(1u, v36);
      WTF::fastFree((WTF *)v36, a2);
    }
  }
  v39 = *((_QWORD *)this + 2);
  if (v39)
  {
    *(_QWORD *)(v39 + 8) = 0;
    v40 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v40)
    {
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        atomic_store(1u, v40);
        WTF::fastFree((WTF *)v40, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

void sub_195249814(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  v4 = *(unsigned int **)(v2 + 80);
  *(_QWORD *)(v2 + 80) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *(WTF::StringImpl **)(v2 + 64);
  *(_QWORD *)(v2 + 64) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(_DWORD **)(v2 + 56);
  *(_QWORD *)(v2 + 56) = 0;
  if (v9)
  {
    if (*v9 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v9;
  }
  v10 = *(unsigned int *)(v2 + 52);
  if ((_DWORD)v10)
  {
    v11 = *(uint64_t **)(v2 + 40);
    v12 = 8 * v10;
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v13 + 8));
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  v14 = *(WTF **)(v2 + 40);
  if (v14)
  {
    *(_QWORD *)(v2 + 40) = 0;
    *(_DWORD *)(v2 + 48) = 0;
    WTF::fastFree(v14, a2);
  }
  v15 = *(unsigned int **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, a2);
    }
  }
  v18 = *(_QWORD *)(v2 + 16);
  if (v18)
  {
    *(_QWORD *)(v18 + 8) = 0;
    v19 = *(unsigned int **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)(v2 + 16) = 0;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::CDMSessionAVContentKeySession::~CDMSessionAVContentKeySession(WebCore::CDMSessionAVContentKeySession *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  WebCore::SourceBufferPrivateAVFObjC **v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  const void *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  const void *v18;
  uint64_t v19;
  const void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;

  *(_QWORD *)this = off_1E334D550;
  *((_QWORD *)this + 1) = &unk_1E334D5D0;
  v2 = *((_QWORD *)this + 10);
  v3 = *((_QWORD *)this + 11);
  v31 = "CDMSessionAVContentKeySession";
  v32 = 30;
  v33 = "~CDMSessionAVContentKeySession";
  v34 = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&v31);
  objc_msgSend(*((id *)this + 13), "invalidate", v31, v32, v33, v34);
  if (*((_QWORD *)this + 12))
  {
    v5 = *((unsigned int *)this + 13);
    if ((_DWORD)v5)
    {
      v6 = (WebCore::SourceBufferPrivateAVFObjC **)*((_QWORD *)this + 5);
      v7 = 8 * v5;
      do
      {
        WebCore::SourceBufferPrivateAVFObjC::flush(*v6);
        (*(void (**)(WebCore::CDMSessionAVContentKeySession *, _QWORD))(*(_QWORD *)this + 72))(this, *((_QWORD *)*v6++ + 102));
        v7 -= 8;
      }
      while (v7);
    }
    objc_msgSend((id)WebCore::CDMSessionAVContentKeySession::contentKeySession(this), "expire");
  }
  v8 = (unsigned int *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  v12 = (WTF *)*((_QWORD *)this + 21);
  if (v12)
  {
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v12, v4);
  }
  v13 = (const void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v13)
    CFRelease(v13);
  v14 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr((unsigned int *)v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)v14));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)v14);
      v22 = *(unsigned int *)(v14 + 20);
      if ((_DWORD)v22)
      {
        v23 = *(_QWORD *)(v14 + 8);
        v24 = v23 + 16 * v22;
        do
        {
          v25 = *(unsigned int **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v25)
          {
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              atomic_store(1u, v25);
              v28 = v25[6];
              if ((_DWORD)v28 != -1)
                ((void (*)(const char **, unsigned int *))off_1E334DC30[v28])(&v31, v25 + 2);
              v25[6] = -1;
              WTF::fastFree((WTF *)v25, v4);
            }
          }
          v23 += 16;
        }
        while (v23 != v24);
      }
      v29 = *(WTF **)(v14 + 8);
      if ((WTF *)(v14 + 24) != v29 && v29 != 0)
      {
        *(_QWORD *)(v14 + 8) = 0;
        *(_DWORD *)(v14 + 16) = 0;
        WTF::fastFree(v29, v4);
      }
      WTF::fastFree((WTF *)v14, v4);
    }
  }
  v17 = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v17)
  {
    if (*v17 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v17;
  }
  v18 = (const void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v18)
    CFRelease(v18);
  v19 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 56))(v19);
  v20 = (const void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v20)
    CFRelease(v20);
  v21 = (const void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v21)
    CFRelease(v21);
  WebCore::CDMSessionMediaSourceAVFObjC::~CDMSessionMediaSourceAVFObjC(this, (WebCore::CDMSessionMediaSourceAVFObjC **)v4);
}

{
  WTF *v1;
  void *v2;

  WebCore::CDMSessionAVContentKeySession::~CDMSessionAVContentKeySession(this);
  WTF::fastFree(v1, v2);
}

void sub_195249BFC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  const void *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _DWORD *v21;
  const void *v22;
  uint64_t v23;
  const void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;

  v11 = *(unsigned int **)(v9 + 200);
  *(_QWORD *)(v9 + 200) = 0;
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v11 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  v15 = *(WTF **)(v9 + 168);
  if (v15)
  {
    *(_QWORD *)(v9 + 168) = 0;
    *(_DWORD *)(v9 + 176) = 0;
    WTF::fastFree(v15, a2);
  }
  v16 = *(const void **)(v9 + 160);
  *(_QWORD *)(v9 + 160) = 0;
  if (v16)
    CFRelease(v16);
  v17 = *(unsigned int **)(v9 + 152);
  *(_QWORD *)(v9 + 152) = 0;
  if (v17)
  {
    v18 = v17;
    do
    {
      v19 = __ldaxr(v17);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v17));
    if (!v20)
    {
      atomic_store(1u, v17);
      v26 = v17[5];
      if ((_DWORD)v26)
      {
        v27 = *((_QWORD *)v18 + 1);
        v28 = v27 + 16 * v26;
        do
        {
          v29 = *(unsigned int **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
          {
            do
            {
              v30 = __ldaxr(v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v29));
            if (!v31)
            {
              atomic_store(1u, v29);
              v32 = v29[6];
              if ((_DWORD)v32 != -1)
                ((void (*)(uint64_t *, unsigned int *))off_1E334DC30[v32])(&a9, v29 + 2);
              v29[6] = -1;
              WTF::fastFree((WTF *)v29, a2);
            }
          }
          v27 += 16;
        }
        while (v27 != v28);
      }
      v33 = (WTF *)*((_QWORD *)v18 + 1);
      if (v18 + 6 != (unsigned int *)v33 && v33 != 0)
      {
        *((_QWORD *)v18 + 1) = 0;
        v18[4] = 0;
        WTF::fastFree(v33, a2);
      }
      WTF::fastFree((WTF *)v18, a2);
    }
  }
  v21 = *(_DWORD **)(v9 + 144);
  *(_QWORD *)(v9 + 144) = 0;
  if (v21)
  {
    if (*v21 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v21;
  }
  v22 = *(const void **)(v9 + 136);
  *(_QWORD *)(v9 + 136) = 0;
  if (v22)
    CFRelease(v22);
  v23 = *(_QWORD *)(v9 + 112);
  *(_QWORD *)(v9 + 112) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 56))(v23);
  v24 = *(const void **)(v9 + 104);
  *(_QWORD *)(v9 + 104) = 0;
  if (v24)
    CFRelease(v24);
  v25 = *(const void **)(v9 + 96);
  *(_QWORD *)(v9 + 96) = 0;
  if (v25)
    CFRelease(v25);
  WebCore::CDMSessionMediaSourceAVFObjC::~CDMSessionMediaSourceAVFObjC((WebCore::CDMSessionMediaSourceAVFObjC *)v9, (WebCore::CDMSessionMediaSourceAVFObjC **)a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::CDMSessionAVContentKeySession::contentKeySession(WebCore::CDMSessionAVContentKeySession *this)
{
  uint64_t v1;
  uint64_t v3;
  const WTF::String *v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  const WTF::String *v13;
  const WTF::String *v14;
  void *v15;
  const __CFString *v16;
  char v17;
  _BOOL4 inited;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  v1 = *((_QWORD *)this + 12);
  if (v1)
    return v1;
  {
    inited = PAL::init_AVFoundation_AVContentKeySystemFairPlayStreaming(this);
    PAL::canLoad_AVFoundation_AVContentKeySystemFairPlayStreaming(void)::loaded = inited;
    if (inited)
      goto LABEL_4;
    return 0;
  }
  if (!PAL::canLoad_AVFoundation_AVContentKeySystemFairPlayStreaming(void)::loaded)
    return 0;
LABEL_4:
  v3 = (uint64_t)WebCore::CDMSessionMediaSourceAVFObjC::storagePath((WTF::StringImpl *)&v21, *((_QWORD *)this + 4));
  if (!v21 || !*((_DWORD *)v21 + 1))
  {
    v5 = 0;
    goto LABEL_6;
  }
  WTF::FileSystemImpl::parentPath((WTF::FileSystemImpl *)&v21, v4);
  if ((WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v20, v13) & 1) != 0
    || (WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v20, v14) & 1) != 0)
  {
    v15 = (void *)MEMORY[0x1E0C99E98];
    if (v21)
      v16 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v16 = &stru_1E3487BC0;
    v5 = objc_msgSend(v15, "fileURLWithPath:", v16);
    v17 = 1;
  }
  else
  {
    v5 = 0;
    v17 = 0;
  }
  v3 = (uint64_t)v20;
  v20 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 != 2)
    {
      *(_DWORD *)v3 -= 2;
      goto LABEL_35;
    }
    v3 = WTF::StringImpl::destroy((WTF::StringImpl *)v3, v10);
    if ((v17 & 1) == 0)
      goto LABEL_36;
LABEL_6:
    if (WebCore::s_sampleBufferContentKeySessionSupportEnabled
      || (PAL::getAVContentKeySessionClass[0]((PAL *)v3), v3 = objc_opt_respondsToSelector(), (v3 & 1) == 0))
    {
      PAL::getAVContentKeySessionClass[0]((PAL *)v3);
      v8 = objc_opt_respondsToSelector();
      if ((v8 & 1) == 0)
      {
        v11 = objc_msgSend(objc_alloc((Class)PAL::getAVContentKeySessionClass[0]((PAL *)v8)), "initWithStorageDirectoryAtURL:", v5);
        v9 = (const void *)*((_QWORD *)this + 12);
        *((_QWORD *)this + 12) = v11;
        if (!v9)
          goto LABEL_15;
        goto LABEL_14;
      }
      v6 = (const void *)objc_msgSend((id)PAL::getAVContentKeySessionClass[0]((PAL *)v8), "contentKeySessionWithKeySystem:storageDirectoryAtURL:", PAL::constantAVFoundationAVContentKeySystemFairPlayStreaming, v5);
      v7 = v6;
      if (!v6)
      {
LABEL_13:
        v9 = (const void *)*((_QWORD *)this + 12);
        *((_QWORD *)this + 12) = v7;
        if (!v9)
        {
LABEL_15:
          if (WebCore::s_sampleBufferContentKeySessionSupportEnabled)
            objc_msgSend(*((id *)this + 12), "setDelegate:queue:", *((_QWORD *)this + 13), *(_QWORD *)(*((_QWORD *)this + 14) + 16));
          else
            objc_msgSend(*((id *)this + 12), "setDelegate:", *((_QWORD *)this + 13));
          v1 = *((_QWORD *)this + 12);
          goto LABEL_21;
        }
LABEL_14:
        CFRelease(v9);
        goto LABEL_15;
      }
    }
    else
    {
      v6 = (const void *)objc_msgSend((id)PAL::getAVContentKeySessionClass[0]((PAL *)v3), "contentKeySessionWithLegacyWebKitCompatibilityModeAndKeySystem:storageDirectoryAtURL:", PAL::constantAVFoundationAVContentKeySystemFairPlayStreaming, v5);
      v7 = v6;
      if (!v6)
        goto LABEL_13;
    }
    CFRetain(v6);
    goto LABEL_13;
  }
LABEL_35:
  if ((v17 & 1) != 0)
    goto LABEL_6;
LABEL_36:
  v1 = 0;
LABEL_21:
  v12 = v21;
  v21 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  return v1;
}

void sub_19524A014(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebCore::CDMSessionAVContentKeySession::~CDMSessionAVContentKeySession(WebCore::CDMSessionAVContentKeySession *this)
{
  WebCore::CDMSessionAVContentKeySession::~CDMSessionAVContentKeySession((WebCore::CDMSessionAVContentKeySession *)((char *)this - 8));
}

{
  WTF *v1;
  void *v2;

  WebCore::CDMSessionAVContentKeySession::~CDMSessionAVContentKeySession((WebCore::CDMSessionAVContentKeySession *)((char *)this - 8));
  WTF::fastFree(v1, v2);
}

void WebCore::CDMSessionAVContentKeySession::generateKeyRequest(JSC::ArrayBufferView *this@<X2>, uint64_t a2@<X0>, uint64_t *a3@<X1>, _WORD *a4@<X4>, _DWORD *a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  _DWORD *v15;
  WTF *v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  const void *v42;
  PAL *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  const __CFString *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  NSObject *v59;
  uint64_t v60;
  void *v61;
  char *v62;
  unsigned __int8 *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  WTF *v73;
  WTF::StringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  WTF::Logger *v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF::Logger *v86;
  uint64_t v87;
  WTF::StringImpl **v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  int v94;
  WTF::StringImpl *v95;
  void *v96;
  void *v97;
  const void *v98;
  const void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  WTF::String *v106;
  _QWORD v107[4];
  WTF::StringImpl *v108;
  WTF::Logger *v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  __int128 buf;
  const char *v119;
  WTF::StringImpl *v120;
  int v121;
  WTF::StringImpl *v122;
  int v123;
  _QWORD v124[3];

  v124[1] = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(WTF::StringImpl **)(a2 + 88);
  *(_QWORD *)&buf = "CDMSessionAVContentKeySession";
  *((_QWORD *)&buf + 1) = 30;
  v119 = "generateKeyRequest";
  v120 = v13;
  if (*(_BYTE *)(v12 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11],WTF::String>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "mimeType: ", a3);
  *a4 = 0;
  *a5 = 0;
  v14 = *a3;
  if (!*a3 || *(_DWORD *)(v14 + 4) != 10)
    goto LABEL_4;
  v37 = *(_QWORD *)(v14 + 8);
  if ((*(_BYTE *)(v14 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v37 & 0xDF) == 0x4B
      && (*(_BYTE *)(v37 + 1) & 0xDF) == 0x45
      && (*(_BYTE *)(v37 + 2) & 0xDF) == 0x59
      && (*(_BYTE *)(v37 + 3) & 0xDF) == 0x52
      && (*(_BYTE *)(v37 + 4) & 0xDF) == 0x45
      && (*(_BYTE *)(v37 + 5) & 0xDF) == 0x4C
      && (*(_BYTE *)(v37 + 6) & 0xDF) == 0x45
      && (*(_BYTE *)(v37 + 7) & 0xDF) == 0x41
      && (*(_BYTE *)(v37 + 8) & 0xDF) == 0x53)
    {
      v38 = *(unsigned __int8 *)(v37 + 9);
      goto LABEL_47;
    }
LABEL_4:
    if (*(_DWORD *)(a2 + 184) == 2)
    {
      if (this)
        ++*(_DWORD *)this;
      v15 = *(_DWORD **)(a2 + 144);
      *(_QWORD *)(a2 + 144) = this;
      if (v15)
      {
        if (*v15 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*v15;
      }
    }
    else
    {
      v16 = (WTF *)JSC::ArrayBufferView::span(this);
      v18 = v17;
      v19 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = v19 + 24;
      *(_QWORD *)(v19 + 16) = 1;
      *(_BYTE *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      WebCore::FragmentedSharedBuffer::append(v19, v16, v18);
      *(_QWORD *)&buf = v19;
      v20 = WTF::fastMalloc((WTF *)0x38);
      WebCore::SharedBuffer::SharedBuffer(v20, (uint64_t *)&buf);
      WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&buf, v21);
      *(_QWORD *)&buf = 0;
      v23 = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a2 + 152) = v20;
      if (v23)
      {
        do
        {
          v24 = __ldaxr((unsigned int *)v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, (unsigned int *)v23));
        if (!v25)
        {
          atomic_store(1u, (unsigned int *)v23);
          v66 = *(unsigned int *)(v23 + 20);
          if ((_DWORD)v66)
          {
            v67 = *(_QWORD *)(v23 + 8);
            v68 = v67 + 16 * v66;
            do
            {
              v69 = *(unsigned int **)(v67 + 8);
              *(_QWORD *)(v67 + 8) = 0;
              if (v69)
              {
                do
                {
                  v70 = __ldaxr(v69);
                  v71 = v70 - 1;
                }
                while (__stlxr(v71, v69));
                if (!v71)
                {
                  atomic_store(1u, v69);
                  v72 = v69[6];
                  if ((_DWORD)v72 != -1)
                    ((void (*)(_QWORD *, unsigned int *))off_1E334DC30[v72])(v107, v69 + 2);
                  v69[6] = -1;
                  WTF::fastFree((WTF *)v69, v22);
                }
              }
              v67 += 16;
            }
            while (v67 != v68);
          }
          v73 = *(WTF **)(v23 + 8);
          if ((WTF *)(v23 + 24) != v73 && v73 != 0)
          {
            *(_QWORD *)(v23 + 8) = 0;
            *(_DWORD *)(v23 + 16) = 0;
            WTF::fastFree(v73, v22);
          }
          WTF::fastFree((WTF *)v23, v22);
        }
      }
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&buf, v22);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v26 = buf;
    if ((_QWORD)buf)
      v27 = *(unsigned int *)(buf + 4);
    else
      v27 = 0;
    JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate(v27, (uint64_t *)&buf);
    v29 = buf;
    if ((_QWORD)buf)
    {
      if (v26)
      {
        v30 = *(unsigned int *)(v26 + 4);
        if ((_DWORD)v30)
        {
          v31 = 0;
          v32 = MEMORY[0x1E0CC10F8];
          v33 = (_BYTE *)MEMORY[0x1E0CC10F0];
          do
          {
            if (v31 >= *(unsigned int *)(v26 + 4))
            {
              LOBYTE(v34) = 0;
            }
            else
            {
              v34 = *(_QWORD *)(v26 + 8);
              if ((*(_BYTE *)(v26 + 16) & 4) != 0)
                LOBYTE(v34) = *(_BYTE *)(v34 + v31);
              else
                LOWORD(v34) = *(_WORD *)(v34 + 2 * v31);
            }
            v35 = *(_QWORD *)(v32 + 56);
            if (v35 && (*(_BYTE *)(v32 + 34) || !*v33))
              v36 = (*(_QWORD *)(v29 + 24) & 0x3FFFFFFFFLL) + v35;
            else
              v36 = *(_QWORD *)(v29 + 24);
            *(_BYTE *)(v36 + v31++) = v34;
          }
          while (v30 != v31);
        }
        *a6 = v29;
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v26, v28);
        else
          *(_DWORD *)v26 -= 2;
      }
      else
      {
        *a6 = buf;
      }
      return;
    }
    goto LABEL_205;
  }
  if ((*(_WORD *)v37 & 0xFFDF) != 0x4B
    || (*(_WORD *)(v37 + 2) & 0xFFDF) != 0x45
    || (*(_WORD *)(v37 + 4) & 0xFFDF) != 0x59
    || (*(_WORD *)(v37 + 6) & 0xFFDF) != 0x52
    || (*(_WORD *)(v37 + 8) & 0xFFDF) != 0x45
    || (*(_WORD *)(v37 + 10) & 0xFFDF) != 0x4C
    || (*(_WORD *)(v37 + 12) & 0xFFDF) != 0x45
    || (*(_WORD *)(v37 + 14) & 0xFFDF) != 0x41
    || (*(_WORD *)(v37 + 16) & 0xFFDF) != 0x53)
  {
    goto LABEL_4;
  }
  v38 = *(unsigned __int16 *)(v37 + 18);
LABEL_47:
  if ((v38 & 0xFFFFFFDF) != 0x45)
    goto LABEL_4;
  *(_DWORD *)(a2 + 192) = 1;
  if (this)
    ++*(_DWORD *)this;
  v39 = *(_DWORD **)(a2 + 56);
  *(_QWORD *)(a2 + 56) = this;
  if (v39)
  {
    if (*v39 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v39;
  }
  v40 = JSC::ArrayBufferView::span(*(JSC::ArrayBufferView **)(a2 + 56));
  v42 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v40, v41);
  v43 = WebCore::CDMSessionMediaSourceAVFObjC::storagePath((WTF::StringImpl *)&v108, *(_QWORD *)(a2 + 32));
  if (!v108)
    goto LABEL_54;
  if (!*((_DWORD *)v108 + 1))
    goto LABEL_54;
  PAL::getAVContentKeySessionClass[0](v43);
  v46 = objc_opt_respondsToSelector();
  if ((v46 & 1) == 0)
    goto LABEL_54;
  v47 = (void *)PAL::getAVContentKeySessionClass[0]((PAL *)v46);
  v48 = (void *)MEMORY[0x1E0C99E98];
  if (v108)
    v49 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v49 = &stru_1E3487BC0;
  v50 = (void *)objc_msgSend(v47, "pendingExpiredSessionReportsWithAppIdentifier:storageDirectoryAtURL:", v42, objc_msgSend(v48, "fileURLWithPath:", v49));
  v51 = objc_msgSend(v50, "count");
  v52 = *(_QWORD *)(a2 + 80);
  if (!v51)
  {
    v75 = *(WTF::StringImpl **)(a2 + 88);
    *(_QWORD *)&buf = "CDMSessionAVContentKeySession";
    *((_QWORD *)&buf + 1) = 30;
    v119 = "generateKeyReleaseMessage";
    v120 = v75;
    if (*(_BYTE *)(v52 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "no expired sessions found");
LABEL_54:
    *a4 = 2;
    *a5 = 560820082;
    *a6 = 0;
    goto LABEL_55;
  }
  v53 = *(_QWORD *)(a2 + 88);
  v107[0] = "CDMSessionAVContentKeySession";
  v107[1] = 30;
  v107[2] = "generateKeyReleaseMessage";
  v107[3] = v53;
  v106 = (WTF::String *)objc_msgSend(v50, "count");
  if (!*(_BYTE *)(v52 + 12))
    goto LABEL_165;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v107);
  WTF::String::String((WTF::String *)&v113, "found ");
  WTF::String::number(v106);
  WTF::String::String((WTF::String *)&v111, " expired sessions");
  v109 = v113;
  v117 = v112;
  *(_QWORD *)&buf = v114;
  v116 = v111;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v109, (uint64_t *)&v117, (uint64_t *)&v116, &v115);
  if (!v115)
  {
LABEL_205:
    __break(0xC471u);
    JUMPOUT(0x19524A72CLL);
  }
  v55 = v111;
  v111 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v54);
    else
      *(_DWORD *)v55 -= 2;
  }
  v56 = v112;
  v112 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, v54);
    else
      *(_DWORD *)v56 -= 2;
  }
  v57 = v113;
  v113 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v54);
    else
      *(_DWORD *)v57 -= 2;
  }
  v58 = v114;
  v114 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, v54);
    else
      *(_DWORD *)v58 -= 2;
  }
  v59 = qword_1ECE7CE30;
  v60 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v60)
  {
    WTF::String::utf8();
    v62 = v109 ? (char *)v109 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v62;
    _os_log_impl(&dword_1940B8000, v59, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v60 = (uint64_t)v109;
    v109 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 1)
        v60 = WTF::fastFree((WTF *)v60, v61);
      else
        --*(_DWORD *)v60;
    }
  }
  if (WebCore::LogEME)
  {
    v63 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v64 = *v63;
      if ((v64 & 1) != 0)
        break;
      v65 = __ldaxr(v63);
      if (v65 == v64)
      {
        if (!__stxr(v64 | 1, v63))
        {
          v76 = WTF::Logger::observers((WTF::Logger *)v60);
          v77 = *(unsigned int *)(v76 + 12);
          if ((_DWORD)v77)
          {
            v78 = *(uint64_t **)v76;
            v105 = *(_QWORD *)v76 + 8 * v77;
            do
            {
              v79 = *v78;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v107);
              LODWORD(v119) = 0;
              WTF::String::String((WTF::String *)&v120, "found ");
              v121 = 0;
              WTF::String::number(v106);
              v123 = 0;
              WTF::String::String((WTF::String *)v124, " expired sessions");
              v109 = 0;
              v110 = 0;
              v80 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
              LODWORD(v110) = 4;
              v109 = v80;
              v81 = HIDWORD(v110);
              *((_DWORD *)v80 + 4 * HIDWORD(v110)) = buf;
              v82 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v80 + 2 * v81 + 1) = v82;
              *((_DWORD *)v80 + 4 * (v81 + 1)) = (_DWORD)v119;
              v83 = v120;
              if (v120)
                *(_DWORD *)v120 += 2;
              *((_QWORD *)v80 + 2 * (v81 + 1) + 1) = v83;
              *((_DWORD *)v80 + 4 * (v81 + 2)) = v121;
              v84 = v122;
              if (v122)
                *(_DWORD *)v122 += 2;
              *((_QWORD *)v80 + 2 * (v81 + 2) + 1) = v84;
              *((_DWORD *)v80 + 4 * (v81 + 3)) = v123;
              v85 = v124[0];
              if (v124[0])
                *(_DWORD *)v124[0] += 2;
              *((_QWORD *)v80 + 2 * (v81 + 3) + 1) = v85;
              HIDWORD(v110) = v81 + 4;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v79 + 16))(v79, &WebCore::LogEME, 0, &v109);
              v86 = v109;
              if (HIDWORD(v110))
              {
                v87 = 16 * HIDWORD(v110);
                v88 = (WTF::StringImpl **)((char *)v109 + 8);
                do
                {
                  v89 = *v88;
                  *v88 = 0;
                  if (v89)
                  {
                    if (*(_DWORD *)v89 == 2)
                      WTF::StringImpl::destroy(v89, (WTF::StringImpl *)v61);
                    else
                      *(_DWORD *)v89 -= 2;
                  }
                  v88 += 2;
                  v87 -= 16;
                }
                while (v87);
                v86 = v109;
              }
              if (v86)
              {
                v109 = 0;
                LODWORD(v110) = 0;
                WTF::fastFree(v86, v61);
              }
              v90 = (WTF::StringImpl *)v124[0];
              v124[0] = 0;
              if (v90)
              {
                if (*(_DWORD *)v90 == 2)
                  WTF::StringImpl::destroy(v90, (WTF::StringImpl *)v61);
                else
                  *(_DWORD *)v90 -= 2;
              }
              v91 = v122;
              v122 = 0;
              if (v91)
              {
                if (*(_DWORD *)v91 == 2)
                  WTF::StringImpl::destroy(v91, (WTF::StringImpl *)v61);
                else
                  *(_DWORD *)v91 -= 2;
              }
              v92 = v120;
              v120 = 0;
              if (v92)
              {
                if (*(_DWORD *)v92 == 2)
                  WTF::StringImpl::destroy(v92, (WTF::StringImpl *)v61);
                else
                  *(_DWORD *)v92 -= 2;
              }
              v93 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v93)
              {
                if (*(_DWORD *)v93 == 2)
                  WTF::StringImpl::destroy(v93, (WTF::StringImpl *)v61);
                else
                  *(_DWORD *)v93 -= 2;
              }
              ++v78;
            }
            while (v78 != (uint64_t *)v105);
          }
          v94 = __ldxr(v63);
          if (v94 == 1)
          {
            if (!__stlxr(0, v63))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v95 = v115;
  v115 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
      WTF::StringImpl::destroy(v95, (WTF::StringImpl *)v61);
    else
      *(_DWORD *)v95 -= 2;
  }
LABEL_165:
  *a4 = 0;
  *a5 = 0;
  v96 = (void *)objc_msgSend(v50, "firstObject");
  v97 = v96;
  if (v96)
    CFRetain(v96);
  v98 = *(const void **)(a2 + 160);
  *(_QWORD *)(a2 + 160) = v97;
  if (v98)
  {
    CFRelease(v98);
    v97 = *(void **)(a2 + 160);
    if (v97)
      goto LABEL_169;
  }
  else if (v97)
  {
LABEL_169:
    v99 = (const void *)objc_msgSend(v97, "bytes");
    v97 = (void *)objc_msgSend(v97, "length");
    goto LABEL_188;
  }
  v99 = 0;
LABEL_188:
  JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate((unint64_t)v97, (uint64_t *)&buf);
  v100 = buf;
  if ((_QWORD)buf)
  {
    v101 = *(_QWORD *)(buf + 32);
    if (v101)
    {
      v102 = *(_QWORD *)(v101 + 16);
      if (v102)
      {
        v103 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (!v103 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
        {
          v104 = *(_QWORD *)(buf + 24);
          goto LABEL_201;
        }
        if ((v102 & 0x3FFFFFFFFLL) + v103)
        {
          v104 = *(_QWORD *)(buf + 24);
          if (v104 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
            v104 = (v104 & 0x3FFFFFFFFLL) + v103;
          goto LABEL_201;
        }
      }
    }
    v104 = 0;
LABEL_201:
    memcpy((void *)v104, v99, (size_t)v97);
    v100 = buf;
  }
  *a6 = v100;
LABEL_55:
  v45 = v108;
  v108 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
    {
      WTF::StringImpl::destroy(v45, v44);
      if (v42)
        goto LABEL_59;
      return;
    }
    *(_DWORD *)v45 -= 2;
  }
  if (v42)
LABEL_59:
    CFRelease(v42);
}

void sub_19524ACE0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23,WTF *a24,int a25,int a26,WTF::StringImpl *a27,WTF::StringImpl *a28,WTF::StringImpl *a29,uint64_t a30,WTF::StringImpl *a31)
{
  const void *v31;

  if (a31)
  {
    if (*(_DWORD *)a31 == 2)
      WTF::StringImpl::destroy(a31, a2);
    else
      *(_DWORD *)a31 -= 2;
  }
  if (a23)
  {
    if (*(_DWORD *)a23 == 2)
      WTF::StringImpl::destroy(a23, a2);
    else
      *(_DWORD *)a23 -= 2;
  }
  if (v31)
    CFRelease(v31);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::CDMSessionAVContentKeySession::releaseKeys(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::SourceBufferPrivateAVFObjC **v3;
  WebCore::SourceBufferPrivateAVFObjC **v4;
  WebCore::SourceBufferPrivateAVFObjC *v5;
  _QWORD *i;
  AVSampleBufferAudioRenderer *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  PAL *v14;
  void *v15;
  void *v16;
  const __CFString *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  const WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(this + 96))
    return this;
  v1 = this;
  *(_BYTE *)(this + 72) = 1;
  v2 = *(unsigned int *)(this + 52);
  if ((_DWORD)v2)
  {
    v3 = *(WebCore::SourceBufferPrivateAVFObjC ***)(this + 40);
    v4 = &v3[v2];
    do
    {
      v5 = *v3;
      if (*((_QWORD *)*v3 + 44))
        WebCore::SourceBufferPrivateAVFObjC::flushVideo(*v3);
      if (*((_QWORD *)v5 + 49))
      {
        for (i = (_QWORD *)*((_QWORD *)v5 + 64); i; i = (_QWORD *)*i)
        {
          v7 = (AVSampleBufferAudioRenderer *)i[3];
          -[AVSampleBufferAudioRenderer flush](v7, "flush");
          WebCore::SourceBufferPrivateAVFObjC::player(v5, &v49);
          v8 = v49;
          if (v49)
          {
            WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setHasAvailableAudioSample(v49, v7, 0);
            if (*((_DWORD *)v8 + 14) == 1)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v8 + 8))(v8);
            else
              --*((_DWORD *)v8 + 14);
          }
        }
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v9 = *(_QWORD *)(v1 + 80);
  v10 = *(_QWORD *)(v1 + 88);
  v49 = (WTF::StringImpl *)"CDMSessionAVContentKeySession";
  v50 = 30;
  v51 = "releaseKeys";
  v52 = v10;
  if (*(_BYTE *)(v9 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [24]>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&v49, "expiring stream session");
  this = objc_msgSend((id)WebCore::CDMSessionAVContentKeySession::contentKeySession((WebCore::CDMSessionAVContentKeySession *)v1), "expire");
  if (!*(_QWORD *)(v1 + 56))
    return this;
  PAL::getAVContentKeySessionClass[0]((PAL *)this);
  this = objc_opt_respondsToSelector();
  if ((this & 1) == 0)
    return this;
  this = (uint64_t)WebCore::CDMSessionMediaSourceAVFObjC::storagePath((WTF::StringImpl *)&v48, *(_QWORD *)(v1 + 32));
  if (!v48)
    return this;
  if (!*((_DWORD *)v48 + 1))
    goto LABEL_74;
  v12 = JSC::ArrayBufferView::span(*(JSC::ArrayBufferView **)(v1 + 56));
  v14 = (PAL *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v12, v13);
  v15 = (void *)PAL::getAVContentKeySessionClass[0](v14);
  v16 = (void *)MEMORY[0x1E0C99E98];
  if (v48)
    v17 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v17 = &stru_1E3487BC0;
  v18 = (void *)objc_msgSend(v15, "pendingExpiredSessionReportsWithAppIdentifier:storageDirectoryAtURL:", v14, objc_msgSend(v16, "fileURLWithPath:", v17));
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v44, v53, 16);
  if (!v19)
    goto LABEL_72;
  v20 = *(_QWORD *)v45;
  while (2)
  {
    v21 = 0;
    do
    {
      if (*(_QWORD *)v45 != v20)
        objc_enumerationMutation(v18);
      v22 = *(const void **)(*((_QWORD *)&v44 + 1) + 8 * v21);
      v23 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v22, 0, 0, 0), "objectForKey:", CFSTR("PlaybackSessionID"));
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        goto LABEL_33;
      MEMORY[0x19AEA5508](&v49, v23);
      v26 = WTF::equal(*(WTF **)(v1 + 64), v49, v24);
      v27 = v49;
      v49 = 0;
      if (!v27)
        goto LABEL_32;
      if (*(_DWORD *)v27 != 2)
      {
        *(_DWORD *)v27 -= 2;
LABEL_32:
        if (v26)
          goto LABEL_39;
        goto LABEL_33;
      }
      WTF::StringImpl::destroy(v27, v25);
      if (v26)
      {
LABEL_39:
        v29 = *(_QWORD *)(v1 + 80);
        v30 = *(_QWORD *)(v1 + 88);
        v49 = (WTF::StringImpl *)"CDMSessionAVContentKeySession";
        v50 = 30;
        v51 = "releaseKeys";
        v52 = v30;
        if (*(_BYTE *)(v29 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [42]>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&v49, "found session, sending expiration message");
        if (v22)
          CFRetain(v22);
        v31 = *(const void **)(v1 + 160);
        *(_QWORD *)(v1 + 160) = v22;
        if (v31)
          CFRelease(v31);
        v32 = *(_QWORD *)(v1 + 32);
        if (v32)
          v33 = *(_QWORD *)(v32 + 8);
        else
          v33 = 0;
        v34 = *(void **)(v1 + 160);
        if (v34)
        {
          v35 = (const void *)objc_msgSend(*(id *)(v1 + 160), "bytes");
          v34 = (void *)objc_msgSend(v34, "length");
        }
        else
        {
          v35 = 0;
        }
        JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate((unint64_t)v34, (uint64_t *)&v49);
        if (!v49)
          goto LABEL_81;
        v36 = *((_QWORD *)v49 + 4);
        if (!v36)
          goto LABEL_61;
        v37 = *(_QWORD *)(v36 + 16);
        if (!v37)
          goto LABEL_61;
        v38 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (!v38 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
        {
          v39 = *((_QWORD *)v49 + 3);
          goto LABEL_64;
        }
        if (!((v37 & 0x3FFFFFFFFLL) + v38))
        {
LABEL_61:
          v39 = 0;
          goto LABEL_64;
        }
        v39 = *((_QWORD *)v49 + 3);
        if (v39 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
          v39 = (v39 & 0x3FFFFFFFFLL) + v38;
LABEL_64:
        memcpy((void *)v39, v35, (size_t)v34);
        v40 = v49;
        if (!v49)
        {
LABEL_81:
          __break(0xC471u);
          JUMPOUT(0x19524B4F0);
        }
        v41 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v41 += 2;
        v43 = v41;
        (*(void (**)(uint64_t, WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v33 + 16))(v33, v40, &v43);
        v42 = v43;
        v43 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v11);
          else
            *(_DWORD *)v42 -= 2;
        }
        if (*(_DWORD *)v40 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*(_DWORD *)v40;
        goto LABEL_72;
      }
LABEL_33:
      ++v21;
    }
    while (v19 != v21);
    v28 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v44, v53, 16);
    v19 = v28;
    if (v28)
      continue;
    break;
  }
LABEL_72:
  if (v14)
    CFRelease(v14);
LABEL_74:
  this = (uint64_t)v48;
  v48 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)this, v11);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

void sub_19524B508(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,WTF::StringImpl *a21)
{
  if (cf)
    CFRelease(cf);
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, a2);
    else
      *(_DWORD *)a20 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebCore::CDMSessionMediaSourceAVFObjC::storagePath(WTF::StringImpl *this, uint64_t a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  _DWORD *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;

  v2 = this;
  if (a2 && (this = *(WTF::StringImpl **)(a2 + 8)) != 0)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 32))(&v6);
    this = v6;
    if (v6 && *((_DWORD *)v6 + 1))
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      this = v6;
    }
    else
    {
      v4 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v4 += 2;
      *(_QWORD *)v2 = v4;
    }
    v6 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v3);
      else
        *(_DWORD *)this -= 2;
    }
  }
  else
  {
    v5 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v5 += 2;
    *(_QWORD *)v2 = v5;
  }
  return this;
}

void sub_19524B704(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::CDMSessionAVContentKeySession::update(uint64_t a1, JSC::ArrayBufferView *this, uint64_t a3, _WORD *a4, _DWORD *a5)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  PAL *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned __int8 *v65;
  uint64_t v67;
  int v68;
  WebCore::SharedBuffer *v69;
  JSC::ArrayBufferView *v70;
  uint64_t v71;
  uint64_t v72;
  const void *v73;
  void *v74;
  WTF::MonotonicTime *v75;
  void *v76;
  double v77;
  unsigned __int8 *v78;
  int v80;
  uint64_t v81;
  char v82;
  int v84;
  int v85;
  WebCoreSharedBufferData *v86;
  void *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  PAL *v92;
  void *v93;
  uint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  uint64_t v97;
  const void *v98;
  const void *v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  uint64_t v103;
  PAL *v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  WTF *v122;
  _BOOL4 inited;
  JSC::ArrayBufferView *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  const void *v129;
  NSError *v130;
  int v132;
  uint64_t v133;
  char v134;
  int v136;
  int v137;
  const void *v138;
  WebCore *v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  int v143;
  int isa_high;
  int v145;
  BOOL v146;
  int v147;
  BOOL v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  WTF::StringImpl *v152;
  void *v153;
  const void *v154;
  unsigned int position;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  NSObject *v160;
  uint64_t v161;
  void *v162;
  char *v163;
  unsigned __int8 *v164;
  int v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  WTF::Logger *v172;
  uint64_t v173;
  uint64_t v174;
  WTF::StringImpl *v175;
  uint64_t v176;
  WTF::Logger *v177;
  uint64_t v178;
  WTF::StringImpl **v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  int v184;
  WTF::StringImpl *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  WTF::StringImpl *v190;
  int v191;
  CFTypeRef v192;
  CFTypeRef v193;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  _BYTE *v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  WTF::StringImpl **v207;
  const void *v208;
  CFTypeRef cf;
  PAL *v210;
  void *v211;
  _BOOL4 v212;
  WTF::StringImpl *v216;
  uint64_t v217;
  const char *v218;
  uint64_t v219;
  _QWORD v220[7];
  int v221;
  unsigned __int8 v222[4];
  CFTypeRef v223;
  CFTypeRef v224;
  WTF::Logger *v225;
  uint64_t v226;
  WTF::StringImpl *v227;
  WebCoreSharedBufferData *v228;
  WTF::StringImpl *v229;
  WTF::StringImpl *v230;
  uint64_t v231;
  void *v232;
  uint64_t v233;
  __int128 buf;
  const char *v235;
  WTF::StringImpl *v236;
  int v237;
  _QWORD v238[3];

  v238[1] = *MEMORY[0x1E0C80C00];
  v7 = *((_QWORD *)this + 4);
  if (!v7)
  {
LABEL_16:
    if (aAcknowledged[v7])
      goto LABEL_17;
    v21 = *(_QWORD *)(a1 + 80);
    v22 = *(WTF::StringImpl **)(a1 + 88);
    *(_QWORD *)&buf = "CDMSessionAVContentKeySession";
    *((_QWORD *)&buf + 1) = 30;
    v235 = "update";
    v236 = v22;
    if (*(_BYTE *)(v21 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [33]>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "acknowleding secure stop message");
    v23 = *(_QWORD *)(a1 + 32);
    if (v23 && (v24 = *(_QWORD *)(v23 + 8)) != 0)
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v24 + 32))(&buf);
      v25 = (WTF::StringImpl *)buf;
      if ((_QWORD)buf && *(_DWORD *)(buf + 4))
      {
        WTF::FileSystemImpl::pathByAppendingComponent();
        v25 = (WTF::StringImpl *)buf;
      }
      else
      {
        v26 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v26 += 2;
        v216 = v26;
      }
      *(_QWORD *)&buf = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, this);
        else
          *(_DWORD *)v25 -= 2;
      }
    }
    else
    {
      v37 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v37 += 2;
      v216 = v37;
    }
    if (!*(_QWORD *)(a1 + 160) || !v216 || !*((_DWORD *)v216 + 1))
    {
      v13 = 0;
      *a4 = 1;
      goto LABEL_93;
    }
    v40 = JSC::ArrayBufferView::span(*(JSC::ArrayBufferView **)(a1 + 56));
    v42 = (PAL *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v40, v41);
    PAL::getAVContentKeySessionClass[0](v42);
    v43 = objc_opt_respondsToSelector();
    if ((v43 & 1) != 0)
    {
      v44 = (void *)PAL::getAVContentKeySessionClass[0]((PAL *)v43);
      v233 = *(_QWORD *)(a1 + 160);
      v45 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v233, 1);
      objc_msgSend(v44, "removePendingExpiredSessionReports:withAppIdentifier:storageDirectoryAtURL:", v45, v42, objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", WTF::StringImpl::operator NSString *()));
    }
    v46 = *(const void **)(a1 + 160);
    *(_QWORD *)(a1 + 160) = 0;
    if (v46)
    {
      CFRelease(v46);
      if (!v42)
        goto LABEL_102;
    }
    else if (!v42)
    {
LABEL_102:
      v13 = 1;
LABEL_93:
      v38 = v216;
      v216 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, this);
        else
          *(_DWORD *)v38 -= 2;
      }
      return v13;
    }
    CFRelease(v42);
    goto LABEL_102;
  }
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8
    || (v9 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) != 0
    && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
    && !((v8 & 0x3FFFFFFFFLL) + v9))
  {
LABEL_255:
    v7 = 0;
    goto LABEL_16;
  }
  v10 = *((_BYTE *)this + 6);
  if ((v10 & 3) != 0)
  {
    if (*(_BYTE *)(v7 + 64) && (v195 = *(_QWORD *)(v7 + 32)) != 0)
    {
      v7 = atomic_load((unint64_t *)(v195 + 32));
      v10 = *((_BYTE *)this + 6);
    }
    else
    {
      v7 = *(_QWORD *)(v7 + 48);
    }
    v9 = *((_QWORD *)this + 1);
    if ((v10 & 4) != 0)
      goto LABEL_252;
    v107 = *((_QWORD *)this + 2) + v9 <= v7 && v7 >= v9;
    if (v107)
      LODWORD(v7) = 0;
    else
      v7 = *((_QWORD *)this + 2);
  }
  else
  {
    LODWORD(v7) = *((_DWORD *)this + 4);
  }
  while (1)
  {
    v7 = v7;
    if (!(_DWORD)v7)
      goto LABEL_15;
    if (*MEMORY[0x1E0CC10F0])
      break;
    v9 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    v11 = *((_QWORD *)this + 3);
    if (v9)
      v12 = (_BYTE *)((v11 & 0x3FFFFFFFFLL) + v9);
    else
      v12 = (_BYTE *)*((_QWORD *)this + 3);
    if (*v12 != 97)
      goto LABEL_17;
    if (v7 != 1)
    {
      v27 = (v11 & 0x3FFFFFFFFLL) + v9;
      if (!v9)
        v27 = *((_QWORD *)this + 3);
      if (*(_BYTE *)(v27 + 1) != 99)
        goto LABEL_17;
      if (v7 != 2)
      {
        v28 = (v11 & 0x3FFFFFFFFLL) + v9;
        if (!v9)
          v28 = *((_QWORD *)this + 3);
        if (*(_BYTE *)(v28 + 2) != 107)
          goto LABEL_17;
        if (v7 != 3)
        {
          v29 = *((_QWORD *)this + 3);
          if (v9)
            v29 = (v11 & 0x3FFFFFFFFLL) + v9;
          if (*(_BYTE *)(v29 + 3) != 110)
            goto LABEL_17;
          if (v7 != 4)
          {
            v30 = *((_QWORD *)this + 3);
            if (v9)
              v30 = (v11 & 0x3FFFFFFFFLL) + v9;
            if (*(_BYTE *)(v30 + 4) != 111)
              goto LABEL_17;
            if (v7 != 5)
            {
              v31 = *((_QWORD *)this + 3);
              if (v9)
                v31 = (v11 & 0x3FFFFFFFFLL) + v9;
              if (*(_BYTE *)(v31 + 5) != 119)
                goto LABEL_17;
              if (v7 != 6)
              {
                v32 = *((_QWORD *)this + 3);
                if (v9)
                  v32 = (v11 & 0x3FFFFFFFFLL) + v9;
                if (*(_BYTE *)(v32 + 6) != 108)
                  goto LABEL_17;
                if (v7 != 7)
                {
                  v33 = *((_QWORD *)this + 3);
                  if (v9)
                    v33 = (v11 & 0x3FFFFFFFFLL) + v9;
                  if (*(_BYTE *)(v33 + 7) != 101)
                    goto LABEL_17;
                  if (v7 != 8)
                  {
                    v34 = *((_QWORD *)this + 3);
                    if (v9)
                      v34 = (v11 & 0x3FFFFFFFFLL) + v9;
                    if (*(_BYTE *)(v34 + 8) != 100)
                      goto LABEL_17;
                    if (v7 != 9)
                    {
                      v35 = *((_QWORD *)this + 3);
                      if (v9)
                        v35 = (v11 & 0x3FFFFFFFFLL) + v9;
                      if (*(_BYTE *)(v35 + 9) != 103)
                        goto LABEL_17;
                      if (v7 != 10)
                      {
                        v36 = *((_QWORD *)this + 3);
                        if (v9)
                          v36 = (v11 & 0x3FFFFFFFFLL) + v9;
                        if (*(_BYTE *)(v36 + 10) != 101)
                          goto LABEL_17;
                        if (v7 != 11)
                        {
                          if (v9)
                            v11 = (v11 & 0x3FFFFFFFFLL) + v9;
                          if (*(_BYTE *)(v11 + 11) != 100 || v7 != 12)
                            goto LABEL_17;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_15:
    if (v7 < 0xDuLL)
      goto LABEL_16;
    __break(1u);
LABEL_252:
    v107 = v7 >= v9;
    v108 = v7 - v9;
    if (v107)
      goto LABEL_255;
    if ((*((_BYTE *)this + 4) - 4) > 7u)
      LOBYTE(v109) = 0;
    else
      v109 = qword_1968DCF50[(char)(*((_BYTE *)this + 4) - 4)];
    v9 = -1;
    v7 = (-1 << v109) & v108;
  }
  v196 = 0;
  v9 = (unint64_t)"acknowledged";
  while (v196 != 12)
  {
    v197 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v197 && *(_BYTE *)(MEMORY[0x1E0CC10F8] + 34))
      v198 = (*((_QWORD *)this + 3) & 0x3FFFFFFFFLL) + v197;
    else
      v198 = *((_QWORD *)this + 3);
    if (*(unsigned __int8 *)(v198 + v196) != aAcknowledged[v196])
      break;
    if (v7 == ++v196)
      goto LABEL_15;
  }
LABEL_17:
  if (*(_BYTE *)(a1 + 72))
  {
LABEL_18:
    v13 = 0;
    *a4 = 1;
    return v13;
  }
  if (!*(_QWORD *)(a1 + 56))
  {
    v212 = 1;
    v39 = a1;
    goto LABEL_126;
  }
  v14 = *((_QWORD *)this + 4);
  if (!v14)
    goto LABEL_106;
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
    goto LABEL_270;
  v16 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v16 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v15 & 0x3FFFFFFFFLL) + v16))
    goto LABEL_270;
  v17 = *((_BYTE *)this + 6);
  if ((v17 & 3) == 0)
  {
    LODWORD(v14) = *((_DWORD *)this + 4);
    goto LABEL_27;
  }
  if (*(_BYTE *)(v14 + 64) && (v199 = *(_QWORD *)(v14 + 32)) != 0)
  {
    v110 = atomic_load((unint64_t *)(v199 + 32));
    v17 = *((_BYTE *)this + 6);
  }
  else
  {
    v110 = *(_QWORD *)(v14 + 48);
  }
  v111 = *((_QWORD *)this + 1);
  if ((v17 & 4) == 0)
  {
    if (*((_QWORD *)this + 2) + v111 <= v110 && v110 >= v111)
      LODWORD(v14) = 0;
    else
      v14 = *((_QWORD *)this + 2);
    goto LABEL_27;
  }
  v107 = v110 >= v111;
  v113 = v110 - v111;
  if (v107)
  {
LABEL_270:
    v14 = 0;
    goto LABEL_106;
  }
  if ((*((_BYTE *)this + 4) - 4) > 7u)
    LOBYTE(v114) = 0;
  else
    v114 = qword_1968DCF50[(char)(*((_BYTE *)this + 4) - 4)];
  v14 = (-1 << v114) & v113;
LABEL_27:
  v14 = v14;
  if (!(_DWORD)v14)
    goto LABEL_106;
  if (!*MEMORY[0x1E0CC10F0])
  {
    v18 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    v19 = *((_QWORD *)this + 3);
    if (v18)
      v20 = (_BYTE *)((v19 & 0x3FFFFFFFFLL) + v18);
    else
      v20 = (_BYTE *)*((_QWORD *)this + 3);
    if (*v20 == 114)
    {
      if (v14 == 1)
        goto LABEL_106;
      v47 = (v19 & 0x3FFFFFFFFLL) + v18;
      if (!v18)
        v47 = *((_QWORD *)this + 3);
      if (*(_BYTE *)(v47 + 1) == 101)
      {
        if (v14 == 2)
          goto LABEL_106;
        v48 = *((_QWORD *)this + 3);
        if (v18)
          v48 = (v19 & 0x3FFFFFFFFLL) + v18;
        if (*(_BYTE *)(v48 + 2) == 110)
        {
          if (v14 == 3)
            goto LABEL_106;
          v49 = *((_QWORD *)this + 3);
          if (v18)
            v49 = (v19 & 0x3FFFFFFFFLL) + v18;
          if (*(_BYTE *)(v49 + 3) == 101)
          {
            if (v14 != 4)
            {
              if (v18)
                v19 = (v19 & 0x3FFFFFFFFLL) + v18;
              v212 = 0;
              if (*(_BYTE *)(v19 + 4) != 119 || v14 != 5)
                goto LABEL_125;
            }
LABEL_106:
            v212 = aRenew[v14] == 0;
            goto LABEL_125;
          }
        }
      }
    }
    v212 = 0;
    goto LABEL_125;
  }
  v200 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v200 && *(_BYTE *)(MEMORY[0x1E0CC10F8] + 34))
  {
    v201 = *((_QWORD *)this + 3);
    v202 = (_BYTE *)((v201 & 0x3FFFFFFFFLL) + v200);
  }
  else
  {
    v201 = *((_QWORD *)this + 3);
    v202 = (_BYTE *)v201;
  }
  if (*v202 != 114)
    goto LABEL_499;
  if (v14 == 1)
    goto LABEL_106;
  v203 = v201;
  if (v200)
  {
    v203 = v201;
    if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34))
      v203 = (v201 & 0x3FFFFFFFFLL) + v200;
  }
  if (*(_BYTE *)(v203 + 1) != 101)
    goto LABEL_499;
  if (v14 == 2)
    goto LABEL_106;
  v204 = v201;
  if (v200)
  {
    v204 = v201;
    if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34))
      v204 = (v201 & 0x3FFFFFFFFLL) + v200;
  }
  if (*(_BYTE *)(v204 + 2) != 110)
    goto LABEL_499;
  if (v14 == 3)
    goto LABEL_106;
  v205 = v201;
  if (v200)
  {
    v205 = v201;
    if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34))
      v205 = (v201 & 0x3FFFFFFFFLL) + v200;
  }
  if (*(_BYTE *)(v205 + 3) != 101)
  {
LABEL_499:
    v212 = 0;
    goto LABEL_125;
  }
  if (v14 == 4)
    goto LABEL_106;
  if (v200 && *(_BYTE *)(MEMORY[0x1E0CC10F8] + 34))
    v201 = (v201 & 0x3FFFFFFFFLL) + v200;
  v212 = 0;
  if (*(_BYTE *)(v201 + 4) == 119 && v14 == 5)
    goto LABEL_106;
LABEL_125:
  v39 = a1;
  if (!*(_QWORD *)(a1 + 56))
  {
LABEL_126:
    v50 = *(_QWORD *)(v39 + 80);
    v51 = *(WTF::StringImpl **)(v39 + 88);
    *(_QWORD *)&buf = "CDMSessionAVContentKeySession";
    *((_QWORD *)&buf + 1) = 30;
    v235 = "update";
    v236 = v51;
    if (*(_BYTE *)(v50 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "certificate data");
    if (this)
      ++*(_DWORD *)this;
    v52 = *(_DWORD **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = this;
    if (v52)
    {
      if (*v52 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*v52;
    }
    v39 = a1;
  }
  if (*(_DWORD *)(v39 + 192) == 1)
    return 0;
  if (*(_DWORD *)(v39 + 184) == 2)
  {
    v53 = *(unsigned int *)(v39 + 52);
    if (!(_DWORD)v53)
      goto LABEL_18;
    v54 = *(uint64_t **)(a1 + 40);
    v55 = 8 * v53;
    while (1)
    {
      v56 = *v54;
      if (*(_BYTE *)(*v54 + 808))
        break;
      ++v54;
      v55 -= 8;
      if (!v55)
        goto LABEL_18;
    }
    v57 = *(_QWORD *)(v56 + 8);
    if (__ldaxr((unsigned __int8 *)v57))
    {
      __clrex();
      goto LABEL_145;
    }
    if (__stxr(1u, (unsigned __int8 *)v57))
LABEL_145:
      MEMORY[0x19AEA534C](v57);
    ++*(_QWORD *)(v57 + 8);
    v59 = __ldxr((unsigned __int8 *)v57);
    if (v59 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v57))
      {
LABEL_151:
        v60 = *(unsigned int **)(v56 + 592);
        if (v60)
        {
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 + 1, v60));
        }
        v62 = *(_QWORD *)(a1 + 152);
        *(_QWORD *)(a1 + 152) = v60;
        if (v62)
        {
          do
          {
            v63 = __ldaxr((unsigned int *)v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, (unsigned int *)v62));
          if (!v64)
          {
            atomic_store(1u, (unsigned int *)v62);
            v115 = *(unsigned int *)(v62 + 20);
            if ((_DWORD)v115)
            {
              v116 = *(_QWORD *)(v62 + 8);
              v117 = v116 + 16 * v115;
              do
              {
                v118 = *(unsigned int **)(v116 + 8);
                *(_QWORD *)(v116 + 8) = 0;
                if (v118)
                {
                  do
                  {
                    v119 = __ldaxr(v118);
                    v120 = v119 - 1;
                  }
                  while (__stlxr(v120, v118));
                  if (!v120)
                  {
                    atomic_store(1u, v118);
                    v121 = v118[6];
                    if ((_DWORD)v121 != -1)
                      ((void (*)(__int128 *, unsigned int *))off_1E334DC30[v121])(&buf, v118 + 2);
                    v118[6] = -1;
                    WTF::fastFree((WTF *)v118, this);
                  }
                }
                v116 += 16;
              }
              while (v116 != v117);
            }
            v122 = *(WTF **)(v62 + 8);
            if ((WTF *)(v62 + 24) != v122 && v122 != 0)
            {
              *(_QWORD *)(v62 + 8) = 0;
              *(_DWORD *)(v62 + 16) = 0;
              WTF::fastFree(v122, this);
            }
            WTF::fastFree((WTF *)v62, this);
          }
        }
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v56 + 8));
        v39 = a1;
        goto LABEL_157;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v57);
    goto LABEL_151;
  }
LABEL_157:
  v65 = (unsigned __int8 *)(v39 + 128);
  if (__ldaxr((unsigned __int8 *)(v39 + 128)))
  {
    __clrex();
    goto LABEL_160;
  }
  if (__stxr(1u, v65))
LABEL_160:
    MEMORY[0x19AEA534C](v65);
  v206 = a3;
  v67 = *(_QWORD *)(a1 + 136);
  v68 = __ldxr(v65);
  if (v68 == 1)
  {
    if (!__stlxr(0, v65))
    {
      if (v67)
        goto LABEL_208;
      goto LABEL_167;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v65);
  if (v67)
    goto LABEL_208;
LABEL_167:
  v69 = *(WebCore::SharedBuffer **)(a1 + 152);
  if (v69)
    WebCore::SharedBuffer::createNSData(v69, &v228);
  else
    v228 = 0;
  v70 = *(JSC::ArrayBufferView **)(a1 + 144);
  if (v70)
  {
    v71 = JSC::ArrayBufferView::span(v70);
    v73 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v71, v72);
  }
  else
  {
    v73 = 0;
  }
  WebCore::CDMSessionAVContentKeySession::contentKeySession((WebCore::CDMSessionAVContentKeySession *)a1);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v74 = (void *)WebCore::CDMSessionAVContentKeySession::contentKeySession((WebCore::CDMSessionAVContentKeySession *)a1);
    v75 = (WTF::MonotonicTime *)objc_msgSend(v74, "processContentKeyRequestWithIdentifier:initializationData:options:", v73, v228, 0);
  }
  else
  {
    v76 = (void *)WebCore::CDMSessionAVContentKeySession::contentKeySession((WebCore::CDMSessionAVContentKeySession *)a1);
    v75 = (WTF::MonotonicTime *)objc_msgSend(v76, "processContentKeyRequestInitializationData:options:", v228, 0);
  }
  WTF::MonotonicTime::now(v75);
  *(double *)&v225 = v77 + 5.0;
  LODWORD(v226) = 1;
  v78 = (unsigned __int8 *)(a1 + 124);
  if (__ldaxr((unsigned __int8 *)(a1 + 124)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v78))
  {
    goto LABEL_182;
  }
  MEMORY[0x19AEA534C](v78);
LABEL_182:
  while (2)
  {
    v80 = *(_DWORD *)(a1 + 120);
    if (!v80)
    {
      *(_QWORD *)&buf = WTF::TimeWithDynamicClockType::nowWithSameClock((WTF::TimeWithDynamicClockType *)&v225);
      *((_QWORD *)&buf + 1) = v81;
      if (!WTF::TimeWithDynamicClockType::operator<())
      {
        v229 = (WTF::StringImpl *)(a1 + 124);
        v230 = (WTF::StringImpl *)(a1 + 125);
        *(_QWORD *)&buf = WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
        *((_QWORD *)&buf + 1) = &buf;
        v235 = (const char *)&v230;
        v216 = (WTF::StringImpl *)WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
        v217 = (uint64_t)&v216;
        v218 = (const char *)&v229;
        v82 = WTF::ParkingLot::parkConditionallyImpl() & 1;
        goto LABEL_185;
      }
      v84 = __ldxr(v78);
      if (v84 == 1)
      {
        if (!__stlxr(0, v78))
          goto LABEL_196;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v78);
LABEL_196:
      v82 = 0;
LABEL_185:
      if (__ldaxr(v78))
      {
        __clrex();
        goto LABEL_188;
      }
      if (__stxr(1u, v78))
LABEL_188:
        MEMORY[0x19AEA534C](v78);
      if ((v82 & 1) == 0)
      {
        v80 = *(_DWORD *)(a1 + 120);
        if (!v80)
          goto LABEL_199;
        break;
      }
      continue;
    }
    break;
  }
  *(_DWORD *)(a1 + 120) = v80 - 1;
LABEL_199:
  v85 = __ldxr(v78);
  if (v85 != 1)
  {
    __clrex();
    goto LABEL_203;
  }
  if (__stlxr(0, v78))
LABEL_203:
    WTF::Lock::unlockSlow((WTF::Lock *)v78);
  if (v73)
    CFRelease(v73);
  v86 = v228;
  v228 = 0;
  if (v86)
    CFRelease(v86);
LABEL_208:
  if (__ldaxr(v65))
  {
    __clrex();
    goto LABEL_211;
  }
  if (__stxr(1u, v65))
LABEL_211:
    MEMORY[0x19AEA534C](v65);
  v88 = *(void **)(a1 + 136);
  if (v88)
    CFRetain(*(CFTypeRef *)(a1 + 136));
  v211 = v88;
  v89 = __ldxr(v65);
  if (v89 != 1)
  {
    __clrex();
    goto LABEL_218;
  }
  if (__stlxr(0, v65))
LABEL_218:
    WTF::Lock::unlockSlow((WTF::Lock *)v65);
  if (v212)
  {
    v90 = JSC::ArrayBufferView::span(*(JSC::ArrayBufferView **)(a1 + 56));
    v92 = (PAL *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v90, v91);
    v210 = v92;
    if (!*(_DWORD *)(a1 + 180))
      goto LABEL_294;
    {
      if (PAL::canLoad_AVFoundation_AVContentKeyRequestProtocolVersionsKey(void)::loaded)
        goto LABEL_223;
LABEL_294:
      cf = 0;
    }
    else
    {
      inited = PAL::init_AVFoundation_AVContentKeyRequestProtocolVersionsKey(v92);
      PAL::canLoad_AVFoundation_AVContentKeyRequestProtocolVersionsKey(void)::loaded = inited;
      if (!inited)
        goto LABEL_294;
LABEL_223:
      v231 = PAL::constantAVFoundationAVContentKeyRequestProtocolVersionsKey;
      v93 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a1 + 180));
      v94 = *(unsigned int *)(a1 + 180);
      if ((_DWORD)v94)
      {
        v95 = *(_DWORD **)(a1 + 168);
        v96 = 4 * v94;
        do
        {
          if (*v95)
          {
            v97 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:");
            if (v97)
              objc_msgSend(v93, "addObject:", v97);
          }
          ++v95;
          v96 -= 4;
        }
        while (v96);
      }
      v232 = v93;
      v98 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v232, &v231, 1, v206);
      v99 = v98;
      if (v98)
        CFRetain(v98);
      cf = v99;
      if (v93)
        CFRelease(v93);
    }
    *a4 = 0;
    *a5 = 0;
    v125 = *(JSC::ArrayBufferView **)(a1 + 144);
    if (v125)
    {
      v126 = JSC::ArrayBufferView::span(v125);
      v128 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v126, v127);
    }
    else
    {
      v129 = (const void *)objc_msgSend(v211, "identifier");
      v128 = (uint64_t)v129;
      if (v129)
        CFRetain(v129);
    }
    v208 = (const void *)v128;
    v223 = 0;
    v224 = 0;
    v221 = 0;
    *(_WORD *)v222 = 0;
    v220[0] = MEMORY[0x1E0C809B0];
    v220[1] = 3321888768;
    v220[2] = ___ZN7WebCore29CDMSessionAVContentKeySession6updateEPN3JSC21GenericTypedArrayViewINS1_12Uint8AdaptorEEERN3WTF6RefPtrIS4_NS6_12RawPtrTraitsIS4_EENS6_21DefaultRefDerefTraitsIS4_EEEERtRj_block_invoke;
    v220[3] = &__block_descriptor_56_e8_32c190_ZTSKZN7WebCore29CDMSessionAVContentKeySession6updateEPN3JSC21GenericTypedArrayViewINS1_12Uint8AdaptorEEERN3WTF6RefPtrIS4_NS6_12RawPtrTraitsIS4_EENS6_21DefaultRefDerefTraitsIS4_EEEERtRjE3__1_e28_v24__0__NSData_8__NSError_16l;
    v220[4] = &v224;
    v220[5] = &v223;
    v220[6] = &v221;
    objc_msgSend(v211, "makeStreamingContentKeyRequestDataForApp:contentIdentifier:options:completionHandler:", v210, v128, cf, v220, v206);
    *(double *)&v225 = INFINITY;
    LODWORD(v226) = 0;
    if (__ldaxr(v222))
    {
      __clrex();
    }
    else if (!__stxr(1u, v222))
    {
      goto LABEL_303;
    }
    MEMORY[0x19AEA534C](v222);
LABEL_303:
    while (2)
    {
      v132 = v221;
      if (v221)
      {
LABEL_319:
        v221 = v132 - 1;
LABEL_320:
        v137 = __ldxr(v222);
        if (v137 == 1)
        {
          v138 = (const void *)v128;
          if (!__stlxr(0, v222))
          {
LABEL_325:
            v139 = (WebCore *)v224;
            if (v224)
            {
              *a4 = 6;
              *a5 = WebCore::mediaKeyErrorSystemCode(v139, v130);
              v140 = *(_QWORD *)(a1 + 80);
              v141 = *(_QWORD *)(a1 + 88);
              v216 = (WTF::StringImpl *)"CDMSessionAVContentKeySession";
              v217 = 30;
              v218 = "update";
              v219 = v141;
              if (*(_BYTE *)(v140 + 12))
              {
                v142 = (void *)v224;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v216);
                WTF::String::String((WTF::String *)&v228, "error: ");
                MEMORY[0x19AEA5508](&v227, objc_msgSend(v142, "localizedDescription"));
                if (v229)
                {
                  v143 = *((_DWORD *)v229 + 1);
                  if (v228)
                    goto LABEL_329;
LABEL_429:
                  isa_high = 0;
                  if (!v227)
                    goto LABEL_430;
LABEL_330:
                  v145 = *((_DWORD *)v227 + 1);
                }
                else
                {
                  v143 = 0;
                  if (!v228)
                    goto LABEL_429;
LABEL_329:
                  isa_high = HIDWORD(v228->super.super.isa);
                  if (v227)
                    goto LABEL_330;
LABEL_430:
                  v145 = 0;
                }
                if ((v145 | isa_high) < 0)
                  goto LABEL_471;
                v146 = __OFADD__(isa_high, v145);
                v147 = isa_high + v145;
                v148 = v146;
                if (v143 < 0)
                  goto LABEL_471;
                if (v148)
                  goto LABEL_471;
                v149 = (v143 + v147);
                if (__OFADD__(v143, v147))
                  goto LABEL_471;
                if (v229 && (*((_BYTE *)v229 + 16) & 4) == 0)
                {
                  v150 = 0;
                  goto LABEL_349;
                }
                if (v228)
                {
                  position = v228->_position;
                  v150 = (position >> 2) & 1;
                  if (v227 && (position & 4) != 0)
LABEL_348:
                    v150 = (*((unsigned __int8 *)v227 + 16) >> 2) & 1;
                }
                else
                {
                  if (v227)
                    goto LABEL_348;
                  v150 = 1;
                }
LABEL_349:
                WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v149, v150, v229, (uint64_t)v228, (uint64_t)v227, &buf);
                v230 = (WTF::StringImpl *)buf;
                if (!(_QWORD)buf)
                {
LABEL_471:
                  __break(0xC471u);
                  JUMPOUT(0x19524CF4CLL);
                }
                v157 = v227;
                v227 = 0;
                if (v157)
                {
                  if (*(_DWORD *)v157 == 2)
                    WTF::StringImpl::destroy(v157, v156);
                  else
                    *(_DWORD *)v157 -= 2;
                }
                v158 = (WTF::StringImpl *)v228;
                v228 = 0;
                if (v158)
                {
                  if (*(_DWORD *)v158 == 2)
                    WTF::StringImpl::destroy(v158, v156);
                  else
                    *(_DWORD *)v158 -= 2;
                }
                v159 = v229;
                v229 = 0;
                if (v159)
                {
                  if (*(_DWORD *)v159 == 2)
                    WTF::StringImpl::destroy(v159, v156);
                  else
                    *(_DWORD *)v159 -= 2;
                }
                v160 = qword_1ECE7CE30;
                v161 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v161)
                {
                  WTF::String::utf8();
                  v163 = *(double *)&v225 == 0.0 ? 0 : (char *)v225 + 16;
                  LODWORD(buf) = 136446210;
                  *(_QWORD *)((char *)&buf + 4) = v163;
                  _os_log_impl(&dword_1940B8000, v160, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                  v161 = (uint64_t)v225;
                  *(double *)&v225 = 0.0;
                  if (v161)
                  {
                    if (*(_DWORD *)v161 == 1)
                      v161 = WTF::fastFree((WTF *)v161, v162);
                    else
                      --*(_DWORD *)v161;
                  }
                }
                if (WebCore::LogEME && byte_1ECE7CE20)
                {
                  v164 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                  while (1)
                  {
                    v165 = *v164;
                    if ((v165 & 1) != 0)
                      break;
                    v166 = __ldaxr(v164);
                    if (v166 == v165)
                    {
                      if (!__stxr(v165 | 1, v164))
                      {
                        v167 = WTF::Logger::observers((WTF::Logger *)v161);
                        v168 = *(unsigned int *)(v167 + 12);
                        if ((_DWORD)v168)
                        {
                          v169 = *(uint64_t **)v167;
                          v170 = *(_QWORD *)v167 + 8 * v168;
                          do
                          {
                            v171 = *v169;
                            LODWORD(buf) = 0;
                            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v216);
                            LODWORD(v235) = 0;
                            WTF::String::String((WTF::String *)&v236, "error: ");
                            v237 = 0;
                            MEMORY[0x19AEA5508](v238, objc_msgSend(v142, "localizedDescription"));
                            *(double *)&v225 = 0.0;
                            v226 = 0;
                            v172 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                            LODWORD(v226) = 3;
                            v225 = v172;
                            v173 = HIDWORD(v226);
                            *((_DWORD *)v172 + 4 * HIDWORD(v226)) = buf;
                            v174 = *((_QWORD *)&buf + 1);
                            if (*((_QWORD *)&buf + 1))
                              **((_DWORD **)&buf + 1) += 2;
                            *((_QWORD *)v172 + 2 * v173 + 1) = v174;
                            *((_DWORD *)v172 + 4 * (v173 + 1)) = (_DWORD)v235;
                            v175 = v236;
                            if (v236)
                              *(_DWORD *)v236 += 2;
                            *((_QWORD *)v172 + 2 * (v173 + 1) + 1) = v175;
                            *((_DWORD *)v172 + 4 * (v173 + 2)) = v237;
                            v176 = v238[0];
                            if (v238[0])
                              *(_DWORD *)v238[0] += 2;
                            *((_QWORD *)v172 + 2 * (v173 + 2) + 1) = v176;
                            HIDWORD(v226) = v173 + 3;
                            (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v171 + 16))(v171, &WebCore::LogEME, 1, &v225);
                            v177 = v225;
                            if (HIDWORD(v226))
                            {
                              v178 = 16 * HIDWORD(v226);
                              v179 = (WTF::StringImpl **)((char *)v225 + 8);
                              do
                              {
                                v180 = *v179;
                                *v179 = 0;
                                if (v180)
                                {
                                  if (*(_DWORD *)v180 == 2)
                                    WTF::StringImpl::destroy(v180, (WTF::StringImpl *)v162);
                                  else
                                    *(_DWORD *)v180 -= 2;
                                }
                                v179 += 2;
                                v178 -= 16;
                              }
                              while (v178);
                              v177 = v225;
                            }
                            if (v177)
                            {
                              *(double *)&v225 = 0.0;
                              LODWORD(v226) = 0;
                              WTF::fastFree(v177, v162);
                            }
                            v181 = (WTF::StringImpl *)v238[0];
                            v238[0] = 0;
                            if (v181)
                            {
                              if (*(_DWORD *)v181 == 2)
                                WTF::StringImpl::destroy(v181, (WTF::StringImpl *)v162);
                              else
                                *(_DWORD *)v181 -= 2;
                            }
                            v182 = v236;
                            v236 = 0;
                            if (v182)
                            {
                              if (*(_DWORD *)v182 == 2)
                                WTF::StringImpl::destroy(v182, (WTF::StringImpl *)v162);
                              else
                                *(_DWORD *)v182 -= 2;
                            }
                            v183 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                            *((_QWORD *)&buf + 1) = 0;
                            if (v183)
                            {
                              if (*(_DWORD *)v183 == 2)
                                WTF::StringImpl::destroy(v183, (WTF::StringImpl *)v162);
                              else
                                *(_DWORD *)v183 -= 2;
                            }
                            ++v169;
                          }
                          while (v169 != (uint64_t *)v170);
                        }
                        v184 = __ldxr(v164);
                        if (v184 == 1)
                        {
                          if (!__stlxr(0, v164))
                            break;
                        }
                        else
                        {
                          __clrex();
                        }
                        WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                        break;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                  }
                }
                v190 = v230;
                v230 = 0;
                v138 = v208;
                if (v190)
                {
                  v191 = *(_DWORD *)v190 - 2;
                  if (*(_DWORD *)v190 == 2)
                  {
                    WTF::StringImpl::destroy(v190, (WTF::StringImpl *)v162);
                    goto LABEL_442;
                  }
LABEL_441:
                  *(_DWORD *)v190 = v191;
                }
              }
              goto LABEL_442;
            }
            v151 = *(_QWORD *)(a1 + 80);
            v152 = *(WTF::StringImpl **)(a1 + 88);
            *(_QWORD *)&buf = "CDMSessionAVContentKeySession";
            *((_QWORD *)&buf + 1) = 30;
            v235 = "update";
            v236 = v152;
            if (*(_BYTE *)(v151 + 12))
              WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [22]>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "generated key request");
            v153 = (void *)v223;
            if (v223)
            {
              v154 = (const void *)objc_msgSend((id)v223, "bytes");
              v153 = (void *)objc_msgSend(v153, "length");
            }
            else
            {
              v154 = 0;
            }
            JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate((unint64_t)v153, (uint64_t *)&buf);
            v185 = (WTF::StringImpl *)buf;
            if ((_QWORD)buf)
            {
              v186 = *(_QWORD *)(buf + 32);
              if (!v186)
                goto LABEL_435;
              v187 = *(_QWORD *)(v186 + 16);
              if (!v187)
                goto LABEL_435;
              v188 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
              if (!v188 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
              {
                v189 = *(_QWORD *)(buf + 24);
                goto LABEL_438;
              }
              if (!((v187 & 0x3FFFFFFFFLL) + v188))
              {
LABEL_435:
                v189 = 0;
                goto LABEL_438;
              }
              v189 = *(_QWORD *)(buf + 24);
              if (v189 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
                v189 = (v189 & 0x3FFFFFFFFLL) + v188;
LABEL_438:
              memcpy((void *)v189, v154, (size_t)v153);
              v185 = (WTF::StringImpl *)buf;
            }
            v190 = *v207;
            *v207 = v185;
            if (v190)
            {
              v191 = *(_DWORD *)v190 - 1;
              if (*(_DWORD *)v190 != 1)
                goto LABEL_441;
              JSC::ArrayBufferView::operator delete();
            }
LABEL_442:
            v192 = v223;
            v223 = 0;
            if (v192)
              CFRelease(v192);
            v193 = v224;
            v224 = 0;
            v104 = v210;
            if (v193)
            {
              CFRelease(v193);
              v104 = v210;
              if (!v138)
                goto LABEL_446;
            }
            else if (!v138)
            {
LABEL_446:
              if (cf)
              {
                CFRelease(cf);
                v104 = v210;
              }
              goto LABEL_448;
            }
            CFRelease(v138);
            v104 = v210;
            goto LABEL_446;
          }
        }
        else
        {
          __clrex();
          v138 = (const void *)v128;
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v222);
        goto LABEL_325;
      }
      *(_QWORD *)&buf = WTF::TimeWithDynamicClockType::nowWithSameClock((WTF::TimeWithDynamicClockType *)&v225);
      *((_QWORD *)&buf + 1) = v133;
      if (!WTF::TimeWithDynamicClockType::operator<())
      {
        v229 = (WTF::StringImpl *)v222;
        v230 = (WTF::StringImpl *)&v222[1];
        *(_QWORD *)&buf = WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
        *((_QWORD *)&buf + 1) = &buf;
        v235 = (const char *)&v230;
        v216 = (WTF::StringImpl *)WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
        v217 = (uint64_t)&v216;
        v218 = (const char *)&v229;
        v134 = WTF::ParkingLot::parkConditionallyImpl() & 1;
        goto LABEL_306;
      }
      v136 = __ldxr(v222);
      if (v136 == 1)
      {
        if (!__stlxr(0, v222))
          goto LABEL_317;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v222);
LABEL_317:
      v134 = 0;
LABEL_306:
      if (__ldaxr(v222))
      {
        __clrex();
        goto LABEL_309;
      }
      if (__stxr(1u, v222))
LABEL_309:
        MEMORY[0x19AEA534C](v222);
      if ((v134 & 1) == 0)
      {
        v132 = v221;
        if (!v221)
          goto LABEL_320;
        goto LABEL_319;
      }
      continue;
    }
  }
  v100 = *(_QWORD *)(a1 + 80);
  v101 = *(WTF::StringImpl **)(a1 + 88);
  *(_QWORD *)&buf = "CDMSessionAVContentKeySession";
  *((_QWORD *)&buf + 1) = 30;
  v235 = "update";
  v236 = v101;
  if (*(_BYTE *)(v100 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [24]>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "processing key response");
  *a4 = 0;
  *a5 = 0;
  v102 = JSC::ArrayBufferView::span(this);
  v104 = (PAL *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v102, v103);
  v105 = objc_opt_respondsToSelector();
  if ((v105 & 1) != 0
    && (PAL::getAVContentKeyResponseClass[0]((PAL *)v105), v106 = objc_opt_respondsToSelector(), (v106 & 1) != 0))
  {
    objc_msgSend(v211, "processContentKeyResponse:", objc_msgSend((id)PAL::getAVContentKeyResponseClass[0]((PAL *)v106), "contentKeyResponseWithFairPlayStreamingKeyResponseData:", v104));
  }
  else
  {
    objc_msgSend(v211, "processContentKeyResponseData:", v104, v206);
  }
LABEL_448:
  if (v104)
    CFRelease(v104);
  v13 = !v212;
  if (v211)
    CFRelease(v211);
  return v13;
}

void sub_19524D0A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef a11, CFTypeRef a12, CFTypeRef cf, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,CFTypeRef a30,CFTypeRef a31,WTF *a32,int a33,int a34,WTF::StringImpl *a35)
{
  if (a12)
    CFRelease(a12);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void ___ZN7WebCore29CDMSessionAVContentKeySession6updateEPN3JSC21GenericTypedArrayViewINS1_12Uint8AdaptorEEERN3WTF6RefPtrIS4_NS6_12RawPtrTraitsIS4_EENS6_21DefaultRefDerefTraitsIS4_EEEERtRj_block_invoke(_QWORD *a1, CFTypeRef cf, CFTypeRef a3)
{
  const void **v6;
  const void *v7;
  const void **v8;
  const void *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  int v15;
  _QWORD v16[2];
  char v17;
  _QWORD v18[3];

  v6 = (const void **)a1[4];
  if (a3)
    CFRetain(a3);
  v7 = *v6;
  *v6 = a3;
  if (v7)
    CFRelease(v7);
  v8 = (const void **)a1[5];
  if (cf)
    CFRetain(cf);
  v9 = *v8;
  *v8 = cf;
  if (v9)
    CFRelease(v9);
  v10 = a1[6];
  v11 = (unsigned __int8 *)(v10 + 4);
  if (__ldaxr((unsigned __int8 *)(v10 + 4)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v10 + 4);
LABEL_13:
  ++*(_DWORD *)v10;
  v13 = (unsigned __int8 *)(v10 + 5);
  v14 = atomic_load(v13);
  if ((v14 & 1) != 0)
  {
    v17 = 0;
    v16[0] = v13;
    v16[1] = &v17;
    v18[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
    v18[1] = v18;
    v18[2] = v16;
    WTF::ParkingLot::unparkOneImpl();
  }
  v15 = __ldxr(v11);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, v11))
LABEL_19:
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
}

void sub_19524D590(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

__n128 __copy_helper_block_e8_32c190_ZTSKZN7WebCore29CDMSessionAVContentKeySession6updateEPN3JSC21GenericTypedArrayViewINS1_12Uint8AdaptorEEERN3WTF6RefPtrIS4_NS6_12RawPtrTraitsIS4_EENS6_21DefaultRefDerefTraitsIS4_EEEERtRjE3__1(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  a1[2] = result;
  return result;
}

void WebCore::CDMSessionAVContentKeySession::cachedKeyForKeyID(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::CDMSessionAVContentKeySession::addParser(WebCore::CDMSessionAVContentKeySession *this, AVStreamDataParser *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v7;
  void *v8;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;

  v4 = *((_QWORD *)this + 10);
  v5 = *((_QWORD *)this + 11);
  v10 = "CDMSessionAVContentKeySession";
  v11 = 30;
  v12 = "addParser";
  v13 = v5;
  if (*(_BYTE *)(v4 + 12))
  {
    if (WebCore::LogEME && byte_1ECE7CE20 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogEME, 3, (WTF::Logger::LogSiteIdentifier *)&v10);
  }
  WebCore::CDMSessionAVContentKeySession::contentKeySession(this);
  v7 = objc_opt_respondsToSelector();
  v8 = (void *)WebCore::CDMSessionAVContentKeySession::contentKeySession(this);
  if ((v7 & 1) != 0)
    return objc_msgSend(v8, "addContentKeyRecipient:", a2, v10, v11, v12, v13);
  else
    return objc_msgSend(v8, "addStreamDataParser:", a2, v10, v11, v12, v13);
}

uint64_t WebCore::CDMSessionAVContentKeySession::isAnyKeyUsable(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  void *v6;
  int v7;
  void *v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v17;
  int v18;
  unsigned int v19;

  v4 = (unsigned __int8 *)(a1 + 128);
  if (__ldaxr((unsigned __int8 *)(a1 + 128)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 128);
LABEL_5:
  v6 = *(void **)(a1 + 136);
  if (v6)
    CFRetain(v6);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v4))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  WebCore::CDMPrivateFairPlayStreaming::keyIDsForRequest((WebCore::CDMPrivateFairPlayStreaming *)v6, (uint64_t)&v17);
  if (v6)
    CFRelease(v6);
  v9 = (uint64_t *)v17;
  if (v19)
  {
    if (*(_DWORD *)(a2 + 12))
    {
      v10 = (uint64_t *)((char *)v17 + 8 * v19);
      LODWORD(v11) = 1;
      while (!(_DWORD)v11)
      {
LABEL_21:
        if (++v9 == v10)
          goto LABEL_22;
      }
      v12 = 0;
      while (1)
      {
        WebCore::FragmentedSharedBuffer::operator==(*(_QWORD *)(*(_QWORD *)a2 + 8 * v12), *v9);
        if ((v13 & 1) != 0)
          break;
        ++v12;
        v11 = *(unsigned int *)(a2 + 12);
        if (v12 >= v11)
          goto LABEL_21;
      }
      v14 = 1;
    }
    else
    {
LABEL_22:
      v14 = 0;
    }
    v9 = (uint64_t *)v17;
    if (v19)
    {
      v15 = 8 * v19;
      do
      {
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v9++, v8);
        v15 -= 8;
      }
      while (v15);
      v9 = (uint64_t *)v17;
    }
  }
  else
  {
    v14 = 0;
  }
  if (v9)
  {
    v17 = 0;
    v18 = 0;
    WTF::fastFree((WTF *)v9, v8);
  }
  return v14;
}

void sub_19524D7E4(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WebCore::CDMSessionAVContentKeySession::attachContentKeyToSample(WebCore::CDMSessionAVContentKeySession *this, const WebCore::MediaSampleAVFObjC *a2)
{
  unsigned __int8 *v4;
  void *v6;
  int v7;
  opaqueCMSampleBuffer *v8;
  NSError **v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  AVContentKey v17;

  v4 = (unsigned __int8 *)this + 128;
  if (__ldaxr((unsigned __int8 *)this + 128))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 128);
LABEL_5:
  v6 = (void *)*((_QWORD *)this + 17);
  if (v6)
    CFRetain(*((CFTypeRef *)this + 17));
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v4))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  v8 = (opaqueCMSampleBuffer *)objc_msgSend(v6, "contentKey");
  if (v6)
    CFRelease(v6);
  v17.super.isa = 0;
  (*(void (**)(const char **__return_ptr, const WebCore::MediaSampleAVFObjC *))(*(_QWORD *)a2 + 112))(&v13, a2);
  result = PAL::softLinkAVFoundationAVSampleBufferAttachContentKey((PAL *)v14, v8, &v17, v9);
  if ((result & 1) == 0)
  {
    v11 = *((_QWORD *)this + 10);
    v12 = *((_QWORD *)this + 11);
    v13 = "CDMSessionAVContentKeySession";
    v14 = 30;
    v15 = "attachContentKeyToSample";
    v16 = v12;
    if (*(_BYTE *)(v11 + 12))
      return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52],NSError *>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&v13, "Failed to attach content key with error: %{public}@", (id *)&v17.super.isa);
  }
  return result;
}

void sub_19524D948(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WebCore::CDMSessionAVContentKeySession::removeParser(WebCore::CDMSessionAVContentKeySession *this, AVStreamDataParser *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v7;
  void *v8;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;

  v4 = *((_QWORD *)this + 10);
  v5 = *((_QWORD *)this + 11);
  v10 = "CDMSessionAVContentKeySession";
  v11 = 30;
  v12 = "removeParser";
  v13 = v5;
  if (*(_BYTE *)(v4 + 12))
  {
    if (WebCore::LogEME && byte_1ECE7CE20 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogEME, 3, (WTF::Logger::LogSiteIdentifier *)&v10);
  }
  WebCore::CDMSessionAVContentKeySession::contentKeySession(this);
  v7 = objc_opt_respondsToSelector();
  v8 = (void *)WebCore::CDMSessionAVContentKeySession::contentKeySession(this);
  if ((v7 & 1) != 0)
    return objc_msgSend(v8, "removeContentKeyRecipient:", a2, v10, v11, v12, v13);
  else
    return objc_msgSend(v8, "removeStreamDataParser:", a2, v10, v11, v12, v13);
}

_QWORD *WebCore::CDMSessionAVFoundationObjC::CDMSessionAVFoundationObjC(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[4];

  *a1 = off_1E334D630;
  a1[1] = 0;
  v6 = *(_QWORD *)(a2 + 48);
  if (!v6)
  {
    v8 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_6:
  if (*(_QWORD *)(v6 + 24))
  {
    ++*(_QWORD *)(v6 + 16);
    v8 = v6;
  }
  else
  {
    v8 = 0;
  }
  v9 = __ldxr((unsigned __int8 *)v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_13:
  a1[2] = v8;
  a1[3] = a2;
  v10 = a3[1];
  if (v10)
    goto LABEL_29;
  v10 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v10 = 1;
  *(_QWORD *)(v10 + 8) = a3;
  v12 = (unsigned int *)a3[1];
  a3[1] = v10;
  if (!v12)
    goto LABEL_29;
  do
  {
    v13 = __ldaxr(v12);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v12));
  if (!v14)
  {
    atomic_store(1u, v12);
    WTF::fastFree((WTF *)v12, v11);
  }
  v10 = a3[1];
  if (v10)
  {
LABEL_29:
    do
      v15 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v15 + 1, (unsigned int *)v10));
  }
  a1[4] = v10;
  WTF::createVersion4UUIDString((WTF *)v10);
  a1[6] = 0;
  v16 = (*(uint64_t (**)(_QWORD *))(*a3 + 40))(a3);
  v17 = (unsigned int *)(v16 + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  a1[7] = v16;
  v19 = (*(uint64_t (**)(_QWORD *))(*a3 + 48))(a3);
  a1[8] = v19;
  v20 = a1[7];
  v22[0] = "CDMSessionAVFoundationObjC";
  v22[1] = 27;
  v22[2] = "CDMSessionAVFoundationObjC";
  v22[3] = v19;
  if (*(_BYTE *)(v20 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)v22);
  return a1;
}

void sub_19524DBFC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (!v4)
    goto LABEL_15;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
LABEL_7:
    v6 = *(_QWORD *)(v4 + 16) - 1;
    *(_QWORD *)(v4 + 16) = v6;
    if (v6)
    {
      v13 = __ldxr((unsigned __int8 *)v4);
      if (v13 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v4))
          goto LABEL_15;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_15:
      v9 = *(_QWORD *)(v2 + 8);
      if (v9)
      {
        *(_QWORD *)(v9 + 8) = 0;
        v10 = *(unsigned int **)(v2 + 8);
        *(_QWORD *)(v2 + 8) = 0;
        if (v10)
        {
          do
          {
            v11 = __ldaxr(v10);
            v12 = v11 - 1;
          }
          while (__stlxr(v12, v10));
          if (!v12)
          {
            atomic_store(1u, v10);
            WTF::fastFree((WTF *)v10, a2);
          }
        }
      }
      else
      {
        *(_QWORD *)(v2 + 8) = 0;
      }
      _Unwind_Resume(exception_object);
    }
    v7 = *(_QWORD *)(v4 + 8);
    v8 = __ldxr((unsigned __int8 *)v4);
    if (v8 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_13:
        if (!v7)
          WTF::fastFree((WTF *)v4, a2);
        goto LABEL_15;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v4);
  goto LABEL_7;
}

void WebCore::CDMSessionAVFoundationObjC::~CDMSessionAVFoundationObjC(WebCore::CDMSessionAVFoundationObjC *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  const void *v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  _QWORD v23[4];

  v3 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)this + 8);
  v23[0] = "CDMSessionAVFoundationObjC";
  v23[1] = 27;
  v23[2] = "~CDMSessionAVFoundationObjC";
  v23[3] = v4;
  if (*(_BYTE *)(v3 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)v23);
    v3 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (!v3)
      goto LABEL_9;
  }
  else
  {
    *((_QWORD *)this + 7) = 0;
  }
  v5 = (unsigned int *)(v3 + 8);
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, (unsigned int *)(v3 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
LABEL_9:
  v8 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
    CFRelease(v8);
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  v13 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
  {
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_23;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_23:
    v15 = *(_QWORD *)(v13 + 16) - 1;
    *(_QWORD *)(v13 + 16) = v15;
    if (!v15)
    {
      v16 = *(_QWORD *)(v13 + 8);
      v17 = __ldxr((unsigned __int8 *)v13);
      if (v17 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v13))
        {
          if (v16)
            goto LABEL_31;
LABEL_30:
          WTF::fastFree((WTF *)v13, a2);
          goto LABEL_31;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v13);
      if (v16)
        goto LABEL_31;
      goto LABEL_30;
    }
    v22 = __ldxr((unsigned __int8 *)v13);
    if (v22 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
        goto LABEL_31;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
  }
LABEL_31:
  v18 = *((_QWORD *)this + 1);
  if (v18)
  {
    *(_QWORD *)(v18 + 8) = 0;
    v19 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::CDMSessionAVFoundationObjC::~CDMSessionAVFoundationObjC(this, a2);
  WTF::fastFree(v2, v3);
}

void sub_19524DFA8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  _QWORD *v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  const void *v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;

  v4 = (unsigned int *)v2[7];
  v2[7] = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (const void *)v2[6];
  v2[6] = 0;
  if (v8)
    CFRelease(v8);
  v9 = (WTF::StringImpl *)v2[5];
  v2[5] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (unsigned int *)v2[4];
  v2[4] = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  v13 = v2[2];
  v2[2] = 0;
  if (!v13)
    goto LABEL_29;
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v13);
LABEL_21:
  v15 = *(_QWORD *)(v13 + 16) - 1;
  *(_QWORD *)(v13 + 16) = v15;
  if (!v15)
  {
    v16 = *(_QWORD *)(v13 + 8);
    v17 = __ldxr((unsigned __int8 *)v13);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
LABEL_27:
        if (!v16)
          WTF::fastFree((WTF *)v13, a2);
        goto LABEL_29;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    goto LABEL_27;
  }
  v22 = __ldxr((unsigned __int8 *)v13);
  if (v22 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v13))
      goto LABEL_29;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_29:
  v18 = v2[1];
  if (v18)
  {
    *(_QWORD *)(v18 + 8) = 0;
    v19 = (unsigned int *)v2[1];
    v2[1] = 0;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, a2);
      }
    }
  }
  else
  {
    v2[1] = 0;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::CDMSessionAVFoundationObjC::generateKeyRequest@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, WTF::StringImpl **a3@<X3>, _WORD *a4@<X4>, _DWORD *a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v7;
  uint64_t v9;
  unsigned __int8 **v13;
  int v15;
  WTF::StringImpl *v16;
  const WTF::StringImpl *v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  __CFString *v23;
  const void *v24;
  const void *v25;
  void *v26;
  NSError *v27;
  void *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  JSC::ArrayBufferView *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  BOOL v47;
  int v48;
  BOOL v49;
  int v50;
  unsigned int v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  NSObject *v56;
  uint64_t v57;
  char *v58;
  unsigned __int8 *v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  WTF::Logger *v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  WTF::Logger *v71;
  uint64_t v72;
  WTF::StringImpl **v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  int v78;
  WTF::StringImpl *v79;
  const char **v80;
  const void *v81;
  uint64_t v82;
  uint64_t v83[4];
  WebCore *v84;
  JSC::ArrayBufferView *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::Logger *v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  __int128 buf;
  const char *v95;
  WTF::StringImpl *v96;
  int v97;
  _QWORD v98[3];

  v7 = result;
  v98[1] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(result + 16);
  if (!v9)
    goto LABEL_31;
  v13 = *(unsigned __int8 ***)(result + 24);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v9);
LABEL_6:
  if (*(_QWORD *)(v9 + 24))
    ++*(_QWORD *)(v9 + 8);
  else
    v13 = 0;
  v15 = __ldxr((unsigned __int8 *)v9);
  if (v15 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v9))
    {
      if (v13)
        goto LABEL_12;
      goto LABEL_31;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v9);
  if (v13)
  {
LABEL_12:
    v86 = 0;
    v87 = 0;
    v85 = 0;
    if (WebCore::MediaPlayerPrivateAVFoundation::extractKeyURIKeyIDAndCertificateFromInitData(a2, (JSC::ArrayBufferView *)&v87, &v86, (uint64_t *)&v85))
    {
      WebCore::MediaPlayerPrivateAVFoundationObjC::takeRequestForKeyURI((WebCore::MediaPlayerPrivateAVFoundationObjC *)v13, &v87, v17, &buf);
      v18 = buf;
      v19 = *(const void **)(v7 + 48);
      *(_QWORD *)(v7 + 48) = buf;
      if (v19)
      {
        CFRelease(v19);
        v18 = *(_QWORD *)(v7 + 48);
      }
      if (v18)
      {
        v20 = JSC::ArrayBufferView::span(v85);
        v22 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v20, v21);
        if (v86)
          v23 = (__CFString *)WTF::StringImpl::operator NSString *();
        else
          v23 = &stru_1E3487BC0;
        v24 = (const void *)objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", -[__CFString cStringUsingEncoding:](v23, "cStringUsingEncoding:", 4), -[__CFString lengthOfBytesUsingEncoding:](v23, "lengthOfBytesUsingEncoding:", 4));
        v25 = v24;
        if (v24)
          CFRetain(v24);
        v84 = 0;
        v26 = (void *)objc_msgSend(*(id *)(v7 + 48), "streamingContentKeyRequestDataForApp:contentIdentifier:options:error:", v22, v25, 0, &v84);
        v28 = v26;
        if (v26)
        {
          CFRetain(v26);
          *a4 = 0;
          *a5 = 0;
          v30 = *a3;
          *a3 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v29);
            else
              *(_DWORD *)v30 -= 2;
          }
          v31 = *(_QWORD *)(v7 + 56);
          v32 = *(WTF::StringImpl **)(v7 + 64);
          *(_QWORD *)&buf = "CDMSessionAVFoundationObjC";
          *((_QWORD *)&buf + 1) = 27;
          v95 = "generateKeyRequest";
          v96 = v32;
          if (*(_BYTE *)(v31 + 12))
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
          objc_msgSend(v28, "bytes");
          objc_msgSend(v28, "length");
          JSC::ArrayBuffer::create();
          JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::create(v83, (uint64_t *)&buf);
          *a6 = buf;
          *(_QWORD *)&buf = 0;
          WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(v83);
          CFRelease(v28);
          if (!v25)
          {
LABEL_27:
            if (!v22)
            {
LABEL_39:
              v39 = v85;
              v85 = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 1)
                  JSC::ArrayBufferView::operator delete();
                else
                  --*(_DWORD *)v39;
              }
              v40 = v86;
              v86 = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, v16);
                else
                  *(_DWORD *)v40 -= 2;
              }
              v41 = v87;
              v87 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, v16);
                else
                  *(_DWORD *)v41 -= 2;
              }
              return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(v13[6]);
            }
LABEL_28:
            CFRelease(v22);
            goto LABEL_39;
          }
LABEL_138:
          CFRelease(v25);
          if (!v22)
            goto LABEL_39;
          goto LABEL_28;
        }
        v42 = *(_QWORD *)(v7 + 56);
        v43 = *(_QWORD *)(v7 + 64);
        v83[0] = (uint64_t)"CDMSessionAVFoundationObjC";
        v83[1] = 27;
        v83[2] = (uint64_t)"generateKeyRequest";
        v83[3] = v43;
        if (!*(_BYTE *)(v42 + 12))
        {
LABEL_137:
          *a4 = 6;
          *a5 = WebCore::mediaKeyErrorSystemCode(v84, v27);
          *a6 = 0;
          if (!v25)
            goto LABEL_27;
          goto LABEL_138;
        }
        v81 = v22;
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v83);
        WTF::String::String((WTF::String *)&v91, "failed to generate key request with error: ");
        result = MEMORY[0x19AEA5508](&v90, -[WebCore localizedDescription](v84, "localizedDescription"));
        if (v92)
        {
          v44 = *((_DWORD *)v92 + 1);
          if (v91)
            goto LABEL_53;
        }
        else
        {
          v44 = 0;
          if (v91)
          {
LABEL_53:
            v45 = *((_DWORD *)v91 + 1);
            if (v90)
            {
LABEL_54:
              v46 = *((_DWORD *)v90 + 1);
LABEL_55:
              if ((v46 | v45) < 0)
                goto LABEL_152;
              v47 = __OFADD__(v45, v46);
              v48 = v45 + v46;
              v49 = v47;
              if (v44 < 0)
                goto LABEL_152;
              if (v49)
                goto LABEL_152;
              result = (v44 + v48);
              if (__OFADD__(v44, v48))
                goto LABEL_152;
              if (v92 && (*((_BYTE *)v92 + 16) & 4) == 0)
              {
                v50 = 0;
                goto LABEL_72;
              }
              if (v91)
              {
                v51 = *((_DWORD *)v91 + 4);
                v50 = (v51 >> 2) & 1;
                if (v90 && (v51 & 4) != 0)
                  goto LABEL_71;
              }
              else
              {
                if (v90)
                {
LABEL_71:
                  v50 = (*((unsigned __int8 *)v90 + 16) >> 2) & 1;
                  goto LABEL_72;
                }
                v50 = 1;
              }
LABEL_72:
              result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v50, v92, (uint64_t)v91, (uint64_t)v90, &buf);
              v93 = (WTF::StringImpl *)buf;
              if ((_QWORD)buf)
              {
                v53 = v90;
                v90 = 0;
                if (v53)
                {
                  if (*(_DWORD *)v53 == 2)
                    WTF::StringImpl::destroy(v53, v52);
                  else
                    *(_DWORD *)v53 -= 2;
                }
                v54 = v91;
                v91 = 0;
                if (v54)
                {
                  if (*(_DWORD *)v54 == 2)
                    WTF::StringImpl::destroy(v54, v52);
                  else
                    *(_DWORD *)v54 -= 2;
                }
                v55 = v92;
                v92 = 0;
                if (v55)
                {
                  if (*(_DWORD *)v55 == 2)
                    WTF::StringImpl::destroy(v55, v52);
                  else
                    *(_DWORD *)v55 -= 2;
                }
                v56 = qword_1ECE7CE30;
                v57 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v57)
                {
                  WTF::String::utf8();
                  v58 = v88 ? (char *)v88 + 16 : 0;
                  LODWORD(buf) = 136446210;
                  *(_QWORD *)((char *)&buf + 4) = v58;
                  _os_log_impl(&dword_1940B8000, v56, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                  v57 = (uint64_t)v88;
                  v88 = 0;
                  if (v57)
                  {
                    if (*(_DWORD *)v57 == 1)
                      v57 = WTF::fastFree((WTF *)v57, v27);
                    else
                      --*(_DWORD *)v57;
                  }
                }
                if (WebCore::LogEME && byte_1ECE7CE20)
                {
                  v59 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                  while (1)
                  {
                    v60 = *v59;
                    if ((v60 & 1) != 0)
                      break;
                    v61 = __ldaxr(v59);
                    if (v61 == v60)
                    {
                      if (!__stxr(v60 | 1, v59))
                      {
                        v62 = WTF::Logger::observers((WTF::Logger *)v57);
                        v63 = *(unsigned int *)(v62 + 12);
                        if ((_DWORD)v63)
                        {
                          v64 = *(uint64_t **)v62;
                          v80 = &v95;
                          v82 = *(_QWORD *)v62 + 8 * v63;
                          do
                          {
                            v65 = *v64;
                            LODWORD(buf) = 0;
                            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v83);
                            LODWORD(v95) = 0;
                            WTF::String::String((WTF::String *)&v96, "failed to generate key request with error: ");
                            v97 = 0;
                            MEMORY[0x19AEA5508](v98, -[WebCore localizedDescription](v84, "localizedDescription", v80));
                            v88 = 0;
                            v89 = 0;
                            v66 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                            LODWORD(v89) = 3;
                            v88 = v66;
                            v67 = HIDWORD(v89);
                            *((_DWORD *)v66 + 4 * HIDWORD(v89)) = buf;
                            v68 = *((_QWORD *)&buf + 1);
                            if (*((_QWORD *)&buf + 1))
                              **((_DWORD **)&buf + 1) += 2;
                            *((_QWORD *)v66 + 2 * v67 + 1) = v68;
                            *((_DWORD *)v66 + 4 * (v67 + 1)) = (_DWORD)v95;
                            v69 = v96;
                            if (v96)
                              *(_DWORD *)v96 += 2;
                            *((_QWORD *)v66 + 2 * (v67 + 1) + 1) = v69;
                            *((_DWORD *)v66 + 4 * (v67 + 2)) = v97;
                            v70 = v98[0];
                            if (v98[0])
                              *(_DWORD *)v98[0] += 2;
                            *((_QWORD *)v66 + 2 * (v67 + 2) + 1) = v70;
                            HIDWORD(v89) = v67 + 3;
                            (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v65 + 16))(v65, &WebCore::LogEME, 1, &v88);
                            v71 = v88;
                            if (HIDWORD(v89))
                            {
                              v72 = 16 * HIDWORD(v89);
                              v73 = (WTF::StringImpl **)((char *)v88 + 8);
                              do
                              {
                                v74 = *v73;
                                *v73 = 0;
                                if (v74)
                                {
                                  if (*(_DWORD *)v74 == 2)
                                    WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v27);
                                  else
                                    *(_DWORD *)v74 -= 2;
                                }
                                v73 += 2;
                                v72 -= 16;
                              }
                              while (v72);
                              v71 = v88;
                            }
                            if (v71)
                            {
                              v88 = 0;
                              LODWORD(v89) = 0;
                              WTF::fastFree(v71, v27);
                            }
                            v75 = (WTF::StringImpl *)v98[0];
                            v98[0] = 0;
                            if (v75)
                            {
                              if (*(_DWORD *)v75 == 2)
                                WTF::StringImpl::destroy(v75, (WTF::StringImpl *)v27);
                              else
                                *(_DWORD *)v75 -= 2;
                            }
                            v76 = v96;
                            v96 = 0;
                            if (v76)
                            {
                              if (*(_DWORD *)v76 == 2)
                                WTF::StringImpl::destroy(v76, (WTF::StringImpl *)v27);
                              else
                                *(_DWORD *)v76 -= 2;
                            }
                            v77 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                            *((_QWORD *)&buf + 1) = 0;
                            if (v77)
                            {
                              if (*(_DWORD *)v77 == 2)
                                WTF::StringImpl::destroy(v77, (WTF::StringImpl *)v27);
                              else
                                *(_DWORD *)v77 -= 2;
                            }
                            ++v64;
                          }
                          while (v64 != (uint64_t *)v82);
                        }
                        v78 = __ldxr(v59);
                        if (v78 == 1)
                        {
                          if (!__stlxr(0, v59))
                            break;
                        }
                        else
                        {
                          __clrex();
                        }
                        WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                        break;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                  }
                }
                v79 = v93;
                v93 = 0;
                v22 = v81;
                if (v79)
                {
                  if (*(_DWORD *)v79 == 2)
                    WTF::StringImpl::destroy(v79, (WTF::StringImpl *)v27);
                  else
                    *(_DWORD *)v79 -= 2;
                }
                goto LABEL_137;
              }
LABEL_152:
              __break(0xC471u);
              return result;
            }
LABEL_148:
            v46 = 0;
            goto LABEL_55;
          }
        }
        v45 = 0;
        if (v90)
          goto LABEL_54;
        goto LABEL_148;
      }
      v37 = *(_QWORD *)(v7 + 56);
      v38 = *(WTF::StringImpl **)(v7 + 64);
      *(_QWORD *)&buf = "CDMSessionAVFoundationObjC";
      *((_QWORD *)&buf + 1) = 27;
      v95 = "generateKeyRequest";
      v96 = v38;
      if (*(_BYTE *)(v37 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [42]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, "error: could not find request for key URI");
    }
    else
    {
      v35 = *(_QWORD *)(v7 + 56);
      v36 = *(WTF::StringImpl **)(v7 + 64);
      *(_QWORD *)&buf = "CDMSessionAVFoundationObjC";
      *((_QWORD *)&buf + 1) = 27;
      v95 = "generateKeyRequest";
      v96 = v36;
      if (*(_BYTE *)(v35 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [34]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, "error: could not extract key info");
    }
    *a4 = 1;
    *a6 = 0;
    goto LABEL_39;
  }
LABEL_31:
  v33 = *(_QWORD *)(v7 + 56);
  v34 = *(WTF::StringImpl **)(v7 + 64);
  *(_QWORD *)&buf = "CDMSessionAVFoundationObjC";
  *((_QWORD *)&buf + 1) = 27;
  v95 = "generateKeyRequest";
  v96 = v34;
  if (*(_BYTE *)(v33 + 12))
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, "error: !parent");
  *a4 = 1;
  *a6 = 0;
  return result;
}

void sub_19524EA60(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef cf, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _DWORD *a20,WTF::StringImpl *a21,WTF::StringImpl *a22,WTF *a23,int a24,int a25,WTF::StringImpl *a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29)
{
  uint64_t v29;
  unsigned __int8 *v30;
  int v32;

  v32 = __ldxr(v30);
  if (v32 == 1)
  {
    if (!__stlxr(0, v30))
    {
LABEL_6:
      if (a29)
      {
        if (*(_DWORD *)a29 == 2)
          WTF::StringImpl::destroy(a29, a2);
        else
          *(_DWORD *)a29 -= 2;
      }
      if (a10)
        CFRelease(a10);
      if (cf)
        CFRelease(cf);
      if (a20)
      {
        if (*a20 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*a20;
      }
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      if (a22)
      {
        if (*(_DWORD *)a22 == 2)
          WTF::StringImpl::destroy(a22, a2);
        else
          *(_DWORD *)a22 -= 2;
      }
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v29 + 48));
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::create@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  WTF *v11;
  _QWORD *v12;

  v4 = WTF::fastMalloc((WTF *)0x28);
  v5 = (_QWORD *)*a1;
  *a1 = 0;
  v12 = v5;
  result = JSC::ArrayBufferView::ArrayBufferView();
  *a2 = v4;
  if (v12)
  {
    v7 = *(_DWORD *)v12 == 2;
    *(_DWORD *)v12 -= 2;
    if (v7)
    {
      v8 = v12[10];
      if (v8)
      {
        *(_QWORD *)(v8 + 8) = 3;
        v12[10] = 0;
      }
      if ((v12[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v12 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v12 + 2));
      v10 = (WTF *)v12[1];
      if ((v10 & 1) == 0 && v10)
      {
        v11 = *(WTF **)v10;
        if (*(_QWORD *)v10)
        {
          *(_QWORD *)v10 = 0;
          *((_DWORD *)v10 + 2) = 0;
          WTF::fastFree(v11, v9);
        }
        WTF::fastFree(v10, v9);
      }
      return WTF::fastFree((WTF *)v12, v9);
    }
  }
  return result;
}

void sub_19524EE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  void *v10;
  BOOL v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  WTF *v16;

  if (a10)
  {
    v12 = *(_DWORD *)a10 == 2;
    *(_DWORD *)a10 -= 2;
    if (v12)
    {
      v13 = a10[10];
      if (v13)
      {
        *(_QWORD *)(v13 + 8) = 3;
        a10[10] = 0;
      }
      if ((a10[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(a10 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(a10 + 2));
      v15 = (WTF *)a10[1];
      if ((v15 & 1) == 0 && v15)
      {
        v16 = *(WTF **)v15;
        if (*(_QWORD *)v15)
        {
          *(_QWORD *)v15 = 0;
          *((_DWORD *)v15 + 2) = 0;
          WTF::fastFree(v16, v14);
        }
        WTF::fastFree(v15, v14);
      }
      WTF::fastFree((WTF *)a10, v14);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t WebCore::CDMSessionAVFoundationObjC::update(uint64_t a1, JSC::ArrayBufferView *this, _DWORD **a3, _WORD *a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  v9 = JSC::ArrayBufferView::span(this);
  v11 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v9, v10);
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 48), "dataRequest"), "respondWithData:", v11);
  objc_msgSend(*(id *)(a1 + 48), "finishLoading");
  *a4 = 0;
  *a5 = 0;
  v12 = *a3;
  *a3 = 0;
  if (v12)
  {
    if (*v12 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v12;
  }
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  v16[0] = "CDMSessionAVFoundationObjC";
  v16[1] = 27;
  v16[2] = "update";
  v16[3] = v14;
  if (*(_BYTE *)(v13 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)v16);
  if (v11)
    CFRelease(v11);
  return 1;
}

void sub_19524F008(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::CDMSessionAVFoundationObjC::cachedKeyForKeyID(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::CDMSessionMediaSourceAVFObjC::videoRendererDidReceiveError(uint64_t result, NSError *a2, WebCore *this, char *a4)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  char v8;

  v4 = *(_QWORD *)(result + 32);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v6 = result;
    result = WebCore::mediaKeyErrorSystemCode(this, a2);
    if (*(_BYTE *)(v6 + 72))
      v7 = result == 12785;
    else
      v7 = 0;
    v8 = v7;
    *a4 = v8;
    if (!v7)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8), 6, result);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::CDMSessionMediaSourceAVFObjC::videoRendererDidReceiveError(uint64_t result, NSError *a2, WebCore *this, char *a4)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  char v8;

  v4 = *(_QWORD *)(result + 24);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v6 = result;
    result = WebCore::mediaKeyErrorSystemCode(this, a2);
    if (*(_BYTE *)(v6 + 64))
      v7 = result == 12785;
    else
      v7 = 0;
    v8 = v7;
    *a4 = v8;
    if (!v7)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 24) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8), 6, result);
  }
  return result;
}

uint64_t WebCore::CDMSessionMediaSourceAVFObjC::audioRendererDidReceiveError(uint64_t this, NSError *a2, NSError *a3, BOOL *a4)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  BOOL v8;

  v4 = *(_QWORD *)(this + 32);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v6 = this;
    this = WebCore::mediaKeyErrorSystemCode((WebCore *)a3, a2);
    if (*(_BYTE *)(v6 + 72))
      v7 = this == 12785;
    else
      v7 = 0;
    v8 = v7;
    *a4 = v8;
    if (!v7)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8), 6, this);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::CDMSessionMediaSourceAVFObjC::audioRendererDidReceiveError(uint64_t this, NSError *a2, NSError *a3, BOOL *a4)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  BOOL v8;

  v4 = *(_QWORD *)(this + 24);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v6 = this;
    this = WebCore::mediaKeyErrorSystemCode((WebCore *)a3, a2);
    if (*(_BYTE *)(v6 + 64))
      v7 = this == 12785;
    else
      v7 = 0;
    v8 = v7;
    *a4 = v8;
    if (!v7)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 24) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8), 6, this);
  }
  return this;
}

char *WebCore::CDMSessionMediaSourceAVFObjC::addSourceBuffer(WebCore::CDMSessionMediaSourceAVFObjC *this, WebCore::SourceBufferPrivateAVFObjC *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  char *result;
  uint64_t v12;
  WebCore::SourceBufferPrivateAVFObjC *v13;
  char *v14;

  v13 = a2;
  (*(void (**)(WebCore::CDMSessionMediaSourceAVFObjC *, _QWORD))(*(_QWORD *)this + 64))(this, *((_QWORD *)a2 + 102));
  v4 = (uint64_t *)((char *)this + 40);
  v5 = *((unsigned int *)this + 13);
  if ((_DWORD)v5 == *((_DWORD *)this + 12))
  {
    WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::AXCoreObject*>((uint64_t)v4, (uint64_t *)&v13);
    goto LABEL_13;
  }
  v6 = *v4;
  v7 = *((_QWORD *)a2 + 1);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_7:
  ++*(_QWORD *)(v7 + 8);
  v9 = __ldxr((unsigned __int8 *)v7);
  if (v9 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_12:
  *(_QWORD *)(v6 + 8 * v5) = a2;
  ++*((_DWORD *)this + 13);
LABEL_13:
  v10 = (uint64_t)v13;
  v14 = (char *)this + 8;
  result = (char *)v13 + 408;
  v12 = *((unsigned int *)v13 + 105);
  if ((_DWORD)v12 == *((_DWORD *)v13 + 104))
  {
    result = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v12 + 1, (unint64_t)&v14);
    v12 = *(unsigned int *)(v10 + 420);
    *(_QWORD *)(*(_QWORD *)(v10 + 408) + 8 * v12) = *(_QWORD *)result;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v12) = (char *)this + 8;
  }
  *(_DWORD *)(v10 + 420) = v12 + 1;
  return result;
}

WebAVContentKeyGroup *WebCore::ContentKeyGroupFactoryAVFObjC::createContentKeyGroup@<X0>(char a1@<W0>, void *a2@<X1>, uint64_t a3@<X2>, WebAVContentKeyGroup **a4@<X8>)
{
  WebAVContentKeyGroup *result;

  if ((a1 & 1) != 0)
  {
    result = -[WebAVContentKeyGroup initWithContentKeySession:dataSource:]([WebAVContentKeyGroup alloc], "initWithContentKeySession:dataSource:", a2, a3);
    *a4 = result;
  }
  else
  {
    result = (WebAVContentKeyGroup *)objc_msgSend(a2, "makeContentKeyGroup");
    *a4 = result;
    if (result)
      return (WebAVContentKeyGroup *)CFRetain(result);
  }
  return result;
}

void sub_19524F48C(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void sub_19524F568(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void sub_19524FAE4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ImageDecoderAVFObjC::uti@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 24);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

void sub_19524FBE0(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void WebCore::ImageDecoderAVFObjC::create(const WTF::String *a1@<X0>, const WTF::StringImpl **a2@<X1>, const WTF::MachSendRight *a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _BYTE v12[4];

  {
    qword_1ECE88A28 = 0;
    qword_1ECE88A30 = 0;
    unk_1ECE88A18 = 0u;
    *(__int128 *)((char *)&xmmword_1ECE88A00 + 8) = 0u;
    *(_OWORD *)&qword_1ECE889F8 = 0u;
    WebCore::AVAssetMIMETypeCache::singleton(void)::cache = (uint64_t)off_1E334D010;
  }
  if (PAL::AVFoundationLibrary((PAL *)1))
  {
    {
      if (WebCore::canLoad_VideoToolbox_VTCreateCGImageFromCVPixelBuffer(void)::loaded)
      {
LABEL_6:
        v8 = WTF::fastMalloc((WTF *)0xA8);
        WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v12, a3);
        WebCore::ImageDecoderAVFObjC::ImageDecoderAVFObjC(v8, a1, a2, v9, v10, (const WTF::MachSendRight *)v12);
        *a4 = v8;
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v12);
        return;
      }
    }
    else
    {
      v11 = (void *)WebCore::VideoToolboxLibrary(0);
      WebCore::softLinkVideoToolboxVTCreateCGImageFromCVPixelBuffer = (uint64_t (*)(_QWORD, _QWORD, _QWORD))dlsym(v11, "VTCreateCGImageFromCVPixelBuffer");
      WebCore::canLoad_VideoToolbox_VTCreateCGImageFromCVPixelBuffer(void)::loaded = WebCore::softLinkVideoToolboxVTCreateCGImageFromCVPixelBuffer != 0;
      if (WebCore::softLinkVideoToolboxVTCreateCGImageFromCVPixelBuffer)
        goto LABEL_6;
    }
  }
  *a4 = 0;
}

void sub_195250030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  WTF *v11;
  void *v13;

  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a11);
  WTF::fastFree(v11, v13);
  _Unwind_Resume(a1);
}

uint64_t WebCore::ImageDecoderAVFObjC::ImageDecoderAVFObjC(uint64_t a1, const WTF::String *a2, const WTF::StringImpl **this, uint64_t a4, uint64_t a5, const WTF::MachSendRight *a6)
{
  unsigned int *v9;
  const WTF::StringImpl *v10;
  PAL *v11;
  PAL *v12;
  PAL *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  CFTypeRef v18;
  void *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  const void *v29;
  _QWORD v30[4];
  unsigned int *v31;
  WebCore::SharedBuffer *v32[2];
  CFTypeRef cf[3];

  cf[2] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 8) = 1;
  v9 = (unsigned int *)(a1 + 8);
  *(_QWORD *)a1 = off_1E334D730;
  v10 = *this;
  if (*this)
    *(_DWORD *)v10 += 2;
  *(_QWORD *)(a1 + 16) = v10;
  v11 = (PAL *)WebCore::UTIFromMIMEType(this, a2, (const WTF::StringImpl *)this, a1 + 24);
  v12 = (PAL *)objc_alloc((Class)PAL::getAVURLAssetClass[0](v11));
  v13 = v12;
  if (_MergedGlobals_123 == 1)
  {
    v14 = qword_1ECE818F8;
  }
  else
  {
    v12 = (PAL *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initWithString:", CFSTR("custom-imagedecoderavfobjc://resource"));
    v14 = (uint64_t)v12;
    qword_1ECE818F8 = (uint64_t)v12;
    _MergedGlobals_123 = 1;
  }
  if ((byte_1ECE818F1 & 1) == 0)
  {
    v32[0] = (WebCore::SharedBuffer *)PAL::get_AVFoundation_AVURLAssetReferenceRestrictionsKey(v12);
    cf[0] = &unk_1E349D7B0;
    v32[1] = (WebCore::SharedBuffer *)PAL::get_AVFoundation_AVURLAssetUsesNoPersistentCacheKey(v32[0]);
    cf[1] = (CFTypeRef)MEMORY[0x1E0C9AAB0];
    v29 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", cf, v32, 2);
    qword_1ECE81900 = (uint64_t)v29;
    if (v29)
      CFRetain(v29);
    byte_1ECE818F1 = 1;
  }
  *(_QWORD *)(a1 + 32) = -[PAL initWithURL:options:](v13, "initWithURL:options:", v14, qword_1ECE81900);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = -[WebCoreSharedBufferResourceLoaderDelegate initWithParent:]([WebCoreSharedBufferResourceLoaderDelegate alloc], "initWithParent:", a1);
  *(_QWORD *)(a1 + 56) = 0;
  v15 = WTF::fastMalloc((WTF *)0x110);
  WebCore::WebCoreDecompressionSession::WebCoreDecompressionSession(v15, 1);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 64) = v15;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_BYTE *)(a1 + 148) = 0;
  *(_BYTE *)(a1 + 156) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 144) = 0;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(a1 + 160), a6);
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)cf, (const WTF::MachSendRight *)(a1 + 160));
  WTF::MachSendRight::operator=();
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)cf);
  v16 = *(void **)(a1 + 48);
  WebCore::FragmentedSharedBuffer::makeContiguous(a2, v32);
  WebCore::SharedBuffer::createNSData(v32[0], (WebCoreSharedBufferData **)cf);
  objc_msgSend(v16, "updateData:complete:", cf[0], 0);
  v18 = cf[0];
  cf[0] = 0;
  if (v18)
    CFRelease(v18);
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)v32, v17);
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "resourceLoader"), "setDelegate:queue:", *(_QWORD *)(a1 + 48), dispatch_get_global_queue(0, 0));
  v19 = *(void **)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3321888768;
  v30[2] = ___ZN7WebCore19ImageDecoderAVFObjCC2ERKNS_22FragmentedSharedBufferERKN3WTF6StringENS_11AlphaOptionENS_26GammaAndColorProfileOptionENS_15ProcessIdentityE_block_invoke;
  v30[3] = &__block_descriptor_40_e8_32c159_ZTSKZN7WebCore19ImageDecoderAVFObjCC1ERKNS_22FragmentedSharedBufferERKN3WTF6StringENS_11AlphaOptionENS_26GammaAndColorProfileOptionENS_15ProcessIdentityEE3__0_e5_v8__0l;
  do
    v20 = __ldaxr(v9);
  while (__stlxr(v20 + 1, v9));
  do
    v21 = __ldaxr(v9);
  while (__stlxr(v21 + 1, v9));
  v31 = (unsigned int *)a1;
  objc_msgSend(v19, "loadValuesAsynchronouslyForKeys:completionHandler:", &unk_1E349D600, v30);
  do
  {
    v22 = __ldaxr(v9);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v9));
  if (!v23)
  {
    atomic_store(1u, (unsigned int *)(a1 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  }
  v24 = v31;
  v31 = 0;
  if (v24)
  {
    v25 = v24 + 2;
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v24 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
    }
  }
  return a1;
}

void sub_1952503DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13, char a14, uint64_t a15, CFTypeRef cf)
{
  uint64_t v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  uint64_t v19;
  WTF::MachSendRight *v20;
  unsigned int *v21;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  void *v28;
  uint64_t v29;
  void *v30;
  WTF *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;

  if (a13)
  {
    v23 = a13 + 2;
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, a13 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
    }
  }
  do
  {
    v26 = __ldaxr(v21);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v21));
  if (!v27)
  {
    atomic_store(1u, (unsigned int *)(v16 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  WTF::MachSendRight::~MachSendRight(v20);
  std::__tree<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<WTF::MediaTime,std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<WTF::MediaTime>,true>,WTF::FastAllocator<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy(v19, *(WTF **)(v16 + 112));
  std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy(v18, *(WTF **)(v16 + 88));
  v29 = *(_QWORD *)(v16 + 72);
  *(_QWORD *)(v16 + 72) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  WTF::Ref<WebCore::WebCoreDecompressionSession,WTF::RawPtrTraits<WebCore::WebCoreDecompressionSession>,WTF::DefaultRefDerefTraits<WebCore::WebCoreDecompressionSession>>::~Ref((unsigned __int8 ***)(v16 + 64), v28);
  v31 = *(WTF **)(v16 + 56);
  *(_QWORD *)(v16 + 56) = 0;
  if (v31)
  {
    v32 = (const void *)*((_QWORD *)v31 + 12);
    *((_QWORD *)v31 + 12) = 0;
    if (v32)
      CFRelease(v32);
    v33 = (const void *)*((_QWORD *)v31 + 11);
    *((_QWORD *)v31 + 11) = 0;
    if (v33)
      CFRelease(v33);
    WTF::fastFree(v31, v30);
  }
  v34 = *(const void **)(v16 + 48);
  *(_QWORD *)(v16 + 48) = 0;
  if (v34)
    CFRelease(v34);
  v35 = *(const void **)(v16 + 40);
  *(_QWORD *)(v16 + 40) = 0;
  if (v35)
    CFRelease(v35);
  v36 = *(const void **)(v16 + 32);
  *(_QWORD *)(v16 + 32) = 0;
  if (v36)
    CFRelease(v36);
  v37 = *v17;
  *v17 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v30);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = *(WTF::StringImpl **)(v16 + 16);
  *(_QWORD *)(v16 + 16) = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v30);
    else
      *(_DWORD *)v38 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN7WebCore19ImageDecoderAVFObjCC2ERKNS_22FragmentedSharedBufferERKN3WTF6StringENS_11AlphaOptionENS_26GammaAndColorProfileOptionENS_15ProcessIdentityE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = &off_1E334DB28;
  v2[1] = v1;
  v4 = v2;
  WTF::callOnMainThread();
  result = (uint64_t)v4;
  if (v4)
    return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

void sub_195250614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c159_ZTSKZN7WebCore19ImageDecoderAVFObjCC1ERKNS_22FragmentedSharedBufferERKN3WTF6StringENS_11AlphaOptionENS_26GammaAndColorProfileOptionENS_15ProcessIdentityEE3__0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(a2 + 32);
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *(_QWORD *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c159_ZTSKZN7WebCore19ImageDecoderAVFObjCC1ERKNS_22FragmentedSharedBufferERKN3WTF6StringENS_11AlphaOptionENS_26GammaAndColorProfileOptionENS_15ProcessIdentityEE3__0(uint64_t a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void WebCore::ImageDecoderAVFObjC::~ImageDecoderAVFObjC(WebCore::ImageDecoderAVFObjC *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  WTF *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  *(_QWORD *)this = off_1E334D730;
  WTF::MachSendRight::~MachSendRight((WebCore::ImageDecoderAVFObjC *)((char *)this + 160));
  std::__tree<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<WTF::MediaTime,std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<WTF::MediaTime>,true>,WTF::FastAllocator<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy((uint64_t)this + 104, *((WTF **)this + 14));
  std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy((uint64_t)this + 80, *((WTF **)this + 11));
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Ref<WebCore::WebCoreDecompressionSession,WTF::RawPtrTraits<WebCore::WebCoreDecompressionSession>,WTF::DefaultRefDerefTraits<WebCore::WebCoreDecompressionSession>>::~Ref((unsigned __int8 ***)this + 8, v2);
  v5 = (WTF *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
  {
    v6 = (const void *)*((_QWORD *)v5 + 12);
    *((_QWORD *)v5 + 12) = 0;
    if (v6)
      CFRelease(v6);
    v7 = (const void *)*((_QWORD *)v5 + 11);
    *((_QWORD *)v5 + 11) = 0;
    if (v7)
      CFRelease(v7);
    WTF::fastFree(v5, v4);
  }
  v8 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
    CFRelease(v8);
  v9 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
    CFRelease(v9);
  v10 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
    CFRelease(v10);
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)v12 -= 2;
  }
}

{
  WTF *v1;
  void *v2;

  WebCore::ImageDecoderAVFObjC::~ImageDecoderAVFObjC(this);
  WTF::fastFree(v1, v2);
}

BOOL WebCore::ImageDecoderAVFObjC::supportsMediaType(int a1)
{
  if (a1 != 1)
    return 0;
  {
    qword_1ECE88A28 = 0;
    qword_1ECE88A30 = 0;
    unk_1ECE88A18 = 0u;
    *(__int128 *)((char *)&xmmword_1ECE88A00 + 8) = 0u;
    *(_OWORD *)&qword_1ECE889F8 = 0u;
    WebCore::AVAssetMIMETypeCache::singleton(void)::cache = (uint64_t)off_1E334D010;
  }
  return PAL::AVFoundationLibrary((PAL *)1) != 0;
}

BOOL WebCore::ImageDecoderAVFObjC::canDecodeType(WTF::StringImpl **this, const WTF::String *a2, const WTF::StringImpl *a3)
{
  {
    qword_1ECE88A28 = 0;
    qword_1ECE88A30 = 0;
    unk_1ECE88A18 = 0u;
    *(__int128 *)((char *)&xmmword_1ECE88A00 + 8) = 0u;
    *(_OWORD *)&qword_1ECE889F8 = 0u;
    WebCore::AVAssetMIMETypeCache::singleton(void)::cache = (uint64_t)off_1E334D010;
  }
  return WebCore::MIMETypeCache::canDecodeType((WebCore::MIMETypeCache *)&WebCore::AVAssetMIMETypeCache::singleton(void)::cache, this, a3) != 0;
}

uint64_t ___ZN7WebCore19ImageDecoderAVFObjC17firstEnabledTrackEv_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isEnabled");
}

void WebCore::ImageDecoderAVFObjC::readSamples(WebCore::ImageDecoderAVFObjC *this)
{
  PAL *v2;
  void *v3;
  PAL *v4;
  opaqueCMSampleBuffer *v5;
  PAL *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  PAL *v19;

  if (!*((_QWORD *)this + 15))
  {
    v2 = (PAL *)objc_msgSend(objc_alloc((Class)PAL::getAVAssetReaderClass[0](this)), "initWithAsset:error:", *((_QWORD *)this + 4), 0);
    v3 = (void *)objc_msgSend(objc_alloc((Class)PAL::getAVAssetReaderSampleReferenceOutputClass[0](v2)), "initWithTrack:", *((_QWORD *)this + 5));
    objc_msgSend(v3, "setAlwaysCopiesSampleData:", 0);
    -[PAL addOutput:](v2, "addOutput:", v3);
    -[PAL startReading](v2, "startReading");
    while (1)
    {
      v4 = (PAL *)objc_msgSend(v3, "copyNextSampleBuffer", v18);
      v6 = v4;
      v19 = v4;
      if (!v4)
        break;
      if (PAL::softLinkCoreMediaCMSampleBufferGetNumSamples(v4, v5))
      {
        v7 = WTF::fastMalloc((WTF *)0x70);
        WebCore::MediaSampleAVFObjC::MediaSampleAVFObjC(v7, (opaqueCMSampleBuffer *)&v19);
        *(_QWORD *)v7 = off_1E334DB50;
        *(_QWORD *)(v7 + 96) = 0;
        v8 = (unsigned int *)(v7 + 8);
        *(_BYTE *)(v7 + 104) = 0;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        v18 = (unsigned int *)v7;
        WebCore::SampleMap::addSample((uint64_t)this + 80, &v18);
        v10 = v18;
        v18 = 0;
        if (v10)
        {
          v11 = v10 + 2;
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
          {
            atomic_store(1u, v10 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
          }
        }
        do
        {
          v14 = __ldaxr(v8);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v8));
        if (!v15)
        {
          atomic_store(1u, (unsigned int *)(v7 + 8));
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        }
        v6 = v19;
        if (!v19)
          continue;
      }
      CFRelease(v6);
    }
    v16 = *((_QWORD *)this + 9);
    if (v16)
    {
      if (*((_QWORD *)this + 15))
      {
        v17 = 4;
      }
      else if (*((_BYTE *)this + 156))
      {
        v17 = 3;
      }
      else if (*((_QWORD *)this + 5))
      {
        v17 = 2;
      }
      else
      {
        v17 = 1;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v17);
    }
    if (v3)
      CFRelease(v3);
    if (v2)
      CFRelease(v2);
  }
}

void sub_195250AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ImageDecoderAVFObjC::encodedDataStatus(WebCore::ImageDecoderAVFObjC *this)
{
  if (*((_QWORD *)this + 15))
    return 4;
  if (*((_BYTE *)this + 156))
    return 3;
  if (*((_QWORD *)this + 5))
    return 2;
  return 1;
}

uint64_t WebCore::ImageDecoderAVFObjC::readTrackMetadata(WebCore::ImageDecoderAVFObjC *this)
{
  void *v2;
  void *v3;
  void *v4;
  double ty;
  uint64_t result;
  void *v7;
  double v8;
  double v9;
  float v10;
  float v11;
  unsigned int v12;
  uint64_t v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  float64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  BOOL v22;
  const WebCore::AffineTransform *v23;
  void *v24;
  int v25;
  __int128 v26;
  __int128 v27;
  WTF *v28;
  const void *v29;
  const void *v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  unint64_t v35;
  unint64_t v36;
  WTF *v37;
  const void *v38;
  const void *v39;
  __int128 v40;
  CGFloat a;
  float64x2_t v42;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v45;
  CGAffineTransform v46;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
    objc_msgSend(v2, "preferredTransform");
  else
    memset(&t1, 0, sizeof(t1));
  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {
    objc_msgSend(v3, "preferredTransform");
    v4 = (void *)*((_QWORD *)this + 5);
  }
  else
  {
    v4 = 0;
    memset(&t2, 0, sizeof(t2));
  }
  CGAffineTransformConcat(&v45, &t1, &t2);
  ty = v45.ty;
  v40 = *(_OWORD *)&v45.b;
  a = v45.a;
  v46 = v45;
  v42 = *(float64x2_t *)&v45.d;
  result = objc_msgSend(v4, "naturalSize");
  *(float *)&v8 = v8;
  v10 = v9;
  v11 = ceilf(*(float *)&v8);
  if (v11 > -2147500000.0)
    v12 = (int)v11;
  else
    v12 = 0x80000000;
  if (v11 < 2147500000.0)
    v13 = v12;
  else
    v13 = 0x7FFFFFFFLL;
  v14 = ceilf(v10);
  if (v14 > -2147500000.0)
    v15 = (int)v14;
  else
    v15 = 0x80000000;
  if (v14 < 2147500000.0)
    v16 = v15;
  else
    v16 = 0x7FFFFFFFLL;
  v17.f64[1] = *((float64_t *)&v40 + 1);
  v17.f64[0] = a;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v17, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(v42, (float64x2_t)xmmword_1968A14B0))))) & 1) == 0&& *(double *)&v40 == 0.0&& ty == 0.0)
  {
    if (!*((_BYTE *)this + 156))
      *((_BYTE *)this + 156) = 1;
    *(_QWORD *)((char *)this + 148) = v13 | (v16 << 32);
    v37 = (WTF *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v37)
    {
      v38 = (const void *)*((_QWORD *)v37 + 12);
      *((_QWORD *)v37 + 12) = 0;
      if (v38)
        CFRelease(v38);
      v39 = (const void *)*((_QWORD *)v37 + 11);
      *((_QWORD *)v37 + 11) = 0;
      if (v39)
        CFRelease(v39);
      return WTF::fastFree(v37, v7);
    }
  }
  else
  {
    v18 = *((_QWORD *)this + 7);
    if (!v18 || !*(_BYTE *)(v18 + 64))
      goto LABEL_33;
    v19 = 0;
    do
    {
      v20 = *(double *)(v18 + v19 + 16);
      v21 = *(double *)((char *)&v46.a + v19);
      if (v20 != v21)
        break;
      v22 = v19 == 40;
      v19 += 8;
    }
    while (!v22);
    if (v20 != v21
      || (*(float *)(v18 + 8) == (float)(int)v13 ? (v22 = *(float *)(v18 + 12) == (float)(int)v16) : (v22 = 0), !v22))
    {
LABEL_33:
      v18 = WTF::fastMalloc((WTF *)0x70);
      *(_QWORD *)&v45.a = WebCore::transformToRotationProperties((float64x2_t *)&v46, v23);
      *(_WORD *)v18 = 0;
      *(_BYTE *)(v18 + 64) = 0;
      *(_QWORD *)(v18 + 4) = 0;
      *(_QWORD *)(v18 + 9) = 0;
      *(_QWORD *)(v18 + 88) = 0;
      *(_QWORD *)(v18 + 96) = 0;
      *(_QWORD *)(v18 + 80) = 0;
      *(_BYTE *)(v18 + 104) = 1;
      result = WebCore::ImageRotationSessionVT::initialize(v18, (unint64_t *)&v45, 1, (float)(int)v13, (float)(int)v16);
      v25 = *(unsigned __int8 *)(v18 + 64);
      v27 = *(_OWORD *)&v46.c;
      v26 = *(_OWORD *)&v46.tx;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)&v46.a;
      *(_OWORD *)(v18 + 32) = v27;
      *(_OWORD *)(v18 + 48) = v26;
      if (!v25)
        *(_BYTE *)(v18 + 64) = 1;
      v28 = (WTF *)*((_QWORD *)this + 7);
      *((_QWORD *)this + 7) = v18;
      if (v28)
      {
        v29 = (const void *)*((_QWORD *)v28 + 12);
        *((_QWORD *)v28 + 12) = 0;
        if (v29)
          CFRelease(v29);
        v30 = (const void *)*((_QWORD *)v28 + 11);
        *((_QWORD *)v28 + 11) = 0;
        if (v30)
          CFRelease(v30);
        result = WTF::fastFree(v28, v24);
        v18 = *((_QWORD *)this + 7);
      }
    }
    v31 = ceilf(*(float *)(v18 + 80));
    v32 = 0x7FFFFFFFLL;
    v33 = 0x80000000;
    if (v31 > -2147500000.0)
      v33 = (int)v31;
    if (v31 < 2147500000.0)
      v32 = v33;
    v34 = ceilf(*(float *)(v18 + 84));
    if (v34 >= 2147500000.0)
    {
      v35 = 0x7FFFFFFF00000000;
    }
    else if (v34 <= -2147500000.0)
    {
      v35 = 0x8000000000000000;
    }
    else
    {
      v35 = (unint64_t)(int)v34 << 32;
    }
    v36 = v35 | v32;
    if (!*((_BYTE *)this + 156))
      *((_BYTE *)this + 156) = 1;
    *(_QWORD *)((char *)this + 148) = v36;
  }
  return result;
}

void sub_195250F44(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  const void *v4;
  const void *v5;

  v4 = (const void *)*((_QWORD *)v2 + 12);
  *((_QWORD *)v2 + 12) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)v2 + 11);
  *((_QWORD *)v2 + 11) = 0;
  if (v5)
    CFRelease(v5);
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

unsigned int *WebCore::ImageDecoderAVFObjC::setTrack(WebCore::ImageDecoderAVFObjC *this, unsigned int *cf)
{
  unsigned int *result;
  unsigned __int8 *v5;
  WTF *v7;
  void *v8;
  WTF *v9;
  const void *v10;
  const void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  _QWORD v21[4];
  unsigned int *v22;

  result = (unsigned int *)*((_QWORD *)this + 5);
  if (result != cf)
  {
    if (cf)
    {
      CFRetain(cf);
      result = (unsigned int *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 5) = cf;
    if (result)
      CFRelease(result);
    v5 = (unsigned __int8 *)this + 144;
    if (__ldaxr((unsigned __int8 *)this + 144))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C]((char *)this + 144);
LABEL_10:
    std::__tree<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<WTF::MediaTime,std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<WTF::MediaTime>,true>,WTF::FastAllocator<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy((uint64_t)this + 104, *((WTF **)this + 14));
    v7 = (WTF *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 13) = (char *)this + 112;
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 15) = 0;
    std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy((uint64_t)this + 80, v7);
    *((_QWORD *)this + 10) = (char *)this + 88;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 16) = 0;
    if (*((_BYTE *)this + 156))
      *((_BYTE *)this + 156) = 0;
    *((_QWORD *)this + 17) = (char *)this + 88;
    v9 = (WTF *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v9)
    {
      v10 = (const void *)*((_QWORD *)v9 + 12);
      *((_QWORD *)v9 + 12) = 0;
      if (v10)
        CFRelease(v10);
      v11 = (const void *)*((_QWORD *)v9 + 11);
      *((_QWORD *)v9 + 11) = 0;
      if (v11)
        CFRelease(v11);
      WTF::fastFree(v9, v8);
    }
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3321888768;
    v21[2] = ___ZN7WebCore19ImageDecoderAVFObjC8setTrackEP12AVAssetTrack_block_invoke;
    v21[3] = &__block_descriptor_40_e8_32c66_ZTSKZN7WebCore19ImageDecoderAVFObjC8setTrackEP12AVAssetTrackE3__0_e5_v8__0l;
    v12 = (unsigned int *)((char *)this + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 + 1, v12));
    v22 = (unsigned int *)this;
    objc_msgSend(cf, "loadValuesAsynchronouslyForKeys:completionHandler:", &unk_1E349D618, v21);
    do
    {
      v15 = __ldaxr(v12);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v12));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)this + 2);
      (*(void (**)(WebCore::ImageDecoderAVFObjC *))(*(_QWORD *)this + 8))(this);
    }
    result = v22;
    v22 = 0;
    if (result)
    {
      v17 = result + 2;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, result + 2);
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
    v20 = __ldxr(v5);
    if (v20 == 1)
    {
      if (!__stlxr(0, v5))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned int *)WTF::Lock::unlockSlow((WebCore::ImageDecoderAVFObjC *)((char *)this + 144));
  }
  return result;
}

void sub_195251184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int *a14)
{
  unsigned __int8 *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;

  if (a14)
  {
    v18 = a14 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, a14 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)a14 + 8))(a14);
    }
  }
  do
  {
    v21 = __ldaxr(v16);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v16));
  if (!v22)
  {
    atomic_store(1u, v15 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
  }
  v23 = __ldxr(v14);
  if (v23 == 1)
  {
    if (!__stlxr(0, v14))
LABEL_14:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v14);
  goto LABEL_14;
}

uint64_t ___ZN7WebCore19ImageDecoderAVFObjC8setTrackEP12AVAssetTrack_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = &off_1E334DBF0;
  v2[1] = v1;
  v4 = v2;
  WTF::callOnMainThread();
  result = (uint64_t)v4;
  if (v4)
    return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

void sub_195251288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c66_ZTSKZN7WebCore19ImageDecoderAVFObjC8setTrackEP12AVAssetTrackE3__0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(a2 + 32);
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *(_QWORD *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c66_ZTSKZN7WebCore19ImageDecoderAVFObjC8setTrackEP12AVAssetTrackE3__0(uint64_t a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebCore::ImageDecoderAVFObjC::setEncodedDataStatusChangeCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::ImageDecoderAVFObjC::size(WebCore::ImageDecoderAVFObjC *this)
{
  if (*((_BYTE *)this + 156))
    return *(_QWORD *)((char *)this + 148);
  else
    return 0;
}

uint64_t WebCore::ImageDecoderAVFObjC::frameCount(WebCore::ImageDecoderAVFObjC *this)
{
  return *((_QWORD *)this + 12);
}

uint64_t WebCore::ImageDecoderAVFObjC::repetitionCount(WebCore::ImageDecoderAVFObjC *this)
{
  if (*((_QWORD *)this + 12) <= 1uLL)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

void WebCore::ImageDecoderAVFObjC::filenameExtension(WebCore::ImageDecoderAVFObjC *this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::MIMETypeRegistry::preferredExtensionForMIMEType((WebCore::ImageDecoderAVFObjC *)((char *)this + 16), a2);
}

uint64_t WebCore::ImageDecoderAVFObjC::frameSizeAtIndex(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 156))
    return *(_QWORD *)(a1 + 148);
  else
    return 0;
}

BOOL WebCore::ImageDecoderAVFObjC::frameIsCompleteAtIndex(WebCore::ImageDecoderAVFObjC *this, opaqueCMSampleBuffer *a2)
{
  _QWORD *v3;
  opaqueCMSampleBuffer *i;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  opaqueCMSampleBuffer *v9;
  unsigned int *v11;
  unint64_t v12;
  _QWORD v13[2];
  char v14;

  if (*((_QWORD *)this + 15) <= (unint64_t)a2)
    return 0;
  v3 = (_QWORD *)*((_QWORD *)this + 13);
  if (a2)
  {
    for (i = 0; i != a2; i = (opaqueCMSampleBuffer *)((char *)i + 1))
    {
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
  }
  else
  {
    v6 = (_QWORD *)*((_QWORD *)this + 13);
  }
  v8 = v6[6];
  if (!v8)
    return 0;
  if (PAL::softLinkCoreMediaCMSampleBufferGetDataBuffer[0](*(PAL **)(v8 + 16), a2)
    || PAL::softLinkCoreMediaCMSampleBufferGetImageBuffer[0](*(PAL **)(v8 + 16), v9)
    || !PAL::softLinkCoreMediaCMSampleBufferDataIsReady(*(PAL **)(v8 + 16), v9))
  {
    return PAL::softLinkCoreMediaCMSampleBufferDataIsReady(*(PAL **)(v8 + 16), v9) != 0;
  }
  if (PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceByteOffset(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceByteOffset(void)::once, &__block_literal_global_159);
  WebCore::ImageDecoderAVFObjCSample::byteRangeForAttachment((WebCore::ImageDecoderAVFObjCSample *)v13, (const __CFString *)v8, (const void *)PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceByteOffset(void)::constantCoreMediakCMSampleBufferAttachmentKey_SampleReferenceByteOffset, v11);
  if (!v14)
    return PAL::softLinkCoreMediaCMSampleBufferDataIsReady(*(PAL **)(v8 + 16), v9) != 0;
  v12 = v13[1] + v13[0];
  return v12 <= objc_msgSend((id)objc_msgSend(*((id *)this + 6), "data"), "length");
}

_QWORD *WebCore::ImageDecoderAVFObjC::frameDurationAtIndex(_QWORD *this, unint64_t a2, __n128 a3)
{
  _QWORD *v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  _QWORD v9[2];

  a3.n128_u64[0] = 0;
  if (this[15] > a2)
  {
    v3 = (_QWORD *)this[13];
    if (a2)
    {
      for (i = 0; i != a2; ++i)
      {
        v5 = (_QWORD *)v3[1];
        if (v5)
        {
          do
          {
            v6 = v5;
            v5 = (_QWORD *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v6 = (_QWORD *)v3[2];
            v7 = *v6 == (_QWORD)v3;
            v3 = v6;
          }
          while (!v7);
        }
        v3 = v6;
      }
    }
    else
    {
      v6 = (_QWORD *)this[13];
    }
    this = (_QWORD *)v6[6];
    if (this)
    {
      v9[0] = (*(uint64_t (**)(_QWORD *, __n128))(*this + 32))(this, a3);
      v9[1] = v8;
      return (_QWORD *)WTF::MediaTime::toDouble((WTF::MediaTime *)v9);
    }
  }
  return this;
}

uint64_t WebCore::ImageDecoderAVFObjC::frameHasAlphaAtIndex(WebCore::ImageDecoderAVFObjC *this, unint64_t a2)
{
  _QWORD *v2;
  uint64_t i;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t result;

  if (*((_QWORD *)this + 15) <= a2)
    return 0;
  v2 = (_QWORD *)*((_QWORD *)this + 13);
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v4 = (_QWORD *)v2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
  }
  else
  {
    v5 = (_QWORD *)*((_QWORD *)this + 13);
  }
  result = v5[6];
  if (result)
    return ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 104))(result) >> 2) & 1;
  return result;
}

uint64_t WebCore::ImageDecoderAVFObjC::frameInfos@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD v17[2];

  v3 = *(_QWORD *)(this + 120);
  if (v3)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    if (v3 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = this;
      this = WTF::fastMalloc((WTF *)(16 * v3));
      *(_DWORD *)(a2 + 8) = v3;
      *(_QWORD *)a2 = this;
      v5 = *(_QWORD **)(v4 + 104);
      v6 = (_QWORD *)(v4 + 112);
      if (v5 != (_QWORD *)(v4 + 112))
      {
        v7 = this;
        v8 = 0;
        do
        {
          v9 = v5[6];
          v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 104))(v9);
          v17[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
          v17[1] = v11;
          this = WTF::MediaTime::toDouble((WTF::MediaTime *)v17);
          v12 = (_QWORD *)(v7 + 16 * v8);
          *v12 = (v10 >> 2) & 1;
          v12[1] = v13;
          *(_DWORD *)(a2 + 12) = ++v8;
          v14 = (_QWORD *)v5[1];
          if (v14)
          {
            do
            {
              v15 = v14;
              v14 = (_QWORD *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              v15 = (_QWORD *)v5[2];
              v16 = *v15 == (_QWORD)v5;
              v5 = v15;
            }
            while (!v16);
          }
          v5 = v15;
        }
        while (v15 != v6);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  return this;
}

void sub_195251750(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  WTF *v3;

  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  WTF::fastFree(v3, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::ImageDecoderAVFObjC::frameBytesAtIndex(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  result = WebCore::ImageDecoderAVFObjC::frameIsCompleteAtIndex((WebCore::ImageDecoderAVFObjC *)a1, a2);
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 156))
      v4 = *(_QWORD *)(a1 + 148);
    else
      v4 = 0;
    v5 = HIDWORD(v4);
    if ((v4 & 0x80000000) != 0)
      LODWORD(v4) = -(int)v4;
    if ((v5 & 0x80000000) != 0)
      LODWORD(v5) = -(int)v5;
    v6 = v5 * (unint64_t)v4;
    if ((v6 & 0xFFFFFFFF00000000) != 0 || v6 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x1952517D4);
    }
    return (4 * v6);
  }
  return result;
}

void WebCore::ImageDecoderAVFObjC::createFrameImageAtIndex(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v6;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  const void *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  opaqueCMSampleBuffer *v25;
  uint64_t v26;
  opaqueCMSampleBuffer *v27;
  opaqueCMSampleBuffer *v28;
  opaqueCMSampleBuffer *v29;
  opaqueCMSampleBuffer *v30;
  opaqueCMSampleBuffer *v31;
  __CVBuffer *v32;
  uint64_t IOSurface;
  uint64_t v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  BOOL v37;
  int v38;
  char v39;
  BOOL v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  _QWORD *v45;
  NSObject *v46;
  _BOOL4 v47;
  CFTypeRef v48;
  WebCore::ImageRotationSessionVT *v49;
  __CVBuffer *v50;
  CFTypeRef v51;
  const void *v52;
  uint64_t v53;
  int v54;
  NSObject *v55;
  _QWORD *v56;
  _QWORD *v57;
  const void *v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  void *v63;
  const __CFAllocator *v64;
  void *v65;
  OpaqueCMBlockBuffer *v66;
  const __CFString *v67;
  PAL *v68;
  const __CFString *v69;
  PAL *v70;
  uint64_t v71;
  CGImage *v72;
  const void *v73;
  CGImageAlphaInfo AlphaInfo;
  NSObject *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  int v79;
  CFTypeRef v80;
  OpaqueCMBlockBuffer **v81;
  PAL *v82;
  const CMBlockBufferCustomBlockSource *v83;
  unint64_t v84;
  char v85;
  __int128 v86;
  CGImage *v87;
  CFTypeRef cf;
  _BYTE v89[32];
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v6 = (unsigned __int8 *)(a1 + 144);
  if (__ldaxr((unsigned __int8 *)(a1 + 144)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](a1 + 144);
    goto LABEL_5;
  }
  if (__stxr(1u, v6))
    goto LABEL_4;
LABEL_5:
  if (*(_QWORD *)(a1 + 120) > a2)
  {
    v8 = *(_QWORD **)(a1 + 104);
    if (a2)
    {
      v9 = 0;
      do
      {
        v10 = (_QWORD *)v8[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v8[2];
            v37 = *v11 == (_QWORD)v8;
            v8 = v11;
          }
          while (!v37);
        }
        ++v9;
        v8 = v11;
      }
      while (v9 != a2);
    }
    else
    {
      v11 = *(_QWORD **)(a1 + 104);
    }
    v12 = (_QWORD *)v11[6];
    if (v12)
    {
      v13 = (const void *)v12[12];
      if (v13)
      {
        *a3 = v13;
        CFRetain(v13);
        goto LABEL_134;
      }
      v14 = (_QWORD *)(a1 + 88);
      if (*(_QWORD *)(a1 + 136) == a1 + 88)
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 80);
      *(_QWORD *)&v86 = (*(uint64_t (**)(_QWORD *))(*v12 + 24))(v12);
      *((_QWORD *)&v86 + 1) = v15;
      *(_QWORD *)v89 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 136) + 64) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 64));
      *(_QWORD *)&v89[8] = v16;
      if (WTF::MediaTime::compare((WTF::MediaTime *)&v86, (const WTF::MediaTime *)v89) == -1)
      {
        v17 = (*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
        *(_OWORD *)v89 = v86;
        *(_QWORD *)&v89[16] = v17;
        *(_QWORD *)&v89[24] = v18;
        v19 = std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::find<std::pair<WTF::MediaTime,WTF::MediaTime>>(a1 + 80, (WTF::MediaTime *)v89);
        *(_QWORD *)(a1 + 136) = v19;
        do
        {
          if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v19[8] + 104))(v19[8]) & 1) != 0)
            break;
          v20 = *(_QWORD **)(a1 + 136);
          v21 = (_QWORD *)*v20;
          if (*v20)
          {
            do
            {
              v19 = v21;
              v21 = (_QWORD *)v21[1];
            }
            while (v21);
          }
          else
          {
            do
            {
              v19 = (_QWORD *)v20[2];
              v37 = *v19 == (_QWORD)v20;
              v20 = v19;
            }
            while (v37);
          }
          *(_QWORD *)(a1 + 136) = v19;
        }
        while (v19 != *(_QWORD **)(a1 + 80));
      }
      v22 = (_QWORD *)(a1 + 112);
      v82 = (PAL *)*MEMORY[0x1E0C9AE00];
      v23 = *(_QWORD **)(a1 + 136);
      while (1)
      {
        *(_QWORD *)v89 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v23[8] + 24))(v23[8]);
        *(_QWORD *)&v89[8] = v24;
        if (WTF::MediaTime::compare((WTF::MediaTime *)&v86, (const WTF::MediaTime *)v89) == -1)
          break;
        v26 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 64);
        if (!v26)
          break;
        if (PAL::softLinkCoreMediaCMSampleBufferGetDataBuffer[0](*(PAL **)(v26 + 16), v25)
          || PAL::softLinkCoreMediaCMSampleBufferGetImageBuffer[0](*(PAL **)(v26 + 16), v27)
          || !PAL::softLinkCoreMediaCMSampleBufferDataIsReady(*(PAL **)(v26 + 16), v27))
        {
          goto LABEL_34;
        }
        if (PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceByteOffset(void)::once != -1)
          dispatch_once(&PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceByteOffset(void)::once, &__block_literal_global_159);
        WebCore::ImageDecoderAVFObjCSample::byteRangeForAttachment((WebCore::ImageDecoderAVFObjCSample *)v89, (const __CFString *)v26, (const void *)PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceByteOffset(void)::constantCoreMediakCMSampleBufferAttachmentKey_SampleReferenceByteOffset, v59);
        if (!v89[16])
        {
LABEL_34:
          if (!PAL::softLinkCoreMediaCMSampleBufferDataIsReady(*(PAL **)(v26 + 16), v27))
            break;
        }
        else
        {
          v60 = *(_QWORD *)v89;
          v61 = *(_QWORD *)&v89[8];
          if (v61 + v60 > (unint64_t)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 48), "data"), "length"))
            break;
        }
        if (!PAL::softLinkCoreMediaCMSampleBufferGetDataBuffer[0](*(PAL **)(v26 + 16), v28)
          && !PAL::softLinkCoreMediaCMSampleBufferGetImageBuffer[0](*(PAL **)(v26 + 16), v29)
          && PAL::softLinkCoreMediaCMSampleBufferDataIsReady(*(PAL **)(v26 + 16), v30))
        {
          if (PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceByteOffset(void)::once != -1)
            dispatch_once(&PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceByteOffset(void)::once, &__block_literal_global_159);
          WebCore::ImageDecoderAVFObjCSample::byteRangeForAttachment((WebCore::ImageDecoderAVFObjCSample *)&v83, (const __CFString *)v26, (const void *)PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceByteOffset(void)::constantCoreMediakCMSampleBufferAttachmentKey_SampleReferenceByteOffset, v62);
          if (v85)
          {
            v63 = (void *)objc_msgSend(*(id *)(a1 + 48), "data");
            *(_DWORD *)&v89[8] = 0;
            *(_DWORD *)&v89[20] = 0;
            *(_QWORD *)v89 = 0;
            *(_DWORD *)&v89[24] = 0;
            *(_QWORD *)&v89[12] = WebCore::ImageDecoderAVFObjC::createFrameImageAtIndex(unsigned long,WebCore::SubsamplingLevel,WebCore::DecodingOptions const&)::$_0::__invoke;
            *(_QWORD *)&v89[20] = v63;
            cf = 0;
            v64 = (const __CFAllocator *)objc_msgSend(v63, "bytes");
            v65 = (void *)objc_msgSend(v63, "length");
            if (PAL::softLinkCoreMediaCMBlockBufferCreateWithMemoryBlock(v82, v64, v65, 0, (const __CFAllocator *)v89, v83, v84, 0, &cf, v81)|| !cf|| PAL::softLinkCoreMediaCMSampleBufferSetDataBuffer(*(PAL **)(v26 + 16), (opaqueCMSampleBuffer *)cf, v66))
            {
              break;
            }
            CFRelease(cf);
            v68 = *(PAL **)(v26 + 16);
            if (PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceByteOffset(void)::once != -1)
              dispatch_once(&PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceByteOffset(void)::once, &__block_literal_global_159);
            PAL::softLinkCoreMediaCMRemoveAttachment(v68, (const void *)PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceByteOffset(void)::constantCoreMediakCMSampleBufferAttachmentKey_SampleReferenceByteOffset, v67);
            v70 = *(PAL **)(v26 + 16);
            if (PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceURL(void)::once != -1)
              dispatch_once(&PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceURL(void)::once, &__block_literal_global_162);
            PAL::softLinkCoreMediaCMRemoveAttachment(v70, (const void *)PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceURL(void)::constantCoreMediakCMSampleBufferAttachmentKey_SampleReferenceURL, v69);
          }
        }
        v31 = *(opaqueCMSampleBuffer **)(v26 + 16);
        if (!v31)
          goto LABEL_125;
        WebCore::WebCoreDecompressionSession::decodeSampleSync(*(WebCore::WebCoreDecompressionSession **)(a1 + 64), v31, &cf);
        if (!cf)
        {
          v75 = qword_1ECE7CE58;
          if (os_log_type_enabled((os_log_t)qword_1ECE7CE58, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v89 = 134217984;
            *(_QWORD *)&v89[4] = a1;
            _os_log_error_impl(&dword_1940B8000, v75, OS_LOG_TYPE_ERROR, "ImageDecoderAVFObjC::storeSampleBuffer(%p) - could not decode sampleBuffer", v89, 0xCu);
            v80 = cf;
            cf = 0;
            if (v80)
              CFRelease(v80);
          }
LABEL_125:
          v76 = *(_QWORD **)(a1 + 136);
          if (v76 == v14)
            goto LABEL_132;
          v77 = (_QWORD *)v76[1];
          if (v77)
          {
            do
            {
              v78 = v77;
              v77 = (_QWORD *)*v77;
            }
            while (v77);
          }
          else
          {
            do
            {
              v78 = (_QWORD *)v76[2];
              v37 = *v78 == (_QWORD)v76;
              v76 = v78;
            }
            while (!v37);
          }
          *(_QWORD *)(a1 + 136) = v78;
          if (v78 == v14)
LABEL_132:
            *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 80);
          break;
        }
        if (*(_DWORD *)(a1 + 160))
        {
          IOSurface = WebCore::softLinkCoreVideoCVPixelBufferGetIOSurface((WebCore *)cf, v32);
          WebCore::IOSurface::setOwnershipIdentity(IOSurface, (int *)(a1 + 160));
        }
        PAL::softLinkCoreMediaCMSampleBufferGetOutputPresentationTimeStamp(v31, v32);
        v34 = *(unsigned int *)&v89[8];
        v35 = v89[12] & 1;
        if ((~*(_DWORD *)&v89[12] & 3) == 0)
          v35 = v89[12] & 1 | 2;
        if ((~*(_DWORD *)&v89[12] & 5) == 0)
          v35 |= 4u;
        if ((~*(_DWORD *)&v89[12] & 9) == 0)
          v35 |= 8u;
        if ((~*(_DWORD *)&v89[12] & 0x11) != 0)
          v36 = v35;
        else
          v36 = v35 | 0x10;
        v37 = (v36 & 1) != 0 && *(unsigned int *)&v89[8] == 0;
        v38 = !v37;
        if (*(uint64_t *)v89 >= 0)
          v39 = 5;
        else
          v39 = 9;
        v40 = v38 == 0;
        if (v38)
        {
          v41 = *(_QWORD *)v89;
        }
        else
        {
          v36 = v39;
          v41 = *(uint64_t *)v89 >> 63;
        }
        if (v40)
          v34 = 1;
        v83 = (const CMBlockBufferCustomBlockSource *)v41;
        v84 = v34 | ((unint64_t)v36 << 32);
        v42 = (_QWORD *)*v22;
        if (!*v22)
          goto LABEL_72;
        v43 = (_QWORD *)(a1 + 112);
        while (1)
        {
          if (WTF::MediaTime::compare((WTF::MediaTime *)&v83, (const WTF::MediaTime *)(v42 + 4)) == -1)
          {
            v45 = v42;
            v43 = v42;
            goto LABEL_71;
          }
          v44 = WTF::MediaTime::compare((WTF::MediaTime *)(v42 + 4), (const WTF::MediaTime *)&v83);
          v45 = v42 + 1;
          if (v44 != -1)
            break;
LABEL_71:
          v42 = (_QWORD *)*v45;
          if (!*v45)
            goto LABEL_72;
        }
        while (1)
        {
          v45 = (_QWORD *)*v45;
          if (!v45)
            break;
          v43 = v45;
        }
        if (v42 != v22 && v42 != v43)
        {
          v49 = *(WebCore::ImageRotationSessionVT **)(a1 + 56);
          if (v49)
          {
            WebCore::ImageRotationSessionVT::rotate(v49, (__CVBuffer *)cf, v89);
            v51 = cf;
            cf = *(CFTypeRef *)v89;
            *(_QWORD *)v89 = 0;
            if (v51)
            {
              CFRelease(v51);
              v52 = *(const void **)v89;
              *(_QWORD *)v89 = 0;
              if (v52)
                CFRelease(v52);
            }
            v53 = WebCore::softLinkCoreVideoCVPixelBufferGetIOSurface((WebCore *)cf, v50);
            WebCore::IOSurface::setOwnershipIdentity(v53, (int *)(a1 + 160));
          }
          v87 = 0;
          v54 = WebCore::softLinkVideoToolboxVTCreateCGImageFromCVPixelBuffer(cf, 0, &v87);
          v47 = v54 == 0;
          if (v54)
          {
            v55 = qword_1ECE7CE58;
            if (os_log_type_enabled((os_log_t)qword_1ECE7CE58, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v89 = 134217984;
              *(_QWORD *)&v89[4] = a1;
              _os_log_error_impl(&dword_1940B8000, v55, OS_LOG_TYPE_ERROR, "ImageDecoderAVFObjC::storeSampleBuffer(%p) - could not create CGImage from pixelBuffer", v89, 0xCu);
            }
          }
          else
          {
            v71 = v42[6];
            v72 = v87;
            v73 = *(const void **)(v71 + 96);
            *(_QWORD *)(v71 + 96) = v87;
            if (v73)
            {
              CFRelease(v73);
              v72 = *(CGImage **)(v71 + 96);
            }
            if (v72)
            {
              AlphaInfo = CGImageGetAlphaInfo(v72);
              *(_BYTE *)(v71 + 104) = (AlphaInfo > kCGImageAlphaNoneSkipFirst) | (0x1Eu >> AlphaInfo) & 1;
            }
            else
            {
              *(_BYTE *)(v71 + 104) = 0;
            }
          }
          goto LABEL_75;
        }
LABEL_72:
        v46 = qword_1ECE7CE58;
        if (os_log_type_enabled((os_log_t)qword_1ECE7CE58, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v89 = 134217984;
          *(_QWORD *)&v89[4] = a1;
          _os_log_error_impl(&dword_1940B8000, v46, OS_LOG_TYPE_ERROR, "ImageDecoderAVFObjC::storeSampleBuffer(%p) - could not find sample buffer entry with specified presentation time", v89, 0xCu);
        }
        v47 = 0;
LABEL_75:
        v48 = cf;
        cf = 0;
        if (v48)
        {
          CFRelease(v48);
          if (!v47)
            goto LABEL_125;
        }
        else if (!v47)
        {
          goto LABEL_125;
        }
        v56 = *(_QWORD **)(a1 + 136);
        if (v56 == v14)
          goto LABEL_98;
        v57 = (_QWORD *)v56[1];
        if (v57)
        {
          do
          {
            v23 = v57;
            v57 = (_QWORD *)*v57;
          }
          while (v57);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v56[2];
            v37 = *v23 == (_QWORD)v56;
            v56 = v23;
          }
          while (!v37);
        }
        *(_QWORD *)(a1 + 136) = v23;
        if (v23 == v14)
        {
LABEL_98:
          v23 = *(_QWORD **)(a1 + 80);
          *(_QWORD *)(a1 + 136) = v23;
        }
        v58 = (const void *)v12[12];
        if (v58)
        {
          *a3 = v58;
          CFRetain(v58);
          goto LABEL_134;
        }
      }
    }
  }
  *a3 = 0;
LABEL_134:
  v79 = __ldxr(v6);
  if (v79 != 1)
  {
    __clrex();
    goto LABEL_138;
  }
  if (__stlxr(0, v6))
LABEL_138:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
}

void sub_1952520C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef cf)
{
  unsigned __int8 *v20;
  int v22;

  v22 = __ldxr(v20);
  if (v22 == 1)
  {
    if (!__stlxr(0, v20))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v20);
  goto LABEL_6;
}

uint64_t WebCore::ImageDecoderAVFObjCSample::byteRange@<X0>(PAL **this@<X0>, opaqueCMSampleBuffer *a2@<X1>, WebCore::ImageDecoderAVFObjCSample *a3@<X8>)
{
  uint64_t result;
  opaqueCMSampleBuffer *v6;
  opaqueCMSampleBuffer *v7;
  unsigned int *v8;

  result = PAL::softLinkCoreMediaCMSampleBufferGetDataBuffer[0](this[2], a2);
  if (result
    || (result = PAL::softLinkCoreMediaCMSampleBufferGetImageBuffer[0](this[2], v6)) != 0
    || (result = PAL::softLinkCoreMediaCMSampleBufferDataIsReady(this[2], v7), !(_DWORD)result))
  {
    *(_BYTE *)a3 = 0;
    *((_BYTE *)a3 + 16) = 0;
  }
  else
  {
    if (PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceByteOffset(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceByteOffset(void)::once, &__block_literal_global_159);
    return WebCore::ImageDecoderAVFObjCSample::byteRangeForAttachment(a3, (const __CFString *)this, (const void *)PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceByteOffset(void)::constantCoreMediakCMSampleBufferAttachmentKey_SampleReferenceByteOffset, v8);
  }
  return result;
}

uint64_t WebCore::ImageDecoderAVFObjC::setExpectedContentSize(id *this, uint64_t a2)
{
  return objc_msgSend(this[6], "setExpectedContentSize:", a2);
}

void WebCore::ImageDecoderAVFObjC::setData(WebCore::ImageDecoderAVFObjC *this, const WebCore::FragmentedSharedBuffer *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  CFTypeRef v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  WebCore::SharedBuffer *v12;
  CFTypeRef cf;

  v5 = (void *)*((_QWORD *)this + 6);
  WebCore::FragmentedSharedBuffer::makeContiguous(a2, &v12);
  WebCore::SharedBuffer::createNSData(v12, (WebCoreSharedBufferData **)&cf);
  objc_msgSend(v5, "updateData:complete:", cf, a3);
  v7 = cf;
  cf = 0;
  if (v7)
    CFRelease(v7);
  v8 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v12, v6);
  if ((_DWORD)a3)
  {
    *((_BYTE *)this + 145) = 1;
    if (*((_QWORD *)this + 5)
      || ((v9 = (void *)objc_msgSend(*((id *)this + 4), "tracksWithMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicVisual((PAL *)v8)), v10 = objc_msgSend(v9, "indexOfObjectPassingTest:", &__block_literal_global_39), v10 != 0x7FFFFFFFFFFFFFFFLL)? (v11 = (unsigned int *)objc_msgSend(v9, "objectAtIndex:", v10)): (v11 = 0), WebCore::ImageDecoderAVFObjC::setTrack(this, v11), *((_QWORD *)this + 5)))
    {
      WebCore::ImageDecoderAVFObjC::readTrackMetadata(this);
      WebCore::ImageDecoderAVFObjC::readSamples(this);
    }
  }
}

void sub_1952522FC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  CFTypeRef v11;

  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::ImageDecoderAVFObjC::clearFrameBufferCache(uint64_t this, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v2 = *(_QWORD **)(this + 104);
  v3 = (_QWORD *)(this + 112);
  if (v2 != (_QWORD *)(this + 112))
  {
    v5 = 0;
    do
    {
      v6 = v2[6];
      this = *(_QWORD *)(v6 + 96);
      *(_QWORD *)(v6 + 96) = 0;
      if (this && (CFRelease((CFTypeRef)this), (this = *(_QWORD *)(v6 + 96)) != 0))
      {
        this = CGImageGetAlphaInfo((CGImageRef)this);
        *(_BYTE *)(v6 + 104) = (this > 6) | (0x1Eu >> this) & 1;
      }
      else
      {
        *(_BYTE *)(v6 + 104) = 0;
      }
      if (++v5 > a2)
        break;
      v7 = (_QWORD *)v2[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v2[2];
          v9 = *v8 == (_QWORD)v2;
          v2 = v8;
        }
        while (!v9);
      }
      v2 = v8;
    }
    while (v8 != v3);
  }
  return this;
}

uint64_t WebCore::MediaSampleAVFObjC::MediaSampleAVFObjC(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t v3;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E334D8B8;
  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 10000000;
  *(_BYTE *)(a1 + 44) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 10000000;
  *(_BYTE *)(a1 + 60) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 10000000;
  *(_BYTE *)(a1 + 76) = 1;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  WebCore::MediaSampleAVFObjC::commonInit((PAL **)a1, a2);
  return a1;
}

void sub_195252474(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  WTF *v8;
  const void *v9;

  v5 = *(unsigned int *)(v2 + 92);
  if ((_DWORD)v5)
  {
    v6 = *v3;
    v7 = 8 * v5;
    do
    {
      v6 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v6, a2)+ 1;
      v7 -= 8;
    }
    while (v7);
  }
  v8 = (WTF *)*v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 80) = 0;
    *(_DWORD *)(v2 + 88) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *(const void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v9)
    CFRelease(v9);
  _Unwind_Resume(exception_object);
}

WTF *WebCore::MediaSampleAVFObjC::commonInit(PAL **this, opaqueCMSampleBuffer *a2)
{
  opaqueCMSampleBuffer *v3;
  int v4;
  char v5;
  char v6;
  BOOL v7;
  int v8;
  char v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  opaqueCMSampleBuffer *v14;
  opaqueCMSampleBuffer *v15;
  int v16;
  char v17;
  char v18;
  _BOOL4 v20;
  char v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  PAL *FormatDescription;
  void *v26;
  const __CFString *v27;
  PAL *v28;
  const __CFData *Extension;
  const __CFString *v30;
  const __CFData *v31;
  unint64_t Length;
  const UInt8 *BytePtr;
  uint64_t v34;
  WTF *v35;
  WTF *v36;
  int v37;
  void *v38;
  size_t v39;
  WTF *v40;
  uint64_t v41;
  void *v42;
  PAL *v43;
  void *v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  _DWORD *v48;
  WTF *v49;
  WebCore::CDMPrivateFairPlayStreaming *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int **v55;
  uint64_t v56;
  unsigned int **v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  WTF *result;
  uint64_t v64;
  void *v65;
  WTF *v66;
  WTF *v67;
  __int128 v68;
  __int128 v69;
  WTF *v70;
  int v71;
  int v72;
  _DWORD *v73;
  __int128 v74;
  uint64_t v75;
  WTF *v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  __int16 v80;
  __int128 __src;
  __int128 v82;
  WTF *v83;
  uint64_t v84;
  uint64_t v85[2];

  v85[1] = *MEMORY[0x1E0C80C00];
  v69 = 0uLL;
  PAL::softLinkCoreMediaCMSampleBufferGetOutputPresentationTimeStamp(this[2], a2);
  v4 = (unsigned __int128)0 >> 96;
  if (v4)
  {
    v5 = 1;
  }
  else
  {
    PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0](this[2], v3);
    v69 = v74;
    v4 = HIDWORD(v74);
    v5 = BYTE12(v74) & 1;
  }
  if ((~v4 & 3) == 0)
    v5 |= 2u;
  if ((~v4 & 5) == 0)
    v5 |= 4u;
  if ((~v4 & 9) == 0)
    v5 |= 8u;
  if ((~v4 & 0x11) != 0)
    v6 = v5;
  else
    v6 = v5 | 0x10;
  v7 = (v6 & 1) != 0 && DWORD2(v69) == 0;
  v8 = !v7;
  if ((uint64_t)v69 >= 0)
    v9 = 5;
  else
    v9 = 9;
  v10 = v8 == 0;
  if (v8)
  {
    v11 = v69;
  }
  else
  {
    v6 = v9;
    v11 = (uint64_t)v69 >> 63;
  }
  if (v10)
    v12 = 1;
  else
    v12 = DWORD2(v69);
  this[4] = (PAL *)v11;
  *((_DWORD *)this + 10) = v12;
  *((_BYTE *)this + 44) = v6;
  PAL::softLinkCoreMediaCMSampleBufferGetDecodeTimeStamp[0](this[2], v3);
  v13 = *((unsigned int *)this + 10) | ((unint64_t)*((unsigned __int8 *)this + 44) << 32);
  this[6] = this[4];
  *((_DWORD *)this + 14) = v13;
  *((_BYTE *)this + 60) = BYTE4(v13);
  v68 = 0uLL;
  PAL::softLinkCoreMediaCMSampleBufferGetOutputDuration[0](this[2], v14);
  v16 = (unsigned __int128)0 >> 96;
  if (v16)
  {
    v17 = 1;
  }
  else
  {
    PAL::softLinkCoreMediaCMSampleBufferGetDuration[0](this[2], v15);
    v68 = v74;
    v16 = HIDWORD(v74);
    v17 = BYTE12(v74) & 1;
  }
  if ((~v16 & 3) == 0)
    v17 |= 2u;
  if ((~v16 & 5) == 0)
    v17 |= 4u;
  if ((~v16 & 9) == 0)
    v17 |= 8u;
  if ((~v16 & 0x11) != 0)
    v18 = v17;
  else
    v18 = v17 | 0x10;
  v20 = (v18 & 1) == 0 || DWORD2(v68) != 0;
  if ((uint64_t)v68 >= 0)
    v21 = 5;
  else
    v21 = 9;
  v22 = !v20;
  if (v20)
  {
    v23 = v68;
  }
  else
  {
    v18 = v21;
    v23 = (uint64_t)v68 >> 63;
  }
  if (v22)
    v24 = 1;
  else
    v24 = DWORD2(v68);
  this[8] = (PAL *)v23;
  *((_DWORD *)this + 18) = v24;
  *((_BYTE *)this + 76) = v18;
  FormatDescription = (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetFormatDescription(this[2], v15);
  v28 = FormatDescription;
  if (!FormatDescription)
    goto LABEL_90;
  Extension = (const __CFData *)PAL::softLinkCoreMediaCMFormatDescriptionGetExtension(FormatDescription, (const opaqueCMFormatDescription *)CFSTR("CommonEncryptionTrackEncryptionBox"), v27);
  v31 = Extension;
  if (Extension)
  {
    Length = CFDataGetLength(Extension);
    BytePtr = CFDataGetBytePtr(v31);
    v34 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v34 + 8) = 1;
    *(_QWORD *)v34 = off_1E334DC18;
    *(_QWORD *)(v34 + 16) = v31;
    *(_QWORD *)&v74 = BytePtr;
    *((_QWORD *)&v74 + 1) = v34;
    v75 = 0;
    v76 = 0;
    v77 = Length;
    v78 = Length;
    LOBYTE(v79) = 0;
    if (Length < 0x100000001)
    {
      JSC::ArrayBuffer::create();
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)&v74);
      LODWORD(v75) = 0;
      v76 = 0;
      v77 = 0;
      LOBYTE(v78) = 0;
      *(_QWORD *)&v74 = off_1E3416C78;
      *((_QWORD *)&v74 + 1) = 0;
      v79 = 0;
      v80 = 0;
      __src = 0u;
      v82 = 0u;
      v35 = v83;
      v83 = 0;
      v70 = v35;
      JSC::DataView::create();
      v36 = v70;
      v70 = 0;
      if (v36)
      {
        v7 = *(_DWORD *)v36 == 2;
        *(_DWORD *)v36 -= 2;
        if (v7)
        {
          v64 = *((_QWORD *)v36 + 10);
          if (v64)
          {
            *(_QWORD *)(v64 + 8) = 3;
            *((_QWORD *)v36 + 10) = 0;
          }
          if ((*((_BYTE *)v36 + 72) & 1) == 0)
            JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v36 + 72));
          JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v36 + 16));
          v66 = (WTF *)*((_QWORD *)v36 + 1);
          if ((v66 & 1) == 0 && v66)
          {
            v67 = *(WTF **)v66;
            if (*(_QWORD *)v66)
            {
              *(_QWORD *)v66 = 0;
              *((_DWORD *)v66 + 2) = 0;
              WTF::fastFree(v67, v65);
            }
            WTF::fastFree(v66, v65);
          }
          WTF::fastFree(v36, v65);
        }
      }
      LOBYTE(v84) = 0;
      v37 = JSC::DataView::get<unsigned int>((uint64_t)v73, 0, 0, &v84);
      if ((_BYTE)v84
        && (LODWORD(v70) = 4,
            LOBYTE(v78) = HIBYTE(v37),
            HIDWORD(v78) = v37 & 0xFFFFFF,
            (WebCore::ISOTrackEncryptionBox::parsePayload((uint64_t)&v74, (uint64_t)v73, (int *)&v70) & 1) != 0))
      {
        v39 = HIDWORD(__src);
        v70 = 0;
        v71 = 0;
        v72 = HIDWORD(__src);
        if (HIDWORD(__src))
        {
          v40 = (WTF *)WTF::fastMalloc((WTF *)HIDWORD(__src));
          v71 = v39;
          v70 = v40;
          memcpy(v40, (const void *)__src, v39);
        }
        WebCore::FragmentedSharedBuffer::create(&v70, &v84);
        v41 = WTF::fastMalloc((WTF *)0x38);
        v85[0] = WebCore::SharedBuffer::SharedBuffer(v41, &v84);
        WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v84, v42);
        v43 = (PAL *)WTF::fastMalloc((WTF *)8);
        v28 = v43;
        v45 = (unsigned int *)v85[0];
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 + 1, v45));
        *(_QWORD *)v43 = v45;
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v85, v44);
        if (v70)
          WTF::fastFree(v70, v38);
        LODWORD(v47) = 1;
      }
      else
      {
        v28 = 0;
        LODWORD(v47) = 0;
      }
      v48 = v73;
      v73 = 0;
      if (v48)
      {
        if (*v48 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*v48;
      }
      v49 = (WTF *)v82;
      if ((_QWORD)v82)
      {
        *(_QWORD *)&v82 = 0;
        WTF::fastFree(v49, v38);
      }
      if ((_QWORD)__src)
        WTF::fastFree((WTF *)__src, v38);
      if (v76)
        WTF::fastFree(v76, v38);
      WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v83);
      goto LABEL_91;
    }
LABEL_110:
    __break(0xC471u);
    JUMPOUT(0x195252ADCLL);
  }
  v50 = (WebCore::CDMPrivateFairPlayStreaming *)PAL::softLinkCoreMediaCMFormatDescriptionGetExtension(v28, (const opaqueCMFormatDescription *)CFSTR("TransportStreamEncryptionInitData"), v30);
  if (!v50)
  {
    v28 = 0;
LABEL_90:
    LODWORD(v47) = 0;
    goto LABEL_91;
  }
  v51 = WebCore::CDMPrivateFairPlayStreaming::mptsKeyIDs(v50);
  v47 = *((unsigned int *)v51 + 3);
  if (!(_DWORD)v47)
  {
    v28 = 0;
    goto LABEL_91;
  }
  if (v47 >> 29)
    goto LABEL_110;
  v52 = v51;
  v53 = WTF::fastMalloc((WTF *)(8 * v47));
  v28 = (PAL *)v53;
  v54 = *((unsigned int *)v52 + 3);
  if ((_DWORD)v54)
  {
    v55 = (unsigned int **)*v52;
    v56 = *v52 + 8 * v54;
    v57 = (unsigned int **)v53;
    do
    {
      v58 = *v55;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 + 1, v58));
      *v57++ = v58;
      ++v55;
    }
    while (v55 != (unsigned int **)v56);
  }
LABEL_91:
  v60 = *((unsigned int *)this + 23);
  if ((_DWORD)v60)
  {
    v61 = (uint64_t *)this[10];
    v62 = 8 * v60;
    do
    {
      v61 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v61, v26)+ 1;
      v62 -= 8;
    }
    while (v62);
  }
  result = this[10];
  if (result)
  {
    this[10] = 0;
    *((_DWORD *)this + 22) = 0;
    result = (WTF *)WTF::fastFree(result, v26);
  }
  this[10] = v28;
  *((_DWORD *)this + 22) = v47;
  *((_DWORD *)this + 23) = v47;
  return result;
}

void sub_195252B50(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, uint64_t a20,_DWORD *a21,char a22,uint64_t a23,uint64_t a24,WTF *a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF *a29,uint64_t a30,WTF *a31)
{
  uint64_t v31;

  if (a21)
  {
    if (*a21 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*a21;
  }
  if (a31)
    WTF::fastFree(a31, a2);
  if (a29)
    WTF::fastFree(a29, a2);
  if (a25)
    WTF::fastFree(a25, a2);
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)(v31 - 80));
  _Unwind_Resume(a1);
}

WebCore::MediaSampleAVFObjC *WebCore::MediaSampleAVFObjC::MediaSampleAVFObjC(WebCore::MediaSampleAVFObjC *this, void *cf)
{
  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E334D8B8;
  *((_QWORD *)this + 2) = cf;
  if (cf)
    CFRetain(cf);
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 10000000;
  *((_BYTE *)this + 44) = 1;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 10000000;
  *((_BYTE *)this + 60) = 1;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 10000000;
  *((_BYTE *)this + 76) = 1;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  WebCore::MediaSampleAVFObjC::commonInit((PAL **)this, (opaqueCMSampleBuffer *)cf);
  return this;
}

void sub_195252D38(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  WTF *v8;
  const void *v9;

  v5 = *(unsigned int *)(v2 + 92);
  if ((_DWORD)v5)
  {
    v6 = *v3;
    v7 = 8 * v5;
    do
    {
      v6 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v6, a2)+ 1;
      v7 -= 8;
    }
    while (v7);
  }
  v8 = (WTF *)*v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 80) = 0;
    *(_DWORD *)(v2 + 88) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *(const void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v9)
    CFRelease(v9);
  _Unwind_Resume(exception_object);
}

WebCore::MediaSampleAVFObjC *WebCore::MediaSampleAVFObjC::MediaSampleAVFObjC(WebCore::MediaSampleAVFObjC *this, void *cf, uint64_t a3)
{
  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E334D8B8;
  *((_QWORD *)this + 2) = cf;
  if (cf)
    CFRetain(cf);
  *((_QWORD *)this + 3) = a3;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 10000000;
  *((_BYTE *)this + 44) = 1;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 10000000;
  *((_BYTE *)this + 60) = 1;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 10000000;
  *((_BYTE *)this + 76) = 1;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  WebCore::MediaSampleAVFObjC::commonInit((PAL **)this, (opaqueCMSampleBuffer *)cf);
  return this;
}

void sub_195252E1C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  WTF *v8;
  const void *v9;

  v5 = *(unsigned int *)(v2 + 92);
  if ((_DWORD)v5)
  {
    v6 = *v3;
    v7 = 8 * v5;
    do
    {
      v6 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v6, a2)+ 1;
      v7 -= 8;
    }
    while (v7);
  }
  v8 = (WTF *)*v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 80) = 0;
    *(_DWORD *)(v2 + 88) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *(const void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v9)
    CFRelease(v9);
  _Unwind_Resume(exception_object);
}

void WebCore::MediaSampleAVFObjC::~MediaSampleAVFObjC(WebCore::MediaSampleAVFObjC *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;
  const void *v7;

  *(_QWORD *)this = off_1E334D8B8;
  v3 = *((unsigned int *)this + 23);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 10);
    v5 = 8 * v3;
    do
    {
      v4 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v4, a2)+ 1;
      v5 -= 8;
    }
    while (v5);
  }
  v6 = (WTF *)*((_QWORD *)this + 10);
  if (v6)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    CFRelease(v7);
}

{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;
  const void *v7;

  *(_QWORD *)this = off_1E334D8B8;
  v3 = *((unsigned int *)this + 23);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 10);
    v5 = 8 * v3;
    do
    {
      v4 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v4, a2)+ 1;
      v5 -= 8;
    }
    while (v5);
  }
  v6 = (WTF *)*((_QWORD *)this + 10);
  if (v6)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    CFRelease(v7);
}

{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;
  const void *v7;

  *(_QWORD *)this = off_1E334D8B8;
  v3 = *((unsigned int *)this + 23);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 10);
    v5 = 8 * v3;
    do
    {
      v4 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v4, a2)+ 1;
      v5 -= 8;
    }
    while (v5);
  }
  v6 = (WTF *)*((_QWORD *)this + 10);
  if (v6)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    CFRelease(v7);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::MediaSampleAVFObjC::presentationTime(WebCore::MediaSampleAVFObjC *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t WebCore::MediaSampleAVFObjC::decodeTime(WebCore::MediaSampleAVFObjC *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t WebCore::MediaSampleAVFObjC::duration(WebCore::MediaSampleAVFObjC *this)
{
  return *((_QWORD *)this + 8);
}

uint64_t WebCore::MediaSampleAVFObjC::sizeInBytes(PAL **this, opaqueCMSampleBuffer *a2)
{
  return PAL::softLinkCoreMediaCMSampleBufferGetTotalSampleSize(this[2], a2) + 1330;
}

uint64_t WebCore::MediaSampleAVFObjC::platformSample@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(this + 16);
  return this;
}

uint64_t WebCore::MediaSampleAVFObjC::flags(PAL **this, uint64_t a2, unsigned __int8 a3)
{
  unsigned int v4;
  unsigned __int8 v5;
  const __CFArray *SampleAttachmentsArray;
  unsigned __int8 v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  BOOL v11;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v14;
  CFTypeID v15;
  uint64_t v16;
  const __CFArray *v17;
  CFIndex v18;
  const __CFDictionary *v19;
  const __CFDictionary *v20;
  CFTypeID v21;

  v4 = 8 * (PAL::softLinkCoreMediaCMSampleBufferGetSampleAttachmentsArray(this[2], 0, a3) != 0);
  SampleAttachmentsArray = (const __CFArray *)PAL::softLinkCoreMediaCMSampleBufferGetSampleAttachmentsArray(this[2], 0, v5);
  if (!SampleAttachmentsArray)
    goto LABEL_11;
  v8 = SampleAttachmentsArray;
  Count = CFArrayGetCount(SampleAttachmentsArray);
  if (Count < 1)
    goto LABEL_11;
  v10 = Count;
  v11 = 0;
  for (i = 0; i != v10; v11 = i >= v10)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, i);
    v14 = ValueAtIndex;
    if (ValueAtIndex)
    {
      v15 = CFGetTypeID(ValueAtIndex);
      if (v15 != CFDictionaryGetTypeID())
      {
LABEL_24:
        __break(0xC471u);
        JUMPOUT(0x195253214);
      }
    }
    if (PAL::get_CoreMedia_kCMSampleAttachmentKey_NotSync(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMSampleAttachmentKey_NotSync(void)::once, &__block_literal_global_141);
    if (CFDictionaryContainsKey(v14, (const void *)PAL::get_CoreMedia_kCMSampleAttachmentKey_NotSync(void)::constantCoreMediakCMSampleAttachmentKey_NotSync))
    {
      break;
    }
    ++i;
  }
  if (v11)
LABEL_11:
    v4 |= 1u;
  v16 = PAL::softLinkCoreMediaCMSampleBufferGetSampleAttachmentsArray(this[2], 0, v7);
  if (v16)
  {
    v17 = (const __CFArray *)v16;
    v18 = 0;
    while (v18 < CFArrayGetCount(v17))
    {
      v19 = (const __CFDictionary *)CFArrayGetValueAtIndex(v17, v18);
      v20 = v19;
      if (v19)
      {
        v21 = CFGetTypeID(v19);
        if (v21 != CFDictionaryGetTypeID())
          goto LABEL_24;
      }
      if (PAL::get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplay(void)::once != -1)
        dispatch_once(&PAL::get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplay(void)::once, &__block_literal_global_138_0);
      ++v18;
      if (CFDictionaryContainsKey(v20, (const void *)PAL::get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplay(void)::constantCoreMediakCMSampleAttachmentKey_DoNotDisplay))
      {
        v4 |= 2u;
        break;
      }
    }
  }
  if (*((_DWORD *)this + 23))
    return v4 | 0x10;
  else
    return v4;
}

float WebCore::MediaSampleAVFObjC::presentationSize(PAL **this, opaqueCMSampleBuffer *a2)
{
  PAL *FormatDescription;
  const opaqueCMFormatDescription *v3;
  int v4;
  unsigned __int8 v5;
  float result;

  FormatDescription = (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetFormatDescription(this[2], a2);
  v4 = PAL::softLinkCoreMediaCMFormatDescriptionGetMediaType[0](FormatDescription, v3);
  result = 0.0;
  if (v4 == 1986618469)
    return PAL::softLinkCoreMediaCMVideoFormatDescriptionGetPresentationDimensions(FormatDescription, (const opaqueCMFormatDescription *)1, 1u, v5);
  return result;
}

void WebCore::MediaSampleAVFObjC::offsetTimestampsBy(WebCore::MediaSampleAVFObjC *this, const WTF::MediaTime *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t *v6;
  unsigned int value;
  unint64_t v8;
  uint64_t v9;
  opaqueCMSampleBuffer *v10;
  WTF *v11;
  void *v12;
  opaqueCMSampleBuffer **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  PAL *v17;
  uint64_t v18;
  int v19;
  int v20;
  double v21;
  __int128 v22;
  PAL *v23;
  uint64_t v24;
  int v25;
  int v26;
  double v27;
  __int128 v28;
  int v29;
  char v30;
  const void *v31;
  PAL *v32;
  uint64_t v33;
  CMSampleTimingInfo v34;

  v34.presentationTimeStamp.value = 0;
  if (!PAL::softLinkCoreMediaCMSampleBufferGetSampleTimingInfoArray(*((PAL **)this + 2), 0, 0, (CMSampleTimingInfo *)&v34.presentationTimeStamp, a5))
  {
    value = v34.presentationTimeStamp.value;
    if (v34.presentationTimeStamp.value)
    {
      v8 = 16;
      if (v34.presentationTimeStamp.value > 0x10uLL)
        v8 = v34.presentationTimeStamp.value;
      if (v8 >= 0x38E38E4)
      {
        __break(0xC471u);
        return;
      }
      v9 = WTF::fastMalloc((WTF *)(72 * v8));
      v10 = (opaqueCMSampleBuffer *)v34.presentationTimeStamp.value;
      v11 = (WTF *)v9;
    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
    if (!PAL::softLinkCoreMediaCMSampleBufferGetSampleTimingInfoArray(*((PAL **)this + 2), v10, (uint64_t)v11, 0, v6))
    {
      v14 = value;
      if (value)
      {
        v15 = 0;
        v16 = 72 * v14;
        do
        {
          v17 = (PAL *)WTF::MediaTime::operator+();
          v32 = v17;
          v33 = v18;
          if ((v18 & 0x2000000000) != 0)
          {
            WTF::MediaTime::toDouble((WTF::MediaTime *)&v32);
            PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)v33, v21, v20);
          }
          else
          {
            PAL::softLinkCoreMediaCMTimeMake(v17, v18, v19);
          }
          v34.duration.flags = v34.duration.flags & 0xFFFFFFFE | BYTE4(v33) & 1 | BYTE4(v33) & 0xE;
          v22 = *(_OWORD *)&v34.duration.value;
          *(_QWORD *)((char *)v11 + v15 + 40) = v34.duration.epoch;
          *(_OWORD *)((char *)v11 + v15 + 24) = v22;
          v23 = (PAL *)WTF::MediaTime::operator+();
          v32 = v23;
          v33 = v24;
          if ((v24 & 0x2000000000) != 0)
          {
            WTF::MediaTime::toDouble((WTF::MediaTime *)&v32);
            PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)v33, v27, v26);
          }
          else
          {
            PAL::softLinkCoreMediaCMTimeMake(v23, v24, v25);
          }
          v34.duration.flags = v34.duration.flags & 0xFFFFFFFE | BYTE4(v33) & 1 | BYTE4(v33) & 0xE;
          v28 = *(_OWORD *)&v34.duration.value;
          *(_QWORD *)((char *)v11 + v15 + 64) = v34.duration.epoch;
          *(_OWORD *)((char *)v11 + v15 + 48) = v28;
          v15 += 72;
        }
        while (v16 != v15);
      }
      v34.duration.value = 0;
      if (!PAL::softLinkCoreMediaCMSampleBufferCreateCopyWithNewTiming((PAL *)*MEMORY[0x1E0C9AE00], *((const __CFAllocator **)this + 2), (opaqueCMSampleBuffer *)v34.presentationTimeStamp.value, (uint64_t)v11, &v34, v13))
      {
        *((_QWORD *)this + 4) = WTF::MediaTime::operator+();
        *((_DWORD *)this + 10) = v29;
        *((_BYTE *)this + 44) = v30;
        *((_QWORD *)this + 6) = WTF::MediaTime::operator+();
        *((_DWORD *)this + 14) = (_DWORD)v12;
        *((_BYTE *)this + 60) = BYTE4(v12);
        v31 = (const void *)*((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v34.duration.value;
        if (v31)
          CFRelease(v31);
      }
    }
    if (v11)
      WTF::fastFree(v11, v12);
  }
}

void sub_195253620(_Unwind_Exception *exception_object, void *a2)
{
  WTF *v2;

  if (v2)
    WTF::fastFree(v2, a2);
  _Unwind_Resume(exception_object);
}

void WebCore::MediaSampleAVFObjC::setTimestamps(WebCore::MediaSampleAVFObjC *this, const WTF::MediaTime *a2, const WTF::MediaTime *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t *v8;
  unsigned int value;
  unint64_t v10;
  uint64_t v11;
  opaqueCMSampleBuffer *v12;
  WTF *v13;
  void *v14;
  int v15;
  opaqueCMSampleBuffer **v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  double v21;
  __int128 v22;
  int v23;
  double v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  CMSampleTimingInfo v29;

  v29.presentationTimeStamp.value = 0;
  if (!PAL::softLinkCoreMediaCMSampleBufferGetSampleTimingInfoArray(*((PAL **)this + 2), 0, 0, (CMSampleTimingInfo *)&v29.presentationTimeStamp, a5))
  {
    value = v29.presentationTimeStamp.value;
    if (v29.presentationTimeStamp.value)
    {
      v10 = 16;
      if (v29.presentationTimeStamp.value > 0x10uLL)
        v10 = v29.presentationTimeStamp.value;
      if (v10 >= 0x38E38E4)
      {
        __break(0xC471u);
        return;
      }
      v11 = WTF::fastMalloc((WTF *)(72 * v10));
      v12 = (opaqueCMSampleBuffer *)v29.presentationTimeStamp.value;
      v13 = (WTF *)v11;
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
    if (!PAL::softLinkCoreMediaCMSampleBufferGetSampleTimingInfoArray(*((PAL **)this + 2), v12, (uint64_t)v13, 0, v8))
    {
      if (value)
      {
        v17 = 72 * value;
        v18 = (char *)v13 + 48;
        do
        {
          if ((*((_BYTE *)a2 + 12) & 0x20) != 0)
          {
            WTF::MediaTime::toDouble(a2);
            PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)*((unsigned int *)a2 + 2), v21, v20);
          }
          else
          {
            PAL::softLinkCoreMediaCMTimeMake(*(PAL **)a2, *((unsigned int *)a2 + 2), v15);
          }
          v29.duration.flags = v29.duration.flags & 0xFFFFFFFE | *((_BYTE *)a2 + 12) & 1 | *((_BYTE *)a2 + 12) & 0xE;
          v22 = *(_OWORD *)&v29.duration.value;
          *((_QWORD *)v18 - 1) = v29.duration.epoch;
          *(_OWORD *)(v18 - 24) = v22;
          if ((*((_BYTE *)a3 + 12) & 0x20) != 0)
          {
            WTF::MediaTime::toDouble(a3);
            PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)*((unsigned int *)a3 + 2), v24, v23);
          }
          else
          {
            PAL::softLinkCoreMediaCMTimeMake(*(PAL **)a3, *((unsigned int *)a3 + 2), v19);
          }
          v29.duration.flags = v29.duration.flags & 0xFFFFFFFE | *((_BYTE *)a3 + 12) & 1 | *((_BYTE *)a3 + 12) & 0xE;
          v25 = *(_OWORD *)&v29.duration.value;
          *((_QWORD *)v18 + 2) = v29.duration.epoch;
          *(_OWORD *)v18 = v25;
          v18 += 72;
          v17 -= 72;
        }
        while (v17);
      }
      v29.duration.value = 0;
      if (!PAL::softLinkCoreMediaCMSampleBufferCreateCopyWithNewTiming((PAL *)*MEMORY[0x1E0C9AE00], *((const __CFAllocator **)this + 2), (opaqueCMSampleBuffer *)v29.presentationTimeStamp.value, (uint64_t)v13, &v29, v16))
      {
        v26 = *(_QWORD *)a2;
        *(_QWORD *)((char *)this + 37) = *(_QWORD *)((char *)a2 + 5);
        *((_QWORD *)this + 4) = v26;
        v27 = *(_QWORD *)((char *)a3 + 5);
        *((_QWORD *)this + 6) = *(_QWORD *)a3;
        *(_QWORD *)((char *)this + 53) = v27;
        v28 = (const void *)*((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v29.duration.value;
        if (v28)
          CFRelease(v28);
      }
    }
    if (v13)
      WTF::fastFree(v13, v14);
  }
}

void sub_195253878(_Unwind_Exception *exception_object, void *a2)
{
  WTF *v2;

  if (v2)
    WTF::fastFree(v2, a2);
  _Unwind_Resume(exception_object);
}

BOOL WebCore::MediaSampleAVFObjC::isDivisable(PAL **this, opaqueCMSampleBuffer *a2)
{
  uint64_t *v3;

  return PAL::softLinkCoreMediaCMSampleBufferGetNumSamples(this[2], a2) != 1
      && PAL::softLinkCoreMediaCMSampleBufferGetSampleSizeArray(this[2], 0, 0, 0, v3) != -12735;
}

void WebCore::MediaSampleAVFObjC::divide(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, WebCore::MediaSampleAVFObjC **a4@<X8>)
{
  uint64_t v7;
  opaqueCMSampleBuffer *v8;
  uint64_t NumSamples;
  opaqueCMSampleBuffer **v10;
  CFRange v11;
  uint64_t v12;
  PAL *v13;
  opaqueCMSampleBuffer **v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  void *v19;
  void *v20;
  uint64_t v21;
  WebCore::MediaSampleAVFObjC *v22;
  uint64_t v23;
  WebCore::MediaSampleAVFObjC *v24;
  void *v25;
  void *v26;
  _QWORD v27[7];
  opaqueCMSampleBuffer *v28;
  char v29;
  CFRange v30;

  v29 = a3;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1) & 1) == 0)
    goto LABEL_5;
  v28 = 0;
  v7 = *(_QWORD *)(a1 + 16);
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3321888768;
  v27[2] = ___ZN7WebCore18MediaSampleAVFObjC6divideERKN3WTF9MediaTimeENS_11MediaSample10UseEndTimeE_block_invoke;
  v27[3] = &__block_descriptor_56_e8_32c95_ZTSKZN7WebCore18MediaSampleAVFObjC6divideERKN3WTF9MediaTimeENS_11MediaSample10UseEndTimeEE3__0_e34_i24__0__opaqueCMSampleBuffer__8q16l;
  v27[4] = &v29;
  v27[5] = a2;
  v27[6] = &v28;
  PAL::softLinkCoreMediaCMSampleBufferCallBlockForEachSample(v7, v27);
  if (v28)
  {
    NumSamples = PAL::softLinkCoreMediaCMSampleBufferGetNumSamples(*(PAL **)(a1 + 16), v8);
    v11.location = (CFIndex)v28;
    if ((uint64_t)v28 >= NumSamples)
    {
      v17 = (unsigned int *)(a1 + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      *a4 = (WebCore::MediaSampleAVFObjC *)a1;
      a4[1] = 0;
    }
    else
    {
      v12 = NumSamples;
      v26 = 0;
      v13 = (PAL *)*MEMORY[0x1E0C9AE00];
      v11.length = (CFIndex)&v26;
      if (PAL::softLinkCoreMediaCMSampleBufferCopySampleBufferForRange((PAL *)*MEMORY[0x1E0C9AE00], *(const __CFAllocator **)(a1 + 16), 0, v11, v10))
      {
LABEL_5:
        *a4 = 0;
        a4[1] = 0;
        return;
      }
      v19 = v26;
      v25 = 0;
      v30.location = v12 - (_QWORD)v28;
      v30.length = (CFIndex)&v25;
      if (PAL::softLinkCoreMediaCMSampleBufferCopySampleBufferForRange(v13, *(const __CFAllocator **)(a1 + 16), v28, v30, v14))
      {
        *a4 = 0;
        a4[1] = 0;
      }
      else
      {
        v20 = v25;
        v21 = *(_QWORD *)(a1 + 24);
        v22 = (WebCore::MediaSampleAVFObjC *)WTF::fastMalloc((WTF *)0x60);
        WebCore::MediaSampleAVFObjC::MediaSampleAVFObjC(v22, v19, v21);
        v23 = *(_QWORD *)(a1 + 24);
        v24 = (WebCore::MediaSampleAVFObjC *)WTF::fastMalloc((WTF *)0x60);
        WebCore::MediaSampleAVFObjC::MediaSampleAVFObjC(v24, v20, v23);
        *a4 = v22;
        a4[1] = v24;
        if (v20)
          CFRelease(v20);
      }
      if (v19)
        CFRelease(v19);
    }
  }
  else
  {
    *a4 = 0;
    v15 = (unsigned int *)(a1 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    a4[1] = (WebCore::MediaSampleAVFObjC *)a1;
  }
}

void sub_195253AD4(_Unwind_Exception *a1, void *a2)
{
  const void *v2;
  WTF *v3;
  const void *v4;
  unsigned int *v5;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  WTF::fastFree(v3, a2);
  v7 = v5 + 2;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (v9)
  {
    if (!v4)
      goto LABEL_5;
  }
  else
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    if (!v4)
    {
LABEL_5:
      if (!v2)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  CFRelease(v4);
  if (!v2)
LABEL_7:
    _Unwind_Resume(a1);
LABEL_6:
  CFRelease(v2);
  goto LABEL_7;
}

void sub_195253B68()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x195253B10);
  JUMPOUT(0x195253B08);
}

uint64_t ___ZN7WebCore18MediaSampleAVFObjC6divideERKN3WTF9MediaTimeENS_11MediaSample10UseEndTimeE_block_invoke(uint64_t a1, PAL *a2)
{
  opaqueCMSampleBuffer *v4;
  opaqueCMSampleBuffer *v5;
  CMTime *v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  _BOOL4 v11;
  char v12;
  BOOL v13;
  CMTimeValue v14;
  uint64_t result;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  _BOOL4 v20;
  char v21;
  BOOL v22;
  CMTimeValue v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  _BYTE v27[64];
  CMTime v28;
  CMTime v29;

  memset(&v27[32], 0, 24);
  PAL::softLinkCoreMediaCMSampleBufferGetOutputPresentationTimeStamp(a2, a2);
  if (!((unsigned __int128)0 >> 96))
  {
    PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0](a2, v4);
    *(CMTime *)&v27[32] = v29;
  }
  if (!**(_BYTE **)(a1 + 32))
  {
    v16 = *(unsigned int *)&v27[40];
    v17 = v27[44] & 1;
    if ((~*(_DWORD *)&v27[44] & 3) == 0)
      v17 = v27[44] & 1 | 2;
    if ((~*(_DWORD *)&v27[44] & 5) == 0)
      v17 |= 4u;
    if ((~*(_DWORD *)&v27[44] & 9) == 0)
      v17 |= 8u;
    if ((~*(_DWORD *)&v27[44] & 0x11) != 0)
      v18 = v17;
    else
      v18 = v17 | 0x10;
    v20 = (v18 & 1) == 0 || *(unsigned int *)&v27[40] != 0;
    if (*(uint64_t *)&v27[32] >= 0)
      v21 = 5;
    else
      v21 = 9;
    v22 = !v20;
    if (v20)
    {
      v23 = *(_QWORD *)&v27[32];
    }
    else
    {
      v18 = v21;
      v23 = *(uint64_t *)&v27[32] >> 63;
    }
    if (v22)
      v16 = 1;
    v29.value = v23;
    *(_QWORD *)&v29.timescale = v16 | ((unint64_t)v18 << 32);
    if ((WTF::MediaTime::compare((WTF::MediaTime *)&v29, *(const WTF::MediaTime **)(a1 + 40)) & 0x80000000) == 0)
      return 1;
    goto LABEL_58;
  }
  memset(v27, 0, 24);
  PAL::softLinkCoreMediaCMSampleBufferGetOutputDuration[0](a2, v4);
  if (!((unsigned __int128)0 >> 96))
  {
    PAL::softLinkCoreMediaCMSampleBufferGetDuration[0](a2, v5);
    *(CMTime *)v27 = v29;
  }
  v29 = *(CMTime *)&v27[32];
  v28 = *(CMTime *)v27;
  PAL::softLinkCoreMediaCMTimeAdd[0]((PAL *)&v29, &v28, v6);
  v7 = v25;
  v8 = v26 & 1;
  if ((~v26 & 3) == 0)
    v8 = v26 & 1 | 2;
  if ((~v26 & 5) == 0)
    v8 |= 4u;
  if ((~v26 & 9) == 0)
    v8 |= 8u;
  if ((~v26 & 0x11) != 0)
    v9 = v8;
  else
    v9 = v8 | 0x10;
  v11 = (v9 & 1) == 0 || v25 != 0;
  if (v24 >= 0)
    v12 = 5;
  else
    v12 = 9;
  v13 = !v11;
  if (v11)
  {
    v14 = v24;
  }
  else
  {
    v9 = v12;
    v14 = v24 >> 63;
  }
  if (v13)
    v7 = 1;
  v29.value = v14;
  *(_QWORD *)&v29.timescale = v7 | ((unint64_t)v9 << 32);
  result = WTF::MediaTime::compare((WTF::MediaTime *)&v29, *(const WTF::MediaTime **)(a1 + 40));
  if ((_DWORD)result != 1)
  {
LABEL_58:
    result = 0;
    ++**(_QWORD **)(a1 + 48);
  }
  return result;
}

__n128 __copy_helper_block_e8_32c95_ZTSKZN7WebCore18MediaSampleAVFObjC6divideERKN3WTF9MediaTimeENS_11MediaSample10UseEndTimeEE3__0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  a1[2] = result;
  return result;
}

void WebCore::MediaSampleAVFObjC::createNonDisplayingCopy(const __CFAllocator **this@<X0>, opaqueCMSampleBuffer **a2@<X3>, WebCore::MediaSampleAVFObjC **a3@<X8>)
{
  opaqueCMSampleBuffer *v5;
  PAL *FormatDescription;
  const opaqueCMFormatDescription *v7;
  unsigned __int8 v8;
  uint64_t *v9;
  const void *v10;
  const __CFArray *SampleAttachmentsArray;
  const __CFArray *v12;
  CFIndex v13;
  const void *v14;
  __CFDictionary *ValueAtIndex;
  __CFDictionary *v16;
  CFTypeID v17;
  PAL *v18;
  uint64_t v19;
  WebCore::MediaSampleAVFObjC *v20;
  PAL *v21;

  v21 = 0;
  PAL::softLinkCoreMediaCMSampleBufferCreateCopy((PAL *)*MEMORY[0x1E0C9AE00], this[2], (opaqueCMSampleBuffer *)&v21, a2);
  FormatDescription = (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetFormatDescription(this[2], v5);
  if (PAL::softLinkCoreMediaCMFormatDescriptionGetMediaType[0](FormatDescription, v7) == 1936684398)
  {
    if (PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_TrimDurationAtStart(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_TrimDurationAtStart(void)::once, &__block_literal_global_177_0);
    v9 = &PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_TrimDurationAtStart(void)::constantCoreMediakCMSampleBufferAttachmentKey_TrimDurationAtStart;
  }
  else
  {
    if (PAL::get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplay(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplay(void)::once, &__block_literal_global_138_0);
    v9 = &PAL::get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplay(void)::constantCoreMediakCMSampleAttachmentKey_DoNotDisplay;
  }
  v10 = (const void *)*v9;
  SampleAttachmentsArray = (const __CFArray *)PAL::softLinkCoreMediaCMSampleBufferGetSampleAttachmentsArray(v21, (opaqueCMSampleBuffer *)1, v8);
  if (SampleAttachmentsArray)
  {
    v12 = SampleAttachmentsArray;
    if (CFArrayGetCount(SampleAttachmentsArray) >= 1)
    {
      v13 = 0;
      v14 = (const void *)*MEMORY[0x1E0C9AE50];
      do
      {
        ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(v12, v13);
        v16 = ValueAtIndex;
        if (ValueAtIndex)
        {
          v17 = CFGetTypeID(ValueAtIndex);
          if (v17 != CFDictionaryGetTypeID())
          {
            __break(0xC471u);
            JUMPOUT(0x195253F90);
          }
        }
        CFDictionarySetValue(v16, v10, v14);
        ++v13;
      }
      while (v13 < CFArrayGetCount(v12));
    }
  }
  v18 = v21;
  v19 = (uint64_t)this[3];
  v20 = (WebCore::MediaSampleAVFObjC *)WTF::fastMalloc((WTF *)0x60);
  WebCore::MediaSampleAVFObjC::MediaSampleAVFObjC(v20, v18, v19);
  *a3 = v20;
  if (v18)
    CFRelease(v18);
}

void sub_195253FC4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  const void *v3;

  WTF::fastFree(v2, a2);
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaSampleAVFObjC::isHomogeneous(PAL **this, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  const __CFArray *SampleAttachmentsArray;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v9;
  CFTypeID v10;
  int v11;
  int v12;
  CFIndex v13;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  CFTypeID v16;

  v3 = 1;
  SampleAttachmentsArray = (const __CFArray *)PAL::softLinkCoreMediaCMSampleBufferGetSampleAttachmentsArray(this[2], (opaqueCMSampleBuffer *)1, a3);
  if (SampleAttachmentsArray)
  {
    v5 = SampleAttachmentsArray;
    Count = CFArrayGetCount(SampleAttachmentsArray);
    if (Count >= 2)
    {
      v7 = Count;
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, 0);
      v9 = ValueAtIndex;
      if (ValueAtIndex)
      {
        v10 = CFGetTypeID(ValueAtIndex);
        if (v10 != CFDictionaryGetTypeID())
        {
LABEL_22:
          __break(0xC471u);
          JUMPOUT(0x1952541CCLL);
        }
      }
      if (PAL::get_CoreMedia_kCMSampleAttachmentKey_NotSync(void)::once != -1)
        dispatch_once(&PAL::get_CoreMedia_kCMSampleAttachmentKey_NotSync(void)::once, &__block_literal_global_141);
      v11 = CFDictionaryContainsKey(v9, (const void *)PAL::get_CoreMedia_kCMSampleAttachmentKey_NotSync(void)::constantCoreMediakCMSampleAttachmentKey_NotSync);
      if (PAL::get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplay(void)::once != -1)
        dispatch_once(&PAL::get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplay(void)::once, &__block_literal_global_138_0);
      v12 = CFDictionaryContainsKey(v9, (const void *)PAL::get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplay(void)::constantCoreMediakCMSampleAttachmentKey_DoNotDisplay);
      v13 = 1;
      while (1)
      {
        v14 = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v13);
        v15 = v14;
        if (v14)
        {
          v16 = CFGetTypeID(v14);
          if (v16 != CFDictionaryGetTypeID())
            goto LABEL_22;
        }
        if (PAL::get_CoreMedia_kCMSampleAttachmentKey_NotSync(void)::once != -1)
          dispatch_once(&PAL::get_CoreMedia_kCMSampleAttachmentKey_NotSync(void)::once, &__block_literal_global_141);
        if ((v11 == 0) != (CFDictionaryContainsKey(v15, (const void *)PAL::get_CoreMedia_kCMSampleAttachmentKey_NotSync(void)::constantCoreMediakCMSampleAttachmentKey_NotSync) == 0))return 0;
        if (PAL::get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplay(void)::once != -1)
          dispatch_once(&PAL::get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplay(void)::once, &__block_literal_global_138_0);
        if ((v12 == 0) == (CFDictionaryContainsKey(v15, (const void *)PAL::get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplay(void)::constantCoreMediakCMSampleAttachmentKey_DoNotDisplay) != 0))return 0;
        if (v7 == ++v13)
          return 1;
      }
    }
  }
  return v3;
}

WTF *WebCore::MediaSampleAVFObjC::divideIntoHomogeneousSamples@<X0>(PAL **this@<X0>, unsigned __int8 a2@<W2>, WTF **a3@<X8>)
{
  const __CFArray *SampleAttachmentsArray;
  const __CFArray *v6;
  CFIndex Count;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  WTF *result;
  CFIndex v13;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v15;
  CFTypeID v16;
  int v17;
  WTF *v18;
  unsigned int v19;
  WTF *v20;
  CFIndex v21;
  uint64_t v22;
  const __CFDictionary *v23;
  const __CFDictionary *v24;
  CFTypeID v25;
  void *v26;
  char *v27;
  int v28;
  char *v29;
  PAL **v30;
  int v31;
  uint64_t v32;
  WTF *v33;
  opaqueCMSampleBuffer **v34;
  WTF *v35;
  WTF *v36;
  PAL *v37;
  int v38;
  void *v39;
  uint64_t v41;
  WebCore::MediaSampleAVFObjC *v42;
  uint64_t v43;
  char *v44;
  WTF *v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  WTF *v53;
  WTF *v54;
  WTF *v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  WTF *v60;
  WTF *v61;
  WTF **v62;
  PAL **v63;
  int v64;
  unsigned int *v65;
  void *v66;
  WTF *v67[2];
  WTF *v68;
  uint64_t v69;
  CFRange v70;

  SampleAttachmentsArray = (const __CFArray *)PAL::softLinkCoreMediaCMSampleBufferGetSampleAttachmentsArray(this[2], (opaqueCMSampleBuffer *)1, a2);
  if (!SampleAttachmentsArray)
  {
    v10 = (unsigned int *)(this + 1);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    goto LABEL_8;
  }
  v6 = SampleAttachmentsArray;
  Count = CFArrayGetCount(SampleAttachmentsArray);
  if (Count <= 1)
  {
    v8 = (unsigned int *)(this + 1);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
LABEL_8:
    *a3 = 0;
    a3[1] = 0;
    result = (WTF *)WTF::fastMalloc((WTF *)8);
    *a3 = result;
    a3[1] = (WTF *)0x100000001;
    *(_QWORD *)result = this;
    return result;
  }
  v13 = Count;
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, 0);
  v15 = ValueAtIndex;
  if (ValueAtIndex)
  {
    v16 = CFGetTypeID(ValueAtIndex);
    if (v16 != CFDictionaryGetTypeID())
    {
      __break(0xC471u);
      JUMPOUT(0x19525478CLL);
    }
  }
  if (PAL::get_CoreMedia_kCMSampleAttachmentKey_NotSync(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMSampleAttachmentKey_NotSync(void)::once, &__block_literal_global_141);
  v17 = CFDictionaryContainsKey(v15, (const void *)PAL::get_CoreMedia_kCMSampleAttachmentKey_NotSync(void)::constantCoreMediakCMSampleAttachmentKey_NotSync);
  v62 = a3;
  v63 = this;
  if (PAL::get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplay(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplay(void)::once, &__block_literal_global_138_0);
  v64 = CFDictionaryContainsKey(v15, (const void *)PAL::get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplay(void)::constantCoreMediakCMSampleAttachmentKey_DoNotDisplay);
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v68 = 0;
  v69 = 0;
  v21 = 1;
  v22 = 1;
  do
  {
    v23 = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v21);
    v24 = v23;
    if (v23)
    {
      v25 = CFGetTypeID(v23);
      if (v25 != CFDictionaryGetTypeID())
        goto LABEL_71;
    }
    if (PAL::get_CoreMedia_kCMSampleAttachmentKey_NotSync(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMSampleAttachmentKey_NotSync(void)::once, &__block_literal_global_141);
    if ((v17 == 0) != (CFDictionaryContainsKey(v24, (const void *)PAL::get_CoreMedia_kCMSampleAttachmentKey_NotSync(void)::constantCoreMediakCMSampleAttachmentKey_NotSync) == 0))goto LABEL_24;
    if (PAL::get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplay(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplay(void)::once, &__block_literal_global_138_0);
    if ((v64 != 0) != (CFDictionaryContainsKey(v24, (const void *)PAL::get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplay(void)::constantCoreMediakCMSampleAttachmentKey_DoNotDisplay) != 0))
    {
LABEL_24:
      v67[0] = v20;
      v67[1] = (WTF *)v22;
      if (v19 == (_DWORD)v69)
      {
        v27 = WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v68, v19 + 1, (unint64_t)v67);
        v28 = HIDWORD(v69);
        v18 = v68;
        *((_OWORD *)v68 + HIDWORD(v69)) = *(_OWORD *)v27;
      }
      else
      {
        *((_OWORD *)v18 + v19) = *(_OWORD *)v67;
        v28 = HIDWORD(v69);
      }
      v22 = 0;
      v19 = v28 + 1;
      HIDWORD(v69) = v28 + 1;
      v20 = (WTF *)v21;
    }
    ++v21;
    ++v22;
  }
  while (v13 != v21);
  v67[0] = v20;
  v67[1] = (WTF *)v22;
  if (v19 == (_DWORD)v69)
  {
    v29 = WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v68, v19 + 1, (unint64_t)v67);
    v30 = v63;
    v31 = HIDWORD(v69);
    *((_OWORD *)v68 + HIDWORD(v69)) = *(_OWORD *)v29;
  }
  else
  {
    *((_OWORD *)v18 + v19) = *(_OWORD *)v67;
    v31 = HIDWORD(v69);
    v30 = v63;
  }
  v32 = (v31 + 1);
  HIDWORD(v69) = v31 + 1;
  if (v31)
  {
    v67[0] = 0;
    v67[1] = 0;
    if (v31 == -1)
    {
      v60 = 0;
      v61 = 0;
LABEL_63:
      *v62 = v60;
      v62[1] = v61;
    }
    else
    {
      if (v32 >> 29)
      {
LABEL_71:
        __break(0xC471u);
        JUMPOUT(0x19525473CLL);
      }
      v33 = (WTF *)WTF::fastMalloc((WTF *)(8 * v32));
      LODWORD(v67[1]) = v32;
      v67[0] = v33;
      v35 = v68;
      v36 = (WTF *)((char *)v68 + 16 * v32);
      v37 = (PAL *)*MEMORY[0x1E0C9AE00];
      while (1)
      {
        v66 = 0;
        v70.location = *((_QWORD *)v35 + 1);
        v70.length = (CFIndex)&v66;
        v38 = PAL::softLinkCoreMediaCMSampleBufferCopySampleBufferForRange(v37, v30[2], *(opaqueCMSampleBuffer **)v35, v70, v34);
        v39 = v66;
        if (v38 || v66 == 0)
          break;
        v41 = (uint64_t)v30[3];
        v42 = (WebCore::MediaSampleAVFObjC *)WTF::fastMalloc((WTF *)0x60);
        WebCore::MediaSampleAVFObjC::MediaSampleAVFObjC(v42, v39, v41);
        v65 = (unsigned int *)v42;
        LODWORD(v43) = HIDWORD(v67[1]);
        if (HIDWORD(v67[1]) == LODWORD(v67[1]))
        {
          v44 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v67, HIDWORD(v67[1]) + 1, (unint64_t)&v65);
          v43 = HIDWORD(v67[1]);
          v45 = v67[0];
          v46 = *(_QWORD *)v44;
          *(_QWORD *)v44 = 0;
          *((_QWORD *)v45 + v43) = v46;
        }
        else
        {
          v65 = 0;
          *((_QWORD *)v67[0] + HIDWORD(v67[1])) = v42;
        }
        HIDWORD(v67[1]) = v43 + 1;
        v47 = v65;
        v65 = 0;
        if (v47)
        {
          v48 = v47 + 2;
          do
          {
            v49 = __ldaxr(v48);
            v50 = v49 - 1;
          }
          while (__stlxr(v50, v48));
          if (!v50)
          {
            atomic_store(1u, v47 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 8))(v47);
          }
        }
        CFRelease(v39);
        v35 = (WTF *)((char *)v35 + 16);
        if (v35 == v36)
        {
          v60 = v67[0];
          v61 = v67[1];
          goto LABEL_63;
        }
      }
      *v62 = 0;
      v62[1] = 0;
      v54 = v67[0];
      if (HIDWORD(v67[1]))
      {
        v55 = (WTF *)((char *)v67[0] + 8 * HIDWORD(v67[1]));
        do
        {
          v56 = *(unsigned int **)v54;
          *(_QWORD *)v54 = 0;
          if (v56)
          {
            v57 = v56 + 2;
            do
            {
              v58 = __ldaxr(v57);
              v59 = v58 - 1;
            }
            while (__stlxr(v59, v57));
            if (!v59)
            {
              atomic_store(1u, v56 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 8))(v56);
            }
          }
          v54 = (WTF *)((char *)v54 + 8);
        }
        while (v54 != v55);
        v54 = v67[0];
      }
      if (v54)
      {
        v67[0] = 0;
        LODWORD(v67[1]) = 0;
        WTF::fastFree(v54, v26);
      }
    }
  }
  else
  {
    v51 = (unsigned int *)(v30 + 1);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 + 1, v51));
    *v62 = 0;
    v62[1] = 0;
    v53 = (WTF *)WTF::fastMalloc((WTF *)8);
    *v62 = v53;
    v62[1] = (WTF *)0x100000001;
    *(_QWORD *)v53 = v30;
  }
  result = v68;
  if (v68)
    return (WTF *)WTF::fastFree(v68, v26);
  return result;
}

void sub_195254798(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF *a18)
{
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v21;
  unsigned int v22;

  if (v19)
  {
    do
    {
      v21 = __ldaxr(v18);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v18));
    if (!v22)
    {
      atomic_store(1u, v19 + 2);
      (*(void (**)(void))(*(_QWORD *)v19 + 8))();
    }
  }
  if (a18)
    WTF::fastFree(a18, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaSourcePrivateAVFObjC::create@<X0>(WebCore::MediaSourcePrivateAVFObjC *this@<X0>, WebCore::MediaPlayerPrivateMediaSourceAVFObjC *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  RefCountedSerialFunctionDispatcher *v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  uint64_t result;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  _QWORD v33[4];

  v7 = WTF::fastMalloc((WTF *)0x108);
  v8 = (RefCountedSerialFunctionDispatcher *)WTF::RunLoop::current((WTF::RunLoop *)v7);
  WebCore::MediaSourcePrivate::MediaSourcePrivate((WebCore::MediaSourcePrivate *)v7, a2, v8);
  *(_QWORD *)v7 = off_1E334D988;
  *(_QWORD *)(v7 + 160) = &unk_1E334DA40;
  v9 = *((_QWORD *)this + 6);
  if (v9)
    goto LABEL_42;
  v9 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = this;
  v11 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v9;
  if (!v11)
    goto LABEL_42;
  do
  {
    v12 = __ldaxr(v11);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v11));
  if (!v13)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, v10);
  }
  v9 = *((_QWORD *)this + 6);
  if (v9)
  {
LABEL_42:
    do
      v14 = __ldaxr((unsigned int *)v9);
    while (__stlxr(v14 + 1, (unsigned int *)v9));
  }
  *(_QWORD *)(v7 + 168) = v9;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_OWORD *)(v7 + 192) = 0u;
  *(_OWORD *)(v7 + 208) = 0u;
  v15 = *((_QWORD *)this + 61);
  v16 = (unsigned int *)(v15 + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  *(_QWORD *)(v7 + 224) = v15;
  v18 = *((_QWORD *)this + 62);
  *(_DWORD *)(v7 + 256) = 0;
  *(_QWORD *)(v7 + 232) = v18;
  *(_QWORD *)(v7 + 240) = 0;
  *(_QWORD *)(v7 + 248) = 0;
  v33[0] = "MediaSourcePrivateAVFObjC";
  v33[1] = 26;
  v33[2] = "MediaSourcePrivateAVFObjC";
  v33[3] = v18;
  if (*(_BYTE *)(v15 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v33);
    v18 = *(_QWORD *)(v7 + 232);
  }
  (*(void (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *, uint64_t))(*(_QWORD *)a2 + 40))(a2, v18);
  *a3 = v7;
  v19 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v19))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v19))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v19);
LABEL_16:
  ++*(_QWORD *)(v19 + 8);
  v21 = __ldxr((unsigned __int8 *)v19);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_20;
  }
  if (__stlxr(0, (unsigned __int8 *)v19))
LABEL_20:
    WTF::Lock::unlockSlow((WTF::Lock *)v19);
  v33[0] = v7;
  result = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *, _QWORD *))(*(_QWORD *)a2 + 16))(a2, v33);
  v24 = v33[0];
  v33[0] = 0;
  if (!v24)
    return result;
  v25 = *(_QWORD *)(v24 + 8);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_26;
  }
  result = MEMORY[0x19AEA534C](v25);
LABEL_26:
  v27 = *(_QWORD *)(v25 + 8);
  v28 = v27 - 1;
  *(_QWORD *)(v25 + 8) = v27 - 1;
  if (v27 == 1)
  {
    v32 = *(_QWORD *)(v25 + 16);
    v29 = *(_QWORD *)(v25 + 24);
    *(_QWORD *)(v25 + 24) = 0;
    v30 = v32 != 0;
  }
  else
  {
    v29 = 0;
    v30 = 1;
  }
  v31 = __ldxr((unsigned __int8 *)v25);
  if (v31 != 1)
  {
    __clrex();
LABEL_33:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v25);
    if (v28)
      return result;
    goto LABEL_34;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
    goto LABEL_33;
  if (v28)
    return result;
LABEL_34:
  if (v29)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  if (!v30)
    return WTF::fastFree((WTF *)v25, v23);
  return result;
}

void sub_195254BB8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  WebCore::MediaSourcePrivate *v9;
  WTF *v11;
  void *v12;

  WebCore::MediaSourcePrivate::~MediaSourcePrivate(v9, a2);
  WTF::fastFree(v11, v12);
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaSourcePrivateAVFObjC::logger(WebCore::MediaSourcePrivateAVFObjC *this)
{
  return *((_QWORD *)this + 28);
}

char *WebCore::MediaSourcePrivateAVFObjC::logChannel(WebCore::MediaSourcePrivateAVFObjC *this)
{
  return &WebCore::LogMediaSource;
}

const char *WebCore::MediaSourcePrivateAVFObjC::logClassName(WebCore::MediaSourcePrivateAVFObjC *this)
{
  return "MediaSourcePrivateAVFObjC";
}

uint64_t WebCore::MediaSourcePrivateAVFObjC::logIdentifier(WebCore::MediaSourcePrivateAVFObjC *this)
{
  return *((_QWORD *)this + 29);
}

void WebCore::MediaSourcePrivateAVFObjC::~MediaSourcePrivateAVFObjC(WebCore::MediaSourcePrivateAVFObjC *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  _DWORD *v19;
  WTF *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD v24[4];

  v2 = *((_QWORD *)this + 28);
  v3 = *((_QWORD *)this + 29);
  v24[0] = "MediaSourcePrivateAVFObjC";
  v24[1] = 26;
  v24[2] = "~MediaSourcePrivateAVFObjC";
  v24[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v24);
  WTF::MachSendRight::~MachSendRight((WebCore::MediaSourcePrivateAVFObjC *)((char *)this + 256));
  v5 = *((_QWORD *)this + 31);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)(v5 + 24 * i) != -1)
        {
          v8 = v5 + 24 * i;
          v11 = *(WTF **)(v8 + 8);
          v10 = v8 + 8;
          v9 = v11;
          v12 = *(unsigned int *)(v10 + 12);
          if ((_DWORD)v12)
          {
            v13 = 16 * v12;
            do
            {
              v14 = *(WTF **)v9;
              if (*(_QWORD *)v9)
              {
                *(_QWORD *)v9 = 0;
                *((_DWORD *)v9 + 2) = 0;
                WTF::fastFree(v14, v4);
              }
              v9 = (WTF *)((char *)v9 + 16);
              v13 -= 16;
            }
            while (v13);
            v9 = *(WTF **)v10;
          }
          if (v9)
          {
            *(_QWORD *)v10 = 0;
            *(_DWORD *)(v5 + 24 * i + 16) = 0;
            WTF::fastFree(v9, v4);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v5 - 16), v4);
  }
  v15 = (unsigned int *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
    }
  }
  v19 = (_DWORD *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[2];
  }
  v20 = (WTF *)*((_QWORD *)this + 24);
  if (v20)
  {
    *((_QWORD *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v20, v4);
  }
  v21 = (unsigned int *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v21)
  {
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v4);
    }
  }
  WebCore::MediaSourcePrivate::~MediaSourcePrivate(this, v4);
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaSourcePrivateAVFObjC::~MediaSourcePrivateAVFObjC(this);
  WTF::fastFree(v1, v2);
}

void sub_195255074(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _DWORD *v18;
  WTF *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v1 + 256));
  v4 = *(_QWORD *)(v1 + 248);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)(v4 + 24 * i) != -1)
        {
          v7 = v4 + 24 * i;
          v10 = *(WTF **)(v7 + 8);
          v9 = v7 + 8;
          v8 = v10;
          v11 = *(unsigned int *)(v9 + 12);
          if ((_DWORD)v11)
          {
            v12 = 16 * v11;
            do
            {
              v13 = *(WTF **)v8;
              if (*(_QWORD *)v8)
              {
                *(_QWORD *)v8 = 0;
                *((_DWORD *)v8 + 2) = 0;
                WTF::fastFree(v13, v3);
              }
              v8 = (WTF *)((char *)v8 + 16);
              v12 -= 16;
            }
            while (v12);
            v8 = *(WTF **)v9;
          }
          if (v8)
          {
            *(_QWORD *)v9 = 0;
            *(_DWORD *)(v4 + 24 * i + 16) = 0;
            WTF::fastFree(v8, v3);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v4 - 16), v3);
  }
  v14 = *(unsigned int **)(v1 + 224);
  *(_QWORD *)(v1 + 224) = 0;
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v14 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
    }
  }
  v18 = *(_DWORD **)(v1 + 216);
  *(_QWORD *)(v1 + 216) = 0;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
  }
  v19 = *(WTF **)(v1 + 192);
  if (v19)
  {
    *(_QWORD *)(v1 + 192) = 0;
    *(_DWORD *)(v1 + 200) = 0;
    WTF::fastFree(v19, v3);
  }
  v20 = *(unsigned int **)(v1 + 168);
  *(_QWORD *)(v1 + 168) = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, v3);
    }
  }
  WebCore::MediaSourcePrivate::~MediaSourcePrivate((WebCore::MediaSourcePrivate *)v1, v3);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'WebCore::MediaSourcePrivateAVFObjC::~MediaSourcePrivateAVFObjC(WebCore::MediaSourcePrivateAVFObjC *this)
{
  WebCore::MediaSourcePrivateAVFObjC::~MediaSourcePrivateAVFObjC((WebCore::MediaSourcePrivateAVFObjC *)((char *)this - 160));
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaSourcePrivateAVFObjC::~MediaSourcePrivateAVFObjC((WebCore::MediaSourcePrivateAVFObjC *)((char *)this - 160));
  WTF::fastFree(v1, v2);
}

void WebCore::MediaSourcePrivateAVFObjC::addSourceBuffer(uint64_t a1, WebCore::ContentType *a2, char a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v11;
  double v12;
  double v13;
  float v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  const WebCore::ContentType *v17;
  double v18;
  double v19;
  float v20;
  unsigned int isContentTypeSupported;
  const WebCore::ContentType *v22;
  unsigned int v23;
  double v24;
  double v25;
  float v26;
  const WebCore::ContentType *v27;
  WebCore::SourceBufferParserAVFObjC *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  void *v48;
  uint64_t *v49;
  WebCore::SourceBufferParserAVFObjC *v50;
  unsigned int *v51;
  unsigned int v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  WebCore::SourceBufferParserAVFObjC *v57;
  WebCore::SourceBufferParserAVFObjC *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  _QWORD v61[5];
  __int16 v62;
  char v63;
  _QWORD v64[2];
  _BYTE v65[24];
  _BYTE v66[96];
  _QWORD *v67;

  v8 = *(_QWORD *)(a1 + 224);
  v9 = *(_QWORD *)(a1 + 232);
  v59 = (WTF::StringImpl *)"MediaSourcePrivateAVFObjC";
  v60 = 26;
  v61[0] = "addSourceBuffer";
  v61[1] = v9;
  if (*(_BYTE *)(v8 + 12))
  {
    if (WebCore::LogMediaSource && byte_1ECE7CE70 >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::ContentType>((uint64_t)&WebCore::LogMediaSource, 4u, (WTF::Logger::LogSiteIdentifier *)&v59, a2);
  }
  v59 = 0;
  LOBYTE(v60) = 0;
  v61[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v61);
  v63 = 0;
  v65[16] = 0;
  v66[0] = 0;
  v66[16] = 0;
  v66[24] = 0;
  v66[40] = 0;
  v66[48] = 0;
  v66[64] = 0;
  v66[72] = 0;
  v66[88] = 0;
  v64[0] = 0;
  v64[1] = 0;
  v65[0] = 0;
  v62 = 1;
  v15 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v15 += 2;
  v16 = v59;
  v59 = v15;
  if (!v16)
    goto LABEL_13;
  if (*(_DWORD *)v16 != 2)
  {
    *(_DWORD *)v16 -= 2;
LABEL_13:
    LOBYTE(v60) = *((_BYTE *)a2 + 8);
    goto LABEL_14;
  }
  WTF::StringImpl::destroy(v16, v11);
  LOBYTE(v60) = *((_BYTE *)a2 + 8);
  if (!(_BYTE)v62)
    goto LABEL_33;
LABEL_14:
  if (!WebCore::contentTypeMeetsContainerAndCodecTypeRequirements((WebCore::ContentType *)&v59, (uint64_t)v65, (uint64_t)v66, v12, v13, v14))goto LABEL_33;
  isContentTypeSupported = WebCore::SourceBufferParserWebM::isContentTypeSupported((WebCore::SourceBufferParserWebM *)&v59, v17, v18, v19, v20);
  v23 = WebCore::SourceBufferParserAVFObjC::isContentTypeSupported((WebCore::SourceBufferParserAVFObjC *)&v59, v22);
  if (isContentTypeSupported > v23)
    v23 = isContentTypeSupported;
  if (v23 == 1)
    v23 = WebCore::contentTypeMeetsHardwareDecodeRequirements((uint64_t)&v59, (uint64_t)v64);
  if (!v23)
    goto LABEL_33;
  if (!WebCore::SourceBufferParserWebM::isContentTypeSupported(a2, v17, v24, v25, v26) || (a3 & 1) == 0)
  {
    if (WebCore::SourceBufferParserAVFObjC::isContentTypeSupported(a2, v27))
    {
      v28 = (WebCore::SourceBufferParserAVFObjC *)WTF::fastMalloc((WTF *)0x88);
      v58 = WebCore::SourceBufferParserAVFObjC::SourceBufferParserAVFObjC(v28);
      goto LABEL_26;
    }
LABEL_33:
    WebCore::MediaEngineSupportParameters::~MediaEngineSupportParameters((WebCore::MediaEngineSupportParameters *)&v59, v17);
    return;
  }
  WebCore::SourceBufferParserWebM::create((uint64_t *)&v58);
  v28 = v58;
  if (!v58)
    goto LABEL_33;
LABEL_26:
  (*(void (**)(WebCore::SourceBufferParserAVFObjC *, _QWORD, _QWORD))(*(_QWORD *)v28 + 64))(v28, *(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 232));
  v57 = v28;
  v58 = 0;
  v29 = WTF::fastMalloc((WTF *)0x350);
  WebCore::SourceBufferPrivateAVFObjC::SourceBufferPrivateAVFObjC(v29, (WebCore::MediaSourcePrivate *)a1, (uint64_t *)&v57);
  v30 = (uint64_t)v57;
  v57 = 0;
  if (v30)
  {
    v31 = (unsigned int *)(v30 + 8);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      v55 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v55 = off_1E32071E8;
      v55[1] = v31;
      v67 = v55;
      WTF::ensureOnMainThread();
      v56 = v67;
      v67 = 0;
      if (v56)
        (*(void (**)(_QWORD *))(*v56 + 8))(v56);
    }
  }
  WebCore::SourceBufferPrivateAVFObjC::setCDMInstance(v29, *(WebCore::CDMInstance **)(a1 + 216));
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)&v67, (const WTF::MachSendRight *)(a1 + 256));
  WTF::MachSendRight::operator=();
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v67);
  v34 = *(_QWORD *)(v29 + 8);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_36;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_36:
  ++*(_QWORD *)(v34 + 8);
  v36 = __ldxr((unsigned __int8 *)v34);
  if (v36 != 1)
  {
    __clrex();
    goto LABEL_40;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_40:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
  v37 = *a4;
  *a4 = v29;
  if (v37)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v37 + 8));
  v38 = (unsigned __int8 *)(a1 + 64);
  if (__ldaxr((unsigned __int8 *)(a1 + 64)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v38))
  {
    goto LABEL_47;
  }
  MEMORY[0x19AEA534C](a1 + 64);
LABEL_47:
  v41 = *(_QWORD *)(a1 + 72);
  v40 = *(_QWORD *)(a1 + 80);
  v42 = __ldxr(v38);
  if (v42 != 1)
  {
    __clrex();
    goto LABEL_51;
  }
  if (__stlxr(0, v38))
LABEL_51:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 64));
  *(_QWORD *)(v29 + 256) = v41;
  *(_DWORD *)(v29 + 264) = v40;
  *(_BYTE *)(v29 + 268) = BYTE4(v40);
  v43 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v43 != *(_DWORD *)(a1 + 24))
  {
    v49 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 8 * v43);
LABEL_66:
    *v49 = v29;
    *(_DWORD *)(a1 + 28) = v43 + 1;
    v50 = v58;
    v58 = 0;
    if (v50)
    {
      v51 = (unsigned int *)((char *)v50 + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (v52 == 1)
      {
        atomic_store(1u, v51);
        v53 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v53 = off_1E32071E8;
        v53[1] = v51;
        v67 = v53;
        WTF::ensureOnMainThread();
        v54 = v67;
        v67 = 0;
        if (v54)
          (*(void (**)(_QWORD *))(*v54 + 8))(v54);
      }
    }
    goto LABEL_33;
  }
  v44 = v43 + (v43 >> 2);
  if (v44 >= 0x10)
    v45 = v44 + 1;
  else
    v45 = 16;
  if (v45 <= v43 + 1)
    v46 = v43 + 1;
  else
    v46 = v45;
  if (!(v46 >> 29))
  {
    v47 = *(void **)(a1 + 16);
    v48 = (void *)WTF::fastMalloc((WTF *)(8 * v46));
    *(_DWORD *)(a1 + 24) = v46;
    *(_QWORD *)(a1 + 16) = v48;
    memcpy(v48, v47, 8 * v43);
    if (v47)
    {
      if (*(void **)(a1 + 16) == v47)
      {
        *(_QWORD *)(a1 + 16) = 0;
        *(_DWORD *)(a1 + 24) = 0;
      }
      WTF::fastFree((WTF *)v47, v17);
    }
    v43 = *(unsigned int *)(a1 + 28);
    v49 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 8 * v43);
    goto LABEL_66;
  }
  __break(0xC471u);
}

void sub_195255684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(_QWORD *)(v13 - 72);
  *(_QWORD *)(v13 - 72) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaSourcePrivateAVFObjC::removeSourceBuffer(WebCore::MediaSourcePrivateAVFObjC *this, WebCore::SourceBufferPrivate *a2)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  WebCore::SourceBufferPrivate *v14;
  int v15;
  WebCore::SourceBufferPrivate *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  WebCore::SourceBufferPrivate **v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::SourceBufferPrivate *v34;
  WebCore::SourceBufferPrivate **v35;

  result = (*(uint64_t (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)a2 + 48))(a2);
  if ((_DWORD)result == 1)
  {
    if (*((WebCore::SourceBufferPrivate **)this + 26) == a2)
      *((_QWORD *)this + 26) = 0;
    v7 = (uint64_t *)((char *)this + 248);
    v6 = *((_QWORD *)this + 31);
    if (v6)
    {
      v8 = *(_DWORD *)(v6 - 8);
      v9 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v8 & ((v11 >> 31) ^ v11);
      v13 = v6 + 24 * v12;
      v14 = *(WebCore::SourceBufferPrivate **)v13;
      if (*(WebCore::SourceBufferPrivate **)v13 == a2)
      {
LABEL_14:
        if (v6 + 24 * *(unsigned int *)(v6 - 4) != v13)
        {
          *(_QWORD *)v13 = -1;
          v19 = *(unsigned int *)(v13 + 20);
          v20 = *(WTF **)(v13 + 8);
          if ((_DWORD)v19)
          {
            v21 = 16 * v19;
            do
            {
              result = *(_QWORD *)v20;
              if (*(_QWORD *)v20)
              {
                *(_QWORD *)v20 = 0;
                *((_DWORD *)v20 + 2) = 0;
                result = WTF::fastFree((WTF *)result, v5);
              }
              v20 = (WTF *)((char *)v20 + 16);
              v21 -= 16;
            }
            while (v21);
            v20 = *(WTF **)(v13 + 8);
          }
          if (v20)
          {
            *(_QWORD *)(v13 + 8) = 0;
            *(_DWORD *)(v13 + 16) = 0;
            result = WTF::fastFree(v20, v5);
          }
          ++*(_DWORD *)(*v7 - 16);
          v22 = *v7;
          if (*v7)
            v23 = *(_DWORD *)(v22 - 12) - 1;
          else
            v23 = -1;
          *(_DWORD *)(v22 - 12) = v23;
          v24 = *v7;
          if (*v7)
          {
            v25 = 6 * *(_DWORD *)(v24 - 12);
            v26 = *(_DWORD *)(v24 - 4);
            if (v25 < v26 && v26 >= 9)
              result = WTF::HashTable<WebCore::SourceBufferPrivate *,WTF::KeyValuePair<WebCore::SourceBufferPrivate *,WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SourceBufferPrivate *,WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SourceBufferPrivate *>,WTF::HashMap<WebCore::SourceBufferPrivate *,WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SourceBufferPrivate *>,WTF::HashTraits<WebCore::SourceBufferPrivate *>,WTF::HashTraits<WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SourceBufferPrivate *>>::rehash((uint64_t *)this + 31, v26 >> 1, 0);
          }
        }
      }
      else
      {
        v15 = 1;
        v16 = *(WebCore::SourceBufferPrivate **)v13;
        v17 = v12;
        while (v16)
        {
          v17 = (v17 + v15) & v8;
          v16 = *(WebCore::SourceBufferPrivate **)(v6 + 24 * v17);
          ++v15;
          if (v16 == a2)
          {
            v18 = 1;
            while (v14)
            {
              v12 = (v12 + v18) & v8;
              v13 = v6 + 24 * v12;
              v14 = *(WebCore::SourceBufferPrivate **)v13;
              ++v18;
              if (*(WebCore::SourceBufferPrivate **)v13 == a2)
                goto LABEL_14;
            }
            v13 = v6 + 24 * *(unsigned int *)(v6 - 4);
            goto LABEL_14;
          }
        }
      }
    }
    v28 = *((unsigned int *)this + 11);
    if ((_DWORD)v28)
    {
      result = *((_QWORD *)this + 4);
      v29 = 8 * v28 - 8;
      while (*(WebCore::SourceBufferPrivate **)result != a2)
      {
        result += 8;
        v29 -= 8;
        if (v29 == -8)
          goto LABEL_39;
      }
      memmove((void *)result, (const void *)(result + 8), v29);
      --*((_DWORD *)this + 11);
      result = (*(uint64_t (**)(WebCore::MediaSourcePrivateAVFObjC *))(*(_QWORD *)this + 48))(this);
    }
LABEL_39:
    v30 = *((unsigned int *)this + 7);
    if ((_DWORD)v30)
    {
      v31 = (WebCore::SourceBufferPrivate **)*((_QWORD *)this + 2);
      if (*v31 == a2)
      {
        v32 = 0;
LABEL_46:
        v35 = &v31[v32];
        *v35 = 0;
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*((unsigned __int8 **)a2 + 1));
        result = (uint64_t)memmove(v35, v35 + 1, *((_QWORD *)this + 2) + 8 * *((unsigned int *)this + 7) - (_QWORD)(v35 + 1));
        --*((_DWORD *)this + 7);
      }
      else
      {
        v32 = 0;
        v33 = v30 - 1;
        while (v33 != v32)
        {
          v34 = v31[++v32];
          if (v34 == a2)
            goto LABEL_46;
        }
      }
    }
  }
  else
  {
    result = 105;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::MediaSourcePrivateAVFObjC::notifyActiveSourceBuffersChanged(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 168);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1080))(v2);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return this;
}

void sub_195255B48(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaSourcePrivateAVFObjC::player@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 168);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
  return this;
}

uint64_t WebCore::MediaSourcePrivateAVFObjC::durationChanged(WebCore::MediaSourcePrivateAVFObjC *this, const WTF::MediaTime *a2)
{
  uint64_t result;
  uint64_t v4;

  result = WebCore::MediaSourcePrivate::durationChanged(this, a2);
  v4 = *((_QWORD *)this + 21);
  if (v4)
  {
    result = *(_QWORD *)(v4 + 8);
    if (result)
      return WebCore::MediaPlayerPrivateMediaSourceAVFObjC::durationChanged(result);
  }
  return result;
}

unsigned __int8 *WebCore::MediaSourcePrivateAVFObjC::markEndOfStream(unsigned __int8 *result, int a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = result;
  v3 = *((_QWORD *)result + 21);
  if (v3)
  {
    if (!a2)
    {
      result = *(unsigned __int8 **)(v3 + 8);
      if (result)
        result = WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setNetworkState(result, 3);
    }
  }
  atomic_store(1u, v2 + 48);
  return result;
}

uint64_t WebCore::MediaSourcePrivateAVFObjC::mediaPlayerReadyState(WebCore::MediaSourcePrivateAVFObjC *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 21);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 560))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

void sub_195255C94(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void WebCore::MediaSourcePrivateAVFObjC::setMediaPlayerReadyState(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 168);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setReadyState(v3, a2);
  }
}

unsigned __int8 *WebCore::MediaSourcePrivateAVFObjC::sourceBufferKeyNeeded(WebCore::MediaSourcePrivateAVFObjC *this, WebCore::SourceBufferPrivateAVFObjC *a2, const WebCore::SharedBuffer *a3)
{
  unsigned __int8 *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  WebCore::SourceBufferPrivateAVFObjC *v12;

  v12 = a2;
  result = (unsigned __int8 *)WTF::Deque<WebCore::SourceBufferPrivateAVFObjC *,0ul>::append<WebCore::SourceBufferPrivateAVFObjC *&>((uint64_t)this + 176, &v12);
  v6 = *((_QWORD *)this + 21);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 128);
      if (v8)
      {
        v9 = *(_QWORD *)(v7 + 136);
        if (__ldaxr((unsigned __int8 *)v8))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v8))
        {
          goto LABEL_8;
        }
        result = (unsigned __int8 *)MEMORY[0x19AEA534C](v8);
LABEL_8:
        if (*(_QWORD *)(v8 + 24))
          ++*(_QWORD *)(v8 + 8);
        else
          v9 = 0;
        v11 = __ldxr((unsigned __int8 *)v8);
        if (v11 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v8))
          {
LABEL_16:
            if (v9)
            {
              (*(void (**)(_QWORD, const WebCore::SharedBuffer *))(**(_QWORD **)(*(_QWORD *)(v9 + 8) + 8)
                                                                            + 176))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8), a3);
              return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v9);
            }
            return result;
          }
        }
        else
        {
          __clrex();
        }
        result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
        goto LABEL_16;
      }
    }
  }
  return result;
}

uint64_t WTF::Deque<WebCore::SourceBufferPrivateAVFObjC *,0ul>::append<WebCore::SourceBufferPrivateAVFObjC *&>(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  int v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result)
  {
    if (v4 + 1 != *(_QWORD *)result)
      goto LABEL_18;
    LODWORD(v5) = *(_DWORD *)(result + 24);
  }
  else
  {
    v5 = *(unsigned int *)(result + 24);
    if (v4)
    {
      if (v4 != v5 - 1)
        goto LABEL_18;
    }
    else if ((_DWORD)v5)
    {
      goto LABEL_18;
    }
  }
  v6 = v5;
  v7 = ((unint64_t)v5 >> 2) + v5;
  if (v7 <= 0xF)
    v7 = 15;
  if (v7 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    return result;
  }
  v8 = *(char **)(result + 16);
  v9 = v7 + 1;
  v10 = (char *)WTF::fastMalloc((WTF *)(8 * (v7 + 1)));
  *(_DWORD *)(v3 + 24) = v9;
  *(_QWORD *)(v3 + 16) = v10;
  v11 = *(_QWORD *)(v3 + 8);
  if (*(_QWORD *)v3 > v11)
  {
    memcpy(v10, v8, 8 * v11);
    v12 = *(_QWORD *)v3 - v6 + *(unsigned int *)(v3 + 24);
    result = (uint64_t)memcpy((void *)(*(_QWORD *)(v3 + 16) + 8 * v12), &v8[8 * *(_QWORD *)v3], 8 * v6 - 8 * *(_QWORD *)v3);
    *(_QWORD *)v3 = v12;
    if (!v8)
      goto LABEL_18;
LABEL_15:
    if (*(char **)(v3 + 16) == v8)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
    }
    result = WTF::fastFree((WTF *)v8, v13);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy(&v10[8 * *(_QWORD *)v3], &v8[8 * *(_QWORD *)v3], 8 * v11 - 8 * *(_QWORD *)v3);
  if (v8)
    goto LABEL_15;
LABEL_18:
  v14 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v14) = *a2;
  if (v14 == *(unsigned int *)(v3 + 24) - 1)
    v15 = 0;
  else
    v15 = v14 + 1;
  *(_QWORD *)(v3 + 8) = v15;
  return result;
}

void WebCore::MediaSourcePrivateAVFObjC::willSeek(WebCore::MediaSourcePrivateAVFObjC *this)
{
  uint64_t v1;
  WebCore::SourceBufferPrivateAVFObjC **v2;
  uint64_t v3;
  WebCore::SourceBufferPrivateAVFObjC *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  v1 = *((unsigned int *)this + 11);
  if ((_DWORD)v1)
  {
    v2 = (WebCore::SourceBufferPrivateAVFObjC **)*((_QWORD *)this + 4);
    v3 = 8 * v1;
    while (1)
    {
      v4 = *v2;
      if (*v2)
      {
        if ((*(unsigned int (**)(WebCore::SourceBufferPrivateAVFObjC *))(*(_QWORD *)v4 + 48))(*v2) != 1)
          break;
      }
      v5 = *((_QWORD *)v4 + 103);
      v6 = *((_QWORD *)v4 + 104);
      v7[0] = "SourceBufferPrivateAVFObjC";
      v7[1] = 27;
      v7[2] = "willSeek";
      v7[3] = v6;
      if (*(_BYTE *)(v5 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v7);
      *((_BYTE *)v4 + 781) = 1;
      WebCore::SourceBufferPrivateAVFObjC::flush(v4);
      ++v2;
      v3 -= 8;
      if (!v3)
        return;
    }
    __break(0xC471u);
  }
}

WebCore::SourceBufferPrivateAVFObjC *WebCore::MediaSourcePrivateAVFObjC::hasSelectedVideoChanged(WebCore::MediaSourcePrivateAVFObjC *this, WebCore::SourceBufferPrivateAVFObjC *a2)
{
  WebCore::SourceBufferPrivateAVFObjC *result;
  BOOL v5;
  BOOL v6;
  dispatch_source_s *v7;
  uint64_t v8;
  uint64_t v9;
  dispatch_source_s *v10;
  dispatch_source_s *v11;

  result = (WebCore::SourceBufferPrivateAVFObjC *)*((_QWORD *)this + 26);
  if (*((_BYTE *)a2 + 792))
    v5 = 0;
  else
    v5 = result == a2;
  if (v5)
  {
    WebCore::SourceBufferPrivateAVFObjC::setVideoRenderer(a2, 0);
    result = WebCore::SourceBufferPrivateAVFObjC::setDecompressionSession(*((WebCore::SourceBufferPrivate **)this + 26), 0, v11);
    *((_QWORD *)this + 26) = 0;
  }
  else
  {
    if (*((_BYTE *)a2 + 792))
      v6 = result == a2;
    else
      v6 = 1;
    if (!v6)
    {
      if (result)
      {
        WebCore::SourceBufferPrivateAVFObjC::setVideoRenderer(result, 0);
        result = WebCore::SourceBufferPrivateAVFObjC::setDecompressionSession(*((WebCore::SourceBufferPrivate **)this + 26), 0, v7);
      }
      *((_QWORD *)this + 26) = a2;
      v8 = *((_QWORD *)this + 21);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
        {
          WebCore::SourceBufferPrivateAVFObjC::setVideoRenderer(a2, *(const void **)(v9 + 168));
          return WebCore::SourceBufferPrivateAVFObjC::setDecompressionSession(*((WebCore::SourceBufferPrivate **)this + 26), *(unsigned __int8 ***)(v9 + 288), v10);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::MediaSourcePrivateAVFObjC::flushActiveSourceBuffersIfNeeded(uint64_t this)
{
  uint64_t v1;
  WebCore::SourceBufferPrivate **v2;
  uint64_t v3;
  WebCore::SourceBufferPrivate *v4;

  v1 = *(unsigned int *)(this + 44);
  if ((_DWORD)v1)
  {
    v2 = *(WebCore::SourceBufferPrivate ***)(this + 32);
    v3 = 8 * v1;
    while (1)
    {
      v4 = *v2;
      if (*v2)
      {
        if ((*(unsigned int (**)(WebCore::SourceBufferPrivate *))(*(_QWORD *)v4 + 48))(*v2) != 1)
          break;
      }
      this = (uint64_t)WebCore::SourceBufferPrivateAVFObjC::flushIfNeeded(v4);
      ++v2;
      v3 -= 8;
      if (!v3)
        return this;
    }
    this = 105;
    __break(0xC471u);
  }
  return this;
}

char *`non-virtual thunk to'WebCore::MediaSourcePrivateAVFObjC::logChannel(WebCore::MediaSourcePrivateAVFObjC *this)
{
  return &WebCore::LogMediaSource;
}

uint64_t WebCore::MediaSourcePrivateAVFObjC::failedToCreateRenderer(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;

  v2 = *(_QWORD *)(result + 144);
  if (!v2)
    return result;
  v4 = *(_QWORD **)(result + 152);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v4)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v4)
    return result;
LABEL_15:
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v4 + 56))(v4, a2);
  v8 = v4[1];
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_19;
  }
  result = MEMORY[0x19AEA534C](v8);
LABEL_19:
  v10 = *(_QWORD *)(v8 + 8);
  v11 = v10 - 1;
  *(_QWORD *)(v8 + 8) = v10 - 1;
  if (v10 == 1)
  {
    v15 = *(_QWORD *)(v8 + 16);
    v12 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = 0;
    v13 = v15 != 0;
  }
  else
  {
    v12 = 0;
    v13 = 1;
  }
  v14 = __ldxr((unsigned __int8 *)v8);
  if (v14 != 1)
  {
    __clrex();
LABEL_26:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return result;
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
    goto LABEL_26;
  if (v11)
    return result;
LABEL_27:
  if (v12)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (!v13)
    return WTF::fastFree((WTF *)v8, v7);
  return result;
}

void sub_19525628C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v4 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
LABEL_6:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v11 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v11 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_13:
        if (!v7)
        {
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v4);
  goto LABEL_6;
}

uint64_t WebCore::MediaSourcePrivateAVFObjC::needsVideoLayer(WebCore::MediaSourcePrivateAVFObjC *this)
{
  uint64_t v1;
  unsigned __int8 ***v2;
  uint64_t i;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  int v7;
  _BOOL8 v8;
  int v9;
  uint64_t result;

  v1 = *((unsigned int *)this + 7);
  if ((_DWORD)v1)
  {
    v2 = (unsigned __int8 ***)*((_QWORD *)this + 2);
    for (i = 8 * v1 - 8; ; i -= 8)
    {
      v4 = *v2;
      if (!*v2)
        goto LABEL_14;
      v5 = v4[1];
      if (__ldaxr(v5))
      {
        __clrex();
      }
      else if (!__stxr(1u, v5))
      {
        goto LABEL_8;
      }
      MEMORY[0x19AEA534C](v5);
LABEL_8:
      ++*((_QWORD *)v5 + 1);
      v7 = __ldxr(v5);
      if (v7 != 1)
      {
        __clrex();
LABEL_12:
        WTF::Lock::unlockSlow((WTF::Lock *)v5);
        goto LABEL_13;
      }
      if (__stlxr(0, v5))
        goto LABEL_12;
LABEL_13:
      if ((*((unsigned int (**)(unsigned __int8 **))*v4 + 6))(v4) != 1)
      {
        result = 261;
        __break(0xC471u);
        return result;
      }
LABEL_14:
      v8 = WebCore::SourceBufferPrivateAVFObjC::needsVideoLayer((WebCore::SourceBufferPrivateAVFObjC *)v4);
      if (v4)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(v4[1]);
      ++v2;
      if (i)
        v9 = v8;
      else
        v9 = 1;
      if (v9 == 1)
        return v8;
    }
  }
  return 0;
}

void sub_195256444(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void WebCore::MediaSourcePrivateAVFObjC::bufferedChanged(WebCore::MediaSourcePrivateAVFObjC *this, const WebCore::PlatformTimeRanges *a2)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (unsigned __int8 *)this + 64;
  if (__ldaxr((unsigned __int8 *)this + 64))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 64);
LABEL_5:
  WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WebCore::MediaSourcePrivateAVFObjC *)((char *)this + 88), a2);
  v6 = __ldxr(v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_10:
  v7 = *((_QWORD *)this + 21);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      ++*(_DWORD *)(v8 + 56);
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::bufferedChanged((id *)v8);
      if (*(_DWORD *)(v8 + 56) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      else
        --*(_DWORD *)(v8 + 56);
    }
  }
}

void sub_195256534(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[14] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[14];
  _Unwind_Resume(exception_object);
}

void WebCore::MediaSourcePrivateAVFObjC::trackBufferedChanged(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  WTF::MediaTime *v39;
  __int128 *v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  __int128 *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  void *v58;
  uint64_t v59;
  unsigned __int8 *v60;
  void *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  WTF *v67;
  uint64_t v68;
  WTF *v69;
  int v70;
  int v71;

  v5 = a1;
  v7 = a1 + 31;
  v6 = a1[31];
  if (v6)
  {
    v8 = *(_DWORD *)(v6 - 8);
    v9 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v6 + 24 * v12;
    v14 = *(void **)v13;
    if (*(_QWORD *)v13 != a2)
    {
      v15 = 1;
      while (v14)
      {
        v12 = (v12 + v15) & v8;
        v13 = v6 + 24 * v12;
        v14 = *(void **)v13;
        ++v15;
        if (*(_QWORD *)v13 == a2)
          goto LABEL_10;
      }
      v13 = v6 + 24 * *(unsigned int *)(v6 - 4);
    }
LABEL_10:
    if (v13 != v6 + 24 * *(unsigned int *)(v6 - 4))
    {
      v16 = *(unsigned int *)(v13 + 20);
      v17 = *(WTF **)(v13 + 8);
      if ((_DWORD)v16)
      {
        v18 = 16 * v16;
        do
        {
          a1 = *(uint64_t **)v17;
          if (*(_QWORD *)v17)
          {
            *(_QWORD *)v17 = 0;
            *((_DWORD *)v17 + 2) = 0;
            a1 = (uint64_t *)WTF::fastFree((WTF *)a1, (void *)a2);
          }
          v17 = (WTF *)((char *)v17 + 16);
          v18 -= 16;
        }
        while (v18);
        v17 = *(WTF **)(v13 + 8);
      }
      if (v17)
      {
        *(_QWORD *)(v13 + 8) = 0;
        *(_DWORD *)(v13 + 16) = 0;
        a1 = (uint64_t *)WTF::fastFree(v17, (void *)a2);
      }
      v19 = *a3;
      *a3 = 0;
      *(_QWORD *)(v13 + 8) = v19;
      LODWORD(v19) = *((_DWORD *)a3 + 2);
      *((_DWORD *)a3 + 2) = 0;
      *(_DWORD *)(v13 + 16) = v19;
      LODWORD(v19) = *((_DWORD *)a3 + 3);
      *((_DWORD *)a3 + 3) = 0;
      *(_DWORD *)(v13 + 20) = v19;
      goto LABEL_49;
    }
  }
  else
  {
    a1 = (uint64_t *)WTF::HashTable<WebCore::SourceBufferPrivate *,WTF::KeyValuePair<WebCore::SourceBufferPrivate *,WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SourceBufferPrivate *,WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SourceBufferPrivate *>,WTF::HashMap<WebCore::SourceBufferPrivate *,WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SourceBufferPrivate *>,WTF::HashTraits<WebCore::SourceBufferPrivate *>,WTF::HashTraits<WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SourceBufferPrivate *>>::rehash(a1 + 31, 8u, 0);
    v6 = *v7;
    if (*v7)
      v8 = *(_DWORD *)(v6 - 8);
    else
      v8 = 0;
  }
  v20 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v8 & ((v22 >> 31) ^ v22);
  v24 = (uint64_t *)(v6 + 24 * v23);
  v25 = *v24;
  if (!*v24)
  {
LABEL_29:
    *v24 = a2;
    v28 = *((unsigned int *)v24 + 5);
    v29 = (WTF *)v24[1];
    if ((_DWORD)v28)
    {
      v30 = 16 * v28;
      do
      {
        a1 = *(uint64_t **)v29;
        if (*(_QWORD *)v29)
        {
          *(_QWORD *)v29 = 0;
          *((_DWORD *)v29 + 2) = 0;
          a1 = (uint64_t *)WTF::fastFree((WTF *)a1, (void *)a2);
        }
        v29 = (WTF *)((char *)v29 + 16);
        v30 -= 16;
      }
      while (v30);
      v29 = (WTF *)v24[1];
    }
    if (v29)
    {
      v24[1] = 0;
      *((_DWORD *)v24 + 4) = 0;
      a1 = (uint64_t *)WTF::fastFree(v29, (void *)a2);
    }
    v31 = *a3;
    *a3 = 0;
    v24[1] = v31;
    LODWORD(v31) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    *((_DWORD *)v24 + 4) = v31;
    LODWORD(v31) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    *((_DWORD *)v24 + 5) = v31;
    v32 = *v7;
    if (*v7)
      v33 = *(_DWORD *)(v32 - 12) + 1;
    else
      v33 = 1;
    *(_DWORD *)(v32 - 12) = v33;
    v34 = *v7;
    if (*v7)
      v35 = *(_DWORD *)(v34 - 12);
    else
      v35 = 0;
    v36 = (*(_DWORD *)(v34 - 16) + v35);
    v37 = *(unsigned int *)(v34 - 4);
    if (v37 > 0x400)
    {
      if (v37 > 2 * v36)
        goto LABEL_49;
    }
    else
    {
      if (3 * v37 > 4 * v36)
        goto LABEL_49;
      if (!(_DWORD)v37)
      {
        v38 = 8;
        goto LABEL_48;
      }
    }
    v38 = (_DWORD)v37 << (6 * *(_DWORD *)(v34 - 12) >= (2 * v37));
LABEL_48:
    a1 = (uint64_t *)WTF::HashTable<WebCore::SourceBufferPrivate *,WTF::KeyValuePair<WebCore::SourceBufferPrivate *,WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SourceBufferPrivate *,WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SourceBufferPrivate *>,WTF::HashMap<WebCore::SourceBufferPrivate *,WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SourceBufferPrivate *>,WTF::HashTraits<WebCore::SourceBufferPrivate *>,WTF::HashTraits<WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SourceBufferPrivate *>>::rehash(v7, v38, v24);
    goto LABEL_49;
  }
  v26 = 0;
  v27 = 1;
  while (v25 != a2)
  {
    if (v25 == -1)
      v26 = v24;
    v23 = (v23 + v27) & v8;
    v24 = (uint64_t *)(v6 + 24 * v23);
    v25 = *v24;
    ++v27;
    if (!*v24)
    {
      if (v26)
      {
        *v26 = 0;
        v26[1] = 0;
        v26[2] = 0;
        --*(_DWORD *)(*v7 - 16);
        v24 = v26;
      }
      goto LABEL_29;
    }
  }
LABEL_49:
  v39 = (WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)a1);
  v40 = (__int128 *)WTF::MediaTime::positiveInfiniteTime(v39);
  v67 = 0;
  v68 = 0;
  v41 = WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)&v67, (__int128 *)v39, v40, 0);
  v42 = *v7;
  if (*v7)
  {
    v43 = *(unsigned int *)(v42 - 4);
    v44 = v42 + 24 * v43;
    if (*(_DWORD *)(v42 - 12))
    {
      v45 = v42;
      if ((_DWORD)v43)
      {
        v46 = 24 * v43;
        v45 = v42;
        while ((unint64_t)(*(_QWORD *)v45 + 1) <= 1)
        {
          v45 += 24;
          v46 -= 24;
          if (!v46)
          {
            v45 = v44;
            break;
          }
        }
      }
      if (v42)
        goto LABEL_57;
      goto LABEL_61;
    }
    v45 = v42 + 24 * v43;
  }
  else
  {
    v45 = 0;
    LODWORD(v43) = 0;
  }
  v44 = v42 + 24 * v43;
  if (v42)
  {
LABEL_57:
    v47 = v42 + 24 * *(unsigned int *)(v42 - 4);
    goto LABEL_62;
  }
LABEL_61:
  v47 = 0;
LABEL_62:
  while (v45 != v47)
  {
    v48 = *(unsigned int *)(v45 + 20);
    if ((_DWORD)v48)
    {
      v49 = *(_QWORD *)(v45 + 8);
      v50 = v49 + 16 * v48;
      do
      {
        v51 = *(unsigned int *)(v49 + 12);
        v69 = 0;
        v70 = 0;
        v71 = v51;
        if ((_DWORD)v51)
        {
          if (v51 >> 27)
          {
            __break(0xC471u);
            return;
          }
          v52 = (WTF *)WTF::fastMalloc((WTF *)(32 * v51));
          v70 = v51;
          v69 = v52;
          v53 = *(unsigned int *)(v49 + 12);
          if ((_DWORD)v53)
          {
            v54 = *(__int128 **)v49;
            v55 = 32 * v53;
            do
            {
              v56 = *v54;
              v57 = v54[1];
              v54 += 2;
              *(_OWORD *)v52 = v56;
              *((_OWORD *)v52 + 1) = v57;
              v52 = (WTF *)((char *)v52 + 32);
              v55 -= 32;
            }
            while (v55);
          }
        }
        WebCore::PlatformTimeRanges::invert((WebCore::PlatformTimeRanges *)&v69);
        WebCore::PlatformTimeRanges::invert((WebCore::PlatformTimeRanges *)&v67);
        WebCore::PlatformTimeRanges::unionWith((uint64_t)&v67, (const WebCore::PlatformTimeRanges *)&v69);
        WebCore::PlatformTimeRanges::invert((WebCore::PlatformTimeRanges *)&v67);
        if (v69)
          WTF::fastFree(v69, v58);
        v49 += 16;
      }
      while (v49 != v50);
    }
    v59 = v45 + 24;
    v45 = v44;
    if (v59 != v44)
    {
      v45 = v59;
      while ((unint64_t)(*(_QWORD *)v45 + 1) <= 1)
      {
        v45 += 24;
        if (v45 == v44)
        {
          v45 = v44;
          break;
        }
      }
    }
  }
  v60 = (unsigned __int8 *)(v5 + 8);
  if (__ldaxr((unsigned __int8 *)v5 + 64))
  {
    __clrex();
  }
  else if (!__stxr(1u, v60))
  {
    goto LABEL_83;
  }
  MEMORY[0x19AEA534C](v5 + 8, v41);
LABEL_83:
  WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(v5 + 11), (WTF *)&v67);
  v63 = __ldxr(v60);
  if (v63 != 1)
  {
    __clrex();
    goto LABEL_87;
  }
  if (__stlxr(0, v60))
LABEL_87:
    WTF::Lock::unlockSlow((WTF::Lock *)(v5 + 8));
  v64 = v5[21];
  if (v64)
  {
    v65 = *(_QWORD *)(v64 + 8);
    if (v65)
    {
      ++*(_DWORD *)(v65 + 56);
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::bufferedChanged((id *)v65);
      if (*(_DWORD *)(v65 + 56) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
      else
        --*(_DWORD *)(v65 + 56);
    }
  }
  v66 = v67;
  if (v67)
  {
    v67 = 0;
    LODWORD(v68) = 0;
    WTF::fastFree(v66, v62);
  }
}

void sub_195256AB0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  _DWORD *v10;

  if (v10[14] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
  else
    --v10[14];
  if (a9)
    WTF::fastFree(a9, a2);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebCore::VideoTrackPrivateMediaSourceAVFObjC::resetPropertiesFromTrack(WebCore::VideoTrackPrivateMediaSourceAVFObjC *this)
{
  uint64_t v2;
  void *v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  WTF::StringImpl *v22[5];

  v2 = *((_QWORD *)this + 18);
  v3 = *(void **)(v2 + 32);
  if (v3)
  {
    v4 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v3, "asset"), "tracks"), "indexOfObject:", *(_QWORD *)(v2 + 32));
  }
  else if (*(_QWORD *)(v2 + 24))
  {
    v5 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(v2 + 16), "asset"), "tracks"), "count");
    v6 = *(_QWORD *)(v2 + 24);
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      v8 = objc_msgSend((id)objc_msgSend(*(id *)(v7 + 16), "options"), "indexOfObject:", *(_QWORD *)(v6 + 16));
    else
      v8 = 0;
    v4 = v8 + v5;
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 34) = v4;
  *((_BYTE *)this + 104) = WebCore::AVTrackPrivateAVFObjCImpl::videoKind(*((WebCore::AVTrackPrivateAVFObjCImpl **)this
                                                                         + 18));
  v9 = *((_QWORD *)this + 18);
  v10 = *(void **)(v9 + 32);
  if (v10)
  {
    v11 = (int)objc_msgSend(v10, "trackID");
  }
  else
  {
    v12 = *(_QWORD *)(v9 + 24);
    if (v12)
      v11 = objc_msgSend((id)objc_msgSend(*(id *)(v12 + 16), "optionID"), "unsignedLongLongValue");
    else
      v11 = 0;
  }
  *((_QWORD *)this + 14) = v11;
  WebCore::AVTrackPrivateAVFObjCImpl::label(*((WebCore::AVTrackPrivateAVFObjCImpl **)this + 18), v22);
  v14 = v22[0];
  if (v22[0])
    *(_DWORD *)v22[0] += 2;
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v13);
      v14 = v22[0];
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  v22[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  WebCore::AVTrackPrivateAVFObjCImpl::language(*((WTF::StringImpl **)this + 18), v22);
  v17 = v22[0];
  if (v22[0])
    *(_DWORD *)v22[0] += 2;
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v17;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, v16);
      v17 = v22[0];
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  v22[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  WebCore::AVTrackPrivateAVFObjCImpl::videoTrackConfiguration(*((WebCore::AVTrackPrivateAVFObjCImpl **)this + 18), (uint64_t)v22);
  WebCore::VideoTrackPrivate::setConfiguration((uint64_t)this, (uint64_t)v22, v19);
  result = v22[0];
  v22[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_195256CE8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::VideoTrackPrivateAVF::~VideoTrackPrivateAVF(WebCore::VideoTrackPrivateAVF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = off_1E334DC60;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = off_1E32065F8;
  v5 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  *(_QWORD *)this = &unk_1E340FFE8;
  v7 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::VideoTrackPrivateAVF::~VideoTrackPrivateAVF(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::VideoTrackPrivate::setConfiguration(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl **v5;
  uint64_t result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v5 = (WTF::StringImpl **)(a1 + 56);
  result = WebCore::operator==(a2, a1 + 56, a3);
  if ((result & 1) == 0)
  {
    v8 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    v9 = *v5;
    *v5 = v8;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        WTF::StringImpl::destroy(v9, v7);
        v8 = *v5;
      }
      else
      {
        *(_DWORD *)v9 -= 2;
      }
    }
    v10 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 80) = v10;
    if (v8)
      *(_DWORD *)v8 += 2;
    v12 = *(_OWORD *)(a1 + 64);
    v13 = *(_OWORD *)(a1 + 80);
    v11 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v11 = &off_1E334DD30;
    *(_QWORD *)(v11 + 8) = v8;
    *(_OWORD *)(v11 + 16) = v12;
    *(_OWORD *)(v11 + 32) = v13;
    v14 = v11;
    WebCore::TrackPrivateBase::notifyClients(a1, &v14);
    result = v14;
    v14 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_195256F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::CDMSessionAVContentKeySession::type(WebCore::CDMSessionAVContentKeySession *this)
{
  return 3;
}

uint64_t WebCore::CDMSessionMediaSourceAVFObjC::sessionId(WebCore::CDMSessionMediaSourceAVFObjC *this)
{
  return (uint64_t)this + 64;
}

uint64_t WebCore::CDMSessionAVFoundationObjC::type(WebCore::CDMSessionAVFoundationObjC *this)
{
  return 2;
}

uint64_t WebCore::CDMSessionAVFoundationObjC::sessionId(WebCore::CDMSessionAVFoundationObjC *this)
{
  return (uint64_t)this + 40;
}

uint64_t WebCore::LegacyCDMSession::type(WebCore::LegacyCDMSession *this)
{
  return 0;
}

uint64_t WebCore::ImageDecoderAVFObjC::bytesDecodedToDetermineProperties(WebCore::ImageDecoderAVFObjC *this)
{
  return 0;
}

uint64_t WebCore::ImageDecoder::primaryFrameIndex(WebCore::ImageDecoder *this)
{
  return 0;
}

void WebCore::ImageDecoderAVFObjC::accessibilityDescription(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::ImageDecoderAVFObjC::hotSpot(WebCore::ImageDecoderAVFObjC *this)
{
  return 0;
}

uint64_t WebCore::ImageDecoder::frameOrientationAtIndex(WebCore::ImageDecoder *this)
{
  return 1;
}

uint64_t WebCore::ImageDecoder::frameDensityCorrectedSizeAtIndex(WebCore::ImageDecoder *this)
{
  return 0;
}

uint64_t WebCore::ImageDecoderAVFObjC::isAllDataReceived(WebCore::ImageDecoderAVFObjC *this)
{
  return *((unsigned __int8 *)this + 145);
}

uint64_t WebCore::MediaSampleAVFObjC::trackID(WebCore::MediaSampleAVFObjC *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t WebCore::MediaSampleAVFObjC::platformSampleType(WebCore::MediaSampleAVFObjC *this)
{
  return 2;
}

void WebCore::MediaSample::byteRange(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

uint64_t WebCore::MediaSample::dump(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  WTF::printInternal();
  WTF::MediaTime::dump();
  WTF::printInternal();
  WTF::MediaTime::dump();
  WTF::printInternal();
  WTF::MediaTime::dump();
  WTF::printInternal();
  WTF::printInternal();
  WTF::printInternal();
  WTF::printInternal();
  WTF::printInternal();
  WTF::printInternal();
  WTF::printInternal();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t WebCore::MediaSourcePrivateAVFObjC::platformType(WebCore::MediaSourcePrivateAVFObjC *this)
{
  return 1;
}

uint64_t WebCore::MediaSourcePrivate::unmarkEndOfStream(uint64_t this)
{
  atomic_store(0, (unsigned __int8 *)(this + 48));
  return this;
}

uint64_t WebCore::MediaSourcePrivate::readyState(WebCore::MediaSourcePrivate *this)
{
  return atomic_load((unsigned int *)this + 13);
}

uint64_t WebCore::MediaSourcePrivate::setReadyState(uint64_t result, unsigned int a2)
{
  atomic_store(a2, (unsigned int *)(result + 52));
  return result;
}

uint64_t WebCore::MediaSourcePrivate::setTimeFudgeFactor(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)(result + 133) = *(uint64_t *)((char *)a2 + 5);
  *(_QWORD *)(result + 128) = v2;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::MediaSourcePrivateAVFObjC::logger(WebCore::MediaSourcePrivateAVFObjC *this)
{
  return *((_QWORD *)this + 8);
}

const char *`non-virtual thunk to'WebCore::MediaSourcePrivateAVFObjC::logClassName(WebCore::MediaSourcePrivateAVFObjC *this)
{
  return "MediaSourcePrivateAVFObjC";
}

uint64_t `non-virtual thunk to'WebCore::MediaSourcePrivateAVFObjC::logIdentifier(WebCore::MediaSourcePrivateAVFObjC *this)
{
  return *((_QWORD *)this + 9);
}

void WebCore::VideoTrackPrivateMediaSourceAVFObjC::~VideoTrackPrivateMediaSourceAVFObjC(WebCore::VideoTrackPrivateMediaSourceAVFObjC *this, void *a2)
{
  WebCore::AVTrackPrivateAVFObjCImpl *v3;
  WTF *v4;
  void *v5;

  v3 = (WebCore::AVTrackPrivateAVFObjCImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    WebCore::AVTrackPrivateAVFObjCImpl::~AVTrackPrivateAVFObjCImpl(v3, a2);
    WTF::fastFree(v4, v5);
  }
  WebCore::VideoTrackPrivateAVF::~VideoTrackPrivateAVF(this, (WTF::StringImpl *)a2);
}

{
  WebCore::AVTrackPrivateAVFObjCImpl *v3;
  WTF *v4;
  void *v5;
  WTF *v6;
  void *v7;

  v3 = (WebCore::AVTrackPrivateAVFObjCImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    WebCore::AVTrackPrivateAVFObjCImpl::~AVTrackPrivateAVFObjCImpl(v3, a2);
    WTF::fastFree(v4, v5);
  }
  WebCore::VideoTrackPrivateAVF::~VideoTrackPrivateAVF(this, (WTF::StringImpl *)a2);
  WTF::fastFree(v6, v7);
}

uint64_t WebCore::VideoTrackPrivateAVF::id(WebCore::VideoTrackPrivateAVF *this)
{
  return *((_QWORD *)this + 14);
}

uint64_t WebCore::VideoTrackPrivateAVF::label@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 120);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::VideoTrackPrivateAVF::language@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 128);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::VideoTrackPrivateAVF::trackIndex(WebCore::VideoTrackPrivateAVF *this)
{
  return *((unsigned int *)this + 34);
}

uint64_t WebCore::VideoTrackPrivateAVF::kind(WebCore::VideoTrackPrivateAVF *this)
{
  return *((unsigned __int8 *)this + 104);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ImageDecoderAVFObjC::ImageDecoderAVFObjC(WebCore::FragmentedSharedBuffer const&,WTF::String const&,WebCore::AlphaOption,WebCore::GammaAndColorProfileOption,WebCore::ProcessIdentity)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E334DB28;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ImageDecoderAVFObjC::ImageDecoderAVFObjC(WebCore::FragmentedSharedBuffer const&,WTF::String const&,WebCore::AlphaOption,WebCore::GammaAndColorProfileOption,WebCore::ProcessIdentity)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E334DB28;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::ImageDecoderAVFObjC::ImageDecoderAVFObjC(WebCore::FragmentedSharedBuffer const&,WTF::String const&,WebCore::AlphaOption,WebCore::GammaAndColorProfileOption,WebCore::ProcessIdentity)::$_0::operator()(void)::{lambda(void)#1},void>::call(PAL *a1)
{
  id *v1;
  void *v2;
  uint64_t v3;
  unsigned int *v4;

  v1 = (id *)*((_QWORD *)a1 + 1);
  v2 = (void *)objc_msgSend(v1[4], "tracksWithMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicVisual(a1));
  v3 = objc_msgSend(v2, "indexOfObjectPassingTest:", &__block_literal_global_39);
  if (v3 == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 0;
  else
    v4 = (unsigned int *)objc_msgSend(v2, "objectAtIndex:", v3);
  return WebCore::ImageDecoderAVFObjC::setTrack((WebCore::ImageDecoderAVFObjC *)v1, v4);
}

void WebCore::ImageDecoderAVFObjCSample::~ImageDecoderAVFObjCSample(WebCore::ImageDecoderAVFObjCSample *this, void *a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  WTF *v7;
  const void *v8;

  *(_QWORD *)this = off_1E334DB50;
  v3 = (const void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    CFRelease(v3);
  *(_QWORD *)this = off_1E334D8B8;
  v4 = *((unsigned int *)this + 23);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 10);
    v6 = 8 * v4;
    do
    {
      v5 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v5, a2)+ 1;
      v6 -= 8;
    }
    while (v6);
  }
  v7 = (WTF *)*((_QWORD *)this + 10);
  if (v7)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
    CFRelease(v8);
}

{
  const void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  WTF *v7;
  const void *v8;

  *(_QWORD *)this = off_1E334DB50;
  v3 = (const void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    CFRelease(v3);
  *(_QWORD *)this = off_1E334D8B8;
  v4 = *((unsigned int *)this + 23);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 10);
    v6 = 8 * v4;
    do
    {
      v5 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v5, a2)+ 1;
      v6 -= 8;
    }
    while (v6);
  }
  v7 = (WTF *)*((_QWORD *)this + 10);
  if (v7)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
    CFRelease(v8);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::ImageDecoderAVFObjCSample::flags(PAL **this, uint64_t a2, unsigned __int8 a3)
{
  return WebCore::MediaSampleAVFObjC::flags(this, a2, a3) | (4 * *((unsigned __int8 *)this + 104));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ImageDecoderAVFObjC::setTrack(AVAssetTrack *)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E334DBF0;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ImageDecoderAVFObjC::setTrack(AVAssetTrack *)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E334DBF0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::ImageDecoderAVFObjC::setTrack(AVAssetTrack *)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WebCore::ImageDecoderAVFObjC::readTrackMetadata(*(WebCore::ImageDecoderAVFObjC **)(a1 + 8));
  WebCore::ImageDecoderAVFObjC::readSamples(*(WebCore::ImageDecoderAVFObjC **)(a1 + 8));
}

uint64_t WebCore::ImageDecoderAVFObjCSample::byteRangeForAttachment(WebCore::ImageDecoderAVFObjCSample *this, const __CFString *a2, const void *a3, unsigned int *a4)
{
  uint64_t result;
  const __CFNumber *v7;
  CFTypeID v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t valuePtr;

  result = PAL::softLinkCoreMediaCMGetAttachment((PAL *)a2->data, a3, 0, a4);
  if (result
    && (v7 = (const __CFNumber *)result, v8 = CFGetTypeID((CFTypeRef)result), result = CFNumberGetTypeID(), v8 == result)
    && (valuePtr = 0, result = CFNumberGetValue(v7, kCFNumberSInt64Type, &valuePtr), (_DWORD)result)
    && (v13 = 0,
        result = PAL::softLinkCoreMediaCMSampleBufferGetSampleSizeArray((PAL *)a2->data, 0, 0, &v13, v9),
        v13 == 1))
  {
    v12 = 0;
    result = PAL::softLinkCoreMediaCMSampleBufferGetSampleSizeArray((PAL *)a2->data, (opaqueCMSampleBuffer *)1, (uint64_t)&v12, 0, v10);
    if (valuePtr < 0)
    {
      __break(0xC471u);
    }
    else
    {
      v11 = v12;
      *(_QWORD *)this = valuePtr;
      *((_QWORD *)this + 1) = v11;
      *((_BYTE *)this + 16) = 1;
    }
  }
  else
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 16) = 0;
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN7WebCore17VideoTrackPrivate16setConfigurationEONS2_31PlatformVideoTrackConfigurationEEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E334DD30;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore17VideoTrackPrivate16setConfigurationEONS2_31PlatformVideoTrackConfigurationEEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E334DD30;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore17VideoTrackPrivate16setConfigurationEONS2_31PlatformVideoTrackConfigurationEEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEE4callESA_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1 + 8);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11],WTF::String>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::Logger *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  __int128 buf;
  int v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v51, a4);
  v9 = *a5;
  if (*a5)
    *(_DWORD *)v9 += 2;
  if (v52)
  {
    v10 = *((_DWORD *)v52 + 1);
    if (v51)
      goto LABEL_5;
LABEL_95:
    v11 = 0;
    if (v9)
      goto LABEL_6;
LABEL_96:
    v12 = 0;
    goto LABEL_7;
  }
  v10 = 0;
  if (!v51)
    goto LABEL_95;
LABEL_5:
  v11 = *((_DWORD *)v51 + 1);
  if (!v9)
    goto LABEL_96;
LABEL_6:
  v12 = *(_DWORD *)(v9 + 4);
LABEL_7:
  if ((v12 | v11) < 0)
    goto LABEL_99;
  v13 = __OFADD__(v11, v12);
  v14 = v11 + v12;
  v15 = v13;
  if (v10 < 0)
    goto LABEL_99;
  if (v15)
    goto LABEL_99;
  result = (v10 + v14);
  if (__OFADD__(v10, v14))
    goto LABEL_99;
  if (v52 && (*((_BYTE *)v52 + 16) & 4) == 0)
  {
    v16 = 0;
    goto LABEL_21;
  }
  if (v51)
  {
    v17 = *((_DWORD *)v51 + 4);
    v16 = (v17 >> 2) & 1;
    if (v9 && (v17 & 4) != 0)
      goto LABEL_20;
  }
  else
  {
    if (v9)
    {
LABEL_20:
      v16 = (*(unsigned __int8 *)(v9 + 16) >> 2) & 1;
      goto LABEL_21;
    }
    v16 = 1;
  }
LABEL_21:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v16, v52, (uint64_t)v51, v9, &buf);
  v53 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_99:
    __break(0xC471u);
    return result;
  }
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v9, v18);
    else
      *(_DWORD *)v9 -= 2;
  }
  v19 = v51;
  v51 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v52;
  v52 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *(NSObject **)(a1 + 32);
  v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v22)
  {
    WTF::String::utf8();
    v24 = v49 ? (char *)v49 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v24;
    _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v22 = (uint64_t)v49;
    v49 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        v22 = WTF::fastFree((WTF *)v22, v23);
      else
        --*(_DWORD *)v22;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v26 = *v25;
      if ((v26 & 1) != 0)
        break;
      v27 = __ldaxr(v25);
      if (v27 == v26)
      {
        if (!__stxr(v26 | 1, v25))
        {
          v28 = WTF::Logger::observers((WTF::Logger *)v22);
          v29 = *(unsigned int *)(v28 + 12);
          if ((_DWORD)v29)
          {
            v30 = *(uint64_t **)v28;
            v31 = *(_QWORD *)v28 + 8 * v29;
            do
            {
              v32 = *v30;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v55 = 0;
              WTF::String::String((WTF::String *)&v56, a4);
              v57 = 0;
              v33 = (WTF::StringImpl *)*a5;
              if (*a5)
                *(_DWORD *)v33 += 2;
              v58 = v33;
              v49 = 0;
              v50 = 0;
              v34 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v50) = 3;
              v49 = v34;
              v35 = HIDWORD(v50);
              *((_DWORD *)v34 + 4 * HIDWORD(v50)) = buf;
              v36 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v34 + 2 * v35 + 1) = v36;
              *((_DWORD *)v34 + 4 * (v35 + 1)) = v55;
              v37 = v56;
              if (v56)
                *(_DWORD *)v56 += 2;
              *((_QWORD *)v34 + 2 * (v35 + 1) + 1) = v37;
              *((_DWORD *)v34 + 4 * (v35 + 2)) = v57;
              v38 = v58;
              if (v58)
                *(_DWORD *)v58 += 2;
              *((_QWORD *)v34 + 2 * (v35 + 2) + 1) = v38;
              HIDWORD(v50) = v35 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v32 + 16))(v32, a1, a2, &v49);
              v39 = v49;
              if (HIDWORD(v50))
              {
                v40 = 16 * HIDWORD(v50);
                v41 = (WTF::StringImpl **)((char *)v49 + 8);
                do
                {
                  v42 = *v41;
                  *v41 = 0;
                  if (v42)
                  {
                    if (*(_DWORD *)v42 == 2)
                      WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v23);
                    else
                      *(_DWORD *)v42 -= 2;
                  }
                  v41 += 2;
                  v40 -= 16;
                }
                while (v40);
                v39 = v49;
              }
              if (v39)
              {
                v49 = 0;
                LODWORD(v50) = 0;
                WTF::fastFree(v39, v23);
              }
              v43 = v58;
              v58 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v43 -= 2;
              }
              v44 = v56;
              v56 = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v44 -= 2;
              }
              v45 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v45 -= 2;
              }
              ++v30;
            }
            while (v30 != (uint64_t *)v31);
          }
          v46 = __ldxr(v25);
          if (v46 == 1)
          {
            if (!__stlxr(0, v25))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v53;
  v53 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_195257F90(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12, int a13, int a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23)
{
  unsigned __int8 *v23;
  int v25;

  v25 = __ldxr(v23);
  if (v25 == 1)
  {
    if (!__stlxr(0, v23))
    {
LABEL_6:
      if (a17)
      {
        if (*(_DWORD *)a17 == 2)
          WTF::StringImpl::destroy(a17, a2);
        else
          *(_DWORD *)a17 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

unsigned __int8 ***WTF::Ref<WebCore::WebCoreDecompressionSession,WTF::RawPtrTraits<WebCore::WebCoreDecompressionSession>,WTF::DefaultRefDerefTraits<WebCore::WebCoreDecompressionSession>>::~Ref(unsigned __int8 ***a1, void *a2)
{
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  WebCore::WebCoreDecompressionSession *v8;
  BOOL v9;
  int v10;
  WTF *v11;
  void *v12;
  uint64_t v14;

  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  v4 = *v3;
  if (__ldaxr(*v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *((_QWORD *)v4 + 1);
  v7 = v6 - 1;
  *((_QWORD *)v4 + 1) = v6 - 1;
  if (v6 == 1)
  {
    v14 = *((_QWORD *)v4 + 2);
    v8 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v4 + 3);
    *((_QWORD *)v4 + 3) = 0;
    v9 = v14 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr(v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
  {
    WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v8);
    WTF::fastFree(v11, v12);
  }
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t WTF::HashTable<WebCore::SourceBufferPrivate *,WTF::KeyValuePair<WebCore::SourceBufferPrivate *,WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SourceBufferPrivate *,WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SourceBufferPrivate *>,WTF::HashMap<WebCore::SourceBufferPrivate *,WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SourceBufferPrivate *>,WTF::HashTraits<WebCore::SourceBufferPrivate *>,WTF::HashTraits<WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SourceBufferPrivate *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v50;
  uint64_t *v51;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    v50 = v4;
    v47 = v5;
    while (1)
    {
      v12 = (uint64_t *)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v21 = *a1;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v51 = v10;
          v23 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
          v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
          v26 = v22 & ((v25 >> 31) ^ v25);
          v27 = 1;
          do
          {
            v28 = v26;
            v29 = (uint64_t *)(v21 + 24 * v26);
            v26 = (v26 + v27++) & v22;
          }
          while (*v29);
          v30 = v28;
          v31 = v21 + 24 * v28;
          v34 = *(WTF **)(v31 + 8);
          v33 = v31 + 8;
          v32 = v34;
          v35 = *(unsigned int *)(v33 + 12);
          if ((_DWORD)v35)
          {
            v36 = 16 * v35;
            do
            {
              v37 = *(WTF **)v32;
              if (*(_QWORD *)v32)
              {
                *(_QWORD *)v32 = 0;
                *((_DWORD *)v32 + 2) = 0;
                WTF::fastFree(v37, v8);
              }
              v32 = (WTF *)((char *)v32 + 16);
              v36 -= 16;
            }
            while (v36);
            v32 = *(WTF **)v33;
            v4 = v50;
          }
          if (v32)
          {
            *(_QWORD *)v33 = 0;
            *(_DWORD *)(v21 + 24 * v30 + 16) = 0;
            WTF::fastFree(v32, v8);
          }
          *v29 = *v12;
          v38 = v4 + 24 * v9;
          *(_QWORD *)v33 = 0;
          *(_QWORD *)(v33 + 8) = 0;
          v40 = *(_QWORD *)(v38 + 8);
          v39 = v38 + 8;
          *(_QWORD *)v39 = 0;
          *(_QWORD *)v33 = v40;
          v41 = *(_DWORD *)(v39 + 8);
          *(_DWORD *)(v39 + 8) = 0;
          *(_DWORD *)(v21 + 24 * v30 + 16) = v41;
          v42 = *(_DWORD *)(v39 + 12);
          *(_DWORD *)(v39 + 12) = 0;
          *(_DWORD *)(v33 + 12) = v42;
          v43 = *(unsigned int *)(v39 + 12);
          v44 = *(WTF **)v39;
          if ((_DWORD)v43)
          {
            v45 = 16 * v43;
            v11 = v47;
            do
            {
              v46 = *(WTF **)v44;
              if (*(_QWORD *)v44)
              {
                *(_QWORD *)v44 = 0;
                *((_DWORD *)v44 + 2) = 0;
                WTF::fastFree(v46, v8);
              }
              v44 = (WTF *)((char *)v44 + 16);
              v45 -= 16;
            }
            while (v45);
            v44 = *(WTF **)v39;
            if (*(_QWORD *)v39)
            {
LABEL_35:
              *(_QWORD *)v39 = 0;
              *(_DWORD *)(v39 + 8) = 0;
              WTF::fastFree(v44, v8);
            }
          }
          else
          {
            v11 = v47;
            if (v44)
              goto LABEL_35;
          }
          v4 = v50;
          v10 = v51;
          if (v12 == a3)
            v10 = v29;
          goto LABEL_38;
        }
        v14 = v4 + 24 * v9;
        v17 = *(WTF **)(v14 + 8);
        v15 = v14 + 8;
        v16 = v17;
        v18 = *(unsigned int *)(v15 + 12);
        if ((_DWORD)v18)
        {
          v19 = 16 * v18;
          do
          {
            v20 = *(WTF **)v16;
            if (*(_QWORD *)v16)
            {
              *(_QWORD *)v16 = 0;
              *((_DWORD *)v16 + 2) = 0;
              WTF::fastFree(v20, v8);
            }
            v16 = (WTF *)((char *)v16 + 16);
            v19 -= 16;
          }
          while (v19);
          v16 = *(WTF **)v15;
        }
        if (v16)
        {
          *(_QWORD *)v15 = 0;
          *(_DWORD *)(v4 + 24 * v9 + 16) = 0;
          WTF::fastFree(v16, v8);
        }
      }
LABEL_38:
      if (++v9 == v11)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

_DWORD *WebCore::GPUCommandEncoder::beginRenderPass@<X0>(WebCore::GPUCommandEncoder *this@<X0>, const WebCore::GPURenderPassDescriptor *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  void *v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  _DWORD *result;
  _BYTE v10[112];
  _DWORD *v11;

  v4 = *((_QWORD *)this + 1);
  WebCore::GPURenderPassDescriptor::convertToBacking(a2, (uint64_t)v10);
  (*(void (**)(_DWORD **__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v4 + 16))(&v11, v4, v10);
  WebCore::WebGPU::RenderPassDescriptor::~RenderPassDescriptor((WebCore::WebGPU::RenderPassDescriptor *)v10, v5);
  v6 = v11;
  if (v11)
  {
    v11 = 0;
    v7 = WTF::fastMalloc((WTF *)0x10);
    v8 = 0;
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = v6;
    *(_QWORD *)a3 = v7;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    v8 = 1;
  }
  *(_DWORD *)(a3 + 16) = v8;
  result = v11;
  v11 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::GPURenderPassDescriptor::convertToBacking@<X0>(WebCore::GPURenderPassDescriptor *this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  WTF *v31;
  int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  WTF *v41;
  WTF *v42;
  int v43;
  int v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  float v53;
  char v54;
  unsigned int v55;
  char v56;
  unsigned int v57;
  char v58;
  char v59;
  int v60;
  unsigned int v61;
  char v62;
  unsigned int v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t result;
  void *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86[2];
  WTF *v87;
  _BYTE v88[32];
  int v89;
  char v90;
  __int16 v91;
  unsigned __int8 v92;
  WTF *v93[2];
  WTF *v94;
  _BYTE v95[32];
  int v96;
  unsigned __int8 v97;
  __int16 v98;
  _QWORD v99[4];
  int v100;
  char v101;
  _QWORD v102[2];

  v4 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v4 += 2;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = v4;
  v5 = *((_DWORD *)this + 5);
  if (v5)
  {
    if (v5 >= 0x2E8BA2F)
    {
      __break(0xC471u);
LABEL_130:
      JUMPOUT(0x195258D74);
    }
    v6 = 88 * v5;
    v7 = WTF::fastMalloc((WTF *)(88 * v5));
    *(_DWORD *)(a2 + 16) = (v6 & 0xFFFFFFF8) / 0x58;
    *(_QWORD *)(a2 + 8) = v7;
    if (*((_DWORD *)this + 5))
    {
      v9 = 0;
      while (1)
      {
        v10 = *((_QWORD *)this + 1) + 88 * v9;
        if (*(_BYTE *)(v10 + 80))
          break;
        LOBYTE(v86[0]) = 0;
        v92 = 0;
LABEL_55:
        v39 = *(_DWORD *)(a2 + 20);
        v40 = *(_QWORD *)(a2 + 8) + 88 * v39;
        *(_BYTE *)v40 = 0;
        *(_BYTE *)(v40 + 80) = 0;
        if (v92)
        {
          v41 = v86[0];
          v86[0] = 0;
          *(_QWORD *)v40 = v41;
          *(WTF **)(v40 + 8) = v86[1];
          v42 = v87;
          v87 = 0;
          *(_BYTE *)(v40 + 24) = 0;
          v8 = (void *)(v40 + 24);
          *(_QWORD *)(v40 + 16) = v42;
          *(_BYTE *)(v40 + 64) = 0;
          if (v90)
          {
            *(_DWORD *)(v40 + 56) = -1;
            v43 = v89;
            if (v89 != -1)
            {
              ((void (*)(WTF **))off_1E334DD58[v89])(v93);
              *(_DWORD *)(v40 + 56) = v43;
            }
            *(_BYTE *)(v40 + 64) = 1;
          }
          *(_WORD *)(v40 + 72) = v91;
          *(_BYTE *)(v40 + 80) = 1;
          v44 = v92;
          *(_DWORD *)(a2 + 20) = v39 + 1;
          if (v44)
          {
            if (v90)
            {
              if (v89 != -1)
                ((void (*)(WTF **, _BYTE *))off_1E334DD48[v89])(v93, v88);
              v89 = -1;
            }
            v87 = 0;
            v86[0] = 0;
          }
        }
        else
        {
          *(_DWORD *)(a2 + 20) = v39 + 1;
        }
        if (++v9 >= (unint64_t)*((unsigned int *)this + 5))
          goto LABEL_68;
      }
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 8) + 16);
      if (!*(_QWORD *)(v11 + 16))
      {
        v12 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v12 = 1;
        *(_QWORD *)(v12 + 8) = v11;
        v13 = *(unsigned int **)(v11 + 16);
        *(_QWORD *)(v11 + 16) = v12;
        if (v13)
        {
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            atomic_store(1u, v13);
            WTF::fastFree((WTF *)v13, v8);
          }
        }
      }
      v16 = *(unsigned int **)(v11 + 16);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      v93[0] = (WTF *)v16;
      v18 = *(_DWORD *)(v10 + 8);
      BYTE4(v93[1]) = *(_BYTE *)(v10 + 12);
      LODWORD(v93[1]) = v18;
      v19 = *(_QWORD *)(v10 + 16);
      if (v19 && (v20 = *(_QWORD *)(v19 + 8)) != 0 && (v21 = *(_QWORD *)(v20 + 16)) != 0)
      {
        v22 = *(_QWORD *)(v21 + 16);
        if (v22)
          goto LABEL_138;
        v22 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v22 = 1;
        *(_QWORD *)(v22 + 8) = v21;
        v23 = *(unsigned int **)(v21 + 16);
        *(_QWORD *)(v21 + 16) = v22;
        if (!v23)
          goto LABEL_138;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          atomic_store(1u, v23);
          WTF::fastFree((WTF *)v23, v8);
        }
        v22 = *(_QWORD *)(v21 + 16);
        if (v22)
        {
LABEL_138:
          do
            v26 = __ldaxr((unsigned int *)v22);
          while (__stlxr(v26 + 1, (unsigned int *)v22));
        }
      }
      else
      {
        v22 = 0;
      }
      v94 = (WTF *)v22;
      v27 = *(unsigned __int8 *)(v10 + 64);
      if (*(_BYTE *)(v10 + 64))
      {
        v28 = *(unsigned int *)(v10 + 56);
        if ((_DWORD)v28 == -1)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_125;
        }
        v102[0] = &v101;
        ((void (*)(_QWORD *__return_ptr, _QWORD *, uint64_t))off_1E334DD68[v28])(v99, v102, v10 + 24);
        v95[0] = 0;
        v96 = -1;
        v29 = v100;
        if (v100 != -1)
        {
          ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E334DD58[v100])(v102, v95, v99);
          v96 = v29;
        }
        v30 = 1;
      }
      else
      {
        v30 = 0;
        v95[0] = 0;
      }
      v97 = v30;
      if (*(unsigned __int8 *)(v10 + 72) >= 2u)
      {
        __break(0xC471u);
        goto LABEL_130;
      }
      LOBYTE(v98) = *(_BYTE *)(v10 + 72);
      if (*(unsigned __int8 *)(v10 + 73) >= 2u)
      {
        __break(0xC471u);
        JUMPOUT(0x195258D94);
      }
      HIBYTE(v98) = *(_BYTE *)(v10 + 73);
      if (v27 && v100 != -1)
      {
        ((void (*)(_QWORD *, _QWORD *))off_1E334DD48[v100])(v102, v99);
        v30 = v97;
      }
      *(_OWORD *)v86 = *(_OWORD *)v93;
      v31 = v94;
      v93[0] = 0;
      v94 = 0;
      v87 = v31;
      v88[0] = 0;
      v90 = 0;
      if (v30)
      {
        v89 = -1;
        v32 = v96;
        if (v96 == -1)
        {
          v90 = 1;
          v91 = v98;
          v92 = 1;
        }
        else
        {
          ((void (*)(_QWORD *, _BYTE *, _BYTE *))off_1E334DD58[v96])(v102, v88, v95);
          v89 = v32;
          v90 = 1;
          v91 = v98;
          v92 = 1;
          if (!v97)
            goto LABEL_47;
          if (v96 != -1)
            ((void (*)(_QWORD *, _BYTE *))off_1E334DD48[v96])(v102, v95);
        }
        v96 = -1;
      }
      else
      {
        v91 = v98;
        v92 = 1;
      }
LABEL_47:
      v33 = (unsigned int *)v94;
      v94 = 0;
      if (v33)
      {
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          atomic_store(1u, v33);
          WTF::fastFree((WTF *)v33, v8);
        }
      }
      v36 = (unsigned int *)v93[0];
      v93[0] = 0;
      if (v36)
      {
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
        {
          atomic_store(1u, v36);
          WTF::fastFree((WTF *)v36, v8);
        }
      }
      goto LABEL_55;
    }
  }
LABEL_68:
  if (*((_BYTE *)this + 64))
  {
    v45 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 16);
    if (!*(_QWORD *)(v45 + 16))
    {
      v47 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = v45;
      v48 = *(unsigned int **)(v45 + 16);
      *(_QWORD *)(v45 + 16) = v47;
      if (v48)
      {
        do
        {
          v49 = __ldaxr(v48);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, v48));
        if (!v50)
        {
          atomic_store(1u, v48);
          WTF::fastFree((WTF *)v48, v46);
        }
      }
    }
    v51 = *(unsigned int **)(v45 + 16);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 + 1, v51));
    if (*((_BYTE *)this + 36))
      v53 = *((float *)this + 8);
    else
      v53 = -1.0;
    LOBYTE(v55) = *((_BYTE *)this + 41);
    if ((_BYTE)v55)
    {
      v55 = *((unsigned __int8 *)this + 40);
      if (v55 >= 2)
      {
LABEL_125:
        __break(0xC471u);
        JUMPOUT(0x195258DB8);
      }
      v56 = 1;
    }
    else
    {
      v56 = 0;
    }
    LOBYTE(v57) = *((_BYTE *)this + 43);
    if ((_BYTE)v57)
    {
      v57 = *((unsigned __int8 *)this + 42);
      if (v57 >= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x195258DD8);
      }
      v58 = 1;
    }
    else
    {
      v58 = 0;
    }
    v59 = *((_BYTE *)this + 44);
    v60 = *((_DWORD *)this + 12);
    LOBYTE(v61) = *((_BYTE *)this + 53);
    if ((_BYTE)v61)
    {
      v61 = *((unsigned __int8 *)this + 52);
      if (v61 >= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x195258DF8);
      }
      v62 = 1;
    }
    else
    {
      v62 = 0;
    }
    LOBYTE(v63) = *((_BYTE *)this + 55);
    if ((_BYTE)v63)
    {
      v63 = *((unsigned __int8 *)this + 54);
      if (v63 >= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x195258E18);
      }
      v64 = 1;
    }
    else
    {
      v64 = 0;
    }
    v65 = *((_BYTE *)this + 56);
    *(_QWORD *)(a2 + 24) = v51;
    *(float *)(a2 + 32) = v53;
    *(_BYTE *)(a2 + 36) = v55;
    *(_BYTE *)(a2 + 37) = v56;
    *(_BYTE *)(a2 + 38) = v57;
    *(_BYTE *)(a2 + 39) = v58;
    *(_BYTE *)(a2 + 40) = v59;
    *(_WORD *)(a2 + 41) = v86[0];
    *(_BYTE *)(a2 + 43) = BYTE2(v86[0]);
    *(_DWORD *)(a2 + 44) = v60;
    *(_BYTE *)(a2 + 48) = v61;
    *(_BYTE *)(a2 + 49) = v62;
    *(_BYTE *)(a2 + 50) = v63;
    *(_BYTE *)(a2 + 51) = v64;
    v54 = 1;
    *(_BYTE *)(a2 + 52) = v65;
  }
  else
  {
    v54 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  *(_BYTE *)(a2 + 56) = v54;
  v66 = *((_QWORD *)this + 9);
  if (v66 && (v67 = *(_QWORD *)(v66 + 8)) != 0 && (v68 = *(_QWORD *)(v67 + 16)) != 0)
  {
    v69 = *(_QWORD *)(v68 + 16);
    if (v69)
      goto LABEL_139;
    v69 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v69 = 1;
    *(_QWORD *)(v69 + 8) = v68;
    v71 = *(unsigned int **)(v68 + 16);
    *(_QWORD *)(v68 + 16) = v69;
    if (!v71)
      goto LABEL_139;
    do
    {
      v72 = __ldaxr(v71);
      v73 = v72 - 1;
    }
    while (__stlxr(v73, v71));
    if (!v73)
    {
      atomic_store(1u, v71);
      WTF::fastFree((WTF *)v71, v70);
    }
    v69 = *(_QWORD *)(v68 + 16);
    if (v69)
    {
LABEL_139:
      do
        v74 = __ldaxr((unsigned int *)v69);
      while (__stlxr(v74 + 1, (unsigned int *)v69));
    }
  }
  else
  {
    v69 = 0;
  }
  *(_QWORD *)(a2 + 64) = v69;
  v75 = *((_QWORD *)this + 10);
  if (v75 && (v76 = *(_QWORD *)(v75 + 8)) != 0 && (v77 = *(_QWORD *)(v76 + 16)) != 0)
  {
    result = *(_QWORD *)(v77 + 16);
    if (result)
      goto LABEL_140;
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = v77;
    v80 = *(unsigned int **)(v77 + 16);
    *(_QWORD *)(v77 + 16) = result;
    if (!v80)
      goto LABEL_140;
    do
    {
      v81 = __ldaxr(v80);
      v82 = v81 - 1;
    }
    while (__stlxr(v82, v80));
    if (!v82)
    {
      atomic_store(1u, v80);
      WTF::fastFree((WTF *)v80, v79);
    }
    result = *(_QWORD *)(v77 + 16);
    if (result)
    {
LABEL_140:
      do
        v83 = __ldaxr((unsigned int *)result);
      while (__stlxr(v83 + 1, (unsigned int *)result));
    }
  }
  else
  {
    result = 0;
  }
  v84 = *((_QWORD *)this + 11);
  v85 = *((_QWORD *)this + 12);
  *(_QWORD *)(a2 + 72) = result;
  *(_QWORD *)(a2 + 80) = v84;
  *(_BYTE *)(a2 + 88) = 1;
  *(_QWORD *)(a2 + 96) = v85;
  *(_BYTE *)(a2 + 104) = *((_BYTE *)this + 104);
  return result;
}

_DWORD *WebCore::GPUCommandEncoder::beginComputePass@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char v5;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  _DWORD *result;
  WTF::StringImpl *v27;
  WTF *v28;
  uint64_t v29;
  char v30;
  char v31;
  _DWORD *v32;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a2 + 24);
  if (v5)
  {
    v7 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v7 += 2;
    v8 = *(_QWORD *)(a2 + 8);
    if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0 && (v10 = *(_QWORD *)(v9 + 16)) != 0)
    {
      v11 = *(_QWORD *)(v10 + 16);
      if (v11)
        goto LABEL_38;
      v11 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = v10;
      v13 = *(unsigned int **)(v10 + 16);
      *(_QWORD *)(v10 + 16) = v11;
      if (!v13)
        goto LABEL_38;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v12);
      }
      v11 = *(_QWORD *)(v10 + 16);
      if (v11)
      {
LABEL_38:
        do
          v16 = __ldaxr((unsigned int *)v11);
        while (__stlxr(v16 + 1, (unsigned int *)v11));
      }
    }
    else
    {
      v11 = 0;
    }
    v17 = *(_QWORD *)(a2 + 16);
    v27 = v7;
    v28 = (WTF *)v11;
    v29 = v17;
    v5 = 1;
    v30 = 1;
  }
  else
  {
    LOBYTE(v27) = 0;
  }
  v31 = v5;
  (*(void (**)(_DWORD **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 24))(&v32, v4, &v27);
  if (v31)
  {
    if (v30)
    {
      v19 = (unsigned int *)v28;
      v28 = 0;
      if (v19)
      {
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          atomic_store(1u, v19);
          WTF::fastFree((WTF *)v19, v18);
        }
      }
    }
    v22 = v27;
    v27 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  v23 = v32;
  if (v32)
  {
    v32 = 0;
    v24 = WTF::fastMalloc((WTF *)0x10);
    v25 = 0;
    *(_DWORD *)v24 = 1;
    *(_QWORD *)(v24 + 8) = v23;
    *(_QWORD *)a3 = v24;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    v25 = 1;
  }
  *(_DWORD *)(a3 + 16) = v25;
  result = v32;
  v32 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

unsigned int *WebCore::GPUCommandEncoder::copyBufferToTexture(uint64_t a1, uint64_t *a2, WebCore::GPUImageCopyTexture *this, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *result;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  uint64_t v24;
  _QWORD v25[2];
  int v26;
  WTF *v27[2];
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  int v32;
  char v33;
  int v34;
  char v35;
  WTF *v36;
  char v37;
  char *v38;

  v6 = *(_QWORD *)(a1 + 8);
  v31 = *a2;
  v33 = *((_BYTE *)a2 + 12);
  v32 = *((_DWORD *)a2 + 2);
  v34 = *((_DWORD *)a2 + 4);
  v35 = *((_BYTE *)a2 + 20);
  v7 = *(_QWORD *)(*(_QWORD *)(a2[3] + 8) + 16);
  if (!*(_QWORD *)(v7 + 16))
  {
    v9 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = v7;
    v10 = *(unsigned int **)(v7 + 16);
    *(_QWORD *)(v7 + 16) = v9;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v8);
      }
    }
  }
  v13 = *(unsigned int **)(v7 + 16);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  v36 = (WTF *)v13;
  WebCore::GPUImageCopyTexture::convertToBacking((unsigned int *)this, (uint64_t)v27);
  v15 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v15 == -1)
  {
    v23 = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::GPUImageCopyTexture::convertToBacking(v23, v24);
  }
  else
  {
    v38 = &v37;
    ((void (*)(_QWORD *__return_ptr, char **, uint64_t))off_1E334DDA8[v15])(v25, &v38, a4);
    (*(void (**)(uint64_t, uint64_t *, WTF **, _QWORD *))(*(_QWORD *)v6 + 40))(v6, &v31, v27, v25);
    if (v26 != -1)
      ((void (*)(char **, _QWORD *))off_1E334DDB8[v26])(&v38, v25);
    if (v30)
    {
      if (v29 != -1)
        ((void (*)(_QWORD *, uint64_t *))off_1E334DD88[v29])(v25, &v28);
      v29 = -1;
    }
    v17 = (unsigned int *)v27[0];
    v27[0] = 0;
    if (v17)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, v16);
      }
    }
    result = (unsigned int *)v36;
    v36 = 0;
    if (result)
    {
      do
      {
        v21 = __ldaxr(result);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, result));
      if (!v22)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v16);
      }
    }
  }
  return result;
}

unsigned int *WebCore::GPUImageCopyTexture::convertToBacking@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  WebCore::GPUImageCopyTexture *v16;
  _QWORD v17[2];
  int v18;
  char v19;
  char *v20;

  v2 = this;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 24);
  if (!*(_QWORD *)(v4 + 16))
  {
    v6 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = v4;
    this = *(unsigned int **)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v6;
    if (this)
    {
      do
      {
        v7 = __ldaxr(this);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, this));
      if (!v8)
      {
        atomic_store(1u, this);
        this = (unsigned int *)WTF::fastFree((WTF *)this, v5);
      }
    }
  }
  v9 = *(unsigned int **)(v4 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)a2 = v9;
  *(_DWORD *)(a2 + 8) = v2[2];
  if (!*((_BYTE *)v2 + 40))
  {
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 40) = 0;
    v14 = *((unsigned __int8 *)v2 + 48);
    if (v14 <= 2)
    {
      *(_BYTE *)(a2 + 48) = v14;
      return this;
    }
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x195259394);
  }
  v11 = v2[8];
  if ((_DWORD)v11 == -1)
  {
    v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned int *)WebCore::GPUCommandEncoder::copyTextureToBuffer(v15, v16);
  }
  v20 = &v19;
  this = (unsigned int *)((unsigned int *(*)(_QWORD *__return_ptr, char **, unsigned int *))off_1E334DD78[v11])(v17, &v20, v2 + 4);
  *(_BYTE *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 32) = -1;
  v12 = v18;
  if (v18 != -1)
  {
    this = (unsigned int *)((uint64_t (*)(char **, uint64_t, _QWORD *))off_1E334DD98[v18])(&v20, a2 + 16, v17);
    *(_DWORD *)(a2 + 32) = v12;
  }
  *(_BYTE *)(a2 + 40) = 1;
  v13 = *((unsigned __int8 *)v2 + 48);
  if (v13 >= 3)
    goto LABEL_18;
  *(_BYTE *)(a2 + 48) = v13;
  if (v18 != -1)
    return (unsigned int *)((uint64_t (*)(char **, _QWORD *))off_1E334DD88[v18])(&v20, v17);
  return this;
}

unsigned int *WebCore::GPUCommandEncoder::copyTextureToBuffer(uint64_t a1, WebCore::GPUImageCopyTexture *this, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *result;
  unsigned int v21;
  unsigned int v22;
  int v23;
  WebCore::GPUImageCopyTexture *v24;
  _QWORD v25[2];
  int v26;
  uint64_t v27;
  int v28;
  char v29;
  int v30;
  char v31;
  WTF *v32;
  WTF *v33[2];
  uint64_t v34;
  int v35;
  char v36;
  char v37;
  char *v38;

  v6 = *(_QWORD *)(a1 + 8);
  WebCore::GPUImageCopyTexture::convertToBacking((unsigned int *)this, (uint64_t)v33);
  v27 = *a3;
  v28 = *((_DWORD *)a3 + 2);
  v29 = *((_BYTE *)a3 + 12);
  v31 = *((_BYTE *)a3 + 20);
  v30 = *((_DWORD *)a3 + 4);
  v7 = *(_QWORD *)(*(_QWORD *)(a3[3] + 8) + 16);
  if (!*(_QWORD *)(v7 + 16))
  {
    v9 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = v7;
    v10 = *(unsigned int **)(v7 + 16);
    *(_QWORD *)(v7 + 16) = v9;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v8);
      }
    }
  }
  v13 = *(unsigned int **)(v7 + 16);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  v32 = (WTF *)v13;
  v15 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v15 == -1)
  {
    v23 = std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned int *)WebCore::GPUCommandEncoder::copyTextureToTexture(v23, v24);
  }
  else
  {
    v38 = &v37;
    ((void (*)(_QWORD *__return_ptr, char **, uint64_t))off_1E334DDA8[v15])(v25, &v38, a4);
    (*(void (**)(uint64_t, WTF **, uint64_t *, _QWORD *))(*(_QWORD *)v6 + 48))(v6, v33, &v27, v25);
    if (v26 != -1)
      ((void (*)(char **, _QWORD *))off_1E334DDB8[v26])(&v38, v25);
    v17 = (unsigned int *)v32;
    v32 = 0;
    if (v17)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, v16);
      }
    }
    if (v36)
    {
      if (v35 != -1)
        ((void (*)(uint64_t *, uint64_t *))off_1E334DD88[v35])(&v27, &v34);
      v35 = -1;
    }
    result = (unsigned int *)v33[0];
    v33[0] = 0;
    if (result)
    {
      do
      {
        v21 = __ldaxr(result);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, result));
      if (!v22)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v16);
      }
    }
  }
  return result;
}

unsigned int *WebCore::GPUCommandEncoder::copyTextureToTexture(uint64_t a1, WebCore::GPUImageCopyTexture *this, unsigned int *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *result;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD v16[2];
  int v17;
  WTF *v18[2];
  uint64_t v19;
  int v20;
  char v21;
  WTF *v22[2];
  uint64_t v23;
  int v24;
  char v25;
  char v26;
  char *v27;

  v6 = *(_QWORD *)(a1 + 8);
  WebCore::GPUImageCopyTexture::convertToBacking((unsigned int *)this, (uint64_t)v22);
  WebCore::GPUImageCopyTexture::convertToBacking(a3, (uint64_t)v18);
  v7 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v7 == -1)
  {
    v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned int *)WebCore::GPUCommandEncoder::finish(v15);
  }
  else
  {
    v27 = &v26;
    ((void (*)(_QWORD *__return_ptr, char **, uint64_t))off_1E334DDA8[v7])(v16, &v27, a4);
    (*(void (**)(uint64_t, WTF **, WTF **, _QWORD *))(*(_QWORD *)v6 + 56))(v6, v22, v18, v16);
    if (v17 != -1)
      ((void (*)(char **, _QWORD *))off_1E334DDB8[v17])(&v27, v16);
    if (v21)
    {
      if (v20 != -1)
        ((void (*)(_QWORD *, uint64_t *))off_1E334DD88[v20])(v16, &v19);
      v20 = -1;
    }
    v9 = (unsigned int *)v18[0];
    v18[0] = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v8);
      }
    }
    if (v25)
    {
      if (v24 != -1)
        ((void (*)(WTF **, uint64_t *))off_1E334DD88[v24])(v18, &v23);
      v24 = -1;
    }
    result = (unsigned int *)v22[0];
    v22[0] = 0;
    if (result)
    {
      do
      {
        v13 = __ldaxr(result);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, result));
      if (!v14)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v8);
      }
    }
  }
  return result;
}

_DWORD *WebCore::GPUCommandEncoder::finish@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  BOOL v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  _DWORD *result;
  WTF::StringImpl *v13;
  _DWORD *v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(WTF::StringImpl **)a2;
  if (*(_BYTE *)(a2 + 8))
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
    v5 = 0;
  else
    *(_DWORD *)v5 += 2;
  v13 = v5;
  (*(void (**)(_DWORD **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 112))(&v14, v4, &v13);
  v8 = v13;
  v13 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v14;
  if (v14)
  {
    v14 = 0;
    v10 = WTF::fastMalloc((WTF *)0x10);
    v11 = 0;
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)a3 = v10;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    v11 = 1;
  }
  *(_DWORD *)(a3 + 16) = v11;
  result = v14;
  v14 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::GPUComputePassEncoder::setBindGroup@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (__CFADD__(a5, a6))
    goto LABEL_10;
  v8 = *(_QWORD *)(a4 + 32);
  if (!v8)
    goto LABEL_9;
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    goto LABEL_34;
  v10 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v10 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v9 & 0x3FFFFFFFFLL) + v10))
    goto LABEL_34;
  v11 = *(_BYTE *)(a4 + 6);
  if ((v11 & 3) == 0)
  {
    v8 = *(_QWORD *)(a4 + 16);
    goto LABEL_9;
  }
  if (*(_BYTE *)(v8 + 64) && (v32 = *(_QWORD *)(v8 + 32)) != 0)
  {
    v21 = atomic_load((unint64_t *)(v32 + 32));
    v11 = *(_BYTE *)(a4 + 6);
  }
  else
  {
    v21 = *(_QWORD *)(v8 + 48);
  }
  v22 = *(_QWORD *)(a4 + 8);
  if ((v11 & 4) == 0)
  {
    v23 = *(_QWORD *)(a4 + 16) + v22 <= v21 && v21 >= v22;
    if (v23)
      v8 = 0;
    else
      v8 = *(_QWORD *)(a4 + 16);
    goto LABEL_9;
  }
  v23 = v21 >= v22;
  v24 = v21 - v22;
  if (v23)
  {
LABEL_34:
    v8 = 0;
    goto LABEL_9;
  }
  if ((*(_BYTE *)(a4 + 4) - 4) > 7u)
    LOBYTE(v25) = 0;
  else
    v25 = qword_1968DCFD0[(char)(*(_BYTE *)(a4 + 4) - 4)];
  v8 = (-1 << v25) & v24;
LABEL_9:
  if (a5 + (unint64_t)a6 > v8 >> 2)
  {
LABEL_10:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a7 = 32;
    *(_BYTE *)(a7 + 16) = 1;
    return result;
  }
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a3 + 8);
  v15 = *(_QWORD *)(a4 + 32);
  if (!v15)
  {
    v19 = 0;
    goto LABEL_45;
  }
  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    v17 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (!v17 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
    {
      v19 = *(_QWORD *)(a4 + 24);
LABEL_43:
      v26 = *(_BYTE *)(a4 + 6);
      if ((v26 & 3) == 0)
      {
        v15 = *(_QWORD *)(a4 + 16);
        goto LABEL_45;
      }
      if (*(_BYTE *)(v15 + 64) && (v33 = *(_QWORD *)(v15 + 32)) != 0)
      {
        v27 = atomic_load((unint64_t *)(v33 + 32));
        v26 = *(_BYTE *)(a4 + 6);
      }
      else
      {
        v27 = *(_QWORD *)(v15 + 48);
      }
      v28 = *(_QWORD *)(a4 + 8);
      if ((v26 & 4) == 0)
      {
        if (*(_QWORD *)(a4 + 16) + v28 <= v27 && v27 >= v28)
          v15 = 0;
        else
          v15 = *(_QWORD *)(a4 + 16);
        goto LABEL_45;
      }
      v23 = v27 >= v28;
      v30 = v27 - v28;
      if (!v23)
      {
        if ((*(_BYTE *)(a4 + 4) - 4) > 7u)
          LOBYTE(v31) = 0;
        else
          v31 = qword_1968DCFD0[(char)(*(_BYTE *)(a4 + 4) - 4)];
        v15 = (-1 << v31) & v30;
        goto LABEL_45;
      }
      goto LABEL_21;
    }
    v18 = v16 & 0x3FFFFFFFFLL;
    if (v18 + v17)
    {
      v19 = *(_QWORD *)(a4 + 24);
      if (v19)
      {
        if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
          goto LABEL_43;
        v19 = (v19 & 0x3FFFFFFFFLL) + v17;
      }
    }
    else
    {
      v19 = 0;
    }
    v20 = -v17;
    if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0] || v18 != v20)
      goto LABEL_43;
  }
  else
  {
    v19 = 0;
  }
LABEL_21:
  v15 = 0;
LABEL_45:
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 56))(v13, a2, v14, v19, v15 >> 2, a5, a6);
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  return result;
}

WTF::StringImpl *WebCore::GPUDevice::createAutoPipelineLayout@<X0>(WebCore::GPUDevice *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  WTF *v5;
  WTF::StringImpl *result;
  _DWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF *v10;
  int v11;
  char v12;
  _DWORD *v13;

  v3 = *((_QWORD *)this + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOBYTE(v10) = 0;
  v12 = 0;
  (*(void (**)(_DWORD **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 72))(&v13, v3, &v9);
  if (v12)
  {
    v5 = v10;
    if (v10)
    {
      v10 = 0;
      v11 = 0;
      WTF::fastFree(v5, v4);
    }
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)result -= 2;
  }
  v7 = v13;
  if (v13)
  {
    v13 = 0;
    v8 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = v7;
    *a2 = v8;
    result = (WTF::StringImpl *)v13;
    v13 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

WebCore::ContextDestructionObserver *WebCore::GPUDevice::GPUDevice(WebCore::ContextDestructionObserver *this, WebCore::ScriptExecutionContext *a2, uint64_t *a3, uint64_t *a4)
{
  WebCore::ScriptExecutionContext *v6;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _QWORD *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  _QWORD v19[3];
  WebCore::ContextDestructionObserver *v20;

  v6 = a2;
  *((_DWORD *)this + 6) = 1;
  if (a2 && !*((_BYTE *)a2 + 274))
  {
    v8 = (char *)a2 - 192;
    v9 = *((_QWORD *)a2 + 64);
    if (v9)
    {
      v10 = *(char **)(v9 + 8);
      if (v10)
        v8 = v10;
    }
    v6 = (WebCore::ScriptExecutionContext *)(v8 + 192);
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*((_BYTE *)v6 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195259D6CLL);
    }
    v20 = this;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v6 + 16, (uint64_t *)&v20, (uint64_t)v19);
  }
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)this = &off_1E334E070;
  *((_QWORD *)this + 4) = &unk_1E334E0F0;
  v11 = WTF::fastMalloc((WTF *)0x38);
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)v11 = 0u;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 32) = v11 + 48;
  *(_DWORD *)(v11 + 40) = 1;
  *((_QWORD *)this + 7) = v11;
  v12 = *a3;
  *a3 = 0;
  *((_QWORD *)this + 8) = v12;
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v12 + 16))(v19);
  v13 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v13 = 1;
  *(_QWORD *)(v13 + 8) = v19[0];
  *((_QWORD *)this + 9) = v13;
  WebCore::GPUDevice::createAutoPipelineLayout(this, (uint64_t *)this + 10);
  *((_BYTE *)this + 120) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  v15 = *(_QWORD **)(*((_QWORD *)this + 9) + 8);
  v16 = *a4;
  *a4 = 0;
  v17 = (WTF::StringImpl *)v15[2];
  v15[2] = v16;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v14);
    else
      *(_DWORD *)v17 -= 2;
  }
  (*(void (**)(_QWORD *, _QWORD *))(*v15 + 72))(v15, v15 + 2);
  return this;
}

void WebCore::GPUDevice::~GPUDevice(WebCore::GPUDevice *this, void *a2)
{
  WebCore::EventTarget *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  unsigned int **v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  WTF *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v22;
  void *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t j;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  _DWORD **v31;
  uint64_t v32;
  _DWORD *v33;
  char v34;

  *(_QWORD *)this = &off_1E334E070;
  *((_QWORD *)this + 4) = &unk_1E334E0F0;
  v3 = (WebCore::GPUDevice *)((char *)this + 32);
  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v7 = (unsigned int **)(v4 + 16 * i);
        if (*v7 != (unsigned int *)-1)
        {
          v8 = v7[1];
          v7[1] = 0;
          if (v8)
          {
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              atomic_store(1u, v8);
              WTF::fastFree((WTF *)v8, a2);
            }
          }
          v11 = *v7;
          *v7 = 0;
          if (v11)
          {
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              atomic_store(1u, v11);
              WTF::fastFree((WTF *)v11, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v14 = *((_QWORD *)this + 11);
  if (v14)
  {
    v26 = *(unsigned int *)(v14 - 4);
    if ((_DWORD)v26)
    {
      for (j = 0; j != v26; ++j)
      {
        v28 = *(unsigned int **)(v14 + 8 * j);
        if (v28 != (unsigned int *)-1)
        {
          *(_QWORD *)(v14 + 8 * j) = 0;
          if (v28)
          {
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
            {
              atomic_store(1u, v28);
              WTF::fastFree((WTF *)v28, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v14 - 16), a2);
  }
  v15 = (WTF *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
    {
      v24 = (_DWORD *)*((_QWORD *)v15 + 1);
      *((_QWORD *)v15 + 1) = 0;
      if (v24)
      {
        if (v24[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
        else
          --v24[2];
      }
      WTF::fastFree(v15, a2);
    }
    else
    {
      --*(_DWORD *)v15;
    }
  }
  v16 = (WTF *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
    {
      v25 = (_DWORD *)*((_QWORD *)v16 + 1);
      *((_QWORD *)v16 + 1) = 0;
      if (v25)
      {
        if (v25[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
        else
          --v25[2];
      }
      WTF::fastFree(v16, a2);
    }
    else
    {
      --*(_DWORD *)v16;
    }
  }
  v17 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  v18 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v18)
  {
    v19 = *(unsigned int *)(v18 + 44);
    if ((_DWORD)v19)
    {
      v31 = *(_DWORD ***)(v18 + 32);
      v32 = 8 * v19;
      do
      {
        v33 = *v31;
        *v31 = 0;
        if (v33)
        {
          if (v33[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 16))(v33);
          else
            --v33[4];
        }
        ++v31;
        v32 -= 8;
      }
      while (v32);
    }
    v20 = *(WTF **)(v18 + 32);
    if ((WTF *)(v18 + 48) != v20 && v20 != 0)
    {
      *(_QWORD *)(v18 + 32) = 0;
      *(_DWORD *)(v18 + 40) = 0;
      WTF::fastFree(v20, a2);
    }
    if (*(_BYTE *)(v18 + 24))
    {
      v22 = *(unsigned int *)(v18 + 16);
      if ((_DWORD)v22 != -1)
        ((void (*)(char *, uint64_t))off_1E334DDC8[v22])(&v34, v18);
      *(_DWORD *)(v18 + 16) = -1;
    }
    WTF::fastFree((WTF *)v18, a2);
  }
  WebCore::EventTarget::~EventTarget(v3, a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v23);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::GPUDevice::~GPUDevice(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::GPUDevice::~GPUDevice(WebCore::GPUDevice *this, void *a2)
{
  WebCore::GPUDevice::~GPUDevice((WebCore::GPUDevice *)((char *)this - 32), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::GPUDevice::~GPUDevice((WebCore::GPUDevice *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::GPUDevice::destroy(WebCore::GPUDevice *this, WebCore::ScriptExecutionContext *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;

  v4 = *((_QWORD *)this + 11);
  if (!v4)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = v5;
    v5 = (uint64_t *)(v4 + 8 * v6);
    goto LABEL_4;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v5 = (uint64_t *)(v4 + 8 * v6);
  if (!*(_DWORD *)(v4 - 12))
    goto LABEL_3;
  if (!(_DWORD)v6)
  {
    v24 = 0;
    v7 = (uint64_t *)*((_QWORD *)this + 11);
    goto LABEL_59;
  }
  v18 = 8 * v6;
  v7 = (uint64_t *)*((_QWORD *)this + 11);
  while ((unint64_t)(*v7 + 1) <= 1)
  {
    ++v7;
    v18 -= 8;
    if (!v18)
    {
      v7 = v5;
      break;
    }
  }
LABEL_4:
  if (!v4)
  {
    v8 = 0;
    goto LABEL_6;
  }
  v24 = *(unsigned int *)(v4 - 4);
LABEL_59:
  v8 = (uint64_t *)(v4 + 8 * v24);
LABEL_6:
  if (v8 != v7)
  {
    while (!*(_QWORD *)(*v7 + 8))
    {
      v9 = v7 + 1;
      v7 = v5;
      if (v9 != v5)
      {
        v7 = v9;
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          if (++v7 == v5)
          {
            v7 = v5;
            break;
          }
        }
      }
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
  }
  if (v4)
    v10 = (uint64_t *)(v4 + 8 * *(unsigned int *)(v4 - 4));
  else
    v10 = 0;
  if (v7 != v10)
  {
    do
    {
      v12 = *v7;
      v11 = v7 + 1;
      v13 = *(_QWORD *)(v12 + 8);
      *(_BYTE *)(v13 + 256) = 1;
      WebCore::GPUBuffer::internalUnmap((WebCore::GPUBuffer *)v13, a2);
      *(_QWORD *)(v13 + 40) = 0;
      (*(void (**)(_QWORD))(**(_QWORD **)(v13 + 16) + 40))(*(_QWORD *)(v13 + 16));
      v14 = v5;
      if (v11 != v5)
      {
        v14 = v11;
        while ((unint64_t)(*v14 + 1) <= 1)
        {
          if (++v14 == v5)
          {
            v14 = v5;
            break;
          }
        }
      }
      v7 = v8;
      if (v14 != v8)
      {
        v7 = v14;
        if (!*(_QWORD *)(*v14 + 8))
        {
          while (1)
          {
            v15 = v7 + 1;
            v7 = v5;
            if (v15 != v5)
            {
              v7 = v15;
              while ((unint64_t)(*v7 + 1) <= 1)
              {
                if (++v7 == v5)
                {
                  v7 = v5;
                  break;
                }
              }
            }
            if (v7 == v8)
              break;
            if (*(_QWORD *)(*v7 + 8))
              goto LABEL_34;
          }
          v7 = v8;
        }
      }
LABEL_34:
      ++*((_DWORD *)this + 24);
    }
    while (v7 != v10);
    v4 = *((_QWORD *)this + 11);
  }
  if (v4)
  {
    *((_QWORD *)this + 11) = 0;
    v19 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v19)
    {
      for (i = 0; i != v19; ++i)
      {
        v21 = *(unsigned int **)(v4 + 8 * i);
        if (v21 != (unsigned int *)-1)
        {
          *(_QWORD *)(v4 + 8 * i) = 0;
          if (v21)
          {
            do
            {
              v22 = __ldaxr(v21);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, v21));
            if (!v23)
            {
              atomic_store(1u, v21);
              WTF::fastFree((WTF *)v21, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
    v16 = *((_QWORD *)this + 11);
    *((_DWORD *)this + 24) = 0;
    if (v16)
    {
      LODWORD(v16) = *(_DWORD *)(v16 - 12);
      if (v16 > 0x7FFFFFFE)
        LODWORD(v16) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v16) = 0;
    *((_DWORD *)this + 24) = 0;
  }
  *((_DWORD *)this + 25) = 2 * v16;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 24))(*((_QWORD *)this + 8));
}

_DWORD *WebCore::GPUDevice::createBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  WTF *v7;
  void *v8;
  WTF *v9;
  unint64_t v10;
  _DWORD *result;
  int v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  int v23;
  WTF::StringImpl *v24[2];
  __int16 v25;
  char v26;
  _DWORD *v27;

  v6 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 20))
  {
    v7 = *(WTF **)(*(_QWORD *)(a1 + 64) + 48);
    ++*(_DWORD *)v7;
    v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    v10 = *((_QWORD *)v7 + 12);
    *((_QWORD *)v9 + 1) = 0;
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, v8);
    else
      --*(_DWORD *)v7;
    result = (_DWORD *)WTF::fastFree(v9, v8);
    if (v6 > v10)
    {
      *(_BYTE *)a3 = 32;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 16) = 1;
      return result;
    }
    v12 = *(unsigned __int8 *)(a2 + 20);
  }
  else
  {
    v12 = 0;
  }
  v13 = *(_DWORD *)(a2 + 16);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v15 += 2;
  v16 = *(WTF::StringImpl **)(a2 + 8);
  v24[0] = v15;
  v24[1] = v16;
  v25 = v13;
  v26 = v12;
  (*(void (**)(_DWORD **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 32))(&v27, v14, v24);
  v18 = v24[0];
  v24[0] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v27;
  if (v27)
  {
    v27 = 0;
    v20 = WTF::fastMalloc((WTF *)0x108);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 8) = 0;
    *(_QWORD *)(v20 + 16) = v19;
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(v20 + 32) = 0;
    *(_QWORD *)(v20 + 48) = 0;
    *(_QWORD *)(v20 + 56) = 0;
    *(_QWORD *)(v20 + 40) = v6;
    *(_DWORD *)(v20 + 64) = v13;
    *(_BYTE *)(v20 + 68) = 2 * (v12 != 0);
    *(_BYTE *)(v20 + 72) = 0;
    *(_BYTE *)(v20 + 80) = 0;
    v21 = (unsigned int *)WTF::WeakPtr<WebCore::GPUDevice,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::GPUDevice>(a1);
    if (v21)
    {
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
    }
    *(_QWORD *)(v20 + 88) = v21;
    *(_QWORD *)(v20 + 96) = v20 + 112;
    *(_QWORD *)(v20 + 104) = 8;
    *(_BYTE *)(v20 + 240) = 1;
    *(_QWORD *)(v20 + 248) = 0;
    *(_BYTE *)(v20 + 256) = 0;
    *(_BYTE *)(v20 + 257) = v12 != 0;
    if (v12)
      *(_QWORD *)(v20 + 56) = *(_QWORD *)(v20 + 40);
    v23 = 0;
    *(_QWORD *)a3 = v20;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    v23 = 1;
  }
  *(_DWORD *)(a3 + 16) = v23;
  result = v27;
  v27 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::GPUDevice::isSupportedFormat(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 40);
  switch(a2)
  {
    case '*':
      if (!*(_DWORD *)(v2 + 20))
        goto LABEL_23;
      v7 = 0;
      do
      {
        result = MEMORY[0x19AEA53F4](*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * v7), "depth32float-stencil8", 21);
        if ((result & 1) != 0)
          break;
        ++v7;
      }
      while (v7 < *(unsigned int *)(v2 + 20));
      break;
    case '+':
    case ',':
    case '-':
    case '.':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
      if (!*(_DWORD *)(v2 + 20))
        goto LABEL_23;
      v5 = 0;
      do
      {
        result = MEMORY[0x19AEA53F4](*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * v5), "texture-compression-bc", 22);
        if ((result & 1) != 0)
          break;
        ++v5;
      }
      while (v5 < *(unsigned int *)(v2 + 20));
      break;
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '?':
    case '@':
    case 'A':
    case 'B':
      if (!*(_DWORD *)(v2 + 20))
        goto LABEL_23;
      v6 = 0;
      do
      {
        result = MEMORY[0x19AEA53F4](*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * v6), "texture-compression-etc2", 24);
        if ((result & 1) != 0)
          break;
        ++v6;
      }
      while (v6 < *(unsigned int *)(v2 + 20));
      break;
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
      if (*(_DWORD *)(v2 + 20))
      {
        v3 = 0;
        do
        {
          result = MEMORY[0x19AEA53F4](*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * v3), "texture-compression-astc", 24);
          if ((result & 1) != 0)
            break;
          ++v3;
        }
        while (v3 < *(unsigned int *)(v2 + 20));
      }
      else
      {
LABEL_23:
        result = 0;
      }
      break;
    default:
      result = 1;
      break;
  }
  return result;
}

_DWORD *WebCore::GPUDevice::createTexture@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  int v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  void *v15;
  WTF *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *result;
  WTF::StringImpl *v21;
  _QWORD v22[2];
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  WTF *v28;
  uint64_t v29;
  char v30;
  WTF::StringImpl *v31;

  if ((WebCore::GPUDevice::isSupportedFormat(a1, *(unsigned __int8 *)(a2 + 41)) & 1) == 0)
  {
    result = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 33;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v7 += 2;
  v21 = v7;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_34;
  }
  v31 = (WTF::StringImpl *)&v30;
  ((void (*)(_QWORD *__return_ptr, WTF::StringImpl **, uint64_t))off_1E334DDA8[v8])(v22, &v31, a2 + 8);
  v24 = *(_QWORD *)(a2 + 32);
  if (*(unsigned __int8 *)(a2 + 40) >= 3u)
  {
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x19525A97CLL);
  }
  v25 = *(_BYTE *)(a2 + 40);
  if (*(unsigned __int8 *)(a2 + 41) >= 0x5Fu)
    goto LABEL_35;
  v26 = *(_BYTE *)(a2 + 41);
  v27 = *(_BYTE *)(a2 + 44) & 0x1F;
  v28 = 0;
  v29 = 0;
  v9 = *(_DWORD *)(a2 + 60);
  if (v9)
  {
    v10 = (WTF *)WTF::fastMalloc((WTF *)*(unsigned int *)(a2 + 60));
    LODWORD(v29) = v9;
    v28 = v10;
    v11 = *(unsigned int *)(a2 + 60);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = *(_QWORD *)(a2 + 48);
      while (1)
      {
        v14 = *(unsigned __int8 *)(v13 + v12);
        if (v14 >= 0x5F)
          break;
        *((_BYTE *)v10 + v12) = v14;
        HIDWORD(v29) = ++v12;
        if (v11 == v12)
          goto LABEL_12;
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x19525A958);
    }
  }
LABEL_12:
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v6 + 40))(&v31, v6, &v21);
  v16 = v28;
  if (v28)
  {
    v28 = 0;
    LODWORD(v29) = 0;
    WTF::fastFree(v16, v15);
  }
  if (v23 != -1)
    ((void (*)(char *, _QWORD *))off_1E334DDB8[v23])(&v30, v22);
  v23 = -1;
  v17 = v21;
  v21 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (v31)
  {
    v21 = v31;
    v31 = 0;
    v18 = WTF::fastMalloc((WTF *)0x50);
    WebCore::GPUTexture::GPUTexture(v18, (uint64_t *)&v21, a2, a1);
    *(_QWORD *)a3 = v19;
    *(_DWORD *)(a3 + 16) = 0;
    if (v21)
    {
      if (*((_DWORD *)v21 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v21 + 8))();
      else
        --*((_DWORD *)v21 + 2);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_DWORD *)(a3 + 16) = 1;
  }
  result = v31;
  v31 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *WebCore::GPUDevice::createSampler@<X0>(WebCore::GPUSamplerDescriptor *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  _DWORD *result;
  WTF::StringImpl *v11[3];
  int v12;
  _DWORD *v13;

  v4 = *(_QWORD *)(a2 + 64);
  if (*((_BYTE *)this + 32))
  {
    WebCore::GPUSamplerDescriptor::convertToBacking((uint64_t)this, (uint64_t)v11);
  }
  else
  {
    memset(v11, 0, 14);
    v11[2] = (WTF::StringImpl *)0x4200000000000000;
    v12 = 0x10000;
  }
  (*(void (**)(_DWORD **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 48))(&v13, v4, v11);
  v6 = v11[0];
  v11[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v13;
  if (v13)
  {
    v13 = 0;
    v8 = WTF::fastMalloc((WTF *)0x10);
    v9 = 0;
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = v7;
    *(_QWORD *)a3 = v8;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    v9 = 1;
  }
  *(_DWORD *)(a3 + 16) = v9;
  result = v13;
  v13 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  double v24;
  double v25;
  double v26;
  unsigned int v27;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_28;
    v5 = 0;
    do
    {
      while (1)
      {
        v6 = (uint64_t *)(v3 + 16 * --v4);
        v7 = *v6;
        if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(v7 + 8))
          break;
        if (!v4)
          goto LABEL_17;
      }
      *v6 = 0;
      do
      {
        v8 = __ldaxr((unsigned int *)v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, (unsigned int *)v7));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)v7);
        WTF::fastFree((WTF *)v7, a2);
      }
      *v6 = -1;
      v10 = v3 + 16 * v4;
      v11 = *(unsigned int **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, a2);
        }
      }
      ++v5;
    }
    while (v4);
LABEL_17:
    v3 = *(_QWORD *)a1;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v15 = *(_DWORD *)(v14 - 12);
      else
        v15 = 0;
      *(_DWORD *)(v14 - 12) = v15 - v5;
      v3 = *(_QWORD *)a1;
    }
    if (v3)
    {
      v16 = *(_DWORD *)(v3 - 4);
      v17 = *(unsigned int *)(v3 - 12);
      if (v16 >= 9 && 6 * (int)v17 < v16)
      {
        v21 = (v17 - 1) | ((v17 - 1) >> 1) | ((((_DWORD)v17 - 1) | ((v17 - 1) >> 1)) >> 2);
        v22 = v21 | (v21 >> 4) | ((v21 | (v21 >> 4)) >> 8);
        v23 = (v22 | HIWORD(v22)) + 1;
        if (v23 > 0x400)
        {
          if (v23 > 2 * v17)
            goto LABEL_39;
        }
        else if (3 * v23 > 4 * v17)
        {
LABEL_37:
          v24 = (double)v17;
          v25 = (double)v23;
          v26 = 0.604166667;
          goto LABEL_40;
        }
        LODWORD(v23) = 2 * v23;
        if (v23 <= 0x400)
          goto LABEL_37;
LABEL_39:
        v24 = (double)v17;
        v25 = (double)v23;
        v26 = 0.416666667;
LABEL_40:
        if (v25 * v26 <= v24)
          LODWORD(v23) = 2 * v23;
        if (v23 <= 8)
          v27 = 8;
        else
          v27 = v23;
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)a1, v27);
        v3 = *(_QWORD *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v3)
        {
          v19 = 0;
          goto LABEL_32;
        }
LABEL_29:
        v19 = *(_DWORD *)(v3 - 12);
        v20 = 0x7FFFFFFF;
        if (v19 >= 0x7FFFFFFF)
          goto LABEL_33;
        goto LABEL_32;
      }
LABEL_28:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_29;
    }
  }
  v19 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_32:
  v20 = v19;
LABEL_33:
  *(_DWORD *)(a1 + 12) = 2 * v20;
}

uint64_t WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultWeakPtrImpl>::find(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  ++*((_DWORD *)a2 + 2);
  if (a3 && *(_QWORD *)(a3 + 8))
  {
    v3 = *a2;
    if (*a2)
    {
      v4 = *(_DWORD *)(v3 - 8);
      v5 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
      v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
      v8 = v4 & ((v7 >> 31) ^ v7);
      for (i = 1; ; ++i)
      {
        v10 = v8;
        v11 = *(_QWORD *)(v3 + 16 * v8);
        if (v11 != -1)
        {
          if (!v11)
          {
            v18 = *(unsigned int *)(v3 - 4);
            v15 = v3 + 16 * v18;
            v16 = v15;
            goto LABEL_17;
          }
          if (v11 == a3)
            break;
        }
        v8 = (v10 + i) & v4;
      }
      v15 = v3 + 16 * v10;
      v18 = *(unsigned int *)(v3 - 4);
      v16 = v3 + 16 * v18;
LABEL_17:
      *(_QWORD *)result = a2;
      *(_QWORD *)(result + 8) = v15;
      v19 = (_QWORD *)(result + 8);
      *(_QWORD *)(result + 16) = v16;
      v17 = v3 + 16 * v18;
    }
    else
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      *(_QWORD *)result = a2;
      *(_QWORD *)(result + 8) = 0;
      v19 = (_QWORD *)(result + 8);
      *(_QWORD *)(result + 16) = 0;
    }
    *(_QWORD *)(result + 24) = v17;
    *(_QWORD *)(result + 32) = v3 + 16 * v18;
    *(_DWORD *)(result + 40) = 0;
LABEL_19:
    while (v15 != v17 && !*(_QWORD *)(*(_QWORD *)v15 + 8))
    {
      v20 = v15 + 16;
      *v19 = v15 + 16;
      v15 = v16;
      if (v20 != v16)
      {
        v15 = v20;
        while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
        {
          v15 += 16;
          *v19 = v15;
          if (v15 == v16)
          {
            v15 = v16;
            goto LABEL_19;
          }
        }
      }
    }
  }
  else
  {
    v12 = *a2;
    if (*a2)
    {
      v13 = *(unsigned int *)(v12 - 4);
      v14 = v12 + 16 * v13;
      *(_QWORD *)result = a2;
      *(_QWORD *)(result + 8) = v14;
    }
    else
    {
      v14 = 0;
      v13 = 0;
      *(_QWORD *)result = a2;
      *(_QWORD *)(result + 8) = 0;
    }
    *(_QWORD *)(result + 16) = v14;
    *(_QWORD *)(result + 24) = v14;
    *(_QWORD *)(result + 32) = v12 + 16 * v13;
    *(_DWORD *)(result + 40) = 0;
  }
  return result;
}

void WebCore::GPUDevice::importExternalTexture(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  int i;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t (**v64)();
  unsigned int v65;
  unsigned int v66;
  char *v67;
  char *v68;
  char v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  char v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t *)(a1 + 104);
  WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(a1 + 104, a2);
  if (*((_DWORD *)a2 + 4))
    goto LABEL_2;
  v45 = a2[1];
  if (!v45)
    goto LABEL_2;
  WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultWeakPtrImpl>::find((uint64_t)&v70, v6, *(_QWORD *)(v45 + 296));
  v46 = *v6;
  if (*v6)
    v46 += 16 * *(unsigned int *)(v46 - 4);
  if (v71 == v46 || (v47 = *(_QWORD *)(v71 + 8)) == 0 || (v48 = *(_QWORD *)(v47 + 8)) == 0)
  {
LABEL_2:
    v7 = *(_QWORD *)(a1 + 64);
    v8 = (WTF::StringImpl *)*a2;
    if (*a2)
      *(_DWORD *)v8 += 2;
    v70 = v8;
    v9 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v9 == -1)
LABEL_82:
      std::__throw_bad_variant_access[abi:sn180100]();
    v68 = &v69;
    ((void (*)(uint64_t *__return_ptr, char **, _QWORD *))off_1E334DDD8[v9])(&v71, &v68, a2 + 1);
    if (*((unsigned __int8 *)a2 + 24) >= 2u)
    {
      __break(0xC471u);
      JUMPOUT(0x19525B4A4);
    }
    v74 = *((_BYTE *)a2 + 24);
    (*(void (**)(char **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 56))(&v68, v7, &v70);
    if (v73 != -1)
      ((void (*)(char *, uint64_t *))off_1E334DDE8[v73])(&v69, &v72);
    v73 = -1;
    v11 = v70;
    v70 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v68;
    if (!v68)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a3 = 8;
      v63 = 1;
      goto LABEL_71;
    }
    v68 = 0;
    v13 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = v12;
    if (*((_DWORD *)a2 + 4) || (v14 = a2[1]) == 0)
    {
LABEL_70:
      v63 = 0;
      *(_QWORD *)a3 = v13;
LABEL_71:
      *(_DWORD *)(a3 + 16) = v63;
      v67 = v68;
      v68 = 0;
      if (v67)
      {
        if (*((_DWORD *)v67 + 2) == 1)
          (*(void (**)(char *))(*(_QWORD *)v67 + 8))(v67);
        else
          --*((_DWORD *)v67 + 2);
      }
      return;
    }
    v15 = *(_QWORD *)(v14 + 296);
    if (v15)
      goto LABEL_88;
    v15 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v15 = 1;
    *(_QWORD *)(v15 + 8) = v14;
    v17 = *(unsigned int **)(v14 + 296);
    *(_QWORD *)(v14 + 296) = v15;
    if (!v17)
      goto LABEL_88;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v16);
    }
    v15 = *(_QWORD *)(v14 + 296);
    if (v15)
    {
LABEL_88:
      do
        v20 = __ldaxr((unsigned int *)v15);
      while (__stlxr(v20 + 1, (unsigned int *)v15));
      WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultWeakPtrImpl>::set<WebCore::HTMLVideoElement,WebCore::GPUExternalTexture&>((uint64_t)v6, *(_QWORD **)(v15 + 8), v13);
      v21 = 0;
      v22 = *(_QWORD *)(v15 + 8);
    }
    else
    {
      WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultWeakPtrImpl>::set<WebCore::HTMLVideoElement,WebCore::GPUExternalTexture&>((uint64_t)v6, 0, v13);
      v22 = 0;
      v21 = 1;
    }
    v23 = *(_QWORD *)(a1 + 8);
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 8);
      if (v24)
        v25 = (WebCore::ScriptExecutionContext *)(v24 - 96);
      else
        v25 = 0;
    }
    else
    {
      v25 = 0;
    }
    v26 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v26 + 16) = 1;
    *(_QWORD *)v26 = &off_1E33A18C0;
    *(_QWORD *)(v26 + 8) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v26, v25);
    *(_QWORD *)v26 = &off_1E334DE10;
    ++*(_DWORD *)v13;
    *(_QWORD *)(v26 + 24) = v13;
    v27 = *(_QWORD *)(v22 + 296);
    if (v27)
      goto LABEL_89;
    v27 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v27 = 1;
    *(_QWORD *)(v27 + 8) = v22;
    v29 = *(unsigned int **)(v22 + 296);
    *(_QWORD *)(v22 + 296) = v27;
    if (!v29)
      goto LABEL_89;
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, v28);
    }
    v27 = *(_QWORD *)(v22 + 296);
    if (v27)
    {
LABEL_89:
      do
        v32 = __ldaxr((unsigned int *)v27);
      while (__stlxr(v32 + 1, (unsigned int *)v27));
    }
    *(_QWORD *)(v26 + 32) = v27;
    v33 = (unsigned int *)WTF::WeakPtr<WebCore::GPUDevice,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::GPUDevice>(a1);
    if (v33)
    {
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 + 1, v33));
    }
    *(_QWORD *)(v26 + 40) = v33;
    v70 = (WTF::StringImpl *)v26;
    WebCore::HTMLVideoElement::requestVideoFrameCallback(v22, (uint64_t *)&v70);
    v35 = v70;
    v70 = 0;
    if (v35)
    {
      if (*((_DWORD *)v35 + 4) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v35 + 16))(v35);
      else
        --*((_DWORD *)v35 + 4);
    }
    ++*(_DWORD *)(a1 + 24);
    if ((v21 & 1) == 0)
    {
      do
        v36 = __ldaxr((unsigned int *)v15);
      while (__stlxr(v36 + 1, (unsigned int *)v15));
    }
    ++*(_DWORD *)v13;
    v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v37 = off_1E334DF48;
    v37[1] = a1;
    v37[2] = v15;
    v37[3] = v13;
    v38 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v38 = 1;
    v39 = *(_DWORD *)(a1 + 24);
    *(_QWORD *)(v38 + 8) = a1;
    ++*(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 24) = v39 + 2;
    v40 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v40 = &off_1E334DF20;
    *((_QWORD *)v40 + 1) = a1;
    *((_QWORD *)v40 + 2) = v38;
    *((_QWORD *)v40 + 3) = v37;
    v70 = v40;
    v41 = *(_QWORD *)(a1 + 8);
    if (v41)
    {
      v42 = *(_QWORD *)(v41 + 8);
      if (v42)
      {
        v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v42 - 96) + 104))(v42 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v43, 22, (uint64_t *)&v70);
        v40 = v70;
        v70 = 0;
        if (!v40)
          goto LABEL_66;
      }
      else
      {
        v70 = 0;
      }
      v64 = *(uint64_t (***)())v40;
    }
    else
    {
      v70 = 0;
      v64 = &off_1E334DF20;
    }
    v64[1]();
LABEL_66:
    if ((v21 & 1) == 0)
    {
      do
      {
        v65 = __ldaxr((unsigned int *)v15);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, (unsigned int *)v15));
      if (!v66)
      {
        atomic_store(1u, (unsigned int *)v15);
        WTF::fastFree((WTF *)v15, v44);
      }
    }
    goto LABEL_70;
  }
  ++*(_DWORD *)v48;
  (*(void (**)(_QWORD))(**(_QWORD **)(v48 + 16) + 24))(*(_QWORD *)(v48 + 16));
  if (*((_DWORD *)a2 + 4))
    goto LABEL_82;
  v50 = a2[1];
  v51 = *(_DWORD *)(a1 + 112);
  v52 = *(_DWORD *)(a1 + 116);
  *(_DWORD *)(a1 + 112) = v51 + 1;
  if (v51 > v52)
    WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)v6, v49);
  v53 = *(_QWORD *)(v50 + 296);
  if (v53)
  {
    if (*(_QWORD *)(v53 + 8))
    {
      v54 = *v6;
      if (*v6)
      {
        v55 = *(_DWORD *)(v54 - 8);
        v56 = (~(v53 << 32) + v53) ^ ((unint64_t)(~(v53 << 32) + v53) >> 22);
        v57 = 9 * ((v56 + ~(v56 << 13)) ^ ((v56 + ~(v56 << 13)) >> 8));
        v58 = (v57 ^ (v57 >> 15)) + ~((v57 ^ (v57 >> 15)) << 27);
        v59 = v55 & ((v58 >> 31) ^ v58);
        for (i = 1; ; ++i)
        {
          v61 = v59;
          v62 = *(_QWORD *)(v54 + 16 * v59);
          if (v62 != -1)
          {
            if (!v62)
              goto LABEL_78;
            if (v62 == v53)
              break;
          }
          v59 = (v61 + i) & v55;
        }
        if ((_DWORD)v61 != *(_DWORD *)(v54 - 4))
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(v6, (unsigned int **)(v54 + 16 * v61));
      }
    }
  }
LABEL_78:
  *(_QWORD *)a3 = v48;
  *(_DWORD *)(a3 + 16) = 0;
}

void WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultWeakPtrImpl>::set<WebCore::HTMLVideoElement,WebCore::GPUExternalTexture&>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int i;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (v6 > v7)
    WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(a1, a2);
  v8 = a2[37];
  if (v8
    || (v8 = WTF::fastCompactMalloc((WTF *)0x10),
        *(_DWORD *)v8 = 1,
        *(_QWORD *)(v8 + 8) = a2,
        v11 = (unsigned int *)a2[37],
        a2[37] = v8,
        !v11))
  {
    do
      v9 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v9 + 1, (unsigned int *)v8));
    do
      v10 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v10 + 1, (unsigned int *)v8));
  }
  else
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
    v8 = a2[37];
    do
      v14 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v14 + 1, (unsigned int *)v8));
    do
      v15 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v15 + 1, (unsigned int *)v8));
    if (!v8)
      goto LABEL_18;
  }
  do
  {
    v16 = __ldaxr((unsigned int *)v8);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)v8));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)v8);
    WTF::fastFree((WTF *)v8, a2);
  }
LABEL_18:
  v18 = *(_QWORD *)a1;
  if (*(_QWORD *)a1
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)a1, 8u), (v18 = *(_QWORD *)a1) != 0))
  {
    v19 = *(_DWORD *)(v18 - 8);
  }
  else
  {
    v19 = 0;
  }
  v20 = 0;
  v21 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
  v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
  v24 = (v23 >> 31) ^ v23;
  for (i = 1; ; ++i)
  {
    v26 = v24 & v19;
    v27 = (uint64_t *)(v18 + 16 * v26);
    v28 = *v27;
    if (*v27 != -1)
      break;
    v20 = (uint64_t *)(v18 + 16 * v26);
LABEL_27:
    v24 = i + v26;
  }
  if (!v28)
  {
    if (v20)
    {
      *v20 = 0;
      v20[1] = 0;
      --*(_DWORD *)(*(_QWORD *)a1 - 16);
      *v20 = v8;
    }
    else
    {
      *v27 = v8;
      v20 = (uint64_t *)(v18 + 16 * v26);
    }
    v40 = *(_QWORD *)(a3 + 8);
    if (v40)
      goto LABEL_76;
    v40 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v40 = 1;
    *(_QWORD *)(v40 + 8) = a3;
    v41 = *(unsigned int **)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v40;
    if (!v41)
      goto LABEL_76;
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      atomic_store(1u, v41);
      WTF::fastFree((WTF *)v41, a2);
    }
    v40 = *(_QWORD *)(a3 + 8);
    if (v40)
    {
LABEL_76:
      do
        v44 = __ldaxr((unsigned int *)v40);
      while (__stlxr(v44 + 1, (unsigned int *)v40));
    }
    v45 = (unsigned int *)v20[1];
    v20[1] = v40;
    if (v45)
    {
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        atomic_store(1u, v45);
        WTF::fastFree((WTF *)v45, a2);
      }
    }
    v48 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v49 = *(_DWORD *)(v48 - 12) + 1;
    else
      v49 = 1;
    *(_DWORD *)(v48 - 12) = v49;
    v50 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v51 = *(_DWORD *)(v50 - 12);
    else
      v51 = 0;
    v52 = (*(_DWORD *)(v50 - 16) + v51);
    v53 = *(unsigned int *)(v50 - 4);
    if (v53 > 0x400)
    {
      if (v53 > 2 * v52)
        return;
    }
    else
    {
      if (3 * v53 > 4 * v52)
        return;
      if (!(_DWORD)v53)
      {
        v54 = 8;
        goto LABEL_69;
      }
    }
    v54 = (_DWORD)v53 << (6 * *(_DWORD *)(v50 - 12) >= (2 * v53));
LABEL_69:
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)a1, v54);
    return;
  }
  if (v28 != v8)
    goto LABEL_27;
  v29 = *(_QWORD *)(a3 + 8);
  if (v29)
    goto LABEL_77;
  v29 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v29 = 1;
  *(_QWORD *)(v29 + 8) = a3;
  v30 = *(unsigned int **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v29;
  if (!v30)
    goto LABEL_77;
  do
  {
    v31 = __ldaxr(v30);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v30));
  if (!v32)
  {
    atomic_store(1u, v30);
    WTF::fastFree((WTF *)v30, a2);
  }
  v29 = *(_QWORD *)(a3 + 8);
  if (v29)
  {
LABEL_77:
    do
      v33 = __ldaxr((unsigned int *)v29);
    while (__stlxr(v33 + 1, (unsigned int *)v29));
  }
  v34 = v18 + 16 * v26;
  v35 = *(unsigned int **)(v34 + 8);
  *(_QWORD *)(v34 + 8) = v29;
  if (!v35)
    goto LABEL_40;
  do
  {
    v36 = __ldaxr(v35);
    v37 = v36 - 1;
  }
  while (__stlxr(v37, v35));
  if (!v37)
  {
    atomic_store(1u, v35);
    WTF::fastFree((WTF *)v35, a2);
    if (v8)
      goto LABEL_41;
  }
  else
  {
LABEL_40:
    if (!v8)
      return;
    do
    {
LABEL_41:
      v38 = __ldaxr((unsigned int *)v8);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, (unsigned int *)v8));
    if (!v39)
    {
      atomic_store(1u, (unsigned int *)v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
}

uint64_t WebCore::GPUDevice::scriptExecutionContext(WebCore::GPUDevice *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::GPUDevice::importExternalTexture(WebCore::GPUExternalTextureDescriptor const&)::$_0::~$_0(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *v7;
  _DWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v3 = *(WTF **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v9 = (_DWORD *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v9)
      {
        if (v9[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
        else
          --v9[2];
      }
      v10 = *((_QWORD *)v3 + 1);
      if (v10)
      {
        *(_QWORD *)(v10 + 8) = 0;
        v11 = (unsigned int *)*((_QWORD *)v3 + 1);
        *((_QWORD *)v3 + 1) = 0;
        if (v11)
        {
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
          {
            atomic_store(1u, v11);
            WTF::fastFree((WTF *)v11, a2);
          }
        }
      }
      else
      {
        *((_QWORD *)v3 + 1) = 0;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *(_DWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
  {
    if (v7[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[6];
  }
  return a1;
}

_DWORD *WebCore::GPUDevice::createBindGroupLayout@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  int v12;
  WTF *v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned int v24;
  char v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  char v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  char v36;
  _BYTE *v37;
  void *v38;
  WTF *v39;
  WTF::StringImpl *v40;
  _DWORD *v41;
  uint64_t v42;
  int v43;
  _DWORD *result;
  WTF::StringImpl *v45;
  WTF *v46;
  uint64_t v47;
  _DWORD *v48;

  v6 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v6)
  {
    v7 = 48 * v6;
    v8 = (_BYTE *)(*(_QWORD *)(a2 + 8) + 41);
    while (!*v8 || (WebCore::GPUDevice::isSupportedFormat(a1, *(v8 - 2)) & 1) != 0)
    {
      v8 += 48;
      v7 -= 48;
      if (!v7)
        goto LABEL_6;
    }
    result = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 33;
    *(_DWORD *)(a3 + 16) = 1;
  }
  else
  {
LABEL_6:
    v9 = *(_QWORD *)(a1 + 64);
    v10 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v10 += 2;
    v46 = 0;
    v47 = 0;
    v45 = v10;
    v11 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v11)
    {
      if (v11 >= 0x5555556)
      {
LABEL_55:
        __break(0xC471u);
        JUMPOUT(0x19525BD68);
      }
      v12 = 48 * v11;
      v13 = (WTF *)WTF::fastMalloc((WTF *)(48 * v11));
      LODWORD(v47) = (v12 & 0xFFFFFFF0) / 0x30;
      v46 = v13;
      if (*(_DWORD *)(a2 + 20))
      {
        v17 = 0;
        v18 = 0;
        v19 = 43;
        do
        {
          v20 = *(_QWORD *)(a2 + 8);
          v21 = v20 + v19;
          v22 = *(_DWORD *)(v20 + v19 - 43);
          v23 = *(_BYTE *)(v20 + v19 - 39);
          v24 = *(unsigned __int8 *)(v20 + v19 - 19);
          if (*(_BYTE *)(v20 + v19 - 19))
          {
            v24 = *(unsigned __int8 *)(v21 - 35);
            if (v24 >= 3)
            {
              __break(0xC471u);
              JUMPOUT(0x19525BD88);
            }
            v17 = *(unsigned __int8 *)(v20 + v19 - 34);
            v14 = *(_QWORD *)(v20 + v19 - 27);
            v25 = 1;
          }
          else
          {
            v25 = 0;
          }
          v26 = *(unsigned __int8 *)(v21 - 10);
          if (v26)
          {
            v26 = *(unsigned __int8 *)(v20 + v19 - 11);
            if (v26 >= 3)
            {
              __break(0xC471u);
              JUMPOUT(0x19525BE08);
            }
            v27 = 1;
          }
          else
          {
            v27 = 0;
          }
          v28 = v20 + v19;
          LOWORD(v29) = *(unsigned __int8 *)(v20 + v19 - 6);
          if (*(_BYTE *)(v20 + v19 - 6))
          {
            v29 = *(unsigned __int8 *)(v28 - 9);
            if (v29 >= 5)
            {
              __break(0xC471u);
              JUMPOUT(0x19525BDE8);
            }
            v30 = *(unsigned __int8 *)(v20 + v19 - 8);
            if (v30 >= 6)
            {
              __break(0xC471u);
              JUMPOUT(0x19525BDC8);
            }
            v15 = v30 | (*(unsigned __int8 *)(v20 + v19 - 7) << 8);
            v31 = 1;
          }
          else
          {
            v31 = 0;
          }
          v32 = *(unsigned __int8 *)(v28 - 2);
          if (v32)
          {
            v32 = *(unsigned __int8 *)(v20 + v19 - 5);
            if (v32 >= 3)
            {
              __break(0xC471u);
              JUMPOUT(0x19525BDA8);
            }
            v33 = *(unsigned __int8 *)(v20 + v19 - 4);
            if (v33 >= 0x5F)
              goto LABEL_55;
            v34 = *(unsigned __int8 *)(v20 + v19 - 3);
            if (v34 >= 6)
            {
              __break(0xC471u);
              JUMPOUT(0x19525BE28);
            }
            v16 = v33 | ((_WORD)v34 << 8);
            v35 = 1;
          }
          else
          {
            v35 = 0;
          }
          v36 = *(_BYTE *)(v20 + v19);
          v37 = (char *)v13 + v19;
          *(_DWORD *)(v37 - 43) = v22;
          *(v37 - 39) = v23 & 7;
          *(_QWORD *)(v37 - 35) = v24 | (unint64_t)(v17 << 8);
          *(_QWORD *)(v37 - 27) = v14;
          *(v37 - 19) = v25;
          *(v37 - 11) = v26;
          *(v37 - 10) = v27;
          *(v37 - 7) = HIBYTE(v15);
          *(_WORD *)(v37 - 9) = v29 | (v15 << 8);
          *(v37 - 6) = v31;
          *(v37 - 3) = HIBYTE(v16);
          *(_WORD *)(v37 - 5) = v32 | (v16 << 8);
          *(v37 - 2) = v35;
          *(v37 - 1) = 0;
          *v37 = v36;
          ++v18;
          v19 += 48;
        }
        while (v18 < *(unsigned int *)(a2 + 20));
        HIDWORD(v47) = v18;
      }
    }
    (*(void (**)(_DWORD **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 64))(&v48, v9, &v45);
    v39 = v46;
    if (v46)
    {
      v46 = 0;
      LODWORD(v47) = 0;
      WTF::fastFree(v39, v38);
    }
    v40 = v45;
    v45 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v38);
      else
        *(_DWORD *)v40 -= 2;
    }
    v41 = v48;
    if (v48)
    {
      v48 = 0;
      v42 = WTF::fastMalloc((WTF *)0x18);
      v43 = 0;
      *(_DWORD *)v42 = 1;
      *(_QWORD *)(v42 + 8) = 0;
      *(_QWORD *)(v42 + 16) = v41;
      *(_QWORD *)a3 = v42;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a3 = 8;
      v43 = 1;
    }
    *(_DWORD *)(a3 + 16) = v43;
    result = v48;
    v48 = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  return result;
}

uint64_t WebCore::GPUDevice::createPipelineLayout@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  unint64_t v9;
  void *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  WTF *v17;
  int v18;
  int v19;
  char v20;
  uint64_t v21;

  v5 = *(_QWORD *)(result + 64);
  v6 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v6 += 2;
  v16 = v6;
  v7 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v7)
  {
    if (v7 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v8 = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
    LODWORD(v9) = *(_DWORD *)(a2 + 20);
    if ((_DWORD)v9)
    {
      v9 = 0;
      do
      {
        *((_QWORD *)v8 + v9) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v9) + 16);
        ++v9;
      }
      while (v9 < *(unsigned int *)(a2 + 20));
    }
  }
  else
  {
    LODWORD(v9) = 0;
    v8 = 0;
  }
  v17 = v8;
  v18 = v7;
  v19 = v9;
  v20 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v5 + 72))(&v21, v5, &v16);
  if (v20)
  {
    v11 = v17;
    if (v17)
    {
      v17 = 0;
      v18 = 0;
      WTF::fastFree(v11, v10);
    }
  }
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v21;
  if (v21)
  {
    v21 = 0;
    v14 = WTF::fastMalloc((WTF *)0x10);
    v15 = 0;
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = v13;
    *(_QWORD *)a3 = v14;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    v15 = 1;
  }
  *(_DWORD *)(a3 + 16) = v15;
  result = v21;
  v21 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 8) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    else
      --*(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t WebCore::GPUDevice::createBindGroup@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  WTF *v17;
  _DWORD *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  void *v24;
  WTF *v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF *v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[4];
  int v44;
  char v45;
  char *v46;

  v6 = *(_QWORD *)(result + 64);
  v7 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v7 += 2;
  v38 = v7;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 16);
  if (!*(_QWORD *)(v8 + 16))
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = v8;
    result = *(_QWORD *)(v8 + 16);
    *(_QWORD *)(v8 + 16) = v10;
    if (result)
    {
      do
      {
        v11 = __ldaxr((unsigned int *)result);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unsigned int *)result));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  v13 = *(unsigned int **)(v8 + 16);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  v40 = 0;
  v41 = 0;
  v39 = (WTF *)v13;
  v15 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v15)
  {
    if (v15 >= 0x5555556)
    {
      __break(0xC471u);
      return result;
    }
    v16 = 48 * v15;
    v17 = (WTF *)WTF::fastMalloc((WTF *)(48 * v15));
    LODWORD(v41) = (v16 & 0xFFFFFFF0) / 0x30;
    v40 = v17;
    if (*(_DWORD *)(a2 + 28))
    {
      v36 = v6;
      v37 = a3;
      v18 = *(_DWORD **)(a2 + 16);
      LODWORD(v42) = *v18;
      v19 = v18[10];
      if ((_DWORD)v19 == -1)
      {
LABEL_20:
        std::__throw_bad_variant_access[abi:sn180100]();
      }
      else
      {
        v20 = v17;
        v21 = 0;
        v3 = 1;
        while (1)
        {
          v46 = &v45;
          ((void (*)(_QWORD *__return_ptr, char **, _DWORD *))off_1E334DE88[v19])(v43, &v46, &v18[v21 + 2]);
          v22 = (_DWORD *)((char *)v20 + v21 * 4);
          *v22 = v42;
          *((_BYTE *)v20 + v21 * 4 + 8) = 0;
          v22[10] = -1;
          v23 = v44;
          if (v44 != -1)
          {
            ((void (*)(char **, char *, _QWORD *))off_1E334DE68[v44])(&v46, (char *)v20 + v21 * 4 + 8, v43);
            v22[10] = v23;
            if (v44 != -1)
              ((void (*)(char **, _QWORD *))off_1E334DE48[v44])(&v46, v43);
          }
          if (v3 >= *(unsigned int *)(a2 + 28))
            break;
          v18 = *(_DWORD **)(a2 + 16);
          LODWORD(v42) = v18[v21 + 12];
          v19 = v18[v21 + 22];
          ++v3;
          v21 += 12;
          if ((_DWORD)v19 == -1)
            goto LABEL_20;
        }
      }
      HIDWORD(v41) = v3;
      v6 = v36;
      a3 = v37;
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v6 + 80))(&v42, v6, &v38);
  v25 = v40;
  if (HIDWORD(v41))
  {
    v26 = 48 * HIDWORD(v41);
    v27 = (_DWORD *)((char *)v40 + 40);
    do
    {
      v28 = *v27;
      if ((_DWORD)v28 != -1)
        ((void (*)(char **, _DWORD *))off_1E334DE48[v28])(&v46, v27 - 8);
      *v27 = -1;
      v27 += 12;
      v26 -= 48;
    }
    while (v26);
    v25 = v40;
  }
  if (v25)
  {
    v40 = 0;
    LODWORD(v41) = 0;
    WTF::fastFree(v25, v24);
  }
  v29 = (unsigned int *)v39;
  v39 = 0;
  if (v29)
  {
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, v24);
    }
  }
  v32 = v38;
  v38 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v24);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = v42;
  if (v42)
  {
    v42 = 0;
    v34 = WTF::fastMalloc((WTF *)0x10);
    v35 = 0;
    *(_DWORD *)v34 = 1;
    *(_QWORD *)(v34 + 8) = v33;
    *(_QWORD *)a3 = v34;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    v35 = 1;
  }
  *(_DWORD *)(a3 + 16) = v35;
  result = v42;
  v42 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 8) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    else
      --*(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t WebCore::GPUDevice::createShaderModule@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  WTF *v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  _DWORD **v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  WTF *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF *v26;
  WTF ***v27;
  uint64_t v28;
  int v29;
  _DWORD *v30;
  WTF *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF *v34;
  uint64_t v35;
  WTF **v36;
  WTF ***v37;

  v4 = *(WTF **)(this + 80);
  if (!v4)
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_DWORD *)(a3 + 16) = 1;
    return this;
  }
  v6 = *(_QWORD *)(this + 64);
  ++*(_DWORD *)v4;
  v31 = v4;
  v7 = *a2;
  if (*a2)
    *(_DWORD *)v7 += 2;
  v32 = v7;
  v8 = a2[1];
  if (v8)
    *(_DWORD *)v8 += 2;
  v34 = 0;
  v35 = 0;
  v33 = v8;
  v9 = *((unsigned int *)a2 + 9);
  if ((_DWORD)v9)
  {
    if (v9 >> 28)
    {
LABEL_50:
      __break(0xC471u);
      return this;
    }
    v10 = (WTF *)WTF::fastMalloc((WTF *)(16 * v9));
    LODWORD(v35) = v9;
    v34 = v10;
    if (*((_DWORD *)a2 + 9))
    {
      v11 = 0;
      v12 = 0;
      v13 = (uint64_t *)((char *)v10 + 8);
      while (1)
      {
        v14 = a2[3];
        v36 = &v31;
        v15 = (_DWORD **)((char *)v14 + v11);
        v16 = *(unsigned int *)((char *)v14 + v11 + 16);
        if ((_DWORD)v16 == -1)
          break;
        v37 = &v36;
        v17 = ((uint64_t (*)(WTF ****, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL30convertPipelineLayoutToBackingERKNS_7variantIJNS6_6RefPtrINS8_17GPUPipelineLayoutENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS8_17GPUAutoLayoutModeEEEERKNS6_3RefISB_SD_SF_EEE3__0JZNS8_L30convertPipelineLayoutToBackingESK_SO_E3__1EEEEEJRKNS0_6__implIJSG_SH_EEEEEEDcOT_DpOT0____fmatrix[v16])(&v37, v15 + 1);
        v18 = *v15;
        if (*v15)
          *v18 += 2;
        ++v12;
        *(v13 - 1) = (uint64_t)v18;
        *v13 = v17;
        HIDWORD(v35) = v12;
        v13 += 2;
        v11 += 24;
        if (v12 >= *((unsigned int *)a2 + 9))
          goto LABEL_14;
      }
      this = std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_50;
    }
  }
LABEL_14:
  (*(void (**)(WTF ****__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v6 + 88))(&v37, v6, &v32);
  if (HIDWORD(v35))
  {
    v20 = v34;
    v21 = 16 * HIDWORD(v35);
    do
    {
      v22 = *(WTF::StringImpl **)v20;
      *(_QWORD *)v20 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v19);
        else
          *(_DWORD *)v22 -= 2;
      }
      v20 = (WTF *)((char *)v20 + 16);
      v21 -= 16;
    }
    while (v21);
  }
  v23 = v34;
  if (v34)
  {
    v34 = 0;
    LODWORD(v35) = 0;
    WTF::fastFree(v23, v19);
  }
  v24 = v33;
  v33 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v19);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v32;
  v32 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v19);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v31;
  v31 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
    {
      v30 = (_DWORD *)*((_QWORD *)v26 + 1);
      *((_QWORD *)v26 + 1) = 0;
      if (v30)
      {
        if (v30[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
        else
          --v30[2];
      }
      WTF::fastFree(v26, v19);
    }
    else
    {
      --*(_DWORD *)v26;
    }
  }
  v27 = v37;
  if (v37)
  {
    v37 = 0;
    v28 = WTF::fastMalloc((WTF *)0x18);
    v29 = 0;
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = 0;
    *(_QWORD *)(v28 + 16) = v27;
    *(_QWORD *)a3 = v28;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    v29 = 1;
  }
  *(_DWORD *)(a3 + 16) = v29;
  this = (uint64_t)v37;
  v37 = 0;
  if (this)
  {
    if (*(_DWORD *)(this + 8) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    else
      --*(_DWORD *)(this + 8);
  }
  return this;
}

_DWORD *WebCore::GPUDevice::createComputePipeline@<X0>(WebCore::GPUDevice *this@<X0>, const WebCore::GPUComputePipelineDescriptor *a2@<X1>, uint64_t a3@<X8>)
{
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  void *v7;
  WTF *v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  _DWORD *result;
  _DWORD *v13;
  WTF *v14;
  _QWORD v15[7];
  _DWORD *v16;

  v4 = (WTF *)*((_QWORD *)this + 10);
  if (v4)
  {
    v5 = *((_QWORD *)this + 8);
    ++*(_DWORD *)v4;
    v14 = v4;
    WebCore::GPUComputePipelineDescriptor::convertToBacking((uint64_t)a2, (uint64_t)&v14, v15);
    (*(void (**)(_DWORD **__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v5 + 96))(&v16, v5, v15);
    WebCore::WebGPU::ComputePipelineDescriptor::~ComputePipelineDescriptor((WebCore::WebGPU::ComputePipelineDescriptor *)v15, v6);
    v8 = v14;
    v14 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
      {
        v13 = (_DWORD *)*((_QWORD *)v8 + 1);
        *((_QWORD *)v8 + 1) = 0;
        if (v13)
        {
          if (v13[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
          else
            --v13[2];
        }
        WTF::fastFree(v8, v7);
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
    v9 = v16;
    if (v16)
    {
      v16 = 0;
      v10 = WTF::fastMalloc((WTF *)0x10);
      v11 = 0;
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = v9;
      *(_QWORD *)a3 = v10;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a3 = 8;
      v11 = 1;
    }
    *(_DWORD *)(a3 + 16) = v11;
    result = v16;
    v16 = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  else
  {
    result = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_DWORD *)(a3 + 16) = 1;
  }
  return result;
}

uint64_t WebCore::GPUComputePipelineDescriptor::convertToBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v5 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    *v5 += 2;
  *a3 = v5;
  v16 = a2;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6 == -1)
  {
    v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::GPUDevice::createRenderPipeline(v15);
  }
  else
  {
    v17 = &v16;
    v7 = ((uint64_t (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL30convertPipelineLayoutToBackingERKNS_7variantIJNS6_6RefPtrINS8_17GPUPipelineLayoutENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS8_17GPUAutoLayoutModeEEEERKNS6_3RefISB_SD_SF_EEE3__0JZNS8_L30convertPipelineLayoutToBackingESK_SO_E3__1EEEEEJRKNS0_6__implIJSG_SH_EEEEEEDcOT_DpOT0____fmatrix[v6])(&v17, a1 + 8);
    if (v7)
    {
      v8 = v7;
      v7 = *(_QWORD *)(v7 + 16);
      if (v7)
        goto LABEL_16;
      v7 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 8) = v8;
      v10 = *(unsigned int **)(v8 + 16);
      *(_QWORD *)(v8 + 16) = v7;
      if (!v10)
        goto LABEL_16;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v9);
      }
      v7 = *(_QWORD *)(v8 + 16);
      if (v7)
      {
LABEL_16:
        do
          v13 = __ldaxr((unsigned int *)v7);
        while (__stlxr(v13 + 1, (unsigned int *)v7));
      }
    }
    a3[1] = v7;
    return WebCore::GPUProgrammableStage::convertToBacking(a1 + 24, (uint64_t)(a3 + 2));
  }
}

_DWORD *WebCore::GPUDevice::createRenderPipeline@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF *v16;
  WTF::StringImpl *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  WTF *v26;
  _DWORD *v27;
  uint64_t v28;
  int v29;
  _DWORD *result;
  char v31;
  _DWORD *v32;
  WTF *v33;
  WTF::StringImpl *v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;
  WTF::StringImpl *v38;
  char v39;
  WTF *v40;
  int v41;
  unsigned int v42;
  WTF *v43;
  int v44;
  char v45;
  _DWORD *v46;

  if (*(_BYTE *)(a2 + 208))
  {
    v6 = *(unsigned int *)(a2 + 204);
    if ((_DWORD)v6)
    {
      v7 = *(unsigned __int8 **)(a2 + 192);
      v8 = 16 * v6;
      while (!v7[12] || (WebCore::GPUDevice::isSupportedFormat(a1, *v7) & 1) != 0)
      {
        v7 += 16;
        v8 -= 16;
        if (!v8)
          goto LABEL_7;
      }
      goto LABEL_45;
    }
  }
LABEL_7:
  if (*(_BYTE *)(a2 + 132) && (WebCore::GPUDevice::isSupportedFormat(a1, *(unsigned __int8 *)(a2 + 88)) & 1) == 0)
  {
LABEL_45:
    result = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v31 = 33;
    goto LABEL_46;
  }
  v9 = *(WTF **)(a1 + 80);
  if (!v9)
  {
    result = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v31 = 8;
LABEL_46:
    *(_BYTE *)a3 = v31;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  v10 = *(_QWORD *)(a1 + 64);
  ++*(_DWORD *)v9;
  v33 = v9;
  WebCore::GPURenderPipelineDescriptor::convertToBacking((uint64_t)&v34, a2, (uint64_t)&v33);
  (*(void (**)(_DWORD **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 104))(&v46, v10, &v34);
  if (v45)
  {
    v12 = v43;
    if (v43)
    {
      v43 = 0;
      v44 = 0;
      WTF::fastFree(v12, v11);
    }
    if (v42)
    {
      v13 = v40;
      v14 = 16 * v42;
      do
      {
        v15 = *(WTF::StringImpl **)v13;
        *(_QWORD *)v13 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)v15 -= 2;
        }
        v13 = (WTF *)((char *)v13 + 16);
        v14 -= 16;
      }
      while (v14);
    }
    v16 = v40;
    if (v40)
    {
      v40 = 0;
      v41 = 0;
      WTF::fastFree(v16, v11);
    }
    if (v39)
    {
      v17 = v38;
      v38 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v11);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    v18 = (unsigned int *)v37;
    v37 = 0;
    if (v18)
    {
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        WTF::fastFree((WTF *)v18, v11);
      }
    }
  }
  WebCore::GPUVertexState::~GPUVertexState((WebCore::GPUVertexState *)&v36, v11);
  v22 = (unsigned int *)v35;
  v35 = 0;
  if (v22)
  {
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, v21);
    }
  }
  v25 = v34;
  v34 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v33;
  v33 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
    {
      v32 = (_DWORD *)*((_QWORD *)v26 + 1);
      *((_QWORD *)v26 + 1) = 0;
      if (v32)
      {
        if (v32[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
        else
          --v32[2];
      }
      WTF::fastFree(v26, v21);
    }
    else
    {
      --*(_DWORD *)v26;
    }
  }
  v27 = v46;
  if (v46)
  {
    v46 = 0;
    v28 = WTF::fastMalloc((WTF *)0x10);
    v29 = 0;
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = v27;
    *(_QWORD *)a3 = v28;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    v29 = 1;
  }
  *(_DWORD *)(a3 + 16) = v29;
  result = v46;
  v46 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::GPURenderPipelineDescriptor::convertToBacking(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  _BYTE *v43;
  unint64_t v44;
  char v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  __int16 v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  char v67;
  __int16 v68;
  __int16 v69;
  int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  char v75;
  int v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  int v85;
  _DWORD *v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;

  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v5 += 2;
  *(_QWORD *)a1 = v5;
  v117 = a3;
  v6 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v6 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_138;
  }
  v118 = &v117;
  result = ((uint64_t (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL30convertPipelineLayoutToBackingERKNS_7variantIJNS6_6RefPtrINS8_17GPUPipelineLayoutENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS8_17GPUAutoLayoutModeEEEERKNS6_3RefISB_SD_SF_EEE3__0JZNS8_L30convertPipelineLayoutToBackingESK_SO_E3__1EEEEEJRKNS0_6__implIJSG_SH_EEEEEEDcOT_DpOT0____fmatrix[v6])(&v118, a2 + 8);
  if (result)
  {
    v8 = result;
    result = *(_QWORD *)(result + 16);
    if (result)
      goto LABEL_186;
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = v8;
    v10 = *(unsigned int **)(v8 + 16);
    *(_QWORD *)(v8 + 16) = result;
    if (!v10)
      goto LABEL_186;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v9);
    }
    result = *(_QWORD *)(v8 + 16);
    if (result)
    {
LABEL_186:
      do
        v13 = __ldaxr((unsigned int *)result);
      while (__stlxr(v13 + 1, (unsigned int *)result));
    }
  }
  *(_QWORD *)(a1 + 8) = result;
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 16);
  if (!*(_QWORD *)(v14 + 16))
  {
    v16 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = v14;
    result = *(_QWORD *)(v14 + 16);
    *(_QWORD *)(v14 + 16) = v16;
    if (result)
    {
      do
      {
        v17 = __ldaxr((unsigned int *)result);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, (unsigned int *)result));
      if (!v18)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v15);
      }
    }
  }
  v19 = *(unsigned int **)(v14 + 16);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  *(_QWORD *)(a1 + 16) = v19;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    v21 = *(_DWORD **)(a2 + 32);
    if (v21)
      *v21 += 2;
    *(_QWORD *)(a1 + 24) = v21;
    *(_BYTE *)(a1 + 32) = 1;
  }
  v22 = *(unsigned int *)(a2 + 60);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = v22;
  if ((_DWORD)v22)
  {
    if (v22 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x19525D670);
    }
    result = WTF::fastMalloc((WTF *)(16 * v22));
    *(_DWORD *)(a1 + 48) = v22;
    *(_QWORD *)(a1 + 40) = result;
    v23 = *(unsigned int *)(a2 + 60);
    if ((_DWORD)v23)
    {
      v24 = *(_QWORD *)(a2 + 48);
      v25 = v24 + 16 * v23;
      do
      {
        v26 = *(_DWORD **)v24;
        if (*(_QWORD *)v24)
          *v26 += 2;
        *(_QWORD *)result = v26;
        *(_QWORD *)(result + 8) = *(_QWORD *)(v24 + 8);
        v24 += 16;
        result += 16;
      }
      while (v24 != v25);
    }
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v27 = *(unsigned int *)(a2 + 76);
  if ((_DWORD)v27)
  {
    if (v27 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x19525D678);
    }
    v28 = 40 * v27;
    result = WTF::fastMalloc((WTF *)(40 * v27));
    *(_DWORD *)(a1 + 64) = (v28 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)(a1 + 56) = result;
    if (*(_DWORD *)(a2 + 76))
    {
      v29 = result;
      v30 = 0;
      do
      {
        v31 = *(_QWORD *)(a2 + 64) + 40 * v30;
        if (*(_BYTE *)(v31 + 32))
        {
          v32 = *(unsigned __int8 *)(v31 + 8);
          if (v32 >= 2)
          {
            __break(0xC471u);
            JUMPOUT(0x19525D3BCLL);
          }
          v33 = *(_QWORD *)v31;
          v34 = *(unsigned int *)(v31 + 28);
          if ((_DWORD)v34)
          {
            if (v34 >= 0xAAAAAAB)
            {
              __break(0xC471u);
              JUMPOUT(0x19525D668);
            }
            v35 = 24 * v34;
            result = WTF::fastMalloc((WTF *)(24 * v34));
            LODWORD(v34) = (v35 & 0xFFFFFFF8) / 0x18;
            LODWORD(v36) = *(_DWORD *)(v31 + 28);
            if ((_DWORD)v36)
            {
              v37 = 0;
              v36 = 0;
              v38 = *(_QWORD *)(v31 + 16);
              while (1)
              {
                v39 = *(unsigned __int8 *)(v38 + v37);
                if (v39 >= 0x1F)
                  break;
                v40 = *(_QWORD *)(v38 + v37 + 8);
                v41 = *(_DWORD *)(v38 + v37 + 16);
                v42 = result + v37;
                *(_BYTE *)v42 = v39;
                *(_QWORD *)(v42 + 8) = v40;
                *(_DWORD *)(v42 + 16) = v41;
                ++v36;
                v37 += 24;
                if (v36 >= *(unsigned int *)(v31 + 28))
                  goto LABEL_45;
              }
LABEL_156:
              __break(0xC471u);
              JUMPOUT(0x19525D39CLL);
            }
          }
          else
          {
            LODWORD(v36) = 0;
            result = 0;
          }
LABEL_45:
          v44 = v29 + 40 * v30;
          *(_QWORD *)v44 = v33;
          *(_BYTE *)(v44 + 8) = v32;
          *(_QWORD *)(v44 + 16) = result;
          *(_DWORD *)(v44 + 24) = v34;
          *(_DWORD *)(v44 + 28) = v36;
          *(_BYTE *)(v44 + 32) = 1;
        }
        else
        {
          v43 = (_BYTE *)(v29 + 40 * v30);
          *v43 = 0;
          v43[32] = 0;
        }
        *(_DWORD *)(a1 + 68) = ++v30;
      }
      while (v30 < *(unsigned int *)(a2 + 76));
    }
  }
  v45 = *(_BYTE *)(a2 + 86);
  if (!v45)
  {
    *(_BYTE *)(a1 + 72) = 0;
    goto LABEL_57;
  }
  v46 = *(unsigned __int8 *)(a2 + 80);
  if (v46 >= 5)
  {
LABEL_138:
    __break(0xC471u);
    JUMPOUT(0x19525D4C0);
  }
  v47 = *(unsigned __int8 *)(a2 + 82);
  if (*(_BYTE *)(a2 + 82))
  {
    v47 = *(unsigned __int8 *)(a2 + 81);
    if (v47 >= 2)
    {
      __break(0xC471u);
      JUMPOUT(0x19525D640);
    }
    v48 = 1;
  }
  else
  {
    v48 = 0;
  }
  v49 = *(unsigned __int8 *)(a2 + 83);
  if (v49 >= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x19525D4E0);
  }
  v50 = *(unsigned __int8 *)(a2 + 84);
  if (v50 >= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19525D500);
  }
  *(_WORD *)(a1 + 76) = (((unint64_t)*(unsigned __int8 *)(a2 + 85) << 40) | (v50 << 32)) >> 32;
  *(_DWORD *)(a1 + 72) = (v49 << 24) | (v48 << 16) | (v47 << 8) | v46;
  v45 = 1;
LABEL_57:
  *(_BYTE *)(a1 + 78) = v45;
  v51 = *(_BYTE *)(a2 + 132);
  if (v51)
  {
    if (*(_BYTE *)(a2 + 92))
    {
      v52 = *(unsigned __int8 *)(a2 + 91);
      if (v52 >= 8)
      {
        __break(0xC471u);
        JUMPOUT(0x19525D660);
      }
      v53 = 1;
    }
    else
    {
      LOWORD(v52) = 0;
      v53 = 0;
    }
    v54 = *(unsigned __int8 *)(a2 + 88);
    if (v54 >= 0x5F)
    {
      __break(0xC471u);
      JUMPOUT(0x19525D520);
    }
    v55 = *(unsigned __int8 *)(a2 + 93);
    if (v55 >= 8)
    {
      __break(0xC471u);
      JUMPOUT(0x19525D540);
    }
    v56 = *(unsigned __int8 *)(a2 + 94);
    if (v56 >= 8)
    {
      __break(0xC471u);
      JUMPOUT(0x19525D560);
    }
    v57 = *(unsigned __int8 *)(a2 + 95);
    if (v57 >= 8)
    {
      __break(0xC471u);
      JUMPOUT(0x19525D580);
    }
    v58 = *(unsigned __int8 *)(a2 + 96);
    if (v58 >= 8)
    {
      __break(0xC471u);
      JUMPOUT(0x19525D5A0);
    }
    v59 = *(unsigned __int8 *)(a2 + 97);
    if (v59 >= 8)
    {
      __break(0xC471u);
      JUMPOUT(0x19525D5C0);
    }
    v60 = *(unsigned __int8 *)(a2 + 98);
    if (v60 >= 8)
    {
      __break(0xC471u);
      JUMPOUT(0x19525D5E0);
    }
    v61 = *(unsigned __int8 *)(a2 + 99);
    if (v61 >= 8)
    {
      __break(0xC471u);
      JUMPOUT(0x19525D600);
    }
    v62 = *(unsigned __int8 *)(a2 + 100);
    if (v62 >= 8)
    {
      __break(0xC471u);
      JUMPOUT(0x19525D620);
    }
    v63 = v55 | (v56 << 8) | (v57 << 16);
    v64 = *(unsigned __int8 *)(a2 + 108);
    v65 = v59 | (v60 << 8) | (v61 << 16);
    if (*(_BYTE *)(a2 + 108))
    {
      v66 = *(_DWORD *)(a2 + 104);
      v64 = v66 & 0xFFFFFF00;
      v67 = 1;
    }
    else
    {
      LOBYTE(v66) = 0;
      v67 = 0;
    }
    v68 = *(_WORD *)(a2 + 89);
    v69 = v52 | (v53 << 8);
    v70 = v63 | (v58 << 24);
    v71 = *(unsigned __int8 *)(a2 + 116);
    v72 = v65 | (v62 << 24);
    if (*(_BYTE *)(a2 + 116))
    {
      v73 = *(_DWORD *)(a2 + 112);
      v71 = v73 & 0xFFFFFF00;
      result = 1;
    }
    else
    {
      LOBYTE(v73) = 0;
      result = 0;
    }
    v74 = *(_DWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 80) = v54;
    *(_WORD *)(a1 + 81) = v68;
    *(_WORD *)(a1 + 83) = v69;
    *(_DWORD *)(a1 + 85) = v70;
    *(_DWORD *)(a1 + 89) = v72;
    *(_DWORD *)(a1 + 96) = v64 | v66;
    *(_BYTE *)(a1 + 100) = v67;
    *(_DWORD *)(a1 + 104) = v71 | v73;
    *(_BYTE *)(a1 + 108) = result;
    *(_DWORD *)(a1 + 112) = v74;
    v51 = 1;
    *(_QWORD *)(a1 + 116) = *(_QWORD *)(a2 + 124);
  }
  else
  {
    *(_BYTE *)(a1 + 80) = 0;
  }
  *(_BYTE *)(a1 + 124) = v51;
  v75 = *(_BYTE *)(a2 + 148);
  if (v75)
  {
    v76 = *(unsigned __int8 *)(a2 + 144);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 136);
    *(_DWORD *)(a1 + 136) = v76;
    v75 = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 128) = 0;
  }
  *(_BYTE *)(a1 + 140) = v75;
  if (*(_BYTE *)(a2 + 208))
  {
    v77 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 152) + 8) + 16);
    if (!*(_QWORD *)(v77 + 16))
    {
      v79 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v79 = 1;
      *(_QWORD *)(v79 + 8) = v77;
      v80 = *(unsigned int **)(v77 + 16);
      *(_QWORD *)(v77 + 16) = v79;
      if (v80)
      {
        do
        {
          v81 = __ldaxr(v80);
          v82 = v81 - 1;
        }
        while (__stlxr(v82, v80));
        if (!v82)
        {
          atomic_store(1u, v80);
          WTF::fastFree((WTF *)v80, v78);
        }
      }
    }
    v83 = *(unsigned int **)(v77 + 16);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 + 1, v83));
    v85 = *(unsigned __int8 *)(a2 + 168);
    if (*(_BYTE *)(a2 + 168))
    {
      v86 = *(_DWORD **)(a2 + 160);
      if (v86)
        *v86 += 2;
    }
    else
    {
      v86 = 0;
    }
    v88 = *(unsigned int *)(a2 + 188);
    if ((_DWORD)v88)
    {
      if (v88 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x19525D680);
      }
      v89 = WTF::fastMalloc((WTF *)(16 * v88));
      v90 = v89;
      v91 = *(unsigned int *)(a2 + 188);
      if ((_DWORD)v91)
      {
        v92 = 0;
        v93 = *(_QWORD *)(a2 + 176);
        v94 = v93 + 16 * v91;
        do
        {
          v95 = v93 + v92;
          v96 = *(_DWORD **)(v93 + v92);
          if (v96)
            *v96 += 2;
          v97 = (_QWORD *)(v89 + v92);
          *v97 = v96;
          v97[1] = *(_QWORD *)(v95 + 8);
          v92 += 16;
        }
        while (v95 + 16 != v94);
      }
    }
    else
    {
      v90 = 0;
    }
    v98 = *(unsigned int *)(a2 + 204);
    if ((_DWORD)v98)
    {
      if (v98 >> 28)
        goto LABEL_156;
      result = WTF::fastMalloc((WTF *)(16 * v98));
      LODWORD(v99) = *(_DWORD *)(a2 + 204);
      if ((_DWORD)v99)
      {
        v99 = 0;
        v100 = 6;
        do
        {
          v101 = *(_QWORD *)(a2 + 192);
          if (*(_BYTE *)(v101 + v100 + 6))
          {
            v102 = *(unsigned __int8 *)(v101 + v100 - 6);
            if (v102 >= 0x5F)
            {
              __break(0xC471u);
              JUMPOUT(0x19525D3DCLL);
            }
            v103 = v101 + v100;
            if (*(_BYTE *)(v101 + v100 + 1))
            {
              v104 = *(unsigned __int8 *)(v103 - 5);
              if (v104 >= 5)
              {
                __break(0xC471u);
                JUMPOUT(0x19525D45CLL);
              }
              v105 = *(unsigned __int8 *)(v101 + v100 - 4);
              if (v105 >= 0xD)
              {
                __break(0xC471u);
                JUMPOUT(0x19525D3FCLL);
              }
              v106 = *(unsigned __int8 *)(v101 + v100 - 3);
              if (v106 >= 0xD)
              {
                __break(0xC471u);
                JUMPOUT(0x19525D41CLL);
              }
              v107 = *(unsigned __int8 *)(v101 + v100 - 2);
              if (v107 >= 5)
              {
                __break(0xC471u);
                JUMPOUT(0x19525D47CLL);
              }
              v108 = *(unsigned __int8 *)(v101 + v100 - 1);
              if (v108 >= 0xD)
              {
                __break(0xC471u);
                JUMPOUT(0x19525D49CLL);
              }
              v109 = *(unsigned __int8 *)(v101 + v100);
              if (v109 >= 0xD)
              {
                __break(0xC471u);
                JUMPOUT(0x19525D43CLL);
              }
              v110 = (v104 << 8) | (v105 << 16) | (v106 << 24) | (v107 << 32) | (v108 << 40) | (v109 << 48);
              v111 = 0x100000000000000;
            }
            else
            {
              v111 = 0;
              v110 = 0;
            }
            v112 = *(unsigned int *)(v103 + 2);
            v114 = v111 | v110 | v102;
            v113 = 0x100000000;
          }
          else
          {
            v112 = 0;
            v113 = 0;
            v114 = 0;
          }
          v115 = v113 | v112;
          v116 = result + v100;
          *(_QWORD *)(v116 - 6) = v114;
          *(_QWORD *)(v116 + 2) = v115;
          ++v99;
          v100 += 16;
        }
        while (v99 < *(unsigned int *)(a2 + 204));
      }
    }
    else
    {
      result = 0;
      LODWORD(v99) = 0;
    }
    *(_QWORD *)(a1 + 144) = v83;
    *(_BYTE *)(a1 + 152) = 0;
    *(_BYTE *)(a1 + 160) = 0;
    if (v85)
    {
      *(_QWORD *)(a1 + 152) = v86;
      *(_BYTE *)(a1 + 160) = 1;
    }
    *(_QWORD *)(a1 + 168) = v90;
    *(_DWORD *)(a1 + 176) = v88;
    *(_DWORD *)(a1 + 180) = v88;
    *(_QWORD *)(a1 + 184) = result;
    v87 = 1;
    *(_DWORD *)(a1 + 192) = v98;
    *(_DWORD *)(a1 + 196) = v99;
  }
  else
  {
    v87 = 0;
    *(_BYTE *)(a1 + 144) = 0;
  }
  *(_BYTE *)(a1 + 200) = v87;
  return result;
}

void WebCore::GPUDevice::createComputePipelineAsync(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  void *v10;
  WTF *v11;
  _DWORD *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  _QWORD *v18;
  WTF *v19;
  WTF::StringImpl *v20[7];

  v4 = *(WTF **)(a1 + 80);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 64);
    ++*(_DWORD *)v4;
    v19 = v4;
    WebCore::GPUComputePipelineDescriptor::convertToBacking(a2, (uint64_t)&v19, v20);
    v6 = *a3;
    *a3 = 0;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = &off_1E334DF70;
    v7[1] = v6;
    v18 = v7;
    (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD **))(*(_QWORD *)v5 + 112))(v5, v20, &v18);
    v9 = v18;
    v18 = 0;
    if (v9)
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    WebCore::WebGPU::ComputePipelineDescriptor::~ComputePipelineDescriptor((WebCore::WebGPU::ComputePipelineDescriptor *)v20, v8);
    v11 = v19;
    v19 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
      {
        v17 = (_DWORD *)*((_QWORD *)v11 + 1);
        *((_QWORD *)v11 + 1) = 0;
        if (v17)
        {
          if (v17[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
          else
            --v17[2];
        }
        WTF::fastFree(v11, v10);
      }
      else
      {
        --*(_DWORD *)v11;
      }
    }
  }
  else
  {
    v12 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v13 = WTF::fastMalloc((WTF *)0x28);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_DWORD *)(v13 + 8) = 1;
    *(_QWORD *)v13 = off_1E334F098;
    *(_BYTE *)(v13 + 12) = 0;
    v15 = v20[0];
    if (v20[0])
    {
      *(_DWORD *)v20[0] += 2;
      *v12 += 2;
      *(_QWORD *)(v13 + 16) = v15;
      *(_QWORD *)(v13 + 24) = v12;
      v20[0] = 0;
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    else
    {
      *v12 += 2;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)(v13 + 24) = v12;
    }
    *(_QWORD *)v13 = off_1E334EEB0;
    *(_DWORD *)(v13 + 32) = 1;
    WebCore::DeferredPromise::reject<WebCore::IDLInterface<WebCore::GPUPipelineError>>(*a3, (WTF *)v13);
    if (*(_DWORD *)(v13 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    else
      --*(_DWORD *)(v13 + 8);
    if (*v12 == 2)
      WTF::StringImpl::destroy(MEMORY[0x1E0CBEF70], v16);
    else
      *v12 -= 2;
  }
}

WTF::StringImpl *WebCore::GPUDevice::createRenderPipelineAsync@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  char v22;
  WTF *v23;
  WTF::StringImpl *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  WTF *v32;
  _DWORD *v33;
  _QWORD *v34;
  WTF *v35;
  WTF::StringImpl *v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  int v43;
  unsigned int v44;
  WTF *v45;
  int v46;
  char v47;

  if (*(_BYTE *)(a2 + 208))
  {
    v8 = *(unsigned int *)(a2 + 204);
    if ((_DWORD)v8)
    {
      v9 = *(unsigned __int8 **)(a2 + 192);
      v10 = 16 * v8;
      while (!v9[12] || (WebCore::GPUDevice::isSupportedFormat(a1, *v9) & 1) != 0)
      {
        v9 += 16;
        v10 -= 16;
        if (!v10)
          goto LABEL_7;
      }
      goto LABEL_23;
    }
  }
LABEL_7:
  if (*(_BYTE *)(a2 + 132) && (WebCore::GPUDevice::isSupportedFormat(a1, *(unsigned __int8 *)(a2 + 88)) & 1) == 0)
  {
LABEL_23:
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v22 = 33;
LABEL_46:
    *(_BYTE *)a4 = v22;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  v11 = *(WTF **)(a1 + 80);
  if (!v11)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v22 = 8;
    goto LABEL_46;
  }
  v12 = *(_QWORD *)(a1 + 64);
  ++*(_DWORD *)v11;
  v35 = v11;
  WebCore::GPURenderPipelineDescriptor::convertToBacking((uint64_t)&v36, a2, (uint64_t)&v35);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E334DF98;
  v14[1] = v13;
  v34 = v14;
  (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD **))(*(_QWORD *)v12 + 120))(v12, &v36, &v34);
  v16 = v34;
  v34 = 0;
  if (v16)
    (*(void (**)(_QWORD *))(*v16 + 8))(v16);
  if (v47)
  {
    v17 = v45;
    if (v45)
    {
      v45 = 0;
      v46 = 0;
      WTF::fastFree(v17, v15);
    }
    if (v44)
    {
      v18 = v42;
      v19 = 16 * v44;
      do
      {
        v20 = *(WTF::StringImpl **)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v15);
          else
            *(_DWORD *)v20 -= 2;
        }
        v18 = (WTF *)((char *)v18 + 16);
        v19 -= 16;
      }
      while (v19);
    }
    v23 = v42;
    if (v42)
    {
      v42 = 0;
      v43 = 0;
      WTF::fastFree(v23, v15);
    }
    if (v41)
    {
      v24 = v40;
      v40 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v15);
        else
          *(_DWORD *)v24 -= 2;
      }
    }
    v25 = (unsigned int *)v39;
    v39 = 0;
    if (v25)
    {
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        atomic_store(1u, v25);
        WTF::fastFree((WTF *)v25, v15);
      }
    }
  }
  WebCore::GPUVertexState::~GPUVertexState((WebCore::GPUVertexState *)&v38, v15);
  v29 = (unsigned int *)v37;
  v37 = 0;
  if (v29)
  {
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, v28);
    }
  }
  result = v36;
  v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v28);
    else
      *(_DWORD *)result -= 2;
  }
  v32 = v35;
  v35 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
    {
      v33 = (_DWORD *)*((_QWORD *)v32 + 1);
      *((_QWORD *)v32 + 1) = 0;
      if (v33)
      {
        if (v33[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
        else
          --v33[2];
      }
      result = (WTF::StringImpl *)WTF::fastFree(v32, v28);
    }
    else
    {
      --*(_DWORD *)v32;
    }
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  return result;
}

_DWORD *WebCore::GPUDevice::createCommandEncoder@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  BOOL v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  _DWORD *result;
  WTF::StringImpl *v13;
  char v14;
  _DWORD *v15;

  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(WTF::StringImpl **)a2;
  if (*(_BYTE *)(a2 + 8))
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
    v5 = 0;
  else
    *(_DWORD *)v5 += 2;
  v13 = v5;
  v14 = 1;
  (*(void (**)(_DWORD **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 128))(&v15, v4, &v13);
  if (v14)
  {
    v8 = v13;
    v13 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  v9 = v15;
  if (v15)
  {
    v15 = 0;
    v10 = WTF::fastMalloc((WTF *)0x10);
    v11 = 0;
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)a3 = v10;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    v11 = 1;
  }
  *(_DWORD *)(a3 + 16) = v11;
  result = v15;
  v15 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *WebCore::GPUDevice::createRenderBundleEncoder@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  _DWORD *result;
  void *v21;
  WTF *v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  WTF *v28;
  uint64_t v29;
  char v30;
  char v31;
  int v32;
  __int16 v33;
  _DWORD *v34;

  v6 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v6)
  {
    v7 = 2 * v6;
    v8 = (_BYTE *)(*(_QWORD *)(a2 + 8) + 1);
    while (!*v8 || (WebCore::GPUDevice::isSupportedFormat(a1, *(v8 - 1)) & 1) != 0)
    {
      v8 += 2;
      v7 -= 2;
      if (!v7)
        goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_6:
  if (*(_BYTE *)(a2 + 25) && (WebCore::GPUDevice::isSupportedFormat(a1, *(unsigned __int8 *)(a2 + 24)) & 1) == 0)
  {
LABEL_23:
    result = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 33;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v10 += 2;
  v28 = 0;
  v29 = 0;
  v27 = v10;
  v11 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v11)
  {
    if ((v11 & 0x80000000) != 0)
    {
LABEL_41:
      __break(0xC471u);
      JUMPOUT(0x19525DF14);
    }
    v12 = (WTF *)WTF::fastMalloc((WTF *)(2 * v11));
    LODWORD(v29) = v11;
    v28 = v12;
    if (*(_DWORD *)(a2 + 20))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        v15 = (unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v13);
        v16 = v15[1];
        if (v15[1])
        {
          v17 = *v15;
          if (v17 >= 0x5F)
            goto LABEL_41;
          v16 = 1;
        }
        else
        {
          LOWORD(v17) = 0;
        }
        *((_WORD *)v12 + v14++) = v17 | (v16 << 8);
        v13 += 2;
      }
      while (v14 < *(unsigned int *)(a2 + 20));
      HIDWORD(v29) = v14;
    }
  }
  LOBYTE(v18) = *(_BYTE *)(a2 + 25);
  if ((_BYTE)v18)
  {
    v18 = *(unsigned __int8 *)(a2 + 24);
    if (v18 >= 0x5F)
    {
      __break(0xC471u);
      JUMPOUT(0x19525DF34);
    }
    v19 = 1;
  }
  else
  {
    v19 = 0;
  }
  v30 = v18;
  v31 = v19;
  v32 = *(_DWORD *)(a2 + 28);
  v33 = *(_WORD *)(a2 + 32);
  (*(void (**)(_DWORD **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 136))(&v34, v9, &v27);
  v22 = v28;
  if (v28)
  {
    v28 = 0;
    LODWORD(v29) = 0;
    WTF::fastFree(v22, v21);
  }
  v23 = v27;
  v27 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v34;
  if (v34)
  {
    v34 = 0;
    v25 = WTF::fastMalloc((WTF *)0x10);
    v26 = 0;
    *(_DWORD *)v25 = 1;
    *(_QWORD *)(v25 + 8) = v24;
    *(_QWORD *)a3 = v25;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    v26 = 1;
  }
  *(_DWORD *)(a3 + 16) = v26;
  result = v34;
  v34 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::GPUDevice::createQuerySet@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  char v18;
  int v19;
  uint64_t v20;

  if (*(_BYTE *)(a2 + 8) == 1)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 40);
    if (!*(_DWORD *)(v6 + 20))
    {
LABEL_6:
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a3 = 33;
      *(_DWORD *)(a3 + 16) = 1;
      return result;
    }
    v7 = 0;
    while ((MEMORY[0x19AEA53F4](*(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v7), "timestamp-query", 15) & 1) == 0)
    {
      if (++v7 >= (unint64_t)*(unsigned int *)(v6 + 20))
        goto LABEL_6;
    }
  }
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v10 += 2;
  v17 = v10;
  if (*(unsigned __int8 *)(a2 + 8) >= 2u)
  {
    result = 46;
    __break(0xC471u);
  }
  else
  {
    v18 = *(_BYTE *)(a2 + 8);
    v19 = *(_DWORD *)(a2 + 12);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 144))(&v20, v9, &v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v20;
    if (v20)
    {
      v20 = 0;
      v14 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 16) = v13;
      v15 = *(WTF::StringImpl **)a2;
      if (*(_QWORD *)a2)
        *(_DWORD *)v15 += 2;
      v16 = 0;
      *(_QWORD *)(v14 + 24) = v15;
      *(_QWORD *)(v14 + 32) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a3 = v14;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a3 = 8;
      v16 = 1;
    }
    *(_DWORD *)(a3 + 16) = v16;
    result = v20;
    v20 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 8);
    }
  }
  return result;
}

WebCore *WebCore::GPUDevice::addEventListener(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3, unsigned __int8 *a4)
{
  WebCore *v6;
  WebCore *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  _QWORD *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  _QWORD *v20;

  v6 = (WebCore *)WebCore::EventTarget::addEventListener((WebCore *)(a1 + 32), a2, a3, a4);
  v7 = v6;
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow(v6);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  v11 = *a2;
  if (v11 == *(WTF::StringImpl **)(v10 + 2152))
  {
    v12 = *(_QWORD *)(a1 + 64);
    if (v11)
      *(_DWORD *)v11 += 2;
    v13 = (unsigned int *)WTF::WeakPtr<WebCore::GPUDevice,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::GPUDevice>(a1);
    v14 = v13;
    if (v13)
    {
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 + 1, v13));
    }
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v16 = &off_1E334E048;
    if (v11)
      *(_DWORD *)v11 += 2;
    v16[1] = v11;
    v16[2] = v14;
    v20 = v16;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v12 + 168))(v12, &v20);
    v18 = v20;
    v20 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v17);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  return v7;
}

WebCore *`non-virtual thunk to'WebCore::GPUDevice::addEventListener(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3, unsigned __int8 *a4)
{
  return WebCore::GPUDevice::addEventListener(a1 - 32, a2, a3, a4);
}

uint64_t WebCore::GPUDevice::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::GPUDevice::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

uint64_t WebCore::GPUDevice::eventTargetInterface(WebCore::GPUDevice *this)
{
  return 59;
}

uint64_t WebCore::GPUDevice::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::GPUDevice::derefEventTarget(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

uint64_t `non-virtual thunk to'WebCore::GPUDevice::eventTargetInterface(WebCore::GPUDevice *this)
{
  return 59;
}

uint64_t `non-virtual thunk to'WebCore::GPUDevice::scriptExecutionContext(WebCore::GPUDevice *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::GPUDevice::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::GPUDevice::derefEventTarget(uint64_t this)
{
  if (*(_DWORD *)(this - 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 32) + 16))(this - 32);
  --*(_DWORD *)(this - 8);
  return this;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU9ColorDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSC_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU9ColorDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU9ColorDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::convertToBacking(std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUColorDict> const&)::{lambda(WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},WebCore::convertToBacking(std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUColorDict> const&)::{lambda(WebCore::GPUColorDict const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUColorDict> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *v5;

  v3 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  if (!(_DWORD)v3)
    goto LABEL_4;
  if (!(v3 >> 29))
  {
    v5 = (void *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(a2 + 8) = v3;
    *(_QWORD *)a2 = v5;
    memcpy(v5, *(const void **)a1, 8 * *(unsigned int *)(a1 + 12));
LABEL_4:
    *(_DWORD *)(a2 + 32) = 0;
    return;
  }
  __break(0xC471u);
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::convertToBacking(std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUColorDict> const&)::{lambda(WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},WebCore::convertToBacking(std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUColorDict> const&)::{lambda(WebCore::GPUColorDict const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUColorDict> const&>@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 32) = 1;
  return result;
}

uint64_t *WTF::Vector<std::optional<WebCore::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t *a1, void *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  char v14;

  v3 = *((_DWORD *)a1 + 3);
  v4 = *a1;
  if (v3)
  {
    v5 = v4 + 88 * v3;
    do
    {
      if (*(_BYTE *)(v4 + 80))
      {
        if (*(_BYTE *)(v4 + 64))
        {
          v6 = *(unsigned int *)(v4 + 56);
          if ((_DWORD)v6 != -1)
            ((void (*)(char *, uint64_t))off_1E334DD48[v6])(&v14, v4 + 24);
          *(_DWORD *)(v4 + 56) = -1;
        }
        v7 = *(unsigned int **)(v4 + 16);
        *(_QWORD *)(v4 + 16) = 0;
        if (v7)
        {
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v7);
            WTF::fastFree((WTF *)v7, a2);
          }
        }
        v10 = *(unsigned int **)v4;
        *(_QWORD *)v4 = 0;
        if (v10)
        {
          do
          {
            v11 = __ldaxr(v10);
            v12 = v11 - 1;
          }
          while (__stlxr(v12, v10));
          if (!v12)
          {
            atomic_store(1u, v10);
            WTF::fastFree((WTF *)v10, a2);
          }
        }
      }
      v4 += 88;
    }
    while (v4 != v5);
    v4 = *a1;
  }
  if (v4)
  {
    *a1 = 0;
    *((_DWORD *)a1 + 2) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

void WebCore::WebGPU::RenderPassDescriptor::~RenderPassDescriptor(WebCore::WebGPU::RenderPassDescriptor *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  if (*((_BYTE *)this + 88))
  {
    v3 = (unsigned int *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v3)
    {
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        WTF::fastFree((WTF *)v3, a2);
      }
    }
  }
  v6 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  if (*((_BYTE *)this + 56))
  {
    v9 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, a2);
      }
    }
  }
  WTF::Vector<std::optional<WebCore::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t *)this + 1, a2);
  v13 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin3DDict> const&)::{lambda(WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},WebCore::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin3DDict> const&)::{lambda(WebCore::GPUOrigin3DDict const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin3DDict> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *v5;

  v3 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  if (!(_DWORD)v3)
    goto LABEL_4;
  if (!(v3 >> 30))
  {
    v5 = (void *)WTF::fastMalloc((WTF *)(4 * v3));
    *(_DWORD *)(a2 + 8) = v3;
    *(_QWORD *)a2 = v5;
    memcpy(v5, *(const void **)a1, 4 * *(unsigned int *)(a1 + 12));
LABEL_4:
    *(_DWORD *)(a2 + 16) = 0;
    return;
  }
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin3DDict> const&)::{lambda(WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},WebCore::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin3DDict> const&)::{lambda(WebCore::GPUOrigin3DDict const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin3DDict> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 16) = 1;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSC_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)a2 = v3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&)::{lambda(WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},WebCore::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&)::{lambda(WebCore::GPUExtent3DDict const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *v5;

  v3 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  if (!(_DWORD)v3)
    goto LABEL_4;
  if (!(v3 >> 30))
  {
    v5 = (void *)WTF::fastMalloc((WTF *)(4 * v3));
    *(_DWORD *)(a2 + 8) = v3;
    *(_QWORD *)a2 = v5;
    memcpy(v5, *(const void **)a1, 4 * *(unsigned int *)(a1 + 12));
LABEL_4:
    *(_DWORD *)(a2 + 16) = 0;
    return;
  }
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&)::{lambda(WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},WebCore::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&)::{lambda(WebCore::GPUExtent3DDict const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 16) = 1;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Extent3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSC_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore17GPUDeviceLostInfoENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF *v2;
  WTF *v3;
  WTF::StringImpl *v4;

  v2 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (WTF *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 1)
        {
          v4 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
          *((_QWORD *)v3 + 1) = 0;
          if (v4)
          {
            if (*(_DWORD *)v4 == 2)
              WTF::StringImpl::destroy(v4, a2);
            else
              *(_DWORD *)v4 -= 2;
          }
          WTF::fastFree(v3, a2);
        }
        else
        {
          --*(_DWORD *)v3;
        }
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore17GPUDeviceLostInfoENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::GPUSamplerDescriptor::convertToBacking@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  char v9;

  v2 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v2 += 2;
  *(_QWORD *)a2 = v2;
  v3 = *(unsigned __int8 *)(this + 8);
  if (v3 >= 3)
    goto LABEL_20;
  *(_BYTE *)(a2 + 8) = v3;
  v4 = *(unsigned __int8 *)(this + 9);
  if (v4 >= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19525E910);
  }
  *(_BYTE *)(a2 + 9) = v4;
  v5 = *(unsigned __int8 *)(this + 10);
  if (v5 >= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19525E930);
  }
  *(_BYTE *)(a2 + 10) = v5;
  v6 = *(unsigned __int8 *)(this + 11);
  if (v6 >= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x19525E950);
  }
  *(_BYTE *)(a2 + 11) = v6;
  v7 = *(unsigned __int8 *)(this + 12);
  if (v7 >= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x19525E970);
  }
  *(_BYTE *)(a2 + 12) = v7;
  v8 = *(unsigned __int8 *)(this + 13);
  if (v8 >= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x19525E990);
  }
  *(_BYTE *)(a2 + 13) = v8;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(this + 16);
  LOBYTE(v8) = *(_BYTE *)(this + 25);
  if (!(_BYTE)v8)
  {
    v9 = 0;
    goto LABEL_13;
  }
  v8 = *(unsigned __int8 *)(this + 24);
  if (v8 >= 8)
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x19525E8F0);
  }
  v9 = 1;
LABEL_13:
  *(_BYTE *)(a2 + 24) = v8;
  *(_BYTE *)(a2 + 25) = v9;
  *(_WORD *)(a2 + 26) = *(_WORD *)(this + 26);
  return this;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::GPUExternalTextureDescriptor::mediaIdentifierForSource(std::variant<WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> const&)::{lambda(WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>)#1},WebCore::GPUExternalTextureDescriptor::mediaIdentifierForSource(std::variant<WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> const&)::{lambda(WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> const&>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int64x2_t v7;
  uint64_t v8;
  int64x2_t v9;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 + 24);
    *(_DWORD *)(v3 + 24) = v4 + 2;
    v5 = *(_QWORD *)(v3 + 1136);
    if (v5)
    {
      v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 72) + 1152))(*(_QWORD *)(v5 + 72));
      v4 = *(_DWORD *)(v3 + 24) - 2;
      v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v6;
    }
    else
    {
      v7 = 0uLL;
    }
    *(int64x2_t *)(a2 + 8) = v7;
    *(_DWORD *)(a2 + 24) = 0;
    if (v4)
    {
      *(_DWORD *)(v3 + 24) = v4;
    }
    else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v3, a1);
    }
  }
  else
  {
    if (MEMORY[0x470])
    {
      v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(MEMORY[0x470] + 72) + 1152))(*(_QWORD *)(MEMORY[0x470] + 72));
      v9 = vdupq_n_s64(1uLL);
      v9.i64[0] = v8;
    }
    else
    {
      v9 = 0uLL;
    }
    *(int64x2_t *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 24) = 0;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::GPUExternalTextureDescriptor::mediaIdentifierForSource(std::variant<WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> const&)::{lambda(WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>)#1},WebCore::GPUExternalTextureDescriptor::mediaIdentifierForSource(std::variant<WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> const&)::{lambda(WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> const&>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  result = *a1;
  if (*a1)
    ++*(_DWORD *)(result + 16);
  v3 = *(_QWORD *)(result + 24);
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *(_QWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 24) = 1;
  if (*(_DWORD *)(result + 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  --*(_DWORD *)(result + 16);
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS9_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_6RefPtrINSB_10VideoFrameENS9_12RawPtrTraitsISI_EENS9_21DefaultRefDerefTraitsISI_EEEENS9_9RetainPtrIP10__CVBufferEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSG_SN_SR_EEEEEEDcSV_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS9_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_6RefPtrINSB_10VideoFrameENS9_12RawPtrTraitsISI_EENS9_21DefaultRefDerefTraitsISI_EEEENS9_9RetainPtrIP10__CVBufferEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSG_SN_SR_EEEEEEDcSV_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void WebCore::GPUDeviceVideoFrameRequestCallback::~GPUDeviceVideoFrameRequestCallback(WebCore::GPUDeviceVideoFrameRequestCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::GPUDeviceVideoFrameRequestCallback::~GPUDeviceVideoFrameRequestCallback(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;

  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v15 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v15)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v15));
      v16 = *(WTF **)(v3 + 16);
      if (v16)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        WTF::fastFree(v16, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      v10 = (_DWORD *)*((_QWORD *)v9 + 2);
      *((_QWORD *)v9 + 2) = 0;
      if (v10)
      {
        if (v10[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
        else
          --v10[2];
      }
      v11 = *((_QWORD *)v9 + 1);
      if (v11)
      {
        *(_QWORD *)(v11 + 8) = 0;
        v12 = (unsigned int *)*((_QWORD *)v9 + 1);
        *((_QWORD *)v9 + 1) = 0;
        if (v12)
        {
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
          {
            atomic_store(1u, v12);
            WTF::fastFree((WTF *)v12, a2);
          }
        }
      }
      else
      {
        *((_QWORD *)v9 + 1) = 0;
      }
      WTF::fastFree(v9, a2);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

uint64_t WebCore::GPUDeviceVideoFrameRequestCallback::handleEvent(_QWORD *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;

  v2 = a1[4];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v5 = a1[5];
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v7 = (uint64_t *)(v6 + 72);
          v8 = *(_DWORD *)(v6 + 80);
          v9 = *(_DWORD *)(v6 + 84);
          *(_DWORD *)(v6 + 80) = v8 + 1;
          if (v8 > v9)
            WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(v6 + 72, a2);
          v10 = *(_QWORD *)(v3 + 296);
          if (v10)
          {
            if (*(_QWORD *)(v10 + 8))
            {
              v11 = *v7;
              if (*v7)
              {
                v12 = *(_DWORD *)(v11 - 8);
                v13 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
                v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
                v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
                v16 = v12 & ((v15 >> 31) ^ v15);
                for (i = 1; ; ++i)
                {
                  v18 = v16;
                  v19 = *(_QWORD *)(v11 + 16 * v16);
                  if (v19 != -1)
                  {
                    if (!v19)
                      return 0;
                    if (v19 == v10)
                      break;
                  }
                  v16 = (v18 + i) & v12;
                }
                if ((_DWORD)v18 != *(_DWORD *)(v11 - 4))
                {
                  v20 = v11 + 16 * v18;
                  v21 = *(_QWORD *)(v20 + 8);
                  *(_QWORD *)(v20 + 8) = 0;
                  v22 = *v7;
                  if (!*v7 || (v22 += 16 * *(unsigned int *)(v22 - 4), v22 != v20))
                  {
                    if (v22 != v20)
                      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(v7, (unsigned int **)v20);
                  }
                  if (v21)
                  {
                    v23 = *(_QWORD *)(v21 + 8);
                    if (v23 && v23 == a1[3])
                      (*(void (**)(_QWORD))(**(_QWORD **)(v23 + 16) + 16))(*(_QWORD *)(v23 + 16));
                    do
                    {
                      v24 = __ldaxr((unsigned int *)v21);
                      v25 = v24 - 1;
                    }
                    while (__stlxr(v25, (unsigned int *)v21));
                    if (!v25)
                    {
                      atomic_store(1u, (unsigned int *)v21);
                      WTF::fastFree((WTF *)v21, (void *)v20);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::GPUDeviceVideoFrameRequestCallback::hasCallback(WebCore::GPUDeviceVideoFrameRequestCallback *this)
{
  return 1;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_17reference_wrapperIN7WebCore6WebGPU7SamplerEEENS8_INSA_11TextureViewEEENSA_13BufferBindingENS8_INSA_15ExternalTextureEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSC_SE_SF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int v3;
  unsigned int v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    do
    {
      v3 = __ldaxr(result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, result));
    if (!v4)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_17reference_wrapperIN7WebCore6WebGPU7SamplerEEENS8_INSA_11TextureViewEEENSA_13BufferBindingENS8_INSA_15ExternalTextureEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSC_SE_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_17reference_wrapperIN7WebCore6WebGPU7SamplerEEENS8_INSA_11TextureViewEEENSA_13BufferBindingENS8_INSA_15ExternalTextureEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSC_SE_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_17reference_wrapperIN7WebCore6WebGPU7SamplerEEENS8_INSA_11TextureViewEEENSA_13BufferBindingENS8_INSA_15ExternalTextureEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSC_SE_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(_BYTE *)(a2 + 24) = *((_BYTE *)a3 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_17reference_wrapperIN7WebCore6WebGPU7SamplerEEENS8_INSA_11TextureViewEEENSA_13BufferBindingENS8_INSA_15ExternalTextureEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSC_SE_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::convertToBacking(std::variant<WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>>,WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>>,WebCore::GPUBufferBinding,WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>>> const&)::{lambda(WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>> const&)#1},WebCore::convertToBacking(std::variant<WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>>,WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>>,WebCore::GPUBufferBinding,WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>>> const&)::{lambda(WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>> const&)#1},WebCore::convertToBacking(std::variant<WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>>,WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>>,WebCore::GPUBufferBinding,WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>>> const&)::{lambda(WebCore::GPUBufferBinding const&)#1},WebCore::convertToBacking(std::variant<WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>>,WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>>,WebCore::GPUBufferBinding,WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>>> const&)::{lambda(WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>>,WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>>,WebCore::GPUBufferBinding,WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>>> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  *(_DWORD *)(a2 + 32) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::convertToBacking(std::variant<WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>>,WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>>,WebCore::GPUBufferBinding,WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>>> const&)::{lambda(WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>> const&)#1},WebCore::convertToBacking(std::variant<WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>>,WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>>,WebCore::GPUBufferBinding,WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>>> const&)::{lambda(WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>> const&)#1},WebCore::convertToBacking(std::variant<WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>>,WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>>,WebCore::GPUBufferBinding,WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>>> const&)::{lambda(WebCore::GPUBufferBinding const&)#1},WebCore::convertToBacking(std::variant<WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>>,WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>>,WebCore::GPUBufferBinding,WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>>> const&)::{lambda(WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>>,WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>>,WebCore::GPUBufferBinding,WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>>> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  *(_DWORD *)(a2 + 32) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::convertToBacking(std::variant<WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>>,WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>>,WebCore::GPUBufferBinding,WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>>> const&)::{lambda(WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>> const&)#1},WebCore::convertToBacking(std::variant<WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>>,WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>>,WebCore::GPUBufferBinding,WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>>> const&)::{lambda(WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>> const&)#1},WebCore::convertToBacking(std::variant<WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>>,WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>>,WebCore::GPUBufferBinding,WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>>> const&)::{lambda(WebCore::GPUBufferBinding const&)#1},WebCore::convertToBacking(std::variant<WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>>,WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>>,WebCore::GPUBufferBinding,WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>>> const&)::{lambda(WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>>,WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>>,WebCore::GPUBufferBinding,WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>>> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 16);
  if (!*(_QWORD *)(v4 + 16))
  {
    v6 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = v4;
    v7 = *(unsigned int **)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v6;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v5);
      }
    }
  }
  v10 = *(unsigned int **)(v4 + 16);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 16) = v12;
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a1 + 24);
  *(_QWORD *)a2 = v10;
  *(_DWORD *)(a2 + 32) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::convertToBacking(std::variant<WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>>,WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>>,WebCore::GPUBufferBinding,WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>>> const&)::{lambda(WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>> const&)#1},WebCore::convertToBacking(std::variant<WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>>,WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>>,WebCore::GPUBufferBinding,WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>>> const&)::{lambda(WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>> const&)#1},WebCore::convertToBacking(std::variant<WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>>,WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>>,WebCore::GPUBufferBinding,WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>>> const&)::{lambda(WebCore::GPUBufferBinding const&)#1},WebCore::convertToBacking(std::variant<WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>>,WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>>,WebCore::GPUBufferBinding,WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>>> const&)::{lambda(WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::GPUSampler,WTF::RawPtrTraits<WebCore::GPUSampler>,WTF::DefaultRefDerefTraits<WebCore::GPUSampler>>,WTF::RefPtr<WebCore::GPUTextureView,WTF::RawPtrTraits<WebCore::GPUTextureView>,WTF::DefaultRefDerefTraits<WebCore::GPUTextureView>>,WebCore::GPUBufferBinding,WTF::RefPtr<WebCore::GPUExternalTexture,WTF::RawPtrTraits<WebCore::GPUExternalTexture>,WTF::DefaultRefDerefTraits<WebCore::GPUExternalTexture>>> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  *(_DWORD *)(a2 + 32) = 3;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::convertPipelineLayoutToBacking(std::variant<WTF::RefPtr<WebCore::GPUPipelineLayout,WTF::RawPtrTraits<WebCore::GPUPipelineLayout>,WTF::DefaultRefDerefTraits<WebCore::GPUPipelineLayout>>,WebCore::GPUAutoLayoutMode> const&,WTF::Ref<WebCore::GPUPipelineLayout,WTF::RawPtrTraits<WebCore::GPUPipelineLayout>,WTF::DefaultRefDerefTraits<WebCore::GPUPipelineLayout>> const&)::$_0,WebCore::convertPipelineLayoutToBacking(std::variant<WTF::RefPtr<WebCore::GPUPipelineLayout,WTF::RawPtrTraits<WebCore::GPUPipelineLayout>,WTF::DefaultRefDerefTraits<WebCore::GPUPipelineLayout>>,WebCore::GPUAutoLayoutMode> const&,WTF::Ref<WebCore::GPUPipelineLayout,WTF::RawPtrTraits<WebCore::GPUPipelineLayout>,WTF::DefaultRefDerefTraits<WebCore::GPUPipelineLayout>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::GPUPipelineLayout,WTF::RawPtrTraits<WebCore::GPUPipelineLayout>,WTF::DefaultRefDerefTraits<WebCore::GPUPipelineLayout>>,WebCore::GPUAutoLayoutMode> const&>(uint64_t a1, WTF **a2)
{
  WTF *v2;
  int v3;
  _DWORD *v4;

  v2 = *a2;
  v3 = *(_DWORD *)*a2;
  *(_DWORD *)v2 = v3 + 1;
  v4 = (_DWORD *)*((_QWORD *)v2 + 1);
  if (v3)
  {
    *(_DWORD *)v2 = v3;
  }
  else
  {
    *((_QWORD *)v2 + 1) = 0;
    if (v4)
    {
      if (v4[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      else
        --v4[2];
    }
    WTF::fastFree(v2, a2);
  }
  return v4;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::convertPipelineLayoutToBacking(std::variant<WTF::RefPtr<WebCore::GPUPipelineLayout,WTF::RawPtrTraits<WebCore::GPUPipelineLayout>,WTF::DefaultRefDerefTraits<WebCore::GPUPipelineLayout>>,WebCore::GPUAutoLayoutMode> const&,WTF::Ref<WebCore::GPUPipelineLayout,WTF::RawPtrTraits<WebCore::GPUPipelineLayout>,WTF::DefaultRefDerefTraits<WebCore::GPUPipelineLayout>> const&)::$_0,WebCore::convertPipelineLayoutToBacking(std::variant<WTF::RefPtr<WebCore::GPUPipelineLayout,WTF::RawPtrTraits<WebCore::GPUPipelineLayout>,WTF::DefaultRefDerefTraits<WebCore::GPUPipelineLayout>>,WebCore::GPUAutoLayoutMode> const&,WTF::Ref<WebCore::GPUPipelineLayout,WTF::RawPtrTraits<WebCore::GPUPipelineLayout>,WTF::DefaultRefDerefTraits<WebCore::GPUPipelineLayout>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::GPUPipelineLayout,WTF::RawPtrTraits<WebCore::GPUPipelineLayout>,WTF::DefaultRefDerefTraits<WebCore::GPUPipelineLayout>>,WebCore::GPUAutoLayoutMode> const&>(uint64_t a1)
{
  return *(_QWORD *)(***(_QWORD ***)a1 + 8);
}

uint64_t WebCore::GPUProgrammableStage::convertToBacking@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;

  v2 = this;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 16);
  if (!*(_QWORD *)(v4 + 16))
  {
    v6 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = v4;
    this = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v6;
    if (this)
    {
      do
      {
        v7 = __ldaxr((unsigned int *)this);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, (unsigned int *)this));
      if (!v8)
      {
        atomic_store(1u, (unsigned int *)this);
        this = WTF::fastFree((WTF *)this, v5);
      }
    }
  }
  v9 = *(unsigned int **)(v4 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)a2 = v9;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (*(_BYTE *)(v2 + 16))
  {
    v11 = *(_DWORD **)(v2 + 8);
    if (v11)
      *v11 += 2;
    *(_QWORD *)(a2 + 8) = v11;
    *(_BYTE *)(a2 + 16) = 1;
  }
  v12 = *(unsigned int *)(v2 + 36);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 36) = v12;
  if ((_DWORD)v12)
  {
    if (v12 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      this = WTF::fastMalloc((WTF *)(16 * v12));
      *(_DWORD *)(a2 + 32) = v12;
      *(_QWORD *)(a2 + 24) = this;
      v13 = *(unsigned int *)(v2 + 36);
      if ((_DWORD)v13)
      {
        v14 = *(_QWORD *)(v2 + 24);
        v15 = v14 + 16 * v13;
        do
        {
          v16 = *(_DWORD **)v14;
          if (*(_QWORD *)v14)
            *v16 += 2;
          *(_QWORD *)this = v16;
          *(_QWORD *)(this + 8) = *(_QWORD *)(v14 + 8);
          v14 += 16;
          this += 16;
        }
        while (v14 != v15);
      }
    }
  }
  return this;
}

void WebCore::WebGPU::ComputePipelineDescriptor::~ComputePipelineDescriptor(WebCore::WebGPU::ComputePipelineDescriptor *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *v15;

  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 5);
    v5 = 16 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  if (*((_BYTE *)this + 32))
  {
    v8 = (WTF::StringImpl *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, a2);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  v12 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  v15 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::GPUDevice::lost(void)::$_0,void,WebCore::WebGPU::DeviceLostReason>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1[1];
  *a1 = &off_1E334DED8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GPUDevice::lost(void)::$_0,void,WebCore::WebGPU::DeviceLostReason>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E334DED8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::GPUDevice::lost(void)::$_0,void,WebCore::WebGPU::DeviceLostReason>::call(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  int v35;
  _QWORD v36[2];
  int v37;
  WTF *v38;
  int v39;
  unsigned int v40;
  _DWORD v41[3];
  char v42;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || !*(_QWORD *)(v2 + 8))
    return;
  v5 = MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_BYTE *)(v6 + 4) = a2;
  *(_QWORD *)(v6 + 8) = v5;
  v7 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = v6;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v9)
    v10 = v9 - 32;
  else
    v10 = 0;
  v11 = *(_QWORD *)(v10 + 56);
  v35 = 0;
  v12 = *(unsigned __int8 *)(v11 + 24);
  if (!*(_BYTE *)(v11 + 24))
  {
    v34 = 0;
    *(_QWORD *)v11 = v7;
    *(_DWORD *)(v11 + 16) = 0;
    *(_BYTE *)(v11 + 24) = 1;
LABEL_22:
    ((void (*)(WTF **, uint64_t *))off_1E334DDC8[v12])(&v38, &v34);
    goto LABEL_23;
  }
  v34 = 0;
  v36[0] = v7;
  v37 = 0;
  v13 = *(unsigned int *)(v11 + 16);
  if ((_DWORD)v13)
  {
    LOBYTE(v38) = 0;
    v41[0] = -1;
    if ((_DWORD)v13 != -1)
    {
      ((void (*)(char *, WTF **, uint64_t))off_1E334DEF0[v13])(&v42, &v38, v11);
      v41[0] = v13;
      v14 = *(unsigned int *)(v11 + 16);
      if ((_DWORD)v14 != -1)
        ((void (*)(char *, uint64_t))off_1E334DDC8[v14])(&v42, v11);
    }
    *(_DWORD *)(v11 + 16) = -1;
    v15 = v37;
    if (v37 != -1)
    {
      ((void (*)(char *, uint64_t, _QWORD *))off_1E334DF00[v37])(&v42, v11, v36);
      *(_DWORD *)(v11 + 16) = v15;
      if (v37 != -1)
        ((void (*)(char *, _QWORD *))off_1E334DDC8[v37])(&v42, v36);
    }
    v37 = -1;
    v16 = v41[0];
    if (v41[0] != -1)
    {
      ((void (*)(char *, _QWORD *, WTF **))off_1E334DF00[v41[0]])(&v42, v36, &v38);
      v37 = v16;
      if (v41[0] != -1)
        ((void (*)(char *, WTF **))off_1E334DDC8[v41[0]])(&v42, &v38);
    }
  }
  else
  {
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF3RefIN7WebCore17GPUDeviceLostInfoENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS9_9ExceptionEEE6__swapB8sn180100ERSH_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SG_EEESS_EEEDcSJ_DpT0_(v7, (WTF::StringImpl *)v36, (WTF **)v11);
  }
  if (v37 != -1)
    ((void (*)(WTF **, _QWORD *))off_1E334DDC8[v37])(&v38, v36);
  v12 = v35;
  if (v35 != -1)
    goto LABEL_22;
LABEL_23:
  v17 = *(unsigned int *)(v11 + 44);
  v38 = (WTF *)v41;
  v39 = 1;
  v40 = v17;
  if (v17 < 2)
  {
    v18 = (WTF *)v41;
    if (!(_DWORD)v17)
      goto LABEL_25;
    goto LABEL_51;
  }
  if (v17 >> 29)
  {
LABEL_62:
    __break(0xC471u);
    goto LABEL_63;
  }
  v27 = v17;
  v18 = (WTF *)WTF::fastMalloc((WTF *)(8 * v17));
  v39 = v27;
  v38 = v18;
  v17 = *(unsigned int *)(v11 + 44);
  if ((_DWORD)v17)
  {
LABEL_51:
    v28 = *(uint64_t **)(v11 + 32);
    v29 = 8 * v17;
    v30 = v18;
    do
    {
      v31 = *v28++;
      ++*(_DWORD *)(v31 + 16);
      *(_QWORD *)v30 = v31;
      v30 = (WTF *)((char *)v30 + 8);
      v29 -= 8;
    }
    while (v29);
  }
LABEL_25:
  if (!*(_BYTE *)(v11 + 24))
  {
LABEL_63:
    __break(1u);
    return;
  }
  if (*(_DWORD *)(v11 + 16))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_62;
  }
  v19 = *(WTF **)v11;
  v20 = (*(_DWORD *)v19)++;
  if (v40)
  {
    v21 = 8 * v40;
    do
    {
      v22 = *(_QWORD *)v18;
      v18 = (WTF *)((char *)v18 + 8);
      WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::GPUDeviceLostInfo>>(v22, v19);
      v21 -= 8;
    }
    while (v21);
    v20 = *(_DWORD *)v19 - 1;
  }
  if (v20)
  {
    *(_DWORD *)v19 = v20;
  }
  else
  {
    v25 = (WTF *)*((_QWORD *)v19 + 1);
    *((_QWORD *)v19 + 1) = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 1)
      {
        v26 = (WTF::StringImpl *)*((_QWORD *)v25 + 1);
        *((_QWORD *)v25 + 1) = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v8);
          else
            *(_DWORD *)v26 -= 2;
        }
        WTF::fastFree(v25, v8);
      }
      else
      {
        --*(_DWORD *)v25;
      }
    }
    WTF::fastFree(v19, v8);
  }
  v23 = v38;
  if (v40)
  {
    v32 = 8 * v40;
    do
    {
      v33 = *(_DWORD **)v23;
      *(_QWORD *)v23 = 0;
      if (v33)
      {
        if (v33[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 16))(v33);
        else
          --v33[4];
      }
      v23 = (WTF *)((char *)v23 + 8);
      v32 -= 8;
    }
    while (v32);
    v23 = v38;
  }
  if (v41 != (_DWORD *)v23 && v23 != 0)
  {
    v38 = 0;
    v39 = 0;
    WTF::fastFree(v23, v8);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore17GPUDeviceLostInfoENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore17GPUDeviceLostInfoENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF3RefIN7WebCore17GPUDeviceLostInfoENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS9_9ExceptionEEE6__swapB8sn180100ERSH_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SG_EEESS_EEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2, WTF **a3)
{
  WTF *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v4 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  v5 = *a3;
  *a3 = 0;
  v6 = *(WTF **)a2;
  *(_QWORD *)a2 = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      v8 = (WTF *)*((_QWORD *)v6 + 1);
      *((_QWORD *)v6 + 1) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          v10 = (WTF::StringImpl *)*((_QWORD *)v8 + 1);
          *((_QWORD *)v8 + 1) = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, a2);
            else
              *(_DWORD *)v10 -= 2;
          }
          WTF::fastFree(v8, a2);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
      WTF::fastFree(v6, a2);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  v7 = *a3;
  *a3 = v4;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      v9 = (WTF *)*((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          v11 = (WTF::StringImpl *)*((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, a2);
            else
              *(_DWORD *)v11 -= 2;
          }
          WTF::fastFree(v9, a2);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      WTF::fastFree(v7, a2);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore17GPUDeviceLostInfoENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_6__implIJSG_SH_EEEEEvRSJ_OT_EUlRSO_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSG_SH_EEEOSX_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore17GPUDeviceLostInfoENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_6__implIJSG_SH_EEEEEvRSJ_OT_EUlRSO_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSG_SH_EEEOSX_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

void WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int **v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    while (1)
    {
      v12 = (unsigned int **)(v4 + 16 * v11);
      v13 = *v12;
      if (*v12 != (unsigned int *)-1)
      {
        if (v13)
        {
          v21 = *a1;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v23 = ((unint64_t)v13 + ~((_QWORD)v13 << 32)) ^ (((unint64_t)v13 + ~((_QWORD)v13 << 32)) >> 22);
          v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
          v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
          v26 = v22 & ((v25 >> 31) ^ v25);
          v27 = 1;
          do
          {
            v28 = v26;
            v29 = *(_QWORD *)(v21 + 16 * v26);
            v26 = (v26 + v27++) & v22;
          }
          while (v29);
          v30 = (unsigned int **)(v21 + 16 * v28);
          v31 = v30[1];
          v30[1] = 0;
          if (v31)
          {
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              atomic_store(1u, v31);
              WTF::fastFree((WTF *)v31, v8);
            }
          }
          v34 = *v30;
          *v30 = 0;
          if (v34)
          {
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              atomic_store(1u, v34);
              WTF::fastFree((WTF *)v34, v8);
            }
          }
          v37 = *v12;
          *v12 = 0;
          *v30 = v37;
          v38 = v4 + 16 * v11;
          v39 = *(unsigned int **)(v38 + 8);
          *(_QWORD *)(v38 + 8) = 0;
          v30[1] = v39;
          v40 = *(unsigned int **)(v38 + 8);
          *(_QWORD *)(v38 + 8) = 0;
          if (v40)
          {
            do
            {
              v41 = __ldaxr(v40);
              v42 = v41 - 1;
            }
            while (__stlxr(v42, v40));
            if (!v42)
            {
              atomic_store(1u, v40);
              WTF::fastFree((WTF *)v40, v8);
            }
          }
          v18 = *v12;
          *v12 = 0;
          if (!v18)
            goto LABEL_39;
          do
          {
            v43 = __ldaxr(v18);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v18));
          if (v44)
            goto LABEL_39;
        }
        else
        {
          v14 = v4 + 16 * v11;
          v15 = *(unsigned int **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v15)
          {
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
            {
              atomic_store(1u, v15);
              WTF::fastFree((WTF *)v15, v8);
            }
          }
          v18 = *v12;
          *v12 = 0;
          if (!v18)
            goto LABEL_39;
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (v20)
            goto LABEL_39;
        }
        atomic_store(1u, v18);
        WTF::fastFree((WTF *)v18, v8);
      }
LABEL_39:
      if (++v11 == v5)
        goto LABEL_42;
    }
  }
  if (v4)
LABEL_42:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

void WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(uint64_t *a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int **v15;

  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v15 = a2;
      WTF::fastFree((WTF *)v3, a2);
      a2 = v15;
    }
  }
  v6 = a2[1];
  *a2 = (unsigned int *)-1;
  a2[1] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  ++*(_DWORD *)(*a1 - 16);
  v9 = *a1;
  if (*a1)
    v10 = *(_DWORD *)(v9 - 12) - 1;
  else
    v10 = -1;
  *(_DWORD *)(v9 - 12) = v10;
  v11 = *a1;
  if (*a1)
  {
    v12 = 6 * *(_DWORD *)(v11 - 12);
    v13 = *(_DWORD *)(v11 - 4);
    if (v12 < v13 && v13 >= 9)
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v13 >> 1);
  }
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::GPUDevice>(WebCore::GPUDevice &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  uint64_t v7;

  *a1 = &off_1E334DF20;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::GPUDevice>(WebCore::GPUDevice &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  uint64_t v7;

  *(_QWORD *)this = &off_1E334DF20;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[6];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::GPUDevice>(WebCore::GPUDevice &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::GPUDevice::importExternalTexture(WebCore::GPUExternalTextureDescriptor const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E334DF48;
  WebCore::GPUDevice::importExternalTexture(WebCore::GPUExternalTextureDescriptor const&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GPUDevice::importExternalTexture(WebCore::GPUExternalTextureDescriptor const&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E334DF48;
  WebCore::GPUDevice::importExternalTexture(WebCore::GPUExternalTextureDescriptor const&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GPUDevice::importExternalTexture(WebCore::GPUExternalTextureDescriptor const&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = result;
      result = WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::WeakPtr<WebCore::GPUExternalTexture,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultWeakPtrImpl>::find((uint64_t)&v7, (uint64_t *)(*(_QWORD *)(result + 8) + 104), *(_QWORD *)(v2 + 296));
      v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 104);
      if (v4)
        v4 += 16 * *(unsigned int *)(v4 - 4);
      if (v8 != v4)
      {
        v5 = *(_QWORD *)(v3 + 24);
        v6 = *(_QWORD *)(v8 + 8);
        if (v6)
          v6 = *(_QWORD *)(v6 + 8);
        if (v5 == v6)
          return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 16) + 16))(*(_QWORD *)(v5 + 16));
      }
    }
  }
  return result;
}

uint64_t WebCore::DeferredPromise::reject<WebCore::IDLInterface<WebCore::GPUPipelineError>>(uint64_t result, WTF *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::wrap<WebCore::GPUPipelineError>((int)v6, **(JSC::VM ***)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 1, v8);
      return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::GPUDevice::createComputePipelineAsync(WebCore::GPUComputePipelineDescriptor const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::GPUComputePipeline>> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>> &&,WTF::String &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E334DF70;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GPUDevice::createComputePipelineAsync(WebCore::GPUComputePipelineDescriptor const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::GPUComputePipeline>> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>> &&,WTF::String &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E334DF70;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GPUDevice::createComputePipelineAsync(WebCore::GPUComputePipelineDescriptor const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::GPUComputePipeline>> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>> &&,WTF::String &&>::call(uint64_t a1, _DWORD **a2, _DWORD **a3)
{
  _DWORD *v4;
  uint64_t v5;
  void *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  uint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  objc_class *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v25;
  int v26;
  WTF::StringImpl *v27;

  v4 = *a2;
  if (!*a2)
  {
    v12 = WTF::fastMalloc((WTF *)0x28);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_DWORD *)(v12 + 8) = 1;
    *(_QWORD *)v12 = off_1E334F098;
    *(_BYTE *)(v12 + 12) = 0;
    v14 = v27;
    if (v27)
      *(_DWORD *)v27 += 2;
    *(_QWORD *)(v12 + 16) = v14;
    v15 = *a3;
    if (*a3)
      *v15 += 2;
    *(_QWORD *)(v12 + 24) = v15;
    v27 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    *(_QWORD *)v12 = off_1E334EEB0;
    *(_DWORD *)(v12 + 32) = 0;
    result = WebCore::DeferredPromise::reject<WebCore::IDLInterface<WebCore::GPUPipelineError>>(*(_QWORD *)(a1 + 8), (WTF *)v12);
    if (*(_DWORD *)(v12 + 8) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    --*(_DWORD *)(v12 + 8);
    return result;
  }
  *a2 = 0;
  v5 = WTF::fastMalloc((WTF *)0x10);
  v7 = (WTF *)v5;
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = v4;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(v8 + 24);
  if (!v9)
  {
    *(_QWORD *)(v5 + 8) = 0;
    goto LABEL_6;
  }
  if (!*(_QWORD *)v9 || (*(_BYTE *)(v9 + 8) & 3) != 0)
  {
LABEL_5:
    v4 = (_DWORD *)*((_QWORD *)v7 + 1);
    *((_QWORD *)v7 + 1) = 0;
    if (!v4)
      return WTF::fastFree(v7, v6);
LABEL_6:
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
    return WTF::fastFree(v7, v6);
  }
  v16 = *(_QWORD *)(v8 + 32);
  if (!v16 || (*(_BYTE *)(v16 + 8) & 3) != 0)
    v17 = 0;
  else
    v17 = *(WebCore::JSDOMGlobalObject **)v16;
  v18 = *((_QWORD *)v17 + 7);
  MEMORY[0x19AEA3294](&v27, v18);
  v19 = (objc_class *)WebCore::wrap<WebCore::GPUComputePipeline>((uint64_t)v17, **(_QWORD **)(v8 + 32), v7);
  v20 = *(_QWORD *)(v18 + 16);
  if (v20 || (WebCore::DeferredPromise::callFunction(v8, (uint64_t *)v17, 0, v19), (v20 = *(_QWORD *)(v18 + 16)) != 0))
  {
    v21 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v17);
    if (!(*(unsigned int (**)(_QWORD *))(*v21 + 64))(v21))
    {
LABEL_31:
      WebCore::reportException(v17, v20, 0, 0, 0);
      goto LABEL_23;
    }
    v22 = v21[43];
    if (*(_QWORD *)(v18 + 24) == v20)
    {
LABEL_45:
      *(_BYTE *)(*(_QWORD *)(v22 + 8) + 93442) = 1;
      *(_BYTE *)(v8 + 44) = 1;
      goto LABEL_31;
    }
    if (!v22)
      goto LABEL_31;
    v23 = (unsigned __int8 *)(v22 + 40);
    if (__ldaxr((unsigned __int8 *)(v22 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v23))
    {
      goto LABEL_39;
    }
    MEMORY[0x19AEA534C](v22 + 40);
LABEL_39:
    v25 = *(unsigned __int8 *)(v22 + 41);
    v26 = __ldxr(v23);
    if (v26 == 1)
    {
      if (!__stlxr(0, v23))
      {
LABEL_44:
        if (!v25)
          goto LABEL_31;
        goto LABEL_45;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v22 + 40));
    goto LABEL_44;
  }
LABEL_23:
  result = MEMORY[0x19AEA32A0](&v27);
  if (*(_DWORD *)v7 == 1)
    goto LABEL_5;
  --*(_DWORD *)v7;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::GPUDevice::createRenderPipelineAsync(WebCore::GPURenderPipelineDescriptor const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::GPURenderPipeline>> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>> &&,WTF::String &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E334DF98;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GPUDevice::createRenderPipelineAsync(WebCore::GPURenderPipelineDescriptor const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::GPURenderPipeline>> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>> &&,WTF::String &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E334DF98;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GPUDevice::createRenderPipelineAsync(WebCore::GPURenderPipelineDescriptor const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::GPURenderPipeline>> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>> &&,WTF::String &&>::call(uint64_t a1, _DWORD **a2, _DWORD **a3)
{
  _DWORD *v4;
  uint64_t v5;
  void *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  uint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  objc_class *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v25;
  int v26;
  WTF::StringImpl *v27;

  v4 = *a2;
  if (!*a2)
  {
    v12 = WTF::fastMalloc((WTF *)0x28);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_DWORD *)(v12 + 8) = 1;
    *(_QWORD *)v12 = off_1E334F098;
    *(_BYTE *)(v12 + 12) = 0;
    v14 = v27;
    if (v27)
      *(_DWORD *)v27 += 2;
    *(_QWORD *)(v12 + 16) = v14;
    v15 = *a3;
    if (*a3)
      *v15 += 2;
    *(_QWORD *)(v12 + 24) = v15;
    v27 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    *(_QWORD *)v12 = off_1E334EEB0;
    *(_DWORD *)(v12 + 32) = 0;
    result = WebCore::DeferredPromise::reject<WebCore::IDLInterface<WebCore::GPUPipelineError>>(*(_QWORD *)(a1 + 8), (WTF *)v12);
    if (*(_DWORD *)(v12 + 8) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    --*(_DWORD *)(v12 + 8);
    return result;
  }
  *a2 = 0;
  v5 = WTF::fastMalloc((WTF *)0x10);
  v7 = (WTF *)v5;
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = v4;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(v8 + 24);
  if (!v9)
  {
    *(_QWORD *)(v5 + 8) = 0;
    goto LABEL_6;
  }
  if (!*(_QWORD *)v9 || (*(_BYTE *)(v9 + 8) & 3) != 0)
  {
LABEL_5:
    v4 = (_DWORD *)*((_QWORD *)v7 + 1);
    *((_QWORD *)v7 + 1) = 0;
    if (!v4)
      return WTF::fastFree(v7, v6);
LABEL_6:
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
    return WTF::fastFree(v7, v6);
  }
  v16 = *(_QWORD *)(v8 + 32);
  if (!v16 || (*(_BYTE *)(v16 + 8) & 3) != 0)
    v17 = 0;
  else
    v17 = *(WebCore::JSDOMGlobalObject **)v16;
  v18 = *((_QWORD *)v17 + 7);
  MEMORY[0x19AEA3294](&v27, v18);
  v19 = (objc_class *)WebCore::wrap<WebCore::GPURenderPipeline>((uint64_t)v17, **(_QWORD **)(v8 + 32), v7);
  v20 = *(_QWORD *)(v18 + 16);
  if (v20 || (WebCore::DeferredPromise::callFunction(v8, (uint64_t *)v17, 0, v19), (v20 = *(_QWORD *)(v18 + 16)) != 0))
  {
    v21 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v17);
    if (!(*(unsigned int (**)(_QWORD *))(*v21 + 64))(v21))
    {
LABEL_31:
      WebCore::reportException(v17, v20, 0, 0, 0);
      goto LABEL_23;
    }
    v22 = v21[43];
    if (*(_QWORD *)(v18 + 24) == v20)
    {
LABEL_45:
      *(_BYTE *)(*(_QWORD *)(v22 + 8) + 93442) = 1;
      *(_BYTE *)(v8 + 44) = 1;
      goto LABEL_31;
    }
    if (!v22)
      goto LABEL_31;
    v23 = (unsigned __int8 *)(v22 + 40);
    if (__ldaxr((unsigned __int8 *)(v22 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v23))
    {
      goto LABEL_39;
    }
    MEMORY[0x19AEA534C](v22 + 40);
LABEL_39:
    v25 = *(unsigned __int8 *)(v22 + 41);
    v26 = __ldxr(v23);
    if (v26 == 1)
    {
      if (!__stlxr(0, v23))
      {
LABEL_44:
        if (!v25)
          goto LABEL_31;
        goto LABEL_45;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v22 + 40));
    goto LABEL_44;
  }
LABEL_23:
  result = MEMORY[0x19AEA32A0](&v27);
  if (*(_DWORD *)v7 == 1)
    goto LABEL_5;
  --*(_DWORD *)v7;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::GPUDevice::popErrorScope(WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::GPUOutOfMemoryError>,WebCore::IDLInterface<WebCore::GPUValidationError>,WebCore::IDLInterface<WebCore::GPUInternalError>>>> &&)::$_0,void,BOOL,std::optional<WebCore::GPUDevice::popErrorScope(WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::GPUOutOfMemoryError>,WebCore::IDLInterface<WebCore::GPUValidationError>,WebCore::IDLInterface<WebCore::GPUInternalError>>>> &&)::$_0::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>,WebCore::GPUDevice::popErrorScope(WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::GPUOutOfMemoryError>,WebCore::IDLInterface<WebCore::GPUValidationError>,WebCore::IDLInterface<WebCore::GPUInternalError>>>> &&)::$_0::variant<WTF::Ref::ValidationError,WebCore::WebGPU::OutOfMemoryError<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>,WTF::RawPtrTraits<WebCore::WebGPU><WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>>,WebCore::GPUDevice::popErrorScope(WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::GPUOutOfMemoryError>,WebCore::IDLInterface<WebCore::GPUValidationError>,WebCore::IDLInterface<WebCore::GPUInternalError>>>> &&)::$_0::variant<WTF::Ref::InternalError,WebCore::WebGPU::OutOfMemoryError<WebCore::GPUDevice::popErrorScope(WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::GPUOutOfMemoryError>,WebCore::IDLInterface<WebCore::GPUValidationError>,WebCore::IDLInterface<WebCore::GPUInternalError>>>> &&)::$_0::variant<WTF::Ref::ValidationError,WebCore::WebGPU::OutOfMemoryError<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>,WTF::RawPtrTraits<WebCore::WebGPU><WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>>>,WTF::RawPtrTraits<WebCore::WebGPU><WebCore::GPUDevice::popErrorScope(WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::GPUOutOfMemoryError>,WebCore::IDLInterface<WebCore::GPUValidationError>,WebCore::IDLInterface<WebCore::GPUInternalError>>>> &&)::$_0::variant<WTF::Ref::ValidationError,WebCore::WebGPU::OutOfMemoryError<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>,WTF::RawPtrTraits<WebCore::WebGPU><WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>>>>>> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E334DFC0;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GPUDevice::popErrorScope(WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::GPUOutOfMemoryError>,WebCore::IDLInterface<WebCore::GPUValidationError>,WebCore::IDLInterface<WebCore::GPUInternalError>>>> &&)::$_0,void,BOOL,std::optional<WebCore::GPUDevice::popErrorScope(WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::GPUOutOfMemoryError>,WebCore::IDLInterface<WebCore::GPUValidationError>,WebCore::IDLInterface<WebCore::GPUInternalError>>>> &&)::$_0::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>,WebCore::GPUDevice::popErrorScope(WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::GPUOutOfMemoryError>,WebCore::IDLInterface<WebCore::GPUValidationError>,WebCore::IDLInterface<WebCore::GPUInternalError>>>> &&)::$_0::variant<WTF::Ref::ValidationError,WebCore::WebGPU::OutOfMemoryError<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>,WTF::RawPtrTraits<WebCore::WebGPU><WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>>,WebCore::GPUDevice::popErrorScope(WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::GPUOutOfMemoryError>,WebCore::IDLInterface<WebCore::GPUValidationError>,WebCore::IDLInterface<WebCore::GPUInternalError>>>> &&)::$_0::variant<WTF::Ref::InternalError,WebCore::WebGPU::OutOfMemoryError<WebCore::GPUDevice::popErrorScope(WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::GPUOutOfMemoryError>,WebCore::IDLInterface<WebCore::GPUValidationError>,WebCore::IDLInterface<WebCore::GPUInternalError>>>> &&)::$_0::variant<WTF::Ref::ValidationError,WebCore::WebGPU::OutOfMemoryError<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>,WTF::RawPtrTraits<WebCore::WebGPU><WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>>>,WTF::RawPtrTraits<WebCore::WebGPU><WebCore::GPUDevice::popErrorScope(WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::GPUOutOfMemoryError>,WebCore::IDLInterface<WebCore::GPUValidationError>,WebCore::IDLInterface<WebCore::GPUInternalError>>>> &&)::$_0::variant<WTF::Ref::ValidationError,WebCore::WebGPU::OutOfMemoryError<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>,WTF::RawPtrTraits<WebCore::WebGPU><WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>>>>>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E334DFC0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::GPUDevice::popErrorScope(WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::GPUOutOfMemoryError>,WebCore::IDLInterface<WebCore::GPUValidationError>,WebCore::IDLInterface<WebCore::GPUInternalError>>>> &&)::$_0,void,BOOL,std::optional<WebCore::GPUDevice::popErrorScope(WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::GPUOutOfMemoryError>,WebCore::IDLInterface<WebCore::GPUValidationError>,WebCore::IDLInterface<WebCore::GPUInternalError>>>> &&)::$_0::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>,WebCore::GPUDevice::popErrorScope(WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::GPUOutOfMemoryError>,WebCore::IDLInterface<WebCore::GPUValidationError>,WebCore::IDLInterface<WebCore::GPUInternalError>>>> &&)::$_0::variant<WTF::Ref::ValidationError,WebCore::WebGPU::OutOfMemoryError<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>,WTF::RawPtrTraits<WebCore::WebGPU><WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>>,WebCore::GPUDevice::popErrorScope(WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::GPUOutOfMemoryError>,WebCore::IDLInterface<WebCore::GPUValidationError>,WebCore::IDLInterface<WebCore::GPUInternalError>>>> &&)::$_0::variant<WTF::Ref::InternalError,WebCore::WebGPU::OutOfMemoryError<WebCore::GPUDevice::popErrorScope(WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::GPUOutOfMemoryError>,WebCore::IDLInterface<WebCore::GPUValidationError>,WebCore::IDLInterface<WebCore::GPUInternalError>>>> &&)::$_0::variant<WTF::Ref::ValidationError,WebCore::WebGPU::OutOfMemoryError<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>,WTF::RawPtrTraits<WebCore::WebGPU><WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>>>,WTF::RawPtrTraits<WebCore::WebGPU><WebCore::GPUDevice::popErrorScope(WebCore::DOMPromiseDeferred<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::GPUOutOfMemoryError>,WebCore::IDLInterface<WebCore::GPUValidationError>,WebCore::IDLInterface<WebCore::GPUInternalError>>>> &&)::$_0::variant<WTF::Ref::ValidationError,WebCore::WebGPU::OutOfMemoryError<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>,WTF::RawPtrTraits<WebCore::WebGPU><WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>>>>>> &&>::call(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  objc_class **v13;
  WTF::StringImpl *v14;
  char v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  objc_class *v18;

  if (*(_BYTE *)(a3 + 16))
  {
    v4 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v4 == -1)
    {
      v11 = std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::DeferredPromise::resolve<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::GPUOutOfMemoryError>,WebCore::IDLInterface<WebCore::GPUValidationError>,WebCore::IDLInterface<WebCore::GPUInternalError>>>>(v11, v12);
    }
    else
    {
      v13 = &v18;
      ((void (*)(uint64_t *__return_ptr, objc_class ***, uint64_t))off_1E334E008[v4])(&v16, &v13, a3);
      LOBYTE(v13) = 0;
      LODWORD(v14) = -1;
      v5 = (int)v17;
      if ((_DWORD)v17 != -1)
      {
        ((void (*)(objc_class **, objc_class ***, uint64_t *))off_1E334E020[v17])(&v18, &v13, &v16);
        LODWORD(v14) = v5;
      }
      v15 = 1;
      WebCore::DeferredPromise::resolve<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::GPUOutOfMemoryError>,WebCore::IDLInterface<WebCore::GPUValidationError>,WebCore::IDLInterface<WebCore::GPUInternalError>>>>(*(_QWORD *)(a1 + 8), (uint64_t)&v13);
      if (v15)
      {
        if ((_DWORD)v14 != -1)
          ((void (*)(objc_class **, objc_class ***))off_1E334DFD8[v14])(&v18, &v13);
        LODWORD(v14) = -1;
      }
      if ((_DWORD)v17 != -1)
        ((void (*)(objc_class **, uint64_t *))off_1E334DFD8[v17])(&v18, &v16);
    }
  }
  else if (a2)
  {
    LOBYTE(v13) = 0;
    v15 = 0;
    WebCore::DeferredPromise::resolve<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::GPUOutOfMemoryError>,WebCore::IDLInterface<WebCore::GPUValidationError>,WebCore::IDLInterface<WebCore::GPUInternalError>>>>(*(_QWORD *)(a1 + 8), (uint64_t)&v13);
    if (v15 && (_DWORD)v14 != -1)
      ((void (*)(uint64_t *, objc_class ***))off_1E334DFD8[v14])(&v16, &v13);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = *(_QWORD *)(a1 + 8);
    LOBYTE(v16) = 30;
    v18 = 0;
    LOBYTE(v13) = 30;
    v7 = v17;
    if (v17)
      *(_DWORD *)v17 += 2;
    v14 = v7;
    WebCore::DeferredPromise::reject(v6, (unsigned __int8 *)&v13, 0, &v18);
    v9 = v14;
    v14 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v17;
    v17 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
}

void WebCore::DeferredPromise::resolve<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::GPUOutOfMemoryError>,WebCore::IDLInterface<WebCore::GPUValidationError>,WebCore::IDLInterface<WebCore::GPUInternalError>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  _DWORD **v21;
  uint64_t v22;
  _BYTE v23[8];
  int v24;
  _BYTE v25[40];
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD v29[5];

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](&v22, v7);
    v8 = *(uint64_t **)(a1 + 32);
    if (!v8 || (v8[1] & 3) != 0)
      v9 = 0;
    else
      v9 = *v8;
    if (*(_BYTE *)(a2 + 16))
    {
      v23[0] = 0;
      v24 = -1;
      v10 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v10 == -1)
      {
        v10 = -1;
      }
      else
      {
        ((void (*)(_QWORD *, _BYTE *, uint64_t))off_1E334DFF0[v10])(v29, v23, a2);
        v24 = v10;
      }
      LOBYTE(v26) = 0;
      v27 = 0;
      v28 = v10;
      v29[0] = &v28;
      v29[1] = &v26;
      v29[2] = v6;
      v29[3] = v9;
      v29[4] = v23;
      _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_19GPUOutOfMemoryErrorEEENS4_INS_18GPUValidationErrorEEENS4_INS_16GPUInternalErrorEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrIS5_NSK_12RawPtrTraitsIS5_EENSK_21DefaultRefDerefTraitsIS5_EEEENSL_IS7_NSM_IS7_EENSO_IS7_EEEENSL_IS9_NSM_IS9_EENSO_IS9_EEEEEEEEUlTyvE_JNSI_17integral_constantIlLl0EEENS11_IlLl1EEENS11_IlLl2EEEEEET_S15_((unint64_t)v29, (uint64_t)v25);
      if (!v27)
      {
        v19 = std::__throw_bad_optional_access[abi:sn180100]();
        _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore19GPUOutOfMemoryErrorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_18GPUValidationErrorENSC_ISH_EENSE_ISH_EEEENS9_INSA_16GPUInternalErrorENSC_ISL_EENSE_ISL_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEERKS16_EEEDcSY_DpT0_(v19, v20, v21);
        return;
      }
      v11 = v26;
      if (v24 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_1E334DFD8[v24])(v29, v23);
    }
    else
    {
      v11 = 2;
    }
    v12 = *(_QWORD *)(v7 + 16);
    if (!v12)
    {
      WebCore::DeferredPromise::callFunction(a1, v6, 0, (objc_class *)v11);
      v12 = *(_QWORD *)(v7 + 16);
      if (!v12)
        goto LABEL_20;
    }
    v13 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v13 + 64))(v13))
    {
LABEL_23:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v12, 0, 0, 0);
LABEL_20:
      MEMORY[0x19AEA32A0](&v22);
      return;
    }
    v14 = v13[43];
    if (*(_QWORD *)(v7 + 24) == v12)
    {
LABEL_38:
      *(_BYTE *)(*(_QWORD *)(v14 + 8) + 93442) = 1;
      *(_BYTE *)(a1 + 44) = 1;
      goto LABEL_23;
    }
    if (!v14)
      goto LABEL_23;
    v15 = (unsigned __int8 *)(v14 + 40);
    if (__ldaxr((unsigned __int8 *)(v14 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v15))
    {
      goto LABEL_32;
    }
    MEMORY[0x19AEA534C](v14 + 40);
LABEL_32:
    v17 = *(unsigned __int8 *)(v14 + 41);
    v18 = __ldxr(v15);
    if (v18 == 1)
    {
      if (!__stlxr(0, v15))
      {
LABEL_37:
        if (!v17)
          goto LABEL_23;
        goto LABEL_38;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v14 + 40));
    goto LABEL_37;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore19GPUOutOfMemoryErrorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_18GPUValidationErrorENSC_ISH_EENSE_ISH_EEEENS9_INSA_16GPUInternalErrorENSC_ISL_EENSE_ISL_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    ++*v3;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore19GPUOutOfMemoryErrorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_18GPUValidationErrorENSC_ISH_EENSE_ISH_EEEENS9_INSA_16GPUInternalErrorENSC_ISL_EENSE_ISL_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    ++*v3;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore19GPUOutOfMemoryErrorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_18GPUValidationErrorENSC_ISH_EENSE_ISH_EEEENS9_INSA_16GPUInternalErrorENSC_ISL_EENSE_ISL_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    ++*v3;
  *a2 = v3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::variant<WTF::RefPtr<WebCore::GPUOutOfMemoryError,WTF::RawPtrTraits<WebCore::GPUOutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::GPUOutOfMemoryError>>,WTF::RefPtr<WebCore::GPUValidationError,WTF::RawPtrTraits<WebCore::GPUValidationError>,WTF::DefaultRefDerefTraits<WebCore::GPUValidationError>>,WTF::RefPtr<WebCore::GPUInternalError,WTF::RawPtrTraits<WebCore::GPUInternalError>,WTF::DefaultRefDerefTraits<WebCore::GPUInternalError>>> WebCore::createGPUErrorFromWebGPUError<std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>>>(std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &)::{lambda(WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>&&)#1},std::variant<WTF::RefPtr<WebCore::GPUOutOfMemoryError,WTF::RawPtrTraits<WebCore::GPUOutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::GPUOutOfMemoryError>>,WTF::RefPtr<WebCore::GPUValidationError,WTF::RawPtrTraits<WebCore::GPUValidationError>,WTF::DefaultRefDerefTraits<WebCore::GPUValidationError>>,WTF::RefPtr<WebCore::GPUInternalError,WTF::RawPtrTraits<WebCore::GPUInternalError>,WTF::DefaultRefDerefTraits<WebCore::GPUInternalError>>> WebCore::createGPUErrorFromWebGPUError<std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>>>(std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &)::{lambda(WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>&&)#1},std::variant<WTF::RefPtr<WebCore::GPUOutOfMemoryError,WTF::RawPtrTraits<WebCore::GPUOutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::GPUOutOfMemoryError>>,WTF::RefPtr<WebCore::GPUValidationError,WTF::RawPtrTraits<WebCore::GPUValidationError>,WTF::DefaultRefDerefTraits<WebCore::GPUValidationError>>,WTF::RefPtr<WebCore::GPUInternalError,WTF::RawPtrTraits<WebCore::GPUInternalError>,WTF::DefaultRefDerefTraits<WebCore::GPUInternalError>>> WebCore::createGPUErrorFromWebGPUError<std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>>>(std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &)::{lambda(WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>&&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>> &&>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  v5 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 16) = v5;
  *(_QWORD *)a2 = result;
  *(_DWORD *)(a2 + 8) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::variant<WTF::RefPtr<WebCore::GPUOutOfMemoryError,WTF::RawPtrTraits<WebCore::GPUOutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::GPUOutOfMemoryError>>,WTF::RefPtr<WebCore::GPUValidationError,WTF::RawPtrTraits<WebCore::GPUValidationError>,WTF::DefaultRefDerefTraits<WebCore::GPUValidationError>>,WTF::RefPtr<WebCore::GPUInternalError,WTF::RawPtrTraits<WebCore::GPUInternalError>,WTF::DefaultRefDerefTraits<WebCore::GPUInternalError>>> WebCore::createGPUErrorFromWebGPUError<std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>>>(std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &)::{lambda(WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>&&)#1},std::variant<WTF::RefPtr<WebCore::GPUOutOfMemoryError,WTF::RawPtrTraits<WebCore::GPUOutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::GPUOutOfMemoryError>>,WTF::RefPtr<WebCore::GPUValidationError,WTF::RawPtrTraits<WebCore::GPUValidationError>,WTF::DefaultRefDerefTraits<WebCore::GPUValidationError>>,WTF::RefPtr<WebCore::GPUInternalError,WTF::RawPtrTraits<WebCore::GPUInternalError>,WTF::DefaultRefDerefTraits<WebCore::GPUInternalError>>> WebCore::createGPUErrorFromWebGPUError<std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>>>(std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &)::{lambda(WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>&&)#1},std::variant<WTF::RefPtr<WebCore::GPUOutOfMemoryError,WTF::RawPtrTraits<WebCore::GPUOutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::GPUOutOfMemoryError>>,WTF::RefPtr<WebCore::GPUValidationError,WTF::RawPtrTraits<WebCore::GPUValidationError>,WTF::DefaultRefDerefTraits<WebCore::GPUValidationError>>,WTF::RefPtr<WebCore::GPUInternalError,WTF::RawPtrTraits<WebCore::GPUInternalError>,WTF::DefaultRefDerefTraits<WebCore::GPUInternalError>>> WebCore::createGPUErrorFromWebGPUError<std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>>>(std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &)::{lambda(WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>&&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>> &&>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  v5 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 16) = v5;
  *(_QWORD *)a2 = result;
  *(_DWORD *)(a2 + 8) = 1;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::variant<WTF::RefPtr<WebCore::GPUOutOfMemoryError,WTF::RawPtrTraits<WebCore::GPUOutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::GPUOutOfMemoryError>>,WTF::RefPtr<WebCore::GPUValidationError,WTF::RawPtrTraits<WebCore::GPUValidationError>,WTF::DefaultRefDerefTraits<WebCore::GPUValidationError>>,WTF::RefPtr<WebCore::GPUInternalError,WTF::RawPtrTraits<WebCore::GPUInternalError>,WTF::DefaultRefDerefTraits<WebCore::GPUInternalError>>> WebCore::createGPUErrorFromWebGPUError<std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>>>(std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &)::{lambda(WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>&&)#1},std::variant<WTF::RefPtr<WebCore::GPUOutOfMemoryError,WTF::RawPtrTraits<WebCore::GPUOutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::GPUOutOfMemoryError>>,WTF::RefPtr<WebCore::GPUValidationError,WTF::RawPtrTraits<WebCore::GPUValidationError>,WTF::DefaultRefDerefTraits<WebCore::GPUValidationError>>,WTF::RefPtr<WebCore::GPUInternalError,WTF::RawPtrTraits<WebCore::GPUInternalError>,WTF::DefaultRefDerefTraits<WebCore::GPUInternalError>>> WebCore::createGPUErrorFromWebGPUError<std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>>>(std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &)::{lambda(WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>&&)#1},std::variant<WTF::RefPtr<WebCore::GPUOutOfMemoryError,WTF::RawPtrTraits<WebCore::GPUOutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::GPUOutOfMemoryError>>,WTF::RefPtr<WebCore::GPUValidationError,WTF::RawPtrTraits<WebCore::GPUValidationError>,WTF::DefaultRefDerefTraits<WebCore::GPUValidationError>>,WTF::RefPtr<WebCore::GPUInternalError,WTF::RawPtrTraits<WebCore::GPUInternalError>,WTF::DefaultRefDerefTraits<WebCore::GPUInternalError>>> WebCore::createGPUErrorFromWebGPUError<std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>>>(std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &)::{lambda(WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>&&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>> &&>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  v5 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 16) = v5;
  *(_QWORD *)a2 = result;
  *(_DWORD *)(a2 + 8) = 2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::GPUDevice::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_0,void,BOOL,std::optional<WebCore::GPUDevice::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_0::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>,WTF::Ref<WebCore::GPUDevice::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_0::variant::ValidationError,WTF::RawPtrTraits<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>>,WTF::Ref<WebCore::GPUDevice::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_0::variant::InternalError,WTF::RawPtrTraits<WTF::Ref<WebCore::GPUDevice::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_0::variant::ValidationError,WTF::RawPtrTraits<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>>>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::GPUDevice::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_0::variant::ValidationError,WTF::RawPtrTraits<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>>>>>> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = &off_1E334E048;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v8)
      {
        v11 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v8));
        v3 = v11;
      }
      v9 = *(WTF **)(v3 + 16);
      if (v9)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v10 = v3;
        WTF::fastFree(v9, a2);
        v3 = v10;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GPUDevice::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_0,void,BOOL,std::optional<WebCore::GPUDevice::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_0::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>,WTF::Ref<WebCore::GPUDevice::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_0::variant::ValidationError,WTF::RawPtrTraits<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>>,WTF::Ref<WebCore::GPUDevice::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_0::variant::InternalError,WTF::RawPtrTraits<WTF::Ref<WebCore::GPUDevice::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_0::variant::ValidationError,WTF::RawPtrTraits<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>>>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::GPUDevice::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_0::variant::ValidationError,WTF::RawPtrTraits<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>>>>>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E334E048;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v8)
      {
        v11 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v8));
        v3 = v11;
      }
      v9 = *(WTF **)(v3 + 16);
      if (v9)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v10 = v3;
        WTF::fastFree(v9, a2);
        v3 = v10;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WebCore *WTF::Detail::CallableWrapper<WebCore::GPUDevice::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_0,void,BOOL,std::optional<WebCore::GPUDevice::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_0::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>,WTF::Ref<WebCore::GPUDevice::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_0::variant::ValidationError,WTF::RawPtrTraits<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>>,WTF::Ref<WebCore::GPUDevice::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_0::variant::InternalError,WTF::RawPtrTraits<WTF::Ref<WebCore::GPUDevice::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_0::variant::ValidationError,WTF::RawPtrTraits<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>>>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::GPUDevice::addEventListener(WTF::AtomString const&,WTF::Ref<WebCore::EventListener,WTF::RawPtrTraits<WebCore::EventListener>,WTF::DefaultRefDerefTraits<WebCore::EventListener>> &&,WebCore::AddEventListenerOptions const&)::$_0::variant::ValidationError,WTF::RawPtrTraits<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>,WTF::DefaultRefDerefTraits<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>>>>>>>> &&>::call(WebCore *result, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  WebCore *v19;
  char v20;

  v3 = *((_QWORD *)result + 2);
  if (!v3)
    return result;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4 || a2 == 0)
    return result;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(result);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  if (!*(_BYTE *)(a3 + 16))
  {
    __break(1u);
    goto LABEL_25;
  }
  v10 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v10 == -1)
  {
LABEL_25:
    v16 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WebCore *)WebCore::CachedResourceMediaLoader::responseReceived(v16);
  }
  v19 = (WebCore *)&v20;
  ((void (*)(uint64_t *__return_ptr, WebCore **, uint64_t))off_1E334E008[v10])(&v17, &v19, a3);
  v11 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
  *(_QWORD *)(v11 + 8) = 0;
  *(_DWORD *)(v11 + 16) = 1;
  v13 = *(_DWORD *)(v11 + 20) & 0xFFC00000 | 0x220200 | (*(_QWORD *)(v9 + 2152) != 0);
  *(_DWORD *)(v11 + 20) = v13;
  v14 = *(_DWORD **)(v9 + 2152);
  if (v14)
  {
    *v14 += 2;
    v13 = *(_DWORD *)(v11 + 20);
  }
  *(_QWORD *)(v11 + 24) = v14;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 56) = v12;
  *(_DWORD *)(v11 + 20) = v13 | 0x4000;
  *(_QWORD *)v11 = off_1E334F3C0;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  *(_WORD *)(v11 + 80) = 0;
  *(_BYTE *)(v11 + 82) = 0;
  *(_BYTE *)(v11 + 88) = 0;
  *(_DWORD *)(v11 + 96) = -1;
  v15 = v18;
  if (v18 != -1)
  {
    ((void (*)(WebCore **, uint64_t, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore19GPUOutOfMemoryErrorENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_18GPUValidationErrorENSA_ISF_EENSC_ISF_EEEENS7_INS8_16GPUInternalErrorENSA_ISJ_EENSC_ISJ_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JST_SS_EEEDcmSV_DpOT0____fdiagonal[v18])(&v19, v11 + 88, &v17);
    *(_DWORD *)(v11 + 96) = v15;
  }
  v19 = (WebCore *)v11;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)(v4 - 32), v4, 22, (uint64_t *)&v19);
  result = v19;
  if (v19)
  {
    if (*((_DWORD *)v19 + 4) == 1)
      result = (WebCore *)(*(uint64_t (**)(void))(*(_QWORD *)v19 + 8))();
    else
      --*((_DWORD *)v19 + 4);
  }
  if (v18 != -1)
    return (WebCore *)((uint64_t (*)(char *, uint64_t *))off_1E334DFD8[v18])(&v20, &v17);
  return result;
}

uint64_t WebCore::CachedResourceMediaLoader::responseReceived(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  id *v6;
  int v7;
  const WebCore::ParsedContentRange *v8;
  const WebCore::ParsedContentRange *v9;
  uint64_t result;

  v5 = *a4;
  *a4 = 0;
  v6 = *(id **)(a1 + 16);
  WebCore::ResourceResponse::platformLazyInit(a3, 1);
  WebCore::ResourceResponse::platformLazyInit(a3, 1);
  v7 = *(__int16 *)(a3 + 136);
  WebCore::ResourceResponseBase::contentRange((WebCore::ResourceResponseBase *)a3);
  v9 = v8;
  WebCore::ResourceResponse::platformLazyInit(a3, 1);
  result = WebCore::WebCoreAVFResourceLoader::responseReceived(v6, (const WTF::StringImpl **)(a3 + 40), v7, v9, *(_QWORD *)(a3 + 48));
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void sub_195261298(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::WebCoreAVFResourceLoader::responseReceived(id *this, const WTF::StringImpl **a2, int a3, const WebCore::ParsedContentRange *a4, uint64_t a5)
{
  uint64_t result;
  const WTF::StringImpl *v10;
  void *v11;
  _QWORD *v13;
  int v14;
  const __CFString *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  void *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  if (a3 && (a3 - 300) <= 0xFFFFFF9B)
  {
    objc_msgSend(this[4], "finishLoadingWithError:", 0);
    return 1;
  }
  if (*((_QWORD *)a4 + 2) != 0x8000000000000000)
    this[8] = *(id *)a4;
  result = objc_msgSend(this[4], "contentInformationRequest");
  if (result)
  {
    v11 = (void *)result;
    if (__ldaxr(WebCore::cacheUTIFromMIMETypeLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::cacheUTIFromMIMETypeLock))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](WebCore::cacheUTIFromMIMETypeLock);
LABEL_12:
    {
      qword_1EE2F5420 = 0;
      xmmword_1EE2F5400 = 0u;
      unk_1EE2F5410 = 0u;
      xmmword_1EE2F53E0 = 0u;
      unk_1EE2F53F0 = 0u;
      xmmword_1EE2F53C0 = 0u;
      unk_1EE2F53D0 = 0u;
      xmmword_1EE2F53A0 = 0u;
      unk_1EE2F53B0 = 0u;
      xmmword_1EE2F5380 = 0u;
      unk_1EE2F5390 = 0u;
      xmmword_1EE2F5360 = 0u;
      unk_1EE2F5370 = 0u;
      xmmword_1EE2F5340 = 0u;
      unk_1EE2F5350 = 0u;
      WebCore::cacheUTIFromMIMEType(void)::cache = 0u;
      *(_OWORD *)algn_1EE2F5330 = 0u;
    }
    v13 = (_QWORD *)WTF::TinyLRUCache<WTF::String,WTF::RetainPtr<NSString>,16ul,WebCore::UTIFromMIMETypeCachePolicy>::get((uint64_t)&WebCore::cacheUTIFromMIMEType(void)::cache, a2, v10);
    MEMORY[0x19AEA5508](&v22, *v13);
    v14 = __ldxr(WebCore::cacheUTIFromMIMETypeLock);
    if (v14 == 1)
    {
      if (!__stlxr(0, WebCore::cacheUTIFromMIMETypeLock))
        goto LABEL_19;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::cacheUTIFromMIMETypeLock);
LABEL_19:
    if (v22)
      v15 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v15 = &stru_1E3487BC0;
    objc_msgSend(v11, "setContentType:", v15);
    if (*((_QWORD *)a4 + 2) == 0x8000000000000000)
      v16 = a5;
    else
      v16 = *((_QWORD *)a4 + 2);
    objc_msgSend(v11, "setContentLength:", v16);
    objc_msgSend(v11, "setByteRangeAccessSupported:", 1);
    if (!this[5] && (objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v11, "setEntireLengthAvailableOnDemand:", 1);
    if (!objc_msgSend(this[4], "dataRequest"))
    {
      objc_msgSend(this[4], "finishLoading");
      WebCore::WebCoreAVFResourceLoader::stopLoading((WebCore::WebCoreAVFResourceLoader *)this, v19);
      v21 = v22;
      v22 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v20);
        else
          *(_DWORD *)v21 -= 2;
      }
      return 1;
    }
    v18 = v22;
    v22 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    return 0;
  }
  return result;
}

uint64_t WebCore::CachedResourceMediaLoader::notifyFinished(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  id *v6;
  uint64_t v7;
  WebCore::ResourceError *v8;
  void *v9;
  char v11;
  char v12;

  v4 = *(_QWORD *)(a2 + 400);
  if (v4)
  {
    v5 = (uint64_t *)(v4 + 320);
  }
  else
  {
    std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v11);
    v5 = &WebCore::CachedResource::resourceError(void)const::emptyError;
  }
  v6 = *(id **)(a1 + 16);
  if (*((_BYTE *)v5 + 60))
  {
    v7 = *(_QWORD *)(a2 + 400);
    if (v7)
    {
      v8 = (WebCore::ResourceError *)(v7 + 320);
    }
    else
    {
      std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v12);
      v8 = (WebCore::ResourceError *)&WebCore::CachedResource::resourceError(void)const::emptyError;
    }
    if (objc_msgSend(v6[4], "contentInformationRequest")
      && !objc_msgSend((id)objc_msgSend(v6[4], "contentInformationRequest"), "contentType"))
    {
      objc_msgSend((id)objc_msgSend(v6[4], "contentInformationRequest"), "setContentType:", &stru_1E3487BC0);
    }
    objc_msgSend(v6[4], "finishLoadingWithError:", WebCore::ResourceError::nsError(v8));
  }
  else
  {
    objc_msgSend(v6[4], "finishLoading");
  }
  return WebCore::WebCoreAVFResourceLoader::stopLoading((WebCore::WebCoreAVFResourceLoader *)v6, v9);
}

uint64_t WebCore::CachedResourceMediaLoader::dataReceived(uint64_t this, WebCore::CachedResource *a2, const WebCore::SharedBuffer *a3)
{
  const WebCore::FragmentedSharedBuffer *v3;

  v3 = (const WebCore::FragmentedSharedBuffer *)*((_QWORD *)a2 + 49);
  if (v3)
    return WebCore::WebCoreAVFResourceLoader::newDataStoredInSharedBuffer(*(id **)(this + 16), v3);
  return this;
}

uint64_t WebCore::WebCoreAVFResourceLoader::newDataStoredInSharedBuffer(id *this, const WebCore::FragmentedSharedBuffer *a2)
{
  uint64_t v4;
  void *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  CFTypeRef v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  CFTypeRef cf;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(this[4], "dataRequest");
  if (!v4)
    return 1;
  v5 = (void *)v4;
  v7 = this[10];
  v6 = this[11];
  v8 = this[8];
  v9 = this[9];
  WebCore::FragmentedSharedBuffer::createNSDataArray(a2, &cf);
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v10 = (void *)cf;
  v11 = objc_msgSend((id)cf, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
  v12 = (unint64_t)v9 + v7 - v6;
  if (v11)
  {
    v13 = v6 - v8;
    v14 = *(_QWORD *)v26;
LABEL_4:
    v15 = 0;
    while (1)
    {
      if (*(_QWORD *)v26 != v14)
        objc_enumerationMutation(v10);
      v16 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * v15);
      if (!v13)
        break;
      if (v13 <= objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * v15), "length"))
      {
        v18 = objc_msgSend(v16, "length");
        v19 = v18 - v13;
        objc_msgSend(v5, "respondWithData:", objc_msgSend(v16, "subdataWithRange:", v13, v18 - v13));
        v13 = 0;
        v12 -= v19;
        v17 = (uint64_t)this[11] + v19;
LABEL_13:
        this[11] = (id)v17;
        goto LABEL_14;
      }
      v13 -= objc_msgSend(v16, "length");
LABEL_14:
      if (v11 == ++v15)
      {
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
        if (v11)
          goto LABEL_4;
        goto LABEL_16;
      }
    }
    if (objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * v15), "length") > v12)
    {
      objc_msgSend(v5, "respondWithData:", objc_msgSend(v16, "subdataWithRange:", 0, v12));
      v20 = (char *)this[11] + v12;
      this[11] = v20;
      goto LABEL_20;
    }
    objc_msgSend(v5, "respondWithData:", v16);
    v13 = 0;
    v12 -= objc_msgSend(v16, "length");
    v17 = (uint64_t)this[11] + objc_msgSend(v16, "length");
    goto LABEL_13;
  }
LABEL_16:
  if (v12)
    goto LABEL_21;
  v20 = (char *)this[11];
LABEL_20:
  if ((uint64_t)v20 < (uint64_t)((char *)this[10] + (unint64_t)this[9]))
  {
LABEL_21:
    v21 = 0;
  }
  else
  {
    objc_msgSend(this[4], "finishLoading");
    WebCore::WebCoreAVFResourceLoader::stopLoading((WebCore::WebCoreAVFResourceLoader *)this, v22);
    v21 = 1;
  }
  v23 = cf;
  cf = 0;
  if (v23)
    CFRelease(v23);
  return v21;
}

void sub_1952618E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlatformResourceMediaLoader::responseReceived(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  id *v6;
  int v7;
  const WebCore::ParsedContentRange *v8;
  const WebCore::ParsedContentRange *v9;
  uint64_t v10;

  v6 = *(id **)(a1 + 16);
  WebCore::ResourceResponse::platformLazyInit(a3, 1);
  WebCore::ResourceResponse::platformLazyInit(a3, 1);
  v7 = *(__int16 *)(a3 + 136);
  WebCore::ResourceResponseBase::contentRange((WebCore::ResourceResponseBase *)a3);
  v9 = v8;
  WebCore::ResourceResponse::platformLazyInit(a3, 1);
  WebCore::WebCoreAVFResourceLoader::responseReceived(v6, (const WTF::StringImpl **)(a3 + 40), v7, v9, *(_QWORD *)(a3 + 48));
  v10 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

void sub_1952619EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformResourceMediaLoader::dataReceived(WebCore::PlatformResourceMediaLoader *this, WebCore::PlatformMediaResource *a2, const WebCore::SharedBuffer *a3)
{
  id *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t result;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  _BYTE v21[2];

  WebCore::SharedBufferBuilder::ensureBuffer((uint64_t *)this + 5);
  WebCore::FragmentedSharedBuffer::append(*((WebCore::FragmentedSharedBuffer **)this + 5), a3);
  v5 = (id *)*((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 5);
  if (v6)
  {
    do
      v7 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v7 + 1, (unsigned int *)v6));
  }
  result = WebCore::WebCoreAVFResourceLoader::newDataStoredInSharedBuffer(v5, (const WebCore::FragmentedSharedBuffer *)v6);
  do
  {
    v10 = __ldaxr((unsigned int *)v6);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, (unsigned int *)v6));
  if (!v11)
  {
    atomic_store(1u, (unsigned int *)v6);
    v12 = *(unsigned int *)(v6 + 20);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)(v6 + 8);
      v14 = v13 + 16 * v12;
      do
      {
        v15 = *(unsigned int **)(v13 + 8);
        *(_QWORD *)(v13 + 8) = 0;
        if (v15)
        {
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            atomic_store(1u, v15);
            v18 = v15[6];
            if ((_DWORD)v18 != -1)
              ((void (*)(_BYTE *, unsigned int *))off_1E334EC20[v18])(v21, v15 + 2);
            v15[6] = -1;
            WTF::fastFree((WTF *)v15, v9);
          }
        }
        v13 += 16;
      }
      while (v13 != v14);
    }
    v19 = *(WTF **)(v6 + 8);
    if ((WTF *)(v6 + 24) != v19 && v19 != 0)
    {
      *(_QWORD *)(v6 + 8) = 0;
      *(_DWORD *)(v6 + 16) = 0;
      WTF::fastFree(v19, v9);
    }
    return WTF::fastFree((WTF *)v6, v9);
  }
  return result;
}

void sub_195261B48(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  WTF *v24;

  if (v13)
  {
    do
    {
      v15 = __ldaxr((unsigned int *)v13);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)v13));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int *)(v13 + 20);
      if ((_DWORD)v17)
      {
        v18 = *(_QWORD *)(v13 + 8);
        v19 = v18 + 16 * v17;
        do
        {
          v20 = *(unsigned int **)(v18 + 8);
          *(_QWORD *)(v18 + 8) = 0;
          if (v20)
          {
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
            {
              atomic_store(1u, v20);
              v23 = v20[6];
              if ((_DWORD)v23 != -1)
                ((void (*)(char *, unsigned int *))off_1E334EC20[v23])(&a13, v20 + 2);
              v20[6] = -1;
              WTF::fastFree((WTF *)v20, a2);
            }
          }
          v18 += 16;
        }
        while (v18 != v19);
      }
      v24 = *(WTF **)(v13 + 8);
      if ((WTF *)(v13 + 24) != v24 && v24 != 0)
      {
        *(_QWORD *)(v13 + 8) = 0;
        *(_DWORD *)(v13 + 16) = 0;
        WTF::fastFree(v24, a2);
      }
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WebCore::WebCoreAVFResourceLoader *WebCore::WebCoreAVFResourceLoader::WebCoreAVFResourceLoader(WebCore::WebCoreAVFResourceLoader *this, WebCore::MediaPlayerPrivateAVFoundationObjC *a2, CFTypeRef cf, RefCountedSerialFunctionDispatcher *a4)
{
  uint64_t v8;
  uint64_t v10;
  int v11;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E334E240;
  if (!a2 || (v8 = *((_QWORD *)a2 + 6)) == 0)
  {
    v10 = 0;
    goto LABEL_15;
  }
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_8:
  if (*(_QWORD *)(v8 + 24))
  {
    ++*(_QWORD *)(v8 + 16);
    v10 = v8;
  }
  else
  {
    v10 = 0;
  }
  v11 = __ldxr((unsigned __int8 *)v8);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_15:
  *((_QWORD *)this + 2) = v10;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = cf;
  if (cf)
    CFRetain(cf);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 11) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  (*((void (**)(RefCountedSerialFunctionDispatcher *))a4->var0 + 4))(a4);
  *((_QWORD *)this + 12) = a4;
  return this;
}

void sub_195261D28(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (!v4)
    goto LABEL_15;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_7:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (!v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = __ldxr((unsigned __int8 *)v4);
    if (v8 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_13:
        if (!v7)
          WTF::fastFree((WTF *)v4, a2);
        goto LABEL_15;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_13;
  }
  v9 = __ldxr((unsigned __int8 *)v4);
  if (v9 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_15;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_15:
  _Unwind_Resume(exception_object);
}

void WebCore::WebCoreAVFResourceLoader::~WebCoreAVFResourceLoader(WebCore::WebCoreAVFResourceLoader *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::CachedResourceMediaLoader *v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;

  *(_QWORD *)this = off_1E334E240;
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (WebCore::CachedResourceMediaLoader *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
  {
    WebCore::CachedResourceMediaLoader::~CachedResourceMediaLoader(v8, a2);
    WTF::fastFree(v9, v10);
  }
  v11 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v11)
    WTF::fastFree(v11, a2);
  v12 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v12)
    CFRelease(v12);
  v13 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
  {
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_19;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_19:
    v15 = *(_QWORD *)(v13 + 16) - 1;
    *(_QWORD *)(v13 + 16) = v15;
    if (!v15)
    {
      v16 = *(_QWORD *)(v13 + 8);
      v17 = __ldxr((unsigned __int8 *)v13);
      if (v17 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v13))
        {
          if (v16)
            return;
LABEL_26:
          WTF::fastFree((WTF *)v13, a2);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v13);
      if (v16)
        return;
      goto LABEL_26;
    }
    v18 = __ldxr((unsigned __int8 *)v13);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::WebCoreAVFResourceLoader::~WebCoreAVFResourceLoader(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::WebCoreAVFResourceLoader::startLoading(WebCore::WebCoreAVFResourceLoader *this)
{
  int v1;
  uint64_t v3;
  uint64_t v4;
  int v6;
  char v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  BOOL v23;
  void *v24;
  uint64_t v25;
  _BYTE *v26;
  size_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  BOOL v35;
  int v36;
  char v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _WORD *v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  size_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  _BYTE *v52;
  _WORD *v53;
  int8x16_t *v54;
  size_t v55;
  unint64_t v56;
  uint64_t v57;
  _WORD *v58;
  unsigned int v59;
  unint64_t v60;
  _WORD *v61;
  uint64_t v62;
  _WORD *v63;
  _WORD *v64;
  __int128 v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  char *v69;
  char *v70;
  char *v71;
  __int16 v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  void *v76;
  unsigned int *v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  __int128 v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  void *v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  WTF::StringImpl *v96;
  CFTypeRef v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  int v102;
  _QWORD *v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  _QWORD *v113;
  uint64_t v114;
  WTF *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF *v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  WebCore::CachedResourceClient *v124;
  WebCore::CachedResourceClient *v125;
  unsigned int **v126;
  unsigned int *v127;
  unsigned int v128;
  WebCore::CachedResource *v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  void *v133;
  WebCore::CachedResourceMediaLoader *v134;
  WTF *v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned __int8 *v146;
  unsigned int *v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  BOOL v159;
  int v160;
  unsigned int *v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int v164;
  WTF::StringImpl *v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int v168;
  _QWORD *v169;
  uint64_t v170;
  unsigned int *v171;
  unsigned int v172;
  unsigned int v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  _WORD *v177;
  _WORD *v178;
  unsigned __int128 v179;
  __int8 v180;
  WTF::StringImpl *v181;
  unsigned int *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  _BYTE v185[32];
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  _BYTE v191[96];
  unsigned __int16 *v192;
  unsigned int v193;
  char v194;
  char v195;
  unsigned int *v196;
  unsigned int **v197;
  uint64_t v198[10];
  unsigned int v199;
  _QWORD v200[17];
  __int16 v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  uint64_t v207;
  char v208[32];
  CFTypeRef cf;
  __int16 v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  __int16 v214;
  WTF::StringImpl *v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  int v220;
  char v221;
  char v222;
  char v223;
  __int16 v224;
  int v225;
  __int128 v226;
  WTF::StringImpl *v227[10];
  unsigned int v228;
  uint64_t v229;
  int8x16x2_t v230;
  int8x16x2_t v231;
  int8x16x2_t v232;

  v229 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 2);
  if (!v3)
  {
    v4 = 0;
    goto LABEL_15;
  }
  v4 = *((_QWORD *)this + 3);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEA534C](v3);
    goto LABEL_7;
  }
  if (__stxr(1u, (unsigned __int8 *)v3))
    goto LABEL_6;
LABEL_7:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v3);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
      goto LABEL_15;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_15:
  if (*((_QWORD *)this + 5) || *((_QWORD *)this + 6) || *((_QWORD *)this + 7))
    goto LABEL_292;
  if (v4)
  {
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v191, (NSURLRequest *)objc_msgSend(*((id *)this + 4), "request"));
    v7 = v195;
    if ((v195 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v191);
      v7 = v195 | 1;
      v195 |= 1u;
    }
    if (v194 != 1)
    {
      v194 = 1;
      v195 = v7 & 0xFD;
    }
    v8 = (void *)objc_msgSend(*((id *)this + 4), "dataRequest");
    v9 = v8;
    if (!v8)
    {
      *((_QWORD *)this + 10) = -1;
      *((_QWORD *)this + 11) = -1;
      *((_QWORD *)this + 9) = -1;
      goto LABEL_139;
    }
    v10 = objc_msgSend(v8, "requestedOffset");
    *((_QWORD *)this + 10) = v10;
    *((_QWORD *)this + 11) = v10;
    v11 = objc_msgSend(v9, "requestedLength");
    *((_QWORD *)this + 9) = v11;
    if (v11 < 1)
      goto LABEL_139;
    v12 = v193;
    if (v193)
    {
      v13 = v192;
      do
      {
        v14 = *v13;
        v13 += 8;
        if (v14 == 59)
          goto LABEL_139;
        --v12;
      }
      while (v12);
    }
    if (objc_msgSend(v9, "requestsAllDataToEndOfResource"))
    {
      v15 = *MEMORY[0x1E0CBF738];
      if (!*MEMORY[0x1E0CBF738])
      {
        v30 = *((_QWORD *)this + 10);
        v1 = 1;
        if ((v30 & 0x8000000000000000) == 0)
        {
LABEL_55:
          v31 = 0;
          v32 = v30;
          do
          {
            ++v31;
            v21 = v32 > 9;
            v32 /= 0xAuLL;
          }
          while (v21);
          goto LABEL_61;
        }
LABEL_59:
        v33 = -(uint64_t)v30;
        v31 = 1;
        do
        {
          ++v31;
          v23 = v33 >= 0xA;
          v33 /= 0xAuLL;
        }
        while (v23);
LABEL_61:
        if ((v1 & 1) != 0)
        {
          v34 = 0;
        }
        else
        {
          v34 = *(_DWORD *)(v15 + 4);
          if (v34 < 0)
            goto LABEL_329;
        }
        v35 = __OFADD__(v34, 1);
        v36 = v34 + 1;
        v37 = v35;
        if (v31 < 0
          || (v37 & 1) != 0
          || (v35 = __OFADD__(v31, v36), v38 = v31 + v36, v35)
          || (v39 = (v38 + 6), __OFADD__(v38, 6)))
        {
LABEL_329:
          v181 = 0;
          __break(0xC471u);
          JUMPOUT(0x195263384);
        }
        if (!v1 && (*(_BYTE *)(v15 + 16) & 4) == 0)
        {
          if (v38 != -6)
          {
            if (v39 <= 0x7FFFFFEF)
            {
              WTF::tryFastCompactMalloc((WTF *)(2 * v39 + 20));
              v40 = v200[0];
              if (v200[0])
              {
                *(_QWORD *)(v200[0] + 20) = 0x65007400790062;
                *(_DWORD *)v40 = 2;
                *(_DWORD *)(v40 + 4) = v39;
                *(_QWORD *)(v40 + 8) = v40 + 20;
                *(_DWORD *)(v40 + 16) = 0;
                *(_DWORD *)(v40 + 28) = 3997811;
                if ((v30 & 0x8000000000000000) != 0)
                {
                  v56 = -(uint64_t)v30;
                  v57 = 24;
                  do
                  {
                    *((_BYTE *)v200 + v57--) = (v56 % 0xA) | 0x30;
                    v21 = v56 > 9;
                    v56 /= 0xAuLL;
                  }
                  while (v21);
                  *((_BYTE *)v200 + v57) = 45;
                  if (v57 + 2 <= 26)
                  {
                    v58 = (_WORD *)(v40 + 32);
                    do
                    {
                      *v58++ = *((unsigned __int8 *)v200 + v57);
                      v21 = v57++ < 24;
                    }
                    while (v21);
                  }
                }
                else
                {
                  v41 = 0;
                  v42 = v30;
                  do
                  {
                    *((_BYTE *)&v200[3] + v41--) = (v42 % 0xA) | 0x30;
                    v21 = v42 > 9;
                    v42 /= 0xAuLL;
                  }
                  while (v21);
                  if (v41 + 26 <= 25)
                  {
                    v43 = (_WORD *)(v40 + 32);
                    do
                    {
                      *v43++ = *((unsigned __int8 *)&v200[3] + v41 + 1);
                      v23 = __CFADD__(v41++, 1);
                    }
                    while (!v23);
                  }
                }
                if ((v30 & 0x8000000000000000) != 0)
                {
                  v60 = -(uint64_t)v30;
                  v59 = 1;
                  do
                  {
                    ++v59;
                    v23 = v60 >= 0xA;
                    v60 /= 0xAuLL;
                  }
                  while (v23);
                }
                else
                {
                  v59 = 0;
                  do
                  {
                    ++v59;
                    v21 = v30 > 9;
                    v30 /= 0xAuLL;
                  }
                  while (v21);
                }
                v61 = (_WORD *)(v40 + 32 + 2 * v59);
                *v61 = 45;
                v53 = v61 + 1;
                if (v15)
                {
                  v54 = *(int8x16_t **)(v15 + 8);
                  v62 = *(unsigned int *)(v15 + 4);
                  if ((*(_BYTE *)(v15 + 16) & 4) != 0)
                  {
                    v63 = &v53[v62];
                    if (v62 >= 0x40)
                    {
                      v64 = &v53[v62 & 0xFFFFFFC0];
                      v65 = 0uLL;
                      do
                      {
                        v230.val[0] = *v54;
                        v66 = v54[1];
                        v231.val[0] = v54[2];
                        v67 = v54[3];
                        v54 += 4;
                        v68 = v67;
                        v231.val[1] = 0uLL;
                        v232.val[0] = v66;
                        v230.val[1] = 0uLL;
                        v69 = (char *)v53;
                        vst2q_s8(v69, v230);
                        v69 += 32;
                        v232.val[1] = 0uLL;
                        vst2q_s8(v69, v232);
                        v70 = (char *)(v53 + 32);
                        vst2q_s8(v70, v231);
                        v71 = (char *)(v53 + 48);
                        vst2q_s8(v71, *(int8x16x2_t *)(&v65 - 1));
                        v53 += 64;
                      }
                      while (v53 != v64);
                      v53 = v64;
                    }
                    while (v53 != v63)
                    {
                      v72 = v54->u8[0];
                      v54 = (int8x16_t *)((char *)v54 + 1);
                      *v53++ = v72;
                    }
                  }
                  else
                  {
                    if ((_DWORD)v62 == 1)
                    {
                      *v53 = v54->i16[0];
                      goto LABEL_130;
                    }
                    if ((_DWORD)v62)
                    {
                      v55 = 2 * v62;
LABEL_108:
                      memcpy(v53, v54, v55);
                      goto LABEL_130;
                    }
                  }
                }
                goto LABEL_130;
              }
            }
            goto LABEL_329;
          }
LABEL_320:
          v40 = MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
          goto LABEL_130;
        }
        if (v38 == -6)
          goto LABEL_320;
        if ((v39 & 0x80000000) != 0)
          goto LABEL_329;
        WTF::tryFastCompactMalloc((WTF *)(v39 + 20));
        v40 = v200[0];
        if (!v200[0])
          goto LABEL_329;
        *(_DWORD *)v200[0] = 2;
        *(_DWORD *)(v40 + 4) = v39;
        *(_QWORD *)(v40 + 8) = v40 + 20;
        *(_QWORD *)(v40 + 16) = 0x6574796200000004;
        *(_WORD *)(v40 + 24) = 15731;
        v44 = 0;
        if ((v30 & 0x8000000000000000) != 0)
        {
          v48 = -(uint64_t)v30;
          do
          {
            *((_BYTE *)&v200[3] + v44--) = (v48 % 0xA) | 0x30;
            v21 = v48 > 9;
            v48 /= 0xAuLL;
          }
          while (v21);
          v49 = v44 + 24;
          v46 = (char *)&v200[3] + v44;
          *v46 = 45;
          if (v44 + 26 > 26)
            goto LABEL_98;
          if (v49 <= 24)
            v49 = 24;
          v47 = v49 - v44 - 23;
        }
        else
        {
          v45 = v30;
          do
          {
            *((_BYTE *)&v200[3] + v44--) = (v45 % 0xA) | 0x30;
            v21 = v45 > 9;
            v45 /= 0xAuLL;
          }
          while (v21);
          if (v44 + 26 > 25)
            goto LABEL_98;
          v46 = (char *)&v200[3] + v44 + 1;
          v47 = -v44;
        }
        memcpy((void *)(v40 + 26), v46, v47);
LABEL_98:
        if ((v30 & 0x8000000000000000) != 0)
        {
          v51 = -(uint64_t)v30;
          v50 = 1;
          do
          {
            ++v50;
            v23 = v51 >= 0xA;
            v51 /= 0xAuLL;
          }
          while (v23);
        }
        else
        {
          v50 = 0;
          do
          {
            ++v50;
            v21 = v30 > 9;
            v30 /= 0xAuLL;
          }
          while (v21);
        }
        v52 = (_BYTE *)(v40 + 26 + v50);
        *v52 = 45;
        v53 = v52 + 1;
        if (v15)
        {
          v54 = *(int8x16_t **)(v15 + 8);
          v55 = *(unsigned int *)(v15 + 4);
          if ((*(_BYTE *)(v15 + 16) & 4) != 0)
          {
            if (!(_DWORD)v55)
              goto LABEL_130;
            if ((_DWORD)v55 != 1)
              goto LABEL_108;
            *(_BYTE *)v53 = v54->i8[0];
          }
          else
          {
            v177 = (_WORD *)((char *)v53 + v55);
            if (v55 >= 0x10)
            {
              v178 = (_WORD *)((char *)v53 + (v55 & 0xFFFFFFF0));
              do
              {
                v179 = (unsigned __int128)vld2q_s8(v54->i8);
                v54 += 2;
                *(_OWORD *)v53 = v179;
                v53 += 8;
              }
              while (v53 != v178);
              v53 = v178;
            }
            while (v53 != v177)
            {
              v180 = v54->i8[0];
              v54 = (int8x16_t *)((char *)v54 + 2);
              *(_BYTE *)v53 = v180;
              v53 = (_WORD *)((char *)v53 + 1);
            }
          }
        }
LABEL_130:
        v181 = (WTF::StringImpl *)v40;
        if ((v195 & 1) == 0)
          goto LABEL_315;
        while (1)
        {
          WebCore::HTTPHeaderMap::add((WTF::StringImpl *)&v192, 59, (uint64_t *)&v181);
          v195 &= ~2u;
          v74 = v181;
          v181 = 0;
          if (!v74)
            goto LABEL_134;
          if (*(_DWORD *)v74 != 2)
            break;
          WTF::StringImpl::destroy(v74, v73);
          if ((v1 & 1) != 0)
          {
LABEL_300:
            if (!v15)
              goto LABEL_139;
            goto LABEL_137;
          }
LABEL_135:
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v15, v73);
          else
            *(_DWORD *)v15 -= 2;
LABEL_137:
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v15, v73);
          else
            *(_DWORD *)v15 -= 2;
LABEL_139:
          if ((v195 & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v191);
            v195 |= 1u;
          }
          if (!WTF::URL::protocolIs())
          {
            v99 = *(_QWORD *)(v4 + 88);
            v100 = *(_QWORD *)(v4 + 96);
            if (__ldaxr((unsigned __int8 *)v99))
            {
              __clrex();
              goto LABEL_168;
            }
            if (__stxr(1u, (unsigned __int8 *)v99))
LABEL_168:
              MEMORY[0x19AEA534C](v99);
            if (*(_QWORD *)(v99 + 24))
              ++*(_QWORD *)(v99 + 8);
            else
              v100 = 0;
            v102 = __ldxr((unsigned __int8 *)v99);
            if (v102 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v99))
                goto LABEL_177;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v99);
LABEL_177:
            v103 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v100 + 8) + 8) + 304))(*(_QWORD *)(*(_QWORD *)(v100 + 8) + 8));
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v100);
            if (!v103)
              goto LABEL_225;
            WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)&v181, (const WebCore::ResourceRequest *)v191);
            BYTE6(v215) = 0;
            *(_DWORD *)((char *)&v215 + 2) = 0;
            v216 = 0u;
            v217 = 0u;
            v218 = 0u;
            v219 = 0u;
            v220 = 0;
            v221 = 1;
            v222 = 0;
            v223 = 0;
            v224 = 20;
            v225 = 201330114;
            v226 = 0u;
            LOWORD(v215) = 530;
            WebCore::ResourceRequestBase::RequestData::RequestData((uint64_t)v200, (uint64_t *)&v181);
            v104 = v186;
            v186 = 0u;
            v202 = v104;
            v203 = v187;
            v204 = v188;
            v205 = v189;
            v105 = v190;
            v187 = 0;
            v190 = 0;
            v206 = v105;
            v207 = 0;
            WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)v208, (const WebCore::ResourceLoaderOptions *)&v215);
            v210 = 0;
            v211 = 0;
            v212 = 0u;
            WebCore::CachedResourceRequest::splitFragmentIdentifierFromRequestURL((WebCore::ResourceRequest *)v200, &v213);
            v214 = 0;
            if (v208[0] == 9)
              v106 = 7;
            else
              v106 = 6;
            WebCore::CachedResourceLoader::requestResource(v227, (WebCore::ResourceRequest *)v200, v103, (WTF::StringImpl *)v106, 0, 0);
            WebCore::castCachedResourceTo<WebCore::CachedRawResource,WebCore::CachedResource>((uint64_t)v198, v227);
            if (v228 != -1)
              (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS6_14CachedResourceEEENS6_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix
               + v228))((int)&v197, (WebCore::CachedResourceHandleBase *)v227);
            v108 = v199;
            if (v199)
            {
              v196 = 0;
            }
            else
            {
              v120 = v198[0];
              if (v198[0])
              {
                do
                  v121 = __ldaxr((unsigned int *)v120);
                while (__stlxr(v121 + 1, (unsigned int *)v120));
                v196 = (unsigned int *)v120;
                v122 = *(_QWORD *)(v120 + 8);
                if (v122)
                {
                  v197 = &v196;
                  ++*(_DWORD *)(v122 + 548);
                  v123 = *(_QWORD *)(v122 + 488);
                  if (v123)
                  {
                    if (*(_QWORD *)(v123 + 8))
                      WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v122 + 464), (uint64_t *)&v197, (uint64_t)v227);
                  }
                }
              }
              else
              {
                v196 = 0;
              }
              v108 = v199;
            }
            if (v108 != -1)
              (*(&off_1E334EB98 + v108))((int)v227, (WebCore::CachedResourceHandleBase *)v198);
            if (v196 && *((_QWORD *)v196 + 1))
            {
              v124 = (WebCore::CachedResourceClient *)WTF::fastMalloc((WTF *)0x20);
              v125 = v124;
              *(_QWORD *)v124 = off_1E334E168;
              *((_QWORD *)v124 + 1) = 0;
              *((_QWORD *)v124 + 2) = this;
              v126 = (unsigned int **)((char *)v124 + 24);
              v127 = v196;
              if (v196)
              {
                do
                  v128 = __ldaxr(v127);
                while (__stlxr(v128 + 1, v127));
                *v126 = v127;
                v129 = (WebCore::CachedResource *)*((_QWORD *)v127 + 1);
                if (v129)
                {
                  v198[0] = (uint64_t)v124 + 24;
                  ++*((_DWORD *)v129 + 137);
                  v130 = *((_QWORD *)v129 + 61);
                  if (v130)
                  {
                    if (*(_QWORD *)(v130 + 8))
                    {
                      WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)v129 + 58, v198, (uint64_t)v227);
                      if (*v126)
                        v129 = (WebCore::CachedResource *)*((_QWORD *)*v126 + 1);
                      else
                        v129 = 0;
                    }
                  }
                }
              }
              else
              {
                v129 = 0;
                *v126 = 0;
              }
              if (WebCore::CachedResource::addClientToSet(v129, v125))
                (*(void (**)(WebCore::CachedResource *, WebCore::CachedResourceClient *))(*(_QWORD *)v129 + 88))(v129, v125);
            }
            else
            {
              v125 = 0;
            }
            WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v196, v107);
            WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)v200, v131);
            WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)&v215, v132);
            v134 = (WebCore::CachedResourceMediaLoader *)*((_QWORD *)this + 6);
            *((_QWORD *)this + 6) = v125;
            if (v134)
            {
              WebCore::CachedResourceMediaLoader::~CachedResourceMediaLoader(v134, v133);
              WTF::fastFree(v135, v136);
            }
            WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v181, v133);
            if (!*((_QWORD *)this + 6))
            {
LABEL_225:
              v137 = *(_QWORD *)(v4 + 88);
              v138 = *(_QWORD *)(v4 + 96);
              if (__ldaxr((unsigned __int8 *)v137))
              {
                __clrex();
                goto LABEL_228;
              }
              if (__stxr(1u, (unsigned __int8 *)v137))
LABEL_228:
                MEMORY[0x19AEA534C](v137);
              if (*(_QWORD *)(v137 + 24))
                ++*(_QWORD *)(v137 + 8);
              else
                v138 = 0;
              v140 = __ldxr((unsigned __int8 *)v137);
              if (v140 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v137))
                {
LABEL_237:
                  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(v138 + 8) + 8)
                                                                         + 312))(&v215);
                  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v138);
                  if (!v215)
                    goto LABEL_290;
                  (*(void (**)(_QWORD *__return_ptr, WTF::StringImpl *, _BYTE *, uint64_t))(*(_QWORD *)v215 + 32))(v200, v215, v191, 2);
                  v141 = v200[0];
                  if (!v200[0])
                  {
                    v142 = 0;
                    goto LABEL_273;
                  }
                  v142 = WTF::fastMalloc((WTF *)0x30);
                  v143 = v200[0];
                  v200[0] = 0;
                  *(_DWORD *)(v142 + 8) = 1;
                  v144 = (unsigned int *)(v142 + 8);
                  *(_QWORD *)v142 = off_1E334E1E0;
                  *(_QWORD *)(v142 + 16) = this;
                  *(_QWORD *)(v142 + 24) = *((_QWORD *)this + 12);
                  *(_QWORD *)(v142 + 32) = v143;
                  *(_QWORD *)(v142 + 40) = 0;
                  do
                    v145 = __ldaxr(v144);
                  while (__stlxr(v145 + 1, v144));
                  v146 = (unsigned __int8 *)(v141 + 24);
                  if (__ldaxr((unsigned __int8 *)(v141 + 24)))
                  {
                    __clrex();
                    goto LABEL_245;
                  }
                  if (__stxr(1u, v146))
LABEL_245:
                    MEMORY[0x19AEA534C](v141 + 24);
                  v148 = *(unsigned int **)(v141 + 16);
                  *(_QWORD *)(v141 + 16) = v142;
                  if (v148)
                  {
                    v149 = v148 + 2;
                    do
                    {
                      v150 = __ldaxr(v149);
                      v151 = v150 - 1;
                    }
                    while (__stlxr(v151, v149));
                    if (!v151)
                    {
                      atomic_store(1u, v148 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v148 + 8))(v148);
                    }
                  }
                  v152 = __ldxr(v146);
                  if (v152 == 1)
                  {
                    if (!__stlxr(0, v146))
                    {
LABEL_256:
                      v153 = v200[0];
                      v200[0] = 0;
                      if (v153)
                      {
                        v154 = *(_QWORD *)(v153 + 8);
                        if (__ldaxr((unsigned __int8 *)v154))
                        {
                          __clrex();
                          goto LABEL_260;
                        }
                        if (__stxr(1u, (unsigned __int8 *)v154))
LABEL_260:
                          MEMORY[0x19AEA534C](v154);
                        v156 = *(_QWORD *)(v154 + 8);
                        v157 = v156 - 1;
                        *(_QWORD *)(v154 + 8) = v156 - 1;
                        if (v156 == 1)
                        {
                          v174 = *(_QWORD *)(v154 + 16);
                          v158 = *(_QWORD *)(v154 + 24);
                          *(_QWORD *)(v154 + 24) = 0;
                          v159 = v174 != 0;
                        }
                        else
                        {
                          v158 = 0;
                          v159 = 1;
                        }
                        v160 = __ldxr((unsigned __int8 *)v154);
                        if (v160 == 1)
                        {
                          if (!__stlxr(0, (unsigned __int8 *)v154))
                            goto LABEL_268;
                        }
                        else
                        {
                          __clrex();
                        }
                        WTF::Lock::unlockSlow((WTF::Lock *)v154);
LABEL_268:
                        if (!v157)
                        {
                          if (v158)
                            (*(void (**)(uint64_t))(*(_QWORD *)v158 + 16))(v158);
                          if (!v159)
                            WTF::fastFree((WTF *)v154, v98);
                        }
                      }
LABEL_273:
                      v161 = (unsigned int *)*((_QWORD *)this + 7);
                      *((_QWORD *)this + 7) = v142;
                      if (v161)
                      {
                        v162 = v161 + 2;
                        do
                        {
                          v163 = __ldaxr(v162);
                          v164 = v163 - 1;
                        }
                        while (__stlxr(v164, v162));
                        if (!v164)
                        {
                          atomic_store(1u, v161 + 2);
                          (*(void (**)(unsigned int *))(*(_QWORD *)v161 + 8))(v161);
                        }
                        v142 = *((_QWORD *)this + 7);
                      }
                      v165 = v215;
                      v215 = 0;
                      if (v142)
                      {
                        if (v165)
                        {
                          v166 = (unsigned int *)((char *)v165 + 8);
                          do
                          {
                            v167 = __ldaxr(v166);
                            v168 = v167 - 1;
                          }
                          while (__stlxr(v168, v166));
                          if (!v168)
                          {
                            atomic_store(1u, v166);
                            v169 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                            *v169 = off_1E32051E8;
                            v169[1] = v166;
                            v200[0] = v169;
                            WTF::ensureOnMainThread();
                            v170 = v200[0];
                            v200[0] = 0;
                            if (v170)
                              (*(void (**)(uint64_t))(*(_QWORD *)v170 + 8))(v170);
                          }
                        }
                        goto LABEL_291;
                      }
                      if (v165)
                      {
                        v171 = (unsigned int *)((char *)v165 + 8);
                        do
                        {
                          v172 = __ldaxr(v171);
                          v173 = v172 - 1;
                        }
                        while (__stlxr(v173, v171));
                        if (!v173)
                        {
                          atomic_store(1u, v171);
                          v175 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                          *v175 = off_1E32051E8;
                          v175[1] = v171;
                          v200[0] = v175;
                          WTF::ensureOnMainThread();
                          v176 = v200[0];
                          v200[0] = 0;
                          if (v176)
                            (*(void (**)(uint64_t))(*(_QWORD *)v176 + 8))(v176);
                        }
                      }
LABEL_290:
                      objc_msgSend(*((id *)this + 4), "finishLoadingWithError:", 0);
                      goto LABEL_291;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)(v141 + 24));
                  goto LABEL_256;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v137);
              goto LABEL_237;
            }
LABEL_291:
            WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v191, v98);
LABEL_292:
            if (v4)
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 48));
            return;
          }
          v15 = WTF::fastMalloc((WTF *)8);
          *(_QWORD *)v15 = this;
          if ((v195 & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v191);
            v195 |= 1u;
          }
          if ((WTF::URL::protocolIs() & 1) == 0)
          {
            __break(0xC471u);
            goto LABEL_331;
          }
          if ((v195 & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v191);
            v195 |= 1u;
          }
          WebCore::DataURLDecoder::decode((uint64_t)v191, 1, (WebCore::DataURLDecoder *)&v215);
          if (!(_BYTE)v218)
          {
            v109 = *(_QWORD *)v15;
            v110 = *(_QWORD *)(*(_QWORD *)v15 + 96);
            v111 = (unsigned int *)(*(_QWORD *)v15 + 8);
            do
              v112 = __ldaxr(v111);
            while (__stlxr(v112 + 1, v111));
            v113 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v113 = &off_1E334EC78;
            v113[1] = v15;
            v113[2] = v109;
            v200[0] = v113;
            (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v110 + 16))(v110, v200);
            v114 = v200[0];
            v200[0] = 0;
            if (v114)
              (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
            goto LABEL_189;
          }
          if ((v195 & 1) != 0
            || (WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v191),
                v195 |= 1u,
                (_BYTE)v218))
          {
            WebCore::ResourceResponseBase::dataURLResponse((WebCore::ResourceResponseBase *)v191, (const WTF::URL *)&v215, (uint64_t)v200);
            if ((_BYTE)v218)
            {
              WebCore::FragmentedSharedBuffer::create(&v217, (uint64_t *)&v181);
              v75 = WTF::fastMalloc((WTF *)0x38);
              v227[0] = (WTF::StringImpl *)WebCore::SharedBuffer::SharedBuffer(v75, (uint64_t *)&v181);
              WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v181, v76);
              v77 = *(unsigned int **)v15;
              v78 = *(_QWORD *)(*(_QWORD *)v15 + 96);
              v181 = (WTF::StringImpl *)v15;
              v79 = v77 + 2;
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 + 1, v79));
              v81 = v227[0];
              v227[0] = 0;
              v182 = v77;
              v183 = v81;
              WebCore::ResourceResponse::platformLazyInit((uint64_t)v200, 1);
              WTF::String::isolatedCopy();
              WebCore::ResourceResponse::platformLazyInit((uint64_t)v200, 1);
              *(_DWORD *)v185 = v201;
              WebCore::ResourceResponseBase::contentRange((WebCore::ResourceResponseBase *)v200);
              v83 = *(_QWORD *)(v82 + 16);
              *(_OWORD *)&v185[8] = *(_OWORD *)v82;
              *(_QWORD *)&v185[24] = v83;
              v84 = WTF::fastMalloc((WTF *)0x48);
              *(_QWORD *)v84 = off_1E334EC50;
              *(_QWORD *)(v84 + 8) = v181;
              *(_QWORD *)(v84 + 16) = v182;
              v85 = (uint64_t)v183;
              v182 = 0;
              v183 = 0;
              *(_QWORD *)(v84 + 24) = v85;
              v86 = v184;
              v184 = 0;
              *(_QWORD *)(v84 + 32) = v86;
              v87 = *(_OWORD *)v185;
              *(_OWORD *)(v84 + 56) = *(_OWORD *)&v185[16];
              *(_OWORD *)(v84 + 40) = v87;
              v198[0] = v84;
              (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v78 + 16))(v78, v198);
              v89 = v198[0];
              v198[0] = 0;
              if (v89)
                (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
              v90 = v184;
              v184 = 0;
              if (v90)
              {
                if (*(_DWORD *)v90 == 2)
                  WTF::StringImpl::destroy(v90, v88);
                else
                  *(_DWORD *)v90 -= 2;
              }
              WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v183, v88);
              v92 = v182;
              v182 = 0;
              if (v92)
              {
                v93 = v92 + 2;
                do
                {
                  v94 = __ldaxr(v93);
                  v95 = v94 - 1;
                }
                while (__stlxr(v95, v93));
                if (!v95)
                {
                  atomic_store(1u, v92 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v92 + 8))(v92);
                }
              }
              WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)v227, v91);
              v97 = cf;
              cf = 0;
              if (v97)
                CFRelease(v97);
              WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v200, v96);
LABEL_189:
              if ((_BYTE)v218)
              {
                v115 = (WTF *)v217;
                if ((_QWORD)v217)
                {
                  *(_QWORD *)&v217 = 0;
                  DWORD2(v217) = 0;
                  WTF::fastFree(v115, v98);
                }
                v116 = (WTF::StringImpl *)*((_QWORD *)&v216 + 1);
                *((_QWORD *)&v216 + 1) = 0;
                if (v116)
                {
                  if (*(_DWORD *)v116 == 2)
                    WTF::StringImpl::destroy(v116, (WTF::StringImpl *)v98);
                  else
                    *(_DWORD *)v116 -= 2;
                }
                v117 = (WTF::StringImpl *)v216;
                *(_QWORD *)&v216 = 0;
                if (v117)
                {
                  if (*(_DWORD *)v117 == 2)
                    WTF::StringImpl::destroy(v117, (WTF::StringImpl *)v98);
                  else
                    *(_DWORD *)v117 -= 2;
                }
                v118 = v215;
                v215 = 0;
                if (v118)
                {
                  if (*(_DWORD *)v118 == 2)
                    WTF::StringImpl::destroy(v118, (WTF::StringImpl *)v98);
                  else
                    *(_DWORD *)v118 -= 2;
                }
              }
              v119 = (WTF *)*((_QWORD *)this + 5);
              *((_QWORD *)this + 5) = v15;
              if (v119)
                WTF::fastFree(v119, v98);
              goto LABEL_291;
            }
          }
          __break(1u);
LABEL_315:
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v191);
          v195 |= 1u;
        }
        *(_DWORD *)v74 -= 2;
LABEL_134:
        if ((v1 & 1) != 0)
          goto LABEL_300;
        goto LABEL_135;
      }
      goto LABEL_31;
    }
    v17 = *((_QWORD *)this + 10) + *((_QWORD *)this + 9);
    v18 = v17 - 1;
    if (v17 - 1 < 0)
    {
      v22 = 1 - v17;
      v19 = 1;
      do
      {
        ++v19;
        v23 = v22 >= 0xA;
        v22 /= 0xAuLL;
      }
      while (v23);
    }
    else
    {
      v19 = 0;
      v20 = v17 - 1;
      do
      {
        ++v19;
        v21 = v20 > 9;
        v20 /= 0xAuLL;
      }
      while (v21);
    }
    if ((v19 & 0x80000000) != 0)
      goto LABEL_330;
    if (!v19)
    {
      v15 = MEMORY[0x1E0CBEF70];
LABEL_31:
      v16 = *(_DWORD *)v15 + 2;
      *(_DWORD *)v15 = v16;
      goto LABEL_54;
    }
    WTF::tryFastCompactMalloc((WTF *)(v19 + 20));
    v15 = v200[0];
    if (!v200[0])
    {
LABEL_330:
      __break(0xC471u);
LABEL_331:
      JUMPOUT(0x1952631E0);
    }
    v24 = (void *)(v200[0] + 20);
    *(_DWORD *)v200[0] = 2;
    *(_DWORD *)(v15 + 4) = v19;
    *(_QWORD *)(v15 + 8) = v15 + 20;
    *(_DWORD *)(v15 + 16) = 4;
    v25 = 0;
    if ((v18 & 0x8000000000000000) != 0)
    {
      v28 = -(uint64_t)v18;
      do
      {
        *((_BYTE *)&v200[3] + v25--) = (v28 % 0xA) | 0x30;
        v21 = v28 > 9;
        v28 /= 0xAuLL;
      }
      while (v21);
      v29 = v25 + 24;
      v26 = (char *)&v200[3] + v25;
      *v26 = 45;
      if (v25 + 26 > 26)
        goto LABEL_53;
      if (v29 <= 24)
        v29 = 24;
      v27 = v29 - v25 - 23;
    }
    else
    {
      do
      {
        *((_BYTE *)&v200[3] + v25--) = (v18 % 0xA) | 0x30;
        v21 = v18 > 9;
        v18 /= 0xAuLL;
      }
      while (v21);
      if (v25 + 26 > 25)
        goto LABEL_53;
      v26 = (char *)&v200[3] + v25 + 1;
      v27 = -v25;
    }
    memcpy(v24, v26, v27);
LABEL_53:
    v16 = 2;
LABEL_54:
    v1 = 0;
    v30 = *((_QWORD *)this + 10);
    *(_DWORD *)v15 = v16 + 2;
    if ((v30 & 0x8000000000000000) == 0)
      goto LABEL_55;
    goto LABEL_59;
  }
}

void sub_195263390(_Unwind_Exception *a1)
{
  unint64_t v2;

  v2 = STACK[0x200];
  STACK[0x200] = 0;
  if (v2)
    (*(void (**)(unint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::WebCoreAVFResourceLoader::stopLoading(WebCore::WebCoreAVFResourceLoader *this, void *a2)
{
  WTF *v3;
  WebCore::CachedResourceMediaLoader *v4;
  WTF *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  v4 = (WebCore::CachedResourceMediaLoader *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    WebCore::CachedResourceMediaLoader::~CachedResourceMediaLoader(v4, a2);
    WTF::fastFree(v5, v6);
  }
  v7 = *((_QWORD *)this + 7);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 32);
    if (v8)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
      v10 = *(_QWORD *)(v7 + 32);
      *(_QWORD *)(v7 + 32) = 0;
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (__ldaxr((unsigned __int8 *)v11))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v11))
        {
          goto LABEL_12;
        }
        MEMORY[0x19AEA534C](v11);
LABEL_12:
        v13 = *(_QWORD *)(v11 + 8);
        v14 = v13 - 1;
        *(_QWORD *)(v11 + 8) = v13 - 1;
        if (v13 == 1)
        {
          v22 = *(_QWORD *)(v11 + 16);
          v15 = *(_QWORD *)(v11 + 24);
          *(_QWORD *)(v11 + 24) = 0;
          v16 = v22 != 0;
        }
        else
        {
          v15 = 0;
          v16 = 1;
        }
        v17 = __ldxr((unsigned __int8 *)v11);
        if (v17 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v11))
          {
            if (v14)
              goto LABEL_24;
LABEL_20:
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
            if (!v16)
              WTF::fastFree((WTF *)v11, v9);
            goto LABEL_24;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
        if (v14)
          goto LABEL_24;
        goto LABEL_20;
      }
    }
  }
LABEL_24:
  v23 = *((_OWORD *)this + 1);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v18 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  v20 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v20 = &off_1E334ECA0;
  *(_OWORD *)(v20 + 8) = v23;
  *(_QWORD *)(v20 + 24) = v18;
  *(_QWORD *)(v20 + 32) = v19;
  v24 = v20;
  WTF::callOnMainThread();
  result = v24;
  if (v24)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  return result;
}

void sub_195263960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebCore::PlatformCALayer::drawRepaintIndicator(WebCore::GraphicsContext *a1, _QWORD **a2, WTF::String *a3, uint64_t *a4)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WebCore *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  WebCore::FontCascadeFonts *v20;
  WebCore::FontCascadeFonts *v21;
  unsigned int v22;
  unsigned int v23;
  WebCore::FontCascadeFonts *v24;
  _DWORD *v25;
  float v26;
  uint64_t v27;
  void *v28;
  int v34;
  int v35;
  uint64_t v36;
  void *v37;
  unsigned int v38;
  void *v39;
  void *v40;
  WTF::StringImpl *v41;
  unsigned int *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  void *v46;
  WTF *v47;
  WTF *v48;
  WTF::StringImpl *result;
  WTF *v50;
  void *v51;
  uint64_t v52;
  WTF::StringImpl **v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF *v56;
  void *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  float32x2_t v69;
  float32x2_t v70;
  WTF::StringImpl *v71[2];
  uint64_t v72;
  WebCore::FontCascadeFonts *v73;
  unsigned int v74;
  __int128 v75;
  __int128 v76;
  _BYTE v77[64];
  uint64_t v78;
  char v79;
  WTF::StringImpl *v80;
  __int16 v81;
  int v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  __int16 v86;
  int v87;
  unsigned int v88;
  __int16 v89;
  char v90;
  WTF *v91;
  int v92;
  __int16 v93;
  int v94;
  WTF::StringImpl *v95;
  int v96;
  char v97;
  uint64_t v98;
  int v99;
  __int16 v100;
  uint64_t v101;
  _OWORD v102[3];
  int v103;
  int v104;
  int v105;
  _OWORD v106[3];
  int v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  WTF::String::number(a3);
  v94 = 0;
  v8 = v71[0];
  if (v71[0])
    *(_DWORD *)v71[0] += 2;
  v95 = v8;
  v96 = 0;
  v97 = 1;
  v98 = 0x3F80000000000000;
  v99 = 0;
  v100 = 2052;
  v71[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v78 = 256;
  memset(v77, 0, sizeof(v77));
  v75 = 0u;
  v76 = 0u;
  v79 = 0;
  v9 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *(_DWORD *)v9 += 2;
  v80 = v9;
  v81 = 0;
  v82 = 2143289344;
  v83 = 0;
  v84 = 0;
  v85 = 26216000;
  v86 = 257;
  v87 = 0;
  v88 = v88 & 0x80000000 | 0xE000;
  v89 = 0;
  v90 &= 0xFCu;
  v10 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v10 = 0x100000001;
  *((_QWORD *)v10 + 1) = 0;
  v91 = v10;
  v92 = 0;
  v93 &= 0xFC00u;
  WTF::AtomStringImpl::add();
  v12 = v91;
  if (!*((_DWORD *)v91 + 1))
  {
    __break(0xC471u);
    JUMPOUT(0x195264210);
  }
  v13 = v71[0];
  if (v71[0])
    *(_DWORD *)v71[0] += 2;
  v14 = (WTF::StringImpl *)*((_QWORD *)v12 + 1);
  *((_QWORD *)v12 + 1) = v13;
  if (!v14)
  {
LABEL_14:
    if (!v13)
      goto LABEL_17;
    goto LABEL_15;
  }
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
    goto LABEL_14;
  }
  WTF::StringImpl::destroy(v14, v11);
  if (!v13)
    goto LABEL_17;
LABEL_15:
  if (*(_DWORD *)v13 == 2)
    WTF::StringImpl::destroy(v13, v11);
  else
    *(_DWORD *)v13 -= 2;
LABEL_17:
  v92 = 1102053376;
  v87 = 1102053376;
  v15 = (WebCore *)WebCore::FontCascade::FontCascade((uint64_t)v71, (uint64_t *)&v75);
  *(_QWORD *)&v106[0] = 0;
  v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v16 || (v17 = *(_QWORD *)(v16 + 96)) == 0)
    v17 = WebCore::threadGlobalDataSlow(v15);
  v18 = *(_QWORD *)(v17 + 80);
  if (!v18)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v17);
    v18 = *(_QWORD *)(v17 + 80);
  }
  WebCore::FontCascadeCache::retrieveOrAddCachedFonts((uint64_t *)(v18 + 80), (const WebCore::FontDescription *)&v72, (WebCore **)v106, &v101);
  v20 = (WebCore::FontCascadeFonts *)v101;
  v101 = 0;
  v21 = v73;
  v73 = v20;
  if (v21)
  {
    if (*(_DWORD *)v21 == 1)
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v21, v19);
      WTF::fastFree(v50, v51);
    }
    else
    {
      --*(_DWORD *)v21;
    }
  }
  do
  {
    v22 = __ldaxr(&WebCore::lastFontCascadeGeneration);
    v23 = v22 + 1;
  }
  while (__stlxr(v23, &WebCore::lastFontCascadeGeneration));
  v74 = v23;
  v24 = (WebCore::FontCascadeFonts *)v101;
  v101 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v24, v19);
      WTF::fastFree(v56, v57);
    }
    else
    {
      --*(_DWORD *)v24;
    }
  }
  v25 = *(_DWORD **)&v106[0];
  *(_QWORD *)&v106[0] = 0;
  if (v25)
  {
    if (v25[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
    else
      --v25[2];
  }
  v26 = WebCore::FontCascade::width((uint64_t)v71, (uint64_t)&v94);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a1 + 96))(a1, 1);
  (*(void (**)(WebCore::GraphicsContext *, float))(*(_QWORD *)a1 + 592))(a1, 0.5);
  v27 = *a4;
  if ((*a4 & 0x4000000000000) != 0)
  {
    v101 = *a4;
    if ((v27 & 0x8000000000000) != 0)
    {
      v58 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 + 1, v58));
    }
  }
  else
  {
    v101 = 0x110400008040FFFFLL;
  }
  WebCore::GraphicsContext::setFillColor(a1, (const WebCore::Color *)&v101);
  if ((v101 & 0x8000000000000) != 0)
  {
    v60 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFLL);
    do
    {
      v61 = __ldaxr(v60);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v60));
    if (!v62)
    {
      atomic_store(1u, v60);
      WTF::fastFree((WTF *)v60, v28);
    }
  }
  __asm { FMOV            V1.2S, #1.0 }
  v69 = _D1;
  v70.f32[0] = v26 + 10.0;
  v70.i32[1] = 1104674816;
  if (((unsigned int (*)(_QWORD **))(*a2)[29])(a2))
  {
    (*(void (**)(WebCore::GraphicsContext *, float32x2_t *, uint64_t))(*(_QWORD *)a1 + 216))(a1, &v69, 1);
    goto LABEL_56;
  }
  v105 = 0;
  *(float *)v106 = v69.f32[0] + v70.f32[0];
  DWORD1(v106[0]) = v69.i32[1];
  WebCore::Path::moveTo((WebCore::Path *)&v101, (const WebCore::FloatPoint *)v106);
  *(float32x2_t *)&v106[0] = vadd_f32(v69, v70);
  WebCore::Path::addLineTo((uint64_t)&v101, (const WebCore::FloatPoint *)v106);
  LODWORD(v106[0]) = v69.i32[0];
  *((float *)v106 + 1) = v69.f32[1] + v70.f32[1];
  WebCore::Path::addLineTo((uint64_t)&v101, (const WebCore::FloatPoint *)v106);
  LODWORD(v106[0]) = v69.i32[0];
  *((float *)v106 + 1) = v69.f32[1] + 8.0;
  WebCore::Path::addLineTo((uint64_t)&v101, (const WebCore::FloatPoint *)v106);
  *(float *)v106 = v69.f32[0] + 8.0;
  DWORD1(v106[0]) = v69.i32[1];
  WebCore::Path::addLineTo((uint64_t)&v101, (const WebCore::FloatPoint *)v106);
  v34 = v105;
  if (v105 == 2)
  {
    if (!*(_QWORD *)&v102[0])
      goto LABEL_53;
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)&v102[0] + 200))(*(_QWORD *)&v102[0]) & 1) != 0)
      goto LABEL_54;
    v34 = v105;
  }
  else if (!v105)
  {
    goto LABEL_54;
  }
  if (v34 == 2)
  {
    if (*(_QWORD *)&v102[0])
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)&v102[0] + 208))(*(_QWORD *)&v102[0]) & 1) != 0)
        goto LABEL_54;
      if (v105 == 1)
      {
        v35 = v104;
        goto LABEL_51;
      }
    }
LABEL_53:
    v36 = WebCore::Path::ensureImpl((WebCore::Path *)&v101);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 120))(v36);
    goto LABEL_54;
  }
  if (v34 != 1)
    goto LABEL_53;
  v35 = v104;
  if (v104 != 6 && v104 != 15)
  {
LABEL_51:
    if (v35 == 5)
    {
      v106[0] = v102[0];
      *(_QWORD *)((char *)v106 + 13) = *(_QWORD *)((char *)v102 + 13);
      v102[2] = v106[2];
      v102[0] = v106[0];
      v102[1] = v106[1];
      v103 = v107;
      v104 = 6;
      goto LABEL_54;
    }
    goto LABEL_53;
  }
LABEL_54:
  (*(void (**)(WebCore::GraphicsContext *, uint64_t *))(*(_QWORD *)a1 + 176))(a1, &v101);
  if (v105 != -1)
    ((void (*)(_OWORD *, _OWORD *))off_1E334EBE8[v105])(v106, v102);
LABEL_56:
  if ((*(unsigned int (**)(_QWORD *, _QWORD **))(*a2[6] + 208))(a2[6], a2))
  {
    v101 = 0x11040000000000A6;
    WebCore::GraphicsContext::setStrokeColor(a1, (const WebCore::Color *)&v101);
    if ((v101 & 0x8000000000000) != 0)
    {
      v66 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFLL);
      do
      {
        v67 = __ldaxr(v66);
        v68 = v67 - 1;
      }
      while (__stlxr(v68, v66));
      if (!v68)
      {
        atomic_store(1u, v66);
        WTF::fastFree((WTF *)v66, v37);
      }
    }
    (*(void (**)(WebCore::GraphicsContext *, float32x2_t *, float))(*(_QWORD *)a1 + 288))(a1, &v69, 2.0);
  }
  if (((unsigned int (*)(_QWORD **))(*a2)[56])(a2))
    v38 = -16776961;
  else
    v38 = -1;
  v101 = bswap32(v38) | 0x1104000000000000;
  WebCore::GraphicsContext::setFillColor(a1, (const WebCore::Color *)&v101);
  if ((v101 & 0x8000000000000) != 0)
  {
    v63 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFLL);
    do
    {
      v64 = __ldaxr(v63);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, v63));
    if (!v65)
    {
      atomic_store(1u, v63);
      WTF::fastFree((WTF *)v63, v39);
    }
  }
  v101 = (uint64_t)vadd_f32(v69, (float32x2_t)0x41B0000040A00000);
  (*(void (**)(WebCore::GraphicsContext *, WTF::StringImpl **, int *, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)a1 + 520))(a1, v71, &v94, &v101, 0, 0);
  (*(void (**)(WebCore::GraphicsContext *))(*(_QWORD *)a1 + 608))(a1);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a1 + 104))(a1, 1);
  WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v71, v40);
  v42 = (unsigned int *)v91;
  v91 = 0;
  if (v42)
  {
    if (*v42 == 1)
    {
      v52 = v42[1];
      if ((_DWORD)v52)
      {
        v53 = (WTF::StringImpl **)(v42 + 2);
        v54 = 8 * v52;
        do
        {
          v55 = *v53;
          *v53 = 0;
          if (v55)
          {
            if (*(_DWORD *)v55 == 2)
              WTF::StringImpl::destroy(v55, v41);
            else
              *(_DWORD *)v55 -= 2;
          }
          ++v53;
          v54 -= 8;
        }
        while (v54);
      }
      WTF::fastFree((WTF *)v42, v41);
    }
    else
    {
      --*v42;
    }
  }
  v43 = v84;
  v84 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v41);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = v83;
  v83 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v41);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = v80;
  v80 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v41);
    else
      *(_DWORD *)v45 -= 2;
  }
  WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)v77, v41);
  v47 = (WTF *)v76;
  if ((_QWORD)v76)
  {
    *(_QWORD *)&v76 = 0;
    DWORD2(v76) = 0;
    WTF::fastFree(v47, v46);
  }
  v48 = (WTF *)v75;
  if ((_QWORD)v75)
  {
    *(_QWORD *)&v75 = 0;
    DWORD2(v75) = 0;
    WTF::fastFree(v48, v46);
  }
  result = v95;
  v95 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v46);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1952642C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  WTF *a70;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  void *v77;
  WTF::StringImpl *v78;
  unsigned int *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  WTF::StringImpl **v83;
  uint64_t v84;
  WTF::StringImpl *v85;

  v73 = *(_QWORD *)(v71 - 200);
  if ((v73 & 0x8000000000000) != 0)
  {
    v74 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFLL);
    do
    {
      v75 = __ldaxr(v74);
      v76 = v75 - 1;
    }
    while (__stlxr(v76, v74));
    if (!v76)
    {
      atomic_store(1u, v74);
      WTF::fastFree((WTF *)v74, a2);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 104))(v70, 1);
  WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)&a12, v77);
  v79 = (unsigned int *)a70;
  a70 = 0;
  if (v79)
  {
    if (*v79 == 1)
    {
      v82 = v79[1];
      if ((_DWORD)v82)
      {
        v83 = (WTF::StringImpl **)(v79 + 2);
        v84 = 8 * v82;
        do
        {
          v85 = *v83;
          *v83 = 0;
          if (v85)
          {
            if (*(_DWORD *)v85 == 2)
              WTF::StringImpl::destroy(v85, v78);
            else
              *(_DWORD *)v85 -= 2;
          }
          ++v83;
          v84 -= 8;
        }
        while (v84);
      }
      WTF::fastFree((WTF *)v79, v78);
    }
    else
    {
      --*v79;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)&a49, v78);
  v81 = *(WTF::StringImpl **)(v71 - 232);
  *(_QWORD *)(v71 - 232) = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
      WTF::StringImpl::destroy(v81, v80);
    else
      *(_DWORD *)v81 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::GraphicsContext::setStrokeColor(WebCore::GraphicsContext *this, const WebCore::Color *a2)
{
  unint64_t v3;
  int v4;
  char *v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  int v20;
  _BOOL4 v21;
  _QWORD *v22;
  _BOOL4 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[64];
  int v27;
  unint64_t v28;
  _QWORD v29[8];
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  v3 = *(_QWORD *)a2;
  v28 = v3;
  if ((v3 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v4 = v27;
    LOBYTE(v29[0]) = 0;
    v30 = -1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v29[0]) = 0;
    v30 = -1;
  }
  ((void (*)(__int128 *, _QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal[v4])(&v25, v29, v26);
  v30 = v4;
  v6 = *((_QWORD *)this + 12);
  if ((v6 & 0x8000000000000) != 0)
  {
    if ((v28 & 0x8000000000000) == 0)
      goto LABEL_8;
    v25 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
    v24 = *(_OWORD *)((v28 & 0xFFFFFFFFFFFFLL) + 4);
    if (!WebCore::operator==<float,4ul>((float *)&v25, (float *)&v24))
      goto LABEL_8;
    v19 = *((_QWORD *)this + 12);
    if (HIBYTE(v19) != HIBYTE(v28) || BYTE6(v19) != BYTE6(v28))
      goto LABEL_8;
    v4 = v30;
  }
  else if (v6 != v28 || (v28 & 0x8000000000000) != 0)
  {
    goto LABEL_8;
  }
  v20 = *((_DWORD *)this + 44);
  v21 = v4 == v20;
  if (v4 == -1)
    v21 = 0;
  if (v20 == -1)
    v21 = v4 == -1;
  if (v21)
  {
    v22 = (_QWORD *)((char *)this + 112);
    if (v20 == 2)
    {
      if (v4 == 2)
      {
        if (*v22 == v29[0])
          goto LABEL_17;
        goto LABEL_8;
      }
    }
    else
    {
      if (v20 != 1)
        goto LABEL_17;
      if (v4 == 1)
      {
        if ((WebCore::operator==((uint64_t)v22, (uint64_t)v29) & 1) != 0)
          goto LABEL_17;
        goto LABEL_8;
      }
    }
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
LABEL_8:
  v8 = *((_QWORD *)this + 12);
  if ((v8 & 0x8000000000000) != 0)
  {
    if ((v28 & 0x8000000000000) != 0)
    {
      v25 = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 4);
      v24 = *(_OWORD *)((v28 & 0xFFFFFFFFFFFFLL) + 4);
      v23 = WebCore::operator==<float,4ul>((float *)&v25, (float *)&v24);
      v8 = *((_QWORD *)this + 12);
      if (v23 && HIBYTE(v8) == HIBYTE(v28) && BYTE6(v8) == BYTE6(v28))
        goto LABEL_13;
    }
  }
  else if (v8 == v28 && (v28 & 0x8000000000000) == 0)
  {
    goto LABEL_13;
  }
  if ((v8 & 0x8000000000000) != 0)
  {
    v13 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v5);
    }
  }
  *((_QWORD *)this + 12) = v28;
  v28 = 0;
LABEL_13:
  v5 = (char *)this + 112;
  v9 = *((unsigned int *)this + 44);
  if ((_DWORD)v9 == -1)
  {
    if (v30 == -1)
      goto LABEL_16;
  }
  else if (v30 == -1)
  {
    ((void (*)(__int128 *, char *))off_1E334EBB8[v9])(&v25, v5);
    *((_DWORD *)this + 44) = -1;
    goto LABEL_16;
  }
  *(_QWORD *)&v25 = (char *)this + 112;
  ((void (*)(__int128 *))off_1E334EBD0[v30])(&v25);
LABEL_16:
  *((_DWORD *)this + 46) |= 4u;
LABEL_17:
  if (v30 != -1)
    ((void (*)(__int128 *, _QWORD *))off_1E334EBB8[v30])(&v25, v29);
  v30 = -1;
  if ((v28 & 0x8000000000000) != 0)
  {
    v16 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFLL);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v5);
    }
  }
  if (v27 != -1)
    ((void (*)(__int128 *, _BYTE *))off_1E334EBB8[v27])(&v25, v26);
  return (*(uint64_t (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)this + 88))(this, (char *)this + 8);
}

void sub_1952647EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,int a28,char a29)
{
  WebCore::SourceBrush::~SourceBrush((WebCore::SourceBrush *)&a29, a2);
  if (a27 != -1)
    ((void (*)(char *, uint64_t *))off_1E334EBB8[a27])(&a13, &a19);
  _Unwind_Resume(a1);
}

void WebCore::PlatformCALayer::flipContext(WebCore::PlatformCALayer *this, CGContext *a2, double a3)
{
  CGContextScaleCTM(this, 1.0, -1.0);
  CGContextTranslateCTM(this, 0.0, -a3);
}

void WebCore::PlatformCALayer::drawTextAtPoint(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, double a6, uint64_t a7, CGContext *a8, const UInt8 *a9, CFIndex a10, WebCore *a11)
{
  CTFontRef v18;
  const __CFAllocator *v19;
  CFNumberRef v20;
  void *v21;
  void *v22;
  const WebCore::Color *v23;
  void *v24;
  const __CFDictionary *v25;
  const __CFString *v26;
  const __CFAttributedString *v27;
  const __CTLine *v28;
  CFTypeRef v29;
  CFTypeRef cf;
  CGAffineTransform matrix;
  double valuePtr;
  void *values[4];
  void *keys[5];

  keys[4] = *(void **)MEMORY[0x1E0C80C00];
  valuePtr = a6;
  memset(&matrix, 0, sizeof(matrix));
  CGAffineTransformMakeScale(&matrix, a3, a4);
  v18 = CTFontCreateWithName(CFSTR("Helvetica"), a5, &matrix);
  v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v20 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCGFloatType, &valuePtr);
  v21 = (void *)*MEMORY[0x1E0CA8558];
  keys[0] = *(void **)MEMORY[0x1E0CA8188];
  keys[1] = v21;
  v22 = (void *)*MEMORY[0x1E0CA85C8];
  keys[2] = *(void **)MEMORY[0x1E0CA85D0];
  keys[3] = v22;
  WebCore::cachedCGColor(a11, v23, &cf);
  v24 = (void *)*MEMORY[0x1E0C9AE50];
  values[0] = v18;
  values[1] = v24;
  values[2] = v20;
  values[3] = (void *)cf;
  v25 = CFDictionaryCreate(v19, (const void **)keys, (const void **)values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v26 = CFStringCreateWithBytesNoCopy(v19, a9, a10, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v27 = CFAttributedStringCreate(v19, v26, v25);
  v28 = CTLineCreateWithAttributedString(v27);
  CGContextSetTextPosition(a8, a1, a2);
  CTLineDraw(v28, a8);
  if (v28)
    CFRelease(v28);
  if (v27)
    CFRelease(v27);
  if (v26)
    CFRelease(v26);
  if (v25)
    CFRelease(v25);
  v29 = cf;
  cf = 0;
  if (!v29)
  {
    if (!v20)
      goto LABEL_12;
    goto LABEL_11;
  }
  CFRelease(v29);
  if (v20)
LABEL_11:
    CFRelease(v20);
LABEL_12:
  if (v18)
    CFRelease(v18);
}

void sub_195264AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;

  if (v14)
  {
    CFRelease(v14);
    if (!v13)
    {
LABEL_4:
      if (v12)
        CFRelease(v12);
      if (cf)
      {
        CFRelease(cf);
        if (!v11)
        {
LABEL_9:
          if (v10)
            CFRelease(v10);
          _Unwind_Resume(exception_object);
        }
      }
      else if (!v11)
      {
        goto LABEL_9;
      }
      CFRelease(v11);
      goto LABEL_9;
    }
  }
  else if (!v13)
  {
    goto LABEL_4;
  }
  CFRelease(v13);
  goto LABEL_4;
}

_QWORD *WTF::Ref<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>::~Ref(_QWORD *result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v5;
  unsigned int *v6;
  _QWORD *v7;
  _QWORD *v8;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = (unsigned int *)(v1 + 8);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      v5 = result;
      atomic_store(1u, v2);
      v6 = v2;
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E334ED68;
      v7[1] = v6;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
      return v5;
    }
  }
  return result;
}

void sub_195264BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebCore::PlatformCALayer::moveToLayerPool(WebCore::PlatformCALayer *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  WebCore::PlatformCALayer *v6;

  v2 = (*(uint64_t (**)(WebCore::PlatformCALayer *))(*(_QWORD *)this + 864))(this);
  if (v2)
  {
    v3 = (unsigned int *)((char *)this + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v6 = this;
    WebCore::LayerPool::addLayer(v2, (uint64_t *)&v6);
    v5 = (uint64_t)v6;
    v6 = 0;
    if (v5)
      WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  }
}

void sub_195264C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(a10 + 8));
  _Unwind_Resume(exception_object);
}

WebCore::LayerPool *WebCore::PlatformCALayer::layerPool(WebCore::PlatformCALayer *this)
{
  WebCore::LayerPool *result;
  WebCore::LayerPool *v2;

  if (_MergedGlobals_124 == 1)
    return (WebCore::LayerPool *)qword_1ECE81910;
  v2 = (WebCore::LayerPool *)WTF::fastMalloc((WTF *)0x68);
  result = WebCore::LayerPool::LayerPool(v2);
  qword_1ECE81910 = (uint64_t)result;
  _MergedGlobals_124 = 1;
  return result;
}

uint64_t WebCore::PlatformCALayer::setMaskLayer(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(result + 40);
  *(_QWORD *)(result + 40) = v2;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E334ED68;
      v7[1] = v4;
      v8 = v7;
      WTF::ensureOnMainThread();
      result = (uint64_t)v8;
      if (v8)
        return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return result;
}

void sub_195264D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlatformCALayer::maskLayer(WebCore::PlatformCALayer *this)
{
  return *((_QWORD *)this + 5);
}

unsigned int *WebCore::PlatformCALayer::setDelegatedContents(uint64_t a1, const WTF::MachSendRight *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  const void *v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;

  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)&v15, a2);
  WebCore::IOSurface::createFromSendRight((mach_port_t *)&v15, &v17);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v15);
  if (!v17)
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 504))(a1);
  v15 = v17;
  v4 = (unsigned int *)*((_QWORD *)a2 + 1);
  if (v4)
  {
    v5 = v4 + 2;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v16 = v4;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 520))(a1, &v15);
  result = v16;
  v16 = 0;
  if (result)
  {
    v8 = result + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v11 = v17;
  if (v17)
  {
    v12 = *(const void **)(v17 + 48);
    *(_QWORD *)(v17 + 48) = 0;
    if (v12)
      CFRelease(v12);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v11 + 40));
    if (*(_BYTE *)(v11 + 16))
    {
      v14 = *(const void **)(v11 + 8);
      *(_QWORD *)(v11 + 8) = 0;
      if (v14)
        CFRelease(v14);
    }
    return (unsigned int *)WTF::fastFree((WTF *)v11, v13);
  }
  return result;
}

void sub_195264EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, unsigned int *a11, uint64_t a12)
{
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  const void *v16;
  void *v17;
  const void *v18;

  if (a11)
  {
    v13 = a11 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, a11 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
    }
  }
  if (a12)
  {
    v16 = *(const void **)(a12 + 48);
    *(_QWORD *)(a12 + 48) = 0;
    if (v16)
      CFRelease(v16);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a12 + 40));
    if (*(_BYTE *)(a12 + 16))
    {
      v18 = *(const void **)(a12 + 8);
      *(_QWORD *)(a12 + 8) = 0;
      if (v18)
        CFRelease(v18);
    }
    WTF::fastFree((WTF *)a12, v17);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::PlatformCALayer::setDelegatedContents(uint64_t a1, _QWORD *a2)
{
  WTF::MachSendRight *MachPort;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  char v14;
  char v15;

  MachPort = (WTF::MachSendRight *)IOSurfaceCreateMachPort(*(IOSurfaceRef *)(*a2 + 48));
  WTF::MachSendRight::adopt(MachPort);
  v5 = (unsigned int *)a2[1];
  if (v5)
  {
    v6 = v5 + 2;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v13 = v5;
  v14 = 0;
  v15 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 512))(a1, &v12);
  v8 = v13;
  v13 = 0;
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v12);
}

void sub_195265020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v11 = a10;
  a10 = 0;
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v11 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a9);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformCALayer::needsPlatformContext(WebCore::PlatformCALayer *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    return (*(uint64_t (**)(uint64_t, WebCore::PlatformCALayer *))(*(_QWORD *)result + 240))(result, this);
  return result;
}

uint64_t WebCore::operator<<(uint64_t a1, unsigned int a2)
{
  if (a2 <= 0xF)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 2)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 6)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 0x51)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 2)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 9)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 2)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 2)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 4)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 2)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 1)
    WTF::TextStream::operator<<();
  return a1;
}

{
  uint64_t result;

  if (a2 <= 6)
    return WTF::TextStream::operator<<();
  return result;
}

{
  if (a2 <= 2)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 2)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 2)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 2)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 3)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 3)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 1)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 0x2F && ((0xAC0000FFFFFFuLL >> a2) & 1) != 0)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 1)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 0x13)
    WTF::TextStream::operator<<();
  return a1;
}

{
  char *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v2 = (&WebCore::compositeOperatorNames)[2 * a2 + 1];
  if (v2)
  {
    if (v2 == (char *)1)
    {
      v3 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v3 = v8;
    }
    v7 = v3;
  }
  else
  {
    v7 = 0;
  }
  v5 = WTF::TextStream::operator<<();
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v5;
}

{
  if (a2 <= 2)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 4)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 2)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 2)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 5)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 1)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 2)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 4)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 8)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 3)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 3)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 0xB)
    WTF::TextStream::operator<<();
  return a1;
}

{
  if (a2 <= 3)
    WTF::TextStream::operator<<();
  return a1;
}

uint64_t WebCore::PlatformCALayerDelegatedContentsFence::PlatformCALayerDelegatedContentsFence(uint64_t this)
{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E334E5D8;
  return this;
}

WebCore::GraphicsLayerAsyncContentsDisplayDelegateCocoa *WebCore::GraphicsLayerAsyncContentsDisplayDelegateCocoa::GraphicsLayerAsyncContentsDisplayDelegateCocoa(WebCore::GraphicsLayerAsyncContentsDisplayDelegateCocoa *this, WebCore::GraphicsLayerCA *a2)
{
  _QWORD *v4;
  id v5;
  id v6;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E334E600;
  *((_QWORD *)this + 2) = 0;
  v4 = (_QWORD *)((char *)this + 16);
  *((_QWORD *)this + 3) = 0;
  v5 = objc_alloc_init(MEMORY[0x1E0CD27A8]);
  v6 = (id)*v4;
  *v4 = v5;
  if (v6)
  {
    CFRelease(v6);
    v5 = (id)*v4;
  }
  objc_msgSend(v5, "setName:", CFSTR("OffscreenCanvasLayer"));
  (*(void (**)(WebCore::GraphicsLayerCA *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, *v4, 3);
  return this;
}

void sub_1952651E0(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  const void **v3;
  const void **v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  const void *v14;
  uint64_t v15;

  v4 = v3;
  v6 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  if (!v6)
    goto LABEL_19;
  v7 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
LABEL_7:
    v9 = *(_QWORD *)(v7 + 8);
    v10 = v9 - 1;
    *(_QWORD *)(v7 + 8) = v9 - 1;
    if (v9 == 1)
    {
      v15 = *(_QWORD *)(v7 + 16);
      v11 = *(_QWORD *)(v7 + 24);
      *(_QWORD *)(v7 + 24) = 0;
      v12 = v15 != 0;
    }
    else
    {
      v11 = 0;
      v12 = 1;
    }
    v13 = __ldxr((unsigned __int8 *)v7);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v7))
      {
LABEL_14:
        if (!v10)
        {
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
          if (!v12)
            WTF::fastFree((WTF *)v7, a2);
        }
LABEL_19:
        v14 = *v4;
        *v4 = 0;
        if (v14)
          CFRelease(v14);
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v7);
  goto LABEL_7;
}

BOOL WebCore::GraphicsLayerAsyncContentsDisplayDelegateCocoa::tryCopyToLayer(WebCore::GraphicsLayerAsyncContentsDisplayDelegateCocoa *this, WebCore::ImageBuffer *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  WebCore::ImageBuffer::clone(a2, &v34);
  if (v34)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v34 + 136))(&v35);
    v4 = v35;
  }
  else
  {
    v4 = 0;
  }
  v35 = 0;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v4;
  if (!v5)
    goto LABEL_38;
  v6 = *(_QWORD *)(v5 + 8);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_9:
  v8 = *(_QWORD *)(v6 + 8);
  v9 = v8 - 1;
  *(_QWORD *)(v6 + 8) = v8 - 1;
  if (v8 == 1)
  {
    v31 = *(_QWORD *)(v6 + 16);
    v10 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)(v6 + 24) = 0;
    v11 = v31 != 0;
  }
  else
  {
    v10 = 0;
    v11 = 1;
  }
  v12 = __ldxr((unsigned __int8 *)v6);
  if (v12 != 1)
  {
    __clrex();
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      goto LABEL_21;
    goto LABEL_17;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
    goto LABEL_16;
  if (v9)
    goto LABEL_21;
LABEL_17:
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (!v11)
    WTF::fastFree((WTF *)v6, v3);
LABEL_21:
  v13 = v35;
  v35 = 0;
  if (!v13)
    goto LABEL_38;
  v14 = *(_QWORD *)(v13 + 8);
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_26;
  }
  MEMORY[0x19AEA534C](v14);
LABEL_26:
  v16 = *(_QWORD *)(v14 + 8);
  v17 = v16 - 1;
  *(_QWORD *)(v14 + 8) = v16 - 1;
  if (v16 == 1)
  {
    v32 = *(_QWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v14 + 24);
    *(_QWORD *)(v14 + 24) = 0;
    v19 = v32 != 0;
  }
  else
  {
    v18 = 0;
    v19 = 1;
  }
  v20 = __ldxr((unsigned __int8 *)v14);
  if (v20 != 1)
  {
    __clrex();
LABEL_33:
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
    if (v17)
      goto LABEL_38;
    goto LABEL_34;
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    goto LABEL_33;
  if (v17)
    goto LABEL_38;
LABEL_34:
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (!v19)
    WTF::fastFree((WTF *)v14, v3);
LABEL_38:
  v21 = v34;
  v34 = 0;
  if (!v21)
    goto LABEL_55;
  v22 = *(_QWORD *)(v21 + 8);
  if (__ldaxr((unsigned __int8 *)v22))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v22))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v22);
LABEL_43:
  v24 = *(_QWORD *)(v22 + 8);
  v25 = v24 - 1;
  *(_QWORD *)(v22 + 8) = v24 - 1;
  if (v24 == 1)
  {
    v33 = *(_QWORD *)(v22 + 16);
    v26 = *(_QWORD *)(v22 + 24);
    *(_QWORD *)(v22 + 24) = 0;
    v27 = v33 != 0;
  }
  else
  {
    v26 = 0;
    v27 = 1;
  }
  v28 = __ldxr((unsigned __int8 *)v22);
  if (v28 != 1)
  {
    __clrex();
LABEL_50:
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
    if (v25)
      goto LABEL_55;
    goto LABEL_51;
  }
  if (__stlxr(0, (unsigned __int8 *)v22))
    goto LABEL_50;
  if (v25)
    goto LABEL_55;
LABEL_51:
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (!v27)
    WTF::fastFree((WTF *)v22, v3);
LABEL_55:
  v29 = *((_QWORD *)this + 3);
  if (v29)
  {
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin", v34);
    objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
    objc_msgSend(*((id *)this + 2), "setContents:", *(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 3) + 48) + 16))(*(_QWORD *)(*((_QWORD *)this + 3) + 48)));
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  }
  return v29 != 0;
}

WebCore::PlatformCAAnimationCocoa *WebCore::PlatformCAAnimationCocoa::create@<X0>(CAAnimation *this@<X0>, WebCore::PlatformCAAnimationCocoa **a2@<X8>)
{
  WebCore::PlatformCAAnimationCocoa *v5;
  WebCore::PlatformCAAnimationCocoa *result;

  v5 = (WebCore::PlatformCAAnimationCocoa *)WTF::fastMalloc((WTF *)0x18);
  result = WebCore::PlatformCAAnimationCocoa::PlatformCAAnimationCocoa(v5, this);
  *a2 = v5;
  return result;
}

void sub_1952655B0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformCAAnimationCocoa::PlatformCAAnimationCocoa(uint64_t a1, int a2, _QWORD *a3)
{
  void *v4;
  const __CFString *v5;
  const void *v6;
  const void *v7;
  void *v8;
  const __CFString *v9;
  void *v10;
  const __CFString *v11;
  const void *v12;

  *(_DWORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 12) = a2;
  *(_QWORD *)a1 = off_1E334E650;
  *(_QWORD *)(a1 + 16) = 0;
  switch(a2)
  {
    case 0:
      v4 = (void *)MEMORY[0x1E0CD2710];
      if (*a3)
        v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v5 = &stru_1E3487BC0;
      v6 = (const void *)objc_msgSend(v4, "animationWithKeyPath:", v5);
      v7 = v6;
      if (!v6)
        goto LABEL_16;
      goto LABEL_15;
    case 1:
      v6 = (const void *)objc_msgSend(MEMORY[0x1E0CD2700], "animation");
      v7 = v6;
      if (v6)
        goto LABEL_15;
      goto LABEL_16;
    case 2:
      v8 = (void *)MEMORY[0x1E0CD2798];
      if (*a3)
        v9 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v9 = &stru_1E3487BC0;
      v6 = (const void *)objc_msgSend(v8, "animationWithKeyPath:", v9);
      v7 = v6;
      if (v6)
        goto LABEL_15;
      goto LABEL_16;
    case 3:
      v10 = (void *)MEMORY[0x1E0CD2848];
      if (*a3)
        v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v11 = &stru_1E3487BC0;
      v6 = (const void *)objc_msgSend(v10, "animationWithKeyPath:", v11);
      v7 = v6;
      if (v6)
LABEL_15:
        CFRetain(v6);
LABEL_16:
      v12 = *(const void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v7;
      if (v12)
        CFRelease(v12);
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_195265710(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

WebCore::PlatformCAAnimationCocoa *WebCore::PlatformCAAnimationCocoa::PlatformCAAnimationCocoa(WebCore::PlatformCAAnimationCocoa *this, CAAnimation *a2)
{
  char v4;
  const void *v5;

  *((_DWORD *)this + 2) = 1;
  *((_BYTE *)this + 12) = 0;
  *(_QWORD *)this = off_1E334E650;
  *((_QWORD *)this + 2) = 0;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v4 = 3;
    else
      v4 = 0;
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v4 = 2;
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        return this;
      v4 = 1;
    }
  }
  *((_BYTE *)this + 12) = v4;
  if (a2)
    CFRetain(a2);
  v5 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = a2;
  if (v5)
    CFRelease(v5);
  return this;
}

void sub_195265814(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void WebCore::PlatformCAAnimationCocoa::~PlatformCAAnimationCocoa(WebCore::PlatformCAAnimationCocoa *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    CFRelease(v2);
}

void WebCore::PlatformCAAnimationCocoa::~PlatformCAAnimationCocoa(WebCore::PlatformCAAnimationCocoa *this, void *a2)
{
  const void *v3;

  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::PlatformCAAnimationCocoa::copy@<X0>(id *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  WTF::StringImpl *v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  WTF::StringImpl *v18;

  v4 = *((unsigned __int8 *)this + 12);
  if (v4 == 1)
  {
    v5 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v5 += 2;
    v18 = v5;
  }
  else
  {
    MEMORY[0x19AEA5508](&v18, objc_msgSend(this[2], "keyPath"));
  }
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  WebCore::PlatformCAAnimationCocoa::PlatformCAAnimationCocoa((uint64_t)v6, v4, &v18);
  *a2 = v6;
  v8 = v18;
  v18 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  objc_msgSend(this[2], "beginTime");
  (*(void (**)(_QWORD *))(*v6 + 64))(v6);
  objc_msgSend(this[2], "duration");
  (*(void (**)(_QWORD *))(*v6 + 80))(v6);
  objc_msgSend(this[2], "speed");
  (*(void (**)(_QWORD *))(*v6 + 96))(v6);
  objc_msgSend(this[2], "timeOffset");
  (*(void (**)(_QWORD *))(*v6 + 112))(v6);
  objc_msgSend(this[2], "repeatCount");
  (*(void (**)(_QWORD *))(*v6 + 128))(v6);
  (*(void (**)(_QWORD *, uint64_t))(*v6 + 144))(v6, objc_msgSend(this[2], "autoreverses"));
  v9 = (void *)objc_msgSend(this[2], "fillMode");
  if ((objc_msgSend(v9, "isEqualToString:", *MEMORY[0x1E0CD2B50]) & 1) != 0)
  {
    v10 = 2;
  }
  else if (objc_msgSend(v9, "isEqualToString:", *MEMORY[0x1E0CD2B58]))
  {
    v10 = 3;
  }
  else
  {
    v10 = 1;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v6 + 160))(v6, v10);
  (*(void (**)(_QWORD *, uint64_t))(*v6 + 192))(v6, objc_msgSend(this[2], "isRemovedOnCompletion"));
  if (*((_BYTE *)this + 12) == 1)
    v11 = 0;
  else
    v11 = objc_msgSend(this[2], "isAdditive");
  (*(void (**)(_QWORD *, uint64_t))(*v6 + 208))(v6, v11);
  (*(void (**)(_QWORD *, id *))(*v6 + 176))(v6, this);
  v12 = WebCore::PlatformCAAnimationCocoa::valueFunction((WebCore::PlatformCAAnimationCocoa *)this);
  (*(void (**)(_QWORD *, uint64_t))(*v6 + 224))(v6, v12);
  if (((*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6) & 1) != 0)
  {
    v13 = (void *)v6[2];
    v14 = objc_msgSend((id)objc_msgSend(this[2], "valueForKey:", CFSTR("WKPlatformCAAnimationExplicitBeginTimeFlag")), "BOOLValue");
    objc_msgSend(v13, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v14), CFSTR("WKPlatformCAAnimationExplicitBeginTimeFlag"));
    v15 = *v6;
    if (*((_BYTE *)this + 12) == 2)
    {
      (*(void (**)(_QWORD *, id *))(v15 + 368))(v6, this);
      (*(void (**)(_QWORD *, id *))(*v6 + 384))(v6, this);
      v16 = 50;
    }
    else
    {
      (*(void (**)(_QWORD *, id *))(v15 + 272))(v6, this);
      v16 = 40;
    }
    return (*(uint64_t (**)(_QWORD *, id *))(*v6 + 8 * v16))(v6, this);
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

void sub_195265B80(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  WTF *v10;
  WTF::StringImpl *v12;

  WTF::fastFree(v10, a2);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v12);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformCAAnimationCocoa::keyPath@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;

  if (*(_BYTE *)(this + 12) != 1)
  {
    objc_msgSend(*(id *)(this + 16), "keyPath");
    JUMPOUT(0x19AEA5508);
  }
  v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v3 += 2;
  *a2 = v3;
  return this;
}

uint64_t WebCore::PlatformCAAnimationCocoa::beginTime(id *this)
{
  return objc_msgSend(this[2], "beginTime");
}

uint64_t WebCore::PlatformCAAnimationCocoa::duration(id *this)
{
  return objc_msgSend(this[2], "duration");
}

uint64_t WebCore::PlatformCAAnimationCocoa::speed(id *this)
{
  return objc_msgSend(this[2], "speed");
}

uint64_t WebCore::PlatformCAAnimationCocoa::timeOffset(id *this)
{
  return objc_msgSend(this[2], "timeOffset");
}

uint64_t WebCore::PlatformCAAnimationCocoa::repeatCount(id *this)
{
  return objc_msgSend(this[2], "repeatCount");
}

uint64_t WebCore::PlatformCAAnimationCocoa::autoreverses(id *this)
{
  return objc_msgSend(this[2], "autoreverses");
}

uint64_t WebCore::PlatformCAAnimationCocoa::fillMode(id *this)
{
  void *v1;

  v1 = (void *)objc_msgSend(this[2], "fillMode");
  if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0CD2B50]) & 1) != 0)
    return 2;
  if (objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0CD2B58]))
    return 3;
  return 1;
}

uint64_t WebCore::PlatformCAAnimationCocoa::isRemovedOnCompletion(id *this)
{
  return objc_msgSend(this[2], "isRemovedOnCompletion");
}

uint64_t WebCore::PlatformCAAnimationCocoa::isAdditive(id *this)
{
  if (*((_BYTE *)this + 12) == 1)
    return 0;
  else
    return objc_msgSend(this[2], "isAdditive");
}

uint64_t WebCore::PlatformCAAnimationCocoa::valueFunction(WebCore::PlatformCAAnimationCocoa *this)
{
  void *v2;

  if (*((_BYTE *)this + 12) == 1)
    return 0;
  v2 = (void *)objc_msgSend((id)objc_msgSend(*((id *)this + 2), "valueFunction"), "name");
  if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0CD31B0]) & 1) != 0)
    return 1;
  if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0CD31B8]) & 1) != 0)
    return 2;
  if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0CD31C0]) & 1) != 0)
    return 3;
  if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0CD31D0]) & 1) != 0)
    return 4;
  if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0CD31D8]) & 1) != 0)
    return 5;
  if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0CD31E0]) & 1) != 0)
    return 6;
  if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0CD31C8]) & 1) != 0)
    return 7;
  if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0CD31F0]) & 1) != 0)
    return 8;
  if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0CD31F8]) & 1) != 0)
    return 9;
  if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0CD3200]) & 1) != 0)
    return 10;
  if (objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0CD31E8]))
    return 11;
  return 0;
}

uint64_t WebCore::PlatformCAAnimationCocoa::setBeginTime(id *this, double a2)
{
  uint64_t result;

  result = objc_msgSend(this[2], "setBeginTime:");
  if (a2 != 0.0)
    return objc_msgSend(this[2], "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1), CFSTR("WKPlatformCAAnimationExplicitBeginTimeFlag"));
  return result;
}

uint64_t WebCore::PlatformCAAnimationCocoa::setDuration(id *this, double a2)
{
  return objc_msgSend(this[2], "setDuration:", a2);
}

uint64_t WebCore::PlatformCAAnimationCocoa::setSpeed(id *this, float a2)
{
  return objc_msgSend(this[2], "setSpeed:");
}

uint64_t WebCore::PlatformCAAnimationCocoa::setTimeOffset(id *this, double a2)
{
  return objc_msgSend(this[2], "setTimeOffset:", a2);
}

uint64_t WebCore::PlatformCAAnimationCocoa::setRepeatCount(id *this, float a2)
{
  return objc_msgSend(this[2], "setRepeatCount:");
}

uint64_t WebCore::PlatformCAAnimationCocoa::setAutoreverses(id *this, uint64_t a2)
{
  return objc_msgSend(this[2], "setAutoreverses:", a2);
}

uint64_t WebCore::PlatformCAAnimationCocoa::setFillMode(uint64_t a1, unsigned int a2)
{
  void *v2;
  const __CFString **v3;
  const __CFString *v4;

  v2 = *(void **)(a1 + 16);
  if (a2 < 2)
  {
    v3 = (const __CFString **)MEMORY[0x1E0CD2B60];
  }
  else if (a2 == 2)
  {
    v3 = (const __CFString **)MEMORY[0x1E0CD2B50];
  }
  else
  {
    if (a2 != 3)
    {
      v4 = &stru_1E3487BC0;
      return objc_msgSend(v2, "setFillMode:", v4);
    }
    v3 = (const __CFString **)MEMORY[0x1E0CD2B58];
  }
  v4 = *v3;
  return objc_msgSend(v2, "setFillMode:", v4);
}

uint64_t WebCore::PlatformCAAnimationCocoa::setTimingFunction(uint64_t this, const WebCore::TimingFunction *a2, WebCore::TimingFunction *a3)
{
  uint64_t v4;
  int v5;
  void *v6;

  v4 = this;
  v5 = *(unsigned __int8 *)(this + 12);
  if (!*(_BYTE *)(this + 12))
    return objc_msgSend(*(id *)(this + 16), "setTimingFunction:", WebCore::toCAMediaTimingFunction(a2, a3));
  if (v5 != 3)
  {
    if (v5 != 2)
      return this;
    return objc_msgSend(*(id *)(this + 16), "setTimingFunction:", WebCore::toCAMediaTimingFunction(a2, a3));
  }
  this = (*(uint64_t (**)(const WebCore::TimingFunction *, const WebCore::TimingFunction *, WebCore::TimingFunction *))(*(_QWORD *)a2 + 24))(a2, a2, a3);
  if ((_DWORD)this == 3)
  {
    v6 = *(void **)(v4 + 16);
    objc_msgSend(v6, "setMass:", *((double *)a2 + 2));
    objc_msgSend(v6, "setStiffness:", *((double *)a2 + 3));
    objc_msgSend(v6, "setDamping:", *((double *)a2 + 4));
    return objc_msgSend(v6, "setInitialVelocity:", *((double *)a2 + 5));
  }
  return this;
}

uint64_t WebCore::PlatformCAAnimationCocoa::copyTimingFunctionFrom(WebCore::PlatformCAAnimationCocoa *this, id *a2)
{
  void *v3;
  uint64_t result;

  v3 = (void *)*((_QWORD *)this + 2);
  if (((*((uint64_t (**)(id *))*a2 + 2))(a2) & 1) != 0)
    return objc_msgSend(v3, "setTimingFunction:", objc_msgSend(a2[2], "timingFunction"));
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::PlatformCAAnimationCocoa::setRemovedOnCompletion(id *this, uint64_t a2)
{
  return objc_msgSend(this[2], "setRemovedOnCompletion:", a2);
}

uint64_t WebCore::PlatformCAAnimationCocoa::setAdditive(uint64_t this, uint64_t a2)
{
  if (*(_BYTE *)(this + 12) != 1)
    return objc_msgSend(*(id *)(this + 16), "setAdditive:", a2);
  return this;
}

uint64_t WebCore::PlatformCAAnimationCocoa::setValueFunction(uint64_t result, int a2)
{
  const __CFString **v2;
  const __CFString *v3;

  if (*(_BYTE *)(result + 12) != 1)
  {
    switch(a2)
    {
      case 1:
        v2 = (const __CFString **)MEMORY[0x1E0CD31B0];
        goto LABEL_15;
      case 2:
        v2 = (const __CFString **)MEMORY[0x1E0CD31B8];
        goto LABEL_15;
      case 3:
        v2 = (const __CFString **)MEMORY[0x1E0CD31C0];
        goto LABEL_15;
      case 4:
        v2 = (const __CFString **)MEMORY[0x1E0CD31D0];
        goto LABEL_15;
      case 5:
        v2 = (const __CFString **)MEMORY[0x1E0CD31D8];
        goto LABEL_15;
      case 6:
        v2 = (const __CFString **)MEMORY[0x1E0CD31E0];
        goto LABEL_15;
      case 7:
        v2 = (const __CFString **)MEMORY[0x1E0CD31C8];
        goto LABEL_15;
      case 8:
        v2 = (const __CFString **)MEMORY[0x1E0CD31F0];
        goto LABEL_15;
      case 9:
        v2 = (const __CFString **)MEMORY[0x1E0CD31F8];
        goto LABEL_15;
      case 10:
        v2 = (const __CFString **)MEMORY[0x1E0CD3200];
        goto LABEL_15;
      case 11:
        v2 = (const __CFString **)MEMORY[0x1E0CD31E8];
LABEL_15:
        v3 = *v2;
        break;
      default:
        v3 = &stru_1E3487BC0;
        break;
    }
    return objc_msgSend(*(id *)(result + 16), "setValueFunction:", objc_msgSend(MEMORY[0x1E0CD28D8], "functionWithName:", v3));
  }
  return result;
}

uint64_t WebCore::PlatformCAAnimationCocoa::setFromValue(uint64_t this, float a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(this + 12);
  if (v2 == 3 || v2 == 0)
    return objc_msgSend(*(id *)(this + 16), "setFromValue:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:"));
  return this;
}

uint64_t WebCore::PlatformCAAnimationCocoa::setFromValue(uint64_t this, float64x2_t *a2)
{
  int v2;
  void *v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  _OWORD v9[8];

  v2 = *(unsigned __int8 *)(this + 12);
  if (v2 == 3 || v2 == 0)
  {
    v4 = *(void **)(this + 16);
    v5 = vcvtq_f64_f32(vcvt_f32_f64(a2[1]));
    v9[0] = vcvtq_f64_f32(vcvt_f32_f64(*a2));
    v9[1] = v5;
    v6 = vcvtq_f64_f32(vcvt_f32_f64(a2[3]));
    v9[2] = vcvtq_f64_f32(vcvt_f32_f64(a2[2]));
    v9[3] = v6;
    v7 = vcvtq_f64_f32(vcvt_f32_f64(a2[5]));
    v9[4] = vcvtq_f64_f32(vcvt_f32_f64(a2[4]));
    v9[5] = v7;
    v8 = vcvtq_f64_f32(vcvt_f32_f64(a2[7]));
    v9[6] = vcvtq_f64_f32(vcvt_f32_f64(a2[6]));
    v9[7] = v8;
    return objc_msgSend(v4, "setFromValue:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCATransform3D:", v9));
  }
  return this;
}

uint64_t WebCore::PlatformCAAnimationCocoa::setFromValue(uint64_t result, _DWORD *a2, double a3)
{
  int v3;
  void *v6;
  double v7;
  double v8;
  _QWORD v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)(result + 12);
  if (v3 == 3 || v3 == 0)
  {
    v6 = *(void **)(result + 16);
    LODWORD(a3) = *a2;
    v9[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", a3);
    LODWORD(v7) = a2[1];
    v9[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v7, v9[0]);
    LODWORD(v8) = a2[2];
    v9[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v8);
    return objc_msgSend(v6, "setFromValue:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v9, 3));
  }
  return result;
}

uint64_t WebCore::PlatformCAAnimationCocoa::setFromValue(uint64_t this, const WebCore::Color *a2)
{
  int v2;
  uint64_t v4;
  unsigned int v5;
  void *v6;
  char v7;
  _QWORD v8[5];

  v8[4] = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(this + 12);
  if (v2 == 3 || v2 == 0)
  {
    v4 = this;
    v5 = WebCore::Color::callOnUnderlyingType<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossy<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&)#1}>((unint64_t *)a2, (uint64_t)&v7);
    v6 = *(void **)(v4 + 16);
    v8[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", v5);
    v8[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", BYTE1(v5));
    v8[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", BYTE2(v5));
    v8[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", HIBYTE(v5));
    return objc_msgSend(v6, "setFromValue:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v8, 4));
  }
  return this;
}

void WebCore::PlatformCAAnimationCocoa::setFromValue(WebCore::PlatformCAAnimationCocoa *this, const WebCore::FilterOperation *a2)
{
  void *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;

  WebCore::PlatformCAFilters::filterValueForOperation((unsigned __int8 *)a2, &v5);
  v3 = (void *)*((_QWORD *)this + 2);
  v4 = v5;
  objc_msgSend(v3, "setFromValue:", v5);
  if (v4)
    CFRelease(v4);
}

void sub_1952664B8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebCore::PlatformCAFilters::filterValueForOperation@<X0>(unsigned __int8 *this@<X0>, unsigned __int8 **a2@<X8>)
{
  uint64_t v3;
  int v5;
  unsigned __int8 *v6;
  double v7;
  float v8;
  float v9;
  int v10;
  float v12;
  void *v13;
  float v14;
  float v15;
  int v16;
  int v18;
  float v20;
  int v21;
  float v23;
  WebCore::Length *v24;
  int v25;
  float v26;
  float v27;
  _BYTE v28[12];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _BYTE v34[20];

  v3 = (uint64_t)this;
  v5 = this[12];
  if (v5 == 13)
  {
    v5 = this[13];
    v3 = 0;
  }
  v6 = 0;
  switch(v5)
  {
    case 1:
      if (!v3)
        goto LABEL_58;
      if (*(unsigned __int8 *)(v3 + 12) - 1 >= 4)
      {
        __break(0xC471u);
        JUMPOUT(0x195266554);
      }
      goto LABEL_10;
    case 2:
      this = (unsigned __int8 *)WebCore::PlatformCAFilters::colorMatrixValueForFilter(v28, 2, v3);
      v6 = *(unsigned __int8 **)v28;
      break;
    case 3:
      if (v3)
      {
        if (*(unsigned __int8 *)(v3 + 12) - 1 >= 4)
        {
          __break(0xC471u);
          JUMPOUT(0x195266894);
        }
LABEL_10:
        v7 = *(double *)(v3 + 16);
      }
      else
      {
        v7 = 1.0;
      }
      goto LABEL_77;
    case 4:
      if (!v3)
        goto LABEL_58;
      if (*(unsigned __int8 *)(v3 + 12) - 1 >= 4)
      {
        __break(0xC471u);
        JUMPOUT(0x1952668B4);
      }
      v7 = *(double *)(v3 + 16) * 0.0174532925;
      goto LABEL_77;
    case 5:
      v8 = 0.0;
      v9 = 0.0;
      if (v3)
      {
        v10 = *(unsigned __int8 *)(v3 + 12);
        if ((v10 - 7) >= 3 && v10 != 5)
        {
          __break(0xC471u);
          JUMPOUT(0x195266968);
        }
        v9 = *(double *)(v3 + 16);
      }
      if (v9 <= 1.0)
        v12 = v9;
      else
        v12 = 1.0;
      if (v9 >= 0.0)
        v8 = v12;
      v13 = (void *)MEMORY[0x1E0CB3B18];
      *(float *)v28 = (float)(v8 * -2.0) + 1.0;
      *(_QWORD *)&v28[4] = 0;
      LODWORD(v29) = 0;
      *((float *)&v29 + 1) = v8;
      LODWORD(v30) = 0;
      *((float *)&v30 + 1) = *(float *)v28;
      v31 = 0;
      *(float *)&v32 = v8;
      *(_QWORD *)((char *)&v32 + 4) = 0;
      *((float *)&v32 + 3) = *(float *)v28;
      LODWORD(v33) = 0;
      *((float *)&v33 + 1) = v8;
      goto LABEL_68;
    case 7:
      v14 = 1.0;
      v15 = 1.0;
      if (v3)
      {
        v16 = *(unsigned __int8 *)(v3 + 12);
        if ((v16 - 7) >= 3 && v16 != 5)
        {
          __break(0xC471u);
          JUMPOUT(0x195266908);
        }
        v15 = *(double *)(v3 + 16);
      }
      if (v15 <= 1.0)
        v14 = v15;
      v13 = (void *)MEMORY[0x1E0CB3B18];
      *(_DWORD *)v28 = 1065353216;
      v29 = 0;
      if (v15 < 0.0)
        v14 = 0.0;
      *(_QWORD *)&v28[4] = 0;
      v30 = 0x3F80000000000000;
      *(_QWORD *)&v32 = 0;
      v31 = 0;
      *((_QWORD *)&v32 + 1) = 0x3F80000000000000;
      *(_QWORD *)v34 = 0;
      v33 = 0;
      *(_DWORD *)&v34[8] = 0;
      *(float *)&v34[12] = v14;
      goto LABEL_69;
    case 8:
      if (v3)
      {
        v18 = *(unsigned __int8 *)(v3 + 12);
        if ((v18 - 7) >= 3 && v18 != 5)
        {
          __break(0xC471u);
          JUMPOUT(0x195266928);
        }
        v20 = *(double *)(v3 + 16);
      }
      else
      {
        v20 = 1.0;
      }
      v13 = (void *)MEMORY[0x1E0CB3B18];
      if (v20 < 0.0)
        v20 = 0.0;
      *(float *)v28 = v20;
      v29 = 0;
      *(_QWORD *)&v28[4] = 0;
      LODWORD(v30) = 0;
      *((float *)&v30 + 1) = v20;
      *(_QWORD *)&v32 = 0;
      v31 = 0;
      DWORD2(v32) = 0;
      *((float *)&v32 + 3) = v20;
      *(_QWORD *)v34 = 0;
      v33 = 0;
      *(_DWORD *)&v34[8] = 0;
      *(_QWORD *)&v34[12] = 1065353216;
      goto LABEL_70;
    case 9:
      if (v3)
      {
        v21 = *(unsigned __int8 *)(v3 + 12);
        if ((v21 - 7) >= 3 && v21 != 5)
        {
          __break(0xC471u);
          JUMPOUT(0x195266948);
        }
        v23 = *(double *)(v3 + 16);
      }
      else
      {
        v23 = 1.0;
      }
      if (v23 < 0.0)
        v23 = 0.0;
      v13 = (void *)MEMORY[0x1E0CB3B18];
      *(float *)v28 = v23;
      *(_QWORD *)&v28[4] = 0;
      LODWORD(v29) = 0;
      *((float *)&v29 + 1) = (float)(v23 * -0.5) + 0.5;
      LODWORD(v30) = 0;
      *((float *)&v30 + 1) = v23;
      v31 = 0;
      *(float *)&v32 = *((float *)&v29 + 1);
      *(_QWORD *)((char *)&v32 + 4) = 0;
      *((float *)&v32 + 3) = v23;
      LODWORD(v33) = 0;
      *((float *)&v33 + 1) = *((float *)&v29 + 1);
LABEL_68:
      *(_OWORD *)v34 = xmmword_1968BCE50;
LABEL_69:
      *(_DWORD *)&v34[16] = 0;
LABEL_70:
      this = (unsigned __int8 *)objc_msgSend(v13, "valueWithCAColorMatrix:", v28);
      goto LABEL_78;
    case 10:
      if (v3)
      {
        if (*(_BYTE *)(v3 + 12) != 10)
        {
          __break(0xC471u);
          JUMPOUT(0x1952668D4);
        }
        v24 = (WebCore::Length *)(v3 + 16);
        v25 = *(unsigned __int8 *)(v3 + 20);
        if (v25 == 4)
        {
          if (*(_BYTE *)(v3 + 22))
            v26 = *(float *)v24;
          else
            v26 = (float)*(int *)v24;
        }
        else if (v25 == 3)
        {
          v27 = *(float *)(v3 + 16);
          if (!*(_BYTE *)(v3 + 22))
            v27 = (float)SLODWORD(v27);
          v26 = (float)(v27 * 0.0) / 100.0;
        }
        else
        {
          v26 = 0.0;
          if (v25 == 11)
            WebCore::Length::nonNanCalculatedValue(v24, 0.0);
        }
        v7 = v26;
      }
      else
      {
LABEL_58:
        v7 = 0.0;
      }
LABEL_77:
      this = (unsigned __int8 *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v7);
LABEL_78:
      v6 = this;
      if (this)
        this = (unsigned __int8 *)CFRetain(this);
      break;
    default:
      break;
  }
  *a2 = v6;
  return this;
}

uint64_t WebCore::PlatformCAAnimationCocoa::copyFromValueFrom(uint64_t this, id *a2)
{
  int v2;
  int v5;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(this + 12);
  if (v2 == 3 || v2 == 0)
  {
    v5 = *((unsigned __int8 *)a2 + 12);
    if (v5 == 3 || v5 == 0)
    {
      v7 = this;
      if (((*((uint64_t (**)(id *))*a2 + 2))(a2) & 1) != 0)
      {
        return objc_msgSend(*(id *)(v7 + 16), "setFromValue:", objc_msgSend(a2[2], "fromValue"));
      }
      else
      {
        this = 96;
        __break(0xC471u);
      }
    }
  }
  return this;
}

uint64_t WebCore::PlatformCAAnimationCocoa::setToValue(uint64_t this, float a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(this + 12);
  if (v2 == 3 || v2 == 0)
    return objc_msgSend(*(id *)(this + 16), "setToValue:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:"));
  return this;
}

uint64_t WebCore::PlatformCAAnimationCocoa::setToValue(uint64_t this, float64x2_t *a2)
{
  int v2;
  void *v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  _OWORD v9[8];

  v2 = *(unsigned __int8 *)(this + 12);
  if (v2 == 3 || v2 == 0)
  {
    v4 = *(void **)(this + 16);
    v5 = vcvtq_f64_f32(vcvt_f32_f64(a2[1]));
    v9[0] = vcvtq_f64_f32(vcvt_f32_f64(*a2));
    v9[1] = v5;
    v6 = vcvtq_f64_f32(vcvt_f32_f64(a2[3]));
    v9[2] = vcvtq_f64_f32(vcvt_f32_f64(a2[2]));
    v9[3] = v6;
    v7 = vcvtq_f64_f32(vcvt_f32_f64(a2[5]));
    v9[4] = vcvtq_f64_f32(vcvt_f32_f64(a2[4]));
    v9[5] = v7;
    v8 = vcvtq_f64_f32(vcvt_f32_f64(a2[7]));
    v9[6] = vcvtq_f64_f32(vcvt_f32_f64(a2[6]));
    v9[7] = v8;
    return objc_msgSend(v4, "setToValue:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCATransform3D:", v9));
  }
  return this;
}

uint64_t WebCore::PlatformCAAnimationCocoa::setToValue(uint64_t result, _DWORD *a2, double a3)
{
  int v3;
  void *v6;
  double v7;
  double v8;
  _QWORD v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)(result + 12);
  if (v3 == 3 || v3 == 0)
  {
    v6 = *(void **)(result + 16);
    LODWORD(a3) = *a2;
    v9[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", a3);
    LODWORD(v7) = a2[1];
    v9[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v7, v9[0]);
    LODWORD(v8) = a2[2];
    v9[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v8);
    return objc_msgSend(v6, "setToValue:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v9, 3));
  }
  return result;
}

uint64_t WebCore::PlatformCAAnimationCocoa::setToValue(uint64_t this, const WebCore::Color *a2)
{
  int v2;
  uint64_t v4;
  unsigned int v5;
  void *v6;
  char v7;
  _QWORD v8[5];

  v8[4] = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(this + 12);
  if (v2 == 3 || v2 == 0)
  {
    v4 = this;
    v5 = WebCore::Color::callOnUnderlyingType<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossy<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&)#1}>((unint64_t *)a2, (uint64_t)&v7);
    v6 = *(void **)(v4 + 16);
    v8[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", v5);
    v8[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", BYTE1(v5));
    v8[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", BYTE2(v5));
    v8[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", HIBYTE(v5));
    return objc_msgSend(v6, "setToValue:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v8, 4));
  }
  return this;
}

void WebCore::PlatformCAAnimationCocoa::setToValue(WebCore::PlatformCAAnimationCocoa *this, const WebCore::FilterOperation *a2)
{
  void *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;

  WebCore::PlatformCAFilters::filterValueForOperation((unsigned __int8 *)a2, &v5);
  v3 = (void *)*((_QWORD *)this + 2);
  v4 = v5;
  objc_msgSend(v3, "setToValue:", v5);
  if (v4)
    CFRelease(v4);
}

void sub_195266D24(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlatformCAAnimationCocoa::copyToValueFrom(uint64_t this, id *a2)
{
  int v2;
  int v5;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(this + 12);
  if (v2 == 3 || v2 == 0)
  {
    v5 = *((unsigned __int8 *)a2 + 12);
    if (v5 == 3 || v5 == 0)
    {
      v7 = this;
      if (((*((uint64_t (**)(id *))*a2 + 2))(a2) & 1) != 0)
      {
        return objc_msgSend(*(id *)(v7 + 16), "setToValue:", objc_msgSend(a2[2], "toValue"));
      }
      else
      {
        this = 96;
        __break(0xC471u);
      }
    }
  }
  return this;
}

void WebCore::PlatformCAAnimationCocoa::setValues(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  double v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 12) == 2)
  {
    v3 = *(void **)(a1 + 16);
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a2 + 12));
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(_DWORD **)a2;
      v8 = 4 * v6;
      do
      {
        LODWORD(v5) = *v7;
        v9 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v5);
        if (v9)
          objc_msgSend(v4, "addObject:", v9);
        ++v7;
        v8 -= 4;
      }
      while (v8);
    }
    objc_msgSend(v3, "setValues:", v4);
    if (v4)
      CFRelease(v4);
  }
}

{
  void *v3;
  void *v4;
  uint64_t v5;
  float64x2_t *v6;
  float64x2_t *v7;
  uint64_t v8;
  _OWORD v9[8];

  if (*(_BYTE *)(a1 + 12) == 2)
  {
    v3 = *(void **)(a1 + 16);
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a2 + 12));
    v5 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v5)
    {
      v6 = *(float64x2_t **)a2;
      v7 = &v6[8 * v5];
      do
      {
        v9[0] = vcvtq_f64_f32(vcvt_f32_f64(*v6));
        v9[1] = vcvtq_f64_f32(vcvt_f32_f64(v6[1]));
        v9[2] = vcvtq_f64_f32(vcvt_f32_f64(v6[2]));
        v9[3] = vcvtq_f64_f32(vcvt_f32_f64(v6[3]));
        v9[4] = vcvtq_f64_f32(vcvt_f32_f64(v6[4]));
        v9[5] = vcvtq_f64_f32(vcvt_f32_f64(v6[5]));
        v9[6] = vcvtq_f64_f32(vcvt_f32_f64(v6[6]));
        v9[7] = vcvtq_f64_f32(vcvt_f32_f64(v6[7]));
        v8 = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCATransform3D:", v9);
        if (v8)
          objc_msgSend(v4, "addObject:", v8);
        v6 += 8;
      }
      while (v6 != v7);
    }
    objc_msgSend(v3, "setValues:", v4);
    if (v4)
      CFRelease(v4);
  }
}

{
  void *v3;
  void *v4;
  double v5;
  int v6;
  _DWORD *v7;
  _DWORD *v8;
  double v9;
  double v10;
  uint64_t v11;
  _QWORD v12[4];

  v12[3] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 12) == 2)
  {
    v3 = *(void **)(a1 + 16);
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a2 + 12));
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v7 = *(_DWORD **)a2;
      v8 = &v7[3 * v6];
      do
      {
        LODWORD(v5) = *v7;
        v12[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v5);
        LODWORD(v9) = v7[1];
        v12[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v9, v12[0]);
        LODWORD(v10) = v7[2];
        v12[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v10);
        v11 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v12, 3);
        if (v11)
          objc_msgSend(v4, "addObject:", v11);
        v7 += 3;
      }
      while (v7 != v8);
    }
    objc_msgSend(v3, "setValues:", v4);
    if (v4)
      CFRelease(v4);
  }
}

{
  void *v3;
  void *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD v10[5];

  v10[4] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 12) == 2)
  {
    v3 = *(void **)(a1 + 16);
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a2 + 12));
    v5 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v5)
    {
      v6 = *(unint64_t **)a2;
      v7 = 8 * v5;
      do
      {
        v8 = WebCore::Color::callOnUnderlyingType<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossy<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&)#1}>(v6, (uint64_t)v10);
        v10[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", v8);
        v10[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", BYTE1(v8));
        v10[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", BYTE2(v8));
        v10[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", HIBYTE(v8));
        v9 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 4);
        if (v9)
          objc_msgSend(v4, "addObject:", v9);
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
    objc_msgSend(v3, "setValues:", v4);
    if (v4)
      CFRelease(v4);
  }
}

{
  void *v3;
  void *v4;
  uint64_t v5;
  unsigned __int8 **v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;

  if (*(_BYTE *)(a1 + 12) == 2)
  {
    v3 = *(void **)(a1 + 16);
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a2 + 12));
    v5 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v5)
    {
      v6 = *(unsigned __int8 ***)a2;
      v7 = 8 * v5;
      do
      {
        WebCore::PlatformCAFilters::filterValueForOperation(*v6, &v9);
        v8 = v9;
        if (v9)
        {
          objc_msgSend(v4, "addObject:", v9);
          CFRelease(v8);
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
    objc_msgSend(v3, "setValues:", v4);
    if (v4)
      CFRelease(v4);
  }
}

void sub_195266E88(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_195266FD4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_195267108(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_195267260(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_195267348(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlatformCAAnimationCocoa::copyValuesFrom(uint64_t this, id *a2)
{
  uint64_t v4;

  if (*(_BYTE *)(this + 12) == 2 && *((_BYTE *)a2 + 12) == 2)
  {
    v4 = this;
    if (((*((uint64_t (**)(id *))*a2 + 2))(a2) & 1) != 0)
    {
      return objc_msgSend(*(id *)(v4 + 16), "setValues:", objc_msgSend(a2[2], "values"));
    }
    else
    {
      this = 96;
      __break(0xC471u);
    }
  }
  return this;
}

void WebCore::PlatformCAAnimationCocoa::setKeyTimes(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  double v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(void **)(a1 + 16);
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a2 + 12));
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)a2;
    v8 = 4 * v6;
    do
    {
      LODWORD(v5) = *v7;
      v9 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v5);
      if (v9)
        objc_msgSend(v4, "addObject:", v9);
      ++v7;
      v8 -= 4;
    }
    while (v8);
  }
  objc_msgSend(v3, "setKeyTimes:", v4);
  if (v4)
    CFRelease(v4);
}

void sub_1952674A8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlatformCAAnimationCocoa::copyKeyTimesFrom(id *this, id *a2)
{
  uint64_t result;

  if (((*((uint64_t (**)(id *))*a2 + 2))(a2) & 1) != 0)
    return objc_msgSend(this[2], "setKeyTimes:", objc_msgSend(a2[2], "keyTimes"));
  result = 96;
  __break(0xC471u);
  return result;
}

void WebCore::PlatformCAAnimationCocoa::setTimingFunctions(uint64_t a1, uint64_t a2, const WebCore::TimingFunction *a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  WebCore **v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void **)(a1 + 16);
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a2 + 12));
  v7 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v7)
  {
    v8 = *(WebCore ***)a2;
    v9 = 8 * v7;
    do
    {
      v10 = WebCore::toCAMediaTimingFunction(*v8, a3);
      if (v10)
        objc_msgSend(v6, "addObject:", v10);
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  objc_msgSend(v5, "setTimingFunctions:", v6);
  if (v6)
    CFRelease(v6);
}

void sub_1952675D8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlatformCAAnimationCocoa::copyTimingFunctionsFrom(id *this, id *a2)
{
  uint64_t result;

  if (((*((uint64_t (**)(id *))*a2 + 2))(a2) & 1) != 0)
    return objc_msgSend(this[2], "setTimingFunctions:", objc_msgSend(a2[2], "timingFunctions"));
  result = 96;
  __break(0xC471u);
  return result;
}

void WebCore::PlatformCAAnimationCocoa::setAnimations(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = *(void **)(a1 + 16);
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a2 + 12));
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD **)a2;
    v7 = 8 * v5;
    do
    {
      v8 = (_QWORD *)*v6;
      if (*v6 && (*(unsigned int (**)(_QWORD))(*v8 + 16))(*v6) && v8[2])
        objc_msgSend(v4, "addObject:");
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  objc_msgSend(v3, "setAnimations:", v4);
  if (v4)
    CFRelease(v4);
}

void sub_195267714(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlatformCAAnimationCocoa::copyAnimationsFrom(id *this, id *a2)
{
  uint64_t result;

  if (((*((uint64_t (**)(id *))*a2 + 2))(a2) & 1) != 0)
    return objc_msgSend(this[2], "setAnimations:", objc_msgSend(a2[2], "animations"));
  result = 96;
  __break(0xC471u);
  return result;
}

void WebCore::PlatformCAFilters::setFiltersOnLayer(WebCore::PlatformCAFilters *this, CALayer *a2, const WebCore::FilterOperations *a3)
{
  int v4;
  void *v6;
  uint64_t magic;
  uint64_t v8;
  Class isa;
  const __CFString *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  void *v13;
  uint64_t v14;
  double v15;
  double v16;
  float v17;
  float v18;
  float v19;
  const void *v20;
  const void *v21;
  float v22;
  const void *v23;
  float v24;
  const void *v25;
  double v26;
  float v27;
  float v28;
  float v29;
  const void *v30;
  const __CFString *v31;
  const WebCore::Color *v32;
  const void *v33;
  double v34;
  double v35;
  void *v36;
  WebCore::Length *v37;
  int v38;
  float v39;
  const __CFString *v40;
  WTF::StringImpl *v41;
  double v42;
  const __CFString *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  _BYTE cf[12];
  uint64_t v51;
  int v52;
  float v53;
  uint64_t v54;
  float v55[3];
  float v56;
  uint64_t v57;
  _BYTE v58[20];

  if (a2->_attr.magic)
  {
    v4 = (int)a3;
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", a2->_attr.magic);
    magic = a2->_attr.magic;
    if ((_DWORD)magic)
    {
      v8 = 0;
      isa = a2->super.isa;
      v48 = *MEMORY[0x1E0CD2BF0];
      v47 = *MEMORY[0x1E0CD2BD8];
      v46 = *MEMORY[0x1E0CD2C00];
      v10 = CFSTR("inputNormalizeEdges");
      if (!v4)
        v10 = CFSTR("inputHardEdges");
      v11 = 8 * magic;
      v45 = *MEMORY[0x1E0CD2BF8];
      v43 = v10;
      v44 = *MEMORY[0x1E0CD2C88];
      do
      {
        WTF::makeString<WTF::ASCIILiteral,unsigned int>((uint64_t)"filter_", 8, v8, &v49);
        v13 = 0;
        v14 = *((_QWORD *)isa + v8);
        switch(*(_BYTE *)(v14 + 12))
        {
          case 1:
            v13 = (void *)objc_msgSend(MEMORY[0x1E0CD2780], "filterWithType:", v45);
            v15 = *(double *)(v14 + 16);
            *(float *)&v15 = v15;
            objc_msgSend(v13, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v15), CFSTR("inputAmount"));
            if (v49)
              goto LABEL_63;
            v40 = &stru_1E3487BC0;
            goto LABEL_64;
          case 2:
            WebCore::PlatformCAFilters::colorMatrixValueForFilter(cf, 2, *((_QWORD *)isa + v8));
            v13 = (void *)objc_msgSend(MEMORY[0x1E0CD2780], "filterWithType:", v48);
            v21 = *(const void **)cf;
            objc_msgSend(v13, "setValue:forKey:", *(_QWORD *)cf, CFSTR("inputColorMatrix"));
            if (v49)
              goto LABEL_46;
            v31 = &stru_1E3487BC0;
            goto LABEL_47;
          case 3:
            v13 = (void *)objc_msgSend(MEMORY[0x1E0CD2780], "filterWithType:", v46);
            v16 = *(double *)(v14 + 16);
            *(float *)&v16 = v16;
            objc_msgSend(v13, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v16), CFSTR("inputAmount"));
            if (v49)
              goto LABEL_63;
            v40 = &stru_1E3487BC0;
            goto LABEL_64;
          case 4:
            v13 = (void *)objc_msgSend(MEMORY[0x1E0CD2780], "filterWithType:", v47);
            v26 = *(double *)(v14 + 16) * 0.0174532925;
            *(float *)&v26 = v26;
            objc_msgSend(v13, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v26), CFSTR("inputAngle"));
            if (v49)
              goto LABEL_63;
            v40 = &stru_1E3487BC0;
            goto LABEL_64;
          case 5:
            v27 = *(double *)(v14 + 16);
            if (v27 <= 1.0)
              v28 = *(double *)(v14 + 16);
            else
              v28 = 1.0;
            if (v27 >= 0.0)
              v29 = v28;
            else
              v29 = 0.0;
            *(float *)cf = (float)(v29 * -2.0) + 1.0;
            *(_QWORD *)&cf[4] = 0;
            LODWORD(v51) = 0;
            *((float *)&v51 + 1) = v29;
            v52 = 0;
            v53 = *(float *)cf;
            v54 = 0;
            v55[0] = v29;
            *(_QWORD *)&v55[1] = 0;
            v56 = *(float *)cf;
            LODWORD(v57) = 0;
            *((float *)&v57 + 1) = v29;
            *(_OWORD *)v58 = xmmword_1968BCE50;
            *(_DWORD *)&v58[16] = 0;
            v30 = (const void *)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCAColorMatrix:", cf);
            v21 = v30;
            if (v30)
              CFRetain(v30);
            v13 = (void *)objc_msgSend(MEMORY[0x1E0CD2780], "filterWithType:", v48);
            objc_msgSend(v13, "setValue:forKey:", v21, CFSTR("inputColorMatrix"));
            if (v49)
              goto LABEL_46;
            v31 = &stru_1E3487BC0;
            goto LABEL_47;
          case 7:
            v17 = *(double *)(v14 + 16);
            if (v17 <= 1.0)
              v18 = *(double *)(v14 + 16);
            else
              v18 = 1.0;
            if (v17 >= 0.0)
              v19 = v18;
            else
              v19 = 0.0;
            *(_QWORD *)&cf[4] = 0;
            v51 = 0;
            v52 = 0;
            *(_DWORD *)cf = 1065353216;
            v53 = 1.0;
            v54 = 0;
            memset(v55, 0, sizeof(v55));
            v56 = 1.0;
            v57 = 0;
            *(_QWORD *)v58 = 0;
            *(_DWORD *)&v58[8] = 0;
            *(_QWORD *)&v58[12] = LODWORD(v19);
            v20 = (const void *)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCAColorMatrix:", cf);
            v21 = v20;
            if (v20)
              CFRetain(v20);
            v13 = (void *)objc_msgSend(MEMORY[0x1E0CD2780], "filterWithType:", v48);
            objc_msgSend(v13, "setValue:forKey:", v21, CFSTR("inputColorMatrix"));
            if (v49)
              goto LABEL_46;
            v31 = &stru_1E3487BC0;
            goto LABEL_47;
          case 8:
            v22 = *(double *)(v14 + 16);
            if (v22 < 0.0)
              v22 = 0.0;
            *(_QWORD *)&cf[4] = 0;
            v51 = 0;
            v52 = 0;
            *(float *)cf = v22;
            v53 = v22;
            v54 = 0;
            memset(v55, 0, sizeof(v55));
            v56 = v22;
            v57 = 0;
            *(_QWORD *)v58 = 0;
            *(_DWORD *)&v58[8] = 0;
            *(_QWORD *)&v58[12] = 1065353216;
            v23 = (const void *)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCAColorMatrix:", cf);
            v21 = v23;
            if (v23)
              CFRetain(v23);
            v13 = (void *)objc_msgSend(MEMORY[0x1E0CD2780], "filterWithType:", v48);
            objc_msgSend(v13, "setValue:forKey:", v21, CFSTR("inputColorMatrix"));
            if (v49)
              goto LABEL_46;
            v31 = &stru_1E3487BC0;
            goto LABEL_47;
          case 9:
            v24 = *(double *)(v14 + 16);
            if (v24 < 0.0)
              v24 = 0.0;
            *(float *)cf = v24;
            *(_QWORD *)&cf[4] = 0;
            LODWORD(v51) = 0;
            *((float *)&v51 + 1) = (float)(v24 * -0.5) + 0.5;
            v52 = 0;
            v53 = v24;
            v54 = 0;
            v55[0] = *((float *)&v51 + 1);
            *(_QWORD *)&v55[1] = 0;
            v56 = v24;
            LODWORD(v57) = 0;
            *((float *)&v57 + 1) = *((float *)&v51 + 1);
            *(_OWORD *)v58 = xmmword_1968BCE50;
            *(_DWORD *)&v58[16] = 0;
            v25 = (const void *)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCAColorMatrix:", cf);
            v21 = v25;
            if (v25)
              CFRetain(v25);
            v13 = (void *)objc_msgSend(MEMORY[0x1E0CD2780], "filterWithType:", v48);
            objc_msgSend(v13, "setValue:forKey:", v21, CFSTR("inputColorMatrix"));
            if (v49)
LABEL_46:
              v31 = (const __CFString *)WTF::StringImpl::operator NSString *();
            else
              v31 = &stru_1E3487BC0;
LABEL_47:
            objc_msgSend(v13, "setName:", v31);
            if (v21)
              CFRelease(v21);
            break;
          case 0xA:
            v13 = (void *)objc_msgSend(MEMORY[0x1E0CD2780], "filterWithType:", v44);
            v36 = (void *)MEMORY[0x1E0CB37E8];
            v37 = (WebCore::Length *)(v14 + 16);
            v38 = *(unsigned __int8 *)(v14 + 20);
            if (v38 == 4)
            {
              if (*(_BYTE *)(v14 + 22))
                LODWORD(v35) = *(_DWORD *)v37;
              else
                *(float *)&v35 = (float)*(int *)v37;
            }
            else if (v38 == 3)
            {
              v39 = *(float *)(v14 + 16);
              if (!*(_BYTE *)(v14 + 22))
                v39 = (float)*(int *)(v14 + 16);
              *(float *)&v35 = (float)(v39 * 0.0) / 100.0;
            }
            else
            {
              LODWORD(v35) = 0;
              if (v38 == 11)
                WebCore::Length::nonNanCalculatedValue(v37, 0.0);
            }
            objc_msgSend(v13, "setValue:forKey:", objc_msgSend(v36, "numberWithFloat:", v35), CFSTR("inputRadius"));
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              objc_msgSend(v13, "setValue:forKey:", MEMORY[0x1E0C9AAB0], v43);
            if (v49)
LABEL_63:
              v40 = (const __CFString *)WTF::StringImpl::operator NSString *();
            else
              v40 = &stru_1E3487BC0;
LABEL_64:
            objc_msgSend(v13, "setName:", v40);
            break;
          case 0xB:
            -[WebCore::PlatformCAFilters setShadowOffset:](this, "setShadowOffset:", (double)*(int *)(v14 + 16), (double)*(int *)(v14 + 20));
            WebCore::cachedCGColor((WebCore *)(v14 + 32), v32, cf);
            -[WebCore::PlatformCAFilters setShadowColor:](this, "setShadowColor:", *(_QWORD *)cf);
            v33 = *(const void **)cf;
            *(_QWORD *)cf = 0;
            if (v33)
              CFRelease(v33);
            -[WebCore::PlatformCAFilters setShadowRadius:](this, "setShadowRadius:", (double)*(int *)(v14 + 24));
            LODWORD(v34) = 1.0;
            -[WebCore::PlatformCAFilters setShadowOpacity:](this, "setShadowOpacity:", v34);
            v13 = 0;
            break;
          default:
            break;
        }
        v41 = v49;
        v49 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
          {
            WTF::StringImpl::destroy(v41, v12);
            if (!v13)
              goto LABEL_70;
LABEL_69:
            objc_msgSend(v6, "addObject:", v13);
            goto LABEL_70;
          }
          *(_DWORD *)v41 -= 2;
        }
        if (v13)
          goto LABEL_69;
LABEL_70:
        ++v8;
        v11 -= 8;
      }
      while (v11);
    }
    if (objc_msgSend(v6, "count"))
      -[WebCore::PlatformCAFilters setFilters:](this, "setFilters:", v6);
    if (v6)
      CFRelease(v6);
  }
  else
  {
    -[WebCore::PlatformCAFilters setFilters:](this, "setFilters:", 0);
    -[WebCore::PlatformCAFilters setShadowOffset:](this, "setShadowOffset:", *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8));
    -[WebCore::PlatformCAFilters setShadowColor:](this, "setShadowColor:", 0);
    -[WebCore::PlatformCAFilters setShadowRadius:](this, "setShadowRadius:", 0.0);
    LODWORD(v42) = 0;
    -[WebCore::PlatformCAFilters setShadowOpacity:](this, "setShadowOpacity:", v42);
  }
}

void sub_195267FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, CFTypeRef cf,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  const void *v62;
  NSException *v65;

  if (v62)
    CFRelease(v62);
  if (a2 == 1)
  {
    v65 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v65);
    objc_end_catch();
    JUMPOUT(0x195267F90);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebCore::PlatformCAFilters::colorMatrixValueForFilter(_QWORD *result, int a2, uint64_t a3)
{
  _QWORD *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  void *v8;
  float32x2_t *v9;
  float v10;
  float v11;
  int v12;
  float v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  float32x2_t v21;
  _BYTE v22[24];
  uint64_t v23;
  float32x2_t v24;
  _BYTE v25[24];
  uint64_t v26;

  v3 = result;
  if (a2 == 5)
  {
    v10 = 0.0;
    v11 = 0.0;
    if (a3)
    {
      v12 = *(unsigned __int8 *)(a3 + 12);
      if ((v12 - 7) >= 3 && v12 != 5)
        goto LABEL_28;
      v11 = *(double *)(a3 + 16);
    }
    if (v11 <= 1.0)
      v14 = v11;
    else
      v14 = 1.0;
    if (v11 >= 0.0)
      v10 = v14;
    v8 = (void *)MEMORY[0x1E0CB3B18];
    *(float *)&v15 = (float)(v10 * -2.0) + 1.0;
    *(_QWORD *)((char *)&v15 + 4) = 0;
    HIDWORD(v15) = 0;
    v16 = LODWORD(v10);
    *(float *)&v17 = *(float *)&v15;
    *(_QWORD *)((char *)&v17 + 4) = 0;
    *((float *)&v17 + 3) = v10;
    v18 = 0;
    *(float *)&v19 = *(float *)&v15;
    HIDWORD(v19) = 0;
    *(float *)v20 = v10;
    *(_OWORD *)&v20[4] = xmmword_1968BCE50;
    *(_DWORD *)&v20[20] = 0;
    v9 = (float32x2_t *)&v15;
    goto LABEL_24;
  }
  if (a2 != 2)
  {
    *result = 0;
    return result;
  }
  v4 = 0.0;
  v5 = 0.0;
  if (!a3)
    goto LABEL_6;
  if (*(unsigned __int8 *)(a3 + 12) - 1 >= 4)
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x195268300);
  }
  v5 = *(double *)(a3 + 16);
LABEL_6:
  v6 = 1.0;
  v7 = 1.0 - v5;
  if (v7 <= 1.0)
    v6 = v7;
  if (v7 >= 0.0)
    v4 = v6;
  v8 = (void *)MEMORY[0x1E0CB3B18];
  v21 = vmla_n_f32((float32x2_t)0x3F44DD2F3EC9374CLL, (float32x2_t)0xBF44DD2F3F1B645ALL, v4);
  *(float *)v22 = (float)(v4 * -0.189) + 0.189;
  *(_QWORD *)&v22[4] = 0;
  *(float32x2_t *)&v22[12] = vmla_n_f32((float32x2_t)0x3F2F9DB23EB2B021, (float32x2_t)0x3EA0C49CBEB2B021, v4);
  *(float *)&v22[20] = (float)(v4 * -0.168) + 0.168;
  v23 = 0;
  v24 = vmla_n_f32((float32x2_t)0x3F08B4393E8B4396, (float32x2_t)0xBF08B439BE8B4396, v4);
  *(float *)v25 = (float)(v4 * 0.869) + 0.131;
  memset(&v25[4], 0, 20);
  v26 = 1065353216;
  v9 = &v21;
LABEL_24:
  result = (_QWORD *)objc_msgSend(v8, "valueWithCAColorMatrix:", v9, v15, v16, v17, v18, v19, *(_OWORD *)v20, *(_QWORD *)&v20[16], *(_QWORD *)&v21, *(_OWORD *)v22, *(_QWORD *)&v22[16], v23, *(_QWORD *)&v24, *(_QWORD *)v25, *(_QWORD *)&v25[8], *(_QWORD *)&v25[16], v26);
  *v3 = result;
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t WebCore::PlatformCAFilters::setBlendingFiltersOnLayer(void *a1, int a2)
{
  char v3;
  uint64_t v4;

  v3 = a2 - 2;
  if ((a2 - 2) < 0x11 && ((0x187FFu >> v3) & 1) != 0)
    v4 = objc_msgSend(MEMORY[0x1E0CD2780], "filterWithType:", **((_QWORD **)&unk_1E334EE18 + v3));
  else
    v4 = 0;
  return objc_msgSend(a1, "setCompositingFilter:", v4);
}

uint64_t WebCore::PlatformCAFilters::animatedFilterPropertyName@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  _DWORD *v4;

  switch((int)result)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v3 = v4;
      break;
    default:
      v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v3 += 2;
      break;
  }
  *a2 = v3;
  return result;
}

uint64_t WebCore::PlatformCALayer::platformCALayerForLayer@<X0>(uint64_t this@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;

  if (!this)
  {
    *a3 = 0;
    return this;
  }
  v4 = this;
  if (__ldaxr(WebCore::layerToPlatformLayerMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::layerToPlatformLayerMapLock))
  {
    goto LABEL_7;
  }
  this = MEMORY[0x19AEA534C](WebCore::layerToPlatformLayerMapLock, a2);
LABEL_7:
  {
    v6 = WebCore::layerToPlatformLayerMap(void)::layerMap;
    if (WebCore::layerToPlatformLayerMap(void)::layerMap)
    {
      v7 = *(_DWORD *)(WebCore::layerToPlatformLayerMap(void)::layerMap - 8);
      v8 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
      v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
      v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      v11 = v7 & ((v10 >> 31) ^ v10);
      v12 = *(_QWORD *)(WebCore::layerToPlatformLayerMap(void)::layerMap + 16 * v11);
      if (v12 == v4)
      {
LABEL_13:
        v6 = *(_QWORD *)(WebCore::layerToPlatformLayerMap(void)::layerMap + 16 * v11 + 8);
        if (v6)
        {
          v14 = (unsigned int *)(v6 + 8);
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 + 1, v14));
        }
      }
      else
      {
        v13 = 1;
        while (v12)
        {
          v11 = ((_DWORD)v11 + v13) & v7;
          v12 = *(_QWORD *)(WebCore::layerToPlatformLayerMap(void)::layerMap + 16 * v11);
          ++v13;
          if (v12 == v4)
            goto LABEL_13;
        }
        v6 = 0;
      }
    }
  }
  else
  {
    v6 = 0;
    WebCore::layerToPlatformLayerMap(void)::layerMap = 0;
  }
  *a3 = v6;
  v16 = __ldxr(WebCore::layerToPlatformLayerMapLock);
  if (v16 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::layerToPlatformLayerMapLock);
  }
  if (__stlxr(0, WebCore::layerToPlatformLayerMapLock))
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::layerToPlatformLayerMapLock);
  return this;
}

void sub_1952687C0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19)
{
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_195268980(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19)
{
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void *WebCore::PlatformCALayerCocoa::setOwner(WebCore::PlatformCALayerCocoa *this, WebCore::PlatformCALayerClient *a2)
{
  void *result;

  *((_QWORD *)this + 6) = a2;
  result = (void *)*((_QWORD *)this + 7);
  if (result)
    return (void *)objc_msgSend(result, "setOwner:", this);
  return result;
}

uint64_t WebCore::PlatformCALayer::setOwner(uint64_t this, WebCore::PlatformCALayerClient *a2)
{
  *(_QWORD *)(this + 48) = a2;
  return this;
}

uint64_t WebCore::PlatformCALayerCocoa::layerTypeForPlatformLayer(WebCore::PlatformCALayerCocoa *this, CALayer *a2)
{
  PAL *v3;

  v3 = (PAL *)PAL::AVFoundationLibrary((PAL *)1);
  if (v3)
  {
    PAL::getAVPlayerLayerClass[0](v3);
    if ((objc_opt_isKindOfClass() & 1) != 0)
      return 8;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && -[WebCore::PlatformCALayerCocoa playerLayer](this, "playerLayer"))
    return 8;
  else
    return 14;
}

uint64_t WebCore::PlatformCALayerCocoa::PlatformCALayerCocoa(uint64_t a1, int a2, uint64_t a3)
{
  const void *IdentifierInternal;
  const void *v7;
  unint64_t v8;
  uint64_t v9;
  const void **v10;
  PAL *v11;
  objc_class *v12;
  id v13;
  char v15;
  char **v16;
  char *v17;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &unk_1E334E260;
  *(_BYTE *)(a1 + 12) = a2;
  IdentifierInternal = (const void *)WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  v7 = IdentifierInternal;
  v8 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v8 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  if ((WebCore::Process::globalIdentifier & 1) != 0)
  {
    v9 = WebCore::Process::globalIdentifier;
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = 0;
    v10 = (const void **)(a1 + 32);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = a3;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)a1 = &off_1E334E808;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 200) = 0;
    *(_BYTE *)(a1 + 208) = 0;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_BYTE *)(a1 + 176) = 0;
    *(_WORD *)(a1 + 209) = 1;
    switch(a2)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 15:
        v12 = (objc_class *)objc_opt_class();
        goto LABEL_8;
      case 8:
        v11 = (PAL *)PAL::AVFoundationLibrary((PAL *)1);
        if (!v11)
          goto LABEL_10;
        v12 = (objc_class *)PAL::getAVPlayerLayerClass[0](v11);
LABEL_8:
        if (!v12)
          goto LABEL_10;
        v13 = objc_alloc_init(v12);
        IdentifierInternal = *v10;
        *v10 = v13;
        if (!IdentifierInternal)
          goto LABEL_10;
        goto LABEL_12;
      default:
        goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  CFRelease(IdentifierInternal);
LABEL_10:
  WebCore::PlatformCALayerCocoa::commonInit((WebCore::PlatformCALayerCocoa *)a1);
  return a1;
}

void sub_195268C30(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  WTF **v3;
  const void **v4;
  WTF **v5;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  WTF *v21;
  WTF *v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  const void *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  WTF *v33;

  v5 = v3;
  if (*(_BYTE *)(v2 + 200))
  {
    v7 = *(_QWORD *)(v2 + 192);
    *(_QWORD *)(v2 + 192) = 0;
    if (v7)
    {
      v8 = *(WTF **)(v7 + 144);
      if ((WTF *)(v7 + 160) != v8 && v8)
      {
        *(_QWORD *)(v7 + 144) = 0;
        *(_DWORD *)(v7 + 152) = 0;
        WTF::fastFree(v8, a2);
      }
      v9 = *(WTF **)v7;
      if (v7 + 16 != *(_QWORD *)v7 && v9)
      {
        *(_QWORD *)v7 = 0;
        *(_DWORD *)(v7 + 8) = 0;
        WTF::fastFree(v9, a2);
      }
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v10 = *(_QWORD *)(v2 + 168);
  *(_QWORD *)(v2 + 168) = 0;
  if (v10)
  {
    v11 = *(WTF **)(v10 + 144);
    if ((WTF *)(v10 + 160) != v11 && v11)
    {
      *(_QWORD *)(v10 + 144) = 0;
      *(_DWORD *)(v10 + 152) = 0;
      WTF::fastFree(v11, a2);
    }
    v12 = *(WTF **)v10;
    if (v10 + 16 != *(_QWORD *)v10 && v12)
    {
      *(_QWORD *)v10 = 0;
      *(_DWORD *)(v10 + 8) = 0;
      WTF::fastFree(v12, a2);
    }
    WTF::fastFree((WTF *)v10, a2);
  }
  v13 = *(_QWORD *)(v2 + 144);
  *(_QWORD *)(v2 + 144) = 0;
  if (v13)
  {
    v14 = *(WTF **)(v13 + 144);
    if ((WTF *)(v13 + 160) != v14 && v14)
    {
      *(_QWORD *)(v13 + 144) = 0;
      *(_DWORD *)(v13 + 152) = 0;
      WTF::fastFree(v14, a2);
    }
    v15 = *(WTF **)v13;
    if (v13 + 16 != *(_QWORD *)v13 && v15)
    {
      *(_QWORD *)v13 = 0;
      *(_DWORD *)(v13 + 8) = 0;
      WTF::fastFree(v15, a2);
    }
    WTF::fastFree((WTF *)v13, a2);
  }
  v16 = *(unsigned int *)(v2 + 124);
  if ((_DWORD)v16)
  {
    v28 = (uint64_t *)(*(_QWORD *)(v2 + 112) + 16);
    v29 = 24 * v16;
    do
    {
      v30 = *v28;
      *v28 = 0;
      if (v30)
      {
        v31 = *(WTF **)(v30 + 144);
        if ((WTF *)(v30 + 160) != v31 && v31 != 0)
        {
          *(_QWORD *)(v30 + 144) = 0;
          *(_DWORD *)(v30 + 152) = 0;
          WTF::fastFree(v31, a2);
        }
        v33 = *(WTF **)v30;
        if (v30 + 16 != *(_QWORD *)v30 && v33 != 0)
        {
          *(_QWORD *)v30 = 0;
          *(_DWORD *)(v30 + 8) = 0;
          WTF::fastFree(v33, a2);
        }
        WTF::fastFree((WTF *)v30, a2);
      }
      v28 += 3;
      v29 -= 24;
    }
    while (v29);
  }
  v17 = *(WTF **)(v2 + 112);
  if (v17)
  {
    *(_QWORD *)(v2 + 112) = 0;
    *(_DWORD *)(v2 + 120) = 0;
    WTF::fastFree(v17, a2);
  }
  v18 = *(_QWORD *)(v2 + 104);
  *(_QWORD *)(v2 + 104) = 0;
  if (v18)
  {
    v19 = *(WTF **)(v18 + 144);
    if ((WTF *)(v18 + 160) != v19 && v19 != 0)
    {
      *(_QWORD *)(v18 + 144) = 0;
      *(_DWORD *)(v18 + 152) = 0;
      WTF::fastFree(v19, a2);
    }
    v21 = *(WTF **)v18;
    if (v18 + 16 != *(_QWORD *)v18 && v21 != 0)
    {
      *(_QWORD *)v18 = 0;
      *(_DWORD *)(v18 + 8) = 0;
      WTF::fastFree(v21, a2);
    }
    WTF::fastFree((WTF *)v18, a2);
  }
  v23 = *v5;
  *v5 = 0;
  if (v23)
    WTF::fastFree(v23, a2);
  v24 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 64) = 0;
  if (v24)
  {
    v25 = (WTF *)WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v24, a2);
    WTF::fastFree(v25, v26);
  }
  v27 = *v4;
  *v4 = 0;
  if (v27)
    CFRelease(v27);
  WebCore::PlatformCALayer::~PlatformCALayer((WebCore::PlatformCALayer *)v2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformCALayerCocoa::commonInit(WebCore::PlatformCALayerCocoa *this)
{
  uint64_t v3;
  id *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;

  if (__ldaxr(WebCore::layerToPlatformLayerMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::layerToPlatformLayerMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::layerToPlatformLayerMapLock);
LABEL_5:
  {
    v3 = WebCore::layerToPlatformLayerMap(void)::layerMap;
    v4 = (id *)((char *)this + 32);
    v5 = *((_QWORD *)this + 4);
    if (WebCore::layerToPlatformLayerMap(void)::layerMap)
    {
LABEL_8:
      v6 = *(_DWORD *)(v3 - 8);
      goto LABEL_9;
    }
  }
  else
  {
    WebCore::layerToPlatformLayerMap(void)::layerMap = 0;
    v4 = (id *)((char *)this + 32);
    v5 = *((_QWORD *)this + 4);
  }
  WTF::HashTable<void *,WTF::KeyValuePair<void *,WebCore::PlatformCALayer *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WebCore::PlatformCALayer *>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WebCore::PlatformCALayer *,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WebCore::PlatformCALayer *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(8u);
  v3 = WebCore::layerToPlatformLayerMap(void)::layerMap;
  if (WebCore::layerToPlatformLayerMap(void)::layerMap)
    goto LABEL_8;
  v6 = 0;
LABEL_9:
  v7 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = (_QWORD *)(v3 + 16 * v10);
  v12 = *v11;
  if (!*v11)
  {
LABEL_17:
    *v11 = v5;
    v11[1] = this;
    if (WebCore::layerToPlatformLayerMap(void)::layerMap)
      v15 = *(_DWORD *)(WebCore::layerToPlatformLayerMap(void)::layerMap - 12) + 1;
    else
      v15 = 1;
    *(_DWORD *)(WebCore::layerToPlatformLayerMap(void)::layerMap - 12) = v15;
    if (WebCore::layerToPlatformLayerMap(void)::layerMap)
      v16 = *(_DWORD *)(WebCore::layerToPlatformLayerMap(void)::layerMap - 12);
    else
      v16 = 0;
    v17 = (*(_DWORD *)(WebCore::layerToPlatformLayerMap(void)::layerMap - 16) + v16);
    v18 = *(unsigned int *)(WebCore::layerToPlatformLayerMap(void)::layerMap - 4);
    if (v18 > 0x400)
    {
      if (v18 > 2 * v17)
        goto LABEL_30;
    }
    else
    {
      if (3 * v18 > 4 * v17)
        goto LABEL_30;
      if (!(_DWORD)v18)
      {
        v19 = 8;
        goto LABEL_29;
      }
    }
    v19 = (_DWORD)v18 << (6 * *(_DWORD *)(WebCore::layerToPlatformLayerMap(void)::layerMap - 12) >= (2 * v18));
LABEL_29:
    WTF::HashTable<void *,WTF::KeyValuePair<void *,WebCore::PlatformCALayer *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WebCore::PlatformCALayer *>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WebCore::PlatformCALayer *,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WebCore::PlatformCALayer *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v19);
    goto LABEL_30;
  }
  v13 = 0;
  v14 = 1;
  while (v12 != v5)
  {
    if (v12 == -1)
      v13 = v11;
    v10 = (v10 + v14) & v6;
    v11 = (_QWORD *)(v3 + 16 * v10);
    v12 = *v11;
    ++v14;
    if (!*v11)
    {
      if (v13)
      {
        *v13 = 0;
        v13[1] = 0;
        --*(_DWORD *)(v3 - 16);
        v11 = v13;
      }
      goto LABEL_17;
    }
  }
LABEL_30:
  v20 = __ldxr(WebCore::layerToPlatformLayerMapLock);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_34;
  }
  if (__stlxr(0, WebCore::layerToPlatformLayerMapLock))
LABEL_34:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::layerToPlatformLayerMapLock);
  v21 = *((unsigned __int8 *)this + 12);
  v22 = v21 > 0xE;
  v23 = (1 << v21) & 0x5100;
  if (v22 || v23 == 0)
    objc_msgSend(*v4, "setDelegate:", +[WebActionDisablingCALayerDelegate shared](WebActionDisablingCALayerDelegate, "shared"));
  else
    objc_msgSend(*v4, "web_disableAllActions");
  v25 = *((unsigned __int8 *)this + 12);
  if (v25 == 6)
  {
    objc_msgSend(*v4, "setValue:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("isTile"));
    LOBYTE(v25) = *((_BYTE *)this + 12);
  }
  if ((v25 & 0xFE) == 4)
  {
    WebCore::TileController::containerLayers(objc_msgSend(*((id *)this + 4), "createTileController:", this), (uint64_t)&v33);
    v26 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v26 = 0;
    *(_QWORD *)(v26 + 8) = 0;
    v28 = v33;
    v33 = 0;
    *(_QWORD *)v26 = v28;
    LODWORD(v28) = v34;
    LODWORD(v34) = 0;
    *(_DWORD *)(v26 + 8) = v28;
    LODWORD(v28) = HIDWORD(v34);
    HIDWORD(v34) = 0;
    *(_DWORD *)(v26 + 12) = v28;
    v29 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v26;
    if (v29)
    {
      v30 = (WTF *)WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29, v27);
      WTF::fastFree(v30, v31);
    }
    WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v27);
  }
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
  {
    objc_msgSend(*v4, "setUsesWebKitBehavior:", 1);
    return objc_msgSend(*((id *)this + 4), "setSortsSublayers:", *((unsigned __int8 *)this + 12) == 3, v33, v34);
  }
  return result;
}

void sub_19526919C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  NSException *v11;

  v9 = (int)a2;
  WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  if (v9 == 1)
  {
    v11 = (NSException *)objc_begin_catch(a1);
    ReportBlockedObjCException(v11);
    objc_end_catch();
    JUMPOUT(0x195269160);
  }
  _Unwind_Resume(a1);
}

void WebCore::PlatformCALayerCocoa::PlatformCALayerCocoa(WebCore::PlatformCALayerCocoa *this, CALayer *a2, WebCore::PlatformCALayerClient *a3)
{
  PAL *v6;
  char v7;
  uint64_t IdentifierInternal;
  unint64_t v9;
  uint64_t v10;
  const void **v11;
  const void *v12;
  char v13;
  char **v14;
  char *v15;

  v6 = (PAL *)PAL::AVFoundationLibrary((PAL *)1);
  if (v6 && (PAL::getAVPlayerLayerClass[0](v6), (objc_opt_isKindOfClass() & 1) != 0)
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0) && -[CALayer playerLayer](a2, "playerLayer"))
  {
    v7 = 8;
  }
  else
  {
    v7 = 14;
  }
  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = &unk_1E334E260;
  *((_BYTE *)this + 12) = v7;
  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  v9 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v9 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  if ((WebCore::Process::globalIdentifier & 1) != 0)
  {
    v10 = WebCore::Process::globalIdentifier;
    *((_QWORD *)this + 2) = IdentifierInternal;
    *((_QWORD *)this + 3) = v10;
    *((_QWORD *)this + 4) = 0;
    v11 = (const void **)((char *)this + 32);
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 6) = a3;
    *(_QWORD *)this = &off_1E334E808;
    *((_QWORD *)this + 7) = 0;
    *((_OWORD *)this + 5) = 0u;
    *((_QWORD *)this + 8) = 0;
    *((_BYTE *)this + 72) = 0;
    *((_BYTE *)this + 200) = 0;
    *((_BYTE *)this + 208) = 0;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_BYTE *)this + 176) = 0;
    *(_WORD *)((char *)this + 209) = 1;
    if (a2)
    {
      CFRetain(a2);
      v12 = *v11;
      *v11 = a2;
      if (v12)
        CFRelease(v12);
    }
    else
    {
      *v11 = 0;
    }
    WebCore::PlatformCALayerCocoa::commonInit(this);
  }
  else
  {
    __break(1u);
  }
}

void sub_1952693C8(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  WTF **v3;
  const void **v4;
  WTF **v5;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  WTF *v21;
  WTF *v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  const void *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  WTF *v33;

  v5 = v3;
  if (*(_BYTE *)(v2 + 200))
  {
    v7 = *(_QWORD *)(v2 + 192);
    *(_QWORD *)(v2 + 192) = 0;
    if (v7)
    {
      v8 = *(WTF **)(v7 + 144);
      if ((WTF *)(v7 + 160) != v8 && v8)
      {
        *(_QWORD *)(v7 + 144) = 0;
        *(_DWORD *)(v7 + 152) = 0;
        WTF::fastFree(v8, a2);
      }
      v9 = *(WTF **)v7;
      if (v7 + 16 != *(_QWORD *)v7 && v9)
      {
        *(_QWORD *)v7 = 0;
        *(_DWORD *)(v7 + 8) = 0;
        WTF::fastFree(v9, a2);
      }
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v10 = *(_QWORD *)(v2 + 168);
  *(_QWORD *)(v2 + 168) = 0;
  if (v10)
  {
    v11 = *(WTF **)(v10 + 144);
    if ((WTF *)(v10 + 160) != v11 && v11)
    {
      *(_QWORD *)(v10 + 144) = 0;
      *(_DWORD *)(v10 + 152) = 0;
      WTF::fastFree(v11, a2);
    }
    v12 = *(WTF **)v10;
    if (v10 + 16 != *(_QWORD *)v10 && v12)
    {
      *(_QWORD *)v10 = 0;
      *(_DWORD *)(v10 + 8) = 0;
      WTF::fastFree(v12, a2);
    }
    WTF::fastFree((WTF *)v10, a2);
  }
  v13 = *(_QWORD *)(v2 + 144);
  *(_QWORD *)(v2 + 144) = 0;
  if (v13)
  {
    v14 = *(WTF **)(v13 + 144);
    if ((WTF *)(v13 + 160) != v14 && v14)
    {
      *(_QWORD *)(v13 + 144) = 0;
      *(_DWORD *)(v13 + 152) = 0;
      WTF::fastFree(v14, a2);
    }
    v15 = *(WTF **)v13;
    if (v13 + 16 != *(_QWORD *)v13 && v15)
    {
      *(_QWORD *)v13 = 0;
      *(_DWORD *)(v13 + 8) = 0;
      WTF::fastFree(v15, a2);
    }
    WTF::fastFree((WTF *)v13, a2);
  }
  v16 = *(unsigned int *)(v2 + 124);
  if ((_DWORD)v16)
  {
    v28 = (uint64_t *)(*(_QWORD *)(v2 + 112) + 16);
    v29 = 24 * v16;
    do
    {
      v30 = *v28;
      *v28 = 0;
      if (v30)
      {
        v31 = *(WTF **)(v30 + 144);
        if ((WTF *)(v30 + 160) != v31 && v31 != 0)
        {
          *(_QWORD *)(v30 + 144) = 0;
          *(_DWORD *)(v30 + 152) = 0;
          WTF::fastFree(v31, a2);
        }
        v33 = *(WTF **)v30;
        if (v30 + 16 != *(_QWORD *)v30 && v33 != 0)
        {
          *(_QWORD *)v30 = 0;
          *(_DWORD *)(v30 + 8) = 0;
          WTF::fastFree(v33, a2);
        }
        WTF::fastFree((WTF *)v30, a2);
      }
      v28 += 3;
      v29 -= 24;
    }
    while (v29);
  }
  v17 = *(WTF **)(v2 + 112);
  if (v17)
  {
    *(_QWORD *)(v2 + 112) = 0;
    *(_DWORD *)(v2 + 120) = 0;
    WTF::fastFree(v17, a2);
  }
  v18 = *(_QWORD *)(v2 + 104);
  *(_QWORD *)(v2 + 104) = 0;
  if (v18)
  {
    v19 = *(WTF **)(v18 + 144);
    if ((WTF *)(v18 + 160) != v19 && v19 != 0)
    {
      *(_QWORD *)(v18 + 144) = 0;
      *(_DWORD *)(v18 + 152) = 0;
      WTF::fastFree(v19, a2);
    }
    v21 = *(WTF **)v18;
    if (v18 + 16 != *(_QWORD *)v18 && v21 != 0)
    {
      *(_QWORD *)v18 = 0;
      *(_DWORD *)(v18 + 8) = 0;
      WTF::fastFree(v21, a2);
    }
    WTF::fastFree((WTF *)v18, a2);
  }
  v23 = *v5;
  *v5 = 0;
  if (v23)
    WTF::fastFree(v23, a2);
  v24 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 64) = 0;
  if (v24)
  {
    v25 = (WTF *)WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v24, a2);
    WTF::fastFree(v25, v26);
  }
  v27 = *v4;
  *v4 = 0;
  if (v27)
    CFRelease(v27);
  WebCore::PlatformCALayer::~PlatformCALayer((WebCore::PlatformCALayer *)v2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformCALayerCocoa::clone@<X0>(WebCore::PlatformCALayerCocoa *this@<X0>, WebCore::PlatformCALayerClient *a2@<X1>, uint64_t *a3@<X8>)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  float v16;
  float v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float v28;
  float v29;
  void *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  void *v39;
  void *v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  void *v49;
  WebCore *v50;
  CGColor *v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  double v55;
  float v56;
  double v57;
  double v58;
  float v59;
  uint64_t result;
  PAL *v61;
  char isKindOfClass;
  const void *v63;
  uint64_t v64;
  const void *v65;
  _QWORD *v66;
  float64x2_t *v67;
  float64x2_t v68;
  float64x2_t v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;

  v6 = *((unsigned __int8 *)this + 12);
  v7 = 0;
  v8 = 0;
  switch(*((_BYTE *)this + 12))
  {
    case 3:
    case 0xA:
      break;
    case 8:
      v8 = 0;
      v7 = 1;
      break;
    case 0xB:
      v7 = 0;
      v8 = 1;
      break;
    default:
      v7 = 0;
      v8 = 0;
      v6 = 0;
      break;
  }
  v9 = WTF::fastMalloc((WTF *)0xD8);
  WebCore::PlatformCALayerCocoa::PlatformCALayerCocoa(v9, v6, (uint64_t)a2);
  objc_msgSend(*((id *)this + 4), "position");
  v11 = v10;
  v13 = v12;
  objc_msgSend(*((id *)this + 4), "zPosition");
  v15 = v14;
  v16 = v13;
  *(float *)&v14 = v11;
  objc_msgSend(*(id *)(v9 + 32), "setPosition:", *(float *)&v14, v16);
  v17 = v15;
  objc_msgSend(*(id *)(v9 + 32), "setZPosition:", v17);
  objc_msgSend(*((id *)this + 4), "bounds");
  *(float *)&v18 = v18;
  *(float *)&v19 = v19;
  *(float *)&v20 = v20;
  *(float *)&v21 = v21;
  objc_msgSend(*(id *)(v9 + 32), "setBounds:", *(float *)&v18, *(float *)&v19, *(float *)&v20, *(float *)&v21);
  objc_msgSend(*((id *)this + 4), "anchorPoint");
  v23 = v22;
  v25 = v24;
  objc_msgSend(*((id *)this + 4), "anchorPointZ");
  v27 = v26;
  *(float *)&v26 = v23;
  v28 = v25;
  objc_msgSend(*(id *)(v9 + 32), "setAnchorPoint:", *(float *)&v26, v28);
  v29 = v27;
  objc_msgSend(*(id *)(v9 + 32), "setAnchorPointZ:", v29);
  v30 = (void *)*((_QWORD *)this + 4);
  if (v30)
  {
    objc_msgSend(v30, "transform");
    v31 = v73;
    v32 = v74;
    v34 = v75;
    v33 = v76;
    v36 = v77;
    v35 = v78;
    v38 = v79;
    v37 = v80;
  }
  else
  {
    v31 = 0uLL;
    v32 = 0uLL;
    v34 = 0uLL;
    v33 = 0uLL;
    v36 = 0uLL;
    v35 = 0uLL;
    v38 = 0uLL;
    v37 = 0uLL;
  }
  v39 = *(void **)(v9 + 32);
  v73 = vcvtq_f64_f32(vcvt_f32_f64(v31));
  v74 = vcvtq_f64_f32(vcvt_f32_f64(v32));
  v75 = vcvtq_f64_f32(vcvt_f32_f64(v34));
  v76 = vcvtq_f64_f32(vcvt_f32_f64(v33));
  v77 = vcvtq_f64_f32(vcvt_f32_f64(v36));
  v78 = vcvtq_f64_f32(vcvt_f32_f64(v35));
  v79 = vcvtq_f64_f32(vcvt_f32_f64(v38));
  v80 = vcvtq_f64_f32(vcvt_f32_f64(v37));
  objc_msgSend(v39, "setTransform:", &v73);
  v40 = (void *)*((_QWORD *)this + 4);
  if (v40)
  {
    objc_msgSend(v40, "sublayerTransform");
    v41 = v73;
    v42 = v74;
    v44 = v75;
    v43 = v76;
    v46 = v77;
    v45 = v78;
    v48 = v79;
    v47 = v80;
  }
  else
  {
    v41 = 0uLL;
    v42 = 0uLL;
    v44 = 0uLL;
    v43 = 0uLL;
    v46 = 0uLL;
    v45 = 0uLL;
    v48 = 0uLL;
    v47 = 0uLL;
  }
  v49 = *(void **)(v9 + 32);
  v73 = vcvtq_f64_f32(vcvt_f32_f64(v41));
  v74 = vcvtq_f64_f32(vcvt_f32_f64(v42));
  v75 = vcvtq_f64_f32(vcvt_f32_f64(v44));
  v76 = vcvtq_f64_f32(vcvt_f32_f64(v43));
  v77 = vcvtq_f64_f32(vcvt_f32_f64(v46));
  v78 = vcvtq_f64_f32(vcvt_f32_f64(v45));
  v79 = vcvtq_f64_f32(vcvt_f32_f64(v48));
  v80 = vcvtq_f64_f32(vcvt_f32_f64(v47));
  objc_msgSend(v49, "setSublayerTransform:", &v73);
  objc_msgSend(*(id *)(v9 + 32), "setContents:", objc_msgSend(*((id *)this + 4), "contents"));
  objc_msgSend(*(id *)(v9 + 32), "setMasksToBounds:", objc_msgSend(*((id *)this + 4), "masksToBounds"));
  objc_msgSend(*(id *)(v9 + 32), "setDoubleSided:", objc_msgSend(*((id *)this + 4), "isDoubleSided"));
  objc_msgSend(*(id *)(v9 + 32), "setOpaque:", objc_msgSend(*((id *)this + 4), "isOpaque"));
  v50 = (WebCore *)objc_msgSend(*((id *)this + 4), "backgroundColor");
  v52 = WebCore::roundAndClampToSRGBALossy(v50, v51);
  v53 = bswap32(v52) | 0x1104000000000000;
  if (!BYTE4(v52))
    v53 = 0;
  *(_QWORD *)&v73.f64[0] = v53;
  WebCore::PlatformCALayerCocoa::setBackgroundColor((WebCore::PlatformCALayerCocoa *)v9, (const WebCore::Color *)&v73);
  if ((*(_QWORD *)&v73.f64[0] & 0x8000000000000) != 0)
  {
    v70 = (unsigned int *)(*(_QWORD *)&v73.f64[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v71 = __ldaxr(v70);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, v70));
    if (!v72)
    {
      atomic_store(1u, v70);
      WTF::fastFree((WTF *)v70, v54);
    }
  }
  objc_msgSend(*((id *)this + 4), "contentsScale");
  if (*(_BYTE *)(v9 + 12) != 3)
  {
    v56 = v55;
    v57 = v56;
    objc_msgSend(*(id *)(v9 + 32), "setContentsScale:", v56);
    objc_msgSend(*(id *)(v9 + 32), "setRasterizationScale:", v57);
  }
  objc_msgSend(*((id *)this + 4), "cornerRadius");
  v59 = v58;
  objc_msgSend(*(id *)(v9 + 32), "setCornerRadius:", v59);
  if (v59 != 0.0)
    objc_msgSend(*(id *)(v9 + 32), "setCornerCurve:", *MEMORY[0x1E0CD2A60]);
  *(_BYTE *)(v9 + 210) = *((_BYTE *)this + 210);
  result = objc_msgSend(*(id *)(v9 + 32), "setFilters:", objc_msgSend((id)(*(uint64_t (**)(WebCore::PlatformCALayerCocoa *))(*(_QWORD *)this + 40))(this), "filters"));
  if ((*((_BYTE *)this + 72) != 0) == (*(_BYTE *)(v9 + 72) == 0))
    *(_BYTE *)(v9 + 72) = *((_BYTE *)this + 72);
  if (v7)
  {
    v61 = (PAL *)PAL::AVFoundationLibrary((PAL *)1);
    if (v61 && *(_BYTE *)(v9 + 12) == 8)
    {
      PAL::getAVPlayerLayerClass[0](v61);
      isKindOfClass = objc_opt_isKindOfClass();
      v63 = *(const void **)(v9 + 32);
      if ((isKindOfClass & 1) != 0)
      {
LABEL_27:
        v64 = PAL::AVFoundationLibrary((PAL *)1);
        if (v64 && *((_BYTE *)this + 12) == 8)
        {
          PAL::getAVPlayerLayerClass[0]((PAL *)v64);
          v64 = objc_opt_isKindOfClass();
          v65 = (const void *)*((_QWORD *)this + 4);
          if ((v64 & 1) != 0)
          {
LABEL_33:
            WTF::RunLoop::main((WTF::RunLoop *)v64);
            if (v63)
              CFRetain(v63);
            if (v65)
              CFRetain(v65);
            v66 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v66 = &off_1E334ECC8;
            v66[1] = v63;
            v66[2] = v65;
            *(_QWORD *)&v73.f64[0] = v66;
            WTF::RunLoop::dispatch();
            result = *(_QWORD *)&v73.f64[0];
            v73.f64[0] = 0.0;
            if (result)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
            goto LABEL_39;
          }
          objc_opt_class();
          v64 = objc_opt_isKindOfClass();
          if ((v64 & 1) != 0)
          {
            v64 = objc_msgSend(*((id *)this + 4), "playerLayer");
            v65 = (const void *)v64;
            goto LABEL_33;
          }
        }
        v65 = 0;
        goto LABEL_33;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v63 = (const void *)objc_msgSend(*(id *)(v9 + 32), "playerLayer");
        goto LABEL_27;
      }
    }
    v63 = 0;
    goto LABEL_27;
  }
LABEL_39:
  if (v8)
  {
    v67 = (float64x2_t *)*((_QWORD *)this + 10);
    if (v67)
    {
      v68 = *v67;
      v69 = v67[2];
      v74 = v67[1];
      v75 = v69;
      v73 = v68;
    }
    else
    {
      v73 = 0uLL;
      v74 = 0u;
      v75 = 0u;
    }
    result = WebCore::PlatformCALayerCocoa::setShapeRoundedRect((WebCore::PlatformCALayerCocoa *)v9, (const WebCore::FloatRoundedRect *)&v73);
  }
  *a3 = v9;
  return result;
}

void sub_195269BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;
  const void *v10;

  if (v10)
    CFRelease(v10);
  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v9 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformCALayerCocoa::setPosition(uint64_t a1, float *a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setPosition:", *a2, a2[1]);
  return objc_msgSend(*(id *)(a1 + 32), "setZPosition:", a2[2]);
}

float WebCore::PlatformCALayerCocoa::position(id *this)
{
  double v2;
  float v3;

  objc_msgSend(this[4], "position");
  v3 = v2;
  objc_msgSend(this[4], "zPosition");
  return v3;
}

uint64_t WebCore::PlatformCALayerCocoa::setBounds(id *this, const WebCore::FloatRect *a2)
{
  return objc_msgSend(this[4], "setBounds:", *(float *)a2, *((float *)a2 + 1), *((float *)a2 + 2), *((float *)a2 + 3));
}

float WebCore::PlatformCALayerCocoa::bounds(id *this)
{
  double v1;

  objc_msgSend(this[4], "bounds");
  return v1;
}

uint64_t WebCore::PlatformCALayerCocoa::setAnchorPoint(uint64_t a1, float *a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setAnchorPoint:", *a2, a2[1]);
  return objc_msgSend(*(id *)(a1 + 32), "setAnchorPointZ:", a2[2]);
}

float WebCore::PlatformCALayerCocoa::anchorPoint(id *this)
{
  double v2;
  double v3;

  objc_msgSend(this[4], "anchorPoint");
  v3 = v2;
  objc_msgSend(this[4], "anchorPointZ");
  return v3;
}

uint64_t WebCore::PlatformCALayerCocoa::setTransform(WebCore::PlatformCALayerCocoa *this, float64x2_t *a2)
{
  void *v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  _OWORD v8[8];

  v2 = (void *)*((_QWORD *)this + 4);
  v3 = vcvtq_f64_f32(vcvt_f32_f64(a2[1]));
  v8[0] = vcvtq_f64_f32(vcvt_f32_f64(*a2));
  v8[1] = v3;
  v4 = vcvtq_f64_f32(vcvt_f32_f64(a2[3]));
  v8[2] = vcvtq_f64_f32(vcvt_f32_f64(a2[2]));
  v8[3] = v4;
  v5 = vcvtq_f64_f32(vcvt_f32_f64(a2[5]));
  v8[4] = vcvtq_f64_f32(vcvt_f32_f64(a2[4]));
  v8[5] = v5;
  v6 = vcvtq_f64_f32(vcvt_f32_f64(a2[7]));
  v8[6] = vcvtq_f64_f32(vcvt_f32_f64(a2[6]));
  v8[7] = v6;
  return objc_msgSend(v2, "setTransform:", v8);
}

void *WebCore::PlatformCALayerCocoa::transform@<X0>(WebCore::PlatformCALayerCocoa *this@<X0>, _OWORD *a2@<X8>)
{
  void *result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  result = (void *)*((_QWORD *)this + 4);
  if (result)
  {
    result = (void *)objc_msgSend(result, "transform");
    v4 = v12;
    v5 = v13;
    v6 = v14;
    v7 = v15;
    v8 = v16;
    v9 = v17;
    v10 = v18;
    v11 = v19;
  }
  else
  {
    v4 = 0uLL;
    v5 = 0uLL;
    v6 = 0uLL;
    v7 = 0uLL;
    v8 = 0uLL;
    v9 = 0uLL;
    v10 = 0uLL;
    v11 = 0uLL;
  }
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v9;
  a2[6] = v10;
  a2[7] = v11;
  return result;
}

uint64_t WebCore::PlatformCALayerCocoa::setSublayerTransform(WebCore::PlatformCALayerCocoa *this, float64x2_t *a2)
{
  void *v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  _OWORD v8[8];

  v2 = (void *)*((_QWORD *)this + 4);
  v3 = vcvtq_f64_f32(vcvt_f32_f64(a2[1]));
  v8[0] = vcvtq_f64_f32(vcvt_f32_f64(*a2));
  v8[1] = v3;
  v4 = vcvtq_f64_f32(vcvt_f32_f64(a2[3]));
  v8[2] = vcvtq_f64_f32(vcvt_f32_f64(a2[2]));
  v8[3] = v4;
  v5 = vcvtq_f64_f32(vcvt_f32_f64(a2[5]));
  v8[4] = vcvtq_f64_f32(vcvt_f32_f64(a2[4]));
  v8[5] = v5;
  v6 = vcvtq_f64_f32(vcvt_f32_f64(a2[7]));
  v8[6] = vcvtq_f64_f32(vcvt_f32_f64(a2[6]));
  v8[7] = v6;
  return objc_msgSend(v2, "setSublayerTransform:", v8);
}

void *WebCore::PlatformCALayerCocoa::sublayerTransform@<X0>(WebCore::PlatformCALayerCocoa *this@<X0>, _OWORD *a2@<X8>)
{
  void *result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  result = (void *)*((_QWORD *)this + 4);
  if (result)
  {
    result = (void *)objc_msgSend(result, "sublayerTransform");
    v4 = v12;
    v5 = v13;
    v6 = v14;
    v7 = v15;
    v8 = v16;
    v9 = v17;
    v10 = v18;
    v11 = v19;
  }
  else
  {
    v4 = 0uLL;
    v5 = 0uLL;
    v6 = 0uLL;
    v7 = 0uLL;
    v8 = 0uLL;
    v9 = 0uLL;
    v10 = 0uLL;
    v11 = 0uLL;
  }
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v9;
  a2[6] = v10;
  a2[7] = v11;
  return result;
}

uint64_t WebCore::PlatformCALayerCocoa::setContents(id *this, const void *a2)
{
  return objc_msgSend(this[4], "setContents:", a2);
}

uint64_t WebCore::PlatformCALayerCocoa::contents(id *this)
{
  return objc_msgSend(this[4], "contents");
}

uint64_t WebCore::PlatformCALayerCocoa::setMasksToBounds(id *this, uint64_t a2)
{
  return objc_msgSend(this[4], "setMasksToBounds:", a2);
}

uint64_t WebCore::PlatformCALayerCocoa::masksToBounds(id *this)
{
  return objc_msgSend(this[4], "masksToBounds");
}

uint64_t WebCore::PlatformCALayerCocoa::setDoubleSided(id *this, uint64_t a2)
{
  return objc_msgSend(this[4], "setDoubleSided:", a2);
}

uint64_t WebCore::PlatformCALayerCocoa::isDoubleSided(id *this)
{
  return objc_msgSend(this[4], "isDoubleSided");
}

uint64_t WebCore::PlatformCALayerCocoa::setOpaque(id *this, uint64_t a2)
{
  return objc_msgSend(this[4], "setOpaque:", a2);
}

uint64_t WebCore::PlatformCALayerCocoa::isOpaque(id *this)
{
  return objc_msgSend(this[4], "isOpaque");
}

void WebCore::PlatformCALayerCocoa::setBackgroundColor(WebCore::PlatformCALayerCocoa *this, const WebCore::Color *a2)
{
  void *v2;
  CFTypeRef v3;
  CFTypeRef cf;

  v2 = (void *)*((_QWORD *)this + 4);
  WebCore::cachedCGColor(a2, a2, &cf);
  objc_msgSend(v2, "setBackgroundColor:", cf);
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
}

void sub_19526A498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  NSException *v12;

  if (cf)
    CFRelease(cf);
  if (a2 == 1)
  {
    v12 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v12);
    objc_end_catch();
    JUMPOUT(0x19526A480);
  }
  _Unwind_Resume(exception_object);
}

unint64_t WebCore::PlatformCALayerCocoa::backgroundColor@<X0>(id *this@<X0>, uint64_t *a2@<X8>)
{
  WebCore *v3;
  CGColor *v4;
  unint64_t result;
  uint64_t v6;

  v3 = (WebCore *)objc_msgSend(this[4], "backgroundColor");
  result = WebCore::roundAndClampToSRGBALossy(v3, v4);
  v6 = bswap32(result) | 0x1104000000000000;
  if (!BYTE4(result))
    v6 = 0;
  *a2 = v6;
  return result;
}

uint64_t WebCore::PlatformCALayerCocoa::setContentsScale(uint64_t this, float a2)
{
  uint64_t v2;
  double v3;

  if (*(_BYTE *)(this + 12) != 3)
  {
    v2 = this;
    v3 = a2;
    objc_msgSend(*(id *)(this + 32), "setContentsScale:", a2);
    return objc_msgSend(*(id *)(v2 + 32), "setRasterizationScale:", v3);
  }
  return this;
}

float WebCore::PlatformCALayerCocoa::contentsScale(id *this)
{
  double v1;

  objc_msgSend(this[4], "contentsScale");
  return v1;
}

uint64_t WebCore::PlatformCALayerCocoa::setCornerRadius(id *this, float a2)
{
  uint64_t result;

  result = objc_msgSend(this[4], "setCornerRadius:", a2);
  if (a2 != 0.0)
    return objc_msgSend(this[4], "setCornerCurve:", *MEMORY[0x1E0CD2A60]);
  return result;
}

float WebCore::PlatformCALayerCocoa::cornerRadius(id *this)
{
  double v1;

  objc_msgSend(this[4], "cornerRadius");
  return v1;
}

uint64_t WebCore::PlatformCALayerCocoa::setBackdropRootIsOpaque(uint64_t this, char a2)
{
  *(_BYTE *)(this + 210) = a2;
  return this;
}

uint64_t WebCore::PlatformCALayerCocoa::backdropRootIsOpaque(WebCore::PlatformCALayerCocoa *this)
{
  return *((unsigned __int8 *)this + 210);
}

uint64_t WebCore::PlatformCALayerCocoa::copyFiltersFrom(id *this, const WebCore::PlatformCALayer *a2)
{
  return objc_msgSend(this[4], "setFilters:", objc_msgSend((id)(*(uint64_t (**)(const WebCore::PlatformCALayer *))(*(_QWORD *)a2 + 40))(a2), "filters"));
}

uint64_t WebCore::PlatformCALayerCocoa::updateCustomAppearance(uint64_t result, int a2)
{
  if ((((*(_BYTE *)(result + 72) == 0) ^ a2) & 1) == 0)
    *(_BYTE *)(result + 72) = a2;
  return result;
}

uint64_t WebCore::PlatformCALayerCocoa::customAppearance(WebCore::PlatformCALayerCocoa *this)
{
  return *((unsigned __int8 *)this + 72);
}

uint64_t WebCore::PlatformCALayerCocoa::setShapeRoundedRect(WebCore::PlatformCALayerCocoa *this, const WebCore::FloatRoundedRect *a2)
{
  void *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  WTF *v8;
  uint64_t result;
  char v10;
  _BYTE v11[8];
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = (_OWORD *)WTF::fastMalloc((WTF *)0x30);
  v7 = *((_OWORD *)a2 + 1);
  v6 = *((_OWORD *)a2 + 2);
  *v5 = *(_OWORD *)a2;
  v5[1] = v7;
  v5[2] = v6;
  v8 = (WTF *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v5;
  if (v8)
    WTF::fastFree(v8, v4);
  v13 = 0;
  WebCore::Path::addRoundedRect((WebCore::Path *)v11, a2, 0);
  result = objc_msgSend(*((id *)this + 4), "setPath:", WebCore::Path::platformPath((WebCore::Path *)v11));
  if (v13 != -1)
    return ((uint64_t (*)(char *, uint64_t *))off_1E334EBE8[v13])(&v10, &v12);
  return result;
}

void sub_19526A7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22)
{
  NSException *v24;

  if (a22 != -1)
    ((void (*)(char *, uint64_t *))off_1E334EBE8[a22])(&a13, &a15);
  if (a2 == 1)
  {
    v24 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v24);
    objc_end_catch();
    JUMPOUT(0x19526A7BCLL);
  }
  _Unwind_Resume(exception_object);
}

double WebCore::PlatformCALayerCocoa::shapeRoundedRect@<D0>(WebCore::PlatformCALayerCocoa *this@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  __int128 v3;
  __int128 v4;

  v2 = (_OWORD *)*((_QWORD *)this + 10);
  if (v2)
  {
    v3 = v2[1];
    *(_OWORD *)a2 = *v2;
    *(_OWORD *)(a2 + 16) = v3;
    v4 = v2[2];
    *(_OWORD *)(a2 + 32) = v4;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)&v4 = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
  }
  return *(double *)&v4;
}

void WebCore::PlatformCALayerCocoa::~PlatformCALayerCocoa(WebCore::PlatformCALayerCocoa *this)
{
  uint64_t v3;
  id *v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  int v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  WTF *v32;
  WTF *v34;
  uint64_t v35;
  WTF *v36;
  WTF *v38;
  WTF *v40;
  uint64_t v41;
  WTF *v42;
  void *v43;
  const void *v44;

  if (__ldaxr(WebCore::layerToPlatformLayerMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::layerToPlatformLayerMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::layerToPlatformLayerMapLock);
LABEL_5:
  {
    v4 = (id *)((char *)this + 32);
    v3 = *((_QWORD *)this + 4);
    if (WebCore::layerToPlatformLayerMap(void)::layerMap)
    {
      v5 = *(_DWORD *)(WebCore::layerToPlatformLayerMap(void)::layerMap - 8);
      v6 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      v10 = *(_QWORD *)(WebCore::layerToPlatformLayerMap(void)::layerMap + 16 * v9);
      if (v10 != v3)
      {
        v11 = 1;
        while (v10)
        {
          v9 = ((_DWORD)v9 + v11) & v5;
          v10 = *(_QWORD *)(WebCore::layerToPlatformLayerMap(void)::layerMap + 16 * v9);
          ++v11;
          if (v10 == v3)
            goto LABEL_13;
        }
        v9 = *(unsigned int *)(WebCore::layerToPlatformLayerMap(void)::layerMap - 4);
      }
LABEL_13:
      if (v9 != *(_DWORD *)(WebCore::layerToPlatformLayerMap(void)::layerMap - 4))
      {
        *(_QWORD *)(WebCore::layerToPlatformLayerMap(void)::layerMap + 16 * v9) = -1;
        ++*(_DWORD *)(WebCore::layerToPlatformLayerMap(void)::layerMap - 16);
        v12 = WebCore::layerToPlatformLayerMap(void)::layerMap
            ? *(_DWORD *)(WebCore::layerToPlatformLayerMap(void)::layerMap - 12) - 1
            : -1;
        *(_DWORD *)(WebCore::layerToPlatformLayerMap(void)::layerMap - 12) = v12;
        if (WebCore::layerToPlatformLayerMap(void)::layerMap)
        {
          v13 = *(_DWORD *)(WebCore::layerToPlatformLayerMap(void)::layerMap - 4);
          if (6 * *(_DWORD *)(WebCore::layerToPlatformLayerMap(void)::layerMap - 12) < v13 && v13 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,WebCore::PlatformCALayer *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WebCore::PlatformCALayer *>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WebCore::PlatformCALayer *,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WebCore::PlatformCALayer *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v13 >> 1);
        }
      }
    }
  }
  else
  {
    WebCore::layerToPlatformLayerMap(void)::layerMap = 0;
    v4 = (id *)((char *)this + 32);
  }
  v15 = __ldxr(WebCore::layerToPlatformLayerMapLock);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_28;
  }
  if (__stlxr(0, WebCore::layerToPlatformLayerMapLock))
LABEL_28:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::layerToPlatformLayerMapLock);
  objc_msgSend(*((id *)this + 7), "setOwner:", 0);
  if ((*((_BYTE *)this + 12) & 0xFE) == 4)
    objc_msgSend(*v4, "invalidate");
  if (*((_BYTE *)this + 200))
  {
    v17 = *((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = 0;
    if (v17)
    {
      v18 = *(WTF **)(v17 + 144);
      if ((WTF *)(v17 + 160) != v18 && v18)
      {
        *(_QWORD *)(v17 + 144) = 0;
        *(_DWORD *)(v17 + 152) = 0;
        WTF::fastFree(v18, v16);
      }
      v19 = *(WTF **)v17;
      if (v17 + 16 != *(_QWORD *)v17 && v19)
      {
        *(_QWORD *)v17 = 0;
        *(_DWORD *)(v17 + 8) = 0;
        WTF::fastFree(v19, v16);
      }
      WTF::fastFree((WTF *)v17, v16);
    }
  }
  v20 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v20)
  {
    v21 = *(WTF **)(v20 + 144);
    if ((WTF *)(v20 + 160) != v21 && v21)
    {
      *(_QWORD *)(v20 + 144) = 0;
      *(_DWORD *)(v20 + 152) = 0;
      WTF::fastFree(v21, v16);
    }
    v22 = *(WTF **)v20;
    if (v20 + 16 != *(_QWORD *)v20 && v22)
    {
      *(_QWORD *)v20 = 0;
      *(_DWORD *)(v20 + 8) = 0;
      WTF::fastFree(v22, v16);
    }
    WTF::fastFree((WTF *)v20, v16);
  }
  v23 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v23)
  {
    v24 = *(WTF **)(v23 + 144);
    if ((WTF *)(v23 + 160) != v24 && v24)
    {
      *(_QWORD *)(v23 + 144) = 0;
      *(_DWORD *)(v23 + 152) = 0;
      WTF::fastFree(v24, v16);
    }
    v25 = *(WTF **)v23;
    if (v23 + 16 != *(_QWORD *)v23 && v25)
    {
      *(_QWORD *)v23 = 0;
      *(_DWORD *)(v23 + 8) = 0;
      WTF::fastFree(v25, v16);
    }
    WTF::fastFree((WTF *)v23, v16);
  }
  v26 = *((unsigned int *)this + 31);
  if ((_DWORD)v26)
  {
    v27 = (uint64_t *)(*((_QWORD *)this + 14) + 16);
    v28 = 24 * v26;
    do
    {
      v29 = *v27;
      *v27 = 0;
      if (v29)
      {
        v30 = *(WTF **)(v29 + 144);
        if ((WTF *)(v29 + 160) != v30 && v30 != 0)
        {
          *(_QWORD *)(v29 + 144) = 0;
          *(_DWORD *)(v29 + 152) = 0;
          WTF::fastFree(v30, v16);
        }
        v32 = *(WTF **)v29;
        if (v29 + 16 != *(_QWORD *)v29 && v32 != 0)
        {
          *(_QWORD *)v29 = 0;
          *(_DWORD *)(v29 + 8) = 0;
          WTF::fastFree(v32, v16);
        }
        WTF::fastFree((WTF *)v29, v16);
      }
      v27 += 3;
      v28 -= 24;
    }
    while (v28);
  }
  v34 = (WTF *)*((_QWORD *)this + 14);
  if (v34)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v34, v16);
  }
  v35 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v35)
  {
    v36 = *(WTF **)(v35 + 144);
    if ((WTF *)(v35 + 160) != v36 && v36 != 0)
    {
      *(_QWORD *)(v35 + 144) = 0;
      *(_DWORD *)(v35 + 152) = 0;
      WTF::fastFree(v36, v16);
    }
    v38 = *(WTF **)v35;
    if (v35 + 16 != *(_QWORD *)v35 && v38 != 0)
    {
      *(_QWORD *)v35 = 0;
      *(_DWORD *)(v35 + 8) = 0;
      WTF::fastFree(v38, v16);
    }
    WTF::fastFree((WTF *)v35, v16);
  }
  v40 = (WTF *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v40)
    WTF::fastFree(v40, v16);
  v41 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v41)
  {
    v42 = (WTF *)WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v41, v16);
    WTF::fastFree(v42, v43);
  }
  v44 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v44)
    CFRelease(v44);
  WebCore::PlatformCALayer::~PlatformCALayer(this);
}

{
  WTF *v1;
  void *v2;

  WebCore::PlatformCALayerCocoa::~PlatformCALayerCocoa(this);
  WTF::fastFree(v1, v2);
}

