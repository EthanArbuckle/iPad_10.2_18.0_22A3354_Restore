uint64_t WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
LABEL_2:
    *(_DWORD *)(a1 + 8) = 0;
LABEL_3:
    v3 = 0;
    *(_DWORD *)(a1 + 12) = 0;
    return v3;
  }
  v5 = *(unsigned int *)(v2 - 4);
  if (!(_DWORD)v5)
    goto LABEL_18;
  v6 = 0;
  v7 = v5 - 1;
  do
  {
    v8 = v2 + 8 * v7;
    if ((unint64_t)(*(_QWORD *)v8 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v8 + 8))
    {
      v20 = a1;
      v18 = v2;
      v19 = v7;
      v17 = v6;
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket((WTF **)(v2 + 8 * v7), a2);
      v2 = v18;
      v7 = v19;
      a1 = v20;
      v6 = v17 + 1;
    }
  }
  while ((unint64_t)v7--);
  v2 = *(_QWORD *)a1;
  if (v6)
  {
    v14 = v6;
    *(_DWORD *)(v2 - 16) += v6;
    v15 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v16 = *(_DWORD *)(v15 - 12);
    else
      v16 = 0;
    *(_DWORD *)(v15 - 12) = v16 - v14;
    v2 = *(_QWORD *)a1;
  }
  if (!v2)
    goto LABEL_2;
  v10 = *(_DWORD *)(v2 - 4);
  if (v10 < 9 || 6 * *(_DWORD *)(v2 - 12) >= v10)
  {
LABEL_18:
    *(_DWORD *)(a1 + 8) = 0;
  }
  else
  {
    v21 = a1;
    WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
    a1 = v21;
    v2 = *(_QWORD *)v21;
    *(_DWORD *)(v21 + 8) = 0;
    if (!v2)
      goto LABEL_3;
  }
  v12 = *(_DWORD *)(v2 - 12);
  if (v12 >= 0x7FFFFFFF)
    v13 = -2;
  else
    v13 = 2 * v12;
  *(_DWORD *)(a1 + 12) = v13;
  return *(unsigned int *)(v2 - 12);
}

uint64_t WebCore::Layout::InlineFormattingContext::geometryForBox(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v2 = *(_QWORD *)(a1 + 8);
  if (!*(_DWORD *)(v2 + 8))
  {
    v3 = a2 + 104;
    return *(_QWORD *)v3;
  }
  v5 = *(_QWORD *)(v2 + 40);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v5 + 16 * v10);
    if (v11 == a2)
    {
LABEL_9:
      v3 = v5 + 16 * v10 + 8;
      return *(_QWORD *)v3;
    }
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(_QWORD *)(v5 + 16 * v10);
      ++v12;
      if (v11 == a2)
        goto LABEL_9;
    }
  }
  return 0;
}

WTF *WebCore::Layout::TextUtil::fallbackFontsForText@<X0>(void *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, WTF *a4@<X8>)
{
  unint64_t v5;
  unsigned int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  unsigned int v11;
  WTF *result;
  WTF::StringImpl *v13;
  uint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unsigned __int8 v22;

  v5 = (unint64_t)a1;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  if (a3)
  {
    v15 = *WebCore::RenderStyle::hyphenString((WebCore::RenderStyle *)a2, a1);
    if (v15)
    {
      v16 = *(WTF::StringImpl **)(v15 + 8);
      v17 = *(unsigned int *)(v15 + 4) | ((unint64_t)((*(_DWORD *)(v15 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v16 = 0;
      v17 = 0x100000000;
    }
    WebCore::TextRun::TextRun((uint64_t)&v20, v16, v17, 4, (*(_DWORD *)(a2 + 40) >> 26) & 1, 0, 1, 0.0, 0.0);
    WebCore::Layout::TextUtil::fallbackFontsForText(WTF::StringView,WebCore::RenderStyle const&,WebCore::Layout::TextUtil::IncludeHyphen)::$_0::operator()<WebCore::TextRun>(a4, *(_DWORD **)(a2 + 32), (uint64_t)v21, v22);
    v19 = v21;
    v21 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v5 = (unint64_t)a1;
  }
  v7 = *(_DWORD *)(a2 + 40);
  v8 = (WTF::StringImpl *)v5;
  if ((v5 & 0xFF00000000) != 0)
  {
    if ((_DWORD)v5)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_5:
      v9 = v20;
      goto LABEL_6;
    }
  }
  else if ((_DWORD)v5)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_5;
  }
  v9 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_6:
  if (!v9)
    return WebCore::Layout::TextUtil::fallbackFontsForText(WTF::StringView,WebCore::RenderStyle const&,WebCore::Layout::TextUtil::IncludeHyphen)::$_0::operator()<WebCore::TextRun>(a4, *(_DWORD **)(a2 + 32), 0, (v7 >> 25) & 2 | 8);
  v10 = *(_DWORD *)v9;
  *(_DWORD *)v9 += 2;
  v11 = (v7 >> 25) & 2 | 8;
  if (v10)
    *(_DWORD *)v9 = v10;
  else
    WTF::StringImpl::destroy(v9, v8);
  result = WebCore::Layout::TextUtil::fallbackFontsForText(WTF::StringView,WebCore::RenderStyle const&,WebCore::Layout::TextUtil::IncludeHyphen)::$_0::operator()<WebCore::TextRun>(a4, *(_DWORD **)(a2 + 32), (uint64_t)v9, v11);
  if (*(_DWORD *)v9 == 2)
    return (WTF *)WTF::StringImpl::destroy(v9, v13);
  *(_DWORD *)v9 -= 2;
  return result;
}

void WTF::HashTable<WebCore::Layout::InlineLevelBox const*,WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashMap<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = v5;
    v12 = (uint64_t *)v4;
    do
    {
      if (*v12 != -1)
      {
        if (*v12)
          WTF::HashTable<WebCore::Layout::InlineLevelBox const*,WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashMap<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>>::reinsert(*a1, v12);
        WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>::~KeyValuePair((uint64_t)v12, v8);
      }
      v12 += 3;
      --v11;
    }
    while (v11);
    goto LABEL_15;
  }
  if (v4)
LABEL_15:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WebCore::AcceleratedEffectValues::AcceleratedEffectValues(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int *v8;
  unsigned int v9;
  int v10;
  int *v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  unsigned int v25;
  int v26;
  int *v27;
  unsigned int v28;
  int v29;
  int *v30;
  unsigned int v31;
  int v32;
  int *v33;
  unsigned int v34;
  int v35;
  int *v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 77) = *(_OWORD *)(a2 + 77);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 96) = 0;
  v8 = (int *)(a1 + 96);
  *(_WORD *)(a1 + 101) = 0;
  v9 = *(unsigned __int8 *)(a2 + 100);
  *(_BYTE *)(a1 + 100) = v9;
  *(_BYTE *)(a1 + 101) = *(_BYTE *)(a2 + 101);
  if (v9 <= 0xD)
  {
    v10 = 1 << v9;
    if ((v10 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 102) = *(_BYTE *)(a2 + 102);
      *v8 = *(_DWORD *)(a2 + 96);
    }
    else if ((v10 & 0x3003) != 0)
    {
      *v8 = 0;
    }
    else
    {
      *v8 = *(_DWORD *)(a2 + 96);
      WebCore::Length::ref(v8);
    }
  }
  *(_DWORD *)(a1 + 104) = 0;
  v11 = (int *)(a1 + 104);
  *(_WORD *)(a1 + 109) = 0;
  v12 = *(unsigned __int8 *)(a2 + 108);
  *(_BYTE *)(a1 + 108) = v12;
  *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
  if (v12 <= 0xD)
  {
    v13 = 1 << v12;
    if ((v13 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 110) = *(_BYTE *)(a2 + 110);
      *v11 = *(_DWORD *)(a2 + 104);
    }
    else if ((v13 & 0x3003) != 0)
    {
      *v11 = 0;
    }
    else
    {
      *v11 = *(_DWORD *)(a2 + 104);
      WebCore::Length::ref(v11);
    }
  }
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v14 = *(unsigned int *)(a2 + 132);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 132) = v14;
  if ((_DWORD)v14)
  {
    if (v14 >> 29)
      goto LABEL_75;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v14));
    *(_DWORD *)(a1 + 128) = v14;
    *(_QWORD *)(a1 + 120) = v15;
    v16 = *(unsigned int *)(a2 + 132);
    if ((_DWORD)v16)
    {
      v17 = *(uint64_t **)(a2 + 120);
      v18 = 8 * v16;
      do
      {
        v19 = *v17++;
        ++*(_DWORD *)(v19 + 8);
        *v15++ = v19;
        v18 -= 8;
      }
      while (v18);
    }
  }
  v20 = *(_QWORD *)(a2 + 136);
  if (v20)
    ++*(_DWORD *)(v20 + 8);
  *(_QWORD *)(a1 + 136) = v20;
  v21 = *(_QWORD *)(a2 + 144);
  if (v21)
    ++*(_DWORD *)(v21 + 8);
  *(_QWORD *)(a1 + 144) = v21;
  v22 = *(_QWORD *)(a2 + 152);
  if (v22)
    ++*(_DWORD *)(v22 + 8);
  *(_QWORD *)(a1 + 152) = v22;
  v23 = *(_QWORD *)(a2 + 160);
  if (v23)
    ++*(_DWORD *)(v23 + 8);
  *(_DWORD *)(a1 + 168) = 0;
  v24 = (int *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = v23;
  *(_WORD *)(a1 + 173) = 0;
  v25 = *(unsigned __int8 *)(a2 + 172);
  *(_BYTE *)(a1 + 172) = v25;
  *(_BYTE *)(a1 + 173) = *(_BYTE *)(a2 + 173);
  if (v25 <= 0xD)
  {
    v26 = 1 << v25;
    if ((v26 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 174) = *(_BYTE *)(a2 + 174);
      *v24 = *(_DWORD *)(a2 + 168);
    }
    else if ((v26 & 0x3003) != 0)
    {
      *v24 = 0;
    }
    else
    {
      *v24 = *(_DWORD *)(a2 + 168);
      WebCore::Length::ref(v24);
    }
  }
  *(_DWORD *)(a1 + 176) = 0;
  v27 = (int *)(a1 + 176);
  *(_WORD *)(a1 + 181) = 0;
  v28 = *(unsigned __int8 *)(a2 + 180);
  *(_BYTE *)(a1 + 180) = v28;
  *(_BYTE *)(a1 + 181) = *(_BYTE *)(a2 + 181);
  if (v28 <= 0xD)
  {
    v29 = 1 << v28;
    if ((v29 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 182) = *(_BYTE *)(a2 + 182);
      *v27 = *(_DWORD *)(a2 + 176);
    }
    else if ((v29 & 0x3003) != 0)
    {
      *v27 = 0;
    }
    else
    {
      *v27 = *(_DWORD *)(a2 + 176);
      WebCore::Length::ref(v27);
    }
  }
  *(_DWORD *)(a1 + 184) = 0;
  v30 = (int *)(a1 + 184);
  *(_WORD *)(a1 + 189) = 0;
  v31 = *(unsigned __int8 *)(a2 + 188);
  *(_BYTE *)(a1 + 188) = v31;
  *(_BYTE *)(a1 + 189) = *(_BYTE *)(a2 + 189);
  if (v31 <= 0xD)
  {
    v32 = 1 << v31;
    if ((v32 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 190) = *(_BYTE *)(a2 + 190);
      *v30 = *(_DWORD *)(a2 + 184);
    }
    else if ((v32 & 0x3003) != 0)
    {
      *v30 = 0;
    }
    else
    {
      *v30 = *(_DWORD *)(a2 + 184);
      WebCore::Length::ref(v30);
    }
  }
  *(_DWORD *)(a1 + 192) = 0;
  v33 = (int *)(a1 + 192);
  *(_WORD *)(a1 + 197) = 0;
  v34 = *(unsigned __int8 *)(a2 + 196);
  *(_BYTE *)(a1 + 196) = v34;
  *(_BYTE *)(a1 + 197) = *(_BYTE *)(a2 + 197);
  if (v34 <= 0xD)
  {
    v35 = 1 << v34;
    if ((v35 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 198) = *(_BYTE *)(a2 + 198);
      *v33 = *(_DWORD *)(a2 + 192);
    }
    else if ((v35 & 0x3003) != 0)
    {
      *v33 = 0;
    }
    else
    {
      *v33 = *(_DWORD *)(a2 + 192);
      WebCore::Length::ref(v33);
    }
  }
  *(_DWORD *)(a1 + 200) = 0;
  v36 = (int *)(a1 + 200);
  *(_WORD *)(a1 + 205) = 0;
  v37 = *(unsigned __int8 *)(a2 + 204);
  *(_BYTE *)(a1 + 204) = v37;
  *(_BYTE *)(a1 + 205) = *(_BYTE *)(a2 + 205);
  if (v37 <= 0xD)
  {
    v38 = 1 << v37;
    if ((v38 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 206) = *(_BYTE *)(a2 + 206);
      *v36 = *(_DWORD *)(a2 + 200);
    }
    else if ((v38 & 0x3003) != 0)
    {
      *v36 = 0;
    }
    else
    {
      *v36 = *(_DWORD *)(a2 + 200);
      WebCore::Length::ref(v36);
    }
  }
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v39 = *(unsigned int *)(a2 + 228);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 228) = v39;
  if ((_DWORD)v39)
  {
    if (v39 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1942EA578);
    }
    v42 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v39));
    *(_DWORD *)(a1 + 224) = v39;
    *(_QWORD *)(a1 + 216) = v42;
    v43 = *(unsigned int *)(a2 + 228);
    if ((_DWORD)v43)
    {
      v44 = *(_QWORD **)(a2 + 216);
      v45 = &v44[v43];
      do
      {
        v46 = *v44;
        v47 = (unsigned int *)(*v44 + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 + 1, v47));
        *v42++ = v46;
        ++v44;
      }
      while (v44 != v45);
    }
  }
  v40 = *(unsigned int *)(a2 + 244);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 244) = v40;
  if ((_DWORD)v40)
  {
    if (!(v40 >> 29))
    {
      v49 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v40));
      *(_DWORD *)(a1 + 240) = v40;
      *(_QWORD *)(a1 + 232) = v49;
      v50 = *(unsigned int *)(a2 + 244);
      if ((_DWORD)v50)
      {
        v51 = *(_QWORD **)(a2 + 232);
        v52 = &v51[v50];
        do
        {
          v53 = *v51;
          v54 = (unsigned int *)(*v51 + 8);
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 + 1, v54));
          *v49++ = v53;
          ++v51;
        }
        while (v51 != v52);
      }
      return a1;
    }
LABEL_75:
    __break(0xC471u);
    JUMPOUT(0x1942EA570);
  }
  return a1;
}

BOOL WebCore::BitmapImage::currentFrameKnownToBeOpaque(WebCore::BitmapImage **this)
{
  return !WebCore::BitmapImage::currentFrameHasAlpha(this[8]);
}

void WebCore::JSURLSearchParamsOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WebCore::URLSearchParams *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::URLSearchParams *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::URLSearchParams **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::URLSearchParams **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v23 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v23) & v7;
        v12 = *(WebCore::URLSearchParams **)(v5 + 16 * v11);
        ++v23;
        if (v12 == v3)
          goto LABEL_3;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_3:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v13 = (_QWORD *)(v5 + 16 * v11);
      *v13 = -1;
      v16 = v13[1];
      v15 = v13 + 1;
      v14 = v16;
      if (v16)
      {
        *(_QWORD *)(v14 + 8) = 3;
        *v15 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v17 = *v4;
      if (*v4)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v4;
      if (*v4)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v21 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::URLSearchParams::~URLSearchParams(v3, a2);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

uint64_t WebCore::DiagnosticLoggingKeys::succeededMoreThan20SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::succeededLessThan20SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::succeededLessThan5SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::succeededLessThan2SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::canceledMoreThan20SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::canceledLessThan20SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::canceledLessThan5SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::canceledLessThan2SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::failedMoreThan20SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::failedLessThan20SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::failedLessThan5SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::failedLessThan2SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::timedOutKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

BOOL WebCore::ViewportConfiguration::setCanIgnoreScalingConstraints(WebCore::ViewportConfiguration *this, int a2)
{
  int v3;
  float v5;
  double v6;
  double v7;
  float v8;
  float v9;
  float v10;

  v3 = *((unsigned __int8 *)this + 232);
  if (v3 != a2)
  {
    *((_BYTE *)this + 232) = a2;
    WebCore::ViewportConfiguration::updateDefaultConfiguration(this);
    v5 = *((float *)this + 32);
    if (v5 == 0.0 || (v6 = WebCore::ViewportConfiguration::minimumEffectiveDeviceWidth(this), v6 == 0.0))
    {
      v7 = *((double *)this + 25);
    }
    else
    {
      if (v6 < v5)
        v6 = v5;
      v7 = *((double *)this + 25) * v5 / v6;
    }
    v8 = v7;
    v9 = v5 / v8;
    v10 = *((float *)this + 33) / v8;
    *((float *)this + 30) = v9;
    *((float *)this + 31) = v10;
    if (v5 < 0.0 && v5 > 0.0 && (*((_BYTE *)this + 192) & 1) == 0)
    {
      *((_DWORD *)this + 30) = 0;
      *((float *)this + 31) = roundf(v10 * (float)(0.0 / v9));
    }
    WebCore::ViewportConfiguration::updateConfiguration(this);
  }
  return v3 != a2;
}

void WebCore::Layout::LineBoxBuilder::build(uint64_t **this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  float v6;
  float v7;
  unint64_t v8;
  _QWORD *LineStyle;
  BOOL v10;
  uint64_t *v11;
  _QWORD *v12;
  WebCore::FontCascadeFonts *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  double v24;
  double v25;
  double v26;
  unsigned int v27;
  uint64_t v28;
  const WebCore::Layout::ElementBox *v29;
  uint64_t v30;
  const WebCore::Layout::InlineFormattingContext *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  float v37;
  unsigned __int8 *v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  int v42;
  float v43;
  float v44;
  int v45;
  int v46;
  int v47;
  float v48;
  float v49;
  int v50;
  int v51;
  float v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _DWORD *v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  BOOL v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  _BOOL8 v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  _QWORD *v79;
  unsigned int v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BOOL8 v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  WTF **v97;
  WTF **v98;
  uint64_t v99;
  WTF **v100;
  WTF *v101;
  unint64_t *v102;
  uint64_t v103;
  WTF **v104;
  WTF *v105;
  float v106;
  float v107;
  _BOOL8 v108;
  uint64_t v109;
  int v110;
  float v111;
  float v112;
  uint64_t *v113;
  char v114;
  const WebCore::Layout::ElementBox *v115;
  float v116;
  float v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  _OWORD *v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  int v126;
  WebCore::Layout::Box *v127;
  WebCore::RenderStyle *v128;
  unsigned int v129;
  WTF *v130;
  int8x8_t **v131;
  uint64_t v132;
  int8x8_t **v133;
  int8x8_t **v134;
  uint64_t *v135;
  BOOL v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  float v140;
  uint64_t v141;
  _BYTE *v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  int v148;
  unsigned int v149;
  int v150;
  int v151;
  int v152;
  unsigned int v153;
  int v154;
  unsigned int v155;
  int v156;
  int v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  int v161;
  float v162;
  uint64_t v163;
  int v164;
  BOOL v165;
  float v166;
  unsigned int v167;
  WTF *v168;
  unsigned int v169;
  const WebCore::Layout::InlineLevelBox *v170;
  float v171;
  uint64_t v172;
  float v173;
  float v174;
  float v175;
  float v176;
  unsigned int v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  float v183;
  float v184;
  float v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  _QWORD *v192;
  int v193;
  int v194;
  float v195;
  _BOOL4 v196;
  char v197;
  float v198;
  unsigned int v199;
  uint64_t v200;
  float v201;
  uint64_t v202;
  float v203;
  WTF *v204;
  unsigned int v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  float v211;
  float v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unsigned int v216;
  float *v217;
  uint64_t v218;
  WTF *v219;
  int v220;
  uint64_t v221;
  unint64_t v222;
  float v223;
  unsigned int v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  float *v230;
  int v231;
  int v232;
  float v233;
  int v234;
  float v235;
  float v236;
  float v237;
  WTF *v238;
  uint64_t v239;
  uint64_t v240;
  float v241;
  unint64_t v242;
  float v243;
  unsigned int v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  float v253;
  float v254;
  uint64_t *v255;
  uint64_t *v256;
  int v257;
  WebCore::Layout::Box *v258;
  uint64_t v259;
  char v260;
  int v261;
  BOOL v262;
  int v263;
  float v264;
  float v265;
  double v266;
  double v267;
  double v268;
  BOOL v269;
  BOOL v270;
  uint64_t v271;
  unsigned int v272;
  uint64_t v273;
  int v274;
  _BOOL4 v275;
  uint64_t **v276;
  uint64_t v277;
  _QWORD *v278;
  int v279;
  int v280;
  int v281;
  WTF *v282;
  void *v283;
  uint64_t v284;
  _DWORD *v285;
  unsigned int v286;
  int v287;
  unsigned int v288;
  unsigned int v289;
  int v290;
  int v291;
  unsigned int v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  int v296;
  int v297;
  int *v298;
  uint64_t v299;
  const WebCore::Layout::InlineLevelBox **v300;
  const WebCore::Layout::InlineLevelBox *v301;
  float v302;
  int v303;
  float v304;
  float v305;
  WTF *v306;
  unint64_t v307;
  unint64_t v308;
  int v309;
  unint64_t v310;
  float v311;
  int v312;
  unint64_t v314;
  float v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  float v320;
  unint64_t v321;
  float v322;
  int v323;
  unint64_t v325;
  float v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  float v331;
  float v332;
  float v333;
  uint64_t v334;
  float *v335;
  float v336;
  float v337;
  float v338;
  float v339;
  float v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  uint64_t v344;
  int v345;
  int v346;
  int v347;
  int v348;
  BOOL v349;
  float v350;
  unint64_t *v351;
  int v352;
  int v353;
  int v354;
  uint64_t v355;
  unsigned int v356;
  BOOL v357;
  BOOL v358;
  _BOOL8 v359;
  unint64_t v360;
  uint64_t v361;
  int v362;
  int v363;
  uint64_t *v364;
  _BOOL8 v365;
  uint64_t v366;
  int v367;
  _DWORD *v368;
  int v369;
  unsigned int v370;
  int v371;
  unsigned int v372;
  int v373;
  int v374;
  int v375;
  unsigned int v376;
  int v377;
  unsigned int v378;
  int v379;
  int v380;
  unsigned int v381;
  unsigned int v382;
  int v383;
  int v384;
  unsigned int v385;
  unsigned int v386;
  int v387;
  int v388;
  int v389;
  uint64_t v390;
  _BYTE *v391;
  float v392;
  uint64_t v393;
  int v394;
  _BOOL8 v395;
  _DWORD *v396;
  int v397;
  unsigned int v398;
  int v399;
  unsigned int v400;
  int v401;
  int v402;
  int v403;
  unsigned int v404;
  int v405;
  unsigned int v406;
  int v407;
  int v408;
  unsigned int v409;
  unsigned int v410;
  int v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t *v415;
  _OWORD *v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  float v420;
  float32x2_t v421;
  int v423;
  uint64_t v424;
  unsigned int v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  unint64_t v432;
  unsigned int **v433;
  unsigned int *v434;
  int v435;
  int v436;
  uint64_t *v437;
  uint64_t *v438;
  void *v439;
  WTF *v440;
  uint64_t v441;
  WTF *v442;
  WTF *v443;
  WTF *v444;
  uint64_t v445;
  int v446;
  WTF *v447;
  int v448;
  uint64_t *v449;
  uint64_t v450;
  int v451;
  unint64_t v452;
  unint64_t v453;
  unint64_t v454;
  unsigned int v455;
  int64_t *v456;
  float32x2_t *v457;
  WTF **v458;
  uint64_t v459;
  int v460;
  uint64_t v461;
  int v462;
  unint64_t v463;
  unint64_t v464;
  uint64_t v465;
  WTF **v466;
  WTF *v467;
  _DWORD *v468;
  uint64_t v469;
  uint64_t v470;
  WTF *v471;
  WTF *v472;
  uint64_t v473;
  uint64_t v474;
  unsigned int v475;
  uint64_t v476;
  uint64_t v477;
  WTF *v478;
  uint64_t v479;
  WTF *v480;
  int v481;
  float v482;
  uint64_t *v483;
  uint64_t *v484;
  float v485;
  uint64_t *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  int v490;
  float v491;
  uint64_t v493;
  unsigned int v494;
  unint64_t v495;
  unint64_t v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t v499;
  unint64_t v500;
  uint64_t v501;
  uint64_t v502;
  unint64_t v503;
  unint64_t v504;
  int v505;
  unsigned int v506;
  int v507;
  int v508;
  unsigned int v509;
  unsigned int v510;
  int v511;
  uint64_t v512;
  unsigned int v513;
  char v514;
  unsigned int v515;
  uint64_t v516;
  WTF **v517;
  WTF *v518;
  uint64_t v519;
  uint64_t v520;
  unsigned int v521;
  unint64_t v522;
  unint64_t v523;
  unint64_t v524;
  uint64_t v525;
  unint64_t v526;
  _BYTE *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  _BOOL8 v531;
  _QWORD *v532;
  uint64_t v533;
  uint64_t *v534;
  _DWORD *v535;
  int v536;
  unsigned int v537;
  int v538;
  unsigned int v539;
  int v540;
  int v541;
  int v542;
  unsigned int v543;
  int v544;
  unsigned int v545;
  int v546;
  int v547;
  unsigned int v548;
  unsigned int v549;
  int v550;
  int v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t *v554;
  _OWORD *v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  uint64_t v559;
  _DWORD *v560;
  float v561;
  uint64_t *v562;
  uint64_t v563;
  uint64_t v564;
  _QWORD *v565;
  uint64_t v566;
  _OWORD *v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  unsigned int v575;
  unint64_t v576;
  unint64_t v577;
  unint64_t v578;
  uint64_t v579;
  uint64_t v580;
  unint64_t v581;
  int v582;
  uint64_t v583;
  unsigned int v584;
  unint64_t v585;
  unint64_t v586;
  unint64_t v587;
  uint64_t v588;
  int v589;
  _QWORD *v590;
  uint64_t v591;
  unint64_t v592;
  unint64_t v593;
  unint64_t v594;
  unint64_t v595;
  uint64_t v596;
  unsigned int v597;
  unint64_t v598;
  unint64_t v599;
  unint64_t v600;
  unint64_t v601;
  float v602;
  float v603;
  float v604;
  float v605;
  int v606;
  int v607;
  int v608;
  uint64_t v609;
  uint64_t v610;
  WTF *v611;
  int v612;
  float v613;
  unint64_t v614;
  float v615;
  float v616;
  float v617;
  float v618;
  int v619;
  int v620;
  uint64_t v621;
  uint64_t v622;
  int v623;
  float v624;
  int v625;
  double v626;
  int v627;
  _DWORD *v628;
  unsigned int v629;
  unsigned int v630;
  unsigned int v631;
  unsigned int v632;
  unsigned int v633;
  uint64_t v634;
  unsigned int v635;
  unsigned int v636;
  unsigned int v637;
  uint64_t v638;
  _BOOL8 v639;
  unsigned int v641;
  int8x8_t **v642;
  uint64_t *v643;
  unsigned int v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  int v649;
  unsigned int v650;
  unsigned __int16 *v651;
  unint64_t v652;
  float v653;
  float v654;
  uint64_t v655;
  float v656;
  float v657;
  float v658;
  uint64_t *v659;
  uint64_t v660;
  unsigned int v661;
  unsigned __int8 *v662;
  uint64_t v663;
  uint64_t v664;
  BOOL v665;
  unsigned int v666;
  unsigned int v667;
  float v668;
  float v669;
  unsigned int v670;
  uint64_t v671;
  float *v672;
  uint64_t v673;
  uint64_t v674;
  int v675;
  uint64_t v676;
  int v677;
  int v678;
  int v679;
  int v680;
  int v681;
  unsigned int v682;
  signed int v683;
  int v684;
  int v685;
  unsigned int v686;
  int v687;
  int v688;
  int v689;
  unsigned int v690;
  int v691;
  int v692;
  int v693;
  unsigned int v694;
  int v695;
  int v696;
  float v697;
  float v698;
  float v699;
  float v700;
  float v701;
  double v702;
  int v704;
  uint64_t v705;
  unsigned int v706;
  int v707;
  int v708;
  float v709;
  float v710;
  unsigned int v711;
  unint64_t v712;
  unint64_t v713;
  unint64_t v714;
  uint64_t v715;
  uint64_t v716;
  int v717;
  int v718;
  WebCore::Layout::BoxGeometry *v720;
  unsigned int v721;
  int v722;
  int v723;
  int v724;
  int v725;
  unsigned int v726;
  WebCore *v727;
  const WebCore::Length *v728;
  float v729;
  unint64_t v730;
  unint64_t v731;
  unint64_t v732;
  int v733;
  int v734;
  unsigned int v735;
  float32x2_t *v736;
  int v737;
  uint64_t *v738;
  int64_t *v739;
  int v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  unsigned int v744;
  unsigned __int16 *v745;
  unint64_t v746;
  float v747;
  float v748;
  int v750;
  int v751;
  int v752;
  int v753;
  double v754;
  int v756;
  double v757;
  float v759;
  double v760;
  int v762;
  int v763;
  int v764;
  signed int v765;
  signed int v766;
  float v767;
  float v768;
  int v769;
  int v770;
  int v771;
  int v772;
  int v773;
  int v774;
  int v775;
  int v776;
  WTF *v777;
  WTF *v778;
  void *v779;
  unsigned int v780;
  uint64_t v781;
  uint64_t v782;
  unsigned int v783;
  int v784;
  WebCore::Layout::Box *v786;
  WebCore::RenderStyle *v787;
  void *v788;
  int v789;
  int v790;
  uint64_t v791;
  double v792;
  int v793;
  unsigned int v794;
  uint64_t v795;
  uint64_t v796;
  unsigned int v797;
  int v798;
  uint64_t v800;
  const WebCore::Layout::InlineLevelBox **v801;
  const WebCore::Layout::InlineLevelBox *v802;
  float v803;
  int v804;
  float v805;
  float v806;
  int v807;
  int v808;
  int v809;
  int v810;
  float v811;
  WTF *v812;
  int v813;
  int v814;
  unsigned int v815;
  float32x2_t *v816;
  uint64_t v817;
  float32x2_t v818;
  unsigned int v819;
  uint64_t v820;
  uint64_t v821;
  unsigned int v822;
  int v823;
  _DWORD *v825;
  unsigned int v826;
  unsigned int v827;
  int v828;
  int v829;
  int v830;
  int v831;
  unsigned int v832;
  unsigned int v833;
  int v834;
  int v835;
  float v836;
  float v837;
  float v838;
  int v839;
  int v840;
  int v841;
  int v842;
  uint64_t v843;
  int v844;
  uint64_t v845;
  WTF *v846;
  uint64_t *v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t *v850;
  int v851;
  unint64_t *v852;
  uint64_t *v853;
  __int128 v855;
  unint64_t *v856;
  char v857;
  char v858;
  float v859;
  float v860;
  char v861;
  unint64_t v862;
  uint64_t *v863;
  uint64_t v864;
  unint64_t v865;
  unint64_t v866;
  WTF *v867;
  unint64_t *v868;
  uint64_t *v869;

  v4 = this[1];
  v5 = **this;
  v6 = *((float *)v4 + 323);
  if (!*((_BYTE *)v4 + 1360))
    v6 = v6 - *((float *)v4 + 334);
  v7 = *((float *)v4 + 322);
  v8 = v4[175];
  *(_QWORD *)a3 = a2;
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 20) = 0;
  *(_QWORD *)(a3 + 12) = 0;
  *(_BYTE *)(a3 + 28) = 0;
  if (a2)
    LineStyle = (_QWORD *)(v5 + 16);
  else
    LineStyle = (_QWORD *)WebCore::Layout::Box::firstLineStyle((WebCore::Layout::Box *)v5);
  v10 = 0;
  *(_QWORD *)(a3 + 40) = v5;
  v11 = (uint64_t *)(a3 + 40);
  ++*(_DWORD *)(v5 + 8);
  *(float *)(a3 + 48) = v7;
  *(_DWORD *)(a3 + 52) = 0;
  *(float *)(a3 + 56) = v6;
  *(_QWORD *)(a3 + 60) = 0;
  *(_QWORD *)(a3 + 76) = 0;
  *(_QWORD *)(a3 + 68) = 0;
  if ((*(_QWORD *)(v5 + 32) & 0x1FLL) == 0x18)
    v10 = WebCore::Layout::Box::associatedRubyAnnotationBox((WebCore::Layout::Box *)v5) != 0;
  *(_BYTE *)(a3 + 84) = v10;
  *(_WORD *)(a3 + 85) = 0;
  *(_BYTE *)(a3 + 87) = 4;
  v12 = (_QWORD *)LineStyle[4];
  v13 = (WebCore::FontCascadeFonts *)v12[31];
  if (v13)
    ++*(_DWORD *)v13;
  v14 = *((_QWORD *)v13 + 13);
  if (v14 && *(_QWORD *)(v14 + 8))
    goto LABEL_11;
  v468 = (_DWORD *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(v13, (const WebCore::FontCascadeDescription *)(v12 + 6), 0);
  WebCore::FontRanges::glyphDataForCharacter(0x20u, (uint64_t)v468, 1, (uint64_t)&v855);
  if (!*((_QWORD *)&v855 + 1) || (v469 = *(_QWORD *)(*((_QWORD *)&v855 + 1) + 8)) == 0)
  {
    v470 = 0;
    goto LABEL_680;
  }
  v470 = *(_QWORD *)(v469 + 8);
  if (v470)
    goto LABEL_1284;
  v470 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v470 = 1;
  *(_QWORD *)(v470 + 8) = v469;
  v812 = *(WTF **)(v469 + 8);
  *(_QWORD *)(v469 + 8) = v470;
  if (!v812)
    goto LABEL_1284;
  if (*(_DWORD *)v812 != 1)
  {
    --*(_DWORD *)v812;
LABEL_1284:
    ++*(_DWORD *)v470;
    goto LABEL_680;
  }
  WTF::fastFree(v812, a2);
  v470 = *(_QWORD *)(v469 + 8);
  if (v470)
    goto LABEL_1284;
LABEL_680:
  v471 = (WTF *)*((_QWORD *)v13 + 13);
  *((_QWORD *)v13 + 13) = v470;
  if (v471)
  {
    if (*(_DWORD *)v471 == 1)
      WTF::fastFree(v471, a2);
    else
      --*(_DWORD *)v471;
  }
  v472 = (WTF *)*((_QWORD *)&v855 + 1);
  *((_QWORD *)&v855 + 1) = 0;
  if (v472)
  {
    if (*(_DWORD *)v472 == 1)
      WTF::fastFree(v472, a2);
    else
      --*(_DWORD *)v472;
  }
  v473 = *((_QWORD *)v13 + 13);
  if (v473 && (v474 = *(_QWORD *)(v473 + 8)) != 0)
  {
    if ((*(_BYTE *)(v474 + 256) & 2) != 0)
    {
      v475 = 1;
      do
      {
        v476 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v13, (const WebCore::FontCascadeDescription *)(v12 + 6), v475);
        if (!*(_DWORD *)(v476 + 12))
          break;
        WebCore::FontRanges::glyphDataForCharacter(0x20u, v476, 0, (uint64_t)&v855);
        if (*((_QWORD *)&v855 + 1))
          v477 = *(_QWORD *)(*((_QWORD *)&v855 + 1) + 8);
        else
          v477 = 0;
        WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v867, v477);
        v478 = (WTF *)*((_QWORD *)&v855 + 1);
        *((_QWORD *)&v855 + 1) = 0;
        if (v478)
        {
          if (*(_DWORD *)v478 == 1)
            WTF::fastFree(v478, a2);
          else
            --*(_DWORD *)v478;
        }
        v15 = v867;
        if (v867)
        {
          v479 = *((_QWORD *)v867 + 1);
          if (!v479 || (*(_BYTE *)(v479 + 256) & 2) != 0)
          {
            v481 = 0;
            v867 = 0;
          }
          else
          {
            v867 = 0;
            v480 = (WTF *)*((_QWORD *)v13 + 13);
            *((_QWORD *)v13 + 13) = v15;
            if (!v480)
              goto LABEL_12;
            if (*(_DWORD *)v480 != 1)
            {
              --*(_DWORD *)v480;
              break;
            }
            WTF::fastFree(v480, a2);
            v15 = v867;
            v867 = 0;
            if (!v15)
              break;
            v481 = 2;
          }
          if (*(_DWORD *)v15 == 1)
            WTF::fastFree(v15, a2);
          else
            --*(_DWORD *)v15;
        }
        else
        {
          v481 = 0;
        }
        ++v475;
      }
      while (!v481);
    }
  }
  else
  {
    if (!v468[3])
    {
      __break(0xC471u);
      JUMPOUT(0x1942EF210);
    }
    v609 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v468 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v468 + 8), 1);
    WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v855, v609);
    v610 = v855;
    *(_QWORD *)&v855 = 0;
    v611 = (WTF *)*((_QWORD *)v13 + 13);
    *((_QWORD *)v13 + 13) = v610;
    if (v611)
    {
      v612 = *(_DWORD *)v611 - 1;
      if (*(_DWORD *)v611 != 1)
        goto LABEL_889;
      WTF::fastFree(v611, a2);
      v611 = (WTF *)v855;
      *(_QWORD *)&v855 = 0;
      if (!v611)
        goto LABEL_11;
      v612 = *(_DWORD *)v611 - 1;
      if (*(_DWORD *)v611 != 1)
      {
LABEL_889:
        *(_DWORD *)v611 = v612;
        goto LABEL_11;
      }
      WTF::fastFree(v611, a2);
    }
  }
LABEL_11:
  v15 = (WTF *)*((_QWORD *)v13 + 13);
  if (v15)
LABEL_12:
    v16 = *((_QWORD *)v15 + 1);
  else
    v16 = 0;
  if (*(_DWORD *)v13 == 1)
  {
    WebCore::FontCascadeFonts::~FontCascadeFonts(v13, a2);
    WTF::fastFree(v282, v283);
  }
  else
  {
    --*(_DWORD *)v13;
  }
  *(_QWORD *)&v855 = v12[21];
  *(_QWORD *)(a3 + 88) = v16 + 16;
  v17 = LineStyle[4];
  *(_QWORD *)(a3 + 96) = v17 + 12;
  v18 = LineStyle[3];
  *(_WORD *)(a3 + 104) = *(_WORD *)(v18 + 196);
  v19 = LineStyle[1];
  *(_BYTE *)(a3 + 106) = (*(_BYTE *)(*(_QWORD *)(v19 + 40) + 642) >> 2) & 3;
  *(_BYTE *)(a3 + 107) = *(_BYTE *)(v18 + 233) & 0x7F;
  *(_DWORD *)(a3 + 108) = *(_DWORD *)(v17 + 204);
  *(_BYTE *)(a3 + 116) = 0;
  *(_BYTE *)(a3 + 120) = 0;
  *(_BYTE *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 136) = 0;
  v20 = *(_QWORD *)(v19 + 8);
  LODWORD(v18) = *(unsigned __int8 *)(v20 + 68) >> 4;
  *(_BYTE *)(a3 + 112) = *(_BYTE *)(v20 + 68) >> 4;
  if ((_DWORD)v18 == 9)
  {
    v727 = (WebCore *)(v20 + 52);
    WebCore::Layout::InlineLevelBox::preferredLineHeight((WebCore::Layout::InlineLevelBox *)(a3 + 40));
    *(float *)(a3 + 116) = WebCore::floatValueForLength(v727, v728, v729);
    *(_BYTE *)(a3 + 120) = 1;
  }
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 160) = 0;
  v852 = (unint64_t *)(a3 + 144);
  v853 = (uint64_t *)(a3 + 160);
  *(_QWORD *)(a3 + 152) = 0;
  if (v8)
  {
    if (v8 >= 0x2762763)
    {
      __break(0xC471u);
      JUMPOUT(0x1942EF0CCLL);
    }
    v355 = WTF::fastMalloc((WTF *)(104 * v8));
    *(_DWORD *)(a3 + 152) = 104 * (int)v8 / 0x68u;
    *(_QWORD *)(a3 + 144) = v355;
  }
  v21 = (v8 - 1) | ((v8 - 1) >> 1) | ((((_DWORD)v8 - 1) | ((v8 - 1) >> 1)) >> 2);
  v22 = v21 | (v21 >> 4) | ((v21 | (v21 >> 4)) >> 8);
  v23 = (v22 | HIWORD(v22)) + 1;
  if (v23 > 0x400)
  {
    if (v23 > 2 * v8)
      goto LABEL_386;
  }
  else if (3 * v23 > 4 * v8)
  {
LABEL_21:
    v24 = (double)v8;
    v25 = (double)v23;
    v26 = 0.604166667;
    goto LABEL_22;
  }
  LODWORD(v23) = 2 * v23;
  if (v23 <= 0x400)
    goto LABEL_21;
LABEL_386:
  v24 = (double)v8;
  v25 = (double)v23;
  v26 = 0.416666667;
LABEL_22:
  if (v25 * v26 <= v24)
    LODWORD(v23) = 2 * v23;
  if (v23 <= 8)
    v27 = 8;
  else
    v27 = v23;
  v28 = WTF::fastZeroedMalloc((WTF *)(16 * v27 + 16));
  *v853 = v28 + 16;
  *(_DWORD *)(v28 + 12) = v27;
  *(_DWORD *)(*v853 - 8) = v27 - 1;
  *(_DWORD *)(*v853 - 16) = 0;
  *(_DWORD *)(*v853 - 12) = 0;
  if ((*(_WORD *)(v5 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1942ED42CLL);
  }
  WebCore::Layout::InlineFormattingUtils::textEmphasisForInlineBox((WebCore::Layout::InlineFormattingUtils *)v5, (const WebCore::Layout::Box *)v5, v29);
  if (*(float *)&v36 != 0.0 || v37 != 0.0)
  {
    if (*(float *)&v36 == 0.0)
    {
      if (!*(_BYTE *)(a3 + 136))
        *(_BYTE *)(a3 + 136) = 1;
      *(_DWORD *)(a3 + 128) = 0;
      *(float *)(a3 + 132) = v37;
    }
    else
    {
      if (!*(_BYTE *)(a3 + 136))
        *(_BYTE *)(a3 + 136) = 1;
      *(_DWORD *)(a3 + 128) = v36;
      *(_DWORD *)(a3 + 132) = 0;
    }
  }
  v38 = (unsigned __int8 *)*this;
  v39 = *(unsigned __int8 *)(a3 + 87);
  if (v39 <= 3)
  {
    if (v39 - 1 < 2)
      goto LABEL_32;
  }
  else
  {
    switch(v39)
    {
      case 4u:
LABEL_32:
        v40 = *(_DWORD *)(a3 + 32);
        v41 = *(_QWORD *)(a3 + 88);
        if (v39 == 4 || (v42 = *(unsigned __int8 *)(a3 + 106), !*(_BYTE *)(a3 + 106)))
        {
          v46 = *(_DWORD *)(v41 + 44);
          v47 = *(_DWORD *)(v41 + 48);
          if (v40)
          {
            v62 = __OFADD__(v47, v46);
            v769 = v47 + v46;
            if (v769 < 0 != v62)
              v770 = v769 + 1;
            else
              v770 = v769;
            v46 = v769 - (v770 >> 1);
            v47 = v770 >> 1;
          }
          v44 = (float)v46;
          v43 = (float)v47;
        }
        else
        {
          WebCore::Layout::ascentAndDescentWithTextBoxEdgeForInlineBox();
          v44 = *(float *)&v36;
          if (v42 == 1)
          {
            if (v40)
            {
              v771 = *(_DWORD *)(v41 + 44);
              v772 = *(_DWORD *)(v41 + 48);
              v62 = __OFADD__(v772, v771);
              v773 = v772 + v771;
              if (v773 < 0 != v62)
                ++v773;
              v280 = v773 >> 1;
            }
            else
            {
              v280 = *(_DWORD *)(v41 + 48);
            }
            v43 = (float)v280;
          }
          else if (v42 == 2)
          {
            v45 = *(_DWORD *)(v41 + 44);
            if (v40)
            {
              v774 = *(_DWORD *)(v41 + 48);
              v62 = __OFADD__(v774, v45);
              v775 = v774 + v45;
              if (v775 < 0 != v62)
                v776 = v775 + 1;
              else
                v776 = v775;
              v45 = v775 - (v776 >> 1);
            }
            v44 = (float)v45;
          }
        }
        v48 = floorf(v44);
        v49 = ceilf(v43);
        *(float *)(a3 + 72) = v48;
        *(float *)(a3 + 76) = v49;
        *(float *)(a3 + 64) = v48;
        *(float *)(a3 + 68) = v49;
        *(float *)(a3 + 60) = v48 + v49;
        if (v39 == 4)
        {
          v50 = *(_DWORD *)(v41 + 44);
          v51 = *(_DWORD *)(v41 + 48);
          if (v40)
          {
            v62 = __OFADD__(v51, v50);
            v752 = v51 + v50;
            if (v752 < 0 != v62)
              v753 = v752 + 1;
            else
              v753 = v752;
            v50 = v752 - (v753 >> 1);
            v51 = v753 >> 1;
          }
          v7 = (float)v50;
          v52 = (float)v51;
        }
        else
        {
          if (v40)
          {
            switch(*(_WORD *)(a3 + 104))
            {
              case 2u:
LABEL_1351:
                v811 = *(float *)(v41 + 8);
                goto LABEL_1353;
              case 3u:
LABEL_1352:
                v811 = *(float *)(v41 + 36);
LABEL_1353:
                v7 = v811;
                break;
              default:
LABEL_1347:
                v807 = *(_DWORD *)(v41 + 44);
                v808 = *(_DWORD *)(v41 + 48);
                v62 = __OFADD__(v808, v807);
                v809 = v808 + v807;
                if (v809 < 0 != v62)
                  v810 = v809 + 1;
                else
                  v810 = v809;
                v7 = (float)(v809 - (v810 >> 1));
                break;
            }
          }
          else
          {
            switch(*(_WORD *)(a3 + 104))
            {
              case 2u:
                goto LABEL_1351;
              case 3u:
                goto LABEL_1352;
              case 5u:
              case 6u:
                goto LABEL_1347;
              default:
                v7 = (float)*(int *)(v41 + 44);
                break;
            }
          }
          v52 = 0.0;
          switch(HIBYTE(*(unsigned __int16 *)(a3 + 104)))
          {
            case 4u:
              break;
            case 5u:
            case 6u:
              goto LABEL_504;
            default:
              if (v40)
              {
LABEL_504:
                v352 = *(_DWORD *)(v41 + 44);
                v353 = *(_DWORD *)(v41 + 48);
                v62 = __OFADD__(v353, v352);
                v354 = v353 + v352;
                if (v354 < 0 != v62)
                  ++v354;
                v281 = v354 >> 1;
              }
              else
              {
                v281 = *(_DWORD *)(v41 + 48);
              }
              v52 = (float)v281;
              break;
          }
        }
        if ((*(_QWORD *)(*(_QWORD *)v38 + 32) & 0x1FLL) == 0x19)
        {
          v53 = *(unsigned __int8 *)(a3 + 104);
          goto LABEL_45;
        }
        v163 = *(_QWORD *)(a3 + 96);
        v164 = *(unsigned __int8 *)(v163 + 4);
        if (v164 != 11 && v164 != 13)
        {
          if (*(_BYTE *)(v163 + 6))
          {
            if (*(float *)v163 < 0.0)
              goto LABEL_201;
          }
          else if ((*(_DWORD *)v163 & 0x80000000) != 0)
          {
LABEL_201:
            v53 = *(unsigned __int8 *)(a3 + 104);
            if (v39 != 4 && *(_BYTE *)(a3 + 104))
              goto LABEL_45;
            *(float *)&v36 = (float)((float)*(int *)(v41 + 56) - (float)(v7 + v52)) * 0.5;
            goto LABEL_1168;
          }
        }
        WebCore::Layout::InlineLevelBox::preferredLineHeight((WebCore::Layout::InlineLevelBox *)(a3 + 40));
        *(float *)&v36 = (float)(floorf(*(float *)&v36) - (float)(v7 + v52)) * 0.5;
        v53 = *(unsigned __int8 *)(a3 + 104);
        v39 = *(unsigned __int8 *)(a3 + 87);
        v748 = 0.0;
        if (*(float *)&v36 <= 0.0)
          v748 = *(float *)&v36;
        if (v39 != 4 && v53 != 0)
          *(float *)&v36 = v748;
LABEL_1168:
        v7 = v7 + *(float *)&v36;
        v52 = v52 + *(float *)&v36;
LABEL_45:
        if (v53 && v39 != 4)
        {
          v54 = *v11;
          v55 = (*this)[1];
          if (*(_DWORD *)(v55 + 8))
          {
            v583 = *(_QWORD *)(v55 + 40);
            v584 = *(_DWORD *)(v583 - 8);
            v585 = (~(v54 << 32) + v54) ^ ((unint64_t)(~(v54 << 32) + v54) >> 22);
            v586 = 9 * ((v585 + ~(v585 << 13)) ^ ((v585 + ~(v585 << 13)) >> 8));
            v587 = (v586 ^ (v586 >> 15)) + ~((v586 ^ (v586 >> 15)) << 27);
            v588 = v584 & ((v587 >> 31) ^ v587);
            if (*(_QWORD *)(v583 + 16 * v588) != v54)
            {
              v589 = 1;
              do
                v588 = ((_DWORD)v588 + v589++) & v584;
              while (*(_QWORD *)(v583 + 16 * v588) != v54);
            }
            v56 = (_QWORD *)(v583 + 16 * v588 + 8);
          }
          else
          {
            v56 = (_QWORD *)(v54 + 104);
          }
          v57 = (_DWORD *)*v56;
          v58 = v57[10];
          v59 = v57[11];
          v60 = v57[14];
          v61 = v57[15];
          v62 = __OFADD__(v58, v60);
          v63 = v58 + v60;
          v35 = 0x7FFFFFFFLL;
          v64 = (v58 >> 31) + 0x7FFFFFFF;
          if (!v62)
            v64 = v63;
          v66 = v57[6];
          v65 = v57[7];
          v62 = __OFADD__(v66, v64);
          v67 = v66 + v64;
          LODWORD(v34) = (v66 >> 31) + 0x7FFFFFFF;
          if (v62)
            v67 = v34;
          v7 = v7 + (float)((float)v67 * 0.015625);
          v62 = __OFADD__(v59, v61);
          v68 = v59 + v61;
          v69 = (v59 >> 31) + 0x7FFFFFFF;
          if (v62)
            v68 = v69;
          v62 = __OFADD__(v65, v68);
          v70 = v65 + v68;
          v71 = (v65 >> 31) + 0x7FFFFFFF;
          if (!v62)
            v71 = v70;
          v52 = v52 + (float)((float)v71 * 0.015625);
        }
        *(float *)(a3 + 64) = floorf(v7);
        *(float *)(a3 + 68) = ceilf(v52);
        LODWORD(v33) = *(_DWORD *)(a3 + 32);
        v32 = *(_QWORD *)(a3 + 88);
        v72 = *(_DWORD *)(v32 + 44);
        if ((_DWORD)v33)
        {
          v750 = *(_DWORD *)(v32 + 48);
          v62 = __OFADD__(v750, v72);
          v751 = v750 + v72;
          if (v751 < 0 != v62)
            v32 = (v751 + 1);
          else
            v32 = v751;
          v72 = v751 - ((int)v32 >> 1);
        }
        *(float *)&v36 = (float)v72 - v44;
        *(_DWORD *)(a3 + 80) = v36;
        break;
      case 8u:
        v284 = *v11;
        LODWORD(v76) = *(unsigned __int16 *)(*v11 + 12);
        if ((v76 & 0xF) == 0xB)
        {
          if ((v76 & 0x40) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1942EDD80);
          }
          v368 = (_DWORD *)WebCore::Layout::InlineFormattingContext::geometryForBox((uint64_t)*this, *v11);
          v369 = v368[3];
          v370 = v368[14];
          v371 = v368[15];
          v62 = __OFADD__(v370, v369);
          v372 = v370 + v369;
          LODWORD(v34) = 0x7FFFFFFF;
          v373 = (v370 >> 31) + 0x7FFFFFFF;
          if (v62)
            v372 = v373;
          v62 = __OFADD__(v372, v371);
          v374 = v372 + v371;
          v375 = (v372 >> 31) + 0x7FFFFFFF;
          if (!v62)
            v375 = v374;
          v376 = v368[10];
          v377 = v368[11];
          v62 = __OFADD__(v376, v375);
          v378 = v376 + v375;
          v379 = (v376 >> 31) + 0x7FFFFFFF;
          if (v62)
            v378 = v379;
          v380 = v368[16];
          v62 = __OFADD__(v378, v380);
          v381 = v378 + v380;
          v382 = (v378 >> 31) + 0x7FFFFFFF;
          if (!v62)
            v382 = v381;
          v62 = __OFADD__(v382, v377);
          v383 = v382 + v377;
          v384 = (v382 >> 31) + 0x7FFFFFFF;
          if (!v62)
            v384 = v383;
          v385 = v368[6];
          LODWORD(v33) = v368[7];
          v62 = __OFADD__(v385, v384);
          v386 = v385 + v384;
          v387 = (v385 >> 31) + 0x7FFFFFFF;
          if (v62)
            v386 = v387;
          v62 = __OFADD__(v386, (_DWORD)v33);
          v32 = v386 + v33;
          v388 = (v386 >> 31) + 0x7FFFFFFF;
          if (v62)
            v389 = v388;
          else
            v389 = v32;
          if (*(_DWORD *)(a3 + 32) == 1)
          {
            v621 = WebCore::Layout::LineBox::parentInlineBox(a3, *(_QWORD *)(v284 + 80));
            LODWORD(v33) = *(_DWORD *)(a3 + 32);
            v622 = *(_QWORD *)(v621 + 48);
            v623 = *(_DWORD *)(v622 + 44);
            v32 = *(unsigned int *)(v622 + 48);
            if ((_DWORD)v33)
            {
              v62 = __OFADD__((_DWORD)v32, v623);
              v813 = v32 + v623;
              if (v813 < 0 != v62)
                v814 = v813 + 1;
              else
                v814 = v813;
              v623 = v813 - (v814 >> 1);
              v32 = (v814 >> 1);
            }
            *(float *)&v36 = (float)v623;
            *(float *)(a3 + 72) = (float)v623;
            *(float *)(a3 + 76) = (float)(int)v32;
            *(float *)(a3 + 68) = (float)(int)v32;
            v420 = (float)v389 * 0.015625;
            goto LABEL_590;
          }
          v390 = *(_QWORD *)(v284 + 144);
          if ((v390 & 0xFF00000000) == 0)
          {
            *(float *)&v36 = floorf((float)v389 * 0.015625);
            *(_DWORD *)(a3 + 72) = v36;
            *(_DWORD *)(a3 + 76) = 0;
            *(_DWORD *)(a3 + 68) = 0;
            v350 = 0.0;
            goto LABEL_589;
          }
          v391 = *(_BYTE **)(v284 + 136);
          if (!v391 || (*v391 & 1) == 0)
          {
            v392 = (float)(int)v390 * 0.015625;
            *(float *)&v36 = WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)(v284 + 16), (void *)v30);
            *(float *)(a3 + 64) = v392;
            *(float *)(a3 + 68) = *(float *)&v36 - v392;
            v393 = *(_QWORD *)(a3 + 88);
            LODWORD(v33) = *(_DWORD *)(a3 + 32);
            v394 = *(_DWORD *)(v393 + 44);
            v32 = *(unsigned int *)(v393 + 48);
            if ((_DWORD)v33)
            {
              v62 = __OFADD__((_DWORD)v32, v394);
              v789 = v32 + v394;
              if (v789 < 0 != v62)
                v790 = v789 + 1;
              else
                v790 = v789;
              v394 = v789 - (v790 >> 1);
              v32 = (v790 >> 1);
            }
            *(float *)(a3 + 72) = (float)v394;
            *(float *)(a3 + 76) = (float)(int)v32;
            *(float *)&v36 = (float)v389 * 0.015625;
            *(_DWORD *)(a3 + 60) = v36;
            break;
          }
          v624 = (float)(int)v390;
          v62 = __OFSUB__(v389, (_DWORD)v390);
          v625 = v389 - v390;
          v32 = (v389 >> 31) + 0x7FFFFFFF;
          if (v62)
            v625 = (v389 >> 31) + 0x7FFFFFFF;
          *(float *)&v36 = floorf(v624 * 0.015625);
          v350 = ceilf((float)v625 * 0.015625);
LABEL_588:
          *(_DWORD *)(a3 + 72) = v36;
          *(float *)(a3 + 76) = v350;
          *(float *)(a3 + 68) = v350;
LABEL_589:
          v420 = *(float *)&v36 + v350;
LABEL_590:
          *(float *)(a3 + 60) = v420;
          *(_DWORD *)(a3 + 64) = v36;
          break;
        }
        v285 = (_DWORD *)WebCore::Layout::InlineFormattingContext::geometryForBox((uint64_t)*this, *v11);
        v286 = v285[14];
        v287 = v285[3];
        v62 = __OFADD__(v286, v287);
        v288 = v286 + v287;
        if (v62)
          v288 = (v286 >> 31) + 0x7FFFFFFF;
        v289 = v285[10];
        v290 = v285[15];
        v62 = __OFADD__(v288, v290);
        v291 = v288 + v290;
        if (v62)
          v291 = (v288 >> 31) + 0x7FFFFFFF;
        v62 = __OFADD__(v289, v291);
        v292 = v289 + v291;
        if (v62)
          v292 = (v289 >> 31) + 0x7FFFFFFF;
        v293 = v285[16];
        v294 = v292 + v293;
        if (__OFADD__(v292, v293))
          v294 = (v292 >> 31) + 0x7FFFFFFF;
        v295 = v285[6];
        v296 = v285[11];
        v62 = __OFADD__(v294, v296);
        LODWORD(v33) = v294 + v296;
        if (v62)
          LODWORD(v33) = (v294 >> 31) + 0x7FFFFFFF;
        v32 = v295 + v33;
        if (__OFADD__(v295, (_DWORD)v33))
          v32 = (v295 >> 31) + 0x7FFFFFFF;
        v297 = v285[7];
        v74 = (v32 + v297);
        if (__OFADD__((_DWORD)v32, v297))
          v74 = (v32 >> 31) + 0x7FFFFFFF;
        LODWORD(v855) = v74;
        v81 = v38[160];
        if (v38[160])
        {
          if ((v76 & 0x40) == 0)
          {
            v30 = (uint64_t)"/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.app"
                           "/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/"
                           "local/include/wtf/TypeCasts.h";
            v31 = (const WebCore::Layout::InlineFormattingContext *)"match_constness_t<Source, Target> &WTF::downcast(Sou"
                                                                    "rce &) [Target = WebCore::Layout::ElementBox, Source"
                                                                    " = const WebCore::Layout::Box]";
            __break(0xC471u);
            goto LABEL_931;
          }
          if (*(_BYTE *)(v284 + 148))
          {
            v298 = (int *)(v284 + 144);
LABEL_587:
            *(float *)&v36 = (float)*v298 * 0.015625;
            v350 = (float)((float)(int)v74 * 0.015625) - *(float *)&v36;
            goto LABEL_588;
          }
        }
        else if ((*(_QWORD *)(v284 + 32) & 0x1FLL) == 3)
        {
          WebCore::Layout::Box::establishesInlineFormattingContext((WebCore::Layout::Box *)v284);
        }
        v298 = (int *)&v855;
        goto LABEL_587;
      case 0x10u:
        v341 = *(_QWORD *)(*v11 + 80);
        v342 = a3 + 40;
        if (*v11 != v341)
        {
          v520 = *v853;
          v521 = *(_DWORD *)(*v853 - 8);
          v522 = (~(v341 << 32) + v341) ^ ((unint64_t)(~(v341 << 32) + v341) >> 22);
          v523 = 9 * ((v522 + ~(v522 << 13)) ^ ((v522 + ~(v522 << 13)) >> 8));
          v524 = (v523 ^ (v523 >> 15)) + ~((v523 ^ (v523 >> 15)) << 27);
          v525 = v521 & ((v524 >> 31) ^ v524);
          v35 = *(_QWORD *)(*v853 + 16 * v525);
          if (v35 != v341)
          {
            v606 = 1;
            while (v35)
            {
              v525 = ((_DWORD)v525 + v606) & v521;
              v35 = *(_QWORD *)(v520 + 16 * v525);
              ++v606;
              if (v35 == v341)
                goto LABEL_778;
            }
            v525 = *(unsigned int *)(v520 - 4);
          }
LABEL_778:
          v526 = *(_QWORD *)(v520 + 16 * v525 + 8);
          if (v526 >= *(unsigned int *)(a3 + 156))
          {
            __break(0xC471u);
            JUMPOUT(0x1942EF140);
          }
          v342 = *v852 + 104 * v526;
        }
        v343 = *(_DWORD *)(a3 + 32);
        v344 = *(_QWORD *)(v342 + 48);
        LODWORD(v33) = *(_DWORD *)(v344 + 44);
        v345 = *(_DWORD *)(v344 + 48);
        v346 = v345 + v33;
        if (v345 + (int)v33 < 0 != __OFADD__(v345, (_DWORD)v33))
          v347 = v346 + 1;
        else
          v347 = v345 + v33;
        LODWORD(v34) = v346 - (v347 >> 1);
        v348 = v347 >> 1;
        v349 = v343 == 0;
        if (v343)
          v32 = v34;
        else
          v32 = v33;
        if (!v349)
          v345 = v348;
        *(float *)&v36 = (float)(int)v32;
        v350 = (float)v345;
        goto LABEL_588;
    }
  }
  v8 = (unint64_t)this[1];
  v865 = 0;
  if (!*(_DWORD *)(v8 + 44))
  {
    LOBYTE(v73) = 0;
    goto LABEL_135;
  }
  v849 = (uint64_t)v38;
  v73 = 0;
  v74 = 0;
  v7 = 0.0;
  do
  {
    v75 = *(_QWORD *)(v8 + 32);
    v76 = v75 + 120 * v74;
    v77 = (unint64_t *)(v76 + 8);
    v78 = *(_QWORD *)(v76 + 8);
    if (*((_BYTE *)this[1] + 1368))
    {
      v639 = v73;
      v79 = (_QWORD *)WebCore::Layout::Box::firstLineStyle((WebCore::Layout::Box *)v78);
      v73 = v639;
    }
    else
    {
      v79 = (_QWORD *)(v78 + 16);
    }
    v80 = *(unsigned __int8 *)v76;
    if (v73)
      goto LABEL_852;
    if (v80 > 2)
    {
      v32 = 88;
      v357 = v80 > 6 || ((1 << v80) & 0x58) == 0;
      if (!v357 || v80 - 7 < 2)
        goto LABEL_519;
      if (v80 - 9 > 2)
        goto LABEL_617;
      LODWORD(v36) = *(_DWORD *)(v75 + 120 * v74 + 28);
      if (*(float *)&v36 != 0.0)
        goto LABEL_519;
      v432 = *v77;
      v32 = *(_QWORD *)(*v77 + 32) & 0x1FLL;
      if (v32 == 24)
        goto LABEL_519;
      v32 = *(_QWORD *)(v849 + 8);
      LODWORD(v33) = *(_DWORD *)(v32 + 8);
      if (!(_DWORD)v33)
      {
        v433 = (unsigned int **)(v432 + 104);
LABEL_614:
        v434 = *v433;
LABEL_615:
        switch(v80)
        {
          case 0xBu:
            v32 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v75 + 120 * v74 + 16) + 8) + 8) + 68);
            if ((v32 & 8) != 0)
            {
              v32 = v434[8];
              if ((_DWORD)v32)
              {
                v73 = 1;
              }
              else
              {
                v560 = v434 + 12;
LABEL_814:
                v73 = *v560 != 0;
              }
            }
            else
            {
LABEL_617:
              v73 = 0;
            }
            goto LABEL_117;
          case 9u:
            v32 = v434[4];
            if (!(_DWORD)v32)
            {
              v32 = v434[8];
              if (!(_DWORD)v32)
              {
                v560 = v434 + 12;
                goto LABEL_814;
              }
            }
            goto LABEL_519;
          case 0xAu:
            v32 = v434[5];
            if (!(_DWORD)v32)
            {
              v32 = v434[9];
              if (!(_DWORD)v32)
              {
                v560 = v434 + 13;
                goto LABEL_814;
              }
            }
LABEL_519:
            v73 = 1;
LABEL_117:
            v106 = *(float *)(a3 + 48);
            LODWORD(v36) = *(_DWORD *)(v75 + 120 * v74 + 24);
            v107 = v106 + *(float *)&v36;
            switch(*(_BYTE *)v76)
            {
              case 3:
                v74 = v73;
                WebCore::Layout::InlineLevelBox::InlineLevelBox((WebCore::Layout::InlineLevelBox *)&v855, (WebCore::Layout::Box *)v78, v79, 16, 3, v106 + *(float *)&v36, 0.0, 0.0);
                WebCore::Layout::LineBoxBuilder::setVerticalPropertiesForInlineLevelBox((WebCore::Layout::LineBoxBuilder *)this, (const WebCore::Layout::LineBox *)a3, (WebCore::Layout::InlineLevelBox *)&v855);
                *(_BYTE *)(a3 + 28) |= v858;
                v862 = v855;
                v866 = *(unsigned int *)(a3 + 156);
                WTF::HashMap<WebCore::Layout::Box const*,unsigned long,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::inlineSet<WebCore::Layout::Box const*,unsigned long>((uint64_t)&v867, v853, &v862, &v866);
                v563 = *(unsigned int *)(a3 + 156);
                if ((_DWORD)v563 == *(_DWORD *)(a3 + 152))
                {
                  v564 = WTF::Vector<WebCore::Layout::InlineLevelBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v852, v563 + 1, (unint64_t)&v855);
                  v565 = (_QWORD *)(*(_QWORD *)(a3 + 144) + 104 * *(unsigned int *)(a3 + 156));
                  v566 = *(_QWORD *)v564;
                  *(_QWORD *)v564 = 0;
                  *v565 = v566;
                  v567 = v565 + 1;
                }
                else
                {
                  v590 = (_QWORD *)(*v852 + 104 * v563);
                  v591 = v855;
                  *(_QWORD *)&v855 = 0;
                  *v590 = v591;
                  v567 = v590 + 1;
                  v564 = (uint64_t)&v855;
                }
                v568 = *(_OWORD *)(v564 + 24);
                *v567 = *(_OWORD *)(v564 + 8);
                v567[1] = v568;
                v36 = *(_OWORD *)(v564 + 40);
                v569 = *(_OWORD *)(v564 + 56);
                v570 = *(_OWORD *)(v564 + 72);
                *(_OWORD *)((char *)v567 + 73) = *(_OWORD *)(v564 + 81);
                v567[3] = v569;
                v567[4] = v570;
                v567[2] = v36;
                LODWORD(v76) = *(_DWORD *)(a3 + 156) + 1;
                *(_DWORD *)(a3 + 156) = v76;
                if (!*((_BYTE *)*this + 161)
                  && !WebCore::Layout::InlineQuirks::lineBreakBoxAffectsParentInlineBox(a3))
                {
                  goto LABEL_828;
                }
                v32 = *(_QWORD *)(*v77 + 80);
                v33 = *v11;
                v571 = a3 + 40;
                if (*v11 == v32)
                  goto LABEL_827;
                v81 = *v853;
                LODWORD(v33) = *(_DWORD *)(*v853 - 8);
                v592 = (~(v32 << 32) + v32) ^ ((unint64_t)(~(v32 << 32) + v32) >> 22);
                v593 = 9 * ((v592 + ~(v592 << 13)) ^ ((v592 + ~(v592 << 13)) >> 8));
                v594 = (v593 ^ (v593 >> 15)) + ~((v593 ^ (v593 >> 15)) << 27);
                v34 = v33 & ((v594 >> 31) ^ v594);
                v35 = *(_QWORD *)(*v853 + 16 * v34);
                if (v35 == v32)
                  goto LABEL_858;
                goto LABEL_932;
              case 4:
                v572 = *(_QWORD *)(*v77 + 80);
                v33 = *v11;
                v573 = a3 + 40;
                if (*v11 == v572)
                  goto LABEL_835;
                v596 = *v853;
                v597 = *(_DWORD *)(*v853 - 8);
                v598 = (~(v572 << 32) + v572) ^ ((unint64_t)(~(v572 << 32) + v572) >> 22);
                v599 = 9 * ((v598 + ~(v598 << 13)) ^ ((v598 + ~(v598 << 13)) >> 8));
                v600 = (v599 ^ (v599 >> 15)) + ~((v599 ^ (v599 >> 15)) << 27);
                v34 = v597 & ((v600 >> 31) ^ v600);
                v35 = *(_QWORD *)(*v853 + 16 * v34);
                if (v35 == v572)
                  goto LABEL_861;
                v620 = 1;
                while (v35)
                {
                  v34 = ((_DWORD)v34 + v620) & v597;
                  v35 = *(_QWORD *)(v596 + 16 * v34);
                  ++v620;
                  if (v35 == v572)
                    goto LABEL_861;
                }
                v34 = *(unsigned int *)(v596 - 4);
LABEL_861:
                v601 = *(_QWORD *)(v596 + 16 * v34 + 8);
                if (v601 >= *(unsigned int *)(a3 + 156))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1942EEEFCLL);
                }
                LODWORD(v33) = 104;
                v573 = *v852 + 104 * v601;
LABEL_835:
                v32 = 1;
                *(_BYTE *)(v573 + 44) = 1;
                goto LABEL_73;
              case 6:
                v395 = v73;
                v396 = (_DWORD *)WebCore::Layout::InlineFormattingContext::geometryForBox(v849, v78);
                v397 = v396[2];
                v398 = v396[12];
                v399 = v396[13];
                v62 = __OFADD__(v398, v397);
                v400 = v398 + v397;
                v401 = (v398 >> 31) + 0x7FFFFFFF;
                if (v62)
                  v400 = v401;
                v62 = __OFADD__(v400, v399);
                v402 = v400 + v399;
                v403 = (v400 >> 31) + 0x7FFFFFFF;
                if (!v62)
                  v403 = v402;
                v404 = v396[8];
                v405 = v396[9];
                v62 = __OFADD__(v404, v403);
                v406 = v404 + v403;
                v407 = (v404 >> 31) + 0x7FFFFFFF;
                if (v62)
                  v406 = v407;
                v408 = v396[17];
                v62 = __OFADD__(v406, v408);
                v409 = v406 + v408;
                v410 = (v406 >> 31) + 0x7FFFFFFF;
                if (!v62)
                  v410 = v409;
                v62 = __OFADD__(v410, v405);
                v411 = v410 + v405;
                v412 = (v410 >> 31) + 0x7FFFFFFF;
                if (!v62)
                  v412 = v411;
                WebCore::Layout::InlineLevelBox::InlineLevelBox((WebCore::Layout::InlineLevelBox *)&v855, (WebCore::Layout::Box *)v78, v79, 8, 3, v107 + (float)((float)(v396[4] & ~((int)v396[4] >> 31)) * 0.015625), (float)v412 * 0.015625, 0.0);
                WebCore::Layout::LineBoxBuilder::setVerticalPropertiesForInlineLevelBox((WebCore::Layout::LineBoxBuilder *)this, (const WebCore::Layout::LineBox *)a3, (WebCore::Layout::InlineLevelBox *)&v855);
                *(_BYTE *)(a3 + 28) |= v858;
                v862 = v855;
                v866 = *(unsigned int *)(a3 + 156);
                WTF::HashMap<WebCore::Layout::Box const*,unsigned long,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::inlineSet<WebCore::Layout::Box const*,unsigned long>((uint64_t)&v867, v853, &v862, &v866);
                v413 = *(unsigned int *)(a3 + 156);
                if ((_DWORD)v413 == *(_DWORD *)(a3 + 152))
                {
                  v414 = WTF::Vector<WebCore::Layout::InlineLevelBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v852, v413 + 1, (unint64_t)&v855);
                  LODWORD(v33) = 104;
                  v415 = (uint64_t *)(*(_QWORD *)(a3 + 144) + 104 * *(unsigned int *)(a3 + 156));
                  v32 = *(_QWORD *)v414;
                  *(_QWORD *)v414 = 0;
                  *v415 = v32;
                  v416 = v415 + 1;
                }
                else
                {
                  LODWORD(v33) = 104;
                  v437 = (uint64_t *)(*v852 + 104 * v413);
                  v32 = v855;
                  *(_QWORD *)&v855 = 0;
                  *v437 = v32;
                  v416 = v437 + 1;
                  v414 = (uint64_t)&v855;
                }
                v417 = *(_OWORD *)(v414 + 24);
                *v416 = *(_OWORD *)(v414 + 8);
                v416[1] = v417;
                v36 = *(_OWORD *)(v414 + 40);
                v418 = *(_OWORD *)(v414 + 56);
                v419 = *(_OWORD *)(v414 + 72);
                *(_OWORD *)((char *)v416 + 73) = *(_OWORD *)(v414 + 81);
                v416[3] = v418;
                v416[4] = v419;
                v416[2] = v36;
                ++*(_DWORD *)(a3 + 156);
                v125 = v855;
                *(_QWORD *)&v855 = 0;
                v73 = v395;
                if (!v125)
                  goto LABEL_73;
                v126 = *(_DWORD *)(v125 + 8);
                if (!v126)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1942EC73CLL);
                }
                goto LABEL_134;
              case 9:
                goto LABEL_119;
              case 0xA:
                v359 = v73;
                v360 = *v77;
                v361 = a3 + 40;
                if (*v11 == *v77)
                  goto LABEL_524;
                v424 = *v853;
                v425 = *(_DWORD *)(*v853 - 8);
                v426 = (~(v360 << 32) + v360) ^ ((~(v360 << 32) + v360) >> 22);
                v427 = 9 * ((v426 + ~(v426 << 13)) ^ ((v426 + ~(v426 << 13)) >> 8));
                v428 = (v427 ^ (v427 >> 15)) + ~((v427 ^ (v427 >> 15)) << 27);
                v429 = v425 & ((v428 >> 31) ^ v428);
                v430 = *(_QWORD *)(*v853 + 16 * v429);
                if (v430 == v360)
                  goto LABEL_605;
                v582 = 1;
                while (v430)
                {
                  v429 = ((_DWORD)v429 + v582) & v425;
                  v430 = *(_QWORD *)(v424 + 16 * v429);
                  ++v582;
                  if (v430 == v360)
                    goto LABEL_605;
                }
                v429 = *(unsigned int *)(v424 - 4);
LABEL_605:
                v431 = *(_QWORD *)(v424 + 16 * v429 + 8);
                if (v431 >= *(unsigned int *)(a3 + 156))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1942EEEF4);
                }
                v361 = *v852 + 104 * v431;
LABEL_524:
                v362 = *(_DWORD *)(WebCore::Layout::InlineFormattingContext::geometryForBox(v849, v78) + 20);
                if (v362 == 0x80000000)
                  v363 = 0x7FFFFFFF;
                else
                  v363 = -v362;
                v32 = v75 + 120 * v74;
                *(float *)&v36 = fmaxf((float)(v107 + (float)(*(float *)(v32 + 28) + (float)((float)v363 * 0.015625)))- *(float *)(v361 + 8), v7);
                *(_DWORD *)(v361 + 16) = v36;
                *(_BYTE *)(v361 + 46) = 1;
                v73 = v359;
                goto LABEL_73;
              case 0xB:
                if ((*(_BYTE *)(*(_QWORD *)(v79[1] + 8) + 68) & 8) != 0)
                {
LABEL_119:
                  v108 = v73;
                  v109 = WebCore::Layout::InlineFormattingContext::geometryForBox(v849, v78);
                  v110 = *(_DWORD *)(v109 + 16) & ~(*(int *)(v109 + 16) >> 31);
                }
                else
                {
                  v108 = v73;
                  v110 = 0;
                }
                v111 = v107 + (float)((float)v110 * 0.015625);
                v112 = (float)(v106 + *(float *)(a3 + 56)) - v111;
                v113 = this[1];
                if (!*((_BYTE *)v113 + 1360))
                  v112 = v112 + *((float *)v113 + 334);
                if (v112 < 0.0)
                  v112 = v7;
                if (v80 == 9)
                  v114 = 1;
                else
                  v114 = 2;
                WebCore::Layout::InlineLevelBox::InlineLevelBox((WebCore::Layout::InlineLevelBox *)&v855, (WebCore::Layout::Box *)v78, v79, v114, 0, v111, v112, 0.0);
                WebCore::Layout::InlineFormattingUtils::textEmphasisForInlineBox((WebCore::Layout::InlineFormattingUtils *)v78, (const WebCore::Layout::Box *)**this, v115);
                if (v116 != 0.0 || v117 != 0.0)
                {
                  if (v116 == 0.0)
                  {
                    if (!v861)
                      v861 = 1;
                    v859 = 0.0;
                    v860 = v117;
                  }
                  else
                  {
                    if (!v861)
                      v861 = 1;
                    v859 = v116;
                    v860 = 0.0;
                  }
                }
                WebCore::Layout::LineBoxBuilder::setVerticalPropertiesForInlineLevelBox((WebCore::Layout::LineBoxBuilder *)this, (const WebCore::Layout::LineBox *)a3, (WebCore::Layout::InlineLevelBox *)&v855);
                if (*(_BYTE *)v76 == 9)
                {
                  v358 = 1;
                  v857 = 1;
                  if (!*((_BYTE *)this + 17))
                    v358 = (*(_QWORD *)(v78 + 32) & 0x1FLL) == 24;
                  *((_BYTE *)this + 17) = v358;
                }
                *(_BYTE *)(a3 + 28) |= v858;
                v862 = v855;
                v866 = *(unsigned int *)(a3 + 156);
                WTF::HashMap<WebCore::Layout::Box const*,unsigned long,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::inlineSet<WebCore::Layout::Box const*,unsigned long>((uint64_t)&v867, v853, &v862, &v866);
                v118 = *(unsigned int *)(a3 + 156);
                if ((_DWORD)v118 == *(_DWORD *)(a3 + 152))
                {
                  v119 = WTF::Vector<WebCore::Layout::InlineLevelBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v852, v118 + 1, (unint64_t)&v855);
                  LODWORD(v33) = 104;
                  v120 = (uint64_t *)(*(_QWORD *)(a3 + 144) + 104 * *(unsigned int *)(a3 + 156));
                  v32 = *(_QWORD *)v119;
                  *(_QWORD *)v119 = 0;
                  *v120 = v32;
                  v121 = v120 + 1;
                }
                else
                {
                  LODWORD(v33) = 104;
                  v364 = (uint64_t *)(*v852 + 104 * v118);
                  v32 = v855;
                  *(_QWORD *)&v855 = 0;
                  *v364 = v32;
                  v121 = v364 + 1;
                  v119 = (uint64_t)&v855;
                }
                v122 = *(_OWORD *)(v119 + 24);
                *v121 = *(_OWORD *)(v119 + 8);
                v121[1] = v122;
                v36 = *(_OWORD *)(v119 + 40);
                v123 = *(_OWORD *)(v119 + 56);
                v124 = *(_OWORD *)(v119 + 72);
                *(_OWORD *)((char *)v121 + 73) = *(_OWORD *)(v119 + 81);
                v121[3] = v123;
                v121[4] = v124;
                v121[2] = v36;
                ++*(_DWORD *)(a3 + 156);
                v125 = v855;
                *(_QWORD *)&v855 = 0;
                v73 = v108;
                if (!v125)
                  goto LABEL_73;
                v126 = *(_DWORD *)(v125 + 8);
                if (!v126)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1942ED9D0);
                }
                goto LABEL_134;
              default:
                if (v80 - 7 > 1)
                {
                  if (v80 == 5)
                  {
                    v365 = v73;
                    WebCore::Layout::InlineLevelBox::InlineLevelBox((WebCore::Layout::InlineLevelBox *)&v855, (WebCore::Layout::Box *)v78, v79, 32, 3, v106 + *(float *)&v36, 0.0, 0.0);
                    *(_QWORD *)&v36 = WebCore::Layout::LineBox::addInlineLevelBox(a3, (unint64_t)&v855).n128_u64[0];
                    v366 = v855;
                    *(_QWORD *)&v855 = 0;
                    if (v366)
                    {
                      v367 = *(_DWORD *)(v366 + 8);
                      if (!v367)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1942EEF24);
                      }
                      v32 = (v367 - 1);
                      *(_DWORD *)(v366 + 8) = v32;
                    }
                    v73 = v365;
                  }
                  goto LABEL_73;
                }
                if ((*(_WORD *)(v78 + 12) & 0x40) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1942EE6A4);
                }
                v527 = *(_BYTE **)(v78 + 136);
                v528 = v849;
                if (v527 && (*v527 & 1) != 0)
                  goto LABEL_785;
                v529 = *(_QWORD *)(*v77 + 80);
                v530 = a3 + 40;
                if (*v11 == v529)
                  goto LABEL_784;
                v574 = *v853;
                v575 = *(_DWORD *)(*v853 - 8);
                v576 = (~(v529 << 32) + v529) ^ ((unint64_t)(~(v529 << 32) + v529) >> 22);
                v577 = 9 * ((v576 + ~(v576 << 13)) ^ ((v576 + ~(v576 << 13)) >> 8));
                v578 = (v577 ^ (v577 >> 15)) + ~((v577 ^ (v577 >> 15)) << 27);
                v579 = v575 & ((v578 >> 31) ^ v578);
                v580 = *(_QWORD *)(*v853 + 16 * v579);
                if (v580 == v529)
                  goto LABEL_837;
                v608 = 1;
                break;
            }
            while (v580)
            {
              v579 = ((_DWORD)v579 + v608) & v575;
              v580 = *(_QWORD *)(v574 + 16 * v579);
              ++v608;
              v528 = v849;
              if (v580 == v529)
                goto LABEL_837;
            }
            v579 = *(unsigned int *)(v574 - 4);
            v528 = v849;
LABEL_837:
            v581 = *(_QWORD *)(v574 + 16 * v579 + 8);
            if (v581 >= *(unsigned int *)(a3 + 156))
            {
              __break(0xC471u);
              JUMPOUT(0x1942EEF2CLL);
            }
            v530 = *v852 + 104 * v581;
LABEL_784:
            *(_BYTE *)(v530 + 44) = 1;
LABEL_785:
            v531 = v73;
            if (v80 == 8)
            {
              v532 = this + 4;
              v533 = *((unsigned int *)this + 11);
              if ((_DWORD)v533 == *((_DWORD *)this + 10))
              {
                v534 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v532, v533 + 1, (unint64_t)&v865);
                v533 = *((unsigned int *)this + 11);
                this[4][v533] = *v534;
              }
              else
              {
                *(_QWORD *)(*v532 + 8 * v533) = v865;
              }
              *((_DWORD *)this + 11) = v533 + 1;
            }
            v535 = (_DWORD *)WebCore::Layout::InlineFormattingContext::geometryForBox(v528, v78);
            v536 = v535[2];
            v537 = v535[12];
            v538 = v535[13];
            v62 = __OFADD__(v537, v536);
            v539 = v537 + v536;
            v540 = (v537 >> 31) + 0x7FFFFFFF;
            if (v62)
              v539 = v540;
            v62 = __OFADD__(v539, v538);
            v541 = v539 + v538;
            v542 = (v539 >> 31) + 0x7FFFFFFF;
            if (!v62)
              v542 = v541;
            v543 = v535[8];
            v544 = v535[9];
            v62 = __OFADD__(v543, v542);
            v545 = v543 + v542;
            v546 = (v543 >> 31) + 0x7FFFFFFF;
            if (v62)
              v545 = v546;
            v547 = v535[17];
            v62 = __OFADD__(v545, v547);
            v548 = v545 + v547;
            v549 = (v545 >> 31) + 0x7FFFFFFF;
            if (!v62)
              v549 = v548;
            v62 = __OFADD__(v549, v544);
            v550 = v549 + v544;
            v551 = (v549 >> 31) + 0x7FFFFFFF;
            if (!v62)
              v551 = v550;
            WebCore::Layout::InlineLevelBox::InlineLevelBox((WebCore::Layout::InlineLevelBox *)&v855, (WebCore::Layout::Box *)v78, v79, 8, 3, v107, (float)v551 * 0.015625, 0.0);
            WebCore::Layout::LineBoxBuilder::setVerticalPropertiesForInlineLevelBox((WebCore::Layout::LineBoxBuilder *)this, (const WebCore::Layout::LineBox *)a3, (WebCore::Layout::InlineLevelBox *)&v855);
            *(_BYTE *)(a3 + 28) |= v858;
            v862 = v855;
            v866 = *(unsigned int *)(a3 + 156);
            WTF::HashMap<WebCore::Layout::Box const*,unsigned long,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::inlineSet<WebCore::Layout::Box const*,unsigned long>((uint64_t)&v867, v853, &v862, &v866);
            v552 = *(unsigned int *)(a3 + 156);
            if ((_DWORD)v552 == *(_DWORD *)(a3 + 152))
            {
              v553 = WTF::Vector<WebCore::Layout::InlineLevelBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v852, v552 + 1, (unint64_t)&v855);
              LODWORD(v33) = 104;
              v554 = (uint64_t *)(*(_QWORD *)(a3 + 144) + 104 * *(unsigned int *)(a3 + 156));
              v32 = *(_QWORD *)v553;
              *(_QWORD *)v553 = 0;
              *v554 = v32;
              v555 = v554 + 1;
            }
            else
            {
              LODWORD(v33) = 104;
              v562 = (uint64_t *)(*v852 + 104 * v552);
              v32 = v855;
              *(_QWORD *)&v855 = 0;
              *v562 = v32;
              v555 = v562 + 1;
              v553 = (uint64_t)&v855;
            }
            v556 = *(_OWORD *)(v553 + 24);
            *v555 = *(_OWORD *)(v553 + 8);
            v555[1] = v556;
            v36 = *(_OWORD *)(v553 + 40);
            v557 = *(_OWORD *)(v553 + 56);
            v558 = *(_OWORD *)(v553 + 72);
            *(_OWORD *)((char *)v555 + 73) = *(_OWORD *)(v553 + 81);
            v555[3] = v557;
            v555[4] = v558;
            v555[2] = v36;
            ++*(_DWORD *)(a3 + 156);
            v125 = v855;
            *(_QWORD *)&v855 = 0;
            v73 = v531;
            if (v125)
            {
              v126 = *(_DWORD *)(v125 + 8);
              if (!v126)
              {
                __break(0xC471u);
                JUMPOUT(0x1942ED35CLL);
              }
LABEL_134:
              v32 = (v126 - 1);
              *(_DWORD *)(v125 + 8) = v32;
            }
            goto LABEL_73;
        }
LABEL_852:
        if (v80 > 2)
          goto LABEL_117;
        goto LABEL_70;
      }
      v32 = *(_QWORD *)(v32 + 40);
      if (v32)
      {
        LODWORD(v33) = *(_DWORD *)(v32 - 8);
        v730 = (~(v432 << 32) + v432) ^ ((~(v432 << 32) + v432) >> 22);
        v731 = 9 * ((v730 + ~(v730 << 13)) ^ ((v730 + ~(v730 << 13)) >> 8));
        v732 = (v731 ^ (v731 >> 15)) + ~((v731 ^ (v731 >> 15)) << 27);
        v34 = v33 & ((v732 >> 31) ^ v732);
        v35 = *(_QWORD *)(v32 + 16 * v34);
        if (v35 == v432)
        {
LABEL_1121:
          v433 = (unsigned int **)(v32 + 16 * v34 + 8);
          goto LABEL_614;
        }
        v733 = 1;
        while (v35)
        {
          v34 = ((_DWORD)v34 + v733) & v33;
          v35 = *(_QWORD *)(v32 + 16 * v34);
          ++v733;
          if (v35 == v432)
            goto LABEL_1121;
        }
      }
      v434 = 0;
      goto LABEL_615;
    }
    v81 = *(unsigned __int8 *)(v75 + 120 * v74 + 112);
    if (!*(_BYTE *)(v75 + 120 * v74 + 112))
      goto LABEL_931;
    v73 = *(_QWORD *)(v75 + 120 * v74 + 96) != 0;
LABEL_70:
    v81 = *v77;
    v33 = *(_QWORD *)(*v77 + 80);
    v82 = a3 + 40;
    if (*v11 != v33)
    {
      v84 = *v853;
      if (!*v853)
        goto LABEL_1132;
      LODWORD(v34) = *(_DWORD *)(v84 - 8);
      v85 = (~(v33 << 32) + v33) ^ ((~(v33 << 32) + v33) >> 22);
      v86 = 9 * ((v85 + ~(v85 << 13)) ^ ((v85 + ~(v85 << 13)) >> 8));
      v87 = (v86 ^ (v86 >> 15)) + ~((v86 ^ (v86 >> 15)) << 27);
      v88 = v34 & ((v87 >> 31) ^ v87);
      v35 = 16 * v88;
      v89 = *(_QWORD *)(v84 + v35);
      if (v89 != v33)
      {
        v35 = 1;
        while (v89)
        {
          v88 = ((_DWORD)v88 + (_DWORD)v35) & v34;
          v89 = *(_QWORD *)(v84 + 16 * v88);
          v35 = (v35 + 1);
          if (v89 == v33)
            goto LABEL_80;
        }
        v88 = *(unsigned int *)(v84 - 4);
      }
LABEL_80:
      v33 = *(unsigned int *)(v84 - 4);
      if (v88 == v33)
      {
LABEL_1132:
        v82 = 0;
      }
      else
      {
        v90 = *(_QWORD *)(v84 + 16 * v88 + 8);
        if (v90 >= *(unsigned int *)(a3 + 156))
        {
          __break(0xC471u);
          JUMPOUT(0x1942EEF34);
        }
        v33 = *v852;
        LODWORD(v34) = 104;
        v82 = *v852 + 104 * v90;
      }
    }
    *(_BYTE *)(v82 + 44) = 1;
    if ((*(_WORD *)(v81 + 12) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1942ED40CLL);
    }
    v32 = *(unsigned __int8 *)(v81 + 129);
    if ((v32 & 1) != 0)
      goto LABEL_73;
    v32 = *(unsigned __int8 *)(v75 + 120 * v74 + 112);
    if (*(_BYTE *)(v75 + 120 * v74 + 112))
    {
      v91 = v75 + 120 * v74;
      v32 = *(unsigned __int8 *)(v91 + 104);
      v92 = *(_QWORD *)(v81 + 120);
      v93 = v73;
      if (!v92
        || (v81 = *(unsigned int *)(v91 + 88), v94 = *(unsigned int *)(v92 + 4), v94 <= v81))
      {
        v30 = 0x100000000;
LABEL_90:
        WebCore::Layout::TextUtil::fallbackFontsForText((void *)v30, (uint64_t)v79, v32 & 1, (WTF *)&v867);
        v97 = (WTF **)v867;
        v73 = v93;
        if (!v867 || !*((_DWORD *)v867 - 3))
          goto LABEL_92;
        v32 = *((unsigned int *)v867 - 1);
        v102 = (unint64_t *)v867;
        if ((_DWORD)v32)
        {
          v33 = 8 * v32;
          v102 = (unint64_t *)v867;
          while (1)
          {
            v34 = *v102 + 1;
            if (v34 > 1)
              break;
            ++v102;
            v33 -= 8;
            if (!v33)
              goto LABEL_92;
          }
        }
        v32 = (uint64_t)v867 + 8 * v32;
        if (v102 != (unint64_t *)v32)
        {
          v33 = *v102;
          while (1)
          {
            v33 = *(_QWORD *)(v33 + 8);
            if (v33)
              break;
            if (++v102 != (unint64_t *)v32)
            {
              while (1)
              {
                v33 = *v102;
                v34 = *v102 + 1;
                if (v34 > 1)
                  break;
                ++v102;
                v73 = v93;
                if (v102 == (unint64_t *)v32)
                  goto LABEL_92;
              }
              v73 = v93;
              if (v102 != (unint64_t *)v32)
                continue;
            }
            goto LABEL_92;
          }
          v438 = this[3];
          v847 = (uint64_t *)(this + 3);
          if (v438)
          {
            v734 = *((_DWORD *)v438 - 2);
            v735 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v82) & v734;
            v736 = (float32x2_t *)v438[3 * v735];
            if (v736 != (float32x2_t *)v82)
            {
              v737 = 1;
              while (v736)
              {
                v735 = (v735 + v737) & v734;
                v736 = (float32x2_t *)v438[3 * v735];
                ++v737;
                if (v736 == (float32x2_t *)v82)
                  goto LABEL_1138;
              }
              goto LABEL_635;
            }
LABEL_1138:
            v738 = &v438[3 * v735];
            WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::HashTable((uint64_t *)&v862, v738 + 1);
            v863 = (uint64_t *)v738[2];
          }
          else
          {
LABEL_635:
            v862 = 0;
            v863 = 0;
          }
          v844 = WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)&v862, (void *)v30);
          if (!v867)
          {
            v440 = 0;
            v441 = 0;
            goto LABEL_638;
          }
          v441 = *((unsigned int *)v867 - 1);
          v440 = (WTF *)((char *)v867 + 8 * v441);
          if (!*((_DWORD *)v867 - 3))
          {
LABEL_638:
            v442 = v440;
            v440 = (WTF *)((char *)v867 + 8 * v441);
            goto LABEL_639;
          }
          if ((_DWORD)v441)
          {
            v519 = 8 * v441;
            v442 = v867;
            do
            {
              if ((unint64_t)(*(_QWORD *)v442 + 1) > 1)
                goto LABEL_639;
              v442 = (WTF *)((char *)v442 + 8);
              v519 -= 8;
            }
            while (v519);
            v442 = v440;
LABEL_639:
            if (!v867)
            {
              v443 = 0;
              goto LABEL_641;
            }
            v559 = *((unsigned int *)v867 - 1);
          }
          else
          {
            v559 = 0;
            v442 = v867;
          }
          v443 = (WTF *)((char *)v867 + 8 * v559);
LABEL_641:
          if (v443 != v442)
          {
            do
            {
              if (*(_QWORD *)(*(_QWORD *)v442 + 8))
                goto LABEL_643;
              v777 = (WTF *)((char *)v442 + 8);
              v442 = v440;
              if (v777 != v440)
              {
                v442 = v777;
                do
                {
                  if ((unint64_t)(*(_QWORD *)v442 + 1) > 1)
                    goto LABEL_1240;
                  v442 = (WTF *)((char *)v442 + 8);
                }
                while (v442 != v440);
                v442 = v440;
              }
LABEL_1240:
              ;
            }
            while (v442 != v443);
            v442 = v443;
          }
LABEL_643:
          if (v867)
            v444 = (WTF *)((char *)v867 + 8 * *((unsigned int *)v867 - 1));
          else
            v444 = 0;
          while (v442 != v444)
          {
            v445 = *(_QWORD *)(*(_QWORD *)v442 + 8);
            WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Font>((uint64_t)&v862, (_QWORD *)v445, (uint64_t)&v855);
            if (*((_BYTE *)this + 16))
              LOBYTE(v446) = 1;
            else
              v446 = (*(unsigned __int8 *)(v445 + 344) >> 3) & 1;
            *((_BYTE *)this + 16) = v446;
            v447 = v440;
            if ((WTF *)((char *)v442 + 8) != v440)
            {
              v447 = (WTF *)((char *)v442 + 8);
              do
              {
                if ((unint64_t)(*(_QWORD *)v447 + 1) > 1)
                  goto LABEL_653;
                v447 = (WTF *)((char *)v447 + 8);
              }
              while (v447 != v440);
              v447 = v440;
            }
LABEL_653:
            v442 = v443;
            if (v447 != v443)
            {
              v442 = v447;
              if (!*(_QWORD *)(*(_QWORD *)v447 + 8))
              {
                while (1)
                {
                  v778 = (WTF *)((char *)v442 + 8);
                  v442 = v440;
                  if (v778 != v440)
                  {
                    v442 = v778;
                    do
                    {
                      if ((unint64_t)(*(_QWORD *)v442 + 1) > 1)
                        goto LABEL_1247;
                      v442 = (WTF *)((char *)v442 + 8);
                    }
                    while (v442 != v440);
                    v442 = v440;
                  }
LABEL_1247:
                  if (v442 == v443)
                    break;
                  if (*(_QWORD *)(*(_QWORD *)v442 + 8))
                    goto LABEL_655;
                }
                v442 = v443;
              }
            }
LABEL_655:
            LODWORD(v868) = (_DWORD)v868 + 1;
          }
          v448 = WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)&v862, v439);
          v73 = v93;
          v449 = (uint64_t *)(this + 3);
          if (v448 != v844)
          {
            v450 = *v847;
            if (*v847
              || (WTF::HashTable<WebCore::Layout::InlineLevelBox const*,WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashMap<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>>::rehash(v847, 8u), (v450 = *v847) != 0))
            {
              v451 = *(_DWORD *)(v450 - 8);
            }
            else
            {
              v451 = 0;
            }
            v452 = (~(v82 << 32) + v82) ^ ((unint64_t)(~(v82 << 32) + v82) >> 22);
            v453 = 9 * ((v452 + ~(v452 << 13)) ^ ((v452 + ~(v452 << 13)) >> 8));
            v454 = (v453 ^ (v453 >> 15)) + ~((v453 ^ (v453 >> 15)) << 27);
            v455 = v451 & ((v454 >> 31) ^ v454);
            v456 = (int64_t *)(v450 + 24 * v455);
            v457 = (float32x2_t *)*v456;
            if (!*v456)
              goto LABEL_661;
            v739 = 0;
            v740 = 1;
            do
            {
              if (v457 == (float32x2_t *)v82)
              {
                WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::operator=(v456 + 1, &v862);
                v73 = v93;
                goto LABEL_668;
              }
              if (v457 == (float32x2_t *)-1)
                v739 = v456;
              v455 = (v455 + v740) & v451;
              v456 = (int64_t *)(v450 + 24 * v455);
              v457 = (float32x2_t *)*v456;
              ++v740;
            }
            while (*v456);
            v449 = (uint64_t *)(this + 3);
            if (v739)
            {
              *v739 = 0;
              v739[1] = 0;
              v739[2] = 0;
              --*(_DWORD *)(*v847 - 16);
              v456 = v739;
            }
LABEL_661:
            *v456 = v82;
            WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::HashTable((uint64_t *)&v855, &v862);
            v458 = (WTF **)v456[1];
            v456[1] = v855;
            *(_QWORD *)&v855 = v458;
            if (v458)
            {
              v516 = *((unsigned int *)v458 - 1);
              if ((_DWORD)v516)
              {
                v517 = v458;
                do
                {
                  v518 = *v517;
                  if (*v517 != (WTF *)-1)
                  {
                    *v517 = 0;
                    if (v518)
                    {
                      if (*(_DWORD *)v518 == 1)
                        WTF::fastFree(v518, (void *)v30);
                      else
                        --*(_DWORD *)v518;
                    }
                  }
                  ++v517;
                  --v516;
                }
                while (v516);
              }
              WTF::fastFree((WTF *)(v458 - 2), (void *)v30);
            }
            v456[2] = (int64_t)v863;
            v459 = *v449;
            if (*v449)
              v460 = *(_DWORD *)(v459 - 12) + 1;
            else
              v460 = 1;
            v73 = v93;
            *(_DWORD *)(v459 - 12) = v460;
            v461 = *v449;
            if (*v449)
              v462 = *(_DWORD *)(v461 - 12);
            else
              v462 = 0;
            LODWORD(v33) = *(_DWORD *)(v461 - 16);
            v32 = (v33 + v462);
            v463 = *(unsigned int *)(v461 - 4);
            if (v463 > 0x400)
            {
              if (v463 > 2 * v32)
                goto LABEL_668;
            }
            else if (3 * v463 > 4 * v32)
            {
              goto LABEL_668;
            }
            WTF::HashTable<WebCore::Layout::InlineLevelBox const*,WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashMap<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>>::expand(v449);
            v73 = v93;
          }
LABEL_668:
          v97 = 0;
          v98 = (WTF **)v867;
          v867 = 0;
          *(_QWORD *)&v855 = v98;
          *((_QWORD *)&v855 + 1) = v868;
          v464 = v862;
          if (v862)
          {
            v465 = *(unsigned int *)(v862 - 4);
            if ((_DWORD)v465)
            {
              v466 = (WTF **)v862;
              do
              {
                v467 = *v466;
                if (*v466 != (WTF *)-1)
                {
                  *v466 = 0;
                  if (v467)
                  {
                    if (*(_DWORD *)v467 == 1)
                      WTF::fastFree(v467, (void *)v30);
                    else
                      --*(_DWORD *)v467;
                  }
                }
                ++v466;
                --v465;
              }
              while (v465);
            }
            WTF::fastFree((WTF *)(v464 - 16), (void *)v30);
            v97 = (WTF **)v867;
            v73 = v93;
          }
        }
        else
        {
LABEL_92:
          v98 = 0;
          v855 = 0uLL;
        }
        if (v97)
        {
          v103 = *((unsigned int *)v97 - 1);
          if ((_DWORD)v103)
          {
            v104 = v97;
            do
            {
              v105 = *v104;
              if (*v104 != (WTF *)-1)
              {
                *v104 = 0;
                if (v105)
                {
                  if (*(_DWORD *)v105 == 1)
                    WTF::fastFree(v105, (void *)v30);
                  else
                    --*(_DWORD *)v105;
                }
              }
              ++v104;
              --v103;
            }
            while (v103);
          }
          WTF::fastFree((WTF *)(v97 - 2), (void *)v30);
          v98 = (WTF **)v855;
          v73 = v93;
        }
        if (!v98)
          goto LABEL_73;
        if (!*((_DWORD *)v98 - 3))
        {
LABEL_96:
          v99 = *((unsigned int *)v98 - 1);
          if ((_DWORD)v99)
          {
            v100 = v98;
            do
            {
              v101 = *v100;
              if (*v100 != (WTF *)-1)
              {
                *v100 = 0;
                if (v101)
                {
                  if (*(_DWORD *)v101 == 1)
                    WTF::fastFree(v101, (void *)v30);
                  else
                    --*(_DWORD *)v101;
                }
              }
              ++v100;
              --v99;
            }
            while (v99);
          }
          WTF::fastFree((WTF *)(v98 - 2), (void *)v30);
          v73 = v93;
          goto LABEL_73;
        }
        v32 = *((unsigned int *)v98 - 1);
        v351 = (unint64_t *)v98;
        if ((_DWORD)v32)
        {
          v83 = 0;
          v33 = 8 * v32;
          while (1)
          {
            v34 = (unint64_t)v98[v83 / 8] + 1;
            if (v34 > 1)
              break;
            v83 += 8;
            if (v33 == v83)
              goto LABEL_602;
          }
          v351 = (unint64_t *)&v98[v83 / 8];
        }
        v32 = (uint64_t)&v98[v32];
        if (v351 != (unint64_t *)v32)
        {
          v33 = *(_QWORD *)(*v351 + 8);
          if (v33)
          {
LABEL_595:
            v421 = *(float32x2_t *)(v82 + 56);
            v32 = *(unsigned __int8 *)(*(_QWORD *)&v421 + 4);
            if ((_DWORD)v32 != 13 && (_DWORD)v32 != 11)
            {
              v32 = *(unsigned __int8 *)(*(_QWORD *)&v421 + 6);
              if (*(_BYTE *)(*(_QWORD *)&v421 + 6))
              {
                LODWORD(v36) = **(_DWORD **)&v421;
                if (**(float **)v421.f32 < 0.0)
                  goto LABEL_601;
              }
              else if ((**(_DWORD **)&v421 & 0x80000000) != 0)
              {
LABEL_601:
                *(float *)&v36 = WebCore::Layout::LineBoxBuilder::enclosingAscentDescentWithFallbackFonts((uint64_t)this, *(_BYTE *)(v82 + 47), *(_WORD *)(v82 + 64), (uint64_t **)&v855);
                v73 = v93;
                DWORD1(v36) = v423;
                *(int8x8_t *)&v36 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v36, *(float32x2_t *)(v82 + 24)), *(int8x8_t *)&v36, *(int8x8_t *)(v82 + 24));
                *(_QWORD *)(v82 + 24) = v36;
                v98 = (WTF **)v855;
              }
            }
          }
          else
          {
            while (++v351 != (unint64_t *)v32)
            {
              v33 = *v351;
              v34 = *v351 + 1;
              if (v34 > 1)
              {
                if (v351 == (unint64_t *)v32)
                  break;
                v33 = *(_QWORD *)(v33 + 8);
                v73 = v93;
                if (v33)
                  goto LABEL_595;
              }
            }
            v73 = v93;
          }
        }
LABEL_602:
        if (!v98)
          goto LABEL_73;
        goto LABEL_96;
      }
      v33 = *(_QWORD *)(v91 + 96);
      v95 = *(unsigned int *)(v92 + 16);
      if ((int)v94 - (int)v81 <= v33)
      {
        if (!(_DWORD)v81)
        {
          v30 = v94 & 0xFFFFFFFEFFFFFFFFLL | (((v95 >> 2) & 1) << 32);
          goto LABEL_90;
        }
        LODWORD(v33) = v94 - v81;
      }
      v96 = (v95 >> 2) & 1;
      v34 = v94 - v81;
      v30 = v33;
      if ((_DWORD)v96)
      {
        if (v34 >= v33)
        {
          v30 = v33 | 0x100000000;
          goto LABEL_90;
        }
      }
      else if (v34 >= v33)
      {
        goto LABEL_90;
      }
    }
LABEL_931:
    __break(1u);
LABEL_932:
    v619 = 1;
    while (v35)
    {
      v34 = ((_DWORD)v34 + v619) & v33;
      v35 = *(_QWORD *)(v81 + 16 * v34);
      ++v619;
      if (v35 == v32)
        goto LABEL_858;
    }
    v34 = *(unsigned int *)(v81 - 4);
LABEL_858:
    v595 = *(_QWORD *)(v81 + 16 * v34 + 8);
    if (v595 >= v76)
    {
      __break(0xC471u);
      JUMPOUT(0x1942EEF04);
    }
    LODWORD(v33) = 104;
    v571 = *v852 + 104 * v595;
LABEL_827:
    v32 = 1;
    *(_BYTE *)(v571 + 44) = 1;
LABEL_828:
    v125 = v855;
    *(_QWORD *)&v855 = 0;
    v73 = v74;
    if (v125)
    {
      v126 = *(_DWORD *)(v125 + 8);
      if (!v126)
      {
        __break(0xC471u);
        JUMPOUT(0x1942ED594);
      }
      goto LABEL_134;
    }
LABEL_73:
    v74 = v865 + 1;
    v865 = v74;
  }
  while (v74 < *(unsigned int *)(v8 + 44));
  v8 = (unint64_t)this[1];
LABEL_135:
  *(_BYTE *)(a3 + 8) = v73;
  v127 = *(WebCore::Layout::Box **)(a3 + 40);
  if (*(_BYTE *)(v8 + 1368)
    && (*((_WORD *)v127 + 6) & 0x200) != 0
    && *(_QWORD *)(WebCore::Layout::Box::rareData(*(WebCore::Layout::Box **)(a3 + 40)) + 24))
  {
    v128 = *(WebCore::RenderStyle **)(WebCore::Layout::Box::rareData(v127) + 24);
  }
  else
  {
    v128 = (WebCore::Layout::Box *)((char *)v127 + 16);
  }
  if (((*((_DWORD *)v128 + 11) >> 13) & 6u) - 2 <= 3)
  {
    if (!*((_BYTE *)this + 16)
      && (*(_BYTE *)(WebCore::RenderStyle::fontDescription(v128) + 160) & 1) == 0
      && (*(_BYTE *)(WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*((_QWORD *)v128 + 4) + 32), v779)
                   + 344) & 8) == 0)
    {
      v780 = *(_DWORD *)(a3 + 156);
      if (!v780)
        goto LABEL_139;
      v781 = *(_QWORD *)(a3 + 144);
      v782 = 104 * v780;
      while (1)
      {
        v783 = *(unsigned __int8 *)(v781 + 47);
        v269 = v783 > 4;
        v784 = (1 << v783) & 0x16;
        if (!v269 && v784 != 0)
        {
          v786 = *(WebCore::Layout::Box **)v781;
          if (*((_BYTE *)this[1] + 1368)
            && (*((_WORD *)v786 + 6) & 0x200) != 0
            && *(_QWORD *)(WebCore::Layout::Box::rareData(*(WebCore::Layout::Box **)v781) + 24))
          {
            v787 = *(WebCore::RenderStyle **)(WebCore::Layout::Box::rareData(v786) + 24);
          }
          else
          {
            v787 = (WebCore::Layout::Box *)((char *)v786 + 16);
          }
          if ((*(_BYTE *)(WebCore::RenderStyle::fontDescription(v787) + 160) & 1) != 0
            || (*(_BYTE *)(WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*((_QWORD *)v787 + 4) + 32), v788)+ 344) & 8) != 0)
          {
            break;
          }
        }
        v781 += 104;
        v782 -= 104;
        if (!v782)
          goto LABEL_139;
      }
    }
    *(_DWORD *)(a3 + 32) = 1;
    *(float32x2_t *)&v36 = WebCore::Layout::LineBoxBuilder::adjustIdeographicBaselineIfApplicable(WebCore::Layout::LineBox &)::$_1::operator()<WebCore::Layout::InlineLevelBox>((WebCore::Layout::LineBoxBuilder *)this, (const WebCore::Layout::LineBox *)a3, (float32x2_t *)(a3 + 40), *(float32x2_t *)&v36);
    v815 = *(_DWORD *)(a3 + 156);
    if (v815)
    {
      v816 = *(float32x2_t **)(a3 + 144);
      v817 = 104 * v815;
      do
      {
        if (v816[5].i8[7] != 8)
          goto LABEL_1381;
        v818 = *v816;
        if (!WebCore::Layout::Box::isInlineTableBox(*(WebCore::Layout::Box **)v816))
        {
          if ((*(_QWORD *)(*(_QWORD *)&v818 + 32) & 0x1FLL) != 3)
            goto LABEL_1381;
          if ((*(_WORD *)(*(_QWORD *)&v818 + 12) & 0x40) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1942EF250);
          }
          if (!*(_BYTE *)(*(_QWORD *)&v818 + 148) || ((*(_DWORD *)(*(_QWORD *)&v818 + 60) >> 13) & 6u) - 2 >= 4)
LABEL_1381:
            *(float32x2_t *)&v36 = WebCore::Layout::LineBoxBuilder::adjustIdeographicBaselineIfApplicable(WebCore::Layout::LineBox &)::$_1::operator()<WebCore::Layout::InlineLevelBox>((WebCore::Layout::LineBoxBuilder *)this, (const WebCore::Layout::LineBox *)a3, v816, *(float32x2_t *)&v36);
        }
        v816 += 13;
        v817 -= 104;
      }
      while (v817);
    }
  }
LABEL_139:
  v129 = *(_DWORD *)(*(_QWORD *)(**this + 40) + 232);
  v74 = BYTE1(v129);
  v867 = 0;
  if (((v129 >> 8) & 0x24) != 0)
  {
    if ((v129 & 0x2000) != 0)
    {
      v819 = *(_DWORD *)(a3 + 156);
      if (v819)
      {
        v820 = 104 * v819;
        v821 = *(_QWORD *)(a3 + 144);
        v8 = 1015021568;
        do
        {
          v822 = *(unsigned __int8 *)(v821 + 47);
          v269 = v822 > 4;
          v823 = (1 << v822) & 0x16;
          if (!v269 && v823 != 0)
          {
            v825 = (_DWORD *)WebCore::Layout::InlineFormattingContext::geometryForBox((uint64_t)*this, *(_QWORD *)v821);
            v826 = v825[10];
            v827 = v825[11];
            v828 = v825[14];
            v829 = v825[15];
            v62 = __OFADD__(v826, v828);
            v830 = v826 + v828;
            v831 = (v826 >> 31) + 0x7FFFFFFF;
            if (!v62)
              v831 = v830;
            v832 = v825[6];
            v833 = v825[7];
            v62 = __OFADD__(v832, v831);
            v834 = v832 + v831;
            v835 = (v832 >> 31) + 0x7FFFFFFF;
            if (v62)
              v834 = v835;
            v836 = (float)v834 * 0.015625;
            v837 = *(float *)(v821 + 32);
            v838 = *(float *)(v821 + 36);
            v62 = __OFADD__(v827, v829);
            v839 = v827 + v829;
            v840 = (v827 >> 31) + 0x7FFFFFFF;
            if (v62)
              v839 = v840;
            v62 = __OFADD__(v833, v839);
            v841 = v833 + v839;
            if (v62)
              v841 = (v833 >> 31) + 0x7FFFFFFF;
            v862 = v821;
            *(float *)&v866 = v837 + v836;
            *((float *)&v866 + 1) = v838 + (float)((float)v841 * 0.015625);
            WTF::HashMap<WebCore::Layout::InlineLevelBox *,WebCore::Layout::TextUtil::EnclosingAscentDescent,WTF::DefaultHash<WebCore::Layout::InlineLevelBox *>,WTF::HashTraits<WebCore::Layout::InlineLevelBox *>,WTF::HashTraits<WebCore::Layout::TextUtil::EnclosingAscentDescent>,WTF::HashTableTraits>::inlineSet<WebCore::Layout::InlineLevelBox *,WebCore::Layout::TextUtil::EnclosingAscentDescent>(&v855, (uint64_t *)&v867, (uint64_t *)&v862, &v866);
          }
          v821 += 104;
          v820 -= 104;
        }
        while (v820);
      }
    }
    if ((v74 & 4) != 0)
    {
      *(_QWORD *)&v855 = a3;
      *((_QWORD *)&v855 + 1) = this;
      v856 = (unint64_t *)&v867;
      WebCore::Layout::LineBoxBuilder::adjustInlineBoxHeightsForLineBoxContainIfApplicable(WebCore::Layout::LineBox &)::$_0::operator()<WebCore::Layout::InlineLevelBox>(&v855, a3 + 40);
      v794 = *(_DWORD *)(a3 + 156);
      if (v794)
      {
        v795 = *(_QWORD *)(a3 + 144);
        v796 = 104 * v794;
        do
        {
          v797 = *(unsigned __int8 *)(v795 + 47);
          v269 = v797 > 4;
          v798 = (1 << v797) & 0x16;
          if (!v269 && v798 != 0)
            WebCore::Layout::LineBoxBuilder::adjustInlineBoxHeightsForLineBoxContainIfApplicable(WebCore::Layout::LineBox &)::$_0::operator()<WebCore::Layout::InlineLevelBox>(&v855, v795);
          v795 += 104;
          v796 -= 104;
        }
        while (v796);
      }
    }
  }
  if ((v74 & 8) != 0)
  {
    v643 = this[1];
    v644 = *((_DWORD *)v643 + 11);
    if (v644)
    {
      v76 = v643[4];
      v645 = v76 + 120 * v644;
      do
      {
        if (*(unsigned __int8 *)v76 <= 2u)
        {
          v646 = *(_QWORD *)(v76 + 8);
          if ((*(_WORD *)(v646 + 12) & 0x20) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1942EED78);
          }
          v647 = *(_QWORD *)(v76 + 88);
          v648 = *(_QWORD *)(v76 + 96);
          v649 = *(unsigned __int8 *)(v76 + 112);
          if (*((_BYTE *)this[1] + 1368))
            v8 = WebCore::Layout::Box::firstLineStyle(*(WebCore::Layout::Box **)(v76 + 8));
          else
            v8 = v646 + 16;
          *(_QWORD *)&v855 = 0;
          DWORD2(v855) = 0;
          v81 = 1;
          BYTE12(v855) = 1;
          v32 = *(_QWORD *)(v646 + 120);
          if (v32)
          {
            v650 = *(unsigned __int8 *)(v32 + 16);
            v33 = *(_QWORD *)(v32 + 8);
            v32 = *(unsigned int *)(v32 + 4);
            *(_QWORD *)&v855 = v33;
            v81 = (v650 >> 2) & 1;
          }
          DWORD2(v855) = v32;
          BYTE12(v855) = v81;
          if (!v649)
            goto LABEL_931;
          v651 = (unsigned __int16 *)WTF::StringView::substring((const char *)&v855, v647, v648);
          v653 = WebCore::Layout::TextUtil::enclosingGlyphBoundsForText(v651, v652, v8);
          v7 = v654;
          v655 = WebCore::Layout::LineBox::parentInlineBox(a3, *(_QWORD *)(v646 + 80));
          v656 = WTF::HashMap<WebCore::Layout::InlineLevelBox *,WebCore::Layout::TextUtil::EnclosingAscentDescent,WTF::DefaultHash<WebCore::Layout::InlineLevelBox *>,WTF::HashTraits<WebCore::Layout::InlineLevelBox *>,WTF::HashTraits<WebCore::Layout::TextUtil::EnclosingAscentDescent>,WTF::HashTableTraits>::get((uint64_t)v867, v655);
          if (v656 < (float)-v653)
            v656 = -v653;
          if (v657 < v7)
            v657 = v7;
          v862 = __PAIR64__(LODWORD(v657), LODWORD(v656));
          v866 = v655;
          WTF::HashMap<WebCore::Layout::InlineLevelBox *,WebCore::Layout::TextUtil::EnclosingAscentDescent,WTF::DefaultHash<WebCore::Layout::InlineLevelBox *>,WTF::HashTraits<WebCore::Layout::InlineLevelBox *>,WTF::HashTraits<WebCore::Layout::TextUtil::EnclosingAscentDescent>,WTF::HashTableTraits>::inlineSet<WebCore::Layout::InlineLevelBox *,WebCore::Layout::TextUtil::EnclosingAscentDescent>(&v855, (uint64_t *)&v867, (uint64_t *)&v866, &v862);
        }
        v76 += 120;
      }
      while (v76 != v645);
    }
  }
  if ((v74 & 0x40) == 0)
    goto LABEL_142;
  LODWORD(v36) = *(_DWORD *)(*(_QWORD *)(a3 + 88) + 60);
  v658 = (float)(int)v36;
  v659 = this[1];
  v660 = *((unsigned int *)v659 + 11);
  v661 = 0;
  if (!(_DWORD)v660)
    goto LABEL_1156;
  v662 = (unsigned __int8 *)(v659[4] + 112);
  v663 = 120 * v660;
  while (1)
  {
    LODWORD(v34) = *(v662 - 112);
    if (v34 <= 2)
      break;
    v662 += 120;
    v663 -= 120;
    if (!v663)
      goto LABEL_1156;
  }
  v8 = *((_QWORD *)v662 - 13);
  LODWORD(v33) = *(unsigned __int16 *)(v8 + 12);
  if ((v33 & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1942EEF60);
  }
  v741 = *((_QWORD *)v662 - 3);
  v742 = *((_QWORD *)v662 - 2);
  LODWORD(v76) = *v662;
  if (*((_BYTE *)v659 + 1368))
    v743 = WebCore::Layout::Box::firstLineStyle(*((WebCore::Layout::Box **)v662 - 13));
  else
    v743 = v8 + 16;
  *(_QWORD *)&v855 = 0;
  v81 = *(_QWORD *)(v8 + 120);
  if (v81)
  {
    v744 = *(unsigned __int8 *)(v81 + 16);
    v33 = *(_QWORD *)(v81 + 8);
    v81 = *(unsigned int *)(v81 + 4);
    *(_QWORD *)&v855 = v33;
    v32 = (v744 >> 2) & 1;
  }
  else
  {
    v32 = 1;
  }
  DWORD2(v855) = v81;
  BYTE12(v855) = v32;
  if (!(_DWORD)v76)
    goto LABEL_931;
  v745 = (unsigned __int16 *)WTF::StringView::substring((const char *)&v855, v741, v742);
  v747 = -WebCore::Layout::TextUtil::enclosingGlyphBoundsForText(v745, v746, v743);
  if (*(_DWORD *)(a3 + 32))
    v658 = v747;
LABEL_1156:
  v862 = a3 + 40;
  v866 = __PAIR64__(v661, LODWORD(v658));
  WTF::HashMap<WebCore::Layout::InlineLevelBox *,WebCore::Layout::TextUtil::EnclosingAscentDescent,WTF::DefaultHash<WebCore::Layout::InlineLevelBox *>,WTF::HashTraits<WebCore::Layout::InlineLevelBox *>,WTF::HashTraits<WebCore::Layout::TextUtil::EnclosingAscentDescent>,WTF::HashTableTraits>::inlineSet<WebCore::Layout::InlineLevelBox *,WebCore::Layout::TextUtil::EnclosingAscentDescent>(&v855, (uint64_t *)&v867, (uint64_t *)&v862, &v866);
LABEL_142:
  v130 = v867;
  if (!v867)
  {
    v131 = 0;
    v132 = 0;
    goto LABEL_144;
  }
  v132 = *((unsigned int *)v867 - 1);
  v133 = (int8x8_t **)((char *)v867 + 16 * v132);
  if (*((_DWORD *)v867 - 3))
  {
    v131 = (int8x8_t **)v867;
    if ((_DWORD)v132)
    {
      v664 = 16 * v132;
      v131 = (int8x8_t **)v867;
      while ((unint64_t)*v131 + 1 <= 1)
      {
        v131 += 2;
        v664 -= 16;
        if (!v664)
        {
          v131 = v133;
          break;
        }
      }
    }
  }
  else
  {
    v131 = (int8x8_t **)((char *)v867 + 16 * v132);
LABEL_144:
    v133 = (int8x8_t **)((char *)v867 + 16 * v132);
  }
  if (v867)
    v134 = (int8x8_t **)((char *)v867 + 16 * *((unsigned int *)v867 - 1));
  else
    v134 = 0;
  while (v131 != v134)
  {
    v641 = (v74 & 1) == 0 || (*v131)[5].i8[7] != 4;
    (*v131)[3] = (int8x8_t)vrndp_f32((float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v641), 0x1FuLL)), (int8x8_t)v131[1], vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)(*v131)[3], (float32x2_t)v131[1]), (*v131)[3], (int8x8_t)v131[1])));
    v642 = v131 + 2;
    v131 = v133;
    if (v642 != v133)
    {
      v131 = v642;
      while ((unint64_t)*v131 + 1 <= 1)
      {
        v131 += 2;
        if (v131 == v133)
        {
          v131 = v133;
          break;
        }
      }
    }
  }
  if (v130)
    WTF::fastFree((WTF *)((char *)v130 - 16), (void *)v30);
  v135 = *this;
  if (*((_BYTE *)this + 17))
  {
    WebCore::Layout::RubyFormattingContext::applyAnnotationContributionToLayoutBounds((WebCore::Layout::RubyFormattingContext *)a3, (WebCore::Layout::LineBox *)*this, v31);
    v135 = *this;
  }
  v862 = (unint64_t)v135;
  v863 = v135;
  if (!*(_BYTE *)(a3 + 8))
  {
    *(float *)(a3 + 52) = -*(float *)(a3 + 72);
    v166 = 0.0;
    goto LABEL_358;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*v135 + 40) + 232) & 0x7F00) != 0x1300
    || !*((_BYTE *)v135 + 161)
    || *(_BYTE *)(a3 + 112)
    || (*(_BYTE *)(a3 + 87) != 8 ? (v136 = *(_BYTE *)(a3 + 84) == 0) : (v136 = 0), !v136 && *(_BYTE *)(a3 + 136)))
  {
LABEL_204:
    if (*(_BYTE *)(a3 + 84))
      v165 = 1;
    else
      v165 = *(_BYTE *)(a3 + 87) == 8;
    LODWORD(v76) = v165 && *(_BYTE *)(a3 + 136) != 0;
    v866 = 0;
    if (WebCore::Layout::InlineFormattingUtils::inlineLevelBoxAffectsLineBox((WebCore::Layout::InlineFormattingUtils *)&v863, (const WebCore::Layout::InlineLevelBox *)(a3 + 40)))
    {
      v166 = *(float *)(a3 + 64) + *(float *)(a3 + 68);
      v867 = (WTF *)(a3 + 40);
      LODWORD(v865) = 0;
      *((float *)&v865 + 1) = v166;
      WTF::HashMap<WebCore::Layout::InlineLevelBox const*,WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom>,WTF::HashTableTraits>::add<WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom>(&v855, (uint64_t *)&v866, (uint64_t *)&v867, &v865);
      v74 = 1;
    }
    else
    {
      v867 = (WTF *)(a3 + 40);
      v865 = 0;
      WTF::HashMap<WebCore::Layout::InlineLevelBox const*,WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom>,WTF::HashTableTraits>::add<WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom>(&v855, (uint64_t *)&v866, (uint64_t *)&v867, &v865);
      v74 = 0;
      v166 = 0.0;
    }
    v867 = 0;
    v868 = 0;
    v167 = *(_DWORD *)(a3 + 156);
    if (!v167)
    {
      v194 = 0;
      v74 = 0;
      v7 = 0.0;
      v195 = 0.0;
LABEL_264:
      if (v866)
        WTF::fastFree((WTF *)(v866 - 16), (void *)v30);
      v866 = a3 + 40;
      v867 = 0;
      LODWORD(v865) = 0;
      WTF::HashMap<WebCore::Layout::InlineLevelBox const*,float,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::add<float>(&v855, (uint64_t *)&v867, (uint64_t *)&v866, &v865);
      v196 = WebCore::Layout::InlineFormattingUtils::inlineLevelBoxAffectsLineBox((WebCore::Layout::InlineFormattingUtils *)&v863, (const WebCore::Layout::InlineLevelBox *)(a3 + 40));
      v197 = v196;
      if (v196)
        v198 = *(float *)(a3 + 64);
      else
        v198 = 0.0;
      v199 = *(_DWORD *)(a3 + 156);
      if (!v199)
      {
LABEL_318:
        if (!(_DWORD)v74)
          v195 = 0.0;
        v235 = v195;
        if (v195 != 0.0)
        {
          v235 = 0.0;
          v615 = v194 ? v7 : 0.0;
          v269 = v195 > v615;
          v616 = fmaxf(v195 - fmaxf(v166, 0.0), 0.0);
          if (v269)
            v235 = v616;
        }
        LODWORD(v849) = v76;
        if (v197)
          v236 = v198;
        else
          v236 = 0.0;
        *(float *)(a3 + 52) = (float)(v236 + v235) - *(float *)(a3 + 72);
        if (v867)
          WTF::fastFree((WTF *)((char *)v867 - 16), (void *)v30);
        if (v194)
          v237 = v7;
        else
          v237 = 0.0;
        if (v237 < v195)
          v237 = v195;
        if (v166 < v237)
          v166 = v237;
        v855 = 0uLL;
        v867 = 0;
        v81 = *(unsigned int *)(a3 + 156);
        if ((_DWORD)v81)
        {
          v238 = 0;
          v32 = 0;
          v33 = 0;
          LODWORD(v76) = 104;
          v74 = -1;
          do
          {
            v34 = *v852;
            v239 = *(_QWORD *)(*v852 + 104 * v33 + 72);
            if ((v239 & 0xFE) == 6)
            {
              v251 = v32;
              if ((_DWORD)v32 == DWORD2(v855))
              {
                v252 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v855, v32 + 1, (unint64_t)&v867);
                v32 = (HIDWORD(v855) + 1);
                v238 = (WTF *)v855;
                *(_QWORD *)(v855 + 8 * HIDWORD(v855)) = *v252;
                HIDWORD(v855) = v32;
                v81 = *(unsigned int *)(a3 + 156);
              }
              else
              {
                v32 = (v32 + 1);
                *((_QWORD *)v238 + v251) = v33;
                HIDWORD(v855) = v32;
              }
            }
            else
            {
              v240 = *(_QWORD *)(*(_QWORD *)(v34 + 104 * v33) + 80);
              v35 = a3 + 40;
              if (*v11 != v240)
              {
                v35 = *v853;
                if (*v853)
                {
                  v244 = *(_DWORD *)(v35 - 8);
                  v245 = (~(v240 << 32) + v240) ^ ((unint64_t)(~(v240 << 32) + v240) >> 22);
                  v246 = 9 * ((v245 + ~(v245 << 13)) ^ ((v245 + ~(v245 << 13)) >> 8));
                  v247 = (v246 ^ (v246 >> 15)) + ~((v246 ^ (v246 >> 15)) << 27);
                  v248 = v244 & ((v247 >> 31) ^ v247);
                  v249 = *(_QWORD *)(v35 + 16 * v248);
                  if (v249 != v240)
                  {
                    v436 = 1;
                    while (v249)
                    {
                      v248 = ((_DWORD)v248 + v436) & v244;
                      v249 = *(_QWORD *)(v35 + 16 * v248);
                      ++v436;
                      if (v249 == v240)
                        goto LABEL_346;
                    }
                    v248 = *(unsigned int *)(v35 - 4);
                  }
LABEL_346:
                  if (v248 == *(_DWORD *)(v35 - 4))
                  {
                    v35 = 0;
                  }
                  else
                  {
                    v250 = *(_QWORD *)(v35 + 16 * v248 + 8);
                    if (v250 >= v81)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1942EEFACLL);
                    }
                    v35 = v34 + 104 * v250;
                  }
                }
              }
              if (*(_QWORD *)(*v852 + 104 * v33 + 72))
              {
                LODWORD(v36) = 0;
                switch(*(_QWORD *)(*v852 + 104 * v33 + 72))
                {
                  case 1u:
                    v604 = *(float *)(v34 + 104 * v33 + 20) * 0.5;
                    v605 = *(float *)(*(_QWORD *)(v35 + 48) + 36) * 0.5;
                    goto LABEL_903;
                  case 2u:
                    v243 = *(float *)(v34 + 104 * v33 + 32) - (float)((float)(*(float *)(v35 + 68) / 5.0) + 1.0);
                    goto LABEL_904;
                  case 3u:
                    v604 = *(float *)(v34 + 104 * v33 + 32) + (float)(*(float *)(v35 + 68) / 3.0);
                    v605 = 1.0;
LABEL_903:
                    v243 = v604 + v605;
                    goto LABEL_904;
                  case 4u:
                    v242 = v34 + 104 * v33;
                    v241 = *(float *)(v242 + 24);
                    goto LABEL_339;
                  case 5u:
                    v614 = v34 + 104 * v33;
                    v243 = *(float *)(v614 + 32);
                    v241 = *(float *)(v35 + 20) - *(float *)(v614 + 28);
                    break;
                  case 8u:
                    v243 = *(float *)(v34 + 104 * v33 + 20) * 0.5;
                    goto LABEL_904;
                  case 9u:
                    if (!*(_BYTE *)(v34 + 104 * v33 + 80))
                      goto LABEL_931;
                    v243 = *(float *)(v34 + 104 * v33 + 32) + *((float *)&v239 + 1);
LABEL_904:
                    v241 = *(float *)(v35 + 32);
                    break;
                  default:
                    goto LABEL_341;
                }
              }
              else
              {
                v241 = *(float *)(v35 + 32);
                v242 = v34 + 104 * v33;
LABEL_339:
                v243 = *(float *)(v242 + 32);
              }
              *(float *)&v36 = v241 - v243;
LABEL_341:
              *(_DWORD *)(v34 + 104 * v33 + 12) = v36;
            }
            v33 = (unint64_t)v867 + 1;
            v867 = (WTF *)v33;
          }
          while (v33 < v81);
          if ((_DWORD)v32)
          {
            v306 = (WTF *)((char *)v238 + 8 * v32);
            v846 = v306;
            do
            {
              v307 = *(_QWORD *)v238;
              if (*(_QWORD *)v238 >= v81)
              {
                __break(0xC471u);
                JUMPOUT(0x1942EF0A8);
              }
              v308 = *v852;
              v309 = *(unsigned __int8 *)(*v852 + 104 * v307 + 72);
              if (v309 == 7)
              {
                v310 = v308 + 104 * v307;
                v311 = *(float *)(v310 + 28);
                LODWORD(v310) = *(unsigned __int8 *)(v310 + 47);
                v269 = v310 > 4;
                v312 = (1 << v310) & 0x16;
                if (!v269 && v312 != 0)
                {
                  if (v307 >= v81)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1942EF0B0);
                  }
                  v314 = v307 + 1;
                  v315 = 0.0;
                  if (v307 + 1 < v81)
                  {
                    v316 = *(_QWORD *)(*(_QWORD *)(v308 + 104 * v307) + 80);
                    v30 = v308 + 104 * v314;
                    if (*(_QWORD *)(*(_QWORD *)v30 + 80) != v316)
                    {
                      v317 = 104 * v307;
                      v318 = *v852;
                      do
                      {
                        if (WebCore::Layout::InlineFormattingUtils::inlineLevelBoxAffectsLineBox((WebCore::Layout::InlineFormattingUtils *)&v863, (const WebCore::Layout::InlineLevelBox *)v30)&& (*(_QWORD *)(v318 + v317 + 176) & 0xFELL) != 6&& *(float *)(v318 + v317 + 132) >= v315)
                        {
                          v315 = *(float *)(v318 + v317 + 132);
                        }
                        ++v314;
                        v81 = *(unsigned int *)(a3 + 156);
                        if (v314 >= v81)
                          break;
                        v318 = *v852;
                        v319 = *v852 + v317;
                        v317 += 104;
                        v30 = *v852 + 104 * v314;
                      }
                      while (*(_QWORD *)(*(_QWORD *)(v319 + 208) + 80) != v316);
                    }
                  }
                  if (v315 >= v311)
                    v311 = v315;
                  v306 = v846;
                }
                v320 = v166 - (float)(v311 + *(float *)(v308 + 104 * v307 + 32));
              }
              else if (v309 == 6)
              {
                v321 = v308 + 104 * v307;
                v322 = *(float *)(v321 + 24);
                LODWORD(v321) = *(unsigned __int8 *)(v321 + 47);
                v269 = v321 > 4;
                v323 = (1 << v321) & 0x16;
                if (!v269 && v323 != 0)
                {
                  if (v307 >= v81)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1942EF0B8);
                  }
                  v325 = v307 + 1;
                  v326 = 0.0;
                  if (v307 + 1 < v81)
                  {
                    v327 = *(_QWORD *)(*(_QWORD *)(v308 + 104 * v307) + 80);
                    v30 = v308 + 104 * v325;
                    if (*(_QWORD *)(*(_QWORD *)v30 + 80) != v327)
                    {
                      v328 = 104 * v307;
                      v329 = *v852;
                      do
                      {
                        if (WebCore::Layout::InlineFormattingUtils::inlineLevelBoxAffectsLineBox((WebCore::Layout::InlineFormattingUtils *)&v863, (const WebCore::Layout::InlineLevelBox *)v30)&& (*(_QWORD *)(v329 + v328 + 176) & 0xFELL) != 6&& *(float *)(v329 + v328 + 128) >= v326)
                        {
                          v326 = *(float *)(v329 + v328 + 128);
                        }
                        ++v325;
                        v81 = *(unsigned int *)(a3 + 156);
                        if (v325 >= v81)
                          break;
                        v329 = *v852;
                        v330 = *v852 + v328;
                        v328 += 104;
                        v30 = *v852 + 104 * v325;
                      }
                      while (*(_QWORD *)(*(_QWORD *)(v330 + 208) + 80) != v327);
                    }
                  }
                  if (v326 >= v322)
                    v322 = v326;
                  v306 = v846;
                }
                v320 = v322 - *(float *)(v308 + 104 * v307 + 32);
              }
              else
              {
                v320 = 0.0;
              }
              *(float *)(v308 + 104 * v307 + 12) = v320;
              v238 = (WTF *)((char *)v238 + 8);
            }
            while (v238 != v306);
            v238 = (WTF *)v855;
          }
          LODWORD(v76) = v849;
          if (v238)
          {
            *(_QWORD *)&v855 = 0;
            DWORD2(v855) = 0;
            WTF::fastFree(v238, (void *)v30);
          }
        }
        if ((_DWORD)v76)
        {
          WebCore::Layout::LineBoxVerticalAligner::adjustForAnnotationIfNeeded(a3, v166);
          v166 = v253;
        }
        goto LABEL_358;
      }
      LODWORD(v849) = 0;
      v200 = *(_QWORD *)(a3 + 144);
      v8 = v200 + 104 * v199;
      while (1)
      {
        v81 = *(_QWORD *)(v200 + 72);
        v201 = *(float *)(v200 + 24);
        LODWORD(v36) = *(_DWORD *)(v200 + 28);
        if ((v81 & 0xFE) != 6)
        {
          v32 = *(unsigned __int8 *)(v200 + 80);
          v202 = *(_QWORD *)(*(_QWORD *)v200 + 80);
          v33 = a3 + 40;
          if (*v11 != v202)
          {
            v33 = *v853;
            if (*v853)
            {
              v224 = *(_DWORD *)(v33 - 8);
              v225 = (~(v202 << 32) + v202) ^ ((unint64_t)(~(v202 << 32) + v202) >> 22);
              v226 = 9 * ((v225 + ~(v225 << 13)) ^ ((v225 + ~(v225 << 13)) >> 8));
              v227 = (v226 ^ (v226 >> 15)) + ~((v226 ^ (v226 >> 15)) << 27);
              v35 = v224 & ((v227 >> 31) ^ v227);
              v228 = *(_QWORD *)(v33 + 16 * v35);
              if (v228 != v202)
              {
                v435 = 1;
                while (v228)
                {
                  v35 = ((_DWORD)v35 + v435) & v224;
                  v228 = *(_QWORD *)(v33 + 16 * v35);
                  ++v435;
                  if (v228 == v202)
                    goto LABEL_292;
                }
                v35 = *(unsigned int *)(v33 - 4);
              }
LABEL_292:
              if (v35 == *(_DWORD *)(v33 - 4))
              {
                v33 = 0;
              }
              else
              {
                v229 = *(_QWORD *)(v33 + 16 * v35 + 8);
                if (v229 >= *(unsigned int *)(a3 + 156))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1942EEFA4);
                }
                v33 = *v852 + 104 * v229;
              }
            }
          }
          v203 = 0.0;
          LODWORD(v34) = *(_QWORD *)(v200 + 72) - 1;
          switch(*(_QWORD *)(v200 + 72))
          {
            case 1u:
              v618 = (float)((float)(v201 + *(float *)&v36) * 0.5)
                   + (float)(*(float *)(*(_QWORD *)(v33 + 48) + 36) * 0.5);
              goto LABEL_927;
            case 2u:
              v203 = -(float)((float)(*(float *)(v33 + 68) / 5.0) + 1.0);
              goto LABEL_274;
            case 3u:
              v203 = (float)(*(float *)(v33 + 68) / 3.0) + 1.0;
              goto LABEL_274;
            case 4u:
              v618 = *(float *)(v33 + 32);
              goto LABEL_927;
            case 5u:
              v617 = *(float *)(v33 + 36);
              goto LABEL_924;
            case 8u:
              v618 = (float)(v201 + *(float *)&v36) * 0.5;
LABEL_927:
              v203 = v618 - v201;
              goto LABEL_274;
            case 9u:
              if (!*(_BYTE *)(v200 + 80))
                goto LABEL_931;
              v617 = *(float *)(v200 + 32);
              *(float *)&v36 = v617 + *((float *)&v81 + 1);
LABEL_924:
              v203 = *(float *)&v36 - v617;
LABEL_274:
              v204 = v867;
              if (v867)
              {
                v205 = *((_DWORD *)v867 - 2);
                v206 = (~(v33 << 32) + v33) ^ ((~(v33 << 32) + v33) >> 22);
                v207 = 9 * ((v206 + ~(v206 << 13)) ^ ((v206 + ~(v206 << 13)) >> 8));
                v208 = (v207 ^ (v207 >> 15)) + ~((v207 ^ (v207 >> 15)) << 27);
                v209 = v205 & ((v208 >> 31) ^ v208);
                v210 = *((_QWORD *)v867 + 2 * v209);
                if (v210 == v33)
                {
LABEL_276:
                  v211 = *((float *)v867 + 4 * v209 + 2);
                }
                else
                {
                  v234 = 1;
                  while (v210)
                  {
                    v209 = ((_DWORD)v209 + v234) & v205;
                    v210 = *((_QWORD *)v867 + 2 * v209);
                    ++v234;
                    if (v210 == v33)
                      goto LABEL_276;
                  }
                  v211 = INFINITY;
                }
                v212 = v203 + v211;
                goto LABEL_278;
              }
              v212 = v203 + INFINITY;
              WTF::HashTable<WebCore::Layout::InlineLevelBox const*,WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,float>>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashMap<WebCore::Layout::InlineLevelBox const*,float,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>>::expand((uint64_t *)&v867, 0);
              v204 = v867;
              if (v867)
                v205 = *((_DWORD *)v867 - 2);
              else
                v205 = 0;
LABEL_278:
              v213 = (~(v200 << 32) + v200) ^ ((unint64_t)(~(v200 << 32) + v200) >> 22);
              v214 = 9 * ((v213 + ~(v213 << 13)) ^ ((v213 + ~(v213 << 13)) >> 8));
              v215 = (v214 ^ (v214 >> 15)) + ~((v214 ^ (v214 >> 15)) << 27);
              v216 = v205 & ((v215 >> 31) ^ v215);
              v217 = (float *)((char *)v204 + 16 * v216);
              v218 = *(_QWORD *)v217;
              if (!*(_QWORD *)v217)
                goto LABEL_279;
              v230 = 0;
              v231 = 1;
              break;
            default:
              goto LABEL_274;
          }
          while (v218 != v200)
          {
            if (v218 == -1)
              v230 = v217;
            v216 = (v216 + v231) & v205;
            v217 = (float *)((char *)v204 + 16 * v216);
            v218 = *(_QWORD *)v217;
            ++v231;
            if (!*(_QWORD *)v217)
            {
              if (v230)
              {
                *(_QWORD *)v230 = 0;
                v230[2] = INFINITY;
                --*((_DWORD *)v867 - 4);
                v217 = v230;
              }
LABEL_279:
              *(_QWORD *)v217 = v200;
              v217[2] = v212;
              v219 = v867;
              if (v867)
                v220 = *((_DWORD *)v867 - 3) + 1;
              else
                v220 = 1;
              *((_DWORD *)v867 - 3) = v220;
              v221 = (*((_DWORD *)v219 - 4) + v220);
              v222 = *((unsigned int *)v219 - 1);
              if (v222 > 0x400)
              {
                if (v222 > 2 * v221)
                  break;
              }
              else
              {
                if (3 * v222 > 4 * v221)
                  break;
                if (!(_DWORD)v222)
                {
                  v356 = 8;
LABEL_514:
                  WTF::HashTable<WebCore::Layout::InlineLevelBox const*,WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,float>>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashMap<WebCore::Layout::InlineLevelBox const*,float,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>>::rehash((uint64_t *)&v867, v356, v217);
                  break;
                }
              }
              v356 = (_DWORD)v222 << (6 * v220 >= (2 * v222));
              goto LABEL_514;
            }
          }
          if (WebCore::Layout::InlineFormattingUtils::inlineLevelBoxAffectsLineBox((WebCore::Layout::InlineFormattingUtils *)&v863, (const WebCore::Layout::InlineLevelBox *)v200))
          {
            v223 = v201 + v212;
            if (v197)
            {
              if (v198 < v223)
                v198 = v201 + v212;
              v197 = 1;
            }
            else
            {
              v561 = fmaxf(v223, 0.0);
              if (v201 >= 0.0)
                v198 = v561;
              else
                v198 = v201 + v212;
              v197 = 1;
            }
          }
          goto LABEL_288;
        }
        v232 = *(_QWORD *)(v200 + 72);
        if (v232 == 7)
        {
          v866 = v200;
          v233 = *(float *)&v36 - *(float *)(a3 + 68);
        }
        else
        {
          if (v232 != 6)
            goto LABEL_288;
          LODWORD(v849) = (v849 & 1) != 0
                       || WebCore::Layout::InlineFormattingUtils::inlineLevelBoxAffectsLineBox((WebCore::Layout::InlineFormattingUtils *)&v863, (const WebCore::Layout::InlineLevelBox *)v200);
          v866 = v200;
          v233 = *(float *)(a3 + 64) - v201;
        }
        *(float *)&v865 = v233;
        WTF::HashMap<WebCore::Layout::InlineLevelBox const*,float,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::add<float>(&v855, (uint64_t *)&v867, (uint64_t *)&v866, &v865);
LABEL_288:
        v200 += 104;
        if (v200 == v8)
        {
          if (((v197 == 0) & v849) != 0)
          {
            v198 = *(float *)(a3 + 72);
            v197 = 1;
          }
          goto LABEL_318;
        }
      }
    }
    v168 = 0;
    v169 = 0;
    v170 = *(const WebCore::Layout::InlineLevelBox **)(a3 + 144);
    v8 = (unint64_t)v170 + 104 * v167;
    v171 = 0.0;
    do
    {
      if ((v76 & 1) != 0)
        v76 = 1;
      else
        v76 = (*((_BYTE *)v170 + 44) || *((_BYTE *)v170 + 47) == 8) && *((_BYTE *)v170 + 96) != 0;
      v32 = *((_QWORD *)v170 + 9);
      if ((v32 & 0xFE) == 6)
      {
        *(_QWORD *)&v855 = v170;
        if (v169 == (_DWORD)v868)
        {
          v192 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v867, v169 + 1, (unint64_t)&v855);
          v169 = HIDWORD(v868);
          v168 = v867;
          *((_QWORD *)v867 + HIDWORD(v868)) = *v192;
        }
        else
        {
          *((_QWORD *)v168 + v169) = v170;
        }
        HIDWORD(v868) = ++v169;
      }
      else
      {
        v172 = *(_QWORD *)(*(_QWORD *)v170 + 80);
        v34 = *v11;
        v81 = a3 + 40;
        if (*v11 != v172)
        {
          v81 = *v853;
          if (*v853)
          {
            LODWORD(v34) = *(_DWORD *)(v81 - 8);
            v186 = (~(v172 << 32) + v172) ^ ((unint64_t)(~(v172 << 32) + v172) >> 22);
            v187 = 9 * ((v186 + ~(v186 << 13)) ^ ((v186 + ~(v186 << 13)) >> 8));
            v188 = (v187 ^ (v187 >> 15)) + ~((v187 ^ (v187 >> 15)) << 27);
            v189 = v34 & ((v188 >> 31) ^ v188);
            v35 = 16 * v189;
            v190 = *(_QWORD *)(v81 + v35);
            if (v190 != v172)
            {
              v35 = 1;
              while (v190)
              {
                v189 = ((_DWORD)v189 + (_DWORD)v35) & v34;
                v190 = *(_QWORD *)(v81 + 16 * v189);
                v35 = (v35 + 1);
                if (v190 == v172)
                  goto LABEL_242;
              }
              v189 = *(unsigned int *)(v81 - 4);
            }
LABEL_242:
            if (v189 == *(_DWORD *)(v81 - 4))
            {
              v81 = 0;
            }
            else
            {
              v191 = *(_QWORD *)(v81 + 16 * v189 + 8);
              if (v191 >= *(unsigned int *)(a3 + 156))
              {
                __break(0xC471u);
                JUMPOUT(0x1942EEF9CLL);
              }
              LODWORD(v34) = 104;
              v81 = *v852 + 104 * v191;
            }
          }
        }
        LODWORD(v36) = *((_DWORD *)v170 + 6);
        v173 = *((float *)v170 + 7);
        v174 = *(float *)(v81 + 24);
        if (*((_QWORD *)v170 + 9))
        {
          v175 = 0.0;
          switch(*((_QWORD *)v170 + 9))
          {
            case 1u:
              v602 = (float)(*(float *)&v36 + v173) * 0.5;
              v603 = *(float *)(*(_QWORD *)(v81 + 48) + 36) * 0.5;
              goto LABEL_894;
            case 2u:
              v613 = *(float *)&v36 - (float)((float)(*(float *)(v81 + 68) / 5.0) + 1.0);
              goto LABEL_895;
            case 3u:
              v602 = *(float *)&v36 + (float)(*(float *)(v81 + 68) / 3.0);
              v603 = 1.0;
LABEL_894:
              v613 = v602 + v603;
              goto LABEL_895;
            case 4u:
              v613 = *(float *)(v81 + 32);
              goto LABEL_895;
            case 5u:
              v175 = (float)(*(float *)(v81 + 36) + (float)((float)(v174 + *(float *)(v81 + 28)) - *(float *)(v81 + 28)))
                   - (float)(*(float *)&v36 + v173);
              break;
            case 8u:
              v175 = v174 + (float)((float)(*(float *)&v36 + v173) * -0.5);
              break;
            case 9u:
              LODWORD(v33) = *((unsigned __int8 *)v170 + 80);
              if (!*((_BYTE *)v170 + 80))
                goto LABEL_931;
              v613 = *(float *)&v36 + *((float *)&v32 + 1);
LABEL_895:
              v175 = v174 - v613;
              break;
            default:
              break;
          }
        }
        else
        {
          v175 = v174 - *(float *)&v36;
        }
        v176 = 0.0;
        if (v866)
        {
          v177 = *(_DWORD *)(v866 - 8);
          v178 = (~(v81 << 32) + v81) ^ ((~(v81 << 32) + v81) >> 22);
          v179 = 9 * ((v178 + ~(v178 << 13)) ^ ((v178 + ~(v178 << 13)) >> 8));
          v180 = (v179 ^ (v179 >> 15)) + ~((v179 ^ (v179 >> 15)) << 27);
          v181 = v177 & ((v180 >> 31) ^ v180);
          v182 = *(_QWORD *)(v866 + 16 * v181);
          if (v182 == v81)
          {
LABEL_223:
            v176 = *(float *)(v866 + 16 * v181 + 8);
          }
          else
          {
            v193 = 1;
            while (v182)
            {
              v181 = ((_DWORD)v181 + v193) & v177;
              v182 = *(_QWORD *)(v866 + 16 * v181);
              ++v193;
              if (v182 == v81)
                goto LABEL_223;
            }
          }
        }
        v183 = v175 + v176;
        v865 = (unint64_t)v170;
        v7 = (float)(*(float *)&v36 + v173) + (float)(v175 + v176);
        *(float *)&v864 = v175 + v176;
        *((float *)&v864 + 1) = v7;
        WTF::HashMap<WebCore::Layout::InlineLevelBox const*,WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom>,WTF::HashTableTraits>::add<WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom>(&v855, (uint64_t *)&v866, (uint64_t *)&v865, &v864);
        if (WebCore::Layout::InlineFormattingUtils::inlineLevelBoxAffectsLineBox((WebCore::Layout::InlineFormattingUtils *)&v863, v170))
        {
          if ((_DWORD)v74)
            v184 = v171;
          else
            v184 = v183;
          if (v183 >= v184)
            v171 = v184;
          else
            v171 = v183;
          if ((_DWORD)v74)
            v185 = v166;
          else
            v185 = v7;
          if (v185 >= v7)
            v166 = v185;
          else
            v166 = v7;
          v74 = 1;
        }
      }
      v170 = (const WebCore::Layout::InlineLevelBox *)((char *)v170 + 104);
    }
    while (v170 != (const WebCore::Layout::InlineLevelBox *)v8);
    if ((_DWORD)v74)
    {
      v8 = v76;
      if (v169)
      {
        v194 = 0;
        v74 = 0;
        v299 = 8 * v169;
        v300 = (const WebCore::Layout::InlineLevelBox **)v168;
        v7 = 0.0;
        v195 = 0.0;
        do
        {
          v301 = *v300;
          if (WebCore::Layout::InlineFormattingUtils::inlineLevelBoxAffectsLineBox((WebCore::Layout::InlineFormattingUtils *)&v863, *v300))
          {
            v302 = *((float *)v301 + 6) + *((float *)v301 + 7);
            v303 = *((unsigned __int8 *)v301 + 72);
            if (v303 == 7)
            {
              if ((_DWORD)v74)
                v304 = v195;
              else
                v304 = 0.0;
              if (v302 >= v304)
                v195 = *((float *)v301 + 6) + *((float *)v301 + 7);
              else
                v195 = v304;
              v74 = 1;
            }
            else if (v303 == 6)
            {
              if (v194)
                v305 = v7;
              else
                v305 = 0.0;
              if (v302 >= v305)
                v7 = *((float *)v301 + 6) + *((float *)v301 + 7);
              else
                v7 = v305;
              v194 = 1;
            }
          }
          ++v300;
          v299 -= 8;
        }
        while (v299);
        goto LABEL_261;
      }
      v74 = 0;
      v194 = 0;
      v195 = 0.0;
    }
    else
    {
      v8 = v76;
      v195 = 0.0;
      v166 = 0.0;
      v171 = 0.0;
      if (v169)
      {
        v194 = 0;
        v74 = 0;
        v800 = 8 * v169;
        v801 = (const WebCore::Layout::InlineLevelBox **)v168;
        v7 = 0.0;
        do
        {
          v802 = *v801;
          if (WebCore::Layout::InlineFormattingUtils::inlineLevelBoxAffectsLineBox((WebCore::Layout::InlineFormattingUtils *)&v863, *v801))
          {
            v803 = *((float *)v802 + 6) + *((float *)v802 + 7);
            v804 = *((unsigned __int8 *)v802 + 72);
            if (v804 == 7)
            {
              if ((_DWORD)v74)
                v805 = v195;
              else
                v805 = 0.0;
              if (v803 >= v805)
                v195 = *((float *)v802 + 6) + *((float *)v802 + 7);
              else
                v195 = v805;
              v74 = 1;
            }
            else if (v804 == 6)
            {
              if (v194)
                v806 = v7;
              else
                v806 = 0.0;
              if (v803 >= v806)
                v7 = *((float *)v802 + 6) + *((float *)v802 + 7);
              else
                v7 = v806;
              v194 = 1;
            }
          }
          ++v801;
          v800 -= 8;
        }
        while (v800);
        goto LABEL_261;
      }
      v74 = 0;
      v194 = 0;
    }
    v7 = 0.0;
LABEL_261:
    v166 = v166 - v171;
    if (v168)
    {
      v867 = 0;
      LODWORD(v868) = 0;
      WTF::fastFree(v168, (void *)v30);
    }
    LODWORD(v76) = v8;
    goto LABEL_264;
  }
  v137 = *(_DWORD *)(a3 + 156);
  if (!v137)
  {
    v254 = *(float *)(a3 + 64);
    v332 = v254 + *(float *)(a3 + 68);
    v333 = v254 - *(float *)(a3 + 72);
    v336 = 0.0;
    goto LABEL_357;
  }
  v138 = *(_QWORD *)(a3 + 144);
  v139 = *(_QWORD *)(a3 + 40);
  v140 = *(float *)(a3 + 64);
  v7 = *(float *)(a3 + 68);
  v141 = 104 * v137;
  v142 = (_BYTE *)(v138 + 72);
  v8 = 0x7FFFFFFFLL;
  while (2)
  {
    if ((*(v142 - 28) || *(v142 - 25) == 8) && v142[24])
      goto LABEL_204;
    v143 = *((_QWORD *)v142 - 9);
    if (*(_QWORD *)(v143 + 80) != v139 || *v142)
      goto LABEL_204;
    v144 = *(v142 - 25);
    if (v144 > 0xF)
    {
      if (v144 != 16)
        goto LABEL_204;
      v162 = *((float *)v142 - 12);
      goto LABEL_185;
    }
    if (v144 == 8)
    {
      v145 = WebCore::Layout::InlineFormattingContext::geometryForBox((uint64_t)v135, v143);
      if (*(_QWORD *)(v145 + 24))
        goto LABEL_204;
      v146 = *(_DWORD *)(v145 + 12);
      v147 = *(_DWORD *)(v145 + 56);
      v148 = *(_DWORD *)(v145 + 60);
      v62 = __OFADD__(v147, v146);
      v149 = v147 + v146;
      v150 = (v147 >> 31) + 0x7FFFFFFF;
      if (v62)
        v149 = v150;
      v62 = __OFADD__(v149, v148);
      v151 = v149 + v148;
      v152 = (v149 >> 31) + 0x7FFFFFFF;
      if (!v62)
        v152 = v151;
      v153 = *(_DWORD *)(v145 + 40);
      v154 = *(_DWORD *)(v145 + 44);
      v62 = __OFADD__(v153, v152);
      v155 = v153 + v152;
      v156 = (v153 >> 31) + 0x7FFFFFFF;
      if (v62)
        v155 = v156;
      v157 = *(_DWORD *)(v145 + 64);
      v62 = __OFADD__(v155, v157);
      v158 = v155 + v157;
      v159 = (v155 >> 31) + 0x7FFFFFFF;
      if (!v62)
        v159 = v158;
      v62 = __OFADD__(v159, v154);
      v160 = v159 + v154;
      v161 = (v159 >> 31) + 0x7FFFFFFF;
      if (!v62)
        v161 = v160;
      v162 = (float)v161 * 0.015625;
LABEL_185:
      if (v162 > v140)
        goto LABEL_204;
    }
    else if (v144 != 4 && v144 - 1 >= 2 || *((float *)v142 - 12) != v140 || *((float *)v142 - 11) != v7)
    {
      goto LABEL_204;
    }
    v142 += 104;
    v141 -= 104;
    if (v141)
      continue;
    break;
  }
  v331 = *(float *)(a3 + 72);
  v332 = v140 + v7;
  v333 = v140 - v331;
  v334 = 104 * v137;
  v335 = (float *)(v138 + 32);
  v336 = 0.0;
  do
  {
    v337 = *(v335 - 1);
    *(v335 - 5) = v331 - *v335;
    v338 = *(v335 - 2);
    if ((float)(v140 - v338) < v336)
      v336 = v140 - v338;
    v339 = (float)(v140 - v338) + (float)(v338 + v337);
    if (v332 < v339)
      v332 = v339;
    v340 = v338 - v331;
    if (v333 < v340)
      v333 = v340;
    v335 += 26;
    v334 -= 104;
  }
  while (v334);
LABEL_357:
  *(float *)(a3 + 52) = v333;
  v166 = v332 - v336;
LABEL_358:
  v256 = *this;
  v255 = this[1];
  v257 = *((unsigned __int8 *)v255 + 1368);
  v258 = (WebCore::Layout::Box *)**this;
  if (*((_BYTE *)v255 + 1368))
  {
    v259 = WebCore::Layout::Box::firstLineStyle(v258);
    v256 = *this;
    v255 = this[1];
    v260 = *(_BYTE *)((*this)[8] + 32);
    if (*((_BYTE *)v255 + 1368))
      v665 = (v260 & 1) == 0;
    else
      v665 = 1;
    v257 = !v665 && *(_BYTE *)(*(_QWORD *)(v259 + 24) + 196) != 0;
  }
  else
  {
    v259 = (uint64_t)v258 + 16;
    v260 = *(_BYTE *)(v256[8] + 32);
  }
  v261 = v260 & 2;
  if (*((_BYTE *)v255 + 1369))
    v262 = v261 == 0;
  else
    v262 = 1;
  if (!v262)
  {
    v666 = *(unsigned __int16 *)(*(_QWORD *)(v259 + 24) + 196);
    if (v666 >= 0x100)
    {
      v667 = v666 >> 8;
      if (v667 == 4)
      {
        v668 = *(float *)(a3 + 68);
      }
      else
      {
        v668 = 0.0;
        if (v667 == 1)
          v668 = *(float *)(a3 + 68) - *(float *)(a3 + 76);
      }
      v166 = v166 - fmaxf(v668, 0.0);
    }
  }
  if (v257)
  {
    v669 = WebCore::Layout::LineBoxBuilder::computeLineBoxGeometry(WebCore::Layout::LineBox &)const::$_1::operator()(*(_WORD *)(*(_QWORD *)(v259 + 24) + 196), a3 + 40);
    v166 = v166 - fmaxf(v669, 0.0);
    *(float *)(a3 + 52) = *(float *)(a3 + 52) - v669;
    v670 = *(_DWORD *)(a3 + 156);
    if (v670)
    {
      v671 = 104 * v670;
      v672 = (float *)(*(_QWORD *)(a3 + 144) + 12);
      do
      {
        *v672 = *v672 - v669;
        v672 += 26;
        v671 -= 104;
      }
      while (v671);
    }
  }
  v263 = *((_DWORD *)v255 + 329);
  v264 = *((float *)v255 + 328);
  v265 = *((float *)v255 + 327);
  *(float *)(a3 + 12) = v265;
  *(float *)(a3 + 16) = v264;
  *(_DWORD *)(a3 + 20) = v263;
  *(float *)(a3 + 24) = v166;
  v266 = v264 * 64.0;
  v267 = (float)(v166 + v264);
  v268 = v267 * 64.0;
  v269 = v267 * 64.0 >= 2147483650.0 || v266 <= -2147483650.0;
  v270 = v269 || v268 <= -2147483650.0;
  if (v270 || v266 >= 2147483650.0)
  {
    v791 = 0x80000000;
    if (v266 > -2147483650.0)
      v791 = (int)v266;
    if (v266 < 2147483650.0)
      v271 = v791;
    else
      v271 = 0x7FFFFFFFLL;
    v792 = v267 * 64.0;
    if (v792 > -2147483650.0)
      v793 = (int)v792;
    else
      v793 = 0x80000000;
    if (v792 < 2147483650.0)
      v272 = v793;
    else
      v272 = 0x7FFFFFFF;
  }
  else
  {
    v271 = (int)v266;
    v272 = (int)v268;
  }
  v273 = v256[4];
  if (!*(_DWORD *)(v273 + 20))
  {
    v274 = 0;
    v275 = 0;
    goto LABEL_377;
  }
  v501 = *(_QWORD *)v273;
  v502 = v256[2];
  LODWORD(v862) = v271;
  v848 = v502;
  if (v501 == v502)
  {
    LODWORD(v503) = 0;
    LODWORD(v504) = v271;
  }
  else
  {
    v503 = WebCore::Layout::FloatingContext::mapPointFromFormattingContextRootToPlacedFloatsRoot((WebCore::Layout::FloatingContext *)(v256 + 2), (const WebCore::Layout::Box *)(v271 << 32));
    v504 = HIDWORD(v503);
    LODWORD(v862) = HIDWORD(v503);
  }
  v850 = v256 + 2;
  v505 = v272 - v271;
  if (__OFSUB__(v272, (_DWORD)v271))
    v505 = (v272 >> 31) + 0x7FFFFFFF;
  v62 = __OFADD__((_DWORD)v504, v505);
  v506 = v504 + v505;
  if (v62)
    v506 = (v504 >> 31) + 0x7FFFFFFF;
  LODWORD(v866) = v506;
  v62 = __OFSUB__(v506, (_DWORD)v504);
  v507 = v506 - v504;
  v508 = (v506 >> 31) + 0x7FFFFFFF;
  if (v62)
    v507 = v508;
  LODWORD(v865) = v507;
  *(_QWORD *)&v855 = &v865;
  *((_QWORD *)&v855 + 1) = &v862;
  v856 = &v866;
  v867 = (WTF *)&v855;
  v868 = &v862;
  v869 = (uint64_t *)&v865;
  v509 = *(_DWORD *)(v273 + 20);
  if (!v509)
  {
    v511 = 0;
    v275 = 0;
    v274 = 0;
    v515 = 0;
    goto LABEL_758;
  }
  v842 = v503;
  v274 = 0;
  v275 = 0;
  v510 = 0;
  v511 = 0;
  v843 = *(_QWORD *)(v273 + 8);
  v845 = v501;
  v512 = v843 + 120 * v509;
  while (2)
  {
    v512 -= 120;
LABEL_742:
    if (v275 && !*(_DWORD *)(v512 + 8))
      goto LABEL_952;
    if (v511 && *(_DWORD *)(v512 + 8))
      goto LABEL_952;
    v513 = WebCore::Layout::FloatingContext::constraints(WebCore::LayoutUnit,WebCore::LayoutUnit,WebCore::Layout::FloatingContext::MayBeAboveLastFloat)const::$_1::operator()<WebCore::Layout::PlacedFloats::Item const>((uint64_t)&v867, v512);
    if (!v514)
      goto LABEL_952;
    v515 = v513;
    if (!*(_DWORD *)(v512 + 8))
    {
      v275 = 1;
      if (!v511)
      {
        if ((*(_BYTE *)(v273 + 24) & 2) != 0)
        {
          v274 = v513;
LABEL_952:
          if (v512 != v843)
            continue;
LABEL_756:
          if (v845 == v848)
            goto LABEL_757;
          if (v275)
          {
            if (v842 == 0x80000000)
              v723 = 0x7FFFFFFF;
            else
              v723 = -v842;
            v62 = __OFADD__(v274, v723);
            v724 = v274 + v723;
            if (v62)
              v274 = (v274 >> 31) + 0x7FFFFFFF;
            else
              v274 = v724;
          }
          if (!v511)
          {
LABEL_757:
            v515 = v510;
            goto LABEL_758;
          }
          v515 = v510;
          goto LABEL_1105;
        }
        v511 = 0;
      }
      v274 = v513;
      goto LABEL_756;
    }
    break;
  }
  if (v275)
  {
    v511 = 1;
    v510 = v513;
    goto LABEL_756;
  }
  if ((*(_BYTE *)(v273 + 24) & 1) != 0)
  {
    v275 = 0;
    v511 = 1;
    v510 = v513;
    v136 = v512 == v843;
    v512 -= 120;
    if (!v136)
      goto LABEL_742;
  }
  v275 = 0;
  if (v845 == v848)
    goto LABEL_880;
LABEL_1105:
  if (v842 == 0x80000000)
    v725 = 0x7FFFFFFF;
  else
    v725 = -v842;
  v62 = __OFADD__(v515, v725);
  v726 = v515 + v725;
  if (v62)
    v515 = (v515 >> 31) + 0x7FFFFFFF;
  else
    v515 = v726;
LABEL_880:
  v511 = 1;
LABEL_758:
  if ((*(_BYTE *)(v273 + 28) != 0) != ((*(_BYTE *)(*v850 + 59) & 4) == 0))
  {
    v720 = (WebCore::Layout::BoxGeometry *)WebCore::Layout::LayoutState::geometryForBox(v256[3], *v850);
    v721 = WebCore::Layout::BoxGeometry::borderBoxWidth(v720);
    v722 = v721 - v515;
    if (__OFSUB__(v721, v515))
      v722 = (v721 >> 31) + 0x7FFFFFFF;
    if (v511)
      v274 = v722;
    else
      v274 = 0;
    v275 = v511 != 0;
  }
  v255 = this[1];
LABEL_377:
  v276 = this;
  v277 = *((unsigned int *)this + 11);
  if ((_DWORD)v277)
  {
    v482 = v265 - *((float *)v255 + 330);
    v483 = this[4];
    v484 = &v483[v277];
    v485 = v482 + *(float *)(a3 + 48);
    do
    {
      v486 = v276[1];
      if (*v483 >= (unint64_t)*((unsigned int *)v486 + 11))
      {
        __break(0xC471u);
        JUMPOUT(0x1942EF0E0);
      }
      v487 = *(_QWORD *)(v486[4] + 120 * *v483 + 8);
      if ((*(_WORD *)(v487 + 12) & 0x40) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942EDF18);
      }
      v488 = a3 + 40;
      if (*v11 != v487)
      {
        v493 = *v853;
        if (!*v853)
          goto LABEL_1281;
        v494 = *(_DWORD *)(v493 - 8);
        v495 = (~(v487 << 32) + v487) ^ ((unint64_t)(~(v487 << 32) + v487) >> 22);
        v496 = 9 * ((v495 + ~(v495 << 13)) ^ ((v495 + ~(v495 << 13)) >> 8));
        v497 = (v496 ^ (v496 >> 15)) + ~((v496 ^ (v496 >> 15)) << 27);
        v498 = v494 & ((v497 >> 31) ^ v497);
        v499 = *(_QWORD *)(v493 + 16 * v498);
        if (v499 != v487)
        {
          v607 = 1;
          while (v499)
          {
            v498 = ((_DWORD)v498 + v607) & v494;
            v499 = *(_QWORD *)(v493 + 16 * v498);
            ++v607;
            if (v499 == v487)
              goto LABEL_725;
          }
          v498 = *(unsigned int *)(v493 - 4);
        }
LABEL_725:
        if (v498 == *(_DWORD *)(v493 - 4))
        {
LABEL_1281:
          v488 = 0;
        }
        else
        {
          v500 = *(_QWORD *)(v493 + 16 * v498 + 8);
          if (v500 >= *(unsigned int *)(a3 + 156))
          {
            __break(0xC471u);
            JUMPOUT(0x1942EF0E8);
          }
          v488 = *v852 + 104 * v500;
        }
      }
      v489 = (*this)[15];
      if (v489)
      {
        v711 = *(_DWORD *)(v489 - 8);
        v712 = (~(v487 << 32) + v487) ^ ((unint64_t)(~(v487 << 32) + v487) >> 22);
        v713 = 9 * ((v712 + ~(v712 << 13)) ^ ((v712 + ~(v712 << 13)) >> 8));
        v714 = (v713 ^ (v713 >> 15)) + ~((v713 ^ (v713 >> 15)) << 27);
        v715 = v711 & ((v714 >> 31) ^ v714);
        v716 = *(_QWORD *)(v489 + 16 * v715);
        if (v716 == v487)
        {
LABEL_1077:
          v718 = *(_DWORD *)(v489 + 16 * v715 + 8);
          if (v718 == 0x80000000)
            v490 = 0;
          else
            v490 = v718;
          if (v718 != 0x80000000 && v275)
          {
            if (v274 > v718)
              v718 = v274;
            v490 = v718 & (v718 >> 31);
          }
        }
        else
        {
          v717 = 1;
          while (v716)
          {
            v715 = ((_DWORD)v715 + v717) & v711;
            v716 = *(_QWORD *)(v489 + 16 * v715);
            ++v717;
            if (v716 == v487)
              goto LABEL_1077;
          }
          v490 = 0;
        }
      }
      else
      {
        v490 = 0;
      }
      v491 = *(float *)(v488 + 8);
      if (v485 != 0.0 || v490 != 0)
      {
        v626 = v485 * 64.0;
        v627 = (int)fmax(v626, -2147483650.0);
        if (v626 >= 2147483650.0)
          v627 = 0x7FFFFFFF;
        v851 = v627;
        v628 = WebCore::Layout::InlineFormattingContext::geometryForBox((uint64_t)*this, v487);
        v629 = v628[4];
        v630 = v628[5];
        v62 = __OFADD__(v629, v490);
        v631 = v629 + v490;
        v632 = (v629 >> 31) + 0x7FFFFFFF;
        if (!v62)
          v632 = v631;
        v62 = __OFSUB__(v632, v851);
        v633 = v632 - v851;
        LODWORD(v634) = (v632 >> 31) + 0x7FFFFFFF;
        if (v62)
          v634 = v634;
        else
          v634 = v633;
        v62 = __OFSUB__(v630, v490);
        v635 = v630 - v490;
        v636 = (v630 >> 31) + 0x7FFFFFFF;
        if (!v62)
          v636 = v635;
        v62 = __OFADD__(v636, v851);
        v637 = v636 + v851;
        LODWORD(v638) = (v636 >> 31) + 0x7FFFFFFF;
        if (v62)
          v638 = v638;
        else
          v638 = v637;
        *((_QWORD *)v628 + 2) = v634 | (v638 << 32);
      }
      *(float *)(v488 + 8) = (float)(v491 - v485) + (float)((float)v490 * 0.015625);
      ++v483;
      v276 = this;
    }
    while (v483 != v484);
  }
  v278 = (_QWORD *)(*v276)[6];
  v279 = (*(_DWORD *)(*(_QWORD *)(*v278 + 40) + 232) >> 19) & 3;
  if (v279)
  {
    v673 = v278[8];
    if (*(_BYTE *)(v673 + 104))
    {
      v674 = *(int *)(v673 + 68);
      v675 = ((int)(v674 - (v276 & 0xFFFFFFC0) + 32) >> 6) + (int)v674 / 64;
      if (v675)
      {
        v676 = *(_QWORD *)(v673 + 80);
        v678 = *(_DWORD *)(v676 + 60);
        v677 = *(_DWORD *)(v676 + 64);
        v679 = v677 + v678;
        if (v677 + v678 < 0 != __OFADD__(v677, v678))
          v680 = v679 + 1;
        else
          v680 = v677 + v678;
        v681 = v679 - (v680 >> 1);
        if (*(_DWORD *)(a3 + 32))
          v678 = v681;
        v682 = v679 << 6;
        if (v679 < -33554432)
          v682 = 0x80000000;
        if (v679 > 0x1FFFFFF)
          v682 = 0x7FFFFFFF;
        v683 = v674 - v682;
        if (__OFSUB__((_DWORD)v674, v682))
          v683 = (v674 >> 31) + 0x7FFFFFFF;
        v684 = v683 / 2;
        v685 = *(_DWORD *)(v673 + 60);
        v686 = *(_DWORD *)(v673 + 72);
        v62 = __OFADD__(v686, v685);
        v687 = v686 + v685;
        v688 = (v686 >> 31) + 0x7FFFFFFF;
        if (v62)
          v687 = v688;
        if (*(_BYTE *)(v673 + 96))
        {
          v689 = *(_DWORD *)(v673 + 100);
          if (v689 > v687)
          {
            v690 = *(_DWORD *)(v673 + 92);
            v62 = __OFADD__(v690, v689);
            v691 = v690 + v689;
            v687 = (v690 >> 31) + 0x7FFFFFFF;
            if (!v62)
              v687 = v691;
          }
        }
        v62 = __OFADD__(v687, v684);
        v692 = v687 + v684;
        v693 = (v687 >> 31) + 0x7FFFFFFF;
        if (v62)
          v692 = v693;
        if (v678 >= -33554432)
          v694 = v678 << 6;
        else
          v694 = 0x80000000;
        if (v678 <= 0x1FFFFFF)
          v695 = v694;
        else
          v695 = 0x7FFFFFFF;
        v62 = __OFADD__(v692, v695);
        v696 = v692 + v695;
        if (v62)
          v696 = (v692 >> 31) + 0x7FFFFFFF;
        v697 = *(float *)(a3 + 52);
        v698 = *(float *)(a3 + 72);
        v699 = (float)((float)(*(float *)(a3 + 16) + v697) + v698) + (float)((float)*(int *)(v673 + 52) * 0.015625);
        if (v279 == 2)
        {
          v700 = v698 + *(float *)(a3 + 76);
          v701 = (float)v679;
          if (v700 <= (float)v679)
          {
            v709 = (float)(v701 - v700) * 0.5;
            v710 = (float)v692;
          }
          else
          {
            v702 = ceilf((float)(v700 - v701) / (float)((float)(int)v674 * 0.015625)) * 64.0;
            if (v702 >= 2147483650.0 || v702 <= -2147483650.0)
            {
              if (v702 >= 2147483650.0)
              {
                v704 = 0x7FFFFFFF;
              }
              else
              {
                if (v702 > -2147483650.0)
                  goto LABEL_1067;
                v704 = 0x80000000;
              }
            }
            else
            {
LABEL_1067:
              v704 = (int)v702;
            }
            v705 = v704 * v674 / 64;
            v706 = ((v704 ^ v674) >> 31) + 0x7FFFFFFF;
            if (HIDWORD(v705) == (int)v705 >> 31)
              v706 = v705;
            v62 = __OFADD__(v682, v706);
            v707 = v682 + v706;
            v708 = (v682 >> 31) + 0x7FFFFFFF;
            if (!v62)
              v708 = v707;
            v709 = (float)((float)((float)v708 * 0.015625) - v700) * 0.5;
            v710 = (float)v692;
          }
          v754 = (float)((float)(v710 * 0.015625) + v709) * 64.0;
          if (v754 >= 2147483650.0 || v754 <= -2147483650.0)
          {
            if (v754 >= 2147483650.0)
            {
              v756 = 0x7FFFFFFF;
            }
            else
            {
              if (v754 > -2147483650.0)
                goto LABEL_1186;
              v756 = 0x80000000;
            }
          }
          else
          {
LABEL_1186:
            v756 = (int)v754;
          }
          v757 = (float)(v698 + (float)((float)v756 * 0.015625)) * 64.0;
          if (v757 >= 2147483650.0 || v757 <= -2147483650.0)
          {
            if (v757 > -2147483650.0)
              v692 = (int)v757;
            else
              v692 = 0x80000000;
            if (v757 < 2147483650.0)
              v696 = v692;
            else
              v696 = 0x7FFFFFFF;
          }
          else
          {
            v696 = (int)v757;
          }
        }
        v759 = (float)v696 * 0.015625;
        if (v759 > v699)
        {
          v767 = v759 - v699;
          goto LABEL_1204;
        }
        v760 = (float)(v699 - v759) * 64.0;
        if (v760 >= 2147483650.0 || v760 <= -2147483650.0)
        {
          if (v760 >= 2147483650.0)
          {
            v762 = 0x7FFFFFFF;
          }
          else
          {
            if (v760 > -2147483650.0)
              goto LABEL_1197;
            v762 = 0x80000000;
          }
        }
        else
        {
LABEL_1197:
          v762 = (int)v760;
        }
        v763 = (((int)(v762 - (v692 & 0xFFFFFFC0) + 32) >> 6) + v762 / 64) % v675;
        if (v763)
        {
          v764 = v763 << 6;
          if (v763 > 0x1FFFFFF)
            v764 = 0x7FFFFFFF;
          v62 = __OFSUB__((_DWORD)v674, v764);
          v765 = v674 - v764;
          v766 = (v674 >> 31) + 0x7FFFFFFF;
          if (!v62)
            v766 = v765;
          v767 = (float)v766 * 0.015625;
LABEL_1204:
          *(float *)(a3 + 52) = v697 + v767;
          v768 = v767 + *(float *)(a3 + 24);
          *(float *)(a3 + 20) = *(float *)(a3 + 20) + 0.0;
          *(float *)(a3 + 24) = v768;
        }
      }
    }
  }
}

BOOL WebCore::Layout::InlineFormattingUtils::inlineLevelBoxAffectsLineBox(WebCore::Layout::InlineFormattingUtils *this, const WebCore::Layout::InlineLevelBox *a2)
{
  int v3;
  _BOOL8 result;
  int v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  WebCore::Layout::BoxGeometry *v9;

  v3 = *((unsigned __int8 *)a2 + 47);
  if ((v3 - 1) < 2)
  {
    v5 = *((unsigned __int8 *)a2 + 67);
    if ((v5 & 0x22222222) != 0 || ((v5 & 0xC) != 0 ? (v8 = *((_BYTE *)a2 + 44) == 0) : (v8 = 1), !v8))
    {
LABEL_9:
      v6 = *(_QWORD *)this;
      if (!*(_BYTE *)(v6 + 161) && !*((_BYTE *)a2 + 44))
      {
        if (v3 == 4)
          return (*(_QWORD *)(*(_QWORD *)a2 + 32) & 0x3E0) == 64;
        v9 = (WebCore::Layout::BoxGeometry *)WebCore::Layout::InlineFormattingContext::geometryForBox(*(_QWORD *)(v6 + 48), *(_QWORD *)a2);
        v7 = WebCore::Layout::BoxGeometry::horizontalBorderAndPadding(v9) == 0;
        return !v7;
      }
      return 1;
    }
    return 0;
  }
  if (v3 == 8)
  {
    if ((*((_BYTE *)a2 + 67) & 0x10) != 0)
    {
      if ((*(_WORD *)(*(_QWORD *)a2 + 12) & 0xF) != 0xB)
      {
        v7 = (*(_QWORD *)(*(_QWORD *)a2 + 32) & 0x1FLL) == 25;
        return !v7;
      }
      return 1;
    }
    return 0;
  }
  if (v3 != 4)
    return 0;
  if ((*((_BYTE *)a2 + 67) & 3) != 0)
    goto LABEL_9;
  result = 0;
  if ((*((_BYTE *)a2 + 67) & 0x4C) != 0)
  {
    if (*((_BYTE *)a2 + 44))
      goto LABEL_9;
  }
  return result;
}

unint64_t WebCore::Layout::FloatingContext::constraints@<X0>(unint64_t this@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, char a4@<W3>, _DWORD *a5@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  int v14;
  int v15;
  _BYTE *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _BYTE *v22;
  unint64_t *v23;
  int v24;
  uint64_t i;
  uint64_t v26;
  char v27;
  int v28;
  char v29;
  unsigned int v30;
  int v31;
  WebCore::Layout::BoxGeometry *v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  _DWORD *v52;
  _QWORD v53[3];
  _QWORD v54[3];
  int v55;
  unsigned int v56;
  int v57;

  v6 = *(uint64_t **)(this + 16);
  if (!*((_DWORD *)v6 + 5))
  {
    *(_BYTE *)a5 = 0;
    *((_BYTE *)a5 + 8) = 0;
    *((_BYTE *)a5 + 12) = 0;
    *((_BYTE *)a5 + 20) = 0;
    return this;
  }
  v7 = (uint64_t *)this;
  v8 = *v6;
  v9 = *(_QWORD *)this;
  v57 = a2;
  if (v8 == v9)
  {
    v51 = 0;
    v50 = 0;
    LODWORD(v10) = a2;
  }
  else
  {
    v28 = a2;
    v29 = a4;
    v30 = a3;
    this = WebCore::Layout::FloatingContext::mapPointFromFormattingContextRootToPlacedFloatsRoot((WebCore::Layout::FloatingContext *)this, (const WebCore::Layout::Box *)(a2 << 32));
    LODWORD(a2) = v28;
    a3 = v30;
    a4 = v29;
    v51 = this;
    v10 = HIDWORD(this);
    v57 = HIDWORD(this);
    v31 = HIDWORD(this) - v28;
    if (__OFSUB__(HIDWORD(this), v28))
      v31 = (HIDWORD(this) >> 31) + 0x7FFFFFFF;
    v50 = v31;
  }
  v11 = a3 - a2;
  if (__OFSUB__(a3, (_DWORD)a2))
    v11 = (a3 >> 31) + 0x7FFFFFFF;
  v12 = __OFADD__((_DWORD)v10, v11);
  v13 = v10 + v11;
  if (v12)
    v13 = (v10 >> 31) + 0x7FFFFFFF;
  v56 = v13;
  v12 = __OFSUB__(v13, (_DWORD)v10);
  v14 = v13 - v10;
  v15 = (v13 >> 31) + 0x7FFFFFFF;
  if (v12)
    v14 = v15;
  v55 = v14;
  v54[0] = &v55;
  v54[1] = &v57;
  v54[2] = &v56;
  v53[0] = v54;
  v53[1] = &v57;
  v53[2] = &v55;
  *((_BYTE *)a5 + 8) = 0;
  v16 = a5 + 2;
  *((_BYTE *)a5 + 12) = 0;
  v52 = a5 + 3;
  *(_BYTE *)a5 = 0;
  *((_BYTE *)a5 + 20) = 0;
  v17 = (char *)(a5 + 5);
  v18 = v6[1];
  v19 = *((unsigned int *)v6 + 5);
  if ((a4 & 1) == 0)
  {
    if (!(_DWORD)v19)
      goto LABEL_56;
    v24 = 0;
    for (i = 120 * v19; ; i -= 120)
    {
      v26 = v18 + i;
      if (v24 && !*(_DWORD *)(v26 - 112))
        goto LABEL_54;
      if (*v17 && *(_DWORD *)(v18 + i - 112))
        goto LABEL_54;
      this = WebCore::Layout::FloatingContext::constraints(WebCore::LayoutUnit,WebCore::LayoutUnit,WebCore::Layout::FloatingContext::MayBeAboveLastFloat)const::$_1::operator()<WebCore::Layout::PlacedFloats::Item const>((uint64_t)v53, v26 - 120);
      if (!v27)
        goto LABEL_54;
      if (!*(_DWORD *)(v18 + i - 112))
        break;
      if (!*v17)
        *v17 = 1;
      *(_QWORD *)v52 = this;
      if (*v16 || (v6[3] & 1) == 0 || i == 120)
        goto LABEL_56;
      v24 = 0;
LABEL_46:
      ;
    }
    if (!*v16)
      *v16 = 1;
    *(_QWORD *)a5 = this;
    if (*((_BYTE *)a5 + 20) || (v6[3] & 2) == 0)
      goto LABEL_56;
LABEL_54:
    if (i == 120)
      goto LABEL_56;
    v24 = *v16;
    goto LABEL_46;
  }
  if ((_DWORD)v19)
  {
    v20 = 120 * v19;
    while (1)
    {
      this = WebCore::Layout::FloatingContext::constraints(WebCore::LayoutUnit,WebCore::LayoutUnit,WebCore::Layout::FloatingContext::MayBeAboveLastFloat)const::$_1::operator()<WebCore::Layout::PlacedFloats::Item const>((uint64_t)v53, v18 + v20 - 120);
      if (v21)
        break;
LABEL_23:
      v20 -= 120;
      if (!v20)
        goto LABEL_56;
    }
    if (*(_DWORD *)(v18 + v20 - 112))
    {
      v22 = a5 + 5;
      v23 = (unint64_t *)(a5 + 3);
      if (*v17)
      {
        v23 = (unint64_t *)(a5 + 3);
        if (*v52 <= (int)this)
          goto LABEL_23;
        goto LABEL_22;
      }
    }
    else
    {
      v22 = a5 + 2;
      v23 = (unint64_t *)a5;
      if (*v16)
      {
        v23 = (unint64_t *)a5;
        if (*a5 >= (int)this)
          goto LABEL_23;
        goto LABEL_22;
      }
    }
    *v22 = 1;
LABEL_22:
    *v23 = this;
    goto LABEL_23;
  }
LABEL_56:
  if (v8 != v9)
  {
    if (*v16)
    {
      if (v51 == 0x80000000)
        v40 = 0x7FFFFFFF;
      else
        v40 = -v51;
      if (v50 == 0x80000000)
        v41 = 0x7FFFFFFF;
      else
        v41 = -v50;
      v42 = a5[1];
      v12 = __OFADD__(*a5, v40);
      v43 = *a5 + v40;
      if (v12)
        v43 = (*a5 >> 31) + 0x7FFFFFFF;
      v12 = __OFADD__(v42, v41);
      v44 = v42 + v41;
      if (v12)
        v44 = (v42 >> 31) + 0x7FFFFFFF;
      *a5 = v43;
      a5[1] = v44;
    }
    if (*v17)
    {
      if (v51 == 0x80000000)
        v45 = 0x7FFFFFFF;
      else
        v45 = -v51;
      if (v50 == 0x80000000)
        v46 = 0x7FFFFFFF;
      else
        v46 = -v50;
      v12 = __OFADD__(*v52, v45);
      v47 = *v52 + v45;
      if (v12)
        v47 = (*v52 >> 31) + 0x7FFFFFFF;
      v48 = a5[4];
      v12 = __OFADD__(v48, v46);
      v49 = v48 + v46;
      if (v12)
        v49 = (v48 >> 31) + 0x7FFFFFFF;
      a5[3] = v47;
      a5[4] = v49;
    }
  }
  if ((*((_BYTE *)v6 + 28) != 0) != ((*(_BYTE *)(*v7 + 59) & 4) == 0))
  {
    v32 = (WebCore::Layout::BoxGeometry *)WebCore::Layout::LayoutState::geometryForBox(v7[1], *v7);
    this = WebCore::Layout::BoxGeometry::borderBoxWidth(v32);
    if (*v16)
    {
      v33 = (this >> 31) + 0x7FFFFFFF;
      if (!__OFSUB__((_DWORD)this, *a5))
        v33 = this - *a5;
      v34 = v33 & 0xFFFFFF00 | ((unint64_t)a5[1] << 32);
      v35 = v33;
      v36 = 1;
    }
    else
    {
      v34 = 0;
      v35 = 0;
      v36 = 0;
    }
    v37 = *v17;
    if (*v17)
    {
      LODWORD(v38) = this - *v52;
      if (__OFSUB__((_DWORD)this, *v52))
        v38 = (this >> 31) + 0x7FFFFFFF;
      else
        v38 = v38;
      v39 = v38 | ((unint64_t)a5[4] << 32);
      v37 = 1;
    }
    else
    {
      v39 = 0;
    }
    *(_QWORD *)a5 = v39;
    *((_BYTE *)a5 + 8) = v37;
    *(_QWORD *)(a5 + 3) = v35 | v34;
    *((_BYTE *)a5 + 20) = v36;
  }
  return this;
}

_OWORD *WTF::HashMap<WebCore::Layout::InlineLevelBox const*,WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom>,WTF::HashTableTraits>::add<WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom>(_OWORD *result, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _OWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WebCore::Layout::InlineLevelBox const*,WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom>>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashMap<WebCore::Layout::InlineLevelBox const*,WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (_QWORD *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v26 = 0;
    v27 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v28 = 0;
        else
          v28 = *(unsigned int *)(v8 - 4);
        v25 = 0;
        v24 = v8 + 16 * v28;
        goto LABEL_12;
      }
      if (v17 == -1)
        v26 = v16;
      v15 = (v15 + v27) & v10;
      v16 = (_QWORD *)(v8 + 16 * v15);
      v17 = *v16;
      ++v27;
    }
    while (*v16);
    if (v26)
    {
      *v26 = 0;
      v26[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v26;
    }
  }
  *v16 = v11;
  v16[1] = *a4;
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22)
      goto LABEL_11;
LABEL_23:
    result = WTF::HashTable<WebCore::Layout::InlineLevelBox const*,WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom>>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashMap<WebCore::Layout::InlineLevelBox const*,WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>>::expand(a2, v16);
    v16 = result;
    v20 = *a2;
    if (*a2)
      v23 = *(unsigned int *)(v20 - 4);
    else
      v23 = 0;
    goto LABEL_11;
  }
  if (3 * v23 <= 4 * v22)
    goto LABEL_23;
LABEL_11:
  v24 = v20 + 16 * v23;
  v25 = 1;
LABEL_12:
  *(_QWORD *)v7 = v16;
  *((_QWORD *)v7 + 1) = v24;
  *((_BYTE *)v7 + 16) = v25;
  return result;
}

_OWORD *WTF::HashMap<WebCore::Layout::InlineLevelBox const*,float,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::add<float>(_OWORD *result, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  _OWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  _OWORD *v26;
  int v27;
  uint64_t v28;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WebCore::Layout::InlineLevelBox const*,WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,float>>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashMap<WebCore::Layout::InlineLevelBox const*,float,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (_OWORD *)(v8 + 16 * v15);
  v17 = *(_QWORD *)v16;
  if (*(_QWORD *)v16)
  {
    v26 = 0;
    v27 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v28 = 0;
        else
          v28 = *(unsigned int *)(v8 - 4);
        v25 = 0;
        v24 = v8 + 16 * v28;
        goto LABEL_12;
      }
      if (v17 == -1)
        v26 = v16;
      v15 = (v15 + v27) & v10;
      v16 = (_OWORD *)(v8 + 16 * v15);
      v17 = *(_QWORD *)v16;
      ++v27;
    }
    while (*(_QWORD *)v16);
    if (v26)
    {
      *(_QWORD *)v26 = 0;
      *((_DWORD *)v26 + 2) = 2139095040;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v26;
    }
  }
  *(_QWORD *)v16 = v11;
  *((_DWORD *)v16 + 2) = *a4;
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22)
      goto LABEL_11;
LABEL_16:
    result = WTF::HashTable<WebCore::Layout::InlineLevelBox const*,WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,float>>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashMap<WebCore::Layout::InlineLevelBox const*,float,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>>::expand(a2, v16);
    v16 = result;
    v20 = *a2;
    if (*a2)
      v23 = *(unsigned int *)(v20 - 4);
    else
      v23 = 0;
    goto LABEL_11;
  }
  if (3 * v23 <= 4 * v22)
    goto LABEL_16;
LABEL_11:
  v24 = v20 + 16 * v23;
  v25 = 1;
LABEL_12:
  *(_QWORD *)v7 = v16;
  *((_QWORD *)v7 + 1) = v24;
  *((_BYTE *)v7 + 16) = v25;
  return result;
}

_OWORD *WTF::HashTable<WebCore::Layout::InlineLevelBox const*,WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,float>>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashMap<WebCore::Layout::InlineLevelBox const*,float,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _DWORD *v12;
  _OWORD *v13;
  _OWORD *result;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  _OWORD *v26;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_DWORD *)(v9 + 24);
    do
    {
      *((_QWORD *)v12 - 1) = 0;
      *v12 = 2139095040;
      v12 += 4;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v15 = 0;
    v13 = 0;
    do
    {
      v16 = (_QWORD *)(v6 + 16 * v15);
      if ((unint64_t)(*v16 + 1) >= 2)
      {
        v17 = *a1;
        if (*a1)
          v18 = *(_DWORD *)(v17 - 8);
        else
          v18 = 0;
        v19 = (~(*v16 << 32) + *v16) ^ ((~(*v16 << 32) + *v16) >> 22);
        v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((unint64_t)(v19 + ~(v19 << 13)) >> 8));
        v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
        v22 = v18 & ((v21 >> 31) ^ v21);
        v23 = 1;
        do
        {
          v24 = v22;
          v25 = *(_QWORD *)(v17 + 16 * v22);
          v22 = (v22 + v23++) & v18;
        }
        while (v25);
        v26 = (_OWORD *)(v17 + 16 * v24);
        *v26 = *(_OWORD *)v16;
        if (v16 == a3)
          v13 = v26;
      }
      ++v15;
    }
    while (v15 != v7);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v13;
}

_OWORD *WTF::HashTable<WebCore::Layout::InlineLevelBox const*,WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom>>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashMap<WebCore::Layout::InlineLevelBox const*,WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::LineBoxVerticalAligner::computeLineBoxLogicalHeight(WebCore::Layout::LineBox &)::AbsoluteTopAndBottom>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *result;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  _OWORD *v25;

  v4 = *a1;
  if (!*a1)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_3;
  }
  v5 = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!v5)
  {
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v7 = v5 << (6 * v6 >= (2 * v5));
LABEL_4:
  v8 = WTF::fastMalloc((WTF *)(16 * v7 + 16));
  v10 = v8;
  v11 = v8 + 16;
  if (v7)
    bzero((void *)(v8 + 16), 16 * v7);
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v14 = 0;
    v12 = 0;
    do
    {
      v15 = (_QWORD *)(v4 + 16 * v14);
      if ((unint64_t)(*v15 + 1) >= 2)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v18 = (~(*v15 << 32) + *v15) ^ ((~(*v15 << 32) + *v15) >> 22);
        v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((unint64_t)(v18 + ~(v18 << 13)) >> 8));
        v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
        v21 = v17 & ((v20 >> 31) ^ v20);
        v22 = 1;
        do
        {
          v23 = v21;
          v24 = *(_QWORD *)(v16 + 16 * v21);
          v21 = (v21 + v22++) & v17;
        }
        while (v24);
        v25 = (_OWORD *)(v16 + 16 * v23);
        *v25 = *(_OWORD *)v15;
        if (v15 == a2)
          v12 = v25;
      }
      ++v14;
    }
    while (v14 != v5);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v12;
}

BOOL WebCore::MediaSession::virtualHasPendingActivity(WebCore::MediaSession *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  _BOOL8 v5;
  int v6;

  v2 = (unsigned __int8 *)this + 160;
  if (__ldaxr((unsigned __int8 *)this + 160))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 160);
LABEL_5:
  v4 = *((_QWORD *)this + 15);
  if (v4)
    v5 = *(_DWORD *)(v4 - 12) != 0;
  else
    v5 = 0;
  v6 = __ldxr(v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, v2))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v5;
}

void WebCore::Element::replaceChildrenWithMarkup(uint64_t a1@<X0>, unsigned int **a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v9;
  void *v10;
  WebCore::ChildListMutationAccumulator *v11;
  uint64_t v12;
  void *v13;
  WebCore::Node *v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  WebCore::ChildListMutationAccumulator *v18;
  void *v19;
  WebCore::Node *v20;
  WebCore::ChildListMutationAccumulator *v21;
  uint64_t v22;
  unsigned int v23;

  v9 = a1;
  if ((*(_WORD *)(a1 + 28) & 0x10) != 0)
  {
    v9 = a1;
    if (*(_QWORD *)(*(_QWORD *)(a1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::templateTag + 24))
      v9 = WebCore::HTMLTemplateElement::content((WebCore::HTMLTemplateElement *)a1);
  }
  *(_DWORD *)(v9 + 24) += 2;
  if (*a2 && (*a2)[1]
    || (*(_WORD *)(v9 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
  {
    WebCore::createFragmentForInnerOuterHTML(a1, a2, a3 & 0xFE | 1, (uint64_t)&v21, a5);
    v12 = v23;
    if (v23)
    {
      if (v23 != 1)
      {
        v18 = (WebCore::ChildListMutationAccumulator *)std::__throw_bad_variant_access[abi:sn180100]();
        WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v18, v19);
        return;
      }
      v17 = v22;
      v22 = 0;
      *(_BYTE *)a4 = (_BYTE)v21;
      *(_QWORD *)(a4 + 8) = v17;
      *(_BYTE *)(a4 + 16) = 1;
    }
    else
    {
      v20 = v21;
      v21 = 0;
      WebCore::replaceChildrenWithFragment((WebCore::ContainerNode *)v9, &v20, (_QWORD *)a4);
      v14 = v20;
      v20 = 0;
      if (v14)
      {
        if (*((_DWORD *)v14 + 6) == 2)
        {
          if ((*((_WORD *)v14 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v14, v13);
        }
        else
        {
          *((_DWORD *)v14 + 6) -= 2;
        }
      }
    }
    ((void (*)(WebCore::Node **, WebCore::ChildListMutationAccumulator **))off_1E33A4588[v12])(&v20, &v21);
  }
  else
  {
    WebCore::ChildListMutationScope::ChildListMutationScope(&v21, (WebCore::ContainerNode *)v9);
    WebCore::ContainerNode::removeChildren(v9);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v11 = v21;
    v21 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
      {
        WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v11, v10);
        WTF::fastFree(v15, v16);
      }
      else
      {
        --*(_DWORD *)v11;
      }
    }
  }
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9, v10);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
}

void WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(WebCore::ChildListMutationAccumulator *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  WebCore::MutationObserver ***v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if (*((_DWORD *)this + 9) || *((_DWORD *)this + 13))
    WebCore::ChildListMutationAccumulator::enqueueMutationRecord(this);
  if ((byte_1ECE8310B & 1) != 0)
  {
    v3 = qword_1ECE83120;
    v5 = (uint64_t *)((char *)this + 16);
    v4 = *((_QWORD *)this + 2);
    if (qword_1ECE83120)
    {
      v6 = *(_DWORD *)(qword_1ECE83120 - 8);
      v7 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
      v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
      v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      v10 = v6 & ((v9 >> 31) ^ v9);
      for (i = 1; ; ++i)
      {
        v12 = v10;
        v13 = *(_QWORD *)(qword_1ECE83120 + 16 * v10);
        if (v13 != -1)
        {
          if (!v13)
            goto LABEL_23;
          if (*(_QWORD *)(v13 + 8) == v4)
            break;
        }
        v10 = (v10 + i) & v6;
      }
      if (v10 != *(_DWORD *)(qword_1ECE83120 - 4))
      {
        v14 = (_QWORD *)(qword_1ECE83120 + 16 * v10);
        *v14 = 0;
        do
        {
          v15 = __ldaxr((unsigned int *)v13);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, (unsigned int *)v13));
        if (!v16)
        {
          atomic_store(1u, (unsigned int *)v13);
          v36 = *(unsigned int *)(v13 + 28);
          if ((_DWORD)v36)
          {
            v49 = v13;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v13 + 16), (WTF::StringImpl *)(*(_QWORD *)(v13 + 16) + 32 * v36));
            v13 = v49;
          }
          v37 = *(WTF **)(v13 + 16);
          if (v37)
          {
            *(_QWORD *)(v13 + 16) = 0;
            *(_DWORD *)(v13 + 24) = 0;
            v48 = v13;
            WTF::fastFree(v37, a2);
            v13 = v48;
          }
          WTF::fastFree((WTF *)v13, a2);
        }
        *v14 = -1;
        v17 = v3 + 16 * v12;
        v18 = *(WTF **)(v17 + 8);
        *(_QWORD *)(v17 + 8) = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 1)
            WTF::fastFree(v18, a2);
          else
            --*(_DWORD *)v18;
        }
        v19 = qword_1ECE83120;
        ++*(_DWORD *)(qword_1ECE83120 - 16);
        if (v19)
          v20 = *(_DWORD *)(v19 - 12) - 1;
        else
          v20 = -1;
        *(_DWORD *)(v19 - 12) = v20;
        if (qword_1ECE83120)
        {
          v21 = *(_DWORD *)(qword_1ECE83120 - 4);
          if (6 * *(_DWORD *)(qword_1ECE83120 - 12) < v21 && v21 >= 9)
            WTF::HashTable<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>,WTF::KeyValuePair<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>,WTF::WeakRef<WebCore::ChildListMutationAccumulator,WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>,WTF::WeakRef<WebCore::ChildListMutationAccumulator,WTF::SingleThreadWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashMap<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>,WTF::WeakRef<WebCore::ChildListMutationAccumulator,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::ChildListMutationAccumulator,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>>>::rehash(v21 >> 1);
        }
      }
    }
  }
  else
  {
    qword_1ECE83120 = 0;
    byte_1ECE8310B = 1;
    v5 = (uint64_t *)((char *)this + 16);
  }
LABEL_23:
  v23 = (WebCore::MutationObserver ***)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v23)
  {
    if (*v23)
      WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable(*v23, a2);
    WTF::fastFree((WTF *)v23, a2);
  }
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v24)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v24));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)v24);
      v38 = *(unsigned int *)(v24 + 28);
      if ((_DWORD)v38)
      {
        v47 = v24;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v24 + 16), (WTF::StringImpl *)(*(_QWORD *)(v24 + 16) + 32 * v38));
        v24 = v47;
      }
      v39 = *(WTF **)(v24 + 16);
      if (v39)
      {
        *(_QWORD *)(v24 + 16) = 0;
        *(_DWORD *)(v24 + 24) = 0;
        v40 = v24;
        WTF::fastFree(v39, a2);
        v24 = v40;
      }
      WTF::fastFree((WTF *)v24, a2);
    }
  }
  v27 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v27)
  {
    if (*(_DWORD *)(v27 + 24) == 2)
    {
      if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v27);
    }
    else
    {
      *(_DWORD *)(v27 + 24) -= 2;
    }
  }
  v28 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v28)
  {
    if (*(_DWORD *)(v28 + 24) == 2)
    {
      if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v28);
    }
    else
    {
      *(_DWORD *)(v28 + 24) -= 2;
    }
  }
  v29 = *((unsigned int *)this + 13);
  if ((_DWORD)v29)
  {
    v41 = (uint64_t *)*((_QWORD *)this + 5);
    v42 = 8 * v29;
    do
    {
      v43 = *v41;
      *v41 = 0;
      if (v43)
      {
        if (*(_DWORD *)(v43 + 24) == 2)
        {
          if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v43);
        }
        else
        {
          *(_DWORD *)(v43 + 24) -= 2;
        }
      }
      ++v41;
      v42 -= 8;
    }
    while (v42);
  }
  v30 = (WTF *)*((_QWORD *)this + 5);
  if (v30)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v30, a2);
  }
  v31 = *((unsigned int *)this + 9);
  if ((_DWORD)v31)
  {
    v44 = (uint64_t *)*((_QWORD *)this + 3);
    v45 = 8 * v31;
    do
    {
      v46 = *v44;
      *v44 = 0;
      if (v46)
      {
        if (*(_DWORD *)(v46 + 24) == 2)
        {
          if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v46);
        }
        else
        {
          *(_DWORD *)(v46 + 24) -= 2;
        }
      }
      ++v44;
      v45 -= 8;
    }
    while (v45);
  }
  v32 = (WTF *)*((_QWORD *)this + 3);
  if (v32)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v32, a2);
  }
  v33 = *v5;
  *v5 = 0;
  if (v33)
  {
    if (*(_DWORD *)(v33 + 24) == 2)
    {
      if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v33);
    }
    else
    {
      *(_DWORD *)(v33 + 24) -= 2;
    }
  }
  v34 = *((_QWORD *)this + 1);
  if (v34)
  {
    *(_QWORD *)(v34 + 8) = 0;
    v35 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 1)
        WTF::fastFree(v35, a2);
      else
        --*(_DWORD *)v35;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WebCore::ContainerNode::removeChildren(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  unsigned int v4;
  WTF *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  WTF *v12;
  void *v13;
  WTF::StringImpl *v14;
  const WebCore::Style::RuleSet *v15;
  WebCore::Node **v16;
  WebCore::Node **v17;
  WebCore::Node *v18;
  Inspector::InspectorDebuggerAgent **v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::Node *v23;
  WebCore::Node *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::NodeTraversal *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WebCore *v39;
  __int16 v40;
  WTF::StringImpl *v41;
  int v42;
  _BOOL4 v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  const WebCore::Style::RuleSet *v47;
  WebCore::TreeScope *v48;
  uint64_t v49;
  int v50;
  WTF *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  WebCore::Node **v71;
  uint64_t *v72;
  _QWORD *v73;
  WebCore::Event *v74;
  WTF::StringImpl *v75;
  const WebCore::Node *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  WebCore::Node **v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  WebCore::Event *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  _BOOL4 v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  __int16 v100;
  _QWORD *v101;
  WebCore::TreeScope *v102;
  WebCore::Node *v103;
  _BOOL4 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WebCore::WindowProxy *v108;
  WebCore::DOMWrapperWorld *v109;
  WebCore::DOMWrapperWorld **v110;
  WebCore::Document *v111;
  WebCore *v112;
  uint64_t v113;
  WebCore::RenderView *v114;
  WebCore::Node *v115;
  WebCore::Element *RenderingAncestor;
  void *v117;
  uint64_t v118;
  WebCore::RenderView *v119;
  WebCore::Node *v120;
  uint64_t v121;
  WebCore::RenderObject *v122;
  uint64_t v123;
  uint64_t v124;
  WebCore::SVGTextLayoutAttributes **v125;
  uint64_t v126;
  WebCore::RenderObject *v127;
  int v128;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  WebCore::RenderElement *v144;
  void *v145;
  int v146;
  void *v147;
  WTF *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  WebCore::RenderObject *v154;
  WebCore::RenderObject *v155;
  WTF *v156;
  uint64_t v157;
  _BYTE v158[88];
  WTF::StringImpl *v159[2];
  BOOL v160;
  BOOL v161;
  BOOL v162;
  WTF::StringImpl *v163[2];
  __int128 v164;
  uint64_t v165;
  WebCore *v166;
  WebCore::NodeTraversal *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;

  v1 = *(_QWORD *)(this + 80);
  if (!v1)
    return this;
  v2 = this;
  *(_DWORD *)(this + 24) += 2;
  v157 = 11;
  v3 = *(_WORD *)(this + 28);
  v156 = (WTF *)v158;
  if ((v3 & 4) != 0)
  {
    v4 = 0;
    v5 = (WTF *)v158;
    do
    {
      v6 = v4;
      if (v4 == (_DWORD)v157)
      {
        v8 = v4 + 1;
        v9 = v6 + (v6 >> 2);
        if (v9 >= 0x10)
          v10 = v9 + 1;
        else
          v10 = 16;
        if (v10 <= v8)
          v11 = v6 + 1;
        else
          v11 = v10;
        if (v11 < 0xC)
        {
          v156 = (WTF *)v158;
          LODWORD(v157) = 11;
          v12 = (WTF *)v158;
        }
        else
        {
          if (v11 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1942F0F10);
          }
          v12 = (WTF *)WTF::fastMalloc((WTF *)(8 * v11));
          LODWORD(v157) = v11;
          v156 = v12;
        }
        memcpy(v12, v5, 8 * v6);
        if (v158 != (_BYTE *)v5 && v5)
        {
          if (v156 == v5)
          {
            v156 = 0;
            LODWORD(v157) = 0;
          }
          WTF::fastFree(v5, v13);
        }
        v4 = HIDWORD(v157);
        v5 = v156;
        v7 = (_QWORD *)((char *)v156 + 8 * HIDWORD(v157));
      }
      else
      {
        v7 = (_QWORD *)((char *)v5 + 8 * v4);
      }
      *(_DWORD *)(v1 + 24) += 2;
      *v7 = v1;
      HIDWORD(v157) = ++v4;
      v1 = *(_QWORD *)(v1 + 56);
    }
    while (v1);
    v3 = *(_WORD *)(v2 + 28);
  }
  if ((v3 & 0xF200) == 0xB200)
  {
    v64 = WebCore::ScriptDisallowedScope::s_count++;
    if ((*(_QWORD *)(v2 + 72) & 0x3FFFFFFFFFFFFFFLL) != 0
      || (v65 = *(_QWORD *)(v2 + 8)) != 0 && (*(_BYTE *)(v65 + 8) & 3) == 0 && *(_QWORD *)v65)
    {
      __break(0xC471u);
      JUMPOUT(0x1942F0E24);
    }
    v66 = *(_QWORD *)(v2 + 80);
    if (v66)
    {
      do
      {
        *(_DWORD *)(v66 + 24) += 2;
        v67 = *(_QWORD *)(v66 + 56);
        if (v67)
        {
          *(_DWORD *)(v67 + 24) += 2;
          WebCore::ContainerNode::removeBetween((WebCore::ContainerNode *)v2, 0, (WebCore::Node *)v67, (WebCore::Node *)v66);
          if (*(_DWORD *)(v67 + 24) == 2)
          {
            if ((*(_WORD *)(v67 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v67);
          }
          else
          {
            *(_DWORD *)(v67 + 24) -= 2;
          }
        }
        else
        {
          WebCore::ContainerNode::removeBetween((WebCore::ContainerNode *)v2, 0, 0, (WebCore::Node *)v66);
        }
        if (*(_DWORD *)(v66 + 24) == 2)
        {
          if ((*(_WORD *)(v66 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v66);
        }
        else
        {
          *(_DWORD *)(v66 + 24) -= 2;
        }
        v66 = *(_QWORD *)(v2 + 80);
      }
      while (v66);
      v64 = WebCore::ScriptDisallowedScope::s_count - 1;
    }
    v69 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
    *(_QWORD *)(v69 + 1288) = ++WebCore::Document::s_globalTreeVersion;
    WebCore::ScriptDisallowedScope::s_count = v64;
    goto LABEL_285;
  }
  WebCore::ChildListMutationScope::ChildListMutationScope(&v166, (WebCore::ContainerNode *)v2);
  if (HIDWORD(v157))
  {
    v16 = (WebCore::Node **)v156;
    v17 = (WebCore::Node **)((char *)v156 + 8 * HIDWORD(v157));
    while (1)
    {
      v18 = *v16;
      v19 = (Inspector::InspectorDebuggerAgent **)v166;
      if (v166 && *((_QWORD *)v166 + 10))
      {
        v19 = (Inspector::InspectorDebuggerAgent **)WebCore::ChildListMutationAccumulator::willRemoveChild(v166, *v16);
        v18 = *v16;
      }
      v20 = *((_QWORD *)v18 + 5);
      if (*(_BYTE *)(*(_QWORD *)(v20 + 8) + 3364))
      {
        v26 = *((_QWORD *)v18 + 4);
        if (v26)
          break;
      }
LABEL_25:
      v21 = *(_QWORD *)(v20 + 8);
      *(_DWORD *)(v21 + 24) += 2;
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        v53 = *(_QWORD *)(v21 + 528);
        if (v53)
        {
          v54 = *(_QWORD *)(v53 + 8);
          if (v54)
          {
            v55 = *(_QWORD *)(v54 + 24);
            if (v55)
            {
              v56 = *(_QWORD *)(v55 + 8);
              if (v56)
                goto LABEL_90;
            }
          }
        }
        v57 = *(_QWORD *)(v21 + 2632);
        if (v57)
        {
          v58 = *(_QWORD *)(v57 + 8);
          if (v58)
          {
            v59 = *(_QWORD *)(v58 + 528);
            if (v59)
            {
              v60 = *(_QWORD *)(v59 + 8);
              if (v60)
              {
                v61 = *(_QWORD *)(v60 + 24);
                if (v61)
                {
                  v56 = *(_QWORD *)(v61 + 8);
                  if (v56)
                  {
LABEL_90:
                    v19 = *(Inspector::InspectorDebuggerAgent ***)(*(_QWORD *)(*(_QWORD *)(v56 + 80) + 8) + 152);
                    if (v19)
                      v19 = (Inspector::InspectorDebuggerAgent **)WebCore::PageDOMDebuggerAgent::willRemoveDOMNode(v19, v18);
                  }
                }
              }
            }
          }
        }
      }
      v23 = *v16;
      if ((*((_BYTE *)*v16 + 22) & 0x10) != 0 || *(_BYTE *)(v21 + 3268))
        goto LABEL_32;
      if (*((_QWORD *)v23 + 4) && (*(_WORD *)(v21 + 3292) & 4) != 0)
      {
        v80 = v17;
        v81 = WebCore::eventNames((WebCore *)v19);
        v82 = *((_QWORD *)*v16 + 4);
        if (v82)
          *(_DWORD *)(v82 + 24) += 2;
        v83 = (_QWORD *)(v81 + 40);
        v167 = 0;
        v163[0] = 0;
        v84 = (WebCore::Event *)WebCore::MutationEvent::operator new(112);
        WebCore::MutationEvent::MutationEvent((uint64_t)v84, v83, 1, 0, v82, (_DWORD **)&v167, (_DWORD **)v163);
        WebCore::Node::dispatchScopedEvent(v23, v84);
        if (*((_DWORD *)v84 + 4) == 1)
          (*(void (**)(WebCore::Event *))(*(_QWORD *)v84 + 8))(v84);
        else
          --*((_DWORD *)v84 + 4);
        v85 = v163[0];
        v163[0] = 0;
        if (v85)
        {
          if (*(_DWORD *)v85 == 2)
            WTF::StringImpl::destroy(v85, v14);
          else
            *(_DWORD *)v85 -= 2;
        }
        v86 = v167;
        v167 = 0;
        if (v86)
        {
          if (*(_DWORD *)v86 == 2)
            WTF::StringImpl::destroy(v86, v14);
          else
            *(_DWORD *)v86 -= 2;
        }
        v17 = v80;
        if (v82)
        {
          if (*(_DWORD *)(v82 + 24) == 2)
          {
            v17 = v80;
            if ((*(_WORD *)(v82 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v82);
          }
          else
          {
            *(_DWORD *)(v82 + 24) -= 2;
            v17 = v80;
          }
        }
      }
      v24 = *v16;
      if ((*((_BYTE *)*v16 + 22) & 8) == 0 || (*(_WORD *)(v21 + 3292) & 8) == 0)
        goto LABEL_32;
      v71 = v17;
      *((_DWORD *)v24 + 6) += 2;
      v163[0] = 0;
      v167 = v24;
      v72 = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v163);
      do
      {
        v73 = (_QWORD *)(WebCore::eventNames((WebCore *)v72) + 48);
        v163[0] = 0;
        v159[0] = 0;
        v74 = (WebCore::Event *)WebCore::MutationEvent::operator new(112);
        WebCore::MutationEvent::MutationEvent((uint64_t)v74, v73, 0, 0, 0, (_DWORD **)v163, (_DWORD **)v159);
        WebCore::Node::dispatchScopedEvent(v24, v74);
        if (*((_DWORD *)v74 + 4) == 1)
          (*(void (**)(WebCore::Event *))(*(_QWORD *)v74 + 8))(v74);
        else
          --*((_DWORD *)v74 + 4);
        v77 = v159[0];
        v159[0] = 0;
        if (v77)
        {
          if (*(_DWORD *)v77 == 2)
            WTF::StringImpl::destroy(v77, v75);
          else
            *(_DWORD *)v77 -= 2;
        }
        v78 = v163[0];
        v163[0] = 0;
        if (v78)
        {
          if (*(_DWORD *)v78 == 2)
            WTF::StringImpl::destroy(v78, v75);
          else
            *(_DWORD *)v78 -= 2;
        }
        v79 = WebCore::NodeTraversal::next(v167, *v16, v76);
        v72 = WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v167, v79);
        v24 = v167;
      }
      while (v167);
      v17 = v71;
      if (v21)
      {
LABEL_32:
        if (*(_DWORD *)(v21 + 24) == 2)
        {
          if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v21);
        }
        else
        {
          *(_DWORD *)(v21 + 24) -= 2;
        }
      }
      if (++v16 == v17)
        goto LABEL_59;
    }
    while (1)
    {
      if ((*(_QWORD *)(v26 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v25 = *(_QWORD *)((*(_QWORD *)(v26 + 72) & 0xFFFFFFFFFFFFLL) + 8);
        if (v25)
        {
          v27 = *(unsigned int *)(v25 + 12);
          if (!(_DWORD)v27)
            break;
          v87 = *(uint64_t **)v25;
          v88 = 8 * v27;
          do
          {
            v89 = *v87++;
            v19 = (Inspector::InspectorDebuggerAgent **)WebCore::MutationObserverRegistration::observedSubtreeNodeWillDetach(v89, v18);
            v88 -= 8;
          }
          while (v88);
          if ((*(_QWORD *)(v26 + 72) & 0xFFFFFFFFFFFFLL) != 0)
          {
            v25 = *(_QWORD *)((*(_QWORD *)(v26 + 72) & 0xFFFFFFFFFFFFLL) + 8);
            if (v25)
              break;
          }
        }
      }
LABEL_40:
      v26 = *(_QWORD *)(v26 + 32);
      if (!v26)
      {
        v18 = *v16;
        v20 = *((_QWORD *)*v16 + 5);
        goto LABEL_25;
      }
    }
    v30 = *(_QWORD *)(v25 + 16);
    v28 = (WebCore::NodeTraversal *)(v25 + 16);
    v29 = v30;
    if (v30)
    {
      v32 = *(unsigned int *)(v29 - 4);
      v33 = v29 + 8 * v32;
      if (*(_DWORD *)(v29 - 12))
      {
        v31 = v29;
        if ((_DWORD)v32)
        {
          v38 = 8 * v32;
          v31 = v29;
          while ((unint64_t)(*(_QWORD *)v31 + 1) <= 1)
          {
            v31 += 8;
            v38 -= 8;
            if (!v38)
            {
              v31 = v33;
              goto LABEL_46;
            }
          }
        }
        goto LABEL_46;
      }
      v31 = v29 + 8 * v32;
    }
    else
    {
      v31 = 0;
      v32 = 0;
    }
    v33 = v29 + 8 * v32;
LABEL_46:
    v167 = v28;
    v168 = v31;
    v169 = v33;
    if (v29)
    {
      v35 = *(unsigned int *)(v29 - 4);
      v34 = v29 + 8 * v35;
    }
    else
    {
      v34 = 0;
      v35 = 0;
    }
    v170 = v34;
    v171 = v29 + 8 * v35;
    if (v31 != v34)
    {
      v70 = v31;
      while (!*(_QWORD *)(*(_QWORD *)v70 + 8))
      {
        v94 = v70 + 8;
        v168 = v94;
        v70 = v33;
        if (v94 != v33)
        {
          v70 = v94;
          while ((unint64_t)(*(_QWORD *)v70 + 1) <= 1)
          {
            v70 += 8;
            v168 = v70;
            if (v70 == v33)
            {
              v70 = v33;
              break;
            }
          }
        }
        v31 = v34;
        if (v70 == v34)
          goto LABEL_49;
      }
      v31 = v70;
    }
LABEL_49:
    v36 = *(_QWORD *)v28;
    if (v36)
      v37 = v36 + 8 * *(unsigned int *)(v36 - 4);
    else
      v37 = 0;
    while (v31 != v37)
    {
      WebCore::MutationObserverRegistration::observedSubtreeNodeWillDetach(*(_QWORD *)(*(_QWORD *)v31 + 8), v18);
      v19 = (Inspector::InspectorDebuggerAgent **)WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v167);
      v31 = v168;
    }
    goto LABEL_40;
  }
LABEL_59:
  v39 = v166;
  v166 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 1)
    {
      WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v39, v14);
      WTF::fastFree(v51, v52);
    }
    else
    {
      --*(_DWORD *)v39;
    }
  }
  if ((*(_WORD *)(v2 + 78) & 0x3FF) != 0)
    WebCore::disconnectSubframes((WebCore::Node *)v2, 1);
  *(_OWORD *)v163 = 0u;
  v164 = 0u;
  LOBYTE(v163[0]) = 5;
  v165 = 1;
  ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  ++WebCore::ScriptDisallowedScope::s_count;
  v40 = *(_WORD *)(v2 + 28);
  if ((v40 & 8) != 0)
    v41 = (WTF::StringImpl *)v2;
  else
    v41 = 0;
  v159[0] = v41;
  v159[1] = (WTF::StringImpl *)v163;
  if ((v40 & 8) != 0)
  {
    v90 = WebCore::Element::needsStyleInvalidation((WebCore::Element *)v2);
    v160 = v90;
    if (v90)
    {
      v91 = (uint64_t *)*((_QWORD *)v159[0] + 5);
      v92 = *v91;
      if (*v91 && (*(_WORD *)(v92 + 28) & 0x80) != 0)
        v93 = v92 + 216;
      else
        v93 = v91[1] + 1328;
      v43 = *(unsigned __int8 *)(*(_QWORD *)v93 + 236) != 0;
      v42 = 1;
    }
    else
    {
      v42 = 0;
      v43 = 0;
    }
  }
  else
  {
    v42 = 0;
    v43 = 0;
    v160 = 0;
  }
  v161 = v43;
  v162 = *(_QWORD *)(v2 + 80) == 0;
  if (v42 && v43)
    WebCore::Style::ChildChangeInvalidation::invalidateForHasBeforeMutation(v159, (uint64_t)v14, v15);
  if ((*(_WORD *)(v2 + 28) & 0x80) != 0 || (*(_BYTE *)(v2 + 22) & 0x10) != 0)
  {
    v44 = *(_QWORD **)(v2 + 40);
    v62 = *v44;
    if ((*(_WORD *)(*v44 + 28) & 0x80) == 0)
      v62 = 0;
    v63 = *(_QWORD *)(v62 + 224);
    if (v63)
    {
      ++*(_DWORD *)(v63 + 12);
      *(_BYTE *)(v63 + 9) = 1;
    }
  }
  else
  {
    v44 = *(_QWORD **)(v2 + 40);
  }
  v45 = v44[1];
  *(_DWORD *)(v45 + 24) += 2;
  WebCore::Document::nodeChildrenWillBeRemoved((WebCore::Document *)v45, (WebCore::ContainerNode *)v2);
  if (*(_DWORD *)(v45 + 24) == 2)
  {
    if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v45);
  }
  else
  {
    *(_DWORD *)(v45 + 24) -= 2;
  }
  v49 = *(_QWORD *)(v2 + 80);
  if (!v49)
  {
    v68 = 1;
    goto LABEL_280;
  }
  v50 = 0;
  do
  {
    v96 = *(_QWORD *)(v49 + 56);
    *(_DWORD *)(v49 + 24) += 2;
    v97 = *(_WORD *)(v49 + 28);
    if (v96)
      *(_DWORD *)(v96 + 24) += 2;
    v98 = *(_QWORD *)(*(_QWORD *)(v49 + 40) + 8);
    *(_DWORD *)(v98 + 24) += 2;
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v130 = *(_QWORD *)(v98 + 528);
      if (v130)
      {
        v131 = *(_QWORD *)(v130 + 8);
        if (v131)
        {
          v132 = *(_QWORD *)(v131 + 24);
          if (v132)
          {
            v133 = *(_QWORD *)(v132 + 8);
            if (v133)
              goto LABEL_261;
          }
        }
      }
      v139 = *(_QWORD *)(v98 + 2632);
      if (v139)
      {
        v140 = *(_QWORD *)(v139 + 8);
        if (v140)
        {
          v141 = *(_QWORD *)(v140 + 528);
          if (v141)
          {
            v142 = *(_QWORD *)(v141 + 8);
            if (v142)
            {
              v143 = *(_QWORD *)(v142 + 24);
              if (v143)
              {
                v133 = *(_QWORD *)(v143 + 8);
                if (v133)
                {
LABEL_261:
                  v134 = *(_QWORD *)(*(_QWORD *)(v133 + 80) + 8);
                  v135 = *(uint64_t **)(v134 + 152);
                  if (v135)
                  {
                    v167 = (WebCore::NodeTraversal *)v49;
                    v153 = v134;
                    v154 = (WebCore::RenderObject *)v135;
                    WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>(v135 + 21, (WTF::StringImpl *)&v167);
                    WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>((uint64_t *)v154 + 22, (WTF::StringImpl *)&v167);
                    WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>((uint64_t *)v154 + 23, (WTF::StringImpl *)&v167);
                    v134 = v153;
                  }
                  v136 = *(uint64_t **)(v134 + 40);
                  if (v136)
                    WebCore::InspectorDOMAgent::didRemoveDOMNode(v136, (WebCore::Node *)v49);
                }
              }
            }
          }
        }
      }
    }
    if (*(_DWORD *)(v98 + 24) == 2)
    {
      if ((*(_WORD *)(v98 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v98);
    }
    else
    {
      *(_DWORD *)(v98 + 24) -= 2;
    }
    ++WebCore::ScriptDisallowedScope::s_count;
    v100 = *(_WORD *)(v49 + 28);
    if ((*(_QWORD *)(v49 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((v100 & 8) == 0)
      {
        if ((v100 & 2) == 0)
          goto LABEL_199;
        v119 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(v49 + 40) + 8) + 1944);
        if (!v119)
          goto LABEL_199;
        WebCore::RenderTreeBuilder::RenderTreeBuilder((WebCore::RenderTreeBuilder *)&v167, v119);
        v121 = *(_QWORD *)(v49 + 64);
        v122 = (WebCore::RenderObject *)(v121 & 0xFFFFFFFFFFFFLL);
        if ((v121 & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_BYTE *)((v121 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1942F15A8);
          }
          WebCore::RenderObject::repaint((uint64_t)v122, 0);
          v126 = *((_QWORD *)v122 + 4);
          if (v126)
          {
            v127 = *(WebCore::RenderObject **)(v126 + 8);
            if (v127)
            {
              v128 = *((_DWORD *)v127 + 5);
              if ((v128 & 0x20) == 0)
              {
                *((_DWORD *)v127 + 5) = v128 | 0x20;
                v155 = v127;
                v144 = WebCore::RenderObject::markContainingBlocksForLayout(v127, 0);
                WebCore::RenderObject::scheduleLayout(v155, v144);
                v127 = v155;
              }
              WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)v127, 1, 1);
            }
          }
          WebCore::RenderTreeBuilder::destroyAndCleanUpAnonymousWrappers((WebCore::RenderTreeBuilder *)&v167, v122, 0, v123, v124, v125);
          *(_QWORD *)(v49 + 64) = (unint64_t)*(unsigned __int16 *)(v49 + 70) << 48;
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
            WebCore::Node::notifyInspectorOfRendererChange((WebCore::Node *)v49);
        }
        RenderingAncestor = (WebCore::Element *)WebCore::findRenderingAncestor((WebCore *)v49, v120);
        if (!RenderingAncestor)
          goto LABEL_239;
        v118 = *((_QWORD *)RenderingAncestor + 8) & 0xFFFFFFFFFFFFLL;
        if (v118 && (*(_BYTE *)((*((_QWORD *)RenderingAncestor + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1942F1588);
        }
        goto LABEL_237;
      }
      if ((*(_BYTE *)((*(_QWORD *)(v49 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942F1514);
      }
    }
    else
    {
      if ((v100 & 8) == 0)
        goto LABEL_199;
      if ((*(_QWORD *)(v49 + 72) & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_199;
      v113 = *(_QWORD *)((*(_QWORD *)(v49 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
      if (!v113 || (*(_QWORD *)(v113 + 16) & 0x1FLL) != 0x12)
        goto LABEL_199;
    }
    v114 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(v49 + 40) + 8) + 1944);
    if (v114)
    {
      WebCore::RenderTreeBuilder::RenderTreeBuilder((WebCore::RenderTreeBuilder *)&v167, v114);
      WebCore::RenderTreeUpdater::tearDownRenderers(v49, 0);
      RenderingAncestor = (WebCore::Element *)WebCore::findRenderingAncestor((WebCore *)v49, v115);
      if (!RenderingAncestor)
      {
LABEL_239:
        WebCore::RenderTreeBuilder::~RenderTreeBuilder((WebCore::RenderTreeBuilder *)&v167, v117);
        goto LABEL_199;
      }
      v118 = *((_QWORD *)RenderingAncestor + 8) & 0xFFFFFFFFFFFFLL;
      if (v118 && (*(_BYTE *)((*((_QWORD *)RenderingAncestor + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942F1548);
      }
LABEL_237:
      if ((*(_QWORD *)(v118 + 96) & 0x1ELL) == 0x16)
        WebCore::Element::invalidateRenderer(RenderingAncestor);
      goto LABEL_239;
    }
LABEL_199:
    if ((*(_BYTE *)(v2 + 23) & 0x10) != 0)
    {
      v137 = (*(_WORD *)(v2 + 28) & 8) != 0 && (*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) != 0
           ? *(_QWORD *)((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)
           : 0;
      v138 = *(_QWORD *)(v137 + 224);
      if (v138)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v138 + 96))(v138, v49);
    }
    v101 = (_QWORD *)(v2 + 88);
    if (v96)
    {
      *(_QWORD *)(v96 + 48) = (unint64_t)*(unsigned __int16 *)(v96 + 54) << 48;
      v101 = (_QWORD *)(v49 + 56);
    }
    *v101 = 0;
    *(_QWORD *)(v2 + 80) = v96;
    *(_QWORD *)(v49 + 32) = 0;
    *(_DWORD *)(v49 + 24) &= ~1u;
    v102 = (WebCore::TreeScope *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 96);
    v103 = *(WebCore::Node **)(v49 + 40);
    if (v103 != v102)
      WebCore::Node::moveTreeToNewScope((WebCore::Node *)v49, v103, v102, v48);
    --WebCore::ScriptDisallowedScope::s_count;
    if (v96)
    {
      if (*(_DWORD *)(v96 + 24) == 2)
      {
        if ((*(_WORD *)(v96 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v96);
      }
      else
      {
        *(_DWORD *)(v96 + 24) -= 2;
      }
    }
    v104 = (*(_BYTE *)(v2 + 22) & 0x18) == 0;
    if ((*(_BYTE *)(v49 + 22) & 8) != 0)
    {
      if (!WebCore::notifyNodeRemovedFromDocument(v2, v104, v49))
        goto LABEL_188;
    }
    else if (!WebCore::notifyNodeRemovedFromTree(v2, v104, v49))
    {
      goto LABEL_188;
    }
    v105 = *(_QWORD *)(v49 + 8);
    if (v105 && (*(_BYTE *)(v105 + 8) & 3) == 0 && *(_QWORD *)v105
      || (*(_WORD *)(v49 + 28) & 4) == 0
      || !*(_QWORD *)(v49 + 80)
      || (v106 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 40) + 8) + 528)) == 0
      || (v107 = *(_QWORD *)(v106 + 8)) == 0)
    {
LABEL_188:
      v95 = *(_DWORD *)(v49 + 24) - 2;
      if (*(_DWORD *)(v49 + 24) != 2)
        goto LABEL_189;
      goto LABEL_222;
    }
    v108 = *(WebCore::WindowProxy **)(v107 + 112);
    {
      v109 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
    }
    else
    {
      v152 = WebCore::g_commonVMOrNull;
      if (!WebCore::g_commonVMOrNull)
        v152 = WebCore::commonVMSlow(0);
      v109 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v152 + 41456) + 16);
      WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v109;
    }
    v110 = *(WebCore::DOMWrapperWorld ***)(WebCore::WindowProxy::jsWindowProxy(v108, v109) + 16);
    JSC::JSLockHolder::JSLockHolder();
    *(_DWORD *)(v49 + 24) += 2;
    v166 = (WebCore *)v49;
    WebCore::createWrapper(v110, (JSC::VM *)v110, (WebCore::JSDOMGlobalObject *)&v166, v111);
    v112 = v166;
    v166 = 0;
    if (v112)
    {
      if (*((_DWORD *)v112 + 6) == 2)
      {
        if ((*((_WORD *)v112 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v112);
      }
      else
      {
        *((_DWORD *)v112 + 6) -= 2;
      }
    }
    MEMORY[0x19AEA32A0](&v167);
    v95 = *(_DWORD *)(v49 + 24) - 2;
    if (*(_DWORD *)(v49 + 24) != 2)
    {
LABEL_189:
      *(_DWORD *)(v49 + 24) = v95;
      goto LABEL_190;
    }
LABEL_222:
    if ((*(_WORD *)(v49 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v49);
LABEL_190:
    v50 |= (v97 & 8) >> 3;
    v49 = *(_QWORD *)(v2 + 80);
  }
  while (v49);
  if ((v50 & 1) != 0)
    v68 = 2;
  else
    v68 = 1;
LABEL_280:
  BYTE1(v165) = v68;
  if (v160)
  {
    if (v161)
      WebCore::Style::ChildChangeInvalidation::invalidateForHasAfterMutation(v159, v46, v47);
    WebCore::Style::ChildChangeInvalidation::invalidateAfterChange((uint64_t)v159);
  }
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v2 + 376))(v2, v163);
  --WebCore::ScriptDisallowedScope::s_count;
  v146 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
    && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
  {
    WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)&v167, v145);
    v146 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  }
  WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v146 - 1;
LABEL_285:
  WebCore::ContainerNode::rebuildSVGExtensionsElementsIfNecessary((_QWORD *)v2);
  WebCore::Node::dispatchSubtreeModifiedEvent(v2);
  if (HIDWORD(v157))
  {
    v149 = v156;
    v150 = 8 * HIDWORD(v157);
    do
    {
      v151 = *(_QWORD *)v149;
      *(_QWORD *)v149 = 0;
      if (v151)
      {
        if (*(_DWORD *)(v151 + 24) == 2)
        {
          if ((*(_WORD *)(v151 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v151);
        }
        else
        {
          *(_DWORD *)(v151 + 24) -= 2;
        }
      }
      v149 = (WTF *)((char *)v149 + 8);
      v150 -= 8;
    }
    while (v150);
  }
  this = (uint64_t)v156;
  if (v158 != (_BYTE *)v156 && v156 != 0)
    this = WTF::fastFree(v156, v147);
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return this;
}

BOOL WebCore::notifyNodeRemovedFromDocument(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a3;
  v5 = 0;
  *(_DWORD *)(a3 + 24) += 2;
  if (a2)
    v6 = 1;
  else
    v6 = 257;
  do
  {
    v7 = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 288))(v3, v6, a1);
    if (*(_QWORD *)(v3 + 32))
      v8 = *(_DWORD *)(v3 + 24) > 3u;
    else
      v8 = 0;
    if (v8)
      v5 = 1;
    if ((*(_WORD *)(v3 + 28) & 8) != 0 && (*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v10 = *(_QWORD *)((*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
      if (v10)
      {
        *(_DWORD *)(v10 + 24) += 2;
        if (WebCore::notifyNodeRemovedFromDocument(a1, 1, v10))
          v5 = 1;
        if (*(_DWORD *)(v10 + 24) != 2)
        {
          *(_DWORD *)(v10 + 24) -= 2;
          if ((*(_WORD *)(v7 + 28) & 4) == 0)
            goto LABEL_14;
          goto LABEL_13;
        }
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10);
      }
    }
    if ((*(_WORD *)(v7 + 28) & 4) == 0)
      goto LABEL_14;
LABEL_13:
    v3 = *(_QWORD *)(v7 + 80);
    if (v3)
      goto LABEL_15;
LABEL_14:
    v3 = *(_QWORD *)(v7 + 56);
    if (v3)
    {
LABEL_15:
      *(_DWORD *)(v3 + 24) += 2;
      goto LABEL_16;
    }
    v9 = v7;
    while (1)
    {
      v9 = *(_QWORD *)(v9 + 32);
      if (!v9)
        break;
      v3 = *(_QWORD *)(v9 + 56);
      if (v3)
        goto LABEL_15;
    }
    v3 = 0;
LABEL_16:
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  while (v3);
  return v5 != 0;
}

uint64_t *WebCore::HTMLElement::removedFromAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t *result;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 v21;
  _BYTE v22[24];

  if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0xE8))
  {
    v21 = a2;
    v8 = a3;
    WebCore::HTMLElement::hidePopoverInternal(a1, 0, 0, (uint64_t)v22);
    WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v22, v9);
    a2 = v21;
    a3 = v8;
  }
  result = WebCore::Element::removedFromAncestor((WebCore::Element *)a1, (void *)a2, a3, a4, a5);
  v7 = *(_QWORD *)(a1 + 72);
  if ((v7 & 0x4000000000000000) == 0)
    return result;
  v10 = *(_QWORD *)(a1 + 104);
  if (v10
    && ((v11 = *(_DWORD *)(v10 + 4), (v11 & 1) != 0)
      ? (v12 = *(_QWORD *)(v10 + 40), LODWORD(v13) = *(_DWORD *)(v10 + 52))
      : (v12 = v10 + 32, LODWORD(v13) = v11 >> 5),
        (_DWORD)v13))
  {
    v13 = v13;
    v14 = (_BOOL8 *)(v12 + 8);
    while (1)
    {
      v15 = *(v14 - 1);
      if (v15 == WebCore::HTMLNames::dirAttr
        || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 24)
        && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 32))
      {
        break;
      }
      v14 += 2;
      if (!--v13)
      {
        v14 = (_BOOL8 *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v14 = (_BOOL8 *)MEMORY[0x1E0CBF2F8];
  }
  result = (uint64_t *)WebCore::isValidDirValue(*v14);
  if ((result & 1) != 0)
    return result;
  if (a1 && (*(_WORD *)(a1 + 28) & 0x80) != 0)
  {
    v19 = *(_QWORD *)(a1 + 200);
    if (!v19)
      goto LABEL_23;
    v16 = (uint64_t *)(v19 + 8);
  }
  else
  {
    v16 = (uint64_t *)(a1 + 32);
  }
  v17 = *v16;
  if (!v17)
    goto LABEL_23;
  v18 = *(_WORD *)(v17 + 28);
  if ((v18 & 0x80) == 0)
  {
    if ((v18 & 8) != 0)
      goto LABEL_22;
LABEL_23:
    *(_QWORD *)(a1 + 72) = v7 & 0xBFFFFFFFFFFFFFFFLL;
    return result;
  }
  v20 = *(_QWORD *)(v17 + 200);
  if (!v20)
    goto LABEL_23;
  v17 = *(_QWORD *)(v20 + 8);
  if (!v17)
    goto LABEL_23;
LABEL_22:
  if ((*(_BYTE *)(v17 + 79) & 0x40) == 0)
    goto LABEL_23;
  return result;
}

uint64_t *WebCore::Element::removedFromAncestor(WebCore::Element *this, void *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  __int16 v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  WebCore::PointerCaptureController::CapturingData *v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  const WTF::AtomString *v20;
  uint64_t v21;
  unsigned int v22;
  const WTF::AtomString *v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::Element *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD **Attribute;
  _DWORD *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WebCore::Element *v34;
  WebCore::TreeScopeOrderedMap *v35;
  uint64_t v36;
  WebCore::TreeScopeOrderedMap *v37;
  int v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF *v44;
  void *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  WebCore::FullscreenManager *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  void *v68;
  WebCore::FullscreenManager *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  WebCore::PseudoElement *v73;
  WebCore::PseudoElement *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  WebCore::AXObjectCache *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  WebCore::Element *v95;
  int v96;
  WTF::StringImpl *v97;
  char v98;

  v6 = (__int16)a2;
  v8 = *((_QWORD *)this + 2);
  if ((a2 & 1) != 0)
  {
    v8 &= ~0x8000000000000uLL;
    *((_QWORD *)this + 2) = v8;
  }
  if ((v8 & 0x10000000000000) != 0 && (*(_WORD *)(**((_QWORD **)this + 5) + 28) & 0x80) == 0)
    *((_QWORD *)this + 2) = v8 & 0xFFEFFFFFFFFFFFFFLL;
  if ((a2 & 1) != 0 && WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v75 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8);
    if (*(_BYTE *)(v75 + 3362) || *(_BYTE *)(v75 + 3405))
    {
      while (1)
      {
        v85 = *(_QWORD *)(v75 + 528);
        if (!v85)
          break;
        v86 = *(_QWORD *)(v85 + 8);
        if (!v86)
          break;
        v87 = *(_QWORD *)(v86 + 120);
        if (!v87)
          break;
        v88 = *(_QWORD *)(v87 + 8);
        if (!v88)
          break;
        v75 = *(_QWORD *)(*(_QWORD *)(v88 + 40) + 8);
      }
    }
    else
    {
      v76 = *(_QWORD *)(v75 + 528);
      if (v76)
      {
        v77 = *(_QWORD *)(v76 + 8);
        if (v77)
        {
          v78 = *(_QWORD *)(*(_QWORD *)(v77 + 128) + 8);
          if (v78 && *(_BYTE *)(v78 + 144) == 0)
          {
            v80 = *(_QWORD *)(v78 + 296);
            if (v80)
              v75 = v80;
          }
        }
      }
    }
    v81 = *(WebCore::AXObjectCache **)(v75 + 1488);
    if (v81)
    {
      ++*((_DWORD *)v81 + 2);
      WebCore::AXObjectCache::remove(v81, this);
      v82 = *((_DWORD *)v81 + 2);
      if (!v82)
        goto LABEL_211;
      *((_DWORD *)v81 + 2) = v82 - 1;
    }
  }
  v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!v9
    || (v10 = *(_QWORD *)(v9 + 8)) == 0
    || (v11 = *(_QWORD *)(v10 + 24)) == 0
    || (v12 = *(_QWORD *)(v11 + 8)) == 0)
  {
LABEL_14:
    if ((v6 & 0x100) == 0)
      goto LABEL_31;
    goto LABEL_15;
  }
  v13 = *(_DWORD *)v12 + 1;
  *(_DWORD *)v12 = v13;
  v14 = *(WebCore::PointerCaptureController::CapturingData **)(v12 + 88);
  if (*((_BYTE *)v14 + 17))
  {
    WebCore::PointerCaptureController::elementWasRemovedSlow(v14, this);
    v13 = *(_DWORD *)v12;
  }
  v15 = v13 - 1;
  if (v15)
  {
    *(_DWORD *)v12 = v15;
    goto LABEL_14;
  }
  WebCore::Page::~Page(v12);
  WTF::fastFree(v44, v45);
  if ((v6 & 0x100) == 0)
    goto LABEL_31;
LABEL_15:
  v16 = *(_QWORD **)(a3 + 40);
  if ((v6 & 1) != 0
    && (*(_QWORD *)(a3 + 16) & 0x18000000000000) == 0x8000000000000
    && (v17 = v16[1], (*(_WORD *)(v17 + 3358) & 1) != 0))
  {
    v18 = 0;
    *(_DWORD *)(v17 + 24) += 2;
  }
  else
  {
    v17 = 0;
    v18 = 1;
  }
  v19 = *((_QWORD *)this + 13);
  if (v19 && *(_QWORD *)(v19 + 24))
  {
    v50 = *(_DWORD *)(v19 + 4);
    if ((v50 & 1) != 0)
    {
      v51 = *(uint64_t **)(v19 + 40);
      LODWORD(v52) = *(_DWORD *)(v19 + 52);
    }
    else
    {
      v51 = (uint64_t *)(v19 + 32);
      LODWORD(v52) = v50 >> 5;
    }
    if ((_DWORD)v52)
    {
      v52 = v52;
      while (1)
      {
        v54 = *v51;
        if (*v51 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v54 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v54 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v51 += 2;
        if (!--v52)
          goto LABEL_117;
      }
    }
    else
    {
LABEL_117:
      v51 = 0;
    }
    v20 = (const WTF::AtomString *)(v51 + 1);
  }
  else
  {
    v20 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
  }
  if (*(_QWORD *)v20 && *(_DWORD *)(*(_QWORD *)v20 + 4))
  {
    v35 = (WebCore::TreeScopeOrderedMap *)v16[3];
    if (v35)
    {
      WebCore::TreeScopeOrderedMap::remove(v35, v20, this);
      v36 = v16[8];
      if (v36)
      {
        v64 = *(_QWORD *)(v36 + 8);
        if (v64)
        {
          if (*(_DWORD *)(v64 - 12))
            WebCore::IdTargetObserverRegistry::notifyObserversInternal((WTF::StringImpl **)v36, v20);
        }
      }
    }
    if (v17)
      WebCore::Element::updateIdForDocument(this, v17, v20, MEMORY[0x1E0CBF2F8], 0);
  }
  v21 = *((_QWORD *)this + 13);
  if (v21 && (v22 = *(_DWORD *)(v21 + 4), (v22 & 2) != 0))
  {
    if ((v22 & 1) != 0)
    {
      v56 = *(uint64_t **)(v21 + 40);
      LODWORD(v57) = *(_DWORD *)(v21 + 52);
    }
    else
    {
      v56 = (uint64_t *)(v21 + 32);
      LODWORD(v57) = v22 >> 5;
    }
    if ((_DWORD)v57)
    {
      v57 = v57;
      while (1)
      {
        v63 = *v56;
        if (*v56 == WebCore::HTMLNames::nameAttr
          || *(_QWORD *)(v63 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
          && *(_QWORD *)(v63 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
        {
          break;
        }
        v56 += 2;
        if (!--v57)
          goto LABEL_145;
      }
    }
    else
    {
LABEL_145:
      v56 = 0;
    }
    v23 = (const WTF::AtomString *)(v56 + 1);
  }
  else
  {
    v23 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
  }
  if (!*(_QWORD *)v23 || !*(_DWORD *)(*(_QWORD *)v23 + 4))
    goto LABEL_28;
  v37 = (WebCore::TreeScopeOrderedMap *)v16[4];
  if (!v37)
  {
    if (!v17)
      goto LABEL_28;
    goto LABEL_69;
  }
  WebCore::TreeScopeOrderedMap::remove(v37, v23, this);
  if (v17)
LABEL_69:
    WebCore::Element::updateNameForDocument(this, (WebCore::HTMLDocument *)v17, v23, MEMORY[0x1E0CBF2F8]);
LABEL_28:
  if ((v18 & 1) == 0)
  {
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v17, a2);
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
  }
LABEL_31:
  if ((v6 & 1) == 0)
    goto LABEL_43;
  v24 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8);
  *(_DWORD *)(v24 + 24) += 2;
  v25 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (!v25)
    goto LABEL_33;
  if (*(_DWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x90) != -64
    || *(_DWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x94) != -64)
  {
    WebCore::Document::observeForContainIntrinsicSize((WebCore::Document *)v24, this);
    v89 = *(_QWORD *)(v24 + 3456);
    if (!v89)
      goto LABEL_209;
    ++*(_DWORD *)v89;
    v90 = *(unsigned int *)(v89 + 52);
    if (!(_DWORD)v90)
    {
LABEL_208:
      WTF::RefCounted<WebCore::ResizeObserver>::deref((WebCore::ResizeObserver *)v89, a2);
LABEL_209:
      v25 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
      if (!v25)
        goto LABEL_33;
      goto LABEL_159;
    }
    v91 = 0;
    while (1)
    {
      v92 = *(_QWORD *)(*(_QWORD *)(v89 + 40) + 8 * v91);
      v93 = *(_QWORD *)(v92 + 8);
      if (v93)
      {
        if (*(WebCore::Element **)(v93 + 8) == this)
          break;
      }
      if (v90 == ++v91)
        goto LABEL_208;
    }
    if (v91 < v90)
    {
      *(_QWORD *)&v94 = 0x3F0000003FLL;
      *((_QWORD *)&v94 + 1) = 0x3F0000003FLL;
      *(_OWORD *)(v92 + 16) = v94;
      *(_QWORD *)(v92 + 32) = 0x3F0000003FLL;
      goto LABEL_208;
    }
LABEL_211:
    __break(0xC471u);
    JUMPOUT(0x1942F21E8);
  }
LABEL_159:
  *(_QWORD *)(v25 + 36) = 0;
  v72 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (v72)
  {
    v73 = *(WebCore::PseudoElement **)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xA8);
    if (v73)
    {
      WebCore::PseudoElement::clearHostElement(v73, (WebCore::Page *)a2);
      v72 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
      v83 = *(_QWORD *)(v72 + 0xA8);
      *(_QWORD *)(v72 + 0xA8) = 0;
      if (v83)
      {
        if (*(_DWORD *)(v83 + 24) == 2)
        {
          if ((*(_WORD *)(v83 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v83, a2);
            v72 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
          }
        }
        else
        {
          *(_DWORD *)(v83 + 24) -= 2;
        }
      }
      if (!v72)
        goto LABEL_33;
    }
    else
    {
      *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xA8) = 0;
    }
    v74 = *(WebCore::PseudoElement **)(v72 + 176);
    if (v74)
    {
      WebCore::PseudoElement::clearHostElement(v74, (WebCore::Page *)a2);
      v84 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xB0);
      *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xB0) = 0;
      if (v84)
      {
        if (*(_DWORD *)(v84 + 24) == 2)
        {
          if ((*(_WORD *)(v84 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v84, a2);
        }
        else
        {
          *(_DWORD *)(v84 + 24) -= 2;
        }
      }
    }
    else
    {
      *(_QWORD *)(v72 + 176) = 0;
    }
  }
LABEL_33:
  if ((*((_BYTE *)this + 54) & 0x40) != 0)
  {
    v58 = *(WebCore::FullscreenManager **)(v24 + 1992);
    if (!v58)
    {
      v65 = WTF::fastMalloc((WTF *)0x90);
      *(_QWORD *)v65 = 0;
      *(_DWORD *)(v65 + 8) = 0;
      v66 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v24);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 + 1, v66));
      *(_QWORD *)(v65 + 24) = 0;
      *(_QWORD *)(v65 + 32) = 0;
      *(_QWORD *)(v65 + 16) = v66;
      *(_BYTE *)(v65 + 40) = 0;
      *(_OWORD *)(v65 + 48) = 0u;
      *(_OWORD *)(v65 + 64) = 0u;
      *(_OWORD *)(v65 + 80) = 0u;
      *(_OWORD *)(v65 + 96) = 0u;
      *(_OWORD *)(v65 + 112) = 0u;
      *(_DWORD *)(v65 + 127) = 0;
      *(_QWORD *)(v65 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
      v69 = *(WebCore::FullscreenManager **)(v24 + 1992);
      *(_QWORD *)(v24 + 1992) = v65;
      if (v69)
      {
        WebCore::FullscreenManager::~FullscreenManager(v69, v68);
        if (*(_DWORD *)(v70 + 8))
        {
          *(_OWORD *)(v70 + 112) = 0u;
          *(_OWORD *)(v70 + 128) = 0u;
          *(_OWORD *)(v70 + 80) = 0u;
          *(_OWORD *)(v70 + 96) = 0u;
          *(_OWORD *)(v70 + 48) = 0u;
          *(_OWORD *)(v70 + 64) = 0u;
          *(_OWORD *)(v70 + 16) = 0u;
          *(_OWORD *)(v70 + 32) = 0u;
          *(_OWORD *)v70 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v70, v71);
        }
      }
      v58 = *(WebCore::FullscreenManager **)(v24 + 1992);
    }
    WebCore::FullscreenManager::exitRemovedFullscreenElement(v58, this);
  }
  if ((*((_BYTE *)this + 23) & 0x20) != 0)
    WebCore::Element::removeFromTopLayer(this);
  v26 = *(WebCore::Element **)(v24 + 1568);
  if (v26)
    v26 = (WebCore::Element *)*((_QWORD *)v26 + 1);
  if (v26 == this)
    WebCore::Document::setCSSTarget(v24, 0);
  v27 = *((_QWORD *)this + 9);
  if ((v27 & 0x3000000000000000) == 0x2000000000000000
    && !*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3448))
  {
    v59 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFLL) + 0x60);
    v60 = *(_QWORD *)(*(_QWORD *)(v59 + 8) + 48);
    if (v60)
    {
      if (*(_QWORD *)v60 && (*(_BYTE *)(v60 + 8) & 3) == 0)
      {
        LOBYTE(v95) = 3;
        v61 = *(_DWORD *)(v59 + 28);
        if (v61 == *(_DWORD *)(v59 + 24))
        {
          WTF::Vector<WebCore::CustomElementReactionQueueItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CustomElementReactionQueueItem::Type>(v59 + 16, &v95);
        }
        else
        {
          v62 = (_BYTE *)(*(_QWORD *)(v59 + 16) + 56 * v61);
          *v62 = 3;
          v62[8] = 0;
          v62[48] = 0;
          ++*(_DWORD *)(v59 + 28);
        }
        WebCore::CustomElementReactionQueue::enqueueElementOnAppropriateElementQueue(this, (WebCore::Element *)a2);
      }
    }
  }
  if (*(_DWORD *)(v24 + 24) == 2)
  {
    if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v24, a2);
  }
  else
  {
    *(_DWORD *)(v24 + 24) -= 2;
  }
LABEL_43:
  if (!*((_QWORD *)this + 4))
  {
    if ((*(_WORD *)(a3 + 28) & 8) != 0 && (*(_QWORD *)(a3 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v46 = *(_QWORD *)((*(_QWORD *)(a3 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
      if (v46)
      {
        v47 = *(_DWORD *)(v46 + 24) + 2;
        *(_DWORD *)(v46 + 24) = v47;
        v48 = *(_QWORD *)(v46 + 224);
        if (v48)
        {
          (*(void (**)(uint64_t, WebCore::Element *, uint64_t))(*(_QWORD *)v48 + 80))(v48, this, v46);
          v47 = *(_DWORD *)(v46 + 24);
        }
        v49 = v47 - 2;
        if (v49)
        {
          *(_DWORD *)(v46 + 24) = v49;
        }
        else if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v46, a2);
        }
      }
    }
    if (!*((_QWORD *)this + 4) && (*(_WORD *)(a3 + 28) & 0xF000) == 0x9000)
    {
      v28 = *((_QWORD *)this + 2);
      if ((v28 & 0x400000000000000) != 0)
      {
        v55 = &WebCore::XMLNames::langAttr;
      }
      else
      {
        if ((v28 & 0x200000000000000) == 0)
        {
          Attribute = (_DWORD **)MEMORY[0x1E0CBF2F8];
          goto LABEL_51;
        }
        v55 = &WebCore::HTMLNames::langAttr;
      }
      Attribute = (_DWORD **)WebCore::Element::getAttribute(this, (const WebCore::QualifiedName *)v55, a3, a4, a5);
LABEL_51:
      v30 = *Attribute;
      v31 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
      if (*Attribute || v31)
      {
        if (!v31)
        {
          WebCore::Node::materializeRareData(this);
          v31 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
          v30 = *Attribute;
        }
        if (v30)
          *v30 += 2;
        v53 = *(WTF::StringImpl **)(v31 + 64);
        *(_QWORD *)(v31 + 64) = v30;
        if (v53)
        {
          if (*(_DWORD *)v53 == 2)
            WTF::StringImpl::destroy(v53, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v53 -= 2;
        }
      }
      WebCore::Document::setDocumentElementLanguage(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8), MEMORY[0x1E0CBF2F8], a3, a4);
      goto LABEL_56;
    }
  }
  if ((*((_BYTE *)this + 23) & 6) == 0)
    WebCore::Element::updateEffectiveLangStateFromParent((unsigned int *)this, a2);
LABEL_56:
  if ((~*((unsigned __int16 *)this + 14) & 0x408) != 0
    || !(*(unsigned int (**)(WebCore::Element *))(*(_QWORD *)this + 368))(this))
  {
    v95 = this;
    LOBYTE(v96) = 0;
    v98 = 0;
  }
  else
  {
    v33 = *((_QWORD *)this + 14);
    if (v33)
      v34 = *(WebCore::Element **)(v33 + 8);
    else
      v34 = 0;
    if ((~*((unsigned __int16 *)this + 14) & 0x408) != 0)
      v38 = 0;
    else
      v38 = (*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)this + 368))(this);
    v39 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
    {
      v40 = *(_DWORD *)v39;
      v95 = v34;
      v96 = v38;
      *(_DWORD *)v39 = v40 + 4;
      v97 = v39;
      v98 = 1;
      if (v40 == -2)
        WTF::StringImpl::destroy(v39, v32);
      else
        *(_DWORD *)v39 = v40 + 2;
    }
    else
    {
      v95 = v34;
      v96 = v38;
      v97 = 0;
      v98 = 1;
    }
  }
  WebCore::Styleable::elementWasRemoved((WebCore::Styleable *)&v95);
  if (v98)
  {
    v42 = v97;
    v97 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v41);
      else
        *(_DWORD *)v42 -= 2;
    }
  }
  return WebCore::UserActionElementSet::clearFlags((uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1280), (uint64_t)this, 127);
}

_QWORD *WebCore::Styleable::elementWasRemoved(WebCore::Styleable *this)
{
  _QWORD *result;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF *v31;
  uint64_t v32;
  WebCore::Animation **v33;
  uint64_t v34;
  WebCore::Animation *v35;
  WTF *v36;
  WTF *v37;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  void *v45;
  WTF *v46;
  void *v47;
  WTF *v48;
  _DWORD *v49;
  uint64_t v50;
  WTF *v51;

  v3 = (char *)this + 8;
  result = *(_QWORD **)this;
  v4 = result[9] & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    v5 = *(unsigned int *)((result[9] & 0xFFFFFFFFFFFFLL) + 0xA4);
    if (!(_DWORD)v5)
      goto LABEL_4;
    v14 = *(uint64_t **)((result[9] & 0xFFFFFFFFFFFFLL) + 0x98);
    if (*((_BYTE *)this + 24))
    {
      v15 = 8 * v5;
      while (1)
      {
        v16 = *v14;
        if (*(_BYTE *)(*v14 + 96))
        {
          if (*(_DWORD *)(v16 + 80) == *((_DWORD *)this + 2) && *(_QWORD *)(v16 + 88) == *((_QWORD *)this + 2))
            break;
        }
        ++v14;
        v15 -= 8;
        if (!v15)
          goto LABEL_45;
      }
    }
    else
    {
      v26 = 8 * v5;
      while (1)
      {
        v16 = *v14;
        if (!*(_BYTE *)(*v14 + 96))
          break;
        ++v14;
        v26 -= 8;
        if (!v26)
          goto LABEL_45;
      }
    }
    v27 = *(_QWORD **)(v16 + 24);
    if (v27)
    {
      do
      {
        v39 = (_QWORD *)*v27;
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v27 + 104))(*v27))
        {
          WebCore::StyleOriginatedAnimation::cancel(v39, 0);
          WebCore::StyleOriginatedAnimation::disassociateFromOwningElement((uint64_t)v39);
          v51 = 0;
          if ((*(_QWORD *)(*(_QWORD *)this + 72) & 0xFFFFFFFFFFFFLL) != 0)
          {
            v40 = *(unsigned int *)((*(_QWORD *)(*(_QWORD *)this + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
            if ((_DWORD)v40)
            {
              v41 = *(uint64_t **)((*(_QWORD *)(*(_QWORD *)this + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
              v42 = 8 * v40;
              if (*((_BYTE *)this + 24))
              {
                while (1)
                {
                  v43 = *v41;
                  if (*(_BYTE *)(*v41 + 96))
                  {
                    if (*(_DWORD *)(v43 + 80) == *((_DWORD *)this + 2)
                      && *(_QWORD *)(v43 + 88) == *((_QWORD *)this + 2))
                    {
                      break;
                    }
                  }
                  ++v41;
                  v42 -= 8;
                  if (!v42)
                    goto LABEL_70;
                }
              }
              else
              {
                while (1)
                {
                  v43 = *v41;
                  if (!*(_BYTE *)(*v41 + 96))
                    break;
                  ++v41;
                  v42 -= 8;
                  if (!v42)
                    goto LABEL_70;
                }
              }
              WebCore::ElementAnimationRareData::setLastStyleChangeEventStyle((uint64_t **)v43, &v51);
              if (v51)
              {
                WebCore::RenderStyle::~RenderStyle(v51, v45);
                if (*(_DWORD *)v46)
                {
                  *((_OWORD *)v46 + 2) = 0u;
                  *((_OWORD *)v46 + 3) = 0u;
                  *(_OWORD *)v46 = 0u;
                  *((_OWORD *)v46 + 1) = 0u;
                }
                else
                {
                  WTF::fastFree(v46, v47);
                }
              }
            }
          }
        }
LABEL_70:
        v27 = (_QWORD *)v27[2];
      }
      while (v27);
      result = *(_QWORD **)this;
      v4 = *(_QWORD *)(*(_QWORD *)this + 72) & 0xFFFFFFFFFFFFLL;
    }
LABEL_45:
    if (v4)
    {
LABEL_4:
      v6 = *(unsigned int *)(v4 + 164);
      if (!(_DWORD)v6)
        goto LABEL_5;
      v18 = *(uint64_t **)(v4 + 152);
      if (*((_BYTE *)this + 24))
      {
        v19 = 8 * v6;
        while (1)
        {
          v20 = *v18;
          if (*(_BYTE *)(*v18 + 96))
          {
            if (*(_DWORD *)(v20 + 80) == *((_DWORD *)this + 2) && *(_QWORD *)(v20 + 88) == *((_QWORD *)this + 2))
              break;
          }
          ++v18;
          v19 -= 8;
          if (!v19)
            goto LABEL_52;
        }
      }
      else
      {
        v28 = 8 * v6;
        while (1)
        {
          v20 = *v18;
          if (!*(_BYTE *)(*v18 + 96))
            break;
          ++v18;
          v28 -= 8;
          if (!v28)
            goto LABEL_52;
        }
      }
      v29 = *(_QWORD *)v20;
      if (*(_QWORD *)v20)
      {
        v51 = 0;
        WebCore::KeyframeEffectStack::setCSSAnimationList(v29, (WTF::StringImpl *)&v51);
        v31 = v51;
        if (v51)
        {
          if (*(_DWORD *)v51 == 1)
          {
            v32 = *((unsigned int *)v51 + 5);
            if ((_DWORD)v32)
            {
              v33 = (WebCore::Animation **)*((_QWORD *)v51 + 1);
              v34 = 8 * v32;
              do
              {
                v35 = *v33;
                *v33 = 0;
                if (v35)
                {
                  if (*(_DWORD *)v35 == 1)
                  {
                    v50 = v34;
                    WebCore::Animation::~Animation(v35, v30);
                    WTF::fastFree(v37, v38);
                    v34 = v50;
                  }
                  else
                  {
                    --*(_DWORD *)v35;
                  }
                }
                ++v33;
                v34 -= 8;
              }
              while (v34);
            }
            v36 = (WTF *)*((_QWORD *)v31 + 1);
            if (v36)
            {
              *((_QWORD *)v31 + 1) = 0;
              *((_DWORD *)v31 + 4) = 0;
              WTF::fastFree(v36, v30);
            }
            WTF::fastFree(v31, v30);
          }
          else
          {
            --*(_DWORD *)v51;
          }
        }
        result = *(_QWORD **)this;
        v4 = *(_QWORD *)(*(_QWORD *)this + 72) & 0xFFFFFFFFFFFFLL;
      }
LABEL_52:
      if (v4)
      {
LABEL_5:
        v7 = *(unsigned int *)(v4 + 164);
        if ((_DWORD)v7)
        {
          v8 = *(uint64_t **)(v4 + 152);
          if (*((_BYTE *)this + 24))
          {
            v9 = 8 * v7;
            while (1)
            {
              v10 = *v8;
              if (*(_BYTE *)(*v8 + 96))
              {
                v11 = *(_DWORD *)(v10 + 80);
                v12 = *(_QWORD *)(v10 + 88);
                if (v11 == *((_DWORD *)this + 2) && v12 == *((_QWORD *)this + 2))
                  break;
              }
              ++v8;
              v9 -= 8;
              if (!v9)
                return result;
            }
          }
          else
          {
            v22 = 8 * v7;
            while (*(_BYTE *)(*v8 + 96))
            {
              ++v8;
              v22 -= 8;
              if (!v22)
                return result;
            }
          }
          result = (_QWORD *)WebCore::Element::ensureAnimationRareData(result, v3);
          v24 = result[5];
          v25 = (WTF *)result[6];
          result[6] = 0;
          result[7] = 0;
          for (result[5] = 0; v25; result = (_QWORD *)WTF::fastFree(v48, v23))
          {
            v48 = v25;
            v25 = (WTF *)*((_QWORD *)v25 + 2);
            v49 = *(_DWORD **)v48;
            *(_QWORD *)v48 = 0;
            if (v49)
            {
              if (v49[6] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v49 + 72))(v49);
              else
                --v49[6];
            }
          }
          if (v24)
            return (_QWORD *)WTF::fastFree((WTF *)(v24 - 16), v23);
        }
      }
    }
  }
  return result;
}

uint64_t *WebCore::UserActionElementSet::clearFlags(uint64_t *result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v19;
  uint64_t *v20;

  v3 = *(_QWORD *)(a2 + 48);
  if ((v3 & 0x2000000000000) != 0)
  {
    v4 = *result;
    if (*result)
    {
      v5 = *(_DWORD *)(v4 - 8);
      v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      v10 = *(_QWORD *)(v4 + 16 * v9);
      if (v10 == a2)
      {
LABEL_5:
        v4 += 16 * v9;
      }
      else
      {
        v19 = 1;
        while (v10)
        {
          v9 = ((_DWORD)v9 + v19) & v5;
          v10 = *(_QWORD *)(v4 + 16 * v9);
          ++v19;
          if (v10 == a2)
            goto LABEL_5;
        }
        v4 += 16 * *(unsigned int *)(v4 - 4);
      }
    }
    if ((*(_DWORD *)(v4 + 8) & ~a3) != 0)
    {
      *(_DWORD *)(v4 + 8) &= ~a3;
      return result;
    }
    *(_QWORD *)(a2 + 48) = v3 & 0xFFFDFFFFFFFFFFFFLL;
    if (*result)
    {
      v11 = *result + 16 * *(unsigned int *)(*result - 4);
      if (v11 == v4)
        return result;
    }
    else
    {
      if (!v4)
        return result;
      v11 = 0;
    }
    if (v11 != v4)
    {
      v12 = *(_QWORD *)v4;
      *(_QWORD *)v4 = -1;
      if (v12)
      {
        if (*(_DWORD *)(v12 + 24) == 2)
        {
          if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          {
            v20 = result;
            WebCore::Node::removedLastRef((WebCore::Node *)v12);
            result = v20;
          }
        }
        else
        {
          *(_DWORD *)(v12 + 24) -= 2;
        }
      }
      ++*(_DWORD *)(*result - 16);
      v13 = *result;
      if (*result)
        v14 = *(_DWORD *)(v13 - 12) - 1;
      else
        v14 = -1;
      *(_DWORD *)(v13 - 12) = v14;
      v15 = *result;
      if (*result)
      {
        v16 = 6 * *(_DWORD *)(v15 - 12);
        v17 = *(_DWORD *)(v15 - 4);
        if (v16 < v17 && v17 >= 9)
          return (uint64_t *)WTF::HashTable<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::OptionSet<WebCore::UserActionElementSet::Flag>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::OptionSet<WebCore::UserActionElementSet::Flag>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::OptionSet<WebCore::UserActionElementSet::Flag>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::OptionSet<WebCore::UserActionElementSet::Flag>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(result, v17 >> 1, 0);
      }
    }
  }
  return result;
}

unsigned int *WebCore::Element::updateEffectiveLangStateFromParent(unsigned int *this, void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  unsigned int *v11;
  unsigned int **v12;
  unsigned int *v13;

  if (this && (this[7] & 0x80) != 0)
  {
    v6 = *((_QWORD *)this + 25);
    if (!v6)
      goto LABEL_22;
    v2 = (uint64_t *)(v6 + 8);
  }
  else
  {
    v2 = (uint64_t *)(this + 8);
  }
  v3 = *v2;
  if (!*v2)
  {
LABEL_16:
    LOWORD(v6) = 0;
LABEL_17:
    v7 = 1;
    goto LABEL_18;
  }
  v4 = *(_WORD *)(v3 + 28);
  if ((v4 & 0x80) != 0)
  {
    v6 = *(_QWORD *)(v3 + 200);
    if (v6)
    {
      v3 = *(_QWORD *)(v6 + 8);
      if (v3)
        goto LABEL_7;
      goto LABEL_16;
    }
LABEL_22:
    v3 = 0;
    goto LABEL_17;
  }
  if ((v4 & 8) == 0)
  {
    v3 = 0;
    goto LABEL_16;
  }
LABEL_7:
  *(_DWORD *)(v3 + 24) += 2;
  if (v3 != *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1272))
  {
    *((_WORD *)this + 15) = *((_WORD *)this + 15) & 0xFFF7 | *(_WORD *)(v3 + 30) & 8;
    if ((*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL) == 0
      || (v11 = *(unsigned int **)((*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL) + 0x40)) == 0)
    {
      v5 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
      if (!v5)
        goto LABEL_10;
      v9 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
      if (*MEMORY[0x1E0CBF2F8])
        *v9 += 2;
      this = *(unsigned int **)(v5 + 64);
      *(_QWORD *)(v5 + 64) = v9;
      if (!this)
        goto LABEL_10;
      goto LABEL_26;
    }
    if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v12 = (unsigned int **)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 64);
    }
    else
    {
      v13 = this;
      WebCore::Node::materializeRareData((WebCore::Node *)this);
      v11 = *(unsigned int **)((*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL) + 0x40);
      v12 = (unsigned int **)((*((_QWORD *)v13 + 9) & 0xFFFFFFFFFFFFLL) + 64);
      if (!v11)
      {
LABEL_43:
        this = *v12;
        *v12 = v11;
        if (!this)
        {
LABEL_10:
          if (*(_DWORD *)(v3 + 24) == 2)
          {
            if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
          }
          else
          {
            *(_DWORD *)(v3 + 24) -= 2;
          }
          return this;
        }
LABEL_26:
        if (*this == 2)
          this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)a2);
        else
          *this -= 2;
        goto LABEL_10;
      }
    }
    *v11 += 2;
    goto LABEL_43;
  }
  v7 = 0;
  LOWORD(v6) = 8;
LABEL_18:
  *((_WORD *)this + 15) = *((_WORD *)this + 15) & 0xFFF7 | v6;
  v8 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (v8)
  {
    v10 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *v10 += 2;
    this = *(unsigned int **)(v8 + 64);
    *(_QWORD *)(v8 + 64) = v10;
    if (this)
    {
      if (*this == 2)
        this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)a2);
      else
        *this -= 2;
    }
  }
  if ((v7 & 1) == 0)
    goto LABEL_10;
  return this;
}

uint64_t WebCore::Node::removedFromAncestor(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v3;
  WebCore::Node *v4;
  WebCore::Node *v5;
  uint64_t v6;
  int v7;

  v3 = *(_QWORD *)(result + 16);
  if ((a2 & 1) != 0)
  {
    v3 &= ~0x8000000000000uLL;
    *(_QWORD *)(result + 16) = v3;
  }
  if ((v3 & 0x10000000000000) == 0 || (*(_WORD *)(**(_QWORD **)(result + 40) + 28) & 0x80) != 0)
  {
    if ((a2 & 1) == 0)
      return result;
  }
  else
  {
    *(_QWORD *)(result + 16) = v3 & 0xFFEFFFFFFFFFFFFFLL;
    if ((a2 & 1) == 0)
      return result;
  }
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v4 = (WebCore::Node *)result;
    result = WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(a3 + 40) + 8));
    if (result)
    {
      v5 = v4;
      v6 = result;
      ++*(_DWORD *)(result + 8);
      result = (uint64_t)WebCore::AXObjectCache::remove((WebCore::AXObjectCache *)result, v5);
      v7 = *(_DWORD *)(v6 + 8);
      if (v7)
      {
        *(_DWORD *)(v6 + 8) = v7 - 1;
      }
      else
      {
        result = 286;
        __break(0xC471u);
      }
    }
  }
  return result;
}

unsigned int *WebCore::Node::removedLastRef(WebCore::Node *this, void *a2)
{
  __int16 v3;

  v3 = *((_WORD *)this + 14);
  if (this && (v3 & 0xF000) == 0x9000)
    return WebCore::Document::removedLastRef(this, a2);
  if (this)
  {
    if ((v3 & 0x20) != 0)
      (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20));
  }
  *((_WORD *)this + 15) |= 0x400u;
  return (unsigned int *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)this + 72))(this);
}

uint64_t WebCore::RenderTreeBuilder::RenderTreeBuilder(WebCore::RenderTreeBuilder *this, WebCore::RenderView *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t result;

  ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v3 = this;
  *((_QWORD *)this + 3) = v3;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v4 = this;
  *((_QWORD *)this + 4) = v4;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v5 = this;
  *((_QWORD *)this + 5) = v5;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v6 = this;
  *((_QWORD *)this + 6) = v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v7 = this;
  *((_QWORD *)this + 7) = v7;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v8 = this;
  *((_QWORD *)this + 8) = v8;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v9 = this;
  *((_QWORD *)this + 9) = v9;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v10 = this;
  *((_QWORD *)this + 10) = v10;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v11 = this;
  *((_QWORD *)this + 11) = v11;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v12 = this;
  *((_QWORD *)this + 12) = v12;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v13 = this;
  *((_QWORD *)this + 13) = v13;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v14 = this;
  *((_QWORD *)this + 14) = v14;
  *((_WORD *)this + 60) = 0;
  *((_BYTE *)this + 122) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  if (WebCore::RenderTreeBuilder::s_current
    && *((_QWORD *)this + 1) == *(_QWORD *)(WebCore::RenderTreeBuilder::s_current + 8))
  {
    result = 156;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)this + 2) = WebCore::RenderTreeBuilder::s_current;
    WebCore::RenderTreeBuilder::s_current = (uint64_t)this;
    return (uint64_t)this;
  }
  return result;
}

uint64_t WebCore::checkAcceptChild(uint64_t result, WebCore::Node *this, WebCore::Node *a3, uint64_t a4, char a5, int a6)
{
  _QWORD *v11;
  WebCore::Node *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v11 = (_QWORD *)result;
  *((_DWORD *)this + 6) += 2;
  v12 = this;
  do
  {
    if (v12 == a3)
      goto LABEL_53;
    result = (uint64_t)v12;
    v12 = (WebCore::Node *)*((_QWORD *)v12 + 4);
    if (v12)
    {
LABEL_4:
      *((_DWORD *)v12 + 6) += 2;
      goto LABEL_5;
    }
    v16 = *(_WORD *)(result + 28);
    if ((v16 & 0x80) != 0)
    {
      v17 = *(_QWORD *)(result + 200);
      if (!v17)
      {
LABEL_44:
        v12 = 0;
        goto LABEL_5;
      }
      v12 = *(WebCore::Node **)(v17 + 8);
      if (v12)
        goto LABEL_4;
    }
    else
    {
      if ((v16 & 0xF000) != 0xB000)
        goto LABEL_44;
      v19 = result;
      if ((*(unsigned int (**)(void))(*(_QWORD *)result + 392))() && (v18 = *(_QWORD *)(v19 + 96)) != 0)
      {
        v12 = *(WebCore::Node **)(v18 + 8);
        result = v19;
        if (v12)
          goto LABEL_4;
      }
      else
      {
        v12 = 0;
        result = v19;
      }
    }
LABEL_5:
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  while (v12);
  v13 = *((unsigned __int16 *)a3 + 14);
  if ((v13 & 0xA) != 0 && (*((_WORD *)this + 14) & 8) != 0)
  {
    if (a4 && a6 && *(WebCore::Node **)(a4 + 32) != this)
      goto LABEL_26;
LABEL_15:
    *v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
    return result;
  }
  if ((~v13 & 0x408) == 0
    && (result = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a3 + 368))(a3), (_DWORD)result))
  {
LABEL_40:
    *(_BYTE *)v11 = 1;
    v11[1] = 0;
  }
  else
  {
    if (!a4 || !a6 || *(WebCore::Node **)(a4 + 32) == this)
    {
      if ((*((_WORD *)this + 14) & 0xF000) == 0x9000)
      {
        result = WebCore::Document::canAcceptChild((uint64_t)this, (uint64_t)a3, a4, a5);
        if ((result & 1) != 0)
          goto LABEL_15;
      }
      else
      {
        v14 = *((unsigned __int16 *)a3 + 14);
        if ((v14 & 0xF000) == 0xB000)
        {
          if ((v14 & 4) == 0)
            goto LABEL_15;
          v15 = *((_QWORD *)a3 + 10);
          if (!v15)
            goto LABEL_15;
          *(_DWORD *)(v15 + 24) += 2;
          while (1)
          {
            a3 = (WebCore::Node *)v15;
            result = (*(uint64_t (**)(WebCore::Node *, _QWORD))(*(_QWORD *)this + 240))(this, *(unsigned __int16 *)(v15 + 28) >> 12);
            if (!(_DWORD)result)
              break;
            v15 = *(_QWORD *)(v15 + 56);
            if (v15)
              *(_DWORD *)(v15 + 24) += 2;
            if (*((_DWORD *)a3 + 6) == 2)
            {
              if ((*((_WORD *)a3 + 15) & 0x400) == 0)
                result = WebCore::Node::removedLastRef(a3);
            }
            else
            {
              *((_DWORD *)a3 + 6) -= 2;
            }
            if (!v15)
              goto LABEL_15;
          }
LABEL_53:
          if (*((_DWORD *)a3 + 6) == 2)
          {
            if ((*((_WORD *)a3 + 15) & 0x400) == 0)
              result = WebCore::Node::removedLastRef(a3);
          }
          else
          {
            *((_DWORD *)a3 + 6) -= 2;
          }
        }
        else
        {
          result = (*(uint64_t (**)(WebCore::Node *, _QWORD))(*(_QWORD *)this + 240))(this, v14 >> 12);
          if ((result & 1) != 0)
            goto LABEL_15;
        }
      }
      goto LABEL_40;
    }
LABEL_26:
    *(_BYTE *)v11 = 5;
    v11[1] = 0;
  }
  *((_BYTE *)v11 + 16) = 1;
  return result;
}

uint64_t WebCore::Element::childTypeAllowed(uint64_t a1, unsigned int a2)
{
  return (a2 < 9) & (0x19Au >> a2);
}

BOOL WebCore::notifyNodeRemovedFromTree(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a3;
  v5 = 0;
  *(_DWORD *)(a3 + 24) += 2;
  v6 = (unint64_t)(a2 == 0) << 8;
  do
  {
    v7 = v3;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v3 + 288))(v3, v6, a1);
    if (*(_QWORD *)(v3 + 32))
      v8 = *(_DWORD *)(v3 + 24) > 3u;
    else
      v8 = 0;
    if (v8)
      v5 = 1;
    if ((*(_WORD *)(v3 + 28) & 8) != 0 && (*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v10 = *(_QWORD *)((*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
      if (v10)
      {
        *(_DWORD *)(v10 + 24) += 2;
        if (WebCore::notifyNodeRemovedFromTree(a1, 1, v10))
          v5 = 1;
        if (*(_DWORD *)(v10 + 24) == 2)
        {
          if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v10);
        }
        else
        {
          *(_DWORD *)(v10 + 24) -= 2;
        }
      }
    }
    if ((*(_WORD *)(v7 + 28) & 4) != 0 && (v3 = *(_QWORD *)(v7 + 80)) != 0 || (v3 = *(_QWORD *)(v7 + 56)) != 0)
    {
LABEL_13:
      *(_DWORD *)(v3 + 24) += 2;
    }
    else
    {
      v9 = v7;
      while (1)
      {
        v9 = *(_QWORD *)(v9 + 32);
        if (!v9)
          break;
        v3 = *(_QWORD *)(v9 + 56);
        if (v3)
          goto LABEL_13;
      }
      v3 = 0;
    }
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  while (v3);
  return v5 != 0;
}

void WebCore::CSSStyleSheet::~CSSStyleSheet(WebCore::CSSStyleSheet *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CSSStyleSheet::~CSSStyleSheet(this, a2);
  WTF::fastFree(v2, v3);
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::CSSStyleSheet **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WebCore::StyleSheetContents *v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t i;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  WTF *v42;
  WebCore::CSSStyleSheet *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;

  v3 = *((unsigned int *)this + 35);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v39 = *(_QWORD *)(*((_QWORD *)this + 16) + 8 * i);
      if (v39)
      {
        *(_BYTE *)(v39 + 12) &= ~2u;
        *(_QWORD *)(v39 + 16) = 0;
        v3 = *((unsigned int *)this + 35);
      }
    }
  }
  v4 = *((_QWORD *)this + 15);
  if (v4)
    WebCore::MediaList::detachFromParent(v4);
  v5 = *((_QWORD *)this + 3);
  v6 = *(unsigned int *)(v5 + 212);
  if ((_DWORD)v6)
  {
    v7 = *(WebCore::CSSStyleSheet ***)(v5 + 200);
    if (*v7 == this)
    {
      v8 = 0;
LABEL_7:
      memmove(&v7[v8], &v7[v8 + 1], 8 * v6 - (8 * v8 + 8));
      --*(_DWORD *)(v5 + 212);
    }
    else
    {
      v8 = 0;
      while (v6 - 1 != v8)
      {
        v43 = v7[++v8];
        if (v43 == this)
          goto LABEL_7;
      }
    }
  }
  v9 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((unsigned int *)this + 35);
  v11 = (WTF *)*((_QWORD *)this + 16);
  if ((_DWORD)v10)
  {
    v40 = 8 * v10;
    do
    {
      v41 = *(_DWORD **)v11;
      *(_QWORD *)v11 = 0;
      if (v41)
      {
        if (v41[2] == 1)
        {
          v46 = v11;
          (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
          v11 = v46;
        }
        else
        {
          --v41[2];
        }
      }
      v11 = (WTF *)((char *)v11 + 8);
      v40 -= 8;
    }
    while (v40);
    v11 = (WTF *)*((_QWORD *)this + 16);
  }
  if (v11)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v11, a2);
  }
  v12 = (WTF *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
    {
      if (*((_BYTE *)v12 + 40))
        WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12 + 24, a2);
      WTF::fastFree(v12, a2);
    }
    else
    {
      --*(_DWORD *)v12;
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  v16 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v16));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v16);
      v32 = *(unsigned int *)(v16 + 28);
      if ((_DWORD)v32)
      {
        v44 = v16;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v16 + 16), (WTF::StringImpl *)(*(_QWORD *)(v16 + 16) + 32 * v32));
        v16 = v44;
      }
      v33 = *(WTF **)(v16 + 16);
      if (v33)
      {
        *(_QWORD *)(v16 + 16) = 0;
        *(_DWORD *)(v16 + 24) = 0;
        v36 = v16;
        WTF::fastFree(v33, a2);
        v16 = v36;
      }
      WTF::fastFree((WTF *)v16, a2);
    }
  }
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 10, a2);
  v20 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr((unsigned int *)v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v20));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v20);
      v34 = *(unsigned int *)(v20 + 28);
      if ((_DWORD)v34)
      {
        v45 = v20;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v20 + 16), (WTF::StringImpl *)(*(_QWORD *)(v20 + 16) + 32 * v34));
        v20 = v45;
      }
      v35 = *(WTF **)(v20 + 16);
      if (v35)
      {
        *(_QWORD *)(v20 + 16) = 0;
        *(_DWORD *)(v20 + 24) = 0;
        v37 = v20;
        WTF::fastFree(v35, v19);
        v20 = v37;
      }
      WTF::fastFree((WTF *)v20, v19);
    }
  }
  v23 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v23)
  {
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, v19);
    }
  }
  WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 48, v19);
  v27 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = (WebCore::StyleSheetContents *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents(v28, v26);
      WTF::fastFree(v30, v31);
    }
    else
    {
      --*(_DWORD *)v28;
    }
  }
  v29 = *((_QWORD *)this + 2);
  if (v29)
  {
    *(_QWORD *)(v29 + 8) = 0;
    v42 = (WTF *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 1)
        WTF::fastFree(v42, v26);
      else
        --*(_DWORD *)v42;
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

uint64_t WebCore::InlineStyleSheetOwner::removedFromDocument(uint64_t this, WebCore::Element *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;

  v2 = this;
  v3 = *(_QWORD *)(this + 40);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      ++*(_DWORD *)(v4 + 8);
      if (WebCore::Style::Scope::hasPendingSheet((WebCore::Style::Scope *)v4, a2))
        WebCore::Style::Scope::removePendingSheet((WebCore::Document **)v4, a2);
      this = WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Node>(v4 + 192, (uint64_t)a2);
      if ((_DWORD)this)
      {
        if (!*(_BYTE *)(v4 + 233))
        {
          *(_WORD *)(v4 + 232) = 256;
          if (*(_QWORD *)(v4 + 24))
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 1328) + 234) = 1;
        }
        if ((*(_QWORD *)(v4 + 112) & 0xFFFFFFFFFFFFLL) == 0
          || *(double *)((*(_QWORD *)(v4 + 112) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
        {
          *(_QWORD *)(v4 + 104) = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
          this = WebCore::TimerBase::setNextFireTime(v4 + 80, v6 + 0.0);
        }
      }
      v7 = *(_DWORD *)(v4 + 8);
      if (!v7)
      {
        __break(0xC471u);
        JUMPOUT(0x1942F31B4);
      }
      *(_DWORD *)(v4 + 8) = v7 - 1;
    }
  }
  v8 = *(_QWORD *)(v2 + 32);
  if (v8)
  {
    *(_QWORD *)(v2 + 32) = 0;
    v9 = *(_QWORD *)(v8 + 96);
    *(_QWORD *)(v8 + 96) = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr((unsigned int *)v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, (unsigned int *)v9));
      if (!v11)
      {
        atomic_store(1u, (unsigned int *)v9);
        v12 = *(unsigned int *)(v9 + 28);
        if ((_DWORD)v12)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v12));
        v13 = *(WTF **)(v9 + 16);
        if (v13)
        {
          *(_QWORD *)(v9 + 16) = 0;
          *(_DWORD *)(v9 + 24) = 0;
          WTF::fastFree(v13, a2);
        }
        this = WTF::fastFree((WTF *)v9, a2);
      }
    }
    if (*(_DWORD *)(v8 + 8) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    else
      --*(_DWORD *)(v8 + 8);
  }
  return this;
}

BOOL WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Node>(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  WTF *v13;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_DWORD *)(a1 + 28);
  v3 = *(_DWORD *)(a1 + 24) + 1;
  *(_DWORD *)(a1 + 24) = v3;
  if (v3 > v2)
  {
    v15 = *(WTF **)(a1 + 8);
    if (v15)
    {
      do
      {
        v16 = (WTF *)*((_QWORD *)v15 + 2);
        if (!*(_QWORD *)(*(_QWORD *)v15 + 8))
        {
          v20 = a1;
          v19 = a2;
          v18 = (WTF *)*((_QWORD *)v15 + 2);
          WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::remove((uint64_t *)a1, (void *)a1, v15);
          v16 = v18;
          a2 = v19;
          a1 = v20;
        }
        v15 = v16;
      }
      while (v16);
    }
    *(_DWORD *)(a1 + 24) = 0;
    v17 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      LODWORD(v17) = *(_DWORD *)(v17 - 12);
      if (v17 > 0x7FFFFFFE)
        LODWORD(v17) = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 28) = 2 * v17;
  }
  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0xFFFFFFFFFFFFLL) == 0 || !*(_QWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 8))
    return 0;
  v6 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = (v5 + ~(v4 << 32)) ^ ((unint64_t)(v5 + ~(v4 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    for (i = 1; ; ++i)
    {
      v13 = *(WTF **)(v6 + 8 * v11);
      if (!v13)
        break;
      if (v13 != (WTF *)-1 && *(_QWORD *)v13 == v5)
      {
        if (v11 == *(_DWORD *)(v6 - 4))
          v13 = 0;
        return WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::remove((uint64_t *)a1, (void *)a1, v13);
      }
      v11 = (v11 + i) & v7;
    }
  }
  else
  {
    v13 = 0;
  }
  return WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::remove((uint64_t *)a1, (void *)a1, v13);
}

uint64_t WebCore::Style::Scope::hasPendingSheet(WebCore::Style::Scope *this, const WebCore::Element *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int j;
  uint64_t v20;
  uint64_t v22;

  ++*((_DWORD *)this + 42);
  v2 = *((_QWORD *)a2 + 2);
  v3 = v2 & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 8))
  {
    v4 = *((_QWORD *)this + 20);
    if (v4)
    {
      v5 = *(_DWORD *)(v4 - 8);
      v6 = (v3 + ~(v2 << 32)) ^ ((unint64_t)(v3 + ~(v2 << 32)) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      for (i = 1; ; ++i)
      {
        v11 = *(_QWORD *)(v4 + 8 * v9);
        if (!v11)
          break;
        if (v11 != -1 && v11 == v3)
          return 1;
        v9 = (v9 + i) & v5;
      }
    }
    ++*((_DWORD *)this + 46);
    v13 = *((_QWORD *)this + 22);
    if (v13)
    {
      v14 = *(_DWORD *)(v13 - 8);
      v15 = (v3 + ~(v2 << 32)) ^ ((unint64_t)(v3 + ~(v2 << 32)) >> 22);
      v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
      v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
      v18 = v14 & ((v17 >> 31) ^ v17);
      for (j = 1; ; ++j)
      {
        v20 = *(_QWORD *)(v13 + 8 * v18);
        if (!v20)
          break;
        if (v20 != -1 && v20 == v3)
          return 1;
        v18 = (v18 + j) & v14;
      }
    }
    return 0;
  }
  else
  {
    v22 = 0;
    ++*((_DWORD *)this + 46);
  }
  return v22;
}

uint64_t *WebCore::HTMLStyleElement::removedFromAncestor(WebCore::Element *a1, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  char v5;
  uint64_t *result;

  v5 = a2;
  result = WebCore::HTMLElement::removedFromAncestor((uint64_t)a1, a2, a3, a4, a5);
  if ((v5 & 1) != 0)
    return (uint64_t *)WebCore::InlineStyleSheetOwner::removedFromDocument((uint64_t)a1 + 112, a1);
  return result;
}

uint64_t *WebCore::HTMLImageElement::removedFromAncestor(WTF::AtomString *a1, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  WTF::AtomString *v5;
  uint64_t *result;
  uint64_t v7;
  WTF::AtomString *v8;
  WTF::AtomString *v9;
  WTF::AtomString *v10;
  uint64_t v11;
  void *v12;
  WebCore::Node *v13;
  WebCore::TreeScopeOrderedMap *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  WebCore::Node *v20;

  v5 = a1;
  if ((a2 & 0x100) != 0)
  {
    if (*((_QWORD *)a1 + 31))
    {
      v14 = *(WebCore::TreeScopeOrderedMap **)(*(_QWORD *)(a3 + 40) + 48);
      if (v14)
      {
        v16 = a3;
        v18 = a2;
        WebCore::TreeScopeOrderedMap::remove(v14, (WTF::AtomString *)((char *)v5 + 248), v5);
        a3 = v16;
        a2 = v18;
      }
    }
  }
  if ((*(_WORD *)(a3 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(a3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::pictureTag + 24))
  {
    v15 = *((_QWORD *)v5 + 4);
    if (!v15 || (*(_WORD *)(v15 + 28) & 8) == 0)
    {
      v17 = a3;
      v19 = a2;
      WebCore::HTMLImageElement::setPictureElement((uint64_t)v5, 0);
      WebCore::HTMLImageElement::selectImageSource((uint64_t)v5, (void *)1);
      a3 = v17;
      a2 = v19;
    }
  }
  result = WebCore::HTMLElement::removedFromAncestor((uint64_t)v5, a2, a3, a4, a5);
  v7 = *((_QWORD *)v5 + 17);
  if (v7)
  {
    v8 = *(WTF::AtomString **)(v7 + 8);
    if (v8)
    {
      result = (uint64_t *)((char *)v5 + 128);
      do
      {
        v9 = v5;
        v5 = (WTF::AtomString *)*((_QWORD *)v5 + 4);
      }
      while (v5);
      do
      {
        v10 = v8;
        v8 = (WTF::AtomString *)*((_QWORD *)v8 + 4);
      }
      while (v8);
      if (v9 != v10)
      {
        v20 = 0;
        v11 = (uint64_t)result;
        (*(void (**)(uint64_t *, WebCore::Node **))(*result + 80))(result, &v20);
        v13 = v20;
        v20 = 0;
        if (v13)
        {
          if (*((_DWORD *)v13 + 6) == 2)
          {
            if ((*((_WORD *)v13 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v13, v12);
          }
          else
          {
            *((_DWORD *)v13 + 6) -= 2;
          }
        }
        return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
      }
    }
  }
  return result;
}

unint64_t WebCore::jsUserMessageHandlerPrototypeFunction_postMessage(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  JSC::VM *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void *v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  JSValue v37;
  objc_class *v38;
  _DWORD *v39;
  void *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  JSValue v43;
  uint64_t v44;
  WebCore::DOMGuardedObject *v45;
  uint64_t v46;
  uint64_t v47;
  int v48[2];
  WTF::StringImpl *v49;
  int v50;
  WTF *v51;
  WTF::StringImpl *v52;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1942F38D8);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v45 = v15;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_48;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSUserMessageHandler::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSUserMessageHandler::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_48:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"UserMessageHandler", "postMessage", v17);
  }
  else
  {
    v24 = (JSC::VM *)*((_QWORD *)this + 7);
    if (*((_DWORD *)a2 + 8) != 1)
    {
      v25 = *(_QWORD *)(v18 + 24);
      v26 = *((_QWORD *)a2 + 6);
      v51 = 0;
      v52 = 0;
      v46 = 0;
      v47 = 0;
      WebCore::SerializedScriptValue::create(this, v26, (uint64_t)&v46, (uint64_t)&v51, 1, 1, 0, (uint64_t)v48);
      if (v50)
      {
        v28 = 0;
        v29 = 0;
        if (v50 == -1)
        {
LABEL_29:
          v30 = (uint64_t *)v51;
          if (HIDWORD(v52))
          {
            v44 = 8 * HIDWORD(v52);
            do
            {
              v30 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v30, v27)+ 1;
              v44 -= 8;
            }
            while (v44);
            v30 = (uint64_t *)v51;
            if (!v51)
            {
LABEL_31:
              if (v29)
              {
LABEL_32:
                LODWORD(v47) = 0;
                v46 = 0;
                v51 = (WTF *)v29;
                WebCore::UserMessageHandler::postMessage(v25, (uint64_t *)&v51, (uint64_t *)&v45, v48);
                v51 = 0;
                do
                {
                  v32 = __ldaxr((unsigned int *)v29);
                  v33 = v32 - 1;
                }
                while (__stlxr(v33, (unsigned int *)v29));
                if (!v33)
                {
                  atomic_store(1u, (unsigned int *)v29);
                  WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v29 + 8), v31);
                  WTF::fastFree((WTF *)v29, v40);
                }
                if ((_BYTE)v50)
                {
                  v41 = (WTF::StringImpl *)LOBYTE(v48[0]);
                  LOBYTE(v51) = v48[0];
                  v42 = v49;
                  v52 = v49;
                  if (!*((_QWORD *)v24 + 2))
                  {
                    v43.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v48[0]), (JSC::JSGlobalObject *)&v52);
                    JSC::VM::throwException(v24, this, v43);
                    v42 = v52;
                  }
                  v52 = 0;
                  if (v42)
                  {
                    if (*(_DWORD *)v42 == 2)
                      WTF::StringImpl::destroy(v42, v41);
                    else
                      *(_DWORD *)v42 -= 2;
                  }
                }
                v34 = v47;
                if ((_DWORD)v47 == -1)
                {
LABEL_39:
                  v14 = v45;
                  if (!v45)
                    goto LABEL_42;
                  goto LABEL_40;
                }
LABEL_38:
                ((void (*)(int *, uint64_t *))off_1E33183B0[v34])(v48, &v46);
                goto LABEL_39;
              }
LABEL_67:
              v34 = 1;
              LODWORD(v47) = 1;
              goto LABEL_38;
            }
          }
          else if (!v51)
          {
            goto LABEL_31;
          }
          v51 = 0;
          LODWORD(v52) = 0;
          WTF::fastFree((WTF *)v30, v27);
          if (v29)
            goto LABEL_32;
          goto LABEL_67;
        }
      }
      else
      {
        v28 = *(_QWORD *)v48;
        *(_QWORD *)v48 = 0;
      }
      ((void (*)(uint64_t *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21SerializedScriptValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v50])(&v46, v48);
      v29 = v28;
      goto LABEL_29;
    }
    v37.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v24, this, v37);
  }
LABEL_40:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_42:
  v35 = *(_QWORD *)(v10 + 16);
  if (v35)
  {
    if (*(_QWORD *)(v10 + 24) != v35)
    {
      v38 = *(objc_class **)(v35 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, (WebCore::DOMGuardedObject **)v48);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>(*(uint64_t *)v48, v38, 0);
      v39 = *(_DWORD **)v48;
      *(_QWORD *)v48 = 0;
      if (v39)
      {
        if (v39[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 16))(v39);
        else
          --v39[4];
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

void *WebCore::SerializedScriptValue::deserialize(uint64_t a1, WTF::StringImpl *a2, _DWORD *a3, int a4, BOOL *a5)
{
  void *v5;
  uint64_t *v6;
  uint64_t v8;
  void *v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13[2];
  _QWORD v14[2];

  v11 = 0;
  v12 = 0;
  v14[0] = 0;
  v14[1] = 0;
  v13[0] = 0;
  v13[1] = 0;
  v5 = (void *)WebCore::SerializedScriptValue::deserialize(a1, a2, a3, (uint64_t)&v11, (uint64_t)v14, v13, a4, a5);
  v6 = (uint64_t *)v11;
  if (HIDWORD(v12))
  {
    v10 = v5;
    v8 = 8 * HIDWORD(v12);
    do
    {
      v6 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v6, v5)+ 1;
      v8 -= 8;
    }
    while (v8);
    v5 = v10;
    v6 = (uint64_t *)v11;
  }
  if (v6)
  {
    v11 = 0;
    LODWORD(v12) = 0;
    v9 = v5;
    WTF::fastFree((WTF *)v6, v5);
    return v9;
  }
  return v5;
}

uint64_t WebCore::SerializedScriptValue::deserialize(WebCore::SerializedScriptValue *this, const OpaqueJSContext *a2, const OpaqueJSValue **a3)
{
  JSC::VM *v6;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE v13[8];
  WTF *v14;
  uint64_t v15;
  uint64_t v16[2];
  _QWORD v17[2];

  v6 = (JSC::VM *)*((_QWORD *)a2 + 7);
  MEMORY[0x19AEA3294](v13, v6);
  v14 = 0;
  v15 = 0;
  v17[0] = 0;
  v17[1] = 0;
  v16[0] = 0;
  v16[1] = 0;
  v8 = WebCore::SerializedScriptValue::deserialize((uint64_t)this, a2, a2, (uint64_t)&v14, (uint64_t)v17, v16, 1, 0);
  v9 = (uint64_t *)v14;
  if (!HIDWORD(v15))
  {
    if (!v14)
      goto LABEL_3;
    goto LABEL_11;
  }
  v12 = 8 * HIDWORD(v15);
  do
  {
    v9 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v9, v7)+ 1;
    v12 -= 8;
  }
  while (v12);
  v9 = (uint64_t *)v14;
  if (v14)
  {
LABEL_11:
    v14 = 0;
    LODWORD(v15) = 0;
    WTF::fastFree((WTF *)v9, v7);
  }
LABEL_3:
  v10 = *((_QWORD *)v6 + 2);
  if (v10)
  {
    if (a3)
      *a3 = *(const OpaqueJSValue **)(v10 + 8);
    JSC::VM::clearException(v6);
    v8 = 0;
  }
  MEMORY[0x19AEA32A0](v13);
  return v8;
}

void WebCore::CloneDeserializer::~CloneDeserializer(WebCore::CloneDeserializer *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  unsigned int v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  WTF::StringImpl **v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF *v50;
  uint64_t *v51;
  WTF *v52;
  uint64_t *v53;
  WTF *v54;
  WTF::StringImpl **v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl **v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF **v61;
  WTF **v62;
  WTF *v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  WTF *v67;
  WTF **v68;
  WTF **v69;
  WTF *v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  WTF *v74;
  WebCore::RTCDataChannel **v75;
  uint64_t v76;
  WebCore::RTCDataChannel *v77;
  bmalloc::api *v78;
  void *v79;
  WTF **v80;
  uint64_t v81;
  WTF *v82;
  _DWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _DWORD **v86;
  uint64_t v87;
  _DWORD *v88;
  _DWORD **v89;
  uint64_t v90;
  _DWORD *v91;
  _DWORD **v92;
  uint64_t v93;
  _DWORD *v94;
  _DWORD **v95;
  uint64_t i;
  _DWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  int v105;
  uint64_t v106;
  WTF::DeferrableRefCountedBase **v107;
  uint64_t v108;
  WTF::DeferrableRefCountedBase *v109;
  WTF **v110;
  WTF **v111;
  WTF *v112;
  unsigned int *v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  WebCore::MediaStreamTrackDataHolder **v119;
  uint64_t v120;
  WebCore::MediaStreamTrackDataHolder *v121;
  WTF *v122;
  void *v123;
  unsigned int **v124;
  unsigned int **v125;
  unsigned int *v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  WTF *v135;
  unsigned int **v136;
  unsigned int **v137;
  unsigned int *v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  WTF *v147;
  _DWORD **v148;
  uint64_t v149;
  _DWORD *v150;
  _DWORD **v151;
  uint64_t v152;
  _DWORD *v153;
  WebCore::OffscreenCanvas **v154;
  uint64_t v155;
  WebCore::OffscreenCanvas *v156;
  bmalloc::api *v157;
  void *v158;
  uint64_t v159;

  v3 = *((unsigned int *)this + 169);
  if ((_DWORD)v3)
  {
    v86 = (_DWORD **)*((_QWORD *)this + 83);
    v87 = 8 * v3;
    do
    {
      v88 = *v86;
      *v86 = 0;
      if (v88)
      {
        if (v88[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v88 + 16))(v88);
        else
          --v88[6];
      }
      ++v86;
      v87 -= 8;
    }
    while (v87);
  }
  v4 = (WTF *)*((_QWORD *)this + 83);
  if (v4)
  {
    *((_QWORD *)this + 83) = 0;
    *((_DWORD *)this + 168) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 165);
  if ((_DWORD)v5)
  {
    v119 = (WebCore::MediaStreamTrackDataHolder **)*((_QWORD *)this + 81);
    v120 = 8 * v5;
    do
    {
      v121 = *v119;
      *v119 = 0;
      if (v121)
      {
        WebCore::MediaStreamTrackDataHolder::~MediaStreamTrackDataHolder(v121, a2);
        WTF::fastFree(v122, v123);
      }
      ++v119;
      v120 -= 8;
    }
    while (v120);
  }
  v6 = (WTF *)*((_QWORD *)this + 81);
  if (v6)
  {
    *((_QWORD *)this + 81) = 0;
    *((_DWORD *)this + 164) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *((unsigned int *)this + 161);
  if ((_DWORD)v7)
  {
    v89 = (_DWORD **)*((_QWORD *)this + 79);
    v90 = 8 * v7;
    do
    {
      v91 = *v89;
      *v89 = 0;
      if (v91)
      {
        if (v91[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v91 + 16))(v91);
        else
          --v91[4];
      }
      ++v89;
      v90 -= 8;
    }
    while (v90);
  }
  v8 = (WTF *)*((_QWORD *)this + 79);
  if (v8)
  {
    *((_QWORD *)this + 79) = 0;
    *((_DWORD *)this + 160) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((unsigned int *)this + 157);
  if ((_DWORD)v9)
  {
    v124 = (unsigned int **)*((_QWORD *)this + 77);
    v125 = &v124[v9];
    do
    {
      v126 = *v124;
      *v124 = 0;
      if (v126)
      {
        v127 = v126 + 2;
        do
        {
          v128 = __ldaxr(v127);
          v129 = v128 - 1;
        }
        while (__stlxr(v129, v127));
        if (!v129)
        {
          atomic_store(1u, v126 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v126 + 8))(v126);
        }
      }
      ++v124;
    }
    while (v124 != v125);
  }
  v10 = (WTF *)*((_QWORD *)this + 77);
  if (v10)
  {
    *((_QWORD *)this + 77) = 0;
    *((_DWORD *)this + 156) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = *((unsigned int *)this + 153);
  if ((_DWORD)v11)
  {
    v61 = (WTF **)*((_QWORD *)this + 75);
    v62 = &v61[v11];
    do
    {
      v63 = *v61;
      *v61 = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 1)
        {
          v64 = *((_QWORD *)v63 + 1);
          *((_QWORD *)v63 + 1) = 0;
          if (v64)
          {
            do
            {
              v65 = __ldaxr((unsigned int *)v64);
              v66 = v65 - 1;
            }
            while (__stlxr(v66, (unsigned int *)v64));
            if (!v66)
            {
              atomic_store(1u, (unsigned int *)v64);
              v67 = *(WTF **)(v64 + 40);
              if (v67)
              {
                *(_QWORD *)(v64 + 40) = 0;
                *(_DWORD *)(v64 + 48) = 0;
                WTF::fastFree(v67, a2);
              }
              WTF::fastFree((WTF *)v64, a2);
            }
          }
          WTF::fastFree(v63, a2);
        }
        else
        {
          --*(_DWORD *)v63;
        }
      }
      ++v61;
    }
    while (v61 != v62);
  }
  v12 = (WTF *)*((_QWORD *)this + 75);
  if (v12)
  {
    *((_QWORD *)this + 75) = 0;
    *((_DWORD *)this + 152) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = *((unsigned int *)this + 149);
  if ((_DWORD)v13)
  {
    v130 = (uint64_t *)*((_QWORD *)this + 73);
    v131 = &v130[v13];
    do
    {
      v132 = *v130;
      *v130 = 0;
      if (v132)
      {
        do
        {
          v133 = __ldaxr((unsigned int *)v132);
          v134 = v133 - 1;
        }
        while (__stlxr(v134, (unsigned int *)v132));
        if (!v134)
        {
          atomic_store(1u, (unsigned int *)v132);
          v135 = *(WTF **)(v132 + 40);
          if (v135)
          {
            *(_QWORD *)(v132 + 40) = 0;
            *(_DWORD *)(v132 + 48) = 0;
            WTF::fastFree(v135, a2);
          }
          WTF::fastFree((WTF *)v132, a2);
        }
      }
      ++v130;
    }
    while (v130 != v131);
  }
  v14 = (WTF *)*((_QWORD *)this + 73);
  if (v14)
  {
    *((_QWORD *)this + 73) = 0;
    *((_DWORD *)this + 148) = 0;
    WTF::fastFree(v14, a2);
  }
  v15 = *((unsigned int *)this + 145);
  if ((_DWORD)v15)
  {
    v92 = (_DWORD **)*((_QWORD *)this + 71);
    v93 = 8 * v15;
    do
    {
      v94 = *v92;
      *v92 = 0;
      if (v94)
      {
        if (v94[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v94 + 16))(v94);
        else
          --v94[4];
      }
      ++v92;
      v93 -= 8;
    }
    while (v93);
  }
  v16 = (WTF *)*((_QWORD *)this + 71);
  if (v16)
  {
    *((_QWORD *)this + 71) = 0;
    *((_DWORD *)this + 144) = 0;
    WTF::fastFree(v16, a2);
  }
  v17 = *((_DWORD *)this + 141);
  if (v17)
  {
    v136 = (unsigned int **)*((_QWORD *)this + 69);
    v137 = &v136[13 * v17];
    do
    {
      v138 = *v136;
      *v136 = 0;
      if (v138)
      {
        v139 = v138 + 2;
        do
        {
          v140 = __ldaxr(v139);
          v141 = v140 - 1;
        }
        while (__stlxr(v141, v139));
        if (!v141)
        {
          atomic_store(1u, v138 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v138 + 8))(v138);
        }
      }
      v136 += 13;
    }
    while (v136 != v137);
  }
  v18 = (WTF *)*((_QWORD *)this + 69);
  if (v18)
  {
    *((_QWORD *)this + 69) = 0;
    *((_DWORD *)this + 140) = 0;
    WTF::fastFree(v18, a2);
  }
  v19 = *((unsigned int *)this + 137);
  if ((_DWORD)v19)
  {
    v68 = (WTF **)*((_QWORD *)this + 67);
    v69 = &v68[v19];
    do
    {
      v70 = *v68;
      *v68 = 0;
      if (v70)
      {
        if (*(_DWORD *)v70 == 1)
        {
          v71 = *((_QWORD *)v70 + 1);
          *((_QWORD *)v70 + 1) = 0;
          if (v71)
          {
            do
            {
              v72 = __ldaxr((unsigned int *)v71);
              v73 = v72 - 1;
            }
            while (__stlxr(v73, (unsigned int *)v71));
            if (!v73)
            {
              atomic_store(1u, (unsigned int *)v71);
              v74 = *(WTF **)(v71 + 40);
              if (v74)
              {
                *(_QWORD *)(v71 + 40) = 0;
                *(_DWORD *)(v71 + 48) = 0;
                WTF::fastFree(v74, a2);
              }
              WTF::fastFree((WTF *)v71, a2);
            }
          }
          WTF::fastFree(v70, a2);
        }
        else
        {
          --*(_DWORD *)v70;
        }
      }
      ++v68;
    }
    while (v68 != v69);
  }
  v20 = (WTF *)*((_QWORD *)this + 67);
  if (v20)
  {
    *((_QWORD *)this + 67) = 0;
    *((_DWORD *)this + 136) = 0;
    WTF::fastFree(v20, a2);
  }
  v21 = *((unsigned int *)this + 133);
  if ((_DWORD)v21)
  {
    v142 = (uint64_t *)*((_QWORD *)this + 65);
    v143 = &v142[v21];
    do
    {
      v144 = *v142;
      *v142 = 0;
      if (v144)
      {
        do
        {
          v145 = __ldaxr((unsigned int *)v144);
          v146 = v145 - 1;
        }
        while (__stlxr(v146, (unsigned int *)v144));
        if (!v146)
        {
          atomic_store(1u, (unsigned int *)v144);
          v147 = *(WTF **)(v144 + 40);
          if (v147)
          {
            *(_QWORD *)(v144 + 40) = 0;
            *(_DWORD *)(v144 + 48) = 0;
            WTF::fastFree(v147, a2);
          }
          WTF::fastFree((WTF *)v144, a2);
        }
      }
      ++v142;
    }
    while (v142 != v143);
  }
  v22 = (WTF *)*((_QWORD *)this + 65);
  if (v22)
  {
    *((_QWORD *)this + 65) = 0;
    *((_DWORD *)this + 132) = 0;
    WTF::fastFree(v22, a2);
  }
  v23 = *((unsigned int *)this + 125);
  if ((_DWORD)v23)
  {
    v148 = (_DWORD **)*((_QWORD *)this + 61);
    v149 = 8 * v23;
    do
    {
      v150 = *v148;
      *v148 = 0;
      if (v150)
      {
        if (v150[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v150 + 8))(v150);
        else
          --v150[2];
      }
      ++v148;
      v149 -= 8;
    }
    while (v149);
  }
  v24 = (WTF *)*((_QWORD *)this + 61);
  if (v24)
  {
    *((_QWORD *)this + 61) = 0;
    *((_DWORD *)this + 124) = 0;
    WTF::fastFree(v24, a2);
  }
  v25 = *((unsigned int *)this + 121);
  if ((_DWORD)v25)
  {
    v151 = (_DWORD **)*((_QWORD *)this + 59);
    v152 = 8 * v25;
    do
    {
      v153 = *v151;
      *v151 = 0;
      if (v153)
      {
        if (v153[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v153 + 8))(v153);
        else
          --v153[2];
      }
      ++v151;
      v152 -= 8;
    }
    while (v152);
  }
  v26 = (WTF *)*((_QWORD *)this + 59);
  if (v26)
  {
    *((_QWORD *)this + 59) = 0;
    *((_DWORD *)this + 120) = 0;
    WTF::fastFree(v26, a2);
  }
  v27 = *((unsigned int *)this + 117);
  if ((_DWORD)v27)
  {
    v75 = (WebCore::RTCDataChannel **)*((_QWORD *)this + 57);
    v76 = 8 * v27;
    do
    {
      v77 = *v75;
      *v75 = 0;
      if (v77)
      {
        if (*((_DWORD *)v77 + 6) == 1)
        {
          WebCore::RTCDataChannel::~RTCDataChannel(v77, a2);
          bmalloc::api::isoDeallocate(v78, v79);
        }
        else
        {
          --*((_DWORD *)v77 + 6);
        }
      }
      ++v75;
      v76 -= 8;
    }
    while (v76);
  }
  v28 = (WTF *)*((_QWORD *)this + 57);
  if (v28)
  {
    *((_QWORD *)this + 57) = 0;
    *((_DWORD *)this + 116) = 0;
    WTF::fastFree(v28, a2);
  }
  WTF::Vector<std::unique_ptr<WebCore::DetachedRTCDataChannel>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 440, (WTF::StringImpl *)a2);
  v30 = *((unsigned int *)this + 105);
  if ((_DWORD)v30)
  {
    v154 = (WebCore::OffscreenCanvas **)*((_QWORD *)this + 51);
    v155 = 8 * v30;
    do
    {
      v156 = *v154;
      *v154 = 0;
      if (v156)
      {
        if (*((_DWORD *)v156 + 6) == 1)
        {
          WebCore::OffscreenCanvas::~OffscreenCanvas(v156);
          bmalloc::api::isoDeallocate(v157, v158);
        }
        else
        {
          --*((_DWORD *)v156 + 6);
        }
      }
      ++v154;
      v155 -= 8;
    }
    while (v155);
  }
  v31 = (WTF *)*((_QWORD *)this + 51);
  if (v31)
  {
    *((_QWORD *)this + 51) = 0;
    *((_DWORD *)this + 104) = 0;
    WTF::fastFree(v31, v29);
  }
  v32 = *((unsigned int *)this + 101);
  if ((_DWORD)v32)
  {
    v110 = (WTF **)*((_QWORD *)this + 49);
    v111 = &v110[v32];
    do
    {
      v112 = *v110;
      *v110 = 0;
      if (v112)
      {
        v113 = *(unsigned int **)v112;
        *(_QWORD *)v112 = 0;
        if (v113)
        {
          v114 = v113 + 2;
          do
          {
            v115 = __ldaxr(v114);
            v116 = v115 - 1;
          }
          while (__stlxr(v116, v114));
          if (!v116)
          {
            atomic_store(1u, v113 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v113 + 8))(v113);
          }
        }
        WTF::fastFree(v112, v29);
      }
      ++v110;
    }
    while (v110 != v111);
  }
  v33 = (WTF *)*((_QWORD *)this + 49);
  if (v33)
  {
    *((_QWORD *)this + 49) = 0;
    *((_DWORD *)this + 100) = 0;
    WTF::fastFree(v33, v29);
  }
  v34 = *((unsigned int *)this + 97);
  if ((_DWORD)v34)
  {
    v95 = (_DWORD **)*((_QWORD *)this + 47);
    for (i = 8 * v34; i; i -= 8)
    {
      v97 = *v95;
      *v95 = 0;
      if (v97)
      {
        if (v97[2] == 1)
        {
          v98 = *((_QWORD *)v97 + 2);
          *((_QWORD *)v97 + 2) = 0;
          if (v98)
          {
            v99 = *(_QWORD *)(v98 + 8);
            if (__ldaxr((unsigned __int8 *)v99))
            {
              __clrex();
              goto LABEL_173;
            }
            if (__stxr(1u, (unsigned __int8 *)v99))
LABEL_173:
              MEMORY[0x19AEA534C](v99);
            v101 = *(_QWORD *)(v99 + 8);
            v102 = v101 - 1;
            *(_QWORD *)(v99 + 8) = v101 - 1;
            if (v101 == 1)
            {
              v106 = *(_QWORD *)(v99 + 16);
              v103 = *(_QWORD *)(v99 + 24);
              *(_QWORD *)(v99 + 24) = 0;
              v104 = v106 != 0;
            }
            else
            {
              v103 = 0;
              v104 = 1;
            }
            v105 = __ldxr((unsigned __int8 *)v99);
            if (v105 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v99))
                goto LABEL_181;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v99);
LABEL_181:
            if (!v102)
            {
              if (v103)
                (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
              if (!v104)
                WTF::fastFree((WTF *)v99, v29);
            }
          }
          if (*(_QWORD *)v97)
          {
            *(_QWORD *)(*(_QWORD *)v97 + 8) = 3;
            *(_QWORD *)v97 = 0;
          }
          bmalloc::api::isoDeallocate((bmalloc::api *)v97, v29);
          goto LABEL_167;
        }
        --v97[2];
      }
LABEL_167:
      ++v95;
    }
  }
  v35 = (WTF *)*((_QWORD *)this + 47);
  if (v35)
  {
    *((_QWORD *)this + 47) = 0;
    *((_DWORD *)this + 96) = 0;
    WTF::fastFree(v35, v29);
  }
  v36 = *((unsigned int *)this + 93);
  v37 = (WTF *)*((_QWORD *)this + 45);
  if (!(_DWORD)v36)
  {
    if (!v37)
      goto LABEL_51;
    goto LABEL_211;
  }
  v117 = 24 * v36;
  do
  {
    if (*((_BYTE *)v37 + 16))
    {
      v118 = *(_QWORD *)v37;
      *(_QWORD *)v37 = 0;
      if (v118)
        (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
    }
    v37 = (WTF *)((char *)v37 + 24);
    v117 -= 24;
  }
  while (v117);
  v37 = (WTF *)*((_QWORD *)this + 45);
  if (v37)
  {
LABEL_211:
    *((_QWORD *)this + 45) = 0;
    *((_DWORD *)this + 92) = 0;
    WTF::fastFree(v37, v29);
  }
LABEL_51:
  v38 = *((unsigned int *)this + 87);
  if ((_DWORD)v38)
  {
    v55 = (WTF::StringImpl **)*((_QWORD *)this + 42);
    v56 = 8 * v38;
    do
    {
      v57 = *v55;
      *v55 = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
          WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v29);
        else
          *(_DWORD *)v57 -= 2;
      }
      ++v55;
      v56 -= 8;
    }
    while (v56);
  }
  v39 = (WTF *)*((_QWORD *)this + 42);
  if (v39)
  {
    *((_QWORD *)this + 42) = 0;
    *((_DWORD *)this + 86) = 0;
    WTF::fastFree(v39, v29);
  }
  v40 = *((unsigned int *)this + 83);
  if ((_DWORD)v40)
  {
    v58 = (WTF::StringImpl **)*((_QWORD *)this + 40);
    v59 = 8 * v40;
    do
    {
      v60 = *v58;
      *v58 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v29);
        else
          *(_DWORD *)v60 -= 2;
      }
      ++v58;
      v59 -= 8;
    }
    while (v59);
  }
  v41 = (WTF *)*((_QWORD *)this + 40);
  if (v41)
  {
    *((_QWORD *)this + 40) = 0;
    *((_DWORD *)this + 82) = 0;
    WTF::fastFree(v41, v29);
  }
  v42 = *((unsigned int *)this + 79);
  if ((_DWORD)v42)
  {
    v107 = (WTF::DeferrableRefCountedBase **)*((_QWORD *)this + 38);
    v108 = 8 * v42;
    do
    {
      v109 = *v107;
      *v107 = 0;
      if (v109)
        WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v109);
      ++v107;
      v108 -= 8;
    }
    while (v108);
  }
  v43 = (WTF *)*((_QWORD *)this + 38);
  if (v43)
  {
    *((_QWORD *)this + 38) = 0;
    *((_DWORD *)this + 78) = 0;
    WTF::fastFree(v43, v29);
  }
  v44 = *((unsigned int *)this + 71);
  if ((_DWORD)v44)
  {
    v80 = (WTF **)*((_QWORD *)this + 34);
    v81 = 8 * v44;
    do
    {
      v82 = *v80;
      *v80 = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 1)
        {
          v83 = (_DWORD *)*((_QWORD *)v82 + 2);
          *((_QWORD *)v82 + 2) = 0;
          if (v83)
          {
            if (*v83 == 1)
              JSC::ArrayBufferView::operator delete();
            else
              --*v83;
          }
          WTF::fastFree(v82, v29);
        }
        else
        {
          --*(_DWORD *)v82;
        }
      }
      ++v80;
      v81 -= 8;
    }
    while (v81);
  }
  v45 = (WTF *)*((_QWORD *)this + 34);
  if (v45)
  {
    *((_QWORD *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    WTF::fastFree(v45, v29);
  }
  v46 = *((unsigned int *)this + 67);
  if ((_DWORD)v46)
  {
    v47 = (WTF::StringImpl **)*((_QWORD *)this + 32);
    v48 = 16 * v46;
    do
    {
      v49 = *v47;
      *v47 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
          WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v29);
        else
          *(_DWORD *)v49 -= 2;
      }
      v47 += 2;
      v48 -= 16;
    }
    while (v48);
  }
  v50 = (WTF *)*((_QWORD *)this + 32);
  if (v50)
  {
    *((_QWORD *)this + 32) = 0;
    *((_DWORD *)this + 66) = 0;
    WTF::fastFree(v50, v29);
  }
  v51 = (uint64_t *)*((_QWORD *)this + 17);
  if (v51)
  {
    v159 = (uint64_t)this + 120;
    v84 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v51, &v159);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v51, v84);
  }
  v52 = (WTF *)*((_QWORD *)this + 16);
  if (v52 != (WebCore::CloneDeserializer *)((char *)this + 144) && v52)
    WTF::fastFree(v52, v29);
  v53 = (uint64_t *)*((_QWORD *)this + 5);
  if (v53)
  {
    v159 = (uint64_t)this + 24;
    v85 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v53, &v159);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v53, v85);
  }
  v54 = (WTF *)*((_QWORD *)this + 4);
  if (v54 != (WebCore::CloneDeserializer *)((char *)this + 48))
  {
    if (v54)
      WTF::fastFree(v54, v29);
  }
}

void WebCore::SerializedScriptValue::~SerializedScriptValue(WebCore::SerializedScriptValue *this, void *a2)
{
  WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue *)((char *)this + 8), a2);
}

{
  WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue *)((char *)this + 8), a2);
}

void WebCore::SerializedScriptValue::Internals::~Internals(WebCore::SerializedScriptValue::Internals *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  WTF *v27;
  unsigned int v28;
  WTF *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  WebCore::URLKeepingBlobAlive *v39;
  uint64_t v40;
  uint64_t v41;
  WTF **v42;
  WTF **v43;
  WTF *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int **v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  WTF *v56;
  void *v57;
  WTF *v58;
  JSC::ArrayBufferContents *v59;
  uint64_t v60;
  uint64_t v61;
  JSC::ArrayBufferContents *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int **v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  WTF *v70;
  void *v71;
  WTF *v72;
  WebCore::MediaStreamTrackDataHolder **v73;
  uint64_t v74;
  WebCore::MediaStreamTrackDataHolder *v75;
  WTF *v76;
  void *v77;
  unsigned int **v78;
  unsigned int **v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int **v84;
  unsigned int **v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  WTF *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  WTF *v101;
  _DWORD **v102;
  uint64_t v103;
  _DWORD *v104;
  WebCore::OffscreenCanvas **v105;
  uint64_t v106;
  WebCore::OffscreenCanvas *v107;
  bmalloc::api *v108;
  void *v109;
  uint64_t *v110;
  uint64_t v111;
  WTF *v112;
  WTF *v113;

  v3 = *((unsigned int *)this + 59);
  if ((_DWORD)v3)
  {
    v39 = (WebCore::URLKeepingBlobAlive *)*((_QWORD *)this + 28);
    v40 = 72 * v3;
    do
    {
      WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive(v39);
      v39 = (WebCore::URLKeepingBlobAlive *)(v41 + 72);
      v40 -= 72;
    }
    while (v40);
  }
  v4 = (WTF *)*((_QWORD *)this + 28);
  if (v4)
  {
    *((_QWORD *)this + 28) = 0;
    *((_DWORD *)this + 58) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v5)
  {
    v6 = *((unsigned int *)v5 + 3);
    if ((_DWORD)v6)
    {
      v65 = *(unsigned int ***)v5;
      v66 = *(_QWORD *)v5 + 8 * v6;
      do
      {
        v67 = *v65;
        *v65 = 0;
        if (v67)
        {
          do
          {
            v68 = __ldaxr(v67);
            v69 = v68 - 1;
          }
          while (__stlxr(v69, v67));
          if (!v69)
          {
            atomic_store(1u, v67);
            v113 = v5;
            v70 = (WTF *)MEMORY[0x19AEA39B4](v67);
            WTF::fastFree(v70, v71);
            v5 = v113;
          }
        }
        ++v65;
      }
      while (v65 != (unsigned int **)v66);
    }
    v7 = *(WTF **)v5;
    if (*(_QWORD *)v5)
    {
      *(_QWORD *)v5 = 0;
      *((_DWORD *)v5 + 2) = 0;
      v72 = v5;
      WTF::fastFree(v7, a2);
      v5 = v72;
    }
    WTF::fastFree(v5, a2);
  }
  v8 = (WTF *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v8)
  {
    v9 = *((unsigned int *)v8 + 3);
    if ((_DWORD)v9)
    {
      v51 = *(unsigned int ***)v8;
      v52 = *(_QWORD *)v8 + 8 * v9;
      do
      {
        v53 = *v51;
        *v51 = 0;
        if (v53)
        {
          do
          {
            v54 = __ldaxr(v53);
            v55 = v54 - 1;
          }
          while (__stlxr(v55, v53));
          if (!v55)
          {
            atomic_store(1u, v53);
            v112 = v8;
            v56 = (WTF *)MEMORY[0x19AEA3D2C](v53);
            WTF::fastFree(v56, v57);
            v8 = v112;
          }
        }
        ++v51;
      }
      while (v51 != (unsigned int **)v52);
    }
    v10 = *(WTF **)v8;
    if (*(_QWORD *)v8)
    {
      *(_QWORD *)v8 = 0;
      *((_DWORD *)v8 + 2) = 0;
      v58 = v8;
      WTF::fastFree(v10, a2);
      v8 = v58;
    }
    WTF::fastFree(v8, a2);
  }
  v11 = *((unsigned int *)this + 51);
  if ((_DWORD)v11)
  {
    v110 = (uint64_t *)*((_QWORD *)this + 24);
    v111 = 8 * v11;
    do
    {
      v110 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v110, a2)+ 1;
      v111 -= 8;
    }
    while (v111);
  }
  v12 = (WTF *)*((_QWORD *)this + 24);
  if (v12)
  {
    *((_QWORD *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = *((unsigned int *)this + 47);
  if ((_DWORD)v13)
  {
    v105 = (WebCore::OffscreenCanvas **)*((_QWORD *)this + 22);
    v106 = 8 * v13;
    do
    {
      v107 = *v105;
      *v105 = 0;
      if (v107)
      {
        if (*((_DWORD *)v107 + 6) == 1)
        {
          WebCore::OffscreenCanvas::~OffscreenCanvas(v107);
          bmalloc::api::isoDeallocate(v108, v109);
        }
        else
        {
          --*((_DWORD *)v107 + 6);
        }
      }
      ++v105;
      v106 -= 8;
    }
    while (v106);
  }
  v14 = (WTF *)*((_QWORD *)this + 22);
  if (v14)
  {
    *((_QWORD *)this + 22) = 0;
    *((_DWORD *)this + 46) = 0;
    WTF::fastFree(v14, a2);
  }
  v15 = *((unsigned int *)this + 43);
  if ((_DWORD)v15)
  {
    v42 = (WTF **)*((_QWORD *)this + 20);
    v43 = &v42[v15];
    do
    {
      v44 = *v42;
      *v42 = 0;
      if (v44)
      {
        v45 = *(unsigned int **)v44;
        *(_QWORD *)v44 = 0;
        if (v45)
        {
          v46 = v45 + 2;
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
          {
            atomic_store(1u, v45 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v45 + 8))(v45);
          }
        }
        WTF::fastFree(v44, a2);
      }
      ++v42;
    }
    while (v42 != v43);
  }
  v16 = (WTF *)*((_QWORD *)this + 20);
  if (v16)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v16, a2);
  }
  v17 = *((unsigned int *)this + 39);
  v18 = (WTF *)*((_QWORD *)this + 18);
  if (!(_DWORD)v17)
  {
    if (!v18)
      goto LABEL_25;
    goto LABEL_75;
  }
  v49 = 24 * v17;
  do
  {
    if (*((_BYTE *)v18 + 16))
    {
      v50 = *(_QWORD *)v18;
      *(_QWORD *)v18 = 0;
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    }
    v18 = (WTF *)((char *)v18 + 24);
    v49 -= 24;
  }
  while (v49);
  v18 = (WTF *)*((_QWORD *)this + 18);
  if (v18)
  {
LABEL_75:
    *((_QWORD *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v18, a2);
  }
LABEL_25:
  v19 = (WTF *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v19)
  {
    v20 = *((unsigned int *)v19 + 3);
    if ((_DWORD)v20)
    {
      v59 = *(JSC::ArrayBufferContents **)v19;
      v60 = 56 * v20;
      do
      {
        JSC::ArrayBufferContents::~ArrayBufferContents(v59);
        v59 = (JSC::ArrayBufferContents *)(v61 + 56);
        v60 -= 56;
      }
      while (v60);
    }
    v21 = *(WTF **)v19;
    if (*(_QWORD *)v19)
    {
      *(_QWORD *)v19 = 0;
      *((_DWORD *)v19 + 2) = 0;
      WTF::fastFree(v21, a2);
    }
    WTF::fastFree(v19, a2);
  }
  v22 = *((unsigned int *)this + 33);
  if ((_DWORD)v22)
  {
    v73 = (WebCore::MediaStreamTrackDataHolder **)*((_QWORD *)this + 15);
    v74 = 8 * v22;
    do
    {
      v75 = *v73;
      *v73 = 0;
      if (v75)
      {
        WebCore::MediaStreamTrackDataHolder::~MediaStreamTrackDataHolder(v75, a2);
        WTF::fastFree(v76, v77);
      }
      ++v73;
      v74 -= 8;
    }
    while (v74);
  }
  v23 = (WTF *)*((_QWORD *)this + 15);
  if (v23)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v23, a2);
  }
  v24 = *((unsigned int *)this + 29);
  if ((_DWORD)v24)
  {
    v102 = (_DWORD **)*((_QWORD *)this + 13);
    v103 = 8 * v24;
    do
    {
      v104 = *v102;
      *v102 = 0;
      if (v104)
      {
        if (v104[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v104 + 8))(v104);
        else
          --v104[2];
      }
      ++v102;
      v103 -= 8;
    }
    while (v103);
  }
  v25 = (WTF *)*((_QWORD *)this + 13);
  if (v25)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v25, a2);
  }
  v26 = *((unsigned int *)this + 25);
  if ((_DWORD)v26)
  {
    v78 = (unsigned int **)*((_QWORD *)this + 11);
    v79 = &v78[v26];
    do
    {
      v80 = *v78;
      *v78 = 0;
      if (v80)
      {
        v81 = v80 + 2;
        do
        {
          v82 = __ldaxr(v81);
          v83 = v82 - 1;
        }
        while (__stlxr(v83, v81));
        if (!v83)
        {
          atomic_store(1u, v80 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v80 + 8))(v80);
        }
      }
      ++v78;
    }
    while (v78 != v79);
  }
  v27 = (WTF *)*((_QWORD *)this + 11);
  if (v27)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v27, a2);
  }
  v28 = *((_DWORD *)this + 21);
  if (v28)
  {
    v84 = (unsigned int **)*((_QWORD *)this + 9);
    v85 = &v84[13 * v28];
    do
    {
      v86 = *v84;
      *v84 = 0;
      if (v86)
      {
        v87 = v86 + 2;
        do
        {
          v88 = __ldaxr(v87);
          v89 = v88 - 1;
        }
        while (__stlxr(v89, v87));
        if (!v89)
        {
          atomic_store(1u, v86 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v86 + 8))(v86);
        }
      }
      v84 += 13;
    }
    while (v84 != v85);
  }
  v29 = (WTF *)*((_QWORD *)this + 9);
  if (v29)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v29, a2);
  }
  v30 = *((unsigned int *)this + 17);
  if ((_DWORD)v30)
  {
    v90 = (uint64_t *)*((_QWORD *)this + 7);
    v91 = &v90[v30];
    do
    {
      v92 = *v90;
      *v90 = 0;
      if (v92)
      {
        do
        {
          v93 = __ldaxr((unsigned int *)v92);
          v94 = v93 - 1;
        }
        while (__stlxr(v94, (unsigned int *)v92));
        if (!v94)
        {
          atomic_store(1u, (unsigned int *)v92);
          v95 = *(WTF **)(v92 + 40);
          if (v95)
          {
            *(_QWORD *)(v92 + 40) = 0;
            *(_DWORD *)(v92 + 48) = 0;
            WTF::fastFree(v95, a2);
          }
          WTF::fastFree((WTF *)v92, a2);
        }
      }
      ++v90;
    }
    while (v90 != v91);
  }
  v31 = (WTF *)*((_QWORD *)this + 7);
  if (v31)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v31, a2);
  }
  v32 = *((unsigned int *)this + 13);
  if ((_DWORD)v32)
  {
    v96 = (uint64_t *)*((_QWORD *)this + 5);
    v97 = &v96[v32];
    do
    {
      v98 = *v96;
      *v96 = 0;
      if (v98)
      {
        do
        {
          v99 = __ldaxr((unsigned int *)v98);
          v100 = v99 - 1;
        }
        while (__stlxr(v100, (unsigned int *)v98));
        if (!v100)
        {
          atomic_store(1u, (unsigned int *)v98);
          v101 = *(WTF **)(v98 + 40);
          if (v101)
          {
            *(_QWORD *)(v98 + 40) = 0;
            *(_DWORD *)(v98 + 48) = 0;
            WTF::fastFree(v101, a2);
          }
          WTF::fastFree((WTF *)v98, a2);
        }
      }
      ++v96;
    }
    while (v96 != v97);
  }
  v33 = (WTF *)*((_QWORD *)this + 5);
  if (v33)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v33, a2);
  }
  WTF::Vector<std::unique_ptr<WebCore::DetachedRTCDataChannel>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, (WTF::StringImpl *)a2);
  v35 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v35)
  {
    v36 = *((unsigned int *)v35 + 3);
    if ((_DWORD)v36)
    {
      v62 = *(JSC::ArrayBufferContents **)v35;
      v63 = 56 * v36;
      do
      {
        JSC::ArrayBufferContents::~ArrayBufferContents(v62);
        v62 = (JSC::ArrayBufferContents *)(v64 + 56);
        v63 -= 56;
      }
      while (v63);
    }
    v37 = *(WTF **)v35;
    if (*(_QWORD *)v35)
    {
      *(_QWORD *)v35 = 0;
      *((_DWORD *)v35 + 2) = 0;
      WTF::fastFree(v37, v34);
    }
    WTF::fastFree(v35, v34);
  }
  v38 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v38, v34);
  }
}

uint64_t WTF::Vector<std::unique_ptr<WebCore::DetachedRTCDataChannel>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  WTF *v12;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *(WTF **)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
      {
        v9 = (WTF::StringImpl *)*((_QWORD *)v8 + 5);
        *((_QWORD *)v8 + 5) = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
          {
            v11 = v8;
            WTF::StringImpl::destroy(v9, a2);
            v8 = v11;
          }
          else
          {
            *(_DWORD *)v9 -= 2;
          }
        }
        v10 = (WTF::StringImpl *)*((_QWORD *)v8 + 2);
        *((_QWORD *)v8 + 2) = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
          {
            v12 = v8;
            WTF::StringImpl::destroy(v10, a2);
            v8 = v12;
          }
          else
          {
            *(_DWORD *)v10 -= 2;
          }
        }
        WTF::fastFree(v8, a2);
      }
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WebCore::BackgroundPainter::paintFillLayers(uint64_t result, const WebCore::CachedImageClient *a2, uint64_t a3, uint64_t *a4, int a5, unsigned int a6, const WebCore::CachedImageClient *a7)
{
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t *v18;
  char v19;
  char v20;
  uint64_t v21;
  int v22;
  char v24;
  char v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t *v37;
  __int128 v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  _BYTE v45[71];
  char v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int v49[10];

  v37 = (unint64_t *)a2;
  v9 = result;
  v10 = 0;
  v42 = a3;
  v43 = (WTF *)v45;
  v44 = 8;
  v11 = a3;
  while (1)
  {
    v12 = HIDWORD(v44);
    if (HIDWORD(v44) == (_DWORD)v44)
    {
      result = WTF::Vector<WebCore::FillLayer const*,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FillLayer const*&>((uint64_t)&v43, (unint64_t)&v42);
    }
    else
    {
      *((_QWORD *)v43 + HIDWORD(v44)) = v11;
      HIDWORD(v44) = v12 + 1;
    }
    v13 = v42;
    v14 = *(_DWORD *)(v42 + 60);
    if ((v14 & 0x1F) != 1)
      v10 = 1;
    if (v42 == a3)
    {
      v47 = v49;
      v48 = 4;
      v15 = a3;
      *(_QWORD *)&v41 = a3;
      do
      {
        v16 = HIDWORD(v48);
        if (HIDWORD(v48) == (_DWORD)v48)
        {
          WTF::Vector<WebCore::FillLayer const*,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FillLayer const*&>((uint64_t)&v47, (unint64_t)&v41);
        }
        else
        {
          *(_QWORD *)&v47[2 * HIDWORD(v48)] = v15;
          HIDWORD(v48) = v16 + 1;
        }
        v15 = *(_QWORD *)(v41 + 8);
        *(_QWORD *)&v41 = v15;
      }
      while (v15);
      v17 = HIDWORD(v48);
      result = (uint64_t)v47;
      if (HIDWORD(v48))
      {
        v18 = (uint64_t *)&v47[2 * (HIDWORD(v48) - 1)];
        v19 = 4;
        do
        {
          v20 = 0;
          v21 = *v18;
          if (v19)
          {
            v22 = (*(unsigned __int8 *)(v21 + 58) >> 2) & 7;
            if (v22 == 2 || v19 == 2)
              v24 = 2;
            else
              v24 = 4;
            if (v22 == 1)
              v24 = 1;
            if (v19 == 1)
              v25 = 1;
            else
              v25 = v24;
            if (v22)
              v20 = v25;
            else
              v20 = 0;
          }
          *(_DWORD *)(v21 + 60) = *(_DWORD *)(v21 + 60) & 0xFCFFFFFF | ((v20 & 3) << 24);
          --v18;
          v19 = v20;
          --v17;
        }
        while (v17);
      }
      if (v49 != (unsigned int *)result && result)
      {
        v47 = 0;
        LODWORD(v48) = 0;
        result = WTF::fastFree((WTF *)result, a2);
      }
      v14 = *(_DWORD *)(v13 + 60);
    }
    if ((HIBYTE(v14) & 3) != ((*(unsigned __int16 *)(v13 + 58) >> 2) & 7))
      goto LABEL_33;
    result = *(_QWORD *)(v42 + 16);
    if (!result)
      goto LABEL_33;
    a2 = *(const WebCore::CachedImageClient **)v9;
    v32 = (*(unsigned __int16 *)(v42 + 58) >> 7) & 0xF;
    if (v32 < 2)
      break;
    if (v32 == 2 && (*(_DWORD *)(v42 + 60) & 0x1F) == 1)
    {
      result = (*(uint64_t (**)(uint64_t, const WebCore::CachedImageClient *))(*(_QWORD *)result + 224))(result, a2);
      if ((_DWORD)result)
      {
        result = *(_QWORD *)(v42 + 16);
        a2 = *(const WebCore::CachedImageClient **)v9;
        break;
      }
    }
LABEL_33:
    v11 = *(_QWORD *)(v42 + 8);
    v42 = v11;
    if (!v11)
      goto LABEL_34;
  }
  result = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)result + 208))(result, *(float *)(*((_QWORD *)a2 + 13) + 184));
  if (!(_DWORD)result
    || *(unsigned __int16 *)(v42 + 56) > 0xFFu
    || *(_WORD *)(v42 + 56)
    || (*(_DWORD *)(v42 + 60) & 0x1F) != 1)
  {
    goto LABEL_33;
  }
  v34 = *(_QWORD *)v9;
  *(_QWORD *)&v41 = *a4;
  v48 = 0;
  *(_QWORD *)v49 = 1;
  v47 = 0;
  result = WebCore::BackgroundPainter::boxShadowShouldBeAppliedToBackground(v34, (uint64_t)&v41, a5, (WebCore::InlineIterator::BoxIterator *)&v47);
  v35 = result;
  if (v49[0] != -1)
    result = ((uint64_t (*)(char *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v49[0]])(&v46, &v47);
  if (v35)
    goto LABEL_33;
LABEL_34:
  v26 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 80);
  v27 = HIDWORD(v44);
  if ((v10 & 1) == 0)
  {
    v28 = 0;
    goto LABEL_36;
  }
  if (HIDWORD(v44))
  {
    v36 = *((_QWORD *)v43 + HIDWORD(v44) - 1);
    v48 = 0;
    *(_QWORD *)v49 = 1;
    v47 = 0;
    v41 = 0uLL;
    WebCore::BackgroundPainter::paintFillLayer((const WebCore::CachedImageClient **)v9, v37, v36, a4, a5, (unsigned int *)&v47, &v41, a6, a7, 1);
    if (v49[0] != -1)
      ((void (*)(__int128 *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v49[0]])(&v41, &v47);
    (*(void (**)(uint64_t, float))(*(_QWORD *)v26 + 592))(v26, 1.0);
    v28 = 2;
    v27 = HIDWORD(v44);
LABEL_36:
    if (v27)
    {
      v29 = 8 * v27;
      v30 = (char *)v43 - 8;
      do
      {
        v31 = *(_QWORD *)&v30[v29];
        v48 = 0;
        *(_QWORD *)v49 = 1;
        v47 = 0;
        v41 = 0uLL;
        WebCore::BackgroundPainter::paintFillLayer((const WebCore::CachedImageClient **)v9, v37, v31, a4, a5, (unsigned int *)&v47, &v41, a6, a7, v28);
        if (v49[0] != -1)
          ((void (*)(__int128 *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v49[0]])(&v41, &v47);
        v29 -= 8;
      }
      while (v29);
    }
    if ((v10 & 1) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 608))(v26);
    result = (uint64_t)v43;
    if (v45 != (_BYTE *)v43)
    {
      if (v43)
      {
        v43 = 0;
        LODWORD(v44) = 0;
        return WTF::fastFree((WTF *)result, a2);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::BackgroundPainter::paintBackground(const WebCore::CachedImageClient *a1, WTF **a2, int a3)
{
  uint64_t v3;
  WTF *v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  WebCore::RenderElement *v10;
  int v11;
  WebCore::RenderElement *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::RenderElement *v16;
  WebCore::RenderObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  WTF *v27;
  uint64_t *v28;
  char v29;
  char v30;
  uint64_t v31;
  int v32;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  BOOL v47;
  uint64_t v48;
  _BOOL4 ShouldBeAppliedToBackground;
  void *v50;
  WTF *v51;
  WebCore::FillLayer *v52;
  unint64_t v53;
  uint64_t (*v54)();
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int *v58;
  unsigned int v59;
  BOOL v60;
  float v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int *v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t *v77;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  WTF *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  WTF *v86;
  uint64_t v87;
  unsigned int v88[8];
  _QWORD v89[2];

  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 8);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 1272) == v8)
    return (uint64_t)WebCore::BackgroundPainter::paintRootBoxFillLayers(a1);
  if ((*(_BYTE *)(v7 + 45) & 1) == 0
    && (*(_WORD *)(v8 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24)
    && (WebCore::RenderElement::shouldApplyAnyContainment(*(WebCore::RenderElement **)a1) & 1) == 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8) + 1272)
                   + 64) & 0xFFFFFFFFFFFFLL;
    if (v3)
    {
      if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40)
                                                          + 8)
                                              + 1272)
                                  + 64) & 0xFFFFFFFFFFFFLL)
                     + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        goto LABEL_167;
      }
      if ((WebCore::RenderElement::shouldApplyAnyContainment((WebCore::RenderElement *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8) + 1272) + 64) & 0xFFFFFFFFFFFFLL)) & 1) == 0)
      {
        WebCore::RenderStyle::visitedDependentColor(v3 + 80, 61, 0, (uint64_t *)&v82);
        v51 = v82;
        if (((unint64_t)v82 & 0x8000000000000) != 0)
        {
          v73 = (unsigned int *)((unint64_t)v82 & 0xFFFFFFFFFFFFLL);
          if (*(float *)(((unint64_t)v82 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
          {
            v74 = 1;
            goto LABEL_159;
          }
        }
        else if ((_BYTE)v82)
        {
          goto LABEL_5;
        }
        v52 = *(WebCore::FillLayer **)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 16) + 8);
        if (*((_QWORD *)v52 + 1))
        {
          result = WebCore::FillLayer::hasImageInAnyLayer(v52);
          v51 = v82;
          v53 = (unint64_t)v82 & 0x8000000000000;
        }
        else
        {
          v53 = (unint64_t)v82 & 0x8000000000000;
          if (*((_QWORD *)v52 + 2))
            v54 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
          else
            v54 = 0;
          result = v54 != 0;
        }
        if (!v53)
          goto LABEL_99;
        v74 = result;
        v73 = (unsigned int *)((unint64_t)v51 & 0xFFFFFFFFFFFFLL);
        do
        {
LABEL_159:
          v75 = __ldaxr(v73);
          v76 = v75 - 1;
        }
        while (__stlxr(v76, v73));
        if (!v76)
        {
          atomic_store(1u, v73);
          result = WTF::fastFree((WTF *)v73, v50);
          if ((v74 & 1) != 0)
            goto LABEL_5;
          goto LABEL_100;
        }
        result = v74;
LABEL_99:
        if ((result & 1) != 0)
          goto LABEL_5;
LABEL_100:
        v55 = *(_QWORD *)(v7 + 32);
        if (v55)
          v55 = *(_QWORD *)(v55 + 8);
        if (v55 == v3)
          return result;
      }
    }
  }
LABEL_5:
  v10 = *(WebCore::RenderElement **)a1;
  v86 = *a2;
  v11 = *((_DWORD *)v10 + 5) & 0x60000000;
  if (v11 == 0x20000000)
  {
    if ((*(unsigned int (**)(WebCore::RenderElement *, WTF **))(*(_QWORD *)v10 + 296))(v10, &v86))
      v11 = 0x40000000;
    else
      v11 = 1610612736;
    *((_DWORD *)v10 + 5) = *((_DWORD *)v10 + 5) & 0x9FFFFFFF | v11;
  }
  if (v11 == 0x40000000)
  {
    v56 = *(_QWORD *)a1;
    *(_QWORD *)&v81 = *a2;
    v83 = 0;
    v82 = 0;
    v84 = 1;
    result = WebCore::BackgroundPainter::boxShadowShouldBeAppliedToBackground(v56, (uint64_t)&v81, a3, (WebCore::InlineIterator::BoxIterator *)&v82);
    v57 = result;
    if ((_DWORD)v84 != -1)
      result = ((uint64_t (*)(_QWORD *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v84])(v89, &v82);
    if (!v57)
      return result;
  }
  v12 = *(WebCore::RenderElement **)a1;
  v13 = (_QWORD *)(*(_QWORD *)a1 + 80);
  v77 = (uint64_t *)a2;
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 104) + 320) + 20))
  {
    v14 = *(_QWORD *)(*((_QWORD *)v12 + 11) + 16);
    v82 = (WTF *)v89;
    v83 = (uint64_t)v89;
    v84 = (uint64_t)v89;
    v85 = v89;
    v15 = *(unsigned int *)(v14 + 24);
    if ((_DWORD)v15 != -1)
    {
      *(_QWORD *)&v81 = &v82;
      ((void (*)(WTF **__return_ptr, __int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v15])(&v86, &v81, v14 + 16);
      if ((_DWORD)v87 == 1)
      {
        v43 = *(_QWORD *)(*((_QWORD *)v12 + 14) + 328);
        v80 = v43;
        if ((v43 & 0x8000000000000) != 0)
        {
          v44 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFLL);
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 + 1, v44));
        }
        goto LABEL_16;
      }
      v89[0] = *((_QWORD *)v12 + 14) + 328;
      v82 = (WTF *)v89;
      v83 = (uint64_t)v89;
      v84 = (uint64_t)v89;
      v85 = v89;
      if ((_DWORD)v87 != -1)
      {
        *(_QWORD *)&v81 = &v82;
        ((void (*)(uint64_t *__return_ptr, __int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v87])(&v80, &v81, &v86);
LABEL_16:
        if ((_DWORD)v87 != -1)
          ((void (*)(WTF **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v87])(&v82, &v86);
        if ((*((_DWORD *)v12 + 31) & 0xC00) == 0x800 && (*(_BYTE *)(*((_QWORD *)v12 + 13) + 239) & 2) == 0)
        {
          WebCore::RenderStyle::colorResolvingCurrentColor(v13, 61, 1, (WebCore::Color *)&v82);
          if (v82 == (WTF *)0x1104000000000000)
          {
            v79 = 0;
            if (v80)
            {
              v79 = v80;
              v80 = 0;
            }
          }
          else
          {
            if ((v80 & 0x8000000000000) != 0)
              v61 = *(float *)((v80 & 0xFFFFFFFFFFFFLL) + 0x10);
            else
              v61 = (float)v80 / 255.0;
            WebCore::Color::colorWithAlpha((uint64_t)&v82, v61, &v79);
            if (((unint64_t)v82 & 0x8000000000000) != 0)
            {
              v62 = (unsigned int *)((unint64_t)v82 & 0xFFFFFFFFFFFFLL);
              do
              {
                v63 = __ldaxr(v62);
                v64 = v63 - 1;
              }
              while (__stlxr(v64, v62));
              if (!v64)
              {
                atomic_store(1u, v62);
                WTF::fastFree((WTF *)v62, v16);
              }
            }
          }
          if ((v80 & 0x8000000000000) == 0)
            goto LABEL_20;
          v58 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFLL);
          do
          {
            v59 = __ldaxr(v58);
            v60 = --v59 == 0;
          }
          while (__stlxr(v59, v58));
          goto LABEL_115;
        }
        v79 = v80;
        goto LABEL_20;
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_131;
  }
  WebCore::RenderStyle::visitedDependentColor((uint64_t)v13, 61, 0, (uint64_t *)&v82);
  WebCore::RenderStyle::colorByApplyingColorFilter((uint64_t)v13, (const WebCore::Color *)&v82, (unint64_t *)&v79);
  if (((unint64_t)v82 & 0x8000000000000) != 0)
  {
    v58 = (unsigned int *)((unint64_t)v82 & 0xFFFFFFFFFFFFLL);
    do
    {
      v70 = __ldaxr(v58);
      v60 = --v70 == 0;
    }
    while (__stlxr(v70, v58));
LABEL_115:
    if (v60)
    {
      atomic_store(1u, v58);
      WTF::fastFree((WTF *)v58, v16);
    }
  }
LABEL_20:
  v17 = *(WebCore::RenderObject **)a1;
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 8) + 40) + 8);
  LOBYTE(v3) = 2;
  if ((*(_QWORD *)(*(_QWORD *)(v18 + 680) + 688) & 0x2000000000) != 0
    && WebCore::Color::isWhiteColor((WebCore::Color *)&v79, v16)
    && WebCore::RenderObject::useDarkAppearance(v17))
  {
    v66 = *(_QWORD *)(v18 + 528);
    if (v66)
    {
      v67 = *(_QWORD *)(v66 + 8);
      if (v67)
      {
        v68 = *(_QWORD *)(v67 + 288);
        if (v68)
        {
          v69 = *(_DWORD *)(v68 + 8);
          *(_DWORD *)(v68 + 8) = v69 + 1;
          if (*(_BYTE *)(v68 + 1369))
            LOBYTE(v3) = 8;
          else
            LOBYTE(v3) = 7;
          if (v69)
            *(_DWORD *)(v68 + 8) = v69;
          else
            (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
        }
      }
    }
  }
  v5 = 0;
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16) + 8);
  v4 = (WTF *)&v84;
  v82 = (WTF *)&v84;
  v83 = 8;
  v89[0] = v19;
  v20 = v19;
  while (1)
  {
    v21 = HIDWORD(v83);
    if (HIDWORD(v83) == (_DWORD)v83)
    {
      WTF::Vector<WebCore::FillLayer const*,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FillLayer const*&>((uint64_t)&v82, (unint64_t)v89);
    }
    else
    {
      *((_QWORD *)v82 + HIDWORD(v83)) = v20;
      HIDWORD(v83) = v21 + 1;
    }
    v22 = v89[0];
    v23 = *(_DWORD *)(v89[0] + 60);
    if ((v23 & 0x1F) != 1)
      v5 = 1;
    if (v89[0] == v19)
    {
      v86 = (WTF *)v88;
      v87 = 4;
      v24 = v19;
      *(_QWORD *)&v81 = v19;
      do
      {
        v25 = HIDWORD(v87);
        if (HIDWORD(v87) == (_DWORD)v87)
        {
          WTF::Vector<WebCore::FillLayer const*,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FillLayer const*&>((uint64_t)&v86, (unint64_t)&v81);
        }
        else
        {
          *((_QWORD *)v86 + HIDWORD(v87)) = v24;
          HIDWORD(v87) = v25 + 1;
        }
        v24 = *(_QWORD *)(v81 + 8);
        *(_QWORD *)&v81 = v24;
      }
      while (v24);
      v26 = HIDWORD(v87);
      v27 = v86;
      if (HIDWORD(v87))
      {
        v28 = (uint64_t *)((char *)v86 + 8 * (HIDWORD(v87) - 1));
        v29 = 4;
        do
        {
          v30 = 0;
          v31 = *v28;
          if (v29)
          {
            v32 = (*(unsigned __int8 *)(v31 + 58) >> 2) & 7;
            if (v32 == 2 || v29 == 2)
              v34 = 2;
            else
              v34 = 4;
            if (v32 == 1)
              v34 = 1;
            if (v29 == 1)
              v35 = 1;
            else
              v35 = v34;
            if (v32)
              v30 = v35;
            else
              v30 = 0;
          }
          *(_DWORD *)(v31 + 60) = *(_DWORD *)(v31 + 60) & 0xFCFFFFFF | ((v30 & 3) << 24);
          --v28;
          v29 = v30;
          --v26;
        }
        while (v26);
      }
      if (v88 != (unsigned int *)v27 && v27)
      {
        v86 = 0;
        LODWORD(v87) = 0;
        WTF::fastFree(v27, v16);
      }
      v23 = *(_DWORD *)(v22 + 60);
    }
    if ((HIBYTE(v23) & 3) != ((*(unsigned __int16 *)(v22 + 58) >> 2) & 7))
      goto LABEL_53;
    v36 = *(_QWORD *)(v89[0] + 16);
    if (!v36)
      goto LABEL_53;
    v16 = *(WebCore::RenderElement **)a1;
    v46 = (*(unsigned __int16 *)(v89[0] + 58) >> 7) & 0xF;
    if (v46 < 2)
      break;
    v47 = v46 == 2 && (*(_DWORD *)(v89[0] + 60) & 0x1F) == 1;
    if (v47 && (*(unsigned int (**)(uint64_t, WebCore::RenderElement *))(*(_QWORD *)v36 + 224))(v36, v16))
    {
      v36 = *(_QWORD *)(v89[0] + 16);
      v16 = *(WebCore::RenderElement **)a1;
      break;
    }
LABEL_53:
    v20 = *(_QWORD *)(v89[0] + 8);
    v89[0] = v20;
    if (!v20)
      goto LABEL_54;
  }
  if (!(*(unsigned int (**)(uint64_t, float))(*(_QWORD *)v36 + 208))(v36, *(float *)(*((_QWORD *)v16 + 13) + 184))|| *(unsigned __int16 *)(v89[0] + 56) > 0xFFu|| *(_WORD *)(v89[0] + 56)|| (*(_DWORD *)(v89[0] + 60) & 0x1F) != 1)
  {
    goto LABEL_53;
  }
  v48 = *(_QWORD *)a1;
  *(_QWORD *)&v81 = *v77;
  v87 = 0;
  v86 = 0;
  *(_QWORD *)v88 = 1;
  ShouldBeAppliedToBackground = WebCore::BackgroundPainter::boxShadowShouldBeAppliedToBackground(v48, (uint64_t)&v81, a3, (WebCore::InlineIterator::BoxIterator *)&v86);
  if (v88[0] != -1)
    ((void (*)(uint64_t *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v88[0]])(&v80, &v86);
  if (ShouldBeAppliedToBackground)
    goto LABEL_53;
LABEL_54:
  v13 = *(_QWORD **)(*((_QWORD *)a1 + 1) + 80);
  v37 = HIDWORD(v83);
  if ((v5 & 1) == 0)
  {
    v38 = 0;
    goto LABEL_56;
  }
LABEL_131:
  if (!(_DWORD)v37)
  {
    __break(0xC471u);
LABEL_167:
    JUMPOUT(0x1942F59E0);
  }
  v65 = *((_QWORD *)v82 + v37 - 1);
  v87 = 0;
  v86 = 0;
  *(_QWORD *)v88 = 1;
  v81 = 0uLL;
  WebCore::BackgroundPainter::paintFillLayer((const WebCore::CachedImageClient **)a1, (unint64_t *)&v79, v65, v77, a3, (unsigned int *)&v86, &v81, v3, 0, 1);
  if (v88[0] != -1)
    ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v88[0]])(&v81, &v86);
  (*(void (**)(_QWORD *, float))(*v13 + 592))(v13, 1.0);
  v38 = 2;
  LODWORD(v37) = HIDWORD(v83);
LABEL_56:
  if ((_DWORD)v37)
  {
    v39 = 8 * v37;
    v40 = (char *)v82 - 8;
    do
    {
      v41 = *(_QWORD *)&v40[v39];
      v87 = 0;
      v86 = 0;
      *(_QWORD *)v88 = 1;
      v81 = 0uLL;
      WebCore::BackgroundPainter::paintFillLayer((const WebCore::CachedImageClient **)a1, (unint64_t *)&v79, v41, v77, a3, (unsigned int *)&v86, &v81, v3, 0, v38);
      if (v88[0] != -1)
        ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v88[0]])(&v81, &v86);
      v39 -= 8;
    }
    while (v39);
  }
  if ((v5 & 1) != 0)
    (*(void (**)(_QWORD *))(*v13 + 608))(v13);
  result = (uint64_t)v82;
  if (v4 != v82 && v82)
  {
    v82 = 0;
    LODWORD(v83) = 0;
    result = WTF::fastFree((WTF *)result, v16);
  }
  if ((v79 & 0x8000000000000) != 0)
  {
    result = v79 & 0xFFFFFFFFFFFFLL;
    do
    {
      v71 = __ldaxr((unsigned int *)result);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, (unsigned int *)result));
    if (!v72)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v16);
    }
  }
  return result;
}

void WebCore::RenderBox::paintBoxDecorations(WebCore::RenderBox *this, WebCore::PaintInfo *a2, WTF **a3)
{
  uint64_t v3;
  char *v4;
  WebCore::RenderBox *v5;
  BOOL v6;
  void (**v9)(WebCore::RenderThemeIOS *__hidden);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t (*v16)();
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::ControlPart *v21;
  char v22;
  uint64_t v23;
  uint64_t (*v24)();
  unsigned int *v25;
  unsigned int v26;
  _DWORD *v27;
  char v28;
  char v29;
  char v30;
  void *v32;
  void (**v33)(WebCore::RenderThemeIOS *__hidden);
  void *v34;
  uint64_t v35;
  WebCore::ControlPart *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  float v43;
  int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  float v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  float *v57;
  int v58;
  WTF *v59;
  void *v60;
  WebCore::ControlPart *v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  BOOL v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  WebCore::ControlPart *v75;
  long double *v76;
  uint64_t *v77;
  unsigned int *v78[2];
  WTF *v79;
  uint64_t v80;
  long double v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v5 = (WebCore::RenderBox *)*((_QWORD *)a2 + 3);
  if (v5)
    v6 = v5 == this;
  else
    v6 = 1;
  if (v6)
  {
    v80 = *((_QWORD *)this + 20);
    v79 = *a3;
    (*(void (**)(WebCore::RenderBox *, WTF **))(*(_QWORD *)this + 1576))(this, &v79);
    {
      v9 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
    }
    else
    {
      v62 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
      *(_OWORD *)(v62 + 40) = 0u;
      *(_OWORD *)(v62 + 24) = 0u;
      v9 = &off_1E335BC30;
      *(_QWORD *)v62 = &off_1E335BC30;
    }
    v79 = (WTF *)((uint64_t (*)(uint64_t *, WebCore::RenderBox *, WTF **))v9[16])(&WebCore::RenderTheme::singleton(void)::theme, this, &v79);
    v80 = v10;
    v11 = *((_QWORD *)a2 + 10);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11) & 1) != 0)
      goto LABEL_34;
    v12 = *(_QWORD *)(*((_QWORD *)this + 11) + 16);
    v81 = COERCE_DOUBLE(&v87);
    v82 = &v87;
    v83 = (uint64_t)&v87;
    v84 = &v87;
    v13 = *(unsigned int *)(v12 + 24);
    if ((_DWORD)v13 != -1)
    {
      v78[0] = (unsigned int *)&v81;
      ((void (*)(long double **__return_ptr, unsigned int **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v13])(&v76, v78, v12 + 16);
      if ((_DWORD)v77 == 1)
      {
        v86 = *(_QWORD *)(*((_QWORD *)this + 14) + 328);
        if ((v86 & 0x8000000000000) != 0)
        {
          v25 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFLL);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 + 1, v25));
        }
LABEL_13:
        if ((_DWORD)v77 != -1)
          ((void (*)(long double *, long double **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v77])(&v81, &v76);
        if ((*((_DWORD *)this + 31) & 0xC00) != 0x800 || (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 2) != 0)
        {
          v85 = v86;
        }
        else
        {
          WebCore::RenderStyle::colorResolvingCurrentColor((_QWORD *)this + 10, 61, 1, (WebCore::Color *)&v81);
          if (v81 == 1.05531781e-226)
          {
            v85 = 0;
            if (v86)
            {
              v85 = v86;
              v86 = 0;
            }
          }
          else
          {
            if ((v86 & 0x8000000000000) != 0)
              v48 = *(float *)((v86 & 0xFFFFFFFFFFFFLL) + 0x10);
            else
              v48 = (float)v86 / 255.0;
            WebCore::Color::colorWithAlpha((uint64_t)&v81, v48, &v85);
            if ((*(_QWORD *)&v81 & 0x8000000000000) != 0)
            {
              v49 = (unsigned int *)(*(_QWORD *)&v81 & 0xFFFFFFFFFFFFLL);
              do
              {
                v50 = __ldaxr(v49);
                v51 = v50 - 1;
              }
              while (__stlxr(v51, v49));
              if (!v51)
              {
                atomic_store(1u, v49);
                WTF::fastFree((WTF *)v49, v14);
              }
            }
          }
          if ((v86 & 0x8000000000000) != 0)
          {
            v45 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFLL);
            do
            {
              v46 = __ldaxr(v45);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v45));
            if (!v47)
            {
              atomic_store(1u, v45);
              WTF::fastFree((WTF *)v45, v14);
            }
          }
        }
        if ((v85 & 0x8000000000000) != 0)
        {
          v63 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFLL);
          if (*(float *)((v85 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
          {
            v17 = 1;
            goto LABEL_192;
          }
        }
        else if ((_BYTE)v85)
        {
          goto LABEL_26;
        }
        v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + 8);
        if (*(_QWORD *)(v15 + 8))
        {
          do
          {
            v74 = *(_QWORD *)(v15 + 16);
            v17 = v74 != 0;
            if (v74)
              break;
            v15 = *(_QWORD *)(v15 + 8);
          }
          while (v15);
        }
        else
        {
          if (*(_QWORD *)(v15 + 16))
            v16 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
          else
            v16 = 0;
          v17 = v16 != 0;
        }
        if ((v85 & 0x8000000000000) == 0)
          goto LABEL_25;
        v63 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFLL);
        do
        {
LABEL_192:
          v64 = __ldaxr(v63);
          v65 = v64 - 1;
        }
        while (__stlxr(v65, v63));
        if (!v65)
        {
          atomic_store(1u, v63);
          WTF::fastFree((WTF *)v63, v14);
          if (!v17)
            goto LABEL_34;
          goto LABEL_26;
        }
LABEL_25:
        if (!v17)
        {
LABEL_34:
          LODWORD(v11) = 0;
LABEL_35:
          v78[0] = (unsigned int *)this;
          v78[1] = (unsigned int *)a2;
          v85 = (uint64_t)v79;
          v82 = 0;
          v81 = 0.0;
          v83 = 1;
          if ((_DWORD)v11)
            goto LABEL_38;
          v19 = *(_QWORD *)(*((_QWORD *)this + 11) + 32);
          if ((*(_DWORD *)(v19 + 148) & 0x1FC000) != 0)
            goto LABEL_38;
          v20 = *(_QWORD *)(v19 + 88);
          if (!v20)
            goto LABEL_38;
          v30 = 0;
          do
          {
            if (!*(_BYTE *)(v20 + 48))
            {
              if ((v30 & 1) != 0)
                goto LABEL_38;
              if (!*(_BYTE *)(v20 + 20) || *(_BYTE *)(v20 + 20) == 11)
                goto LABEL_38;
              if (*(_BYTE *)(v20 + 22))
              {
                if (*(float *)(v20 + 16) != 0.0)
                  goto LABEL_38;
              }
              else if (*(_DWORD *)(v20 + 16))
              {
                goto LABEL_38;
              }
              v30 = 1;
            }
            v20 = *(_QWORD *)(v20 + 56);
          }
          while (v20);
          if ((v30 & 1) == 0)
          {
LABEL_38:
            _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS9_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(&v76, &v81);
            goto LABEL_39;
          }
          WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)this + 80, 61, 0, (unint64_t *)&v87);
          if ((v87 & 0x8000000000000) != 0)
          {
            v66 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFLL);
            if (*(float *)((v87 & 0xFFFFFFFFFFFFLL) + 0x10) != 1.0)
            {
              v67 = 0;
              goto LABEL_209;
            }
          }
          else if ((_BYTE)v87 != 0xFF)
          {
            if ((_DWORD)v83 != -1)
              ((void (*)(long double **, long double *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v83])(&v76, &v81);
            goto LABEL_39;
          }
          v70 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + 8);
          do
          {
            v71 = v70;
            v70 = *(_QWORD *)(v70 + 8);
          }
          while (v70);
          v86 = v71;
          if ((*(_WORD *)(v71 + 58) & 0x1C) == 0
            && (!*(_QWORD *)(v71 + 16)
             || (WebCore::RenderStyle::hasBorderRadius((WebCore::RenderBox *)((char *)this + 80)) & 1) == 0))
          {
            v76 = &v81;
            v77 = &v86;
            if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v81) & 1) != 0
              || WebCore::BackgroundPainter::boxShadowShouldBeAppliedToBackground(WebCore::RenderBoxModelObject const&,WebCore::LayoutPoint const&,WebCore::BackgroundBleedAvoidance,WebCore::InlineIterator::InlineBoxIterator const&)::$_0::operator()((uint64_t *)&v76))
            {
              v72 = *((_DWORD *)this + 5);
              if ((v72 & 0x10000) != 0)
              {
                v67 = 0;
                if ((*(_WORD *)(v86 + 58) & 3) != 1 && *((_BYTE *)this + 46) != 37)
                {
LABEL_230:
                  v67 = 1;
                  if ((*((_BYTE *)this + 52) & 7) == 3 && (*((_BYTE *)this + 53) & 1) != 0)
                  {
                    v73 = v72 & 0x60000000;
                    if (v73 == 0x20000000)
                    {
                      if ((*(unsigned int (**)(WebCore::RenderBox *, uint64_t *))(*(_QWORD *)this + 296))(this, &v85))
                      {
                        v73 = 0x40000000;
                      }
                      else
                      {
                        v73 = 1610612736;
                      }
                      *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0x9FFFFFFF | v73;
                    }
                    v67 = v73 != 0x40000000;
                  }
                }
LABEL_216:
                if ((v87 & 0x8000000000000) == 0)
                  goto LABEL_217;
                v66 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFLL);
                do
                {
LABEL_209:
                  v68 = __ldaxr(v66);
                  v69 = v68 - 1;
                }
                while (__stlxr(v69, v66));
                if (!v69)
                {
                  atomic_store(1u, v66);
                  WTF::fastFree((WTF *)v66, v32);
                }
LABEL_217:
                if ((_DWORD)v83 != -1)
                  ((void (*)(long double **, long double *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v83])(&v76, &v81);
                if (v67)
                {
LABEL_40:
                  v3 = *((_QWORD *)a2 + 10);
                  if ((_DWORD)v11 == 2)
                  {
                    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v3 + 96))(*((_QWORD *)a2 + 10), 1);
                    v52 = *((_QWORD *)a2 + 10);
                    WebCore::RenderStyle::getRoundedBorderFor((WebCore::RenderBox *)((char *)this + 80), (const WebCore::LayoutRect *)&v79, (const WebCore::LayoutSize *)1, 1, (uint64_t)&v76);
                    v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                    + 528);
                    v54 = 1.0;
                    if (v53)
                    {
                      v55 = *(_QWORD *)(v53 + 8);
                      if (v55)
                      {
                        v56 = *(_QWORD *)(v55 + 24);
                        if (v56)
                        {
                          v57 = *(float **)(v56 + 8);
                          if (v57)
                          {
                            v58 = (*(_DWORD *)v57)++;
                            v54 = v57[91];
                            if (v58)
                            {
                              *(_DWORD *)v57 = v58;
                            }
                            else
                            {
                              WebCore::Page::~Page((uint64_t)v57);
                              WTF::fastFree(v59, v60);
                            }
                          }
                        }
                      }
                    }
                    WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)&v76, v54, (uint64_t)&v81);
                    (*(void (**)(uint64_t, long double *))(*(_QWORD *)v52 + 464))(v52, &v81);
                    (*(void (**)(_QWORD, float))(**((_QWORD **)a2 + 10) + 592))(*((_QWORD *)a2 + 10), 1.0);
                  }
                  v4 = (char *)this + 80;
                  if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148) & 0x1FC000) == 0)
                  {
                    v81 = *(double *)&this;
                    v82 = (uint64_t *)a2;
                    goto LABEL_43;
                  }
                  {
                    v33 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
                  }
                  else
                  {
                    WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
                    unk_1ECE88AD0 = 0u;
                    unk_1ECE88AC0 = 0u;
                    v33 = &off_1E335BC30;
                    WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
                  }
                  if (((unsigned int (*)(uint64_t *, WebCore::RenderBox *))v33[3])(&WebCore::RenderTheme::singleton(void)::theme, this)&& (v35 = WebCore::RenderBox::ensureControlPart(this, v34)) != 0)
                  {
                    v36 = (WebCore::ControlPart *)v35;
                    {
                      v75 = (WebCore::ControlPart *)v35;
                      WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
                      v36 = v75;
                      unk_1ECE88AD0 = 0u;
                      unk_1ECE88AC0 = 0u;
                      WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
                    }
                    v37 = WebCore::RenderTheme::paint((WebCore::RenderTheme *)&WebCore::RenderTheme::singleton(void)::theme, (WebCore::SwitchThumbPart **)this, v36, a2, (const WebCore::LayoutRect *)&v79);
                    v81 = *(double *)&this;
                    v82 = (uint64_t *)a2;
                    if ((v37 & 1) == 0)
                    {
LABEL_112:
                      LOBYTE(v21) = 1;
                      goto LABEL_46;
                    }
                  }
                  else
                  {
                    {
                      WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
                      unk_1ECE88AD0 = 0u;
                      unk_1ECE88AC0 = 0u;
                      WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
                    }
                    v44 = WebCore::RenderTheme::paint((WebCore::RenderTheme *)&WebCore::RenderTheme::singleton(void)::theme, this, a2, (const WebCore::LayoutRect *)&v79);
                    v81 = *(double *)&this;
                    v82 = (uint64_t *)a2;
                    if (!v44)
                      goto LABEL_112;
                  }
LABEL_43:
                  if ((_DWORD)v11 != 3)
                  {
LABEL_44:
                    WebCore::BackgroundPainter::paintBackground((const WebCore::CachedImageClient *)v78, &v79, v11);
                    if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148) & 0x1FC000) == 0)
                    {
LABEL_45:
                      LOBYTE(v21) = 0;
                      goto LABEL_46;
                    }
                    v21 = (WebCore::ControlPart *)WebCore::RenderBox::ensureControlPartForDecorations(this);
                    {
                      WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
                      unk_1ECE88AD0 = 0u;
                      unk_1ECE88AC0 = 0u;
                      WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
                    }
                    if (v21)
                    {
                      WebCore::RenderTheme::paint((WebCore::RenderTheme *)&WebCore::RenderTheme::singleton(void)::theme, (WebCore::SwitchThumbPart **)this, v21, a2, (const WebCore::LayoutRect *)&v79);
                      goto LABEL_45;
                    }
                    WebCore::RenderTheme::paintDecorations((WebCore::RenderTheme *)&WebCore::RenderTheme::singleton(void)::theme, this, a2, (const WebCore::LayoutRect *)&v79);
LABEL_46:
                    WebCore::BackgroundPainter::paintBoxShadow(v78, (const WebCore::LayoutRect *)&v79, (uint64_t)v4, 1, (const WebCore::LayoutSize *)1, 1);
                    if ((_DWORD)v11 == 3)
                      return;
                    if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148) & 0x1FC000) != 0)
                      v22 = (char)v21;
                    else
                      v22 = 1;
                    if ((v22 & 1) != 0)
                    {
                      if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148) & 0x1FC000) != 0)
                        goto LABEL_64;
LABEL_52:
                      v23 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
                      if (*(float *)(v23 + 120) != 0.0 && (*(_BYTE *)(v23 + 124) & 0xF) != 0)
                      {
                        if (!*(_DWORD *)(v23 + 112))
                        {
                          v38 = *(_QWORD *)(v23 + 104);
                          if ((v38 & 0x4000000000000) != 0)
                          {
                            if ((v38 & 0x8000000000000) != 0)
                            {
                              if (*(float *)((v38 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
                                goto LABEL_54;
                            }
                            else if (!*(_QWORD *)(v23 + 104))
                            {
                              goto LABEL_54;
                            }
                          }
                        }
                        if ((*(_BYTE *)(v23 + 124) & 0xF) != 1)
                          goto LABEL_85;
                      }
LABEL_54:
                      if (*(float *)(v23 + 144) == 0.0 || (*(_BYTE *)(v23 + 148) & 0xF) == 0)
                        goto LABEL_56;
                      if (!*(_DWORD *)(v23 + 136))
                      {
                        v39 = *(_QWORD *)(v23 + 128);
                        if ((v39 & 0x4000000000000) != 0)
                        {
                          if ((v39 & 0x8000000000000) == 0)
                          {
                            if (*(_QWORD *)(v23 + 128))
                              goto LABEL_81;
LABEL_56:
                            if (*(float *)(v23 + 168) == 0.0 || (*(_BYTE *)(v23 + 172) & 0xF) == 0)
                              goto LABEL_58;
                            if (!*(_DWORD *)(v23 + 160))
                            {
                              v40 = *(_QWORD *)(v23 + 152);
                              if ((v40 & 0x4000000000000) != 0)
                              {
                                if ((v40 & 0x8000000000000) != 0)
                                {
                                  if (*(float *)((v40 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
                                    goto LABEL_58;
                                }
                                else if (!*(_QWORD *)(v23 + 152))
                                {
                                  goto LABEL_58;
                                }
                              }
                            }
                            if ((*(_BYTE *)(v23 + 172) & 0xF) == 1)
                            {
LABEL_58:
                              if (*(float *)(v23 + 192) == 0.0 || (*(_BYTE *)(v23 + 196) & 0xF) == 0)
                                goto LABEL_60;
                              if (!*(_DWORD *)(v23 + 184))
                              {
                                v41 = *(_QWORD *)(v23 + 176);
                                if ((v41 & 0x4000000000000) != 0)
                                {
                                  if ((v41 & 0x8000000000000) != 0)
                                  {
                                    if (*(float *)((v41 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
                                      goto LABEL_60;
                                  }
                                  else if (!*(_QWORD *)(v23 + 176))
                                  {
                                    goto LABEL_60;
                                  }
                                }
                              }
                              if ((*(_BYTE *)(v23 + 196) & 0xF) != 1)
                                goto LABEL_85;
LABEL_60:
                              if (*(_QWORD *)(*(_QWORD *)(v23 + 200) + 8))
                                v24 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
                              else
                                v24 = 0;
                              if (!v24)
                                goto LABEL_64;
                            }
LABEL_85:
                            WebCore::BorderPainter::paintBorder((unsigned int **)&v81, (int *)&v79, (uint64_t)v4, v11, (const WebCore::LayoutSize *)1, 1);
                            goto LABEL_64;
                          }
                          if (*(float *)((v39 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
                            goto LABEL_56;
                        }
                      }
LABEL_81:
                      if ((*(_BYTE *)(v23 + 148) & 0xF) != 1)
                        goto LABEL_85;
                      goto LABEL_56;
                    }
                    v61 = (WebCore::ControlPart *)WebCore::RenderBox::ensureControlPartForBorderOnly(this);
                    {
                      WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
                      unk_1ECE88AD0 = 0u;
                      unk_1ECE88AC0 = 0u;
                      WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
                    }
                    if (v61)
                    {
                      if ((WebCore::RenderTheme::paint((WebCore::RenderTheme *)&WebCore::RenderTheme::singleton(void)::theme, (WebCore::SwitchThumbPart **)this, v61, a2, (const WebCore::LayoutRect *)&v79) & 1) != 0)goto LABEL_52;
                    }
                    else if (WebCore::RenderTheme::paintBorderOnly((uint64_t)&WebCore::RenderTheme::singleton(void)::theme, (uint64_t)this, (uint64_t)a2))
                    {
                      goto LABEL_52;
                    }
LABEL_64:
                    if ((_DWORD)v11 == 2)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)a2 + 10) + 608))(*((_QWORD *)a2 + 10));
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 104))(v3, 1);
                    }
                    return;
                  }
LABEL_174:
                  WebCore::BorderPainter::paintBorder((unsigned int **)&v81, (int *)&v79, (uint64_t)v4, 3, (const WebCore::LayoutSize *)1, 1);
                  goto LABEL_44;
                }
LABEL_39:
                WebCore::BackgroundPainter::paintBoxShadow(v78, (const WebCore::LayoutRect *)&v79, (uint64_t)this + 80, 0, (const WebCore::LayoutSize *)1, 1);
                goto LABEL_40;
              }
              if (*((_BYTE *)this + 46) != 37)
                goto LABEL_230;
            }
          }
          v67 = 0;
          goto LABEL_216;
        }
LABEL_26:
        v18 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
        if ((*(float *)(v18 + 120) == 0.0 || (*(_BYTE *)(v18 + 124) & 0xF) == 0)
          && (*(float *)(v18 + 144) == 0.0 || (*(_BYTE *)(v18 + 148) & 0xF) == 0)
          && (*(float *)(v18 + 168) == 0.0 || (*(_BYTE *)(v18 + 172) & 0xF) == 0)
          && (*(float *)(v18 + 192) == 0.0 || (*(_BYTE *)(v18 + 196) & 0xF) == 0)
          || !WebCore::RenderStyle::hasBorderRadius((WebCore::RenderBox *)((char *)this + 80)))
        {
          goto LABEL_34;
        }
        v27 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 24) + 200) + 8);
        if (v27)
        {
          ++v27[2];
          if ((*(unsigned int (**)(_DWORD *, WebCore::RenderBox *, float))(*(_QWORD *)v27 + 208))(v27, this, *(float *)(*((_QWORD *)this + 13) + 184)))
          {
            v28 = (*(uint64_t (**)(_DWORD *, WebCore::RenderBox *))(*(_QWORD *)v27 + 56))(v27, this);
            v29 = v28;
            if (v27[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
              if ((v29 & 1) != 0)
                goto LABEL_34;
            }
            else
            {
              --v27[2];
              if ((v28 & 1) != 0)
                goto LABEL_34;
            }
          }
          else if (v27[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
          }
          else
          {
            --v27[2];
          }
        }
        (*(void (**)(long double *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 672))(&v81, v11, 1);
        *(float *)&v42 = hypot(v81, *(long double *)&v82);
        v43 = hypot(*(long double *)&v83, *(long double *)&v84);
        v76 = (long double *)__PAIR64__(LODWORD(v43), v42);
        if (*(float *)&v42 > 1.0)
          LODWORD(v76) = 1065353216;
        if (v43 > 1.0)
          HIDWORD(v76) = 1065353216;
        if (WebCore::RenderBoxModelObject::borderObscuresBackgroundEdge(this, (const WebCore::FloatSize *)&v76))
        {
          LODWORD(v11) = 1;
        }
        else if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148) & 0x1FC000) == 0
               && WebCore::RenderBoxModelObject::borderObscuresBackground(this)
               && WebCore::RenderBox::backgroundHasOpaqueTopLayer(this))
        {
          LODWORD(v11) = 3;
        }
        else
        {
          LODWORD(v11) = 2;
        }
        goto LABEL_35;
      }
      v87 = *((_QWORD *)this + 14) + 328;
      v81 = COERCE_DOUBLE(&v87);
      v82 = &v87;
      v83 = (uint64_t)&v87;
      v84 = &v87;
      if ((_DWORD)v77 != -1)
      {
        v78[0] = (unsigned int *)&v81;
        ((void (*)(uint64_t *__return_ptr, unsigned int **, long double **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v77])(&v86, v78, &v76);
        goto LABEL_13;
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_174;
  }
}

uint64_t WebCore::BackgroundPainter::paintBoxShadow(unsigned int **a1, const WebCore::LayoutRect *a2, uint64_t a3, int a4, const WebCore::LayoutSize *a5, int a6)
{
  uint64_t *v12;
  uint64_t result;
  int v14;
  int v15;
  int v16;
  int v17;
  int hasBorderRadius;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void *v25;
  _BOOL4 v26;
  uint64_t v27;
  double v28;
  double v29;
  float v30;
  float v31;
  double v32;
  int v34;
  double v35;
  int v37;
  int v38;
  int v39;
  float v40;
  float v41;
  double v42;
  float v44;
  double v45;
  float v47;
  void *v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v63;
  int v64;
  int v65;
  float v66;
  float v67;
  float v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  int v78;
  int v79;
  unsigned int v80;
  signed int v81;
  int v82;
  double v83;
  double v84;
  double v85;
  double v86;
  float v87;
  double v88;
  double v89;
  double v90;
  double v91;
  float v92;
  float v93;
  float v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t *v97;
  void *v98;
  __n128 v99;
  void *v104;
  double v105;
  int v107;
  double v108;
  int v110;
  double v111;
  int v113;
  double v114;
  int v116;
  unsigned int v117;
  int v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  unsigned int *v124;
  unsigned int v125;
  BOOL v126;
  WTF *v127;
  void *v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  __int16 v136;
  char v137;
  int v138;
  __n128 v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  int v153;
  int v154;
  unsigned int v155;
  uint64_t v156;
  unint64_t v157;
  unsigned int v158;
  uint64_t v159;
  signed int v160;
  int v161;
  int v162;
  signed int v163;
  unsigned int v164;
  unsigned int v165;
  uint64_t v166;
  float v167;
  float v168;
  float v169;
  uint64_t v170;
  unsigned int v171;
  unsigned int v172;
  int v173;
  unsigned int v174;
  unsigned int v175;
  int v176;
  int v177;
  unsigned int v178;
  int v179;
  int v180;
  double v181;
  double v182;
  double v183;
  double v184;
  uint64_t v185;
  unsigned int v186;
  uint64_t *v187;
  void *v188;
  uint64_t v189;
  int v190;
  unsigned int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  unsigned int v196;
  unsigned int v197;
  BOOL v198;
  void *v199;
  int v200;
  int v201;
  unsigned int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int *v214;
  unsigned int v215;
  unsigned int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  float v221;
  void *v223;
  unsigned int v224;
  unsigned int v225;
  int v226;
  int v227;
  unsigned int v228;
  int v229;
  int v230;
  unsigned int v231;
  unsigned int v232;
  int v233;
  unsigned int v234;
  unsigned int v235;
  int v236;
  int v237;
  int v238;
  float v239;
  float v240;
  float v241;
  unsigned int v242;
  int v243;
  unsigned int v244;
  unsigned int v245;
  int v246;
  int v247;
  unsigned int v248;
  int v249;
  unsigned int v250;
  int v251;
  int v252;
  unsigned int v253;
  signed int v254;
  int v255;
  double v256;
  double v257;
  double v258;
  double v259;
  uint64_t v260;
  uint64_t v261;
  float v262;
  float v263;
  int v264;
  void *v265;
  void *v266;
  __n128 v267;
  void *v270;
  unsigned int *v271;
  unsigned int v272;
  unsigned int *v273;
  unsigned int v274;
  void *v275;
  void *v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int *v279;
  unsigned int v280;
  unsigned int v281;
  int v282;
  int v283;
  int v284;
  double v285;
  int v286;
  int v287;
  double v288;
  int v289;
  int v290;
  double v291;
  int v292;
  int v293;
  double v294;
  int v295;
  unsigned int v296;
  int v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  unsigned int *v303;
  unsigned int v304;
  BOOL v305;
  int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  __int16 v313;
  char v314;
  int v315;
  __n128 v316;
  uint64_t v317;
  uint64_t v318;
  unsigned int *v319;
  unsigned int v320;
  unsigned int *v321;
  unsigned int v322;
  void *v323;
  void *v324;
  unsigned int *v325;
  unsigned int v326;
  unsigned int v327;
  int v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unsigned int v333;
  unsigned int v334;
  int v335;
  unsigned int v336;
  unsigned int v337;
  uint64_t v338;
  int v339;
  int v340;
  unsigned int v341;
  uint64_t v342;
  unint64_t v343;
  unsigned int v344;
  uint64_t v345;
  signed int v346;
  int v347;
  int v348;
  signed int v349;
  unsigned int v350;
  unsigned int v351;
  uint64_t v352;
  float v353;
  float v354;
  float v355;
  uint64_t v356;
  unsigned int v357;
  unsigned int v358;
  int v359;
  unsigned int v360;
  unsigned int v361;
  int v362;
  int v363;
  unsigned int v364;
  int v365;
  int v366;
  double v367;
  double v368;
  double v369;
  double v370;
  uint64_t v371;
  unsigned int v372;
  int v373;
  unsigned int v374;
  void *v375;
  void *v376;
  unsigned int v377;
  unsigned int v378;
  uint64_t v379;
  unsigned int *v380;
  unsigned int v381;
  unsigned int v382;
  int v383;
  unsigned int v384;
  int v385;
  int v386;
  int v387;
  int v388;
  unsigned int v389;
  unsigned int v390;
  BOOL v391;
  unsigned int v392;
  int v393;
  unsigned int *v394;
  unsigned int v395;
  unsigned int *v396;
  unsigned int v397;
  int v398;
  unsigned int v399;
  int v400;
  int v401;
  int v402;
  int v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int *v406;
  unsigned int v407;
  unsigned int *v408;
  unsigned int v409;
  unsigned int *v410;
  unsigned int v411;
  unsigned int v412;
  unsigned int *v413;
  unsigned int v414;
  unsigned int v415;
  unsigned int v416;
  unsigned int v417;
  unsigned int v418;
  unsigned int *v419;
  unsigned int v420;
  unsigned int v421;
  unsigned int *v422;
  unsigned int v423;
  unsigned int v424;
  unsigned int *v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int *v428;
  unsigned int v429;
  unsigned int v430;
  unsigned int *v431;
  unsigned int v432;
  unsigned int v433;
  unsigned int v434;
  _BOOL4 v435;
  _BOOL4 v436;
  int v437;
  int v438;
  uint64_t v439;
  unsigned int v440;
  unsigned int v441;
  uint64_t v442;
  __int128 v443;
  int32x4_t v444;
  int32x4_t v445;
  uint64_t v446;
  _BYTE *v447;
  unsigned int *v448;
  char *v449;
  unint64_t v450;
  float v451;
  float v452;
  float32x2_t v453;
  float32x2_t v454;
  int32x4_t v455;
  int32x4_t v456;
  float v457;
  float v458;
  float v459;
  float v460;
  __int128 v461;
  __int128 v462;
  int32x4_t v463;
  int32x4_t v464;
  unint64_t v465;
  unsigned int v466;
  __int128 v467;
  int32x4_t v468;
  int32x4_t v469;
  char v470;
  _BYTE v471[17];

  v471[0] = (_BYTE)a5;
  v470 = a6;
  v12 = (uint64_t *)*((_QWORD *)a1[1] + 10);
  result = (*(uint64_t (**)(uint64_t *))(*v12 + 40))(v12);
  if ((result & 1) == 0 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 32) + 88))
  {
    if (a4 == 1)
      WebCore::RenderStyle::getRoundedInnerBorderFor((WebCore::RenderStyle *)a3, a2, (int)a5, a6, (uint64_t)&v467);
    else
      WebCore::RenderStyle::getRoundedBorderFor((WebCore::RenderStyle *)a3, a2, a5, a6, (uint64_t)&v467);
    if (v468.i32[0] < 0
      || v468.i32[1] < 0
      || v469.i32[0] < 0
      || v469.i32[1] < 0
      || v468.i32[2] < 0
      || v468.i32[3] < 0
      || v469.i32[2] < 0
      || v469.i32[3] < 0)
    {
      goto LABEL_329;
    }
    v14 = v468.i32[0] + v468.i32[2];
    if (__OFADD__(v468.i32[0], v468.i32[2]))
      v14 = 0x7FFFFFFF;
    if (v14 > SDWORD2(v467))
      goto LABEL_329;
    v15 = v469.i32[0] + v469.i32[2];
    if (__OFADD__(v469.i32[0], v469.i32[2]))
      v15 = 0x7FFFFFFF;
    if (v15 > SDWORD2(v467))
      goto LABEL_329;
    v16 = v468.i32[1] + v469.i32[1];
    if (__OFADD__(v468.i32[1], v469.i32[1]))
      v16 = 0x7FFFFFFF;
    if (v16 > SHIDWORD(v467))
      goto LABEL_329;
    v17 = v468.i32[3] + v469.i32[3];
    if (__OFADD__(v468.i32[3], v469.i32[3]))
      v17 = 0x7FFFFFFF;
    if (v17 > SHIDWORD(v467))
LABEL_329:
      WebCore::RoundedRect::adjustRadii((int32x2_t *)&v467);
    hasBorderRadius = WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)a3);
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*a1 + 3) + 8) + 40) + 8) + 528);
    v20 = 1.0;
    if (v19)
    {
      v21 = *(_QWORD *)(v19 + 8);
      if (v21)
      {
        v22 = *(_QWORD *)(v21 + 24);
        if (v22)
        {
          v23 = *(_QWORD *)(v22 + 8);
          if (v23)
          {
            v24 = (*(_DWORD *)v23)++;
            v20 = *(float *)(v23 + 364);
            if (v24)
            {
              *(_DWORD *)v23 = v24;
            }
            else
            {
              WebCore::Page::~Page(v23);
              WTF::fastFree(v127, v128);
            }
          }
        }
      }
    }
    result = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter(a3, 61, 0, (unint64_t *)&v462);
    if ((v462 & 0x8000000000000) != 0)
    {
      result = v462 & 0xFFFFFFFFFFFFLL;
      v26 = *(float *)((v462 & 0xFFFFFFFFFFFFLL) + 0x10) == 1.0;
      do
      {
        v209 = __ldaxr((unsigned int *)result);
        v210 = v209 - 1;
      }
      while (__stlxr(v210, (unsigned int *)result));
      if (!v210)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v25);
      }
    }
    else
    {
      v26 = ~(_BYTE)v462 == 0;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 32) + 88);
    if (v27)
    {
      v28 = v20;
      v29 = 1.0;
      v439 = (uint64_t)(v12 + 1);
      while (*(unsigned __int8 *)(v27 + 48) != a4)
      {
LABEL_147:
        v27 = *(_QWORD *)(v27 + 56);
        if (!v27)
          return result;
      }
      if (*(_BYTE *)(v27 + 6))
        v30 = *(float *)v27;
      else
        v30 = (float)*(int *)v27;
      if (*(_BYTE *)(v27 + 14))
        v31 = *(float *)(v27 + 8);
      else
        v31 = (float)*(int *)(v27 + 8);
      v32 = v30 * 64.0;
      if (v32 >= 2147483650.0 || v32 <= -2147483650.0)
      {
        if (v32 > -2147483650.0)
          v217 = (int)v32;
        else
          v217 = 0x80000000;
        if (v32 < 2147483650.0)
          v34 = v217;
        else
          v34 = 0x7FFFFFFF;
      }
      else
      {
        v34 = (int)v32;
      }
      v35 = v31 * 64.0;
      if (v35 >= 2147483650.0 || v35 <= -2147483650.0)
      {
        if (v35 >= 2147483650.0)
        {
          v37 = 0x7FFFFFFF;
        }
        else if (v35 <= -2147483650.0)
        {
          v37 = 0x80000000;
        }
        else
        {
          v37 = (int)v35;
        }
        v29 = 1.0;
      }
      else
      {
        v37 = (int)v35;
      }
      v38 = *(unsigned __int8 *)(v27 + 30);
      if (*(_BYTE *)(v27 + 30))
      {
        v41 = *(float *)(v27 + 24);
        *(float *)&v39 = v41;
        v40 = v41;
      }
      else
      {
        v39 = *(int *)(v27 + 24);
        v40 = (float)v39;
        v41 = *(float *)&v39;
      }
      v42 = ceilf(v40 * 1.4) * 64.0;
      if (v42 >= 2147483650.0 || v42 <= -2147483650.0)
      {
        if (v42 >= 2147483650.0)
        {
          v218 = 0x7FFFFFFF;
        }
        else if (v42 > -2147483650.0)
        {
          v218 = (int)v42;
        }
        else
        {
          v218 = 0x80000000;
        }
        v441 = v218;
        v29 = 1.0;
      }
      else
      {
        v441 = (int)v42;
      }
      if (*(_BYTE *)(v27 + 22))
        v44 = *(float *)(v27 + 16);
      else
        v44 = (float)*(int *)(v27 + 16);
      v45 = v44 * 64.0;
      if (v45 < 2147483650.0 && v45 > -2147483650.0)
      {
        v466 = (int)v45;
        if (v38)
          v47 = v41;
        else
          v47 = (float)v39;
        if (!v34 && !v37 && v47 == 0.0 && (int)v45 == 0)
          goto LABEL_147;
        result = (uint64_t)WebCore::RenderStyle::colorWithColorFilter((WebCore::RenderStyle *)a3, (const WebCore::StyleColor *)(v27 + 32), (WebCore::Color *)&v465);
        if (!*(_BYTE *)(v27 + 48))
        {
          v462 = v467;
          v463 = v468;
          v464 = v469;
          v50 = v467 - v466;
          if (__OFSUB__((_DWORD)v467, v466))
            v50 = (v467 >> 31) + 0x7FFFFFFF;
          LODWORD(v462) = v50;
          v51 = DWORD2(v462) + v466;
          if (__OFADD__(DWORD2(v462), v466))
            v51 = (DWORD2(v462) >> 31) + 0x7FFFFFFF;
          v52 = v51 + v466;
          if (__OFADD__(v51, v466))
            v52 = (v51 >> 31) + 0x7FFFFFFF;
          DWORD2(v462) = v52;
          v53 = DWORD1(v462) - v466;
          if (__OFSUB__(DWORD1(v462), v466))
            v53 = (DWORD1(v462) >> 31) + 0x7FFFFFFF;
          DWORD1(v462) = v53;
          v54 = HIDWORD(v462) + v466;
          if (__OFADD__(HIDWORD(v462), v466))
            v54 = (HIDWORD(v462) >> 31) + 0x7FFFFFFF;
          v55 = v54 + v466;
          if (__OFADD__(v54, v466))
            v55 = (v54 >> 31) + 0x7FFFFFFF;
          HIDWORD(v462) = v55;
          if (v52 >= 1 && v55 >= 1)
          {
            v461 = v467;
            v56 = v441 + v466;
            if (__OFADD__(v441, v466))
              v56 = (v441 >> 31) + 0x7FFFFFFF;
            v57 = v461 - v56;
            if (__OFSUB__((_DWORD)v461, v56))
              v57 = (v461 >> 31) + 0x7FFFFFFF;
            v58 = DWORD2(v461) + v56;
            if (__OFADD__(DWORD2(v461), v56))
              v58 = (DWORD2(v461) >> 31) + 0x7FFFFFFF;
            v59 = v58 + v56;
            if (__OFADD__(v58, v56))
              v59 = (v58 >> 31) + 0x7FFFFFFF;
            DWORD2(v461) = v59;
            v60 = DWORD1(v461) - v56;
            if (__OFSUB__(DWORD1(v461), v56))
              v60 = (DWORD1(v461) >> 31) + 0x7FFFFFFF;
            v61 = HIDWORD(v461) + v56;
            if (__OFADD__(HIDWORD(v461), v56))
              v61 = (HIDWORD(v461) >> 31) + 0x7FFFFFFF;
            _VF = __OFADD__(v61, v56);
            v63 = v61 + v56;
            if (_VF)
              v63 = (v61 >> 31) + 0x7FFFFFFF;
            HIDWORD(v461) = v63;
            v64 = v57 + v34;
            if (__OFADD__(v57, v34))
              v64 = (v57 >> 31) + 0x7FFFFFFF;
            LODWORD(v461) = v64;
            v65 = v60 + v37;
            if (__OFADD__(v60, v37))
              v65 = (v60 >> 31) + 0x7FFFFFFF;
            DWORD1(v461) = v65;
            v457 = WebCore::snapRectToDevicePixels((int *)&v461, v20);
            v458 = v66;
            v459 = v67;
            v460 = v68;
            (*(void (**)(uint64_t *, uint64_t))(*v12 + 96))(v12, 1);
            (*(void (**)(uint64_t *, float *))(*v12 + 456))(v12, &v457);
            v69 = *((_DWORD *)a2 + 2);
            v70 = v34 & ~(v34 >> 31);
            _VF = __OFADD__(v69, v70);
            v71 = v69 + v70;
            if (_VF)
              v71 = (v69 >> 31) + 0x7FFFFFFF;
            v72 = v71 + v441;
            if (__OFADD__(v71, v441))
              v72 = (v71 >> 31) + 0x7FFFFFFF;
            if (((v466 ^ (2 * v466)) & 0x80000000) != 0)
              v73 = (v466 >> 31) + 0x7FFFFFFF;
            else
              v73 = 2 * v466;
            _VF = __OFADD__(v72, v73);
            v74 = v72 + v73;
            if (_VF)
              v74 = (v72 >> 31) + 0x7FFFFFFF;
            v75 = 0x1FFFFFF;
            _VF = __OFADD__(v74, 64);
            v76 = v74 + 64;
            if (!_VF && v76 <= 2147483583)
            {
              if (v76 < 0)
                v75 = -(-v76 >> 6);
              else
                v75 = (v76 + 63) >> 6;
            }
            v77 = v75 << 6;
            _VF = __OFSUB__(v34, v75 << 6);
            v78 = v34 - (v75 << 6);
            if (_VF)
              v79 = (v34 >> 31) + 0x7FFFFFFF;
            else
              v79 = v78;
            v80 = v462 + v77;
            if (__OFADD__((_DWORD)v462, v77))
              v80 = (v462 >> 31) + 0x7FFFFFFF;
            LODWORD(v462) = v80;
            WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)&v467, v20, (uint64_t)&v453);
            WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)&v462, v20, (uint64_t)&v446);
            v81 = (v462 >> 31) + 0x7FFFFFFF;
            if (!__OFADD__((_DWORD)v462, v79))
              v81 = v462 + v79;
            v82 = (DWORD1(v462) >> 31) + 0x7FFFFFFF;
            if (!__OFADD__(DWORD1(v462), v37))
              v82 = DWORD1(v462) + v37;
            v83 = (double)v81 * 0.015625;
            v84 = round((v83 + (double)-v81) * v28) / v28 - (double)-v81;
            v85 = round(v83 * v28) / v28;
            if (v83 >= 0.0)
              v86 = v85;
            else
              v86 = v84;
            v87 = v86;
            v88 = (double)v82 * 0.015625;
            v89 = round((v88 + (double)-v82) * v28) / v28 - (double)-v82;
            v90 = round(v88 * v28) / v28;
            if (v88 >= 0.0)
              v91 = v90;
            else
              v91 = v89;
            v92 = v91;
            v93 = v87 - *(float *)&v446;
            v94 = v92 - *((float *)&v446 + 1);
            v95 = v465;
            if ((v465 & 0x8000000000000) != 0)
            {
              v271 = (unsigned int *)(v465 & 0xFFFFFFFFFFFFLL);
              do
                v272 = __ldaxr(v271);
              while (__stlxr(v272 + 1, v271));
              v440 = v440 & 0xFFFFFF00 | *(unsigned __int8 *)(v27 + 49);
              *(_QWORD *)&v443 = __PAIR64__(LODWORD(v94), LODWORD(v93));
              *((float *)&v443 + 2) = v47;
              v444.i64[0] = v95;
              v273 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFLL);
              do
                v274 = __ldaxr(v273);
              while (__stlxr(v274 + 1, v273));
              v444.i64[1] = v440 | 0x3F80000000000000;
              v445.i8[0] = 1;
              WebCore::GraphicsContextState::setDropShadow(v439, (uint64_t)&v443);
              if (v445.i8[0])
              {
                if ((v444.i64[0] & 0x8000000000000) != 0)
                {
                  v419 = (unsigned int *)(v444.i64[0] & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v420 = __ldaxr(v419);
                    v421 = v420 - 1;
                  }
                  while (__stlxr(v421, v419));
                  if (!v421)
                  {
                    atomic_store(1u, v419);
                    WTF::fastFree((WTF *)v419, v275);
                  }
                }
              }
              (*(void (**)(uint64_t *, uint64_t))(*v12 + 88))(v12, v439);
              if ((v95 & 0x8000000000000) != 0)
              {
                v422 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v423 = __ldaxr(v422);
                  v424 = v423 - 1;
                }
                while (__stlxr(v424, v422));
                if (!v424)
                {
                  atomic_store(1u, v422);
                  WTF::fastFree((WTF *)v422, v276);
                }
              }
              v29 = 1.0;
            }
            else
            {
              v96 = v440 & 0xFFFFFF00 | *(unsigned __int8 *)(v27 + 49);
              *(float *)&v443 = v93;
              *((float *)&v443 + 1) = v92 - *((float *)&v446 + 1);
              *((float *)&v443 + 2) = v47;
              v444.i64[0] = v465;
              v440 = v96;
              v444.i64[1] = v96 | 0x3F80000000000000;
              v445.i8[0] = 1;
              v97 = v12 + 1;
              WebCore::GraphicsContextState::setDropShadow(v439, (uint64_t)&v443);
              if (v445.i8[0])
              {
                if ((v444.i64[0] & 0x8000000000000) != 0)
                {
                  v214 = (unsigned int *)(v444.i64[0] & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v215 = __ldaxr(v214);
                    v216 = v215 - 1;
                  }
                  while (__stlxr(v216, v214));
                  v97 = v12 + 1;
                  v29 = 1.0;
                  if (!v216)
                  {
                    atomic_store(1u, v214);
                    WTF::fastFree((WTF *)v214, v98);
                  }
                }
              }
              (*(void (**)(uint64_t *, uint64_t *))(*v12 + 88))(v12, v97);
            }
            if (!hasBorderRadius)
            {
              if (v26)
              {
                (*(void (**)(__int128 *__return_ptr, uint64_t *, uint64_t))(*v12 + 672))(&v443, v12, 1);
                if (*(double *)&v443 != v29
                  || (*(double *)&v444.i64[1] != -1.0 ? (v198 = *(double *)&v444.i64[1] == 1.0) : (v198 = 1),
                      !v198
                   || *((double *)&v443 + 1) != 0.0
                   || (v99.n128_u32[1] = v444.u32[1], *(double *)v444.i64 != 0.0)))
                {
                  __asm { FMOV            V0.2S, #1.0 }
                  v99.n128_u64[0] = (unint64_t)vadd_f32(v453, _D0);
                  __asm { FMOV            V1.2S, #-1.0 }
                  v453 = (float32x2_t)v99.n128_u64[0];
                  v454 = vadd_f32(vadd_f32(v454, _D1), _D1);
                }
              }
              v99.n128_u32[0] = v454.i32[0];
              if (v454.f32[0] > 0.0)
              {
                v99.n128_u32[0] = v454.u32[1];
                if (v454.f32[1] > 0.0)
                  (*(void (**)(uint64_t *, float32x2_t *, float32_t))(*v12 + 472))(v12, &v453, v454.f32[1]);
              }
              *(_QWORD *)&v443 = 0x11040000000000FFLL;
              (*(void (**)(uint64_t *, uint64_t *, __int128 *, __n128))(*v12 + 224))(v12, &v446, &v443, v99);
              if ((v443 & 0x8000000000000) == 0)
                goto LABEL_145;
              v124 = (unsigned int *)(v443 & 0xFFFFFFFFFFFFLL);
              do
              {
                v213 = __ldaxr(v124);
                v126 = --v213 == 0;
              }
              while (__stlxr(v213, v124));
LABEL_406:
              v29 = 1.0;
              if (v126)
              {
                atomic_store(1u, v124);
                WTF::fastFree((WTF *)v124, v104);
              }
              goto LABEL_145;
            }
            if (v26)
            {
              v99.n128_u32[0] = -1.0;
              WebCore::FloatRoundedRect::inflateWithRadii(&v453, v99.n128_f64[0]);
            }
            if (v454.f32[0] > 0.0 && v454.f32[1] > 0.0)
              (*(void (**)(uint64_t *, float32x2_t *, float32_t))(*v12 + 488))(v12, &v453, v454.f32[1]);
            v105 = v457 * 64.0;
            if (v105 >= 2147483650.0 || v105 <= -2147483650.0)
            {
              if (v105 > -2147483650.0)
                v282 = (int)v105;
              else
                v282 = 0x80000000;
              if (v105 < 2147483650.0)
                v107 = v282;
              else
                v107 = 0x7FFFFFFF;
            }
            else
            {
              v107 = (int)v105;
            }
            v108 = v458 * 64.0;
            if (v108 >= 2147483650.0 || v108 <= -2147483650.0)
            {
              if (v108 > -2147483650.0)
                v283 = (int)v108;
              else
                v283 = 0x80000000;
              if (v108 < 2147483650.0)
                v110 = v283;
              else
                v110 = 0x7FFFFFFF;
            }
            else
            {
              v110 = (int)v108;
            }
            v111 = v459 * 64.0;
            if (v111 >= 2147483650.0 || v111 <= -2147483650.0)
            {
              if (v111 > -2147483650.0)
                v284 = (int)v111;
              else
                v284 = 0x80000000;
              if (v111 < 2147483650.0)
                v113 = v284;
              else
                v113 = 0x7FFFFFFF;
            }
            else
            {
              v113 = (int)v111;
            }
            v114 = v460 * 64.0;
            if (v114 >= 2147483650.0 || v114 <= -2147483650.0)
            {
              if (v114 >= 2147483650.0)
              {
                v116 = 0x7FFFFFFF;
              }
              else if (v114 <= -2147483650.0)
              {
                v116 = 0x80000000;
              }
              else
              {
                v116 = (int)v114;
              }
              v29 = 1.0;
            }
            else
            {
              v116 = (int)v114;
            }
            *(_QWORD *)&v443 = __PAIR64__(v110, v107);
            *((_QWORD *)&v443 + 1) = __PAIR64__(v116, v113);
            v444 = v468;
            v445 = v469;
            if (((v441 ^ (2 * v441)) & 0x80000000) != 0)
              v117 = (v441 >> 31) + 0x7FFFFFFF;
            else
              v117 = 2 * v441;
            v118 = v117 + v466;
            if (__OFADD__(v117, v466))
              v118 = (v117 >> 31) + 0x7FFFFFFF;
            LODWORD(v442) = v118;
            WebCore::RoundedRectRadii::expand(v444.i32, &v442, &v442, &v442, &v442);
            if (WebCore::BorderPainter::allCornersClippedOut((uint64_t)&v443, a1[1]))
            {
              v442 = 0x11040000000000FFLL;
              (*(void (**)(uint64_t *, uint64_t *, uint64_t *))(*v12 + 224))(v12, &v446, &v442);
              if ((v442 & 0x8000000000000) != 0)
              {
                v380 = (unsigned int *)(v442 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v381 = __ldaxr(v380);
                  v382 = v381 - 1;
                }
                while (__stlxr(v382, v380));
                if (!v382)
                {
                  atomic_store(1u, v380);
                  WTF::fastFree((WTF *)v380, v199);
                }
              }
              v29 = 1.0;
            }
            else
            {
              v119 = (float)(int)v466 * 0.015625;
              LODWORD(v120) = (_DWORD)v448;
              if (*(float *)&v448 > 0.0 && *((float *)&v448 + 1) > 0.0)
              {
                v120 = fmaxf(*(float *)&v448 + v119, 0.0);
                v448 = (unsigned int *)__PAIR64__(COERCE_UNSIGNED_INT(fmaxf(v119 + *((float *)&v448 + 1), 0.0)), LODWORD(v120));
              }
              LODWORD(v121) = (_DWORD)v449;
              if (*(float *)&v449 > 0.0 && *((float *)&v449 + 1) > 0.0)
              {
                v121 = fmaxf(v119 + *(float *)&v449, 0.0);
                v449 = (char *)__PAIR64__(COERCE_UNSIGNED_INT(fmaxf(v119 + *((float *)&v449 + 1), 0.0)), LODWORD(v121));
              }
              LODWORD(v122) = v450;
              if (*(float *)&v450 > 0.0 && *((float *)&v450 + 1) > 0.0)
              {
                v122 = fmaxf(v119 + *(float *)&v450, 0.0);
                v450 = __PAIR64__(COERCE_UNSIGNED_INT(fmaxf(v119 + *((float *)&v450 + 1), 0.0)), LODWORD(v122));
              }
              v123 = v451;
              if (v451 > 0.0 && v452 > 0.0)
              {
                v123 = fmaxf(v119 + v451, 0.0);
                v451 = v123;
                v452 = fmaxf(v119 + v452, 0.0);
              }
              if (v120 < 0.0
                || *((float *)&v448 + 1) < 0.0
                || v122 < 0.0
                || *((float *)&v450 + 1) < 0.0
                || v121 < 0.0
                || *((float *)&v449 + 1) < 0.0
                || v123 < 0.0
                || v452 < 0.0
                || (float)(v120 + v121) > *(float *)&v447
                || (float)(v122 + v123) > *(float *)&v447
                || (float)(*((float *)&v448 + 1) + *((float *)&v450 + 1)) > *((float *)&v447 + 1)
                || (float)(*((float *)&v449 + 1) + v452) > *((float *)&v447 + 1))
              {
                WebCore::FloatRoundedRect::adjustRadii((float *)&v446);
              }
              v442 = 0x11040000000000FFLL;
              (*(void (**)(uint64_t *, uint64_t *, uint64_t *, uint64_t))(*v12 + 264))(v12, &v446, &v442, 1);
              if ((v442 & 0x8000000000000) != 0)
              {
                v124 = (unsigned int *)(v442 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v125 = __ldaxr(v124);
                  v126 = --v125 == 0;
                }
                while (__stlxr(v125, v124));
                goto LABEL_406;
              }
            }
LABEL_145:
            result = (*(uint64_t (**)(uint64_t *, uint64_t))(*v12 + 104))(v12, 1);
          }
LABEL_146:
          if ((v465 & 0x8000000000000) != 0)
          {
            result = v465 & 0xFFFFFFFFFFFFLL;
            do
            {
              v211 = __ldaxr((unsigned int *)result);
              v212 = v211 - 1;
            }
            while (__stlxr(v212, (unsigned int *)result));
            v29 = 1.0;
            if (!v212)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, v49);
            }
          }
          goto LABEL_147;
        }
        v435 = v26;
        v437 = hasBorderRadius;
        if (v466 == 0x80000000)
          v129 = 0x7FFFFFFF;
        else
          v129 = -v466;
        v130 = v467 - v129;
        if (__OFSUB__((_DWORD)v467, v129))
          v130 = (v467 >> 31) + 0x7FFFFFFF;
        v131 = DWORD2(v467) + v129;
        if (__OFADD__(DWORD2(v467), v129))
          v131 = (DWORD2(v467) >> 31) + 0x7FFFFFFF;
        v132 = v131 + v129;
        if (__OFADD__(v131, v129))
          v132 = (v131 >> 31) + 0x7FFFFFFF;
        v133 = DWORD1(v467) - v129;
        if (__OFSUB__(DWORD1(v467), v129))
          v133 = (DWORD1(v467) >> 31) + 0x7FFFFFFF;
        v134 = HIDWORD(v467) + v129;
        if (__OFADD__(HIDWORD(v467), v129))
          v134 = (HIDWORD(v467) >> 31) + 0x7FFFFFFF;
        _VF = __OFADD__(v134, v129);
        v135 = v134 + v129;
        if (_VF)
          v135 = (v134 >> 31) + 0x7FFFFFFF;
        v136 = (unsigned __int16)*(_DWORD *)(a3 + 44) >> 13;
        v137 = 2;
        switch((unsigned __int16)*(_DWORD *)(a3 + 44) >> 13)
        {
          case 1:
          case 2:
            goto LABEL_229;
          case 3:
          case 5:
            LOBYTE(v136) = 3;
            goto LABEL_229;
          case 4:
            goto LABEL_230;
          default:
            LOBYTE(v136) = 0;
LABEL_229:
            v137 = v136;
LABEL_230:
            v138 = v137 & 6;
            if (v471[0])
            {
              if (v470)
                goto LABEL_232;
              if (v138 == 2)
              {
LABEL_346:
                v195 = v37 & (v37 >> 31);
                _VF = __OFSUB__(v135, v195);
                v196 = v135 - v195;
                if (_VF)
                  v196 = (v135 >> 31) + 0x7FFFFFFF;
                v197 = v196 + v441;
                if (__OFADD__(v196, v441))
                  v197 = (v196 >> 31) + 0x7FFFFFFF;
                v135 = v197 + v466;
                if (__OFADD__(v197, v466))
                  v135 = (v197 >> 31) + 0x7FFFFFFF;
                goto LABEL_232;
              }
            }
            else
            {
              if (v138 == 2)
              {
                v190 = v37 & ~(v37 >> 31);
                _VF = __OFADD__(v190, v441);
                v191 = v190 + v441;
                if (_VF)
                  v191 = 0x7FFFFFFF;
                v192 = v191 + v466;
                if (__OFADD__(v191, v466))
                  v192 = (v191 >> 31) + 0x7FFFFFFF;
                if (v192 == 0x80000000)
                  v193 = 0x7FFFFFFF;
                else
                  v193 = -v192;
                if (__OFADD__(v133, v193))
                  v133 = (v133 >> 31) + 0x7FFFFFFF;
                else
                  v133 += v193;
                _VF = __OFSUB__(v135, v193);
                v194 = v135 - v193;
                if (_VF)
                  v194 = (v135 >> 31) + 0x7FFFFFFF;
                v135 = v194 & ~(v194 >> 31);
                if (!v470)
                  goto LABEL_346;
                goto LABEL_232;
              }
              v201 = v34 & ~(v34 >> 31);
              _VF = __OFADD__(v201, v441);
              v202 = v201 + v441;
              if (_VF)
                v202 = 0x7FFFFFFF;
              v203 = v202 + v466;
              if (__OFADD__(v202, v466))
                v203 = (v202 >> 31) + 0x7FFFFFFF;
              if (v203 == 0x80000000)
                v204 = 0x7FFFFFFF;
              else
                v204 = -v203;
              if (__OFADD__(v130, v204))
                v130 = (v130 >> 31) + 0x7FFFFFFF;
              else
                v130 += v204;
              _VF = __OFSUB__(v132, v204);
              v205 = v132 - v204;
              if (_VF)
                v205 = (v132 >> 31) + 0x7FFFFFFF;
              v132 = v205 & ~(v205 >> 31);
              if (v470)
              {
LABEL_232:
                *(_QWORD *)&v462 = __PAIR64__(v133, v130);
                *((_QWORD *)&v462 + 1) = __PAIR64__(v135, v132);
                v463 = v468;
                v464 = v469;
                if (v466
                  && (vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v463), (int16x8_t)vceqzq_s32(v464))))) & 1) != 0)
                {
                  v446 = a3;
                  v447 = v471;
                  v448 = &v466;
                  v449 = &v470;
                  v450 = (unint64_t)a2;
                  WebCore::BackgroundPainter::paintBoxShadow(WebCore::LayoutRect const&,WebCore::RenderStyle const&,WebCore::ShadowStyle,BOOL,BOOL)::$_0::operator()((uint64_t)&v453, (uint64_t)&v446);
                  v463 = v455;
                  v464 = v456;
                }
                WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)&v462, v20, (uint64_t)&v453);
                WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)&v467, v20, (uint64_t)&v446);
                v139.n128_u32[0] = v454.i32[0];
                if (v454.f32[0] <= 0.0 || (v139.n128_u32[0] = v454.u32[1], v454.f32[1] <= 0.0))
                {
                  v189 = *v12;
                  if (hasBorderRadius)
                    result = (*(uint64_t (**)(uint64_t *, uint64_t *, unint64_t *, uint64_t, __n128))(v189 + 264))(v12, &v446, &v465, 1, v139);
                  else
                    result = (*(uint64_t (**)(uint64_t *, uint64_t *, unint64_t *, __n128))(v189 + 224))(v12, &v446, &v465, v139);
                }
                else
                {
                  if ((v465 & 0x8000000000000) != 0)
                  {
                    v142 = *(_DWORD *)((v465 & 0xFFFFFFFFFFFFLL) + 0xC);
                    if (HIBYTE(v465) >= 0x14)
                      v143 = 0x110C000000000000;
                    else
                      v143 = v465 & 0xFF00000000000000 | 0xC000000000000;
                    v144 = v465 & 0x1000000000000;
                    v145 = *(_QWORD *)((v465 & 0xFFFFFFFFFFFFLL) + 4);
                    v146 = WTF::fastMalloc((WTF *)0x14);
                    *(_DWORD *)v146 = 1;
                    *(_QWORD *)(v146 + 4) = v145;
                    *(_DWORD *)(v146 + 12) = v142;
                    *(_DWORD *)(v146 + 16) = 1065353216;
                    v141 = v143 | v144 | v146;
                  }
                  else
                  {
                    v140 = llroundf(255.0);
                    if (v140 >= 255)
                      v140 = 255;
                    v141 = v140 & ~(v140 >> 63) | v465 & 0x10000FFFFFF00 | 0x1104000000000000;
                  }
                  v442 = v141;
                  v443 = v467;
                  v147 = v467 - v441;
                  if (__OFSUB__((_DWORD)v467, v441))
                    v147 = (v467 >> 31) + 0x7FFFFFFF;
                  LODWORD(v443) = v147;
                  v148 = DWORD2(v443) + v441;
                  if (__OFADD__(DWORD2(v443), v441))
                    v148 = (DWORD2(v443) >> 31) + 0x7FFFFFFF;
                  v149 = v148 + v441;
                  if (__OFADD__(v148, v441))
                    v149 = (v148 >> 31) + 0x7FFFFFFF;
                  DWORD2(v443) = v149;
                  v150 = DWORD1(v443) - v441;
                  if (__OFSUB__(DWORD1(v443), v441))
                    v150 = (DWORD1(v443) >> 31) + 0x7FFFFFFF;
                  DWORD1(v443) = v150;
                  v151 = HIDWORD(v443) + v441;
                  if (__OFADD__(HIDWORD(v443), v441))
                    v151 = (HIDWORD(v443) >> 31) + 0x7FFFFFFF;
                  v152 = v151 + v441;
                  if (__OFADD__(v151, v441))
                    v152 = (v151 >> 31) + 0x7FFFFFFF;
                  HIDWORD(v443) = v152;
                  if ((v466 & 0x80000000) != 0)
                  {
                    if (v466 == 0x80000000)
                      v200 = 0x7FFFFFFF;
                    else
                      v200 = -v466;
                    WebCore::LayoutRect::inflate<WebCore::LayoutUnit>((int *)&v443, v200);
                    v147 = v443;
                    v150 = DWORD1(v443);
                    v149 = DWORD2(v443);
                    v152 = HIDWORD(v443);
                  }
                  if (v34 == 0x80000000)
                    v153 = 0x7FFFFFFF;
                  else
                    v153 = -v34;
                  if (v37 == 0x80000000)
                    v154 = 0x7FFFFFFF;
                  else
                    v154 = -v37;
                  _VF = __OFADD__(v147, v153);
                  v155 = v147 + v153;
                  if (_VF)
                    v155 = (v147 >> 31) + 0x7FFFFFFF;
                  v156 = v150 + v154;
                  if (__OFADD__(v150, v154))
                    v156 = (v150 >> 31) + 0x7FFFFFFF;
                  v157 = *((_QWORD *)&v443 + 1);
                  if (v149 < 1 || (int)v152 < 1)
                  {
                    v155 = v443;
                    v156 = DWORD1(v443);
                  }
                  else if (SDWORD2(v443) < 1 || *((uint64_t *)&v443 + 1) <= 0)
                  {
                    v157 = v149 | (unint64_t)(v152 << 32);
                  }
                  else
                  {
                    if ((int)v155 >= (int)v443)
                      v158 = v443;
                    else
                      v158 = v155;
                    if ((int)v156 >= SDWORD1(v443))
                      v159 = DWORD1(v443);
                    else
                      v159 = v156;
                    v160 = v443 + DWORD2(v443);
                    if (__OFADD__((_DWORD)v443, DWORD2(v443)))
                      v160 = (v443 >> 31) + 0x7FFFFFFF;
                    _VF = __OFADD__(v155, v149);
                    v161 = v155 + v149;
                    if (_VF)
                      v161 = (v155 >> 31) + 0x7FFFFFFF;
                    if (v160 > v161)
                      v161 = v160;
                    v162 = DWORD1(v443) + HIDWORD(v443);
                    if (__OFADD__(DWORD1(v443), HIDWORD(v443)))
                      v162 = (DWORD1(v443) >> 31) + 0x7FFFFFFF;
                    _VF = __OFADD__((_DWORD)v156, (_DWORD)v152);
                    v163 = v156 + v152;
                    if (_VF)
                      v163 = (v156 >> 31) + 0x7FFFFFFF;
                    if (v162 <= v163)
                      v164 = v163;
                    else
                      v164 = v162;
                    v165 = v161 - v158;
                    if (__OFSUB__(v161, v158))
                      v165 = (v161 >> 31) + 0x7FFFFFFF;
                    v166 = v164 - v159;
                    if (__OFSUB__(v164, (_DWORD)v159))
                      v166 = (v164 >> 31) + 0x7FFFFFFF;
                    v157 = v165 | (unint64_t)(v166 << 32);
                    v155 = v158;
                    v156 = v159;
                  }
                  *(_QWORD *)&v461 = v155 | (unint64_t)(v156 << 32);
                  *((_QWORD *)&v461 + 1) = v157;
                  v457 = WebCore::snapRectToDevicePixels((int *)&v461, v20);
                  v458 = v167;
                  v459 = v168;
                  v460 = v169;
                  (*(void (**)(uint64_t *, uint64_t))(*v12 + 96))(v12, 1);
                  v170 = *v12;
                  if (v437)
                    (*(void (**)(uint64_t *, uint64_t *))(v170 + 464))(v12, &v446);
                  else
                    (*(void (**)(uint64_t *, uint64_t *))(v170 + 456))(v12, &v446);
                  v171 = *((_DWORD *)a2 + 2);
                  if (((v171 ^ (2 * v171)) & 0x80000000) != 0)
                    v172 = (v171 >> 31) + 0x7FFFFFFF;
                  else
                    v172 = 2 * v171;
                  v173 = v34 & ~(v34 >> 31);
                  _VF = __OFADD__(v172, v173);
                  v174 = v172 + v173;
                  if (_VF)
                    v174 = (v172 >> 31) + 0x7FFFFFFF;
                  v175 = v174 + v441;
                  if (__OFADD__(v174, v441))
                    v175 = (v174 >> 31) + 0x7FFFFFFF;
                  if (((v466 ^ (2 * v466)) & 0x80000000) != 0)
                    v176 = (v466 >> 31) + 0x7FFFFFFF;
                  else
                    v176 = 2 * v466;
                  _VF = __OFSUB__(v175, v176);
                  v177 = v175 - v176;
                  if (_VF)
                    v177 = (v175 >> 31) + 0x7FFFFFFF;
                  v178 = 0x1FFFFFF;
                  v179 = v177 + 64;
                  if (!__OFADD__(v177, 64) && v179 <= 2147483583)
                  {
                    if (v179 < 0)
                      v178 = -(-v179 >> 6);
                    else
                      v178 = (v177 + 127) >> 6;
                  }
                  (*(void (**)(uint64_t *, float, float))(*v12 + 648))(v12, (float)(int)(v178 << 6) * 0.015625, 0.0);
                  v180 = v34 - (v178 << 6);
                  if (__OFSUB__(v34, v178 << 6))
                    v180 = (v34 >> 31) + 0x7FFFFFFF;
                  v181 = (double)v180 * 0.015625;
                  if (v181 < 0.0)
                    v182 = round((v181 + (double)-v180) * v28) / v28 - (double)-v180;
                  else
                    v182 = round(v181 * v28) / v28;
                  v183 = (double)v37 * 0.015625;
                  if (v183 < 0.0)
                    v184 = round((v183 + (double)-v37) * v28) / v28 - (double)-v37;
                  else
                    v184 = round(v183 * v28) / v28;
                  v185 = v465;
                  if ((v465 & 0x8000000000000) != 0)
                  {
                    v319 = (unsigned int *)(v465 & 0xFFFFFFFFFFFFLL);
                    do
                      v320 = __ldaxr(v319);
                    while (__stlxr(v320 + 1, v319));
                    v434 = v434 & 0xFFFFFF00 | *(unsigned __int8 *)(v27 + 49);
                    *(float *)&v443 = v182;
                    *((float *)&v443 + 1) = v184;
                    *((float *)&v443 + 2) = v47;
                    v444.i64[0] = v185;
                    v321 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFLL);
                    do
                      v322 = __ldaxr(v321);
                    while (__stlxr(v322 + 1, v321));
                    v444.i64[1] = v434 | 0x3F80000000000000;
                    v445.i8[0] = 1;
                    WebCore::GraphicsContextState::setDropShadow(v439, (uint64_t)&v443);
                    if (v445.i8[0])
                    {
                      if ((v444.i64[0] & 0x8000000000000) != 0)
                      {
                        v425 = (unsigned int *)(v444.i64[0] & 0xFFFFFFFFFFFFLL);
                        do
                        {
                          v426 = __ldaxr(v425);
                          v427 = v426 - 1;
                        }
                        while (__stlxr(v427, v425));
                        if (!v427)
                        {
                          atomic_store(1u, v425);
                          WTF::fastFree((WTF *)v425, v323);
                        }
                      }
                    }
                    (*(void (**)(uint64_t *, uint64_t))(*v12 + 88))(v12, v439);
                    if ((v185 & 0x8000000000000) != 0)
                    {
                      v325 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFLL);
                      do
                      {
                        v326 = __ldaxr(v325);
                        v327 = v326 - 1;
                      }
                      while (__stlxr(v327, v325));
                      if (!v327)
                      {
                        atomic_store(1u, v325);
                        WTF::fastFree((WTF *)v325, v324);
                      }
                    }
                  }
                  else
                  {
                    v186 = v434 & 0xFFFFFF00 | *(unsigned __int8 *)(v27 + 49);
                    *(float *)&v443 = v182;
                    *((float *)&v443 + 1) = v184;
                    *((float *)&v443 + 2) = v47;
                    v444.i64[0] = v465;
                    v434 = v186;
                    v444.i64[1] = v186 | 0x3F80000000000000;
                    v445.i8[0] = 1;
                    v187 = v12 + 1;
                    WebCore::GraphicsContextState::setDropShadow(v439, (uint64_t)&v443);
                    if (v445.i8[0])
                    {
                      if ((v444.i64[0] & 0x8000000000000) != 0)
                      {
                        v279 = (unsigned int *)(v444.i64[0] & 0xFFFFFFFFFFFFLL);
                        do
                        {
                          v280 = __ldaxr(v279);
                          v281 = v280 - 1;
                        }
                        while (__stlxr(v281, v279));
                        v187 = v12 + 1;
                        if (!v281)
                        {
                          atomic_store(1u, v279);
                          WTF::fastFree((WTF *)v279, v188);
                        }
                      }
                    }
                    (*(void (**)(uint64_t *, uint64_t *))(*v12 + 88))(v12, v187);
                  }
                  (*(void (**)(uint64_t *, float *, float32x2_t *, uint64_t *))(*v12 + 272))(v12, &v457, &v453, &v442);
                  result = (*(uint64_t (**)(uint64_t *, uint64_t))(*v12 + 104))(v12, 1);
                  if ((v442 & 0x8000000000000) != 0)
                  {
                    result = v442 & 0xFFFFFFFFFFFFLL;
                    do
                    {
                      v277 = __ldaxr((unsigned int *)result);
                      v278 = v277 - 1;
                    }
                    while (__stlxr(v278, (unsigned int *)result));
                    if (!v278)
                    {
                      atomic_store(1u, (unsigned int *)result);
                      result = WTF::fastFree((WTF *)result, v49);
                    }
                  }
                }
                v26 = v435;
                hasBorderRadius = v437;
                v29 = 1.0;
                goto LABEL_146;
              }
            }
            v206 = v34 & (v34 >> 31);
            _VF = __OFSUB__(v132, v206);
            v207 = v132 - v206;
            if (_VF)
              v207 = (v132 >> 31) + 0x7FFFFFFF;
            v208 = v207 + v441;
            if (__OFADD__(v207, v441))
              v208 = (v207 >> 31) + 0x7FFFFFFF;
            v132 = v208 + v466;
            if (__OFADD__(v208, v466))
              v132 = (v208 >> 31) + 0x7FFFFFFF;
            goto LABEL_232;
        }
      }
      v436 = v26;
      v438 = hasBorderRadius;
      if (v45 > -2147483650.0)
        v219 = (int)v45;
      else
        v219 = 0x80000000;
      if (v45 < 2147483650.0)
        v220 = v219;
      else
        v220 = 0x7FFFFFFF;
      v466 = v220;
      if (v38)
        v221 = v41;
      else
        v221 = (float)v39;
      if (!v34 && !v37 && v221 == 0.0 && v220 == 0)
      {
LABEL_521:
        v26 = v436;
        hasBorderRadius = v438;
        v29 = 1.0;
        goto LABEL_147;
      }
      result = (uint64_t)WebCore::RenderStyle::colorWithColorFilter((WebCore::RenderStyle *)a3, (const WebCore::StyleColor *)(v27 + 32), (WebCore::Color *)&v465);
      if (!*(_BYTE *)(v27 + 48))
      {
        v462 = v467;
        v463 = v468;
        v464 = v469;
        v224 = v467 - v466;
        if (__OFSUB__((_DWORD)v467, v466))
          v224 = (v467 >> 31) + 0x7FFFFFFF;
        LODWORD(v462) = v224;
        v225 = DWORD2(v462) + v466;
        if (__OFADD__(DWORD2(v462), v466))
          v225 = (DWORD2(v462) >> 31) + 0x7FFFFFFF;
        v226 = v225 + v466;
        if (__OFADD__(v225, v466))
          v226 = (v225 >> 31) + 0x7FFFFFFF;
        DWORD2(v462) = v226;
        v227 = DWORD1(v462) - v466;
        if (__OFSUB__(DWORD1(v462), v466))
          v227 = (DWORD1(v462) >> 31) + 0x7FFFFFFF;
        DWORD1(v462) = v227;
        v228 = HIDWORD(v462) + v466;
        if (__OFADD__(HIDWORD(v462), v466))
          v228 = (HIDWORD(v462) >> 31) + 0x7FFFFFFF;
        v229 = v228 + v466;
        if (__OFADD__(v228, v466))
          v229 = (v228 >> 31) + 0x7FFFFFFF;
        HIDWORD(v462) = v229;
        if (v226 < 1 || v229 <= 0)
          goto LABEL_520;
        v461 = v467;
        v230 = v441 + v466;
        if (__OFADD__(v441, v466))
          v230 = (v441 >> 31) + 0x7FFFFFFF;
        v231 = v461 - v230;
        if (__OFSUB__((_DWORD)v461, v230))
          v231 = (v461 >> 31) + 0x7FFFFFFF;
        v232 = DWORD2(v461) + v230;
        if (__OFADD__(DWORD2(v461), v230))
          v232 = (DWORD2(v461) >> 31) + 0x7FFFFFFF;
        v233 = v232 + v230;
        if (__OFADD__(v232, v230))
          v233 = (v232 >> 31) + 0x7FFFFFFF;
        DWORD2(v461) = v233;
        v234 = DWORD1(v461) - v230;
        if (__OFSUB__(DWORD1(v461), v230))
          v234 = (DWORD1(v461) >> 31) + 0x7FFFFFFF;
        v235 = HIDWORD(v461) + v230;
        if (__OFADD__(HIDWORD(v461), v230))
          v235 = (HIDWORD(v461) >> 31) + 0x7FFFFFFF;
        _VF = __OFADD__(v235, v230);
        v236 = v235 + v230;
        if (_VF)
          v236 = (v235 >> 31) + 0x7FFFFFFF;
        HIDWORD(v461) = v236;
        v237 = v231 + v34;
        if (__OFADD__(v231, v34))
          v237 = (v231 >> 31) + 0x7FFFFFFF;
        LODWORD(v461) = v237;
        v238 = v234 + v37;
        if (__OFADD__(v234, v37))
          v238 = (v234 >> 31) + 0x7FFFFFFF;
        DWORD1(v461) = v238;
        v457 = WebCore::snapRectToDevicePixels((int *)&v461, v20);
        v458 = v239;
        v459 = v240;
        v460 = v241;
        (*(void (**)(uint64_t *, uint64_t))(*v12 + 96))(v12, 1);
        (*(void (**)(uint64_t *, float *))(*v12 + 456))(v12, &v457);
        v242 = *((_DWORD *)a2 + 2);
        v243 = v34 & ~(v34 >> 31);
        _VF = __OFADD__(v242, v243);
        v244 = v242 + v243;
        if (_VF)
          v244 = (v242 >> 31) + 0x7FFFFFFF;
        v245 = v244 + v441;
        if (__OFADD__(v244, v441))
          v245 = (v244 >> 31) + 0x7FFFFFFF;
        if (((v466 ^ (2 * v466)) & 0x80000000) != 0)
          v246 = (v466 >> 31) + 0x7FFFFFFF;
        else
          v246 = 2 * v466;
        _VF = __OFADD__(v245, v246);
        v247 = v245 + v246;
        if (_VF)
          v247 = (v245 >> 31) + 0x7FFFFFFF;
        v248 = 0x1FFFFFF;
        _VF = __OFADD__(v247, 64);
        v249 = v247 + 64;
        if (!_VF && v249 <= 2147483583)
        {
          if (v249 < 0)
            v248 = -(-v249 >> 6);
          else
            v248 = (v249 + 63) >> 6;
        }
        v250 = v248 << 6;
        _VF = __OFSUB__(v34, v248 << 6);
        v251 = v34 - (v248 << 6);
        if (_VF)
          v252 = (v34 >> 31) + 0x7FFFFFFF;
        else
          v252 = v251;
        v253 = v462 + v250;
        if (__OFADD__((_DWORD)v462, v250))
          v253 = (v462 >> 31) + 0x7FFFFFFF;
        LODWORD(v462) = v253;
        WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)&v467, v20, (uint64_t)&v453);
        WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)&v462, v20, (uint64_t)&v446);
        v254 = v462 + v252;
        if (__OFADD__((_DWORD)v462, v252))
          v254 = (v462 >> 31) + 0x7FFFFFFF;
        v255 = DWORD1(v462) + v37;
        if (__OFADD__(DWORD1(v462), v37))
          v255 = (DWORD1(v462) >> 31) + 0x7FFFFFFF;
        v256 = (double)v254 * 0.015625;
        if (v256 < 0.0)
          v257 = round((v256 + (double)-v254) * v28) / v28 - (double)-v254;
        else
          v257 = round(v256 * v28) / v28;
        v258 = (double)v255 * 0.015625;
        if (v258 < 0.0)
          v259 = round((v258 + (double)-v255) * v28) / v28 - (double)-v255;
        else
          v259 = round(v258 * v28) / v28;
        v260 = v446;
        v261 = v465;
        if ((v465 & 0x8000000000000) != 0)
        {
          v394 = (unsigned int *)(v465 & 0xFFFFFFFFFFFFLL);
          do
            v395 = __ldaxr(v394);
          while (__stlxr(v395 + 1, v394));
        }
        v262 = v257;
        v263 = v259;
        v264 = *(unsigned __int8 *)(v27 + 49);
        *(float *)&v443 = v262 - *(float *)&v260;
        *((float *)&v443 + 1) = v263 - *((float *)&v260 + 1);
        *((float *)&v443 + 2) = v221;
        v444.i64[0] = v261;
        if ((v261 & 0x8000000000000) != 0)
        {
          v396 = (unsigned int *)(v261 & 0xFFFFFFFFFFFFLL);
          do
            v397 = __ldaxr(v396);
          while (__stlxr(v397 + 1, v396));
        }
        v440 = v440 & 0xFFFFFF00 | v264;
        v444.i64[1] = v440 | 0x3F80000000000000;
        v445.i8[0] = 1;
        WebCore::GraphicsContextState::setDropShadow(v439, (uint64_t)&v443);
        if (v445.i8[0])
        {
          if ((v444.i64[0] & 0x8000000000000) != 0)
          {
            v410 = (unsigned int *)(v444.i64[0] & 0xFFFFFFFFFFFFLL);
            do
            {
              v411 = __ldaxr(v410);
              v412 = v411 - 1;
            }
            while (__stlxr(v412, v410));
            if (!v412)
            {
              atomic_store(1u, v410);
              WTF::fastFree((WTF *)v410, v265);
            }
          }
        }
        (*(void (**)(uint64_t *, uint64_t))(*v12 + 88))(v12, v439);
        if ((v261 & 0x8000000000000) != 0)
        {
          v413 = (unsigned int *)(v261 & 0xFFFFFFFFFFFFLL);
          do
          {
            v414 = __ldaxr(v413);
            v415 = v414 - 1;
          }
          while (__stlxr(v415, v413));
          if (!v415)
          {
            atomic_store(1u, v413);
            WTF::fastFree((WTF *)v413, v266);
          }
        }
        if (hasBorderRadius)
        {
          if (v26)
          {
            v267.n128_u32[0] = -1.0;
            WebCore::FloatRoundedRect::inflateWithRadii(&v453, v267.n128_f64[0]);
          }
          if (v454.f32[0] > 0.0 && v454.f32[1] > 0.0)
            (*(void (**)(uint64_t *, float32x2_t *, float32_t))(*v12 + 488))(v12, &v453, v454.f32[1]);
          v285 = v457 * 64.0;
          if (v285 > -2147483650.0)
            v286 = (int)v285;
          else
            v286 = 0x80000000;
          if (v285 < 2147483650.0)
            v287 = v286;
          else
            v287 = 0x7FFFFFFF;
          v288 = v458 * 64.0;
          if (v288 > -2147483650.0)
            v289 = (int)v288;
          else
            v289 = 0x80000000;
          if (v288 < 2147483650.0)
            v290 = v289;
          else
            v290 = 0x7FFFFFFF;
          v291 = v459 * 64.0;
          if (v291 > -2147483650.0)
            v292 = (int)v291;
          else
            v292 = 0x80000000;
          if (v291 < 2147483650.0)
            v293 = v292;
          else
            v293 = 0x7FFFFFFF;
          v294 = v460 * 64.0;
          if (v294 >= 2147483650.0)
          {
            v295 = 0x7FFFFFFF;
          }
          else if (v294 <= -2147483650.0)
          {
            v295 = 0x80000000;
          }
          else
          {
            v295 = (int)v294;
          }
          *(_QWORD *)&v443 = __PAIR64__(v290, v287);
          *((_QWORD *)&v443 + 1) = __PAIR64__(v295, v293);
          v444 = v468;
          v445 = v469;
          if (((v441 ^ (2 * v441)) & 0x80000000) != 0)
            v296 = (v441 >> 31) + 0x7FFFFFFF;
          else
            v296 = 2 * v441;
          v297 = v296 + v466;
          if (__OFADD__(v296, v466))
            v297 = (v296 >> 31) + 0x7FFFFFFF;
          LODWORD(v442) = v297;
          WebCore::RoundedRectRadii::expand(v444.i32, &v442, &v442, &v442, &v442);
          if (WebCore::BorderPainter::allCornersClippedOut((uint64_t)&v443, a1[1]))
          {
            v442 = 0x11040000000000FFLL;
            (*(void (**)(uint64_t *, uint64_t *, uint64_t *))(*v12 + 224))(v12, &v446, &v442);
            if ((v442 & 0x8000000000000) == 0)
            {
LABEL_519:
              result = (*(uint64_t (**)(uint64_t *, uint64_t))(*v12 + 104))(v12, 1);
LABEL_520:
              if ((v465 & 0x8000000000000) != 0)
              {
                result = v465 & 0xFFFFFFFFFFFFLL;
                do
                {
                  v417 = __ldaxr((unsigned int *)result);
                  v418 = v417 - 1;
                }
                while (__stlxr(v418, (unsigned int *)result));
                if (!v418)
                {
                  atomic_store(1u, (unsigned int *)result);
                  result = WTF::fastFree((WTF *)result, v223);
                }
              }
              goto LABEL_521;
            }
            v303 = (unsigned int *)(v442 & 0xFFFFFFFFFFFFLL);
            do
            {
              v392 = __ldaxr(v303);
              v305 = --v392 == 0;
            }
            while (__stlxr(v392, v303));
          }
          else
          {
            v298 = (float)(int)v466 * 0.015625;
            LODWORD(v299) = (_DWORD)v448;
            if (*(float *)&v448 > 0.0 && *((float *)&v448 + 1) > 0.0)
            {
              v299 = fmaxf(*(float *)&v448 + v298, 0.0);
              v448 = (unsigned int *)__PAIR64__(COERCE_UNSIGNED_INT(fmaxf(v298 + *((float *)&v448 + 1), 0.0)), LODWORD(v299));
            }
            LODWORD(v300) = (_DWORD)v449;
            if (*(float *)&v449 > 0.0 && *((float *)&v449 + 1) > 0.0)
            {
              v300 = fmaxf(v298 + *(float *)&v449, 0.0);
              v449 = (char *)__PAIR64__(COERCE_UNSIGNED_INT(fmaxf(v298 + *((float *)&v449 + 1), 0.0)), LODWORD(v300));
            }
            LODWORD(v301) = v450;
            if (*(float *)&v450 > 0.0 && *((float *)&v450 + 1) > 0.0)
            {
              v301 = fmaxf(v298 + *(float *)&v450, 0.0);
              v450 = __PAIR64__(COERCE_UNSIGNED_INT(fmaxf(v298 + *((float *)&v450 + 1), 0.0)), LODWORD(v301));
            }
            v302 = v451;
            if (v451 > 0.0 && v452 > 0.0)
            {
              v302 = fmaxf(v298 + v451, 0.0);
              v451 = v302;
              v452 = fmaxf(v298 + v452, 0.0);
            }
            if (v299 < 0.0
              || *((float *)&v448 + 1) < 0.0
              || v301 < 0.0
              || *((float *)&v450 + 1) < 0.0
              || v300 < 0.0
              || *((float *)&v449 + 1) < 0.0
              || v302 < 0.0
              || v452 < 0.0
              || (float)(v299 + v300) > *(float *)&v447
              || (float)(v301 + v302) > *(float *)&v447
              || (float)(*((float *)&v448 + 1) + *((float *)&v450 + 1)) > *((float *)&v447 + 1)
              || (float)(*((float *)&v449 + 1) + v452) > *((float *)&v447 + 1))
            {
              WebCore::FloatRoundedRect::adjustRadii((float *)&v446);
            }
            v442 = 0x11040000000000FFLL;
            (*(void (**)(uint64_t *, uint64_t *, uint64_t *, uint64_t))(*v12 + 264))(v12, &v446, &v442, 1);
            if ((v442 & 0x8000000000000) == 0)
              goto LABEL_519;
            v303 = (unsigned int *)(v442 & 0xFFFFFFFFFFFFLL);
            do
            {
              v304 = __ldaxr(v303);
              v305 = --v304 == 0;
            }
            while (__stlxr(v304, v303));
          }
        }
        else
        {
          if (v26)
          {
            (*(void (**)(__int128 *__return_ptr, uint64_t *, uint64_t))(*v12 + 672))(&v443, v12, 1);
            if (*(double *)&v443 != 1.0
              || (*(double *)&v444.i64[1] != -1.0 ? (v391 = *(double *)&v444.i64[1] == 1.0) : (v391 = 1),
                  !v391 || *((double *)&v443 + 1) != 0.0 || (v267.n128_u32[1] = v444.u32[1], *(double *)v444.i64 != 0.0)))
            {
              __asm { FMOV            V0.2S, #1.0 }
              v267.n128_u64[0] = (unint64_t)vadd_f32(v453, _D0);
              __asm { FMOV            V1.2S, #-1.0 }
              v453 = (float32x2_t)v267.n128_u64[0];
              v454 = vadd_f32(vadd_f32(v454, _D1), _D1);
            }
          }
          v267.n128_u32[0] = v454.i32[0];
          if (v454.f32[0] > 0.0)
          {
            v267.n128_u32[0] = v454.u32[1];
            if (v454.f32[1] > 0.0)
              (*(void (**)(uint64_t *, float32x2_t *, float32_t))(*v12 + 472))(v12, &v453, v454.f32[1]);
          }
          *(_QWORD *)&v443 = 0x11040000000000FFLL;
          (*(void (**)(uint64_t *, uint64_t *, __int128 *, __n128))(*v12 + 224))(v12, &v446, &v443, v267);
          if ((v443 & 0x8000000000000) == 0)
            goto LABEL_519;
          v303 = (unsigned int *)(v443 & 0xFFFFFFFFFFFFLL);
          do
          {
            v416 = __ldaxr(v303);
            v305 = --v416 == 0;
          }
          while (__stlxr(v416, v303));
        }
        if (v305)
        {
          atomic_store(1u, v303);
          WTF::fastFree((WTF *)v303, v270);
        }
        goto LABEL_519;
      }
      if (v466 == 0x80000000)
        v306 = 0x7FFFFFFF;
      else
        v306 = -v466;
      v307 = v467 - v306;
      if (__OFSUB__((_DWORD)v467, v306))
        v307 = (v467 >> 31) + 0x7FFFFFFF;
      v308 = DWORD2(v467) + v306;
      if (__OFADD__(DWORD2(v467), v306))
        v308 = (DWORD2(v467) >> 31) + 0x7FFFFFFF;
      v309 = v308 + v306;
      if (__OFADD__(v308, v306))
        v309 = (v308 >> 31) + 0x7FFFFFFF;
      v310 = DWORD1(v467) - v306;
      if (__OFSUB__(DWORD1(v467), v306))
        v310 = (DWORD1(v467) >> 31) + 0x7FFFFFFF;
      v311 = HIDWORD(v467) + v306;
      if (__OFADD__(HIDWORD(v467), v306))
        v311 = (HIDWORD(v467) >> 31) + 0x7FFFFFFF;
      _VF = __OFADD__(v311, v306);
      v312 = v311 + v306;
      if (_VF)
        v312 = (v311 >> 31) + 0x7FFFFFFF;
      v313 = (unsigned __int16)*(_DWORD *)(a3 + 44) >> 13;
      v314 = 2;
      switch((unsigned __int16)*(_DWORD *)(a3 + 44) >> 13)
      {
        case 1:
        case 2:
          goto LABEL_636;
        case 3:
        case 5:
          LOBYTE(v313) = 3;
          goto LABEL_636;
        case 4:
          goto LABEL_637;
        default:
          LOBYTE(v313) = 0;
LABEL_636:
          v314 = v313;
LABEL_637:
          v315 = v314 & 6;
          if (v471[0])
          {
            if (v470)
              goto LABEL_639;
            if (v315 == 2)
            {
LABEL_774:
              v388 = v37 & (v37 >> 31);
              _VF = __OFSUB__(v312, v388);
              v389 = v312 - v388;
              if (_VF)
                v389 = (v312 >> 31) + 0x7FFFFFFF;
              v390 = v389 + v441;
              if (__OFADD__(v389, v441))
                v390 = (v389 >> 31) + 0x7FFFFFFF;
              v312 = v390 + v466;
              if (__OFADD__(v390, v466))
                v312 = (v390 >> 31) + 0x7FFFFFFF;
              goto LABEL_639;
            }
          }
          else
          {
            if (v315 == 2)
            {
              v383 = v37 & ~(v37 >> 31);
              _VF = __OFADD__(v383, v441);
              v384 = v383 + v441;
              if (_VF)
                v384 = 0x7FFFFFFF;
              v385 = v384 + v466;
              if (__OFADD__(v384, v466))
                v385 = (v384 >> 31) + 0x7FFFFFFF;
              if (v385 == 0x80000000)
                v386 = 0x7FFFFFFF;
              else
                v386 = -v385;
              if (__OFADD__(v310, v386))
                v310 = (v310 >> 31) + 0x7FFFFFFF;
              else
                v310 += v386;
              _VF = __OFSUB__(v312, v386);
              v387 = v312 - v386;
              if (_VF)
                v387 = (v312 >> 31) + 0x7FFFFFFF;
              v312 = v387 & ~(v387 >> 31);
              if (!v470)
                goto LABEL_774;
              goto LABEL_639;
            }
            v398 = v34 & ~(v34 >> 31);
            _VF = __OFADD__(v398, v441);
            v399 = v398 + v441;
            if (_VF)
              v399 = 0x7FFFFFFF;
            v400 = v399 + v466;
            if (__OFADD__(v399, v466))
              v400 = (v399 >> 31) + 0x7FFFFFFF;
            if (v400 == 0x80000000)
              v401 = 0x7FFFFFFF;
            else
              v401 = -v400;
            if (__OFADD__(v307, v401))
              v307 = (v307 >> 31) + 0x7FFFFFFF;
            else
              v307 += v401;
            _VF = __OFSUB__(v309, v401);
            v402 = v309 - v401;
            if (_VF)
              v402 = (v309 >> 31) + 0x7FFFFFFF;
            v309 = v402 & ~(v402 >> 31);
            if (v470)
            {
LABEL_639:
              *(_QWORD *)&v462 = __PAIR64__(v310, v307);
              *((_QWORD *)&v462 + 1) = __PAIR64__(v312, v309);
              v463 = v468;
              v464 = v469;
              if (v466
                && (vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v463), (int16x8_t)vceqzq_s32(v464))))) & 1) != 0)
              {
                v446 = a3;
                v447 = v471;
                v448 = &v466;
                v449 = &v470;
                v450 = (unint64_t)a2;
                WebCore::BackgroundPainter::paintBoxShadow(WebCore::LayoutRect const&,WebCore::RenderStyle const&,WebCore::ShadowStyle,BOOL,BOOL)::$_0::operator()((uint64_t)&v453, (uint64_t)&v446);
                v463 = v455;
                v464 = v456;
              }
              WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)&v462, v20, (uint64_t)&v453);
              WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)&v467, v20, (uint64_t)&v446);
              v316.n128_u32[0] = v454.i32[0];
              if (v454.f32[0] <= 0.0 || (v316.n128_u32[0] = v454.u32[1], v454.f32[1] <= 0.0))
              {
                v379 = *v12;
                if (hasBorderRadius)
                  result = (*(uint64_t (**)(uint64_t *, uint64_t *, unint64_t *, uint64_t, __n128))(v379 + 264))(v12, &v446, &v465, 1, v316);
                else
                  result = (*(uint64_t (**)(uint64_t *, uint64_t *, unint64_t *, __n128))(v379 + 224))(v12, &v446, &v465, v316);
              }
              else
              {
                if ((v465 & 0x8000000000000) != 0)
                {
                  v328 = *(_DWORD *)((v465 & 0xFFFFFFFFFFFFLL) + 0xC);
                  if (HIBYTE(v465) >= 0x14)
                    v329 = 0x110C000000000000;
                  else
                    v329 = v465 & 0xFF00000000000000 | 0xC000000000000;
                  v330 = v465 & 0x1000000000000;
                  v331 = *(_QWORD *)((v465 & 0xFFFFFFFFFFFFLL) + 4);
                  v332 = WTF::fastMalloc((WTF *)0x14);
                  *(_DWORD *)v332 = 1;
                  *(_QWORD *)(v332 + 4) = v331;
                  *(_DWORD *)(v332 + 12) = v328;
                  *(_DWORD *)(v332 + 16) = 1065353216;
                  v318 = v329 | v330 | v332;
                }
                else
                {
                  v317 = llroundf(255.0);
                  if (v317 >= 255)
                    v317 = 255;
                  v318 = v317 & ~(v317 >> 63) | v465 & 0x10000FFFFFF00 | 0x1104000000000000;
                }
                v442 = v318;
                v443 = v467;
                v333 = v467 - v441;
                if (__OFSUB__((_DWORD)v467, v441))
                  v333 = (v467 >> 31) + 0x7FFFFFFF;
                LODWORD(v443) = v333;
                v334 = DWORD2(v443) + v441;
                if (__OFADD__(DWORD2(v443), v441))
                  v334 = (DWORD2(v443) >> 31) + 0x7FFFFFFF;
                v335 = v334 + v441;
                if (__OFADD__(v334, v441))
                  v335 = (v334 >> 31) + 0x7FFFFFFF;
                DWORD2(v443) = v335;
                v336 = DWORD1(v443) - v441;
                if (__OFSUB__(DWORD1(v443), v441))
                  v336 = (DWORD1(v443) >> 31) + 0x7FFFFFFF;
                DWORD1(v443) = v336;
                v337 = HIDWORD(v443) + v441;
                if (__OFADD__(HIDWORD(v443), v441))
                  v337 = (HIDWORD(v443) >> 31) + 0x7FFFFFFF;
                v338 = v337 + v441;
                if (__OFADD__(v337, v441))
                  v338 = (v337 >> 31) + 0x7FFFFFFF;
                HIDWORD(v443) = v338;
                if ((v466 & 0x80000000) != 0)
                {
                  if (v466 == 0x80000000)
                    v393 = 0x7FFFFFFF;
                  else
                    v393 = -v466;
                  WebCore::LayoutRect::inflate<WebCore::LayoutUnit>((int *)&v443, v393);
                  v333 = v443;
                  v336 = DWORD1(v443);
                  v335 = DWORD2(v443);
                  v338 = HIDWORD(v443);
                }
                if (v34 == 0x80000000)
                  v339 = 0x7FFFFFFF;
                else
                  v339 = -v34;
                if (v37 == 0x80000000)
                  v340 = 0x7FFFFFFF;
                else
                  v340 = -v37;
                _VF = __OFADD__(v333, v339);
                v341 = v333 + v339;
                if (_VF)
                  v341 = (v333 >> 31) + 0x7FFFFFFF;
                v342 = v336 + v340;
                if (__OFADD__(v336, v340))
                  v342 = (v336 >> 31) + 0x7FFFFFFF;
                v343 = *((_QWORD *)&v443 + 1);
                if (v335 < 1 || (int)v338 <= 0)
                {
                  v341 = v443;
                  v342 = DWORD1(v443);
                }
                else if (*(uint64_t *)((char *)&v443 + 4) <= 0 || SHIDWORD(v443) < 1)
                {
                  v343 = v335 | (unint64_t)(v338 << 32);
                }
                else
                {
                  if ((int)v341 >= (int)v443)
                    v344 = v443;
                  else
                    v344 = v341;
                  if ((int)v342 >= SDWORD1(v443))
                    v345 = DWORD1(v443);
                  else
                    v345 = v342;
                  v346 = v443 + DWORD2(v443);
                  if (__OFADD__((_DWORD)v443, DWORD2(v443)))
                    v346 = (v443 >> 31) + 0x7FFFFFFF;
                  _VF = __OFADD__(v341, v335);
                  v347 = v341 + v335;
                  if (_VF)
                    v347 = (v341 >> 31) + 0x7FFFFFFF;
                  if (v346 > v347)
                    v347 = v346;
                  v348 = DWORD1(v443) + HIDWORD(v443);
                  if (__OFADD__(DWORD1(v443), HIDWORD(v443)))
                    v348 = (DWORD1(v443) >> 31) + 0x7FFFFFFF;
                  _VF = __OFADD__((_DWORD)v342, (_DWORD)v338);
                  v349 = v342 + v338;
                  if (_VF)
                    v349 = (v342 >> 31) + 0x7FFFFFFF;
                  if (v348 <= v349)
                    v350 = v349;
                  else
                    v350 = v348;
                  v351 = v347 - v344;
                  if (__OFSUB__(v347, v344))
                    v351 = (v347 >> 31) + 0x7FFFFFFF;
                  v352 = v350 - v345;
                  if (__OFSUB__(v350, (_DWORD)v345))
                    v352 = (v350 >> 31) + 0x7FFFFFFF;
                  v343 = v351 | (unint64_t)(v352 << 32);
                  v341 = v344;
                  v342 = v345;
                }
                *(_QWORD *)&v461 = v341 | (unint64_t)(v342 << 32);
                *((_QWORD *)&v461 + 1) = v343;
                v457 = WebCore::snapRectToDevicePixels((int *)&v461, v20);
                v458 = v353;
                v459 = v354;
                v460 = v355;
                (*(void (**)(uint64_t *, uint64_t))(*v12 + 96))(v12, 1);
                v356 = *v12;
                if (v438)
                  (*(void (**)(uint64_t *, uint64_t *))(v356 + 464))(v12, &v446);
                else
                  (*(void (**)(uint64_t *, uint64_t *))(v356 + 456))(v12, &v446);
                v357 = *((_DWORD *)a2 + 2);
                if (((v357 ^ (2 * v357)) & 0x80000000) != 0)
                  v358 = (v357 >> 31) + 0x7FFFFFFF;
                else
                  v358 = 2 * v357;
                v359 = v34 & ~(v34 >> 31);
                _VF = __OFADD__(v358, v359);
                v360 = v358 + v359;
                if (_VF)
                  v360 = (v358 >> 31) + 0x7FFFFFFF;
                v361 = v360 + v441;
                if (__OFADD__(v360, v441))
                  v361 = (v360 >> 31) + 0x7FFFFFFF;
                if (((v466 ^ (2 * v466)) & 0x80000000) != 0)
                  v362 = (v466 >> 31) + 0x7FFFFFFF;
                else
                  v362 = 2 * v466;
                _VF = __OFSUB__(v361, v362);
                v363 = v361 - v362;
                if (_VF)
                  v363 = (v361 >> 31) + 0x7FFFFFFF;
                v364 = 0x1FFFFFF;
                v365 = v363 + 64;
                if (!__OFADD__(v363, 64) && v365 <= 2147483583)
                {
                  if (v365 < 0)
                    v364 = -(-v365 >> 6);
                  else
                    v364 = (v363 + 127) >> 6;
                }
                (*(void (**)(uint64_t *, float, float))(*v12 + 648))(v12, (float)(int)(v364 << 6) * 0.015625, 0.0);
                v366 = v34 - (v364 << 6);
                if (__OFSUB__(v34, v364 << 6))
                  v366 = (v34 >> 31) + 0x7FFFFFFF;
                v367 = (double)v366 * 0.015625;
                if (v367 < 0.0)
                  v368 = round((v367 + (double)-v366) * v28) / v28 - (double)-v366;
                else
                  v368 = round(v367 * v28) / v28;
                v369 = (double)v37 * 0.015625;
                if (v369 < 0.0)
                  v370 = round((v369 + (double)-v37) * v28) / v28 - (double)-v37;
                else
                  v370 = round(v369 * v28) / v28;
                v371 = v465;
                if ((v465 & 0x8000000000000) != 0)
                {
                  v406 = (unsigned int *)(v465 & 0xFFFFFFFFFFFFLL);
                  do
                    v407 = __ldaxr(v406);
                  while (__stlxr(v407 + 1, v406));
                }
                *(float *)&v372 = v368;
                v373 = *(unsigned __int8 *)(v27 + 49);
                *(float *)&v374 = v370;
                *(_QWORD *)&v443 = __PAIR64__(v374, v372);
                *((float *)&v443 + 2) = v221;
                v444.i64[0] = v371;
                if ((v371 & 0x8000000000000) != 0)
                {
                  v408 = (unsigned int *)(v371 & 0xFFFFFFFFFFFFLL);
                  do
                    v409 = __ldaxr(v408);
                  while (__stlxr(v409 + 1, v408));
                }
                v434 = v434 & 0xFFFFFF00 | v373;
                v444.i64[1] = v434 | 0x3F80000000000000;
                v445.i8[0] = 1;
                WebCore::GraphicsContextState::setDropShadow(v439, (uint64_t)&v443);
                if (v445.i8[0])
                {
                  if ((v444.i64[0] & 0x8000000000000) != 0)
                  {
                    v428 = (unsigned int *)(v444.i64[0] & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v429 = __ldaxr(v428);
                      v430 = v429 - 1;
                    }
                    while (__stlxr(v430, v428));
                    if (!v430)
                    {
                      atomic_store(1u, v428);
                      WTF::fastFree((WTF *)v428, v375);
                    }
                  }
                }
                (*(void (**)(uint64_t *, uint64_t))(*v12 + 88))(v12, v439);
                if ((v371 & 0x8000000000000) != 0)
                {
                  v431 = (unsigned int *)(v371 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v432 = __ldaxr(v431);
                    v433 = v432 - 1;
                  }
                  while (__stlxr(v433, v431));
                  if (!v433)
                  {
                    atomic_store(1u, v431);
                    WTF::fastFree((WTF *)v431, v376);
                  }
                }
                (*(void (**)(uint64_t *, float *, float32x2_t *, uint64_t *))(*v12 + 272))(v12, &v457, &v453, &v442);
                result = (*(uint64_t (**)(uint64_t *, uint64_t))(*v12 + 104))(v12, 1);
                if ((v442 & 0x8000000000000) != 0)
                {
                  result = v442 & 0xFFFFFFFFFFFFLL;
                  do
                  {
                    v377 = __ldaxr((unsigned int *)result);
                    v378 = v377 - 1;
                  }
                  while (__stlxr(v378, (unsigned int *)result));
                  if (!v378)
                  {
                    atomic_store(1u, (unsigned int *)result);
                    result = WTF::fastFree((WTF *)result, v223);
                  }
                }
              }
              goto LABEL_520;
            }
          }
          v403 = v34 & (v34 >> 31);
          _VF = __OFSUB__(v309, v403);
          v404 = v309 - v403;
          if (_VF)
            v404 = (v309 >> 31) + 0x7FFFFFFF;
          v405 = v404 + v441;
          if (__OFADD__(v404, v441))
            v405 = (v404 >> 31) + 0x7FFFFFFF;
          v309 = v405 + v466;
          if (__OFADD__(v405, v466))
            v309 = (v405 >> 31) + 0x7FFFFFFF;
          goto LABEL_639;
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderThemeIOS::adjustedPaintRect(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  float v4;
  float v5;
  unsigned int v6;
  uint64_t v7;
  float v8;
  unsigned int v9;
  uint64_t v10;

  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 32) + 148) & 0x1F8000) != 0x8000)
    return *(_QWORD *)a3;
  v3 = a3[2];
  if (a3[3] < v3)
    v3 = a3[3];
  v4 = (float)((float)a3[1] * 0.015625)
     + (float)((float)((float)((float)*(int *)(a2 + 164) * 0.015625) - (float)((float)v3 * 0.015625)) * 0.5);
  v5 = floorf((float)((float)*a3 * 0.015625) * 64.0);
  if (v5 > -2147500000.0)
    v6 = (int)v5;
  else
    v6 = 0x80000000;
  if (v5 < 2147500000.0)
    v7 = v6;
  else
    v7 = 0x7FFFFFFFLL;
  v8 = floorf(v4 * 64.0);
  if (v8 > -2147500000.0)
    v9 = (int)v8;
  else
    v9 = 0x80000000;
  if (v8 < 2147500000.0)
    v10 = v9;
  else
    v10 = 0x7FFFFFFFLL;
  return v7 | (v10 << 32);
}

void WebCore::RenderBlock::adjustBorderBoxRectForPainting(WebCore::RenderBlock *this, WebCore::LayoutRect *a2)
{
  uint64_t v2;
  uint64_t FieldsetLegend;
  WebCore::RenderStyle *v4;
  unsigned int v5;
  double v6;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  double v17;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;

  if ((*((_BYTE *)this + 45) & 1) != 0)
    return;
  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!v2)
    return;
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0)
    return;
  if (*(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
    return;
  if ((WebCore::RenderElement::isSkippedContentRoot(this) & 1) != 0)
    return;
  if (!WebCore::RenderBlock::intrinsicBorderForFieldset(this))
    return;
  FieldsetLegend = WebCore::RenderBlock::findFieldsetLegend((uint64_t)this, 0);
  if (!FieldsetLegend)
    return;
  v4 = (WebCore::RenderBlock *)((char *)this + 80);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
  {
    v5 = *(_DWORD *)(FieldsetLegend + 164);
    v6 = WebCore::RenderStyle::borderBeforeWidth(v4) * 64.0;
    if (v6 < 2147483650.0 && v6 > -2147483650.0)
      goto LABEL_14;
    if (v6 >= 2147483650.0)
    {
      v8 = 0x7FFFFFFF;
      goto LABEL_15;
    }
    if (v6 <= -2147483650.0)
      v8 = 0x80000000;
    else
LABEL_14:
      v8 = (int)v6;
LABEL_15:
    v9 = __OFSUB__(v5, v8);
    v10 = v5 - v8;
    if (v9)
      v10 = (v5 >> 31) + 0x7FFFFFFF;
    v11 = (v10 / 2) & ~((v10 + (v10 < 0)) >> 31);
    v12 = *((_DWORD *)a2 + 3);
    v13 = v12 - v11;
    if (__OFSUB__(v12, v11))
      v13 = (v12 >> 31) + 0x7FFFFFFF;
    *((_DWORD *)a2 + 3) = v13;
    if (((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1 >= 5)
    {
      v14 = *((_DWORD *)a2 + 1);
      v9 = __OFADD__(v14, v11);
      v15 = v14 + v11;
      if (v9)
        v15 = (v14 >> 31) + 0x7FFFFFFF;
      *((_DWORD *)a2 + 1) = v15;
    }
    return;
  }
  v16 = *(_DWORD *)(FieldsetLegend + 160);
  v17 = WebCore::RenderStyle::borderBeforeWidth(v4) * 64.0;
  if (v17 >= 2147483650.0 || v17 <= -2147483650.0)
  {
    if (v17 >= 2147483650.0)
    {
      v19 = 0x7FFFFFFF;
      goto LABEL_37;
    }
    if (v17 <= -2147483650.0)
    {
      v19 = 0x80000000;
      goto LABEL_37;
    }
  }
  v19 = (int)v17;
LABEL_37:
  v9 = __OFSUB__(v16, v19);
  v20 = v16 - v19;
  if (v9)
    v20 = (v16 >> 31) + 0x7FFFFFFF;
  v21 = (v20 / 2) & ~((v20 + (v20 < 0)) >> 31);
  v22 = *((_DWORD *)a2 + 2);
  v23 = v22 - v21;
  if (__OFSUB__(v22, v21))
    v23 = (v22 >> 31) + 0x7FFFFFFF;
  *((_DWORD *)a2 + 2) = v23;
  v24 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if (v24 == 4 || v24 == 2)
  {
    v9 = __OFADD__(*(_DWORD *)a2, v21);
    v25 = *(_DWORD *)a2 + v21;
    if (v9)
      v25 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
    *(_DWORD *)a2 = v25;
  }
}

void WebCore::RenderStyle::getRoundedInnerBorderFor(WebCore::RenderStyle *this@<X0>, const WebCore::LayoutRect *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  char v5;
  unsigned int v7;
  _BOOL4 v8;
  BOOL v9;
  _BOOL4 v10;
  double v11;
  uint64_t v13;
  float v14;
  double v15;
  int v16;
  int v17;
  uint64_t v18;
  float v19;
  int v20;
  uint64_t v21;
  float v22;
  double v23;
  int v24;
  uint64_t v25;
  float v26;
  double v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = a4;
  v7 = ((*((_DWORD *)this + 11) >> 13) & 6) - 2;
  v8 = v7 > 3;
  v9 = v7 >= 4;
  v10 = v7 < 4;
  v11 = 0.0;
  if (v9 && a3 == 0)
  {
    v10 = 0;
    v8 = 1;
    v15 = 0.0;
  }
  else
  {
    v13 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
    v14 = 0.0;
    if ((*(_BYTE *)(v13 + 124) & 0xE) != 0)
    {
      v31 = *(_QWORD *)(v13 + 200);
      if (*(_BYTE *)(v31 + 5) && *(_BYTE *)(v31 + 76) == 4)
      {
        if (*(_BYTE *)(v31 + 78))
          v14 = *(float *)(v31 + 72);
        else
          v14 = (float)*(int *)(v31 + 72);
      }
      else
      {
        v14 = *(float *)(v13 + 120);
      }
    }
    v15 = v14;
  }
  if (v15 * 64.0 > -2147483650.0)
    v16 = (int)(v15 * 64.0);
  else
    v16 = 0x80000000;
  if (v15 * 64.0 < 2147483650.0)
    v17 = v16;
  else
    v17 = 0x7FFFFFFF;
  if ((v10 | a4) != 1)
    goto LABEL_17;
  v18 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
  v19 = 0.0;
  if ((*(_BYTE *)(v18 + 148) & 0xE) != 0)
  {
    v30 = *(_QWORD *)(v18 + 200);
    if (*(_BYTE *)(v30 + 5) && *(_BYTE *)(v30 + 60) == 4)
    {
      if (*(_BYTE *)(v30 + 62))
        v19 = *(float *)(v30 + 56);
      else
        v19 = (float)*(int *)(v30 + 56);
    }
    else
    {
      v19 = *(float *)(v18 + 144);
    }
  }
  v11 = v19 * 64.0;
  if (v11 >= 2147483650.0)
  {
    v20 = 0x7FFFFFFF;
  }
  else
  {
    if (v11 > -2147483650.0)
    {
LABEL_17:
      v20 = (int)v11;
      goto LABEL_18;
    }
    v20 = 0x80000000;
  }
LABEL_18:
  if ((v8 | a3) != 1)
  {
    v23 = 0.0;
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
  v22 = 0.0;
  if ((*(_BYTE *)(v21 + 172) & 0xE) != 0)
  {
    v32 = *(_QWORD *)(v21 + 200);
    if (*(_BYTE *)(v32 + 5) && *(_BYTE *)(v32 + 52) == 4)
    {
      if (*(_BYTE *)(v32 + 54))
        v22 = *(float *)(v32 + 48);
      else
        v22 = (float)*(int *)(v32 + 48);
    }
    else
    {
      v22 = *(float *)(v21 + 168);
    }
  }
  v23 = v22 * 64.0;
  if (v23 >= 2147483650.0)
  {
    v24 = 0x7FFFFFFF;
  }
  else
  {
    if (v23 > -2147483650.0)
    {
LABEL_22:
      v24 = (int)v23;
      goto LABEL_23;
    }
    v24 = 0x80000000;
  }
LABEL_23:
  if ((v8 | a4) == 1)
  {
    v25 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
    v26 = 0.0;
    if ((*(_BYTE *)(v25 + 196) & 0xE) != 0)
    {
      v29 = *(_QWORD *)(v25 + 200);
      if (*(_BYTE *)(v29 + 5) && *(_BYTE *)(v29 + 68) == 4)
      {
        if (*(_BYTE *)(v29 + 70))
          v26 = *(float *)(v29 + 64);
        else
          v26 = (float)*(int *)(v29 + 64);
      }
      else
      {
        v26 = *(float *)(v25 + 192);
      }
    }
    v27 = v26 * 64.0;
    if (v27 >= 2147483650.0)
    {
      v28 = 0x7FFFFFFF;
      goto LABEL_28;
    }
    if (v27 <= -2147483650.0)
    {
      v28 = 0x80000000;
      goto LABEL_28;
    }
  }
  else
  {
    v27 = 0.0;
  }
  v28 = (int)v27;
LABEL_28:
  WebCore::RenderStyle::getRoundedInnerBorderFor((uint64_t)this, (int *)a2, v24, v28, v17, v20, a3, v5, a5);
}

uint64_t WebCore::StyleCachedImage::knownToBeOpaque(WebCore::StyleCachedImage *this, const WebCore::RenderElement *a2)
{
  uint64_t v2;
  WebCore::CachedImage *v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 6);
  if (!v2)
    return 0;
  v3 = *(WebCore::CachedImage **)(v2 + 8);
  if (!v3)
    return 0;
  v4 = WebCore::CachedImage::imageForRenderer(v3, a2);
  v5 = v4;
  if (v4)
    ++*((_DWORD *)v4 + 2);
  v6 = (*(uint64_t (**)(WTF *))(*(_QWORD *)v4 + 104))(v4);
  if (*((_DWORD *)v5 + 2) == 1)
    (*(void (**)(WTF *))(*(_QWORD *)v5 + 8))(v5);
  else
    --*((_DWORD *)v5 + 2);
  return v6;
}

BOOL WebCore::RenderBoxModelObject::borderObscuresBackgroundEdge(WebCore::RenderBoxModelObject *this, const WebCore::FloatSize *a2)
{
  WebCore *v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  int v9;
  void *v10;
  BOOL v11;
  float v12;
  float v13;
  double v14;
  float v15;
  _BOOL8 result;
  float v17;
  float v18;
  double v19;
  float v20;
  float v21;
  double v22;
  float v23;
  float v24;
  double v25;
  float v26;
  WTF *v27;
  void *v28;
  double v29;
  float v30;
  double v31;
  float v32;
  double v33;
  float v34;
  double v35;
  float v36;
  _BOOL8 v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  _BOOL8 v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  _BOOL8 v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  _BOOL8 v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  float v55;
  unsigned __int8 v56;
  char v57;
  char v58;
  uint64_t v59;
  int v60;
  float v61;
  unsigned __int8 v62;
  char v63;
  char v64;
  uint64_t v65;
  int v66;
  float v67;
  unsigned __int8 v68;
  char v69;
  char v70;
  uint64_t v71;
  int v72;
  float v73;
  unsigned __int8 v74;
  char v75;
  char v76;

  v3 = (WebCore::RenderBoxModelObject *)((char *)this + 80);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
  v5 = 1.0;
  if (v4)
  {
    v6 = *(_QWORD *)(v4 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 24);
      if (v7)
      {
        v8 = *(float **)(v7 + 8);
        if (v8)
        {
          v9 = (*(_DWORD *)v8)++;
          v5 = v8[91];
          if (v9)
          {
            *(_DWORD *)v8 = v9;
          }
          else
          {
            WebCore::Page::~Page((uint64_t)v8);
            WTF::fastFree(v27, v28);
          }
        }
      }
    }
  }
  WebCore::borderEdges(v3, (const WebCore::RenderStyle *)1, v5, 1, (uint64_t)&v53);
  if (v58)
    v11 = v57 == 0;
  else
    v11 = 0;
  if (!v11)
    goto LABEL_79;
  v12 = *((float *)a2 + 1);
  v13 = (float)v54 * 0.015625;
  v14 = (float)(2.0 / v55) * 64.0;
  if (v14 >= 2147483650.0)
    v15 = 33554000.0;
  else
    v15 = v14 <= -2147483650.0 ? -33554000.0 : (float)(int)v14 * 0.015625;
  if ((float)(v12 * v13) < v15)
    goto LABEL_79;
  if ((v53 & 0x8000000000000) != 0)
  {
    if (*(float *)((v53 & 0xFFFFFFFFFFFFLL) + 0x10) != 1.0)
      goto LABEL_79;
  }
  else if ((_BYTE)v53 != 0xFF)
  {
    goto LABEL_79;
  }
  result = 0;
  if (v56 - 6 >= 2 && v56 != 1)
  {
    if (v56 == 9)
    {
      v29 = (float)(5.0 / v55) * 64.0;
      if (v29 >= 2147483650.0)
        v30 = 33554000.0;
      else
        v30 = v29 <= -2147483650.0 ? -33554000.0 : (float)(int)v29 * 0.015625;
      if (v13 < (float)(v12 * v30))
        goto LABEL_79;
    }
    result = 0;
    if (v64)
    {
      if (!v63)
      {
        v17 = *(float *)a2;
        v18 = (float)v60 * 0.015625;
        v19 = (float)(2.0 / v61) * 64.0;
        if (v19 >= 2147483650.0)
        {
          v20 = 33554000.0;
        }
        else if (v19 <= -2147483650.0)
        {
          v20 = -33554000.0;
        }
        else
        {
          v20 = (float)(int)v19 * 0.015625;
        }
        if ((float)(*(float *)a2 * v18) < v20)
          goto LABEL_79;
        if ((v59 & 0x8000000000000) != 0)
        {
          if (*(float *)((v59 & 0xFFFFFFFFFFFFLL) + 0x10) != 1.0)
            goto LABEL_79;
        }
        else if ((_BYTE)v59 != 0xFF)
        {
          goto LABEL_79;
        }
        result = 0;
        if (v62 - 6 >= 2 && v62 != 1)
        {
          if (v62 == 9)
          {
            v31 = (float)(5.0 / v61) * 64.0;
            if (v31 >= 2147483650.0)
              v32 = 33554000.0;
            else
              v32 = v31 <= -2147483650.0 ? -33554000.0 : (float)(int)v31 * 0.015625;
            if (v18 < (float)(v17 * v32))
              goto LABEL_79;
          }
          result = 0;
          if (v70)
          {
            if (!v69)
            {
              v21 = (float)v66 * 0.015625;
              v22 = (float)(2.0 / v67) * 64.0;
              if (v22 >= 2147483650.0)
              {
                v23 = 33554000.0;
              }
              else if (v22 <= -2147483650.0)
              {
                v23 = -33554000.0;
              }
              else
              {
                v23 = (float)(int)v22 * 0.015625;
              }
              if ((float)(v12 * v21) < v23)
                goto LABEL_79;
              if ((v65 & 0x8000000000000) != 0)
              {
                if (*(float *)((v65 & 0xFFFFFFFFFFFFLL) + 0x10) != 1.0)
                  goto LABEL_79;
              }
              else if ((_BYTE)v65 != 0xFF)
              {
                goto LABEL_79;
              }
              result = 0;
              if (v68 - 6 >= 2 && v68 != 1)
              {
                if (v68 == 9)
                {
                  v33 = (float)(5.0 / v67) * 64.0;
                  if (v33 >= 2147483650.0)
                    v34 = 33554000.0;
                  else
                    v34 = v33 <= -2147483650.0 ? -33554000.0 : (float)(int)v33 * 0.015625;
                  if (v21 < (float)(v12 * v34))
                    goto LABEL_79;
                }
                result = 0;
                if (v76)
                {
                  if (!v75)
                  {
                    v24 = (float)v72 * 0.015625;
                    v25 = (float)(2.0 / v73) * 64.0;
                    if (v25 >= 2147483650.0)
                    {
                      v26 = 33554000.0;
                    }
                    else if (v25 <= -2147483650.0)
                    {
                      v26 = -33554000.0;
                    }
                    else
                    {
                      v26 = (float)(int)v25 * 0.015625;
                    }
                    if ((float)(v17 * v24) >= v26)
                    {
                      if ((v71 & 0x8000000000000) != 0)
                      {
                        if (*(float *)((v71 & 0xFFFFFFFFFFFFLL) + 0x10) == 1.0)
                          goto LABEL_51;
                      }
                      else if ((_BYTE)v71 == 0xFF)
                      {
LABEL_51:
                        result = 0;
                        if (v74 - 6 >= 2 && v74 != 1)
                        {
                          if (v74 == 9)
                          {
                            v35 = (float)(5.0 / v73) * 64.0;
                            if (v35 >= 2147483650.0)
                            {
                              v36 = 33554000.0;
                            }
                            else if (v35 <= -2147483650.0)
                            {
                              v36 = -33554000.0;
                            }
                            else
                            {
                              v36 = (float)(int)v35 * 0.015625;
                            }
                            result = v24 >= (float)(v17 * v36);
                          }
                          else
                          {
                            result = 1;
                          }
                        }
                        goto LABEL_55;
                      }
                    }
LABEL_79:
                    result = 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_55:
  if ((v71 & 0x8000000000000) != 0)
  {
    v37 = result;
    v38 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFLL);
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
    {
      atomic_store(1u, v38);
      WTF::fastFree((WTF *)v38, v10);
      result = v37;
    }
  }
  if ((v65 & 0x8000000000000) != 0)
  {
    v41 = result;
    v42 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFLL);
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v42);
      WTF::fastFree((WTF *)v42, v10);
      result = v41;
    }
  }
  if ((v59 & 0x8000000000000) != 0)
  {
    v45 = result;
    v46 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFLL);
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
    {
      atomic_store(1u, v46);
      WTF::fastFree((WTF *)v46, v10);
      result = v45;
    }
  }
  if ((v53 & 0x8000000000000) != 0)
  {
    v49 = result;
    v50 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFLL);
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
    {
      atomic_store(1u, v50);
      WTF::fastFree((WTF *)v50, v10);
      return v49;
    }
  }
  return result;
}

float32x2_t *WebCore::FloatRoundedRect::inflateWithRadii(float32x2_t *this, double a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float32_t v7;
  float v8;
  float32_t v9;
  float v10;
  float32_t v11;
  float v12;
  float32_t v13;
  float v14;

  v2 = this[1].f32[0];
  v3 = this[1].f32[1];
  v4 = (float)(v2 + *(float *)&a2) + *(float *)&a2;
  *this = vsub_f32(*this, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a2, 0));
  v5 = (float)(v3 + *(float *)&a2) + *(float *)&a2;
  this[1].f32[0] = v4;
  this[1].f32[1] = v5;
  if (v4 >= v5)
  {
    if (v3 != 0.0)
    {
      v6 = v5 / v3;
LABEL_6:
      if (v6 == 1.0)
        return this;
      goto LABEL_9;
    }
  }
  else if (v2 != 0.0)
  {
    v6 = v4 / v2;
    goto LABEL_6;
  }
  v6 = 0.0;
LABEL_9:
  v7 = v6 * this[2].f32[0];
  v8 = v6 * this[2].f32[1];
  this[2].f32[0] = v7;
  this[2].f32[1] = v8;
  if (v7 == 0.0 || v8 == 0.0)
    this[2] = 0;
  v9 = v6 * this[3].f32[0];
  v10 = v6 * this[3].f32[1];
  this[3].f32[0] = v9;
  this[3].f32[1] = v10;
  if (v9 == 0.0 || v10 == 0.0)
    this[3] = 0;
  v11 = v6 * this[4].f32[0];
  v12 = v6 * this[4].f32[1];
  this[4].f32[0] = v11;
  this[4].f32[1] = v12;
  if (v11 == 0.0 || v12 == 0.0)
    this[4] = 0;
  v13 = v6 * this[5].f32[0];
  v14 = v6 * this[5].f32[1];
  this[5].f32[0] = v13;
  this[5].f32[1] = v14;
  if (v13 == 0.0 || v14 == 0.0)
    this[5] = 0;
  return this;
}

uint64_t WebCore::DisplayList::Recorder::clipOutRoundedRect(WebCore::DisplayList::Recorder *this, const WebCore::FloatRoundedRect *a2)
{
  WebCore::DisplayList::Recorder::appendStateChangeItemIfNecessary((uint64_t)this, a2);
  return (*(uint64_t (**)(WebCore::DisplayList::Recorder *, const WebCore::FloatRoundedRect *))(*(_QWORD *)this + 880))(this, a2);
}

unint64_t *WebCore::Page::themeColor@<X0>(unint64_t *this@<X0>, void *a2@<X1>, unint64_t *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>, double a9@<D5>)
{
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;

  v10 = this[20];
  if (v10)
    v11 = *(_BYTE *)(v10 + 144) == 0;
  else
    v11 = 0;
  if (v11 && (this = *(unint64_t **)(v10 + 296)) != 0)
  {
    this = WebCore::Document::themeColor((WebCore::Document *)this, a2, a4, a5, a6, a7, a8, a9);
    v12 = *this;
    *a3 = *this;
    if ((v12 & 0x8000000000000) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

unint64_t *WebCore::Document::themeColor(WebCore::Document *this, void *a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  unint64_t *v8;
  uint64_t v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  WTF *v25;
  WebCore::HTMLMetaElement *v26;
  unint64_t *v27;
  _BOOL4 v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  __int128 v40;
  WTF *v41[2];

  v8 = (unint64_t *)((char *)this + 1360);
  if ((*((_BYTE *)this + 1366) & 4) == 0)
  {
    v10 = *((_QWORD *)this + 174);
    if (v10)
    {
      v26 = *(WebCore::HTMLMetaElement **)(v10 + 8);
      if (v26)
        goto LABEL_27;
    }
    WebCore::Document::determineActiveThemeColorMetaElement(this, a2, (unsigned int **)v41, a3, a4, a5, a6, a7, a8);
    v12 = v41[0];
    v41[0] = 0;
    v13 = *((_QWORD *)this + 174);
    *((_QWORD *)this + 174) = v12;
    if (v13)
    {
      do
      {
        v14 = __ldaxr((unsigned int *)v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, (unsigned int *)v13));
      if (!v15)
      {
        atomic_store(1u, (unsigned int *)v13);
        v22 = *(unsigned int *)(v13 + 28);
        if ((_DWORD)v22)
        {
          v38 = v13;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v13 + 16), (WTF::StringImpl *)(*(_QWORD *)(v13 + 16) + 32 * v22));
          v13 = v38;
        }
        v23 = *(WTF **)(v13 + 16);
        if (v23)
        {
          *(_QWORD *)(v13 + 16) = 0;
          *(_DWORD *)(v13 + 24) = 0;
          v36 = v13;
          WTF::fastFree(v23, v11);
          v13 = v36;
        }
        WTF::fastFree((WTF *)v13, v11);
      }
      v16 = v41[0];
      v41[0] = 0;
      if (v16)
      {
        do
        {
          v17 = __ldaxr((unsigned int *)v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, (unsigned int *)v16));
        if (!v18)
        {
          atomic_store(1u, (unsigned int *)v16);
          v24 = *((unsigned int *)v16 + 7);
          if ((_DWORD)v24)
          {
            v39 = v16;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v16 + 2), (WTF::StringImpl *)(*((_QWORD *)v16 + 2) + 32 * v24));
            v16 = v39;
          }
          v25 = (WTF *)*((_QWORD *)v16 + 2);
          if (v25)
          {
            *((_QWORD *)v16 + 2) = 0;
            *((_DWORD *)v16 + 6) = 0;
            v37 = v16;
            WTF::fastFree(v25, v11);
            v16 = v37;
          }
          WTF::fastFree(v16, v11);
        }
      }
      v12 = (WTF *)*((_QWORD *)this + 174);
    }
    if (v12)
    {
      v26 = (WebCore::HTMLMetaElement *)*((_QWORD *)v12 + 1);
      if (v26)
      {
LABEL_27:
        v27 = WebCore::HTMLMetaElement::contentColor(v26, a3, a4, a5, a6, a7, a8);
        WebCore::Color::operator=(v8, v27);
      }
    }
    v19 = *v8;
    if ((*v8 & 0x4000000000000) == 0)
    {
      v20 = *((_QWORD *)this + 175);
      if ((v19 & 0x8000000000000) != 0)
      {
        if ((v20 & 0x8000000000000) != 0)
        {
          *(_OWORD *)v41 = *(_OWORD *)((v19 & 0xFFFFFFFFFFFFLL) + 4);
          v40 = *(_OWORD *)((v20 & 0xFFFFFFFFFFFFLL) + 4);
          v28 = WebCore::operator==<float,4ul>((float *)v41, (float *)&v40);
          v19 = *v8;
          if (v28)
          {
            v29 = *((_QWORD *)this + 175);
            if (HIBYTE(v19) == HIBYTE(v29) && BYTE6(v19) == BYTE6(v29))
              return v8;
          }
        }
      }
      else if (v19 == v20 && (v20 & 0x8000000000000) == 0)
      {
        return v8;
      }
      if ((v19 & 0x8000000000000) != 0)
      {
        v33 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          atomic_store(1u, v33);
          WTF::fastFree((WTF *)v33, v11);
        }
      }
      v30 = *((_QWORD *)this + 175);
      *((_QWORD *)this + 170) = v30;
      if ((v30 & 0x8000000000000) != 0)
      {
        v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFLL);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 + 1, v31));
      }
    }
  }
  return v8;
}

WTF *WebCore::Document::updateElementsAffectedByMediaQueries(WebCore::Document *this, void *a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  void *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  WTF *result;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  unint64_t *v27;
  void *v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t *v36;
  WTF *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  WebCore::HTMLImageElement **v41;
  WebCore::HTMLImageElement *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  ++WebCore::ScriptDisallowedScope::s_count;
  WebCore::Document::determineActiveThemeColorMetaElement(this, a2, (unsigned int **)&v60, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 174);
  if (v10)
    v10 = *(_QWORD *)(v10 + 8);
  v11 = v60;
  if (v60)
    v12 = *((_QWORD *)v60 + 1);
  else
    v12 = 0;
  if (v10 != v12)
  {
    v27 = (unint64_t *)((char *)this + 1360);
    v58 = 0;
    v59 = 0;
    if (*((_QWORD *)this + 170))
    {
      v59 = *((_QWORD *)this + 170);
      *v27 = 0;
    }
    WebCore::Color::operator=(v27, &v58);
    if ((v58 & 0x8000000000000) != 0)
    {
      v51 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFLL);
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
      {
        atomic_store(1u, v51);
        WTF::fastFree((WTF *)v51, v28);
      }
    }
    WTF::WeakPtr<WebCore::HTMLMetaElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::operator=((uint64_t *)this + 174, (uint64_t *)&v60);
    v36 = (uint64_t *)WebCore::Document::themeColor(this, v29, v30, v31, v32, v33, v34, v35);
    if (!WebCore::operator==(v36, &v59))
      WebCore::Document::themeColorChanged((uint64_t)this);
    if ((v59 & 0x8000000000000) != 0)
    {
      v54 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFLL);
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
      {
        atomic_store(1u, v54);
        WTF::fastFree((WTF *)v54, v9);
      }
    }
    v11 = v60;
  }
  v60 = 0;
  if (v11)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v11);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v11));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v11);
      v25 = *((unsigned int *)v11 + 7);
      if ((_DWORD)v25)
      {
        v50 = v11;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v11 + 2), (WTF::StringImpl *)(*((_QWORD *)v11 + 2) + 32 * v25));
        v11 = v50;
      }
      v26 = (WTF *)*((_QWORD *)v11 + 2);
      if (v26)
      {
        *((_QWORD *)v11 + 2) = 0;
        *((_DWORD *)v11 + 6) = 0;
        v47 = v11;
        WTF::fastFree(v26, v9);
        v11 = v47;
      }
      WTF::fastFree(v11, v9);
    }
  }
  v15 = (WebCore::Document *)((char *)this + 2000);
  result = (WTF *)WTF::WeakHashSet<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)v15, v9);
  if (!(_DWORD)result)
  {
    result = 0;
    goto LABEL_11;
  }
  if (!(result >> 29))
  {
    result = (WTF *)WTF::fastMalloc((WTF *)(8 * result));
LABEL_11:
    v18 = *(_QWORD *)v15;
    if (*(_QWORD *)v15)
    {
      v20 = *(unsigned int *)(v18 - 4);
      v21 = v18 + 8 * v20;
      if (*(_DWORD *)(v18 - 12))
      {
        v19 = *(_QWORD *)v15;
        if ((_DWORD)v20)
        {
          v24 = 8 * v20;
          v19 = *(_QWORD *)v15;
          while ((unint64_t)(*(_QWORD *)v19 + 1) <= 1)
          {
            v19 += 8;
            v24 -= 8;
            if (!v24)
            {
              v19 = v21;
              break;
            }
          }
        }
LABEL_14:
        v60 = v15;
        v61 = v19;
        v62 = v21;
        if (v18)
        {
          v23 = *(unsigned int *)(v18 - 4);
          v22 = v18 + 8 * v23;
        }
        else
        {
          v22 = 0;
          v23 = 0;
        }
        v63 = v22;
        v64 = v18 + 8 * v23;
        if (v19 != v22)
        {
          if (!*(_QWORD *)(*(_QWORD *)v19 + 8))
          {
            v48 = v19;
            do
            {
              v49 = v48 + 8;
              v48 = v21;
              if (v49 != v21)
              {
                v48 = v49;
                while ((unint64_t)(*(_QWORD *)v48 + 1) <= 1)
                {
                  v48 += 8;
                  if (v48 == v21)
                  {
                    v48 = v21;
                    break;
                  }
                }
              }
              v19 = v22;
              if (v48 == v22)
                break;
              v19 = v48;
            }
            while (!*(_QWORD *)(*(_QWORD *)v48 + 8));
          }
          v61 = v19;
        }
        if (v18)
          v18 += 8 * *(unsigned int *)(v18 - 4);
        if (v19 != v18)
        {
          v57 = v18;
          v37 = result;
          v38 = 0;
          do
          {
            v39 = *(_QWORD *)(*(_QWORD *)v19 + 8);
            *(_DWORD *)(v39 + 24) += 2;
            v59 = 0;
            *((_QWORD *)v37 + v38++) = v39;
            WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v59);
            WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v60);
            v19 = v61;
          }
          while (v61 != v57);
          result = v37;
          if (!v38)
            goto LABEL_56;
          v40 = 8 * v38;
          v41 = (WebCore::HTMLImageElement **)v37;
          do
          {
            v42 = *v41++;
            WebCore::HTMLImageElement::evaluateDynamicMediaQueryDependencies(v42);
            v40 -= 8;
          }
          while (v40);
          v43 = 8 * v38;
          result = v37;
          v44 = v37;
          do
          {
            v45 = *(_QWORD *)v44;
            *(_QWORD *)v44 = 0;
            if (v45)
            {
              if (*(_DWORD *)(v45 + 24) == 2)
              {
                if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
                {
                  v46 = v44;
                  WebCore::Node::removedLastRef((WebCore::Node *)v45);
                  v44 = v46;
                  result = v37;
                }
              }
              else
              {
                *(_DWORD *)(v45 + 24) -= 2;
              }
            }
            v44 = (WTF *)((char *)v44 + 8);
            v43 -= 8;
          }
          while (v43);
        }
        if (!result)
        {
LABEL_21:
          --WebCore::ScriptDisallowedScope::s_count;
          return result;
        }
LABEL_56:
        result = (WTF *)WTF::fastFree(result, v17);
        goto LABEL_21;
      }
      v19 = v18 + 8 * v20;
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
    v21 = v18 + 8 * v20;
    goto LABEL_14;
  }
  __break(0xC471u);
  return result;
}

WebCore::HTMLMetaElement *WebCore::Document::determineActiveThemeColorMetaElement@<X0>(WebCore::HTMLMetaElement *this@<X0>, void *a2@<X1>, unsigned int **a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>, double a9@<D5>)
{
  uint64_t v9;
  unsigned int **v11;
  unsigned int v12;
  unsigned int *v13;
  WebCore::HTMLMetaElement *v14;
  WebCore::HTMLMetaElement *v15;
  __int16 v16;
  BOOL v17;
  unsigned int **v18;
  uint64_t v19;
  WebCore::HTMLMetaElement *v20;
  unsigned int v21;
  uint64_t v22;
  WebCore::HTMLMetaElement *v23;
  __int16 v24;
  BOOL v25;
  WebCore::HTMLMetaElement *v26;
  uint64_t v28;
  WebCore::HTMLMetaElement *v29;
  WebCore::HTMLMetaElement *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int **v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  WebCore::HTMLMetaElement *v44;
  WebCore::HTMLMetaElement *v45;
  unsigned int **v46;
  uint64_t v47;

  v9 = (uint64_t)this;
  if (*((_BYTE *)this + 1384))
  {
    v11 = (unsigned int **)*((_QWORD *)this + 171);
    v12 = *((_DWORD *)this + 345);
    goto LABEL_3;
  }
  v46 = 0;
  v47 = 0;
  v14 = (WebCore::HTMLMetaElement *)*((_QWORD *)this + 10);
  if (!v14)
    goto LABEL_53;
  while (1)
  {
    v15 = v14;
    v16 = *((_WORD *)v14 + 14);
    if ((v16 & 0x10) != 0 && *(_QWORD *)(*((_QWORD *)v15 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::metaTag + 24))
      break;
    if ((v16 & 4) != 0)
    {
      v14 = (WebCore::HTMLMetaElement *)*((_QWORD *)v15 + 10);
      if (v14)
        continue;
    }
    if (v15 == this)
      goto LABEL_53;
    while (1)
    {
      v14 = (WebCore::HTMLMetaElement *)*((_QWORD *)v15 + 7);
      if (v14)
        break;
      v15 = (WebCore::HTMLMetaElement *)*((_QWORD *)v15 + 4);
      if (v15)
        v17 = v15 == this;
      else
        v17 = 1;
      if (v17)
        goto LABEL_53;
    }
  }
  while (1)
  {
    v44 = v15;
    this = (WebCore::HTMLMetaElement *)WebCore::Element::getNameAttribute(v15);
    v22 = *(_QWORD *)this;
    if (*(_QWORD *)this && *(_DWORD *)(v22 + 4) == 11)
    {
      v36 = *(_QWORD *)(v22 + 8);
      if ((*(_BYTE *)(v22 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v36 & 0xDF) != 0x54
          || (*(_BYTE *)(v36 + 1) & 0xDF) != 0x48
          || (*(_BYTE *)(v36 + 2) & 0xDF) != 0x45
          || (*(_BYTE *)(v36 + 3) & 0xDF) != 0x4D
          || (*(_BYTE *)(v36 + 4) & 0xDF) != 0x45
          || (*(_BYTE *)(v36 + 5) & 0xDF) != 0xD
          || (*(_BYTE *)(v36 + 6) & 0xDF) != 0x43
          || (*(_BYTE *)(v36 + 7) & 0xDF) != 0x4F
          || (*(_BYTE *)(v36 + 8) & 0xDF) != 0x4C
          || (*(_BYTE *)(v36 + 9) & 0xDF) != 0x4F)
        {
          goto LABEL_33;
        }
        v37 = *(unsigned __int8 *)(v36 + 10);
      }
      else
      {
        if ((*(_WORD *)v36 & 0xFFDF) != 0x54
          || (*(_WORD *)(v36 + 2) & 0xFFDF) != 0x48
          || (*(_WORD *)(v36 + 4) & 0xFFDF) != 0x45
          || (*(_WORD *)(v36 + 6) & 0xFFDF) != 0x4D
          || (*(_WORD *)(v36 + 8) & 0xFFDF) != 0x45
          || (*(_WORD *)(v36 + 10) & 0xFFDF) != 0xD
          || (*(_WORD *)(v36 + 12) & 0xFFDF) != 0x43
          || (*(_WORD *)(v36 + 14) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v36 + 16) & 0xFFDF) != 0x4C
          || (*(_WORD *)(v36 + 18) & 0xFFDF) != 0x4F)
        {
          goto LABEL_33;
        }
        v37 = *(unsigned __int16 *)(v36 + 20);
      }
      if ((v37 & 0xFFFFFFDF) == 0x52)
      {
        this = (WebCore::HTMLMetaElement *)WebCore::HTMLMetaElement::contentColor(v44, a4, a5, a6, a7, a8, a9);
        if ((*((_BYTE *)this + 6) & 4) != 0)
        {
          v38 = HIDWORD(v47);
          if (HIDWORD(v47) == (_DWORD)v47)
          {
            this = (WebCore::HTMLMetaElement *)WTF::Vector<WTF::WeakPtr<WebCore::HTMLMetaElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTMLMetaElement&>((unsigned int *)&v46, (uint64_t)v44);
          }
          else
          {
            v40 = v46;
            this = (WebCore::HTMLMetaElement *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>((uint64_t)v44);
            if (this)
            {
              do
                v41 = __ldaxr((unsigned int *)this);
              while (__stlxr(v41 + 1, (unsigned int *)this));
              v42 = HIDWORD(v47);
            }
            else
            {
              v42 = v38;
            }
            v40[v38] = (unsigned int *)this;
            HIDWORD(v47) = v42 + 1;
          }
        }
      }
    }
LABEL_33:
    v23 = (WebCore::HTMLMetaElement *)*((_QWORD *)v44 + 10);
    if (!v23)
      break;
LABEL_34:
    while (1)
    {
      v15 = v23;
      v24 = *((_WORD *)v23 + 14);
      if ((v24 & 0x10) != 0
        && *(_QWORD *)(*((_QWORD *)v15 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::metaTag + 24))
      {
        break;
      }
      if ((v24 & 4) != 0)
      {
        v23 = (WebCore::HTMLMetaElement *)*((_QWORD *)v15 + 10);
        if (v23)
          continue;
      }
      if (v15 == (WebCore::HTMLMetaElement *)v9)
        goto LABEL_53;
      while (1)
      {
        v23 = (WebCore::HTMLMetaElement *)*((_QWORD *)v15 + 7);
        if (v23)
          break;
        v15 = (WebCore::HTMLMetaElement *)*((_QWORD *)v15 + 4);
        if (v15)
          v25 = v15 == (WebCore::HTMLMetaElement *)v9;
        else
          v25 = 1;
        if (v25)
          goto LABEL_53;
      }
    }
  }
  v26 = v44;
  if (v44 != (WebCore::HTMLMetaElement *)v9)
  {
    while (1)
    {
      v23 = (WebCore::HTMLMetaElement *)*((_QWORD *)v26 + 7);
      if (v23)
        goto LABEL_34;
      v26 = (WebCore::HTMLMetaElement *)*((_QWORD *)v44 + 4);
      if (!v26 || v26 == (WebCore::HTMLMetaElement *)v9)
        break;
      v44 = (WebCore::HTMLMetaElement *)*((_QWORD *)v44 + 4);
    }
  }
LABEL_53:
  if (*(_BYTE *)(v9 + 1384))
  {
    v28 = *(unsigned int *)(v9 + 1380);
    if ((_DWORD)v28)
    {
      v29 = *(WebCore::HTMLMetaElement **)(v9 + 1368);
      v30 = (WebCore::HTMLMetaElement *)((char *)v29 + 8 * v28);
      do
      {
        v31 = *(_QWORD *)v29;
        *(_QWORD *)v29 = 0;
        if (v31)
        {
          do
          {
            v32 = __ldaxr((unsigned int *)v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, (unsigned int *)v31));
          if (!v33)
          {
            v45 = v30;
            atomic_store(1u, (unsigned int *)v31);
            v34 = *(unsigned int *)(v31 + 28);
            if ((_DWORD)v34)
            {
              v43 = v31;
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v31 + 16), (WTF::StringImpl *)(*(_QWORD *)(v31 + 16) + 32 * v34));
              v31 = v43;
            }
            v35 = *(WTF **)(v31 + 16);
            if (v35)
            {
              *(_QWORD *)(v31 + 16) = 0;
              *(_DWORD *)(v31 + 24) = 0;
              v39 = v31;
              WTF::fastFree(v35, a2);
              v31 = v39;
            }
            WTF::fastFree((WTF *)v31, a2);
            v30 = v45;
          }
        }
        v29 = (WebCore::HTMLMetaElement *)((char *)v29 + 8);
      }
      while (v29 != v30);
    }
    this = *(WebCore::HTMLMetaElement **)(v9 + 1368);
    if (this)
    {
      *(_QWORD *)(v9 + 1368) = 0;
      *(_DWORD *)(v9 + 1376) = 0;
      this = (WebCore::HTMLMetaElement *)WTF::fastFree(this, a2);
    }
    v11 = v46;
    *(_QWORD *)(v9 + 1368) = v46;
    v12 = HIDWORD(v47);
    *(_DWORD *)(v9 + 1376) = v47;
    *(_DWORD *)(v9 + 1380) = v12;
    if (!*(_BYTE *)(v9 + 1384))
    {
      __break(1u);
      goto LABEL_64;
    }
  }
  else
  {
LABEL_64:
    v11 = v46;
    *(_QWORD *)(v9 + 1368) = v46;
    v12 = HIDWORD(v47);
    *(_DWORD *)(v9 + 1376) = v47;
    *(_DWORD *)(v9 + 1380) = v12;
    *(_BYTE *)(v9 + 1384) = 1;
  }
LABEL_3:
  if (v12)
  {
    v18 = v11;
    v19 = 8 * v12;
    while (1)
    {
      if (*v18)
      {
        this = (WebCore::HTMLMetaElement *)*((_QWORD *)*v18 + 1);
        if (this)
        {
          this = (WebCore::HTMLMetaElement *)WebCore::HTMLMetaElement::contentColor(this, a4, a5, a6, a7, a8, a9);
          if ((*((_BYTE *)this + 6) & 4) != 0)
          {
            v20 = *v18 ? (WebCore::HTMLMetaElement *)*((_QWORD *)*v18 + 1) : 0;
            this = (WebCore::HTMLMetaElement *)WebCore::HTMLMetaElement::mediaAttributeMatches(v20);
            if ((_DWORD)this)
              break;
          }
        }
      }
      v13 = 0;
      ++v18;
      v19 -= 8;
      if (!v19)
        goto LABEL_5;
    }
    v13 = *v18;
    if (*v18)
    {
      do
        v21 = __ldaxr(v13);
      while (__stlxr(v21 + 1, v13));
    }
  }
  else
  {
    v13 = 0;
  }
LABEL_5:
  *a3 = v13;
  return this;
}

uint64_t WTF::WeakHashSet<WebCore::HTMLImageElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
LABEL_2:
    *(_DWORD *)(a1 + 8) = 0;
LABEL_3:
    v3 = 0;
    *(_DWORD *)(a1 + 12) = 0;
    return v3;
  }
  v5 = *(_DWORD *)(v2 - 4);
  if (!v5)
    goto LABEL_6;
  v17 = *(_QWORD *)a1;
  v18 = a1;
  v8 = 0;
  v9 = v5 - 1;
  do
  {
    v10 = (uint64_t *)(v17 + 8 * v9);
    if ((unint64_t)(*v10 + 1) >= 2 && !*(_QWORD *)(*v10 + 8))
    {
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteBucket(v10, a2);
      ++v8;
    }
  }
  while ((unint64_t)v9--);
  v2 = *(_QWORD *)v18;
  if (v8)
  {
    *(_DWORD *)(v2 - 16) += v8;
    v12 = *(_QWORD *)v18;
    if (*(_QWORD *)v18)
      v13 = *(_DWORD *)(v12 - 12);
    else
      v13 = 0;
    *(_DWORD *)(v12 - 12) = v13 - v8;
    v2 = *(_QWORD *)v18;
  }
  a1 = v18;
  if (!v2)
    goto LABEL_2;
  v14 = *(_DWORD *)(v2 - 4);
  if (v14 < 9 || 6 * *(_DWORD *)(v2 - 12) >= v14)
  {
LABEL_6:
    *(_DWORD *)(a1 + 8) = 0;
  }
  else
  {
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize((uint64_t *)v18);
    a1 = v18;
    v16 = *(_QWORD *)v18;
    *(_DWORD *)(v18 + 8) = 0;
    if (!v16)
      goto LABEL_3;
    v2 = v16;
  }
  v6 = *(_DWORD *)(v2 - 12);
  if (v6 >= 0x7FFFFFFF)
    v7 = -2;
  else
    v7 = 2 * v6;
  *(_DWORD *)(a1 + 12) = v7;
  return *(unsigned int *)(v2 - 12);
}

WTF *WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(WebCore::ContainerNode *this, WebCore::Node *a2, uint64_t a3, WebCore::TreeScope *a4)
{
  WebCore::Node *v5;
  WebCore::TreeScope *v6;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  void *v19;
  int v20;
  WTF *result;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  WebCore::ChildListMutationAccumulator *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  void *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  _BYTE v48[88];
  WebCore::ChildListMutationAccumulator *v49;

  v5 = (WebCore::Node *)*((_QWORD *)a2 + 5);
  v6 = (WebCore::TreeScope *)*((_QWORD *)this + 5);
  if (*((_QWORD *)v5 + 1) != *((_QWORD *)v6 + 1))
  {
    __break(0xC471u);
    JUMPOUT(0x1942FB3B8);
  }
  v46 = (WTF *)v48;
  v47 = 11;
  ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  v8 = WebCore::ScriptDisallowedScope::s_count;
  v9 = WebCore::ScriptDisallowedScope::s_count + 1;
  if ((*((_BYTE *)this + 28) & 0x80) != 0 || (*((_BYTE *)this + 22) & 0x10) != 0)
  {
    v28 = *(_QWORD *)v6;
    if ((*(_WORD *)(*(_QWORD *)v6 + 28) & 0x80) == 0)
      v28 = 0;
    v29 = *(_QWORD *)(v28 + 224);
    if (v29)
    {
      ++*(_DWORD *)(v29 + 12);
      *(_BYTE *)(v29 + 9) = 0;
    }
  }
  WebCore::ScriptDisallowedScope::s_count = v8 + 2;
  *((_QWORD *)a2 + 4) = this;
  v10 = (uint64_t *)((char *)a2 + 32);
  *((_DWORD *)a2 + 6) |= 1u;
  v11 = *((_QWORD *)this + 11);
  if (v11)
  {
    v12 = *(_DWORD *)(v11 + 24);
    *(_DWORD *)(v11 + 24) = v12 + 2;
    *((_QWORD *)a2 + 6) = v11 | ((unint64_t)*((unsigned __int16 *)a2 + 27) << 48);
    *(_QWORD *)(v11 + 56) = a2;
    if (v12)
    {
      *(_DWORD *)(v11 + 24) = v12;
    }
    else if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v11);
      v9 = WebCore::ScriptDisallowedScope::s_count - 1;
      v6 = (WebCore::TreeScope *)*((_QWORD *)this + 5);
      v5 = (WebCore::Node *)*((_QWORD *)a2 + 5);
    }
  }
  else
  {
    *((_QWORD *)this + 10) = a2;
  }
  *((_QWORD *)this + 11) = a2;
  WebCore::ScriptDisallowedScope::s_count = v9;
  if (v5 != v6)
    WebCore::Node::moveTreeToNewScope(a2, v5, v6, a4);
  v13 = *((_WORD *)a2 + 39) & 0x3FF;
  if ((*((_WORD *)a2 + 39) & 0x3FF) != 0)
  {
    if ((*((_WORD *)a2 + 14) & 0x80) != 0)
    {
      v45 = *((_QWORD *)a2 + 25);
      if (!v45)
        goto LABEL_10;
      v10 = (uint64_t *)(v45 + 8);
    }
    v42 = *v10;
    if (v42)
    {
      do
      {
        WebCore::Node::incrementConnectedSubframeCount(v42, v13);
        if ((*(_WORD *)(v42 + 28) & 0x80) != 0)
        {
          v44 = *(_QWORD *)(v42 + 200);
          if (!v44)
            break;
          v43 = (uint64_t *)(v44 + 8);
        }
        else
        {
          v43 = (uint64_t *)(v42 + 32);
        }
        v42 = *v43;
      }
      while (*v43);
    }
  }
LABEL_10:
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3364) & 1) != 0)
  {
    WebCore::ChildListMutationAccumulator::getOrCreate(this, (uint64_t *)&v49);
    v27 = v49;
    if (v49)
    {
      if (*((_QWORD *)v49 + 10))
        WebCore::ChildListMutationAccumulator::childAdded(v49, a2);
      if (*(_DWORD *)v27 == 1)
      {
        WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v27, v26);
        WTF::fastFree(v40, v41);
      }
      else
      {
        --*(_DWORD *)v27;
      }
    }
  }
  v14 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v30 = *(_QWORD *)(v14 + 528);
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 8);
      if (v31)
      {
        v32 = *(_QWORD *)(v31 + 24);
        if (v32)
        {
          v33 = *(_QWORD *)(v32 + 8);
          if (v33)
            goto LABEL_58;
        }
      }
    }
    v35 = *(_QWORD *)(v14 + 2632);
    if (v35)
    {
      v36 = *(_QWORD *)(v35 + 8);
      if (v36)
      {
        v37 = *(_QWORD *)(v36 + 528);
        if (v37)
        {
          v38 = *(_QWORD *)(v37 + 8);
          if (v38)
          {
            v39 = *(_QWORD *)(v38 + 24);
            if (v39)
            {
              v33 = *(_QWORD *)(v39 + 8);
              if (v33)
              {
LABEL_58:
                v34 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v33 + 80) + 8) + 40);
                if (v34)
                  WebCore::InspectorDOMAgent::didInsertDOMNode(v34, a2);
              }
            }
          }
        }
      }
    }
  }
  v16 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  *(_DWORD *)(v16 + 24) += 2;
  *((_DWORD *)a2 + 6) += 2;
  v17 = *((_QWORD *)this + 2);
  v18 = (v17 & 0x18000000000000) == 0;
  if ((v17 & 0x8000000000000) != 0)
    WebCore::notifyNodeInsertedIntoDocument((uint64_t)this, (uint64_t)a2, v18, (uint64_t)&v46);
  else
    WebCore::notifyNodeInsertedIntoTree((uint64_t)this, (uint64_t)a2, v18);
  if (*((_DWORD *)a2 + 6) == 2)
  {
    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(a2);
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
  if (*(_DWORD *)(v16 + 24) == 2)
  {
    if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v16);
  }
  else
  {
    *(_DWORD *)(v16 + 24) -= 2;
  }
  --WebCore::ScriptDisallowedScope::s_count;
  v20 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
    && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
  {
    WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)&v49, v19);
    v20 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  }
  WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v20 - 1;
  *((_WORD *)this + 15) |= 0x200u;
  if (HIDWORD(v47))
  {
    v23 = v46;
    v24 = 8 * HIDWORD(v47);
    do
    {
      v25 = *(_QWORD *)v23;
      *(_QWORD *)v23 = 0;
      if (v25)
      {
        if (*(_DWORD *)(v25 + 24) == 2)
        {
          if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v25);
        }
        else
        {
          *(_DWORD *)(v25 + 24) -= 2;
        }
      }
      v23 = (WTF *)((char *)v23 + 8);
      v24 -= 8;
    }
    while (v24);
  }
  result = v46;
  if (v48 != (_BYTE *)v46 && v46 != 0)
  {
    v46 = 0;
    LODWORD(v47) = 0;
    return (WTF *)WTF::fastFree(result, v19);
  }
  return result;
}

uint64_t WebCore::ContainerNode::appendChildWithoutPreInsertionValidityCheck(WebCore::ContainerNode *this, WebCore::Node *a2, uint64_t a3)
{
  uint64_t result;
  WTF::StringImpl *v6;
  const WebCore::Style::RuleSet *v7;
  WebCore::TreeScope *v8;
  WTF *v9;
  WTF *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  uint64_t v15;
  unsigned int *v16;
  WebCore::Node **v18;
  WTF::StringImpl *v19;
  int *v20;
  WebCore::NodeTraversal *v21;
  uint64_t v22;
  __int16 v23;
  char v24;
  WebCore::NodeTraversal *v25;
  char v26;
  __int16 v27;
  WebCore::NodeTraversal *v28;
  int v29;
  _BOOL4 v30;
  WebCore::Node *v31;
  WebCore::TreeScope *v32;
  WebCore::Node *v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 v41;
  void *v42;
  const WebCore::Style::RuleSet *v43;
  int v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v54;
  WTF *v55;
  void *v56;
  void *v57;
  WebCore::ChildListMutationAccumulator *v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  unsigned int *v85;
  WebCore::Node *v86;
  _QWORD *v87;
  WebCore::Event *v88;
  WTF::StringImpl *v89;
  const WebCore::Node *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  WebCore::Event *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  _BOOL4 v100;
  _QWORD *v101;
  BOOL v102;
  _QWORD *v103;
  WebCore::Node *v104;
  WebCore::Event *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  WebCore::ContainerNode *v114;
  WebCore::Node **v115;
  _BYTE v116[8];
  WTF::StringImpl *v117;
  char v118;
  WTF *v119;
  uint64_t v120;
  _BYTE v121[88];
  WebCore::NodeTraversal *v122[2];
  BOOL v123;
  BOOL v124;
  BOOL v125;
  WTF::StringImpl *v126;
  uint64_t v127;
  char v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  _DWORD *v133[2];

  *((_DWORD *)a2 + 6) += 2;
  v119 = (WTF *)v121;
  v120 = 11;
  result = (uint64_t)WebCore::ContainerNode::removeSelfOrChildNodesForInsertion((WebCore::NodeTraversal *)v116, a3, &v119);
  if (v118)
  {
    v11 = v117;
    v117 = 0;
    *(_BYTE *)this = v116[0];
    *((_QWORD *)this + 1) = v11;
    *((_BYTE *)this + 16) = 1;
    goto LABEL_104;
  }
  v114 = this;
  if (!HIDWORD(v120))
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    goto LABEL_104;
  }
  v9 = v119;
  v10 = (WTF *)((char *)v119 + 8 * HIDWORD(v120));
  while (2)
  {
    v12 = *(_QWORD *)v9;
    *((_DWORD *)a2 + 6) += 2;
    v13 = a2;
    do
    {
      while (1)
      {
        if (v13 == (WebCore::Node *)v12)
        {
          if (*(_DWORD *)(v12 + 24) == 2)
          {
            if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v12);
          }
          else
          {
            *(_DWORD *)(v12 + 24) -= 2;
          }
          LOBYTE(v126) = 1;
          v128 = 1;
          v127 = 0;
          *(_BYTE *)v114 = 1;
          *((_QWORD *)v114 + 1) = 0;
          *((_BYTE *)v114 + 16) = 1;
          result = WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v126, v6);
          goto LABEL_104;
        }
        v14 = v13;
        v13 = (WebCore::Node *)*((_QWORD *)v13 + 4);
        if (v13)
        {
LABEL_10:
          *((_DWORD *)v13 + 6) += 2;
          goto LABEL_11;
        }
        v59 = *((_WORD *)v14 + 14);
        if ((v59 & 0x80) != 0)
        {
          v72 = *((_QWORD *)v14 + 25);
          if (!v72)
            goto LABEL_151;
        }
        else if ((v59 & 0xF000) != 0xB000
               || (result = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v14 + 392))(v14), !(_DWORD)result)
               || (v72 = *((_QWORD *)v14 + 12)) == 0)
        {
LABEL_151:
          v13 = 0;
          goto LABEL_11;
        }
        v13 = *(WebCore::Node **)(v72 + 8);
        if (v13)
          goto LABEL_10;
LABEL_11:
        if (*((_DWORD *)v14 + 6) == 2)
          break;
        *((_DWORD *)v14 + 6) -= 2;
LABEL_13:
        if (!v13)
          goto LABEL_6;
      }
      if ((*((_WORD *)v14 + 15) & 0x400) != 0)
        goto LABEL_13;
      result = WebCore::Node::removedLastRef(v14);
    }
    while (v13);
LABEL_6:
    v9 = (WTF *)((char *)v9 + 8);
    if (v9 != v10)
      continue;
    break;
  }
  v15 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  *(_DWORD *)(v15 + 24) += 2;
  v16 = (unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v75 = *(_QWORD *)(v15 + 528);
    if (v75)
    {
      v76 = *(_QWORD *)(v75 + 8);
      if (v76)
      {
        v77 = *(_QWORD *)(v76 + 24);
        if (v77)
        {
          v78 = *(_QWORD *)(v77 + 8);
          if (v78)
            goto LABEL_179;
        }
      }
    }
    v79 = *(_QWORD *)(v15 + 2632);
    if (v79)
    {
      v80 = *(_QWORD *)(v79 + 8);
      if (v80)
      {
        v81 = *(_QWORD *)(v80 + 528);
        if (v81)
        {
          v82 = *(_QWORD *)(v81 + 8);
          if (v82)
          {
            v83 = *(_QWORD *)(v82 + 24);
            if (v83)
            {
              v78 = *(_QWORD *)(v83 + 8);
              if (v78)
              {
LABEL_179:
                result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v78 + 80) + 8) + 152);
                if (result)
                  result = WebCore::PageDOMDebuggerAgent::willInsertDOMNode((Inspector::InspectorDebuggerAgent **)result, a2);
              }
            }
          }
        }
      }
    }
  }
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v15);
  }
  else
  {
    *(_DWORD *)(v15 + 24) -= 2;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 3364) & 1) != 0)
  {
    result = WebCore::ChildListMutationAccumulator::getOrCreate(a2, (uint64_t *)&v126);
    v113 = v126;
  }
  else
  {
    v113 = 0;
  }
  if (HIDWORD(v120))
  {
    v18 = (WebCore::Node **)v119;
    v115 = (WebCore::Node **)((char *)v119 + 8 * HIDWORD(v120));
    v19 = (WTF::StringImpl *)&v128;
    v20 = &webThreadDelegateMessageScopeCount;
    do
    {
      v21 = *v18;
      if (*((_QWORD *)*v18 + 4))
        break;
      v131 = 0;
      v129 = 0u;
      v130 = 0u;
      v22 = *((_QWORD *)a2 + 11);
      v23 = *((_WORD *)v21 + 14);
      if ((v23 & 2) != 0)
        v24 = 2;
      else
        v24 = 7;
      if ((v23 & 8) != 0)
        v24 = 0;
      LOBYTE(v129) = v24;
      if ((v23 & 8) != 0)
        v25 = v21;
      else
        v25 = 0;
      for (*((_QWORD *)&v129 + 1) = v25; v22; v22 = *(_QWORD *)(v22 + 48) & 0xFFFFFFFFFFFFLL)
      {
        if ((*(_WORD *)(v22 + 28) & 8) != 0)
          break;
      }
      *(_QWORD *)&v130 = v22;
      LOBYTE(v131) = 1;
      if ((v23 & 8) != 0)
        v26 = 2;
      else
        v26 = 1;
      BYTE1(v131) = v26;
      v126 = v19;
      v127 = 11;
      ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
      ++v20[459];
      v27 = *((_WORD *)a2 + 14);
      if ((v27 & 8) != 0)
        v28 = a2;
      else
        v28 = 0;
      v122[0] = v28;
      v122[1] = (WebCore::NodeTraversal *)&v129;
      if ((v27 & 8) != 0)
      {
        v100 = WebCore::Element::needsStyleInvalidation(a2);
        v123 = v100;
        if (v100)
        {
          v101 = (_QWORD *)*((_QWORD *)v122[0] + 5);
          if (*v101)
            v102 = (*(_WORD *)(*v101 + 28) & 0x80) == 0;
          else
            v102 = 1;
          if (v102)
            v109 = v101[1] + 1328;
          else
            v109 = *v101 + 216;
          v30 = *(unsigned __int8 *)(*(_QWORD *)v109 + 236) != 0;
          v29 = 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
        }
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v123 = 0;
      }
      v124 = v30;
      v125 = *((_QWORD *)a2 + 10) == 0;
      if (v29 && v30)
        WebCore::Style::ChildChangeInvalidation::invalidateForHasBeforeMutation(v122, (uint64_t)v6, v7);
      if ((*((_WORD *)a2 + 14) & 0x80) != 0 || (*((_BYTE *)a2 + 22) & 0x10) != 0)
      {
        v60 = **((_QWORD **)a2 + 5);
        if ((*(_WORD *)(v60 + 28) & 0x80) == 0)
          v60 = 0;
        v61 = *(_QWORD *)(v60 + 224);
        if (v61)
        {
          ++*(_DWORD *)(v61 + 12);
          *(_BYTE *)(v61 + 9) = 0;
        }
      }
      v31 = *v18;
      v32 = (WebCore::TreeScope *)*((_QWORD *)a2 + 5);
      v33 = (WebCore::Node *)*((_QWORD *)*v18 + 5);
      if (v33 != v32)
      {
        WebCore::Node::moveTreeToNewScope(*v18, v33, v32, v8);
        v31 = *v18;
      }
      v34 = v20[459];
      v20[459] = v34 + 1;
      *((_QWORD *)v31 + 4) = a2;
      *((_DWORD *)v31 + 6) |= 1u;
      v35 = *((_QWORD *)a2 + 11);
      if (v35)
      {
        v36 = *(_DWORD *)(v35 + 24);
        *(_DWORD *)(v35 + 24) = v36 + 2;
        *((_QWORD *)v31 + 6) = v35 | ((unint64_t)*((unsigned __int16 *)v31 + 27) << 48);
        *(_QWORD *)(v35 + 56) = v31;
        if (v36)
        {
          *(_DWORD *)(v35 + 24) = v36;
        }
        else if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v35);
          v34 = v20[459] - 1;
        }
      }
      else
      {
        *((_QWORD *)a2 + 10) = v31;
      }
      *((_QWORD *)a2 + 11) = v31;
      v20[459] = v34;
      if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 3364) & 1) != 0)
      {
        WebCore::ChildListMutationAccumulator::getOrCreate(a2, (uint64_t *)v133);
        v58 = (WebCore::ChildListMutationAccumulator *)v133[0];
        if (v133[0])
        {
          if (*((_QWORD *)v133[0] + 10))
            WebCore::ChildListMutationAccumulator::childAdded((WebCore::ChildListMutationAccumulator *)v133[0], v21);
          if (*(_DWORD *)v58 == 1)
          {
            WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v58, v57);
            WTF::fastFree(v73, v74);
          }
          else
          {
            --*(_DWORD *)v58;
          }
        }
      }
      v37 = *(_QWORD *)(*((_QWORD *)v21 + 5) + 8);
      if (atomic_load(v16))
      {
        v62 = *(_QWORD *)(v37 + 528);
        if (v62)
        {
          v63 = *(_QWORD *)(v62 + 8);
          if (v63)
          {
            v64 = *(_QWORD *)(v63 + 24);
            if (v64)
            {
              v65 = *(_QWORD *)(v64 + 8);
              if (v65)
                goto LABEL_162;
            }
          }
        }
        v67 = *(_QWORD *)(v37 + 2632);
        if (v67)
        {
          v68 = *(_QWORD *)(v67 + 8);
          if (v68)
          {
            v69 = *(_QWORD *)(v68 + 528);
            if (v69)
            {
              v70 = *(_QWORD *)(v69 + 8);
              if (v70)
              {
                v71 = *(_QWORD *)(v70 + 24);
                if (v71)
                {
                  v65 = *(_QWORD *)(v71 + 8);
                  if (v65)
                  {
LABEL_162:
                    v66 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v65 + 80) + 8) + 40);
                    if (v66)
                      WebCore::InspectorDOMAgent::didInsertDOMNode(v66, v21);
                  }
                }
              }
            }
          }
        }
      }
      v39 = *(_QWORD *)(*((_QWORD *)v21 + 5) + 8);
      *(_DWORD *)(v39 + 24) += 2;
      *((_DWORD *)v21 + 6) += 2;
      v40 = *((_QWORD *)a2 + 2);
      v41 = (v40 & 0x18000000000000) == 0;
      if ((v40 & 0x8000000000000) != 0)
        WebCore::notifyNodeInsertedIntoDocument((uint64_t)a2, (uint64_t)v21, v41, (uint64_t)&v126);
      else
        WebCore::notifyNodeInsertedIntoTree((uint64_t)a2, (uint64_t)v21, v41);
      if (*((_DWORD *)v21 + 6) == 2)
      {
        if ((*((_WORD *)v21 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v21);
      }
      else
      {
        *((_DWORD *)v21 + 6) -= 2;
      }
      if (*(_DWORD *)(v39 + 24) == 2)
      {
        if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v39);
      }
      else
      {
        *(_DWORD *)(v39 + 24) -= 2;
      }
      if (v123)
      {
        if (v124)
          WebCore::Style::ChildChangeInvalidation::invalidateForHasAfterMutation(v122, (uint64_t)v42, v43);
        WebCore::Style::ChildChangeInvalidation::invalidateAfterChange((uint64_t)v122);
      }
      --v20[459];
      v44 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
      if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
        && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
      {
        WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v122, v42);
        v44 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
      }
      WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v44 - 1;
      result = (*(uint64_t (**)(WebCore::Node *, __int128 *))(*(_QWORD *)a2 + 376))(a2, &v129);
      if (HIDWORD(v127))
      {
        v45 = v126;
        v46 = 8 * HIDWORD(v127);
        do
        {
          v47 = *(_QWORD *)v45;
          v45 = (WTF::StringImpl *)((char *)v45 + 8);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 280))(v47);
          v46 -= 8;
        }
        while (v46);
      }
      if ((*((_BYTE *)v21 + 22) & 0x10) == 0)
      {
        *((_DWORD *)v21 + 6) += 2;
        v122[0] = v21;
        result = *(_QWORD *)(*((_QWORD *)v21 + 5) + 8);
        *(_DWORD *)(result + 24) += 2;
        if (*((_QWORD *)v21 + 4) && (*(_WORD *)(result + 3292) & 2) != 0)
        {
          v112 = result;
          v94 = WebCore::eventNames((WebCore *)result);
          v95 = *((_QWORD *)v21 + 4);
          if (v95)
            *(_DWORD *)(v95 + 24) += 2;
          v96 = (_QWORD *)(v94 + 24);
          v132 = 0;
          v133[0] = 0;
          v97 = (WebCore::Event *)WebCore::MutationEvent::operator new(112);
          WebCore::MutationEvent::MutationEvent((uint64_t)v97, v96, 1, 0, v95, v133, (_DWORD **)&v132);
          WebCore::Node::dispatchScopedEvent(v21, v97);
          if (*((_DWORD *)v97 + 4) == 1)
            (*(void (**)(WebCore::Event *))(*(_QWORD *)v97 + 8))(v97);
          else
            --*((_DWORD *)v97 + 4);
          v98 = v132;
          v132 = 0;
          if (v98)
          {
            if (*(_DWORD *)v98 == 2)
              WTF::StringImpl::destroy(v98, v6);
            else
              *(_DWORD *)v98 -= 2;
          }
          v99 = (WTF::StringImpl *)v133[0];
          v133[0] = 0;
          if (v99)
          {
            if (*(_DWORD *)v99 == 2)
              WTF::StringImpl::destroy(v99, v6);
            else
              *(_DWORD *)v99 -= 2;
          }
          result = v112;
          v16 = (unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter;
          v20 = &webThreadDelegateMessageScopeCount;
          if (v95)
          {
            if (*(_DWORD *)(v95 + 24) == 2)
            {
              result = v112;
              if ((*(_WORD *)(v95 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v95);
                result = v112;
              }
            }
            else
            {
              *(_DWORD *)(v95 + 24) -= 2;
              result = v112;
            }
          }
        }
        if ((*((_BYTE *)v21 + 22) & 8) != 0 && (*(_WORD *)(result + 3292) & 0x10) != 0)
        {
          v84 = v20;
          v110 = v19;
          v111 = result;
          v85 = v16;
          v86 = v21;
          do
          {
            v87 = (_QWORD *)(WebCore::eventNames((WebCore *)result) + 32);
            v132 = 0;
            v133[0] = 0;
            v88 = (WebCore::Event *)WebCore::MutationEvent::operator new(112);
            WebCore::MutationEvent::MutationEvent((uint64_t)v88, v87, 0, 0, 0, v133, (_DWORD **)&v132);
            WebCore::Node::dispatchScopedEvent(v86, v88);
            if (*((_DWORD *)v88 + 4) == 1)
              (*(void (**)(WebCore::Event *))(*(_QWORD *)v88 + 8))(v88);
            else
              --*((_DWORD *)v88 + 4);
            v91 = v132;
            v132 = 0;
            if (v91)
            {
              if (*(_DWORD *)v91 == 2)
                WTF::StringImpl::destroy(v91, v89);
              else
                *(_DWORD *)v91 -= 2;
            }
            v92 = (WTF::StringImpl *)v133[0];
            v133[0] = 0;
            if (v92)
            {
              if (*(_DWORD *)v92 == 2)
                WTF::StringImpl::destroy(v92, v89);
              else
                *(_DWORD *)v92 -= 2;
            }
            v93 = WebCore::NodeTraversal::next(v122[0], v21, v90);
            result = (uint64_t)WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)v122, v93);
            v86 = v122[0];
          }
          while (v122[0]);
          v16 = v85;
          v19 = v110;
          v20 = v84;
          if (!v111)
            goto LABEL_80;
          v21 = 0;
          result = v111;
        }
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
          {
            result = WebCore::Node::removedLastRef((WebCore::Node *)result);
            v21 = v122[0];
          }
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
        v122[0] = 0;
        if (v21)
        {
          if (*((_DWORD *)v21 + 6) == 2)
          {
            if ((*((_WORD *)v21 + 15) & 0x400) == 0)
              result = WebCore::Node::removedLastRef(v21);
          }
          else
          {
            *((_DWORD *)v21 + 6) -= 2;
          }
        }
      }
LABEL_80:
      v48 = v126;
      if (HIDWORD(v127))
      {
        v50 = 8 * HIDWORD(v127);
        do
        {
          result = *(_QWORD *)v48;
          *(_QWORD *)v48 = 0;
          if (result)
          {
            if (*(_DWORD *)(result + 24) == 2)
            {
              if ((*(_WORD *)(result + 30) & 0x400) == 0)
                result = WebCore::Node::removedLastRef((WebCore::Node *)result);
            }
            else
            {
              *(_DWORD *)(result + 24) -= 2;
            }
          }
          v48 = (WTF::StringImpl *)((char *)v48 + 8);
          v50 -= 8;
        }
        while (v50);
        v48 = v126;
      }
      if (v19 != v48 && v48 != 0)
      {
        v126 = 0;
        LODWORD(v127) = 0;
        result = WTF::fastFree(v48, v6);
      }
      ++v18;
    }
    while (v18 != v115);
  }
  if ((*((_BYTE *)a2 + 22) & 0x10) == 0)
  {
    v51 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
    if (!*(_BYTE *)(v51 + 3268) && (*(_WORD *)(v51 + 3292) & 1) != 0)
    {
      v103 = (_QWORD *)(WebCore::eventNames((WebCore *)result) + 56);
      if (*((_QWORD *)a2 + 4)
        || (v108 = *((_QWORD *)a2 + 2), (v108 & 0x1000000000000) != 0)
        && WebCore::EventListenerMap::find((v108 & 0xFFFFFFFFFFFFLL) + 16, v103))
      {
        v126 = 0;
        *(_QWORD *)&v129 = 0;
        v104 = (WebCore::Node *)WebCore::MutationEvent::operator new(112);
        WebCore::MutationEvent::MutationEvent((uint64_t)v104, v103, 1, 0, 0, (_DWORD **)&v126, (_DWORD **)&v129);
        WebCore::EventDispatcher::dispatchScopedEvent(a2, v104, v105);
        if (*((_DWORD *)v104 + 4) == 1)
          (*(void (**)(WebCore::Node *))(*(_QWORD *)v104 + 8))(v104);
        else
          --*((_DWORD *)v104 + 4);
        v106 = (WTF::StringImpl *)v129;
        *(_QWORD *)&v129 = 0;
        if (v106)
        {
          if (*(_DWORD *)v106 == 2)
            WTF::StringImpl::destroy(v106, v6);
          else
            *(_DWORD *)v106 -= 2;
        }
        v107 = v126;
        v126 = 0;
        if (v107)
        {
          if (*(_DWORD *)v107 == 2)
            WTF::StringImpl::destroy(v107, v6);
          else
            *(_DWORD *)v107 -= 2;
        }
      }
    }
  }
  *(_QWORD *)v114 = 0;
  *((_QWORD *)v114 + 1) = 0;
  *((_QWORD *)v114 + 2) = 0;
  result = (uint64_t)v113;
  if (v113)
  {
    if (*(_DWORD *)v113 == 1)
    {
      WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v113, v6);
      result = WTF::fastFree(v55, v56);
    }
    else
    {
      --*(_DWORD *)v113;
    }
  }
LABEL_104:
  if (v118)
  {
    result = (uint64_t)v117;
    if (v117)
    {
      if (*(_DWORD *)v117 == 2)
        result = WTF::StringImpl::destroy(v117, v6);
      else
        *(_DWORD *)v117 -= 2;
    }
  }
  v52 = v119;
  if (HIDWORD(v120))
  {
    v54 = 8 * HIDWORD(v120);
    do
    {
      result = *(_QWORD *)v52;
      *(_QWORD *)v52 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
      v52 = (WTF *)((char *)v52 + 8);
      v54 -= 8;
    }
    while (v54);
    v52 = v119;
  }
  if (v121 != (_BYTE *)v52 && v52 != 0)
  {
    v119 = 0;
    LODWORD(v120) = 0;
    result = WTF::fastFree(v52, v6);
  }
  if (a2)
  {
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(a2);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::ChildListMutationAccumulator::getOrCreate@<X0>(WebCore::ChildListMutationAccumulator *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int *v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int i;
  uint64_t v18;
  uint64_t *v19;
  uint64_t result;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  WebCore::MutationObserver **v26;
  void *v27;
  WTF *v28;
  WTF *v29;
  int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  WTF *v36;
  WebCore::MutationObserver **v37;
  WebCore::MutationObserver **v38;

  if ((byte_1ECE8310B & 1) == 0)
  {
    qword_1ECE83120 = 0;
    byte_1ECE8310B = 1;
  }
  v5 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
  v7 = v5;
  do
    v8 = __ldaxr(v5);
  while (__stlxr(v8 + 1, v5));
  v9 = qword_1ECE83120;
  if (qword_1ECE83120
    || (WTF::HashTable<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>,WTF::KeyValuePair<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>,WTF::WeakRef<WebCore::ChildListMutationAccumulator,WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>,WTF::WeakRef<WebCore::ChildListMutationAccumulator,WTF::SingleThreadWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashMap<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>,WTF::WeakRef<WebCore::ChildListMutationAccumulator,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::ChildListMutationAccumulator,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>>>::rehash(8u),
        (v9 = qword_1ECE83120) != 0))
  {
    v10 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    v10 = 0;
  }
  v11 = 0;
  v12 = *((_QWORD *)v7 + 1);
  v13 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = (v15 >> 31) ^ v15;
  for (i = 1; ; ++i)
  {
    v18 = v16 & v10;
    v19 = (uint64_t *)(v9 + 16 * v18);
    result = *v19;
    if (*v19 == -1)
    {
      v11 = (uint64_t *)(v9 + 16 * v18);
      goto LABEL_10;
    }
    if (!result)
    {
      if (v11)
      {
        *v11 = 0;
        v11[1] = 0;
        --*(_DWORD *)(v9 - 16);
        *v11 = (uint64_t)v7;
        v19 = v11;
      }
      else
      {
        *v19 = (uint64_t)v7;
      }
      v23 = WTF::fastMalloc((WTF *)0x58);
      if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3364) & 1) != 0)
      {
        WebCore::Node::registeredMutationObservers((uint64_t)this, 1, 0, &v38);
        v25 = 0;
        v26 = v38;
        if (!v38)
          goto LABEL_22;
        if (!*((_DWORD *)v38 - 3))
        {
          v25 = 0;
LABEL_46:
          WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable(v26, v24);
          goto LABEL_22;
        }
        v25 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v25 = 0;
        v37 = v38;
        v38 = 0;
        *(_QWORD *)v25 = v37;
        *(_BYTE *)(v25 + 8) = 0;
        v26 = v38;
        if (v38)
          goto LABEL_46;
      }
      else
      {
        v25 = 0;
      }
LABEL_22:
      *(_DWORD *)v23 = 1;
      *((_DWORD *)this + 6) += 2;
      *(_QWORD *)(v23 + 8) = 0;
      *(_QWORD *)(v23 + 16) = this;
      *(_OWORD *)(v23 + 24) = 0u;
      *(_OWORD *)(v23 + 40) = 0u;
      *(_OWORD *)(v23 + 56) = 0u;
      *(_QWORD *)(v23 + 72) = 0;
      *(_QWORD *)(v23 + 80) = v25;
      result = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)result = 1;
      *(_QWORD *)(result + 8) = v23;
      v28 = *(WTF **)(v23 + 8);
      *(_QWORD *)(v23 + 8) = result;
      if (v28)
      {
        if (*(_DWORD *)v28 == 1)
        {
          WTF::fastFree(v28, v27);
          result = *(_QWORD *)(v23 + 8);
        }
        else
        {
          --*(_DWORD *)v28;
        }
      }
      ++*(_DWORD *)result;
      v29 = (WTF *)v19[1];
      v19[1] = result;
      if (v29)
      {
        if (*(_DWORD *)v29 == 1)
          result = WTF::fastFree(v29, v27);
        else
          --*(_DWORD *)v29;
      }
      if (qword_1ECE83120)
        v30 = *(_DWORD *)(qword_1ECE83120 - 12) + 1;
      else
        v30 = 1;
      *(_DWORD *)(qword_1ECE83120 - 12) = v30;
      if (qword_1ECE83120)
        v31 = *(_DWORD *)(qword_1ECE83120 - 12);
      else
        v31 = 0;
      v32 = (*(_DWORD *)(qword_1ECE83120 - 16) + v31);
      v33 = *(unsigned int *)(qword_1ECE83120 - 4);
      if (v33 > 0x400)
      {
        if (v33 > 2 * v32)
          goto LABEL_17;
      }
      else
      {
        if (3 * v33 > 4 * v32)
          goto LABEL_17;
        if (!(_DWORD)v33)
        {
          v34 = 8;
LABEL_34:
          result = (uint64_t)WTF::HashTable<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>,WTF::KeyValuePair<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>,WTF::WeakRef<WebCore::ChildListMutationAccumulator,WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>,WTF::WeakRef<WebCore::ChildListMutationAccumulator,WTF::SingleThreadWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashMap<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>,WTF::WeakRef<WebCore::ChildListMutationAccumulator,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::ChildListMutationAccumulator,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>>>::rehash(v34);
          goto LABEL_17;
        }
      }
      if (6 * *(_DWORD *)(qword_1ECE83120 - 12) >= (2 * v33))
        v34 = 2 * v33;
      else
        v34 = *(_DWORD *)(qword_1ECE83120 - 4);
      goto LABEL_34;
    }
    if (*(_QWORD *)(result + 8) == v12)
      break;
LABEL_10:
    v16 = i + v18;
  }
  do
  {
    v21 = __ldaxr(v7);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v7));
  if (!v22)
  {
    atomic_store(1u, v7);
    v35 = v7[7];
    if ((_DWORD)v35)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v7 + 2), (WTF::StringImpl *)(*((_QWORD *)v7 + 2) + 32 * v35));
    v36 = (WTF *)*((_QWORD *)v7 + 2);
    if (v36)
    {
      *((_QWORD *)v7 + 2) = 0;
      v7[6] = 0;
      WTF::fastFree(v36, v6);
    }
    result = WTF::fastFree((WTF *)v7, v6);
  }
  v23 = *(_QWORD *)(*(_QWORD *)(v9 + 16 * v18 + 8) + 8);
  ++*(_DWORD *)v23;
LABEL_17:
  *a2 = v23;
  return result;
}

uint64_t WebCore::Node::registeredMutationObservers@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  __int16 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];
  uint64_t v32;
  char v33;

  v33 = a2;
  v32 = a3;
  *a4 = 0;
  v31[0] = result;
  v31[1] = &v33;
  v31[2] = &v32;
  v31[3] = a4;
  if (result)
  {
    v4 = result;
    *(_DWORD *)(result + 24) += 2;
    while (1)
    {
      v5 = v4;
      if ((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v6 = *(_QWORD *)((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) + 8);
        if (v6)
        {
          v9 = *(unsigned int *)(v6 + 12);
          if (!(_DWORD)v9)
            break;
          v22 = *(uint64_t **)v6;
          v23 = 8 * v9;
          do
          {
            v24 = *v22++;
            result = WebCore::Node::registeredMutationObservers(WebCore::MutationObserverOptionType,WebCore::QualifiedName const*)::$_0::operator()((uint64_t)v31, v24);
            v23 -= 8;
          }
          while (v23);
          if ((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) != 0)
          {
            v6 = *(_QWORD *)((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 8);
            if (v6)
              break;
          }
        }
      }
LABEL_5:
      v4 = *(_QWORD *)(v5 + 32);
      if (v4)
        *(_DWORD *)(v4 + 24) += 2;
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        v19 = *(_WORD *)(v5 + 30);
        if ((v19 & 0x400) == 0)
        {
          v20 = *(_WORD *)(v5 + 28);
          if ((v20 & 0xF000) == 0x9000)
          {
            result = WebCore::Document::removedLastRef((WebCore::Document *)v5);
          }
          else
          {
            if ((v20 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 160) + 16))(*(_QWORD *)(v5 + 160));
              v19 = *(_WORD *)(v5 + 30);
            }
            *(_WORD *)(v5 + 30) = v19 | 0x400;
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
          }
        }
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
      if (!v4)
        return result;
    }
    v12 = *(_QWORD *)(v6 + 16);
    v10 = (_QWORD *)(v6 + 16);
    v11 = v12;
    if (v12)
    {
      v13 = *(unsigned int *)(v11 - 4);
      v14 = v11 + 8 * v13;
      if (*(_DWORD *)(v11 - 12))
      {
        v7 = v11;
        if ((_DWORD)v13)
        {
          v8 = 8 * v13;
          v7 = v11;
          while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
          {
            v7 += 8;
            v8 -= 8;
            if (!v8)
            {
              v7 = v14;
              goto LABEL_18;
            }
          }
        }
        goto LABEL_18;
      }
      v7 = v11 + 8 * v13;
    }
    else
    {
      v7 = 0;
      v13 = 0;
    }
    v14 = v11 + 8 * v13;
LABEL_18:
    v26 = v10;
    v27 = v7;
    v28 = v14;
    if (v11)
    {
      v16 = *(unsigned int *)(v11 - 4);
      v15 = v11 + 8 * v16;
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    v29 = v15;
    v30 = v11 + 8 * v16;
    if (v7 != v15)
    {
      v21 = v7;
      while (!*(_QWORD *)(*(_QWORD *)v21 + 8))
      {
        v25 = v21 + 8;
        v27 = v25;
        v21 = v14;
        if (v25 != v14)
        {
          v21 = v25;
          while ((unint64_t)(*(_QWORD *)v21 + 1) <= 1)
          {
            v21 += 8;
            v27 = v21;
            if (v21 == v14)
            {
              v21 = v14;
              break;
            }
          }
        }
        v7 = v15;
        if (v21 == v15)
          goto LABEL_21;
      }
      v7 = v21;
    }
LABEL_21:
    v17 = *v10;
    if (v17)
      v18 = v17 + 8 * *(unsigned int *)(v17 - 4);
    else
      v18 = 0;
    while (v7 != v18)
    {
      WebCore::Node::registeredMutationObservers(WebCore::MutationObserverOptionType,WebCore::QualifiedName const*)::$_0::operator()((uint64_t)v31, *(_QWORD *)(*(_QWORD *)v7 + 8));
      result = (uint64_t)WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v26);
      v7 = v27;
    }
    goto LABEL_5;
  }
  return result;
}

uint64_t WebCore::MutationObserverRegistration::shouldReceiveMutationFrom(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v4;
  uint64_t v5;

  v4 = *(unsigned __int8 *)(a1 + 40);
  if ((v4 & a3) == 0 || (v4 & 8) == 0 && *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) != a2)
    return 0;
  v5 = 1;
  if (a3 != 2 || (v4 & 0x10) == 0)
    return v5;
  if (*(_QWORD *)(*(_QWORD *)a4 + 32))
    return 0;
  return WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::contains((uint64_t *)(a1 + 48), *(_QWORD *)a4 + 24);
}

uint64_t WebCore::CharacterData::parserAppendData(uint64_t result, _BYTE *a2, size_t a3)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  WTF::StringImpl *v16;
  void *v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t *v20;
  void *v21;
  WTF::StringImpl *v22;
  unsigned __int128 *v23;
  unsigned __int128 *v24;
  unsigned __int128 v25;
  char v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WebCore::Style::Invalidator *v29[2];
  char v30;
  char v31;
  char v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _DWORD *v36;

  v3 = a3;
  v4 = a2;
  v5 = result;
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  LOBYTE(v33) = 4;
  v6 = result;
  while (1)
  {
    v6 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFLL;
    if (!v6)
      break;
    if ((*(_WORD *)(v6 + 28) & 8) != 0)
    {
      *(_DWORD *)(v6 + 24) += 2;
      break;
    }
  }
  *(_QWORD *)&v34 = v6;
  do
  {
    result = *(_QWORD *)(result + 56);
    if (!result)
    {
      *((_QWORD *)&v34 + 1) = 0;
      LOWORD(v35) = 256;
      goto LABEL_11;
    }
  }
  while ((*(_WORD *)(result + 28) & 8) == 0);
  v7 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v7 + 2;
  *((_QWORD *)&v34 + 1) = result;
  LOWORD(v35) = 256;
  if (v7)
  {
    *(_DWORD *)(result + 24) = v7;
  }
  else if ((*(_WORD *)(result + 30) & 0x400) == 0)
  {
    result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
  }
LABEL_11:
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  LOBYTE(v29[0]) = 0;
  v32 = 0;
  v8 = *(_QWORD *)(v5 + 32);
  if (v8)
  {
    *(_DWORD *)(v8 + 24) += 2;
    result = (uint64_t)std::optional<WebCore::Style::ChildChangeInvalidation>::emplace[abi:sn180100]<WebCore::ContainerNode &,WebCore::ContainerNode::ChildChange &,void>(v29, v8, (const WebCore::Style::RuleSet *)&v33);
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v9 = *(_QWORD *)(v5 + 80);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 + 4);
    *(_DWORD *)v9 += 4;
  }
  else
  {
    v10 = 0;
  }
  v28 = (WTF::StringImpl *)v9;
  if (((v10 | v3) & 0x80000000) != 0)
    goto LABEL_96;
  v11 = (v10 + v3);
  if (__OFADD__(v10, (_DWORD)v3))
    goto LABEL_96;
  if (v9 && (*(_BYTE *)(v9 + 16) & 4) == 0 || (v3 & 0xFF00000000) == 0)
  {
    if ((_DWORD)v11)
    {
      if (v11 <= 0x7FFFFFEF)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(2 * v11 + 20));
        v12 = v36;
        if (v36)
        {
          *v36 = 2;
          v12[1] = v11;
          *((_QWORD *)v12 + 1) = v12 + 5;
          v12[4] = 0;
          WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::StringView,void>>((char *)v12 + 20, v9, (uint64_t)v4, v3);
          goto LABEL_36;
        }
      }
LABEL_96:
      __break(0xC471u);
      return result;
    }
LABEL_87:
    v12 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_36;
  }
  if (!(_DWORD)v11)
    goto LABEL_87;
  if ((v11 & 0x80000000) != 0)
    goto LABEL_96;
  result = WTF::tryFastCompactMalloc((WTF *)(v11 + 20));
  v12 = v36;
  if (!v36)
    goto LABEL_96;
  v13 = v36 + 5;
  *v36 = 2;
  v12[1] = v11;
  *((_QWORD *)v12 + 1) = v12 + 5;
  v12[4] = 4;
  if (v9)
  {
    a2 = *(_BYTE **)(v9 + 8);
    a3 = *(unsigned int *)(v9 + 4);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      if ((_DWORD)a3)
      {
        if ((_DWORD)a3 == 1)
          *v13 = *a2;
        else
          memcpy(v12 + 5, a2, a3);
      }
    }
    else
    {
      if (a3 < 0x10)
      {
        v23 = (unsigned __int128 *)(v12 + 5);
      }
      else
      {
        v23 = (unsigned __int128 *)&v13[a3 & 0xFFFFFFF0];
        v24 = (unsigned __int128 *)(v12 + 5);
        do
        {
          v25 = (unsigned __int128)vld2q_s8(a2);
          a2 += 32;
          *v24++ = v25;
        }
        while (v24 != v23);
      }
      while (v23 != (unsigned __int128 *)&v13[a3])
      {
        v26 = *a2;
        a2 += 2;
        *(_BYTE *)v23 = v26;
        v23 = (unsigned __int128 *)((char *)v23 + 1);
      }
    }
    v14 = *(unsigned int *)(v9 + 4);
  }
  else
  {
    v14 = 0;
  }
  if ((_DWORD)v3)
  {
    v15 = &v13[v14];
    if ((_DWORD)v3 == 1)
      *v15 = *v4;
    else
      memcpy(v15, v4, v3);
  }
LABEL_36:
  v16 = *(WTF::StringImpl **)(v5 + 80);
  *(_QWORD *)(v5 + 80) = v12;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
    *(_WORD *)(v5 + 30) &= ~0x100u;
    if ((*(_WORD *)(v5 + 28) & 2) == 0)
      goto LABEL_45;
    v17 = (void *)*(unsigned int *)(v9 + 4);
  }
  else
  {
    *(_WORD *)(v5 + 30) &= ~0x100u;
    if ((*(_WORD *)(v5 + 28) & 2) == 0)
      goto LABEL_45;
    v17 = 0;
  }
  WebCore::Text::updateRendererAfterContentChange((WebCore::Text *)v5, v17, 0);
LABEL_45:
  v18 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
  *(_QWORD *)(v18 + 1288) = ++WebCore::Document::s_globalTreeVersion;
  v19 = *(WebCore::Node **)(v5 + 32);
  if (v19)
  {
    *((_DWORD *)v19 + 6) += 2;
    (*(void (**)(WebCore::Node *, __int128 *))(*(_QWORD *)v19 + 376))(v19, &v33);
    if (*((_DWORD *)v19 + 6) == 2)
    {
      if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v19, a2);
    }
    else
    {
      *((_DWORD *)v19 + 6) -= 2;
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 3364) & 4) != 0)
  {
    WebCore::MutationObserverInterestGroup::createIfNeeded(v5, 4, 64, 0, (uint64_t *)&v36);
    v20 = (uint64_t *)v36;
    if (v36)
    {
      WebCore::MutationRecord::createCharacterData((WebCore::MutationRecord *)v5, (WebCore::CharacterData *)&v28, &v27);
      WebCore::MutationObserverInterestGroup::enqueueMutationRecord(v20, &v27);
      v22 = v27;
      v27 = 0;
      if (v22)
      {
        if (*((_DWORD *)v22 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v22 + 8))(v22);
        else
          --*((_DWORD *)v22 + 2);
      }
      if (*v20)
        WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable((WebCore::MutationObserver **)*v20, v21);
      WTF::fastFree((WTF *)v20, v21);
    }
  }
  result = (uint64_t)v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  if (v32 && v30)
  {
    if (v31)
      WebCore::Style::ChildChangeInvalidation::invalidateForHasAfterMutation(v29, (uint64_t)a2, (const WebCore::Style::RuleSet *)a3);
    return WebCore::Style::ChildChangeInvalidation::invalidateAfterChange((uint64_t)v29);
  }
  return result;
}

uint64_t WebCore::Style::ChildChangeInvalidation::invalidateAfterChange(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::Element *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = *(_QWORD *)(*(_QWORD *)this + 64);
  if ((v1 & 0x800000000000000) != 0)
  {
    v49 = v1 & 0xFFFFFFFFFFFFLL;
    if (!v49)
      goto LABEL_132;
    if ((*(_BYTE *)(v49 + 45) & 2) != 0)
      v49 = *(_QWORD *)(*(_QWORD *)(v49 + 32) + 8);
    if ((*(_BYTE *)(v49 + 100) & 0x80) == 0 || *(_QWORD *)(*(_QWORD *)this + 80))
    {
LABEL_132:
      v50 = this;
      WebCore::Element::invalidateStyleForSubtree(*(WebCore::Element **)this);
      this = v50;
    }
  }
  v2 = *(_QWORD *)(this + 8);
  if (!*(_BYTE *)(v2 + 32))
    return this;
  v3 = *(WebCore::Element **)this;
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  if ((*(_BYTE *)(*(_QWORD *)this + 70) & 0x40) != 0 && v5)
  {
    v25 = this;
    v26 = *((_QWORD *)v3 + 10);
    if (v26)
    {
      v27 = 0;
      v28 = 1;
      while ((*(_WORD *)(v26 + 28) & 8) == 0)
      {
        v26 = *(_QWORD *)(v26 + 56);
        if (!v26)
          goto LABEL_77;
      }
      v28 = 0;
      *(_DWORD *)(v26 + 24) += 2;
      v27 = v26;
    }
    else
    {
      v27 = 0;
      v28 = 1;
    }
LABEL_77:
    if (v27 != v5 || *(_BYTE *)v2 == 1)
      WebCore::Style::invalidateForFirstChildState((WTF::MonotonicTime *)v5, (WebCore::Element *)(v27 != v5));
    this = v25;
    if ((v28 & 1) == 0)
    {
      if (*(_DWORD *)(v27 + 24) == 2)
      {
        this = v25;
        if ((*(_WORD *)(v27 + 30) & 0x400) != 0)
          goto LABEL_4;
        WebCore::Node::removedLastRef((WebCore::Node *)v27);
      }
      else
      {
        *(_DWORD *)(v27 + 24) -= 2;
      }
      this = v25;
    }
  }
LABEL_4:
  if ((*((_BYTE *)v3 + 70) & 0x80) != 0 && v4)
  {
    v6 = *((_QWORD *)v3 + 11);
    if (v6)
    {
      while ((*(_WORD *)(v6 + 28) & 8) == 0)
      {
        v6 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFLL;
        if (!v6)
          goto LABEL_9;
      }
      v7 = 0;
      *(_DWORD *)(v6 + 24) += 2;
    }
    else
    {
LABEL_9:
      v7 = 1;
    }
    if (v6 == v4)
    {
      if (**(_BYTE **)(this + 8) != 1)
        goto LABEL_12;
      v10 = *(_QWORD *)(v4 + 64);
      v23 = v10 & 0xFFFFFFFFFFFFLL;
      if ((v10 & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((v10 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          v23 = *(_QWORD *)(*(_QWORD *)((v10 & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
        if ((*(_BYTE *)(v23 + 101) & 2) != 0)
          goto LABEL_12;
      }
    }
    else
    {
      v10 = *(_QWORD *)(v4 + 64);
      v11 = v10 & 0xFFFFFFFFFFFFLL;
      if ((v10 & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((v10 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          v11 = *(_QWORD *)(*(_QWORD *)((v10 & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
        if ((*(_BYTE *)(v11 + 101) & 2) == 0)
          goto LABEL_12;
      }
    }
    if ((*(_BYTE *)(v4 + 22) & 8) == 0
      || (v12 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8), !*(_QWORD *)(v12 + 1944))
      || *(_BYTE *)(v12 + 3405)
      || *(_BYTE *)(v12 + 3392)
      || (*(_WORD *)(v4 + 30) |= 0x10u, v13 = HIWORD(v10) & 7, v13 > 3)
      || (*(_QWORD *)(v4 + 64) = v10 & 0xFFF8FFFFFFFFFFFFLL | 0x4000000000000, (_DWORD)v13))
    {
LABEL_12:
      if ((v7 & 1) == 0)
      {
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
            this = WebCore::Node::removedLastRef((WebCore::Node *)v6);
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
      }
      goto LABEL_15;
    }
    *(_DWORD *)(v4 + 24) += 2;
    v14 = *(unsigned __int16 *)(v4 + 28);
    if ((v14 & 0x80) != 0)
    {
      v29 = *(_QWORD *)(v4 + 200);
      if (!v29)
        goto LABEL_84;
    }
    else if ((~v14 & 0x408) == 0
           && (this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 368))(v4), (_DWORD)this))
    {
      v29 = *(_QWORD *)(v4 + 112);
      if (!v29)
        goto LABEL_84;
    }
    else
    {
      v15 = *(_QWORD *)(v4 + 32);
      if (!v15)
        goto LABEL_84;
      v16 = *(_WORD *)(v15 + 28);
      if ((v16 & 0x80) == 0)
      {
        if ((v16 & 8) != 0)
        {
          if ((*(_QWORD *)(v15 + 72) & 0xFFFFFFFFFFFFLL) == 0)
            goto LABEL_41;
          v22 = *(_QWORD *)((*(_QWORD *)(v15 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
          if (!v22)
            goto LABEL_41;
          this = *(_QWORD *)(v22 + 224);
          if (this)
          {
            this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)this + 16))(this, v4);
            v15 = this;
            goto LABEL_107;
          }
        }
LABEL_84:
        if (*(_DWORD *)(v4 + 24) == 2)
        {
          v35 = *(_WORD *)(v4 + 30);
          if ((v35 & 0x400) == 0)
          {
            v36 = *(_WORD *)(v4 + 28);
            if ((v36 & 0xF000) == 0x9000)
            {
              this = WebCore::Document::removedLastRef((WebCore::Document *)v4);
            }
            else
            {
              if ((v36 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
                v35 = *(_WORD *)(v4 + 30);
              }
              *(_WORD *)(v4 + 30) = v35 | 0x400;
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
            }
          }
        }
        else
        {
          *(_DWORD *)(v4 + 24) -= 2;
        }
        v30 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
        v31 = *(_QWORD *)(v30 + 1272);
        if (v31)
        {
          v32 = *(_QWORD *)(v31 + 64);
          if ((v32 & 0x8000000000000) != 0 || (v32 & 0x7000000000000) != 0 || (*(_WORD *)(v31 + 30) & 0x20) != 0)
          {
            *(_DWORD *)(v30 + 24) += 2;
            *(_QWORD *)(v30 + 64) |= 0x8000000000000uLL;
            if (((*(_QWORD *)(v30 + 1536) & 0xFFFFFFFFFFFFLL) == 0
               || *(double *)((*(_QWORD *)(v30 + 1536) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
              && !*(_BYTE *)(v30 + 3362))
            {
              *(_QWORD *)(v30 + 1528) = 0;
              WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
              this = WebCore::TimerBase::setNextFireTime(v30 + 1504, v33 + 0.0);
              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
              {
                v40 = *(_QWORD *)(v30 + 528);
                if (v40)
                {
                  v41 = *(_QWORD *)(v40 + 8);
                  if (v41)
                  {
                    v42 = *(_QWORD *)(v41 + 24);
                    if (v42)
                    {
                      v43 = *(_QWORD *)(v42 + 8);
                      if (v43)
                        goto LABEL_115;
                    }
                  }
                }
                v44 = *(_QWORD *)(v30 + 2632);
                if (v44)
                {
                  v45 = *(_QWORD *)(v44 + 8);
                  if (v45)
                  {
                    v46 = *(_QWORD *)(v45 + 528);
                    if (v46)
                    {
                      v47 = *(_QWORD *)(v46 + 8);
                      if (v47)
                      {
                        v48 = *(_QWORD *)(v47 + 24);
                        if (v48)
                        {
                          v43 = *(_QWORD *)(v48 + 8);
                          if (v43)
                          {
LABEL_115:
                            this = *(_QWORD *)(*(_QWORD *)(v43 + 80) + 8);
                            if (this)
                              this = (uint64_t)WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl((WTF::StringImpl *)this, (WebCore::Document *)v30);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (*(_DWORD *)(v30 + 24) == 2)
            {
              v37 = *(_WORD *)(v30 + 30);
              if ((v37 & 0x400) == 0)
              {
                v38 = *(_WORD *)(v30 + 28);
                if ((v38 & 0xF000) == 0x9000)
                {
                  this = WebCore::Document::removedLastRef((WebCore::Document *)v30);
                }
                else
                {
                  if ((v38 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(v30 + 160) + 16))(*(_QWORD *)(v30 + 160));
                    v37 = *(_WORD *)(v30 + 30);
                  }
                  *(_WORD *)(v30 + 30) = v37 | 0x400;
                  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 72))(v30);
                }
              }
            }
            else
            {
              *(_DWORD *)(v30 + 24) -= 2;
            }
          }
        }
        goto LABEL_12;
      }
      v29 = *(_QWORD *)(v15 + 200);
      if (!v29)
        goto LABEL_84;
    }
    v15 = *(_QWORD *)(v29 + 8);
LABEL_107:
    if (!v15)
      goto LABEL_84;
LABEL_41:
    *(_QWORD *)(v15 + 64) |= 0x10000000000000uLL;
    while (1)
    {
      if ((*(_QWORD *)(v15 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v19 = *(_QWORD *)((*(_QWORD *)(v15 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v19)
          *(_QWORD *)(v19 + 64) |= 0x8000000000000uLL;
      }
      v17 = *(_QWORD *)(v15 + 64);
      if ((v17 & 0x8000000000000) != 0)
        goto LABEL_84;
      *(_QWORD *)(v15 + 64) = v17 | 0x8000000000000;
      this = *(_QWORD *)(v15 + 32);
      if (!this)
        goto LABEL_84;
      v18 = *(_WORD *)(this + 28);
      if ((v18 & 0x80) != 0)
      {
        v39 = *(_QWORD *)(this + 200);
        if (!v39)
          goto LABEL_84;
        this = *(_QWORD *)(v39 + 8);
      }
      else
      {
        if ((v18 & 8) == 0)
          goto LABEL_84;
        if ((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) != 0)
        {
          v24 = *(_QWORD *)((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
          if (v24)
          {
            this = *(_QWORD *)(v24 + 224);
            if (!this)
              goto LABEL_84;
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
          }
        }
      }
      v15 = this;
      if (!this)
        goto LABEL_84;
    }
  }
LABEL_15:
  if (v5)
  {
    v20 = v5;
LABEL_54:
    v21 = *(_QWORD *)(v20 + 64);
    if ((v21 & 0x200000000000000) != 0)
    {
      this = WebCore::Node::invalidateStyle(v20, 3u, 0);
      v21 = *(_QWORD *)(v20 + 64);
    }
    if ((v21 & 0x400000000000000) != 0)
    {
      this = *(_QWORD *)(v20 + 80);
      if (this)
      {
        while ((*(_WORD *)(this + 28) & 8) == 0)
        {
          this = *(_QWORD *)(this + 56);
          if (!this)
            goto LABEL_57;
        }
        *(_DWORD *)(this + 24) += 2;
        v54 = this;
        do
        {
          WebCore::Node::invalidateStyle(this, 4u, 0);
          v51 = v54;
          do
            v51 = *(_QWORD *)(v51 + 56);
          while (v51 && (*(_WORD *)(v51 + 28) & 8) == 0);
          WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=(&v54, v51);
          this = v54;
        }
        while (v54);
        v21 = *(_QWORD *)(v20 + 64);
      }
    }
LABEL_57:
    if ((v21 & 0x100000000000000) != 0)
    {
      while (1)
      {
        v20 = *(_QWORD *)(v20 + 56);
        if (!v20)
          break;
        if ((*(_WORD *)(v20 + 28) & 8) != 0)
          goto LABEL_54;
      }
    }
  }
  v8 = *((_QWORD *)v3 + 8);
  if (v5 && (v8 & 0x3000000000000000) != 0)
  {
LABEL_162:
    if ((v8 & 0x1000000000000000) != 0)
      this = (uint64_t)WebCore::Element::invalidateStyleInternal((WTF::MonotonicTime *)v5);
    if ((v8 & 0x2000000000000000) != 0)
    {
      v52 = *(_QWORD *)(v5 + 80);
      if (v52)
      {
        while ((*(_WORD *)(v52 + 28) & 8) == 0)
        {
          v52 = *(_QWORD *)(v52 + 56);
          if (!v52)
            goto LABEL_166;
        }
        while (1)
        {
          this = (uint64_t)WebCore::Element::invalidateStyleForSubtreeInternal((WTF::MonotonicTime *)v52);
          do
          {
            v52 = *(_QWORD *)(v52 + 56);
            if (!v52)
              goto LABEL_166;
          }
          while ((*(_WORD *)(v52 + 28) & 8) == 0);
        }
      }
    }
LABEL_166:
    while (1)
    {
      v5 = *(_QWORD *)(v5 + 56);
      if (!v5)
        break;
      if ((*(_WORD *)(v5 + 28) & 8) != 0)
        goto LABEL_162;
    }
    v8 = *((_QWORD *)v3 + 8);
  }
  if (v8 >> 62)
    v9 = v4 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    if ((v8 & 0x8000000000000000) != 0)
    {
LABEL_177:
      if ((v8 & 0x4000000000000000) != 0)
        this = (uint64_t)WebCore::Element::invalidateStyleInternal((WTF::MonotonicTime *)v4);
      v53 = *(_QWORD *)(v4 + 80);
      if (v53)
      {
        while ((*(_WORD *)(v53 + 28) & 8) == 0)
        {
          v53 = *(_QWORD *)(v53 + 56);
          if (!v53)
            goto LABEL_180;
        }
        while (1)
        {
          this = (uint64_t)WebCore::Element::invalidateStyleForSubtreeInternal((WTF::MonotonicTime *)v53);
          do
          {
            v53 = *(_QWORD *)(v53 + 56);
            if (!v53)
              goto LABEL_180;
          }
          while ((*(_WORD *)(v53 + 28) & 8) == 0);
        }
      }
LABEL_180:
      while (1)
      {
        v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
        if (!v4)
          break;
        if ((*(_WORD *)(v4 + 28) & 8) != 0)
          goto LABEL_177;
      }
    }
    else if ((v8 & 0x4000000000000000) != 0)
    {
LABEL_135:
      this = (uint64_t)WebCore::Element::invalidateStyleInternal((WTF::MonotonicTime *)v4);
      while (1)
      {
        v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
        if (!v4)
          break;
        if ((*(_WORD *)(v4 + 28) & 8) != 0)
          goto LABEL_135;
      }
    }
  }
  return this;
}

void WebCore::Text::updateRendererAfterContentChange(WebCore::Text *this, void *a2, int a3)
{
  uint64_t v4;
  int v5;
  int v7;
  uint64_t v8;
  WebCore::RenderStyle *v9;
  WTF *v10;
  _DWORD v11[2];
  WebCore::RenderStyle *v12;
  char v13;

  if ((*((_BYTE *)this + 22) & 8) != 0 && (*((_WORD *)this + 15) & 0x20) == 0)
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    v5 = *(_DWORD *)(v4 + 24);
    *(_DWORD *)(v4 + 24) = v5 + 2;
    if (*(_QWORD *)(v4 + 1944) && !*(_BYTE *)(v4 + 3405))
    {
      v7 = (int)a2;
      v8 = WebCore::Document::ensurePendingRenderTreeUpdate((WebCore::Document *)v4);
      v11[0] = v7;
      v11[1] = a3;
      LOBYTE(v12) = 0;
      v13 = 0;
      WebCore::Style::Update::addText(v8, (uint64_t)this, (uint64_t)v11);
      if (v13)
      {
        v9 = v12;
        v12 = 0;
        if (v9)
        {
          WebCore::RenderStyle::~RenderStyle(v9, a2);
          if (*(_DWORD *)v10)
          {
            *((_OWORD *)v10 + 2) = 0u;
            *((_OWORD *)v10 + 3) = 0u;
            *(_OWORD *)v10 = 0u;
            *((_OWORD *)v10 + 1) = 0u;
          }
          else
          {
            WTF::fastFree(v10, a2);
          }
        }
      }
      v5 = *(_DWORD *)(v4 + 24) - 2;
    }
    if (v5)
    {
      *(_DWORD *)(v4 + 24) = v5;
    }
    else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
  }
}

void WebCore::ContainerNode::removeBetween(WebCore::ContainerNode *this, WebCore::Node *a2, WebCore::Node *a3, WebCore::Node *a4)
{
  uint64_t v8;
  __int16 v10;
  WebCore::TreeScope *v11;
  WebCore::Node *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8 = *(_QWORD *)(*((_QWORD *)a4 + 5) + 8);
  *(_DWORD *)(v8 + 24) += 2;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v14 = *(_QWORD *)(v8 + 528);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
      {
        v16 = *(_QWORD *)(v15 + 24);
        if (v16)
        {
          v17 = *(_QWORD *)(v16 + 8);
          if (v17)
            goto LABEL_30;
        }
      }
    }
    v20 = *(_QWORD *)(v8 + 2632);
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 8);
      if (v21)
      {
        v22 = *(_QWORD *)(v21 + 528);
        if (v22)
        {
          v23 = *(_QWORD *)(v22 + 8);
          if (v23)
          {
            v24 = *(_QWORD *)(v23 + 24);
            if (v24)
            {
              v17 = *(_QWORD *)(v24 + 8);
              if (v17)
LABEL_30:
                WebCore::InspectorInstrumentation::didRemoveDOMNodeImpl(*(_QWORD *)(*(_QWORD *)(v17 + 80) + 8), a4);
            }
          }
        }
      }
    }
  }
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  ++WebCore::ScriptDisallowedScope::s_count;
  v10 = *((_WORD *)a4 + 14);
  if ((*((_QWORD *)a4 + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((v10 & 8) != 0)
    {
LABEL_22:
      WebCore::RenderTreeUpdater::tearDownRenderers(a4, 0);
      goto LABEL_7;
    }
    if ((v10 & 2) != 0)
      WebCore::RenderTreeUpdater::tearDownRenderer(a4, a2);
  }
  else if ((v10 & 8) != 0 && (*((_QWORD *)a4 + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v13 = *(_QWORD *)((*((_QWORD *)a4 + 9) & 0xFFFFFFFFFFFFLL) + 0x38);
    if (v13)
    {
      if ((*(_QWORD *)(v13 + 16) & 0x1FLL) == 0x12)
        goto LABEL_22;
    }
  }
LABEL_7:
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    if ((*((_WORD *)this + 14) & 8) != 0 && (*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
      v18 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
    else
      v18 = 0;
    v19 = *(_QWORD *)(v18 + 224);
    if (v19)
      (*(void (**)(uint64_t, WebCore::Node *))(*(_QWORD *)v19 + 96))(v19, a4);
  }
  if (a3)
  {
    *((_QWORD *)a3 + 6) = (unint64_t)a2 | ((unint64_t)*((unsigned __int16 *)a3 + 27) << 48);
    *((_QWORD *)a4 + 7) = 0;
  }
  else
  {
    *((_QWORD *)this + 11) = a2;
  }
  if (a2)
  {
    *((_QWORD *)a2 + 7) = a3;
    *((_QWORD *)a4 + 6) = (unint64_t)*((unsigned __int16 *)a4 + 27) << 48;
  }
  else
  {
    *((_QWORD *)this + 10) = a3;
  }
  *((_QWORD *)a4 + 4) = 0;
  *((_DWORD *)a4 + 6) &= ~1u;
  v11 = (WebCore::TreeScope *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 96);
  v12 = (WebCore::Node *)*((_QWORD *)a4 + 5);
  if (v12 != v11)
    WebCore::Node::moveTreeToNewScope((uint64_t)a4, v12, v11, a4);
  --WebCore::ScriptDisallowedScope::s_count;
}

uint64_t WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::contains(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;

  v2 = *a1;
  if (*a1)
  {
    v3 = *((_DWORD *)a1 + 2);
    v4 = v3 - 1;
    v5 = *((_DWORD *)a1 + 4);
    v6 = *(_DWORD *)(*(_QWORD *)a2 + 16);
    v7 = (v5 ^ (v6 >> 8)) & (v3 - 1);
    v8 = *(_QWORD *)(v2 + 8 * v7);
    if (v8)
    {
      v9 = v6 >> 8;
      v10 = -1;
      do
      {
        v11 = *(_DWORD *)(v8 + 16);
        if (++v10 > ((v7 + v3 - ((v5 ^ (v11 >> 8)) & v4)) & v4))
          break;
        if (v8 == *(_QWORD *)a2 && v11 >> 8 == v9)
          return 1;
        v7 = (v7 + 1) & v4;
        v8 = *(_QWORD *)(v2 + 8 * v7);
      }
      while (v8);
    }
  }
  return 0;
}

uint64_t WebCore::HTMLMetaElement::didFinishInsertingNode(WebCore::HTMLMetaElement *this)
{
  return WebCore::HTMLMetaElement::process((uint64_t)this, (const WTF::AtomString *)*MEMORY[0x1E0CBF2F8]);
}

uint64_t WebCore::setContentSizeCategory(WTF **this, const WTF::String *a2, const WTF::StringImpl *a3)
{
  const WTF::StringImpl *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF::StringImpl *v8;

  {
    v4 = (const WTF::StringImpl *)WebCore::contentSizeCategoryStorage(void)::contentSizeCategory;
  }
  else
  {
    v4 = 0;
    WebCore::contentSizeCategoryStorage(void)::contentSizeCategory = 0;
  }
  result = WTF::equal(*this, v4, a3);
  if ((result & 1) == 0)
  {
    {
      WebCore::contentSizeCategoryStorage(void)::contentSizeCategory = 0;
    }
    v7 = *this;
    if (*this)
      *(_DWORD *)v7 += 2;
    v8 = (WTF::StringImpl *)WebCore::contentSizeCategoryStorage(void)::contentSizeCategory;
    WebCore::contentSizeCategoryStorage(void)::contentSizeCategory = (uint64_t)v7;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    return WebCore::FontCache::invalidateAllFontCaches((WebCore *)1, v6);
  }
  return result;
}

void WebCore::StaticElementList::~StaticElementList(WebCore::StaticElementList *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v6 = (uint64_t *)*((_QWORD *)this + 3);
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
  bmalloc::api::isoDeallocate(this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v6 = (uint64_t *)*((_QWORD *)this + 3);
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WebCore::ContentSecurityPolicySourceList::parse(uint64_t this, const WTF::String *a2, double a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int16 *v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  int *v13;
  uint64_t v14;
  uint64_t *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  unsigned __int8 *j;
  unsigned int v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned __int16 *v33;
  WTF::StringImpl *v34;
  void *v35;
  char v36;
  int v37;
  WTF *v38;
  WTF *v39;
  unint64_t v40;
  unsigned __int16 *v41;
  unsigned __int16 *v42;
  _DWORD *v43;
  WTF::StringImpl *v44;
  int v45;
  unsigned int v46;
  WebCore::ContentSecurityPolicy *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  unsigned __int16 *v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  WTF::StringImpl *v63;
  unsigned __int8 *v64;
  uint64_t v65;
  int isValidSourceForExtensionMode;
  WTF::StringImpl *v67;
  int v68;
  char v69;
  char v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  char *v97;
  uint64_t v98;
  unsigned __int16 *v99;
  unsigned int v100;
  uint64_t v102;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unsigned __int8 *v107;
  char *v108;
  int v109;
  BOOL v110;
  BOOL v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  BOOL v115;
  uint64_t v117;
  int v118;
  WTF::StringImpl *v119;
  char *v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v124;
  unsigned __int16 *v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int8 *v129;
  int v130;
  char v131;
  WTF::StringImpl *v132;
  unsigned __int8 *v133;
  char v134;
  char *v135;
  int v136;
  BOOL v137;
  uint64_t v139;
  uint64_t v140;
  int v141;
  BOOL v142;
  uint64_t v144;
  unsigned __int16 *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  uint64_t v149;
  uint64_t v150;
  WTF::StringImpl *v151;
  char *v152;
  int v153;
  BOOL v154;
  uint64_t v156;
  uint64_t v157;
  int v158;
  BOOL v159;
  uint64_t v161;
  uint64_t v162;
  WTF::StringImpl *v163;
  uint64_t v164;
  uint64_t v165;
  WTF::StringImpl *v166;
  uint64_t v167;
  _DWORD *v168;
  WTF::StringImpl *v169;
  char v170;
  const WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  unsigned int v174;
  uint64_t v175;
  int v176;
  unint64_t v177;
  unsigned __int8 *v178;
  int v179;
  _QWORD *v180;
  _QWORD *v181;
  int *v182;
  uint64_t v183;
  uint64_t *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  unsigned __int8 *v188;
  int v189;
  unsigned int v190;
  unsigned __int8 *v191;
  unsigned int v192;
  unint64_t v193;
  unsigned __int8 *v194;
  uint64_t v195;
  int v196;
  char isRestrictedDirectiveForMode;
  void *v200;
  int v201;
  WTF *v202;
  WTF *v203;
  unint64_t v204;
  unsigned __int8 *v205;
  int v206;
  unsigned int v207;
  WebCore::ContentSecurityPolicy *v208;
  WTF::StringImpl *v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  WTF::StringImpl *v213;
  unsigned int v214;
  int v215;
  unsigned int v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  const WTF::StringImpl *v221;
  WTF::StringImpl *v222;
  uint64_t *v223;
  unsigned __int8 *v224;
  uint64_t v225;
  WTF::StringImpl *v226;
  int v227;
  char v228;
  char v229;
  WTF::StringImpl *v230;
  WTF::StringImpl *v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unsigned __int8 *v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  int64_t v242;
  int v243;
  char v244;
  uint64_t v245;
  WTF::StringImpl *v246;
  WTF::StringImpl *v247;
  WTF::StringImpl *v248;
  WTF::StringImpl *v249;
  WTF::StringImpl *v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  WTF::StringImpl *v253;
  int v254;
  unsigned __int8 *v255;
  unsigned __int8 *v256;
  int v257;
  int64_t v260;
  int v261;
  BOOL v262;
  int v264;
  unsigned __int8 *v265;
  unsigned __int8 *v266;
  int v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unsigned __int8 *v271;
  unint64_t v272;
  unsigned __int8 *v273;
  unsigned __int8 *v274;
  char v275;
  uint64_t v276;
  unsigned __int8 *v277;
  unsigned __int8 *v278;
  int v279;
  uint64_t v282;
  int v283;
  BOOL v284;
  WTF::StringImpl *v286;
  unint64_t v287;
  unsigned __int8 *v288;
  uint64_t v289;
  uint64_t v290;
  unsigned int v291;
  uint64_t v293;
  unsigned __int8 *v295;
  unsigned __int8 *v296;
  int v297;
  uint64_t v300;
  int v301;
  BOOL v302;
  int64_t v304;
  unsigned __int8 *v305;
  uint64_t i;
  unsigned int v307;
  uint64_t v309;
  unsigned __int8 *v311;
  unsigned int v312;
  int v313;
  unsigned __int8 *v314;
  int64_t v315;
  uint64_t v316;
  unsigned int v317;
  uint64_t v318;
  int v319;
  unsigned __int8 *v320;
  uint64_t v321;
  WTF::StringImpl *v322;
  WTF::StringImpl *v323;
  uint64_t v324;
  char v325;
  int v326;
  unsigned __int8 *v327;
  char v328;
  char v329;
  char v330;
  unsigned __int8 *v331;
  char v332;
  char v333;
  uint64_t v334;
  unsigned __int16 *v335;
  int v336;
  unsigned __int8 *v337;
  _QWORD *v338;
  _QWORD *v339;
  unsigned __int8 *v340;
  uint64_t v341;
  WTF::StringImpl *v342;
  WTF::StringImpl *v343;
  WTF::StringImpl *v344;
  WTF::StringImpl *v345;
  WTF::StringImpl *v346;
  char v347;
  unint64_t v348;
  WTF::StringImpl *v349;
  uint64_t v350;
  uint64_t *v351;
  int *v352;
  uint64_t v353;
  _QWORD *v354;
  int *v355;
  uint64_t *v356;
  _QWORD *v357;
  uint64_t v358;
  char *v359;
  WTF::StringImpl *v360;
  WTF::StringImpl *v361;
  WTF::StringImpl *v362;
  WTF::StringImpl *v363;
  WTF::StringImpl *v364;
  int v365;
  char v366;
  char v367;
  char v368;
  uint64_t v369;
  WTF *v370;
  unsigned __int8 *v371;
  uint64_t v372;
  char v373;
  _BYTE v374[7];
  int v375;
  char v376;
  WTF::StringImpl *v377;
  char v378;
  WTF::StringImpl *v379;
  unint64_t v380;
  __int16 v381;
  char v382;

  v4 = this;
  v5 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    v6 = 0;
    v7 = 0;
    goto LABEL_638;
  }
  v6 = *(unsigned __int8 **)(v5 + 8);
  v7 = *(unsigned int *)(v5 + 4);
  if ((*(_BYTE *)(v5 + 16) & 4) != 0)
  {
LABEL_638:
    if (!v7)
      return (uint64_t)WTF::Vector<WebCore::ContentSecurityPolicySource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(v4 + 8), (WTF *)*(unsigned int *)(v4 + 20));
    v177 = v7;
    v178 = v6;
    while (1)
    {
      v179 = *v178;
      if ((v179 - 9) >= 5 && v179 != 32)
        break;
      ++v178;
      if (!--v177)
        goto LABEL_645;
    }
    if (v177 >= 6)
    {
      v317 = v179 & 0xFFFFFFDF;
      if (v177 == 6)
      {
        if (v317 == 7
          && (v178[1] & 0xDF) == 0x4E
          && (v178[2] & 0xDF) == 0x4F
          && (v178[3] & 0xDF) == 0x4E
          && (v178[4] & 0xDF) == 0x45
          && (v178[5] & 0xDF) == 7)
        {
          goto LABEL_1234;
        }
      }
      else if (v317 == 7
             && (v178[1] & 0xDF) == 0x4E
             && (v178[2] & 0xDF) == 0x4F
             && (v178[3] & 0xDF) == 0x4E
             && (v178[4] & 0xDF) == 0x45
             && (v178[5] & 0xDF) == 7)
      {
        v318 = 6;
        while (1)
        {
          v319 = v178[v318];
          if ((v319 - 9) >= 5 && v319 != 32)
            break;
          if (v177 == ++v318)
            goto LABEL_1234;
        }
      }
    }
LABEL_645:
    v180 = (_QWORD *)(this + 64);
    v181 = (_QWORD *)(this + 8);
    v182 = &v365;
    v183 = this + 24;
    v184 = (uint64_t *)(this + 48);
    v185 = (char *)&v370 + 5;
    this = 0x10000000040015;
    v186 = 0x100003E00;
LABEL_646:
    v187 = 0;
    v188 = v6;
    while (1)
    {
      v189 = v6[v187];
      if ((v189 - 9) >= 5 && v189 != 32)
        break;
      if (v7 == ++v187)
        return this;
    }
    v6 += v7;
    v7 -= v187;
    v190 = v188[v187];
    v191 = &v188[v187];
    v351 = v184;
    while (v190 > 0x20 || ((1 << v190) & 0x100003E00) == 0)
    {
      if (!--v7)
        goto LABEL_657;
      v192 = *++v191;
      v190 = v192;
    }
    v6 = v191;
LABEL_657:
    v357 = v181;
    v359 = v185;
    v353 = v183;
    v355 = v182;
    v193 = v6 - v188 - v187;
    if ((v193 & 0x8000000000000000) != 0)
      goto LABEL_1247;
    v194 = &v188[v187];
    if (v193 >= 8
      && (*v194 & 0xDF) == 7
      && (v194[1] & 0xDF) == 0x4E
      && (v194[2] & 0xDF) == 0x4F
      && (v194[3] & 0xDF) == 0x4E
      && (v194[4] & 0xDF) == 0x43
      && (v194[5] & 0xDF) == 0x45
      && (v194[6] & 0xDF) == 0xD)
    {
      v195 = 0;
      while (1)
      {
        v196 = v194[v195 + 7];
        if ((v196 - 48) >= 0xA
          && (v196 | 0x20u) - 97 >= 0x1A
          && ((v196 - 43) > 0x34 || ((1 << (v196 - 43)) & 0x10000000040015) == 0))
        {
          break;
        }
        if (v193 - 7 == ++v195)
          goto LABEL_677;
      }
      if (v195 && v196 == 39)
      {
        v184 = v351;
        v185 = v359;
        if (*(_BYTE *)(v4 + 72) != 2 || (WebCore::isRestrictedDirectiveForMode((_QWORD *)(v4 + 64), 2) & 1) == 0)
        {
          if ((unint64_t)(v195 + 7) <= 6)
            goto LABEL_1247;
          WTF::String::String();
          WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add(v353, &v361, v221, (uint64_t)&v369);
          v222 = v361;
          v361 = 0;
          if (v222)
            goto LABEL_962;
        }
        goto LABEL_964;
      }
    }
LABEL_677:
    if (v189 == 39 && &v188[v187] != v6)
    {
      v379 = (WTF::StringImpl *)&v188[v187 + 1];
      v380 = ~v187 + v6 - v188;
      WebCore::parseCryptographicDigest(&v379, (uint64_t)&v369);
      if ((_BYTE)v372)
      {
        if (v380 && *(_BYTE *)v379 == 39 && HIDWORD(v371) <= 0x40)
        {
          v184 = v351;
          v185 = v359;
          if (*(_BYTE *)(v4 + 72) == 2)
          {
            isRestrictedDirectiveForMode = WebCore::isRestrictedDirectiveForMode((_QWORD *)(v4 + 64), 2);
            v201 = v372;
            if ((isRestrictedDirectiveForMode & 1) != 0)
            {
LABEL_687:
              if (v201)
              {
                v202 = v370;
                if (v370)
                {
                  v370 = 0;
                  LODWORD(v371) = 0;
                  WTF::fastFree(v202, v200);
                }
              }
              goto LABEL_964;
            }
            if (!(_BYTE)v372)
              goto LABEL_1247;
          }
          *(_BYTE *)(v4 + 56) |= v369;
          WTF::HashTable<WebCore::ResourceCryptographicDigest,WebCore::ResourceCryptographicDigest,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>>::add((uint64_t)&v361, v351, (unsigned __int8 *)&v369);
          v201 = v372;
          goto LABEL_687;
        }
        v203 = v370;
        if (v370)
        {
          v370 = 0;
          LODWORD(v371) = 0;
          WTF::fastFree(v203, (void *)v186);
        }
      }
    }
    if (!v193)
      goto LABEL_719;
    if (v193 < 6)
    {
      v204 = v193;
      v205 = v194;
      if (v193 == 1)
      {
        if (*v194 == 42)
        {
          if ((WebCore::isRestrictedDirectiveForMode((_QWORD *)(v4 + 64), *(unsigned __int8 *)(v4 + 72)) & 1) != 0)
          {
            v204 = 1;
            v205 = v194;
            goto LABEL_911;
          }
          v210 = 0;
          v211 = 0;
          v212 = 0;
          v213 = 0;
          *(_BYTE *)(v4 + 74) = 1;
          goto LABEL_729;
        }
        v204 = 1;
        v205 = v194;
        goto LABEL_911;
      }
LABEL_759:
      if (v204 >= 0x12)
      {
        v215 = *v205;
        v216 = v215 & 0xFFFFFFDF;
        if (v204 == 18)
        {
          if (v216 != 7
            || (v205[1] & 0xDF) != 0x57
            || (v205[2] & 0xDF) != 0x41
            || (v205[3] & 0xDF) != 0x53
            || (v205[4] & 0xDF) != 0x4D
            || (v205[5] & 0xDF) != 0xD
            || (v205[6] & 0xDF) != 0x55
            || (v205[7] & 0xDF) != 0x4E
            || (v205[8] & 0xDF) != 0x53
            || (v205[9] & 0xDF) != 0x41
            || (v205[10] & 0xDF) != 0x46
            || (v205[11] & 0xDF) != 0x45
            || (v205[12] & 0xDF) != 0xD
            || (v205[13] & 0xDF) != 0x45
            || (v205[14] & 0xDF) != 0x56
            || (v205[15] & 0xDF) != 0x41
            || (v205[16] & 0xDF) != 0x4C
            || (v205[17] & 0xDF) != 7)
          {
            v204 = 18;
            goto LABEL_798;
          }
        }
        else if (v216 != 7
               || (v205[1] & 0xDF) != 0x57
               || (v205[2] & 0xDF) != 0x41
               || (v205[3] & 0xDF) != 0x53
               || (v205[4] & 0xDF) != 0x4D
               || (v205[5] & 0xDF) != 0xD
               || (v205[6] & 0xDF) != 0x55
               || (v205[7] & 0xDF) != 0x4E
               || (v205[8] & 0xDF) != 0x53
               || (v205[9] & 0xDF) != 0x41
               || (v205[10] & 0xDF) != 0x46
               || (v205[11] & 0xDF) != 0x45
               || (v205[12] & 0xDF) != 0xD
               || (v205[13] & 0xDF) != 0x45
               || (v205[14] & 0xDF) != 0x56
               || (v205[15] & 0xDF) != 0x41
               || (v205[16] & 0xDF) != 0x4C
               || (v205[17] & 0xDF) != 7)
        {
          goto LABEL_798;
        }
        if (*(_BYTE *)(v4 + 72) != 2
          || (v204 -= 18, (WebCore::isRestrictedDirectiveForMode((_QWORD *)(v4 + 64), 2) & 1) == 0))
        {
          v210 = 0;
          v211 = 0;
          v212 = 0;
          v213 = 0;
          v185 = v359;
          *(_WORD *)v359 = (_WORD)v360;
          v359[2] = BYTE2(v360);
          *(_WORD *)((char *)&v372 + 5) = v381;
          HIBYTE(v372) = v382;
          *(_DWORD *)v374 = (_DWORD)v379;
          *(_DWORD *)&v374[3] = *(_DWORD *)((char *)&v379 + 3);
          *(_BYTE *)(v4 + 77) = 1;
          goto LABEL_914;
        }
        v205 += 18;
      }
      if (v204 < 0xF)
        goto LABEL_911;
      v215 = *v205;
      if (v204 == 15)
      {
        if ((v215 & 0xFFFFFFDF) != 7
          || (v205[1] & 0xDF) != 0x55
          || (v205[2] & 0xDF) != 0x4E
          || (v205[3] & 0xDF) != 0x53
          || (v205[4] & 0xDF) != 0x41
          || (v205[5] & 0xDF) != 0x46
          || (v205[6] & 0xDF) != 0x45
          || (v205[7] & 0xDF) != 0xD
          || (v205[8] & 0xDF) != 0x48
          || (v205[9] & 0xDF) != 0x41
          || (v205[10] & 0xDF) != 0x53
          || (v205[11] & 0xDF) != 0x48
          || (v205[12] & 0xDF) != 0x45
          || (v205[13] & 0xDF) != 0x53
          || (v205[14] & 0xDF) != 7)
        {
LABEL_817:
          if ((v215 & 0xFFFFFFDF) != 7
            || (v205[1] & 0xDF) != 0x52
            || (v205[2] & 0xDF) != 0x45
            || (v205[3] & 0xDF) != 0x50
            || (v205[4] & 0xDF) != 0x4F
            || (v205[5] & 0xDF) != 0x52
            || (v205[6] & 0xDF) != 0x54
            || (v205[7] & 0xDF) != 0xD
            || (v205[8] & 0xDF) != 0x53
            || (v205[9] & 0xDF) != 0x41
            || (v205[10] & 0xDF) != 0x4D
            || (v205[11] & 0xDF) != 0x50
            || (v205[12] & 0xDF) != 0x4C
            || (v205[13] & 0xDF) != 0x45)
          {
            v204 = 15;
            goto LABEL_911;
          }
          v217 = v205[14] & 0xDF;
          v204 = 15;
LABEL_847:
          if (v217 != 7)
            goto LABEL_911;
          if (*(_BYTE *)(v4 + 72) == 2 && (WebCore::isRestrictedDirectiveForMode((_QWORD *)(v4 + 64), 2) & 1) != 0)
          {
            v205 += 15;
            v204 -= 15;
            goto LABEL_911;
          }
          v210 = 0;
          v211 = 0;
          v212 = 0;
          v213 = 0;
          v185 = v359;
          *(_WORD *)v359 = (_WORD)v360;
          v359[2] = BYTE2(v360);
          *(_WORD *)((char *)&v372 + 5) = v381;
          HIBYTE(v372) = v382;
          *(_DWORD *)v374 = (_DWORD)v379;
          *(_DWORD *)&v374[3] = *(_DWORD *)((char *)&v379 + 3);
          *(_BYTE *)(v4 + 81) = 1;
LABEL_914:
          v369 = 0;
          LODWORD(v370) = 0;
          BYTE4(v370) = 1;
          v371 = 0;
          LODWORD(v372) = 0;
          BYTE4(v372) = 1;
          v373 = 0;
          goto LABEL_915;
        }
        v204 = 15;
LABEL_813:
        if (*(_BYTE *)(v4 + 72) != 2 || (WebCore::isRestrictedDirectiveForMode((_QWORD *)(v4 + 64), 2) & 1) == 0)
        {
          v210 = 0;
          v211 = 0;
          v212 = 0;
          v213 = 0;
          v185 = v359;
          *(_WORD *)v359 = (_WORD)v360;
          v359[2] = BYTE2(v360);
          *(_WORD *)((char *)&v372 + 5) = v381;
          HIBYTE(v372) = v382;
          *(_DWORD *)v374 = (_DWORD)v379;
          *(_DWORD *)&v374[3] = *(_DWORD *)((char *)&v379 + 3);
          *(_BYTE *)(v4 + 80) = 1;
          goto LABEL_914;
        }
        v205 += 15;
        v204 -= 15;
        if (v204 < 0xF)
          goto LABEL_911;
        v215 = *v205;
        if (v204 == 15)
          goto LABEL_817;
LABEL_832:
        if ((v215 & 0xFFFFFFDF) != 7
          || (v205[1] & 0xDF) != 0x52
          || (v205[2] & 0xDF) != 0x45
          || (v205[3] & 0xDF) != 0x50
          || (v205[4] & 0xDF) != 0x4F
          || (v205[5] & 0xDF) != 0x52
          || (v205[6] & 0xDF) != 0x54
          || (v205[7] & 0xDF) != 0xD
          || (v205[8] & 0xDF) != 0x53
          || (v205[9] & 0xDF) != 0x41
          || (v205[10] & 0xDF) != 0x4D
          || (v205[11] & 0xDF) != 0x50
          || (v205[12] & 0xDF) != 0x4C
          || (v205[13] & 0xDF) != 0x45)
        {
          goto LABEL_911;
        }
        v217 = v205[14] & 0xDF;
        goto LABEL_847;
      }
LABEL_798:
      if ((v215 & 0xFFFFFFDF) != 7
        || (v205[1] & 0xDF) != 0x55
        || (v205[2] & 0xDF) != 0x4E
        || (v205[3] & 0xDF) != 0x53
        || (v205[4] & 0xDF) != 0x41
        || (v205[5] & 0xDF) != 0x46
        || (v205[6] & 0xDF) != 0x45
        || (v205[7] & 0xDF) != 0xD
        || (v205[8] & 0xDF) != 0x48
        || (v205[9] & 0xDF) != 0x41
        || (v205[10] & 0xDF) != 0x53
        || (v205[11] & 0xDF) != 0x48
        || (v205[12] & 0xDF) != 0x45
        || (v205[13] & 0xDF) != 0x53
        || (v205[14] & 0xDF) != 7)
      {
        goto LABEL_832;
      }
      goto LABEL_813;
    }
    v206 = *v194;
    v207 = v206 & 0xFFFFFFDF;
    if (v193 == 6)
    {
      if (v207 == 7
        && (v194[1] & 0xDF) == 0x4E
        && (v194[2] & 0xDF) == 0x4F
        && (v194[3] & 0xDF) == 0x4E
        && (v194[4] & 0xDF) == 0x45
        && (v194[5] & 0xDF) == 7)
      {
        goto LABEL_719;
      }
      v205 = v194;
LABEL_706:
      if ((v206 & 0xFFFFFFDF) != 7
        || (v205[1] & 0xDF) != 0x53
        || (v205[2] & 0xDF) != 0x45
        || (v205[3] & 0xDF) != 0x4C
        || (v205[4] & 0xDF) != 0x46
        || (v205[5] & 0xDF) != 7)
      {
        v204 = 6;
        goto LABEL_911;
      }
LABEL_756:
      v210 = 0;
      v211 = 0;
      v212 = 0;
      v213 = 0;
      *(_BYTE *)(v4 + 73) = *(_BYTE *)(v4 + 79) ^ 1;
LABEL_913:
      v185 = v359;
      *(_WORD *)v359 = (_WORD)v360;
      v359[2] = BYTE2(v360);
      *(_WORD *)((char *)&v372 + 5) = v381;
      HIBYTE(v372) = v382;
      *(_DWORD *)&v374[3] = *(_DWORD *)((char *)&v379 + 3);
      *(_DWORD *)v374 = (_DWORD)v379;
      goto LABEL_914;
    }
    if (v207 == 7
      && (v194[1] & 0xDF) == 0x4E
      && (v194[2] & 0xDF) == 0x4F
      && (v194[3] & 0xDF) == 0x4E
      && (v194[4] & 0xDF) == 0x45
      && (v194[5] & 0xDF) == 7)
    {
      goto LABEL_719;
    }
    v204 = v193 - 16;
    if (v193 < 0x10)
      goto LABEL_726;
    if (v193 == 16)
    {
      if (v207 != 7
        || (v194[1] & 0xDF) != 0x53
        || (v194[2] & 0xDF) != 0x54
        || (v194[3] & 0xDF) != 0x52
        || (v194[4] & 0xDF) != 0x49
        || (v194[5] & 0xDF) != 0x43
        || (v194[6] & 0xDF) != 0x54
        || (v194[7] & 0xDF) != 0xD
        || (v194[8] & 0xDF) != 0x44
        || (v194[9] & 0xDF) != 0x59
        || (v194[10] & 0xDF) != 0x4E
        || (v194[11] & 0xDF) != 0x41
        || (v194[12] & 0xDF) != 0x4D
        || (v194[13] & 0xDF) != 0x49
        || (v194[14] & 0xDF) != 0x43
        || (v194[15] & 0xDF) != 7)
      {
        v204 = 16;
        goto LABEL_749;
      }
    }
    else if (v207 != 7
           || (v194[1] & 0xDF) != 0x53
           || (v194[2] & 0xDF) != 0x54
           || (v194[3] & 0xDF) != 0x52
           || (v194[4] & 0xDF) != 0x49
           || (v194[5] & 0xDF) != 0x43
           || (v194[6] & 0xDF) != 0x54
           || (v194[7] & 0xDF) != 0xD
           || (v194[8] & 0xDF) != 0x44
           || (v194[9] & 0xDF) != 0x59
           || (v194[10] & 0xDF) != 0x4E
           || (v194[11] & 0xDF) != 0x41
           || (v194[12] & 0xDF) != 0x4D
           || (v194[13] & 0xDF) != 0x49
           || (v194[14] & 0xDF) != 0x43
           || (v194[15] & 0xDF) != 7)
    {
LABEL_726:
      v204 = v193;
LABEL_749:
      v205 = v194;
      goto LABEL_750;
    }
    if (*(_BYTE *)(v4 + 72) != 2 || (WebCore::isRestrictedDirectiveForMode((_QWORD *)(v4 + 64), 2) & 1) == 0)
    {
      v218 = qword_1EE2E40F8 ? qword_1EE2E40F8 - 1 : 0;
      if ((MEMORY[0x19AEA53F4](*v180, WebCore::ContentSecurityPolicyDirectiveNames::scriptSrc, v218) & 1) != 0
        || (qword_1EE2E4108 ? (v219 = qword_1EE2E4108 - 1) : (v219 = 0),
            (MEMORY[0x19AEA53F4](*v180, WebCore::ContentSecurityPolicyDirectiveNames::scriptSrcElem, v219) & 1) != 0
         || (qword_1EE2E4118 ? (v220 = qword_1EE2E4118 - 1) : (v220 = 0),
             MEMORY[0x19AEA53F4](*v180, WebCore::ContentSecurityPolicyDirectiveNames::defaultSrc, v220))))
      {
        v210 = 0;
        v211 = 0;
        v212 = 0;
        v213 = 0;
        *(_BYTE *)(v4 + 79) = 1;
        *(_BYTE *)(v4 + 73) = 0;
        *(_BYTE *)(v4 + 75) = 0;
        goto LABEL_729;
      }
    }
    v205 = v194 + 16;
    if (v204 < 6)
      goto LABEL_759;
    v206 = *v205;
    if (v193 == 22)
      goto LABEL_706;
LABEL_750:
    v214 = v206 & 0xFFFFFFDF;
    if ((v206 & 0xFFFFFFDF) == 7
      && (v205[1] & 0xDF) == 0x53
      && (v205[2] & 0xDF) == 0x45
      && (v205[3] & 0xDF) == 0x4C
      && (v205[4] & 0xDF) == 0x46
      && (v205[5] & 0xDF) == 7)
    {
      goto LABEL_756;
    }
    if (v204 >= 0xF)
    {
      if (v204 == 15)
      {
        if (v214 != 7
          || (v205[1] & 0xDF) != 0x55
          || (v205[2] & 0xDF) != 0x4E
          || (v205[3] & 0xDF) != 0x53
          || (v205[4] & 0xDF) != 0x41
          || (v205[5] & 0xDF) != 0x46
          || (v205[6] & 0xDF) != 0x45
          || (v205[7] & 0xDF) != 0xD
          || (v205[8] & 0xDF) != 0x49
          || (v348 = 0, (v205[9] & 0xDF) != 0x4E))
        {
          v204 = 15;
          goto LABEL_1105;
        }
        if ((v205[10] & 0xDF) != 0x4C
          || (v205[11] & 0xDF) != 0x49
          || (v205[12] & 0xDF) != 0x4E
          || (v205[13] & 0xDF) != 0x45
          || (v205[14] & 0xDF) != 7)
        {
          v204 = 15;
          goto LABEL_1105;
        }
      }
      else
      {
        if (v214 != 7)
          goto LABEL_1105;
        if ((v205[1] & 0xDF) != 0x55)
          goto LABEL_1105;
        if ((v205[2] & 0xDF) != 0x4E)
          goto LABEL_1105;
        if ((v205[3] & 0xDF) != 0x53)
          goto LABEL_1105;
        if ((v205[4] & 0xDF) != 0x41)
          goto LABEL_1105;
        if ((v205[5] & 0xDF) != 0x46)
          goto LABEL_1105;
        if ((v205[6] & 0xDF) != 0x45)
          goto LABEL_1105;
        if ((v205[7] & 0xDF) != 0xD)
          goto LABEL_1105;
        if ((v205[8] & 0xDF) != 0x49)
          goto LABEL_1105;
        v348 = v204 - 15;
        if ((v205[9] & 0xDF) != 0x4E
          || (v205[10] & 0xDF) != 0x4C
          || (v205[11] & 0xDF) != 0x49
          || (v205[12] & 0xDF) != 0x4E
          || (v205[13] & 0xDF) != 0x45
          || (v205[14] & 0xDF) != 7)
        {
          goto LABEL_1105;
        }
      }
      if ((WebCore::isRestrictedDirectiveForMode((_QWORD *)(v4 + 64), *(unsigned __int8 *)(v4 + 72)) & 1) == 0)
      {
        v210 = 0;
        v211 = 0;
        v212 = 0;
        v213 = 0;
        *(_BYTE *)(v4 + 75) = *(_BYTE *)(v4 + 79) ^ 1;
        v369 = 0;
        LODWORD(v370) = 0;
        goto LABEL_730;
      }
      v205 += 15;
      v204 = v348;
    }
    if (v204 < 0xD)
      goto LABEL_759;
    v206 = *v205;
    if (v204 == 13)
    {
      if ((v206 & 0xFFFFFFDF) != 7 || (v205[1] & 0xDF) != 0x55 || (v205[2] & 0xDF) != 0x4E || (v205[3] & 0xDF) != 0x53)
      {
        v204 = 13;
        goto LABEL_911;
      }
      if ((v205[4] & 0xDF) != 0x41
        || (v205[5] & 0xDF) != 0x46
        || (v205[6] & 0xDF) != 0x45
        || (v205[7] & 0xDF) != 0xD
        || (v205[8] & 0xDF) != 0x45
        || (v205[9] & 0xDF) != 0x56
        || (v205[10] & 0xDF) != 0x41
        || (v205[11] & 0xDF) != 0x4C)
      {
        v204 = 13;
        goto LABEL_911;
      }
      v204 = 13;
      if ((v205[12] & 0xDF) != 7)
      {
LABEL_911:
        if (*(_BYTE *)(v4 + 79))
        {
          v210 = 0;
          v211 = 0;
          v212 = 0;
          v213 = 0;
          goto LABEL_913;
        }
        v238 = v205;
        if (v204)
        {
          v239 = 0;
          v238 = &v205[v204];
          v240 = 3;
          while (1)
          {
            v241 = v205[v239];
            if (v241 == 47)
              break;
            if (v241 == 58)
            {
              if (v204 - 1 == v239)
              {
                if (v239 < 0)
                  goto LABEL_1247;
                if (!v239 || (*v205 | 0x20u) - 97 > 0x19)
                  goto LABEL_719;
                if (v239 != 1)
                {
                  v254 = (_DWORD)v205 + v239;
                  v290 = 1;
                  while (1)
                  {
                    v291 = v205[v290];
                    if (v291 - 48 >= 0xA && (v291 | 0x20) - 97 >= 0x1A)
                    {
                      v111 = v291 > 0x2E;
                      v293 = (1 << v291) & 0x680000000000;
                      if (v111 || v293 == 0)
                        goto LABEL_719;
                    }
                    if (v239 == ++v290)
                      goto LABEL_1145;
                  }
                }
                v254 = (_DWORD)v205 + 1;
LABEL_1145:
                v184 = v351;
                v185 = v359;
                v210 = 0;
                v212 = 0;
                v213 = 0;
                v369 = (uint64_t)v205;
                v211 = (v254 - (_DWORD)v205);
                *(_WORD *)v359 = (_WORD)v360;
                v359[2] = BYTE2(v360);
                *(_WORD *)((char *)&v372 + 5) = v381;
                HIBYTE(v372) = v382;
                *(_DWORD *)&v374[3] = *(_DWORD *)((char *)&v379 + 3);
                *(_DWORD *)v374 = (_DWORD)v379;
                BYTE4(v370) = 1;
                LODWORD(v370) = v254 - (_DWORD)v205;
                v371 = 0;
                LODWORD(v372) = 0;
                BYTE4(v372) = 1;
                v373 = 0;
LABEL_916:
                v375 = v212;
                v376 = BYTE4(v212);
                v377 = v213;
                v378 = 1;
                if (!v211)
                {
LABEL_917:
                  if (!v210)
                    goto LABEL_960;
                }
LABEL_918:
                v223 = v184;
                v224 = v371;
                v225 = v372;
                if (WebCore::isCSPDirectiveName(v371, v372))
                {
                  WebCore::ContentSecurityPolicy::reportDirectiveAsSourceExpression(*(_QWORD *)v4, (uint64_t *)(v4 + 64), v224, v225);
                  if (!v378)
                    goto LABEL_1248;
                }
                v184 = v223;
                v185 = v359;
                if (WebCore::ContentSecurityPolicySourceList::isValidSourceForExtensionMode(v4, &v369))
                {
                  if (!v378)
                    goto LABEL_1247;
                  v226 = *(WTF::StringImpl **)v4;
                  WTF::StringView::convertToASCIILowercase((WTF::StringView *)&v369);
                  if (!v378)
                    goto LABEL_1247;
                  if (BYTE4(v372))
                    WTF::String::String();
                  else
                    WTF::String::String();
                  if (!v378)
                    goto LABEL_1247;
                  v227 = v375;
                  v228 = v373;
                  v229 = v376;
                  v361 = v226;
                  v230 = v379;
                  if (v379)
                    *(_DWORD *)v379 += 2;
                  v362 = v230;
                  if (v360)
                    *(_DWORD *)v360 += 2;
                  v363 = v360;
                  v231 = v377;
                  if (v377)
                    *(_DWORD *)v377 += 2;
                  v364 = v231;
                  v365 = v227;
                  v366 = v228;
                  v367 = v229;
                  v368 = 0;
                  v232 = *(unsigned int *)(v4 + 20);
                  if ((_DWORD)v232 == *(_DWORD *)(v4 + 16))
                  {
                    v233 = WTF::Vector<WebCore::ContentSecurityPolicySource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v357, v232 + 1, (unint64_t)&v361);
                    v234 = *(_QWORD *)(v4 + 8) + 40 * *(unsigned int *)(v4 + 20);
                    *(_QWORD *)v234 = *(_QWORD *)v233;
                    v235 = *((_QWORD *)v233 + 1);
                    *((_QWORD *)v233 + 1) = 0;
                    *(_QWORD *)(v234 + 8) = v235;
                    v236 = *((_QWORD *)v233 + 2);
                    *((_QWORD *)v233 + 2) = 0;
                    *(_QWORD *)(v234 + 16) = v236;
                    v237 = *((_QWORD *)v233 + 3);
                    *((_QWORD *)v233 + 3) = 0;
                    *(_QWORD *)(v234 + 24) = v237;
                    LODWORD(v237) = *(_DWORD *)(v233 + 35);
                    *(_DWORD *)(v234 + 32) = *((_DWORD *)v233 + 8);
                    *(_DWORD *)(v234 + 35) = v237;
                  }
                  else
                  {
                    v245 = *v357 + 40 * v232;
                    *(_QWORD *)v245 = v226;
                    v246 = v362;
                    v362 = 0;
                    *(_QWORD *)(v245 + 8) = v246;
                    v247 = v363;
                    v363 = 0;
                    *(_QWORD *)(v245 + 16) = v247;
                    v248 = v364;
                    v364 = 0;
                    *(_QWORD *)(v245 + 24) = v248;
                    LODWORD(v248) = *v355;
                    *(_DWORD *)(v245 + 35) = *(int *)((char *)v355 + 3);
                    *(_DWORD *)(v245 + 32) = (_DWORD)v248;
                  }
                  v184 = v223;
                  ++*(_DWORD *)(v4 + 20);
                  v249 = v364;
                  v364 = 0;
                  v185 = v359;
                  if (v249)
                  {
                    if (*(_DWORD *)v249 == 2)
                      WTF::StringImpl::destroy(v249, (WTF::StringImpl *)v186);
                    else
                      *(_DWORD *)v249 -= 2;
                  }
                  v250 = v363;
                  v363 = 0;
                  if (v250)
                  {
                    if (*(_DWORD *)v250 == 2)
                      WTF::StringImpl::destroy(v250, (WTF::StringImpl *)v186);
                    else
                      *(_DWORD *)v250 -= 2;
                  }
                  v251 = v362;
                  v362 = 0;
                  if (v251)
                  {
                    if (*(_DWORD *)v251 == 2)
                      WTF::StringImpl::destroy(v251, (WTF::StringImpl *)v186);
                    else
                      *(_DWORD *)v251 -= 2;
                  }
                  v252 = v360;
                  v360 = 0;
                  if (v252)
                  {
                    if (*(_DWORD *)v252 == 2)
                      WTF::StringImpl::destroy(v252, (WTF::StringImpl *)v186);
                    else
                      *(_DWORD *)v252 -= 2;
                  }
                  v253 = v379;
                  v379 = 0;
                  if (v253)
                  {
                    if (*(_DWORD *)v253 == 2)
                      WTF::StringImpl::destroy(v253, (WTF::StringImpl *)v186);
                    else
                      *(_DWORD *)v253 -= 2;
                  }
                }
                goto LABEL_960;
              }
              v265 = &v205[v239];
              if (v205[v239 + 1] == 47)
              {
                if (v239 < 0)
                  goto LABEL_1247;
                if (!v239 || (*v205 | 0x20u) - 97 > 0x19)
                  goto LABEL_719;
                v266 = &v205[v204];
                if (v239 == 1)
                {
                  v267 = (_DWORD)v205 + 1;
                }
                else
                {
                  v267 = (_DWORD)v205 + v239;
                  for (i = 1; i != v239; ++i)
                  {
                    v307 = v205[i];
                    if (v307 - 48 >= 0xA && (v307 | 0x20) - 97 >= 0x1A)
                    {
                      v111 = v307 > 0x2E;
                      v309 = (1 << v307) & 0x680000000000;
                      if (v111 || v309 == 0)
                        goto LABEL_719;
                    }
                  }
                }
                if (v204 - 2 == v239)
                  goto LABEL_719;
                v311 = &v205[v239];
                if (v205[v239 + 2] != 47 || v204 - 3 == v239)
                  goto LABEL_719;
                v312 = v267 - (_DWORD)v205;
                v273 = v311 + 3;
                v268 = v312;
                while (2)
                {
                  v313 = v205[v240];
                  if (v313 == 47)
                  {
                    v265 = 0;
                    v271 = &v205[v240];
                    v272 = v204 - v240;
                    v341 = (uint64_t)v205;
                  }
                  else
                  {
                    if (v313 != 58)
                    {
                      if (v204 != ++v240)
                        continue;
                      v265 = 0;
                      v272 = 0;
                      v238 = &v205[v204];
                      v271 = &v205[v204];
                      v341 = (uint64_t)v205;
LABEL_1126:
                      v334 = v268;
                      v287 = v272;
                      if (v265)
                        v288 = v265;
                      else
                        v288 = v238;
                      v289 = v288 - v273;
                      if (v289 < 0)
                        goto LABEL_1247;
                      if (!v289)
                        goto LABEL_719;
                      v349 = (WTF::StringImpl *)v238;
                      v331 = v271;
                      if (*v273 != 42)
                      {
                        v337 = v273;
                        v328 = 0;
                        goto LABEL_1155;
                      }
                      if (v289 == 1)
                      {
                        v337 = 0;
                        v326 = 0;
                        v328 = 1;
                        goto LABEL_1177;
                      }
                      if (v273[1] != 46)
                        goto LABEL_719;
                      v337 = v273 + 2;
                      v328 = 1;
                      v289 -= 2;
                      if (!v289)
                      {
                        LODWORD(v295) = (_DWORD)v273 + 2;
                        goto LABEL_1176;
                      }
LABEL_1155:
                      v296 = v337;
                      while (1)
                      {
                        v297 = *v296;
                        if (v297 != 45 && (v297 - 48) >= 0xA && (v297 | 0x20u) - 97 > 0x19)
                          goto LABEL_719;
                        if (v289 == 1)
                          break;
                        v295 = v296 + 2;
                        v300 = 2 - v289;
                        while (1)
                        {
                          v301 = *(v295 - 1);
                          v302 = v301 != 45 && (v301 - 48) >= 0xA;
                          if (v302 && (v301 | 0x20u) - 97 > 0x19)
                            break;
                          ++v295;
                          if (++v300 == 1)
                          {
                            LODWORD(v295) = (_DWORD)v296 + v289;
                            goto LABEL_1176;
                          }
                        }
                        if (v301 != 46)
                          goto LABEL_719;
                        v289 = -v300;
                        v296 = v295;
                        if (!v300)
                          goto LABEL_1176;
                      }
                      LODWORD(v295) = (_DWORD)v296 + 1;
LABEL_1176:
                      v326 = (_DWORD)v295 - (_DWORD)v337;
LABEL_1177:
                      if (v265)
                      {
                        v304 = v349 - (WTF::StringImpl *)v265;
                        if (v349 - (WTF::StringImpl *)v265 < 0)
                          goto LABEL_1247;
                        if (!v304)
                          goto LABEL_719;
                        if (*v265 == 58)
                        {
                          if (--v304)
                          {
                            ++v265;
                            goto LABEL_1183;
                          }
LABEL_719:
                          LOBYTE(v369) = 0;
                          v378 = 0;
LABEL_720:
                          v208 = *(WebCore::ContentSecurityPolicy **)v4;
                          WTF::String::String();
                          WebCore::ContentSecurityPolicy::reportInvalidSourceExpression(v208, (WTF::StringImpl **)(v4 + 64), (const WTF::String *)&v361);
                          v209 = v361;
                          v361 = 0;
                          v184 = v351;
                          if (v209)
                          {
                            if (*(_DWORD *)v209 == 2)
                              WTF::StringImpl::destroy(v209, (WTF::StringImpl *)v186);
                            else
                              *(_DWORD *)v209 -= 2;
                          }
                          v185 = v359;
LABEL_960:
                          if (v378)
                          {
                            v222 = v377;
                            v377 = 0;
                            if (v222)
                            {
LABEL_962:
                              if (*(_DWORD *)v222 == 2)
                                WTF::StringImpl::destroy(v222, (WTF::StringImpl *)v186);
                              else
                                *(_DWORD *)v222 -= 2;
                            }
                          }
LABEL_964:
                          v182 = v355;
                          v181 = v357;
                          v183 = v353;
                          this = 0x10000000040015;
                          v186 = 0x100003E00;
                          if (!v7)
                            return (uint64_t)WTF::Vector<WebCore::ContentSecurityPolicySource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(v4 + 8), (WTF *)*(unsigned int *)(v4 + 20));
                          goto LABEL_646;
                        }
LABEL_1183:
                        if (v304 == 1 && *v265 == 42)
                        {
                          v212 = 0x100000000;
                        }
                        else
                        {
                          v314 = v265;
                          v315 = v304;
                          do
                          {
                            if (*v314 - 48 > 9)
                              goto LABEL_719;
                            ++v314;
                            --v315;
                          }
                          while (v315);
                          v316 = WTF::parseInteger<unsigned short,unsigned char>((uint64_t)v265, v304, 10, 0);
                          if ((v316 & 0xFF0000) == 0 || !(_WORD)v316)
                            goto LABEL_719;
                          v212 = (unsigned __int16)v316 | 0x10000u;
                        }
                      }
                      else
                      {
                        v212 = 0;
                      }
                      v305 = &v331[v287];
                      if (v349 == (WTF::StringImpl *)&v331[v287])
                      {
                        v213 = 0;
                      }
                      else
                      {
                        if (v305 - (unsigned __int8 *)v349 < 0)
                          goto LABEL_1247;
                        WebCore::ContentSecurityPolicySourceList::parsePath<unsigned char>(&v361, (WTF::StringImpl *)v4, v349, v305 - (unsigned __int8 *)v349, a3, a4);
                        v213 = v361;
                        if (!v361)
                          goto LABEL_719;
                      }
                      v369 = v341;
                      v211 = v334;
                      LODWORD(v370) = v334;
                      BYTE4(v370) = 1;
                      v185 = v359;
                      *(_WORD *)v359 = (_WORD)v360;
                      v359[2] = BYTE2(v360);
                      v371 = v337;
                      v210 = v326;
                      LODWORD(v372) = v326;
                      BYTE4(v372) = 1;
                      *(_WORD *)((char *)&v372 + 5) = v381;
                      HIBYTE(v372) = v382;
                      v373 = v328;
                      *(_DWORD *)&v374[3] = *(_DWORD *)((char *)&v379 + 3);
                      *(_DWORD *)v374 = (_DWORD)v379;
LABEL_915:
                      v184 = v351;
                      goto LABEL_916;
                    }
                    v265 = &v205[v240];
                    v269 = v204 - v240;
                    v341 = (uint64_t)v205;
                    v205 = v273;
                    v238 = v266;
LABEL_1068:
                    v270 = 0;
                    v271 = &v265[v269];
                    while (v265[v270] != 47)
                    {
                      if (v269 == ++v270)
                      {
                        v272 = 0;
                        v273 = v205;
                        goto LABEL_1126;
                      }
                    }
                    v271 = &v265[v270];
                    v272 = v269 - v270;
                    v273 = v205;
                  }
                  break;
                }
                v238 = v271;
                if (v271 != v273)
                  goto LABEL_1126;
                goto LABEL_719;
              }
              v341 = 0;
              v268 = 0;
              v269 = v204 - v239;
              goto LABEL_1068;
            }
            ++v239;
            ++v240;
            if (v204 == v239)
              goto LABEL_939;
          }
          if (v239 < 0)
            goto LABEL_1247;
          if (!v239)
            goto LABEL_719;
          if (*v205 == 42)
          {
            if (v239 == 1)
            {
              v336 = 0;
              v340 = 0;
              v347 = 1;
              goto LABEL_1098;
            }
            if (v205[1] != 46)
              goto LABEL_719;
            v274 = v205 + 2;
            v275 = 1;
            v276 = v239 - 2;
            if (v239 == 2)
            {
              LODWORD(v277) = (_DWORD)v205 + 2;
              goto LABEL_1097;
            }
          }
          else
          {
            v275 = 0;
            v276 = v239;
            v274 = v205;
          }
          v278 = v274;
          while (1)
          {
            v279 = *v278;
            if (v279 != 45 && (v279 - 48) >= 0xA && (v279 | 0x20u) - 97 > 0x19)
              goto LABEL_719;
            if (v276 == 1)
              break;
            v277 = v278 + 2;
            v282 = 2 - v276;
            while (1)
            {
              v283 = *(v277 - 1);
              v284 = v283 != 45 && (v283 - 48) >= 0xA;
              if (v284 && (v283 | 0x20u) - 97 > 0x19)
                break;
              ++v277;
              if (++v282 == 1)
              {
                LODWORD(v277) = (_DWORD)v278 + v276;
                goto LABEL_1097;
              }
            }
            if (v283 != 46)
              goto LABEL_719;
            v276 = -v282;
            v278 = v277;
            if (!v282)
              goto LABEL_1097;
          }
          LODWORD(v277) = (_DWORD)v278 + 1;
LABEL_1097:
          v347 = v275;
          v340 = v274;
          v336 = (_DWORD)v277 - (_DWORD)v274;
LABEL_1098:
          WebCore::ContentSecurityPolicySourceList::parsePath<unsigned char>(&v361, (WTF::StringImpl *)v4, (WTF::StringImpl *)&v205[v239], v204 - v239, a3, a4);
          v286 = v361;
          if (v361)
          {
            v369 = 0;
            LODWORD(v370) = 0;
            v264 = 1;
            BYTE4(v370) = 1;
            *(_WORD *)v359 = (_WORD)v360;
            v359[2] = BYTE2(v360);
            v371 = v340;
            LODWORD(v372) = v336;
            BYTE4(v372) = 1;
            *(_WORD *)((char *)&v372 + 5) = v381;
            HIBYTE(v372) = v382;
            v373 = v347;
            *(_DWORD *)&v374[3] = *(_DWORD *)((char *)&v379 + 3);
            *(_DWORD *)v374 = (_DWORD)v379;
            v376 = 0;
            v375 = 0;
            v377 = v286;
            goto LABEL_1101;
          }
LABEL_1100:
          v264 = 0;
          LOBYTE(v369) = 0;
LABEL_1101:
          v378 = v264;
          if (!v264)
            goto LABEL_720;
          v210 = v372;
          v184 = v351;
          v185 = v359;
          if (!(_DWORD)v370)
            goto LABEL_917;
          goto LABEL_918;
        }
LABEL_939:
        v242 = v238 - v205;
        if (v238 - v205 < 0)
          goto LABEL_1247;
        if (!v242)
          goto LABEL_1100;
        if (*v205 == 42)
        {
          if (v242 == 1)
          {
            v243 = 0;
            v205 = 0;
            v244 = 1;
LABEL_1022:
            v369 = 0;
            LODWORD(v370) = 0;
            v264 = 1;
            BYTE4(v370) = 1;
            *(_WORD *)v359 = (_WORD)v360;
            v359[2] = BYTE2(v360);
            v371 = v205;
            LODWORD(v372) = v243;
            BYTE4(v372) = 1;
            *(_WORD *)((char *)&v372 + 5) = v381;
            HIBYTE(v372) = v382;
            v373 = v244;
            *(_DWORD *)&v374[3] = *(_DWORD *)((char *)&v379 + 3);
            *(_DWORD *)v374 = (_DWORD)v379;
            v376 = 0;
            v375 = 0;
            v377 = 0;
            goto LABEL_1101;
          }
          if (v205[1] != 46)
            goto LABEL_1100;
          v205 += 2;
          v244 = 1;
          v242 -= 2;
          if (!v242)
          {
            LODWORD(v255) = (_DWORD)v205;
            goto LABEL_1021;
          }
        }
        else
        {
          v244 = 0;
        }
        v256 = v205;
        while (1)
        {
          v257 = *v256;
          if (v257 != 45 && (v257 - 48) >= 0xA && (v257 | 0x20u) - 97 > 0x19)
            goto LABEL_1100;
          if (v242 == 1)
            break;
          v255 = v256 + 2;
          v260 = 2 - v242;
          while (1)
          {
            v261 = *(v255 - 1);
            v262 = v261 != 45 && (v261 - 48) >= 0xA;
            if (v262 && (v261 | 0x20u) - 97 > 0x19)
              break;
            ++v255;
            if (++v260 == 1)
            {
              LODWORD(v255) = (_DWORD)v256 + v242;
              goto LABEL_1021;
            }
          }
          if (v261 != 46)
            goto LABEL_1100;
          v242 = -v260;
          v256 = v255;
          if (!v260)
            goto LABEL_1021;
        }
        LODWORD(v255) = (_DWORD)v256 + 1;
LABEL_1021:
        v243 = (_DWORD)v255 - (_DWORD)v205;
        goto LABEL_1022;
      }
LABEL_1118:
      if (*(_BYTE *)(v4 + 72) == 2 && (WebCore::isRestrictedDirectiveForMode((_QWORD *)(v4 + 64), 2) & 1) != 0)
      {
        v205 += 13;
        v204 -= 13;
        goto LABEL_759;
      }
      v210 = 0;
      v211 = 0;
      v212 = 0;
      v213 = 0;
      *(_WORD *)(v4 + 76) = 257;
LABEL_729:
      v369 = 0;
      LODWORD(v370) = 0;
LABEL_730:
      BYTE4(v370) = 1;
      v371 = 0;
      LODWORD(v372) = 0;
      BYTE4(v372) = 1;
      v373 = 0;
      v184 = v351;
      v185 = v359;
      goto LABEL_916;
    }
LABEL_1105:
    if ((v206 & 0xFFFFFFDF) != 7
      || (v205[1] & 0xDF) != 0x55
      || (v205[2] & 0xDF) != 0x4E
      || (v205[3] & 0xDF) != 0x53
      || (v205[4] & 0xDF) != 0x41
      || (v205[5] & 0xDF) != 0x46
      || (v205[6] & 0xDF) != 0x45
      || (v205[7] & 0xDF) != 0xD
      || (v205[8] & 0xDF) != 0x45
      || (v205[9] & 0xDF) != 0x56
      || (v205[10] & 0xDF) != 0x41
      || (v205[11] & 0xDF) != 0x4C
      || (v205[12] & 0xDF) != 7)
    {
      goto LABEL_759;
    }
    goto LABEL_1118;
  }
  if (!*(_DWORD *)(v5 + 4))
    return (uint64_t)WTF::Vector<WebCore::ContentSecurityPolicySource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(v4 + 8), (WTF *)*(unsigned int *)(v4 + 20));
  v8 = *(unsigned int *)(v5 + 4);
  v9 = *(unsigned __int16 **)(v5 + 8);
  while (1)
  {
    v10 = *v9;
    if ((v10 - 9) >= 5 && v10 != 32)
      break;
    ++v9;
    if (!--v8)
      goto LABEL_10;
  }
  if (v8 >= 6)
  {
    v174 = v10 & 0xFFFFFFDF;
    if (v8 != 6)
    {
      if (v174 == 7
        && (v9[1] & 0xFFDF) == 0x4E
        && (v9[2] & 0xFFDF) == 0x4F
        && (v9[3] & 0xFFDF) == 0x4E
        && (v9[4] & 0xFFDF) == 0x45
        && (v9[5] & 0xFFDF) == 7)
      {
        v175 = 6;
        while (1)
        {
          v176 = v9[v175];
          if ((v176 - 9) >= 5 && v176 != 32)
            break;
          if (v8 == ++v175)
            goto LABEL_1234;
        }
      }
      goto LABEL_10;
    }
    if (v174 != 7
      || (v9[1] & 0xFFDF) != 0x4E
      || (v9[2] & 0xFFDF) != 0x4F
      || (v9[3] & 0xFFDF) != 0x4E
      || (v9[4] & 0xFFDF) != 0x45
      || (v9[5] & 0xFFDF) != 7)
    {
      goto LABEL_10;
    }
LABEL_1234:
    *(_BYTE *)(this + 78) = 1;
    return this;
  }
LABEL_10:
  v11 = (_QWORD *)(this + 64);
  v12 = (_QWORD *)(this + 8);
  v13 = &v365;
  v14 = this + 24;
  v15 = (uint64_t *)(this + 48);
  this = (uint64_t)&v370 + 5;
  v16 = (WTF::StringImpl *)((char *)&v372 + 5);
  v17 = v374;
  while (2)
  {
    v18 = 0;
    v19 = v6;
    v20 = v7;
    while (1)
    {
      v21 = *(unsigned __int16 *)&v6[v18];
      if ((v21 - 9) >= 5 && v21 != 32)
        break;
      v18 += 2;
      if (!--v20)
        return this;
    }
    v6 += 2 * v7;
    v22 = *(unsigned __int16 *)&v19[v18];
    for (j = &v19[v18]; ; j += 2)
    {
      if (v22 <= 0x20 && ((1 << v22) & 0x100003E00) != 0)
      {
        v6 = j;
        v7 = v20;
        goto LABEL_22;
      }
      if (!--v20)
        break;
      v24 = *((unsigned __int16 *)j + 1);
      v22 = v24;
    }
    v7 = 0;
LABEL_22:
    v354 = v12;
    v356 = v15;
    v350 = v14;
    v352 = v13;
    v25 = v6 - v19 - v18;
    if (v25 <= -2)
      goto LABEL_1247;
    v26 = (unsigned __int16 *)&v19[v18];
    v27 = v25 >> 1;
    v358 = this;
    if ((unint64_t)(v25 >> 1) > 7
      && (*v26 & 0xFFDF) == 7
      && (v26[1] & 0xFFDF) == 0x4E
      && (v26[2] & 0xFFDF) == 0x4F
      && (v26[3] & 0xFFDF) == 0x4E
      && (v26[4] & 0xFFDF) == 0x43
      && (v26[5] & 0xFFDF) == 0x45
      && (v26[6] & 0xFFDF) == 0xD)
    {
      v28 = 0;
      v29 = -7;
      while (1)
      {
        v30 = v26[v28 + 7];
        if ((v30 - 48) >= 0xA
          && (v30 | 0x20u) - 97 >= 0x1A
          && ((v30 - 43) > 0x34 || ((1 << (v30 - 43)) & 0x10000000040015) == 0))
        {
          break;
        }
        ++v28;
        if (-(uint64_t)v27 == --v29)
          goto LABEL_42;
      }
      if (v29 != -7 && v30 == 39)
      {
        v15 = v356;
        if (*(_BYTE *)(v4 + 72) == 2)
        {
          v168 = v17;
          v169 = v16;
          v170 = WebCore::isRestrictedDirectiveForMode(v11, 2);
          v16 = v169;
          v17 = v168;
          if ((v170 & 1) != 0)
            goto LABEL_399;
        }
        v346 = v16;
        if ((unint64_t)-v29 > 6)
        {
          WTF::String::String();
          WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add(v350, &v361, v171, (uint64_t)&v369);
          v173 = v361;
          v361 = 0;
          if (v173)
          {
            if (*(_DWORD *)v173 == 2)
              WTF::StringImpl::destroy(v173, v172);
            else
              *(_DWORD *)v173 -= 2;
          }
          v15 = v356;
          v16 = v346;
          goto LABEL_399;
        }
LABEL_1247:
        __break(1u);
        goto LABEL_1248;
      }
    }
LABEL_42:
    if (v21 == 39 && &v19[v18] != v6)
    {
      v33 = (unsigned __int16 *)&v19[v18];
      v34 = v16;
      v379 = (WTF::StringImpl *)&v19[v18 + 2];
      v380 = v27 - 1;
      WebCore::parseCryptographicDigest(&v379, (uint64_t)&v369);
      if ((_BYTE)v372)
      {
        if (v380 && *(_WORD *)v379 == 39 && HIDWORD(v371) <= 0x40)
        {
          v15 = v356;
          if (*(_BYTE *)(v4 + 72) == 2)
          {
            v36 = WebCore::isRestrictedDirectiveForMode(v11, 2);
            v37 = v372;
            if ((v36 & 1) != 0)
            {
LABEL_52:
              v16 = v34;
              if (v37)
              {
                v38 = v370;
                if (v370)
                {
                  v370 = 0;
                  LODWORD(v371) = 0;
                  WTF::fastFree(v38, v34);
                  goto LABEL_402;
                }
              }
              goto LABEL_399;
            }
            if (!(_BYTE)v372)
              goto LABEL_1247;
          }
          *(_BYTE *)(v4 + 56) |= v369;
          WTF::HashTable<WebCore::ResourceCryptographicDigest,WebCore::ResourceCryptographicDigest,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>,WTF::HashTraits<WebCore::ResourceCryptographicDigest>>::add((uint64_t)&v361, v356, (unsigned __int8 *)&v369);
          v37 = v372;
          goto LABEL_52;
        }
        v39 = v370;
        if (v370)
        {
          v370 = 0;
          LODWORD(v371) = 0;
          WTF::fastFree(v39, v35);
        }
        v16 = v34;
        this = v358;
      }
      else
      {
        this = v358;
        v16 = v34;
      }
      v26 = v33;
    }
    if (!v27)
      goto LABEL_88;
    if (v27 < 6)
    {
      v40 = v27;
      v41 = v26;
      if (v27 == 1)
      {
        if (*v26 == 42)
        {
          v42 = v26;
          v43 = v17;
          v44 = v16;
          if ((WebCore::isRestrictedDirectiveForMode(v11, *(unsigned __int8 *)(v4 + 72)) & 1) == 0)
          {
            v338 = v11;
            LODWORD(v52) = 0;
            v53 = 0;
            v54 = 0;
            v55 = 0;
            *(_BYTE *)(v4 + 74) = 1;
            v369 = 0;
            LODWORD(v370) = 0;
            BYTE4(v370) = 1;
            v371 = 0;
            LODWORD(v372) = 0;
            BYTE4(v372) = 1;
            v373 = 0;
            v15 = v356;
            v16 = v44;
            v17 = v43;
            goto LABEL_351;
          }
          v40 = 1;
          v41 = v42;
          this = v358;
          v16 = v44;
          v17 = v43;
        }
        else
        {
          v40 = 1;
          v41 = v26;
        }
        goto LABEL_346;
      }
LABEL_225:
      if (v40 < 0x12)
        goto LABEL_226;
      v59 = *v41;
      v60 = v59 & 0xFFFFFFDF;
      if (v40 == 18)
      {
        if (v60 != 7
          || (v41[1] & 0xFFDF) != 0x57
          || (v41[2] & 0xFFDF) != 0x41
          || (v41[3] & 0xFFDF) != 0x53
          || (v41[4] & 0xFFDF) != 0x4D
          || (v41[5] & 0xFFDF) != 0xD)
        {
          v40 = 18;
          goto LABEL_286;
        }
        if ((v41[6] & 0xFFDF) != 0x55)
        {
          v40 = 18;
          goto LABEL_286;
        }
        v338 = v11;
        v344 = v16;
        v61 = this;
        if ((v41[7] & 0xFFDF) != 0x4E
          || (v41[8] & 0xFFDF) != 0x53
          || (v41[9] & 0xFFDF) != 0x41
          || (v41[10] & 0xFFDF) != 0x46
          || (v41[11] & 0xFFDF) != 0x45
          || (v41[12] & 0xFFDF) != 0xD
          || (v41[13] & 0xFFDF) != 0x45
          || (v41[14] & 0xFFDF) != 0x56
          || (v41[15] & 0xFFDF) != 0x41
          || (v41[16] & 0xFFDF) != 0x4C
          || (v41[17] & 0xFFDF) != 7)
        {
          v40 = 18;
          goto LABEL_306;
        }
      }
      else
      {
        if (v60 != 7
          || (v41[1] & 0xFFDF) != 0x57
          || (v41[2] & 0xFFDF) != 0x41
          || (v41[3] & 0xFFDF) != 0x53
          || (v41[4] & 0xFFDF) != 0x4D
          || (v41[5] & 0xFFDF) != 0xD
          || (v41[6] & 0xFFDF) != 0x55)
        {
          goto LABEL_286;
        }
        v338 = v11;
        v344 = v16;
        v61 = this;
        if ((v41[7] & 0xFFDF) != 0x4E
          || (v41[8] & 0xFFDF) != 0x53
          || (v41[9] & 0xFFDF) != 0x41
          || (v41[10] & 0xFFDF) != 0x46
          || (v41[11] & 0xFFDF) != 0x45
          || (v41[12] & 0xFFDF) != 0xD
          || (v41[13] & 0xFFDF) != 0x45
          || (v41[14] & 0xFFDF) != 0x56
          || (v41[15] & 0xFFDF) != 0x41
          || (v41[16] & 0xFFDF) != 0x4C
          || (v41[17] & 0xFFDF) != 7)
        {
LABEL_306:
          v11 = v338;
          v16 = v344;
          this = v61;
          goto LABEL_286;
        }
      }
      if (*(_BYTE *)(v4 + 72) != 2 || (WebCore::isRestrictedDirectiveForMode(v338, 2) & 1) == 0)
      {
        LODWORD(v52) = 0;
        v53 = 0;
        v54 = 0;
        v55 = 0;
        *(_WORD *)v61 = (_WORD)v360;
        *(_BYTE *)(v61 + 2) = BYTE2(v360);
        v16 = v344;
        *(_WORD *)v344 = v381;
        *((_BYTE *)v344 + 2) = v382;
        *v17 = (_DWORD)v379;
        *(_DWORD *)((char *)v17 + 3) = *(_DWORD *)((char *)&v379 + 3);
        *(_BYTE *)(v4 + 77) = 1;
        goto LABEL_349;
      }
      v41 += 18;
      v40 -= 18;
      v11 = v338;
      v16 = v344;
      this = v61;
LABEL_226:
      if (v40 < 0xF)
        goto LABEL_346;
      v59 = *v41;
      if (v40 == 15)
      {
        if ((v59 & 0xFFFFFFDF) != 7
          || (v41[1] & 0xFFDF) != 0x55
          || (v41[2] & 0xFFDF) != 0x4E
          || (v41[3] & 0xFFDF) != 0x53
          || (v41[4] & 0xFFDF) != 0x41
          || (v41[5] & 0xFFDF) != 0x46
          || (v41[6] & 0xFFDF) != 0x45
          || (v41[7] & 0xFFDF) != 0xD
          || (v41[8] & 0xFFDF) != 0x48
          || (v41[9] & 0xFFDF) != 0x41
          || (v41[10] & 0xFFDF) != 0x53
          || (v41[11] & 0xFFDF) != 0x48
          || (v41[12] & 0xFFDF) != 0x45
          || (v41[13] & 0xFFDF) != 0x53
          || (v41[14] & 0xFFDF) != 7)
        {
LABEL_330:
          if ((v59 & 0xFFFFFFDF) != 7
            || (v41[1] & 0xFFDF) != 0x52
            || (v41[2] & 0xFFDF) != 0x45
            || (v41[3] & 0xFFDF) != 0x50
            || (v41[4] & 0xFFDF) != 0x4F
            || (v41[5] & 0xFFDF) != 0x52)
          {
            v40 = 15;
            goto LABEL_346;
          }
          if ((v41[6] & 0xFFDF) != 0x54
            || (v41[7] & 0xFFDF) != 0xD
            || (v41[8] & 0xFFDF) != 0x53
            || (v41[9] & 0xFFDF) != 0x41
            || (v41[10] & 0xFFDF) != 0x4D
            || (v41[11] & 0xFFDF) != 0x50
            || (v41[12] & 0xFFDF) != 0x4C
            || (v41[13] & 0xFFDF) != 0x45)
          {
            v40 = 15;
            goto LABEL_346;
          }
          v62 = v41[14] & 0xFFDF;
          v40 = 15;
LABEL_322:
          if (v62 != 7)
            goto LABEL_346;
          v338 = v11;
          v345 = v16;
          if (*(_BYTE *)(v4 + 72) == 2 && (WebCore::isRestrictedDirectiveForMode(v11, 2) & 1) != 0)
          {
            v41 += 15;
            v40 -= 15;
            goto LABEL_326;
          }
          LODWORD(v52) = 0;
          v53 = 0;
          v54 = 0;
          v55 = 0;
          *(_WORD *)v358 = (_WORD)v360;
          *(_BYTE *)(v358 + 2) = BYTE2(v360);
          v16 = v345;
          *(_WORD *)v345 = v381;
          *((_BYTE *)v345 + 2) = v382;
          *v17 = (_DWORD)v379;
          *(_DWORD *)((char *)v17 + 3) = *(_DWORD *)((char *)&v379 + 3);
          *(_BYTE *)(v4 + 81) = 1;
LABEL_349:
          v369 = 0;
          LODWORD(v370) = 0;
          BYTE4(v370) = 1;
LABEL_350:
          v371 = 0;
          LODWORD(v372) = 0;
          BYTE4(v372) = 1;
          v373 = 0;
          v15 = v356;
          goto LABEL_351;
        }
        v40 = 15;
LABEL_301:
        v338 = v11;
        v345 = v16;
        if (*(_BYTE *)(v4 + 72) != 2 || (WebCore::isRestrictedDirectiveForMode(v11, 2) & 1) == 0)
        {
          LODWORD(v52) = 0;
          v53 = 0;
          v54 = 0;
          v55 = 0;
          *(_WORD *)v358 = (_WORD)v360;
          *(_BYTE *)(v358 + 2) = BYTE2(v360);
          v16 = v345;
          *(_WORD *)v345 = v381;
          *((_BYTE *)v345 + 2) = v382;
          *v17 = (_DWORD)v379;
          *(_DWORD *)((char *)v17 + 3) = *(_DWORD *)((char *)&v379 + 3);
          *(_BYTE *)(v4 + 80) = 1;
          goto LABEL_349;
        }
        v41 += 15;
        v40 -= 15;
        if (v40 < 0xF)
        {
LABEL_326:
          v11 = v338;
          v16 = v345;
          this = v358;
          goto LABEL_346;
        }
        v59 = *v41;
        v16 = v345;
        this = v358;
        if (v40 == 15)
          goto LABEL_330;
LABEL_307:
        if ((v59 & 0xFFFFFFDF) != 7
          || (v41[1] & 0xFFDF) != 0x52
          || (v41[2] & 0xFFDF) != 0x45
          || (v41[3] & 0xFFDF) != 0x50
          || (v41[4] & 0xFFDF) != 0x4F
          || (v41[5] & 0xFFDF) != 0x52
          || (v41[6] & 0xFFDF) != 0x54
          || (v41[7] & 0xFFDF) != 0xD
          || (v41[8] & 0xFFDF) != 0x53
          || (v41[9] & 0xFFDF) != 0x41
          || (v41[10] & 0xFFDF) != 0x4D
          || (v41[11] & 0xFFDF) != 0x50
          || (v41[12] & 0xFFDF) != 0x4C
          || (v41[13] & 0xFFDF) != 0x45)
        {
          goto LABEL_346;
        }
        v62 = v41[14] & 0xFFDF;
        goto LABEL_322;
      }
LABEL_286:
      if ((v59 & 0xFFFFFFDF) != 7
        || (v41[1] & 0xFFDF) != 0x55
        || (v41[2] & 0xFFDF) != 0x4E
        || (v41[3] & 0xFFDF) != 0x53
        || (v41[4] & 0xFFDF) != 0x41
        || (v41[5] & 0xFFDF) != 0x46
        || (v41[6] & 0xFFDF) != 0x45
        || (v41[7] & 0xFFDF) != 0xD
        || (v41[8] & 0xFFDF) != 0x48
        || (v41[9] & 0xFFDF) != 0x41
        || (v41[10] & 0xFFDF) != 0x53
        || (v41[11] & 0xFFDF) != 0x48
        || (v41[12] & 0xFFDF) != 0x45
        || (v41[13] & 0xFFDF) != 0x53
        || (v41[14] & 0xFFDF) != 7)
      {
        goto LABEL_307;
      }
      goto LABEL_301;
    }
    v45 = *v26;
    v46 = v45 & 0xFFFFFFDF;
    if (v27 == 6)
    {
      if (v46 != 7
        || (v26[1] & 0xFFDF) != 0x4E
        || (v26[2] & 0xFFDF) != 0x4F
        || (v26[3] & 0xFFDF) != 0x4E
        || (v26[4] & 0xFFDF) != 0x45
        || (v26[5] & 0xFFDF) != 7)
      {
        v41 = v26;
LABEL_75:
        if ((v45 & 0xFFFFFFDF) != 7
          || (v41[1] & 0xFFDF) != 0x53
          || (v41[2] & 0xFFDF) != 0x45
          || (v41[3] & 0xFFDF) != 0x4C
          || (v41[4] & 0xFFDF) != 0x46
          || (v41[5] & 0xFFDF) != 7)
        {
          v40 = 6;
          goto LABEL_346;
        }
LABEL_123:
        v338 = v11;
        LODWORD(v52) = 0;
        v53 = 0;
        v54 = 0;
        v55 = 0;
        *(_BYTE *)(v4 + 73) = *(_BYTE *)(v4 + 79) ^ 1;
LABEL_348:
        *(_WORD *)this = (_WORD)v360;
        *(_BYTE *)(this + 2) = BYTE2(v360);
        *(_WORD *)v16 = v381;
        *((_BYTE *)v16 + 2) = v382;
        *(_DWORD *)((char *)v17 + 3) = *(_DWORD *)((char *)&v379 + 3);
        *v17 = (_DWORD)v379;
        goto LABEL_349;
      }
LABEL_88:
      v342 = v16;
      goto LABEL_89;
    }
    if (v46 == 7
      && (v26[1] & 0xFFDF) == 0x4E
      && (v26[2] & 0xFFDF) == 0x4F
      && (v26[3] & 0xFFDF) == 0x4E
      && (v26[4] & 0xFFDF) == 0x45
      && (v26[5] & 0xFFDF) == 7)
    {
      goto LABEL_88;
    }
    if (v27 < 0x10)
      goto LABEL_96;
    if (v27 != 16)
    {
      if (v46 != 7
        || (v26[1] & 0xFFDF) != 0x53
        || (v26[2] & 0xFFDF) != 0x54
        || (v26[3] & 0xFFDF) != 0x52
        || (v26[4] & 0xFFDF) != 0x49
        || (v26[5] & 0xFFDF) != 0x43)
      {
LABEL_96:
        v40 = v27;
LABEL_116:
        v41 = v26;
        goto LABEL_117;
      }
      v50 = v26;
      if ((v26[6] & 0xFFDF) == 0x54
        && (v26[7] & 0xFFDF) == 0xD
        && (v26[8] & 0xFFDF) == 0x44
        && (v26[9] & 0xFFDF) == 0x59
        && (v26[10] & 0xFFDF) == 0x4E
        && (v26[11] & 0xFFDF) == 0x41
        && (v26[12] & 0xFFDF) == 0x4D
        && (v26[13] & 0xFFDF) == 0x49
        && (v26[14] & 0xFFDF) == 0x43)
      {
        v40 = v27;
        v41 = v26;
        if ((v26[15] & 0xFFDF) != 7)
          goto LABEL_117;
        goto LABEL_175;
      }
      v40 = v27;
LABEL_329:
      v41 = v50;
      goto LABEL_117;
    }
    if (v46 != 7
      || (v26[1] & 0xFFDF) != 0x53
      || (v26[2] & 0xFFDF) != 0x54
      || (v26[3] & 0xFFDF) != 0x52
      || (v26[4] & 0xFFDF) != 0x49
      || (v26[5] & 0xFFDF) != 0x43)
    {
      goto LABEL_115;
    }
    v50 = v26;
    if ((v26[6] & 0xFFDF) != 0x54
      || (v26[7] & 0xFFDF) != 0xD
      || (v26[8] & 0xFFDF) != 0x44
      || (v26[9] & 0xFFDF) != 0x59
      || (v26[10] & 0xFFDF) != 0x4E
      || (v26[11] & 0xFFDF) != 0x41
      || (v26[12] & 0xFFDF) != 0x4D
      || (v26[13] & 0xFFDF) != 0x49
      || (v26[14] & 0xFFDF) != 0x43)
    {
      v40 = 16;
      goto LABEL_329;
    }
    if ((v26[15] & 0xFFDF) != 7)
    {
LABEL_115:
      v40 = 16;
      goto LABEL_116;
    }
LABEL_175:
    v335 = v26;
    v338 = v11;
    v343 = v16;
    if (*(_BYTE *)(v4 + 72) != 2 || (WebCore::isRestrictedDirectiveForMode(v11, 2) & 1) == 0)
    {
      v56 = qword_1EE2E40F8 ? qword_1EE2E40F8 - 1 : 0;
      if ((MEMORY[0x19AEA53F4](*v11, WebCore::ContentSecurityPolicyDirectiveNames::scriptSrc, v56) & 1) != 0
        || (qword_1EE2E4108 ? (v57 = qword_1EE2E4108 - 1) : (v57 = 0),
            (MEMORY[0x19AEA53F4](*v11, WebCore::ContentSecurityPolicyDirectiveNames::scriptSrcElem, v57) & 1) != 0
         || (qword_1EE2E4118 ? (v58 = qword_1EE2E4118 - 1) : (v58 = 0),
             MEMORY[0x19AEA53F4](*v11, WebCore::ContentSecurityPolicyDirectiveNames::defaultSrc, v58))))
      {
        LODWORD(v52) = 0;
        v53 = 0;
        v54 = 0;
        v55 = 0;
        *(_BYTE *)(v4 + 79) = 1;
        *(_BYTE *)(v4 + 73) = 0;
        *(_BYTE *)(v4 + 75) = 0;
        v369 = 0;
        LODWORD(v370) = 0;
LABEL_600:
        BYTE4(v370) = 1;
        v371 = 0;
        LODWORD(v372) = 0;
        BYTE4(v372) = 1;
        v373 = 0;
        v15 = v356;
        v16 = v343;
        goto LABEL_351;
      }
    }
    v41 = v335 + 16;
    if (v27 - 16 < 6)
    {
      v40 = v27 - 16;
      v16 = v343;
      this = v358;
      goto LABEL_225;
    }
    v45 = *v41;
    v40 = v27 - 16;
    v16 = v343;
    this = v358;
    if (v27 == 22)
      goto LABEL_75;
LABEL_117:
    v51 = v45 & 0xFFFFFFDF;
    if ((v45 & 0xFFFFFFDF) == 7
      && (v41[1] & 0xFFDF) == 0x53
      && (v41[2] & 0xFFDF) == 0x45
      && (v41[3] & 0xFFDF) == 0x4C
      && (v41[4] & 0xFFDF) == 0x46
      && (v41[5] & 0xFFDF) == 7)
    {
      goto LABEL_123;
    }
    if (v40 < 0xF)
      goto LABEL_125;
    if (v40 == 15)
    {
      if (v51 != 7
        || (v41[1] & 0xFFDF) != 0x55
        || (v41[2] & 0xFFDF) != 0x4E
        || (v41[3] & 0xFFDF) != 0x53
        || (v41[4] & 0xFFDF) != 0x41
        || (v41[5] & 0xFFDF) != 0x46)
      {
        v40 = 15;
        goto LABEL_206;
      }
      v338 = v11;
      v343 = v16;
      if ((v41[6] & 0xFFDF) != 0x45
        || (v41[7] & 0xFFDF) != 0xD
        || (v41[8] & 0xFFDF) != 0x49
        || (v41[9] & 0xFFDF) != 0x4E
        || (v41[10] & 0xFFDF) != 0x4C
        || (v41[11] & 0xFFDF) != 0x49
        || (v41[12] & 0xFFDF) != 0x4E
        || (v41[13] & 0xFFDF) != 0x45
        || (v41[14] & 0xFFDF) != 7)
      {
        v40 = 15;
        goto LABEL_223;
      }
    }
    else
    {
      if (v51 != 7
        || (v41[1] & 0xFFDF) != 0x55
        || (v41[2] & 0xFFDF) != 0x4E
        || (v41[3] & 0xFFDF) != 0x53
        || (v41[4] & 0xFFDF) != 0x41
        || (v41[5] & 0xFFDF) != 0x46)
      {
        goto LABEL_206;
      }
      v338 = v11;
      v343 = v16;
      if ((v41[6] & 0xFFDF) != 0x45
        || (v41[7] & 0xFFDF) != 0xD
        || (v41[8] & 0xFFDF) != 0x49
        || (v41[9] & 0xFFDF) != 0x4E
        || (v41[10] & 0xFFDF) != 0x4C
        || (v41[11] & 0xFFDF) != 0x49
        || (v41[12] & 0xFFDF) != 0x4E
        || (v41[13] & 0xFFDF) != 0x45
        || (v41[14] & 0xFFDF) != 7)
      {
LABEL_223:
        v11 = v338;
        v16 = v343;
        this = v358;
        goto LABEL_206;
      }
    }
    if ((WebCore::isRestrictedDirectiveForMode(v338, *(unsigned __int8 *)(v4 + 72)) & 1) == 0)
    {
      LODWORD(v52) = 0;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      *(_BYTE *)(v4 + 75) = *(_BYTE *)(v4 + 79) ^ 1;
LABEL_599:
      v369 = 0;
      LODWORD(v370) = 0;
      goto LABEL_600;
    }
    v41 += 15;
    v40 -= 15;
    v11 = v338;
    v16 = v343;
    this = v358;
LABEL_125:
    if (v40 < 0xD)
      goto LABEL_225;
    v45 = *v41;
    if (v40 != 13)
    {
LABEL_206:
      if ((v45 & 0xFFFFFFDF) != 7
        || (v41[1] & 0xFFDF) != 0x55
        || (v41[2] & 0xFFDF) != 0x4E
        || (v41[3] & 0xFFDF) != 0x53
        || (v41[4] & 0xFFDF) != 0x41
        || (v41[5] & 0xFFDF) != 0x46
        || (v41[6] & 0xFFDF) != 0x45
        || (v41[7] & 0xFFDF) != 0xD
        || (v41[8] & 0xFFDF) != 0x45
        || (v41[9] & 0xFFDF) != 0x56
        || (v41[10] & 0xFFDF) != 0x41
        || (v41[11] & 0xFFDF) != 0x4C
        || (v41[12] & 0xFFDF) != 7)
      {
        goto LABEL_225;
      }
      goto LABEL_219;
    }
    if ((v45 & 0xFFFFFFDF) != 7 || (v41[1] & 0xFFDF) != 0x55 || (v41[2] & 0xFFDF) != 0x4E || (v41[3] & 0xFFDF) != 0x53)
    {
      v40 = 13;
      goto LABEL_346;
    }
    if ((v41[4] & 0xFFDF) != 0x41
      || (v41[5] & 0xFFDF) != 0x46
      || (v41[6] & 0xFFDF) != 0x45
      || (v41[7] & 0xFFDF) != 0xD
      || (v41[8] & 0xFFDF) != 0x45
      || (v41[9] & 0xFFDF) != 0x56
      || (v41[10] & 0xFFDF) != 0x41
      || (v41[11] & 0xFFDF) != 0x4C)
    {
      v40 = 13;
      goto LABEL_346;
    }
    v40 = 13;
    if ((v41[12] & 0xFFDF) == 7)
    {
LABEL_219:
      v338 = v11;
      v343 = v16;
      if (*(_BYTE *)(v4 + 72) == 2 && (WebCore::isRestrictedDirectiveForMode(v11, 2) & 1) != 0)
      {
        v41 += 13;
        v40 -= 13;
        v16 = v343;
        this = v358;
        goto LABEL_225;
      }
      LODWORD(v52) = 0;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      *(_WORD *)(v4 + 76) = 257;
      goto LABEL_599;
    }
LABEL_346:
    if (*(_BYTE *)(v4 + 79))
    {
      v338 = v11;
      LODWORD(v52) = 0;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      goto LABEL_348;
    }
    v79 = (WTF::StringImpl *)v41;
    v342 = v16;
    if (!v40)
    {
LABEL_374:
      v82 = v79 - (WTF::StringImpl *)v41;
      if (v79 - (WTF::StringImpl *)v41 <= -2)
        goto LABEL_1247;
      if (v79 == (WTF::StringImpl *)v41)
        goto LABEL_450;
      v83 = v82 >> 1;
      if (*v41 == 42)
      {
        if (v82 == 2)
        {
          LODWORD(v84) = 0;
          v41 = 0;
          v85 = 1;
          v86 = 1;
LABEL_477:
          v369 = 0;
          LODWORD(v370) = 0;
          v118 = 1;
          BYTE4(v370) = 1;
          *(_WORD *)this = (_WORD)v360;
          *(_BYTE *)(this + 2) = BYTE2(v360);
          v371 = (unsigned __int8 *)v41;
          LODWORD(v372) = v84;
          BYTE4(v372) = v85;
          *(_WORD *)v16 = v381;
          *((_BYTE *)v16 + 2) = v382;
          v373 = v86;
          *(_DWORD *)((char *)v17 + 3) = *(_DWORD *)((char *)&v379 + 3);
          *v17 = (_DWORD)v379;
          v376 = 0;
          v375 = 0;
          v377 = 0;
LABEL_529:
          v378 = v118;
          if (v118)
          {
            LODWORD(v52) = v372;
            v15 = v356;
            v16 = v342;
            if (!(_DWORD)v370)
              goto LABEL_352;
            break;
          }
LABEL_90:
          v47 = *(WebCore::ContentSecurityPolicy **)v4;
          WTF::String::String();
          WebCore::ContentSecurityPolicy::reportInvalidSourceExpression(v47, (WTF::StringImpl **)v11, (const WTF::String *)&v361);
          v49 = v361;
          v361 = 0;
          v15 = v356;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
              WTF::StringImpl::destroy(v49, v48);
            else
              *(_DWORD *)v49 -= 2;
          }
          v16 = v342;
          goto LABEL_395;
        }
        if (v41[1] != 46)
        {
LABEL_450:
          v118 = 0;
          LOBYTE(v369) = 0;
          goto LABEL_529;
        }
        v41 += 2;
        v86 = 1;
        v83 -= 2;
        if (!v83)
        {
          v108 = (char *)v41;
LABEL_476:
          v85 = 0;
          v84 = (unint64_t)(v108 - (char *)v41) >> 1;
          goto LABEL_477;
        }
      }
      else
      {
        v86 = 0;
      }
      v108 = (char *)v41;
      while (1)
      {
        v109 = *(unsigned __int16 *)v108;
        v110 = v109 != 45 && (v109 - 48) >= 0xA;
        v111 = v110 && (v109 | 0x20u) - 97 > 0x19;
        if (v111)
          goto LABEL_450;
        if (v83 == 1)
        {
          v108 += 2;
          goto LABEL_476;
        }
        v112 = 0;
        v113 = -4;
        while (1)
        {
          v114 = *(unsigned __int16 *)&v108[2 * v112 + 2];
          v115 = v114 != 45 && (v114 - 48) >= 0xA;
          if (v115 && (v114 | 0x20u) - 97 > 0x19)
            break;
          v113 -= 2;
          if (v83 - 1 == ++v112)
          {
            v108 += 2 * v83;
            goto LABEL_476;
          }
        }
        if (v114 != 46)
          goto LABEL_450;
        v117 = v83 - 2;
        v83 = v83 - v112 - 2;
        v108 -= v113;
        if (v117 == v112)
          goto LABEL_476;
      }
    }
    v80 = 0;
    v79 = (WTF::StringImpl *)&v41[v40];
    while (1)
    {
      v81 = v41[v80];
      if (v81 == 47)
      {
        if (v80 <= -1)
          goto LABEL_1247;
        if (!(v80 * 2))
        {
LABEL_89:
          LOBYTE(v369) = 0;
          v378 = 0;
          goto LABEL_90;
        }
        v105 = (v80 * 2) >> 1;
        v339 = v11;
        if (*v41 == 42)
        {
          if (v80 == 1)
          {
            LODWORD(v106) = 0;
            v107 = 0;
            v329 = 1;
            v332 = 1;
LABEL_525:
            WebCore::ContentSecurityPolicySourceList::parsePath<char16_t>(&v361, (WTF::StringImpl *)v4, (WTF::StringImpl *)&v41[v80], v40, a3, a4);
            v151 = v361;
            if (v361)
            {
              v369 = 0;
              LODWORD(v370) = 0;
              v118 = 1;
              BYTE4(v370) = 1;
              *(_WORD *)v358 = (_WORD)v360;
              *(_BYTE *)(v358 + 2) = BYTE2(v360);
              v371 = v107;
              LODWORD(v372) = v106;
              BYTE4(v372) = v329;
              *(_WORD *)v342 = v381;
              *((_BYTE *)v342 + 2) = v382;
              v373 = v332;
              *(_DWORD *)((char *)v17 + 3) = *(_DWORD *)((char *)&v379 + 3);
              *v17 = (_DWORD)v379;
              v376 = 0;
              v375 = 0;
              v377 = v151;
            }
            else
            {
              v118 = 0;
              LOBYTE(v369) = 0;
            }
            v11 = v339;
            goto LABEL_529;
          }
          if (v41[1] != 46)
            goto LABEL_89;
          v133 = (unsigned __int8 *)(v41 + 2);
          v134 = 1;
          v105 -= 2;
          if (!v105)
          {
            v332 = 1;
            v135 = (char *)(v41 + 2);
LABEL_524:
            v329 = 0;
            v107 = v133;
            v106 = (unint64_t)(v135 - (char *)v133) >> 1;
            goto LABEL_525;
          }
        }
        else
        {
          v134 = 0;
          v133 = (unsigned __int8 *)v41;
        }
        v135 = (char *)v133;
        v332 = v134;
        while (1)
        {
          v136 = *(unsigned __int16 *)v135;
          v137 = v136 != 45 && (v136 - 48) >= 0xA;
          if (v137 && (v136 | 0x20u) - 97 > 0x19)
            goto LABEL_89;
          if (v105 == 1)
          {
            v135 += 2;
            goto LABEL_524;
          }
          v139 = 0;
          v140 = -4;
          while (1)
          {
            v141 = *(unsigned __int16 *)&v135[2 * v139 + 2];
            v142 = v141 != 45 && (v141 - 48) >= 0xA;
            if (v142 && (v141 | 0x20u) - 97 > 0x19)
              break;
            v140 -= 2;
            if (v105 - 1 == ++v139)
            {
              v135 += 2 * v105;
              goto LABEL_524;
            }
          }
          if (v141 != 46)
            goto LABEL_89;
          v144 = v105 - 2;
          v105 = v105 - v139 - 2;
          v135 -= v140;
          if (v144 == v139)
            goto LABEL_524;
        }
      }
      if (v81 == 58)
        break;
      ++v80;
      if (!--v40)
        goto LABEL_374;
    }
    if (v40 == 1)
    {
      if (v80 <= -1)
        goto LABEL_1247;
      if (v80 * 2 && (*v41 | 0x20u) - 97 <= 0x19)
      {
        v97 = (char *)(v41 + 1);
        v98 = ((v80 * 2) >> 1) - 1;
        v338 = v11;
        if ((v80 * 2) >> 1 == 1)
        {
LABEL_420:
          LODWORD(v52) = 0;
          v54 = 0;
          v55 = 0;
          v369 = (uint64_t)v41;
          v104 = v97 - (char *)v41;
          LODWORD(v370) = v104 >> 1;
          *(_WORD *)this = (_WORD)v360;
          *(_BYTE *)(this + 2) = BYTE2(v360);
          *(_WORD *)v16 = v381;
          *((_BYTE *)v16 + 2) = v382;
          *(_DWORD *)((char *)v17 + 3) = *(_DWORD *)((char *)&v379 + 3);
          *v17 = (_DWORD)v379;
          v53 = (v104 >> 1);
          BYTE4(v370) = 0;
          goto LABEL_350;
        }
        v99 = &v41[v80];
        while (1)
        {
          v100 = *(unsigned __int16 *)v97;
          if (v100 - 48 >= 0xA && (v100 | 0x20) - 97 >= 0x1A)
          {
            v111 = v100 > 0x2E;
            v102 = (1 << v100) & 0x680000000000;
            if (v111 || v102 == 0)
              break;
          }
          v97 += 2;
          if (!--v98)
          {
            v97 = (char *)v99;
            goto LABEL_420;
          }
        }
      }
      goto LABEL_89;
    }
    v119 = (WTF::StringImpl *)&v41[v80];
    if (v41[v80 + 1] != 47)
    {
      v145 = 0;
      v127 = 0;
      v131 = 1;
LABEL_503:
      v132 = (WTF::StringImpl *)((char *)v119 + 2 * v40);
      v146 = v119;
      while (*(_WORD *)v146 != 47)
      {
        v146 = (WTF::StringImpl *)((char *)v146 + 2);
        if (!--v40)
        {
          v129 = (unsigned __int8 *)v41;
          v41 = v145;
          goto LABEL_515;
        }
      }
      v147 = v119;
      v129 = (unsigned __int8 *)v41;
      v119 = v146;
      v41 = v145;
      goto LABEL_514;
    }
    if (v80 <= -1)
      goto LABEL_1247;
    if (!(v80 * 2) || (*v41 | 0x20u) - 97 > 0x19)
      goto LABEL_89;
    v120 = (char *)(v41 + 1);
    v121 = ((v80 * 2) >> 1) - 1;
    if ((v80 * 2) >> 1 != 1)
    {
      while (1)
      {
        v122 = *(unsigned __int16 *)v120;
        if (v122 - 48 >= 0xA && (v122 | 0x20) - 97 >= 0x1A)
        {
          v111 = v122 > 0x2E;
          v124 = (1 << v122) & 0x680000000000;
          if (v111 || v124 == 0)
            goto LABEL_89;
        }
        v120 += 2;
        if (!--v121)
        {
          v120 = (char *)&v41[v80];
          break;
        }
      }
    }
    if (v40 == 2)
      goto LABEL_89;
    v126 = &v41[v80];
    if (v126[2] != 47 || v40 == 3)
      goto LABEL_89;
    v119 = (WTF::StringImpl *)(v126 + 3);
    v127 = ((unint64_t)(v120 - (char *)v41) >> 1);
    v128 = 3;
    v129 = (unsigned __int8 *)v119;
    while (1)
    {
      v130 = *(unsigned __int16 *)v119;
      if (v130 == 47)
        break;
      if (v130 == 58)
      {
        v131 = 0;
        v40 -= v128;
        v145 = v41;
        v41 = (unsigned __int16 *)v129;
        goto LABEL_503;
      }
      v119 = (WTF::StringImpl *)((char *)v119 + 2);
      if (v40 == ++v128)
      {
        v119 = 0;
        v40 = 0;
        v131 = 0;
        v132 = v79;
        goto LABEL_515;
      }
    }
    v147 = 0;
    v131 = 0;
    v40 -= v128;
LABEL_514:
    v132 = v119;
    v119 = v147;
    v79 = v132;
    if (v132 == (WTF::StringImpl *)v129)
      goto LABEL_89;
LABEL_515:
    if (v119)
      v148 = v119;
    else
      v148 = v79;
    v149 = v148 - (WTF::StringImpl *)v129;
    if (v148 - (WTF::StringImpl *)v129 <= -2)
      goto LABEL_1247;
    if (v148 == (WTF::StringImpl *)v129)
      goto LABEL_89;
    v150 = v149 >> 1;
    v333 = v131;
    if (*(_WORD *)v129 != 42)
    {
      v330 = 0;
      goto LABEL_534;
    }
    if (v149 == 2)
    {
      v327 = 0;
      LODWORD(v52) = 0;
      v330 = 1;
      v325 = 1;
      goto LABEL_559;
    }
    if (*((_WORD *)v129 + 1) != 46)
      goto LABEL_89;
    v129 += 4;
    v330 = 1;
    v150 -= 2;
    if (v150)
    {
LABEL_534:
      v152 = (char *)v129;
      while (1)
      {
        v153 = *(unsigned __int16 *)v152;
        v154 = v153 != 45 && (v153 - 48) >= 0xA;
        if (v154 && (v153 | 0x20u) - 97 > 0x19)
          goto LABEL_89;
        if (v150 == 1)
        {
          v152 += 2;
          goto LABEL_558;
        }
        v156 = 0;
        v157 = -4;
        while (1)
        {
          v158 = *(unsigned __int16 *)&v152[2 * v156 + 2];
          v159 = v158 != 45 && (v158 - 48) >= 0xA;
          if (v159 && (v158 | 0x20u) - 97 > 0x19)
            break;
          v157 -= 2;
          if (v150 - 1 == ++v156)
          {
            v152 += 2 * v150;
            goto LABEL_558;
          }
        }
        if (v158 != 46)
          goto LABEL_89;
        v161 = v150 - 2;
        v150 = v150 - v156 - 2;
        v152 -= v157;
        if (v161 == v156)
          goto LABEL_558;
      }
    }
    v152 = (char *)v129;
LABEL_558:
    v325 = 0;
    v327 = v129;
    v52 = (unint64_t)(v152 - (char *)v129) >> 1;
LABEL_559:
    if (!v119)
    {
      v324 = v127;
      v338 = v11;
      v54 = 0;
      goto LABEL_576;
    }
    if (v79 - v119 <= -2)
      goto LABEL_1247;
    if (v79 == v119)
      goto LABEL_89;
    v162 = (v79 - v119) >> 1;
    if (*(_WORD *)v119 == 58)
    {
      if (!--v162)
        goto LABEL_89;
      v322 = v132;
      v323 = v79;
      v324 = v127;
      v338 = v11;
      v119 = (WTF::StringImpl *)((char *)v119 + 2);
    }
    else
    {
      v322 = v132;
      v323 = v79;
      v324 = v127;
      v338 = v11;
    }
    if (v162 != 1 || *(_WORD *)v119 != 42)
    {
      v163 = v119;
      v164 = v162;
      v11 = v338;
      while (*(unsigned __int16 *)v163 - 48 <= 9)
      {
        v163 = (WTF::StringImpl *)((char *)v163 + 2);
        if (!--v164)
        {
          v165 = WTF::parseInteger<unsigned short,char16_t>((uint64_t)v119, v162, 10, 0);
          if ((v165 & 0xFF0000) != 0 && (_WORD)v165)
          {
            v54 = (unsigned __int16)v165 | 0x10000u;
            goto LABEL_575;
          }
          goto LABEL_89;
        }
      }
      goto LABEL_89;
    }
    v54 = 0x100000000;
LABEL_575:
    v132 = v322;
    v79 = v323;
LABEL_576:
    v166 = (WTF::StringImpl *)((char *)v132 + 2 * v40);
    if (v79 == v166)
    {
      v55 = 0;
    }
    else
    {
      v167 = v166 - v79;
      if (v167 <= -2)
        goto LABEL_1247;
      WebCore::ContentSecurityPolicySourceList::parsePath<char16_t>(&v361, (WTF::StringImpl *)v4, v79, v167 >> 1, a3, a4);
      v55 = v361;
      if (!v361)
      {
        LOBYTE(v369) = 0;
        v378 = 0;
        v11 = v338;
        goto LABEL_90;
      }
    }
    v15 = v356;
    v16 = v342;
    v53 = v324;
    v369 = (uint64_t)v41;
    BYTE4(v370) = v333;
    LODWORD(v370) = v324;
    *(_WORD *)v358 = (_WORD)v360;
    *(_BYTE *)(v358 + 2) = BYTE2(v360);
    v371 = v327;
    LODWORD(v372) = v52;
    BYTE4(v372) = v325;
    *(_WORD *)v342 = v381;
    *((_BYTE *)v342 + 2) = v382;
    v373 = v330;
    *(_DWORD *)((char *)v17 + 3) = *(_DWORD *)((char *)&v379 + 3);
    *v17 = (_DWORD)v379;
LABEL_351:
    v375 = v54;
    v376 = BYTE4(v54);
    v377 = v55;
    v378 = 1;
    v11 = v338;
    if (!v53)
    {
LABEL_352:
      if ((_DWORD)v52)
        break;
LABEL_395:
      if (v378)
      {
        v96 = v377;
        v377 = 0;
        if (v96)
        {
          if (*(_DWORD *)v96 != 2)
          {
            *(_DWORD *)v96 -= 2;
            goto LABEL_399;
          }
          v34 = v16;
          WTF::StringImpl::destroy(v96, v16);
LABEL_402:
          v16 = v34;
        }
      }
LABEL_399:
      v13 = v352;
      v12 = v354;
      v14 = v350;
      this = v358;
      if (!v7)
        return (uint64_t)WTF::Vector<WebCore::ContentSecurityPolicySource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(v4 + 8), (WTF *)*(unsigned int *)(v4 + 20));
      continue;
    }
    break;
  }
  v63 = v16;
  v64 = v371;
  v65 = v372;
  if (!WebCore::isCSPDirectiveName(v371, v372)
    || (WebCore::ContentSecurityPolicy::reportDirectiveAsSourceExpression(*(_QWORD *)v4, v11, v64, v65), v378))
  {
    isValidSourceForExtensionMode = WebCore::ContentSecurityPolicySourceList::isValidSourceForExtensionMode(v4, &v369);
    v15 = v356;
    v16 = v63;
    if (!isValidSourceForExtensionMode)
      goto LABEL_395;
    if (v378)
    {
      v67 = *(WTF::StringImpl **)v4;
      WTF::StringView::convertToASCIILowercase((WTF::StringView *)&v369);
      if (v378)
      {
        if (BYTE4(v372))
          WTF::String::String();
        else
          WTF::String::String();
        if (v378)
        {
          v68 = v375;
          v69 = v373;
          v70 = v376;
          v361 = v67;
          v71 = v379;
          if (v379)
            *(_DWORD *)v379 += 2;
          v362 = v71;
          if (v360)
            *(_DWORD *)v360 += 2;
          v363 = v360;
          v72 = v377;
          if (v377)
            *(_DWORD *)v377 += 2;
          v364 = v72;
          v365 = v68;
          v366 = v69;
          v367 = v70;
          v368 = 0;
          v73 = *(unsigned int *)(v4 + 20);
          if ((_DWORD)v73 == *(_DWORD *)(v4 + 16))
          {
            v74 = WTF::Vector<WebCore::ContentSecurityPolicySource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v354, v73 + 1, (unint64_t)&v361);
            v75 = *(_QWORD *)(v4 + 8) + 40 * *(unsigned int *)(v4 + 20);
            *(_QWORD *)v75 = *(_QWORD *)v74;
            v76 = *((_QWORD *)v74 + 1);
            *((_QWORD *)v74 + 1) = 0;
            *(_QWORD *)(v75 + 8) = v76;
            v77 = *((_QWORD *)v74 + 2);
            *((_QWORD *)v74 + 2) = 0;
            *(_QWORD *)(v75 + 16) = v77;
            v78 = *((_QWORD *)v74 + 3);
            *((_QWORD *)v74 + 3) = 0;
            *(_QWORD *)(v75 + 24) = v78;
            LODWORD(v78) = *(_DWORD *)(v74 + 35);
            *(_DWORD *)(v75 + 32) = *((_DWORD *)v74 + 8);
            *(_DWORD *)(v75 + 35) = v78;
          }
          else
          {
            v87 = *v354 + 40 * v73;
            *(_QWORD *)v87 = v67;
            v88 = v362;
            v362 = 0;
            *(_QWORD *)(v87 + 8) = v88;
            v89 = v363;
            v363 = 0;
            *(_QWORD *)(v87 + 16) = v89;
            v90 = v364;
            v364 = 0;
            *(_QWORD *)(v87 + 24) = v90;
            LODWORD(v90) = *v352;
            *(_DWORD *)(v87 + 35) = *(int *)((char *)v352 + 3);
            *(_DWORD *)(v87 + 32) = (_DWORD)v90;
          }
          v16 = v63;
          ++*(_DWORD *)(v4 + 20);
          v91 = v364;
          v364 = 0;
          if (v91)
          {
            if (*(_DWORD *)v91 == 2)
            {
              WTF::StringImpl::destroy(v91, v63);
              v16 = v63;
            }
            else
            {
              *(_DWORD *)v91 -= 2;
            }
          }
          v92 = v363;
          v363 = 0;
          if (v92)
          {
            if (*(_DWORD *)v92 == 2)
            {
              WTF::StringImpl::destroy(v92, v16);
              v16 = v63;
            }
            else
            {
              *(_DWORD *)v92 -= 2;
            }
          }
          v93 = v362;
          v362 = 0;
          if (v93)
          {
            if (*(_DWORD *)v93 == 2)
            {
              WTF::StringImpl::destroy(v93, v16);
              v16 = v63;
            }
            else
            {
              *(_DWORD *)v93 -= 2;
            }
          }
          v94 = v360;
          v360 = 0;
          if (v94)
          {
            if (*(_DWORD *)v94 == 2)
            {
              WTF::StringImpl::destroy(v94, v16);
              v16 = v63;
            }
            else
            {
              *(_DWORD *)v94 -= 2;
            }
          }
          v95 = v379;
          v379 = 0;
          if (v95)
          {
            if (*(_DWORD *)v95 == 2)
            {
              WTF::StringImpl::destroy(v95, v16);
              v16 = v63;
            }
            else
            {
              *(_DWORD *)v95 -= 2;
            }
          }
          goto LABEL_395;
        }
      }
    }
    goto LABEL_1247;
  }
LABEL_1248:
  v320 = (unsigned __int8 *)std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::isCSPDirectiveName(v320, v321);
}

BOOL WebCore::isCSPDirectiveName(unsigned __int8 *a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  int v7;
  size_t v8;
  unint64_t v9;
  int v10;
  int v11;
  size_t v12;
  unint64_t v13;
  int v14;
  int v15;
  size_t v16;
  unint64_t v17;
  int v18;
  int v19;
  size_t v20;
  unint64_t v21;
  int v22;
  int v23;
  size_t v24;
  unint64_t v25;
  int v26;
  int v27;
  size_t v28;
  unint64_t v29;
  int v30;
  int v31;
  size_t v32;
  unint64_t v33;
  int v34;
  int v35;
  size_t v36;
  unint64_t v37;
  int v38;
  int v39;
  size_t v40;
  unint64_t v41;
  int v42;
  int v43;
  size_t v44;
  unint64_t v45;
  int v46;
  int v47;
  size_t v48;
  unint64_t v49;
  int v50;
  int v51;
  size_t v52;
  unint64_t v53;
  int v54;
  int v55;
  size_t v56;
  unint64_t v57;
  int v58;
  int v59;
  size_t v60;
  unint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;

  if (WebCore::ContentSecurityPolicyDirectiveNames::baseURI)
    v4 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::baseURI);
  else
    v4 = 0;
  if (v4 == a2)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (!v4)
        return 1;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a1) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                 + *WebCore::ContentSecurityPolicyDirectiveNames::baseURI))
      {
        v5 = 0;
        while (v4 - 1 != v5)
        {
          v6 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[v5 + 1]);
          v7 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                  + WebCore::ContentSecurityPolicyDirectiveNames::baseURI[++v5]);
          if (v6 != v7)
            goto LABEL_10;
        }
        return 1;
      }
    }
    else
    {
      if (!v4)
        return 1;
      if ((*(unsigned __int16 *)a1 | (32 * (*(unsigned __int16 *)a1 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::baseURI))
      {
        v64 = 1;
        do
        {
          v5 = v64;
          if (v4 == v64)
            break;
          v65 = *(unsigned __int16 *)&a1[2 * v64] | (32 * (*(unsigned __int16 *)&a1[2 * v64] - 65 < 0x1A));
          ++v64;
        }
        while (v65 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                          + WebCore::ContentSecurityPolicyDirectiveNames::baseURI[v5]));
LABEL_10:
        if (v5 >= v4)
          return 1;
      }
    }
  }
  if (WebCore::ContentSecurityPolicyDirectiveNames::connectSrc)
    v8 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::connectSrc);
  else
    v8 = 0;
  if (v8 == a2)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (!(_DWORD)a2)
        return 1;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a1) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                 + *WebCore::ContentSecurityPolicyDirectiveNames::connectSrc))
      {
        v9 = 0;
        while (a2 - 1 != v9)
        {
          v10 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[v9 + 1]);
          v11 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                   + WebCore::ContentSecurityPolicyDirectiveNames::connectSrc[++v9]);
          if (v10 != v11)
            goto LABEL_20;
        }
        return 1;
      }
    }
    else
    {
      if (!(_DWORD)a2)
        return 1;
      if ((*(unsigned __int16 *)a1 | (32 * (*(unsigned __int16 *)a1 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::connectSrc))
      {
        v66 = 1;
        do
        {
          v9 = v66;
          if (a2 == v66)
            break;
          v67 = *(unsigned __int16 *)&a1[2 * v66] | (32 * (*(unsigned __int16 *)&a1[2 * v66] - 65 < 0x1A));
          ++v66;
        }
        while (v67 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                          + WebCore::ContentSecurityPolicyDirectiveNames::connectSrc[v9]));
LABEL_20:
        if (v9 >= a2)
          return 1;
      }
    }
  }
  if (WebCore::ContentSecurityPolicyDirectiveNames::defaultSrc)
    v12 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::defaultSrc);
  else
    v12 = 0;
  if (v12 == a2)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (!(_DWORD)a2)
        return 1;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a1) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                 + *WebCore::ContentSecurityPolicyDirectiveNames::defaultSrc))
      {
        v13 = 0;
        while (a2 - 1 != v13)
        {
          v14 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[v13 + 1]);
          v15 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                   + WebCore::ContentSecurityPolicyDirectiveNames::defaultSrc[++v13]);
          if (v14 != v15)
            goto LABEL_30;
        }
        return 1;
      }
    }
    else
    {
      if (!(_DWORD)a2)
        return 1;
      if ((*(unsigned __int16 *)a1 | (32 * (*(unsigned __int16 *)a1 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::defaultSrc))
      {
        v68 = 1;
        do
        {
          v13 = v68;
          if (a2 == v68)
            break;
          v69 = *(unsigned __int16 *)&a1[2 * v68] | (32 * (*(unsigned __int16 *)&a1[2 * v68] - 65 < 0x1A));
          ++v68;
        }
        while (v69 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                          + WebCore::ContentSecurityPolicyDirectiveNames::defaultSrc[v13]));
LABEL_30:
        if (v13 >= a2)
          return 1;
      }
    }
  }
  if (WebCore::ContentSecurityPolicyDirectiveNames::fontSrc)
    v16 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::fontSrc);
  else
    v16 = 0;
  if (v16 == a2)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (!(_DWORD)a2)
        return 1;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a1) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                 + *WebCore::ContentSecurityPolicyDirectiveNames::fontSrc))
      {
        v17 = 0;
        while (a2 - 1 != v17)
        {
          v18 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[v17 + 1]);
          v19 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                   + WebCore::ContentSecurityPolicyDirectiveNames::fontSrc[++v17]);
          if (v18 != v19)
            goto LABEL_40;
        }
        return 1;
      }
    }
    else
    {
      if (!(_DWORD)a2)
        return 1;
      if ((*(unsigned __int16 *)a1 | (32 * (*(unsigned __int16 *)a1 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::fontSrc))
      {
        v70 = 1;
        do
        {
          v17 = v70;
          if (a2 == v70)
            break;
          v71 = *(unsigned __int16 *)&a1[2 * v70] | (32 * (*(unsigned __int16 *)&a1[2 * v70] - 65 < 0x1A));
          ++v70;
        }
        while (v71 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                          + WebCore::ContentSecurityPolicyDirectiveNames::fontSrc[v17]));
LABEL_40:
        if (v17 >= a2)
          return 1;
      }
    }
  }
  if (WebCore::ContentSecurityPolicyDirectiveNames::formAction)
    v20 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::formAction);
  else
    v20 = 0;
  if (v20 == a2)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (!(_DWORD)a2)
        return 1;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a1) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                 + *WebCore::ContentSecurityPolicyDirectiveNames::formAction))
      {
        v21 = 0;
        while (a2 - 1 != v21)
        {
          v22 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[v21 + 1]);
          v23 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                   + WebCore::ContentSecurityPolicyDirectiveNames::formAction[++v21]);
          if (v22 != v23)
            goto LABEL_50;
        }
        return 1;
      }
    }
    else
    {
      if (!(_DWORD)a2)
        return 1;
      if ((*(unsigned __int16 *)a1 | (32 * (*(unsigned __int16 *)a1 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::formAction))
      {
        v72 = 1;
        do
        {
          v21 = v72;
          if (a2 == v72)
            break;
          v73 = *(unsigned __int16 *)&a1[2 * v72] | (32 * (*(unsigned __int16 *)&a1[2 * v72] - 65 < 0x1A));
          ++v72;
        }
        while (v73 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                          + WebCore::ContentSecurityPolicyDirectiveNames::formAction[v21]));
LABEL_50:
        if (v21 >= a2)
          return 1;
      }
    }
  }
  if (WebCore::ContentSecurityPolicyDirectiveNames::frameSrc)
    v24 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::frameSrc);
  else
    v24 = 0;
  if (v24 == a2)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (!(_DWORD)a2)
        return 1;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a1) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                 + *WebCore::ContentSecurityPolicyDirectiveNames::frameSrc))
      {
        v25 = 0;
        while (a2 - 1 != v25)
        {
          v26 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[v25 + 1]);
          v27 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                   + WebCore::ContentSecurityPolicyDirectiveNames::frameSrc[++v25]);
          if (v26 != v27)
            goto LABEL_60;
        }
        return 1;
      }
    }
    else
    {
      if (!(_DWORD)a2)
        return 1;
      if ((*(unsigned __int16 *)a1 | (32 * (*(unsigned __int16 *)a1 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::frameSrc))
      {
        v75 = 1;
        do
        {
          v25 = v75;
          if (a2 == v75)
            break;
          v76 = *(unsigned __int16 *)&a1[2 * v75] | (32 * (*(unsigned __int16 *)&a1[2 * v75] - 65 < 0x1A));
          ++v75;
        }
        while (v76 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                          + WebCore::ContentSecurityPolicyDirectiveNames::frameSrc[v25]));
LABEL_60:
        if (v25 >= a2)
          return 1;
      }
    }
  }
  if (WebCore::ContentSecurityPolicyDirectiveNames::imgSrc)
    v28 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::imgSrc);
  else
    v28 = 0;
  if (v28 == a2)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (!(_DWORD)a2)
        return 1;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a1) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                 + *WebCore::ContentSecurityPolicyDirectiveNames::imgSrc))
      {
        v29 = 0;
        while (a2 - 1 != v29)
        {
          v30 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[v29 + 1]);
          v31 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                   + WebCore::ContentSecurityPolicyDirectiveNames::imgSrc[++v29]);
          if (v30 != v31)
            goto LABEL_70;
        }
        return 1;
      }
    }
    else
    {
      if (!(_DWORD)a2)
        return 1;
      if ((*(unsigned __int16 *)a1 | (32 * (*(unsigned __int16 *)a1 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::imgSrc))
      {
        v77 = 1;
        do
        {
          v29 = v77;
          if (a2 == v77)
            break;
          v78 = *(unsigned __int16 *)&a1[2 * v77] | (32 * (*(unsigned __int16 *)&a1[2 * v77] - 65 < 0x1A));
          ++v77;
        }
        while (v78 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                          + WebCore::ContentSecurityPolicyDirectiveNames::imgSrc[v29]));
LABEL_70:
        if (v29 >= a2)
          return 1;
      }
    }
  }
  if (WebCore::ContentSecurityPolicyDirectiveNames::mediaSrc)
    v32 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::mediaSrc);
  else
    v32 = 0;
  if (v32 == a2)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (!(_DWORD)a2)
        return 1;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a1) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                 + *WebCore::ContentSecurityPolicyDirectiveNames::mediaSrc))
      {
        v33 = 0;
        while (a2 - 1 != v33)
        {
          v34 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[v33 + 1]);
          v35 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                   + WebCore::ContentSecurityPolicyDirectiveNames::mediaSrc[++v33]);
          if (v34 != v35)
            goto LABEL_80;
        }
        return 1;
      }
    }
    else
    {
      if (!(_DWORD)a2)
        return 1;
      if ((*(unsigned __int16 *)a1 | (32 * (*(unsigned __int16 *)a1 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::mediaSrc))
      {
        v79 = 1;
        do
        {
          v33 = v79;
          if (a2 == v79)
            break;
          v80 = *(unsigned __int16 *)&a1[2 * v79] | (32 * (*(unsigned __int16 *)&a1[2 * v79] - 65 < 0x1A));
          ++v79;
        }
        while (v80 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                          + WebCore::ContentSecurityPolicyDirectiveNames::mediaSrc[v33]));
LABEL_80:
        if (v33 >= a2)
          return 1;
      }
    }
  }
  if (WebCore::ContentSecurityPolicyDirectiveNames::objectSrc)
    v36 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::objectSrc);
  else
    v36 = 0;
  if (v36 == a2)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (!(_DWORD)a2)
        return 1;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a1) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                 + *WebCore::ContentSecurityPolicyDirectiveNames::objectSrc))
      {
        v37 = 0;
        while (a2 - 1 != v37)
        {
          v38 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[v37 + 1]);
          v39 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                   + WebCore::ContentSecurityPolicyDirectiveNames::objectSrc[++v37]);
          if (v38 != v39)
            goto LABEL_90;
        }
        return 1;
      }
    }
    else
    {
      if (!(_DWORD)a2)
        return 1;
      if ((*(unsigned __int16 *)a1 | (32 * (*(unsigned __int16 *)a1 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::objectSrc))
      {
        v81 = 1;
        do
        {
          v37 = v81;
          if (a2 == v81)
            break;
          v82 = *(unsigned __int16 *)&a1[2 * v81] | (32 * (*(unsigned __int16 *)&a1[2 * v81] - 65 < 0x1A));
          ++v81;
        }
        while (v82 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                          + WebCore::ContentSecurityPolicyDirectiveNames::objectSrc[v37]));
LABEL_90:
        if (v37 >= a2)
          return 1;
      }
    }
  }
  if (WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes)
    v40 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes);
  else
    v40 = 0;
  if (v40 == a2)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (!(_DWORD)a2)
        return 1;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a1) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                 + *WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes))
      {
        v41 = 0;
        while (a2 - 1 != v41)
        {
          v42 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[v41 + 1]);
          v43 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                   + WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes[++v41]);
          if (v42 != v43)
            goto LABEL_100;
        }
        return 1;
      }
    }
    else
    {
      if (!(_DWORD)a2)
        return 1;
      if ((*(unsigned __int16 *)a1 | (32 * (*(unsigned __int16 *)a1 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes))
      {
        v83 = 1;
        do
        {
          v41 = v83;
          if (a2 == v83)
            break;
          v84 = *(unsigned __int16 *)&a1[2 * v83] | (32 * (*(unsigned __int16 *)&a1[2 * v83] - 65 < 0x1A));
          ++v83;
        }
        while (v84 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                          + WebCore::ContentSecurityPolicyDirectiveNames::pluginTypes[v41]));
LABEL_100:
        if (v41 >= a2)
          return 1;
      }
    }
  }
  if (WebCore::ContentSecurityPolicyDirectiveNames::reportTo)
    v44 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::reportTo);
  else
    v44 = 0;
  if (v44 == a2)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (!(_DWORD)a2)
        return 1;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a1) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                 + *WebCore::ContentSecurityPolicyDirectiveNames::reportTo))
      {
        v45 = 0;
        while (a2 - 1 != v45)
        {
          v46 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[v45 + 1]);
          v47 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                   + WebCore::ContentSecurityPolicyDirectiveNames::reportTo[++v45]);
          if (v46 != v47)
            goto LABEL_110;
        }
        return 1;
      }
    }
    else
    {
      if (!(_DWORD)a2)
        return 1;
      if ((*(unsigned __int16 *)a1 | (32 * (*(unsigned __int16 *)a1 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::reportTo))
      {
        v85 = 1;
        do
        {
          v45 = v85;
          if (a2 == v85)
            break;
          v86 = *(unsigned __int16 *)&a1[2 * v85] | (32 * (*(unsigned __int16 *)&a1[2 * v85] - 65 < 0x1A));
          ++v85;
        }
        while (v86 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                          + WebCore::ContentSecurityPolicyDirectiveNames::reportTo[v45]));
LABEL_110:
        if (v45 >= a2)
          return 1;
      }
    }
  }
  if (WebCore::ContentSecurityPolicyDirectiveNames::reportURI)
    v48 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::reportURI);
  else
    v48 = 0;
  if (v48 == a2)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (!(_DWORD)a2)
        return 1;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a1) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                 + *WebCore::ContentSecurityPolicyDirectiveNames::reportURI))
      {
        v49 = 0;
        while (a2 - 1 != v49)
        {
          v50 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[v49 + 1]);
          v51 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                   + WebCore::ContentSecurityPolicyDirectiveNames::reportURI[++v49]);
          if (v50 != v51)
            goto LABEL_120;
        }
        return 1;
      }
    }
    else
    {
      if (!(_DWORD)a2)
        return 1;
      if ((*(unsigned __int16 *)a1 | (32 * (*(unsigned __int16 *)a1 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::reportURI))
      {
        v87 = 1;
        do
        {
          v49 = v87;
          if (a2 == v87)
            break;
          v88 = *(unsigned __int16 *)&a1[2 * v87] | (32 * (*(unsigned __int16 *)&a1[2 * v87] - 65 < 0x1A));
          ++v87;
        }
        while (v88 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                          + WebCore::ContentSecurityPolicyDirectiveNames::reportURI[v49]));
LABEL_120:
        if (v49 >= a2)
          return 1;
      }
    }
  }
  if (WebCore::ContentSecurityPolicyDirectiveNames::sandbox)
    v52 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::sandbox);
  else
    v52 = 0;
  if (v52 == a2)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (!(_DWORD)a2)
        return 1;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a1) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                 + *WebCore::ContentSecurityPolicyDirectiveNames::sandbox))
      {
        v53 = 0;
        while (a2 - 1 != v53)
        {
          v54 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[v53 + 1]);
          v55 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                   + WebCore::ContentSecurityPolicyDirectiveNames::sandbox[++v53]);
          if (v54 != v55)
            goto LABEL_130;
        }
        return 1;
      }
    }
    else
    {
      if (!(_DWORD)a2)
        return 1;
      if ((*(unsigned __int16 *)a1 | (32 * (*(unsigned __int16 *)a1 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::sandbox))
      {
        v89 = 1;
        do
        {
          v53 = v89;
          if (a2 == v89)
            break;
          v90 = *(unsigned __int16 *)&a1[2 * v89] | (32 * (*(unsigned __int16 *)&a1[2 * v89] - 65 < 0x1A));
          ++v89;
        }
        while (v90 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                          + WebCore::ContentSecurityPolicyDirectiveNames::sandbox[v53]));
LABEL_130:
        if (v53 >= a2)
          return 1;
      }
    }
  }
  if (WebCore::ContentSecurityPolicyDirectiveNames::scriptSrc)
    v56 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::scriptSrc);
  else
    v56 = 0;
  if (v56 == a2)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (!(_DWORD)a2)
        return 1;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a1) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                 + *WebCore::ContentSecurityPolicyDirectiveNames::scriptSrc))
      {
        v57 = 0;
        while (a2 - 1 != v57)
        {
          v58 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[v57 + 1]);
          v59 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                   + WebCore::ContentSecurityPolicyDirectiveNames::scriptSrc[++v57]);
          if (v58 != v59)
            goto LABEL_140;
        }
        return 1;
      }
    }
    else
    {
      if (!(_DWORD)a2)
        return 1;
      if ((*(unsigned __int16 *)a1 | (32 * (*(unsigned __int16 *)a1 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::scriptSrc))
      {
        v91 = 1;
        do
        {
          v57 = v91;
          if (a2 == v91)
            break;
          v92 = *(unsigned __int16 *)&a1[2 * v91] | (32 * (*(unsigned __int16 *)&a1[2 * v91] - 65 < 0x1A));
          ++v91;
        }
        while (v92 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                          + WebCore::ContentSecurityPolicyDirectiveNames::scriptSrc[v57]));
LABEL_140:
        if (v57 >= a2)
          return 1;
      }
    }
  }
  if (WebCore::ContentSecurityPolicyDirectiveNames::styleSrc)
    v60 = strlen(WebCore::ContentSecurityPolicyDirectiveNames::styleSrc);
  else
    v60 = 0;
  if (v60 != a2)
    return 0;
  if ((a2 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a2)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a1) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                 + *WebCore::ContentSecurityPolicyDirectiveNames::styleSrc))
      {
        v61 = 0;
        while (a2 - 1 != v61)
        {
          v62 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[v61 + 1]);
          v63 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                   + WebCore::ContentSecurityPolicyDirectiveNames::styleSrc[++v61]);
          if (v62 != v63)
            return v61 >= a2;
        }
        v61 = a2;
        return v61 >= a2;
      }
      return 0;
    }
    return 1;
  }
  if (!(_DWORD)a2)
    return 1;
  if ((*(unsigned __int16 *)a1 | (32 * (*(unsigned __int16 *)a1 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *WebCore::ContentSecurityPolicyDirectiveNames::styleSrc))
  {
    v93 = 1;
    do
    {
      v61 = v93;
      if (a2 == v93)
        break;
      v94 = *(unsigned __int16 *)&a1[2 * v93] | (32 * (*(unsigned __int16 *)&a1[2 * v93] - 65 < 0x1A));
      ++v93;
    }
    while (v94 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                      + WebCore::ContentSecurityPolicyDirectiveNames::styleSrc[v61]));
    return v61 >= a2;
  }
  return 0;
}

uint64_t WebCore::isRestrictedDirectiveForMode(_QWORD *a1, int a2)
{
  char **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;

  if (a2 == 2)
  {
    v4 = *a1;
    if (qword_1EE2E40F8)
      v5 = qword_1EE2E40F8 - 1;
    else
      v5 = 0;
    if ((MEMORY[0x19AEA53F4](v4, WebCore::ContentSecurityPolicyDirectiveNames::scriptSrc, v5) & 1) != 0)
      return 1;
    v6 = qword_1EE2E4168 ? qword_1EE2E4168 - 1 : 0;
    if ((MEMORY[0x19AEA53F4](*a1, WebCore::ContentSecurityPolicyDirectiveNames::objectSrc, v6) & 1) != 0)
      return 1;
    v3 = &WebCore::ContentSecurityPolicyDirectiveNames::workerSrc;
LABEL_13:
    v7 = *v3;
    v8 = v3[1];
    if (v8)
      v9 = v8 - 1;
    else
      v9 = 0;
    if ((MEMORY[0x19AEA53F4](*a1, v7, v9) & 1) == 0)
      JUMPOUT(0x19AEA53F4);
    return 1;
  }
  if (a2 == 1)
  {
    v3 = &WebCore::ContentSecurityPolicyDirectiveNames::scriptSrc;
    goto LABEL_13;
  }
  return 0;
}

WebCore::RenderObject *WebCore::RenderView::updatePlayStateForAllAnimations(WebCore::RenderView *this, const WebCore::IntRect *a2)
{
  int v4;
  WebCore::RenderObject *result;
  WebCore::RenderElement *v6;
  WebCore::RenderObject *v7;
  uint64_t v8;
  char isVisibleInDocumentRect;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  WTF::MonotonicTime *v14;
  void *v15;
  const WebCore::RenderObject *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::MonotonicTime *v19;
  _BYTE v20[24];
  _QWORD v21[4];
  __int16 v22;
  WebCore::RenderView *v23;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                                                  + 40)
                                                                                      + 8)
                                                                          + 528)
                                                              + 8)
                                                  + 24)
                                      + 8)
                          + 545);
  v23 = this;
  result = (WebCore::RenderObject *)WebCore::RenderDescendantIteratorAdapter<WebCore::RenderElement>::begin((uint64_t *)&v23);
  if (v6)
  {
    v7 = result;
    v8 = (uint64_t)v6;
    do
    {
      v22 = 0;
      if (v4)
        isVisibleInDocumentRect = WebCore::RenderElement::isVisibleInDocumentRect((WebCore::RenderElement *)v8, a2);
      else
        isVisibleInDocumentRect = 0;
      LOBYTE(v22) = isVisibleInDocumentRect;
      v21[0] = v8;
      v21[1] = &v22;
      v21[2] = this;
      v21[3] = (char *)&v22 + 1;
      for (i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 88) + 16) + 8); i; i = *(_QWORD *)(i + 8))
      {
        v11 = *(_QWORD *)(i + 16);
        if (v11)
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 200))(v11);
        else
          v12 = 0;
        WebCore::RenderView::updatePlayStateForAllAnimations(WebCore::IntRect const&)::$_0::operator()((WTF *)v21, v12);
      }
      if ((*(_BYTE *)(v8 + 52) & 7) == 3 && (*(_BYTE *)(v8 + 53) & 1) != 0)
      {
        v17 = *(_QWORD *)(*(_QWORD *)(v8 + 224) + 24);
        if (v17)
          v18 = *(_QWORD *)(v17 + 8);
        else
          v18 = 0;
        WebCore::RenderView::updatePlayStateForAllAnimations(WebCore::IntRect const&)::$_0::operator()((WTF *)v21, v18);
      }
      if (HIBYTE(v22))
        WebCore::RenderObject::repaint(v8, 0);
      v14 = (WTF::MonotonicTime *)WebCore::svgSvgElementFrom((WebCore *)v8, v6);
      if (v14)
      {
        v19 = v14;
        if ((_BYTE)v22)
        {
          WebCore::SVGSVGElement::unpauseAnimations(v14, v15);
          WTF::WeakHashSet<WebCore::SVGSVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::SVGSVGElement>((uint64_t)this + 464, v19);
        }
        else
        {
          WebCore::SVGSVGElement::pauseAnimations(v14, v15);
          WTF::WeakHashSet<WebCore::SVGSVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::SVGSVGElement>((uint64_t)this + 464, v19, (uint64_t)v20);
        }
      }
      result = (WebCore::RenderObject *)WebCore::RenderTraversal::next<WebCore::RenderElement,WebCore::RenderElement>(v8, v7, v16);
      v8 = (uint64_t)result;
    }
    while (result);
  }
  return result;
}

uint64_t WebCore::RenderTraversal::next<WebCore::RenderElement,WebCore::RenderElement>(uint64_t a1, WebCore::RenderObject *a2, const WebCore::RenderObject *a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = WebCore::RenderObjectTraversal::next<WebCore::RenderElement>(a1, a2, a3);
  if (!v4)
    return 0;
  while ((*(_BYTE *)(v4 + 45) & 2) != 0)
  {
    v4 = WebCore::RenderObjectTraversal::next<WebCore::RenderObject>(v4, (uint64_t)a2);
    v5 = 0;
    if (!v4)
      return v5;
  }
  return v4;
}

uint64_t WebCore::RenderObjectTraversal::next<WebCore::RenderElement>(uint64_t a1, WebCore::RenderObject *a2, const WebCore::RenderObject *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *(unsigned int *)(a1 + 64);
  if (v3 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
  {
    v4 = *(_QWORD *)((v3 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
    if (v4)
      return v4;
  }
  if ((WebCore::RenderObject *)a1 == a2)
    return 0;
  v6 = *(unsigned int *)(a1 + 47);
  if (v6 | ((unint64_t)*(unsigned __int8 *)(a1 + 51) << 32))
  {
    v4 = *(_QWORD *)((v6 | ((unint64_t)*(unsigned __int8 *)(a1 + 51) << 32)) + 8);
    if (v4)
      return v4;
  }
  return WebCore::RenderObjectTraversal::nextAncestorSibling((WebCore::RenderObjectTraversal *)a1, a2, a3);
}

uint64_t WebCore::svgSvgElementFrom(WebCore *this, WebCore::RenderElement *a2)
{
  uint64_t result;
  int v4;

  result = WebCore::RenderElement::element(this);
  if (!result
    || (*(_WORD *)(result + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    v4 = *((unsigned __int8 *)this + 46);
    if (v4 == 103)
    {
      return WebCore::LegacyRenderSVGRoot::svgSVGElement(this);
    }
    else if (v4 == 83)
    {
      return WebCore::RenderSVGRoot::svgSVGElement(this);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::RenderObjectTraversal::next<WebCore::RenderObject>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  if (!result)
  {
    if (a1 == a2)
      return 0;
    v5 = *(unsigned int *)(a1 + 47);
    if (v5 | ((unint64_t)*(unsigned __int8 *)(a1 + 51) << 32))
    {
      result = *(_QWORD *)((v5 | ((unint64_t)*(unsigned __int8 *)(a1 + 51) << 32)) + 8);
      if (result)
        return result;
    }
    v6 = *(_QWORD *)(a1 + 32);
    if (!v6)
      return 0;
    v7 = *(_QWORD *)(v6 + 8);
    if (!v7 || v7 == a2)
      return 0;
    do
    {
      v9 = *(unsigned int *)(v7 + 47);
      if (v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32))
      {
        result = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) + 8);
        if (result)
          break;
      }
      v10 = *(_QWORD *)(v7 + 32);
      if (!v10)
        return 0;
      result = 0;
      v7 = *(_QWORD *)(v10 + 8);
    }
    while (v7 && v7 != a2);
  }
  return result;
}

uint64_t WebCore::RenderDescendantIteratorAdapter<WebCore::RenderElement>::begin(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v1 = *a1;
  if (*(unsigned int *)(*a1 + 64) | ((unint64_t)*(unsigned __int8 *)(*a1 + 68) << 32))
  {
    v2 = *(_QWORD *)((*(unsigned int *)(*a1 + 64) | ((unint64_t)*(unsigned __int8 *)(*a1 + 68) << 32)) + 8);
    if (v2)
    {
      if ((*(_BYTE *)(v2 + 45) & 2) != 0)
      {
        do
        {
          v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 112))(v2);
          if (!v5)
          {
            if (v2 == v1)
              return v1;
            v4 = *(unsigned int *)(v2 + 47);
            if (!(v4 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32))
              || (v5 = *(_QWORD *)((v4 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)) + 8)) == 0)
            {
              v6 = *(_QWORD *)(v2 + 32);
              if (!v6)
                return v1;
              v7 = *(_QWORD *)(v6 + 8);
              if (!v7 || v7 == v1)
                return v1;
              while (1)
              {
                v9 = *(unsigned int *)(v7 + 47);
                if (v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32))
                {
                  v5 = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) + 8);
                  if (v5)
                    break;
                }
                v10 = *(_QWORD *)(v7 + 32);
                if (v10)
                {
                  v7 = *(_QWORD *)(v10 + 8);
                  if (v7 && v7 != v1)
                    continue;
                }
                return v1;
              }
            }
          }
          v2 = v5;
        }
        while ((*(_BYTE *)(v5 + 45) & 2) != 0);
      }
    }
  }
  return v1;
}

uint64_t WebCore::RenderObjectTraversal::nextAncestorSibling(WebCore::RenderObjectTraversal *this, WebCore::RenderObject *a2, const WebCore::RenderObject *a3)
{
  uint64_t v3;
  WebCore::RenderObject *v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 4);
  if (!v3)
    return 0;
  v4 = *(WebCore::RenderObject **)(v3 + 8);
  if (!v4 || v4 == a2)
    return 0;
  do
  {
    v7 = *(unsigned int *)((char *)v4 + 47);
    if (v7 | ((unint64_t)*((unsigned __int8 *)v4 + 51) << 32))
    {
      result = *(_QWORD *)((v7 | ((unint64_t)*((unsigned __int8 *)v4 + 51) << 32)) + 8);
      if (result)
        break;
    }
    v8 = *((_QWORD *)v4 + 4);
    if (!v8)
      return 0;
    result = 0;
    v4 = *(WebCore::RenderObject **)(v8 + 8);
  }
  while (v4 && v4 != a2);
  return result;
}

void WebCore::RenderView::styleDidChange(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  unsigned int v11;

  WebCore::RenderBlockFlow::styleDidChange(a1, a2, a3);
  if (a3)
  {
    v5 = *(unsigned __int8 *)(a3 + 43);
    v6 = ((*(unsigned __int8 *)(a1 + 123) ^ v5) >> 2) & 1;
    v7 = (((unsigned __int16)*(_DWORD *)(a3 + 44) ^ (unsigned __int16)*(_DWORD *)(a1 + 124)) & 0xE000) == 0 && v6 == 0;
    if (!v7 && (v8 = *(_QWORD *)(a1 + 224)) != 0 && (v9 = *(_QWORD *)(v8 + 24)) != 0 && *(_QWORD *)(v9 + 8))
    {
      v11 = ((*(unsigned __int8 *)(a1 + 123) ^ v5) >> 2) & 1;
      if (*(_BYTE *)WebCore::LocalFrameView::pagination(*(WebCore::LocalFrameView **)(a1 + 248)))
        WebCore::RenderBlockFlow::updateColumnProgressionFromStyle(a1, (const WebCore::RenderStyle *)(a1 + 80));
      WebCore::RenderBlockFlow::updateStylesForColumnChildren((WebCore::RenderBlockFlow *)a1, (const WebCore::RenderStyle *)a3, v10);
      if ((v11 & 1) != 0)
        goto LABEL_15;
    }
    else if (v6)
    {
LABEL_15:
      WebCore::LocalFrameView::topContentDirectionDidChange(*(_QWORD *)(a1 + 248));
    }
  }
}

void WebCore::RenderBlockFlow::styleDidChange(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  int v4;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t k;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  __int16 v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  uint64_t v30;
  float v31;
  float v32;
  int v33;
  WebCore::Length *v34;
  float v35;
  float v36;
  int v37;
  WebCore::Length *v38;
  float v39;
  float v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v46;
  _QWORD *v47;
  uint64_t v49;
  BOOL v50;
  int v51;
  _QWORD *v52;
  unsigned int v54;
  int v55;
  const WebCore::Element *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  const WebCore::Element *v64;
  void *v65;
  uint64_t v66;
  int v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t v70;
  WebCore::RenderBlockFlow *v71;
  WebCore::RenderBlockFlow *v72;
  _QWORD *v73;
  const WebCore::RenderObject *v74;
  int v75;
  const WebCore::RenderObject *v76;
  int v77;
  uint64_t v78;
  WebCore::RenderObject *v79;
  int v80;
  int v81;
  _BOOL4 hasTransformRelatedProperty;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  char isCalculatedEqual;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  float v97;
  float v98;
  WTF *v99;
  WebCore::RenderObject *j;
  unint64_t v101;
  int v102;

  v4 = (int)a2;
  WebCore::RenderBox::styleDidChange(a1, a2, a3);
  if (!a3)
  {
    v19 = *(unsigned __int8 *)(a1 + 68);
    for (i = *(unsigned int *)(a1 + 64); ; i = *(unsigned int *)(v22 + 47))
    {
      v21 = i | (v19 << 32);
      if (!v21)
        goto LABEL_15;
      v22 = *(_QWORD *)(v21 + 8);
      if (!v22)
        goto LABEL_15;
      v23 = *(_BYTE *)(v22 + 45);
      if ((v23 & 2) == 0)
        break;
      v19 = *(unsigned __int8 *)(v22 + 51);
    }
LABEL_26:
    v24 = *(_DWORD *)(v22 + 16) + 1;
    *(_DWORD *)(v22 + 16) = v24;
    if ((v23 & 1) == 0
      || (v23 & 0x40) == 0
      || (v49 = *(_QWORD *)(v22 + 96), (v49 & 0xF80000000000) != 0)
      || ((*(_BYTE *)(v22 + 52) & 7) == 1 ? (v50 = (*(_BYTE *)(v22 + 53) & 2) == 0) : (v50 = 1), !v50))
    {
LABEL_27:
      if (!v24)
      {
        __break(0xC471u);
        JUMPOUT(0x19430399CLL);
      }
      *(_DWORD *)(v22 + 16) = v24 - 1;
      while (1)
      {
        v25 = *(unsigned int *)(v22 + 47);
        if (!(v25 | ((unint64_t)*(unsigned __int8 *)(v22 + 51) << 32)))
          goto LABEL_15;
        v22 = *(_QWORD *)((v25 | ((unint64_t)*(unsigned __int8 *)(v22 + 51) << 32)) + 8);
        if (!v22)
          goto LABEL_15;
        v23 = *(_BYTE *)(v22 + 45);
        if ((v23 & 2) == 0)
          goto LABEL_26;
      }
    }
    v51 = v49 & 0x1F;
    v52 = (_QWORD *)(a1 + 80);
    if (v51 == 24 || v51 == 22)
    {
      WebCore::RenderStyle::createAnonymousStyleWithDisplay(v52, (WTF::StringImpl *)(*(_QWORD *)(v22 + 96) & 0x1FLL), v6, (uint64_t)&v99);
      v101 = v101 & 0xFFFFFFFFFE3FFFFFLL | 0xC00000;
      if (v51 == 24)
        v102 |= 0x40000000u;
    }
    else
    {
      WebCore::RenderStyle::createAnonymousStyleWithDisplay(v52, (WTF::StringImpl *)(*(_QWORD *)(v22 + 96) & 0x1FLL), v6, (uint64_t)&v99);
    }
    v62 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 24) + 56);
    if ((~v62 & 3) != 0)
      goto LABEL_209;
    v63 = (v62 >> 4) & 3;
    if (v63 == 2)
      goto LABEL_119;
    v96 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
    if ((v96 - 2) < 2 || v96 == 4 || v96 == 5)
    {
      if (!v63)
        goto LABEL_209;
    }
    else if (v63)
    {
LABEL_209:
      if (WebCore::RenderStyle::specifiesColumns((WebCore::RenderStyle *)(v22 + 80)))
        WebCore::RenderStyle::inheritColumnPropertiesFrom(&v99, (const WebCore::RenderStyle *)(a1 + 80));
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 88) + 32) + 24) + 56) & 8) != 0)
        WebCore::RenderStyle::setColumnSpan((uint64_t)&v99, 1);
    }
LABEL_119:
    if ((*(_BYTE *)(v22 + 22) & 0x80) != 0 && (*(_WORD *)(v22 + 69) & 0x20) != 0)
      v101 = v101 & 0xFFFFFFFFFFC7FFFFLL | (((*(_QWORD *)(v22 + 96) >> 19) & 7) << 19);
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)a1 + 712))(a1, &v99);
    WebCore::RenderElement::setStyle(v22, (WebCore::Style *)&v99, 0, v64);
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v99, v65);
    v24 = *(_DWORD *)(v22 + 16);
    goto LABEL_27;
  }
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    if (((*(_DWORD *)(a1 + 96) ^ *(_DWORD *)(a3 + 16)) & 0x380000) != 0)
      goto LABEL_144;
    hasTransformRelatedProperty = WebCore::RenderStyle::hasTransformRelatedProperty((WebCore::RenderStyle *)a3);
    if (hasTransformRelatedProperty != WebCore::RenderStyle::hasTransformRelatedProperty((WebCore::RenderStyle *)(a1 + 80)))
      goto LABEL_144;
    v83 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 40);
    v84 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 40);
    if (*(_QWORD *)(v83 + 200) != *(_QWORD *)(v84 + 200)
      || (*(_DWORD *)(*(_QWORD *)(v83 + 72) + 20) != 0) != (*(_DWORD *)(*(_QWORD *)(v84 + 72) + 20) != 0))
    {
      goto LABEL_144;
    }
    v85 = *(unsigned __int8 *)(v83 + 462);
    v86 = *(_BYTE *)(v83 + 642) & 3;
    if (v86 == 2)
    {
      v87 = 25;
    }
    else
    {
      v87 = *(unsigned __int8 *)(v83 + 462);
      if (v86 == 1)
        v87 = 21;
    }
    v88 = *(unsigned __int8 *)(v84 + 462);
    v89 = *(_BYTE *)(v84 + 642) & 3;
    if ((v89 - 1) <= 1)
    {
      if ((v87 & 1) == 0)
        goto LABEL_144;
    }
    else if (((v87 ^ v88) & 1) != 0)
    {
      goto LABEL_144;
    }
    if (v86 == 2)
    {
      v85 |= 0x19u;
    }
    else if (v86 == 1)
    {
      v85 = 21;
    }
    if (v89 == 2)
    {
      LOBYTE(v88) = v88 | 0x19;
    }
    else if (v89 == 1)
    {
      if ((v85 & 4) != 0)
        goto LABEL_3;
      goto LABEL_144;
    }
    if (((v85 >> 2) & 1) == (v88 & 4) >> 2)
      goto LABEL_3;
LABEL_144:
    if ((*(_BYTE *)(a1 + 45) & 0x40) != 0)
    {
      ++*(_DWORD *)(a1 + 16);
      WebCore::RenderBlock::resetEnclosingFragmentedFlowAndChildInfoIncludingDescendants(a1, 0);
      v75 = *(_DWORD *)(a1 + 16);
      if (!v75)
      {
        __break(0xC471u);
        JUMPOUT(0x194303DA8);
      }
      *(_DWORD *)(a1 + 16) = v75 - 1;
    }
    else
    {
      v99 = (WTF *)a1;
      v92 = WebCore::RenderDescendantIteratorAdapter<WebCore::RenderBlock>::begin((uint64_t *)&v99);
      if (v74)
      {
        v93 = v92;
        v94 = (uint64_t)v74;
        do
        {
          ++*(_DWORD *)(v94 + 16);
          WebCore::RenderBlock::resetEnclosingFragmentedFlowAndChildInfoIncludingDescendants(v94, 0);
          v95 = *(_DWORD *)(v94 + 16);
          if (!v95)
          {
            __break(0xC471u);
            JUMPOUT(0x194303F50);
          }
          *(_DWORD *)(v94 + 16) = v95 - 1;
          v94 = WebCore::RenderTraversal::next<WebCore::RenderBlock,WebCore::RenderBlock>(v94, v93);
        }
        while (v94);
      }
    }
    if (WebCore::RenderObject::computedFragmentedFlowState((WebCore::RenderObject *)a1, v74))
      v77 = 0x10000000;
    else
      v77 = 0;
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xEFFFFFFF | v77;
    v78 = *(unsigned int *)(a1 + 64);
    if (v78 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
    {
      v79 = *(WebCore::RenderObject **)((v78 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
      v99 = (WTF *)a1;
      for (j = v79; j; v79 = j)
      {
        ++*((_DWORD *)v79 + 4);
        if (WebCore::RenderObject::computedFragmentedFlowState(v79, v76))
          v80 = 0x10000000;
        else
          v80 = 0;
        v81 = *((_DWORD *)v79 + 4);
        *((_DWORD *)v79 + 5) = *((_DWORD *)v79 + 5) & 0xEFFFFFFF | v80;
        if (!v81)
        {
          __break(0xC471u);
          JUMPOUT(0x194303CCCLL);
        }
        *((_DWORD *)v79 + 4) = v81 - 1;
        WebCore::RenderDescendantIterator<WebCore::RenderObject>::operator++((uint64_t *)&v99);
      }
    }
  }
LABEL_3:
  v7 = *(unsigned __int8 *)(a1 + 68);
  for (k = *(unsigned int *)(a1 + 64); ; k = *(unsigned int *)(v10 + 47))
  {
    v9 = k | (v7 << 32);
    if (!v9)
      break;
    v10 = *(_QWORD *)(v9 + 8);
    if (!v10)
      break;
    v11 = *(_BYTE *)(v10 + 45);
    if ((v11 & 2) == 0)
    {
LABEL_7:
      v12 = *(_DWORD *)(v10 + 16) + 1;
      *(_DWORD *)(v10 + 16) = v12;
      if ((v11 & 1) == 0)
        goto LABEL_8;
      if ((v11 & 0x40) == 0)
        goto LABEL_8;
      v44 = *(_QWORD *)(v10 + 96);
      if ((v44 & 0xF80000000000) != 0)
        goto LABEL_8;
      if ((*(_BYTE *)(v10 + 52) & 7) == 1 && (*(_BYTE *)(v10 + 53) & 2) != 0)
        goto LABEL_8;
      v46 = v44 & 0x1F;
      v47 = (_QWORD *)(a1 + 80);
      if (v46 == 24 || v46 == 22)
      {
        WebCore::RenderStyle::createAnonymousStyleWithDisplay(v47, (WTF::StringImpl *)(*(_QWORD *)(v10 + 96) & 0x1FLL), v6, (uint64_t)&v99);
        v101 = v101 & 0xFFFFFFFFFE3FFFFFLL | 0xC00000;
        if (v46 == 24)
          v102 |= 0x40000000u;
      }
      else
      {
        WebCore::RenderStyle::createAnonymousStyleWithDisplay(v47, (WTF::StringImpl *)(*(_QWORD *)(v10 + 96) & 0x1FLL), v6, (uint64_t)&v99);
      }
      v54 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 24) + 56);
      if ((~v54 & 3) != 0)
        goto LABEL_183;
      v55 = (v54 >> 4) & 3;
      if (v55 == 2)
        goto LABEL_106;
      v91 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
      if ((v91 - 2) < 2 || v91 == 4 || v91 == 5)
      {
        if (!v55)
          goto LABEL_183;
      }
      else if (v55)
      {
LABEL_183:
        if (WebCore::RenderStyle::specifiesColumns((WebCore::RenderStyle *)(v10 + 80)))
          WebCore::RenderStyle::inheritColumnPropertiesFrom(&v99, (const WebCore::RenderStyle *)(a1 + 80));
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 32) + 24) + 56) & 8) != 0)
          WebCore::RenderStyle::setColumnSpan((uint64_t)&v99, 1);
      }
LABEL_106:
      if ((*(_BYTE *)(v10 + 22) & 0x80) != 0 && (*(_WORD *)(v10 + 69) & 0x20) != 0)
        v101 = v101 & 0xFFFFFFFFFFC7FFFFLL | (((*(_QWORD *)(v10 + 96) >> 19) & 7) << 19);
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)a1 + 712))(a1, &v99);
      WebCore::RenderElement::setStyle(v10, (WebCore::Style *)&v99, 0, v56);
      WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v99, v57);
      v12 = *(_DWORD *)(v10 + 16);
LABEL_8:
      if (!v12)
      {
        __break(0xC471u);
        JUMPOUT(0x1943038C4);
      }
      *(_DWORD *)(v10 + 16) = v12 - 1;
      while (1)
      {
        v13 = *(unsigned int *)(v10 + 47);
        if (!(v13 | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32)))
          goto LABEL_14;
        v10 = *(_QWORD *)((v13 | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32)) + 8);
        if (!v10)
          goto LABEL_14;
        v11 = *(_BYTE *)(v10 + 45);
        if ((v11 & 2) == 0)
          goto LABEL_7;
      }
    }
    v7 = *(unsigned __int8 *)(v10 + 51);
  }
LABEL_14:
  if (v4 != 8 || (*(_BYTE *)(a1 + 20) & 0xF8) == 0)
    goto LABEL_15;
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
  {
    v97 = WebCore::RenderStyle::borderTopWidth((WebCore::RenderStyle *)a3);
    if (v97 == WebCore::RenderStyle::borderTopWidth((WebCore::RenderStyle *)(a1 + 80)))
    {
      v98 = WebCore::RenderStyle::borderBottomWidth((WebCore::RenderStyle *)a3);
      if (v98 == WebCore::RenderStyle::borderBottomWidth((WebCore::RenderStyle *)(a1 + 80))
        && (WebCore::Length::operator==((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 24) + 72), (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24) + 72)) & 1) != 0)
      {
        isCalculatedEqual = WebCore::Length::operator==((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 24) + 88), (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24) + 88));
        goto LABEL_176;
      }
    }
    goto LABEL_214;
  }
  v27 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 24);
  v28 = 0.0;
  v29 = 0.0;
  if ((*(_BYTE *)(v27 + 124) & 0xE) != 0)
  {
    v58 = *(_QWORD *)(v27 + 200);
    if (*(_BYTE *)(v58 + 5) && *(_BYTE *)(v58 + 76) == 4)
    {
      if (*(_BYTE *)(v58 + 78))
        v29 = *(float *)(v58 + 72);
      else
        v29 = (float)*(int *)(v58 + 72);
    }
    else
    {
      v29 = *(float *)(v27 + 120);
    }
  }
  v30 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
  if ((*(_BYTE *)(v30 + 124) & 0xE) != 0)
  {
    v59 = *(_QWORD *)(v30 + 200);
    if (*(_BYTE *)(v59 + 5) && *(_BYTE *)(v59 + 76) == 4)
    {
      if (*(_BYTE *)(v59 + 78))
        v28 = *(float *)(v59 + 72);
      else
        v28 = (float)*(int *)(v59 + 72);
    }
    else
    {
      v28 = *(float *)(v30 + 120);
    }
  }
  if (v29 != v28)
    goto LABEL_214;
  v31 = 0.0;
  v32 = 0.0;
  if ((*(_BYTE *)(v27 + 148) & 0xE) != 0)
  {
    v60 = *(_QWORD *)(v27 + 200);
    if (*(_BYTE *)(v60 + 5) && *(_BYTE *)(v60 + 60) == 4)
    {
      if (*(_BYTE *)(v60 + 62))
        v32 = *(float *)(v60 + 56);
      else
        v32 = (float)*(int *)(v60 + 56);
    }
    else
    {
      v32 = *(float *)(v27 + 144);
    }
  }
  if ((*(_BYTE *)(v30 + 148) & 0xE) != 0)
  {
    v61 = *(_QWORD *)(v30 + 200);
    if (*(_BYTE *)(v61 + 5) && *(_BYTE *)(v61 + 60) == 4)
    {
      if (*(_BYTE *)(v61 + 62))
        v31 = *(float *)(v61 + 56);
      else
        v31 = (float)*(int *)(v61 + 56);
    }
    else
    {
      v31 = *(float *)(v30 + 144);
    }
  }
  if (v32 != v31)
    goto LABEL_214;
  v33 = *(unsigned __int8 *)(v27 + 100);
  if (v33 != *(unsigned __int8 *)(v30 + 100) || (*(_BYTE *)(v27 + 101) != 0) != (*(_BYTE *)(v30 + 101) != 0))
    goto LABEL_214;
  if (v33 == 13)
    goto LABEL_55;
  v34 = (WebCore::Length *)(v27 + 96);
  if (v33 == 11)
  {
    if (WebCore::Length::isCalculatedEqual(v34, (const WebCore::Length *)(v30 + 96)))
    {
      v27 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 24);
      v30 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
      goto LABEL_55;
    }
LABEL_214:
    v15 = *(_WORD *)(a1 + 69);
    goto LABEL_215;
  }
  if (*(_BYTE *)(v27 + 102))
    v35 = *(float *)v34;
  else
    v35 = (float)*(int *)v34;
  v36 = *(float *)(v30 + 96);
  if (!*(_BYTE *)(v30 + 102))
    v36 = (float)SLODWORD(v36);
  if (v35 != v36)
    goto LABEL_214;
LABEL_55:
  v37 = *(unsigned __int8 *)(v27 + 84);
  if (v37 != *(unsigned __int8 *)(v30 + 84) || (*(_BYTE *)(v27 + 85) != 0) != (*(_BYTE *)(v30 + 85) != 0))
    goto LABEL_214;
  if (v37 != 13)
  {
    v38 = (WebCore::Length *)(v27 + 80);
    if (v37 != 11)
    {
      if (*(_BYTE *)(v27 + 86))
        v39 = *(float *)v38;
      else
        v39 = (float)*(int *)v38;
      v40 = *(float *)(v30 + 80);
      if (!*(_BYTE *)(v30 + 86))
        v40 = (float)SLODWORD(v40);
      v15 = *(_WORD *)(a1 + 69);
      if (v39 == v40)
        goto LABEL_64;
      goto LABEL_215;
    }
    isCalculatedEqual = WebCore::Length::isCalculatedEqual(v38, (const WebCore::Length *)(v30 + 80));
LABEL_176:
    v15 = *(_WORD *)(a1 + 69);
    if ((isCalculatedEqual & 1) != 0)
    {
LABEL_64:
      v14 = 0;
      goto LABEL_16;
    }
LABEL_215:
    v14 = 512;
    goto LABEL_16;
  }
LABEL_15:
  v14 = 0;
  v15 = *(_WORD *)(a1 + 69);
LABEL_16:
  LOBYTE(v16) = 0;
  *(_WORD *)(a1 + 69) = v14 | v15 & 0xFDFF;
  v17 = *(_DWORD *)(a1 + 20);
  if ((v17 & 0x800) == 0 && (v17 & 0x1800000) != 0x1000000)
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1504))(a1) ^ 1;
  if (v4 == 8)
  {
    if (WebCore::RenderBlock::s_canPropagateFloatIntoSibling)
      v41 = v16;
    else
      v41 = 1;
    if ((v41 & 1) == 0)
    {
      v66 = *(_QWORD *)(a1 + 32);
      if (v66)
      {
        if (*(_QWORD *)(v66 + 8) && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1672))(a1))
        {
          v67 = WebCore::RenderBlockFlow::lowestFloatLogicalBottom(a1, 3u);
          v68 = (_DWORD *)(((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4 ? a1 + 160 : a1 + 164);
          if (v67 > *v68)
          {
            v69 = *(_QWORD *)(a1 + 216);
            v70 = WebCore::ancestorsOfType<WebCore::RenderBlockFlow>(a1);
            v99 = 0;
            j = (WebCore::RenderObject *)v70;
            v71 = (WebCore::RenderBlockFlow *)a1;
            if (v70)
            {
              v72 = (WebCore::RenderBlockFlow *)v70;
              v71 = (WebCore::RenderBlockFlow *)a1;
              do
              {
                if (*((_BYTE *)v72 + 46) == 49)
                  break;
                if (WebCore::RenderBlockFlow::hasOverhangingFloats(v72))
                {
                  v73 = *(_QWORD **)(v69 + 8);
                  if (v73)
                  {
                    while (!WebCore::RenderBlockFlow::hasOverhangingFloat(v72, *(WebCore::RenderBox **)(*(_QWORD *)*v73 + 8)))
                    {
                      v73 = (_QWORD *)v73[2];
                      if (!v73)
                        goto LABEL_137;
                    }
                    v71 = v72;
                  }
                }
LABEL_137:
                WebCore::RenderAncestorIterator<WebCore::RenderBlockFlow>::operator++((uint64_t)&v99);
                v72 = j;
              }
              while (j);
            }
            WebCore::RenderBlockFlow::markAllDescendantsWithFloatsForLayout(v71, 0, 1);
            WebCore::RenderBlockFlow::markSiblingsWithFloatsForLayout(v71, 0);
          }
        }
      }
    }
    if ((~*(_DWORD *)(a1 + 20) & 0x40008) == 0)
    {
      v42 = *(unsigned int *)(a1 + 64);
      if (v42 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
      {
        v43 = *(_QWORD *)((v42 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
        v99 = (WTF *)a1;
        j = (WebCore::RenderObject *)v43;
        if (v43)
        {
          do
          {
            WebCore::RenderObject::setPreferredLogicalWidthsDirty(v43, 1, 1);
            WebCore::InlineWalker::advance((WebCore::InlineWalker *)&v99);
            v43 = (uint64_t)j;
          }
          while (j);
        }
      }
    }
  }
  v18 = *(_QWORD *)(a1 + 224);
  if (v18)
  {
    v26 = *(_QWORD *)(v18 + 24);
    if (v26)
    {
      if (*(_QWORD *)(v26 + 8))
        WebCore::RenderBlockFlow::updateStylesForColumnChildren((WebCore::RenderBlockFlow *)a1, (const WebCore::RenderStyle *)a3, v6);
    }
  }
}

void WebCore::RenderBlock::styleDidChange(uint64_t a1, WTF::StringImpl *a2, const WebCore::RenderStyle *a3)
{
  int v4;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  __int16 v8;
  __int16 v9;
  _WORD *v10;
  __int16 v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;
  int v18;
  WebCore::Length *v19;
  float v20;
  float v21;
  int v22;
  WebCore::Length *v23;
  float v24;
  float v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isCalculatedEqual;
  __int16 v32;
  float v33;
  __int16 v34;
  float v35;

  v4 = (int)a2;
  WebCore::RenderBox::styleDidChange(a1, a2, (uint64_t)a3);
  if (!a3)
  {
    WebCore::RenderElement::propagateStyleToAnonymousChildren(a1, 1, v6);
    goto LABEL_3;
  }
  WebCore::RenderElement::adjustFragmentedFlowStateOnContainingBlockChangeIfNeeded((uint64_t *)a1, a3, (const WebCore::RenderStyle *)(a1 + 80));
  WebCore::RenderElement::propagateStyleToAnonymousChildren(a1, 1, v7);
  if (v4 != 8 || (*(_BYTE *)(a1 + 20) & 0xF8) == 0)
    goto LABEL_3;
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
  {
    v33 = WebCore::RenderStyle::borderTopWidth(a3);
    if (v33 == WebCore::RenderStyle::borderTopWidth((WebCore::RenderStyle *)(a1 + 80)))
    {
      v35 = WebCore::RenderStyle::borderBottomWidth(a3);
      if (v35 == WebCore::RenderStyle::borderBottomWidth((WebCore::RenderStyle *)(a1 + 80))
        && (WebCore::Length::operator==((unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 24) + 72), (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24) + 72)) & 1) != 0)
      {
        isCalculatedEqual = WebCore::Length::operator==((unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 24) + 88), (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24) + 88));
        goto LABEL_46;
      }
    }
    goto LABEL_61;
  }
  v12 = *(_QWORD *)(*((_QWORD *)a3 + 1) + 24);
  v13 = 0.0;
  v14 = 0.0;
  if ((*(_BYTE *)(v12 + 124) & 0xE) != 0)
  {
    v27 = *(_QWORD *)(v12 + 200);
    if (*(_BYTE *)(v27 + 5) && *(_BYTE *)(v27 + 76) == 4)
    {
      if (*(_BYTE *)(v27 + 78))
        v14 = *(float *)(v27 + 72);
      else
        v14 = (float)*(int *)(v27 + 72);
    }
    else
    {
      v14 = *(float *)(v12 + 120);
    }
  }
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
  if ((*(_BYTE *)(v15 + 124) & 0xE) != 0)
  {
    v28 = *(_QWORD *)(v15 + 200);
    if (*(_BYTE *)(v28 + 5) && *(_BYTE *)(v28 + 76) == 4)
    {
      if (*(_BYTE *)(v28 + 78))
        v13 = *(float *)(v28 + 72);
      else
        v13 = (float)*(int *)(v28 + 72);
    }
    else
    {
      v13 = *(float *)(v15 + 120);
    }
  }
  if (v14 != v13)
    goto LABEL_61;
  v16 = 0.0;
  v17 = 0.0;
  if ((*(_BYTE *)(v12 + 148) & 0xE) != 0)
  {
    v29 = *(_QWORD *)(v12 + 200);
    if (*(_BYTE *)(v29 + 5) && *(_BYTE *)(v29 + 60) == 4)
    {
      if (*(_BYTE *)(v29 + 62))
        v17 = *(float *)(v29 + 56);
      else
        v17 = (float)*(int *)(v29 + 56);
    }
    else
    {
      v17 = *(float *)(v12 + 144);
    }
  }
  if ((*(_BYTE *)(v15 + 148) & 0xE) != 0)
  {
    v30 = *(_QWORD *)(v15 + 200);
    if (*(_BYTE *)(v30 + 5) && *(_BYTE *)(v30 + 60) == 4)
    {
      if (*(_BYTE *)(v30 + 62))
        v16 = *(float *)(v30 + 56);
      else
        v16 = (float)*(int *)(v30 + 56);
    }
    else
    {
      v16 = *(float *)(v15 + 144);
    }
  }
  if (v17 != v16)
    goto LABEL_61;
  v18 = *(unsigned __int8 *)(v12 + 100);
  if (v18 != *(unsigned __int8 *)(v15 + 100) || (*(_BYTE *)(v12 + 101) != 0) != (*(_BYTE *)(v15 + 101) != 0))
    goto LABEL_61;
  if (v18 == 13)
    goto LABEL_23;
  v19 = (WebCore::Length *)(v12 + 96);
  if (v18 == 11)
  {
    if (WebCore::Length::isCalculatedEqual(v19, (const WebCore::Length *)(v15 + 96)))
    {
      v12 = *(_QWORD *)(*((_QWORD *)a3 + 1) + 24);
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
      goto LABEL_23;
    }
LABEL_61:
    v34 = *(_WORD *)(a1 + 69);
    v10 = (_WORD *)(a1 + 69);
    v9 = v34;
    goto LABEL_62;
  }
  if (*(_BYTE *)(v12 + 102))
    v20 = *(float *)v19;
  else
    v20 = (float)*(int *)v19;
  v21 = *(float *)(v15 + 96);
  if (!*(_BYTE *)(v15 + 102))
    v21 = (float)SLODWORD(v21);
  if (v20 != v21)
    goto LABEL_61;
LABEL_23:
  v22 = *(unsigned __int8 *)(v12 + 84);
  if (v22 != *(unsigned __int8 *)(v15 + 84) || (*(_BYTE *)(v12 + 85) != 0) != (*(_BYTE *)(v15 + 85) != 0))
    goto LABEL_61;
  if (v22 != 13)
  {
    v23 = (WebCore::Length *)(v12 + 80);
    if (v22 != 11)
    {
      if (*(_BYTE *)(v12 + 86))
        v24 = *(float *)v23;
      else
        v24 = (float)*(int *)v23;
      v25 = *(float *)(v15 + 80);
      if (!*(_BYTE *)(v15 + 86))
        v25 = (float)*(int *)(v15 + 80);
      v26 = *(_WORD *)(a1 + 69);
      v10 = (_WORD *)(a1 + 69);
      v9 = v26;
      if (v24 == v25)
        goto LABEL_32;
      goto LABEL_62;
    }
    isCalculatedEqual = WebCore::Length::isCalculatedEqual(v23, (const WebCore::Length *)(v15 + 80));
LABEL_46:
    v32 = *(_WORD *)(a1 + 69);
    v10 = (_WORD *)(a1 + 69);
    v9 = v32;
    if ((isCalculatedEqual & 1) != 0)
    {
LABEL_32:
      v8 = 0;
      goto LABEL_4;
    }
LABEL_62:
    v8 = 512;
    goto LABEL_4;
  }
LABEL_3:
  v8 = 0;
  v11 = *(_WORD *)(a1 + 69);
  v10 = (_WORD *)(a1 + 69);
  v9 = v11;
LABEL_4:
  *v10 = v8 | v9 & 0xFDFF;
}

void WebCore::RenderLayerModelObject::styleDidChange(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v6;
  WebCore::RenderObject *v7;
  void *v8;
  int v9;
  uint64_t v10;
  int v11;
  int v13;
  int v14;
  int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  float v20;
  float v21;
  int v22;
  float v23;
  float v24;
  int v25;
  float v26;
  float v27;
  int v28;
  float v29;
  float v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  int v33;
  float v34;
  float v35;
  int v36;
  float v37;
  float v38;
  int v39;
  float v40;
  float v41;
  int v42;
  float v43;
  float v44;
  char v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  WTF *v50;
  int v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WebCore::RenderLayer *v57;
  void *v58;
  WebCore::RenderLayer *v59;
  uint64_t v60;
  uint64_t v61;
  WebCore::RenderElement *v62;
  uint64_t v63;
  unint64_t i;
  uint64_t v65;
  uint64_t v66;
  WTF **v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  WebCore::RenderObject *v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::MonotonicTime *v84;
  double v85;
  WebCore::RenderLayer *v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  WebCore::RenderLayer *v90;
  uint64_t v91;
  const WebCore::RenderElement **Sibling;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WebCore::RenderLayerScrollableArea *v96;
  unsigned __int8 *v97;
  unsigned __int8 *v98;
  WebCore::RenderObject *v100;
  _BYTE v101[8];
  uint64_t v102;
  WTF *v103;
  __int128 v104;
  char v105;

  WebCore::RenderElement::styleDidChange((WebCore::RenderElement *)a1, a2, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 872))(a1);
  if (a3)
  {
    if ((*(_DWORD *)(a1 + 20) & 0x1800000) == 0x1000000)
    {
      v6 = *(_QWORD *)(a1 + 32);
      if (v6)
      {
        v7 = *(WebCore::RenderObject **)(v6 + 8);
        if (v7)
        {
          if (v7 != WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a1))
          {
            v70 = *(_QWORD *)(a1 + 96);
            v71 = *(_QWORD *)(a3 + 16);
            if (((v71 ^ v70) & 0x380000) == 0)
            {
              v72 = v70 >> 5;
              v73 = (v70 >> 5) & 0x1F;
              v74 = (v73 < 0x1A) & (0x3528029u >> v72);
              v75 = (v71 >> 5) & 0x1F;
              if (v75 <= 0x19 && ((1 << v75) & 0x3528029) != 0)
              {
                if ((v74 & 1) != 0)
                  goto LABEL_6;
              }
              else if (!v74)
              {
                goto LABEL_6;
              }
              if (v73 <= 0x19
                && ((1 << v73) & 0x3FBC03F) != 0
                && (v75 <= 0x17 && ((1 << v75) & 0xA94016) != 0 || v75 <= 0x19 && ((1 << v75) & 0x3528029) != 0))
              {
                v76 = *(_QWORD *)(a1 + 32);
                if (v76)
                  v77 = *(WebCore::RenderObject **)(v76 + 8);
                else
                  v77 = 0;
                WebCore::RenderElement::setChildNeedsLayout(v77, 1);
              }
            }
          }
        }
      }
    }
  }
LABEL_6:
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 800))(a1);
  v10 = *(_QWORD *)(a1 + 144);
  if (!v9)
  {
    if (!v10)
      goto LABEL_11;
    if (!*(_QWORD *)(v10 + 40))
    {
LABEL_151:
      v10 = *(_QWORD *)(a1 + 144);
      if (!v10)
        goto LABEL_11;
      goto LABEL_8;
    }
    if (a3 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) + 636) & 0x1F00000) != 0x100000)
      WebCore::RenderLayer::willRemoveChildWithBlendMode(v10);
    v46 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v46 & 0xFFEDFFFF;
    if ((v46 & 0x4000) != 0)
      goto LABEL_236;
    while (1)
    {
      v47 = *(_QWORD *)(a1 + 144);
      if ((*(_QWORD *)(v47 + 24) & 0x2000000030800) != 0x2000000010800)
        break;
      WebCore::RenderObject::containerForRepaint((_QWORD *)a1, (uint64_t)v101);
      WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v103, v102);
      v48 = *(_QWORD *)(a1 + 144);
      if ((*(_BYTE *)(v48 + 30) & 2) != 0)
      {
        v104 = *(_OWORD *)(v48 + 112);
        v105 = 1;
        WebCore::RenderObject::repaintUsingContainer(a1, (uint64_t *)&v103, (WebCore::LayoutRect *)&v104, 1);
        v50 = v103;
        v103 = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 1)
            WTF::fastFree(v50, v49);
          else
            --*(_DWORD *)v50;
        }
        if (v102)
        {
          v51 = *(_DWORD *)(v102 + 16);
          if (!v51)
          {
            __break(0xC471u);
            JUMPOUT(0x194304F30);
          }
          *(_DWORD *)(v102 + 16) = v51 - 1;
        }
        v47 = *(_QWORD *)(a1 + 144);
        break;
      }
      LOBYTE(v104) = 0;
      v105 = 0;
      __break(1u);
LABEL_236:
      *(_BYTE *)WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)a1, v8) = 0;
    }
    WebCore::RenderLayer::removeOnlyThisLayer(v47, 0);
    if (WebCore::RenderLayerModelObject::s_wasFloating && (*(_BYTE *)(a1 + 21) & 8) != 0)
      WebCore::RenderElement::setChildNeedsLayout((WebCore::RenderObject *)a1, 1);
    if (WebCore::RenderLayerModelObject::s_wasTransformed)
      WebCore::RenderObject::setNeedsLayoutAndPrefWidthsRecalc((WebCore::RenderObject *)a1);
LABEL_150:
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v79 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      v80 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v79 + 40) + 8) + 528) + 8) + 24);
      if (v80)
      {
        v81 = *(_QWORD *)(v80 + 8);
        if (v81)
        {
          v82 = *(_QWORD *)(*(_QWORD *)(v81 + 80) + 8);
          if (v82)
          {
            v83 = *(_QWORD *)(v82 + 112);
            if (v83)
            {
              if ((*(_BYTE *)(a1 + 45) & 1) == 0)
              {
                v84 = (WTF::MonotonicTime *)WTF::WeakHashSet<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Document>(v83 + 152, v79, (uint64_t)&v104);
                if ((*(_QWORD *)(v83 + 200) & 0xFFFFFFFFFFFFLL) == 0
                  || *(double *)((*(_QWORD *)(v83 + 200) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
                {
                  *(_QWORD *)(v83 + 192) = 0;
                  WTF::MonotonicTime::now(v84);
                  WebCore::TimerBase::setNextFireTime(v83 + 168, v85 + 0.0);
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_151;
  }
  if (!v10)
  {
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 680)
                    + 680) & 0x800000000000) == 0)
    {
      v54 = *(_QWORD *)(a1 + 32);
      if (v54)
      {
        v55 = *(_QWORD *)(v54 + 8);
        if (v55)
        {
          while (*(_BYTE *)(v55 + 46) != 91
               && ((*(_BYTE *)(v55 + 52) & 7) != 4 || (~*(unsigned __int8 *)(v55 + 53) & 9) != 0))
          {
            v56 = *(_QWORD *)(v55 + 32);
            if (v56)
            {
              v55 = *(_QWORD *)(v56 + 8);
              if (v55)
                continue;
            }
            goto LABEL_129;
          }
          goto LABEL_151;
        }
      }
    }
LABEL_129:
    if (WebCore::RenderLayerModelObject::s_wasFloating && (*(_BYTE *)(a1 + 21) & 8) != 0)
      WebCore::RenderElement::setChildNeedsLayout((WebCore::RenderObject *)a1, 1);
    v57 = (WebCore::RenderLayer *)bmalloc::api::isoAllocate();
    WebCore::RenderLayer::RenderLayer(v57, (WebCore::RenderLayerModelObject *)a1);
    v59 = *(WebCore::RenderLayer **)(a1 + 144);
    *(_QWORD *)(a1 + 144) = v57;
    if (v59)
    {
      WebCore::RenderLayer::~RenderLayer(v59, v58);
      if (*(_DWORD *)(v60 + 8))
      {
        *(_OWORD *)(v60 + 256) = 0u;
        *(_OWORD *)(v60 + 272) = 0u;
        *(_OWORD *)(v60 + 224) = 0u;
        *(_OWORD *)(v60 + 240) = 0u;
        *(_OWORD *)(v60 + 192) = 0u;
        *(_OWORD *)(v60 + 208) = 0u;
        *(_OWORD *)(v60 + 160) = 0u;
        *(_OWORD *)(v60 + 176) = 0u;
        *(_OWORD *)(v60 + 128) = 0u;
        *(_OWORD *)(v60 + 144) = 0u;
        *(_OWORD *)(v60 + 96) = 0u;
        *(_OWORD *)(v60 + 112) = 0u;
        *(_OWORD *)(v60 + 64) = 0u;
        *(_OWORD *)(v60 + 80) = 0u;
        *(_OWORD *)(v60 + 32) = 0u;
        *(_OWORD *)(v60 + 48) = 0u;
        *(_OWORD *)v60 = 0u;
        *(_OWORD *)(v60 + 16) = 0u;
      }
      else
      {
        bmalloc::api::isoDeallocate((bmalloc::api *)v60, v58);
      }
    }
    *(_DWORD *)(a1 + 20) |= 0x8000u;
    v61 = *(_QWORD *)(a1 + 144);
    if (!*(_QWORD *)(v61 + 40))
    {
      v62 = *(WebCore::RenderElement **)(v61 + 32);
      v63 = *((_QWORD *)v62 + 4);
      if (v63)
      {
        if (*(_QWORD *)(v63 + 8))
        {
          v86 = (WebCore::RenderLayer *)WebCore::RenderElement::layerParent(v62, v58);
          if (!v86)
          {
LABEL_148:
            v68 = *(_QWORD *)(a1 + 32);
            if (v68
              && *(_QWORD *)(v68 + 8)
              && (*(_BYTE *)(a1 + 20) & 0xF8) == 0
              && WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a1))
            {
              *(_QWORD *)(*(_QWORD *)(a1 + 144) + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
            }
            goto LABEL_150;
          }
          v90 = v86;
          v91 = *((_QWORD *)v86 + 26);
          if (v91)
            v91 = *(_QWORD *)(v91 + 144);
          if (v91 == v61)
            Sibling = 0;
          else
            Sibling = WebCore::RenderElement::layerNextSibling(*(WebCore::RenderElement **)(v61 + 32), v86, v87, v88, v89);
          WebCore::RenderLayer::addChild(v90, (WebCore::RenderLayer *)v61, (WebCore::RenderLayer *)Sibling);
        }
      }
    }
    for (i = *(unsigned int *)(*(_QWORD *)(v61 + 32) + 64) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v61 + 32) + 68) << 32);
          i;
          i = *(unsigned int *)(v65 + 47) | ((unint64_t)*(unsigned __int8 *)(v65 + 51) << 32))
    {
      v65 = *(_QWORD *)(i + 8);
      if (!v65)
        break;
      if ((*(_BYTE *)(v65 + 45) & 2) == 0)
      {
LABEL_139:
        WebCore::RenderElement::moveLayers((WebCore::RenderElement *)v65, (WebCore::RenderLayer *)v61);
        while (1)
        {
          v66 = *(unsigned int *)(v65 + 47);
          if (!(v66 | ((unint64_t)*(unsigned __int8 *)(v65 + 51) << 32)))
            goto LABEL_145;
          v65 = *(_QWORD *)((v66 | ((unint64_t)*(unsigned __int8 *)(v65 + 51) << 32)) + 8);
          if (!v65)
            goto LABEL_145;
          if ((*(_BYTE *)(v65 + 45) & 2) == 0)
            goto LABEL_139;
        }
      }
    }
LABEL_145:
    v67 = *(WTF ***)(v61 + 40);
    if (v67)
      WebCore::RenderView::layerChildrenChangedDuringStyleChange(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v61 + 32) + 24) + 8)+ 40)+ 8)+ 1944), v67);
    WebCore::RenderLayer::clearClipRectsIncludingDescendants((WTF *)v61, (void *)4);
    goto LABEL_148;
  }
LABEL_8:
  WebCore::RenderLayer::styleChanged((WebCore::RenderLayer **)v10, a2, a3);
  if (WebCore::RenderLayerModelObject::s_hadLayer
    && WebCore::RenderLayerModelObject::s_layerWasSelfPainting != ((*(_DWORD *)(*(_QWORD *)(a1 + 144) + 24) >> 11) & 1))
  {
    WebCore::RenderElement::setChildNeedsLayout((WebCore::RenderObject *)a1, 1);
  }
LABEL_11:
  v11 = (*(_DWORD *)(a1 + 96) >> 19) & 7;
  v13 = v11 == 6 || v11 == 3;
  if (a3)
  {
    v14 = (*(_DWORD *)(a3 + 16) >> 19) & 7;
    v16 = v14 == 6 || v14 == 3;
  }
  else
  {
    v16 = 0;
  }
  if (v16 != v13)
  {
    v78 = v11 == 6 || v11 == 3;
    if (v78 && *(_QWORD *)(a1 + 144))
      WebCore::LocalFrameView::addViewportConstrainedObject(*(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40)+ 8)+ 1944)+ 248), (WebCore::RenderLayerModelObject *)a1);
    else
      WebCore::LocalFrameView::removeViewportConstrainedObject(*(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40)+ 8)+ 1944)+ 248), (WebCore::RenderLayerModelObject *)a1);
  }
  if (a3)
  {
    v17 = *(unsigned __int8 **)(*(_QWORD *)(a3 + 8) + 40);
    v18 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 88) + 40);
    v19 = v17[164];
    if (v19 == v18[164] && (v17[165] != 0) == (v18[165] != 0))
    {
      if (v19 != 13)
      {
        if (v19 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v17 + 160), (const WebCore::Length *)(v18 + 160)) & 1) == 0)
            goto LABEL_200;
        }
        else
        {
          v20 = *((float *)v17 + 40);
          if (!v17[166])
            v20 = (float)SLODWORD(v20);
          v21 = *((float *)v18 + 40);
          if (!v18[166])
            v21 = (float)SLODWORD(v21);
          if (v20 != v21)
            goto LABEL_200;
        }
      }
      v22 = v17[172];
      if (v22 == v18[172] && (v17[173] != 0) == (v18[173] != 0))
      {
        if (v22 != 13)
        {
          if (v22 == 11)
          {
            if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v17 + 168), (const WebCore::Length *)(v18 + 168)) & 1) == 0)goto LABEL_200;
          }
          else
          {
            v23 = *((float *)v17 + 42);
            if (!v17[174])
              v23 = (float)SLODWORD(v23);
            v24 = *((float *)v18 + 42);
            if (!v18[174])
              v24 = (float)SLODWORD(v24);
            if (v23 != v24)
              goto LABEL_200;
          }
        }
        v25 = v17[180];
        if (v25 == v18[180] && (v17[181] != 0) == (v18[181] != 0))
        {
          if (v25 != 13)
          {
            if (v25 == 11)
            {
              if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v17 + 176), (const WebCore::Length *)(v18 + 176)) & 1) == 0)goto LABEL_200;
            }
            else
            {
              v26 = *((float *)v17 + 44);
              if (!v17[182])
                v26 = (float)SLODWORD(v26);
              v27 = *((float *)v18 + 44);
              if (!v18[182])
                v27 = (float)SLODWORD(v27);
              if (v26 != v27)
                goto LABEL_200;
            }
          }
          v28 = v17[188];
          if (v28 == v18[188] && (v17[189] != 0) == (v18[189] != 0))
          {
            if (v28 == 13)
              goto LABEL_62;
            if (v28 == 11)
            {
              if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v17 + 184), (const WebCore::Length *)(v18 + 184)) & 1) != 0)goto LABEL_62;
            }
            else
            {
              v29 = *((float *)v17 + 46);
              if (!v17[190])
                v29 = (float)SLODWORD(v29);
              v30 = *((float *)v18 + 46);
              if (!v18[190])
                v30 = (float)SLODWORD(v30);
              if (v29 == v30)
              {
LABEL_62:
                v31 = *(unsigned __int8 **)(*(_QWORD *)(a3 + 8) + 40);
                v32 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 88) + 40);
                v33 = v31[132];
                if (v33 != v32[132] || (v31[133] != 0) != (v32[133] != 0))
                  goto LABEL_210;
                if (v33 != 13)
                {
                  if (v33 == 11)
                  {
                    if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v31 + 128), (const WebCore::Length *)(v32 + 128)) & 1) == 0)goto LABEL_210;
                  }
                  else
                  {
                    v34 = *((float *)v31 + 32);
                    if (!v31[134])
                      v34 = (float)SLODWORD(v34);
                    v35 = *((float *)v32 + 32);
                    if (!v32[134])
                      v35 = (float)SLODWORD(v35);
                    if (v34 != v35)
                      goto LABEL_210;
                  }
                }
                v36 = v31[140];
                if (v36 != v32[140] || (v31[141] != 0) != (v32[141] != 0))
                  goto LABEL_210;
                if (v36 != 13)
                {
                  if (v36 == 11)
                  {
                    if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v31 + 136), (const WebCore::Length *)(v32 + 136)) & 1) == 0)goto LABEL_210;
                  }
                  else
                  {
                    v37 = *((float *)v31 + 34);
                    if (!v31[142])
                      v37 = (float)SLODWORD(v37);
                    v38 = *((float *)v32 + 34);
                    if (!v32[142])
                      v38 = (float)SLODWORD(v38);
                    if (v37 != v38)
                      goto LABEL_210;
                  }
                }
                v39 = v31[148];
                if (v39 != v32[148] || (v31[149] != 0) != (v32[149] != 0))
                  goto LABEL_210;
                if (v39 != 13)
                {
                  if (v39 == 11)
                  {
                    if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v31 + 144), (const WebCore::Length *)(v32 + 144)) & 1) == 0)goto LABEL_210;
                  }
                  else
                  {
                    v40 = *((float *)v31 + 36);
                    if (!v31[150])
                      v40 = (float)SLODWORD(v40);
                    v41 = *((float *)v32 + 36);
                    if (!v32[150])
                      v41 = (float)SLODWORD(v41);
                    if (v40 != v41)
                      goto LABEL_210;
                  }
                }
                v42 = v31[156];
                if (v42 != v32[156] || (v31[157] != 0) != (v32[157] != 0))
                  goto LABEL_210;
                if (v42 != 13)
                {
                  if (v42 != 11)
                  {
                    v43 = *((float *)v31 + 38);
                    if (!v31[158])
                      v43 = (float)SLODWORD(v43);
                    v44 = *((float *)v32 + 38);
                    if (!v32[158])
                      v44 = (float)SLODWORD(v44);
                    if (v43 == v44)
                      goto LABEL_98;
LABEL_210:
                    v45 = 1;
                    goto LABEL_211;
                  }
                  if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v31 + 152), (const WebCore::Length *)(v32 + 152)) & 1) == 0)goto LABEL_210;
                }
LABEL_98:
                v45 = 0;
LABEL_211:
                v97 = *(unsigned __int8 **)(*(_QWORD *)(a3 + 8) + 40);
                v98 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 88) + 40);
                v52 = v97[465] != v98[465] || v97[466] != v98[466];
                v53 = (v97[467] != 0) ^ (v98[467] != 0);
                goto LABEL_218;
              }
            }
          }
        }
      }
    }
LABEL_200:
    v93 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    v94 = *(_QWORD *)(*(_QWORD *)(v93 + 40) + 8);
    if (*(_QWORD *)(v94 + 1272) == v93)
    {
      WebCore::LocalFrameView::updateScrollbarSteps(*(_QWORD **)(*(_QWORD *)(v94 + 1944) + 248));
    }
    else
    {
      v95 = *(_QWORD *)(a1 + 144);
      if (v95)
      {
        v96 = *(WebCore::RenderLayerScrollableArea **)(v95 + 264);
        if (v96)
          WebCore::RenderLayerScrollableArea::updateScrollbarSteps(v96);
      }
    }
    goto LABEL_62;
  }
  v52 = 0;
  v45 = 0;
  v53 = 0;
LABEL_218:
  if ((v45 & 1) != 0 || v52 || v53)
  {
    v100 = (WebCore::RenderObject *)WebCore::RenderObject::enclosingScrollableContainerForSnapping(a1);
    if (v100)
      WebCore::RenderObject::setNeedsLayout(v100, 1);
  }
}

void WebCore::RenderElement::styleDidChange(WebCore::RenderElement *this, unsigned int a2, uint64_t a3)
{
  const WebCore::FillLayer *v6;
  const WebCore::FillLayer *v7;
  const WebCore::FillLayer *v8;
  WTF *v9;
  void *v10;
  const WebCore::FillLayer *v11;
  void *v12;
  uint64_t v13;
  const WebCore::FillLayer *v14;
  int *v15;
  int v16;
  WTF *v17;
  void *v18;
  int v19;
  _DWORD *v20;
  _DWORD *v21;
  int v22;
  int v23;
  WTF *v24;
  WTF *v25;
  int *v26;
  int *v27;
  int v28;
  int *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  const WebCore::RenderStyle *v36;
  uint64_t v37;
  const WebCore::Document *v38;
  const WebCore::RenderStyle *v39;
  WebCore::SVGElement *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  WebCore::RenderElement *v45;
  WebCore::RenderElement *v46;
  uint64_t v47;
  int v48;
  _DWORD *v49;
  _DWORD *v50;
  int v51;
  WebCore::RenderElement *v52;
  uint64_t v53;
  int v54;
  WebCore::RenderElement *v55;
  int v56;
  const WebCore::RenderObject *v57;
  unsigned int v58;
  WebCore::RenderStyle *v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  WebCore::ScrollAnchoringController *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  uint64_t v69;
  WTF *v70;
  void *v71;
  WTF *v72;
  void *v73;
  _DWORD *v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  WebCore::RenderElement *v81;
  uint64_t v82;
  void *v83;

  if (a3)
  {
    v6 = *(const WebCore::FillLayer **)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 16) + 8);
    ++*(_DWORD *)v6;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(const WebCore::FillLayer **)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + 8);
  ++*(_DWORD *)v7;
  WebCore::RenderElement::updateFillImages((uint64_t)this, v6, v7);
  if (*(_DWORD *)v7 == 1)
  {
    WebCore::FillLayer::~FillLayer(v7);
    WTF::fastFree(v9, v10);
    if (a3)
      goto LABEL_6;
LABEL_11:
    v8 = 0;
    goto LABEL_12;
  }
  --*(_DWORD *)v7;
  if (!a3)
    goto LABEL_11;
LABEL_6:
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::FillLayer::~FillLayer(v6);
      WTF::fastFree(v70, v71);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  v8 = *(const WebCore::FillLayer **)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 32) + 48);
  ++*(_DWORD *)v8;
LABEL_12:
  v11 = *(const WebCore::FillLayer **)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 48);
  ++*(_DWORD *)v11;
  WebCore::RenderElement::updateFillImages((uint64_t)this, v8, v11);
  if (*(_DWORD *)v11 != 1)
  {
    --*(_DWORD *)v11;
    if (a3)
      goto LABEL_14;
LABEL_22:
    v14 = *(const WebCore::FillLayer **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 24) + 200) + 8);
    if (!v14)
      goto LABEL_34;
    v15 = (int *)((char *)v14 + 8);
    ++*((_DWORD *)v14 + 2);
    goto LABEL_24;
  }
  WebCore::FillLayer::~FillLayer(v11);
  WTF::fastFree(v17, v18);
  if (!a3)
    goto LABEL_22;
LABEL_14:
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::FillLayer::~FillLayer(v8);
      WTF::fastFree(v72, v73);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  v13 = *(_QWORD *)(a3 + 8);
  v8 = *(const WebCore::FillLayer **)(*(_QWORD *)(*(_QWORD *)(v13 + 24) + 200) + 8);
  if (v8)
  {
    ++*((_DWORD *)v8 + 2);
    v14 = *(const WebCore::FillLayer **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 24) + 200) + 8);
    if (!v14)
    {
      (*(void (**)(const WebCore::FillLayer *, WebCore::RenderElement *))(*(_QWORD *)v8 + 104))(v8, this);
      goto LABEL_28;
    }
    v15 = (int *)((char *)v14 + 8);
    v16 = *((_DWORD *)v14 + 2) + 1;
    *((_DWORD *)v14 + 2) = v16;
    if (v8 == v14)
    {
      v14 = v8;
      goto LABEL_25;
    }
    (*(void (**)(const WebCore::FillLayer *, WebCore::RenderElement *))(*(_QWORD *)v8 + 104))(v8, this);
LABEL_24:
    (*(void (**)(const WebCore::FillLayer *, WebCore::RenderElement *))(*(_QWORD *)v14 + 96))(v14, this);
    v16 = *((_DWORD *)v14 + 2);
LABEL_25:
    v19 = v16 - 1;
    if (v19)
    {
      *v15 = v19;
      if (a3)
        goto LABEL_27;
    }
    else
    {
      (*(void (**)(const WebCore::FillLayer *))(*(_QWORD *)v14 + 8))(v14);
      if (a3)
      {
LABEL_27:
        if (!v8)
        {
LABEL_30:
          v13 = *(_QWORD *)(a3 + 8);
          goto LABEL_31;
        }
LABEL_28:
        if (*((_DWORD *)v8 + 2) == 1)
          (*(void (**)(const WebCore::FillLayer *))(*(_QWORD *)v8 + 8))(v8);
        else
          --*((_DWORD *)v8 + 2);
        goto LABEL_30;
      }
    }
LABEL_34:
    v20 = 0;
    goto LABEL_35;
  }
  v14 = *(const WebCore::FillLayer **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 24) + 200) + 8);
  if (v14)
  {
    v8 = 0;
    v15 = (int *)((char *)v14 + 8);
    ++*((_DWORD *)v14 + 2);
    goto LABEL_24;
  }
LABEL_31:
  v20 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 216) + 8);
  if (v20)
    ++v20[2];
LABEL_35:
  v21 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 216) + 8);
  if (v21)
  {
    v22 = v21[2] + 1;
    v21[2] = v22;
    if (v20 != v21)
    {
      if (v20)
        (*(void (**)(_DWORD *, WebCore::RenderElement *))(*(_QWORD *)v20 + 104))(v20, this);
      (*(void (**)(_DWORD *, WebCore::RenderElement *))(*(_QWORD *)v21 + 96))(v21, this);
      v22 = v21[2];
    }
    v23 = v22 - 1;
    if (v23)
      v21[2] = v23;
    else
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
  }
  else if (v20)
  {
    (*(void (**)(_DWORD *, WebCore::RenderElement *))(*(_QWORD *)v20 + 104))(v20, this);
  }
  if (a3)
  {
    if (v20)
    {
      if (v20[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
      else
        --v20[2];
    }
    v24 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) + 240);
    if (v24)
      ++*(_DWORD *)v24;
    v25 = *(WTF **)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 240);
    if (!v25)
    {
      if (!v24)
        goto LABEL_56;
      v79 = *((_QWORD *)v24 + 2);
      if (v79)
        (*(void (**)(uint64_t, WebCore::RenderElement *))(*(_QWORD *)v79 + 104))(v79, this);
      goto LABEL_54;
    }
    ++*(_DWORD *)v25;
    if (v24)
    {
      v26 = (int *)*((_QWORD *)v24 + 2);
      v27 = (int *)*((_QWORD *)v25 + 2);
      if (v27)
      {
        v29 = v27 + 2;
        v28 = v27[2];
        v27[2] = v28 + 1;
        if (v26 == v27)
        {
          if (v28)
          {
LABEL_50:
            *v29 = v28;
            goto LABEL_51;
          }
          goto LABEL_73;
        }
        if (v26)
          (*(void (**)(int *, WebCore::RenderElement *))(*(_QWORD *)v26 + 104))(v26, this);
LABEL_72:
        (*(void (**)(int *, WebCore::RenderElement *))(*(_QWORD *)v27 + 96))(v27, this);
        v28 = v27[2] - 1;
        v26 = v27;
        if (v27[2] != 1)
          goto LABEL_50;
LABEL_73:
        (*(void (**)(int *))(*(_QWORD *)v26 + 8))(v26);
        goto LABEL_51;
      }
      if (v26)
        (*(void (**)(int *, WebCore::RenderElement *))(*(_QWORD *)v26 + 104))(v26, this);
      goto LABEL_51;
    }
  }
  else
  {
    v25 = *(WTF **)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 240);
    if (!v25)
      goto LABEL_56;
    ++*(_DWORD *)v25;
  }
  v27 = (int *)*((_QWORD *)v25 + 2);
  if (v27)
  {
    v24 = 0;
    v29 = v27 + 2;
    ++v27[2];
    goto LABEL_72;
  }
  v24 = 0;
LABEL_51:
  if (*(_DWORD *)v25 != 1)
  {
    --*(_DWORD *)v25;
    if (!a3)
      goto LABEL_56;
LABEL_53:
    if (!v24)
      goto LABEL_56;
LABEL_54:
    if (*(_DWORD *)v24 == 1)
    {
      v74 = (_DWORD *)*((_QWORD *)v24 + 2);
      *((_QWORD *)v24 + 2) = 0;
      if (v74)
      {
        if (v74[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v74 + 8))(v74);
        else
          --v74[2];
      }
      v75 = (_DWORD *)*((_QWORD *)v24 + 1);
      *((_QWORD *)v24 + 1) = 0;
      if (v75)
      {
        if (v75[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v75 + 8))(v75);
        else
          --v75[2];
      }
      WTF::fastFree(v24, v12);
    }
    else
    {
      --*(_DWORD *)v24;
    }
    goto LABEL_56;
  }
  v49 = (_DWORD *)*((_QWORD *)v25 + 2);
  *((_QWORD *)v25 + 2) = 0;
  if (v49)
  {
    if (v49[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v49 + 8))(v49);
    else
      --v49[2];
  }
  v50 = (_DWORD *)*((_QWORD *)v25 + 1);
  *((_QWORD *)v25 + 1) = 0;
  if (v50)
  {
    if (v50[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 8))(v50);
    else
      --v50[2];
  }
  WTF::fastFree(v25, v12);
  if (a3)
    goto LABEL_53;
LABEL_56:
  v30 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *(_DWORD *)v30 += 2;
  v31 = *((_QWORD *)this + 16);
  if (v31 && (v67 = *(unsigned int *)(v31 + 12), (_DWORD)v67))
  {
    v68 = *(unint64_t **)v31;
    v69 = 8 * v67;
    do
    {
      v32 = *v68;
      if ((*(_QWORD *)(*v68 + 16) & 0xF80000000000) == 0x80000000000
        && *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v32 + 8) + 40) + 592) == v30)
      {
        break;
      }
      v32 = 0;
      ++v68;
      v69 -= 8;
    }
    while (v69);
  }
  else
  {
    v32 = 0;
  }
  if (!a3)
  {
    WebCore::RenderElement::styleDidChange(WebCore::StyleDifference,WebCore::RenderStyle const*)::$_0::operator()<WebCore::RenderStyle,WebCore::RenderStyle>((int *)this, v32, 0);
    if (!v30)
      goto LABEL_77;
    goto LABEL_75;
  }
  if (v30)
    *(_DWORD *)v30 += 2;
  v33 = *(_QWORD *)(a3 + 48);
  if (v33 && (v76 = *(unsigned int *)(v33 + 12), (_DWORD)v76))
  {
    v77 = *(uint64_t **)v33;
    v78 = 8 * v76;
    do
    {
      v34 = *v77;
      if ((*(_QWORD *)(*v77 + 16) & 0xF80000000000) == 0x80000000000
        && *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v34 + 8) + 40) + 592) == v30)
      {
        break;
      }
      v34 = 0;
      ++v77;
      v78 -= 8;
    }
    while (v78);
  }
  else
  {
    v34 = 0;
  }
  WebCore::RenderElement::styleDidChange(WebCore::StyleDifference,WebCore::RenderStyle const*)::$_0::operator()<WebCore::RenderStyle,WebCore::RenderStyle>((int *)this, v32, v34);
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v35);
    else
      *(_DWORD *)v30 -= 2;
LABEL_75:
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v35);
    else
      *(_DWORD *)v30 -= 2;
  }
LABEL_77:
  WebCore::SVGRenderSupport::styleChanged((uint64_t)this, (WebCore::RenderElement *)a3, v36);
  if (a2 >= 2)
  {
    WebCore::RenderElement::updateReferencedSVGResources(this, v37, v38);
    if (a2 <= 4
      && a3
      && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                    + 680) & 0x800000000000) != 0)
    {
      if ((*((_BYTE *)this + 52) & 7) == 4
        && (*((_BYTE *)this + 53) & 1) == 0
        && (v81 = this, (*((_BYTE *)this + 53) & 8) != 0))
      {
LABEL_228:
        v82 = *(_QWORD *)(*((_QWORD *)v81 + 3) + 8);
        if ((*(_WORD *)(v82 + 28) & 0x20) == 0)
        {
LABEL_233:
          __break(0xC471u);
          JUMPOUT(0x1943055B0);
        }
        *(_DWORD *)(v82 + 24) += 2;
        WebCore::notifyResourceChanged((WebCore *)v82, v40);
        if (*(_DWORD *)(v82 + 24) == 2)
        {
          if ((*(_WORD *)(v82 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v82, v83);
        }
        else
        {
          *(_DWORD *)(v82 + 24) -= 2;
        }
      }
      else
      {
        for (i = *((_QWORD *)this + 4); i; i = *((_QWORD *)v81 + 4))
        {
          v81 = *(WebCore::RenderElement **)(i + 8);
          if (!v81)
            break;
          if ((*((_BYTE *)v81 + 52) & 7) == 4 && (*((_BYTE *)v81 + 53) & 1) == 0 && (*((_BYTE *)v81 + 53) & 8) != 0)
            goto LABEL_228;
        }
      }
    }
  }
  v41 = *((_QWORD *)this + 4);
  if (v41 && *(_QWORD *)(v41 + 8))
  {
    switch(a2)
    {
      case 5u:
        WebCore::RenderElement::setNeedsPositionedMovementLayout(this, (const WebCore::RenderStyle *)a3);
        goto LABEL_124;
      case 6u:
      case 8u:
        if (a3 && (v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) + 192)) != 0 && *(_DWORD *)(v42 - 12)
          || (v43 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 192)) != 0 && *(_DWORD *)(v43 - 12))
        {
          WebCore::RenderCounter::rendererStyleChangedSlowCase((WTF::StringImpl ***)this, (WebCore::RenderElement *)a3, (WebCore::RenderElement *)((char *)this + 80), v39);
        }
        v44 = *((_DWORD *)this + 5);
        if (a3 && (v44 & 0xF8) != 0 && ((*((_DWORD *)this + 24) ^ *(_DWORD *)(a3 + 16)) & 0x380000) != 0)
        {
          v45 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
          WebCore::RenderObject::scheduleLayout(this, v45);
          v44 = *((_DWORD *)this + 5);
        }
        if (a2 == 8)
        {
          if ((v44 & 8) == 0)
          {
            *((_DWORD *)this + 5) = v44 | 8;
            v46 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
            WebCore::RenderObject::scheduleLayout(this, v46);
            if ((*((_BYTE *)this + 21) & 0x80) != 0)
            {
              if ((*((_BYTE *)this + 45) & 0x10) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x194305AE4);
              }
              v47 = *((_QWORD *)this + 18);
              if (v47)
              {
                v48 = *(_DWORD *)(v47 + 8) + 1;
                *(_DWORD *)(v47 + 8) = v48;
              }
              else
              {
                v48 = MEMORY[8];
              }
              *(_QWORD *)(v47 + 24) = *(_QWORD *)(v47 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
              if (!v48)
              {
                __break(0xC471u);
                JUMPOUT(0x194305B10);
              }
              *(_DWORD *)(v47 + 8) = v48 - 1;
            }
          }
          WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 1, 1);
        }
        else if ((v44 & 0x80) == 0)
        {
          *((_DWORD *)this + 5) = v44 | 0x80;
          v55 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
          WebCore::RenderObject::scheduleLayout(this, v55);
          if ((*((_BYTE *)this + 21) & 0x80) != 0)
          {
            if ((*((_BYTE *)this + 45) & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x194305A8CLL);
            }
            v53 = *((_QWORD *)this + 18);
            if (v53)
            {
              v54 = *(_DWORD *)(v53 + 8) + 1;
              *(_DWORD *)(v53 + 8) = v54;
            }
            else
            {
              v54 = MEMORY[8];
            }
            *(_QWORD *)(v53 + 24) = *(_QWORD *)(v53 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
            if (!v54)
            {
              __break(0xC471u);
              JUMPOUT(0x194305AC4);
            }
LABEL_123:
            *(_DWORD *)(v53 + 8) = v54 - 1;
          }
        }
LABEL_124:
        if (a3)
          v56 = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 16) + 52) >> 4) & 1;
        else
          v56 = 0;
        v58 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)this + 424))(this)
                                               + 8)
                                   + 16)
                       + 52) & 0x10;
        if (v56 != v58 >> 4)
        {
          WebCore::RenderElement::updateOutlineAutoAncestor((uint64_t)this, (void *)(v58 != 0));
          if (v58)
          {
            v59 = (WebCore::RenderStyle *)(*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)this + 424))(this);
            v60 = *(_QWORD *)(*((_QWORD *)v59 + 1) + 16);
            v61 = 0.0;
            if ((*(_BYTE *)(v60 + 52) & 0xF) != 0)
            {
              v61 = *(float *)(v60 + 48);
              if ((*(_BYTE *)(v60 + 52) & 0x10) != 0 && v61 < 3.0)
                v61 = 3.0;
            }
          }
          else
          {
            v62 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 16);
            v61 = 0.0;
            v59 = (WebCore::RenderStyle *)a3;
            if ((*(_BYTE *)(v62 + 52) & 0xF) != 0)
            {
              v61 = *(float *)(v62 + 48);
              if ((*(_BYTE *)(v62 + 52) & 0x10) != 0 && v61 < 3.0)
                v61 = 3.0;
              v59 = (WebCore::RenderStyle *)a3;
            }
          }
          v63 = WebCore::RenderStyle::outlineOffset(v59);
          WebCore::RenderElement::issueRepaintForOutlineAuto(this, fmaxf(v61 + v63, 0.0));
        }
        if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)
                                                                                                + 8)
                                                                                    + 40)
                                                                        + 8)
                                                            + 528)
                                                + 8)
                                    + 136)
                        + 672) & 0x400000) == 0)
          goto LABEL_145;
        if (a3
          && ((*((_QWORD *)this + 12) & 0x180000) == 0x100000) != ((*(_QWORD *)(a3 + 16) & 0x180000) == 0x100000))
        {
          v64 = WebCore::RenderObject::searchParentChainForScrollAnchoringController(this, v57);
          if (!v64)
            goto LABEL_145;
          goto LABEL_144;
        }
        if (WebCore::RenderStyle::scrollAnchoringSuppressionStyleDidChange((WebCore::RenderElement *)((char *)this + 80), (const WebCore::RenderStyle *)a3))
        {
          v65 = (WebCore::ScrollAnchoringController *)WebCore::RenderObject::searchParentChainForScrollAnchoringController(this, v57);
          if (v65)
          {
            v64 = (uint64_t)v65;
            if (WebCore::ScrollAnchoringController::isInScrollAnchoringAncestorChain(v65, this))
LABEL_144:
              *(_BYTE *)(v64 + 34) = 1;
          }
        }
LABEL_145:
        if (a2 > 1
          || (*((_BYTE *)this + 45) & 0x20) != 0
          && (char *)this + 80 != WebCore::RenderElement::firstLineStyle(this, v57))
        {
          v66 = *((_QWORD *)this + 7);
          if (v66)
          {
            if ((*(_WORD *)(v66 + 12) & 0x40) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x194305A4CLL);
            }
            WebCore::LayoutIntegration::BoxTree::updateStyle(this, v57);
          }
        }
        break;
      case 7u:
        WebCore::RenderElement::setNeedsPositionedMovementLayout(this, (const WebCore::RenderStyle *)a3);
        v51 = *((_DWORD *)this + 5);
        if ((v51 & 0x80) != 0)
          goto LABEL_124;
        *((_DWORD *)this + 5) = v51 | 0x80;
        v52 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
        WebCore::RenderObject::scheduleLayout(this, v52);
        if ((*((_BYTE *)this + 21) & 0x80) == 0)
          goto LABEL_124;
        if ((*((_BYTE *)this + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x194305A6CLL);
        }
        v53 = *((_QWORD *)this + 18);
        if (v53)
        {
          v54 = *(_DWORD *)(v53 + 8) + 1;
          *(_DWORD *)(v53 + 8) = v54;
        }
        else
        {
          v54 = MEMORY[8];
        }
        *(_QWORD *)(v53 + 24) = *(_QWORD *)(v53 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
        if (!v54)
          goto LABEL_233;
        goto LABEL_123;
      default:
        goto LABEL_124;
    }
  }
}

void WebCore::RenderLayerCompositor::rootOrBodyStyleChanged(WebCore::RenderLayerCompositor *this, WebCore::RenderElement *a2, const WebCore::RenderStyle *a3)
{
  unint64_t v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  _BOOL4 v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;

  if (!*((_BYTE *)this + 195))
    return;
  if (a3)
  {
    WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)a3, 61, 0, (unint64_t *)&v27);
    v6 = v27;
  }
  else
  {
    v6 = 0;
  }
  WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)a2 + 80, 61, 0, &v25);
  v8 = v25;
  v9 = v25 & 0x8000000000000;
  if ((v6 & 0x8000000000000) != 0)
  {
    if (!v9)
      goto LABEL_14;
    v27 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
    v26 = *(_OWORD *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
    v24 = WebCore::operator==<float,4ul>((float *)&v27, (float *)&v26);
    v8 = v25;
    v11 = HIBYTE(v6) == HIBYTE(v25) && BYTE6(v6) == BYTE6(v25);
    if (!v24)
      v11 = 0;
    v9 = v25 & 0x8000000000000;
  }
  else
  {
    v11 = v6 == v25 && v9 == 0;
  }
  if (v9)
  {
    v20 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      v23 = v11;
      WTF::fastFree((WTF *)v20, v7);
      if (v23)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  if (!v11)
LABEL_14:
    WebCore::RenderLayerCompositor::rootBackgroundColorOrTransparencyChanged(this);
LABEL_15:
  if (a3)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 16) + 8);
    do
    {
      v13 = *(_QWORD *)(v12 + 16);
      if (!v13)
        break;
      if ((*(_WORD *)(v12 + 58) & 3) != 2)
        goto LABEL_19;
      v12 = *(_QWORD *)(v12 + 8);
      LODWORD(v13) = 1;
    }
    while (v12);
  }
  else
  {
LABEL_19:
    LODWORD(v13) = 0;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 16) + 8);
  do
  {
    if (!*(_QWORD *)(v14 + 16) || (*(_WORD *)(v14 + 58) & 3) != 2)
    {
      v15 = 0;
      goto LABEL_24;
    }
    v14 = *(_QWORD *)(v14 + 8);
  }
  while (v14);
  v15 = 1;
LABEL_24:
  if ((_DWORD)v13 != v15)
    WebCore::RenderLayerCompositor::rootLayerConfigurationChanged(this);
  if (a3)
  {
    if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 40) + 636) ^ *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1)
                                                                                                 + 40)
                                                                                     + 636)) & 0x1ELL) != 0)
    {
      v19 = *(_QWORD *)(*((_QWORD *)this + 1) + 144);
      if (v19)
        WebCore::RenderLayer::setNeedsCompositingGeometryUpdate(v19);
    }
  }
  if ((v6 & 0x8000000000000) != 0)
  {
    v16 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v7);
    }
  }
}

uint64_t WebCore::RenderTableRow::requiresLayer(WebCore::RenderTableRow *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::FillLayer *v5;
  uint64_t (*v6)();
  uint64_t (*v7)();
  unsigned int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WebCore::RenderTableRow *v13;

  if ((*((_BYTE *)this + 22) & 3) != 0)
    return 1;
  v2 = *((_QWORD *)this + 11);
  v3 = *(_QWORD *)(v2 + 40);
  if ((*(_DWORD *)(v3 + 636) & 0x400) != 0)
    return 1;
  if (*(_QWORD *)(v3 + 264))
    return 1;
  v4 = *(_QWORD *)(v2 + 32);
  if (*(float *)(v4 + 4) < 1.0)
    return 1;
  v5 = *(WebCore::FillLayer **)(v4 + 48);
  if (*((_QWORD *)v5 + 1))
  {
    v13 = this;
    if (WebCore::FillLayer::hasImageInAnyLayer(v5))
      return 1;
    this = v13;
    v2 = *((_QWORD *)v13 + 11);
    v3 = *(_QWORD *)(v2 + 40);
  }
  else
  {
    if (*((_QWORD *)v5 + 2))
      v6 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v6 = 0;
    if (v6)
      return 1;
  }
  if (*(_QWORD *)(*(_QWORD *)(v3 + 216) + 8))
    v7 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  else
    v7 = 0;
  if (!v7
    && !*(_QWORD *)(v3 + 264)
    && !*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 32) + 20)
    && !*(_DWORD *)(*(_QWORD *)(v3 + 72) + 20)
    && (*(_DWORD *)(v3 + 636) & 0x1F00000) == 0x100000)
  {
    v8 = *((_DWORD *)this + 5);
    if ((~v8 & 0x1800000) != 0)
    {
      v9 = *(_QWORD *)(v2 + 40);
      if (!*(_BYTE *)(v9 + 368))
        return (v8 >> 22) & 1;
      v10 = *(WTF::StringImpl **)(v9 + 352);
      if (v10)
      {
        v11 = *(_DWORD *)v10;
        *(_DWORD *)v10 += 2;
        if (v11)
          *(_DWORD *)v10 = v11;
        else
          WTF::StringImpl::destroy(v10, a2);
      }
    }
  }
  return 1;
}

uint64_t WebCore::StyleCachedImage::addClient(uint64_t this, WebCore::RenderElement *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(this + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      this = WebCore::CachedResource::addClientToSet(*(WebCore::CachedResource **)(v2 + 8), a2);
      if ((_DWORD)this)
        return (*(uint64_t (**)(uint64_t, WebCore::RenderElement *))(*(_QWORD *)v3 + 88))(v3, a2);
    }
  }
  return this;
}

uint64_t WebCore::RenderInline::requiresLayer(WebCore::RenderInline *this, void *a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  int v21;

  v2 = *((_DWORD *)this + 5);
  if ((v2 & 0x800000) != 0)
    return 1;
  v4 = *((_QWORD *)this + 11);
  v5 = *(_QWORD *)(v4 + 32);
  if (*(float *)(v5 + 4) < 1.0)
    return 1;
  v6 = *(_QWORD *)(v5 + 48);
  v7 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  if (*(_QWORD *)(v6 + 8))
  {
    while (!*(_QWORD *)(v6 + 16))
    {
      v6 = *(_QWORD *)(v6 + 8);
      if (!v6)
        goto LABEL_8;
    }
    return 1;
  }
  if (*(_QWORD *)(v6 + 16)
     ? WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance
     : 0)
  {
    return 1;
  }
LABEL_8:
  v9 = *(_QWORD *)(v4 + 40);
  if (!*(_QWORD *)(*(_QWORD *)(v9 + 216) + 8))
    v7 = 0;
  if (v7)
    return 1;
  if (*(_QWORD *)(v9 + 264))
    return 1;
  if (*(_DWORD *)(*(_QWORD *)(v5 + 32) + 20))
    return 1;
  if (*(_DWORD *)(*(_QWORD *)(v9 + 72) + 20))
    return 1;
  v10 = *(unsigned int *)(v9 + 636) | ((unint64_t)(*(unsigned __int16 *)(v9 + 640) | (*(unsigned __int8 *)(v9 + 642) << 16)) << 32);
  if ((*(_DWORD *)(v9 + 636) & 0x1F00000) != 0x100000)
    return 1;
  v11 = *(_BYTE *)(v9 + 462);
  v12 = HIWORD(v10) & 3;
  v13 = v11 | 0x19;
  if ((_DWORD)v12 == 1)
    v11 |= 0x15u;
  v14 = (_DWORD)v12 == 2 ? v13 : v11;
  if ((v14 & 2) != 0
    && ((v2 & 1) != 0 || WebCore::RenderObject::isAtomicInlineLevelBox(this))
    && (*((_QWORD *)this + 12) & 0x1FLL) != 0x19
    && (*((unsigned __int8 *)this + 46) - 36 > 4 || (*((_BYTE *)this + 52) & 7) == 1))
  {
    return 1;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 636) & 0xC0000) == 0
    || (*((_BYTE *)this + 20) & 1) == 0 && !WebCore::RenderObject::isAtomicInlineLevelBox(this)
    || (*((_QWORD *)this + 12) & 0x1FLL) == 0x19)
  {
    goto LABEL_22;
  }
  v21 = *((unsigned __int8 *)this + 46);
  if ((v21 - 36) <= 4)
  {
    if (v21 != 36)
      goto LABEL_22;
    return 1;
  }
  if (v21 != 63 && v21 != 35)
    return 1;
LABEL_22:
  v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 200);
  if (v15 && *(_BYTE *)(v15 + 32)
    || (WebCore::RenderBoxModelObject::hasRunningAcceleratedAnimations(this, a2) & 1) != 0)
  {
    return 1;
  }
  v17 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  if (*(_BYTE *)(v17 + 368))
  {
    v18 = *(WTF::StringImpl **)(v17 + 352);
    if (v18)
    {
      v19 = *(_DWORD *)v18;
      *(_DWORD *)v18 += 2;
      if (v19)
        *(_DWORD *)v18 = v19;
      else
        WTF::StringImpl::destroy(v18, v16);
    }
    return 1;
  }
  return (*((unsigned __int8 *)this + 22) >> 6) & 1;
}

const WebCore::RenderElement **WebCore::RenderElement::layerNextSibling(WebCore::RenderElement *this, WebCore::RenderLayer *a2, uint64_t a3, uint64_t a4, BOOL a5)
{
  uint64_t v5;
  uint64_t v6;
  WebCore *v7;
  const WebCore::RenderElement **result;
  int v9;
  void *v11;
  WTF *v12;
  unint64_t v13;
  uint64_t v14;
  WTF *v15;
  int v16;
  unsigned int v17;

  if ((*((_BYTE *)this + 45) & 0x10) == 0)
    goto LABEL_7;
  if ((*((_BYTE *)this + 45) & 1) == 0)
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v5)
    {
      if ((*(_WORD *)(v5 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19430630CLL);
      }
      if ((*(_BYTE *)(v5 + 23) & 0x20) != 0)
      {
LABEL_17:
        WebCore::RenderLayer::topLayerRenderLayers(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 1944), a2, (uint64_t)&v15);
        v12 = v15;
        if (v17)
        {
          v13 = 0;
          while (*((_QWORD *)v15 + v13) != *((_QWORD *)this + 18))
          {
            if (v17 == ++v13)
              goto LABEL_21;
          }
          if (v13 >= (unint64_t)v17 - 1)
          {
LABEL_21:
            v14 = 0;
          }
          else
          {
            if (v13 + 1 >= v17)
            {
              __break(0xC471u);
LABEL_30:
              JUMPOUT(0x1943062ECLL);
            }
            v14 = *((_QWORD *)v15 + v13 + 1);
          }
        }
        else
        {
          v14 = 0;
          if (!v15)
            return (const WebCore::RenderElement **)v14;
        }
        v15 = 0;
        v16 = 0;
        WTF::fastFree(v12, v11);
        return (const WebCore::RenderElement **)v14;
      }
    }
  }
  if ((*((_QWORD *)this + 12) & 0xF80000000000) == 0x480000000000)
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    goto LABEL_17;
  }
LABEL_7:
  v6 = *((_QWORD *)this + 4);
  if (v6)
  {
    v7 = *(WebCore **)(v6 + 8);
    if (v7)
      ++*((_DWORD *)v7 + 4);
  }
  else
  {
    v7 = 0;
  }
  result = WebCore::findNextLayer(v7, (const WebCore::RenderElement **)a2, this, (const WebCore::RenderObject *)1, a5);
  v9 = *((_DWORD *)v7 + 4);
  if (!v9)
  {
    __break(0xC471u);
    goto LABEL_30;
  }
  *((_DWORD *)v7 + 4) = v9 - 1;
  return result;
}

WTF *WebCore::RenderView::layerChildrenChangedDuringStyleChange(WebCore::RenderView *this, WTF **a2)
{
  uint64_t v4;
  WTF *result;
  WTF *v6;
  WTF *v7;
  WebCore::RenderLayer *v8;
  uint64_t *v9;
  void *v10;
  WTF *v11;
  int v12;
  void *v13;
  WTF *v14;

  v4 = *((_QWORD *)this + 42);
  if (!v4 || (v8 = *(WebCore::RenderLayer **)(v4 + 8)) == 0)
  {
    result = *a2;
    if (!*a2)
    {
      result = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)result = 1;
      *((_QWORD *)result + 1) = a2;
      v7 = *a2;
      *a2 = result;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WTF::fastFree(v7, a2);
          result = *a2;
          if (!*a2)
          {
LABEL_4:
            v6 = (WTF *)*((_QWORD *)this + 42);
            *((_QWORD *)this + 42) = result;
            if (v6)
            {
              if (*(_DWORD *)v6 == 1)
                return (WTF *)WTF::fastFree(v6, a2);
              else
                --*(_DWORD *)v6;
            }
            return result;
          }
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
    }
    ++*(_DWORD *)result;
    goto LABEL_4;
  }
  v9 = (uint64_t *)WebCore::RenderLayer::commonAncestorWithLayer(v8, (const WebCore::RenderLayer *)a2);
  WTF::WeakPtr<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v14, v9);
  v11 = v14;
  v14 = 0;
  result = (WTF *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = v11;
  if (result)
  {
    v12 = *(_DWORD *)result - 1;
    if (*(_DWORD *)result != 1)
    {
LABEL_14:
      *(_DWORD *)result = v12;
      return result;
    }
    WTF::fastFree(result, v10);
    result = v14;
    v14 = 0;
    if (result)
    {
      v12 = *(_DWORD *)result - 1;
      if (*(_DWORD *)result != 1)
        goto LABEL_14;
      return (WTF *)WTF::fastFree(result, v13);
    }
  }
  return result;
}

double WebCore::BackgroundPainter::backgroundRoundedRect(WebCore::BackgroundPainter *this, const WebCore::LayoutRect *a2, const WebCore::InlineIterator::InlineBoxIterator *a3, WebCore::InlineIterator::BoxIterator *a4, const WebCore::LayoutSize *a5, int a6)
{
  double result;
  _BOOL8 v13;
  _BOOL8 v14;
  int v15;
  WebCore::RenderStyle *v16;
  __int128 v17;
  _BYTE v18[16];
  __int128 v19;
  __int128 v20;
  _QWORD v21[2];
  int v22;
  char v23;

  WebCore::RenderStyle::getRoundedBorderFor((WebCore::RenderStyle *)(*(_QWORD *)a2 + 80), a3, a5, a6, (uint64_t)this);
  if ((WebCore::InlineIterator::BoxIterator::atEnd(a4) & 1) == 0)
  {
    v13 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)a4);
    WebCore::InlineIterator::InlineBox::nextInlineBox((WebCore::InlineIterator::InlineBox *)v13, (uint64_t)v18);
    if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v18))
    {
      v14 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)a4);
      WebCore::InlineIterator::InlineBox::previousInlineBox((WebCore::InlineIterator::InlineBox *)v14, (uint64_t)v21);
      v15 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v21) ^ 1;
      if (v22 != -1)
        ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v22])(&v23, v21);
    }
    else
    {
      v15 = 1;
    }
    if ((_DWORD)v19 != -1)
      ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v19])(v21, v18);
    if (v15)
    {
      v16 = (WebCore::RenderStyle *)(*(_QWORD *)a2 + 80);
      v21[0] = 0;
      v21[1] = *((_QWORD *)a3 + 1);
      WebCore::RenderStyle::getRoundedBorderFor(v16, (const WebCore::LayoutRect *)v21, a5, a6, (uint64_t)v18);
      result = *(double *)&v19;
      v17 = v20;
      *((_OWORD *)this + 1) = v19;
      *((_OWORD *)this + 2) = v17;
    }
  }
  return result;
}

BOOL WebCore::BackgroundPainter::boxShadowShouldBeAppliedToBackground(uint64_t a1, uint64_t a2, int a3, WebCore::InlineIterator::BoxIterator *a4)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  char v8;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  WebCore::RenderStyle *v20;
  uint64_t v22[2];
  uint64_t v23;
  unint64_t v24;

  if (a3)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 32);
  if ((*(_DWORD *)(v4 + 148) & 0x1FC000) != 0)
    return 0;
  v5 = *(_QWORD *)(v4 + 88);
  if (!v5)
    return 0;
  v8 = 0;
  do
  {
    if (!*(_BYTE *)(v5 + 48))
    {
      if ((v8 & 1) != 0)
        return 0;
      if (!*(_BYTE *)(v5 + 20) || *(_BYTE *)(v5 + 20) == 11)
        return 0;
      if (*(_BYTE *)(v5 + 22))
      {
        if (*(float *)(v5 + 16) != 0.0)
          return 0;
      }
      else if (*(_DWORD *)(v5 + 16))
      {
        return 0;
      }
      v8 = 1;
    }
    v5 = *(_QWORD *)(v5 + 56);
  }
  while (v5);
  if ((v8 & 1) == 0)
    return 0;
  v20 = (WebCore::RenderStyle *)(a1 + 80);
  WebCore::RenderStyle::visitedDependentColorWithColorFilter(a1 + 80, 61, 0, &v24);
  if ((v24 & 0x8000000000000) == 0)
  {
    if ((_BYTE)v24 == 0xFF)
      goto LABEL_20;
    return 0;
  }
  v14 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
  if (*(float *)((v24 & 0xFFFFFFFFFFFFLL) + 0x10) == 1.0)
  {
LABEL_20:
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 16) + 8);
    do
    {
      v13 = v12;
      v12 = *(_QWORD *)(v12 + 8);
    }
    while (v12);
    v23 = v13;
    if ((*(_WORD *)(v13 + 58) & 0x1C) == 0
      && (!*(_QWORD *)(v13 + 16) || (WebCore::RenderStyle::hasBorderRadius(v20) & 1) == 0))
    {
      v22[0] = (uint64_t)a4;
      v22[1] = (uint64_t)&v23;
      if ((WebCore::InlineIterator::BoxIterator::atEnd(a4) & 1) != 0
        || WebCore::BackgroundPainter::boxShadowShouldBeAppliedToBackground(WebCore::RenderBoxModelObject const&,WebCore::LayoutPoint const&,WebCore::BackgroundBleedAvoidance,WebCore::InlineIterator::InlineBoxIterator const&)::$_0::operator()(v22))
      {
        v15 = *(_DWORD *)(a1 + 20);
        if ((v15 & 0x10000) != 0)
        {
          v6 = 0;
          if ((*(_WORD *)(v23 + 58) & 3) != 1 && *(_BYTE *)(a1 + 46) != 37)
          {
LABEL_37:
            v6 = 1;
            if ((*(_BYTE *)(a1 + 52) & 7) == 3 && (*(_BYTE *)(a1 + 53) & 1) != 0)
            {
              v16 = v15 & 0x60000000;
              if (v16 == 0x20000000)
              {
                if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 296))(a1, a2))
                  v16 = 0x40000000;
                else
                  v16 = 1610612736;
                *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0x9FFFFFFF | v16;
              }
              v6 = v16 != 0x40000000;
            }
          }
LABEL_24:
          if ((v24 & 0x8000000000000) == 0)
            return v6;
          v14 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
          goto LABEL_47;
        }
        if (*(_BYTE *)(a1 + 46) != 37)
          goto LABEL_37;
      }
    }
    v6 = 0;
    goto LABEL_24;
  }
  v6 = 0;
  do
  {
LABEL_47:
    v17 = __ldaxr(v14);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v14));
  if (!v18)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, v11);
  }
  return v6;
}

uint64_t WebCore::InlineIterator::BoxIterator::atEnd(WebCore::InlineIterator::BoxIterator *this)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::BackgroundPainter::paintFillLayer(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WebCore::InlineIterator::BoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v5, this);
  }
}

void WebCore::BackgroundPainter::paintFillLayer(const WebCore::CachedImageClient **a1, unint64_t *a2, uint64_t a3, uint64_t *a4, int a5, unsigned int *a6, __int128 *a7, uint64_t a8, const WebCore::CachedImageClient *a9, int a10)
{
  const WebCore::CachedImageClient **v14;
  _BYTE *v15;
  uint64_t v17;
  int v18;
  const WebCore::CachedImageClient *v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  __int16 v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const WebCore::LayoutSize *v30;
  __n128 v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  double v42;
  int v43;
  double v44;
  double v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  BOOL v50;
  int v51;
  double v52;
  double v53;
  int v54;
  double v55;
  double v56;
  BOOL v57;
  int v58;
  int v59;
  int v60;
  double v61;
  double v62;
  WebCore::GraphicsContext *v63;
  int v64;
  double v65;
  double v66;
  unsigned int v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  int v73;
  const WebCore::CachedImageClient *v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  const WebCore::CachedImageClient *v79;
  uint64_t v80;
  WebCore *v81;
  BOOL v82;
  BOOL v83;
  BOOL v84;
  uint64_t v85;
  __n128 v86;
  __n128 v87;
  __n128 v88;
  __n128 v89;
  __n128 v90;
  __n128 v91;
  double v92;
  double v93;
  double v94;
  double v95;
  int v96;
  int v97;
  double v98;
  double v99;
  int v100;
  int v101;
  double v102;
  double v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float32x4_t v111;
  int v112;
  int v113;
  int v114;
  int v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  __n128 v124;
  __n128 v125;
  BOOL v126;
  BOOL v127;
  int v129;
  BOOL v130;
  _BOOL4 v131;
  BOOL v132;
  BOOL v133;
  BOOL v134;
  WebCore::ImageBuffer *v135;
  const WebCore::LayoutSize *v136;
  WebCore::ImageBuffer *v137;
  const WebCore::LayoutSize *v138;
  unint64_t v139;
  const WebCore::LayoutSize *v140;
  unint64_t v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  WebCore::ImageBuffer **v149;
  __int16 v150;
  int v151;
  _BYTE *v152;
  WebCore::ImageBuffer **v153;
  _BYTE *v154;
  BOOL v155;
  BOOL v156;
  _BOOL4 v158;
  int v159;
  int v160;
  unsigned int v161;
  int v162;
  uint64_t v163;
  int v164;
  WebCore::RenderView *v165;
  uint64_t v166;
  _BOOL4 shouldPaintBaseBackground;
  BOOL v168;
  int v169;
  int v170;
  int v171;
  const WebCore::CachedImageClient *v172;
  _BOOL4 ShouldBeAppliedToBackground;
  uint64_t v174;
  signed int *v175;
  unsigned int v176;
  unsigned int v177;
  signed int v178;
  uint64_t v179;
  signed int v180;
  signed int v181;
  int v182;
  int v183;
  signed int v184;
  int v185;
  unsigned int v186;
  uint64_t v187;
  char v188;
  int v189;
  int v190;
  int v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  _BYTE *v196;
  const WebCore::CachedImageClient **v197;
  int v198;
  int v199;
  WTF *v200;
  void *v201;
  uint64_t v202;
  unint64_t v203;
  char v204;
  WebCore::GraphicsContext *v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  _BOOL4 v210;
  const WebCore::RenderStyle *v211;
  uint64_t v212;
  uint64_t v213;
  float v214;
  uint64_t v215;
  uint64_t v216;
  float *v217;
  int v218;
  WebCore::ImageBuffer *v219;
  const WebCore::CachedImageClient *v220;
  int32x4_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  int v226;
  unsigned int v227;
  unsigned int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  unsigned int v233;
  unsigned int v234;
  int v235;
  unsigned int v236;
  int v237;
  unsigned int v238;
  unsigned int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  const WebCore::RenderStyle *v244;
  int v245;
  uint64_t v246;
  float v247;
  uint64_t v248;
  unsigned int v249;
  int v250;
  WTF *v251;
  void *v252;
  unsigned int *v253;
  unsigned int v254;
  int v255;
  int v256;
  unsigned int v257;
  unsigned int v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  unint64_t v267;
  WebCore::ImageBuffer *v268;
  float v269;
  float v270;
  float v271;
  float32_t v272;
  unsigned int *v273;
  unsigned int v274;
  unint64_t v275;
  unsigned int *v276;
  unsigned int v277;
  unsigned int v278;
  uint64_t *v279;
  uint64_t v280;
  int v281;
  uint64_t *v282;
  uint64_t v283;
  int v284;
  int v285;
  uint64_t v286;
  int v287;
  int v288;
  unsigned int v289;
  uint64_t v290;
  int v291;
  unsigned int v292;
  int v293;
  int v294;
  int v295;
  unsigned int v296;
  unsigned int v297;
  int v298;
  unsigned int v299;
  int v300;
  _BOOL8 v301;
  __int16 hasClosedLeftAndRightEdge;
  WebCore::CachedImage *v303;
  uint64_t v304;
  int v305;
  _BOOL8 v306;
  _BOOL8 v307;
  int v308;
  uint64_t v309;
  uint64_t v310;
  unsigned int v311;
  unsigned int v312;
  int v313;
  int v314;
  unsigned int v315;
  int v316;
  unsigned int v317;
  int v318;
  unsigned int v319;
  unsigned int v320;
  int v321;
  int v322;
  int v323;
  int32x4_t v324;
  WebCore::RenderStyle *v325;
  unsigned int *v326;
  unsigned int v327;
  unsigned int v328;
  char v329;
  void *v330;
  unint64_t v331;
  unsigned int *v332;
  unsigned int v333;
  unsigned int v334;
  unsigned __int8 v335;
  int v336;
  const WebCore::CachedImageClient *v337;
  const WebCore::CachedImageClient *v338;
  const WebCore::CachedImageClient *v339;
  double v340;
  int v342;
  double v343;
  int v345;
  double v346;
  int v347;
  double v348;
  int v349;
  int v350;
  int v351;
  int v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int v357;
  int v358;
  int v359;
  uint64_t isFirst;
  const WebCore::Image *v361;
  uint64_t v362;
  int v363;
  int v364;
  int v365;
  int v366;
  int v367;
  float32x2_t v368;
  uint64_t v369;
  uint64_t v370;
  void *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  BOOL v378;
  int v379;
  _BOOL8 v380;
  uint64_t v381;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  BOOL v386;
  int v387;
  WebCore::CachedImage *v388;
  uint64_t v389;
  uint64_t v390;
  int v391;
  unsigned int *v392;
  unsigned int v393;
  unsigned int v394;
  int v395;
  _BOOL4 v396;
  unsigned int *v397;
  unsigned int v398;
  unsigned int v399;
  unsigned int *v400;
  unsigned int v401;
  unsigned int v402;
  _BOOL4 v403;
  _BOOL4 v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int *v407;
  unsigned int v408;
  unsigned int v409;
  int v410;
  int v411;
  _BYTE *v412;
  WebCore::GraphicsContext *v413;
  _BOOL4 v414;
  int v415;
  int v416;
  unsigned int v417;
  unsigned int v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t *v421;
  int v422;
  int v423;
  uint64_t *v424;
  uint64_t *v425;
  int *v426;
  uint64_t v427;
  int v428;
  int v429;
  uint64_t v430;
  int v431;
  _BOOL4 v432;
  int v433;
  unsigned int v434;
  int v435;
  int v436;
  int v437;
  int v439;
  _BOOL4 v440;
  float v443;
  __int32 v444;
  uint64_t v445;
  float32x2_t v446;
  WebCore::ImageBuffer *v447[2];
  __n128 v448;
  __int128 v449;
  int32x2_t v450;
  float32x2_t v451;
  unint64_t v452;
  int v453;
  int v454;
  float32x2_t v455;
  __int128 v456;
  _BYTE v457[48];
  _BYTE v458[48];
  unint64_t v459;
  float v460;
  float v461;
  unint64_t v462;
  uint64_t v463;
  unint64_t v464;
  int v465;

  v14 = a1;
  v15 = (_BYTE *)*((_QWORD *)a1[1] + 10);
  if ((!(*(unsigned int (**)(_BYTE *))(*(_QWORD *)v15 + 40))(v15)
     || (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v15 + 72))(v15))
    && *((int *)a4 + 2) >= 1
    && *((_DWORD *)a4 + 3) >= 1)
  {
    v17 = a6[4];
    if ((_DWORD)v17 == -1)
    {
LABEL_546:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_547;
    }
    v447[0] = (WebCore::ImageBuffer *)v458;
    if ((((uint64_t (*)(WebCore::ImageBuffer **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v17])(v447) & 1) != 0)
    {
      v428 = 1;
      v18 = 1;
    }
    else
    {
      v301 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)a6);
      hasClosedLeftAndRightEdge = WebCore::InlineIterator::InlineBox::hasClosedLeftAndRightEdge((WebCore::InlineIterator::InlineBox *)v301);
      v428 = hasClosedLeftAndRightEdge;
      v18 = HIBYTE(hasClosedLeftAndRightEdge);
    }
    v19 = *v14;
    v20 = *(_QWORD *)(*((_QWORD *)*v14 + 11) + 24);
    if (*(_BYTE *)(v20 + 212))
      v21 = *(_BYTE *)(v20 + 212) == 11;
    else
      v21 = 1;
    v426 = (int *)a7;
    if (!v21)
    {
      if (*(_BYTE *)(v20 + 214))
      {
        if (*(float *)(v20 + 208) == 0.0)
          goto LABEL_15;
      }
      else if (!*(_DWORD *)(v20 + 208))
      {
        goto LABEL_15;
      }
    }
    if (*(_BYTE *)(v20 + 220))
      v130 = *(_BYTE *)(v20 + 220) == 11;
    else
      v130 = 1;
    if (v130)
      goto LABEL_207;
    if (*(_BYTE *)(v20 + 222))
    {
      if (*(float *)(v20 + 216) != 0.0)
        goto LABEL_207;
    }
    else if (*(_DWORD *)(v20 + 216))
    {
      goto LABEL_207;
    }
LABEL_15:
    if (*(_BYTE *)(v20 + 228))
      v22 = *(_BYTE *)(v20 + 228) == 11;
    else
      v22 = 1;
    if (!v22)
    {
      if (*(_BYTE *)(v20 + 230))
      {
        if (*(float *)(v20 + 224) == 0.0)
          goto LABEL_21;
      }
      else if (!*(_DWORD *)(v20 + 224))
      {
        goto LABEL_21;
      }
    }
    if (*(_BYTE *)(v20 + 236))
      v132 = *(_BYTE *)(v20 + 236) == 11;
    else
      v132 = 1;
    if (v132)
      goto LABEL_207;
    if (*(_BYTE *)(v20 + 238))
    {
      if (*(float *)(v20 + 232) != 0.0)
        goto LABEL_207;
    }
    else if (*(_DWORD *)(v20 + 232))
    {
      goto LABEL_207;
    }
LABEL_21:
    if (*(_BYTE *)(v20 + 244))
      v23 = *(_BYTE *)(v20 + 244) == 11;
    else
      v23 = 1;
    if (!v23)
    {
      if (*(_BYTE *)(v20 + 246))
      {
        if (*(float *)(v20 + 240) == 0.0)
          goto LABEL_27;
      }
      else if (!*(_DWORD *)(v20 + 240))
      {
LABEL_27:
        if (*(_BYTE *)(v20 + 260))
          v24 = *(_BYTE *)(v20 + 260) == 11;
        else
          v24 = 1;
        if (!v24)
        {
          if (*(_BYTE *)(v20 + 262))
          {
            if (*(float *)(v20 + 256) == 0.0)
              goto LABEL_33;
          }
          else if (!*(_DWORD *)(v20 + 256))
          {
LABEL_33:
            v432 = 0;
            goto LABEL_34;
          }
        }
        if (*(_BYTE *)(v20 + 268) && *(_BYTE *)(v20 + 268) != 11)
        {
          if (*(_BYTE *)(v20 + 270))
          {
            if (*(float *)(v20 + 264) == 0.0)
              goto LABEL_33;
          }
          else if (!*(_DWORD *)(v20 + 264))
          {
            goto LABEL_33;
          }
        }
LABEL_207:
        if (v428)
          v131 = 1;
        else
          v131 = v18 != 0;
        v432 = v131;
LABEL_34:
        v25 = *(_WORD *)(a3 + 58);
        v26 = (*((_BYTE *)v19 + 22) & 1) != 0 && (v25 & 3) == 1;
        v440 = v26;
        v27 = *(_QWORD *)(*((_QWORD *)v19 + 3) + 8);
        v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 40) + 8) + 1272);
        v462 = *a2;
        if ((v462 & 0x8000000000000) != 0)
        {
          v253 = (unsigned int *)(v462 & 0xFFFFFFFFFFFFLL);
          do
            v254 = __ldaxr(v253);
          while (__stlxr(v254 + 1, v253));
        }
        v427 = *(_QWORD *)(a3 + 16);
        if (v427)
          v439 = (*(uint64_t (**)(uint64_t, const WebCore::CachedImageClient *, float))(*(_QWORD *)v427 + 208))(v427, *v14, *(float *)(*((_QWORD *)v19 + 13) + 184));
        else
          v439 = 0;
        if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v15 + 72))(v15))
        {
          v245 = v439;
          if ((v15[716] & 2) != 0)
            v245 = 0;
          if (v245 == 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v427 + 200))(v427))
          {
            v246 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v19 + 11) + 16) + 8);
            if ((*(_WORD *)(v246 + 58) & 0x1800) != 0x1000
              || !WebCore::LengthSize::isEmpty((WebCore::LengthSize *)(v246 + 40)))
            {
              v15[716] |= 2u;
            }
            goto LABEL_197;
          }
        }
        if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v15 + 64))(v15))
        {
          if (v439)
          {
            v303 = (WebCore::CachedImage *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v427 + 200))(v427);
            if (WebCore::CachedImage::isClientWaitingForAsyncDecoding(v303, *v14))
            {
              v304 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v427 + 200))(v427);
              WebCore::CachedImage::removeAllClientsWaitingForAsyncDecoding(v304);
            }
          }
          goto LABEL_197;
        }
        v32 = a10;
        v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v14 + 3) + 8) + 40) + 8);
        if (*(_BYTE *)(v33 + 3382))
        {
          if ((*(_QWORD *)(*(_QWORD *)(v33 + 680) + 696) & 0x400000) == 0 && (*((_DWORD *)v19 + 31) & 0x20) == 0)
          {
            if (*(_QWORD *)(a3 + 8))
            {
              v403 = 0;
            }
            else if ((v462 & 0x8000000000000) != 0)
            {
              v403 = *(float *)((v462 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
            }
            else
            {
              v403 = v462 != 0;
            }
            if ((v439 | v403) == 1)
            {
              v447[0] = (WebCore::ImageBuffer *)0x11040000FFFFFFFFLL;
              WebCore::Color::operator=(&v462, v447);
              if (((unint64_t)v447[0] & 0x8000000000000) != 0)
              {
                v407 = (unsigned int *)((unint64_t)v447[0] & 0xFFFFFFFFFFFFLL);
                do
                {
                  v408 = __ldaxr(v407);
                  v409 = v408 - 1;
                }
                while (__stlxr(v409, v407));
                if (!v409)
                {
                  atomic_store(1u, v407);
                  WTF::fastFree((WTF *)v407, v29);
                }
              }
            }
            v439 = 0;
          }
          v32 = a10;
        }
        if (v32 != 1)
        {
          v34 = v462;
          goto LABEL_45;
        }
        if (v28 == v27 && !*(_QWORD *)(a3 + 8))
        {
          v34 = v462;
          if ((v462 & 0x8000000000000) != 0)
          {
            if (*(float *)((v462 & 0xFFFFFFFFFFFFLL) + 0x10) == 1.0)
              goto LABEL_197;
          }
          else if ((_BYTE)v462 == 0xFF)
          {
            goto LABEL_197;
          }
LABEL_45:
          if ((v34 & 0x8000000000000) != 0)
            v35 = *(float *)((v34 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
          else
            v35 = v34 != 0;
          v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v14 + 3) + 8) + 40) + 8) + 528);
          v37 = 1.0;
          if (v36)
          {
            v38 = *(_QWORD *)(v36 + 8);
            if (v38)
            {
              v39 = *(_QWORD *)(v38 + 24);
              if (v39)
              {
                v40 = *(_QWORD *)(v39 + 8);
                if (v40)
                {
                  v41 = (*(_DWORD *)v40)++;
                  v37 = *(float *)(v40 + 364);
                  if (v41)
                  {
                    *(_DWORD *)v40 = v41;
                  }
                  else
                  {
                    v421 = a4;
                    v193 = v28;
                    v194 = v27;
                    v195 = a5;
                    v196 = v15;
                    v197 = v14;
                    v198 = v18;
                    v199 = v32;
                    WebCore::Page::~Page(v40);
                    WTF::fastFree(v200, v201);
                    v32 = v199;
                    v18 = v198;
                    v14 = v197;
                    v15 = v196;
                    a5 = v195;
                    v27 = v194;
                    v28 = v193;
                    a4 = v421;
                  }
                }
              }
            }
          }
          v42 = (double)*(int *)a4 * 0.015625;
          if (v42 < 0.0)
            v31.n128_f64[0] = round((v42 + (double)-*(_DWORD *)a4) * v37) / v37
                            - (double)-*(_DWORD *)a4;
          else
            v31.n128_f64[0] = round(v42 * v37) / v37;
          v43 = *((_DWORD *)a4 + 1);
          v44 = (double)v43 * 0.015625;
          if (v44 < 0.0)
            v45 = round((v44 + (double)-v43) * v37) / v37 - (double)-v43;
          else
            v45 = round(v44 * v37) / v37;
          v46 = *((_DWORD *)a4 + 2);
          v47 = *a4;
          v48 = HIDWORD(*a4);
          if ((int)*a4 <= 0)
            v49 = -(-(int)*a4 & 0x3F);
          else
            v49 = *(_DWORD *)a4 & 0x3F;
          v50 = __OFADD__(v49, v46);
          v51 = v49 + v46;
          if (v50)
            v51 = (v49 >> 31) + 0x7FFFFFFF;
          v52 = (double)v51 * 0.015625;
          if (v52 < 0.0)
            v53 = round((v52 + (double)-v51) * v37) / v37 - (double)-v51;
          else
            v53 = round(v52 * v37) / v37;
          v54 = *((_DWORD *)a4 + 3);
          v55 = (double)v49 * 0.015625;
          if (v55 < 0.0)
            v56 = round((v55 + (double)-v49) * v37) / v37 - (double)-v49;
          else
            v56 = round(v55 * v37) / v37;
          v57 = -(int)v48 < 0;
          v58 = -(int)v48 & 0x3F;
          v59 = HIDWORD(*a4) & 0x3F;
          if (!v57)
            v59 = -v58;
          v60 = v59 + v54;
          if (__OFADD__(v59, v54))
            v60 = (v59 >> 31) + 0x7FFFFFFF;
          v61 = (double)v60 * 0.015625;
          if (v61 < 0.0)
            v62 = round((v61 + (double)-v60) * v37) / v37 - (double)-v60;
          else
            v62 = round(v61 * v37) / v37;
          v63 = (const WebCore::CachedImageClient *)((char *)v19 + 80);
          v64 = v25 & 0x1C;
          v65 = (double)v59 * 0.015625;
          if (v65 < 0.0)
            v66 = round((v65 + (double)-v59) * v37) / v37 - (double)-v59;
          else
            v66 = round(v65 * v37) / v37;
          *(float *)&v67 = v45;
          v31.n128_f32[0] = v31.n128_f64[0];
          v68 = v53;
          v69 = v56;
          v70 = v68 - v69;
          v71 = v62;
          v72 = v66;
          v459 = __PAIR64__(v67, v31.n128_u32[0]);
          v460 = v70;
          v461 = v71 - v72;
          v73 = v440;
          if (v28 == v27)
            v73 = 1;
          if (((v73 | v439) & 1) == 0 && !v64 && !*(_QWORD *)(a3 + 8))
          {
            if (!v35)
              goto LABEL_197;
            v74 = *v14;
            v463 = v47;
            if (a5)
              goto LABEL_85;
            v75 = *(_QWORD *)(*((_QWORD *)v74 + 11) + 32);
            if ((*(_DWORD *)(v75 + 148) & 0x1FC000) != 0)
              goto LABEL_85;
            v76 = *(_QWORD *)(v75 + 88);
            if (!v76)
              goto LABEL_85;
            v204 = 0;
            do
            {
              if (!*(_BYTE *)(v76 + 48))
              {
                if ((v204 & 1) != 0)
                  goto LABEL_85;
                if (!*(_BYTE *)(v76 + 20) || *(_BYTE *)(v76 + 20) == 11)
                  goto LABEL_85;
                if (*(_BYTE *)(v76 + 22))
                {
                  if (*(float *)(v76 + 16) != 0.0)
                    goto LABEL_85;
                }
                else if (*(_DWORD *)(v76 + 16))
                {
                  goto LABEL_85;
                }
                v204 = 1;
              }
              v76 = *(_QWORD *)(v76 + 56);
            }
            while (v76);
            if ((v204 & 1) == 0)
              goto LABEL_85;
            v206 = v63;
            WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)v74 + 80, 61, 0, (unint64_t *)v458);
            if ((*(_QWORD *)v458 & 0x8000000000000) != 0)
            {
              v400 = (unsigned int *)(*(_QWORD *)v458 & 0xFFFFFFFFFFFFLL);
              if (*(float *)((*(_QWORD *)v458 & 0xFFFFFFFFFFFFLL) + 0x10) != 1.0)
              {
                v210 = 0;
                goto LABEL_856;
              }
            }
            else if (v458[0] != 0xFF)
            {
              goto LABEL_85;
            }
            v208 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v74 + 11) + 16) + 8);
            do
            {
              v209 = v208;
              v208 = *(_QWORD *)(v208 + 8);
            }
            while (v208);
            *(_QWORD *)v457 = v209;
            if ((*(_WORD *)(v209 + 58) & 0x1C) == 0
              && (!*(_QWORD *)(v209 + 16)
               || (WebCore::RenderStyle::hasBorderRadius((const WebCore::CachedImageClient *)((char *)v74 + 80)) & 1) == 0))
            {
              v447[0] = (WebCore::ImageBuffer *)a6;
              v447[1] = (WebCore::ImageBuffer *)v457;
              if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)a6) & 1) != 0
                || WebCore::BackgroundPainter::boxShadowShouldBeAppliedToBackground(WebCore::RenderBoxModelObject const&,WebCore::LayoutPoint const&,WebCore::BackgroundBleedAvoidance,WebCore::InlineIterator::InlineBoxIterator const&)::$_0::operator()((uint64_t *)v447))
              {
                v391 = *((_DWORD *)v74 + 5);
                if ((v391 & 0x10000) != 0)
                {
                  v210 = 0;
                  if ((*(_WORD *)(*(_QWORD *)v457 + 58) & 3) != 1 && *((_BYTE *)v74 + 46) != 37)
                  {
LABEL_820:
                    v210 = 1;
                    if ((*((_BYTE *)v74 + 52) & 7) == 3 && (*((_BYTE *)v74 + 53) & 1) != 0)
                    {
                      v395 = v391 & 0x60000000;
                      if (v395 == 0x20000000)
                      {
                        if ((*(unsigned int (**)(const WebCore::CachedImageClient *, uint64_t *))(*(_QWORD *)v74 + 296))(v74, &v463))
                        {
                          v395 = 0x40000000;
                        }
                        else
                        {
                          v395 = 1610612736;
                        }
                        *((_DWORD *)v74 + 5) = *((_DWORD *)v74 + 5) & 0x9FFFFFFF | v395;
                      }
                      v210 = v395 != 0x40000000;
                    }
                  }
LABEL_409:
                  if ((*(_QWORD *)v458 & 0x8000000000000) == 0)
                  {
LABEL_410:
                    if (v210)
                      goto LABEL_411;
LABEL_85:
                    v77 = 1;
                    goto LABEL_86;
                  }
                  v400 = (unsigned int *)(*(_QWORD *)v458 & 0xFFFFFFFFFFFFLL);
                  do
                  {
LABEL_856:
                    v401 = __ldaxr(v400);
                    v402 = v401 - 1;
                  }
                  while (__stlxr(v402, v400));
                  if (!v402)
                  {
                    v77 = 1;
                    atomic_store(1u, v400);
                    WTF::fastFree((WTF *)v400, v207);
                    if (!v210)
                    {
LABEL_86:
                      v78 = !v432;
                      if (a5 == 2)
                        v78 = 1;
                      if ((v78 & 1) != 0)
                      {
                        (*(void (**)(_BYTE *, unint64_t *, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v15 + 248))(v15, &v459, &v462, a8, 1);
                        goto LABEL_196;
                      }
                      if (a5 == 1)
                      {
                        v212 = *((_QWORD *)v14[1] + 10);
                        v213 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v14 + 3) + 8) + 40) + 8)
                                         + 528);
                        v214 = 1.0;
                        if (v213)
                        {
                          v215 = *(_QWORD *)(v213 + 8);
                          if (v215)
                          {
                            v216 = *(_QWORD *)(v215 + 24);
                            if (v216)
                            {
                              v217 = *(float **)(v216 + 8);
                              if (v217)
                              {
                                v218 = (*(_DWORD *)v217)++;
                                v214 = v217[91];
                                if (v218)
                                {
                                  *(_DWORD *)v217 = v218;
                                }
                                else
                                {
                                  WebCore::Page::~Page((uint64_t)v217);
                                  WTF::fastFree(v251, v252);
                                }
                              }
                            }
                          }
                        }
                        v447[0] = (WebCore::ImageBuffer *)WebCore::shrinkRectByOneDevicePixel(v212, *a4, v214);
                        v447[1] = v219;
                        WebCore::BackgroundPainter::backgroundRoundedRect((WebCore::BackgroundPainter *)v457, (const WebCore::LayoutRect *)v14, (const WebCore::InlineIterator::InlineBoxIterator *)v447, (WebCore::InlineIterator::BoxIterator *)a6, (const WebCore::LayoutSize *)(v428 != 0), v18 != 0);
                        goto LABEL_115;
                      }
                      if (a5 == 3)
                      {
                        WebCore::RenderStyle::getRoundedInnerBorderFor((const WebCore::CachedImageClient *)((char *)*v14 + 80), (const WebCore::LayoutRect *)a4, v428 != 0, v18 != 0, (uint64_t)v457);
LABEL_115:
                        if (*(int *)&v457[8] < 1 || *(uint64_t *)&v457[8] <= 0)
                        {
                          v125 = (__n128)vdupq_n_s32(0x3C800000u);
                          v108 = (float)*(int *)&v457[8] * 0.015625;
                          v88 = *(__n128 *)&v457[20];
                          v89 = *(__n128 *)&v457[12];
                          *(float *)v458 = (float)*(int *)v457 * 0.015625;
                          *(float *)&v458[4] = (float)*(int *)&v457[4] * 0.015625;
                          v111 = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)&v457[12]), (float32x4_t)v125);
                          *(float32x4_t *)&v458[12] = v111;
                          v124 = (__n128)vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)&v457[28]), (float32x4_t)v125);
                          *(__n128 *)&v458[28] = v124;
                          *(float *)&v458[8] = v108;
                          *(float *)&v458[44] = (float)*(int *)&v457[44] * 0.015625;
                        }
                        else
                        {
                          v92 = (double)*(int *)v457 * 0.015625;
                          if (v92 < 0.0)
                            v93 = round((v92 + (double)-*(_DWORD *)v457) * v37) / v37
                                - (double)-*(_DWORD *)v457;
                          else
                            v93 = round(v92 * v37) / v37;
                          v94 = (double)*(int *)&v457[4] * 0.015625;
                          if (v94 < 0.0)
                            v95 = round((v94 + (double)-*(_DWORD *)&v457[4]) * v37) / v37
                                - (double)-*(_DWORD *)&v457[4];
                          else
                            v95 = round(v94 * v37) / v37;
                          v96 = v457[0] & 0x3F;
                          if (*(int *)v457 <= 0)
                            v96 = -(-*(_DWORD *)v457 & 0x3F);
                          v97 = v96 + *(_DWORD *)&v457[8];
                          if (__OFADD__(v96, *(_DWORD *)&v457[8]))
                            v97 = (v96 >> 31) + 0x7FFFFFFF;
                          v98 = (double)v97 * 0.015625;
                          if (v98 < 0.0)
                            v86.n128_f64[0] = round((v98 + (double)-v97) * v37) / v37
                                            - (double)-v97;
                          else
                            v86.n128_f64[0] = round(v98 * v37) / v37;
                          v99 = (double)v96 * 0.015625;
                          if (v99 < 0.0)
                            v87.n128_f64[0] = round((v99 + (double)-v96) * v37) / v37
                                            - (double)-v96;
                          else
                            v87.n128_f64[0] = round(v99 * v37) / v37;
                          v100 = v457[4] & 0x3F;
                          if (*(int *)&v457[4] <= 0)
                            v100 = -(-*(_DWORD *)&v457[4] & 0x3F);
                          v101 = v100 + *(_DWORD *)&v457[12];
                          if (__OFADD__(v100, *(_DWORD *)&v457[12]))
                            v101 = (v100 >> 31) + 0x7FFFFFFF;
                          v102 = (double)v101 * 0.015625;
                          if (v102 < 0.0)
                            v88.n128_f64[0] = round((v102 + (double)-v101) * v37) / v37
                                            - (double)-v101;
                          else
                            v88.n128_f64[0] = round(v102 * v37) / v37;
                          v103 = (double)v100 * 0.015625;
                          if (v103 < 0.0)
                          {
                            v90.n128_f64[0] = (double)-v100;
                            v91.n128_f64[0] = v37;
                            v89.n128_f64[0] = round((v103 + v90.n128_f64[0]) * v37) / v37 - v90.n128_f64[0];
                          }
                          else
                          {
                            v90.n128_f64[0] = v37;
                            v89.n128_f64[0] = round(v103 * v37) / v37;
                          }
                          v104 = v95;
                          v105 = v93;
                          v106 = v86.n128_f64[0];
                          v107 = v87.n128_f64[0];
                          v108 = v106 - v107;
                          v109 = v88.n128_f64[0];
                          v110 = v89.n128_f64[0];
                          v111.f32[0] = v109 - v110;
                          if ((*(_DWORD *)&v457[16] & 0x80000000) != 0
                            || (*(_DWORD *)&v457[20] & 0x80000000) != 0
                            || (*(_DWORD *)&v457[32] & 0x80000000) != 0
                            || (*(_DWORD *)&v457[36] & 0x80000000) != 0
                            || (*(_DWORD *)&v457[24] & 0x80000000) != 0
                            || (*(_DWORD *)&v457[28] & 0x80000000) != 0
                            || (*(_DWORD *)&v457[40] & 0x80000000) != 0
                            || (*(_DWORD *)&v457[44] & 0x80000000) != 0)
                          {
                            goto LABEL_525;
                          }
                          v112 = *(_DWORD *)&v457[16] + *(_DWORD *)&v457[24];
                          if (__OFADD__(*(_DWORD *)&v457[16], *(_DWORD *)&v457[24]))
                            v112 = 0x7FFFFFFF;
                          if (v112 > *(int *)&v457[8])
                            goto LABEL_525;
                          v113 = *(_DWORD *)&v457[32] + *(_DWORD *)&v457[40];
                          if (__OFADD__(*(_DWORD *)&v457[32], *(_DWORD *)&v457[40]))
                            v113 = 0x7FFFFFFF;
                          if (v113 > *(int *)&v457[8])
                            goto LABEL_525;
                          v114 = *(_DWORD *)&v457[20] + *(_DWORD *)&v457[36];
                          if (__OFADD__(*(_DWORD *)&v457[20], *(_DWORD *)&v457[36]))
                            v114 = 0x7FFFFFFF;
                          if (v114 > *(int *)&v457[12])
                            goto LABEL_525;
                          v115 = *(_DWORD *)&v457[28] + *(_DWORD *)&v457[44];
                          if (__OFADD__(*(_DWORD *)&v457[28], *(_DWORD *)&v457[44]))
                            v115 = 0x7FFFFFFF;
                          if (v115 > *(int *)&v457[12])
                          {
LABEL_525:
                            v269 = v104;
                            v270 = v105;
                            v443 = v109 - v110;
                            v124.n128_u64[0] = (unint64_t)WebCore::FloatRoundedRect::Radii::Radii((float32x2_t *)&v458[16], (int32x2_t *)&v457[16]);
                            v111.f32[0] = v443;
                            *(float *)v458 = v270;
                            *(float *)&v458[4] = v269;
                            *(float *)&v458[8] = v108;
                            *(float *)&v458[12] = v443;
                          }
                          else
                          {
                            v116 = (float)*(int *)&v457[20] * 0.015625;
                            *(float *)v447 = (float)*(int *)&v457[16] * 0.015625;
                            *((float *)v447 + 1) = v116;
                            v117 = (float)*(int *)&v457[28] * 0.015625;
                            *(float *)&v447[1] = (float)*(int *)&v457[24] * 0.015625;
                            *((float *)&v447[1] + 1) = v117;
                            v118 = (float)*(int *)&v457[32] * 0.015625;
                            v119 = (float)*(int *)&v457[36] * 0.015625;
                            v448.n128_f32[0] = v118;
                            v448.n128_f32[1] = v119;
                            v120 = (float)*(int *)&v457[44] * 0.015625;
                            v448.n128_f32[2] = (float)*(int *)&v457[40] * 0.015625;
                            v448.n128_f32[3] = v120;
                            v121 = v108 / (float)((float)*(int *)&v457[8] * 0.015625);
                            v122 = v111.f32[0] / (float)((float)*(int *)&v457[12] * 0.015625);
                            if (v121 != 1.0 || v122 != 1.0)
                            {
                              *(float *)v447 = v121 * (float)((float)*(int *)&v457[16] * 0.015625);
                              *((float *)v447 + 1) = v122 * v116;
                              if (*(float *)v447 == 0.0 || (float)(v122 * v116) == 0.0)
                                v447[0] = 0;
                              *(float *)&v447[1] = v121 * (float)((float)*(int *)&v457[24] * 0.015625);
                              *((float *)&v447[1] + 1) = v122 * v117;
                              if (*(float *)&v447[1] == 0.0 || (float)(v122 * v117) == 0.0)
                                v447[1] = 0;
                              v448.n128_f32[0] = v121 * v118;
                              v448.n128_f32[1] = v122 * v119;
                              if ((float)(v121 * v118) == 0.0 || (float)(v122 * v119) == 0.0)
                                v448.n128_u64[0] = 0;
                              v448.n128_f32[2] = v121 * (float)((float)*(int *)&v457[40] * 0.015625);
                              v448.n128_f32[3] = v122 * v120;
                              if (v448.n128_f32[2] == 0.0 || (float)(v122 * v120) == 0.0)
                                v448.n128_u64[1] = 0;
                            }
                            *(float *)v458 = v105;
                            *(float *)&v458[4] = v104;
                            *(float *)&v458[8] = v108;
                            *(_DWORD *)&v458[12] = v111.i32[0];
                            v124 = *(__n128 *)v447;
                            v125 = v448;
                            *(_OWORD *)&v458[16] = *(_OWORD *)v447;
                            *(__n128 *)&v458[32] = v448;
                            if (*(float *)v447 < 0.0
                              || *(float *)&v458[20] < 0.0
                              || *(float *)&v458[32] < 0.0
                              || *(float *)&v458[36] < 0.0
                              || *(float *)&v458[24] < 0.0
                              || *(float *)&v458[28] < 0.0
                              || *(float *)&v458[40] < 0.0
                              || *(float *)&v458[44] < 0.0
                              || (float)(*(float *)v447 + *(float *)&v458[24]) > v108
                              || (v125.n128_f32[0] = *(float *)&v458[32] + *(float *)&v458[40],
                                  (float)(*(float *)&v458[32] + *(float *)&v458[40]) > v108)
                              || (float)(*(float *)&v458[20] + *(float *)&v458[36]) > v111.f32[0]
                              || (float)(*(float *)&v458[28] + *(float *)&v458[44]) > v111.f32[0])
                            {
                              v444 = v111.i32[0];
                              WebCore::FloatRoundedRect::Radii::expand((WebCore::FloatRoundedRect::Radii *)v447, -1.0 / v37, -1.0 / v37, -1.0 / v37, -1.0 / v37);
                              v111.i32[0] = v444;
                              v124 = *(__n128 *)v447;
                              v125 = v448;
                              *(_OWORD *)&v458[16] = *(_OWORD *)v447;
                              *(__n128 *)&v458[32] = v448;
                            }
                          }
                        }
                        v124.n128_u32[0] = *(_DWORD *)&v458[16];
                        if (*(float *)&v458[16] < 0.0)
                          goto LABEL_534;
                        v125.n128_u32[0] = *(_DWORD *)&v458[20];
                        if (*(float *)&v458[20] < 0.0)
                          goto LABEL_534;
                        if (*(float *)&v458[32] < 0.0)
                          goto LABEL_534;
                        v87.n128_u32[0] = *(_DWORD *)&v458[36];
                        if (*(float *)&v458[36] < 0.0)
                          goto LABEL_534;
                        v88.n128_u32[0] = *(_DWORD *)&v458[24];
                        if (*(float *)&v458[24] < 0.0)
                          goto LABEL_534;
                        v89.n128_u32[0] = *(_DWORD *)&v458[28];
                        if (*(float *)&v458[28] < 0.0)
                          goto LABEL_534;
                        v90.n128_u32[0] = *(_DWORD *)&v458[40];
                        if (*(float *)&v458[40] < 0.0)
                          goto LABEL_534;
                        v91.n128_u32[0] = *(_DWORD *)&v458[44];
                        if (*(float *)&v458[44] < 0.0)
                          goto LABEL_534;
                        v86.n128_f32[0] = *(float *)&v458[32] + *(float *)&v458[40];
                        v126 = (float)(*(float *)&v458[16] + *(float *)&v458[24]) > v108 || v86.n128_f32[0] > v108;
                        v124.n128_f32[0] = *(float *)&v458[20] + *(float *)&v458[36];
                        v125.n128_f32[0] = *(float *)&v458[28] + *(float *)&v458[44];
                        v127 = v126 || v124.n128_f32[0] > v111.f32[0];
                        if (v127 || v125.n128_f32[0] > v111.f32[0])
                        {
LABEL_534:
                          (*(void (**)(_BYTE *, uint64_t, __n128, __n128))(*(_QWORD *)v15 + 96))(v15, 1, v124, v125);
                          v272 = WebCore::BackgroundPainter::clipRoundedInnerRect((uint64_t)v15, (float32x2_t *)&v459, (float32x2_t *)v458);
                          (*(void (**)(_BYTE *, _BYTE *, unint64_t *, uint64_t, uint64_t, float32_t))(*(_QWORD *)v15 + 248))(v15, v458, &v462, a8, 1, v272);
                          (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v15 + 104))(v15, 1);
                        }
                        else
                        {
                          v129 = v15[194];
                          if (v129 == (_DWORD)a8)
                          {
                            (*(void (**)(_BYTE *, _BYTE *, unint64_t *, uint64_t, __n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128))(*(_QWORD *)v15 + 264))(v15, v458, &v462, 1, v124, v125, v86, v87, v88, v89, v90, v91);
                          }
                          else
                          {
                            *((_WORD *)v15 + 97) = a8 | 0x100;
                            *((_DWORD *)v15 + 46) |= 0x20u;
                            (*(void (**)(_BYTE *, _BYTE *, __n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128))(*(_QWORD *)v15 + 88))(v15, v15 + 8, v124, v125, v86, v87, v88, v89, v90, v91);
                            (*(void (**)(_BYTE *, _BYTE *, unint64_t *, uint64_t))(*(_QWORD *)v15
                                                                                                  + 264))(v15, v458, &v462, 1);
                            if (v15[194] != v129 || v15[195] != 1)
                            {
                              *((_WORD *)v15 + 97) = v129 | 0x100;
                              *((_DWORD *)v15 + 46) |= 0x20u;
                            }
                            (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v15 + 88))(v15, v15 + 8);
                          }
                        }
LABEL_196:
                        if ((v77 & 1) != 0)
                          goto LABEL_197;
                        goto LABEL_670;
                      }
                      v79 = *v14;
                      memset(&v457[16], 0, 32);
                      *(_OWORD *)v457 = *(_OWORD *)a4;
                      v80 = *(_QWORD *)(*((_QWORD *)v79 + 11) + 24);
                      v81 = (WebCore *)(v80 + 208);
                      if (*(_BYTE *)(v80 + 212))
                        v82 = *(_BYTE *)(v80 + 212) == 11;
                      else
                        v82 = 1;
                      if (!v82)
                      {
                        if (*(_BYTE *)(v80 + 214))
                        {
                          if (*(float *)v81 == 0.0)
                            goto LABEL_97;
                        }
                        else if (!*(_DWORD *)v81)
                        {
                          goto LABEL_97;
                        }
                      }
                      if (*(_BYTE *)(v80 + 220))
                        v134 = *(_BYTE *)(v80 + 220) == 11;
                      else
                        v134 = 1;
                      if (v134)
                        goto LABEL_239;
                      if (*(_BYTE *)(v80 + 222))
                      {
                        if (*(float *)(v80 + 216) != 0.0)
                          goto LABEL_239;
                      }
                      else if (*(_DWORD *)(v80 + 216))
                      {
                        goto LABEL_239;
                      }
LABEL_97:
                      if (*(_BYTE *)(v80 + 228))
                        v83 = *(_BYTE *)(v80 + 228) == 11;
                      else
                        v83 = 1;
                      if (!v83)
                      {
                        if (*(_BYTE *)(v80 + 230))
                        {
                          if (*(float *)(v80 + 224) == 0.0)
                            goto LABEL_103;
                        }
                        else if (!*(_DWORD *)(v80 + 224))
                        {
                          goto LABEL_103;
                        }
                      }
                      if (*(_BYTE *)(v80 + 236))
                        v155 = *(_BYTE *)(v80 + 236) == 11;
                      else
                        v155 = 1;
                      if (v155)
                        goto LABEL_239;
                      if (*(_BYTE *)(v80 + 238))
                      {
                        if (*(float *)(v80 + 232) != 0.0)
                          goto LABEL_239;
                      }
                      else if (*(_DWORD *)(v80 + 232))
                      {
                        goto LABEL_239;
                      }
LABEL_103:
                      if (*(_BYTE *)(v80 + 244))
                        v84 = *(_BYTE *)(v80 + 244) == 11;
                      else
                        v84 = 1;
                      if (!v84)
                      {
                        if (*(_BYTE *)(v80 + 246))
                        {
                          if (*(float *)(v80 + 240) == 0.0)
                            goto LABEL_109;
                        }
                        else if (!*(_DWORD *)(v80 + 240))
                        {
                          goto LABEL_109;
                        }
                      }
                      if (*(_BYTE *)(v80 + 252))
                        v156 = *(_BYTE *)(v80 + 252) == 11;
                      else
                        v156 = 1;
                      if (v156)
                        goto LABEL_239;
                      if (*(_BYTE *)(v80 + 254))
                      {
                        if (*(float *)(v80 + 248) != 0.0)
                          goto LABEL_239;
                      }
                      else if (*(_DWORD *)(v80 + 248))
                      {
                        goto LABEL_239;
                      }
LABEL_109:
                      if (*(_BYTE *)(v80 + 260) && *(_BYTE *)(v80 + 260) != 11)
                      {
                        if (*(_BYTE *)(v80 + 262))
                        {
                          if (*(float *)(v80 + 256) == 0.0)
                            goto LABEL_113;
                        }
                        else if (!*(_DWORD *)(v80 + 256))
                        {
                          goto LABEL_113;
                        }
                      }
                      if (*(_BYTE *)(v80 + 268) && *(_BYTE *)(v80 + 268) != 11)
                      {
                        if (*(_BYTE *)(v80 + 270))
                        {
                          if (*(float *)(v80 + 264) == 0.0)
                            goto LABEL_113;
                        }
                        else if (!*(_DWORD *)(v80 + 264))
                        {
                          goto LABEL_113;
                        }
                      }
LABEL_239:
                      v463 = a4[1];
                      v135 = (WebCore::ImageBuffer *)WebCore::sizeForLengthSize(v81, (const WebCore::LengthSize *)&v463, v30);
                      v137 = (WebCore::ImageBuffer *)WebCore::sizeForLengthSize((WebCore *)(v80 + 224), (const WebCore::LengthSize *)&v463, v136);
                      v139 = WebCore::sizeForLengthSize((WebCore *)(v80 + 240), (const WebCore::LengthSize *)&v463, v138);
                      v141 = WebCore::sizeForLengthSize((WebCore *)(v80 + 256), (const WebCore::LengthSize *)&v463, v140);
                      v447[0] = v135;
                      v447[1] = v137;
                      v448.n128_u64[0] = v139;
                      v448.n128_u64[1] = v141;
                      v142 = (float)*((int *)a4 + 2) * 0.015625;
                      v143 = (float)*((int *)a4 + 3) * 0.015625;
                      v144 = (float)((float)(int)v135 * 0.015625) + (float)((float)(int)v137 * 0.015625);
                      v145 = (float)((float)(int)v139 * 0.015625) + (float)((float)(int)v141 * 0.015625);
                      v146 = (float)((float)SHIDWORD(v135) * 0.015625) + (float)((float)SHIDWORD(v139) * 0.015625);
                      v147 = (float)((float)SHIDWORD(v137) * 0.015625) + (float)((float)SHIDWORD(v141) * 0.015625);
                      if (v145 > v142 || v146 > v143 || v147 > v143 || (v148 = 1.0, v144 > v142))
                      {
                        v148 = 1.0;
                        if (v144 > v142)
                        {
                          v148 = v142 / v144;
                          if ((float)(v142 / v144) > 1.0)
                            v148 = 1.0;
                        }
                        if (v145 > v142)
                        {
                          v271 = v142 / v145;
                          if (v148 >= v271)
                            v148 = v271;
                        }
                        if (v146 > v143 && v148 >= (float)(v143 / v146))
                          v148 = v143 / v146;
                        if (v147 > v143)
                        {
                          v247 = v143 / v147;
                          if (v148 >= v247)
                            v148 = v247;
                        }
                      }
                      v149 = &v447[1];
                      WebCore::RoundedRectRadii::scale((int *)v447, v148);
                      v150 = (unsigned __int16)*((_DWORD *)v79 + 31) >> 13;
                      v329 = 2;
                      switch((unsigned __int16)*((_DWORD *)v79 + 31) >> 13)
                      {
                        case 1:
                        case 2:
                          goto LABEL_245;
                        case 3:
                        case 5:
                          LOBYTE(v150) = 3;
                          goto LABEL_245;
                        case 4:
                          goto LABEL_246;
                        default:
                          LOBYTE(v150) = 0;
LABEL_245:
                          v329 = v150;
LABEL_246:
                          v151 = v329 & 6;
                          if (v428)
                          {
                            if (v151 == 2)
                            {
                              v152 = &v457[24];
                              v153 = &v447[1];
                            }
                            else
                            {
                              v152 = &v457[32];
                              v153 = (WebCore::ImageBuffer **)&v448;
                            }
                            *(_QWORD *)v152 = *v153;
                            *(WebCore::ImageBuffer **)&v457[16] = v447[0];
                          }
                          if (v18)
                          {
                            if (v151 == 2)
                            {
                              v154 = &v457[32];
                              v149 = (WebCore::ImageBuffer **)&v448;
                            }
                            else
                            {
                              v154 = &v457[24];
                            }
                            *(_QWORD *)v154 = *v149;
                            *(_QWORD *)&v457[40] = v448.n128_u64[1];
                          }
                          break;
                      }
LABEL_113:
                      v85 = a6[4];
                      if ((_DWORD)v85 != -1)
                      {
                        v447[0] = (WebCore::ImageBuffer *)&v463;
                        if ((((uint64_t (*)(WebCore::ImageBuffer **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v85])(v447, a6) & 1) == 0)
                        {
                          v306 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)a6);
                          WebCore::InlineIterator::InlineBox::nextInlineBox((WebCore::InlineIterator::InlineBox *)v306, (uint64_t)v447);
                          if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v447))
                          {
                            v307 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)a6);
                            WebCore::InlineIterator::InlineBox::previousInlineBox((WebCore::InlineIterator::InlineBox *)v307, (uint64_t)&v463);
                            v308 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v463) ^ 1;
                            if (v465 != -1)
                              ((void (*)(__int128 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v465])(&v456, &v463);
                          }
                          else
                          {
                            v308 = 1;
                          }
                          if (v448.n128_u32[0] != -1)
                            ((void (*)(uint64_t *, WebCore::ImageBuffer **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v448.n128_u32[0]])(&v463, v447);
                          if (v308)
                          {
                            v325 = (const WebCore::CachedImageClient *)((char *)*v14 + 80);
                            v463 = 0;
                            v464 = a4[1];
                            WebCore::RenderStyle::getRoundedBorderFor(v325, (const WebCore::LayoutRect *)&v463, (const WebCore::LayoutSize *)(v428 != 0), v18 != 0, (uint64_t)v447);
                            *(__n128 *)&v457[16] = v448;
                            *(_OWORD *)&v457[32] = v449;
                          }
                        }
                        goto LABEL_115;
                      }
                      goto LABEL_546;
                    }
LABEL_411:
                    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v15 + 96))(v15, 1);
                    WebCore::applyBoxShadowForBackground((WebCore *)v15, v206, v211);
                    v77 = 0;
                    goto LABEL_86;
                  }
                  goto LABEL_410;
                }
                if (*((_BYTE *)v74 + 46) != 37)
                  goto LABEL_820;
              }
            }
            v210 = 0;
            goto LABEL_409;
          }
          v158 = (a5 != 2 || v64 != 0) && v432;
          if (!v158)
          {
LABEL_283:
            if (v428)
            {
              v279 = a4;
              v280 = v28;
              v281 = v32;
              v159 = (*(uint64_t (**)(const WebCore::CachedImageClient *, __n128))(*(_QWORD *)*v14 + 1016))(*v14, v31);
              v32 = v281;
              v28 = v280;
              a4 = v279;
            }
            else
            {
              v159 = 0;
            }
            if (v18)
            {
              v435 = v159;
              v282 = a4;
              v283 = v28;
              v284 = v32;
              v285 = (*(uint64_t (**)(const WebCore::CachedImageClient *, __n128))(*(_QWORD *)*v14 + 1024))(*v14, v31);
              v32 = v284;
              v28 = v283;
              a4 = v282;
              v160 = v285;
              v159 = v435;
            }
            else
            {
              v160 = 0;
            }
            if (v428)
            {
              v436 = v159;
              v424 = a4;
              v286 = v28;
              v287 = v32;
              v288 = v160;
              v289 = (*(uint64_t (**)(const WebCore::CachedImageClient *, __n128))(*(_QWORD *)*v14 + 944))(*v14, v31);
              v160 = v288;
              v32 = v287;
              v28 = v286;
              a4 = v424;
              v161 = v289;
              v159 = v436;
            }
            else
            {
              v161 = 0;
            }
            if (v18)
            {
              v437 = v159;
              v425 = a4;
              v290 = v28;
              v291 = v32;
              v292 = v161;
              v293 = v160;
              v294 = (*(uint64_t (**)(const WebCore::CachedImageClient *, __n128))(*(_QWORD *)*v14 + 952))(*v14, v31);
              v160 = v293;
              v161 = v292;
              v32 = v291;
              v28 = v290;
              a4 = v425;
              v18 = v294;
              v159 = v437;
            }
            if (!v440)
            {
              *(_OWORD *)v457 = *(_OWORD *)a4;
LABEL_293:
              v463 = 0;
              v464 = 0;
              v162 = (*(unsigned __int8 *)(a3 + 58) >> 2) & 7;
              if (v162 == 3)
              {
                v430 = v27;
                v255 = v32;
                LODWORD(v463) = WebCore::snapRectToDevicePixels((int *)a4, v37);
                HIDWORD(v463) = v256;
                v464 = __PAIR64__(v258, v257);
                v259 = WebCore::snapRectToDevicePixels((int *)v14[1], v37);
                if (*(float *)&v463 >= v259)
                  v263 = *(float *)&v463;
                else
                  v263 = v259;
                if (*((float *)&v463 + 1) >= v260)
                  v264 = *((float *)&v463 + 1);
                else
                  v264 = v260;
                v265 = v259 + v261;
                if (v265 >= (float)(*(float *)&v463 + *(float *)&v464))
                  v265 = *(float *)&v463 + *(float *)&v464;
                v266 = v260 + v262;
                if (v266 >= (float)(*((float *)&v463 + 1) + *((float *)&v464 + 1)))
                  v266 = *((float *)&v463 + 1) + *((float *)&v464 + 1);
                if (v263 >= v265 || v264 >= v266)
                {
                  v263 = 0.0;
                  v264 = 0.0;
                  v265 = 0.0;
                  v266 = 0.0;
                }
                *(float *)&v463 = v263 + -1.0;
                *((float *)&v463 + 1) = v264 + -1.0;
                *(float *)&v464 = (float)((float)(v265 - v263) + 1.0) + 1.0;
                *((float *)&v464 + 1) = (float)((float)(v266 - v264) + 1.0) + 1.0;
                *(_QWORD *)&v456 = v464;
                v267 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
                if (v267 != -1)
                {
                  v447[0] = (WebCore::ImageBuffer *)&v452;
                  *(_QWORD *)v458 = v447;
                  std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, v458, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
                }
                (*(void (**)(WebCore::ImageBuffer **__return_ptr, _BYTE *, __int128 *, uint64_t *, _QWORD))(*(_QWORD *)v15 + 336))(v447, v15, &v456, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 0);
                v268 = v447[0];
                if (!v447[0])
                {
                  v305 = 0;
                  goto LABEL_665;
                }
                WebCore::RenderBoxModelObject::paintMaskForTextFillBox(*v14, v447[0], (const WebCore::FloatRect *)&v463, (const WebCore::InlineIterator::InlineBoxIterator *)a6, (const WebCore::LayoutRect *)v457);
                v433 = 1;
                (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v15 + 96))(v15, 1);
                (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v15 + 456))(v15, &v463);
                (*(void (**)(_BYTE *, float))(*(_QWORD *)v15 + 592))(v15, 1.0);
                v32 = v255;
                v163 = (uint64_t)v268;
                v27 = v430;
              }
              else if ((v162 - 1) <= 1)
              {
                v416 = v18;
                v418 = v161;
                v431 = v160;
                v412 = v15;
                v413 = v63;
                v423 = v32;
                v414 = v158;
                if (v158)
                {
                  v163 = 0;
                  v433 = 0;
                }
                else
                {
                  v295 = v159;
                  v296 = *(_DWORD *)v457 + v159;
                  if (__OFADD__(*(_DWORD *)v457, v159))
                    v296 = (*(_DWORD *)v457 >> 31) + 0x7FFFFFFF;
                  if (v162 != 2)
                    v161 = 0;
                  v411 = v296 + v161;
                  if (__OFADD__(v296, v161))
                    v411 = (v296 >> 31) + 0x7FFFFFFF;
                  v297 = *(_DWORD *)&v457[4];
                  v298 = (*(uint64_t (**)(const WebCore::CachedImageClient *))(*(_QWORD *)*v14 + 1000))(*v14);
                  v299 = v297 + v298;
                  if (__OFADD__(v297, v298))
                    v299 = (v297 >> 31) + 0x7FFFFFFF;
                  if (v162 == 2)
                    v300 = (*(uint64_t (**)(const WebCore::CachedImageClient *))(*(_QWORD *)*v14 + 928))(*v14);
                  else
                    v300 = 0;
                  v410 = v299 + v300;
                  if (__OFADD__(v299, v300))
                    v410 = (v299 >> 31) + 0x7FFFFFFF;
                  v311 = *(_DWORD *)&v457[8] - v295;
                  if (__OFSUB__(*(_DWORD *)&v457[8], v295))
                    v311 = (*(_DWORD *)&v457[8] >> 31) + 0x7FFFFFFF;
                  v312 = v311 - v431;
                  if (__OFSUB__(v311, v431))
                    v312 = (v311 >> 31) + 0x7FFFFFFF;
                  if (v162 == 2)
                  {
                    v313 = v418 + v416;
                    if (__OFADD__(v418, v416))
                      v313 = (v418 >> 31) + 0x7FFFFFFF;
                  }
                  else
                  {
                    v313 = 0;
                  }
                  v314 = v312 - v313;
                  if (__OFSUB__(v312, v313))
                    v314 = (v312 >> 31) + 0x7FFFFFFF;
                  v315 = *(_DWORD *)&v457[12];
                  v316 = (*(uint64_t (**)(const WebCore::CachedImageClient *))(*(_QWORD *)*v14 + 1000))(*v14);
                  v317 = v315 - v316;
                  if (__OFSUB__(v315, v316))
                    v317 = (v315 >> 31) + 0x7FFFFFFF;
                  v318 = (*(uint64_t (**)(const WebCore::CachedImageClient *))(*(_QWORD *)*v14 + 1008))(*v14);
                  v319 = v317 - v318;
                  if (__OFSUB__(v317, v318))
                    v319 = (v317 >> 31) + 0x7FFFFFFF;
                  if (v162 == 2)
                  {
                    v320 = (*(uint64_t (**)(const WebCore::CachedImageClient *))(*(_QWORD *)*v14 + 928))(*v14);
                    v321 = (*(uint64_t (**)(const WebCore::CachedImageClient *))(*(_QWORD *)*v14 + 936))(*v14);
                    v322 = v320 + v321;
                    if (__OFADD__(v320, v321))
                      v322 = (v320 >> 31) + 0x7FFFFFFF;
                  }
                  else
                  {
                    v322 = 0;
                  }
                  v323 = v319 - v322;
                  if (__OFSUB__(v319, v322))
                    v323 = (v319 >> 31) + 0x7FFFFFFF;
                  v15 = v412;
                  v433 = 1;
                  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v412 + 96))(v412, 1);
                  v324.i64[0] = __PAIR64__(v410, v411);
                  v324.i64[1] = __PAIR64__(v323, v314);
                  *(float32x4_t *)v447 = vmulq_f32(vcvtq_f32_s32(v324), (float32x4_t)vdupq_n_s32(0x3C800000u));
                  (*(void (**)(_BYTE *, WebCore::ImageBuffer **))(*(_QWORD *)v15 + 456))(v15, v447);
                  v163 = 0;
                  v158 = v414;
                  v32 = v423;
                  v63 = v413;
                }
              }
              else
              {
                v163 = 0;
                v433 = 0;
              }
              if (v28 != v27)
              {
                LOBYTE(v170) = 0;
                v164 = v32;
                v171 = v32;
                goto LABEL_310;
              }
              v164 = v32;
              v165 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v14 + 3) + 8) + 40)
                                                         + 8)
                                             + 1944);
              v166 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v165 + 3) + 8) + 40) + 8) + 1272);
              if (!v166)
                goto LABEL_298;
              v309 = *(_QWORD *)(v166 + 64) & 0xFFFFFFFFFFFFLL;
              if (!v309)
                goto LABEL_298;
              if ((*(_BYTE *)(v309 + 45) & 2) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1943094B0);
              }
              if ((*(_BYTE *)(v309 + 45) & 4) == 0 || (*(_BYTE *)(v309 + 21) & 0x80) == 0)
                goto LABEL_298;
              v310 = *(_QWORD *)(*(_QWORD *)(v309 + 144) + 24);
              if ((v310 & 0x800000000000) != 0 && (v310 & 0xA) != 0)
              {
                shouldPaintBaseBackground = 0;
                goto LABEL_299;
              }
              if ((v310 & 0x20) != 0 && (v310 & 0x10) != 0)
                shouldPaintBaseBackground = 0;
              else
LABEL_298:
                shouldPaintBaseBackground = WebCore::RenderView::shouldPaintBaseBackground(v165);
LABEL_299:
              if (*(_QWORD *)(a3 + 8))
              {
                v170 = 1;
              }
              else
              {
                if ((v462 & 0x8000000000000) != 0)
                  v168 = *(float *)((v462 & 0xFFFFFFFFFFFFLL) + 0x10) == 1.0;
                else
                  v168 = ~(_BYTE)v462 == 0;
                v169 = v168;
                v170 = v169 | shouldPaintBaseBackground;
              }
              if (shouldPaintBaseBackground)
                v171 = v164;
              else
                v171 = 2;
              WebCore::LocalFrameView::setContentIsOpaque(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v14 + 3) + 8) + 40) + 8)+ 1944)+ 248), v170);
LABEL_310:
              if (*(_QWORD *)(a3 + 8)
                || (v456 = *(_OWORD *)v457,
                    v172 = *v14,
                    v447[0] = (WebCore::ImageBuffer *)*a4,
                    !(ShouldBeAppliedToBackground = WebCore::BackgroundPainter::boxShadowShouldBeAppliedToBackground((uint64_t)v172, (uint64_t)v447, a5, (WebCore::InlineIterator::BoxIterator *)a6)))&& ((v439 ^ 1) & 1) == 0&& (v174 = *(_QWORD *)(a3 + 16)) != 0&& ((v249 = (*(unsigned __int16 *)(a3 + 58) >> 7) & 0xF, v249 < 2)|| v249 == 2&& (*(_DWORD *)(a3 + 60) & 0x1F) == 1&& (*(unsigned int (**)(uint64_t, const WebCore::CachedImageClient *))(*(_QWORD *)v174 + 224))(v174, *v14))&& *(unsigned __int16 *)(a3 + 56) <= 0xFFu&& !*(_WORD *)(a3 + 56)&& (v250 = *(_WORD *)(a3 + 58) & 0x1800, v250 != 6144)&& (v250 != 4096 || !WebCore::LengthSize::isEmpty((WebCore::LengthSize *)(a3 + 40))))
              {
LABEL_660:
                v336 = v439;
                if (v164 == 1)
                  v336 = 0;
                if (v336 != 1)
                {
LABEL_663:
                  if (!v163)
                  {
LABEL_664:
                    v305 = v433;
LABEL_665:
                    if (v305)
                      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v15 + 104))(v15, 1);
                    if (v440)
                      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v15 + 104))(v15, 1);
                    if (!v158)
                      goto LABEL_197;
LABEL_670:
                    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v15 + 104))(v15, 1);
                    goto LABEL_197;
                  }
                  if ((*(_WORD *)(a3 + 58) & 0x1C) == 0xC)
                  {
                    v445 = v163;
                    WebCore::GraphicsContext::drawConsumingImageBuffer((uint64_t)v15, &v445, (uint64_t)&v463, 5921);
                    v372 = v445;
                    v445 = 0;
                    if (!v372)
                    {
LABEL_768:
                      (*(void (**)(_BYTE *))(*(_QWORD *)v15 + 608))(v15);
                      goto LABEL_664;
                    }
                    v373 = *(_QWORD *)(v372 + 8);
                    if (__ldaxr((unsigned __int8 *)v373))
                    {
                      __clrex();
                    }
                    else if (!__stxr(1u, (unsigned __int8 *)v373))
                    {
LABEL_760:
                      v375 = *(_QWORD *)(v373 + 8);
                      v376 = v375 - 1;
                      *(_QWORD *)(v373 + 8) = v375 - 1;
                      if (v375 == 1)
                      {
                        v389 = *(_QWORD *)(v373 + 16);
                        v377 = *(_QWORD *)(v373 + 24);
                        *(_QWORD *)(v373 + 24) = 0;
                        v378 = v389 != 0;
                      }
                      else
                      {
                        v377 = 0;
                        v378 = 1;
                      }
                      v379 = __ldxr((unsigned __int8 *)v373);
                      if (v379 == 1)
                      {
                        if (!__stlxr(0, (unsigned __int8 *)v373))
                        {
LABEL_767:
                          if (!v376)
                          {
                            if (v377)
                              (*(void (**)(uint64_t))(*(_QWORD *)v377 + 8))(v377);
                            if (!v378)
                              WTF::fastFree((WTF *)v373, v371);
                          }
                          goto LABEL_768;
                        }
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow((WTF::Lock *)v373);
                      goto LABEL_767;
                    }
                    MEMORY[0x19AEA534C](v373);
                    goto LABEL_760;
                  }
                  v381 = *(_QWORD *)(v163 + 8);
                  if (__ldaxr((unsigned __int8 *)v381))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, (unsigned __int8 *)v381))
                  {
LABEL_784:
                    v383 = *(_QWORD *)(v381 + 8);
                    v384 = v383 - 1;
                    *(_QWORD *)(v381 + 8) = v383 - 1;
                    if (v383 == 1)
                    {
                      v390 = *(_QWORD *)(v381 + 16);
                      v385 = *(_QWORD *)(v381 + 24);
                      *(_QWORD *)(v381 + 24) = 0;
                      v386 = v390 != 0;
                    }
                    else
                    {
                      v385 = 0;
                      v386 = 1;
                    }
                    v387 = __ldxr((unsigned __int8 *)v381);
                    if (v387 == 1)
                    {
                      if (!__stlxr(0, (unsigned __int8 *)v381))
                      {
LABEL_793:
                        if (!v384)
                        {
                          if (v385)
                            (*(void (**)(uint64_t))(*(_QWORD *)v385 + 8))(v385);
                          if (!v386)
                            WTF::fastFree((WTF *)v381, v29);
                        }
                        goto LABEL_664;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow((WTF::Lock *)v381);
                    goto LABEL_793;
                  }
                  MEMORY[0x19AEA534C](v381);
                  goto LABEL_784;
                }
                v337 = a9;
                if (v426[2] <= 0 || v426[3] < 1)
                {
                  v456 = *(_OWORD *)v457;
                }
                else
                {
                  v456 = *(_OWORD *)v426;
                  a4 = (uint64_t *)v426;
                }
                v452 = *a4;
                WebCore::BackgroundPainter::calculateBackgroundImageGeometry(*v14, *((const WebCore::RenderBoxModelObject **)v14[1] + 6), (const WebCore::RenderLayerModelObject *)a3, (const WebCore::FillLayer *)&v452, (const WebCore::LayoutPoint *)&v456, (uint64_t)v447);
                v338 = *v14;
                if (a9)
                  v339 = a9;
                else
                  v339 = *v14;
                *(float32x2_t *)v458 = vmul_f32(vcvt_f32_s32(*(int32x2_t *)&v448.n128_i8[8]), (float32x2_t)vdup_n_s32(0x3C800000u));
                (*(void (**)(uint64_t, const WebCore::CachedImageClient *, _BYTE *, float))(*(_QWORD *)v427 + 216))(v427, v339, v458, *(float *)(*((_QWORD *)v338 + 13) + 184));
                v340 = *(float *)&v459 * 64.0;
                if (v340 < 2147483650.0 && v340 > -2147483650.0)
                  goto LABEL_681;
                if (v340 >= 2147483650.0)
                {
                  v342 = 0x7FFFFFFF;
                  goto LABEL_682;
                }
                if (v340 <= -2147483650.0)
                  v342 = 0x80000000;
                else
LABEL_681:
                  v342 = (int)v340;
LABEL_682:
                v343 = *((float *)&v459 + 1) * 64.0;
                if (v343 < 2147483650.0 && v343 > -2147483650.0)
                  goto LABEL_686;
                if (v343 >= 2147483650.0)
                {
                  v345 = 0x7FFFFFFF;
                  goto LABEL_687;
                }
                if (v343 <= -2147483650.0)
                  v345 = 0x80000000;
                else
LABEL_686:
                  v345 = (int)v343;
LABEL_687:
                v346 = v460 * 64.0;
                if (v346 < 2147483650.0 && v346 > -2147483650.0)
                  goto LABEL_689;
                if (v346 >= 2147483650.0)
                {
                  v347 = 0x7FFFFFFF;
                }
                else
                {
                  if (v346 > -2147483650.0)
                  {
LABEL_689:
                    v347 = (int)v346;
                    goto LABEL_690;
                  }
                  v347 = 0x80000000;
                }
LABEL_690:
                v348 = v461 * 64.0;
                if (v348 < 2147483650.0 && v348 > -2147483650.0)
                  goto LABEL_692;
                if (v348 >= 2147483650.0)
                {
                  v349 = 0x7FFFFFFF;
                  goto LABEL_693;
                }
                if (v348 > -2147483650.0)
LABEL_692:
                  v349 = (int)v348;
                else
                  v349 = 0x80000000;
LABEL_693:
                if (SLODWORD(v447[0]) <= v342)
                  v350 = v342;
                else
                  v350 = (int)v447[0];
                if (SHIDWORD(v447[0]) <= v345)
                  v351 = v345;
                else
                  v351 = HIDWORD(v447[0]);
                v352 = LODWORD(v447[0]) + LODWORD(v447[1]);
                if (__OFADD__(v447[0], v447[1]))
                  v352 = (LODWORD(v447[0]) >> 31) + 0x7FFFFFFF;
                v50 = __OFADD__(v342, v347);
                v353 = v342 + v347;
                if (v50)
                  v353 = (v342 >> 31) + 0x7FFFFFFF;
                if (v353 >= v352)
                  v354 = v352;
                else
                  v354 = v353;
                v355 = HIDWORD(v447[0]) + HIDWORD(v447[1]);
                if (__OFADD__(HIDWORD(v447[0]), HIDWORD(v447[1])))
                  v355 = (HIDWORD(v447[0]) >> 31) + 0x7FFFFFFF;
                v50 = __OFADD__(v345, v349);
                v356 = v345 + v349;
                if (v50)
                  v356 = (v345 >> 31) + 0x7FFFFFFF;
                if (v356 >= v355)
                  v357 = v355;
                else
                  v357 = v356;
                if (v350 >= v354 || v351 >= v357)
                {
                  v354 = 0;
                  v357 = 0;
                  v350 = 0;
                  v351 = 0;
                }
                LODWORD(v447[0]) = v350;
                HIDWORD(v447[0]) = v351;
                v50 = __OFSUB__(v354, v350);
                v358 = v354 - v350;
                if (v50)
                  v358 = (v354 >> 31) + 0x7FFFFFFF;
                v359 = v357 - v351;
                if (__OFSUB__(v357, v351))
                  v359 = (v357 >> 31) + 0x7FFFFFFF;
                LODWORD(v447[1]) = v358;
                HIDWORD(v447[1]) = v359;
                if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)a6) & 1) != 0)
                {
                  isFirst = 0;
                }
                else
                {
                  v380 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)a6);
                  WebCore::InlineIterator::Box::lineBox((uint64_t *)v458, (WebCore::InlineIterator::Box *)v380);
                  isFirst = WebCore::InlineIterator::LineBox::isFirst((WebCore::InlineIterator::LineBox *)v458);
                  if (*(_DWORD *)&v458[16] != -1)
                    ((void (*)(float32x2_t *, _BYTE *))off_1E341E180[*(unsigned int *)&v458[16]])(&v455, v458);
                }
                if (SLODWORD(v447[1]) > 0 && SHIDWORD(v447[1]) >= 1)
                {
                  if (!a9)
                    v337 = *v14;
                  v455 = vmul_f32(vcvt_f32_s32(*(int32x2_t *)&v449), (float32x2_t)vdup_n_s32(0x3C800000u));
                  (*(void (**)(_BYTE *__return_ptr, uint64_t, const WebCore::CachedImageClient *, float32x2_t *, uint64_t))(*(_QWORD *)v427 + 176))(v458, v427, v337, &v455, isFirst);
                  v361 = *(const WebCore::Image **)v458;
                  if (*(_QWORD *)v458)
                  {
                    v362 = a3;
                    v363 = (*(_DWORD *)(a3 + 60) & 0x60) == 32;
                    if (v15[346] != v363)
                    {
                      v15[346] = v363;
                      *((_DWORD *)v15 + 46) |= 0x8000u;
                    }
                    (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v15 + 88))(v15, v15 + 8);
                    if ((_DWORD)a8 == 2)
                    {
                      if ((*(_DWORD *)(a3 + 60) & 0x800000) == 0 || *(_QWORD *)(a3 + 8))
                        v362 = a3;
                      else
                        v362 = a3;
                    }
                    WebCore::RenderBoxModelObject::decodingModeForImageDraw(*v14, v361, v14[1]);
                    WebCore::RenderBoxModelObject::chooseInterpolationQuality((uint64_t)*v14, (WebCore::GraphicsContext *)v15, v361, v362, (const WebCore::LayoutSize *)&v449);
                    *(float32x4_t *)v458 = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)v447), (float32x4_t)vdupq_n_s32(0x3C800000u));
                    v364 = LODWORD(v447[0]) - v448.n128_u32[0];
                    if (__OFSUB__(v447[0], v448.n128_u32[0]))
                      v364 = (LODWORD(v447[0]) >> 31) + 0x7FFFFFFF;
                    v365 = HIDWORD(v447[0]) - v448.n128_u32[1];
                    if (__OFSUB__(HIDWORD(v447[0]), v448.n128_u32[1]))
                      v365 = (HIDWORD(v447[0]) >> 31) + 0x7FFFFFFF;
                    v366 = DWORD2(v449) + v364;
                    if (__OFADD__(DWORD2(v449), v364))
                      v366 = (DWORD2(v449) >> 31) + 0x7FFFFFFF;
                    v50 = __OFADD__(HIDWORD(v449), v365);
                    v367 = HIDWORD(v449) + v365;
                    if (v50)
                      v367 = (HIDWORD(v449) >> 31) + 0x7FFFFFFF;
                    v368 = (float32x2_t)vdup_n_s32(0x3C800000u);
                    v455 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v367, v366)), v368);
                    v451 = vmul_f32(vcvt_f32_s32(*(int32x2_t *)&v449), v368);
                    v446 = vmul_f32(vcvt_f32_s32(v450), v368);
                    if ((*(unsigned int (**)(_BYTE *, const WebCore::Image *, _BYTE *, float32x2_t *, float32x2_t *, float32x2_t *))(*(_QWORD *)v15 + 368))(v15, v361, v458, &v455, &v451, &v446) == 1)
                    {
                      v388 = (WebCore::CachedImage *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v427 + 200))(v427);
                      WebCore::CachedImage::addClientWaitingForAsyncDecoding(v388, *v14);
                    }
                    if ((*((_BYTE *)*v14 + 45) & 1) == 0)
                    {
                      v369 = *(_QWORD *)(*((_QWORD *)*v14 + 3) + 8);
                      if (v369)
                      {
                        if ((*(_WORD *)(v369 + 28) & 8) == 0)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1943092A4);
                        }
                        if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v15 + 40))(v15) & 1) == 0)
                        {
                          if ((*((_BYTE *)*v14 + 45) & 1) != 0)
                          {
                            v370 = 0;
                          }
                          else
                          {
                            v370 = *(_QWORD *)(*((_QWORD *)*v14 + 3) + 8);
                            if (v370 && (*(_WORD *)(v370 + 28) & 8) == 0)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1943092C4);
                            }
                          }
                          WebCore::Node::setHasEverPaintedImages(v370, 1);
                        }
                      }
                    }
                    if (*((_DWORD *)v361 + 2) == 1)
                      (*(void (**)(const WebCore::Image *))(*(_QWORD *)v361 + 8))(v361);
                    else
                      --*((_DWORD *)v361 + 2);
                  }
                }
                goto LABEL_663;
              }
              if (!ShouldBeAppliedToBackground)
              {
                v175 = (signed int *)v14[1];
                v177 = *v175;
                v176 = v175[1];
                if ((int)v456 <= *v175)
                  v178 = *v175;
                else
                  v178 = v456;
                if (SDWORD1(v456) <= (int)v176)
                  v179 = v176;
                else
                  v179 = DWORD1(v456);
                v180 = v456 + DWORD2(v456);
                if (__OFADD__((_DWORD)v456, DWORD2(v456)))
                  v180 = (v456 >> 31) + 0x7FFFFFFF;
                v181 = v175[2];
                v50 = __OFADD__(v177, v181);
                v182 = v177 + v181;
                if (v50)
                  v182 = (v177 >> 31) + 0x7FFFFFFF;
                if (v182 < v180)
                  v180 = v182;
                v183 = DWORD1(v456) + HIDWORD(v456);
                if (__OFADD__(DWORD1(v456), HIDWORD(v456)))
                  v183 = (DWORD1(v456) >> 31) + 0x7FFFFFFF;
                v184 = v175[3];
                v50 = __OFADD__(v176, v184);
                v185 = v176 + v184;
                if (v50)
                  v185 = (v176 >> 31) + 0x7FFFFFFF;
                if (v185 >= v183)
                  v185 = v183;
                if (v178 >= v180 || (int)v179 >= v185)
                {
                  v180 = 0;
                  v185 = 0;
                  v178 = 0;
                  v179 = 0;
                }
                *(_QWORD *)&v456 = v178 | (unint64_t)(v179 << 32);
                v50 = __OFSUB__(v180, v178);
                v186 = v180 - v178;
                if (v50)
                  v186 = (v180 >> 31) + 0x7FFFFFFF;
                v50 = __OFSUB__(v185, (_DWORD)v179);
                v187 = (v185 - v179);
                if (v50)
                  v187 = (v185 >> 31) + 0x7FFFFFFF;
                *((_QWORD *)&v456 + 1) = v186 | (unint64_t)(v187 << 32);
              }
              v455 = 0;
              v188 = v170 ^ 1;
              if (v171 == 2)
                v188 = 1;
              if ((v188 & 1) != 0)
                goto LABEL_343;
              v202 = v163;
              v203 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v14 + 3) + 8)
                                                                               + 40)
                                                                   + 8)
                                                       + 1944)
                                           + 248)
                               + 1024);
              if ((v203 & 0x8000000000000) != 0)
              {
                v273 = (unsigned int *)(v203 & 0xFFFFFFFFFFFFLL);
                do
                  v274 = __ldaxr(v273);
                while (__stlxr(v274 + 1, v273));
                v275 = (unint64_t)v455;
                if ((*(_QWORD *)&v455 & 0x8000000000000) != 0)
                {
                  *(_OWORD *)v447 = *(_OWORD *)((*(_QWORD *)&v455 & 0xFFFFFFFFFFFFLL) + 4);
                  *(_OWORD *)v458 = *(_OWORD *)((v203 & 0xFFFFFFFFFFFFLL) + 4);
                  v404 = WebCore::operator==<float,4ul>((float *)v447, (float *)v458);
                  v275 = (unint64_t)v455;
                  if (v404 && HIBYTE(*(_QWORD *)&v455) == HIBYTE(v203) && v455.u8[6] == BYTE6(v203))
                  {
                    do
                    {
                      v405 = __ldaxr(v273);
                      v406 = v405 - 1;
                    }
                    while (__stlxr(v406, v273));
                    if (!v406)
                    {
                      atomic_store(1u, v273);
                      WTF::fastFree((WTF *)(v203 & 0xFFFFFFFFFFFFLL), v29);
                    }
LABEL_371:
                    if ((*(_QWORD *)&v455 & 0x8000000000000) != 0)
                    {
                      v163 = v202;
                      if (*(float *)((*(_QWORD *)&v455 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
                        goto LABEL_373;
                    }
                    else
                    {
                      v163 = v202;
                      if (!v455.i8[0])
                      {
LABEL_373:
                        v189 = 1;
LABEL_344:
                        if (ShouldBeAppliedToBackground)
                        {
                          (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v15 + 96))(v15, 1);
                          WebCore::applyBoxShadowForBackground((WebCore *)v15, v63, v244);
                        }
                        LODWORD(v452) = WebCore::snapRectToDevicePixels((int *)&v456, v37);
                        HIDWORD(v452) = v190;
                        v453 = v191;
                        v454 = v192;
                        if ((*(_QWORD *)&v455 & 0x8000000000000) != 0)
                        {
                          if (*(float *)((*(_QWORD *)&v455 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
                          {
LABEL_348:
                            if (v164 == 1)
                              goto LABEL_351;
                            if ((v462 & 0x8000000000000) != 0)
                            {
                              if (*(float *)((v462 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
                              {
LABEL_351:
                                if (v189)
                                  (*(void (**)(_BYTE *, unint64_t *))(*(_QWORD *)v15 + 280))(v15, &v452);
                                goto LABEL_657;
                              }
                            }
                            else if (!(_BYTE)v462)
                            {
                              goto LABEL_351;
                            }
                            if (v189)
                            {
                              v335 = a8;
                              if ((_DWORD)a8 != 8)
                                v335 = 1;
                            }
                            else
                            {
                              v335 = v15[194];
                            }
                            (*(void (**)(_BYTE *, unint64_t *, unint64_t *, _QWORD, uint64_t))(*(_QWORD *)v15 + 248))(v15, &v452, &v462, v335, 1);
                            goto LABEL_657;
                          }
                        }
                        else if (!v455.i8[0])
                        {
                          goto LABEL_348;
                        }
                        if (v164 != 1)
                        {
                          if ((v462 & 0x8000000000000) != 0)
                          {
                            if (*(float *)((v462 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
                            {
LABEL_645:
                              WebCore::blendSourceOver((unint64_t *)&v455, (const WebCore::Color *)&v462, &v451);
                              v331 = (unint64_t)v455;
                              if ((*(_QWORD *)&v455 & 0x8000000000000) != 0)
                              {
                                if ((*(_QWORD *)&v451 & 0x8000000000000) != 0)
                                {
                                  *(_OWORD *)v447 = *(_OWORD *)((*(_QWORD *)&v455 & 0xFFFFFFFFFFFFLL) + 4);
                                  *(_OWORD *)v458 = *(_OWORD *)((*(_QWORD *)&v451 & 0xFFFFFFFFFFFFLL) + 4);
                                  v396 = WebCore::operator==<float,4ul>((float *)v447, (float *)v458);
                                  v331 = (unint64_t)v455;
                                  if (v396
                                    && HIBYTE(*(_QWORD *)&v455) == HIBYTE(*(_QWORD *)&v451)
                                    && v455.u8[6] == v451.u8[6])
                                  {
                                    v331 = (unint64_t)v451;
                                    goto LABEL_648;
                                  }
                                }
                              }
                              else if (*(_QWORD *)&v455 == *(_QWORD *)&v451
                                     && (*(_QWORD *)&v451 & 0x8000000000000) == 0)
                              {
LABEL_648:
                                if ((v331 & 0x8000000000000) != 0)
                                {
                                  v332 = (unsigned int *)(v331 & 0xFFFFFFFFFFFFLL);
                                  do
                                  {
                                    v333 = __ldaxr(v332);
                                    v334 = v333 - 1;
                                  }
                                  while (__stlxr(v334, v332));
                                  if (!v334)
                                  {
                                    atomic_store(1u, v332);
                                    WTF::fastFree((WTF *)v332, v330);
                                  }
                                }
                                goto LABEL_837;
                              }
                              if ((v331 & 0x8000000000000) != 0)
                              {
                                v397 = (unsigned int *)(v331 & 0xFFFFFFFFFFFFLL);
                                do
                                {
                                  v398 = __ldaxr(v397);
                                  v399 = v398 - 1;
                                }
                                while (__stlxr(v399, v397));
                                if (!v399)
                                {
                                  atomic_store(1u, v397);
                                  WTF::fastFree((WTF *)v397, v330);
                                }
                              }
                              v455 = v451;
                            }
                          }
                          else if ((_BYTE)v462)
                          {
                            goto LABEL_645;
                          }
                        }
LABEL_837:
                        (*(void (**)(_BYTE *, unint64_t *, float32x2_t *, uint64_t, uint64_t))(*(_QWORD *)v15 + 248))(v15, &v452, &v455, 1, 1);
LABEL_657:
                        if (ShouldBeAppliedToBackground)
                          (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v15 + 104))(v15, 1);
                        if ((*(_QWORD *)&v455 & 0x8000000000000) != 0)
                        {
                          v392 = (unsigned int *)(*(_QWORD *)&v455 & 0xFFFFFFFFFFFFLL);
                          do
                          {
                            v393 = __ldaxr(v392);
                            v394 = v393 - 1;
                          }
                          while (__stlxr(v394, v392));
                          if (!v394)
                          {
                            atomic_store(1u, v392);
                            WTF::fastFree((WTF *)v392, v29);
                          }
                        }
                        goto LABEL_660;
                      }
                    }
LABEL_343:
                    v189 = 0;
                    goto LABEL_344;
                  }
                }
                if ((v275 & 0x8000000000000) != 0)
                {
                  v276 = (unsigned int *)(v275 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v277 = __ldaxr(v276);
                    v278 = v277 - 1;
                  }
                  while (__stlxr(v278, v276));
                  if (!v278)
                  {
                    atomic_store(1u, v276);
                    WTF::fastFree((WTF *)v276, v29);
                  }
                }
              }
              else if (!v203)
              {
                goto LABEL_371;
              }
              v455 = (float32x2_t)v203;
              goto LABEL_371;
            }
            v429 = v160;
            v417 = v161;
            v434 = v159;
            v422 = v32;
            (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v15 + 96))(v15, 1);
            *(_OWORD *)v457 = *(_OWORD *)a4;
            v220 = *v14;
            if ((*((_BYTE *)*v14 + 45) & 4) == 0)
            {
LABEL_547:
              __break(0xC471u);
              JUMPOUT(0x194308460);
            }
            *(_QWORD *)v458 = *a4;
            v221.i64[0] = (*(uint64_t (**)(const WebCore::CachedImageClient *, _BYTE *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v220 + 1416))(v220, v458, 0, 0, 0);
            v221.i64[1] = v222;
            *(float32x4_t *)v447 = vmulq_f32(vcvtq_f32_s32(v221), (float32x4_t)vdupq_n_s32(0x3C800000u));
            (*(void (**)(_BYTE *, WebCore::ImageBuffer **))(*(_QWORD *)v15 + 456))(v15, v447);
            v223 = 0;
            LODWORD(v224) = 0;
            if ((*((_BYTE *)v220 + 22) & 1) == 0)
            {
LABEL_422:
              v225 = HIDWORD(v223);
              v226 = -(int)v224;
              v227 = v226 << 6;
              if (v226 < -33554432)
                v227 = 0x80000000;
              if (v226 > 0x1FFFFFF)
                v227 = 0x7FFFFFFF;
              if ((int)v225 <= 0x2000000)
                v228 = -64 * v225;
              else
                v228 = 0x80000000;
              if ((int)v225 >= -33554431)
                v229 = v228;
              else
                v229 = 0x7FFFFFFF;
              v50 = __OFADD__(*(_DWORD *)v457, v227);
              v230 = *(_DWORD *)v457 + v227;
              if (v50)
                v230 = (*(_DWORD *)v457 >> 31) + 0x7FFFFFFF;
              *(_DWORD *)v457 = v230;
              v50 = __OFADD__(*(_DWORD *)&v457[4], v229);
              v231 = *(_DWORD *)&v457[4] + v229;
              if (v50)
                v231 = (*(_DWORD *)&v457[4] >> 31) + 0x7FFFFFFF;
              *(_DWORD *)&v457[4] = v231;
              v232 = WebCore::RenderLayer::scrollWidth(*((WebCore::RenderLayer **)v220 + 18));
              v233 = v232 << 6;
              if (v232 < -33554432)
                v233 = 0x80000000;
              if (v232 > 0x1FFFFFF)
                v233 = 0x7FFFFFFF;
              v50 = __OFADD__(v434, v233);
              v234 = v434 + v233;
              if (v50)
                v234 = (v434 >> 31) + 0x7FFFFFFF;
              v415 = v18;
              v235 = v234 + v429;
              v419 = v28;
              if (__OFADD__(v234, v429))
                v235 = (v234 >> 31) + 0x7FFFFFFF;
              *(_DWORD *)&v457[8] = v235;
              v236 = (*(uint64_t (**)(const WebCore::CachedImageClient *))(*(_QWORD *)v220 + 1000))(v220);
              v237 = WebCore::RenderLayer::scrollHeight(*((WebCore::RenderLayer **)v220 + 18));
              if (v237 >= -33554432)
                v238 = v237 << 6;
              else
                v238 = 0x80000000;
              if (v237 > 0x1FFFFFF)
                v238 = 0x7FFFFFFF;
              v239 = v236 + v238;
              if (__OFADD__(v236, v238))
                v239 = (v236 >> 31) + 0x7FFFFFFF;
              v240 = (*(uint64_t (**)(const WebCore::CachedImageClient *))(*(_QWORD *)v220 + 1008))(v220);
              v241 = v239 + v240;
              if (__OFADD__(v239, v240))
                v241 = (v239 >> 31) + 0x7FFFFFFF;
              v32 = v422;
              v28 = v419;
              v159 = v434;
              v18 = v415;
              v161 = v417;
              v160 = v429;
              *(_DWORD *)&v457[12] = v241;
              goto LABEL_293;
            }
            if ((*((_BYTE *)v220 + 45) & 2) != 0)
              v248 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v220 + 4) + 8) + 96);
            else
              v248 = *((_QWORD *)v220 + 12);
            v223 = v248 & 0x1C00;
            if (v223 == 2048)
            {
              v223 = 0;
            }
            else if (v223)
            {
              v223 = *(_QWORD *)(*((_QWORD *)v220 + 18) + 264);
              if (v223)
              {
                v224 = *(_QWORD *)(v223 + 104);
                v223 = v224 & 0xFFFFFFFF00000000;
                goto LABEL_422;
              }
            }
            LODWORD(v224) = 0;
            goto LABEL_422;
          }
          v420 = v28;
          v242 = v32;
          (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v15 + 96))(v15, 1);
          if (v64)
            WebCore::BackgroundPainter::backgroundRoundedRect((WebCore::BackgroundPainter *)v447, (const WebCore::LayoutRect *)v14, (const WebCore::InlineIterator::InlineBoxIterator *)a4, (WebCore::InlineIterator::BoxIterator *)a6, (const WebCore::LayoutSize *)(v428 != 0), v18 != 0);
          else
            WebCore::BackgroundPainter::backgroundRoundedRectAdjustedForBleedAvoidance((WebCore::BackgroundPainter *)v447, (const WebCore::LayoutRect *)v14, (WebCore::LayoutRect *)a4, a5, (WebCore::InlineIterator::BoxIterator *)a6, (const WebCore::LayoutSize *)(v428 != 0), v18 != 0);
          v243 = (*(unsigned __int8 *)(a3 + 58) >> 2) & 7;
          if (v243 == 2)
          {
            WebCore::RenderBoxModelObject::roundedContentBoxRect(*v14, (const WebCore::LayoutRect *)v447, v428 != 0, v18 != 0, (uint64_t)v458);
          }
          else
          {
            if (v243 != 1)
            {
LABEL_458:
              WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)v447, v37, (uint64_t)v458);
              v31.n128_f32[0] = WebCore::BackgroundPainter::clipRoundedInnerRect((uint64_t)v15, (float32x2_t *)&v459, (float32x2_t *)v458);
              v32 = v242;
              v28 = v420;
              goto LABEL_283;
            }
            WebCore::RenderStyle::getRoundedInnerBorderFor(v63, (const WebCore::LayoutRect *)v447, v428 != 0, v18 != 0, (uint64_t)v458);
          }
          *(_OWORD *)v447 = *(_OWORD *)v458;
          v448 = *(__n128 *)&v458[16];
          v449 = *(_OWORD *)&v458[32];
          goto LABEL_458;
        }
LABEL_197:
        if ((v462 & 0x8000000000000) != 0)
        {
          v326 = (unsigned int *)(v462 & 0xFFFFFFFFFFFFLL);
          do
          {
            v327 = __ldaxr(v326);
            v328 = v327 - 1;
          }
          while (__stlxr(v328, v326));
          if (!v328)
          {
            atomic_store(1u, v326);
            WTF::fastFree((WTF *)v326, v29);
          }
        }
        return;
      }
    }
    if (*(_BYTE *)(v20 + 252))
      v133 = *(_BYTE *)(v20 + 252) == 11;
    else
      v133 = 1;
    if (v133)
      goto LABEL_207;
    if (*(_BYTE *)(v20 + 254))
    {
      if (*(float *)(v20 + 248) != 0.0)
        goto LABEL_207;
    }
    else if (*(_DWORD *)(v20 + 248))
    {
      goto LABEL_207;
    }
    goto LABEL_27;
  }
}

unint64_t WebCore::calcRadiiFor(WebCore *this, const WebCore::BorderDataRadii *a2, const WebCore::LayoutSize *a3)
{
  unint64_t v6;
  const WebCore::LayoutSize *v7;
  unint64_t v8;
  const WebCore::LayoutSize *v9;
  unint64_t v10;
  const WebCore::LayoutSize *v11;
  unint64_t result;

  v6 = WebCore::sizeForLengthSize(a2, a3, a3);
  v8 = WebCore::sizeForLengthSize((const WebCore::BorderDataRadii *)((char *)a2 + 16), a3, v7);
  v10 = WebCore::sizeForLengthSize((const WebCore::BorderDataRadii *)((char *)a2 + 32), a3, v9);
  result = WebCore::sizeForLengthSize((const WebCore::BorderDataRadii *)((char *)a2 + 48), a3, v11);
  *(_QWORD *)this = v6;
  *((_QWORD *)this + 1) = v8;
  *((_QWORD *)this + 2) = v10;
  *((_QWORD *)this + 3) = result;
  return result;
}

unint64_t WebCore::sizeForLengthSize(WebCore *this, const WebCore::LengthSize *a2, const WebCore::LayoutSize *a3)
{
  float v5;
  double v6;
  unsigned int v8;
  float v9;
  double v10;
  uint64_t v12;
  int v14;
  float v15;
  int v16;
  float v17;

  if (*((_BYTE *)this + 4) == 4)
  {
    v5 = *(float *)this;
    if (!*((_BYTE *)this + 6))
      v5 = (float)*(int *)this;
LABEL_4:
    v6 = v5 * 64.0;
    if (v6 < 2147483650.0 && v6 > -2147483650.0)
      goto LABEL_8;
    if (v6 >= 2147483650.0)
    {
      v8 = 0x7FFFFFFF;
    }
    else
    {
      if (v6 > -2147483650.0)
      {
LABEL_8:
        v8 = (int)v6;
        goto LABEL_9;
      }
      v8 = 0x80000000;
    }
  }
  else
  {
    v8 = 0;
    v14 = *(_DWORD *)a2;
    switch(*((_BYTE *)this + 4))
    {
      case 0:
      case 1:
      case 9:
        v8 = *(_DWORD *)a2;
        break;
      case 3:
        v15 = *(float *)this;
        if (!*((_BYTE *)this + 6))
          v15 = (float)*(int *)this;
        v5 = (float)((float)((float)v14 * 0.015625) * v15) / 100.0;
        goto LABEL_4;
      case 0xB:
        WebCore::Length::nonNanCalculatedValue(this, (float)v14 * 0.015625);
        goto LABEL_4;
      default:
        break;
    }
  }
LABEL_9:
  if (*((_BYTE *)this + 12) == 4)
  {
    v9 = *((float *)this + 2);
    if (!*((_BYTE *)this + 14))
      v9 = (float)SLODWORD(v9);
LABEL_12:
    v10 = v9 * 64.0;
    if (v10 < 2147483650.0 && v10 > -2147483650.0)
      goto LABEL_16;
    if (v10 >= 2147483650.0)
    {
      v12 = 0x7FFFFFFFLL;
      return v8 | (unint64_t)(v12 << 32);
    }
    if (v10 <= -2147483650.0)
      v12 = 0x80000000;
    else
LABEL_16:
      v12 = (int)v10;
  }
  else
  {
    v12 = 0;
    v16 = *((_DWORD *)a2 + 1);
    switch(*((_BYTE *)this + 12))
    {
      case 0:
      case 1:
      case 9:
        v12 = *((unsigned int *)a2 + 1);
        break;
      case 3:
        v17 = *((float *)this + 2);
        if (!*((_BYTE *)this + 14))
          v17 = (float)SLODWORD(v17);
        v9 = (float)((float)((float)v16 * 0.015625) * v17) / 100.0;
        goto LABEL_12;
      case 0xB:
        WebCore::Length::nonNanCalculatedValue((WebCore *)((char *)this + 8), (float)v16 * 0.015625);
        goto LABEL_12;
      default:
        return v8 | (unint64_t)(v12 << 32);
    }
  }
  return v8 | (unint64_t)(v12 << 32);
}

uint64_t WebCore::LocalFrameView::setContentIsOpaque(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(unsigned __int8 *)(this + 1367) != a2)
  {
    v2 = this;
    *(_BYTE *)(this + 1367) = a2;
    v3 = *(_QWORD *)(this + 328);
    if (v3)
    {
      while (1)
      {
        do
        {
LABEL_4:
          v4 = (_QWORD *)v3;
          if (!*(_BYTE *)(v3 + 144))
          {
            v5 = *(_QWORD *)(v3 + 288);
            if (v5)
            {
              this = WebCore::LocalFrameView::useSlowRepaints(*(WebCore::LocalFrameView **)(v3 + 288), 1);
              if (*(_QWORD *)(v5 + 40))
                this = WebCore::ScrollView::platformSetCanBlitOnScroll((id *)v5, this ^ 1);
              else
                *(_BYTE *)(v5 + 317) = this ^ 1;
            }
          }
          v3 = v4[11];
        }
        while (v3);
        v6 = *(_QWORD *)(v2 + 328);
        v7 = *(_QWORD *)(v4[6] + 8);
        if (v7 == v6)
          break;
        v3 = v4[9];
        if (!v3)
        {
          if (v6)
          {
            while (1)
            {
              v9 = *(_QWORD *)(v7 + 56);
              if (!v9)
                break;
              v7 = *(_QWORD *)(v9 + 8);
              if (v7 == v6 || v7 == 0)
                break;
              v3 = *(_QWORD *)(v7 + 72);
              if (v3)
                goto LABEL_4;
            }
          }
          else
          {
            while (1)
            {
              v8 = *(_QWORD *)(v7 + 56);
              if (!v8)
                break;
              v7 = *(_QWORD *)(v8 + 8);
              if (!v7)
                break;
              v3 = *(_QWORD *)(v7 + 72);
              if (v3)
                goto LABEL_4;
            }
          }
          return this;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::Image::drawTiled(uint64_t a1, _BYTE *a2, float *a3, float *a4, float *a5, float *a6, unint64_t a7)
{
  float v14;
  void *v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v37;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  BOOL v45;
  float v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  BOOL v56;
  float v57;
  unint64_t v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  uint64_t v74;
  float v75;
  float i;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  _DWORD v90[2];
  unint64_t v91;
  unint64_t v92;
  double v93;
  double v94;
  double v95;
  double v96;
  uint64_t v97;
  uint64_t v98;

  (*(void (**)(double *__return_ptr))(*(_QWORD *)a1 + 360))(&v93);
  if (LOBYTE(v94))
  {
    WebCore::Image::fillWithSolidColor((uint64_t)a2, (uint64_t)a3, &v93, (a7 >> 8) & 0xF, v14);
    if (LOBYTE(v94))
    {
      if ((*(_QWORD *)&v93 & 0x8000000000000) != 0)
      {
        v78 = (unsigned int *)(*(_QWORD *)&v93 & 0xFFFFFFFFFFFFLL);
        do
        {
          v79 = __ldaxr(v78);
          v80 = v79 - 1;
        }
        while (__stlxr(v80, v78));
        if (!v80)
        {
          atomic_store(1u, v78);
          WTF::fastFree((WTF *)v78, v15);
        }
      }
    }
    return 3;
  }
  v17 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 168))(a1, 0);
  v19 = v18;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1))
    v20 = *a5;
  else
    v20 = v17;
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  v22 = *a5;
  v23 = a5[1];
  if (v21)
    v24 = a5[1];
  else
    v24 = v19;
  v25 = v22 + *a6;
  v26 = v23 + a6[1];
  v27 = *a3;
  v86 = v22 / v20;
  v88 = v23 / v24;
  v28 = fmodf(-*a4, v25);
  v29 = v27 + fmodf(v28 - v25, v25);
  v30 = a3[1];
  v31 = fmodf(-a4[1], v26) - v26;
  v32 = v26;
  v33 = v29;
  v34 = v30 + fmodf(v31, v32);
  if (v33 <= v27)
  {
    v35 = a3[2];
    if ((float)(v22 + v33) >= (float)(v27 + v35) && v34 <= v30)
    {
      v37 = a3[3];
      if ((float)(v23 + v34) >= (float)(v30 + v37) && a2[346] == 0)
      {
        *(float *)&v93 = (float)(v27 - v33) / v86;
        *((float *)&v93 + 1) = (float)(v30 - v34) / v88;
        *(float *)&v94 = v35 / v86;
        *((float *)&v94 + 1) = v37 / v88;
        v47 = a7 & 0xFFFFFF;
        return (*(uint64_t (**)(uint64_t, _BYTE *, float *, double *, uint64_t))(*(_QWORD *)a1 + 352))(a1, a2, a3, &v93, v47);
      }
    }
  }
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a2 + 136))(a2))
  {
    if ((*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 168))(a1, 0) == 1.0)
    {
      v39 = a3[1];
      if (v33 >= *a3)
        v40 = v33;
      else
        v40 = *a3;
      if (v34 >= v39)
        v41 = v34;
      else
        v41 = a3[1];
      v42 = a3[3];
      v43 = *a3 + a3[2];
      if (v43 >= (float)(v22 + v33))
        v43 = v22 + v33;
      v44 = v23 + v34;
      if ((float)(v39 + v42) < (float)(v23 + v34))
        v44 = v39 + v42;
      v45 = v41 < v44 && v40 < v43;
      v46 = v44 - v41;
      if (!v45)
        v46 = 0.0;
      if (v46 == v42)
      {
        LODWORD(v93) = 0;
        *((float *)&v93 + 1) = (float)(v39 - v34) / v88;
        LODWORD(v94) = 1065353216;
        *((float *)&v94 + 1) = v42 / v88;
LABEL_58:
        v47 = a7 & 0xFFFFE0 | 1;
        return (*(uint64_t (**)(uint64_t, _BYTE *, float *, double *, uint64_t))(*(_QWORD *)a1 + 352))(a1, a2, a3, &v93, v47);
      }
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 168))(a1, 0);
    if (v48 == 1.0)
    {
      v49 = *a3;
      v50 = a3[1];
      if (v33 >= *a3)
        v51 = v33;
      else
        v51 = *a3;
      if (v34 >= v50)
        v52 = v34;
      else
        v52 = a3[1];
      v53 = v22 + v33;
      v54 = a3[2];
      if ((float)(v49 + v54) < (float)(v22 + v33))
        v53 = v49 + v54;
      v55 = v50 + a3[3];
      if (v55 >= (float)(v23 + v34))
        v55 = v23 + v34;
      v56 = v52 < v55 && v51 < v53;
      v57 = v53 - v51;
      if (!v56)
        v57 = 0.0;
      if (v57 == v54)
      {
        *(float *)&v93 = (float)(v49 - v33) / v86;
        HIDWORD(v93) = 0;
        *(float *)&v94 = v54 / v86;
        HIDWORD(v94) = 1065353216;
        goto LABEL_58;
      }
    }
  }
  (*(void (**)(double *__return_ptr, _BYTE *, uint64_t))(*(_QWORD *)a2 + 672))(&v93, a2, 1);
  v58 = *(_QWORD *)a5;
  v91 = 0;
  v92 = v58;
  WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v93, (const WebCore::FloatRect *)&v91);
  if ((float)(v59 * v60) <= 262140.0)
  {
    v93 = v86;
    v94 = v86 * 0.0;
    v95 = v88 * 0.0;
    v96 = v88;
    v97 = 0;
    v98 = 0;
    v91 = 0;
    v92 = __PAIR64__(LODWORD(v24), LODWORD(v20));
    *(float *)v90 = v33;
    *(float *)&v90[1] = v34;
    (*(void (**)(uint64_t, _BYTE *, float *, unint64_t *, double *, _DWORD *, float *, unint64_t))(*(_QWORD *)a1 + 320))(a1, a2, a3, &v91, &v93, v90, a6, a7 & 0xFFFFFF);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
    return 3;
  }
  (*(void (**)(_BYTE *, uint64_t, float))(*(_QWORD *)a2 + 96))(a2, 1, v59 * v60);
  (*(void (**)(_BYTE *, float *))(*(_QWORD *)a2 + 456))(a2, a3);
  v61 = a3[1];
  v62 = a3[3];
  v16 = 0;
  if (v61 >= (float)(v61 + v62))
    goto LABEL_75;
  v63 = fmaxf(v23 - (float)(v61 - v34), 0.0);
  v64 = 1.0 / v86;
  v82 = v33;
  v83 = 1.0 / v88;
  v65 = a7 & 0xFFFFE0;
  v66 = *a3;
  v67 = a3[2];
  v85 = v33 - v33;
  v87 = (float)(1.0 / v86) * (float)(v33 - v33);
  v89 = v64;
  v68 = a3[1];
  v69 = v68;
  v70 = v33;
  v81 = v34;
  while (1)
  {
    v22 = fmaxf(v22 - (float)(v66 - v70), 0.0);
    v71 = v69 - v34;
    if (v66 < (float)(v67 + v66))
      break;
    v70 = v66;
LABEL_71:
    v68 = v68 + v63;
    v63 = fmaxf(v63 + v71, 0.0);
    v69 = v34;
    if (v68 >= (float)(v62 + v61))
      goto LABEL_75;
  }
  v93 = COERCE_DOUBLE(__PAIR64__(LODWORD(v68), LODWORD(v66)));
  v94 = COERCE_DOUBLE(__PAIR64__(LODWORD(v63), LODWORD(v22)));
  v72 = v66 - v33;
  v84 = v71;
  v73 = v83 * v71;
  *(float *)&v91 = v89 * (float)(v66 - v33);
  *((float *)&v91 + 1) = v83 * v71;
  *(float *)&v92 = v89 * v22;
  *((float *)&v92 + 1) = v83 * v63;
  a7 = v65 | a7 & 0xFFFFFFFFFF000000 | 1;
  v74 = (*(uint64_t (**)(uint64_t, _BYTE *, double *, unint64_t *, unint64_t))(*(_QWORD *)a1 + 352))(a1, a2, &v93, &v91, a7);
  if ((_DWORD)v74 != 1)
  {
    v75 = v66 + v22;
    for (i = v22 + v72; ; i = v22 + v85)
    {
      v22 = fmaxf(i, 0.0);
      v66 = *a3;
      v67 = a3[2];
      if (v75 >= (float)(*a3 + v67))
        break;
      v93 = COERCE_DOUBLE(__PAIR64__(LODWORD(v68), LODWORD(v75)));
      v94 = COERCE_DOUBLE(__PAIR64__(LODWORD(v63), LODWORD(v22)));
      v91 = __PAIR64__(LODWORD(v73), LODWORD(v87));
      *(float *)&v92 = v89 * v22;
      *((float *)&v92 + 1) = v83 * v63;
      v74 = (*(uint64_t (**)(uint64_t, _BYTE *, double *, unint64_t *, unint64_t))(*(_QWORD *)a1 + 352))(a1, a2, &v93, &v91, a7);
      if ((_DWORD)v74 == 1)
        goto LABEL_74;
      v75 = v75 + v22;
    }
    v16 = v74;
    v61 = a3[1];
    v62 = a3[3];
    v34 = v81;
    v33 = v82;
    v70 = v82;
    v71 = v84;
    goto LABEL_71;
  }
LABEL_74:
  v16 = 1;
LABEL_75:
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
  return v16;
}

uint64_t WebCore::GraphicsContext::drawTiledImage(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, float *a6, unsigned int a7)
{
  int v8;
  int v10;
  uint64_t v17;

  v8 = HIWORD(a7) & 0xF;
  if (!v8)
    return WebCore::Image::drawTiled(a2, (_BYTE *)a1, a3, a4, a5, a6, *(_QWORD *)&a7 & 0xFFFFFFLL);
  v10 = *(unsigned __int8 *)(a1 + 340);
  if (v10 == v8)
    return WebCore::Image::drawTiled(a2, (_BYTE *)a1, a3, a4, a5, a6, *(_QWORD *)&a7 & 0xFFFFFFLL);
  *(_BYTE *)(a1 + 340) = BYTE2(a7) & 0xF;
  *(_DWORD *)(a1 + 184) |= 0x400u;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a1 + 8);
  v17 = WebCore::Image::drawTiled(a2, (_BYTE *)a1, a3, a4, a5, a6, *(_QWORD *)&a7 & 0xFFFFFFLL);
  if (*(unsigned __int8 *)(a1 + 340) != v10)
  {
    *(_BYTE *)(a1 + 340) = v10;
    *(_DWORD *)(a1 + 184) |= 0x400u;
  }
  (*(void (**)(void))(*(_QWORD *)a1 + 88))();
  return v17;
}

void WebCore::Image::singlePixelSolidColor(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

float WebCore::GeneratedImage::size(uint64_t a1)
{
  return *(float *)(a1 + 64);
}

uint64_t WebCore::GeneratedImage::hasRelativeHeight(WebCore::GeneratedImage *this)
{
  return 1;
}

uint64_t WebCore::GeneratedImage::hasRelativeWidth(WebCore::GeneratedImage *this)
{
  return 1;
}

unint64_t WebCore::shrinkRectByOneDevicePixel(uint64_t a1, unint64_t a2, float a3)
{
  float v5;
  double v6;
  float v7;
  double v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  float v12;
  double v13;
  float v14;
  double v15;
  int v16;
  uint64_t v17;
  long double v19[6];

  (*(void (**)(long double *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 672))(v19, a1, 1);
  v5 = 1.0 / hypot(v19[0], v19[1]);
  v6 = v5 * 64.0;
  if (v6 >= 2147483650.0)
  {
    v7 = 2147500000.0;
  }
  else if (v6 <= -2147483650.0)
  {
    v7 = -2147500000.0;
  }
  else
  {
    v7 = (float)(int)v6;
  }
  v8 = (float)(ceilf((float)(v7 * a3) * 0.015625) / a3) * -64.0;
  if (v8 >= 2147483650.0)
  {
    v9 = 0x7FFFFFFF;
  }
  else if (v8 <= -2147483650.0)
  {
    v9 = 0x80000000;
  }
  else
  {
    v9 = (int)v8;
  }
  v10 = a2 - v9;
  if (__OFSUB__((_DWORD)a2, v9))
    v10 = (a2 >> 31) + 0x7FFFFFFF;
  v11 = HIDWORD(a2);
  v12 = 1.0 / hypot(v19[2], v19[3]);
  v13 = v12 * 64.0;
  if (v13 >= 2147483650.0)
  {
    v14 = 2147500000.0;
  }
  else if (v13 <= -2147483650.0)
  {
    v14 = -2147500000.0;
  }
  else
  {
    v14 = (float)(int)v13;
  }
  v15 = (float)(ceilf((float)(v14 * a3) * 0.015625) / a3) * -64.0;
  if (v15 >= 2147483650.0)
  {
    v16 = 0x7FFFFFFF;
  }
  else if (v15 <= -2147483650.0)
  {
    v16 = 0x80000000;
  }
  else
  {
    v16 = (int)v15;
  }
  v17 = (v11 - v16);
  if (__OFSUB__((_DWORD)v11, v16))
    v17 = (v11 >> 31) + 0x7FFFFFFF;
  return v10 | (unint64_t)(v17 << 32);
}

WTF::StringImpl *WebCore::StyleCachedImage::image@<X0>(WebCore::CSSImageValue **this@<X0>, const WebCore::RenderElement *a2@<X1>, WTF::StringImpl **a3@<X8>, double a4@<D0>, double a5@<D1>, float a6@<S2>)
{
  WTF::StringImpl *result;
  double v11;
  double v12;
  float v13;
  WebCore::CSSImageValue *v14;
  const WebCore::Document *v15;
  WebCore::SVGResourceImage *v16;
  WTF::StringImpl *v17;
  const WebCore::Document *v18;
  WebCore::SVGResourceImage *v19;
  WTF::StringImpl *v20[5];
  WTF::StringImpl *v21;

  result = (WTF::StringImpl *)WebCore::StyleCachedImage::renderSVGResource((WebCore::StyleCachedImage *)this, a2, a4, a5, a6);
  if (result)
  {
    v18 = *(const WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
    v19 = result;
    WebCore::CSSImageValue::reresolvedURL(this[4], v18, (uint64_t)v20);
    WebCore::SVGResourceImage::create(v19, (WebCore::RenderSVGResourceContainer *)v20, (uint64_t *)&v21);
  }
  else
  {
    if (*((_BYTE *)this + 57) && !*((_BYTE *)this + 56)
      || (result = WebCore::StyleCachedImage::uncheckedRenderSVGResource((WebCore::StyleCachedImage *)this, a2, v11, v12, v13)) == 0)
    {
      v14 = this[6];
      if (v14 && (result = (WTF::StringImpl *)*((_QWORD *)v14 + 1)) != 0)
      {
        result = WebCore::CachedImage::imageForRenderer(result, a2);
        if (result)
          ++*((_DWORD *)result + 2);
        *a3 = result;
      }
      else
      {
        *a3 = 0;
      }
      return result;
    }
    v15 = *(const WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
    v16 = result;
    WebCore::CSSImageValue::reresolvedURL(this[4], v15, (uint64_t)v20);
    WebCore::SVGResourceImage::create(v16, (WebCore::LegacyRenderSVGResourceContainer *)v20, (uint64_t *)&v21);
  }
  *a3 = v21;
  v21 = 0;
  result = v20[0];
  v20[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WebCore::StyleCachedImage::setContainerContextForRenderer(uint64_t *this, WTF **a2, const WebCore::FloatSize *a3, float a4)
{
  uint64_t v4;
  uint64_t *v5;
  float v6;
  double v7;
  int v8;
  __int32 v9;
  double v10;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  __int128 v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;
  int32x2_t v19;

  *(uint64_t *)((char *)this + 60) = *(_QWORD *)a3;
  v4 = this[6];
  if (v4)
  {
    v5 = this;
    this = *(uint64_t **)(v4 + 8);
    if (this)
    {
      v6 = *((float *)a3 + 1);
      v7 = *(float *)a3 * 64.0;
      if (v7 > -2147483650.0)
        v8 = (int)v7;
      else
        v8 = 0x80000000;
      if (v7 < 2147483650.0)
        v9 = v8;
      else
        v9 = 0x7FFFFFFF;
      v19.i32[0] = v9;
      v10 = v6 * 64.0;
      if (v10 >= 2147483650.0)
      {
        v11 = 0x7FFFFFFF;
      }
      else if (v10 <= -2147483650.0)
      {
        v11 = 0x80000000;
      }
      else
      {
        v11 = (int)v10;
      }
      v19.i32[1] = v11;
      v12 = v5[4];
      v13 = *(WTF::StringImpl **)(v12 + 16);
      if (v13)
        *(_DWORD *)v13 += 2;
      v16 = v13;
      v14 = *(_OWORD *)(v12 + 24);
      v18 = *(_OWORD *)(v12 + 40);
      v17 = v14;
      WebCore::CachedImage::setContainerContextForClient(this, a2, &v19, a4, (const WTF::URL *)&v16);
      this = (uint64_t *)v16;
      v16 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v15);
        else
          *(_DWORD *)this -= 2;
      }
    }
  }
  return this;
}

WTF *WebCore::CachedImage::imageForRenderer(WebCore::CachedImage *this, const WebCore::RenderObject *a2)
{
  uint64_t v4;
  WTF *result;
  WTF *v6;
  void *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  WTF *v13[2];

  if ((*(_WORD *)((char *)this + 557) >> 5) - 3 <= 1
    && (*((_BYTE *)this + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)v13);
    v8 = (unsigned int *)v13[0];
    if (!v13[0])
      return 0;
    v9 = *((_QWORD *)v13[0] + 1);
    v13[0] = 0;
    do
    {
      v10 = __ldaxr(v8);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v8));
    if (!v11)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v7);
    }
    return (WTF *)v9;
  }
  else
  {
    v4 = *((_QWORD *)this + 86);
    if (v4)
    {
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 56))(*((_QWORD *)this + 86)) & 1) == 0
        && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4))
      {
        return (WTF *)*((_QWORD *)this + 86);
      }
      result = (WTF *)WebCore::SVGImageCache::imageForRenderer(*((WebCore::SVGImageCache **)this + 87), a2);
      {
        v6 = (WTF *)WebCore::Image::nullImage(void)::nullImage;
      }
      else
      {
        v12 = result;
        WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v13);
        result = v12;
        v6 = v13[0];
        WebCore::Image::nullImage(void)::nullImage = (uint64_t)v13[0];
      }
      if (result == v6)
        return (WTF *)*((_QWORD *)this + 86);
    }
    {
      return (WTF *)WebCore::Image::nullImage(void)::nullImage;
    }
    else
    {
      WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v13);
      result = v13[0];
      WebCore::Image::nullImage(void)::nullImage = (uint64_t)v13[0];
    }
  }
  return result;
}

uint64_t WebCore::Image::hasRelativeHeight(WebCore::Image *this)
{
  return 0;
}

uint64_t WebCore::Image::hasRelativeWidth(WebCore::Image *this)
{
  return 0;
}

BOOL WebCore::NullGraphicsContext::invalidatingImagesWithAsyncDecodes(WebCore::NullGraphicsContext *this)
{
  return *((_BYTE *)this + 717) == 2;
}

float WebCore::Image::fillWithSolidColor(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, float result)
{
  unsigned int v8;
  BOOL v9;
  char v10;
  int v11;

  if ((*a3 & 0x8000000000000) != 0)
  {
    result = *(float *)((*a3 & 0xFFFFFFFFFFFFLL) + 0x10);
    if (result <= 0.0)
      return result;
    v8 = *(unsigned __int16 *)(a1 + 194);
    v9 = result == 1.0;
  }
  else
  {
    if (!*a3)
      return result;
    v8 = *(unsigned __int16 *)(a1 + 194);
    v9 = *a3 == 255;
  }
  v10 = v9;
  if (((a4 == 2) & v10) != 0)
    v11 = 1;
  else
    v11 = a4;
  if (v11 != v8 || v8 >> 8 != 1)
  {
    *(_WORD *)(a1 + 194) = v11 | 0x100;
    *(_DWORD *)(a1 + 184) |= 0x20u;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a1 + 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 224))(a1, a2, a3);
  if (*(unsigned __int8 *)(a1 + 194) != v8 || *(_BYTE *)(a1 + 195) != 1)
  {
    *(_WORD *)(a1 + 194) = v8 | 0x100;
    *(_DWORD *)(a1 + 184) |= 0x20u;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a1 + 8);
  return result;
}

unint64_t WTF::Vector<WebCore::ResourceResponse,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + ((unint64_t)*(unsigned int *)(a1 + 12) << 8) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::ResourceResponse,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebCore::ResourceResponse,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ResourceResponse,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  const void *v13;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 24))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(a2 << 8));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = v6;
      v9 = v5 << 8;
      v10 = v4;
      do
      {
        WebCore::ResourceResponseBase::ResourceResponseBase(v8, (uint64_t *)v10);
        v12 = *((_QWORD *)v10 + 30);
        *((_QWORD *)v10 + 30) = 0;
        *(_QWORD *)(v8 + 240) = v12;
        *(_BYTE *)(v8 + 248) = *((_BYTE *)v10 + 248);
        v13 = (const void *)*((_QWORD *)v10 + 30);
        *((_QWORD *)v10 + 30) = 0;
        if (v13)
          CFRelease(v13);
        WebCore::ResourceResponseBase::~ResourceResponseBase(v10, v11);
        v8 += 256;
        v10 = (WTF *)((char *)v10 + 256);
        v9 -= 256;
      }
      while (v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

__n128 WebCore::ResourceResponseBase::ResourceResponseBase(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  __int128 v19;
  __int128 v20;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v2;
  v3 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
  *(_DWORD *)(a1 + 8) = v3;
  v4 = v3 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
  *(_DWORD *)(a1 + 8) = v4;
  v5 = v4 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 8) = v5;
  v6 = v5 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v6 & 0x3F;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
  *(_QWORD *)(a1 + 28) = *(uint64_t *)((char *)a2 + 28);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 2) &= ~1u;
  v7 = a2[5];
  v8 = a2[6];
  a2[5] = 0;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  v9 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(a1 + 56) = v9;
  v10 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(a1 + 64) = v10;
  v11 = a2[9];
  a2[9] = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = v11;
  v12 = a2[10];
  a2[10] = 0;
  *(_QWORD *)(a1 + 80) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = 0;
  *(_DWORD *)(a1 + 88) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = 0;
  *(_DWORD *)(a1 + 92) = v12;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v13 = a2[12];
  a2[12] = 0;
  *(_QWORD *)(a1 + 96) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = 0;
  *(_DWORD *)(a1 + 104) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = 0;
  *(_DWORD *)(a1 + 108) = v13;
  v14 = a2[14];
  a2[14] = 0;
  *(_QWORD *)(a1 + 112) = v14;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  if (*((_BYTE *)a2 + 128))
  {
    v15 = a2[15];
    a2[15] = 0;
    *(_QWORD *)(a1 + 120) = v15;
    *(_BYTE *)(a1 + 128) = 1;
  }
  v16 = *(_OWORD *)(a2 + 17);
  v17 = *(_OWORD *)(a2 + 19);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
  *(_OWORD *)(a1 + 152) = v17;
  *(_OWORD *)(a1 + 136) = v16;
  result = *(__n128 *)(a2 + 23);
  v19 = *(_OWORD *)(a2 + 25);
  v20 = *(_OWORD *)(a2 + 27);
  *(_DWORD *)(a1 + 231) = *(_DWORD *)((char *)a2 + 231);
  *(_OWORD *)(a1 + 216) = v20;
  *(_OWORD *)(a1 + 200) = v19;
  *(__n128 *)(a1 + 184) = result;
  return result;
}

unsigned int *WebCore::Document::finishedParsing(uint64_t this, WTF::StringImpl *a2)
{
  WebCore::Document *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  double v10;
  uint64_t v11;
  WebCore::LocalDOMWindow *v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t is_enabled;
  uint64_t v29;
  WebCore::LocalDOMWindow *v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  WebCore::FrameLoader *v39;
  unsigned int v41;
  unsigned int v42;
  double v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  WebCore::NavigatorBase **v47;
  unsigned int *result;
  WebCore::ServiceWorkerContainer *v49;
  void *v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  NSObject *v56;
  NSObject *v57;
  int v58;
  NSObject *v59;
  NSObject *v60;
  uint64_t v61;
  WebCore::Document *v62;
  os_signpost_id_t v63;
  uint64_t v64;
  __int16 v65;
  int v66;
  __int16 v67;
  WebCore::Document *v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;

  v2 = (WebCore::Document *)this;
  v71 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(this + 3389) = 0;
  v3 = *(_QWORD *)(this + 528);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 288);
      if (v5)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 344) + 8) + 328) + 296);
        if (v6)
          v6 = *(_QWORD *)(v6 + 1944);
        if (((*(_QWORD *)(v5 + 384) & 0xFFFFFFFFFFFFLL) == 0
           || *(double *)((*(_QWORD *)(v5 + 384) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
          && (!v6 || (*(_BYTE *)(v6 + 20) & 0xF8) == 0))
        {
          v7 = *(_QWORD *)(v5 + 464);
          if ((!v7 || !*(_QWORD *)(v7 + 8)) && (!*(_DWORD *)(v5 + 488) || !*(_BYTE *)(v5 + 478)))
          {
            ++*(_DWORD *)(v5 + 8);
            WebCore::LocalFrameView::fireLayoutRelatedMilestonesIfNeeded((WebCore::LocalFrameView *)v5);
            if (*(_DWORD *)(v5 + 8) == 1)
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
            else
              --*(_DWORD *)(v5 + 8);
          }
        }
      }
    }
  }
  *((_DWORD *)v2 + 6) += 2;
  v8 = *((_QWORD *)v2 + 199);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 8) + 1;
    *(_DWORD *)(v8 + 8) = v9;
    if (*(_DWORD *)(v8 + 52)
      && ((*(_QWORD *)(v8 + 96) & 0xFFFFFFFFFFFFLL) == 0
       || *(double *)((*(_QWORD *)(v8 + 96) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      && !*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 8) + 3280))
    {
      *(_QWORD *)(v8 + 88) = 0;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
      this = WebCore::TimerBase::setNextFireTime(v8 + 64, v10 + 0.0);
      v9 = *(_DWORD *)(v8 + 8);
    }
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x19430B468);
    }
    *(_DWORD *)(v8 + 8) = v9 - 1;
  }
  if (*((double *)v2 + 283) == 0.0)
  {
    WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
    *((_QWORD *)v2 + 283) = v11;
    v12 = (WebCore::LocalDOMWindow *)*((_QWORD *)v2 + 87);
    if (v12)
    {
      v13 = v11;
      ++*((_DWORD *)v12 + 6);
      v14 = *(_DWORD **)(WebCore::LocalDOMWindow::performance(v12) + 176);
      if (v14)
      {
        v15 = v14[2];
        v14[2] = v15 + 1;
        v16 = v14 + 70;
        if (v15)
          v14[2] = v15;
        else
          (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
      }
      else
      {
        v16 = 0;
      }
      if (*((_DWORD *)v12 + 6) == 1)
        (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v12 + 72))(v12);
      else
        --*((_DWORD *)v12 + 6);
      if (v16)
        *((_QWORD *)v16 + 2) = v13;
    }
    this = kdebug_is_enabled();
    if ((_DWORD)this)
    {
      v55 = *MEMORY[0x1E0CBE150];
      v56 = WTFSignpostLogHandle();
      v57 = v56;
      if (v55)
      {
        this = os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)this)
        {
          v64 = 67109888;
          v65 = 1024;
          v66 = 1;
          v67 = 2048;
          v68 = v2;
          v69 = 2048;
          v70 = WTFCurrentContinuousTime();
          _os_log_impl(&dword_1940B8000, v57, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu domContentLoadedEventBegin", (uint8_t *)&v64, 0x22u);
        }
      }
      else
      {
        this = os_signpost_id_make_with_pointer(v56, v2);
        if ((unint64_t)(this - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v62 = (WebCore::Document *)this;
          this = os_signpost_enabled(v57);
          if ((_DWORD)this)
          {
            LOWORD(v64) = 0;
            _os_signpost_emit_with_name_impl(&dword_1940B8000, v57, OS_SIGNPOST_EVENT, (os_signpost_id_t)v62, "NavigationAndPaintTiming", "domContentLoadedEventBegin", (uint8_t *)&v64, 2u);
          }
        }
      }
    }
  }
  v17 = *((_QWORD *)v2 + 66);
  if (!v17)
    goto LABEL_91;
  v18 = *(_QWORD *)(v17 + 8);
  if (!v18)
    goto LABEL_91;
  v19 = *(_QWORD *)(*(_QWORD *)(v18 + 280) + 88);
  if (!v19)
  {
LABEL_92:
    v20 = 1;
    goto LABEL_36;
  }
  if (*(WebCore::Document **)(v18 + 296) != v2)
  {
LABEL_91:
    v19 = 0;
    goto LABEL_92;
  }
  v20 = 0;
  ++*(_DWORD *)(v19 + 24);
  if (!*(_BYTE *)(v19 + 3543))
  {
LABEL_36:
    v21 = WebCore::Document::eventLoop(v2, a2);
    this = WebCore::EventLoopTaskGroup::performMicrotaskCheckpoint(v21);
  }
  v22 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v22 || (v23 = *(_QWORD *)(v22 + 96)) == 0)
    v23 = WebCore::threadGlobalDataSlow((WebCore *)this);
  v24 = *(_QWORD *)(v23 + 40);
  if (!v24)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v23);
    v24 = *(_QWORD *)(v23 + 40);
  }
  v25 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v25);
  *(_DWORD *)(v25 + 16) = 1;
  *(_QWORD *)v25 = off_1E33A4B48;
  *(_QWORD *)(v25 + 8) = 0;
  *(_DWORD *)(v25 + 20) = *(_DWORD *)(v25 + 20) & 0xFFC00000 | 0x1E8202 | (*(_QWORD *)(v24 + 16) != 0);
  v27 = *(_DWORD **)(v24 + 16);
  if (v27)
    *v27 += 2;
  *(_QWORD *)(v25 + 24) = v27;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 40) = 0;
  *(_QWORD *)(v25 + 48) = 0;
  *(_QWORD *)(v25 + 56) = v26;
  *(_QWORD *)(v25 + 64) = 0;
  is_enabled = (*(uint64_t (**)(WebCore::Document *, uint64_t))(*(_QWORD *)v2 + 48))(v2, v25);
  if (*(_DWORD *)(v25 + 16) == 1)
    is_enabled = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  else
    --*(_DWORD *)(v25 + 16);
  if (*((double *)v2 + 284) == 0.0)
  {
    WTF::MonotonicTime::now((WTF::MonotonicTime *)is_enabled);
    *((_QWORD *)v2 + 284) = v29;
    v30 = (WebCore::LocalDOMWindow *)*((_QWORD *)v2 + 87);
    if (v30)
    {
      v31 = v29;
      ++*((_DWORD *)v30 + 6);
      v32 = *(_DWORD **)(WebCore::LocalDOMWindow::performance(v30) + 176);
      if (v32)
      {
        v33 = v32[2];
        v32[2] = v33 + 1;
        v34 = v32 + 70;
        if (v33)
          v32[2] = v33;
        else
          (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
      }
      else
      {
        v34 = 0;
      }
      if (*((_DWORD *)v30 + 6) == 1)
        (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v30 + 72))(v30);
      else
        --*((_DWORD *)v30 + 6);
      if (v34)
        *((_QWORD *)v34 + 3) = v31;
    }
    is_enabled = kdebug_is_enabled();
    if ((_DWORD)is_enabled)
    {
      v58 = *MEMORY[0x1E0CBE150];
      v59 = WTFSignpostLogHandle();
      v60 = v59;
      if (v58)
      {
        is_enabled = os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)is_enabled)
        {
          v61 = WTFCurrentContinuousTime();
          v64 = 67109888;
          v65 = 1024;
          v66 = 1;
          v67 = 2048;
          v68 = v2;
          v69 = 2048;
          v70 = v61;
          _os_log_impl(&dword_1940B8000, v60, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu domContentLoadedEventEnd", (uint8_t *)&v64, 0x22u);
        }
      }
      else
      {
        is_enabled = os_signpost_id_make_with_pointer(v59, v2);
        if ((unint64_t)(is_enabled - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v63 = is_enabled;
          is_enabled = os_signpost_enabled(v60);
          if ((_DWORD)is_enabled)
          {
            LOWORD(v64) = 0;
            _os_signpost_emit_with_name_impl(&dword_1940B8000, v60, OS_SIGNPOST_EVENT, v63, "NavigationAndPaintTiming", "domContentLoadedEventEnd", (uint8_t *)&v64, 2u);
          }
        }
      }
    }
  }
  v35 = *((_QWORD *)v2 + 66);
  if (v35)
  {
    v36 = *(_QWORD *)(v35 + 8);
    if (v36)
    {
      v37 = (unsigned int *)(v36 + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 + 1, v37));
      if (*((_BYTE *)v2 + 3438))
      {
        if ((*((_QWORD *)v2 + 209) & 0xFFFFFFFFFFFFLL) != 0)
          WebCore::TimerBase::stopSlowCase((WebCore::Document *)((char *)v2 + 1640));
        WebCore::Document::applyPendingXSLTransformsTimerFired((uint64_t)v2);
      }
      WebCore::Document::updateStyleIfNeeded(v2);
      v39 = *(WebCore::FrameLoader **)(v36 + 280);
      ++*(_DWORD *)v39;
      is_enabled = WebCore::FrameLoader::finishedParsing(v39);
      if (!*(_DWORD *)v39)
      {
        __break(0xC471u);
        JUMPOUT(0x19430B498);
      }
      --*(_DWORD *)v39;
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        v52 = *(_QWORD *)(v36 + 24);
        if (v52)
        {
          v53 = *(_QWORD *)(v52 + 8);
          if (v53)
            is_enabled = WebCore::InspectorInstrumentation::domContentLoadedEventFiredImpl(*(_QWORD *)(*(_QWORD *)(v53 + 80) + 8), v36);
        }
      }
      do
      {
        v41 = __ldaxr(v37);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v37));
      if (!v42)
      {
        atomic_store(1u, v37);
        v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v54 = off_1E31FE290;
        v54[1] = v37;
        v64 = (uint64_t)v54;
        WTF::ensureOnMainThread();
        is_enabled = v64;
        v64 = 0;
        if (is_enabled)
          is_enabled = (*(uint64_t (**)(uint64_t))(*(_QWORD *)is_enabled + 8))(is_enabled);
      }
    }
  }
  *((_QWORD *)v2 + 322) = 0;
  WTF::MonotonicTime::now((WTF::MonotonicTime *)is_enabled);
  WebCore::TimerBase::setNextFireTime((uint64_t)v2 + 2552, v43 + 10.0);
  v45 = *((_QWORD *)v2 + 90);
  if (v45)
    WebCore::CachedResourceLoader::clearPreloads(v45, 0);
  if ((*(_QWORD *)(*((_QWORD *)v2 + 85) + 696) & 0x80) != 0)
  {
    if (*((_BYTE *)v2 + 466))
    {
      if (((*(uint64_t (**)(uint64_t))(*((_QWORD *)v2 + 24) + 64))((uint64_t)v2 + 192) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19430B700);
      }
      v47 = (WebCore::NavigatorBase **)((char *)v2 + 744);
    }
    else
    {
      v46 = *((_QWORD *)v2 + 87);
      if (!v46)
        goto LABEL_72;
      v47 = (WebCore::NavigatorBase **)(v46 + 152);
    }
    if (*v47)
    {
      v49 = (WebCore::ServiceWorkerContainer *)WebCore::NavigatorBase::serviceWorker(*v47);
      ++*(_DWORD *)(*((_QWORD *)v49 + 8) + 16);
      WebCore::ServiceWorkerContainer::startMessages(v49, v50);
      v51 = (_DWORD *)*((_QWORD *)v49 + 8);
      if (v51[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 16))(v51);
      else
        --v51[4];
    }
  }
LABEL_72:
  result = (unsigned int *)*((_QWORD *)v2 + 311);
  if (result)
    result = WebCore::AppHighlightStorage::restoreUnrestoredAppHighlights((WebCore::AppHighlightStorage *)result);
  if ((v20 & 1) == 0)
  {
    if (*(_DWORD *)(v19 + 24) == 1)
      result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    else
      --*(_DWORD *)(v19 + 24);
  }
  if (*((_DWORD *)v2 + 6) == 2)
  {
    if ((*((_WORD *)v2 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v2, v44);
  }
  else
  {
    *((_DWORD *)v2 + 6) -= 2;
  }
  return result;
}

void WebCore::Document::setReadyState(os_signpost_id_t is_enabled, int a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::LocalDOMWindow *v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  WebCore::LocalDOMWindow *v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  WebCore::LocalDOMWindow *v33;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  _DWORD *v37;
  int v38;
  NSObject *v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void *v45;
  os_signpost_id_t v46;
  const char *v47;
  os_signpost_id_t v48;
  double v49;
  NSObject *v50;
  os_signpost_id_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL4 v56;
  const char *v57;
  NSObject *v58;
  os_signpost_id_t v59;
  uint32_t v60;
  char *v61;
  uint64_t v62;
  WTF *v63;
  uint8_t buf[4];
  _BYTE v65[10];
  _BYTE v66[20];
  __int16 v67;
  char *v68;
  __int16 v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int8 *)(is_enabled + 3363) == a2)
    return;
  v3 = is_enabled;
  switch(a2)
  {
    case 0:
      if (*(double *)(is_enabled + 2248) != 0.0)
        goto LABEL_34;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)is_enabled);
      *(_QWORD *)(v3 + 2248) = v13;
      v14 = *(WebCore::LocalDOMWindow **)(v3 + 696);
      if (v14)
      {
        v15 = v13;
        ++*((_DWORD *)v14 + 6);
        v16 = *(_DWORD **)(WebCore::LocalDOMWindow::performance(v14) + 176);
        if (v16)
        {
          v17 = v16[2];
          v16[2] = v17 + 1;
          v18 = v16 + 70;
          if (v17)
            v16[2] = v17;
          else
            (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
        }
        else
        {
          v18 = 0;
        }
        if (*((_DWORD *)v14 + 6) == 1)
          (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v14 + 72))(v14);
        else
          --*((_DWORD *)v14 + 6);
        if (v18)
          *v18 = v15;
      }
      v19 = *(_QWORD *)(v3 + 736);
      if (!v19 || !*(_DWORD *)(v19 + 4) || !kdebug_is_enabled())
        goto LABEL_27;
      if (*MEMORY[0x1E0CBE150])
      {
        v41 = WTFSignpostLogHandle();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          WebCore::Document::monotonicTimestamp((WebCore::Document *)v3);
          v42 = WTFCurrentContinuousTime();
          WTF::String::utf8();
          if (v63)
            v43 = (char *)v63 + 16;
          else
            v43 = 0;
          v44 = *(_QWORD *)(v3 + 528);
          if (v44)
          {
            v44 = *(_QWORD *)(v44 + 8);
            if (v44)
              LODWORD(v44) = *(_QWORD *)(*(_QWORD *)(v44 + 128) + 8) == v44;
          }
          *(_DWORD *)buf = 67110402;
          *(_DWORD *)v65 = 1;
          *(_WORD *)&v65[4] = 1024;
          *(_DWORD *)&v65[6] = 1;
          *(_WORD *)v66 = 2048;
          *(_QWORD *)&v66[2] = v3;
          *(_WORD *)&v66[10] = 2048;
          *(_QWORD *)&v66[12] = v42;
          v67 = 2082;
          v68 = v43;
          v69 = 1024;
          v70 = v44;
          _os_log_impl(&dword_1940B8000, v41, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu Loading %{public}s | isMainFrame: %d", buf, 0x32u);
          goto LABEL_71;
        }
LABEL_27:
        is_enabled = kdebug_is_enabled();
        if (!(_DWORD)is_enabled)
          goto LABEL_34;
        v20 = *MEMORY[0x1E0CBE150];
        v21 = WTFSignpostLogHandle();
        v22 = v21;
        if (v20)
        {
          is_enabled = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
          if (!(_DWORD)is_enabled)
            goto LABEL_34;
          v23 = WTFCurrentContinuousTime();
          *(_DWORD *)buf = 67109888;
          *(_DWORD *)v65 = 0;
          *(_WORD *)&v65[4] = 1024;
          *(_DWORD *)&v65[6] = 1;
          *(_WORD *)v66 = 2048;
          *(_QWORD *)&v66[2] = v3;
          *(_WORD *)&v66[10] = 2048;
          *(_QWORD *)&v66[12] = v23;
          v24 = "type=%d name=%d p=%lu ts=%llu domLoading";
          goto LABEL_31;
        }
        is_enabled = os_signpost_id_make_with_pointer(v21, (const void *)v3);
        if (is_enabled - 1 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_34;
        v46 = is_enabled;
        is_enabled = os_signpost_enabled(v22);
        if (!(_DWORD)is_enabled)
          goto LABEL_34;
        *(_WORD *)buf = 0;
        v47 = "domLoading";
        goto LABEL_87;
      }
      v49 = WebCore::Document::monotonicTimestamp((WebCore::Document *)v3);
      v50 = WTFSignpostLogHandle();
      v51 = os_signpost_id_make_with_pointer(v50, (const void *)v3);
      v52 = v51 - 1;
      if (v49 == 0.0)
      {
        if (v52 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v50))
          goto LABEL_27;
        WTF::String::utf8();
        if (v63)
          v61 = (char *)v63 + 16;
        else
          v61 = 0;
        v62 = *(_QWORD *)(v3 + 528);
        if (v62)
        {
          v62 = *(_QWORD *)(v62 + 8);
          if (v62)
            LODWORD(v62) = *(_QWORD *)(*(_QWORD *)(v62 + 128) + 8) == v62;
        }
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)v65 = v61;
        *(_WORD *)&v65[8] = 1024;
        *(_DWORD *)v66 = v62;
        v57 = "Loading %{public}s | isMainFrame: %d";
        v58 = v50;
        v59 = v51;
        v60 = 18;
      }
      else
      {
        if (v52 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v50))
          goto LABEL_27;
        WTF::String::utf8();
        if (v63)
          v53 = (char *)v63 + 16;
        else
          v53 = 0;
        v54 = *(_QWORD *)(v3 + 528);
        v56 = v54 && (v55 = *(_QWORD *)(v54 + 8)) != 0 && *(_QWORD *)(*(_QWORD *)(v55 + 128) + 8) == v55;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)v65 = v53;
        *(_WORD *)&v65[8] = 1024;
        *(_DWORD *)v66 = v56;
        *(_WORD *)&v66[4] = 2048;
        *(_QWORD *)&v66[6] = WTFCurrentContinuousTime();
        v57 = "Loading %{public}s | isMainFrame: %d %{signpost.description:begin_time}llu";
        v58 = v50;
        v59 = v51;
        v60 = 28;
      }
      _os_signpost_emit_with_name_impl(&dword_1940B8000, v58, OS_SIGNPOST_INTERVAL_BEGIN, v59, "NavigationAndPaintTiming", v57, buf, v60);
LABEL_71:
      if (v63)
      {
        if (*(_DWORD *)v63 == 1)
          WTF::fastFree(v63, v45);
        else
          --*(_DWORD *)v63;
      }
      goto LABEL_27;
    case 2:
      if (*(double *)(is_enabled + 2280) == 0.0)
      {
        WTF::MonotonicTime::now((WTF::MonotonicTime *)is_enabled);
        *(_QWORD *)(v3 + 2280) = v4;
        v5 = *(WebCore::LocalDOMWindow **)(v3 + 696);
        if (v5)
        {
          v6 = v4;
          ++*((_DWORD *)v5 + 6);
          v7 = *(_DWORD **)(WebCore::LocalDOMWindow::performance(v5) + 176);
          if (v7)
          {
            v8 = v7[2];
            v7[2] = v8 + 1;
            v9 = v7 + 70;
            if (v8)
              v7[2] = v8;
            else
              (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
          }
          else
          {
            v9 = 0;
          }
          if (*((_DWORD *)v5 + 6) == 1)
            (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v5 + 72))(v5);
          else
            --*((_DWORD *)v5 + 6);
          if (v9)
            *((_QWORD *)v9 + 4) = v6;
        }
        is_enabled = kdebug_is_enabled();
        if ((_DWORD)is_enabled)
        {
          v10 = *MEMORY[0x1E0CBE150];
          v11 = WTFSignpostLogHandle();
          v12 = v11;
          if (v10)
          {
            is_enabled = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)is_enabled)
            {
              *(_DWORD *)buf = 67109888;
              *(_DWORD *)v65 = 0;
              *(_WORD *)&v65[4] = 1024;
              *(_DWORD *)&v65[6] = 1;
              *(_WORD *)v66 = 2048;
              *(_QWORD *)&v66[2] = v3;
              *(_WORD *)&v66[10] = 2048;
              *(_QWORD *)&v66[12] = WTFCurrentContinuousTime();
              _os_log_impl(&dword_1940B8000, v12, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu domComplete", buf, 0x22u);
            }
          }
          else
          {
            is_enabled = os_signpost_id_make_with_pointer(v11, (const void *)v3);
            if (is_enabled - 1 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v48 = is_enabled;
              is_enabled = os_signpost_enabled(v12);
              if ((_DWORD)is_enabled)
              {
                *(_WORD *)buf = 0;
                _os_signpost_emit_with_name_impl(&dword_1940B8000, v12, OS_SIGNPOST_EVENT, v48, "NavigationAndPaintTiming", "domComplete", buf, 2u);
              }
            }
          }
        }
      }
      break;
    case 1:
      break;
    default:
      goto LABEL_34;
  }
  if (*(double *)(v3 + 2256) != 0.0)
    goto LABEL_34;
  WTF::MonotonicTime::now((WTF::MonotonicTime *)is_enabled);
  *(_QWORD *)(v3 + 2256) = v32;
  v33 = *(WebCore::LocalDOMWindow **)(v3 + 696);
  if (v33)
  {
    v34 = v32;
    ++*((_DWORD *)v33 + 6);
    v35 = *(_DWORD **)(WebCore::LocalDOMWindow::performance(v33) + 176);
    if (v35)
    {
      v36 = v35[2];
      v35[2] = v36 + 1;
      v37 = v35 + 70;
      if (v36)
        v35[2] = v36;
      else
        (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
    }
    else
    {
      v37 = 0;
    }
    if (*((_DWORD *)v33 + 6) == 1)
      (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v33 + 72))(v33);
    else
      --*((_DWORD *)v33 + 6);
    if (v37)
      *((_QWORD *)v37 + 1) = v34;
  }
  is_enabled = kdebug_is_enabled();
  if (!(_DWORD)is_enabled)
    goto LABEL_34;
  v38 = *MEMORY[0x1E0CBE150];
  v39 = WTFSignpostLogHandle();
  v22 = v39;
  if (!v38)
  {
    is_enabled = os_signpost_id_make_with_pointer(v39, (const void *)v3);
    if (is_enabled - 1 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_34;
    v46 = is_enabled;
    is_enabled = os_signpost_enabled(v22);
    if (!(_DWORD)is_enabled)
      goto LABEL_34;
    *(_WORD *)buf = 0;
    v47 = "domInteractive";
LABEL_87:
    _os_signpost_emit_with_name_impl(&dword_1940B8000, v22, OS_SIGNPOST_EVENT, v46, "NavigationAndPaintTiming", v47, buf, 2u);
    goto LABEL_34;
  }
  is_enabled = os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)is_enabled)
  {
    v40 = WTFCurrentContinuousTime();
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)v65 = 0;
    *(_WORD *)&v65[4] = 1024;
    *(_DWORD *)&v65[6] = 1;
    *(_WORD *)v66 = 2048;
    *(_QWORD *)&v66[2] = v3;
    *(_WORD *)&v66[10] = 2048;
    *(_QWORD *)&v66[12] = v40;
    v24 = "type=%d name=%d p=%lu ts=%llu domInteractive";
LABEL_31:
    _os_log_impl(&dword_1940B8000, v22, OS_LOG_TYPE_DEFAULT, v24, buf, 0x22u);
  }
LABEL_34:
  *(_BYTE *)(v3 + 3363) = a2;
  v25 = *(_QWORD *)(v3 + 528);
  if (v25 && *(_QWORD *)(v25 + 8))
  {
    v26 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v26 || (v27 = *(_QWORD *)(v26 + 96)) == 0)
      v27 = WebCore::threadGlobalDataSlow((WebCore *)is_enabled);
    v28 = *(_QWORD *)(v27 + 40);
    if (!v28)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v27);
      v28 = *(_QWORD *)(v27 + 40);
    }
    v29 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v29);
    *(_DWORD *)(v29 + 16) = 1;
    *(_QWORD *)v29 = off_1E33A4B48;
    *(_QWORD *)(v29 + 8) = 0;
    *(_DWORD *)(v29 + 20) = *(_DWORD *)(v29 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v28 + 1632) != 0);
    v31 = *(_DWORD **)(v28 + 1632);
    if (v31)
      *v31 += 2;
    *(_QWORD *)(v29 + 24) = v31;
    *(_QWORD *)(v29 + 32) = 0;
    *(_QWORD *)(v29 + 40) = 0;
    *(_QWORD *)(v29 + 48) = 0;
    *(_QWORD *)(v29 + 56) = v30;
    *(_QWORD *)(v29 + 64) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(v3, v29);
    if (*(_DWORD *)(v29 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    else
      --*(_DWORD *)(v29 + 16);
  }
  if ((*(_QWORD *)(*(_QWORD *)(v3 + 680) + 696) & 0x800000000000) != 0)
    WebCore::Document::setVisualUpdatesAllowed(v3, a2);
}

WebCore::Page *WebCore::Document::serviceRequestVideoFrameCallbacks(WebCore::Page *this)
{
  uint64_t v1;
  WebCore::Page *v2;
  double *v3;
  double v4;
  double v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Page *v12;
  WebCore::Page *v13;
  char v14;
  _QWORD *v15;

  v1 = *((_QWORD *)this + 87);
  if (v1)
  {
    v2 = this;
    v14 = 0;
    v3 = (double *)WebCore::LocalDOMWindow::performance((WebCore::LocalDOMWindow *)v1);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v3);
    if (*(_BYTE *)(v1 + 288))
      v5 = *(double *)(v1 + 280);
    else
      v5 = *(double *)&WebCore::timePrecision * floor((v4 - v3[21]) / *(double *)&WebCore::timePrecision);
    v6 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v6 = off_1E33A3A48;
    *(double *)(v6 + 8) = v5;
    *(_QWORD *)(v6 + 16) = &v14;
    v13 = (WebCore::Page *)v6;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = off_1E33A3658;
    v7[1] = &v13;
    v15 = v7;
    WTF::WeakHashSet<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)v2 + 232, &v15);
    v8 = v15;
    v15 = 0;
    if (v8)
      (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    this = v13;
    v13 = 0;
    if (this)
      this = (WebCore::Page *)(*(uint64_t (**)(WebCore::Page *))(*(_QWORD *)this + 8))(this);
    if (v14)
    {
      v9 = *((_QWORD *)v2 + 66);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 24);
          if (v11)
          {
            v12 = *(WebCore::Page **)(v11 + 8);
            if (v12)
            {
              ++*(_DWORD *)v12;
              WebCore::Page::scheduleRenderingUpdate((uint64_t)v12, 0x20000);
              return WTF::RefCounted<WebCore::Page>::deref(v12);
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::LocalDOMWindow::performance(WebCore::LocalDOMWindow *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::ScriptExecutionContext *v13;
  uint64_t v14;
  unint64_t StatusReg;
  unsigned int *v16;
  unsigned int v17;
  _QWORD *v18;
  void *v19;
  WebCore::Performance *v20;
  uint64_t v21;
  bmalloc::api *v22;
  void *v23;

  if (*((_QWORD *)this + 34))
    return *((_QWORD *)this + 34);
  v3 = *((_QWORD *)this + 9);
  if (!v3)
    goto LABEL_30;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_30;
  if (*(_BYTE *)(v4 + 178))
    goto LABEL_36;
  v5 = *(_QWORD *)(v4 + 240);
  if (v5
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && (v7 = *(_QWORD *)(*(_QWORD *)(v6 + 280) + 88)) != 0
    && *(_QWORD *)(v6 + 296) == v4 - 288)
  {
    v8 = 0;
    ++*(_DWORD *)(v7 + 24);
    v9 = *(_QWORD *)(v7 + 2728);
  }
  else
  {
LABEL_30:
    v8 = 1;
    WTF::MonotonicTime::now(this);
    v9 = v21;
    v7 = 0;
  }
  v10 = *((_QWORD *)this + 9);
  if (!v10 || (v11 = *(_QWORD *)(v10 + 8)) == 0)
  {
    v12 = 0;
    goto LABEL_15;
  }
  if (*(_BYTE *)(v11 + 178))
  {
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x19430C380);
  }
  v12 = v11 - 288;
  *(_DWORD *)(v11 - 264) += 2;
LABEL_15:
  if (v12)
    v13 = (WebCore::ScriptExecutionContext *)(v12 + 192);
  else
    v13 = 0;
  v14 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v14 + 16) = 1;
  *(_QWORD *)v14 = &off_1E33A18C0;
  *(_QWORD *)(v14 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v14, v13);
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)v14 = &off_1E3401728;
  *(_QWORD *)(v14 + 24) = &unk_1E3401770;
  *(_DWORD *)(v14 + 80) = 250;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_QWORD *)(v14 + 88) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  v16 = *(unsigned int **)(StatusReg + 736);
  if (!v16)
    v16 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  *(_QWORD *)(v14 + 128) = v16;
  *(_QWORD *)(v14 + 88) = off_1E31F7378;
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v18 = off_1E3401910;
  v18[1] = WebCore::Performance::resourceTimingBufferFullTimerFired;
  v18[2] = 0;
  v18[3] = v14;
  *(_DWORD *)(v14 + 159) = 0;
  *(_QWORD *)(v14 + 136) = v18;
  *(_QWORD *)(v14 + 144) = 0;
  *(_QWORD *)(v14 + 152) = 0;
  *(_QWORD *)(v14 + 168) = v9;
  *(_OWORD *)(v14 + 192) = 0u;
  *(_OWORD *)(v14 + 208) = 0u;
  *(_OWORD *)(v14 + 176) = 0u;
  v20 = (WebCore::Performance *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = v14;
  if (v20)
  {
    if (*((_DWORD *)v20 + 4) == 1)
    {
      WebCore::Performance::~Performance(v20, v19);
      bmalloc::api::isoDeallocate(v22, v23);
    }
    else
    {
      --*((_DWORD *)v20 + 4);
    }
  }
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  if ((v8 & 1) == 0)
  {
    if (*(_DWORD *)(v7 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    else
      --*(_DWORD *)(v7 + 24);
  }
  return *((_QWORD *)this + 34);
}

uint64_t WebCore::ScriptRunner::timerFired(WebCore::ScriptRunner *this)
{
  uint64_t v2;
  uint64_t result;
  void *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  WebCore::PendingScript *v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  WebCore::ScriptElement *v36;
  void *v37;
  uint64_t Ref;
  int v39;
  uint64_t v40;
  BOOL v41;
  double v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  v45 = 0;
  v46 = 0;
  result = WebCore::Document::shouldDeferAsynchronousScriptsUntilParsingFinishes((WebCore::Document *)v2);
  v5 = (char *)*((_QWORD *)this + 5);
  if ((_DWORD)result)
  {
    v6 = *((unsigned int *)this + 13);
    v7 = &v5[8 * v6];
    v8 = 0;
    v9 = 0;
    if ((_DWORD)v6)
    {
      v10 = *((_QWORD *)this + 5);
      v11 = &v5[8 * v6];
      v12 = v11;
      do
      {
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v5 + 24) + 16))(*(_QWORD *)(*(_QWORD *)v5 + 24));
        if ((result & 1) == 0)
        {
          if (v8 == (_DWORD)v46)
          {
            result = (uint64_t)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v45, v8 + 1, (unint64_t)v5);
            v8 = HIDWORD(v46);
            v13 = &v45[8 * HIDWORD(v46)];
          }
          else
          {
            v13 = &v45[8 * v8];
            result = (uint64_t)v5;
          }
          ++v8;
          v14 = *(_QWORD *)result;
          *(_QWORD *)result = 0;
          *(_QWORD *)v13 = v14;
          HIDWORD(v46) = v8;
          v15 = v5;
          if (v12 != (char *)(*((_QWORD *)this + 5) + 8 * *((unsigned int *)this + 13)))
          {
            if (v5 == v11)
            {
              v15 = v12;
            }
            else
            {
              result = (uint64_t)memmove(v12, v11, v10 - (_QWORD)v11);
              v15 = &v12[v10 - (_QWORD)v11];
            }
          }
          v16 = *(_QWORD *)v5;
          *(_QWORD *)v5 = 0;
          v11 = v5 + 8;
          if (v16)
            result = (uint64_t)WTF::RefCounted<WebCore::PendingScript>::deref((_DWORD *)(v16 + 16), v4);
          ++v9;
          v12 = v15;
        }
        v5 += 8;
        v10 += 8;
      }
      while (v5 < v7);
      v5 = (char *)*((_QWORD *)this + 5);
      LODWORD(v6) = *((_DWORD *)this + 13);
      v7 = v12;
    }
    else
    {
      v11 = &v5[8 * v6];
    }
    v18 = &v5[8 * v6];
    if (v11 != v18)
    {
      result = (uint64_t)memmove(v7, v11, v18 - v11);
      LODWORD(v6) = *((_DWORD *)this + 13);
    }
    v17 = v6 - v9;
    v5 = v45;
  }
  else
  {
    v17 = 0;
    v45 = (char *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    v8 = *((_DWORD *)this + 13);
    LODWORD(v46) = *((_DWORD *)this + 12);
    *((_DWORD *)this + 12) = 0;
  }
  *((_DWORD *)this + 13) = v17;
  if (*((_DWORD *)this + 9))
  {
    v19 = 0;
    LODWORD(v20) = v46;
    while (1)
    {
      result = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8 * v19) + 40);
      if (!result)
        break;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
      if (!(_DWORD)result)
        break;
      v21 = *((unsigned int *)this + 9);
      if (v19 >= v21)
        goto LABEL_88;
      v22 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v19);
      v23 = v8 + v19;
      if (v8 + (_DWORD)v19 == (_DWORD)v20)
      {
        v24 = v23 + (v23 >> 2);
        if (v24 >= 0x10)
          v25 = v24 + 1;
        else
          v25 = 16;
        if (v25 <= v23 + 1)
          v20 = v23 + 1;
        else
          v20 = v25;
        if (v20 >> 29)
        {
LABEL_88:
          __break(0xC471u);
          JUMPOUT(0x19430C848);
        }
        v26 = (char *)WTF::fastMalloc((WTF *)(8 * v20));
        memcpy(v26, v5, 8 * v23);
        if (v5)
        {
          if (v26 == v5)
          {
            v26 = 0;
            LODWORD(v20) = 0;
          }
          WTF::fastFree((WTF *)v5, v4);
        }
        v5 = v26;
        if (v22)
          ++*(_DWORD *)(v22 + 16);
        *(_QWORD *)&v26[8 * v23] = v22;
        v21 = *((unsigned int *)this + 9);
      }
      else
      {
        if (v22)
          ++*(_DWORD *)(v22 + 16);
        *(_QWORD *)&v5[8 * v23] = v22;
      }
      if (++v19 >= v21)
      {
        v45 = v5;
        v8 += v19;
        goto LABEL_48;
      }
    }
    v45 = v5;
    v8 += v19;
    if (!v19)
      goto LABEL_56;
LABEL_48:
    v27 = 0;
    v28 = (char *)*((_QWORD *)this + 3);
    do
    {
      v29 = *(WebCore::PendingScript **)&v28[v27];
      *(_QWORD *)&v28[v27] = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 4) == 1)
        {
          WebCore::PendingScript::~PendingScript(v29, v4);
          WTF::fastFree(v30, v31);
        }
        else
        {
          --*((_DWORD *)v29 + 4);
        }
      }
      v27 += 8;
    }
    while (8 * v19 != v27);
    result = (uint64_t)memmove(v28, &v28[8 * v19], *((_QWORD *)this + 3) + 8 * *((unsigned int *)this + 9) - (_QWORD)&v28[8 * v19]);
    *((_DWORD *)this + 9) -= v19;
  }
LABEL_56:
  if (v8)
  {
    v32 = 8 * v8;
    v33 = v32;
    v34 = v5;
    do
    {
      v35 = *(_QWORD *)v34;
      *(_QWORD *)v34 = 0;
      if (v35)
      {
        v36 = *(WebCore::ScriptElement **)(v35 + 24);
        *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v36 + 1) + 8) + 24) += 2;
        WebCore::ScriptElement::executePendingScript(v36, (WebCore::PendingScript *)v35);
        Ref = *(_QWORD *)(*((_QWORD *)v36 + 1) + 8);
        if (*(_DWORD *)(Ref + 24) == 2)
        {
          if ((*(_WORD *)(Ref + 30) & 0x400) == 0)
            Ref = WebCore::Node::removedLastRef((WebCore::Node *)Ref);
        }
        else
        {
          *(_DWORD *)(Ref + 24) -= 2;
        }
        v39 = *(_DWORD *)(v2 + 3328) - 1;
        *(_DWORD *)(v2 + 3328) = v39;
        v40 = *(_QWORD *)(v2 + 528);
        if (v40)
        {
          v41 = *(_QWORD *)(v40 + 8) && v39 == 0;
          if (v41
            && ((*(_QWORD *)(v2 + 2152) & 0xFFFFFFFFFFFFLL) == 0
             || *(double *)((*(_QWORD *)(v2 + 2152) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
          {
            *(_QWORD *)(v2 + 2144) = 0;
            WTF::MonotonicTime::now((WTF::MonotonicTime *)Ref);
            WebCore::TimerBase::setNextFireTime(v2 + 2120, v42 + 0.0);
          }
        }
        result = (uint64_t)WTF::RefCounted<WebCore::PendingScript>::deref((_DWORD *)(v35 + 16), v37);
      }
      v34 += 8;
      v33 -= 8;
    }
    while (v33);
    v43 = v5;
    do
    {
      v44 = *(_QWORD *)v43;
      *(_QWORD *)v43 = 0;
      if (v44)
        result = (uint64_t)WTF::RefCounted<WebCore::PendingScript>::deref((_DWORD *)(v44 + 16), v4);
      v43 += 8;
      v32 -= 8;
    }
    while (v32);
  }
  if (v5)
  {
    result = WTF::fastFree((WTF *)v5, v4);
    if (!v2)
      return result;
  }
  else if (!v2)
  {
    return result;
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::ScriptRunner::queueScriptForExecution(uint64_t a1, WebCore::PendingScript *this, WebCore::ScriptElement *a3, int a4)
{
  void *v6;
  WebCore::PendingScript *v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  unsigned int v17;
  WebCore::PendingScript **v18;
  WebCore::PendingScript *v19;
  WebCore::PendingScript *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::PendingScript *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  WTF *v34;
  void *v35;
  WebCore::PendingScript *v36;
  void *v37;
  uint64_t v38;
  uint64_t result;
  WTF *v40;
  void *v41;
  WebCore::PendingScript *v42;
  WebCore::PendingScript *v43;

  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 3328);
  WebCore::PendingScript::create(this, a3, (uint64_t *)&v43);
  if (a4 != 1)
  {
    if (a4)
      goto LABEL_39;
    v7 = v43;
    ++*((_DWORD *)v43 + 4);
    v9 = (uint64_t *)(a1 + 56);
    v8 = *(_QWORD *)(a1 + 56);
    if (v8
      || (WTF::HashTable<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>,WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>>,WTF::HashTraits<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>>,WTF::HashTraits<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>>>::rehash((uint64_t *)(a1 + 56), 8u), (v8 = *v9) != 0))
    {
      v10 = *(_DWORD *)(v8 - 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = 0;
    v12 = ((unint64_t)v7 + ~((_QWORD)v7 << 32)) ^ (((unint64_t)v7 + ~((_QWORD)v7 << 32)) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = (v14 >> 31) ^ v14;
    for (i = 1; ; ++i)
    {
      v17 = v15 & v10;
      v18 = (WebCore::PendingScript **)(v8 + 8 * v17);
      v19 = *v18;
      if (*v18 == (WebCore::PendingScript *)-1)
      {
        v11 = (_QWORD *)(v8 + 8 * v17);
      }
      else
      {
        if (!v19)
        {
          if (v11)
          {
            *v11 = 0;
            --*(_DWORD *)(*v9 - 16);
            *v11 = v7;
          }
          else
          {
            *v18 = v7;
          }
          v27 = *v9;
          if (*v9)
            v28 = *(_DWORD *)(v27 - 12) + 1;
          else
            v28 = 1;
          *(_DWORD *)(v27 - 12) = v28;
          v29 = *v9;
          if (*v9)
            v30 = *(_DWORD *)(v29 - 12);
          else
            v30 = 0;
          v31 = (*(_DWORD *)(v29 - 16) + v30);
          v32 = *(unsigned int *)(v29 - 4);
          if (v32 > 0x400)
          {
            if (v32 > 2 * v31)
              goto LABEL_39;
LABEL_31:
            v33 = (_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32));
          }
          else
          {
            if (3 * v32 > 4 * v31)
              goto LABEL_39;
            if ((_DWORD)v32)
              goto LABEL_31;
            v33 = 8;
          }
          WTF::HashTable<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>,WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>>,WTF::HashTraits<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>>,WTF::HashTraits<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>>>::rehash((uint64_t *)(a1 + 56), v33);
          goto LABEL_39;
        }
        if (v19 == v7)
        {
          if (!v7)
            goto LABEL_39;
          if (*((_DWORD *)v7 + 4) != 1)
          {
            --*((_DWORD *)v7 + 4);
            goto LABEL_39;
          }
          v26 = v7;
LABEL_38:
          WebCore::PendingScript::~PendingScript(v26, v6);
          WTF::fastFree(v34, v35);
          goto LABEL_39;
        }
      }
      v15 = i + v17;
    }
  }
  v20 = v43;
  ++*((_DWORD *)v43 + 4);
  v42 = v20;
  v21 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v21 == *(_DWORD *)(a1 + 32))
  {
    v22 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 24), v21 + 1, (unint64_t)&v42);
    v23 = *(unsigned int *)(a1 + 36);
    v24 = *(_QWORD *)(a1 + 24);
    v25 = *(_QWORD *)v22;
    *(_QWORD *)v22 = 0;
    *(_QWORD *)(v24 + 8 * v23) = v25;
    v26 = v42;
    *(_DWORD *)(a1 + 36) = v23 + 1;
    v42 = 0;
    if (v26)
    {
      if (*((_DWORD *)v26 + 4) == 1)
        goto LABEL_38;
      --*((_DWORD *)v26 + 4);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v21) = v20;
    *(_DWORD *)(a1 + 36) = v21 + 1;
  }
LABEL_39:
  v36 = v43;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v38 = *((_QWORD *)v36 + 6);
  *((_QWORD *)v36 + 6) = a1;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
  result = *((_QWORD *)v36 + 5);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    if ((_DWORD)result)
      result = WebCore::PendingScript::notifyClientFinished(v36, v37);
  }
  if (*((_DWORD *)v36 + 4) == 1)
  {
    WebCore::PendingScript::~PendingScript(v36, v37);
    return WTF::fastFree(v40, v41);
  }
  else
  {
    --*((_DWORD *)v36 + 4);
  }
  return result;
}

uint64_t WebCore::PendingScript::create@<X0>(WebCore::PendingScript *this@<X0>, WebCore::ScriptElement *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v7 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v7 + 16) = 1;
  *(_QWORD *)v7 = off_1E33A6698;
  *(_QWORD *)(v7 + 8) = 0;
  *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 24) += 2;
  *(_QWORD *)(v7 + 24) = this;
  *(_QWORD *)(v7 + 32) = 0;
  ++*((_DWORD *)a2 + 2);
  *(_QWORD *)(v7 + 40) = a2;
  *(_QWORD *)(v7 + 48) = 0;
  *a3 = v7;
  v11 = 0;
  WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::add<int>((uint64_t)a2 + 56, (_QWORD *)v7, &v11, (uint64_t)&v9);
  ++*(_DWORD *)(v10 + 8);
  result = (*(uint64_t (**)(WebCore::ScriptElement *))(*(_QWORD *)a2 + 32))(a2);
  if ((_DWORD)result)
  {
    ++*((_DWORD *)a2 + 2);
    result = (*(uint64_t (**)(uint64_t, WebCore::ScriptElement *))(*(_QWORD *)v7 + 16))(v7, a2);
    if (*((_DWORD *)a2 + 2) == 1)
      return (*(uint64_t (**)(WebCore::ScriptElement *))(*(_QWORD *)a2 + 8))(a2);
    else
      --*((_DWORD *)a2 + 2);
  }
  return result;
}

BOOL WebCore::LoadableNonModuleScriptBase::isLoaded(WebCore::LoadableNonModuleScriptBase *this)
{
  return (*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8) + 557) & 0x400) == 0;
}

uint64_t WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::add<int>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int i;
  unsigned int v27;
  uint64_t *v28;
  uint64_t result;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned int v46;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  if (v8 > v9)
    WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::removeNullReferences(a1, a2);
  v10 = a2[1];
  if (v10
    || (v10 = WTF::fastCompactMalloc((WTF *)0x10),
        *(_DWORD *)v10 = 1,
        *(_QWORD *)(v10 + 8) = a2,
        v11 = (unsigned int *)a2[1],
        a2[1] = v10,
        !v11))
  {
    do
      v42 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v42 + 1, (unsigned int *)v10));
    do
      v43 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v43 + 1, (unsigned int *)v10));
  }
  else
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
    v10 = a2[1];
    do
      v14 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v14 + 1, (unsigned int *)v10));
    do
      v15 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v15 + 1, (unsigned int *)v10));
    if (!v10)
      goto LABEL_15;
  }
  do
  {
    v16 = __ldaxr((unsigned int *)v10);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)v10));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)v10);
    WTF::fastFree((WTF *)v10, a2);
  }
LABEL_15:
  v18 = *(_QWORD *)a1;
  if (*(_QWORD *)a1
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)a1, 8u, 0), (v18 = *(_QWORD *)a1) != 0))
  {
    v19 = 0;
    v20 = *(_DWORD *)(v18 - 8);
  }
  else
  {
    v20 = 0;
    v19 = 1;
  }
  v21 = 0;
  v22 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
  v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
  v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
  v25 = (v24 >> 31) ^ v24;
  for (i = 1; ; ++i)
  {
    v27 = v25 & v20;
    v28 = (uint64_t *)(v18 + 16 * v27);
    result = *v28;
    if (!*v28)
    {
      if (v21)
      {
        *(_QWORD *)v21 = 0;
        *(_QWORD *)(v21 + 8) = 0;
        --*(_DWORD *)(*(_QWORD *)a1 - 16);
        *(_QWORD *)v21 = v10;
      }
      else
      {
        *v28 = v10;
        v21 = v18 + 16 * v27;
      }
      *(_DWORD *)(v21 + 8) = *a3;
      v30 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v31 = *(_DWORD *)(v30 - 12) + 1;
      else
        v31 = 1;
      *(_DWORD *)(v30 - 12) = v31;
      v32 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v33 = *(_DWORD *)(v32 - 12);
      else
        v33 = 0;
      v34 = (*(_DWORD *)(v32 - 16) + v33);
      v35 = *(unsigned int *)(v32 - 4);
      if (v35 > 0x400)
      {
        if (v35 > 2 * v34)
          goto LABEL_28;
      }
      else if (3 * v35 > 4 * v34)
      {
LABEL_28:
        v36 = v32 + 16 * v35;
        v37 = 1;
        v28 = (uint64_t *)v21;
        goto LABEL_29;
      }
      result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand((uint64_t *)a1, (unsigned int **)v21);
      v21 = result;
      v32 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v35 = *(unsigned int *)(v32 - 4);
      else
        v35 = 0;
      goto LABEL_28;
    }
    if (result == -1)
    {
      v21 = v18 + 16 * v27;
      goto LABEL_48;
    }
    if (result == v10)
      break;
LABEL_48:
    v25 = i + v27;
  }
  if ((v19 & 1) != 0)
    v45 = 0;
  else
    v45 = *(unsigned int *)(v18 - 4);
  v36 = v18 + 16 * v45;
  if (v10)
  {
    do
      v46 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v46 - 1, (unsigned int *)v10));
    if (v46 == 1)
    {
      atomic_store(1u, (unsigned int *)v10);
      result = WTF::fastFree((WTF *)v10, (void *)v21);
    }
  }
  v37 = 0;
LABEL_29:
  v38 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v39 = *(unsigned int *)(v38 - 4);
    v40 = v38 + 16 * v39;
  }
  else
  {
    v40 = 0;
    v39 = 0;
  }
  if (v28 == (uint64_t *)v40 || *(_QWORD *)(*v28 + 8))
  {
    v41 = (uint64_t)v28;
  }
  else
  {
    do
    {
      v44 = v28 + 2;
      v28 = (uint64_t *)v36;
      if (v44 != (uint64_t *)v36)
      {
        v28 = v44;
        while ((unint64_t)(*v28 + 1) <= 1)
        {
          v28 += 2;
          if (v28 == (uint64_t *)v36)
          {
            v28 = (uint64_t *)v36;
            break;
          }
        }
      }
      v41 = v40;
      if (v28 == (uint64_t *)v40)
        break;
      v41 = (uint64_t)v28;
    }
    while (!*(_QWORD *)(*v28 + 8));
  }
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v41;
  *(_QWORD *)(a4 + 16) = v36;
  *(_QWORD *)(a4 + 24) = v40;
  *(_QWORD *)(a4 + 32) = v38 + 16 * v39;
  *(_DWORD *)(a4 + 40) = 0;
  *(_BYTE *)(a4 + 48) = v37;
  return result;
}

void WebCore::ScriptElement::executePendingScript(WebCore::ScriptElement *this, WebCore::PendingScript *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v8;
  unsigned int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  __int128 v19;
  _DWORD *v20;
  void *v21;
  WTF::StringImpl *v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  _DWORD *v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  WebCore::ScriptController *v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  __int128 v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  WTF::RunLoop *v51;
  char v52;
  WTF::StringImpl *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  WTF::RunLoop *v59;
  char v60;
  WTF::StringImpl *v61;
  int v62;
  WebCore::LoadableNonModuleScriptBase *v63;
  _DWORD *v64;
  _DWORD *v65;
  int32x2_t v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  __int128 v70;
  __int128 v71;
  WTF::StringImpl *v72;
  _DWORD *v73;
  WTF::StringImpl *v74;
  char v75;
  unsigned int *v76;
  char v77;

  v3 = (_QWORD *)*((_QWORD *)a2 + 5);
  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
  *(_DWORD *)(v5 + 24) += 2;
  v68 = v5;
  if (*(_QWORD *)(v5 + 424) != *((_QWORD *)this + 7)
    || *(_QWORD *)(v5 + 416) != *((_QWORD *)this + 6)
    || *(_QWORD *)(v5 + 432) != *((_QWORD *)this + 8))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::Document::addConsoleMessage((_QWORD *)v5, 8, 2, &v72, 0);
    v36 = v72;
    v72 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v35);
      else
        *(_DWORD *)v36 -= 2;
    }
    if (v3 && (*(unsigned int (**)(_QWORD *))(*v3 + 24))(v3) == 2)
    {
      v37 = v3[12];
      if (v37)
        v38 = *(_QWORD *)(v37 + 8);
      else
        v38 = 0;
      WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=(&v68, v38);
      v5 = v68;
    }
    goto LABEL_23;
  }
  if (v3)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD *))(*v3 + 48))(&v72, v3);
    if (!v77)
    {
      if (((*(uint64_t (**)(_QWORD *))(*v3 + 56))(v3) & 1) != 0)
        goto LABEL_14;
      (*(void (**)(_QWORD *, WebCore::ScriptElement *))(*v3 + 64))(v3, this);
      goto LABEL_13;
    }
    if (v72 < 5u)
    {
      LOBYTE(v69) = 0;
      BYTE8(v70) = 0;
      if (v75)
      {
        v39 = (unsigned __int16)v73;
        LOWORD(v69) = (_WORD)v73;
        v40 = v74;
        if (v74)
          *(_DWORD *)v74 += 2;
        *(_QWORD *)&v70 = v40;
        BYTE8(v70) = 1;
        WebCore::Document::addConsoleMessage(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 40) + 8), v39, v39 >> 8, (WTF::StringImpl **)&v70, 0);
      }
      WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v69, v8);
      (*(void (**)(WebCore::ScriptElement *))(*(_QWORD *)this + 56))(this);
      goto LABEL_14;
    }
    if (v72 != 5)
    {
      if (v72 != 6)
      {
LABEL_15:
        if (v76)
        {
          v9 = v76 - 4;
          v10 = *(_QWORD *)(((unint64_t)(v76 - 4) & 0xFFFFFFFFFFFFF000) + 0x10);
          v11 = (_QWORD *)*((_QWORD *)v76 - 1);
          if (v11)
          {
            v12 = *(_QWORD *)v9;
            *v11 = *(_QWORD *)v9;
            *(_QWORD *)(v12 + 8) = v11;
            *(_QWORD *)v9 = 0;
            *((_QWORD *)v9 + 1) = 0;
          }
          *(_QWORD *)v9 = *(_QWORD *)(v10 + 40);
          *(_QWORD *)(v10 + 40) = v9;
          v76 = 0;
        }
        if (v75)
        {
          v13 = v74;
          v74 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v8);
            else
              *(_DWORD *)v13 -= 2;
          }
        }
        goto LABEL_23;
      }
      v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 40) + 8) + 528);
      if (!v47 || (v48 = *(_QWORD *)(v47 + 8)) == 0)
      {
LABEL_14:
        if (!v77)
          goto LABEL_23;
        goto LABEL_15;
      }
      v49 = (unsigned int *)(v48 + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 + 1, v49));
      v51 = *(WTF::RunLoop **)(v48 + 304);
      ++*((_DWORD *)v51 + 2);
      if (v77)
      {
        WebCore::LoadableScriptError::LoadableScriptError((uint64_t)&v69, (const WebCore::LoadableScriptError *)&v72);
        v52 = (*(unsigned int (**)(_QWORD *))(*v3 + 24))(v3) == 1;
        WebCore::ScriptController::reportExceptionFromScriptError(v51, (uint64_t)&v69, v52);
        WebCore::LoadableScriptError::~LoadableScriptError((WebCore::LoadableScriptError *)&v69, v53);
        v54 = *((_DWORD *)v51 + 2);
        if (!v54)
        {
          __break(0xC471u);
          JUMPOUT(0x19430D6DCLL);
        }
        *((_DWORD *)v51 + 2) = v54 - 1;
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v49);
        goto LABEL_14;
      }
LABEL_109:
      v63 = (WebCore::LoadableNonModuleScriptBase *)std::__throw_bad_optional_access[abi:sn180100]();
      WebCore::LoadableNonModuleScriptBase::wasCanceled(v63);
      return;
    }
    v55 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 40) + 8) + 528);
    if (v55)
    {
      v56 = *(_QWORD *)(v55 + 8);
      if (v56)
      {
        v57 = (unsigned int *)(v56 + 8);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 + 1, v57));
        v59 = *(WTF::RunLoop **)(v56 + 304);
        ++*((_DWORD *)v59 + 2);
        if (!v77)
          goto LABEL_109;
        WebCore::LoadableScriptError::LoadableScriptError((uint64_t)&v69, (const WebCore::LoadableScriptError *)&v72);
        v60 = (*(unsigned int (**)(_QWORD *))(*v3 + 24))(v3) == 1;
        WebCore::ScriptController::reportExceptionFromScriptError(v59, (uint64_t)&v69, v60);
        WebCore::LoadableScriptError::~LoadableScriptError((WebCore::LoadableScriptError *)&v69, v61);
        v62 = *((_DWORD *)v59 + 2);
        if (!v62)
        {
          __break(0xC471u);
          JUMPOUT(0x19430D6FCLL);
        }
        *((_DWORD *)v59 + 2) = v62 - 1;
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v57);
      }
    }
LABEL_13:
    WebCore::ScriptElement::dispatchLoadEventRespectingUserGestureIndicator(this);
    goto LABEL_14;
  }
  if ((*(_WORD *)((_BYTE *)this + 21) & 0x1800) != 0)
  {
    WebCore::ScriptElement::scriptContent(this, a2, &v67);
    v41 = *((unsigned __int8 *)this + 20);
    v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 40) + 8);
    v43 = *(WTF::StringImpl **)(v42 + 736);
    if (v43)
      *(_DWORD *)v43 += 2;
    v69 = v43;
    v44 = v42 + 736;
    v45 = *(_OWORD *)(v44 + 24);
    v70 = *(_OWORD *)(v44 + 8);
    v71 = v45;
    v66 = *(int32x2_t *)((char *)a2 + 32);
    WebCore::ScriptSourceCode::ScriptSourceCode((int32x2_t *)&v72, (_DWORD **)&v67, v41, &v69, &v66);
    WebCore::ScriptElement::registerImportMap(this, (const WebCore::ScriptSourceCode *)&v72);
    WebCore::ScriptSourceCode::~ScriptSourceCode((unsigned int **)&v72, v46);
  }
  else
  {
    *(_DWORD *)(v4 + 24) += 2;
    WebCore::TextNodeTraversal::childTextContent((WebCore::TextNodeTraversal *)v4, a2, &v67);
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
    v15 = *((unsigned __int8 *)this + 20);
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 40) + 8);
    v17 = *(WTF::StringImpl **)(v16 + 736);
    if (v17)
      *(_DWORD *)v17 += 2;
    v69 = v17;
    v18 = v16 + 736;
    v19 = *(_OWORD *)(v18 + 24);
    v70 = *(_OWORD *)(v18 + 8);
    v71 = v19;
    v66 = *(int32x2_t *)((char *)a2 + 32);
    WebCore::InlineClassicScript::create(this, &v64);
    v20 = v64;
    v64 = 0;
    v65 = v20;
    WebCore::ScriptSourceCode::ScriptSourceCode((int32x2_t *)&v72, (_DWORD **)&v67, v15, &v69, &v66, 0, &v65);
    WebCore::ScriptElement::executeClassicScript((uint64_t)this, (uint64_t)&v72);
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v76, v21);
    v23 = v73;
    v73 = 0;
    if (v23)
    {
      if (v23[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
      else
        --v23[2];
    }
    v24 = v72;
    v72 = 0;
    if (v24)
    {
      if (*((_DWORD *)v24 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v24 + 8))(v24);
      else
        --*((_DWORD *)v24 + 2);
    }
    v25 = v65;
    v65 = 0;
    if (v25)
    {
      if (v25[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
      else
        --v25[2];
    }
    v26 = v64;
    v64 = 0;
    if (v26)
    {
      if (v26[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
      else
        --v26[2];
    }
  }
  v27 = v69;
  v69 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v22);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = v67;
  v67 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v22);
    else
      *(_DWORD *)v28 -= 2;
  }
  WebCore::ScriptElement::dispatchLoadEventRespectingUserGestureIndicator(this);
LABEL_23:
  if ((*(_WORD *)((_BYTE *)this + 21) & 0x1800) != 0x1000)
    goto LABEL_24;
  if (!v5)
    return;
  v29 = *(_QWORD *)(v5 + 528);
  if (v29)
  {
    v30 = *(_QWORD *)(v29 + 8);
    if (v30)
    {
      v31 = (unsigned int *)(v30 + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 + 1, v31));
      v33 = *(WebCore::ScriptController **)(v30 + 304);
      ++*((_DWORD *)v33 + 2);
      WebCore::ScriptController::clearPendingImportMaps(v33);
      v34 = *((_DWORD *)v33 + 2);
      if (!v34)
      {
        __break(0xC471u);
        JUMPOUT(0x19430D6BCLL);
      }
      *((_DWORD *)v33 + 2) = v34 - 1;
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v31);
      v5 = v68;
LABEL_24:
      v68 = 0;
      if (!v5)
        return;
      goto LABEL_25;
    }
  }
  v68 = 0;
LABEL_25:
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
}

BOOL WebCore::LoadableNonModuleScriptBase::wasCanceled(WebCore::LoadableNonModuleScriptBase *this)
{
  uint64_t v1;
  uint64_t *v2;
  char v4;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8) + 400);
  if (v1)
  {
    v2 = (uint64_t *)(v1 + 320);
  }
  else
  {
    std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v4);
    v2 = &WebCore::CachedResource::resourceError(void)const::emptyError;
  }
  return *((_BYTE *)v2 + 60) == 3;
}

void WebCore::LoadableNonModuleScriptBase::takeError(WebCore::LoadableNonModuleScriptBase *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  _BYTE v4[32];
  uint64_t v5;
  char v6;

  if (*((_BYTE *)this + 144))
  {
    v4[0] = 0;
    v6 = 0;
    std::exchange[abi:sn180100]<std::optional<WebCore::LoadableScriptError>,std::optional<WebCore::LoadableScriptError>>((uint64_t **)a2, (uint64_t)this + 104, (uint64_t)v4);
    std::optional<WebCore::LoadableScriptError>::~optional((uint64_t)v4, v2);
  }
  else if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8) + 557) >> 5) - 3 <= 1)
  {
    v4[0] = 0;
    v4[8] = 0;
    v4[24] = 0;
    v5 = 0;
    std::__optional_destruct_base<WebCore::LoadableScriptError,false>::__optional_destruct_base[abi:sn180100]<WebCore::LoadableScriptError>(a2, (uint64_t)v4);
    WebCore::LoadableScriptError::~LoadableScriptError((WebCore::LoadableScriptError *)v4, v3);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 40) = 0;
  }
}

void WebCore::ScriptElement::dispatchLoadEventRespectingUserGestureIndicator(WebCore::ScriptElement *this)
{
  double v2;
  WebCore::UserGestureToken *v3;
  void *v4;
  WTF *v5;
  void *v6;
  WebCore::UserGestureToken *v7;
  _BYTE v8[8];

  WTF::MonotonicTime::now(this);
  if (v2 - *((double *)this + 10) > 1.0)
  {
    (*(void (**)(WebCore::ScriptElement *))(*(_QWORD *)this + 48))(this);
  }
  else
  {
    v3 = (WebCore::UserGestureToken *)*((_QWORD *)this + 11);
    if (v3)
    {
      ++*(_DWORD *)v3;
      v7 = v3;
      WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)v8, (uint64_t *)&v7, 0, 0);
      if (*(_DWORD *)v3 == 1)
      {
        WebCore::UserGestureToken::~UserGestureToken(v3, v4);
        WTF::fastFree(v5, v6);
      }
      else
      {
        --*(_DWORD *)v3;
      }
    }
    else
    {
      v7 = 0;
      WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)v8, (uint64_t *)&v7, 0, 0);
    }
    (*(void (**)(WebCore::ScriptElement *))(*(_QWORD *)this + 48))(this);
    WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)v8);
  }
}

void WebCore::Event::~Event(WebCore::Event *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  _DWORD *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;

  *(_QWORD *)this = off_1E33A4B48;
  v3 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
    }
  }
  v5 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if ((*(_BYTE *)(v6 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
}

void WebCore::UserGestureIndicator::~UserGestureIndicator(WebCore::UserGestureIndicator *this)
{
  void *v2;
  uint64_t v3;
  int v4;
  _DWORD *v5;
  WebCore::UserGestureToken *v6;
  WebCore::UserGestureToken *v7;
  WTF *v8;
  void *v9;
  WTF *v10;
  void *v11;
  WTF *v12;
  void *v13;

  if (!WTF::isMainThread(this))
    goto LABEL_11;
    goto LABEL_17;
  v3 = WebCore::currentToken(void)::token;
  if (WebCore::currentToken(void)::token)
  {
    v4 = (*(_DWORD *)WebCore::currentToken(void)::token)++;
    *(_BYTE *)(v3 + 65) = 0;
    *(_DWORD *)(v3 + 68) = 0;
    *(_BYTE *)(v3 + 80) = 0;
    if (v4)
    {
      *(_DWORD *)v3 = v4;
      goto LABEL_6;
    }
    WebCore::UserGestureToken::~UserGestureToken((WebCore::UserGestureToken *)v3, v2);
    WTF::fastFree(v10, v11);
      goto LABEL_6;
LABEL_17:
    WebCore::currentToken(void)::token = 0;
  }
LABEL_6:
  v5 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    ++*v5;
  v6 = (WebCore::UserGestureToken *)WebCore::currentToken(void)::token;
  WebCore::currentToken(void)::token = (uint64_t)v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v6, v2);
      WTF::fastFree(v12, v13);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
LABEL_11:
  v7 = *(WebCore::UserGestureToken **)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v7, v2);
      WTF::fastFree(v8, v9);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
}

uint64_t `non-virtual thunk to'WebCore::HTMLScriptElement::dispatchLoadEvent(WebCore::HTMLScriptElement *this)
{
  return WebCore::HTMLScriptElement::dispatchLoadEvent((WebCore::HTMLScriptElement *)((char *)this - 112));
}

void WebCore::PendingScript::~PendingScript(WebCore::PendingScript *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  _OWORD v14[3];
  _OWORD v15[3];

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    ++*(_DWORD *)(v3 + 8);
    WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::find(v3 + 56, (uint64_t)this, (uint64_t)v14);
    v4 = *(_QWORD *)(v3 + 56);
    if (v4)
      v5 = v4 + 16 * *(unsigned int *)(v4 - 4);
    else
      v5 = 0;
    if (*((_QWORD *)&v14[0] + 1) != v5)
    {
      if (*(_DWORD *)(*((_QWORD *)&v14[0] + 1) + 8) == 1)
      {
        v15[0] = v14[0];
        v15[1] = v14[1];
        v15[2] = v14[2];
        WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::remove(v3 + 56, v15);
      }
      else
      {
        --*(_DWORD *)(*((_QWORD *)&v14[0] + 1) + 8);
      }
    }
    if (*(_DWORD *)(v3 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    else
      --*(_DWORD *)(v3 + 8);
  }
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  v7 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8);
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  v10 = *((_QWORD *)this + 1);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::PendingScript::~PendingScript(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::remove(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int v15;
  unsigned int v16;

  v3 = a2[1];
  if (*(_QWORD *)a1)
  {
    v4 = *(_QWORD *)a1 + 16 * *(unsigned int *)(*(_QWORD *)a1 - 4);
    if (v4 == v3)
    {
      v3 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_14;
    v4 = 0;
  }
  if (v4 != v3)
  {
    v5 = *(unsigned int **)v3;
    *(_QWORD *)v3 = 0;
    if (v5)
    {
      do
      {
        v15 = __ldaxr(v5);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v5));
      if (!v16)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
    *(_QWORD *)v3 = -1;
    ++*(_DWORD *)(*(_QWORD *)a1 - 16);
    v6 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v7 = *(_DWORD *)(v6 - 12) - 1;
    else
      v7 = -1;
    *(_DWORD *)(v6 - 12) = v7;
    v8 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v9 = 6 * *(_DWORD *)(v8 - 12);
      v10 = *(_DWORD *)(v8 - 4);
      if (v9 < v10 && v10 >= 9)
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)a1, v10 >> 1, 0);
    }
  }
  v3 = 1;
LABEL_14:
  v12 = *(_DWORD *)(a1 + 8);
  v13 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v12 + 1;
  if (v12 > v13)
    WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::removeNullReferences(a1, a2);
  return v3;
}

uint64_t WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::find@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  ++*(_DWORD *)(result + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (!v3 || !*(_QWORD *)(v3 + 8))
    return WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::end(a3, (uint64_t *)result);
  v4 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    for (i = 1; ; ++i)
    {
      v11 = *(_QWORD *)(v4 + 16 * v9);
      if (!v11)
        break;
      if (v11 != -1 && v11 == v3)
      {
        v13 = v4 + 16 * v9;
        v14 = *(unsigned int *)(v4 - 4);
        v15 = v4 + 16 * v14;
        goto LABEL_12;
      }
      v9 = (v9 + i) & v5;
    }
    v14 = *(unsigned int *)(v4 - 4);
    v13 = v4 + 16 * v14;
    v15 = v13;
LABEL_12:
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = v13;
    v16 = (uint64_t *)(a3 + 8);
    *(_QWORD *)(a3 + 16) = v15;
    v17 = v4 + 16 * v14;
  }
  else
  {
    v13 = 0;
    v15 = 0;
    v17 = 0;
    v14 = 0;
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = 0;
    v16 = (uint64_t *)(a3 + 8);
    *(_QWORD *)(a3 + 16) = 0;
  }
  *(_QWORD *)(a3 + 24) = v17;
  *(_QWORD *)(a3 + 32) = v4 + 16 * v14;
  *(_DWORD *)(a3 + 40) = 0;
LABEL_14:
  while (v13 != v17 && !*(_QWORD *)(*(_QWORD *)v13 + 8))
  {
    v18 = v13 + 16;
    *v16 = v13 + 16;
    v13 = v15;
    if (v18 != v15)
    {
      v13 = v18;
      while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
      {
        v13 += 16;
        *v16 = v13;
        if (v13 == v15)
        {
          v13 = v15;
          goto LABEL_14;
        }
      }
    }
  }
  return result;
}

BOOL WebCore::Document::shouldDeferAsynchronousScriptsUntilParsingFinishes(WebCore::Document *this)
{
  WebCore::Quirks *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  unsigned int v10;
  WebCore::Quirks *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;

  if ((*(_QWORD *)(*((_QWORD *)this + 85) + 696) & 0x8000) == 0)
    return 0;
  v2 = (WebCore::Quirks *)*((_QWORD *)this + 86);
  if (!v2)
  {
    v14 = WTF::fastMalloc((WTF *)0x60);
    v7 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    v9 = v7;
    if (v7)
    {
      do
        v10 = __ldaxr(v7);
      while (__stlxr(v10 + 1, v7));
    }
    v2 = (WebCore::Quirks *)v14;
    *(_QWORD *)v14 = v9;
    *(_QWORD *)(v14 + 80) = 0;
    *(_QWORD *)(v14 + 88) = 0;
    *(_OWORD *)(v14 + 8) = 0u;
    *(_OWORD *)(v14 + 24) = 0u;
    *(_OWORD *)(v14 + 40) = 0u;
    *(_OWORD *)(v14 + 56) = 0u;
    *(_QWORD *)(v14 + 71) = 0;
    v11 = (WebCore::Quirks *)*((_QWORD *)this + 86);
    *((_QWORD *)this + 86) = v14;
    if (v11)
    {
      WebCore::Quirks::~Quirks(v11, v8);
      WTF::fastFree(v12, v13);
      v2 = (WebCore::Quirks *)*((_QWORD *)this + 86);
    }
  }
  if (WebCore::Quirks::shouldBypassAsyncScriptDeferring(v2) || !*((_BYTE *)this + 3389))
    return 0;
  v3 = *((_QWORD *)this + 66);
  return !v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0 || (v5 = *(_QWORD *)(v4 + 288)) == 0 || *(double *)(v5 + 1008) == 0.0;
}

BOOL WebCore::Quirks::shouldBypassAsyncScriptDeferring(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  WTF::StringImpl *v10;
  __int16 v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  if (!*((_BYTE *)this + 30))
  {
    if (*(_BYTE *)(v1 + 3362) || *(_BYTE *)(v1 + 3405))
      goto LABEL_29;
    v5 = *(_QWORD *)(v1 + 528);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8);
        if (v7 && *(_BYTE *)(v7 + 144) == 0)
        {
          v9 = *(_QWORD *)(v7 + 296);
          if (v9)
            v1 = v9;
        }
      }
    }
    while (1)
    {
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v17, (const WTF::URL *)(v1 + 736));
      v11 = (MEMORY[0x19AEA53F4](v17, "bungalow.com", 12) & 1) != 0 ? 1 : MEMORY[0x19AEA53F4](v17, "sfusd.edu", 9);
      *(_WORD *)((char *)this + 29) = v11 | 0x100;
      v12 = v17;
      v17 = 0;
      if (!v12)
        break;
      if (*(_DWORD *)v12 != 2)
      {
        *(_DWORD *)v12 -= 2;
        return *((_BYTE *)this + 29) != 0;
      }
      WTF::StringImpl::destroy(v12, v10);
      if (*((_BYTE *)this + 30))
        return *((_BYTE *)this + 29) != 0;
      __break(1u);
      do
      {
        v1 = *(_QWORD *)(*(_QWORD *)(v13 + 40) + 8);
LABEL_29:
        v14 = *(_QWORD *)(v1 + 528);
        if (!v14)
          break;
        v15 = *(_QWORD *)(v14 + 8);
        if (!v15)
          break;
        v16 = *(_QWORD *)(v15 + 120);
        if (!v16)
          break;
        v13 = *(_QWORD *)(v16 + 8);
      }
      while (v13);
    }
  }
  return *((_BYTE *)this + 29) != 0;
}

void WebCore::CachedResourceLoader::clearPreloads(uint64_t a1, void *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  WTF *v8;
  WebCore::MemoryCache *v9;
  WTF *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WebCore::MemoryCache *v15;
  char v16[24];

  v2 = *(_QWORD *)(a1 + 96);
  if (!v2)
    return;
  v4 = *(_QWORD **)(v2 + 8);
  if (!v4)
  {
    *(_QWORD *)(a1 + 96) = 0;
LABEL_17:
    v8 = *(WTF **)(v2 + 8);
    while (v8)
    {
      v10 = v8;
      v8 = (WTF *)*((_QWORD *)v8 + 2);
      v11 = *(unsigned int **)v10;
      *(_QWORD *)v10 = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, a2);
        }
      }
      WTF::fastFree(v10, a2);
    }
    if (*(_QWORD *)v2)
      WTF::fastFree((WTF *)(*(_QWORD *)v2 - 16), a2);
    WTF::fastFree((WTF *)v2, a2);
    return;
  }
  while (1)
  {
    v5 = *(_QWORD *)(*v4 + 8);
    if (v5)
      break;
    v4 = (_QWORD *)v4[2];
    if (!v4)
    {
      v6 = 0;
      goto LABEL_24;
    }
  }
  if ((_DWORD)a2)
  {
    while (1)
    {
      --*(_DWORD *)(v5 + 552);
      v14 = WebCore::CachedResource::deleteIfPossible((WebCore::CachedResource *)v5, a2);
      if ((v14 & 1) == 0 && (*(_BYTE *)(v5 + 556) & 0x60) == 0)
      {
        v15 = (WebCore::MemoryCache *)WebCore::MemoryCache::singleton((WebCore::MemoryCache *)v14);
        WebCore::MemoryCache::remove(v15, (WebCore::CachedResource *)v5);
      }
      v4 = (_QWORD *)v4[2];
      if (!v4)
        break;
      while (1)
      {
        v5 = *(_QWORD *)(*v4 + 8);
        if (v5)
          break;
        v6 = 0;
        v4 = (_QWORD *)v4[2];
        if (!v4)
          goto LABEL_23;
      }
      ++*(_DWORD *)(v2 + 24);
    }
    v6 = 0;
  }
  else
  {
    v6 = 0;
LABEL_6:
    if ((*(_WORD *)(v5 + 557) & 0x800) != 0)
    {
      if (!v6)
      {
        v6 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
        *v6 = 0u;
        v6[1] = 0u;
      }
      WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::CachedResource>((uint64_t)v6, v5, (uint64_t)v16);
    }
    else
    {
      --*(_DWORD *)(v5 + 552);
      v7 = WebCore::CachedResource::deleteIfPossible((WebCore::CachedResource *)v5, a2);
      if ((v7 & 1) == 0 && (*(_BYTE *)(v5 + 556) & 0x60) == 0)
      {
        v9 = (WebCore::MemoryCache *)WebCore::MemoryCache::singleton((WebCore::MemoryCache *)v7);
        WebCore::MemoryCache::remove(v9, (WebCore::CachedResource *)v5);
      }
    }
    while (1)
    {
      v4 = (_QWORD *)v4[2];
      if (!v4)
        break;
      v5 = *(_QWORD *)(*v4 + 8);
      if (v5)
      {
        ++*(_DWORD *)(v2 + 24);
        goto LABEL_6;
      }
    }
  }
LABEL_23:
  ++*(_DWORD *)(v2 + 24);
  v2 = *(_QWORD *)(a1 + 96);
LABEL_24:
  *(_QWORD *)(a1 + 96) = v6;
  if (v2)
    goto LABEL_17;
}

uint64_t `non-virtual thunk to'WebCore::MessagePort::derefEventTarget(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  WebCore::MessagePort *v6;
  BOOL v7;
  int v8;
  bmalloc::api *v9;
  void *v10;
  uint64_t v11;

  v2 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v2);
LABEL_5:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = v4 - 1;
  *(_QWORD *)(v2 + 8) = v4 - 1;
  if (v4 == 1)
  {
    v11 = *(_QWORD *)(v2 + 16);
    v6 = *(WebCore::MessagePort **)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = v11 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
  {
    WebCore::MessagePort::~MessagePort(v6, a2);
    this = bmalloc::api::isoDeallocate(v9, v10);
  }
  if (!v7)
    return WTF::fastFree((WTF *)v2, a2);
  return this;
}

double WebCore::Document::monotonicTimestamp(WebCore::Document *this)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  double v5;

  v1 = *((_QWORD *)this + 66);
  v2 = 0.0;
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v3 + 280) + 88);
      if (v4)
      {
        if (*(WebCore::Document **)(v3 + 296) == this)
        {
          ++*(_DWORD *)(v4 + 24);
          WTF::MonotonicTime::now(this);
          v2 = v5 - *(double *)(v4 + 2728);
          if (*(_DWORD *)(v4 + 24) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
          else
            --*(_DWORD *)(v4 + 24);
        }
      }
    }
  }
  return v2;
}

void WebCore::XMLHttpRequest::~XMLHttpRequest(WebCore::XMLHttpRequest *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WebCore::UserGestureToken *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  void *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WebCore::TextResourceDecoder *v17;
  const void *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  WebCore::FormData *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  void *v27;
  WebCore::EventTarget *v28;
  bmalloc::api *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  WTF *v35;
  void *v36;
  void *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  WTF *v54;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  char v64;

  v3 = (WTF *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v3)
  {
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(*(_QWORD *)v3 + 8) = 0;
      v44 = *(unsigned int **)v3;
      *(_QWORD *)v3 = 0;
      if (v44)
      {
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          atomic_store(1u, v44);
          v47 = v3;
          WTF::fastFree((WTF *)v44, a2);
          v3 = v47;
        }
      }
    }
    else
    {
      *(_QWORD *)v3 = 0;
    }
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 90);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v41 = (unsigned int *)*((_QWORD *)this + 90);
    *((_QWORD *)this + 90) = 0;
    if (v41)
    {
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
      {
        atomic_store(1u, v41);
        WTF::fastFree((WTF *)v41, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 90) = 0;
  }
  v5 = (WebCore::UserGestureToken *)*((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v5, a2);
      WTF::fastFree(v33, v34);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  *((_QWORD *)this + 79) = off_1E31F7378;
  v6 = *((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WebCore::TimerBase::~TimerBase((WebCore::XMLHttpRequest *)((char *)this + 632));
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  *((_QWORD *)this + 71) = &off_1E3483D08;
  WebCore::EventLoopTimerHandle::~EventLoopTimerHandle((WebCore::XMLHttpRequest *)((char *)this + 608), v7);
  v10 = *((_QWORD *)this + 72);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v38 = (unsigned int *)*((_QWORD *)this + 72);
    *((_QWORD *)this + 72) = 0;
    if (v38)
    {
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        atomic_store(1u, v38);
        WTF::fastFree((WTF *)v38, v9);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 72) = 0;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v48 = *(unsigned int *)(v13 + 20);
      if ((_DWORD)v48)
      {
        v49 = *(_QWORD *)(v13 + 8);
        v50 = v49 + 16 * v48;
        do
        {
          v51 = *(unsigned int **)(v49 + 8);
          *(_QWORD *)(v49 + 8) = 0;
          if (v51)
          {
            do
            {
              v52 = __ldaxr(v51);
              v53 = v52 - 1;
            }
            while (__stlxr(v53, v51));
            if (!v53)
            {
              v61 = v13;
              v62 = v50;
              atomic_store(1u, v51);
              v63 = (WTF *)v51;
              v60 = v51[6];
              if ((_DWORD)v60 != -1)
                ((void (*)(char *, unsigned int *))off_1E3483DB0[v60])(&v64, v51 + 2);
              *((_DWORD *)v63 + 6) = -1;
              WTF::fastFree(v63, v9);
              v13 = v61;
              v50 = v62;
            }
          }
          v49 += 16;
        }
        while (v49 != v50);
      }
      v54 = *(WTF **)(v13 + 8);
      if ((WTF *)(v13 + 24) != v54 && v54 != 0)
      {
        *(_QWORD *)(v13 + 8) = 0;
        *(_DWORD *)(v13 + 16) = 0;
        v59 = v13;
        WTF::fastFree(v54, v9);
        v13 = v59;
      }
      WTF::fastFree((WTF *)v13, v9);
    }
  }
  v16 = *((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v16)
  {
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v16, v9);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
  }
  v17 = (WebCore::TextResourceDecoder *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
    {
      WebCore::TextResourceDecoder::~TextResourceDecoder(v17, v9);
      WTF::fastFree(v35, v36);
    }
    else
    {
      --*(_DWORD *)v17;
    }
  }
  v18 = (const void *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v18)
    CFRelease(v18);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::XMLHttpRequest *)((char *)this + 256), (WTF::StringImpl *)v9);
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (*((_BYTE *)this + 240))
  {
    v21 = *((_QWORD *)this + 29);
    *((_QWORD *)this + 29) = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
    v22 = (_DWORD *)*((_QWORD *)this + 28);
    *((_QWORD *)this + 28) = 0;
    if (v22)
    {
      if (v22[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 16))(v22);
      else
        --v22[6];
    }
  }
  v23 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v19);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = (WebCore::FormData *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
    {
      WebCore::FormData::~FormData(v24);
      WebCore::FormData::operator delete(v37);
    }
    else
    {
      --*(_DWORD *)v24;
    }
  }
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::XMLHttpRequest *)((char *)this + 176), v19);
  v26 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
  WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::XMLHttpRequest *)((char *)this + 96));
  v28 = (WebCore::EventTarget *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v28)
  {
    WebCore::EventTarget::~EventTarget(v28, v27);
    bmalloc::api::isoDeallocate(v29, v30);
  }
  WebCore::EventTarget::~EventTarget((WebCore::XMLHttpRequest *)((char *)this + 56), v27);
  v32 = *((_QWORD *)this + 5);
  if (v32)
  {
    *(_QWORD *)(v32 + 8) = 0;
    v56 = (unsigned int *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v56)
    {
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (!v58)
      {
        atomic_store(1u, v56);
        WTF::fastFree((WTF *)v56, v31);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v31);
}

{
  unsigned int *v2;
  void *v3;

  WebCore::XMLHttpRequest::~XMLHttpRequest(this, a2);
  if (atomic_load(v2 + 12))
    bzero(v2, 0x2E8uLL);
  else
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
}

void WebCore::UserGestureToken::~UserGestureToken(WebCore::UserGestureToken *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 3);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      (*(void (**)(uint64_t, WebCore::UserGestureToken *))(*(_QWORD *)v6 + 16))(v6, this);
      v5 -= 8;
    }
    while (v5);
  }
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 6, a2);
  v8 = *((unsigned int *)this + 9);
  if ((_DWORD)v8)
  {
    v9 = (uint64_t *)*((_QWORD *)this + 3);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v12 = (WTF *)*((_QWORD *)this + 3);
  if (v12)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v12, v7);
  }
  v13 = *((_QWORD *)this + 1);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 0;
    v14 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v7);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

void WebCore::MessagePort::~MessagePort(WebCore::MessagePort *this, void *a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  WebCore::MessagePort *v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  bmalloc::api *v67;
  void *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  WTF *v72;
  int v73;
  int v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;
  __int128 v80;
  WebCore::MessagePort *v81;

  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_172))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](&_MergedGlobals_172);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)&_MergedGlobals_172))
    goto LABEL_3;
LABEL_4:
  if ((byte_1ECE831E9 & 1) == 0)
  {
    qword_1ECE831F0 = 0;
    byte_1ECE831E9 = 1;
    v5 = (__int128 *)((char *)this + 64);
    goto LABEL_57;
  }
  v4 = qword_1ECE831F0;
  v5 = (__int128 *)((char *)this + 64);
  if (!qword_1ECE831F0)
    goto LABEL_57;
  v6 = WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>(*((_QWORD *)this + 8), *((_QWORD *)this + 9));
  v7 = *(unsigned int *)(v4 - 4);
  v8 = v6 ? v6 : (uint64_t *)(v4 + 32 * v7);
  if ((uint64_t *)(v4 + 32 * v7) == v8)
    goto LABEL_57;
  a2 = (void *)v8[2];
  if (a2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::MessagePort>((uint64_t)&v80, (uint64_t)a2, v8[3]);
    v38 = v80;
    if ((_QWORD)v80)
    {
      *(_QWORD *)&v80 = 0;
      goto LABEL_49;
    }
    if ((byte_1ECE831E9 & 1) == 0)
    {
      v9 = 0;
      qword_1ECE831F0 = 0;
      byte_1ECE831E9 = 1;
      goto LABEL_13;
    }
    v4 = qword_1ECE831F0;
    if (!qword_1ECE831F0)
    {
      v9 = 0;
      goto LABEL_13;
    }
    v7 = *(unsigned int *)(qword_1ECE831F0 - 4);
  }
  else
  {
    *(_QWORD *)&v80 = 0;
  }
  v9 = (uint64_t *)(v4 + 32 * v7);
  if (v9 == v8)
    goto LABEL_29;
LABEL_13:
  if (v9 == v8)
    goto LABEL_29;
  *v8 = -1;
  v10 = v8[2];
  v8[2] = 0;
  if (v10)
  {
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
LABEL_18:
      v12 = *(_QWORD *)(v10 + 16) - 1;
      *(_QWORD *)(v10 + 16) = v12;
      if (!v12)
      {
        v13 = *(_QWORD *)(v10 + 8);
        v14 = __ldxr((unsigned __int8 *)v10);
        if (v14 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v10))
            goto LABEL_21;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_21:
        if (!v13)
          WTF::fastFree((WTF *)v10, a2);
        goto LABEL_23;
      }
      v75 = __ldxr((unsigned __int8 *)v10);
      if (v75 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v10))
          goto LABEL_23;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      goto LABEL_23;
    }
    MEMORY[0x19AEA534C](v10);
    goto LABEL_18;
  }
LABEL_23:
  v15 = qword_1ECE831F0;
  ++*(_DWORD *)(qword_1ECE831F0 - 16);
  if (v15)
    v16 = *(_DWORD *)(v15 - 12) - 1;
  else
    v16 = -1;
  *(_DWORD *)(v15 - 12) = v16;
  if (qword_1ECE831F0)
  {
    v17 = *(_DWORD *)(qword_1ECE831F0 - 4);
    if (6 * *(_DWORD *)(qword_1ECE831F0 - 12) < v17 && v17 >= 9)
      WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::rehash(v17 >> 1, 0);
  }
LABEL_29:
  if ((byte_1ECE831EA & 1) != 0)
  {
    if (qword_1ECE831F8)
    {
      v18 = *((_QWORD *)this + 8);
      v19 = *((_QWORD *)this + 9);
      v20 = *(_DWORD *)(qword_1ECE831F8 - 8);
      v21 = (v18 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v18 - 1640531527) << 16) ^ ((unsigned __int16)v18
                                                                                                 - 1640531527);
      v22 = (v18 >> 37) & 0x7FFF800 ^ ((v21 + WORD2(v18) + (v21 >> 11)) << 16) ^ (v21 + WORD2(v18) + (v21 >> 11));
      v23 = (v19 >> 5) & 0x7FFF800 ^ ((v22 + (unsigned __int16)v19 + (v22 >> 11)) << 16) ^ (v22 + (unsigned __int16)v19 + (v22 >> 11));
      v24 = (v19 >> 37) & 0x7FFF800 ^ ((v23 + WORD2(v19) + (v23 >> 11)) << 16) ^ (v23 + WORD2(v19) + (v23 >> 11));
      v25 = (v24 + (v24 >> 11)) ^ (8 * (v24 + (v24 >> 11)));
      v26 = (v25 + (v25 >> 5)) ^ (4 * (v25 + (v25 >> 5)));
      v27 = (v26 + (v26 >> 15)) ^ ((v26 + (v26 >> 15)) << 10);
      if (!v27)
        v27 = 0x800000;
      v28 = v27 & v20;
      v29 = (uint64_t *)(qword_1ECE831F8 + 48 * (v27 & v20));
      v31 = *v29;
      v30 = v29[1];
      if (*v29 == v18 && v30 == v19)
      {
LABEL_38:
        v33 = *(_DWORD *)(qword_1ECE831F8 - 4);
      }
      else
      {
        v73 = 1;
        while (v31 | v30)
        {
          v28 = (v28 + v73) & v20;
          v29 = (uint64_t *)(qword_1ECE831F8 + 48 * v28);
          v31 = *v29;
          v30 = v29[1];
          ++v73;
          if (*v29 == v18 && v30 == v19)
            goto LABEL_38;
        }
        v33 = *(_DWORD *)(qword_1ECE831F8 - 4);
        v29 = (uint64_t *)(qword_1ECE831F8 + 48 * v33);
      }
      if ((uint64_t *)(qword_1ECE831F8 + 48 * v33) != v29)
      {
        *v29 = -1;
        v34 = qword_1ECE831F8;
        ++*(_DWORD *)(qword_1ECE831F8 - 16);
        v35 = v34 ? *(_DWORD *)(v34 - 12) - 1 : -1;
        *(_DWORD *)(v34 - 12) = v35;
        if (qword_1ECE831F8)
        {
          v36 = *(_DWORD *)(qword_1ECE831F8 - 4);
          if (6 * *(_DWORD *)(qword_1ECE831F8 - 12) < v36 && v36 >= 9)
            WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::rehash(v36 >> 1);
        }
      }
    }
  }
  else
  {
    qword_1ECE831F8 = 0;
    byte_1ECE831EA = 1;
  }
  v38 = v80;
  *(_QWORD *)&v80 = 0;
  if (v38)
  {
LABEL_49:
    v39 = *(_QWORD *)(v38 + 48);
    if (__ldaxr((unsigned __int8 *)v39))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v39))
    {
LABEL_52:
      v41 = *(_QWORD *)(v39 + 8);
      v42 = v41 - 1;
      *(_QWORD *)(v39 + 8) = v41 - 1;
      if (v41 == 1)
      {
        v79 = *(_QWORD *)(v39 + 16);
        v43 = *(WebCore::MessagePort **)(v39 + 24);
        *(_QWORD *)(v39 + 24) = 0;
        v44 = v79 != 0;
      }
      else
      {
        v43 = 0;
        v44 = 1;
      }
      v45 = __ldxr((unsigned __int8 *)v39);
      if (v45 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v39))
          goto LABEL_56;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v39);
LABEL_56:
      if (!v42)
      {
        if (v43)
        {
          WebCore::MessagePort::~MessagePort(v43);
          bmalloc::api::isoDeallocate(v67, v68);
        }
        if (!v44)
          WTF::fastFree((WTF *)v39, a2);
      }
      goto LABEL_57;
    }
    MEMORY[0x19AEA534C](v39);
    goto LABEL_52;
  }
LABEL_57:
  if (*((_BYTE *)this + 58) && !*((_BYTE *)this + 57))
  {
    *((_BYTE *)this + 57) = 1;
    v80 = *v5;
    v46 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v46 = off_1E33A5990;
    *(_OWORD *)(v46 + 8) = v80;
    v81 = (WebCore::MessagePort *)v46;
    WTF::ensureOnMainThread();
    v48 = (uint64_t)v81;
    v81 = 0;
    if (v48)
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
    WebCore::EventTarget::removeAllEventListeners((uint64_t)this + 24, v47);
  }
  v49 = *((_QWORD *)this + 1);
  if (v49)
  {
    v50 = *(_QWORD *)(v49 + 8);
    if (v50)
      WebCore::ScriptExecutionContext::destroyedMessagePort((WebCore::ScriptExecutionContext *)(v50 - 96), this);
  }
  v51 = __ldxr((unsigned __int8 *)&_MergedGlobals_172);
  if (v51 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&_MergedGlobals_172))
      goto LABEL_70;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_172);
LABEL_70:
  *((_QWORD *)this + 3) = &unk_1E33A4FC0;
  v52 = *((_QWORD *)this + 5);
  if ((v52 & 0x1000000000000) != 0)
  {
    v76 = v52 & 0xFFFFFFFFFFFFLL;
    if (*(_DWORD *)((v52 & 0xFFFFFFFFFFFFLL) + 0x18))
    {
      v77 = *(unsigned int *)((v52 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v77)
      {
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v76 + 16), (WTF::StringImpl *)(*(_QWORD *)(v76 + 16) + 32 * v77));
        *(_DWORD *)(v76 + 28) = 0;
      }
      v78 = *(WTF **)(v76 + 16);
      if (v78)
      {
        *(_QWORD *)(v76 + 16) = 0;
        *(_DWORD *)(v76 + 24) = 0;
        WTF::fastFree(v78, a2);
      }
    }
  }
  v53 = *((_QWORD *)this + 5) & 0xFFFFFFFFFFFFLL;
  if (v53)
  {
    *(_QWORD *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFLL) + 8) = 0;
    do
    {
      v69 = __ldaxr((unsigned int *)v53);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, (unsigned int *)v53));
    if (!v70)
    {
      atomic_store(1u, (unsigned int *)v53);
      v71 = *(unsigned int *)(v53 + 28);
      if ((_DWORD)v71)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v53 + 16), (WTF::StringImpl *)(*(_QWORD *)(v53 + 16) + 32 * v71));
      v72 = *(WTF **)(v53 + 16);
      if (v72)
      {
        *(_QWORD *)(v53 + 16) = 0;
        *(_DWORD *)(v53 + 24) = 0;
        WTF::fastFree(v72, a2);
      }
      WTF::fastFree((WTF *)v53, a2);
    }
  }
  v54 = *((_QWORD *)this + 4);
  if (v54)
  {
    *(_QWORD *)(v54 + 8) = 3;
    *((_QWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = &off_1E33A0540;
  v55 = *((_QWORD *)this + 1);
  if (!v55)
  {
    *(_QWORD *)this = &off_1E33A18C0;
    goto LABEL_143;
  }
  v56 = *(_QWORD *)(v55 + 8);
  if (v56)
  {
    v57 = *(unsigned __int8 *)(v56 + 178);
    if (*(_BYTE *)(v56 + 178))
    {
      if (v57 == 1 || v57 == 2)
        ++*(_DWORD *)(v56 + 216);
    }
    else
    {
      *(_DWORD *)(v56 - 264) += 2;
    }
    WebCore::ScriptExecutionContext::willDestroyActiveDOMObject((WebCore::ScriptExecutionContext *)(v56 - 96), this);
    v58 = *(unsigned __int8 *)(v56 + 178);
    if (*(_BYTE *)(v56 + 178))
    {
      if (v58 == 1)
      {
        if (*(_DWORD *)(v56 + 216) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)(v56 - 96) + 40))(v56 - 96);
        else
          --*(_DWORD *)(v56 + 216);
      }
      else if (v58 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v56 + 216));
      }
    }
    else if (*(_DWORD *)(v56 - 264) == 2)
    {
      if ((*(_WORD *)(v56 - 258) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v56 - 288));
    }
    else
    {
      *(_DWORD *)(v56 - 264) -= 2;
    }
  }
  v59 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A18C0;
  if (!v59)
    goto LABEL_143;
  v60 = *(_QWORD *)(v59 + 8);
  if (v60)
  {
    WebCore::ScriptExecutionContext::willDestroyDestructionObserver((WebCore::ScriptExecutionContext *)(v60 - 96), this);
    v59 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v59)
      goto LABEL_84;
LABEL_143:
    *((_QWORD *)this + 1) = 0;
    return;
  }
  *((_QWORD *)this + 1) = 0;
  do
  {
LABEL_84:
    v61 = __ldaxr((unsigned int *)v59);
    v62 = v61 - 1;
  }
  while (__stlxr(v62, (unsigned int *)v59));
  if (!v62)
  {
    atomic_store(1u, (unsigned int *)v59);
    WTF::fastFree((WTF *)v59, a2);
  }
  v63 = *((_QWORD *)this + 1);
  if (!v63)
    goto LABEL_143;
  v64 = *(_QWORD *)(v63 + 8);
  if (v64)
  {
    v81 = this;
    WTF::HashTable<WebCore::ContextDestructionObserver *,WebCore::ContextDestructionObserver *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ContextDestructionObserver *>,WTF::HashTraits<WebCore::ContextDestructionObserver *>,WTF::HashTraits<WebCore::ContextDestructionObserver *>>::add((uint64_t *)(v64 + 24), (uint64_t *)&v81, (uint64_t)&v80);
    v63 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (!v63)
      return;
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  do
  {
    v65 = __ldaxr((unsigned int *)v63);
    v66 = v65 - 1;
  }
  while (__stlxr(v66, (unsigned int *)v63));
  if (!v66)
  {
    atomic_store(1u, (unsigned int *)v63);
    WTF::fastFree((WTF *)v63, a2);
  }
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::MessagePort::~MessagePort(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t *WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>(unint64_t a1, unint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v16;

  if (!qword_1ECE831F0)
    return 0;
  v2 = *(_DWORD *)(qword_1ECE831F0 - 8);
  v3 = (a1 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a1 - 1640531527) << 16) ^ ((unsigned __int16)a1
                                                                                          - 1640531527);
  v4 = (a1 >> 37) & 0x7FFF800 ^ ((v3 + WORD2(a1) + (v3 >> 11)) << 16) ^ (v3 + WORD2(a1) + (v3 >> 11));
  v5 = (a2 >> 5) & 0x7FFF800 ^ ((v4 + (unsigned __int16)a2 + (v4 >> 11)) << 16) ^ (v4
                                                                                               + (unsigned __int16)a2
                                                                                               + (v4 >> 11));
  v6 = (a2 >> 37) & 0x7FFF800 ^ ((v5 + WORD2(a2) + (v5 >> 11)) << 16) ^ (v5 + WORD2(a2) + (v5 >> 11));
  v7 = (v6 + (v6 >> 11)) ^ (8 * (v6 + (v6 >> 11)));
  v8 = (v7 + (v7 >> 5)) ^ (4 * (v7 + (v7 >> 5)));
  v9 = (v8 + (v8 >> 15)) ^ ((v8 + (v8 >> 15)) << 10);
  if (!v9)
    v9 = 0x800000;
  v10 = v2 & v9;
  v11 = (uint64_t *)(qword_1ECE831F0 + 32 * v10);
  v12 = *v11;
  v13 = v11[1];
  if (*v11 != a1 || v13 != a2)
  {
    v16 = 1;
    do
    {
      v11 = (uint64_t *)(v12 | v13);
      if (!(v12 | v13))
        break;
      v10 = ((_DWORD)v10 + v16) & v2;
      v11 = (uint64_t *)(qword_1ECE831F0 + 32 * v10);
      v12 = *v11;
      v13 = v11[1];
      ++v16;
    }
    while (*v11 != a1 || v13 != a2);
  }
  return v11;
}

unsigned int *WebCore::CaptionUserPreferencesMediaAF::setCachedPreferredLanguages(unsigned int *result)
{
  if ((byte_1EE337E23 & 1) == 0)
  {
    LOBYTE(qword_1EE337E38) = 0;
    byte_1EE337E48 = 0;
    byte_1EE337E23 = 1;
  }
  return std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,void>(result);
}

uint64_t WebCore::LocalWebLockRegistry::LocalWebLockRegistry(uint64_t this)
{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E3367770;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E3367770;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t *WebCore::SystemSoundManager::singleton(WebCore::SystemSoundManager *this)
{
  {
    WebCore::SystemSoundManager::singleton(void)::systemSoundManager = 0;
  }
  return &WebCore::SystemSoundManager::singleton(void)::systemSoundManager;
}

uint64_t WebCore::VisitedLinkStore::VisitedLinkStore(uint64_t this)
{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E3402DF8;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

void WebCore::HTMLConstructionSite::createHTMLElementOrFindCustomElementInterface(WebCore::HTMLConstructionSite *this@<X0>, WTF::StringImpl **a2@<X1>, WebCore::JSCustomElementInterface **a3@<X2>, WebCore::Node **a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _WORD *v13;
  WebCore::Document *v14;
  uint64_t v15;
  WebCore::Node *v16;
  char v17;
  int v18;
  const WTF::AtomString *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::QualifiedName::QualifiedNameImpl *v24;
  WebCore::Document *v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  WebCore::QualifiedName::QualifiedNameImpl *v29;
  WebCore::Node *v30;
  WTF::StringImpl **v32;
  uint64_t v33;
  WebCore::JSCustomElementInterface *Interface;
  WebCore::JSCustomElementInterface *v35;
  WTF *v36;
  void *v37;
  uint64_t *v38;
  uint64_t v39;
  WebCore::Node *v40;
  uint64_t v41;
  WebCore::QualifiedName::QualifiedNameImpl *v42;
  WebCore::Node *v43;

  v8 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
  if ((*(_WORD *)(v8 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::templateTag + 24))
  {
    v20 = *(_QWORD *)(v8 + 120);
    if (v20)
    {
      v9 = *(_QWORD *)(v20 + 8);
      if (v9)
        goto LABEL_4;
    }
    v8 = WebCore::HTMLTemplateElement::content((WebCore::HTMLTemplateElement *)v8);
  }
  v9 = v8;
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8);
  *(_DWORD *)(v10 + 24) += 2;
  v11 = *(_QWORD *)(v10 + 528);
  if (v11)
  {
    v13 = (_WORD *)a2 + 29;
    v12 = *((unsigned __int16 *)a2 + 29);
    if (*(_QWORD *)(v11 + 8))
      v14 = (WebCore::Document *)*((_QWORD *)this + 6);
    else
      v14 = 0;
  }
  else
  {
    v14 = 0;
    v13 = (_WORD *)a2 + 29;
    v12 = *((unsigned __int16 *)a2 + 29);
  }
  WebCore::HTMLElementFactory::createKnownElement(v12, v10, v14, (WebCore::HTMLFormElement *)1, (uint64_t *)&v43);
  if (v43)
    goto LABEL_8;
  v19 = (const WTF::AtomString *)a2;
  if (!*a2)
  {
    v21 = (unsigned __int16)*v13;
    if (v21 >= 0x127)
      goto LABEL_61;
    v19 = (const WTF::AtomString *)((char *)&WebCore::tagNameStrings + 8 * v21);
  }
  v22 = *(_QWORD *)(v10 + 696);
  if (!v22
    || (v33 = *(_QWORD *)(v22 + 264)) == 0
    || (Interface = (WebCore::JSCustomElementInterface *)WebCore::CustomElementRegistry::findInterface(v33, (uint64_t)v19)) == 0)
  {
    v23 = (unsigned __int16)*v13;
    if (*v13)
    {
      if (v23 < 0x86 || (unsigned __int16)(v23 - 245) <= 0xCu)
      {
        v24 = (WebCore::QualifiedName::QualifiedNameImpl *)*WebCore::qualifiedNameForNodeName(v23);
        if (v24)
          ++*(_DWORD *)v24;
        v42 = v24;
        goto LABEL_31;
      }
      v38 = (uint64_t *)a2;
      if (!*a2)
      {
        if (v23 >= 0x127)
          goto LABEL_61;
        goto LABEL_56;
      }
    }
    else
    {
      v38 = (uint64_t *)a2;
      if (!*a2)
LABEL_56:
        v38 = (uint64_t *)((char *)&WebCore::tagNameStrings + 8 * v23);
    }
    WebCore::QualifiedName::QualifiedName((WebCore *)&v42, MEMORY[0x1E0CBF2F8], v38, &WebCore::HTMLNames::xhtmlNamespaceURI, (WTF::StringImpl *)2, 0);
LABEL_31:
    v25 = (WebCore::Document *)a2;
    if (*a2)
    {
LABEL_34:
      if (WebCore::Document::validateCustomElementName(v25, v19))
      {
        WebCore::HTMLUnknownElement::create((_DWORD **)&v42, v10, &v41);
        WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v43, &v41);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v41);
LABEL_41:
        v32 = (WTF::StringImpl **)v42;
        v42 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v32);
            WTF::fastFree(v36, v37);
          }
          else
          {
            --*(_DWORD *)v32;
          }
        }
        goto LABEL_8;
      }
      v27 = bmalloc::api::isoAllocate();
      a3 = (WebCore::JSCustomElementInterface **)v27;
      *(_OWORD *)(v27 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v27 + 24) = 0x181C00000002;
      *(_QWORD *)(v27 + 32) = 0;
      *(_QWORD *)(v27 + 40) = v10 + 96;
      *(_OWORD *)(v27 + 48) = 0u;
      *(_OWORD *)(v27 + 64) = 0u;
      ++*(_DWORD *)(v10 + 3324);
      *(_QWORD *)(v27 + 80) = 0;
      *(_QWORD *)(v27 + 88) = 0;
      v29 = v42;
      if (v42)
        ++*(_DWORD *)v42;
      *(_QWORD *)(v27 + 96) = v29;
      *(_QWORD *)(v27 + 104) = 0;
      *(_QWORD *)v27 = off_1E33C1F80;
      v30 = v43;
      v43 = (WebCore::Node *)a3;
      if (v30)
      {
        if (*((_DWORD *)v30 + 6) == 2)
        {
          if ((*((_WORD *)v30 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v30, v28);
            a3 = (WebCore::JSCustomElementInterface **)v43;
          }
        }
        else
        {
          *((_DWORD *)v30 + 6) -= 2;
        }
      }
      WebCore::Node::setCustomElementState((uint64_t)a3, (void *)1);
      if (!atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        goto LABEL_41;
LABEL_62:
      v39 = WebCore::InspectorInstrumentation::instrumentingAgents(*((WebCore::InspectorInstrumentation **)a3[5] + 1), v19);
      if (v39)
        WebCore::InspectorInstrumentation::didChangeCustomElementStateImpl(v39, (WebCore::Element *)a3);
      goto LABEL_41;
    }
    v26 = (unsigned __int16)*v13;
    if (v26 < 0x127)
    {
      v25 = (WebCore::Document *)((char *)&WebCore::tagNameStrings + 8 * v26);
      goto LABEL_34;
    }
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  v35 = Interface;
  if (*((_BYTE *)this + 169))
  {
    WebCore::JSCustomElementInterface::createElement(Interface, (WebCore::Document *)v10, &v42);
    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v43, (uint64_t *)&v42);
    WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v42);
    WebCore::Element::setIsCustomElementUpgradeCandidate(v43);
    WebCore::Element::enqueueToUpgrade(v43, v35);
LABEL_8:
    v15 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
    if ((*(_WORD *)(v15 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::pictureTag + 24)
      && v43
      && *(_QWORD *)(*((_QWORD *)v43 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
    {
      WebCore::HTMLImageElement::setPictureElement((uint64_t)v43, (_QWORD *)v15);
    }
    v16 = v43;
    v17 = *((_BYTE *)this + 168);
    v18 = *((unsigned __int8 *)a2 + 62);
    if ((v17 & 1) == 0)
      WebCore::Element::stripScriptingAttributes((WTF::StringImpl **)v43, (uint64_t)(a2 + 3));
    WebCore::Element::parserSetAttributes((uint64_t)v16, a2[3], *((unsigned int *)a2 + 9));
    *((_QWORD *)v16 + 2) = *((_QWORD *)v16 + 2) & 0xFEFFFFFFFFFFFFFFLL | ((unint64_t)(v18 != 0) << 56);
    *a4 = v43;
    goto LABEL_13;
  }
  *a3 = Interface;
  *a4 = 0;
  v40 = v43;
  v43 = 0;
  if (v40)
  {
    if (*((_DWORD *)v40 + 6) == 2)
    {
      if ((*((_WORD *)v40 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v40, v19);
    }
    else
    {
      *((_DWORD *)v40 + 6) -= 2;
    }
  }
LABEL_13:
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10, v19);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
}

void WebCore::Element::parserSetAttributes(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t *i;
  unsigned int v24;
  uint64_t *v25;
  _DWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  int v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD **v37;
  _QWORD *v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl **v46;
  WTF::StringImpl *v47;
  WTF::StringImpl **v48;
  WTF *v49;
  void *v50;
  uint64_t v51;
  _DWORD **v52;
  _QWORD *v53;
  uint64_t v54;
  _DWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  _DWORD *v64;
  int v65;
  int v66;
  int v67;
  WebCore::ValidationMessage *v68;
  _QWORD *v69;
  WTF::StringImpl *v70;
  void *v71;
  const WTF::AtomString *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl **v78;
  WTF::StringImpl *v79;
  WTF::StringImpl **v80;
  WTF *v81;
  void *v82;
  WTF *v83;
  unsigned int *v85;
  WTF::StringImpl *v86;
  WTF *v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  WTF::StringImpl **v91;
  WTF::StringImpl *v92;
  WTF::StringImpl **v93;
  WTF *v94;
  void *v95;
  WTF::StringImpl *v96;
  WTF *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD **v101;
  _DWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  WebCore::CollectionNamedElementCache **v106;
  WTF *v107;
  unsigned int *v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  uint64_t v112;
  _DWORD **v113;
  _DWORD *v114;
  unint64_t v115;
  WTF::StringImpl **v116;
  WTF::StringImpl *v117;
  WTF::StringImpl **v118;
  WTF *v119;
  void *v120;
  WTF::StringImpl *v121;
  WTF *v122;
  uint64_t v123;
  uint64_t v124;
  _DWORD **v125;
  _DWORD *v126;
  unint64_t v127;
  unint64_t v128;
  unsigned int *v129;
  _DWORD *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _DWORD **v134;
  _DWORD *v135;
  WTF *v136;
  uint64_t v138;
  WTF *v139;
  unsigned int v140;
  unint64_t v141;
  unint64_t v142;
  unsigned int *v143;
  _DWORD *v144;
  int v145;
  uint64_t v146;
  void *v147;
  const WebCore::HTMLElement *v148;
  unsigned int v149;
  int v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  const WebCore::HTMLElement *v154;
  uint64_t v155;
  uint64_t v156;
  BOOL v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  __int16 v161;
  uint64_t v162;
  __int16 v163;
  BOOL v164;
  char v165;
  int v166;
  const WebCore::HTMLElement *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unsigned int *v173;
  _DWORD *v174;
  unint64_t v175;
  unsigned int *v176;
  _DWORD *v177;
  WTF::StringImpl **v178;
  WebCore::HTMLFieldSetElement *v179;
  const WebCore::HTMLElement *v180;
  uint64_t v181;
  WebCore::HTMLFormElement *v182;
  WebCore::AXObjectCache *v183;
  __n128 v184;
  WebCore::AXObjectCache *v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  unsigned __int8 **v189;
  uint64_t v190;
  unsigned __int8 **v191;
  unsigned int v192;
  uint64_t v193;
  WebCore::CollectionNamedElementCache *v194;
  uint64_t v196;
  unsigned __int8 *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned __int8 **v201;
  uint64_t v202;
  unsigned int v203;
  unsigned __int8 **v204;
  unsigned __int8 *v205;
  WTF::StringImpl **v206;
  uint64_t v207;
  uint64_t v208;
  WTF::StringImpl **v210;
  uint64_t *v211;
  uint64_t v212;
  WebCore::Element *v214;
  WebCore::AXObjectCache *v215;
  WebCore::Element *v216;
  WebCore::AXObjectCache *v217;
  int v218;
  WTF::StringImpl **v219;
  int v224;
  int v225;
  uint64_t v226;
  int v227;
  WTF *v228;
  unsigned __int8 **v229;
  unsigned __int8 **v230;
  unsigned __int8 **v231;
  uint64_t v232;
  unsigned __int8 *v233;
  unsigned __int8 *v234;

  v4 = a2;
  if (a3)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 2608);
    if (v6)
    {
      v7 = *(_QWORD *)v6;
      if (*(_QWORD *)v6
        || (WTF::HashTable<WTF::Ref<WebCore::ShareableElementData,WTF::RawPtrTraits<WebCore::ShareableElementData>,WTF::DefaultRefDerefTraits<WebCore::ShareableElementData>>,WTF::Ref<WebCore::ShareableElementData,WTF::RawPtrTraits<WebCore::ShareableElementData>,WTF::DefaultRefDerefTraits<WebCore::ShareableElementData>>,WTF::IdentityExtractor,WebCore::DocumentSharedObjectPool::ShareableElementDataHash,WTF::HashTraits<WTF::Ref<WebCore::ShareableElementData,WTF::RawPtrTraits<WebCore::ShareableElementData>,WTF::DefaultRefDerefTraits<WebCore::ShareableElementData>>>,WTF::HashTraits<WTF::Ref<WebCore::ShareableElementData,WTF::RawPtrTraits<WebCore::ShareableElementData>,WTF::DefaultRefDerefTraits<WebCore::ShareableElementData>>>>::rehash((uint64_t *)v6, 8u, 0), (v7 = *(_QWORD *)v6) != 0))
      {
        v8 = *(_DWORD *)(v7 - 8);
      }
      else
      {
        v8 = 0;
      }
      v9 = -1640531527;
      v10 = v4;
      do
      {
        v11 = *(_QWORD *)v10;
        v12 = *((_QWORD *)v10 + 1);
        v10 = (WTF::StringImpl *)((char *)v10 + 16);
        v13 = (v11 >> 5) & 0x7FFF800 ^ ((v9 + (unsigned __int16)v11) << 16) ^ (v9 + (unsigned __int16)v11);
        v14 = (v11 >> 37) & 0x7FFF800 ^ ((v13 + WORD2(v11) + (v13 >> 11)) << 16) ^ (v13 + WORD2(v11) + (v13 >> 11));
        v15 = (v12 >> 5) & 0x7FFF800 ^ ((v14 + (unsigned __int16)v12 + (v14 >> 11)) << 16) ^ (v14 + (unsigned __int16)v12 + (v14 >> 11));
        v16 = v15 + WORD2(v12) + (v15 >> 11);
        LODWORD(v11) = (v12 >> 37) & 0x7FFF800 ^ (v16 << 16);
        v9 = (v11 ^ v16) + ((v11 ^ v16) >> 11);
      }
      while (v10 != (WTF::StringImpl *)((char *)v4 + 16 * a3));
      v17 = (v9 ^ (8 * v9)) + ((v9 ^ (8 * v9)) >> 5);
      v18 = (v17 ^ (4 * v17)) + ((v17 ^ (4 * v17)) >> 15);
      v19 = v18 ^ (v18 << 10);
      if (v19)
        v20 = v19;
      else
        v20 = 0x800000;
      v21 = 2 * (a3 & 0xFFFFFFF);
      if (v21)
      {
        v22 = 0;
        for (i = 0; ; i = v25)
        {
          v24 = v20 & v8;
          v25 = (uint64_t *)(v7 + 8 * v24);
          v26 = (_DWORD *)*v25;
          if (!*v25)
            goto LABEL_54;
          if (v26 != (_DWORD *)-1)
            break;
LABEL_22:
          v20 = ++v22 + v24;
        }
        v27 = v26[1];
        if ((v27 & 1) != 0)
        {
          if (a3 == v26[13])
          {
LABEL_16:
            v28 = v26 + 8;
            v29 = 2 * (a3 & 0xFFFFFFF);
            v30 = v4;
            while (*v28 == *(_QWORD *)v30)
            {
              ++v28;
              v30 = (WTF::StringImpl *)((char *)v30 + 8);
              if (!--v29)
                goto LABEL_74;
            }
          }
        }
        else if (a3 == v27 >> 5)
        {
          goto LABEL_16;
        }
        v25 = i;
        goto LABEL_22;
      }
      i = 0;
      while (1)
      {
        v31 = v20 & v8;
        v25 = (uint64_t *)(v7 + 8 * (v20 & v8));
        v32 = *v25;
        if (!*v25)
          break;
        if (v32 == -1)
        {
          i = (uint64_t *)(v7 + 8 * v31);
        }
        else
        {
          v33 = *(unsigned int *)(v32 + 4);
          if ((v33 & 1) != 0)
            v34 = *(unsigned int *)(v32 + 52);
          else
            v34 = v33 >> 5;
          if (a3 == v34)
            goto LABEL_74;
        }
        v20 = ++v21 + v31;
      }
LABEL_54:
      if (i)
        v25 = i;
      if (*v25 == -1)
      {
        *v25 = 0;
        --*(_DWORD *)(*(_QWORD *)v6 - 16);
      }
      v35 = WTF::fastMalloc((WTF *)(16 * a3 + 32));
      *(_DWORD *)v35 = 1;
      *(_DWORD *)(v35 + 4) = 32 * a3;
      *(_QWORD *)(v35 + 16) = 0;
      *(_QWORD *)(v35 + 24) = 0;
      *(_QWORD *)(v35 + 8) = 0;
      if ((a3 & 0x7FFFFFF) != 0)
      {
        v51 = a3 & 0x7FFFFFF;
        v52 = (_DWORD **)((char *)v4 + 8);
        v53 = (_QWORD *)(v35 + 40);
        v54 = a3;
        while (v54)
        {
          v55 = *(v52 - 1);
          if (v55)
            ++*v55;
          *(v53 - 1) = v55;
          v56 = *v52;
          if (*v52)
            *v56 += 2;
          *v53 = v56;
          v53 += 2;
          v52 += 2;
          --v54;
          if (!--v51)
            goto LABEL_66;
        }
        goto LABEL_287;
      }
LABEL_66:
      v57 = *v25;
      *v25 = v35;
      if (v57)
        WebCore::ElementData::deref(v57, a2);
      v58 = *(_QWORD *)v6;
      if (*(_QWORD *)v6)
        v59 = *(_DWORD *)(v58 - 12) + 1;
      else
        v59 = 1;
      *(_DWORD *)(v58 - 12) = v59;
      v60 = *(_QWORD *)v6;
      if (*(_QWORD *)v6)
        v61 = *(_DWORD *)(v60 - 12);
      else
        v61 = 0;
      v62 = (*(_DWORD *)(v60 - 16) + v61);
      v63 = *(unsigned int *)(v60 - 4);
      if (v63 > 0x400)
      {
        if (v63 > 2 * v62)
          goto LABEL_74;
      }
      else
      {
        if (3 * v63 > 4 * v62)
        {
LABEL_74:
          v64 = (_DWORD *)*v25;
          *v64 = *(_DWORD *)*v25 + 1;
          v6 = *(_QWORD *)(a1 + 104);
          *(_QWORD *)(a1 + 104) = v64;
          if (!v6)
            goto LABEL_77;
          v42 = *(_DWORD *)v6 - 1;
          if (*(_DWORD *)v6 != 1)
            goto LABEL_76;
          v75 = *(unsigned int *)(v6 + 4);
          if ((v75 & 1) != 0)
          {
            v76 = *(unsigned int *)(v6 + 52);
            if ((_DWORD)v76)
            {
              v77 = 16 * v76;
              v78 = (WTF::StringImpl **)(*(_QWORD *)(v6 + 40) + 8);
              do
              {
                v79 = *v78;
                *v78 = 0;
                if (v79)
                {
                  if (*(_DWORD *)v79 == 2)
                    WTF::StringImpl::destroy(v79, a2);
                  else
                    *(_DWORD *)v79 -= 2;
                }
                v80 = (WTF::StringImpl **)*(v78 - 1);
                *(v78 - 1) = 0;
                if (v80)
                {
                  if (*(_DWORD *)v80 == 1)
                  {
                    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v80);
                    WTF::fastFree(v81, v82);
                  }
                  else
                  {
                    --*(_DWORD *)v80;
                  }
                }
                v78 += 2;
                v77 -= 16;
              }
              while (v77);
            }
            v83 = *(WTF **)(v6 + 40);
            if ((WTF *)(v6 + 56) != v83 && v83 != 0)
            {
              *(_QWORD *)(v6 + 40) = 0;
              *(_DWORD *)(v6 + 48) = 0;
              WTF::fastFree(v83, a2);
            }
            v85 = *(unsigned int **)(v6 + 32);
            *(_QWORD *)(v6 + 32) = 0;
            if (v85)
            {
              if (*v85 == 1)
              {
                v127 = v85[1];
                if (v127 >= 0x10)
                {
                  v128 = 0;
                  v129 = (unsigned int *)((char *)v85 + ((v127 >> 3) & 0x1FFFFFFE) + 8);
                  do
                  {
                    v130 = (_DWORD *)(*v129 | ((unint64_t)*((unsigned __int8 *)v129 + 4) << 32));
                    if (*v130 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v130, a2);
                    else
                      *v130 -= 2;
                    ++v128;
                    v129 = (unsigned int *)((char *)v129 + 5);
                  }
                  while (v128 < (unint64_t)v85[1] >> 4);
                }
                WTF::fastFree((WTF *)v85, a2);
              }
              else
              {
                --*v85;
              }
            }
            v86 = *(WTF::StringImpl **)(v6 + 24);
            *(_QWORD *)(v6 + 24) = 0;
            if (v86)
            {
              if (*(_DWORD *)v86 == 2)
                WTF::StringImpl::destroy(v86, a2);
              else
                *(_DWORD *)v86 -= 2;
            }
            v87 = *(WTF **)(v6 + 16);
            *(_QWORD *)(v6 + 16) = 0;
            if (v87)
            {
              if (*((_DWORD *)v87 + 2) == 1)
                WebCore::SpaceSplitStringData::destroy(v87, a2);
              else
                --*((_DWORD *)v87 + 2);
            }
            v88 = *(_QWORD *)(v6 + 8);
            *(_QWORD *)(v6 + 8) = 0;
            if (!v88)
              goto LABEL_131;
            v89 = *(_DWORD *)v88 - 1;
            if (*(_DWORD *)v88 != 1)
              goto LABEL_130;
            v131 = *(unsigned int *)(v88 + 4);
            if ((v131 & 8) != 0)
            {
              v132 = *(unsigned int *)(v88 + 28);
              if ((_DWORD)v132)
              {
                v133 = 16 * v132;
                v134 = (_DWORD **)(*(_QWORD *)(v88 + 16) + 8);
                do
                {
                  v135 = *v134;
                  *v134 = 0;
                  if (v135)
                  {
                    if (*v135 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v135, a2);
                    else
                      *v135 -= 2;
                  }
                  v134 += 2;
                  v133 -= 16;
                }
                while (v133);
              }
              goto LABEL_240;
            }
            if (v131 >= 0x10)
            {
              v172 = 0;
              v173 = (unsigned int *)(v88 + ((v131 >> 3) & 0x1FFFFFFE) + 8);
              do
              {
                v174 = (_DWORD *)(*v173 | ((unint64_t)*((unsigned __int8 *)v173 + 4) << 32));
                if (*v174 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v174, a2);
                else
                  *v174 -= 2;
                ++v172;
                v173 = (unsigned int *)((char *)v173 + 5);
              }
              while (v172 < (unint64_t)*(unsigned int *)(v88 + 4) >> 4);
            }
          }
          else
          {
            if (v75 >= 0x20)
            {
              v90 = v75 >> 5;
              v91 = (WTF::StringImpl **)(v6 + 40);
              do
              {
                v92 = *v91;
                *v91 = 0;
                if (v92)
                {
                  if (*(_DWORD *)v92 == 2)
                    WTF::StringImpl::destroy(v92, a2);
                  else
                    *(_DWORD *)v92 -= 2;
                }
                v93 = (WTF::StringImpl **)*(v91 - 1);
                *(v91 - 1) = 0;
                if (v93)
                {
                  if (*(_DWORD *)v93 == 1)
                  {
                    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v93);
                    WTF::fastFree(v94, v95);
                  }
                  else
                  {
                    --*(_DWORD *)v93;
                  }
                }
                v91 += 2;
                --v90;
              }
              while (v90);
            }
            v96 = *(WTF::StringImpl **)(v6 + 24);
            *(_QWORD *)(v6 + 24) = 0;
            if (v96)
            {
              if (*(_DWORD *)v96 == 2)
                WTF::StringImpl::destroy(v96, a2);
              else
                *(_DWORD *)v96 -= 2;
            }
            v97 = *(WTF **)(v6 + 16);
            *(_QWORD *)(v6 + 16) = 0;
            if (v97)
            {
              if (*((_DWORD *)v97 + 2) == 1)
                WebCore::SpaceSplitStringData::destroy(v97, a2);
              else
                --*((_DWORD *)v97 + 2);
            }
            v88 = *(_QWORD *)(v6 + 8);
            *(_QWORD *)(v6 + 8) = 0;
            if (!v88)
              goto LABEL_131;
            v89 = *(_DWORD *)v88 - 1;
            if (*(_DWORD *)v88 != 1)
              goto LABEL_130;
            v98 = *(unsigned int *)(v88 + 4);
            if ((v98 & 8) != 0)
            {
              v99 = *(unsigned int *)(v88 + 28);
              if ((_DWORD)v99)
              {
                v100 = 16 * v99;
                v101 = (_DWORD **)(*(_QWORD *)(v88 + 16) + 8);
                do
                {
                  v102 = *v101;
                  *v101 = 0;
                  if (v102)
                  {
                    if (*v102 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v102, a2);
                    else
                      *v102 -= 2;
                  }
                  v101 += 2;
                  v100 -= 16;
                }
                while (v100);
              }
              goto LABEL_240;
            }
            if (v98 >= 0x10)
            {
              v175 = 0;
              v176 = (unsigned int *)(v88 + ((v98 >> 3) & 0x1FFFFFFE) + 8);
              do
              {
                v177 = (_DWORD *)(*v176 | ((unint64_t)*((unsigned __int8 *)v176 + 4) << 32));
                if (*v177 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v177, a2);
                else
                  *v177 -= 2;
                ++v175;
                v176 = (unsigned int *)((char *)v176 + 5);
              }
              while (v175 < (unint64_t)*(unsigned int *)(v88 + 4) >> 4);
            }
          }
          goto LABEL_247;
        }
        if (!(_DWORD)v63)
        {
          v140 = 8;
          goto LABEL_267;
        }
      }
      v140 = (_DWORD)v63 << (6 * *(_DWORD *)(v60 - 12) >= (2 * v63));
LABEL_267:
      v25 = WTF::HashTable<WTF::Ref<WebCore::ShareableElementData,WTF::RawPtrTraits<WebCore::ShareableElementData>,WTF::DefaultRefDerefTraits<WebCore::ShareableElementData>>,WTF::Ref<WebCore::ShareableElementData,WTF::RawPtrTraits<WebCore::ShareableElementData>,WTF::DefaultRefDerefTraits<WebCore::ShareableElementData>>,WTF::IdentityExtractor,WebCore::DocumentSharedObjectPool::ShareableElementDataHash,WTF::HashTraits<WTF::Ref<WebCore::ShareableElementData,WTF::RawPtrTraits<WebCore::ShareableElementData>,WTF::DefaultRefDerefTraits<WebCore::ShareableElementData>>>,WTF::HashTraits<WTF::Ref<WebCore::ShareableElementData,WTF::RawPtrTraits<WebCore::ShareableElementData>,WTF::DefaultRefDerefTraits<WebCore::ShareableElementData>>>>::rehash((uint64_t *)v6, v140, v25);
      goto LABEL_74;
    }
    v35 = WTF::fastMalloc((WTF *)(16 * a3 + 32));
    *(_DWORD *)v35 = 1;
    *(_DWORD *)(v35 + 4) = 32 * a3;
    *(_QWORD *)(v35 + 16) = 0;
    *(_QWORD *)(v35 + 24) = 0;
    *(_QWORD *)(v35 + 8) = 0;
    if ((a3 & 0x7FFFFFF) != 0)
    {
      v36 = a3 & 0x7FFFFFF;
      v37 = (_DWORD **)((char *)v4 + 8);
      v38 = (_QWORD *)(v35 + 40);
      v39 = a3;
      while (v39)
      {
        v40 = *(v37 - 1);
        if (v40)
          ++*v40;
        *(v38 - 1) = v40;
        v41 = *v37;
        if (*v37)
          *v41 += 2;
        *v38 = v41;
        v38 += 2;
        v37 += 2;
        --v39;
        if (!--v36)
          goto LABEL_39;
      }
LABEL_287:
      __break(1u);
      goto LABEL_288;
    }
LABEL_39:
    v6 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v35;
    if (v6)
    {
      v42 = *(_DWORD *)v6 - 1;
      if (*(_DWORD *)v6 != 1)
      {
LABEL_76:
        *(_DWORD *)v6 = v42;
        goto LABEL_77;
      }
      v43 = *(unsigned int *)(v6 + 4);
      if ((v43 & 1) == 0)
      {
        if (v43 >= 0x20)
        {
          v115 = v43 >> 5;
          v116 = (WTF::StringImpl **)(v6 + 40);
          do
          {
            v117 = *v116;
            *v116 = 0;
            if (v117)
            {
              if (*(_DWORD *)v117 == 2)
                WTF::StringImpl::destroy(v117, a2);
              else
                *(_DWORD *)v117 -= 2;
            }
            v118 = (WTF::StringImpl **)*(v116 - 1);
            *(v116 - 1) = 0;
            if (v118)
            {
              if (*(_DWORD *)v118 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v118);
                WTF::fastFree(v119, v120);
              }
              else
              {
                --*(_DWORD *)v118;
              }
            }
            v116 += 2;
            --v115;
          }
          while (v115);
        }
        v121 = *(WTF::StringImpl **)(v6 + 24);
        *(_QWORD *)(v6 + 24) = 0;
        if (v121)
        {
          if (*(_DWORD *)v121 == 2)
            WTF::StringImpl::destroy(v121, a2);
          else
            *(_DWORD *)v121 -= 2;
        }
        v122 = *(WTF **)(v6 + 16);
        *(_QWORD *)(v6 + 16) = 0;
        if (v122)
        {
          if (*((_DWORD *)v122 + 2) == 1)
            WebCore::SpaceSplitStringData::destroy(v122, a2);
          else
            --*((_DWORD *)v122 + 2);
        }
        v88 = *(_QWORD *)(v6 + 8);
        *(_QWORD *)(v6 + 8) = 0;
        if (!v88)
          goto LABEL_131;
        v89 = *(_DWORD *)v88 - 1;
        if (*(_DWORD *)v88 == 1)
        {
          if ((*(_BYTE *)(v88 + 4) & 8) != 0)
          {
            v123 = *(unsigned int *)(v88 + 28);
            if ((_DWORD)v123)
            {
              v124 = 16 * v123;
              v125 = (_DWORD **)(*(_QWORD *)(v88 + 16) + 8);
              do
              {
                v126 = *v125;
                *v125 = 0;
                if (v126)
                {
                  if (*v126 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v126, a2);
                  else
                    *v126 -= 2;
                }
                v125 += 2;
                v124 -= 16;
              }
              while (v124);
            }
            goto LABEL_240;
          }
LABEL_350:
          WebCore::ImmutableStyleProperties::~ImmutableStyleProperties((WebCore::ImmutableStyleProperties *)v88, a2);
          goto LABEL_248;
        }
        goto LABEL_130;
      }
      v44 = *(unsigned int *)(v6 + 52);
      if ((_DWORD)v44)
      {
        v45 = 16 * v44;
        v46 = (WTF::StringImpl **)(*(_QWORD *)(v6 + 40) + 8);
        do
        {
          v47 = *v46;
          *v46 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
              WTF::StringImpl::destroy(v47, a2);
            else
              *(_DWORD *)v47 -= 2;
          }
          v48 = (WTF::StringImpl **)*(v46 - 1);
          *(v46 - 1) = 0;
          if (v48)
          {
            if (*(_DWORD *)v48 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v48);
              WTF::fastFree(v49, v50);
            }
            else
            {
              --*(_DWORD *)v48;
            }
          }
          v46 += 2;
          v45 -= 16;
        }
        while (v45);
      }
      v107 = *(WTF **)(v6 + 40);
      if ((WTF *)(v6 + 56) != v107 && v107 != 0)
      {
        *(_QWORD *)(v6 + 40) = 0;
        *(_DWORD *)(v6 + 48) = 0;
        WTF::fastFree(v107, a2);
      }
      v109 = *(unsigned int **)(v6 + 32);
      *(_QWORD *)(v6 + 32) = 0;
      if (v109)
      {
        if (*v109 == 1)
        {
          v141 = v109[1];
          if (v141 >= 0x10)
          {
            v142 = 0;
            v143 = (unsigned int *)((char *)v109 + ((v141 >> 3) & 0x1FFFFFFE) + 8);
            do
            {
              v144 = (_DWORD *)(*v143 | ((unint64_t)*((unsigned __int8 *)v143 + 4) << 32));
              if (*v144 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v144, a2);
              else
                *v144 -= 2;
              ++v142;
              v143 = (unsigned int *)((char *)v143 + 5);
            }
            while (v142 < (unint64_t)v109[1] >> 4);
          }
          WTF::fastFree((WTF *)v109, a2);
        }
        else
        {
          --*v109;
        }
      }
      v110 = *(WTF::StringImpl **)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      if (v110)
      {
        if (*(_DWORD *)v110 == 2)
          WTF::StringImpl::destroy(v110, a2);
        else
          *(_DWORD *)v110 -= 2;
      }
      v35 = *(_QWORD *)(v6 + 16);
      *(_QWORD *)(v6 + 16) = 0;
      if (v35)
      {
        if (*(_DWORD *)(v35 + 8) == 1)
        {
LABEL_288:
          WebCore::SpaceSplitStringData::destroy((WTF *)v35, a2);
          goto LABEL_184;
        }
        --*(_DWORD *)(v35 + 8);
      }
LABEL_184:
      v88 = *(_QWORD *)(v6 + 8);
      *(_QWORD *)(v6 + 8) = 0;
      if (!v88)
        goto LABEL_131;
      v89 = *(_DWORD *)v88 - 1;
      if (*(_DWORD *)v88 == 1)
      {
        if ((*(_BYTE *)(v88 + 4) & 8) != 0)
        {
          v111 = *(unsigned int *)(v88 + 28);
          if ((_DWORD)v111)
          {
            v112 = 16 * v111;
            v113 = (_DWORD **)(*(_QWORD *)(v88 + 16) + 8);
            do
            {
              v114 = *v113;
              *v113 = 0;
              if (v114)
              {
                if (*v114 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v114, a2);
                else
                  *v114 -= 2;
              }
              v113 += 2;
              v112 -= 16;
            }
            while (v112);
          }
LABEL_240:
          v136 = *(WTF **)(v88 + 16);
          if ((WTF *)(v88 + 32) != v136 && v136 != 0)
          {
            *(_QWORD *)(v88 + 16) = 0;
            *(_DWORD *)(v88 + 24) = 0;
            WTF::fastFree(v136, a2);
          }
          v138 = *(_QWORD *)(v88 + 8);
          *(_QWORD *)(v88 + 8) = 0;
          if (v138)
            (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
LABEL_247:
          v139 = (WTF *)v88;
LABEL_248:
          WTF::fastFree(v139, a2);
          goto LABEL_131;
        }
        goto LABEL_350;
      }
LABEL_130:
      *(_DWORD *)v88 = v89;
LABEL_131:
      WTF::fastFree((WTF *)v6, a2);
    }
  }
LABEL_77:
  if ((*(_WORD *)(a1 + 28) & 0x10) == 0)
    goto LABEL_82;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    goto LABEL_82;
  ++*(_DWORD *)(a1 + 164);
  WebCore::HTMLInputElement::initializeInputTypeAfterParsingOrCloning((WebCore::HTMLInputElement *)a1);
  v65 = *(_DWORD *)(a1 + 164) - 1;
  *(_DWORD *)(a1 + 164) = v65;
  if (v65)
    goto LABEL_82;
  v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 272))(a1 + 112);
  v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 224))(a1 + 112);
  if (((v67 ^ ((*(_BYTE *)(a1 + 160) & 1) == 0)) & 1) == 0)
  {
    v145 = v67;
    v146 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 16))(a1 + 112);
    v148 = (const WebCore::HTMLElement *)v146;
    v149 = *(unsigned __int8 *)(a1 + 160);
    if ((v149 & 0x40) != 0)
      v150 = v145;
    else
      v150 = 0;
    if ((*(_BYTE *)(v146 + 22) & 8) == 0)
      goto LABEL_298;
    v151 = *(uint64_t **)(v146 + 40);
    v152 = v151[1];
    if (!*(_QWORD *)(v152 + 1944) || *(_BYTE *)(v152 + 3405))
      goto LABEL_298;
    if ((*(_BYTE *)(v146 + 70) & 4) != 0)
    {
      v156 = *v151;
      v157 = (*(_WORD *)(v156 + 28) & 0x80) == 0 || v156 == 0;
      v158 = v156 + 216;
      if (v157)
        v158 = v152 + 1328;
      if (!*(_BYTE *)(*(_QWORD *)v158 + 236))
        goto LABEL_298;
    }
    v153 = *(_QWORD *)(v152 + 1272);
    if (v153)
    {
      if ((*(_BYTE *)(v153 + 70) & 4) != 0)
      {
LABEL_298:
        LOBYTE(v231) = 0;
        v233 = 0;
        v234 = 0;
        v232 = v146;
        goto LABEL_299;
      }
    }
    v227 = v150;
    v154 = (const WebCore::HTMLElement *)v146;
    if (!*(_BYTE *)(v152 + 3362)
      && (*(_BYTE *)(v152 + 3390)
       || (*(_BYTE *)(v152 + 70) & 8) != 0
       || *(_QWORD *)(v152 + 1560)
       || (v155 = *(_QWORD *)(v152 + 1328), *(_BYTE *)(v155 + 233))
       || *(_BYTE *)(v155 + 234)))
    {
      if (*(_BYTE *)(v152 + 3390))
        v164 = *(_BYTE *)(v152 + 3391) == 0;
      else
        v164 = 0;
      v165 = !v164;
      LOBYTE(v231) = v165;
      v233 = 0;
      v234 = 0;
      v148 = (const WebCore::HTMLElement *)v146;
      v232 = v146;
      if (v164)
      {
LABEL_299:
        v159 = v149 & 0xFE | v145;
        *(_BYTE *)(a1 + 160) = v159;
        if (!v66)
          goto LABEL_305;
        if ((v145 & 1) != 0)
        {
          v167 = v148;
          if ((v159 & 0x80000000) == 0)
          {
            v168 = *((_QWORD *)v148 + 4);
            if (v168)
            {
              if ((*(_WORD *)(v168 + 28) & 8) != 0)
              {
                v169 = WebCore::lineageOfType<WebCore::HTMLFieldSetElement>(v168);
                if (v169)
                {
                  v179 = (WebCore::HTMLFieldSetElement *)v169;
                  do
                  {
                    WebCore::HTMLFieldSetElement::removeInvalidDescendant(v179, v167);
                    v179 = (WebCore::HTMLFieldSetElement *)WebCore::findElementAncestorOfType<WebCore::HTMLFieldSetElement>((uint64_t)v179);
                  }
                  while (v179);
                }
              }
            }
          }
          v170 = *(_QWORD *)(a1 + 120);
          v148 = v167;
          if (!v170)
            goto LABEL_305;
          v171 = *(_QWORD *)(v170 + 8);
          if (!v171)
            goto LABEL_305;
          WebCore::HTMLFormElement::removeInvalidFormControlIfNeeded(v171, v167);
LABEL_374:
          v148 = v167;
LABEL_305:
          if (WebCore::Document::hasEverCreatedAnAXObjectCache)
          {
            v214 = v148;
            v215 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*((_QWORD *)v148 + 5) + 8));
            if (v215)
            {
              v216 = v214;
              v217 = v215;
              ++*((_DWORD *)v215 + 2);
              WebCore::AXObjectCache::onValidityChange(v215, v216);
              v218 = *((_DWORD *)v217 + 2);
              if (!v218)
              {
                __break(0xC471u);
                JUMPOUT(0x194310D24);
              }
              *((_DWORD *)v217 + 2) = v218 - 1;
            }
          }
          if ((_BYTE)v231)
            WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v232, &v234);
          if (v234)
            WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v234, v147);
          if (v233)
            WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v233, v147);
          goto LABEL_81;
        }
        if ((v159 & 0x80000000) == 0)
        {
          v160 = *((_QWORD *)v148 + 4);
          if (v160)
          {
            v161 = *(_WORD *)(v160 + 28);
            if ((v161 & 8) != 0)
            {
              if ((v161 & 0x10) == 0
                || *(_QWORD *)(*(_QWORD *)(v160 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
              {
                v160 = *(_QWORD *)(v160 + 32);
                if (!v160)
                  goto LABEL_304;
                v163 = *(_WORD *)(v160 + 28);
                if ((v163 & 8) == 0)
                  goto LABEL_304;
                while ((v163 & 0x10) == 0
                     || *(_QWORD *)(*(_QWORD *)(v160 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
                {
                  v160 = *(_QWORD *)(v160 + 32);
                  if (v160)
                  {
                    v163 = *(_WORD *)(v160 + 28);
                    if ((v163 & 8) != 0)
                      continue;
                  }
                  goto LABEL_304;
                }
              }
              do
              {
                v180 = v148;
                WebCore::HTMLFieldSetElement::addInvalidDescendant((WebCore::HTMLFieldSetElement *)v160, v148);
                v181 = WebCore::findElementAncestorOfType<WebCore::HTMLFieldSetElement>(v160);
                v148 = v180;
                v160 = v181;
              }
              while (v181);
            }
          }
        }
LABEL_304:
        v162 = *(_QWORD *)(a1 + 120);
        if (!v162)
          goto LABEL_305;
        v182 = *(WebCore::HTMLFormElement **)(v162 + 8);
        if (!v182)
          goto LABEL_305;
        v167 = v148;
        WebCore::HTMLFormElement::addInvalidFormControl(v182, v148);
        goto LABEL_374;
      }
    }
    else
    {
      LOBYTE(v231) = 1;
      v233 = 0;
      v234 = 0;
      v232 = v146;
    }
    v166 = (v145 ^ 1) & (v149 >> 6);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v231, (WTF::StringImpl *)0x4E, v145, 0);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v231, (WTF::StringImpl *)0x29, v145 ^ 1, 0);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v231, (WTF::StringImpl *)0x4D, v227, 0);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v231, (WTF::StringImpl *)0x4C, v166, 0);
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v232, &v233);
    LOBYTE(v149) = *(_BYTE *)(a1 + 160);
    v148 = v154;
    goto LABEL_299;
  }
LABEL_81:
  v68 = *(WebCore::ValidationMessage **)(a1 + 152);
  if (v68)
  {
    if (WebCore::ValidationMessage::isVisible(v68))
    {
      WebCore::ValidatedFormListedElement::focusableValidationAnchorElement((WebCore::ValidatedFormListedElement *)(a1 + 112), &v231);
      if (v231)
      {
        v230 = v231;
        WebCore::ValidatedFormListedElement::updateVisibleValidationMessage((_QWORD *)(a1 + 112), (uint64_t *)&v230);
        WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v230);
      }
    }
  }
LABEL_82:
  if (a3)
  {
    v69 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    v70 = (WTF::StringImpl *)((char *)v4 + 16 * a3);
    while (1)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 448))(a1, v4, v69, (uint64_t)v4 + 8, 2);
      v73 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      *(_QWORD *)(v73 + 1288) = ++WebCore::Document::s_globalTreeVersion;
      if ((*(_QWORD *)(a1 + 72) & 0x3000000000000000) == 0x2000000000000000)
        WebCore::CustomElementReactionQueue::enqueueAttributeChangedCallbackIfNeeded((WebCore::Element *)a1, (WTF::StringImpl ***)v4, MEMORY[0x1E0CBF2F8], (WTF::StringImpl **)v4 + 1, v72);
      if (*v69 == *((_QWORD *)v4 + 1))
        goto LABEL_95;
      v74 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      if (*(_DWORD *)(v74 + 1772))
      {
        if (*(_QWORD *)v4 == WebCore::HTMLNames::classAttr)
          break;
      }
      if (*(_DWORD *)(v74 + 1776)
        && (*(_QWORD *)v4 == WebCore::HTMLNames::idAttr || *(_QWORD *)v4 == WebCore::HTMLNames::nameAttr))
      {
        break;
      }
      if (*(_DWORD *)(v74 + 1780) && *(_QWORD *)v4 == WebCore::HTMLNames::nameAttr)
        break;
      if (*(_DWORD *)(v74 + 1784)
        && (*(_QWORD *)v4 == WebCore::HTMLNames::forAttr || *(_QWORD *)v4 == WebCore::HTMLNames::typeAttr))
      {
        break;
      }
      if (*(_DWORD *)(v74 + 1788))
      {
        v178 = *(WTF::StringImpl ***)v4;
        if (*(_QWORD *)v4 == WebCore::HTMLNames::nameAttr
          || v178 == (WTF::StringImpl **)WebCore::HTMLNames::idAttr
          || v178 == (WTF::StringImpl **)WebCore::HTMLNames::forAttr
          || v178 == (WTF::StringImpl **)WebCore::HTMLNames::formAttr
          || v178 == (WTF::StringImpl **)WebCore::HTMLNames::typeAttr)
        {
          break;
        }
      }
      if (*(_DWORD *)(v74 + 1792) && *(_QWORD *)v4 == WebCore::HTMLNames::hrefAttr || *(_DWORD *)(v74 + 1796))
        break;
LABEL_94:
      if (WebCore::Document::hasEverCreatedAnAXObjectCache)
      {
        v183 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8));
        if (v183)
        {
          v185 = v183;
          ++*((_DWORD *)v183 + 2);
          WebCore::AXObjectCache::deferAttributeChangeIfNeeded(v183, (WebCore::Element *)a1, (WebCore::QualifiedName::QualifiedNameImpl **)v4, MEMORY[0x1E0CBF2F8], (WTF::StringImpl *)((char *)v4 + 8), v184);
          v186 = *((_DWORD *)v185 + 2);
          if (!v186)
          {
            __break(0xC471u);
            JUMPOUT(0x194310C1CLL);
          }
          *((_DWORD *)v185 + 2) = v186 - 1;
        }
      }
LABEL_95:
      v4 = (WTF::StringImpl *)((char *)v4 + 16);
      if (v4 == v70)
        return;
    }
    v231 = &v233;
    v232 = 8;
    v103 = *(_QWORD **)(v74 + 1752);
    if (!v103)
    {
LABEL_163:
      v231 = &v233;
      v232 = 8;
      v104 = *(_QWORD **)(v74 + 1760);
      if (!v104)
      {
LABEL_164:
        v105 = a1;
        do
        {
          v106 = (WebCore::CollectionNamedElementCache **)(*(_QWORD *)(v105 + 72) & 0xFFFFFFFFFFFFLL);
          if (v106 && *v106)
            WebCore::NodeListsNodeData::invalidateCachesForAttribute(*v106, v4);
          v105 = *(_QWORD *)(v105 + 32);
        }
        while (v105);
        goto LABEL_94;
      }
      v187 = *((unsigned int *)v104 - 3);
      if (v187 >= 9)
      {
        if (v187 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x194310BFCLL);
        }
        v224 = *((_DWORD *)v104 - 3);
        v196 = WTF::fastMalloc((WTF *)(8 * v187));
        LODWORD(v232) = v224;
        v228 = (WTF *)v196;
        v231 = (unsigned __int8 **)v196;
        v104 = *(_QWORD **)(v74 + 1760);
        if (!v104)
          goto LABEL_388;
        LODWORD(v187) = *((_DWORD *)v104 - 3);
      }
      else
      {
        v228 = (WTF *)&v233;
      }
      if ((_DWORD)v187)
      {
        v188 = *((unsigned int *)v104 - 1);
        v189 = (unsigned __int8 **)v104;
        if ((_DWORD)v188)
        {
          v190 = 8 * v188;
          v189 = (unsigned __int8 **)v104;
          while ((unint64_t)(*v189 + 1) <= 1)
          {
            ++v189;
            v190 -= 8;
            if (!v190)
              goto LABEL_388;
          }
        }
        v191 = (unsigned __int8 **)&v104[v188];
        if (v189 != v191)
        {
          v192 = HIDWORD(v232);
          v197 = *v189;
LABEL_402:
          v231[v192++] = v197;
          while (++v189 != v191)
          {
            v197 = *v189;
            if ((unint64_t)(*v189 + 1) > 1)
            {
              if (v189 != v191)
                goto LABEL_402;
              break;
            }
          }
          HIDWORD(v232) = v192;
          v228 = (WTF *)v231;
          goto LABEL_389;
        }
      }
LABEL_388:
      v192 = HIDWORD(v232);
LABEL_389:
      if (v192)
      {
        v193 = 8 * v192;
        do
        {
          v194 = *(WebCore::CollectionNamedElementCache **)v228;
          v228 = (WTF *)((char *)v228 + 8);
          WebCore::HTMLCollection::invalidateCacheForAttribute(v194, (uint64_t *)v4);
          v193 -= 8;
        }
        while (v193);
        v228 = (WTF *)v231;
      }
      if (&v233 != (unsigned __int8 **)v228 && v228 != 0)
      {
        v231 = 0;
        LODWORD(v232) = 0;
        WTF::fastFree(v228, v71);
      }
      goto LABEL_164;
    }
    v198 = *((unsigned int *)v103 - 3);
    if (v198 < 9)
    {
      v229 = &v233;
    }
    else
    {
      if (v198 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x194310BF4);
      }
      v225 = *((_DWORD *)v103 - 3);
      v199 = WTF::fastMalloc((WTF *)(8 * v198));
      LODWORD(v232) = v225;
      v229 = (unsigned __int8 **)v199;
      v231 = (unsigned __int8 **)v199;
      v103 = *(_QWORD **)(v74 + 1752);
      if (!v103)
        goto LABEL_416;
      LODWORD(v198) = *((_DWORD *)v103 - 3);
    }
    if ((_DWORD)v198)
    {
      v200 = *((unsigned int *)v103 - 1);
      v201 = (unsigned __int8 **)v103;
      if ((_DWORD)v200)
      {
        v202 = 8 * v200;
        v201 = (unsigned __int8 **)v103;
        while ((unint64_t)(*v201 + 1) <= 1)
        {
          ++v201;
          v202 -= 8;
          if (!v202)
            goto LABEL_416;
        }
      }
      v204 = (unsigned __int8 **)&v103[v200];
      if (v201 != v204)
      {
        v203 = HIDWORD(v232);
        v205 = *v201;
LABEL_419:
        v231[v203++] = v205;
        while (++v201 != v204)
        {
          v205 = *v201;
          if ((unint64_t)(*v201 + 1) > 1)
          {
            if (v201 != v204)
              goto LABEL_419;
            break;
          }
        }
        HIDWORD(v232) = v203;
        v229 = v231;
        goto LABEL_424;
      }
    }
LABEL_416:
    v203 = HIDWORD(v232);
LABEL_424:
    if (v203)
    {
      v226 = 8 * v203;
      do
      {
        if ((*v229)[32] != 2)
        {
          switch((*v229)[32])
          {
            case 1u:
              v210 = *(WTF::StringImpl ***)v4;
              v211 = &WebCore::HTMLNames::classAttr;
              goto LABEL_436;
            case 3u:
              v210 = *(WTF::StringImpl ***)v4;
              v212 = WebCore::HTMLNames::nameAttr;
              goto LABEL_437;
            case 4u:
              v206 = *(WTF::StringImpl ***)v4;
              v207 = WebCore::HTMLNames::forAttr;
              v208 = WebCore::HTMLNames::typeAttr;
              goto LABEL_428;
            case 5u:
              v219 = *(WTF::StringImpl ***)v4;
              if (*(_QWORD *)v4 == WebCore::HTMLNames::nameAttr
                || v219 == (WTF::StringImpl **)WebCore::HTMLNames::idAttr
                || v219 == (WTF::StringImpl **)WebCore::HTMLNames::forAttr
                || v219 == (WTF::StringImpl **)WebCore::HTMLNames::formAttr
                || v219 == (WTF::StringImpl **)WebCore::HTMLNames::typeAttr)
              {
                goto LABEL_465;
              }
              goto LABEL_432;
            case 6u:
              v210 = *(WTF::StringImpl ***)v4;
              v211 = &WebCore::HTMLNames::hrefAttr;
LABEL_436:
              v212 = *v211;
LABEL_437:
              if (v210 == (WTF::StringImpl **)v212)
                goto LABEL_465;
              goto LABEL_432;
            case 7u:
              goto LABEL_465;
            default:
              goto LABEL_432;
          }
        }
        v206 = *(WTF::StringImpl ***)v4;
        v207 = WebCore::HTMLNames::idAttr;
        v208 = WebCore::HTMLNames::nameAttr;
LABEL_428:
        if (v206 == (WTF::StringImpl **)v207 || v206 == (WTF::StringImpl **)v208)
LABEL_465:
          (*(void (**)(unsigned __int8 *, _QWORD))(*(_QWORD *)*v229 + 80))(*v229, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v229 + 3) + 40) + 8));
LABEL_432:
        ++v229;
        v226 -= 8;
      }
      while (v226);
      v229 = v231;
    }
    if (&v233 != v229 && v229 != 0)
    {
      v231 = 0;
      LODWORD(v232) = 0;
      WTF::fastFree((WTF *)v229, v71);
    }
    goto LABEL_163;
  }
}

void WebCore::HTMLElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  unsigned int *v11;
  const WTF::StringImpl *v12;
  WebCore::Node *v13;
  WTF::StringBuilder *v14;
  __n128 v15;
  unsigned int *AssignedSlot;
  uint64_t v17;
  unsigned int v18;
  int *v19;
  unsigned int v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int i;
  uint64_t v35;
  int *v36;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t *v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  uint64_t v56;
  WTF::StringImpl **v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  WTF::StringImpl **v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WebCore::Page *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl **v81;

  WebCore::Element::attributeChanged(a1, a2, a3, a4, a5, a6);
  if (*(WTF::StringImpl **)a3 != *a4)
  {
    if (*(_QWORD *)a2 == WebCore::HTMLNames::styleAttr)
    {
      WebCore::StyledElement::styleAttributeChanged((WebCore::StyledElement *)a1, (WTF::StringImpl *)a4, a5);
      goto LABEL_4;
    }
    AssignedSlot = (unsigned int *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)a1 + 1144))(a1, a2);
    if ((_DWORD)AssignedSlot)
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4) |= 4u;
      if ((*(_BYTE *)(a1 + 22) & 8) != 0)
      {
        v24 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        if (*(_QWORD *)(v24 + 1944))
        {
          if (!*(_BYTE *)(v24 + 3405) && !*(_BYTE *)(v24 + 3392))
          {
            *(_WORD *)(a1 + 30) |= 0x10u;
            v25 = *(_QWORD *)(a1 + 64);
            v26 = HIWORD(v25) & 7;
            if (v26 <= 2)
            {
              *(_QWORD *)(a1 + 64) = v25 & 0xFFF8FFFFFFFFFFFFLL | 0x3000000000000;
              if (!(_DWORD)v26)
              {
                *(_DWORD *)(a1 + 24) += 2;
                v27 = *(unsigned __int16 *)(a1 + 28);
                if ((v27 & 0x80) != 0)
                {
                  v46 = *(_QWORD *)(a1 + 200);
                  if (!v46)
                    goto LABEL_84;
                }
                else if ((~v27 & 0x408) == 0
                       && (AssignedSlot = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 368))(a1),
                           (_DWORD)AssignedSlot))
                {
                  v46 = *(_QWORD *)(a1 + 112);
                  if (!v46)
                    goto LABEL_84;
                }
                else
                {
                  v11 = *(unsigned int **)(a1 + 32);
                  if (!v11)
                    goto LABEL_84;
                  v28 = *((_WORD *)v11 + 14);
                  if ((v28 & 0x80) == 0)
                  {
                    if ((v28 & 8) != 0)
                    {
                      if ((*((_QWORD *)v11 + 9) & 0xFFFFFFFFFFFFLL) == 0)
                        goto LABEL_37;
                      AssignedSlot = *(unsigned int **)((*((_QWORD *)v11 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
                      if (!AssignedSlot)
                        goto LABEL_37;
                      AssignedSlot = (unsigned int *)WebCore::ShadowRoot::findAssignedSlot((WebCore::ShadowRoot *)AssignedSlot, (const WebCore::Node *)a1);
                      v11 = AssignedSlot;
LABEL_107:
                      if (!v11)
                        goto LABEL_84;
LABEL_37:
                      *((_QWORD *)v11 + 8) |= 0x10000000000000uLL;
                      do
                      {
                        if ((*((_QWORD *)v11 + 9) & 0xFFFFFFFFFFFFLL) != 0)
                        {
                          v31 = *(_QWORD *)((*((_QWORD *)v11 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
                          if (v31)
                            *(_QWORD *)(v31 + 64) |= 0x8000000000000uLL;
                        }
                        v29 = *((_QWORD *)v11 + 8);
                        if ((v29 & 0x8000000000000) != 0)
                          break;
                        *((_QWORD *)v11 + 8) = v29 | 0x8000000000000;
                        AssignedSlot = (unsigned int *)*((_QWORD *)v11 + 4);
                        if (!AssignedSlot)
                          break;
                        v30 = *((_WORD *)AssignedSlot + 14);
                        if ((v30 & 0x80) != 0)
                        {
                          v58 = *((_QWORD *)AssignedSlot + 25);
                          if (!v58)
                            break;
                          AssignedSlot = *(unsigned int **)(v58 + 8);
                        }
                        else
                        {
                          if ((v30 & 8) == 0)
                            break;
                          if ((*((_QWORD *)AssignedSlot + 9) & 0xFFFFFFFFFFFFLL) != 0
                            && *(_QWORD *)((*((_QWORD *)AssignedSlot + 9) & 0xFFFFFFFFFFFFLL) + 0x58))
                          {
                            AssignedSlot = (unsigned int *)WebCore::ShadowRoot::findAssignedSlot(*(WebCore::ShadowRoot **)((*((_QWORD *)AssignedSlot + 9) & 0xFFFFFFFFFFFFLL)+ 0x58), (const WebCore::Node *)v11);
                          }
                        }
                        v11 = AssignedSlot;
                      }
                      while (AssignedSlot);
                    }
LABEL_84:
                    if (*(_DWORD *)(a1 + 24) == 2)
                    {
                      v52 = *(_WORD *)(a1 + 30);
                      if ((v52 & 0x400) == 0)
                      {
                        v53 = *(_WORD *)(a1 + 28);
                        if ((v53 & 0xF000) == 0x9000)
                        {
                          AssignedSlot = WebCore::Document::removedLastRef((WebCore::Document *)a1, v11);
                        }
                        else
                        {
                          if ((v53 & 0x20) != 0)
                          {
                            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 16))(*(_QWORD *)(a1 + 160));
                            v52 = *(_WORD *)(a1 + 30);
                          }
                          *(_WORD *)(a1 + 30) = v52 | 0x400;
                          AssignedSlot = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
                        }
                      }
                    }
                    else
                    {
                      *(_DWORD *)(a1 + 24) -= 2;
                    }
                    v47 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
                    v48 = *(_QWORD *)(v47 + 1272);
                    if (v48)
                    {
                      v49 = *(_QWORD *)(v48 + 64);
                      if ((v49 & 0x8000000000000) != 0
                        || (v49 & 0x7000000000000) != 0
                        || (*(_WORD *)(v48 + 30) & 0x20) != 0)
                      {
                        *(_DWORD *)(v47 + 24) += 2;
                        *(_QWORD *)(v47 + 64) |= 0x8000000000000uLL;
                        if ((*(_QWORD *)(v47 + 1536) & 0xFFFFFFFFFFFFLL) == 0
                          || (v15.n128_u64[0] = *(_QWORD *)((*(_QWORD *)(v47 + 1536) & 0xFFFFFFFFFFFFLL) + 8),
                              v15.n128_f64[0] == 0.0))
                        {
                          if (!*(_BYTE *)(v47 + 3362))
                          {
                            *(_QWORD *)(v47 + 1528) = 0;
                            WTF::MonotonicTime::now((WTF::MonotonicTime *)AssignedSlot);
                            WebCore::TimerBase::setNextFireTime(v47 + 1504, v50 + 0.0);
                            if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                            {
                              v59 = *(_QWORD *)(v47 + 528);
                              if (v59)
                              {
                                v60 = *(_QWORD *)(v59 + 8);
                                if (v60)
                                {
                                  v61 = *(_QWORD *)(v60 + 24);
                                  if (v61)
                                  {
                                    v62 = *(_QWORD *)(v61 + 8);
                                    if (v62)
                                      goto LABEL_121;
                                  }
                                }
                              }
                              v64 = *(_QWORD *)(v47 + 2632);
                              if (v64)
                              {
                                v65 = *(_QWORD *)(v64 + 8);
                                if (v65)
                                {
                                  v66 = *(_QWORD *)(v65 + 528);
                                  if (v66)
                                  {
                                    v67 = *(_QWORD *)(v66 + 8);
                                    if (v67)
                                    {
                                      v68 = *(_QWORD *)(v67 + 24);
                                      if (v68)
                                      {
                                        v62 = *(_QWORD *)(v68 + 8);
                                        if (v62)
                                        {
LABEL_121:
                                          v63 = *(WTF::StringImpl **)(*(_QWORD *)(v62 + 80) + 8);
                                          if (v63)
                                            WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl(v63, (WebCore::Document *)v47);
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        if (*(_DWORD *)(v47 + 24) == 2)
                        {
                          v54 = *(_WORD *)(v47 + 30);
                          if ((v54 & 0x400) == 0)
                          {
                            v55 = *(_WORD *)(v47 + 28);
                            if ((v55 & 0xF000) == 0x9000)
                            {
                              WebCore::Document::removedLastRef((WebCore::Document *)v47, v11);
                            }
                            else
                            {
                              if ((v55 & 0x20) != 0)
                              {
                                (*(void (**)(_QWORD))(**(_QWORD **)(v47 + 160) + 16))(*(_QWORD *)(v47 + 160));
                                v54 = *(_WORD *)(v47 + 30);
                              }
                              *(_WORD *)(v47 + 30) = v54 | 0x400;
                              (*(void (**)(uint64_t))(*(_QWORD *)v47 + 72))(v47);
                            }
                          }
                        }
                        else
                        {
                          *(_DWORD *)(v47 + 24) -= 2;
                        }
                      }
                    }
                    goto LABEL_4;
                  }
                  v46 = *((_QWORD *)v11 + 25);
                  if (!v46)
                    goto LABEL_84;
                }
                v11 = *(unsigned int **)(v46 + 8);
                goto LABEL_107;
              }
            }
          }
        }
      }
    }
  }
LABEL_4:
  v17 = *(_QWORD *)a2;
  v18 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v18 <= 0x30C)
  {
    if (v18 == 432)
    {
      WebCore::HTMLElement::dirAttributeChanged((WebCore::HTMLElement *)a1, (const WTF::AtomString *)a4, (uint64_t)v12, v13, v14, v15);
      return;
    }
    if (v18 == 520)
    {
      WebCore::Element::invalidateStyleInternal((WTF::MonotonicTime *)a1);
      return;
    }
    if (v18 != 521)
      goto LABEL_13;
    v73 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    *(_DWORD *)(v73 + 24) += 2;
    v81 = (WTF::StringImpl **)v73;
    if (*(_QWORD *)(v73 + 1248) == a1)
    {
      v74 = *(_QWORD *)(v73 + 528);
      if (v74)
      {
        v75 = *(_QWORD *)(v74 + 8);
        if (v75)
        {
          v76 = *(_QWORD *)(v75 + 24);
          if (v76)
          {
            v77 = *(WebCore::Page **)(v76 + 8);
            if (v77)
            {
              ++*(_DWORD *)v77;
              v78 = *(_QWORD *)(*((_QWORD *)v77 + 6) + 16);
              v79 = WebCore::HTMLElement::canonicalInputMode((WebCore::HTMLElement *)a1, (const WTF::AtomString *)v11, v12);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v78 + 872))(v78, a1, v79);
              WTF::RefCounted<WebCore::Page>::deref(v77);
            }
          }
        }
      }
    }
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v81);
  }
  else
  {
    switch(v18)
    {
      case 0x36Au:
        v40 = *a4;
        if (*a4)
        {
          v41 = (uint64_t *)*((_QWORD *)v40 + 1);
          v42 = *((unsigned int *)v40 + 1) | ((unint64_t)((*((_DWORD *)v40 + 4) >> 2) & 1) << 32);
        }
        else
        {
          v41 = 0;
          v42 = 0x100000000;
        }
        WebCore::parseHTMLInteger(v41, v42, (uint64_t *)&v81);
        if (HIDWORD(v81))
        {
          *(_QWORD *)(a1 + 72) &= 0xF3FFFFFFFFFFFFFFLL;
        }
        else
        {
          v43 = (int)v81;
          if ((_DWORD)v81)
          {
            if ((_DWORD)v81 == -1)
            {
              v44 = 0x800000000000000;
            }
            else
            {
              v45 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL;
              if (!v45)
              {
                WebCore::Node::materializeRareData((WebCore::Node *)a1);
                v45 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL;
              }
              *(_DWORD *)(v45 + 28) = v43;
              v44 = 0xC00000000000000;
            }
          }
          else
          {
            v44 = 0x400000000000000;
          }
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 72) & 0xF3FFFFFFFFFFFFFFLL | v44;
        }
        break;
      case 0x34Au:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3421))
        {
          v69 = WTF::equalLettersIgnoringASCIICase((uint64_t *)a3, "false", 6uLL);
          v70 = WTF::equalLettersIgnoringASCIICase((uint64_t *)a4, "false", 6uLL);
          if (v69 != v70)
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 1240))(a1, v70 ^ 1u);
        }
        break;
      case 0x30Du:
        if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 680) + 688) & 0x20000000) != 0)
          WebCore::HTMLElement::popoverAttributeChanged((WebCore::HTMLElement *)a1, a4, v12);
        return;
      default:
LABEL_13:
        {
          WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::$_0::operator()((uint64_t *)&v81);
          v71 = v81;
          v81 = 0;
          WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map = (uint64_t)v71;
          WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::~HashMap(&v81, v72);
          v17 = *(_QWORD *)a2;
        }
        if (*(_QWORD *)(v17 + 32))
          goto LABEL_19;
        v19 = *(int **)(v17 + 24);
        if (v19[1] < 3)
          goto LABEL_19;
        v20 = v19[4];
        v21 = *((_QWORD *)v19 + 1);
        if ((v20 & 4) != 0)
        {
          if (*(_BYTE *)v21 != 111)
          {
LABEL_19:
            v22 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_20:
            if (*v22)
            {
              WebCore::JSLazyEventListener::create((WebCore::JSLazyEventListener *)a1, a2, (const WebCore::QualifiedName *)a4, (uint64_t *)&v81);
              {
                v56 = WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
              }
              else
              {
                v80 = WebCore::g_commonVMOrNull;
                if (!WebCore::g_commonVMOrNull)
                  v80 = WebCore::commonVMSlow(0);
                v56 = *(_QWORD *)(*(_QWORD *)(v80 + 41456) + 16);
                WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = v56;
              }
              WebCore::EventTarget::setAttributeEventListener((WebCore::InspectorInstrumentation *)a1, v22, (const WTF::AtomString **)&v81, v56);
              v57 = v81;
              v81 = 0;
              if (v57)
              {
                if (*((_DWORD *)v57 + 4) == 1)
                  (*((void (**)(WTF::StringImpl **))*v57 + 1))(v57);
                else
                  --*((_DWORD *)v57 + 4);
              }
            }
            return;
          }
          v23 = *(unsigned __int8 *)(v21 + 1);
        }
        else
        {
          if (*(_WORD *)v21 != 111)
            goto LABEL_19;
          v23 = *(unsigned __int16 *)(v21 + 2);
        }
        v22 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
        if (v23 == 110)
        {
          v32 = *v19;
          *v19 += 2;
          if (WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map)
          {
            v33 = 0;
            for (i = v20 >> 8; ; i = v33 + v35)
            {
              v35 = i & *(_DWORD *)(WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map
                                  - 8);
              v36 = *(int **)(WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map
                            + 16 * v35);
              if (!v36)
                break;
              if (v36 != (int *)-1 && v36 == v19)
                goto LABEL_63;
              ++v33;
            }
            v35 = *(unsigned int *)(WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map
                                  - 4);
LABEL_63:
            v38 = WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map + 16 * v35;
          }
          else
          {
            v38 = 0;
          }
          if (v32)
            *v19 = v32;
          else
            WTF::StringImpl::destroy((WTF::StringImpl *)v19, (WTF::StringImpl *)v11);
          v39 = WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map;
          if (WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map)
            v39 = WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map
                + 16
                * *(unsigned int *)(WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map
                                  - 4);
          if (v38 != v39)
            v22 = (WTF::StringImpl **)(v38 + 8);
        }
        goto LABEL_20;
    }
  }
}

void WebCore::Element::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  WTF::StringImpl *v6;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  const WTF::AtomString *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  __int16 v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  WebCore::Node *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  BOOL hasPendingFullStyleRebuild;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  BOOL v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl **Attribute;
  uint64_t v91;
  uint64_t v92;
  WebCore::ShadowRoot *v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  uint64_t *v107;
  WTF::StringImpl *v108;
  uint64_t v109;

  v6 = *a4;
  if (*(WTF::StringImpl **)a3 == *a4)
    return;
  v9 = *(_QWORD *)a2;
  v10 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v10 > 0x200)
  {
    if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) <= 0x2FCu)
    {
      switch(v10)
      {
        case 0x201u:
          v45 = *(WTF::StringImpl **)(*(_QWORD *)(a1 + 104) + 24);
          if (v45)
            *(_DWORD *)v45 += 2;
          v101 = v45;
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3384) == 2)
          {
            WTF::AtomString::convertToASCIILowercase((WTF::AtomString *)a4);
            v6 = v105;
            v45 = v101;
          }
          else
          {
            if (v6)
              *(_DWORD *)v6 += 2;
            v105 = v6;
          }
          if (v6 != v45)
          {
            if ((*(_BYTE *)(a1 + 22) & 8) == 0)
              goto LABEL_207;
            v52 = *(uint64_t **)(a1 + 40);
            v53 = v52[1];
            if (!*(_QWORD *)(v53 + 1944) || *(_BYTE *)(v53 + 3405))
              goto LABEL_207;
            if ((*(_BYTE *)(a1 + 70) & 4) != 0)
            {
              v78 = *v52;
              v79 = (*(_WORD *)(v78 + 28) & 0x80) == 0 || v78 == 0;
              v80 = v78 + 216;
              if (v79)
                v80 = v53 + 1328;
              if (!*(_BYTE *)(*(_QWORD *)v80 + 236))
                goto LABEL_207;
            }
            v54 = *(_QWORD *)(v53 + 1272);
            if (v54 && (*(_BYTE *)(v54 + 70) & 4) != 0)
            {
LABEL_207:
              LOBYTE(v106) = 0;
              v108 = 0;
              v109 = 0;
              v107 = (uint64_t *)a1;
            }
            else
            {
              hasPendingFullStyleRebuild = WebCore::Document::hasPendingFullStyleRebuild((WebCore::Document *)v53);
              LOBYTE(v106) = !hasPendingFullStyleRebuild;
              v108 = 0;
              v109 = 0;
              v107 = (uint64_t *)a1;
              if (!hasPendingFullStyleRebuild)
              {
                if (v6)
                  *(_DWORD *)v6 += 2;
                v108 = v6;
                WebCore::Style::IdChangeInvalidation::invalidateStyle((unsigned __int8 **)&v106, (const WTF::AtomString *)&v101);
                WebCore::Style::IdChangeInvalidation::invalidateStyleWithRuleSets((WebCore::Style::IdChangeInvalidation *)&v106);
                v6 = v105;
              }
            }
            v81 = *(_QWORD *)(a1 + 104);
            if (v6)
              *(_DWORD *)v6 += 2;
            v82 = *(WTF::StringImpl **)(v81 + 24);
            *(_QWORD *)(v81 + 24) = v6;
            if (v82)
            {
              if (*(_DWORD *)v82 == 2)
                WTF::StringImpl::destroy(v82, a2);
              else
                *(_DWORD *)v82 -= 2;
            }
            if ((_BYTE)v106)
            {
              WebCore::Style::IdChangeInvalidation::invalidateStyle((unsigned __int8 **)&v106, (const WTF::AtomString *)&v108);
              WebCore::Style::IdChangeInvalidation::invalidateStyleWithRuleSets((WebCore::Style::IdChangeInvalidation *)&v106);
            }
            if (v109)
              WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v109, a2);
            v83 = v108;
            v108 = 0;
            if (v83)
            {
              if (*(_DWORD *)v83 == 2)
                WTF::StringImpl::destroy(v83, a2);
              else
                *(_DWORD *)v83 -= 2;
            }
          }
          v46 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 64);
          if (v46)
          {
            ++*(_DWORD *)v46;
            if (*(_QWORD *)a3)
            {
              if (*(_DWORD *)(*(_QWORD *)a3 + 4))
              {
                v61 = *(_QWORD *)(v46 + 8);
                if (v61)
                {
                  if (*(_DWORD *)(v61 - 12))
                    WebCore::IdTargetObserverRegistry::notifyObserversInternal((WTF::StringImpl **)v46, a3);
                }
              }
            }
            if (*a4)
            {
              if (*((_DWORD *)*a4 + 1))
              {
                v62 = *(_QWORD *)(v46 + 8);
                if (v62)
                {
                  if (*(_DWORD *)(v62 - 12))
                    WebCore::IdTargetObserverRegistry::notifyObserversInternal((WTF::StringImpl **)v46, (const WTF::AtomString *)a4);
                }
              }
            }
            if (!*(_DWORD *)v46)
            {
              __break(0xC471u);
              JUMPOUT(0x194311F24);
            }
            --*(_DWORD *)v46;
          }
          v47 = v105;
          v105 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
              WTF::StringImpl::destroy(v47, a2);
            else
              *(_DWORD *)v47 -= 2;
          }
          v48 = v101;
          v101 = 0;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2)
              WTF::StringImpl::destroy(v48, a2);
            else
              *(_DWORD *)v48 -= 2;
          }
          return;
        case 0x250u:
          *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4) = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4) & 0xFFFFFFFD | (2 * (v6 != 0));
          return;
        case 0x253u:
          if ((*(_WORD *)(a1 + 28) & 0x30) != 0)
          {
            if (v6)
              v19 = (const WTF::AtomString *)a4;
            else
              v19 = (const WTF::AtomString *)MEMORY[0x1E0CBF3B8];
            WebCore::Element::setNonce((_QWORD *)a1, v19);
          }
          return;
      }
      goto LABEL_26;
    }
    if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) <= 0x3B2u)
    {
      switch(v10)
      {
        case 0x381u:
          if ((*(_BYTE *)(a1 + 22) & 8) != 0)
          {
            v56 = *(_QWORD **)(a1 + 40);
            v57 = v56[1];
            if (*(_QWORD *)(v57 + 1944))
            {
              if (!*(_BYTE *)(v57 + 3405))
              {
                if ((*(_BYTE *)(a1 + 70) & 4) == 0)
                  goto LABEL_138;
                v84 = *v56;
                v85 = (*(_WORD *)(*v56 + 28) & 0x80) == 0 || v84 == 0;
                v86 = v84 + 216;
                if (v85)
                  v86 = v57 + 1328;
                if (*(_BYTE *)(*(_QWORD *)v86 + 236))
                {
LABEL_138:
                  v58 = *(_QWORD *)(v57 + 1272);
                  if ((!v58 || (*(_BYTE *)(v58 + 70) & 4) == 0)
                    && !WebCore::Document::hasPendingFullStyleRebuild((WebCore::Document *)v57))
                  {
                    v59 = *v56;
                    if (*v56)
                    {
                      if ((*(_WORD *)(v59 + 28) & 0x80) != 0 && !*(_BYTE *)(v59 + 193))
                        WebCore::Element::invalidateStyleForSubtree((WebCore::Element *)a1);
                    }
                  }
                }
              }
            }
          }
          return;
        case 0x2FDu:
          WebCore::Element::partAttributeChanged((WebCore::Element *)a1, a4);
          return;
        case 0x345u:
          v24 = *(_QWORD *)(a1 + 32);
          if (!v24 || (*(_WORD *)(v24 + 28) & 8) == 0)
            return;
          *(_DWORD *)(v24 + 24) += 2;
          if ((*(_QWORD *)(v24 + 72) & 0xFFFFFFFFFFFFLL) != 0)
          {
            v96 = *(_QWORD *)((*(_QWORD *)(v24 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
            if (v96)
            {
              v97 = *(_DWORD *)(v96 + 24);
              *(_DWORD *)(v96 + 24) = v97 + 2;
              v98 = *(_QWORD *)(v96 + 224);
              if (v98)
              {
                (*(void (**)(uint64_t, uint64_t, WTF::AtomString *, WTF::StringImpl **, uint64_t))(*(_QWORD *)v98 + 88))(v98, a1, a3, a4, v96);
                v97 = *(_DWORD *)(v96 + 24) - 2;
              }
              if (v97)
              {
                *(_DWORD *)(v96 + 24) = v97;
              }
              else if ((*(_WORD *)(v96 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v96, a2);
              }
            }
          }
          if (*(_DWORD *)(v24 + 24) != 2)
          {
            *(_DWORD *)(v24 + 24) -= 2;
            return;
          }
          if ((*(_WORD *)(v24 + 30) & 0x400) != 0)
            return;
          v35 = (WebCore::Node *)v24;
LABEL_73:
          WebCore::Node::removedLastRef(v35, a2);
          return;
      }
      goto LABEL_26;
    }
    if (v10 != 949 && v10 != 947)
    {
LABEL_26:
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v21 = *(_DWORD *)(v20 + 24);
      *(_DWORD *)(v20 + 24) = v21 + 2;
      if (v9 == WebCore::HTMLNames::aria_activedescendantAttr
        || (v22 = *(_QWORD *)(v20 + 680), (*(_QWORD *)(v22 + 688) & 0x20000000) != 0)
        && v9 == WebCore::HTMLNames::popovertargetAttr
        || (*(_QWORD *)(v22 + 680) & 0x80000000) != 0 && v9 == WebCore::HTMLNames::invoketargetAttr
        || (v10 - 307 <= 0x19 ? (v23 = ((1 << (v10 - 51)) & 0x2040295) == 0) : (v23 = 1), !v23))
      {
        if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) != 0)
        {
          WTF::HashMap<WebCore::QualifiedName,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::remove((uint64_t *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 224), (WebCore::QualifiedName::QualifiedNameImpl **)a2);
          v21 = *(_DWORD *)(v20 + 24) - 2;
        }
      }
      if (v21)
      {
        *(_DWORD *)(v20 + 24) = v21;
        return;
      }
      goto LABEL_71;
    }
    if (v9 != WebCore::HTMLNames::langAttr)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 16) & 0xFBFFFFFFFFFFFFFFLL | ((unint64_t)(v6 != 0) << 58);
LABEL_55:
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      *(_DWORD *)(v20 + 24) += 2;
      if (*(_QWORD *)(v20 + 1272) != a1)
      {
        WebCore::Element::updateEffectiveLangStateAndPropagateToDescendants((WebCore::Element *)a1, a2, (uint64_t)a3, (WTF::String *)a4, a6);
        goto LABEL_57;
      }
      v89 = *(_QWORD *)(a1 + 16);
      if ((v89 & 0x400000000000000) != 0)
      {
        v99 = &WebCore::XMLNames::langAttr;
      }
      else
      {
        if ((v89 & 0x200000000000000) == 0)
        {
          Attribute = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_242:
          WebCore::Document::setDocumentElementLanguage((WebCore::Document *)v20, Attribute, (uint64_t)a3, (WTF::String *)a4);
LABEL_57:
          if (*(_DWORD *)(v20 + 24) != 2)
          {
            *(_DWORD *)(v20 + 24) -= 2;
            return;
          }
LABEL_71:
          if ((*(_WORD *)(v20 + 30) & 0x400) != 0)
            return;
          v35 = (WebCore::Node *)v20;
          goto LABEL_73;
        }
        v99 = &WebCore::HTMLNames::langAttr;
      }
      Attribute = (WTF::StringImpl **)WebCore::Element::getAttribute((WebCore::Element *)a1, (const WebCore::QualifiedName *)v99, (uint64_t)a3, (WTF::String *)a4, a6);
      goto LABEL_242;
    }
    if (v6)
    {
      v25 = *(_WORD *)(a1 + 28);
      if ((v25 & 0x10) != 0)
      {
        v26 = (unint64_t *)(a1 + 16);
        v27 = *(_QWORD *)(a1 + 16);
      }
      else
      {
        v26 = (unint64_t *)(a1 + 16);
        v27 = *(_QWORD *)(a1 + 16);
        if ((v25 & 0x20) == 0)
        {
          v28 = 0;
          goto LABEL_54;
        }
      }
      v28 = 0x200000000000000;
    }
    else
    {
      v28 = 0;
      v26 = (unint64_t *)(a1 + 16);
      v27 = *(_QWORD *)(a1 + 16);
    }
LABEL_54:
    *v26 = v28 | v27 & 0xFDFFFFFFFFFFFFFFLL;
    goto LABEL_55;
  }
  if (v10 == 391)
  {
    if (!*(_QWORD *)(a1 + 104))
      WebCore::Element::ensureUniqueElementData((WebCore::Element *)a1);
    if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v60 = *(_QWORD *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x50);
      if (v60)
      {
        if (!*(_BYTE *)(v60 + 16))
          *(_BYTE *)(v60 + 17) = 1;
      }
    }
    if (a5 == 2)
    {
      v12 = *(_QWORD *)(a1 + 104);
      v13 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      v14 = *(WTF::StringImpl **)(v12 + 16);
      if (v14)
        v13 = *(WTF::StringImpl ***)(v12 + 16);
      v15 = *v13;
      v16 = *a4;
      if (v15 != *a4)
      {
        if (v16)
        {
          if (*((_DWORD *)v16 + 1))
          {
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3384) == 2)
            {
              WTF::AtomString::convertToASCIILowercase((WTF::AtomString *)a4);
            }
            else
            {
              *(_DWORD *)v16 += 2;
              v106 = v16;
            }
            WebCore::SpaceSplitStringData::create((WebCore::SpaceSplitStringData *)&v106, a2, &v101);
            v94 = v106;
            v106 = 0;
            if (v94)
            {
              if (*(_DWORD *)v94 == 2)
                WTF::StringImpl::destroy(v94, a2);
              else
                *(_DWORD *)v94 -= 2;
            }
            v12 = *(_QWORD *)(a1 + 104);
            v16 = v101;
            v14 = *(WTF::StringImpl **)(v12 + 16);
          }
          else
          {
            v16 = 0;
          }
        }
        v101 = 0;
        *(_QWORD *)(v12 + 16) = v16;
        if (v14)
        {
          v17 = *((_DWORD *)v14 + 2) - 1;
          if (*((_DWORD *)v14 + 2) != 1)
            goto LABEL_14;
          WebCore::SpaceSplitStringData::destroy(v14, a2);
          v14 = v101;
          v101 = 0;
          if (v14)
            goto LABEL_98;
        }
      }
      return;
    }
    v29 = *a4;
    if (*a4 && *((_DWORD *)v29 + 1))
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3384) == 2)
      {
        WTF::AtomString::convertToASCIILowercase((WTF::AtomString *)a4);
      }
      else
      {
        *(_DWORD *)v29 += 2;
        v106 = v29;
      }
      WebCore::SpaceSplitStringData::create((WebCore::SpaceSplitStringData *)&v106, a2, &v105);
      v36 = v106;
      v106 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, a2);
        else
          *(_DWORD *)v36 -= 2;
      }
    }
    else
    {
      v105 = 0;
    }
    v30 = *(_QWORD *)(a1 + 104);
    if ((*(_BYTE *)(a1 + 22) & 8) == 0)
      goto LABEL_86;
    v31 = *(uint64_t **)(a1 + 40);
    v32 = v31[1];
    if (!*(_QWORD *)(v32 + 1944) || *(_BYTE *)(v32 + 3405))
      goto LABEL_86;
    if ((*(_BYTE *)(a1 + 70) & 4) != 0)
    {
      v37 = *v31;
      v38 = (*(_WORD *)(v37 + 28) & 0x80) == 0 || v37 == 0;
      v39 = v37 + 216;
      if (v38)
        v39 = v32 + 1328;
      if (!*(_BYTE *)(*(_QWORD *)v39 + 236))
        goto LABEL_86;
    }
    v33 = *(_QWORD *)(v32 + 1272);
    if (v33 && (*(_BYTE *)(v33 + 70) & 4) != 0)
    {
LABEL_86:
      LOBYTE(v101) = 0;
      v103 = 0;
      v104 = 0;
      v102 = a1;
    }
    else
    {
      v34 = WebCore::Document::hasPendingFullStyleRebuild((WebCore::Document *)v32);
      LOBYTE(v101) = !v34;
      v103 = 0;
      v104 = 0;
      v102 = a1;
      if (!v34)
      {
        WebCore::Style::ClassChangeInvalidation::computeInvalidation((uint64_t)&v101, (uint64_t *)(v30 + 16), (uint64_t *)&v105);
        WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v102, &v103);
        v30 = *(_QWORD *)(a1 + 104);
      }
    }
    v40 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v41 = *(_QWORD *)(v40 + 2176);
    if (!v41 || !*(_DWORD *)(v41 - 12))
      goto LABEL_88;
    v49 = *(unsigned int *)(v41 - 4);
    v50 = *(uint64_t **)(v40 + 2176);
    if ((_DWORD)v49)
    {
      v51 = 16 * v49;
      v50 = *(uint64_t **)(v40 + 2176);
      while ((unint64_t)(*v50 + 1) <= 1)
      {
        v50 += 2;
        v51 -= 16;
        if (!v51)
          goto LABEL_234;
      }
    }
    v63 = (uint64_t *)(v41 + 16 * v49);
    if (v50 == v63)
    {
LABEL_234:
      *(_QWORD *)(v40 + 2176) = 0;
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(v41, a2);
      v87 = 0;
      v88 = *(_QWORD *)(v40 + 2176);
      *(_DWORD *)(v40 + 2184) = 0;
      if (v88)
      {
        v87 = *(_DWORD *)(v88 - 12);
        if (v87 > 0x7FFFFFFE)
          v87 = 0x7FFFFFFF;
      }
      *(_DWORD *)(v40 + 2188) = 2 * v87;
      goto LABEL_88;
    }
    v64 = *v50;
    while (!*(_QWORD *)(v64 + 8))
    {
      do
      {
        v50 += 2;
        if (v50 == v63)
          goto LABEL_234;
        v64 = *v50;
      }
      while ((unint64_t)(*v50 + 1) <= 1);
      if (v50 == v63)
        goto LABEL_234;
    }
    v65 = (uint64_t *)(v40 + 2176);
    *(_DWORD *)(a1 + 24) += 2;
    v66 = a1;
LABEL_162:
    v67 = v66;
    if ((*(_BYTE *)(v66 + 22) & 0x40) == 0)
      goto LABEL_163;
    WTF::WeakHashMap<WebCore::Node,std::unique_ptr<WebCore::QuerySelectorAllResults>,WebCore::WeakPtrImplWithEventTargetData>::find((uint64_t)v65, v66, (uint64_t)&v106);
    v68 = *v65;
    if (*v65)
      v68 += 16 * *(unsigned int *)(v68 - 4);
    a2 = (WTF::StringImpl *)v107;
    if (v107 == (uint64_t *)v68)
      goto LABEL_163;
    v69 = v107[1];
    v70 = *(_DWORD *)(v69 + 12);
    if (!v70)
      goto LABEL_192;
    a2 = 0;
    v71 = 0;
    while (1)
    {
      v72 = *(_QWORD *)(*(_QWORD *)v69 + 24 * (_QWORD)a2 + 16);
      if (v72)
      {
        v73 = *(_QWORD *)(v30 + 16);
        if (v73)
        {
          v74 = 0;
          do
          {
            v75 = *(_QWORD *)(v73 + 16 + 8 * v74) == v72;
            if (*(_QWORD *)(v73 + 16 + 8 * v74) == v72)
              break;
            ++v74;
          }
          while (v74 < *(unsigned int *)(v73 + 12));
        }
        else
        {
          v75 = 0;
        }
        if (v105)
        {
          v76 = 0;
          while (*((_QWORD *)v105 + v76 + 2) != v72)
          {
            if (++v76 >= (unint64_t)*((unsigned int *)v105 + 3))
              goto LABEL_183;
          }
          if (!v75)
          {
LABEL_263:
            v100 = v40;
            v95 = v69;
            WTF::Vector<WebCore::QuerySelectorAllResults::Entry,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(v69, a2);
            v69 = v95;
            v40 = v100;
            v70 = *(_DWORD *)(v69 + 12);
            goto LABEL_185;
          }
        }
        else
        {
LABEL_183:
          if (v75)
            goto LABEL_263;
        }
      }
      ++v71;
LABEL_185:
      a2 = (WTF::StringImpl *)v71;
      if (v70 <= v71)
      {
        if (!v70)
        {
          a2 = (WTF::StringImpl *)v107;
LABEL_192:
          WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::HashTableTraits>::remove(v65, a2);
          v77 = *(_DWORD *)(v40 + 2184);
          *(_DWORD *)(v40 + 2184) = v77 + 1;
          if (v77 > *(_DWORD *)(v40 + 2188))
            WTF::WeakHashMap<WebCore::Node,std::unique_ptr<WebCore::QuerySelectorAllResults>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences((uint64_t)v65, a2);
          *(_QWORD *)(v67 + 16) &= ~0x40000000000000uLL;
        }
LABEL_163:
        v66 = *(_QWORD *)(v67 + 32);
        if (v66)
          *(_DWORD *)(v66 + 24) += 2;
        if (*(_DWORD *)(v67 + 24) == 2)
        {
          if ((*(_WORD *)(v67 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v67, a2);
        }
        else
        {
          *(_DWORD *)(v67 + 24) -= 2;
        }
        if (!v66)
        {
LABEL_88:
          v42 = *(_QWORD *)(a1 + 104);
          v43 = v105;
          v105 = 0;
          v44 = *(WTF **)(v42 + 16);
          *(_QWORD *)(v42 + 16) = v43;
          if (v44)
          {
            if (*((_DWORD *)v44 + 2) == 1)
              WebCore::SpaceSplitStringData::destroy(v44, a2);
            else
              --*((_DWORD *)v44 + 2);
          }
          if ((_BYTE)v101)
            WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v102, &v104);
          if (v104)
            WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v104, a2);
          if (v103)
            WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v103, a2);
          v14 = v105;
          v105 = 0;
          if (v14)
          {
LABEL_98:
            v17 = *((_DWORD *)v14 + 2) - 1;
            if (*((_DWORD *)v14 + 2) == 1)
            {
              WebCore::SpaceSplitStringData::destroy(v14, a2);
              return;
            }
LABEL_14:
            *((_DWORD *)v14 + 2) = v17;
            return;
          }
          return;
        }
        goto LABEL_162;
      }
    }
  }
  if (v10 == 281)
  {
    v91 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    *(_DWORD *)(v91 + 24) += 2;
    v106 = (WTF::StringImpl *)v91;
    if (*(_QWORD *)(v91 + 1928))
      WebCore::Document::invalidateAccessKeyCacheSlowCase(v91, a2);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v106);
    return;
  }
  if (v10 != 457)
    goto LABEL_26;
  if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v92 = *(_QWORD *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v92)
    {
      *(_DWORD *)(v92 + 24) += 2;
      WebCore::ShadowRoot::invalidatePartMappings(v92, a2);
      WebCore::Style::Invalidator::invalidateShadowParts(v92, v93);
      if (*(_DWORD *)(v92 + 24) != 2)
      {
        *(_DWORD *)(v92 + 24) -= 2;
        return;
      }
      if ((*(_WORD *)(v92 + 30) & 0x400) == 0)
      {
        v35 = (WebCore::Node *)v92;
        goto LABEL_73;
      }
    }
  }
}

uint64_t WebCore::HTMLElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v4;

  v2 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  result = 1;
  if (v2 > 0x1F8)
  {
    if (v2 == 949 || v2 == 505 || v2 == 947)
      return result;
    return 0;
  }
  v4 = v2 - 411 > 0x20 || ((1 << (v2 + 101)) & 0x100200001) == 0;
  if (v4 && v2 != 286)
    return 0;
  return result;
}

void WebCore::HTMLElementFactory::createKnownElement(int a1@<W0>, uint64_t a2@<X1>, WebCore::Document *a3@<X2>, WebCore::HTMLFormElement *a4@<X3>, uint64_t *a5@<X8>)
{
  int v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)(WebCore::Node *__hidden);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t *v21;
  _DWORD *v22;
  uint64_t *v23;
  _DWORD *v24;
  uint64_t *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WebCore::Element *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;

  v6 = (int)a4;
  switch(a1)
  {
    case 1:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v25 = &WebCore::HTMLNames::abbrTag;
      goto LABEL_44;
    case 2:
      v52 = &WebCore::HTMLNames::acronymTag;
      goto LABEL_129;
    case 3:
      v52 = &WebCore::HTMLNames::addressTag;
      goto LABEL_129;
    case 4:
      v57 = bmalloc::api::isoAllocate();
      v58 = &WebCore::HTMLNames::appletTag;
      goto LABEL_216;
    case 5:
      WebCore::HTMLAreaElement::create((_DWORD **)&WebCore::HTMLNames::areaTag, a2, &v64);
      goto LABEL_130;
    case 6:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v27 = WebCore::HTMLNames::articleTag;
      if (WebCore::HTMLNames::articleTag)
        ++*(_DWORD *)WebCore::HTMLNames::articleTag;
      *(_QWORD *)(v9 + 96) = v27;
      *(_QWORD *)(v9 + 104) = 0;
      v11 = off_1E33B3D58;
      goto LABEL_5;
    case 7:
      v52 = &WebCore::HTMLNames::asideTag;
      goto LABEL_129;
    case 8:
      WebCore::attachmentConstructor((WebCore *)&v64, (const WebCore::QualifiedName *)&WebCore::HTMLNames::attachmentTag, (WebCore::Document *)a2, a4);
      goto LABEL_130;
    case 9:
      WebCore::audioConstructor((WebCore *)&v64, (const WebCore::QualifiedName *)&WebCore::HTMLNames::audioTag, (WebCore::Document *)a2, a4);
      goto LABEL_130;
    case 10:
      v52 = &WebCore::HTMLNames::bTag;
      goto LABEL_129;
    case 11:
      WebCore::HTMLBaseElement::create((_DWORD **)&WebCore::HTMLNames::baseTag, a2, &v64);
      goto LABEL_130;
    case 12:
      v52 = (uint64_t *)&WebCore::HTMLNames::basefontTag;
      goto LABEL_129;
    case 13:
      WebCore::HTMLBDIElement::create((_DWORD **)&WebCore::HTMLNames::bdiTag, a2, &v64);
      goto LABEL_130;
    case 14:
      v52 = &WebCore::HTMLNames::bdoTag;
      goto LABEL_129;
    case 15:
      v57 = bmalloc::api::isoAllocate();
      v58 = &WebCore::HTMLNames::bgsoundTag;
      goto LABEL_216;
    case 16:
      v52 = (uint64_t *)&WebCore::HTMLNames::bigTag;
      goto LABEL_129;
    case 17:
      WebCore::quoteConstructor((WebCore *)&v64, (const WebCore::QualifiedName *)&WebCore::HTMLNames::blockquoteTag, (WebCore::Document *)a2, a4);
      goto LABEL_25;
    case 18:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v38 = WebCore::HTMLNames::bodyTag;
      if (WebCore::HTMLNames::bodyTag)
        ++*(_DWORD *)WebCore::HTMLNames::bodyTag;
      *(_QWORD *)(v9 + 96) = v38;
      *(_QWORD *)(v9 + 104) = 0;
      v11 = off_1E33B5118;
      goto LABEL_5;
    case 19:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v39 = WebCore::HTMLNames::brTag;
      if (WebCore::HTMLNames::brTag)
        ++*(_DWORD *)WebCore::HTMLNames::brTag;
      *(_QWORD *)(v9 + 96) = v39;
      *(_QWORD *)(v9 + 104) = 0;
      v11 = off_1E33B4C28;
      goto LABEL_5;
    case 20:
      v18 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v18 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v18 + 24) = 0x1C1C00000002;
      *(_QWORD *)(v18 + 32) = 0;
      *(_QWORD *)(v18 + 40) = a2 + 96;
      *(_OWORD *)(v18 + 48) = 0u;
      *(_OWORD *)(v18 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v18 + 80) = 0;
      *(_QWORD *)(v18 + 88) = 0;
      v19 = WebCore::HTMLNames::buttonTag;
      if (WebCore::HTMLNames::buttonTag)
        ++*(_DWORD *)WebCore::HTMLNames::buttonTag;
      v20 = 0;
      *(_QWORD *)(v18 + 96) = v19;
      *(_QWORD *)(v18 + 104) = 0;
      *(_QWORD *)v18 = off_1E33BC680;
      *(_QWORD *)(v18 + 112) = off_1E33B3CE0;
      *(_QWORD *)(v18 + 120) = 0;
      if (a3)
      {
        v20 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a3);
        if (v20)
        {
          do
            v62 = __ldaxr(v20);
          while (__stlxr(v62 + 1, v20));
        }
      }
      *(_QWORD *)(v18 + 128) = v20;
      *(_QWORD *)(v18 + 136) = 0;
      *(_QWORD *)(v18 + 144) = 0;
      *(_QWORD *)(v18 + 152) = 0;
      *(_WORD *)(v18 + 160) = 3;
      *(_BYTE *)(v18 + 162) = *(_BYTE *)(v18 + 162) & 0xFC | 2;
      *(_DWORD *)(v18 + 164) = 0;
      *(_BYTE *)(v18 + 168) &= 0xF8u;
      *(_QWORD *)v18 = off_1E33B8508;
      *(_QWORD *)(v18 + 112) = &unk_1E33B8A90;
      *(_DWORD *)(v18 + 172) = 0;
      *(_BYTE *)(v18 + 176) = 0;
      goto LABEL_33;
    case 21:
      WebCore::HTMLCanvasElement::create((WebCore::HTMLCanvasElement *)&WebCore::HTMLNames::canvasTag, (const WebCore::QualifiedName *)a2, &v64);
      goto LABEL_25;
    case 22:
      WebCore::HTMLTableCaptionElement::create((_DWORD **)&WebCore::HTMLNames::captionTag, a2, &v64);
      goto LABEL_130;
    case 23:
      v52 = &WebCore::HTMLNames::centerTag;
      goto LABEL_129;
    case 24:
      v52 = &WebCore::HTMLNames::citeTag;
      goto LABEL_129;
    case 25:
      v52 = &WebCore::HTMLNames::codeTag;
      goto LABEL_129;
    case 26:
      v60 = &WebCore::HTMLNames::colTag;
      goto LABEL_161;
    case 27:
      v60 = &WebCore::HTMLNames::colgroupTag;
LABEL_161:
      WebCore::HTMLTableColElement::create((_DWORD **)v60, a2, &v64);
      goto LABEL_130;
    case 28:
      v57 = bmalloc::api::isoAllocate();
      v58 = (uint64_t *)&WebCore::HTMLNames::color_profileTag;
      goto LABEL_216;
    case 29:
      WebCore::HTMLDataElement::create(&WebCore::HTMLNames::dataTag, a2, &v64);
      goto LABEL_130;
    case 30:
      WebCore::datalistConstructor(&v64, (_DWORD **)&WebCore::HTMLNames::datalistTag, a2);
      goto LABEL_130;
    case 31:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v25 = &WebCore::HTMLNames::ddTag;
      goto LABEL_44;
    case 32:
      v54 = &WebCore::HTMLNames::delTag;
      goto LABEL_193;
    case 33:
      WebCore::HTMLDetailsElement::create((WebCore::HTMLDetailsElement *)&WebCore::HTMLNames::detailsTag, (const WebCore::QualifiedName *)a2, &v64);
      goto LABEL_130;
    case 34:
      v52 = &WebCore::HTMLNames::dfnTag;
      goto LABEL_129;
    case 35:
      v55 = WebCore::HTMLDialogElement::operator new(136);
      v56 = (_QWORD *)WebCore::HTMLDialogElement::HTMLDialogElement(v55, (_DWORD **)&WebCore::HTMLNames::dialogTag, a2);
      goto LABEL_217;
    case 36:
      WebCore::HTMLDirectoryElement::create(&WebCore::HTMLNames::dirTag, a2, &v64);
      goto LABEL_130;
    case 37:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v14 = WebCore::HTMLNames::divTag;
      if (WebCore::HTMLNames::divTag)
        ++*(_DWORD *)WebCore::HTMLNames::divTag;
      *(_QWORD *)(v9 + 96) = v14;
      *(_QWORD *)(v9 + 104) = 0;
      v11 = off_1E33B9CC0;
      goto LABEL_5;
    case 38:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v49 = WebCore::HTMLNames::dlTag;
      if (WebCore::HTMLNames::dlTag)
        ++*(_DWORD *)WebCore::HTMLNames::dlTag;
      *(_QWORD *)(v9 + 96) = v49;
      *(_QWORD *)(v9 + 104) = 0;
      v11 = off_1E33B91C0;
      goto LABEL_5;
    case 39:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v25 = &WebCore::HTMLNames::dtTag;
      goto LABEL_44;
    case 40:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v25 = &WebCore::HTMLNames::emTag;
      goto LABEL_44;
    case 41:
      WebCore::embedConstructor(&v64, (_DWORD **)&WebCore::HTMLNames::embedTag, a2);
      goto LABEL_130;
    case 42:
      v18 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v18 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v18 + 24) = 0x1C1C00000002;
      *(_QWORD *)(v18 + 32) = 0;
      *(_QWORD *)(v18 + 40) = a2 + 96;
      *(_OWORD *)(v18 + 48) = 0u;
      *(_OWORD *)(v18 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v18 + 80) = 0;
      *(_QWORD *)(v18 + 88) = 0;
      v43 = WebCore::HTMLNames::fieldsetTag;
      if (WebCore::HTMLNames::fieldsetTag)
        ++*(_DWORD *)WebCore::HTMLNames::fieldsetTag;
      v44 = 0;
      *(_QWORD *)(v18 + 96) = v43;
      *(_QWORD *)(v18 + 104) = 0;
      *(_QWORD *)v18 = off_1E33BC680;
      *(_QWORD *)(v18 + 112) = off_1E33B3CE0;
      *(_QWORD *)(v18 + 120) = 0;
      if (a3)
      {
        v44 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a3);
        if (v44)
        {
          do
            v63 = __ldaxr(v44);
          while (__stlxr(v63 + 1, v44));
        }
      }
      *(_QWORD *)(v18 + 128) = v44;
      *(_QWORD *)(v18 + 136) = 0;
      *(_QWORD *)(v18 + 144) = 0;
      *(_QWORD *)(v18 + 152) = 0;
      *(_WORD *)(v18 + 160) = 3;
      *(_BYTE *)(v18 + 162) = *(_BYTE *)(v18 + 162) & 0xFC | 2;
      *(_DWORD *)(v18 + 164) = 0;
      *(_BYTE *)(v18 + 168) &= 0xF8u;
      *(_QWORD *)v18 = off_1E33BB8C8;
      *(_QWORD *)(v18 + 112) = &unk_1E33BBE48;
      *(_QWORD *)(v18 + 176) = 0;
      *(_QWORD *)(v18 + 184) = 0;
      goto LABEL_33;
    case 43:
      v52 = &WebCore::HTMLNames::figcaptionTag;
      goto LABEL_129;
    case 44:
      v52 = &WebCore::HTMLNames::figureTag;
      goto LABEL_129;
    case 45:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v25 = &WebCore::HTMLNames::footerTag;
      goto LABEL_44;
    case 46:
      v47 = bmalloc::api::isoAllocate();
      v32 = v47;
      *(_OWORD *)(v47 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v47 + 24) = 0x181C00000002;
      *(_QWORD *)(v47 + 32) = 0;
      *(_QWORD *)(v47 + 40) = a2 + 96;
      *(_OWORD *)(v47 + 48) = 0u;
      *(_OWORD *)(v47 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v47 + 80) = 0;
      *(_QWORD *)(v47 + 88) = 0;
      v48 = WebCore::HTMLNames::formTag;
      if (WebCore::HTMLNames::formTag)
        ++*(_DWORD *)WebCore::HTMLNames::formTag;
      *(_QWORD *)(v47 + 96) = v48;
      *(_QWORD *)(v47 + 104) = 0;
      *(_QWORD *)v47 = off_1E33BCBD8;
      *(_WORD *)(v47 + 112) = 0;
      *(_QWORD *)(v47 + 120) = 0;
      *(_QWORD *)(v47 + 128) = 0;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_QWORD *)(v32 + 136) = v64;
      *(_OWORD *)(v32 + 237) = 0u;
      *(_OWORD *)(v32 + 208) = 0u;
      *(_OWORD *)(v32 + 224) = 0u;
      *(_OWORD *)(v32 + 176) = 0u;
      *(_OWORD *)(v32 + 192) = 0u;
      *(_OWORD *)(v32 + 144) = 0u;
      *(_OWORD *)(v32 + 160) = 0u;
      goto LABEL_75;
    case 47:
      WebCore::HTMLFrameElement::create((_DWORD **)&WebCore::HTMLNames::frameTag, a2, &v64);
      goto LABEL_130;
    case 48:
      WebCore::HTMLFrameSetElement::create((_DWORD **)&WebCore::HTMLNames::framesetTag, a2, &v64);
      goto LABEL_130;
    case 49:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v23 = &WebCore::HTMLNames::h1Tag;
      goto LABEL_40;
    case 50:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v23 = &WebCore::HTMLNames::h2Tag;
      goto LABEL_40;
    case 51:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v23 = &WebCore::HTMLNames::h3Tag;
      goto LABEL_40;
    case 52:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v23 = &WebCore::HTMLNames::h4Tag;
LABEL_40:
      v24 = (_DWORD *)*v23;
      if (v24)
        ++*v24;
      *(_QWORD *)(v9 + 96) = v24;
      *(_QWORD *)(v9 + 104) = 0;
      v11 = off_1E33C13C0;
      goto LABEL_5;
    case 53:
      v59 = &WebCore::HTMLNames::h5Tag;
      goto LABEL_156;
    case 54:
      v59 = &WebCore::HTMLNames::h6Tag;
LABEL_156:
      WebCore::HTMLHeadingElement::create((_DWORD **)v59, a2, &v64);
      goto LABEL_130;
    case 55:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v37 = WebCore::HTMLNames::headTag;
      if (WebCore::HTMLNames::headTag)
        ++*(_DWORD *)WebCore::HTMLNames::headTag;
      *(_QWORD *)(v9 + 96) = v37;
      *(_QWORD *)(v9 + 104) = 0;
      v11 = off_1E33BDFC0;
      goto LABEL_5;
    case 56:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v25 = &WebCore::HTMLNames::headerTag;
      goto LABEL_44;
    case 57:
      v52 = &WebCore::HTMLNames::hgroupTag;
      goto LABEL_129;
    case 58:
      WebCore::hrConstructor((WebCore *)&v64, (const WebCore::QualifiedName *)&WebCore::HTMLNames::hrTag, (WebCore::Document *)a2, a4);
      goto LABEL_130;
    case 59:
      WebCore::HTMLHtmlElement::create((_DWORD **)&WebCore::HTMLNames::htmlTag, a2, &v64);
      goto LABEL_130;
    case 60:
      v52 = &WebCore::HTMLNames::iTag;
      goto LABEL_129;
    case 61:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x141C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v50 = WebCore::HTMLNames::iframeTag;
      if (WebCore::HTMLNames::iframeTag)
        ++*(_DWORD *)WebCore::HTMLNames::iframeTag;
      *(_QWORD *)(v9 + 96) = v50;
      *(_QWORD *)(v9 + 104) = 0;
      *(_QWORD *)(v9 + 112) = 0;
      *(_DWORD *)(v9 + 120) = 0;
      *(_QWORD *)(v9 + 128) = 0;
      *(_BYTE *)(v9 + 136) = 0;
      *(_QWORD *)v9 = off_1E33C09B8;
      *(_QWORD *)(v9 + 144) = 0;
      *(_BYTE *)(v9 + 152) = 0;
      *(_QWORD *)(v9 + 160) = 0;
      goto LABEL_6;
    case 62:
      WebCore::HTMLImageElement::create((WebCore::HTMLImageElement *)&WebCore::HTMLNames::imgTag, (const WebCore::QualifiedName *)a2, a3, &v64);
      goto LABEL_25;
    case 63:
      WebCore::HTMLInputElement::create((WebCore::HTMLInputElement *)&WebCore::HTMLNames::inputTag, (const WebCore::QualifiedName *)a2, a3, a4, &v64);
      goto LABEL_25;
    case 64:
      v54 = &WebCore::HTMLNames::insTag;
LABEL_193:
      WebCore::HTMLModElement::create((_DWORD **)v54, a2, &v64);
      goto LABEL_130;
    case 65:
      v52 = &WebCore::HTMLNames::kbdTag;
      goto LABEL_129;
    case 66:
      v57 = bmalloc::api::isoAllocate();
      v58 = (uint64_t *)&WebCore::HTMLNames::keygenTag;
      goto LABEL_216;
    case 67:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v17 = WebCore::HTMLNames::labelTag;
      if (WebCore::HTMLNames::labelTag)
        ++*(_DWORD *)WebCore::HTMLNames::labelTag;
      *(_QWORD *)(v9 + 96) = v17;
      *(_QWORD *)(v9 + 104) = 0;
      *(_QWORD *)v9 = off_1E33C0ED0;
      *(_BYTE *)(v9 + 112) = 0;
      goto LABEL_6;
    case 68:
      WebCore::HTMLLegendElement::create((_DWORD **)&WebCore::HTMLNames::legendTag, a2, &v64);
      goto LABEL_130;
    case 69:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x141C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v10 = WebCore::HTMLNames::liTag;
      if (WebCore::HTMLNames::liTag)
        ++*(_DWORD *)WebCore::HTMLNames::liTag;
      *(_QWORD *)(v9 + 96) = v10;
      *(_QWORD *)(v9 + 104) = 0;
      v11 = off_1E33C04C8;
      goto LABEL_5;
    case 70:
      WebCore::HTMLLinkElement::create((_DWORD **)&WebCore::HTMLNames::linkTag, a2, (int)a4, &v64);
      goto LABEL_25;
    case 71:
      v61 = &WebCore::HTMLNames::listingTag;
      goto LABEL_222;
    case 72:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v25 = &WebCore::HTMLNames::mainTag;
      goto LABEL_44;
    case 73:
      WebCore::HTMLMapElement::create((_DWORD **)&WebCore::HTMLNames::mapTag, a2, &v64);
      goto LABEL_130;
    case 74:
      v52 = &WebCore::HTMLNames::markTag;
      goto LABEL_129;
    case 75:
      WebCore::HTMLMarqueeElement::create((WebCore::HTMLMarqueeElement *)&WebCore::HTMLNames::marqueeTag, (const WebCore::QualifiedName *)a2, &v64);
      goto LABEL_130;
    case 76:
      WebCore::HTMLMenuElement::create((_DWORD **)&WebCore::HTMLNames::menuTag, a2, &v64);
      goto LABEL_130;
    case 77:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v30 = WebCore::HTMLNames::metaTag;
      if (WebCore::HTMLNames::metaTag)
        ++*(_DWORD *)WebCore::HTMLNames::metaTag;
      *(_QWORD *)(v9 + 96) = v30;
      *(_QWORD *)(v9 + 104) = 0;
      *(_QWORD *)v9 = off_1E33C41B0;
      *(_BYTE *)(v9 + 112) = 0;
      *(_BYTE *)(v9 + 128) = 0;
      *(_BYTE *)(v9 + 136) = 0;
      *(_BYTE *)(v9 + 144) = 0;
      goto LABEL_6;
    case 78:
      WebCore::HTMLMeterElement::create((WebCore::HTMLMeterElement *)&WebCore::HTMLNames::meterTag, (const WebCore::QualifiedName *)a2, &v64);
      goto LABEL_130;
    case 79:
      WebCore::modelConstructor((WebCore *)&v64, (const WebCore::QualifiedName *)&WebCore::HTMLNames::modelTag, (WebCore::Document *)a2, a4);
      goto LABEL_130;
    case 80:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v25 = &WebCore::HTMLNames::navTag;
      goto LABEL_44;
    case 81:
      v52 = (uint64_t *)&WebCore::HTMLNames::nobrTag;
      goto LABEL_129;
    case 82:
      v52 = &WebCore::HTMLNames::noembedTag;
      goto LABEL_129;
    case 83:
      v52 = &WebCore::HTMLNames::noframesTag;
      goto LABEL_129;
    case 84:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v25 = &WebCore::HTMLNames::noscriptTag;
      goto LABEL_44;
    case 85:
      WebCore::HTMLObjectElement::create((_DWORD **)&WebCore::HTMLNames::objectTag, a2, (uint64_t)a3, &v64);
      goto LABEL_130;
    case 86:
      WebCore::HTMLOListElement::create((_DWORD **)&WebCore::HTMLNames::olTag, a2, &v64);
      goto LABEL_130;
    case 87:
      WebCore::HTMLOptGroupElement::create((_DWORD **)&WebCore::HTMLNames::optgroupTag, a2, &v64);
      goto LABEL_130;
    case 88:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x141C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v29 = WebCore::HTMLNames::optionTag;
      if (WebCore::HTMLNames::optionTag)
        ++*(_DWORD *)WebCore::HTMLNames::optionTag;
      *(_QWORD *)(v9 + 96) = v29;
      *(_QWORD *)(v9 + 104) = 0;
      *(_QWORD *)v9 = off_1E33C6620;
      *(_WORD *)(v9 + 112) = 0;
      *(_BYTE *)(v9 + 114) = 0;
      goto LABEL_6;
    case 89:
      WebCore::HTMLOutputElement::create((_DWORD **)&WebCore::HTMLNames::outputTag, a2, (uint64_t)a3, &v64);
      goto LABEL_130;
    case 90:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v16 = WebCore::HTMLNames::pTag;
      if (WebCore::HTMLNames::pTag)
        ++*(_DWORD *)WebCore::HTMLNames::pTag;
      *(_QWORD *)(v9 + 96) = v16;
      *(_QWORD *)(v9 + 104) = 0;
      v11 = off_1E33C9E10;
      goto LABEL_5;
    case 91:
      WebCore::HTMLParamElement::create((_DWORD **)&WebCore::HTMLNames::paramTag, a2, &v64);
      goto LABEL_130;
    case 92:
      WebCore::HTMLPictureElement::create((_DWORD **)&WebCore::HTMLNames::pictureTag, a2, &v64);
      goto LABEL_130;
    case 93:
      v52 = &WebCore::HTMLNames::plaintextTag;
      goto LABEL_129;
    case 94:
      v61 = &WebCore::HTMLNames::preTag;
      goto LABEL_222;
    case 95:
      WebCore::progressConstructor((WebCore *)&v64, (const WebCore::QualifiedName *)&WebCore::HTMLNames::progressTag, (WebCore::Document *)a2, a4);
      goto LABEL_130;
    case 96:
      WebCore::quoteConstructor((WebCore *)&v64, (const WebCore::QualifiedName *)&WebCore::HTMLNames::qTag, (WebCore::Document *)a2, a4);
      goto LABEL_130;
    case 97:
      v52 = &WebCore::HTMLNames::rbTag;
      goto LABEL_129;
    case 98:
      v52 = (uint64_t *)&WebCore::HTMLNames::rpTag;
      goto LABEL_129;
    case 99:
      v52 = &WebCore::HTMLNames::rtTag;
      goto LABEL_129;
    case 100:
      v52 = &WebCore::HTMLNames::rtcTag;
      goto LABEL_129;
    case 101:
      v52 = &WebCore::HTMLNames::rubyTag;
      goto LABEL_129;
    case 102:
      v52 = &WebCore::HTMLNames::sTag;
      goto LABEL_129;
    case 103:
      v52 = &WebCore::HTMLNames::sampTag;
      goto LABEL_129;
    case 104:
      v52 = &WebCore::HTMLNames::searchTag;
      goto LABEL_129;
    case 105:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v25 = &WebCore::HTMLNames::sectionTag;
      goto LABEL_44;
    case 106:
      WebCore::HTMLSelectElement::create((_DWORD **)&WebCore::HTMLNames::selectTag, a2, (uint64_t)a3, &v64);
LABEL_25:
      *a5 = v64;
      return;
    case 107:
      WebCore::HTMLSlotElement::create((_DWORD **)&WebCore::HTMLNames::slotTag, a2, &v64);
      goto LABEL_130;
    case 108:
      v52 = (uint64_t *)&WebCore::HTMLNames::smallTag;
      goto LABEL_129;
    case 109:
      WebCore::HTMLSourceElement::create((WebCore::HTMLSourceElement *)&WebCore::HTMLNames::sourceTag, (const WebCore::QualifiedName *)a2, &v64);
      goto LABEL_130;
    case 110:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v12 = WebCore::HTMLNames::spanTag;
      if (WebCore::HTMLNames::spanTag)
        ++*(_DWORD *)WebCore::HTMLNames::spanTag;
      *(_QWORD *)(v9 + 96) = v12;
      *(_QWORD *)(v9 + 104) = 0;
      v11 = off_1E33CBA30;
      goto LABEL_5;
    case 111:
      v52 = &WebCore::HTMLNames::strikeTag;
      goto LABEL_129;
    case 112:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v25 = &WebCore::HTMLNames::strongTag;
      goto LABEL_44;
    case 113:
      v52 = &WebCore::HTMLNames::subTag;
      goto LABEL_129;
    case 114:
      WebCore::HTMLSummaryElement::create((WebCore::HTMLSummaryElement *)&WebCore::HTMLNames::summaryTag, (const WebCore::QualifiedName *)a2, &v64);
      goto LABEL_130;
    case 115:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v25 = &WebCore::HTMLNames::supTag;
LABEL_44:
      v26 = (_DWORD *)*v25;
      if (v26)
        ++*v26;
      *(_QWORD *)(v9 + 96) = v26;
      *(_QWORD *)(v9 + 104) = 0;
      v11 = off_1E33BC680;
      goto LABEL_5;
    case 116:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v45 = WebCore::HTMLNames::tableTag;
      if (WebCore::HTMLNames::tableTag)
        ++*(_DWORD *)WebCore::HTMLNames::tableTag;
      *(_QWORD *)(v9 + 96) = v45;
      *(_QWORD *)(v9 + 104) = 0;
      *(_QWORD *)v9 = off_1E33CE0B0;
      *(_WORD *)(v9 + 112) = 0;
      *(_DWORD *)(v9 + 116) = 0;
      *(_WORD *)(v9 + 120) = 1;
      goto LABEL_14;
    case 117:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v40 = &WebCore::HTMLNames::tbodyTag;
      goto LABEL_89;
    case 118:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v21 = &WebCore::HTMLNames::tdTag;
      goto LABEL_35;
    case 119:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x181C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v42 = WebCore::HTMLNames::templateTag;
      if (WebCore::HTMLNames::templateTag)
        ++*(_DWORD *)WebCore::HTMLNames::templateTag;
      *(_QWORD *)(v9 + 96) = v42;
      *(_QWORD *)(v9 + 104) = 0;
      *(_QWORD *)v9 = off_1E33D0ED0;
      *(_QWORD *)(v9 + 112) = 0;
      *(_QWORD *)(v9 + 120) = 0;
      goto LABEL_6;
    case 120:
      v18 = bmalloc::api::isoAllocate();
      WebCore::HTMLTextAreaElement::HTMLTextAreaElement((WebCore::HTMLTextAreaElement *)v18, (WebCore::Document *)a2, a3);
      WebCore::Element::ensureUserAgentShadowRoot(v51);
LABEL_33:
      *a5 = v18;
      return;
    case 121:
      WebCore::HTMLTableSectionElement::create((_DWORD **)&WebCore::HTMLNames::tfootTag, a2, &v64);
      goto LABEL_130;
    case 122:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v21 = &WebCore::HTMLNames::thTag;
LABEL_35:
      v22 = (_DWORD *)*v21;
      if (v22)
        ++*v22;
      *(_QWORD *)(v9 + 96) = v22;
      *(_QWORD *)(v9 + 104) = 0;
      v11 = off_1E33CDBC0;
      goto LABEL_5;
    case 123:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v40 = &WebCore::HTMLNames::theadTag;
LABEL_89:
      v41 = (_DWORD *)*v40;
      if (v41)
        ++*v41;
      *(_QWORD *)(v9 + 96) = v41;
      *(_QWORD *)(v9 + 104) = 0;
      v11 = off_1E33CEFE8;
      goto LABEL_5;
    case 124:
      WebCore::HTMLTimeElement::create((_DWORD **)&WebCore::HTMLNames::timeTag, a2, &v64);
      goto LABEL_130;
    case 125:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v28 = WebCore::HTMLNames::trTag;
      if (WebCore::HTMLNames::trTag)
        ++*(_DWORD *)WebCore::HTMLNames::trTag;
      *(_QWORD *)(v9 + 96) = v28;
      *(_QWORD *)(v9 + 104) = 0;
      v11 = off_1E33CF4D8;
      goto LABEL_5;
    case 126:
      WebCore::trackConstructor((WebCore *)&v64, (const WebCore::QualifiedName *)&WebCore::HTMLNames::trackTag, (WebCore::Document *)a2, a4);
      goto LABEL_130;
    case 127:
      v52 = (uint64_t *)&WebCore::HTMLNames::ttTag;
      goto LABEL_129;
    case 128:
      v52 = &WebCore::HTMLNames::uTag;
      goto LABEL_129;
    case 129:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v15 = WebCore::HTMLNames::ulTag;
      if (WebCore::HTMLNames::ulTag)
        ++*(_DWORD *)WebCore::HTMLNames::ulTag;
      *(_QWORD *)(v9 + 96) = v15;
      *(_QWORD *)(v9 + 104) = 0;
      v11 = off_1E33D09E0;
LABEL_5:
      *(_QWORD *)v9 = v11;
      goto LABEL_6;
    case 130:
      v52 = &WebCore::HTMLNames::varTag;
LABEL_129:
      WebCore::HTMLElement::create((_DWORD **)v52, a2, &v64);
      goto LABEL_130;
    case 131:
      WebCore::videoConstructor((WebCore *)&v64, (const WebCore::QualifiedName *)&WebCore::HTMLNames::videoTag, (WebCore::Document *)a2, a4);
      goto LABEL_130;
    case 132:
      WebCore::HTMLWBRElement::create((_DWORD **)&WebCore::HTMLNames::wbrTag, a2, &v64);
      goto LABEL_130;
    case 133:
      v61 = &WebCore::HTMLNames::xmpTag;
LABEL_222:
      WebCore::HTMLPreElement::create((_DWORD **)v61, a2, &v64);
      goto LABEL_130;
    case 245:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v13 = WebCore::HTMLNames::aTag;
      if (WebCore::HTMLNames::aTag)
        ++*(_DWORD *)WebCore::HTMLNames::aTag;
      *(_QWORD *)(v9 + 96) = v13;
      *(_QWORD *)(v9 + 104) = 0;
      *(_QWORD *)v9 = off_1E33B3458;
      *(_QWORD *)(v9 + 112) = &unk_1E33B3958;
      *(_WORD *)(v9 + 120) = 0;
      *(_BYTE *)(v9 + 122) = 0;
      *(_DWORD *)(v9 + 124) = -1;
LABEL_14:
      *(_QWORD *)(v9 + 128) = 0;
      goto LABEL_6;
    case 246:
      v57 = bmalloc::api::isoAllocate();
      v58 = (uint64_t *)&WebCore::HTMLNames::annotation_xmlTag;
      goto LABEL_216;
    case 247:
      WebCore::HTMLFontElement::create((_DWORD **)&WebCore::HTMLNames::fontTag, a2, &v64);
      goto LABEL_130;
    case 248:
      v57 = bmalloc::api::isoAllocate();
      v58 = (uint64_t *)&WebCore::HTMLNames::font_faceTag;
      goto LABEL_216;
    case 249:
      v57 = bmalloc::api::isoAllocate();
      v58 = (uint64_t *)&WebCore::HTMLNames::font_face_formatTag;
      goto LABEL_216;
    case 250:
      v57 = bmalloc::api::isoAllocate();
      v58 = (uint64_t *)&WebCore::HTMLNames::font_face_nameTag;
      goto LABEL_216;
    case 251:
      v57 = bmalloc::api::isoAllocate();
      v58 = (uint64_t *)&WebCore::HTMLNames::font_face_srcTag;
      goto LABEL_216;
    case 252:
      v57 = bmalloc::api::isoAllocate();
      v58 = (uint64_t *)&WebCore::HTMLNames::font_face_uriTag;
      goto LABEL_216;
    case 253:
      v57 = bmalloc::api::isoAllocate();
      v58 = (uint64_t *)&WebCore::HTMLNames::imageTag;
      goto LABEL_216;
    case 254:
      v57 = bmalloc::api::isoAllocate();
      v58 = (uint64_t *)&WebCore::HTMLNames::missing_glyphTag;
LABEL_216:
      v56 = (_QWORD *)WebCore::Element::Element(v57, (_DWORD **)v58, a2, 272);
      *v56 = off_1E321E008;
LABEL_217:
      v64 = 0;
      *a5 = (uint64_t)v56;
      goto LABEL_131;
    case 255:
      WebCore::scriptConstructor((WebCore *)&v64, (const WebCore::QualifiedName *)&WebCore::HTMLNames::scriptTag, (WebCore::Document *)a2, a4);
LABEL_130:
      v53 = v64;
      v64 = 0;
      *a5 = v53;
LABEL_131:
      WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref(&v64);
      break;
    case 256:
      v31 = bmalloc::api::isoAllocate();
      v32 = v31;
      *(_OWORD *)(v31 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v31 + 24) = 0x101C00000002;
      *(_QWORD *)(v31 + 32) = 0;
      *(_QWORD *)(v31 + 40) = a2 + 96;
      *(_OWORD *)(v31 + 48) = 0u;
      *(_OWORD *)(v31 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v31 + 80) = 0;
      *(_QWORD *)(v31 + 88) = 0;
      v33 = WebCore::HTMLNames::styleTag;
      if (WebCore::HTMLNames::styleTag)
        ++*(_DWORD *)WebCore::HTMLNames::styleTag;
      *(_QWORD *)(v31 + 96) = v33;
      *(_QWORD *)(v31 + 104) = 0;
      *(_QWORD *)v31 = off_1E33CD4C8;
      *(_BYTE *)(v31 + 112) = v6;
      *(_BYTE *)(v31 + 113) = 0;
      *(_DWORD *)(v31 + 116) = 0;
      *(_DWORD *)(v31 + 120) = 0;
      *(_OWORD *)(v31 + 128) = 0uLL;
      *(_OWORD *)(v31 + 144) = 0uLL;
      if (v6)
      {
        v34 = *(_QWORD *)(a2 + 728);
        if (v34)
        {
          if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34) && *(_DWORD *)(a2 + 3272) == 0)
          {
            v36 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 728) + 16))(*(_QWORD *)(a2 + 728));
            *(_QWORD *)(v32 + 116) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 168))(v36);
          }
        }
      }
      *(_BYTE *)(v32 + 160) = 0;
LABEL_75:
      *a5 = v32;
      break;
    case 257:
      v9 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v9 + 24) = 0x101C00000002;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = a2 + 96;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      ++*(_DWORD *)(a2 + 3324);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v46 = WebCore::HTMLNames::titleTag;
      if (WebCore::HTMLNames::titleTag)
        ++*(_DWORD *)WebCore::HTMLNames::titleTag;
      *(_QWORD *)v9 = off_1E33D13C0;
      *(_QWORD *)(v9 + 104) = 0;
      *(_QWORD *)(v9 + 112) = 0;
      *(_QWORD *)(v9 + 96) = v46;
      *(_BYTE *)(v9 + 120) = 0;
LABEL_6:
      *a5 = v9;
      break;
    default:
      *a5 = 0;
      break;
  }
}

uint64_t WebCore::SpaceSplitStringData::create@<X0>(WebCore::SpaceSplitStringData *this@<X0>, const WTF::AtomString *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  _DWORD *v8;
  int v9;
  int i;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  _DWORD *v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;

  if ((_MergedGlobals_174 & 1) != 0)
  {
    v5 = qword_1ECE83228;
    if (qword_1ECE83228)
      goto LABEL_3;
  }
  else
  {
    qword_1ECE83228 = 0;
    _MergedGlobals_174 = 1;
  }
  WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::SpaceSplitStringData *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::SpaceSplitStringData *>>,WTF::AtomStringHash,WTF::HashMap<WTF::AtomString,WebCore::SpaceSplitStringData *,WTF::AtomStringHash,WebCore::SpaceSplitStringTableKeyTraits,WTF::HashTraits<WebCore::SpaceSplitStringData *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SpaceSplitStringTableKeyTraits>::expand(0);
  v5 = qword_1ECE83228;
  if (!qword_1ECE83228)
  {
    v6 = 0;
    goto LABEL_4;
  }
LABEL_3:
  v6 = *(_DWORD *)(v5 - 8);
LABEL_4:
  v7 = 0;
  v8 = *(_DWORD **)this;
  v9 = *(_DWORD *)(*(_QWORD *)this + 16) >> 8;
  for (i = 1; ; ++i)
  {
    v11 = v9 & v6;
    v12 = v5 + 16 * v11;
    result = *(_QWORD *)v12;
    if (*(_QWORD *)v12 != -1)
      break;
    v7 = (_QWORD *)(v5 + 16 * v11);
LABEL_8:
    v9 = i + v11;
  }
  if (!result)
  {
    if (v7)
    {
      result = 0;
      *v7 = 0;
      v7[1] = 0;
      --*(_DWORD *)(v5 - 16);
      v8 = *(_DWORD **)this;
      v12 = (uint64_t)v7;
    }
    if (v8)
      *v8 += 2;
    *(_QWORD *)v12 = v8;
    *(_QWORD *)(v12 + 8) = 0;
    if (qword_1ECE83228)
      v15 = *(_DWORD *)(qword_1ECE83228 - 12) + 1;
    else
      v15 = 1;
    *(_DWORD *)(qword_1ECE83228 - 12) = v15;
    if (qword_1ECE83228)
      v16 = *(_DWORD *)(qword_1ECE83228 - 12);
    else
      v16 = 0;
    v17 = (*(_DWORD *)(qword_1ECE83228 - 16) + v16);
    v18 = *(unsigned int *)(qword_1ECE83228 - 4);
    if (v18 > 0x400)
    {
      if (v18 > 2 * v17)
        goto LABEL_23;
    }
    else if (3 * v18 > 4 * v17)
    {
      goto LABEL_23;
    }
    result = (uint64_t)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::SpaceSplitStringData *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::SpaceSplitStringData *>>,WTF::AtomStringHash,WTF::HashMap<WTF::AtomString,WebCore::SpaceSplitStringData *,WTF::AtomStringHash,WebCore::SpaceSplitStringTableKeyTraits,WTF::HashTraits<WebCore::SpaceSplitStringData *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SpaceSplitStringTableKeyTraits>::expand((WTF::StringImpl **)v12);
    v12 = result;
LABEL_23:
    v19 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v20 = *(_QWORD **)(v19 + 8);
      v21 = *(unsigned int *)(v19 + 4);
      if ((*(_BYTE *)(v19 + 16) & 4) != 0)
      {
        if ((_DWORD)v21)
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          do
          {
            v25 = v24 + 2;
            while (1)
            {
              v26 = *((unsigned __int8 *)v20 + v23);
              v27 = v26 > 0x20;
              v28 = (1 << v26) & 0x100003600;
              if (v27 || v28 == 0)
                break;
              v23 = v24 + 1;
              ++v25;
              v24 = v23;
              if (v23 >= v21)
                goto LABEL_33;
            }
            v40 = v24;
            result = 1;
            v41 = (char *)v20 + v24;
            do
            {
              v24 = v25;
              v42 = result;
              if (v40 + result >= v21)
                break;
              v43 = v41[result];
              ++v25;
              ++result;
              v27 = v43 > 0x20;
              a2 = (const WTF::AtomString *)((1 << v43) & 0x100003600);
            }
            while (v27 || a2 == 0);
            if (v21 - v23 < v42)
              goto LABEL_122;
            v22 = (v22 + 1);
            v23 = v24;
          }
          while (v24 < v21);
LABEL_33:
          if ((_DWORD)v22)
          {
            if (v22 >= 0x1FFFFFFD)
            {
              __break(0xC471u);
              JUMPOUT(0x1943142BCLL);
            }
            result = WTF::fastMalloc((WTF *)(8 * v22 + 16));
            v30 = *(_DWORD **)this;
            if (*(_QWORD *)this)
              *v30 += 2;
            *(_QWORD *)result = v30;
            *(_DWORD *)(result + 8) = 1;
            *(_DWORD *)(result + 12) = v22;
            v31 = *(_QWORD *)this;
            if (*(_QWORD *)this)
            {
              v20 = (_QWORD *)(result + 16);
              v32 = *(_QWORD *)(v31 + 8);
              v33 = *(unsigned int *)(v31 + 4);
              if ((*(_BYTE *)(v31 + 16) & 4) != 0)
              {
                if ((_DWORD)v33)
                {
                  v34 = 0;
                  v35 = 0;
                  v22 = 1;
                  do
                  {
                    v36 = v35 + 2;
                    while (1)
                    {
                      v37 = *(unsigned __int8 *)(v32 + v34);
                      v27 = v37 > 0x20;
                      v38 = (1 << v37) & 0x100003600;
                      if (v27 || v38 == 0)
                        break;
                      v34 = v35 + 1;
                      ++v36;
                      v35 = v34;
                      if (v34 >= v33)
                        goto LABEL_47;
                    }
                    v45 = v35;
                    v46 = 1;
                    v47 = v32 + v35;
                    do
                    {
                      v48 = v36;
                      a2 = (const WTF::AtomString *)v46;
                      if (v45 + v46 >= v33)
                        break;
                      v49 = *(unsigned __int8 *)(v47 + v46);
                      ++v36;
                      ++v46;
                      v27 = v49 > 0x20;
                      v50 = (1 << v49) & 0x100003600;
                    }
                    while (v27 || v50 == 0);
                    if (v33 - v34 < (unint64_t)a2)
                      goto LABEL_122;
                    v52 = *(_DWORD **)this;
                    v77 = v32;
                    v78 = result;
                    v79 = v20;
                    v80 = v33;
                    v76 = v48;
                    if (*(_QWORD *)this)
                    {
                      if (v52[1] == (_DWORD)a2)
                      {
                        *v52 += 2;
LABEL_91:
                        *v20 = v52;
                        goto LABEL_69;
                      }
                    }
                    else if (!(_DWORD)a2)
                    {
                      goto LABEL_91;
                    }
                    WTF::AtomStringImpl::add();
                    v20 = v79;
                    *v79 = v81;
LABEL_69:
                    ++v20;
                    v35 = v76;
                    v34 = v76;
                    v33 = v80;
                    v32 = v77;
                    result = v78;
                  }
                  while (v76 < v80);
                }
              }
              else if ((_DWORD)v33)
              {
                v59 = 0;
                v60 = 0;
                v22 = 1;
                goto LABEL_83;
              }
            }
LABEL_47:
            *a3 = result;
            *(_QWORD *)(v12 + 8) = result;
            return result;
          }
        }
      }
      else if ((_DWORD)v21)
      {
        v22 = 0;
        v53 = 0;
        v54 = 0;
        while (1)
        {
          v55 = v54 + 2;
          while (1)
          {
            v56 = *((unsigned __int16 *)v20 + v53);
            v27 = v56 > 0x20;
            v57 = (1 << v56) & 0x100003600;
            if (v27 || v57 == 0)
              break;
            v53 = v54 + 1;
            ++v55;
            v54 = v53;
            if (v53 >= v21)
              goto LABEL_33;
          }
          v65 = v54;
          result = 1;
          v66 = (char *)v20 + 2 * v54;
          do
          {
            v54 = v55;
            v67 = result;
            if (v65 + result >= v21)
              break;
            v68 = *(unsigned __int16 *)&v66[2 * result];
            ++v55;
            ++result;
            v27 = v68 > 0x20;
            a2 = (const WTF::AtomString *)((1 << v68) & 0x100003600);
          }
          while (v27 || a2 == 0);
          if (v21 - v53 < v67)
            break;
          v22 = (v22 + 1);
          v53 = v54;
          if (v54 >= v21)
            goto LABEL_33;
        }
LABEL_122:
        __break(1u);
LABEL_123:
        if ((_DWORD)a2)
        {
LABEL_124:
          WTF::AtomStringImpl::add();
          *v79 = v81;
          goto LABEL_118;
        }
        while (1)
        {
          *v79 = v20;
LABEL_118:
          v33 = v80;
          v20 = v79 + 1;
          v60 = v76;
          v59 = v76;
          v32 = v77;
          result = v78;
          if (v76 >= v80)
            goto LABEL_47;
LABEL_83:
          v61 = v60 + 2;
          while (1)
          {
            v62 = *(unsigned __int16 *)(v32 + 2 * v59);
            v27 = v62 > 0x20;
            v63 = (v22 << v62) & 0x100003600;
            if (v27 || v63 == 0)
              break;
            v59 = v60 + 1;
            ++v61;
            v60 = v59;
            if (v59 >= v33)
              goto LABEL_47;
          }
          v79 = v20;
          v80 = v33;
          v77 = v32;
          v78 = result;
          v70 = v60;
          v71 = 1;
          v72 = v32 + 2 * v60;
          do
          {
            v76 = v61;
            a2 = (const WTF::AtomString *)v71;
            if (v70 + v71 >= v80)
              break;
            v73 = *(unsigned __int16 *)(v72 + 2 * v71);
            ++v61;
            ++v71;
            v27 = v73 > 0x20;
            v74 = (v22 << v73) & 0x100003600;
          }
          while (v27 || v74 == 0);
          v20 = (_QWORD *)(v80 - v59);
          if (v80 - v59 < (unint64_t)a2)
            goto LABEL_122;
          v20 = *(_QWORD **)this;
          if (!*(_QWORD *)this)
            goto LABEL_123;
          if (*((_DWORD *)v20 + 1) != (_DWORD)a2)
            goto LABEL_124;
          *(_DWORD *)v20 += 2;
        }
      }
    }
    *a3 = 0;
    return result;
  }
  if ((_DWORD *)result != v8)
    goto LABEL_8;
  v14 = *(_QWORD *)(v5 + 16 * v11 + 8);
  if (v14)
    ++*(_DWORD *)(v14 + 8);
  *a3 = v14;
  return result;
}

void WebCore::HTMLAnchorElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF *v21;
  char v22;
  uint64_t v23;
  WTF *v24;
  void *v25;
  const WTF::AtomString *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::Document *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF *v39;

  WebCore::HTMLElement::attributeChanged(a1, a2, a3, a4, a5, a6);
  if (*(_QWORD *)a2 != WebCore::HTMLNames::hrefAttr)
  {
    if (*(_QWORD *)a2 != WebCore::HTMLNames::relAttr)
      return;
    if ((byte_1ECE833E9 & 1) == 0)
    {
      v36 = (WTF::StringImpl *)"noreferrer";
      v37 = 11;
      WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1ECE833F8, (uint64_t)&v36);
      byte_1ECE833E9 = 1;
    }
    if ((byte_1ECE833EA & 1) == 0)
    {
      v36 = (WTF::StringImpl *)"noopener";
      v37 = 9;
      WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1ECE83400, (uint64_t)&v36);
      byte_1ECE833EA = 1;
    }
    if ((byte_1ECE833EB & 1) == 0)
    {
      v36 = (WTF::StringImpl *)"opener";
      v37 = 7;
      WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1ECE83408, (uint64_t)&v36);
      byte_1ECE833EB = 1;
    }
    if (*a4 && *((_DWORD *)*a4 + 1))
    {
      WTF::AtomString::convertToASCIILowercase((WTF::AtomString *)a4);
      WebCore::SpaceSplitStringData::create((WebCore::SpaceSplitStringData *)&v36, v26, &v39);
      v27 = v36;
      v36 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v9);
        else
          *(_DWORD *)v27 -= 2;
      }
      v21 = v39;
      if (v39)
      {
        v28 = 0;
        while (*((_QWORD *)v39 + v28 + 2) != qword_1ECE833F8)
        {
          if (++v28 >= (unint64_t)*((unsigned int *)v39 + 3))
            goto LABEL_48;
        }
        *(_BYTE *)(a1 + 122) |= 1u;
LABEL_48:
        v29 = 0;
        while (*((_QWORD *)v21 + v29 + 2) != qword_1ECE83400)
        {
          if (++v29 >= (unint64_t)*((unsigned int *)v21 + 3))
            goto LABEL_51;
        }
        *(_BYTE *)(a1 + 122) |= 2u;
LABEL_51:
        v30 = 0;
        while (*((_QWORD *)v21 + v30 + 2) != qword_1ECE83408)
        {
          if (++v30 >= (unint64_t)*((unsigned int *)v21 + 3))
          {
            v22 = 0;
            goto LABEL_34;
          }
        }
        v22 = 0;
        *(_BYTE *)(a1 + 122) |= 4u;
        goto LABEL_34;
      }
    }
    else
    {
      v21 = 0;
    }
    v22 = 1;
LABEL_34:
    v23 = *(_QWORD *)(a1 + 128);
    if (v23 && !*(_BYTE *)(v23 + 16))
      *(_BYTE *)(v23 + 17) = 1;
    v39 = 0;
    if ((v22 & 1) == 0)
    {
      if (*((_DWORD *)v21 + 2) == 1)
        WebCore::SpaceSplitStringData::destroy(v21, v9);
      else
        --*((_DWORD *)v21 + 2);
    }
    return;
  }
  if (*a4)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
    if (v10
      && (v11 = *(_QWORD *)(v10 + 8)) != 0
      && (v12 = *(_QWORD *)(v11 + 24)) != 0
      && (v13 = *(_QWORD *)(v12 + 8)) != 0)
    {
      ++*(_DWORD *)v13;
      v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v13 + 48) + 16) + 1352))(*(_QWORD *)(*(_QWORD *)(v13 + 48) + 16));
      if (*(_DWORD *)v13 == 1)
      {
        WebCore::Page::~Page(v13);
        WTF::fastFree(v24, v25);
      }
      else
      {
        --*(_DWORD *)v13;
      }
    }
    else
    {
      v14 = 0;
    }
    v15 = (void *)(v14 ^ 1u);
  }
  else
  {
    v15 = 0;
  }
  WebCore::Element::setIsLink((unsigned __int8 *)a1, v15);
  if ((*(_WORD *)(a1 + 30) & 1) != 0)
  {
    WTF::String::trim();
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v18 = *(unsigned __int8 *)(v17 + 3397);
    if (v18 == 2)
    {
      WebCore::Document::initDNSPrefetch(*(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8), v16);
      v18 = *(unsigned __int8 *)(v17 + 3397);
    }
    if (v18 == 1)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
      if (v19)
      {
        if (*(_QWORD *)(v19 + 8))
        {
          if ((WTF::protocolIsInHTTPFamily() & 1) != 0)
            goto LABEL_55;
          if (!v39)
            return;
          if (WTF::StringImpl::startsWith())
          {
LABEL_55:
            v31 = *(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8);
            v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v31 + 66) + 8) + 280) + 16);
            WebCore::Document::completeURL(v31, &v39, (uint64_t)v31 + 848, 0, (WTF::URL *)&v36);
            WTF::URL::host((WTF::URL *)&v36);
            if ((v33 & 0xFF00000000) != 0)
              WTF::String::String();
            else
              WTF::String::String();
            (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v32 + 1104))(v32, &v38);
            v34 = v38;
            v38 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
                WTF::StringImpl::destroy(v34, v16);
              else
                *(_DWORD *)v34 -= 2;
            }
            v35 = v36;
            v36 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v16);
              else
                *(_DWORD *)v35 -= 2;
            }
          }
        }
      }
    }
    v20 = v39;
    v39 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v16);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
}

void WebCore::HTMLImageElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  const WTF::StringImpl *v10;
  float v11;
  unsigned int v12;
  _BOOL4 v13;
  WebCore::TreeScopeOrderedMap *v14;
  WTF::StringImpl *v15;
  int16x8_t *v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  const WebCore::TreeScope *v22;
  WebCore::TreeScopeOrderedMap *v23;
  void *v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  unint64_t v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  unsigned __int16 *v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  char v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  int v45;
  _WORD *v46;
  uint64_t v47;
  uint64_t v48;
  const WTF::AtomString *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  unsigned int v52;
  _QWORD *v53;
  WebCore::TreeScopeOrderedMap *v54;
  uint64_t v55;
  int v56;
  const WTF::AtomString *v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;

  WebCore::HTMLElement::attributeChanged(a1, a2, a3, a4, a5, a6);
  v12 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v12 > 0x31A)
  {
    if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) <= 0x34Bu)
    {
      if (v12 == 795)
      {
        v28 = *(_QWORD *)a3;
        if (*(_QWORD *)a3)
        {
          v29 = *(unsigned __int16 **)(v28 + 8);
          v30 = *(unsigned int *)(v28 + 4) | ((unint64_t)((*(_DWORD *)(v28 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v29 = 0;
          v30 = 0x100000000;
        }
        v31 = (unsigned __int16)WebCore::parseReferrerPolicy(v29, v30, 2);
        if (v31 <= 0x100)
          LOBYTE(v31) = 0;
        v32 = *a4;
        if (*a4)
        {
          v33 = (unsigned __int16 *)*((_QWORD *)v32 + 1);
          v34 = *((unsigned int *)v32 + 1) | ((unint64_t)((*((_DWORD *)v32 + 4) >> 2) & 1) << 32);
        }
        else
        {
          v33 = 0;
          v34 = 0x100000000;
        }
        v35 = v31;
        v36 = (unsigned __int16)WebCore::parseReferrerPolicy(v33, v34, 2);
        if (v36 <= 0x100)
          LOBYTE(v36) = 0;
        if (v35 != v36)
          WebCore::ImageLoader::updateFromElementIgnoringPreviousError(*(_QWORD *)(a1 + 176), (WTF::StringImpl *)1);
        return;
      }
      if (v12 != 835)
        return;
    }
    else if (v12 != 844 && v12 != 847)
    {
      if (v12 != 896)
        return;
      if ((*(_BYTE *)(a1 + 22) & 0x18) != 0)
      {
        if (*(_QWORD *)(a1 + 248))
        {
          v14 = *(WebCore::TreeScopeOrderedMap **)(*(_QWORD *)(a1 + 40) + 48);
          if (v14)
            WebCore::TreeScopeOrderedMap::remove(v14, (const WTF::AtomString *)(a1 + 248), (WebCore::Element *)a1);
        }
      }
      v15 = *a4;
      if (*a4)
      {
        v16 = (int16x8_t *)*((_QWORD *)v15 + 1);
        v17 = *((unsigned int *)v15 + 1) | ((unint64_t)((*((_DWORD *)v15 + 4) >> 2) & 1) << 32);
      }
      else
      {
        v16 = 0;
        v17 = 0x100000000;
      }
      WebCore::parseHTMLHashNameReference(v16, v17, (unint64_t)&v74, v11);
      v19 = *(WTF::StringImpl **)(a1 + 248);
      v20 = v74;
      v74 = 0;
      *(_QWORD *)(a1 + 248) = v20;
      if (!v19)
        goto LABEL_21;
      v21 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v18);
        v19 = v74;
        v74 = 0;
        if (!v19)
          goto LABEL_21;
        v21 = *(_DWORD *)v19 - 2;
        if (*(_DWORD *)v19 == 2)
        {
          WTF::StringImpl::destroy(v19, v51);
          goto LABEL_21;
        }
      }
      *(_DWORD *)v19 = v21;
LABEL_21:
      if ((*(_BYTE *)(a1 + 22) & 0x18) != 0 && *(_QWORD *)(a1 + 248))
      {
        v22 = *(const WebCore::TreeScope **)(a1 + 40);
        v23 = (WebCore::TreeScopeOrderedMap *)*((_QWORD *)v22 + 6);
        if (!v23)
        {
          v23 = (WebCore::TreeScopeOrderedMap *)WTF::fastMalloc((WTF *)8);
          *(_QWORD *)v23 = 0;
          v25 = (uint64_t *)*((_QWORD *)v22 + 6);
          *((_QWORD *)v22 + 6) = v23;
          if (v25)
          {
            if (*v25)
              WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(*v25, v24);
            WTF::fastFree((WTF *)v25, v24);
            v23 = (WebCore::TreeScopeOrderedMap *)*((_QWORD *)v22 + 6);
          }
        }
        WebCore::TreeScopeOrderedMap::add(v23, (WTF::StringImpl **)(a1 + 248), (const WebCore::TreeScope **)a1, v22);
      }
      return;
    }
    if (*(WTF::StringImpl **)a3 == *a4)
      WebCore::ImageLoader::updateFromElementIgnoringPreviousErrorToSameValue(*(WebCore::ImageLoader **)(a1 + 176));
    else
      WebCore::HTMLImageElement::selectImageSource(a1, (void *)1);
    return;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) <= 0x19Du)
  {
    if (v12 == 291)
    {
      v27 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
      if (v27)
      {
        if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x194314E48);
        }
        if ((((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x35)) == 1)
          WebCore::RenderImage::updateAltText(v27);
      }
    }
    else if (v12 == 409)
    {
      v26 = (char *)(a1 + 256);
      if ((WebCore::parseCompositeAndBlendOperator(a4, v26, (char *)&v74) & 1) == 0)
        *v26 = 2;
    }
    return;
  }
  switch(v12)
  {
    case 0x19Eu:
      v37 = *(_QWORD *)a3;
      if (!*(_QWORD *)a3)
      {
        v74 = 0;
        goto LABEL_54;
      }
      if (*(_DWORD *)(v37 + 4) != 15)
        goto LABEL_108;
      v66 = *(_QWORD *)(v37 + 8);
      if ((*(_BYTE *)(v37 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v66 & 0xDF) != 0x55
          || (*(_BYTE *)(v66 + 1) & 0xDF) != 0x53
          || (*(_BYTE *)(v66 + 2) & 0xDF) != 0x45
          || (*(_BYTE *)(v66 + 3) & 0xDF) != 0xD
          || (*(_BYTE *)(v66 + 4) & 0xDF) != 0x43
          || (*(_BYTE *)(v66 + 5) & 0xDF) != 0x52
          || (*(_BYTE *)(v66 + 6) & 0xDF) != 0x45
          || (*(_BYTE *)(v66 + 7) & 0xDF) != 0x44
          || (*(_BYTE *)(v66 + 8) & 0xDF) != 0x45
          || (*(_BYTE *)(v66 + 9) & 0xDF) != 0x4E
          || (*(_BYTE *)(v66 + 10) & 0xDF) != 0x54
          || (*(_BYTE *)(v66 + 11) & 0xDF) != 0x49
          || (*(_BYTE *)(v66 + 12) & 0xDF) != 0x41
          || (*(_BYTE *)(v66 + 13) & 0xDF) != 0x4C)
        {
          goto LABEL_108;
        }
        v67 = *(unsigned __int8 *)(v66 + 14);
      }
      else
      {
        if ((*(_WORD *)v66 & 0xFFDF) != 0x55
          || (*(_WORD *)(v66 + 2) & 0xFFDF) != 0x53
          || (*(_WORD *)(v66 + 4) & 0xFFDF) != 0x45
          || (*(_WORD *)(v66 + 6) & 0xFFDF) != 0xD
          || (*(_WORD *)(v66 + 8) & 0xFFDF) != 0x43
          || (*(_WORD *)(v66 + 10) & 0xFFDF) != 0x52
          || (*(_WORD *)(v66 + 12) & 0xFFDF) != 0x45
          || (*(_WORD *)(v66 + 14) & 0xFFDF) != 0x44
          || (*(_WORD *)(v66 + 16) & 0xFFDF) != 0x45
          || (*(_WORD *)(v66 + 18) & 0xFFDF) != 0x4E
          || (*(_WORD *)(v66 + 20) & 0xFFDF) != 0x54
          || (*(_WORD *)(v66 + 22) & 0xFFDF) != 0x49
          || (*(_WORD *)(v66 + 24) & 0xFFDF) != 0x41
          || (*(_WORD *)(v66 + 26) & 0xFFDF) != 0x4C)
        {
          goto LABEL_108;
        }
        v67 = *(unsigned __int16 *)(v66 + 28);
      }
      if ((v67 & 0xFFFFFFDF) == 0x53)
      {
        v61 = "use-credentials";
        v62 = 16;
        goto LABEL_109;
      }
LABEL_108:
      v61 = "anonymous";
      v62 = 10;
LABEL_109:
      WTF::String::String(&v74, (uint64_t)v61, v62);
LABEL_54:
      v38 = *a4;
      if (!*a4)
      {
        v73 = 0;
        goto LABEL_56;
      }
      if (*((_DWORD *)v38 + 1) != 15)
        goto LABEL_111;
      v68 = *((_QWORD *)v38 + 1);
      if ((*((_BYTE *)v38 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v68 & 0xDF) != 0x55
          || (*(_BYTE *)(v68 + 1) & 0xDF) != 0x53
          || (*(_BYTE *)(v68 + 2) & 0xDF) != 0x45
          || (*(_BYTE *)(v68 + 3) & 0xDF) != 0xD
          || (*(_BYTE *)(v68 + 4) & 0xDF) != 0x43
          || (*(_BYTE *)(v68 + 5) & 0xDF) != 0x52
          || (*(_BYTE *)(v68 + 6) & 0xDF) != 0x45
          || (*(_BYTE *)(v68 + 7) & 0xDF) != 0x44
          || (*(_BYTE *)(v68 + 8) & 0xDF) != 0x45
          || (*(_BYTE *)(v68 + 9) & 0xDF) != 0x4E
          || (*(_BYTE *)(v68 + 10) & 0xDF) != 0x54
          || (*(_BYTE *)(v68 + 11) & 0xDF) != 0x49
          || (*(_BYTE *)(v68 + 12) & 0xDF) != 0x41
          || (*(_BYTE *)(v68 + 13) & 0xDF) != 0x4C)
        {
          goto LABEL_111;
        }
        v69 = *(unsigned __int8 *)(v68 + 14);
      }
      else
      {
        if ((*(_WORD *)v68 & 0xFFDF) != 0x55
          || (*(_WORD *)(v68 + 2) & 0xFFDF) != 0x53
          || (*(_WORD *)(v68 + 4) & 0xFFDF) != 0x45
          || (*(_WORD *)(v68 + 6) & 0xFFDF) != 0xD
          || (*(_WORD *)(v68 + 8) & 0xFFDF) != 0x43
          || (*(_WORD *)(v68 + 10) & 0xFFDF) != 0x52
          || (*(_WORD *)(v68 + 12) & 0xFFDF) != 0x45
          || (*(_WORD *)(v68 + 14) & 0xFFDF) != 0x44
          || (*(_WORD *)(v68 + 16) & 0xFFDF) != 0x45
          || (*(_WORD *)(v68 + 18) & 0xFFDF) != 0x4E
          || (*(_WORD *)(v68 + 20) & 0xFFDF) != 0x54
          || (*(_WORD *)(v68 + 22) & 0xFFDF) != 0x49
          || (*(_WORD *)(v68 + 24) & 0xFFDF) != 0x41
          || (*(_WORD *)(v68 + 26) & 0xFFDF) != 0x4C)
        {
          goto LABEL_111;
        }
        v69 = *(unsigned __int16 *)(v68 + 28);
      }
      if ((v69 & 0xFFFFFFDF) == 0x53)
      {
        v63 = "use-credentials";
        v64 = 16;
        goto LABEL_112;
      }
LABEL_111:
      v63 = "anonymous";
      v64 = 10;
LABEL_112:
      WTF::String::String(&v73, (uint64_t)v63, v64);
LABEL_56:
      v40 = WTF::equal(v74, v73, v10);
      v41 = v73;
      v73 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v39);
        else
          *(_DWORD *)v41 -= 2;
      }
      v42 = v74;
      v74 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
        {
          WTF::StringImpl::destroy(v42, v39);
          if ((v40 & 1) != 0)
            return;
LABEL_63:
          WebCore::ImageLoader::updateFromElementIgnoringPreviousError(*(_QWORD *)(a1 + 176), (WTF::StringImpl *)1);
          return;
        }
        *(_DWORD *)v42 -= 2;
      }
      if ((v40 & 1) != 0)
        return;
      goto LABEL_63;
    case 0x229u:
      v43 = *a4;
      if (!*a4 || *((_DWORD *)v43 + 1) != 4)
      {
LABEL_66:
        v44 = *(_QWORD *)(a1 + 176);
        if (*(_BYTE *)(v44 + 129) == 1)
        {
          *(_BYTE *)(v44 + 129) = 2;
          WebCore::ImageLoader::updateFromElement(v44, 0);
        }
        return;
      }
      v55 = *((_QWORD *)v43 + 1);
      if ((*((_BYTE *)v43 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v55 & 0xDF) != 0x4C
          || (*(_BYTE *)(v55 + 1) & 0xDF) != 0x41
          || (*(_BYTE *)(v55 + 2) & 0xDF) != 0x5A)
        {
          goto LABEL_66;
        }
        v56 = *(unsigned __int8 *)(v55 + 3);
      }
      else
      {
        if ((*(_WORD *)v55 & 0xFFDF) != 0x4C
          || (*(_WORD *)(v55 + 2) & 0xFFDF) != 0x41
          || (*(_WORD *)(v55 + 4) & 0xFFDF) != 0x5A)
        {
          goto LABEL_66;
        }
        v56 = *(unsigned __int16 *)(v55 + 6);
      }
      if ((v56 & 0xFFFFFFDF) == 0x59)
        return;
      goto LABEL_66;
    case 0x250u:
      if (*a4)
        v13 = *((_DWORD *)*a4 + 1) == 0;
      else
        v13 = 1;
      v45 = !v13;
      v46 = *(_WORD **)(*(_QWORD *)(a1 + 40) + 8);
      if ((v46[1679] & 1) == 0)
        v46 = 0;
      if (*(unsigned __int8 *)(a1 + 264) != v45)
      {
        v47 = *(_QWORD *)(a1 + 16);
        if ((v47 & 0x8000000000000) != 0 && (v47 & 0x10000000000000) == 0 && v46)
        {
          v48 = *(_QWORD *)(a1 + 104);
          if (v48 && *(_QWORD *)(v48 + 24))
          {
            v58 = *(_DWORD *)(v48 + 4);
            if ((v58 & 1) != 0)
            {
              v59 = *(uint64_t **)(v48 + 40);
              LODWORD(v60) = *(_DWORD *)(v48 + 52);
            }
            else
            {
              v59 = (uint64_t *)(v48 + 32);
              LODWORD(v60) = v58 >> 5;
            }
            if ((_DWORD)v60)
            {
              v60 = v60;
              while (1)
              {
                v65 = *v59;
                if (*v59 == WebCore::HTMLNames::idAttr
                  || *(_QWORD *)(v65 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
                  && *(_QWORD *)(v65 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
                {
                  break;
                }
                v59 += 2;
                if (!--v60)
                  goto LABEL_123;
              }
            }
            else
            {
LABEL_123:
              v59 = 0;
            }
            v49 = (const WTF::AtomString *)(v59 + 1);
          }
          else
          {
            v49 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
          }
          v50 = *(_QWORD *)v49;
          if (*(_QWORD *)v49 && *(_DWORD *)(v50 + 4))
          {
            if (v48 && (v52 = *(_DWORD *)(v48 + 4), (v52 & 2) != 0))
            {
              if ((v52 & 1) != 0)
              {
                v70 = *(uint64_t **)(v48 + 40);
                LODWORD(v71) = *(_DWORD *)(v48 + 52);
              }
              else
              {
                v70 = (uint64_t *)(v48 + 32);
                LODWORD(v71) = v52 >> 5;
              }
              if ((_DWORD)v71)
              {
                v71 = v71;
                while (1)
                {
                  v72 = *v70;
                  if (*v70 == WebCore::HTMLNames::nameAttr
                    || *(_QWORD *)(v72 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
                    && *(_QWORD *)(v72 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
                  {
                    break;
                  }
                  v70 += 2;
                  if (!--v71)
                    goto LABEL_176;
                }
              }
              else
              {
LABEL_176:
                v70 = 0;
              }
              v53 = v70 + 1;
            }
            else
            {
              v53 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            }
            if (v50 != *v53)
            {
              v54 = (WebCore::TreeScopeOrderedMap *)(v46 + 1756);
              if (v13)
              {
                WebCore::TreeScopeOrderedMap::remove(v54, v49, (WebCore::Element *)a1);
              }
              else
              {
                WebCore::TreeScopeOrderedMap::add(v54, (WTF::StringImpl **)v49, (const WebCore::TreeScope **)a1, (const WebCore::TreeScope *)(v46 + 48));
                WebCore::addImpureProperty(v49, v57);
              }
            }
          }
        }
      }
      *(_BYTE *)(a1 + 264) = v45;
      break;
  }
}

uint64_t WebCore::HTMLImageElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v4;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;

  v2 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  result = 1;
  if (v2 <= 0x1F7)
  {
    v4 = v2 - 411 > 0x20 || ((1 << (v2 + 101)) & 0x100200001) == 0;
    if (!v4 || v2 == 375 || v2 == 286)
      return result;
    return 0;
  }
  if (v2 - 504 > 7 || ((1 << (v2 + 8)) & 0x83) == 0)
  {
    v6 = v2 - 898;
    v7 = v6 > 0x33;
    v8 = (1 << v6) & 0xA000001004001;
    if (v7 || v8 == 0)
      return 0;
  }
  return result;
}

void WebCore::HTMLLinkElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::String *a4, int a5, __n128 a6)
{
  unsigned int v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::String *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  __int128 v15;
  __int128 v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  WTF::String *v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  const WTF::StringImpl *v27;
  uint64_t v28;
  WTF::String *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  WebCore::CSSStyleSheet *v35;
  WTF::StringImpl *v36;
  __int128 v37;
  __int128 v38;

  v8 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v8 <= 0x3B3)
  {
    if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) <= 0x31Bu)
    {
      if (v8 == 435)
      {
        WebCore::HTMLLinkElement::setDisabledState((WebCore::HTMLLinkElement *)a1, (unsigned __int8 *)(*(_QWORD *)a4 != 0), (uint64_t)a3, a4);
        return;
      }
      if (v8 == 582)
      {
        WTF::String::convertToASCIILowercase(a4);
        if ((WTF::equal(v36, *(const WTF::StringImpl **)(a1 + 216), v27) & 1) == 0)
        {
          v30 = v36;
          v36 = 0;
          v31 = *(WTF::StringImpl **)(a1 + 216);
          *(_QWORD *)(a1 + 216) = v30;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v10);
            else
              *(_DWORD *)v31 -= 2;
          }
          WebCore::HTMLLinkElement::process((WebCore::HTMLLinkElement *)a1, (unsigned __int8 *)v10, v28, v29);
          if (*(_QWORD *)(a1 + 200) && *(_BYTE *)(a1 + 288) != 2)
            WebCore::Style::Scope::didChangeActiveStyleSheetCandidates(*(WebCore::Style::Scope **)(a1 + 184));
        }
        goto LABEL_8;
      }
LABEL_25:
      WebCore::HTMLElement::attributeChanged(a1, a2, a3, (WTF::StringImpl **)a4, a5, a6);
      return;
    }
    if (v8 != 796)
    {
      if (v8 != 835)
        goto LABEL_25;
      v32 = *(_QWORD *)(a1 + 272);
      if (v32 && !*(_BYTE *)(v32 + 16))
        *(_BYTE *)(v32 + 17) = 1;
LABEL_48:
      WebCore::HTMLLinkElement::process((WebCore::HTMLLinkElement *)a1, (unsigned __int8 *)a2, (uint64_t)a3, a4);
      return;
    }
    v18 = *(_QWORD *)a4;
    if (*(_QWORD *)a4)
    {
      v19 = *(_QWORD *)(v18 + 8);
      v20 = *(unsigned int *)(v18 + 4) | ((unint64_t)((*(_DWORD *)(v18 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v19 = 0;
      v20 = 0x100000000;
    }
    WebCore::LinkRelAttribute::LinkRelAttribute((uint64_t)&v36, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), v19, v20);
    v24 = *(unsigned __int8 *)(a1 + 289);
    if (v36 == 255 || v24 == 255)
    {
      if ((v36 != 255) == (v24 != 255))
      {
LABEL_18:
        v25 = BYTE1(v36) == *(unsigned __int8 *)(a1 + 290);
        goto LABEL_19;
      }
    }
    else if (v36 == v24)
    {
      goto LABEL_18;
    }
    v25 = 0;
LABEL_19:
    *(_WORD *)(a1 + 289) = (_WORD)v36;
    v26 = *(_QWORD *)(a1 + 280);
    if (v26 && !*(_BYTE *)(v26 + 16))
      *(_BYTE *)(v26 + 17) = 1;
    if (!v25)
      WebCore::HTMLLinkElement::process((WebCore::HTMLLinkElement *)a1, v21, v22, v23);
    return;
  }
  if (v8 == 948)
  {
    WebCore::Element::getNonEmptyURLAttribute((WebCore::Element *)a1, (const WebCore::QualifiedName *)&WebCore::HTMLNames::hrefAttr, (uint64_t)a3, a4, (WTF::URL *)&v36, a6);
    if ((WTF::equal(v36, *(const WTF::StringImpl **)(a1 + 232), v9) & 1) == 0)
    {
      v13 = v36;
      v36 = 0;
      v14 = *(WTF::StringImpl **)(a1 + 232);
      *(_QWORD *)(a1 + 232) = v13;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v10);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v37;
      v16 = v38;
      LODWORD(v37) = v37 & 0xFFFFFFFE;
      *(_OWORD *)(a1 + 240) = v15;
      *(_OWORD *)(a1 + 256) = v16;
      WebCore::HTMLLinkElement::process((WebCore::HTMLLinkElement *)a1, (unsigned __int8 *)v10, v11, v12);
    }
LABEL_8:
    v17 = v36;
    v36 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v10);
      else
        *(_DWORD *)v17 -= 2;
    }
    return;
  }
  if (v8 == 952)
  {
    if ((WTF::equal(*(WTF **)a4, *(const WTF::StringImpl **)(a1 + 208), a3) & 1) != 0)
      return;
    v33 = *(_DWORD **)a4;
    if (*(_QWORD *)a4)
      *v33 += 2;
    v34 = *(WTF::StringImpl **)(a1 + 208);
    *(_QWORD *)(a1 + 208) = v33;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, a2);
      else
        *(_DWORD *)v34 -= 2;
    }
    goto LABEL_48;
  }
  if (v8 != 951)
    goto LABEL_25;
  v35 = *(WebCore::CSSStyleSheet **)(a1 + 200);
  if (v35 && (*(_BYTE *)(a1 + 22) & 0x10) == 0)
    WebCore::CSSStyleSheet::setTitle(v35, a4);
}

void WebCore::HTMLIFrameElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, uint64_t *a4, int a5, __n128 a6)
{
  unsigned int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  v7 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v7 <= 0x32D)
  {
    if (v7 - 289 < 2)
      return;
    if (v7 == 553)
    {
      if (*(_QWORD *)(a1 + 160))
      {
        if ((WTF::equalLettersIgnoringASCIICase(a4, "lazy", 5uLL) & 1) == 0)
        {
          WebCore::LazyLoadFrameObserver::unobserve(*(WebCore::LazyLoadFrameObserver **)(a1 + 160));
          WebCore::HTMLIFrameElement::loadDeferredFrame((WebCore::HTMLIFrameElement *)a1, v8);
        }
      }
      return;
    }
LABEL_9:
    WebCore::HTMLFrameElementBase::attributeChanged(a1, a2, a3, (WTF::StringImpl **)a4, a5, a6);
    return;
  }
  if (v7 == 915)
    return;
  if (v7 != 814)
    goto LABEL_9;
  v9 = *(_QWORD *)(a1 + 144);
  if (v9 && !*(_BYTE *)(v9 + 16))
    *(_BYTE *)(v9 + 17) = 1;
  v19 = 0;
  if (*a4)
    v10 = WebCore::SecurityContext::parseSandboxPolicy(*(int8x16_t **)(*a4 + 8), *(unsigned int *)(*a4 + 4) | ((unint64_t)((*(_DWORD *)(*a4 + 16) >> 2) & 1) << 32), &v19);
  else
    v10 = 0;
  WebCore::HTMLFrameOwnerElement::setSandboxFlags(a1, v10);
  v11 = v19;
  if (v19)
  {
    v12 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
    *(_DWORD *)v19 += 2;
    v17 = v11;
    WTF::makeString<WTF::ASCIILiteral,WTF::String>((int8x16_t *)"Error while parsing the 'sandbox' attribute: ", 46, (uint64_t *)&v17, &v18);
    WebCore::Document::addConsoleMessage(v12, 16, 2, &v18, 0);
    v14 = v18;
    v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v19;
    v19 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v13);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
}

void WebCore::HTMLFrameElementBase::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  if (*(_QWORD *)a2 != WebCore::HTMLNames::srcdocAttr)
  {
    if (*(_QWORD *)a2 != WebCore::HTMLNames::srcAttr)
    {
LABEL_24:
      WebCore::HTMLElement::attributeChanged(a1, a2, a3, a4, a5, a6);
      return;
    }
    v7 = *(_QWORD *)(a1 + 104);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) != 0)
      {
        v9 = *(uint64_t **)(v7 + 40);
        LODWORD(v7) = *(_DWORD *)(v7 + 52);
      }
      else
      {
        v9 = (uint64_t *)(v7 + 32);
        LODWORD(v7) = v8 >> 5;
      }
      if ((_DWORD)v7)
      {
        v7 = v7;
        do
        {
          v10 = *v9;
          if (*v9 == WebCore::HTMLNames::srcdocAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcdocAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcdocAttr + 32))
          {
            goto LABEL_24;
          }
          v9 += 2;
        }
        while (--v7);
      }
    }
LABEL_11:
    WTF::String::trim();
    WebCore::HTMLFrameElementBase::setLocation((WTF **)a1, (const WTF::String *)&v17, v11);
    v13 = v17;
    v17 = 0;
    if (!v13)
      return;
    if (*(_DWORD *)v13 != 2)
    {
      *(_DWORD *)v13 -= 2;
      return;
    }
LABEL_22:
    WTF::StringImpl::destroy(v13, v12);
    return;
  }
  if (!*a4)
  {
    WebCore::Element::attributeWithoutSynchronization(a1, &WebCore::HTMLNames::srcAttr);
    goto LABEL_11;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v14 = v17;
  v16 = v17;
  WebCore::HTMLFrameElementBase::setLocation((WTF **)a1, (const WTF::String *)&v16, v15);
  if (v14)
  {
    if (*(_DWORD *)v14 != 2)
    {
      *(_DWORD *)v14 -= 2;
      return;
    }
    v13 = v14;
    goto LABEL_22;
  }
}

uint64_t WebCore::HTMLStyleElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  _DWORD *v10;
  BOOL v11;
  uint64_t v12;

  result = bmalloc::api::isoAllocate();
  v9 = result;
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v10 = *a1;
  if (*a1)
    ++*v10;
  *(_QWORD *)(result + 96) = v10;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33CD4C8;
  *(_BYTE *)(result + 112) = a3;
  *(_BYTE *)(result + 113) = 0;
  *(_DWORD *)(result + 116) = 0;
  *(_DWORD *)(result + 120) = 0;
  *(_OWORD *)(result + 128) = 0uLL;
  *(_OWORD *)(result + 144) = 0uLL;
  if (a3)
  {
    result = *(_QWORD *)(a2 + 728);
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      if (result)
        v11 = *(_DWORD *)(a2 + 3272) == 0;
      else
        v11 = 0;
      if (v11)
      {
        v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 728) + 16))(*(_QWORD *)(a2 + 728));
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 168))(v12);
        *(_QWORD *)(v9 + 116) = result;
      }
    }
  }
  *(_BYTE *)(v9 + 160) = 0;
  *a4 = v9;
  return result;
}

unsigned __int8 *WebCore::Element::setIsLink(unsigned __int8 *this, void *a2)
{
  __int16 v2;
  int v3;
  unsigned __int8 *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 hasPendingFullStyleRebuild;
  int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;

  v2 = *((_WORD *)this + 15);
  if (((((v2 & 1) == 0) ^ a2) & 1) != 0)
    return this;
  v3 = (int)a2;
  v4 = this;
  if ((this[22] & 8) == 0)
    goto LABEL_17;
  v5 = (uint64_t *)*((_QWORD *)this + 5);
  v6 = v5[1];
  if (!*(_QWORD *)(v6 + 1944) || *(_BYTE *)(v6 + 3405))
    goto LABEL_17;
  if ((v4[70] & 4) != 0)
  {
    v10 = *v5;
    v11 = (*(_WORD *)(v10 + 28) & 0x80) == 0 || v10 == 0;
    v12 = v10 + 216;
    if (v11)
      v12 = v6 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v12 + 236))
      goto LABEL_17;
  }
  v7 = *(_QWORD *)(v6 + 1272);
  if (v7 && (*(_BYTE *)(v7 + 70) & 4) != 0)
  {
LABEL_17:
    LOBYTE(v13) = 0;
    v15 = 0;
    v16 = 0;
    v14 = v4;
  }
  else
  {
    hasPendingFullStyleRebuild = WebCore::Document::hasPendingFullStyleRebuild((WebCore::Document *)v6);
    LOBYTE(v13) = !hasPendingFullStyleRebuild;
    v15 = 0;
    v16 = 0;
    v14 = v4;
    if (!hasPendingFullStyleRebuild)
    {
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v13, (WTF::StringImpl *)0xD, v3, 0);
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v13, (WTF::StringImpl *)0x2E, v3, 0);
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v14, &v15);
      v9 = v13;
      *((_WORD *)v4 + 15) = *((_WORD *)v4 + 15) & 0xFFFE | v3;
      if (v9)
        WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v14, &v16);
      goto LABEL_19;
    }
  }
  *((_WORD *)v4 + 15) = v2 & 0xFFFE | v3;
LABEL_19:
  if (v16)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v16, a2);
  this = v15;
  if (v15)
    return (unsigned __int8 *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v15, a2);
  return this;
}

uint64_t WebCore::HTMLIFrameElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  int v7;
  BOOL v9;

  v2 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  result = 1;
  if (v2 > 0x399)
  {
    v5 = v2 - 922;
    v6 = v5 > 0x1B;
    v7 = (1 << v5) & 0xA000001;
    if (v6 || v7 == 0)
      return 0;
  }
  else if (v2 - 491 > 0xE || ((1 << (v2 + 21)) & 0x6001) == 0)
  {
    v9 = v2 - 411 > 0x20 || ((1 << (v2 + 101)) & 0x100200001) == 0;
    if (v9 && v2 != 286)
      return 0;
  }
  return result;
}

uint64_t WebCore::HTMLBodyElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;

  v2 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v2 > 0x220)
  {
    v3 = v2 - 545 > 0x12 || ((1 << (v2 - 33)) & 0x60001) == 0;
    if (!v3 || v2 == 879 || v2 == 885)
      return 1;
    return WebCore::HTMLElement::hasPresentationalHintsForAttribute(a1, a2);
  }
  if (v2 != 367 && v2 != 373)
    return WebCore::HTMLElement::hasPresentationalHintsForAttribute(a1, a2);
  return 1;
}

uint64_t WebCore::HTMLLIElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v4;
  uint64_t result;
  BOOL v6;

  v2 = *a2;
  if (*a2 == WebCore::HTMLNames::typeAttr || v2 == WebCore::HTMLNames::valueAttr)
    return 1;
  v4 = *(unsigned __int16 *)(v2 + 10);
  result = 1;
  if (v4 > 504)
  {
    if (v4 == 949 || v4 == 505 || v4 == 947)
      return result;
    return 0;
  }
  v6 = (v4 - 411) > 0x20 || ((1 << (v4 + 101)) & 0x100200001) == 0;
  if (v6 && v4 != 286)
    return 0;
  return result;
}

uint64_t WebCore::HTMLLinkElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t result;
  char v19;

  v8 = bmalloc::api::isoAllocate();
  v9 = v8;
  *(_OWORD *)(v8 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v8 + 24) = 0x101C00000002;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = a2 + 96;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  v10 = *a1;
  if (*a1)
    ++*v10;
  *(_QWORD *)(v8 + 96) = v10;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)v8 = off_1E33C36A8;
  *(_QWORD *)(v8 + 128) = &unk_1E33C3C08;
  *(_QWORD *)(v8 + 112) = &unk_1E33C3BB8;
  *(_QWORD *)(v8 + 120) = 0;
  *(_QWORD *)(v8 + 136) = 0;
  *(_QWORD *)(v8 + 144) = &off_1E33F6170;
  *(_QWORD *)(v8 + 152) = 0;
  v12 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = v9 + 128;
  v13 = *(unsigned int **)(v9 + 136);
  *(_QWORD *)(v9 + 136) = v12;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v11);
    }
  }
  v16 = *(unsigned int **)(v9 + 136);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  *(_QWORD *)(v9 + 160) = v16;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_QWORD *)(v9 + 232) = 0;
  result = WTF::URL::invalidate((WTF::URL *)(v9 + 232));
  *(_QWORD *)(v9 + 272) = 0;
  *(_QWORD *)(v9 + 280) = 0;
  *(_WORD *)(v9 + 288) = -256;
  *(_BYTE *)(v9 + 290) = 0;
  if (a3)
    v19 = 2;
  else
    v19 = 0;
  *(_WORD *)(v9 + 291) = *(_BYTE *)(v9 + 291) & 0xE0 | v19;
  *a4 = v9;
  return result;
}

void WebCore::HTMLMetaElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  void *v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23[2];
  char v24;

  WebCore::HTMLElement::attributeChanged(a1, a2, a3, a4, a5, a6);
  v11 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v11 > 0x1FF)
  {
    switch(v11)
    {
      case 0x250u:
        WebCore::HTMLMetaElement::process(a1, *(const WTF::AtomString **)a3);
        if ((*(_QWORD *)(a1 + 16) & 0x18000000000000) == 0x8000000000000
          && WTF::equalLettersIgnoringASCIICase((uint64_t *)a3, "theme-color", 0xCuLL)
          && (WTF::equalLettersIgnoringASCIICase((uint64_t *)a4, "theme-color", 0xCuLL) & 1) == 0)
        {
          WebCore::Document::metaElementThemeColorChanged(*(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8), (WebCore::HTMLMetaElement *)a1, v14, v15, v16, v17, v18, v19);
        }
        break;
      case 0x200u:
LABEL_6:
        WebCore::HTMLMetaElement::process(a1, (const WTF::AtomString *)*MEMORY[0x1E0CBF2F8]);
        return;
      case 0x246u:
        LOBYTE(v23[0]) = 0;
        v24 = 0;
        std::__optional_storage_base<WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(a1 + 112, v23);
        if (v24)
          WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v13);
        WebCore::HTMLMetaElement::process(a1, (const WTF::AtomString *)*MEMORY[0x1E0CBF2F8]);
        break;
    }
  }
  else if (v11 == 410)
  {
    if (*(_BYTE *)(a1 + 144))
    {
      v12 = *(_QWORD *)(a1 + 136);
      if ((v12 & 0x8000000000000) != 0)
      {
        v20 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          WTF::fastFree((WTF *)v20, v10);
        }
      }
      *(_BYTE *)(a1 + 144) = 0;
    }
    goto LABEL_6;
  }
}

uint64_t WebCore::HTMLOListElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v4;

  if (*(_QWORD *)a2 == WebCore::HTMLNames::typeAttr)
    return 1;
  v2 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  result = 1;
  if (v2 > 0x1F8)
  {
    if (v2 == 949 || v2 == 505 || v2 == 947)
      return result;
    return 0;
  }
  v4 = v2 - 411 > 0x20 || ((1 << (v2 + 101)) & 0x100200001) == 0;
  if (v4 && v2 != 286)
    return 0;
  return result;
}

uint64_t WebCore::SpaceSplitStringData::destroy(WTF *this, WTF::StringImpl *a2)
{
  int v3;
  WTF::StringImpl *v4;
  unsigned int i;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  if ((_MergedGlobals_174 & 1) != 0)
  {
    if (qword_1ECE83228)
    {
      v3 = 0;
      v4 = *(WTF::StringImpl **)this;
      for (i = *(_DWORD *)(*(_QWORD *)this + 16) >> 8; ; i = v3 + v6)
      {
        v6 = i & *(_DWORD *)(qword_1ECE83228 - 8);
        v7 = *(WTF::StringImpl **)(qword_1ECE83228 + 16 * v6);
        if (v7 != (WTF::StringImpl *)-1)
        {
          if (!v7)
            goto LABEL_18;
          if (v7 == v4)
            break;
        }
        ++v3;
      }
      if ((_DWORD)v6 != *(_DWORD *)(qword_1ECE83228 - 4))
      {
        *(_QWORD *)(qword_1ECE83228 + 16 * v6) = -1;
        if (v4)
        {
          if (*(_DWORD *)v4 == 2)
            WTF::StringImpl::destroy(v4, a2);
          else
            *(_DWORD *)v4 -= 2;
        }
        v8 = qword_1ECE83228;
        ++*(_DWORD *)(qword_1ECE83228 - 16);
        if (v8)
          v9 = *(_DWORD *)(v8 - 12) - 1;
        else
          v9 = -1;
        *(_DWORD *)(v8 - 12) = v9;
        if (qword_1ECE83228)
        {
          v10 = *(_DWORD *)(qword_1ECE83228 - 4);
          if (6 * *(_DWORD *)(qword_1ECE83228 - 12) < v10 && v10 >= 0x201)
            WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::SpaceSplitStringData *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::SpaceSplitStringData *>>,WTF::AtomStringHash,WTF::HashMap<WTF::AtomString,WebCore::SpaceSplitStringData *,WTF::AtomStringHash,WebCore::SpaceSplitStringTableKeyTraits,WTF::HashTraits<WebCore::SpaceSplitStringData *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SpaceSplitStringTableKeyTraits>::rehash(v10 >> 1, 0);
        }
      }
    }
  }
  else
  {
    qword_1ECE83228 = 0;
    _MergedGlobals_174 = 1;
  }
LABEL_18:
  v11 = 0;
  v12 = *((_DWORD *)this + 3);
  if (v12 <= 1)
    v12 = 1;
  v13 = 8 * v12;
  do
  {
    v14 = *(WTF::StringImpl **)((char *)this + v11 + 16);
    *(_QWORD *)((char *)this + v11 + 16) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, a2);
      else
        *(_DWORD *)v14 -= 2;
    }
    v11 += 8;
  }
  while (v13 != v11);
  v15 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  return WTF::fastFree(this, a2);
}

void WebCore::HTMLOListElement::attributeChanged(WebCore *this, const WebCore::HTMLOListElement *a2, const WebCore::Element *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  int v8;
  int v9;
  WTF::StringImpl *v10;
  uint64_t *v11;
  unint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  uint64_t v18;
  const WebCore::Element *v19;
  uint64_t ListItemHelper;
  const WebCore::Element *v21;
  const WebCore::Element *v22;
  uint64_t v23;

  v8 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v8 == 806)
  {
    v17 = *a4 != 0;
    if (*((unsigned __int8 *)this + 128) == v17)
      return;
    *((_BYTE *)this + 128) = v17;
LABEL_27:
    WebCore::RenderListItem::updateItemValuesForOrderedList(this, a2, a3);
    return;
  }
  if (v8 != 849)
  {
    WebCore::HTMLElement::attributeChanged((uint64_t)this, a2, a3, a4, a5, a6);
    return;
  }
  if (*((_BYTE *)this + 116))
  {
    v9 = *((_DWORD *)this + 28);
  }
  else if (*((_BYTE *)this + 128))
  {
    if (*((_BYTE *)this + 124))
    {
      v9 = *((_DWORD *)this + 30);
    }
    else
    {
      ListItemHelper = WebCore::nextListItemHelper(this, this, a3);
      v9 = 0;
      if (ListItemHelper)
      {
        while (1)
        {
          v22 = *(const WebCore::Element **)(*(_QWORD *)(ListItemHelper + 24) + 8);
          if ((*((_WORD *)v22 + 14) & 8) == 0)
            break;
          ++v9;
          ListItemHelper = WebCore::nextListItemHelper(this, v22, v21);
          if (!ListItemHelper)
            goto LABEL_32;
        }
        __break(0xC471u);
LABEL_36:
        JUMPOUT(0x1943164F0);
      }
LABEL_32:
      *((_DWORD *)this + 30) = v9;
      *((_BYTE *)this + 124) = 1;
    }
  }
  else
  {
    v9 = 1;
  }
  v10 = *a4;
  if (*a4)
  {
    v11 = (uint64_t *)*((_QWORD *)v10 + 1);
    v12 = *((unsigned int *)v10 + 1) | ((unint64_t)((*((_DWORD *)v10 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v12 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v11, v12, &v23);
  v14 = v23;
  v13 = HIDWORD(v23);
  v15 = HIDWORD(v23) == 0;
  if (HIDWORD(v23))
    v16 = 0;
  else
    v16 = v23;
  *((_DWORD *)this + 28) = v16;
  *((_BYTE *)this + 116) = v15;
  if (v13)
  {
    if (*((_BYTE *)this + 128))
    {
      if (*((_BYTE *)this + 124))
      {
        v14 = *((_DWORD *)this + 30);
        goto LABEL_25;
      }
      v18 = WebCore::nextListItemHelper(this, this, a3);
      v14 = 0;
      if (v18)
      {
        while (1)
        {
          v19 = *(const WebCore::Element **)(*(_QWORD *)(v18 + 24) + 8);
          if ((*((_WORD *)v19 + 14) & 8) == 0)
            break;
          ++v14;
          v18 = WebCore::nextListItemHelper(this, v19, a3);
          if (!v18)
            goto LABEL_24;
        }
        __break(0xC471u);
        goto LABEL_36;
      }
LABEL_24:
      *((_DWORD *)this + 30) = v14;
      *((_BYTE *)this + 124) = 1;
    }
    else
    {
      v14 = 1;
    }
  }
LABEL_25:
  if (v9 != v14)
    goto LABEL_27;
}

uint64_t WebCore::HTMLMetaElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33C41B0;
  *(_BYTE *)(result + 112) = 0;
  *(_BYTE *)(result + 128) = 0;
  *(_BYTE *)(result + 136) = 0;
  *(_BYTE *)(result + 144) = 0;
  *a3 = result;
  return result;
}

_QWORD *WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::SpaceSplitStringData *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::SpaceSplitStringData *>>,WTF::AtomStringHash,WTF::HashMap<WTF::AtomString,WebCore::SpaceSplitStringData *,WTF::AtomStringHash,WebCore::SpaceSplitStringTableKeyTraits,WTF::HashTraits<WebCore::SpaceSplitStringData *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SpaceSplitStringTableKeyTraits>::expand(WTF::StringImpl **a1)
{
  int v2;
  unsigned int v3;

  if (qword_1ECE83228 && (v2 = *(_DWORD *)(qword_1ECE83228 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(qword_1ECE83228 - 12) >= (2 * v2));
  else
    v3 = 512;
  return WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::SpaceSplitStringData *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::SpaceSplitStringData *>>,WTF::AtomStringHash,WTF::HashMap<WTF::AtomString,WebCore::SpaceSplitStringData *,WTF::AtomStringHash,WebCore::SpaceSplitStringTableKeyTraits,WTF::HashTraits<WebCore::SpaceSplitStringData *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SpaceSplitStringTableKeyTraits>::rehash(v3, a1);
}

unsigned __int8 *WebCore::Element::updateEffectiveLangStateAndPropagateToDescendants(WebCore::Element *this, void *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL hasPendingFullStyleRebuild;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *result;
  void *v15;
  void *v16;
  _BYTE v17[32];
  WebCore::Element *v18;
  WebCore::Element *v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::Element *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;

  if ((*((_BYTE *)this + 22) & 8) == 0)
    goto LABEL_15;
  v6 = (uint64_t *)*((_QWORD *)this + 5);
  v7 = v6[1];
  if (!*(_QWORD *)(v7 + 1944) || *(_BYTE *)(v7 + 3405))
    goto LABEL_15;
  if ((*((_BYTE *)this + 70) & 4) != 0)
  {
    v10 = *v6;
    v11 = (*(_WORD *)(v10 + 28) & 0x80) == 0 || v10 == 0;
    v12 = v10 + 216;
    if (v11)
      v12 = v7 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v12 + 236))
      goto LABEL_15;
  }
  v8 = *(_QWORD *)(v7 + 1272);
  if (v8 && (*(_BYTE *)(v8 + 70) & 4) != 0)
  {
LABEL_15:
    LOBYTE(v21) = 0;
    v23 = 0;
    v24 = 0;
    v22 = this;
  }
  else
  {
    hasPendingFullStyleRebuild = WebCore::Document::hasPendingFullStyleRebuild((WebCore::Document *)v7);
    LOBYTE(v21) = !hasPendingFullStyleRebuild;
    v23 = 0;
    v24 = 0;
    v22 = this;
    if (!hasPendingFullStyleRebuild)
    {
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v21, (WTF::StringImpl *)0x2B, 2, 0);
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v22, &v23);
    }
  }
  WebCore::Element::updateEffectiveLangState(this, a2, a3, a4, a5);
  v13 = *((_QWORD *)this + 10);
  if (v13)
  {
    while ((*(_WORD *)(v13 + 28) & 8) == 0)
    {
      v13 = *(_QWORD *)(v13 + 56);
      if (!v13)
        goto LABEL_17;
    }
    v19 = this;
    v20 = v13;
    do
    {
      *(_DWORD *)(v13 + 24) += 2;
      v18 = (WebCore::Element *)v13;
      if ((*(_BYTE *)(v13 + 23) & 6) != 0)
      {
        WebCore::ElementIterator<WebCore::Element>::traverseNextSkippingChildren((uint64_t *)&v19);
      }
      else
      {
        WebCore::Style::PseudoClassChangeInvalidation::PseudoClassChangeInvalidation((uint64_t)v17, v13);
        WebCore::Element::updateEffectiveLangStateFromParent((unsigned int *)v18, v15);
        WebCore::ElementIterator<WebCore::Element>::traverseNext(&v19);
        WebCore::Style::PseudoClassChangeInvalidation::~PseudoClassChangeInvalidation((WebCore::Style::PseudoClassChangeInvalidation *)v17, v16);
      }
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v18);
      v13 = v20;
    }
    while (v20);
  }
LABEL_17:
  if ((_BYTE)v21)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v22, &v24);
  if (v24)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v24, (void *)v13);
  result = v23;
  if (v23)
    return (unsigned __int8 *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v23, (void *)v13);
  return result;
}

_QWORD *WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::SpaceSplitStringData *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::SpaceSplitStringData *>>,WTF::AtomStringHash,WTF::HashMap<WTF::AtomString,WebCore::SpaceSplitStringData *,WTF::AtomStringHash,WebCore::SpaceSplitStringTableKeyTraits,WTF::HashTraits<WebCore::SpaceSplitStringData *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SpaceSplitStringTableKeyTraits>::rehash(unsigned int a1, WTF::StringImpl **a2)
{
  uint64_t v4;
  int v5;
  int v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _QWORD *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  WTF::StringImpl *v19;
  _QWORD *result;

  v4 = qword_1ECE83228;
  if (qword_1ECE83228)
  {
    v5 = *(_DWORD *)(qword_1ECE83228 - 4);
    v6 = *(_DWORD *)(qword_1ECE83228 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE83228 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE83228 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = (WTF::StringImpl **)(v4 + 16 * v9);
      v12 = *v11;
      if (*v11)
      {
        if (v12 != (WTF::StringImpl *)-1)
        {
          if (qword_1ECE83228)
            v13 = *(_DWORD *)(qword_1ECE83228 - 8);
          else
            v13 = 0;
          v14 = 0;
          v15 = *((_DWORD *)v12 + 4) >> 8;
          do
          {
            v16 = v15 & v13;
            v15 = ++v14 + v16;
          }
          while (*(_QWORD *)(qword_1ECE83228 + 16 * v16));
          v17 = (_QWORD *)(qword_1ECE83228 + 16 * v16);
          *v17 = 0;
          v18 = *(_OWORD *)v11;
          *v11 = 0;
          *(_OWORD *)v17 = v18;
          v19 = *v11;
          *v11 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v8);
            else
              *(_DWORD *)v19 -= 2;
          }
          if (v11 == a2)
            v10 = v17;
        }
      }
      else
      {
        *v11 = 0;
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

WTF::StringImpl ***WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::~HashMap(WTF::StringImpl ***a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = *a1;
  if (*a1)
  {
    v5 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v5)
    {
      v6 = *a1;
      do
      {
        v7 = *v6;
        if (*v6 != (WTF::StringImpl *)-1)
        {
          v8 = v6[1];
          v6[1] = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
            {
              WTF::StringImpl::destroy(v8, a2);
              v7 = *v6;
            }
            else
            {
              *(_DWORD *)v8 -= 2;
            }
          }
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return a1;
}

WTF::StringImpl *WebCore::Layout::InlineDisplayContentBuilder::appendInlineBoxDisplayBox(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, unsigned int *a5)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  char v11;
  WebCore::Layout *v12;
  char v13;
  WTF::StringImpl *v14;
  int v15;
  BOOL v16;
  __int128 v17;
  __int16 v18;
  char v19;
  int v20;
  int v21;
  char v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *result;
  uint64_t v37;
  int v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  _BYTE v48[28];
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  int v52;
  __int128 v53;

  v8 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a1 + 42))
    v9 = 1;
  else
    v9 = (*(_QWORD *)(v8 + 32) & 0x1FLL) == 24;
  *(_BYTE *)(a1 + 42) = v9;
  v10 = **(_QWORD **)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 40);
  v45 = *a4;
  if (!v10
    && (*(_WORD *)(v8 + 12) & 0x200) != 0
    && (v44 = a4, v42 = WebCore::Layout::Box::rareData((WebCore::Layout::Box *)v8), a4 = v44, *(_QWORD *)(v42 + 24)))
  {
    v43 = WebCore::Layout::Box::rareData((WebCore::Layout::Box *)v8);
    a4 = v44;
    v12 = *(WebCore::Layout **)(v43 + 24);
  }
  else
  {
    v12 = (WebCore::Layout *)(v8 + 16);
  }
  v53 = *a4;
  v13 = WebCore::Layout::computeInkOverflowForInlineLevelBox(v12, (float32x2_t *)&v53, (WebCore::FloatRect *)a3);
  v15 = *(unsigned __int8 *)(a3 + 44);
  if ((*(_BYTE *)(a3 + 44) || *(_BYTE *)(a3 + 47) == 8) && *(_BYTE *)(a3 + 96))
  {
    v39 = *(float *)(a3 + 88);
    v40 = *(float *)(a3 + 92);
    LODWORD(v41) = vsub_f32(*(float32x2_t *)((char *)&v53 + 4), (float32x2_t)LODWORD(v39)).u32[0];
    HIDWORD(v41) = vadd_f32(*(float32x2_t *)(&v53 + 4), 0).i32[1];
    *(_QWORD *)((char *)&v53 + 4) = v41;
    *((float *)&v53 + 3) = v40 + (float)(v39 + *((float *)&v53 + 3));
    goto LABEL_9;
  }
  if ((v13 & 1) != 0)
  {
LABEL_9:
    v16 = 1;
    goto LABEL_11;
  }
  v16 = *(_BYTE *)(a1 + 41) != 0;
LABEL_11:
  *(_BYTE *)(a1 + 41) = v16;
  v17 = v53;
  v18 = *(unsigned __int8 *)(a1 + 40);
  v19 = *(_BYTE *)(a3 + 45);
  v20 = *(unsigned __int8 *)(a3 + 46);
  v46 = v8;
  v21 = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v8 + 8) = v21 + 1;
  v47 = v45;
  *(_OWORD *)v48 = v17;
  *(_DWORD *)&v48[16] = v10;
  *(_DWORD *)&v48[20] = 0;
  v48[24] = 4;
  v48[25] = v11;
  v22 = 32 * v19;
  if (v20)
    v22 |= 0x40u;
  v23 = v22 & 0x40;
  v24 = v22 & 0x20;
  if (v15)
    v25 = 22;
  else
    v25 = 6;
  *(_WORD *)&v48[26] = v25 | (v18 << 7) | v24 | v23;
  v49 = 0;
  v51 = 0;
  v50 = 0;
  v52 = 0;
  v26 = a5[3];
  if (v26 == a5[2])
  {
    WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InlineDisplay::Box>(a5, (unint64_t)&v46);
  }
  else
  {
    v27 = *(_QWORD *)a5;
    v28 = *(_QWORD *)a5 + 80 * v26;
    *(_QWORD *)v28 = v8;
    *(_DWORD *)(v8 + 8) = v21 + 2;
    v29 = v47;
    v30 = *(_OWORD *)v48;
    *(_OWORD *)(v28 + 36) = *(_OWORD *)&v48[12];
    *(_OWORD *)(v28 + 24) = v30;
    *(_OWORD *)(v28 + 8) = v29;
    v31 = v49;
    if (v49)
      *(_DWORD *)v49 += 2;
    *(_QWORD *)(v28 + 52) = v31;
    v32 = v50;
    if (v50)
      *(_DWORD *)v50 += 2;
    v33 = v27 + 80 * v26;
    *(_QWORD *)(v33 + 60) = v32;
    v34 = v51;
    *(_DWORD *)(v33 + 76) = v52;
    *(_QWORD *)(v33 + 68) = v34;
    ++a5[3];
  }
  if ((*(_WORD *)&v48[26] & 0x100) != 0)
  {
    {
      WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
      qword_1EE2F92D8 = 0;
      qword_1EE2F92E0 = 0;
    }
    *(_QWORD *)&v53 = &v46;
    WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v53);
  }
  v35 = v50;
  v50 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v14);
    else
      *(_DWORD *)v35 -= 2;
  }
  result = v49;
  v49 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  v37 = v46;
  v46 = 0;
  if (v37)
  {
    v38 = *(_DWORD *)(v37 + 8);
    if (!v38)
    {
      __break(0xC471u);
      JUMPOUT(0x194316C20);
    }
    *(_DWORD *)(v37 + 8) = v38 - 1;
  }
  return result;
}

void WebCore::Layout::InlineFormattingContext::createDisplayContentForInlineContent(uint64_t a1, WebCore::Layout::LineBox *a2, WebCore::Layout::LineLayoutResult *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  unint64_t v12;
  _BOOL4 v13;
  unint64_t v14;
  BOOL v15;
  int v16;
  int v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  WTF *v22;
  WTF *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  WTF *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  char v66;
  WTF *v67;
  int v68;
  unsigned int v69;
  _OWORD v70[8];
  __int128 v71;
  uint64_t v72;

  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(unsigned __int8 *)(v10 + 24);
  if (*(_BYTE *)(v10 + 24))
  {
    v12 = *(_QWORD *)(v10 + 8) - *(_QWORD *)(v10 + 16);
    v14 = *((_DWORD *)a3 + 11) != 0;
    v13 = v12 < v14;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = *((_DWORD *)a3 + 11) != 0;
  }
  *(_QWORD *)&v65 = a1;
  *((_QWORD *)&v65 + 1) = a4;
  WebCore::Layout::InlineDisplayLineBuilder::build((uint64_t **)&v65, a3, a2, v13, (uint64_t)v70);
  WebCore::Layout::InlineDisplayContentBuilder::InlineDisplayContentBuilder((uint64_t)&v65, (uint64_t *)a1, a4, (uint64_t)a2, (uint64_t)v70);
  WebCore::Layout::InlineDisplayContentBuilder::build((WebCore::Layout::InlineDisplayContentBuilder *)&v65, a3, (unint64_t)&v67);
  if (v11)
    v15 = v12 == v14;
  else
    v15 = 0;
  v16 = v15;
  if (v15)
    v17 = 2;
  else
    v17 = (*(_BYTE *)(*(_QWORD *)a1 + 33) & 0x1C) != 0
       && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 32) + 150) & 0x20) != 0;
  WebCore::Layout::InlineDisplayLineBuilder::trailingEllipsisVisualRectAfterTruncation(v17, (float *)v70, (uint64_t)&v67, *((unsigned __int8 *)a3 + 1369), (uint64_t)&v65);
  if (v66)
  {
    v71 = v65;
    if (!(_BYTE)v72)
      LOBYTE(v72) = 1;
    if (v16)
    {
      *(_QWORD *)(a1 + 80) = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 88) = 1;
    }
  }
  v20 = *(unsigned int *)(a5 + 24);
  v19 = *(unsigned int *)(a5 + 28);
  v21 = v69 + v19;
  if (v21 > v20)
  {
    v51 = v20 + (v20 >> 2);
    if (v51 >= 0x10)
      v52 = v51 + 1;
    else
      v52 = 16;
    if (v52 > v21)
      v21 = v52;
    if (v21 >= 0x3333334)
    {
LABEL_67:
      __break(0xC471u);
      JUMPOUT(0x1943170FCLL);
    }
    v53 = *(WTF::StringImpl **)(a5 + 16);
    v54 = (WTF::StringImpl *)((char *)v53 + 80 * v19);
    v55 = 80 * v21;
    v56 = WTF::fastMalloc((WTF *)(80 * v21));
    *(_DWORD *)(a5 + 24) = (v55 & 0xFFFFFFF0) / 0x50;
    *(_QWORD *)(a5 + 16) = v56;
    WTF::VectorTypeOperations<WebCore::InlineDisplay::Box>::move(v53, v54, v56);
    if (v53)
    {
      if (*(WTF::StringImpl **)(a5 + 16) == v53)
      {
        *(_QWORD *)(a5 + 16) = 0;
        *(_DWORD *)(a5 + 24) = 0;
      }
      WTF::fastFree(v53, v18);
    }
  }
  if (v69)
  {
    v22 = v67;
    v23 = (WTF *)((char *)v67 + 80 * v69);
    v24 = *(_DWORD *)(a5 + 28);
    do
    {
      v25 = *(_QWORD *)(a5 + 16);
      v26 = v25 + 80 * v24;
      v27 = *(_QWORD *)v22;
      *(_QWORD *)v26 = *(_QWORD *)v22;
      ++*(_DWORD *)(v27 + 8);
      v28 = *(_OWORD *)((char *)v22 + 8);
      v29 = *(_OWORD *)((char *)v22 + 24);
      *(_OWORD *)(v26 + 36) = *(_OWORD *)((char *)v22 + 36);
      *(_OWORD *)(v26 + 24) = v29;
      *(_OWORD *)(v26 + 8) = v28;
      v30 = *(_DWORD **)((char *)v22 + 52);
      if (v30)
        *v30 += 2;
      *(_QWORD *)(v26 + 52) = v30;
      v31 = *(_DWORD **)((char *)v22 + 60);
      if (v31)
        *v31 += 2;
      v32 = v25 + 80 * v24;
      *(_QWORD *)(v32 + 60) = v31;
      v33 = *(_QWORD *)((char *)v22 + 68);
      *(_DWORD *)(v32 + 76) = *((_DWORD *)v22 + 19);
      *(_QWORD *)(v32 + 68) = v33;
      v24 = *(_DWORD *)(a5 + 28) + 1;
      *(_DWORD *)(a5 + 28) = v24;
      v22 = (WTF *)((char *)v22 + 80);
    }
    while (v22 != v23);
  }
  v34 = *(unsigned int *)(a5 + 12);
  if ((_DWORD)v34 == *(_DWORD *)(a5 + 8))
  {
    v35 = WTF::Vector<WebCore::InlineDisplay::Line,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, v34 + 1, (unint64_t)v70);
    v36 = *(_QWORD *)a5 + 152 * *(unsigned int *)(a5 + 12);
    v38 = *(_OWORD *)(v35 + 112);
    v37 = *(_OWORD *)(v35 + 128);
    v39 = *(_OWORD *)(v35 + 96);
    *(_QWORD *)(v36 + 144) = *(_QWORD *)(v35 + 144);
    *(_OWORD *)(v36 + 112) = v38;
    *(_OWORD *)(v36 + 128) = v37;
    *(_OWORD *)(v36 + 96) = v39;
    v40 = *(_OWORD *)(v35 + 80);
    v42 = *(_OWORD *)(v35 + 32);
    v41 = *(_OWORD *)(v35 + 48);
    *(_OWORD *)(v36 + 64) = *(_OWORD *)(v35 + 64);
    *(_OWORD *)(v36 + 80) = v40;
    *(_OWORD *)(v36 + 32) = v42;
    *(_OWORD *)(v36 + 48) = v41;
    v43 = *(_OWORD *)(v35 + 16);
    *(_OWORD *)v36 = *(_OWORD *)v35;
    *(_OWORD *)(v36 + 16) = v43;
  }
  else
  {
    v57 = *(_QWORD *)a5 + 152 * v34;
    v58 = v70[1];
    *(_OWORD *)v57 = v70[0];
    *(_OWORD *)(v57 + 16) = v58;
    v59 = v70[2];
    v60 = v70[3];
    v61 = v70[5];
    *(_OWORD *)(v57 + 64) = v70[4];
    *(_OWORD *)(v57 + 80) = v61;
    *(_OWORD *)(v57 + 32) = v59;
    *(_OWORD *)(v57 + 48) = v60;
    v62 = v70[6];
    v63 = v70[7];
    v64 = v71;
    *(_QWORD *)(v57 + 144) = v72;
    *(_OWORD *)(v57 + 112) = v63;
    *(_OWORD *)(v57 + 128) = v64;
    *(_OWORD *)(v57 + 96) = v62;
  }
  v44 = *(_DWORD *)(a5 + 12);
  *(_DWORD *)(a5 + 12) = v44 + 1;
  if (v44 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x194317138);
  }
  v45 = v67;
  if (v69)
  {
    v46 = 80 * v69;
    do
    {
      if ((*((_WORD *)v45 + 25) & 0x100) != 0)
      {
        {
          WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
          qword_1EE2F92D8 = 0;
          qword_1EE2F92E0 = 0;
        }
        *(_QWORD *)&v65 = v45;
        WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v65);
      }
      v47 = *(WTF::StringImpl **)((char *)v45 + 60);
      *(_QWORD *)((char *)v45 + 60) = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v18);
        else
          *(_DWORD *)v47 -= 2;
      }
      v48 = *(WTF::StringImpl **)((char *)v45 + 52);
      *(_QWORD *)((char *)v45 + 52) = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v18);
        else
          *(_DWORD *)v48 -= 2;
      }
      v49 = *(_QWORD *)v45;
      *(_QWORD *)v45 = 0;
      if (v49)
      {
        v50 = *(_DWORD *)(v49 + 8);
        if (!v50)
          goto LABEL_67;
        *(_DWORD *)(v49 + 8) = v50 - 1;
      }
      v45 = (WTF *)((char *)v45 + 80);
      v46 -= 80;
    }
    while (v46);
    v45 = v67;
  }
  if (v45)
  {
    v67 = 0;
    v68 = 0;
    WTF::fastFree(v45, v18);
  }
}

uint64_t **WebCore::Layout::InlineDisplayLineBuilder::build@<X0>(uint64_t **this@<X0>, const WebCore::Layout::LineLayoutResult *a2@<X1>, const WebCore::Layout::LineBox *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t **v7;
  char v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  unsigned int v30;
  unsigned int v31;
  float v32;
  int v33;
  __int16 v34;
  char v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  BOOL v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  BOOL v53;
  int v54;
  const WebCore::Layout::Box *v56;
  uint64_t v57;
  WebCore::Layout::BoxGeometry **v58;
  WebCore::Layout::BoxGeometry *v59;
  float v60;
  float v61;
  unsigned int v62;
  int v63;
  BOOL v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  float v73;
  int v74;
  float v75;
  float v76;
  int v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  const WebCore::Layout::Box *v83;
  uint64_t v84;
  const WebCore::Layout::BoxGeometry **v85;
  float v86;
  const WebCore::Layout::Box *v87;
  uint64_t v88;
  _QWORD *v89;
  _DWORD *v90;
  float v91;
  float v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  const WebCore::Layout::Box *v110;
  int v111;
  uint64_t v112;
  unsigned int v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  unsigned int v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  const WebCore::Layout::Box *v125;
  int v126;
  uint64_t *v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  int v133;
  const WebCore::Layout::Box *v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;

  v7 = this;
  v9 = *((_BYTE *)a2 + 1360);
  v10 = *((float *)a3 + 3);
  v11 = *((float *)a3 + 5);
  if (v9)
  {
    v127 = this[1];
    v128 = *((_DWORD *)v127 + 4);
    v129 = *(uint64_t *)((char *)v127 + 4);
    v64 = __OFADD__(v128, HIDWORD(v129));
    v130 = v128 + HIDWORD(v129);
    v131 = (v128 >> 31) + 0x7FFFFFFF;
    if (!v64)
      v131 = v130;
    v64 = __OFADD__(v131, (_DWORD)v129);
    v132 = v131 + v129;
    v133 = (v131 >> 31) + 0x7FFFFFFF;
    if (v64)
      v132 = v133;
    v13 = (float)((float)v132 * 0.015625) - (float)(v10 + v11);
    v12 = *((float *)a3 + 12);
    v14 = v11 - *((float *)a2 + 324);
  }
  else
  {
    v12 = *((float *)a3 + 12);
    v13 = *((float *)a3 + 3);
    v14 = v12;
  }
  v15 = 0;
  v16 = *((float *)a3 + 4);
  v17 = *((float *)a3 + 13);
  v18 = 0.0;
  if (*((_BYTE *)a3 + 8))
  {
    v19 = 0.0;
    if (*((_BYTE *)a3 + 84))
    {
      v19 = v16 + v17;
      v20 = 0.0;
      if (*((_BYTE *)a3 + 136))
      {
        v20 = *((float *)a3 + 33);
        v19 = v19 - *((float *)a3 + 32);
      }
      v18 = (float)(v16 + (float)(v17 + *((float *)a3 + 15))) + v20;
      v15 = 1;
    }
  }
  else
  {
    v19 = 0.0;
  }
  v21 = *((float *)a3 + 6);
  v22 = *((float *)a3 + 14);
  v23 = **this;
  v24 = *(_DWORD *)(v23 + 56);
  if (*((_BYTE *)a2 + 1332))
  {
    v25 = v11 + *((float *)a2 + 334);
    v26 = v21 + 0.0;
    v27 = v22 - v25;
    if ((float)(v22 - v25) <= 0.0)
    {
LABEL_12:
      v28 = v13;
      v29 = *((float *)a3 + 4);
      goto LABEL_13;
    }
    if ((v24 & 0x4000000) == 0)
    {
LABEL_11:
      v25 = fmaxf(v25 + (float)((float)((float)(v13 + v25) + v27) - (float)(v13 + v25)), 0.0);
      goto LABEL_12;
    }
LABEL_56:
    v28 = v13 - v27;
    v29 = v16 + 0.0;
    v25 = fmaxf(v25 + v27, 0.0);
    goto LABEL_13;
  }
  if ((v24 & 0x4000000) != 0)
  {
    v27 = (float)(v22 - *((float *)a2 + 334)) - v11;
    v25 = *((float *)a3 + 5);
    v26 = *((float *)a3 + 6);
    v28 = v13;
    v29 = *((float *)a3 + 4);
    if (v27 <= 0.0)
      goto LABEL_13;
    goto LABEL_56;
  }
  v27 = v22 - v11;
  v25 = *((float *)a3 + 5);
  v26 = *((float *)a3 + 6);
  v28 = v13;
  v29 = *((float *)a3 + 4);
  if ((float)(v22 - v11) > 0.0)
    goto LABEL_11;
LABEL_13:
  v30 = *((_DWORD *)a3 + 39);
  if (v30)
  {
    v50 = *((_QWORD *)a3 + 18);
    v51 = v50 + 104 * v30;
    v136 = v12;
    v137 = *((float *)a3 + 3);
    v135 = v14;
    while (1)
    {
      v52 = *(unsigned __int8 *)(v50 + 47);
      v138 = v18;
      v139 = v19;
      if (v52 <= 7)
        break;
      if (v52 == 8)
      {
        v83 = *(const WebCore::Layout::Box **)v50;
        v84 = (*v7)[1];
        if (*(_DWORD *)(v84 + 8))
        {
          v112 = *(_QWORD *)(v84 + 40);
          v113 = *(_DWORD *)(v112 - 8);
          v114 = ((unint64_t)v83 + ~((_QWORD)v83 << 32)) ^ (((unint64_t)v83 + ~((_QWORD)v83 << 32)) >> 22);
          v115 = 9 * ((v114 + ~(v114 << 13)) ^ ((v114 + ~(v114 << 13)) >> 8));
          v116 = (v115 ^ (v115 >> 15)) + ~((v115 ^ (v115 >> 15)) << 27);
          v117 = v113 & ((v116 >> 31) ^ v116);
          if (*(const WebCore::Layout::Box **)(v112 + 16 * v117) != v83)
          {
            v118 = 1;
            do
              v117 = ((_DWORD)v117 + v118++) & v113;
            while (*(const WebCore::Layout::Box **)(v112 + 16 * v117) != v83);
          }
          v85 = (const WebCore::Layout::BoxGeometry **)(v112 + 16 * v117 + 8);
        }
        else
        {
          v85 = (const WebCore::Layout::BoxGeometry **)((char *)v83 + 104);
        }
        this = (uint64_t **)WebCore::Layout::LineBox::logicalBorderBoxForAtomicInlineLevelBox(a3, v83, *v85);
        v75 = v16 + v86;
        v12 = v136;
        v10 = v137;
        v14 = v135;
        v18 = v138;
        v19 = v139;
LABEL_89:
        if (*(_BYTE *)(v50 + 44))
        {
          v77 = *(unsigned __int8 *)(v50 + 96);
          v78 = 0.0;
LABEL_91:
          v79 = v75;
          if (v77)
          {
            v78 = *(float *)(v50 + 92);
            v79 = v75 - *(float *)(v50 + 88);
          }
        }
        else
        {
          v78 = 0.0;
          if (*(_BYTE *)(v50 + 47) == 8)
          {
            v77 = *(unsigned __int8 *)(v50 + 96);
            goto LABEL_91;
          }
          v79 = v75;
        }
        v80 = (float)(v73 + v75) + v78;
        if (v15)
          v81 = v19;
        else
          v81 = v79;
        if (v79 >= v81)
          v19 = v81;
        else
          v19 = v79;
        if (v15)
          v82 = v18;
        else
          v82 = v80;
        if (v82 >= v80)
          v18 = v82;
        else
          v18 = v80;
        v15 = 1;
        goto LABEL_106;
      }
      if (v52 == 16)
      {
        v87 = *(const WebCore::Layout::Box **)v50;
        v88 = (*v7)[1];
        if (!*(_DWORD *)(v88 + 8))
        {
          v89 = (_QWORD *)((char *)v87 + 104);
          goto LABEL_120;
        }
        v119 = *(_QWORD *)(v88 + 40);
        if (v119)
        {
          v120 = *(_DWORD *)(v119 - 8);
          v121 = ((unint64_t)v87 + ~((_QWORD)v87 << 32)) ^ (((unint64_t)v87 + ~((_QWORD)v87 << 32)) >> 22);
          v122 = 9 * ((v121 + ~(v121 << 13)) ^ ((v121 + ~(v121 << 13)) >> 8));
          v123 = (v122 ^ (v122 >> 15)) + ~((v122 ^ (v122 >> 15)) << 27);
          v124 = v120 & ((v123 >> 31) ^ v123);
          v125 = *(const WebCore::Layout::Box **)(v119 + 16 * v124);
          if (v125 != v87)
          {
            v126 = 1;
            while (v125)
            {
              v124 = ((_DWORD)v124 + v126) & v120;
              v125 = *(const WebCore::Layout::Box **)(v119 + 16 * v124);
              ++v126;
              if (v125 == v87)
                goto LABEL_155;
            }
            goto LABEL_156;
          }
LABEL_155:
          v89 = (_QWORD *)(v119 + 16 * v124 + 8);
LABEL_120:
          v90 = (_DWORD *)*v89;
        }
        else
        {
LABEL_156:
          v90 = 0;
        }
        this = (uint64_t **)WebCore::Layout::LineBox::logicalRectForInlineLevelBox((uint64_t)a3, v87);
        v93 = v90[10];
        v94 = v90[11];
        v64 = __OFADD__(v93, v94);
        v95 = v93 + v94;
        v96 = (v93 >> 31) + 0x7FFFFFFF;
        if (v64)
          v95 = (v93 >> 31) + 0x7FFFFFFF;
        v97 = v90[14];
        v98 = v90[15];
        v64 = __OFADD__(v97, v98);
        v99 = v97 + v98;
        if (v64)
          v99 = (v97 >> 31) + 0x7FFFFFFF;
        v64 = __OFADD__(v95, v99);
        v100 = v95 + v99;
        v101 = (v95 >> 31) + 0x7FFFFFFF;
        if (!v64)
          v101 = v100;
        v64 = __OFADD__(v93, v97);
        v102 = v93 + v97;
        if (v64)
          v102 = v96;
        v73 = v92 + (float)((float)v101 * 0.015625);
        if (v102 == 0x80000000)
          v103 = 0x7FFFFFFF;
        else
          v103 = -v102;
        v75 = v16 + (float)(v91 + (float)((float)v103 * 0.015625));
        goto LABEL_88;
      }
LABEL_106:
      v50 += 104;
      if (v50 == v51)
      {
        v23 = **v7;
        v17 = *((float *)a3 + 13);
        v22 = *((float *)a3 + 14);
        goto LABEL_14;
      }
    }
    if (v52 != 4 && v52 - 1 >= 2)
      goto LABEL_106;
    v53 = v52 > 4;
    v54 = (1 << v52) & 0x16;
    if (v53 || v54 == 0)
    {
      v73 = 0.0;
      v75 = 0.0;
      goto LABEL_89;
    }
    v56 = *(const WebCore::Layout::Box **)v50;
    v57 = (*v7)[1];
    if (*(_DWORD *)(v57 + 8))
    {
      v104 = *(_QWORD *)(v57 + 40);
      if (!v104)
      {
        v59 = 0;
LABEL_67:
        if (*((_BYTE *)*v7 + 161)
          || *(_BYTE *)(v50 + 44)
          || (v134 = v56,
              this = (uint64_t **)WebCore::Layout::BoxGeometry::horizontalBorderAndPadding(v59),
              v56 = v134,
              (_DWORD)this))
        {
          this = (uint64_t **)WebCore::Layout::LineBox::logicalRectForInlineLevelBox((uint64_t)a3, v56);
          v62 = *((_DWORD *)v59 + 10);
          v63 = *((_DWORD *)v59 + 11);
          v64 = __OFADD__(v62, v63);
          v65 = v62 + v63;
          v66 = (v62 >> 31) + 0x7FFFFFFF;
          if (v64)
            v65 = (v62 >> 31) + 0x7FFFFFFF;
          v67 = *((_DWORD *)v59 + 14);
          v68 = *((_DWORD *)v59 + 15);
          v64 = __OFADD__(v67, v68);
          v69 = v67 + v68;
          if (v64)
            v69 = (v67 >> 31) + 0x7FFFFFFF;
          v64 = __OFADD__(v65, v69);
          v70 = v65 + v69;
          v71 = (v65 >> 31) + 0x7FFFFFFF;
          if (!v64)
            v71 = v70;
          v64 = __OFADD__(v62, v67);
          v72 = v62 + v67;
          if (v64)
            v72 = v66;
          v73 = v61 + (float)((float)v71 * 0.015625);
          if (v72 == 0x80000000)
            v74 = 0x7FFFFFFF;
          else
            v74 = -v72;
          v75 = v16 + (float)(v60 + (float)((float)v74 * 0.015625));
          if (*((_BYTE *)a3 + 8))
          {
            v76 = v26 + v29;
            if (v75 < v29)
              v29 = v75;
            if (v76 < (float)(v73 + v75))
              v76 = v73 + v75;
            v26 = fmaxf(v26 + (float)(v76 - (float)(v26 + v29)), 0.0);
          }
LABEL_88:
          v12 = v136;
          v10 = v137;
          v14 = v135;
          v18 = v138;
          v19 = v139;
          goto LABEL_89;
        }
        v12 = v136;
        v10 = v137;
        v14 = v135;
        v18 = v138;
        v19 = v139;
        goto LABEL_106;
      }
      v105 = *(_DWORD *)(v104 - 8);
      v106 = ((unint64_t)v56 + ~((_QWORD)v56 << 32)) ^ (((unint64_t)v56 + ~((_QWORD)v56 << 32)) >> 22);
      v107 = 9 * ((v106 + ~(v106 << 13)) ^ ((v106 + ~(v106 << 13)) >> 8));
      v108 = (v107 ^ (v107 >> 15)) + ~((v107 ^ (v107 >> 15)) << 27);
      v109 = v105 & ((v108 >> 31) ^ v108);
      v110 = *(const WebCore::Layout::Box **)(v104 + 16 * v109);
      if (v110 != v56)
      {
        v111 = 1;
        while (v110)
        {
          v109 = ((_DWORD)v109 + v111) & v105;
          v110 = *(const WebCore::Layout::Box **)(v104 + 16 * v109);
          ++v111;
          if (v110 == *(const WebCore::Layout::Box **)v50)
            goto LABEL_143;
        }
        v59 = 0;
        goto LABEL_67;
      }
LABEL_143:
      v58 = (WebCore::Layout::BoxGeometry **)(v104 + 16 * v109 + 8);
      v56 = *(const WebCore::Layout::Box **)v50;
    }
    else
    {
      v58 = (WebCore::Layout::BoxGeometry **)((char *)v56 + 104);
    }
    v59 = *v58;
    goto LABEL_67;
  }
LABEL_14:
  v31 = *(_DWORD *)(v23 + 60);
  v32 = *((float *)a3 + 18);
  v33 = *((_DWORD *)a3 + 8);
  v34 = (unsigned __int16)*(_DWORD *)(*((_QWORD *)a3 + 5) + 60) >> 13;
  v35 = 2;
  switch((unsigned __int16)*(_DWORD *)(*((_QWORD *)a3 + 5) + 60) >> 13)
  {
    case 1:
    case 2:
      goto LABEL_16;
    case 3:
    case 5:
      LOBYTE(v34) = 3;
      goto LABEL_16;
    case 4:
      goto LABEL_17;
    default:
      LOBYTE(v34) = 0;
LABEL_16:
      v35 = v34;
LABEL_17:
      v36 = ((v31 >> 13) & 6) - 2;
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      if (v36 >= 4)
        v37 = v28;
      else
        v37 = v29;
      if (v36 >= 4)
        v38 = v13;
      else
        v38 = v16;
      if (v36 >= 4)
        v39 = v16;
      else
        v39 = v13;
      *(float *)(a5 + 16) = v38;
      *(float *)(a5 + 20) = v39;
      if (v36 >= 4)
        v40 = v29;
      else
        v40 = v28;
      if (v36 >= 4)
        v41 = v25;
      else
        v41 = v26;
      if (v36 >= 4)
        v42 = v11;
      else
        v42 = v21;
      if (v36 >= 4)
        v43 = v21;
      else
        v43 = v11;
      *(float *)(a5 + 24) = v42;
      *(float *)(a5 + 28) = v43;
      if (v36 >= 4)
        v44 = v26;
      else
        v44 = v25;
      v45 = v17 + v32;
      if (v15)
        v46 = v18;
      else
        v46 = v16;
      *(float *)(a5 + 32) = v10;
      *(float *)(a5 + 36) = v16;
      if (v15)
        v47 = v19;
      else
        v47 = v16;
      *(float *)(a5 + 40) = v11;
      *(float *)(a5 + 44) = v21;
      v48 = (v35 & 6) != 2;
      *(_QWORD *)(a5 + 48) = 0;
      *(_QWORD *)(a5 + 56) = 0;
      *(float *)(a5 + 64) = v37;
      *(float *)(a5 + 68) = v40;
      *(float *)(a5 + 72) = v41;
      *(float *)(a5 + 76) = v44;
      *(_QWORD *)(a5 + 80) = 0;
      *(_QWORD *)(a5 + 88) = 0;
      *(float *)(a5 + 96) = v47;
      *(float *)(a5 + 100) = v46;
      *(float *)(a5 + 104) = v45;
      *(float *)(a5 + 108) = v12;
      *(float *)(a5 + 112) = v14;
      *(float *)(a5 + 116) = v22;
      *(_DWORD *)(a5 + 120) = v33;
      if (a4)
        v49 = 8;
      else
        v49 = 0;
      *(_BYTE *)(a5 + 124) = (v49 | (2 * v48) | *(_BYTE *)(a5 + 124) & 0xE0 | v9) ^ 1;
      *(_BYTE *)(a5 + 128) = 0;
      *(_BYTE *)(a5 + 144) = 0;
      return this;
  }
}

uint64_t WebCore::Layout::InlineDisplayContentBuilder::InlineDisplayContentBuilder(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t i;
  _DWORD *v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  for (i = *a2; (*(_WORD *)(i + 12) & 0x80) == 0; i = *(_QWORD *)(i + 80))
    ;
  v8 = WebCore::Layout::InlineFormattingContext::geometryForBox((uint64_t)a2, i);
  v9 = v8[2];
  v10 = v8[3];
  v11 = -(-v9 >> 6);
  if (v9 >= 0)
    v11 = (v9 + 63) >> 6;
  if (v9 <= 2147483583)
    v12 = v11;
  else
    v12 = 0x1FFFFFFLL;
  if (v10 > 2147483583)
  {
    v13 = 0x1FFFFFFLL;
  }
  else if (v10 < 0)
  {
    v13 = -(-v10 >> 6);
  }
  else
  {
    v13 = (v10 + 63) >> 6;
  }
  *(_QWORD *)(a1 + 32) = v12 | (v13 << 32);
  return a1;
}

void WebCore::Layout::InlineDisplayContentBuilder::build(WebCore::Layout::InlineDisplayContentBuilder *this@<X0>, const WebCore::Layout::LineLayoutResult *a2@<X1>, unint64_t a3@<X8>)
{
  unint64_t v4;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  int v15;
  float32x2_t v16;
  uint64_t v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  WebCore::Layout::Box *v29;
  _WORD *v30;
  float v31;
  WebCore::Layout::Box *v32;
  _WORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float32x2_t v37;
  int8x8_t v38;
  __int16 v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  int8x8_t v43;
  float32x2_t v44;
  int8x8_t v45;
  int8x8_t v46;
  float32x2_t v47;
  int8x8_t v48;
  int8x8_t v49;
  int8x8_t v50;
  int32x4_t *v51;
  __int32 *v52;
  __int32 *v53;
  int8x8_t v54;
  float32x2_t v55;
  int32x4_t *v56;
  int8x8_t v57;
  int32x2_t v58;
  float32x2_t v59;
  int32x2_t v60;
  float32x2_t v61;
  int8x8_t v62;
  float32x2_t v63;
  int8x8_t v64;
  void *v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  float v69;
  WebCore::Layout::Box *v70;
  _WORD *v71;
  float v72;
  WebCore::Layout::Box *v73;
  _WORD *v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  WTF **v78;
  WTF *v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  int v85;
  WTF *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  int v97;
  WTF *v98;
  float v99;
  void *v100;
  __int16 v101;
  float v102;
  void *v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  int v114[4];
  int32x4_t v115;
  __int128 *v116;
  char *v117;
  BOOL *v118;
  BOOL v119;
  char v120;
  __int128 v121;
  WTF *v122;
  uint64_t v123;
  WTF *v124;
  uint64_t v125;
  uint64_t *v126[2];

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v4 = *(unsigned int *)(*((_QWORD *)this + 2) + 156) + (unint64_t)*((unsigned int *)a2 + 11);
  if (v4 >= 0x3333333)
  {
    __break(0xC471u);
    JUMPOUT(0x194318174);
  }
  v7 = 80 * v4 + 80;
  v8 = WTF::fastMalloc((WTF *)(80 * v4 + 80));
  *(_DWORD *)(a3 + 8) = (v7 & 0xFFFFFFF0) / 0x50;
  *(_QWORD *)a3 = v8;
  if (*((_DWORD *)a2 + 339))
    WebCore::Layout::InlineDisplayContentBuilder::processBidiContent((uint64_t *)this, (uint64_t)a2, (unsigned int *)a3);
  else
    WebCore::Layout::InlineDisplayContentBuilder::processNonBidiContent((uint64_t *)this, (uint64_t *)a2, (unsigned int *)a3);
  if ((*(_QWORD *)(**(_QWORD **)this + 32) & 0x1FLL) == 0x19)
  {
    v75 = *((float *)a2 + 346);
    if (v75 != 0.0)
      WebCore::Layout::InlineContentAligner::applyRubyAnnotationAlignmentOffset((uint64_t *)a3, *(_QWORD **)this, v75);
  }
  if (*((_BYTE *)this + 42))
  {
    v126[0] = 0;
    v76 = *((unsigned int *)a2 + 11);
    if ((_DWORD)v76)
    {
      v77 = 120 * v76;
      v78 = (WTF **)(*((_QWORD *)a2 + 4) + 8);
      do
      {
        if (*((_BYTE *)v78 - 8) == 11)
        {
          v79 = *v78;
          if ((*((_QWORD *)*v78 + 4) & 0x1FLL) == 0x18)
          {
            v124 = *v78;
            ++*((_DWORD *)v79 + 2);
            WTF::HashTable<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>>::add((uint64_t)v126, (uint64_t *)&v124, (uint64_t)&v115);
            if (v124)
            {
              v80 = *((_DWORD *)v124 + 2);
              if (!v80)
              {
                __break(0xC471u);
                JUMPOUT(0x19431816CLL);
              }
              *((_DWORD *)v124 + 2) = v80 - 1;
            }
          }
        }
        v78 += 15;
        v77 -= 120;
      }
      while (v77);
    }
    v81 = *((_QWORD *)a2 + 172);
    if (v81 && *(_DWORD *)(v81 - 12))
      WebCore::Layout::InlineContentAligner::applyRubyBaseAlignmentOffset(a3, (uint64_t *)a2 + 172, *((_DWORD *)a2 + 339) == 0, *(_QWORD **)this);
    v124 = 0;
    v125 = 0;
    v122 = 0;
    v123 = 0;
    if (*(_DWORD *)(a3 + 12) >= 2u)
    {
      v82 = 1;
      do
      {
        if ((*(_WORD *)(*(_QWORD *)a3 + 80 * v82 + 50) & 0xF) == 6)
        {
          v83 = *(_QWORD *)(*(_QWORD *)a3 + 80 * v82);
          if ((*(_QWORD *)(v83 + 32) & 0x1FLL) == 0x18
            && !WTF::HashSet<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTableTraits>::contains<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>((uint64_t *)v126, v83))
          {
            v82 = WebCore::Layout::InlineDisplayContentBuilder::processRubyBase((uint64_t *)this, v82, a3, (uint64_t)&v124, (uint64_t)&v122);
          }
        }
        ++v82;
      }
      while (v82 < *(unsigned int *)(a3 + 12));
    }
    WebCore::Layout::InlineDisplayContentBuilder::applyRubyOverhang((unint64_t)this, (uint64_t *)a3, (uint64_t)&v124);
    v121 = *(_OWORD *)(*((_QWORD *)this + 2) + 12);
    v85 = (unsigned __int16)*(_DWORD *)(**(_QWORD **)this + 60) >> 13;
    v120 = (unsigned __int16)*(_DWORD *)(**(_QWORD **)this + 60) >> 13;
    v104 = 2;
    switch(v85)
    {
      case 1:
      case 2:
        goto LABEL_104;
      case 3:
      case 5:
        LOBYTE(v85) = 3;
        goto LABEL_104;
      case 4:
        goto LABEL_105;
      default:
        LOBYTE(v85) = 0;
LABEL_104:
        v104 = v85;
LABEL_105:
        v119 = (v104 & 6) != 2;
        v86 = v122;
        if (HIDWORD(v123))
        {
          v87 = 8 * HIDWORD(v123);
          v88 = (char *)v122 - 8;
          do
          {
            v89 = *(_QWORD *)&v88[v87];
            if (v89 >= *(unsigned int *)(a3 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x1943182E8);
            }
            v90 = *(_QWORD *)(*(_QWORD *)a3 + 80 * v89);
            if ((*(_QWORD *)(v90 + 32) & 0x1FLL) == 0x18
              && (v91 = *(_QWORD *)(v90 + 88)) != 0
              && (*(_QWORD *)(v91 + 32) & 0x1FLL) == 0x19)
            {
              if ((*(_WORD *)(v91 + 12) & 0x40) != 0)
                v92 = v91;
              else
                v92 = 0;
            }
            else
            {
              v92 = 0;
            }
            v115.i64[0] = (uint64_t)this;
            v115.i64[1] = v92;
            v116 = &v121;
            v117 = &v120;
            v93 = v89 + 1;
            v118 = &v119;
            WebCore::Layout::InlineDisplayContentBuilder::processRubyContent(WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::Layout::LineLayoutResult const&)::$_0::operator()((uint64_t)&v115);
            v114[0] = v94;
            v114[1] = v95;
            v114[2] = v96;
            v114[3] = v97;
            WebCore::Layout::InlineDisplayContentBuilder::insertRubyAnnotationBox((uint64_t)this, v92, v93, v114, (unsigned int *)a3);
            v87 -= 8;
          }
          while (v87);
          v86 = v122;
        }
        if (v86)
        {
          v122 = 0;
          LODWORD(v123) = 0;
          WTF::fastFree(v86, v84);
        }
        v98 = v124;
        if (v124)
        {
          v124 = 0;
          LODWORD(v125) = 0;
          WTF::fastFree(v98, v84);
        }
        WTF::HashSet<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTableTraits>::~HashSet(v126, v84);
        break;
    }
  }
  if (*((_BYTE *)this + 43))
  {
    LOBYTE(v101) = 2;
    switch((unsigned __int16)*(_DWORD *)(**(_QWORD **)this + 60) >> 13)
    {
      case 1:
      case 2:
        v101 = (unsigned __int16)*(_DWORD *)(**(_QWORD **)this + 60) >> 13;
        break;
      case 3:
      case 5:
        LOBYTE(v101) = 3;
        break;
      case 4:
        break;
      default:
        LOBYTE(v101) = 0;
        break;
    }
    v9 = *(_DWORD *)(a3 + 12);
    if (v9)
    {
      v10 = 0;
      v11 = v101 & 6;
      v12 = *(_QWORD *)a3;
      v13 = *(_QWORD *)a3 + 80 * v9;
      v14 = 0.0;
      v15 = ((unsigned __int16)*(_DWORD *)(**(_QWORD **)this + 60) >> 13) - 2;
      v16 = (float32x2_t)vdup_n_s32(0x3C800000u);
      do
      {
        if ((*(_WORD *)(v12 + 50) & 0xE) == 0)
        {
          v17 = *(_QWORD *)(*(_QWORD *)v12 + 80);
          v18 = *(_DWORD *)(v17 + 56);
          if (((v18 >> 15) & 0xF) != 0)
          {
            v19 = (void *)(v17 + 16);
            if ((v18 & 0x8000) != 0)
            {
              if (!v10)
              {
                v23 = *(unsigned int *)(a3 + 12);
                if (!(_DWORD)v23)
                  goto LABEL_43;
                v24 = *(_QWORD *)a3;
                if (v11 == 2)
                {
                  v25 = 0;
                  v67 = 80 * v23;
                  v68 = v24 + 40;
                  v69 = 0.0;
                  v14 = 0.0;
                  v107 = (void *)(v17 + 16);
                  v108 = *(_QWORD *)(*(_QWORD *)v12 + 80);
                  do
                  {
                    v111 = v25;
                    if ((*(_WORD *)(v68 + 10) & 0xF) == 7
                      || ((v70 = *(WebCore::Layout::Box **)(v68 - 40), *(_DWORD *)v68)
                       || (*((_WORD *)v70 + 6) & 0x200) == 0
                       || !*(_QWORD *)(WebCore::Layout::Box::rareData(*(WebCore::Layout::Box **)(v68 - 40)) + 24)
                        ? (v71 = (_WORD *)((char *)v70 + 16))
                        : (v71 = *(_WORD **)(WebCore::Layout::Box::rareData(v70) + 24)),
                          (*((_BYTE *)v71 + 41) & 0x80) == 0
                       || (*(_WORD *)(v68 + 10) & 0xE) != 0
                       && ((v73 = *(WebCore::Layout::Box **)(v68 - 40), *(_DWORD *)v68)
                        || (*((_WORD *)v73 + 6) & 0x200) == 0
                        || !*(_QWORD *)(WebCore::Layout::Box::rareData(*(WebCore::Layout::Box **)(v68 - 40)) + 24)
                         ? (v74 = (_WORD *)((char *)v73 + 16))
                         : (v74 = *(_WORD **)(WebCore::Layout::Box::rareData(v73) + 24)),
                           (*(_BYTE *)(*((_QWORD *)v74 + 3) + 235) & 0x30) != 0)))
                    {
                      v72 = v69;
                    }
                    else
                    {
                      v72 = *(float *)(v68 - 32) + *(float *)(v68 - 24);
                      if ((_BYTE)v111 && v14 >= v72)
                        v72 = v69;
                      v111 = 1;
                      v14 = v72;
                    }
                    v68 += 80;
                    v69 = v72;
                    v67 -= 80;
                    v19 = v107;
                    v17 = v108;
                    v25 = v111;
                  }
                  while (v67);
                }
                else
                {
                  v25 = 0;
                  v26 = 80 * v23;
                  v27 = v24 + 40;
                  v28 = 0.0;
                  v14 = 0.0;
                  do
                  {
                    if ((*(_WORD *)(v27 + 10) & 0xF) == 7)
                      goto LABEL_40;
                    v29 = *(WebCore::Layout::Box **)(v27 - 40);
                    if (*(_DWORD *)v27)
                    {
                      v30 = (_WORD *)((char *)v29 + 16);
                    }
                    else
                    {
                      v99 = v28;
                      v105 = v26;
                      v112 = v25;
                      v109 = v17;
                      v100 = v19;
                      if ((*((_WORD *)v29 + 6) & 0x200) != 0 && *(_QWORD *)(WebCore::Layout::Box::rareData(v29) + 24))
                        v30 = *(_WORD **)(WebCore::Layout::Box::rareData(v29) + 24);
                      else
                        v30 = (_WORD *)((char *)v29 + 16);
                      v19 = v100;
                      v17 = v109;
                      v25 = v112;
                      v26 = v105;
                      v28 = v99;
                    }
                    if ((*((_BYTE *)v30 + 41) & 0x80) == 0)
                      goto LABEL_40;
                    if ((*(_WORD *)(v27 + 10) & 0xE) == 0)
                      goto LABEL_35;
                    v32 = *(WebCore::Layout::Box **)(v27 - 40);
                    if (*(_DWORD *)v27)
                    {
                      v33 = (_WORD *)((char *)v32 + 16);
                    }
                    else
                    {
                      v102 = v28;
                      v106 = v26;
                      v113 = v25;
                      v110 = v17;
                      v103 = v19;
                      if ((*((_WORD *)v32 + 6) & 0x200) != 0 && *(_QWORD *)(WebCore::Layout::Box::rareData(v32) + 24))
                        v33 = *(_WORD **)(WebCore::Layout::Box::rareData(v32) + 24);
                      else
                        v33 = (_WORD *)((char *)v32 + 16);
                      v19 = v103;
                      v17 = v110;
                      v25 = v113;
                      v26 = v106;
                      v28 = v102;
                    }
                    if ((*(_BYTE *)(*((_QWORD *)v33 + 3) + 235) & 0x30) != 0)
                    {
LABEL_40:
                      v31 = v28;
                    }
                    else
                    {
LABEL_35:
                      v31 = *(float *)(v27 - 28) + *(float *)(v27 - 20);
                      if ((_BYTE)v25 && v14 >= v31)
                        v31 = v28;
                      v25 = 1;
                      v14 = v31;
                    }
                    v27 += 80;
                    v28 = v31;
                    v26 -= 80;
                  }
                  while (v26);
                }
                if (!(_BYTE)v25)
LABEL_43:
                  v14 = 0.0;
              }
              v21 = *(float *)(v12 + 20);
              if (v11 == 2)
                v22 = *(float *)(v12 + 8) + *(float *)(v12 + 16);
              else
                v22 = *(float *)(v12 + 12) + v21;
              if ((*(_DWORD *)(v17 + 56) & 0x8000) != 0)
              {
                v115.i64[0] = (uint64_t)v19;
                *(float *)&v115.i32[2] = v21;
                *(float *)&v115.i32[3] = v14 - v22;
                LOBYTE(v116) = 1;
                v65 = v19;
                v66 = WebCore::computedUnderlineOffset((uint64_t)&v115, v19);
                v19 = v65;
                v20 = LODWORD(v66) | 0x100000000;
              }
              else
              {
                v20 = 0;
              }
              v10 = 1;
            }
            else
            {
              v20 = 0;
            }
            WebCore::computedVisualOverflowForDecorations((uint64_t)&v115, (WebCore::RenderStyle *)v19, v20);
            if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v115, v115))) & 1) != 0)
            {
              v51 = &v115;
              v52 = &v115.i32[1];
              v53 = (__int32 *)((unint64_t)&v115 | 0xC);
              *((_BYTE *)this + 41) = 1;
              v54 = *(int8x8_t *)(v12 + 24);
              v55 = *(float32x2_t *)(v12 + 32);
              switch(v15)
              {
                case 0:
                case 2:
                  v56 = &v115;
                  v51 = (int32x4_t *)((unint64_t)&v115 | 0xC);
                  v53 = &v115.i32[2];
                  break;
                case 1:
                case 3:
                  v56 = &v115;
                  v51 = (int32x4_t *)&v115.u64[1];
                  break;
                default:
                  v56 = (int32x4_t *)((unint64_t)&v115 | 0xC);
                  v53 = &v115.i32[1];
                  v52 = &v115.i32[2];
                  break;
              }
              v57 = (int8x8_t)vadd_f32((float32x2_t)v54, v55);
              v58.i32[0] = v51->i32[0];
              v58.i32[1] = *v52;
              v59 = vmul_f32(vcvt_f32_s32(v58), v16);
              v60.i32[0] = *v53;
              v60.i32[1] = v56->i32[0];
              v61 = vadd_f32(vmul_f32(vcvt_f32_s32(v60), v16), vadd_f32(v55, v59));
              v62 = (int8x8_t)vsub_f32((float32x2_t)v54, v59);
              v63 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v54, (float32x2_t)v62), v62, v54);
              v64 = (int8x8_t)vadd_f32((float32x2_t)v62, v61);
              *(float32x2_t *)(v12 + 24) = v63;
              *(float32x2_t *)(v12 + 32) = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v64, (float32x2_t)v57), v64, v57), v63);
            }
          }
        }
        v12 += 80;
      }
      while (v12 != v13);
    }
  }
  if (*((_BYTE *)this + 41))
  {
    v34 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v34)
    {
      v35 = *(_QWORD *)a3;
      v36 = 80 * v34;
      v37 = 0;
      v38 = 0;
      do
      {
        v39 = *(_WORD *)(v35 + v36 - 30);
        v40 = v39 & 0xF;
        if ((v39 & 0xE) == 0 || ((v40 - 5) >= 2 ? (v41 = v40 == 8) : (v41 = 1), v41))
        {
          if (v40 == 6 && v37.f32[0] > 0.0 && v37.f32[1] > 0.0)
          {
            v42 = v35 + v36;
            v43 = *(int8x8_t *)(v35 + v36 - 56);
            v44 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v43, (float32x2_t)v38), v38, v43);
            v45 = (int8x8_t)vadd_f32((float32x2_t)v43, *(float32x2_t *)(v35 + v36 - 48));
            v46 = (int8x8_t)vadd_f32(v37, (float32x2_t)v38);
            *(float32x2_t *)(v42 - 56) = v44;
            *(float32x2_t *)(v42 - 48) = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v46, (float32x2_t)v45), v46, v45), v44);
          }
          v47 = 0;
          v48 = 0;
          if (*(_QWORD *)(*(_QWORD *)(v35 + v36 - 80) + 80) != **(_QWORD **)this)
          {
            v48 = *(int8x8_t *)(v35 + v36 - 56);
            v47 = *(float32x2_t *)(v35 + v36 - 48);
            if (v37.f32[0] > 0.0 && v37.f32[1] > 0.0)
            {
              v49 = (int8x8_t)vadd_f32(v37, (float32x2_t)v38);
              v50 = (int8x8_t)vadd_f32((float32x2_t)v48, v47);
              v48 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v38, (float32x2_t)v48), v48, v38);
              v47 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v50, (float32x2_t)v49), v50, v49), (float32x2_t)v48);
            }
          }
        }
        else
        {
          v47 = v37;
          v48 = v38;
        }
        v37 = v47;
        v38 = v48;
        v36 -= 80;
      }
      while (v36);
    }
  }
}

WTF *WebCore::Layout::InlineDisplayContentBuilder::processNonBidiContent(uint64_t *a1, uint64_t *a2, unsigned int *a3)
{
  float32x2_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  unsigned int v13;
  float v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  __int16 v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  float32x2_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  float32x2_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  int v50;
  int v51;
  float v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _DWORD *v70;
  double v71;
  BOOL v72;
  unsigned int v73;
  double v74;
  uint64_t v76;
  float v77;
  float v78;
  float v79;
  float v80;
  _DWORD *v81;
  int v82;
  float v83;
  float v84;
  float v85;
  float v86;
  int v87;
  int v88;
  BOOL v89;
  int v90;
  float v91;
  int v92;
  int v93;
  float v95;
  float v96;
  float v97;
  float v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  WTF *result;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  int v117;
  _QWORD *v119;
  double v120;
  unsigned int v122;
  double v123;
  uint64_t v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  float v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  double v147;
  int v149;
  double v150;
  int v152;
  uint64_t v153;
  unsigned int v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char v168;
  unint64_t v169;
  int v170;
  uint64_t v171;
  unsigned int v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  _QWORD *v179;
  int v180;
  uint64_t v181;
  unsigned int v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  unsigned int v198;
  int v199;
  int v200;
  uint64_t *v201;
  __int128 v202;
  unint64_t v203;
  WTF *v204;
  uint64_t v205;
  float32x2_t v206;
  __int128 v207;
  _BYTE v208[28];
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  uint64_t v211;
  int v212;

  v6 = *(float32x2_t *)*a1;
  v7 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)&v6 + 60) >> 13;
  v9 = a1[2];
  v8 = a1[3];
  v10 = *(float *)(v8 + 16);
  v11 = *(float *)(v8 + 20);
  v204 = 0;
  v205 = 0;
  v12 = *(float *)(v9 + 48);
  v13 = *(_DWORD *)(v9 + 56);
  if ((v7 - 2) <= 3)
  {
    v14 = *(float *)(v9 + 52);
    v15 = *(_DWORD *)(v9 + 60);
  }
  else
  {
    v14 = *(float *)(v9 + 48);
    v12 = *(float *)(v9 + 52);
    v15 = *(_DWORD *)(v9 + 56);
    v13 = *(_DWORD *)(v9 + 60);
  }
  v16 = *(unsigned __int8 *)(v9 + 84);
  v17 = *(_QWORD *)v9;
  v18 = *((unsigned __int8 *)a1 + 40);
  v206 = v6;
  v19 = *(_DWORD *)(*(_QWORD *)&v6 + 8);
  *(_DWORD *)(*(_QWORD *)&v6 + 8) = v19 + 1;
  *(float *)&v207 = v10 + v14;
  *((float *)&v207 + 1) = v11 + v12;
  *((_QWORD *)&v207 + 1) = __PAIR64__(v13, v15);
  *(float *)v208 = v10 + v14;
  *(float *)&v208[4] = v11 + v12;
  *(_DWORD *)&v208[8] = v15;
  *(_DWORD *)&v208[12] = v13;
  *(_DWORD *)&v208[16] = v17;
  *(_DWORD *)&v208[20] = 0;
  v208[24] = 4;
  v208[25] = -2;
  if (v16)
    v20 = 23;
  else
    v20 = 7;
  *(_WORD *)&v208[26] = v20 | (v18 << 7);
  v209 = 0;
  v211 = 0;
  v210 = 0;
  v212 = 0;
  v21 = a3[3];
  if (v21 == a3[2])
  {
    WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InlineDisplay::Box>(a3, (unint64_t)&v206);
  }
  else
  {
    v22 = *(_QWORD *)a3;
    v23 = *(_QWORD *)a3 + 80 * v21;
    *(float32x2_t *)v23 = v6;
    *(_DWORD *)(*(_QWORD *)&v6 + 8) = v19 + 2;
    v24 = v207;
    v25 = *(_OWORD *)v208;
    *(_OWORD *)(v23 + 36) = *(_OWORD *)&v208[12];
    *(_OWORD *)(v23 + 24) = v25;
    *(_OWORD *)(v23 + 8) = v24;
    v26 = v209;
    if (v209)
      *(_DWORD *)v209 += 2;
    *(_QWORD *)(v23 + 52) = v26;
    v27 = v210;
    if (v210)
      *(_DWORD *)v210 += 2;
    v28 = v22 + 80 * v21;
    *(_QWORD *)(v28 + 60) = v27;
    v29 = v211;
    *(_DWORD *)(v28 + 76) = v212;
    *(_QWORD *)(v28 + 68) = v29;
    ++a3[3];
  }
  if ((*(_WORD *)&v208[26] & 0x100) != 0)
  {
    {
      WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
      qword_1EE2F92D8 = 0;
      qword_1EE2F92E0 = 0;
    }
    *(_QWORD *)&v202 = &v206;
    WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v202);
  }
  v30 = v210;
  v210 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = v209;
  v209 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = v206;
  v206 = 0;
  if (v32)
  {
    v33 = *(_DWORD *)(*(_QWORD *)&v32 + 8);
    if (!v33)
    {
      __break(0xC471u);
      JUMPOUT(0x194318EC0);
    }
    *(_DWORD *)(*(_QWORD *)&v32 + 8) = v33 - 1;
  }
  v201 = a2 + 4;
  v203 = 0;
  LODWORD(v34) = *((_DWORD *)a2 + 11);
  if ((_DWORD)v34)
  {
    v35 = 0;
    v36 = (_QWORD *)(v9 + 40);
    v200 = v7 - 1;
    v37 = (float32x2_t)vdup_n_s32(0x3C800000u);
    do
    {
      v38 = *v201;
      v39 = (unsigned __int8 *)(*v201 + 120 * v35);
      v40 = *v39;
      if (v40 != 10 && v40 != 5)
      {
        v42 = v38 + 120 * v35;
        v45 = *(_QWORD *)(v42 + 8);
        v44 = (uint64_t *)(v42 + 8);
        v43 = v45;
        switch(*v39)
        {
          case 0u:
          case 1u:
          case 2u:
          case 4u:
            v46 = *(_QWORD *)(v43 + 80);
            v47 = v9 + 40;
            if (*v36 == v46)
              goto LABEL_30;
            v62 = *(_QWORD *)(v9 + 160);
            v63 = *(_DWORD *)(v62 - 8);
            v64 = (~(v46 << 32) + v46) ^ ((unint64_t)(~(v46 << 32) + v46) >> 22);
            v65 = 9 * ((v64 + ~(v64 << 13)) ^ ((v64 + ~(v64 << 13)) >> 8));
            v66 = (v65 ^ (v65 >> 15)) + ~((v65 ^ (v65 >> 15)) << 27);
            v67 = v63 & ((v66 >> 31) ^ v66);
            v68 = *(_QWORD *)(v62 + 16 * v67);
            if (v68 == v46)
              goto LABEL_45;
            v170 = 1;
            while (v68)
            {
              v67 = ((_DWORD)v67 + v170) & v63;
              v68 = *(_QWORD *)(v62 + 16 * v67);
              ++v170;
              if (v68 == v46)
                goto LABEL_45;
            }
            v67 = *(unsigned int *)(v62 - 4);
LABEL_45:
            v69 = *(_QWORD *)(v62 + 16 * v67 + 8);
            if (v69 >= *(unsigned int *)(v9 + 156))
            {
              __break(0xC471u);
              JUMPOUT(0x19431909CLL);
            }
            v47 = *(_QWORD *)(v9 + 144) + 104 * v69;
LABEL_30:
            v48 = *(float *)(v47 + 12) - *(float *)(v47 + 40);
            v49 = *(_QWORD *)(v47 + 48);
            v50 = *(_DWORD *)(v49 + 44);
            v51 = *(_DWORD *)(v49 + 48);
            while (1)
            {
              if ((_QWORD *)v47 == v36 || (*(_QWORD *)(v47 + 72) & 0xFELL) == 6)
                goto LABEL_32;
              v111 = *(_QWORD *)(*(_QWORD *)v47 + 80);
              if (*v36 == v111)
                break;
              v181 = *(_QWORD *)(v9 + 160);
              v182 = *(_DWORD *)(v181 - 8);
              v183 = (~(v111 << 32) + v111) ^ ((unint64_t)(~(v111 << 32) + v111) >> 22);
              v184 = 9 * ((v183 + ~(v183 << 13)) ^ ((v183 + ~(v183 << 13)) >> 8));
              v185 = (v184 ^ (v184 >> 15)) + ~((v184 ^ (v184 >> 15)) << 27);
              v186 = v182 & ((v185 >> 31) ^ v185);
              v187 = *(_QWORD *)(v181 + 16 * v186);
              if (v187 != v111)
              {
                v193 = 1;
                while (v187)
                {
                  v186 = ((_DWORD)v186 + v193) & v182;
                  v187 = *(_QWORD *)(v181 + 16 * v186);
                  ++v193;
                  if (v187 == v111)
                    goto LABEL_179;
                }
                v186 = *(unsigned int *)(v181 - 4);
              }
LABEL_179:
              v188 = *(_QWORD *)(v181 + 16 * v186 + 8);
              if (v188 >= *(unsigned int *)(v9 + 156))
              {
                __break(0xC471u);
                JUMPOUT(0x1943190A4);
              }
              v47 = *(_QWORD *)(v9 + 144) + 104 * v188;
              v48 = v48 + (float)(*(float *)(v47 + 12) - *(float *)(v47 + 40));
            }
            v48 = v48 + (float)(*(float *)(v9 + 52) - *(float *)(v9 + 80));
LABEL_32:
            v52 = (float)(v51 + v50);
            v53 = v38 + 120 * v35;
            v54 = *(float *)(v53 + 28);
            v55 = *(float *)(v9 + 48) + *(float *)(v53 + 24);
            goto LABEL_33;
          case 3u:
            WebCore::Layout::LineBox::logicalRectForInlineLevelBox(v9, (const WebCore::Layout::Box *)v43);
            v55 = v77;
            v48 = v78;
            v54 = v79;
            v52 = v80;
            goto LABEL_33;
          case 0xCu:
            v116 = (*(_DWORD *)(v43 + 32) >> 5) & 0x1F;
            v72 = v116 > 0x19;
            v117 = (1 << v116) & 0x3528029;
            if (!v72 && v117 != 0)
            {
              v119 = WebCore::Layout::InlineFormattingContext::geometryForBox(*a1, v43);
              v120 = (float)((float)(*(float *)(v9 + 12) + *(float *)(v9 + 48)) + *(float *)(v38 + 120 * v35 + 24))
                   * 64.0;
              if (v120 >= 2147483650.0 || v120 <= -2147483650.0)
              {
                if (v120 >= 2147483650.0)
                {
                  v122 = 0x7FFFFFFF;
                }
                else
                {
                  if (v120 > -2147483650.0)
                    goto LABEL_116;
                  v122 = 0x80000000;
                }
              }
              else
              {
LABEL_116:
                v122 = (int)v120;
              }
              v123 = *(float *)(v9 + 16) * 64.0;
              if (v123 >= 2147483650.0 || v123 <= -2147483650.0)
              {
                if (v123 > -2147483650.0)
                  v198 = (int)v123;
                else
                  v198 = 0x80000000;
                if (v123 < 2147483650.0)
                  v125 = v198;
                else
                  v125 = 0x7FFFFFFFLL;
              }
              else
              {
                v125 = (int)v123;
              }
              *v119 = v122 | (unint64_t)(v125 << 32);
              break;
            }
            if (HIDWORD(v205) == (_DWORD)v205)
            {
              v179 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v204, HIDWORD(v205) + 1, (unint64_t)&v203);
              v180 = HIDWORD(v205) + 1;
              *((_QWORD *)v204 + HIDWORD(v205)) = *v179;
            }
            else
            {
              v180 = HIDWORD(v205) + 1;
              *((_QWORD *)v204 + HIDWORD(v205)) = v35;
            }
            HIDWORD(v205) = v180;
            break;
          default:
            v81 = WebCore::Layout::InlineFormattingContext::geometryForBox(*a1, v43);
            v82 = *v39;
            if ((v82 - 6) >= 3)
            {
              if (v82 == 9 || v82 == 11)
              {
                WebCore::Layout::LineBox::logicalRectForInlineLevelBox(v9, (const WebCore::Layout::Box *)v43);
                v99 = v81[10];
                v100 = v81[11];
                v89 = __OFADD__(v99, v100);
                v101 = v99 + v100;
                v102 = (v99 >> 31) + 0x7FFFFFFF;
                if (v89)
                  v101 = (v99 >> 31) + 0x7FFFFFFF;
                v103 = v81[14];
                v104 = v81[15];
                v89 = __OFADD__(v103, v104);
                v105 = v103 + v104;
                if (v89)
                  v105 = (v103 >> 31) + 0x7FFFFFFF;
                v89 = __OFADD__(v101, v105);
                v106 = v101 + v105;
                v107 = (v101 >> 31) + 0x7FFFFFFF;
                if (!v89)
                  v107 = v106;
                v89 = __OFADD__(v99, v103);
                v108 = v99 + v103;
                if (v89)
                  v108 = v102;
                v52 = v98 + (float)((float)v107 * 0.015625);
                v54 = v97 + 0.0;
                if (v108 == 0x80000000)
                  v109 = 0x7FFFFFFF;
                else
                  v109 = -v108;
                v55 = v95 + 0.0;
                v48 = v96 + (float)((float)v109 * 0.015625);
              }
              else
              {
                v52 = 0.0;
                v54 = 0.0;
                v48 = 0.0;
                v55 = 0.0;
              }
            }
            else
            {
              WebCore::Layout::LineBox::logicalRectForInlineLevelBox(v9, (const WebCore::Layout::Box *)v43);
              v87 = v81[6];
              v88 = v81[7];
              v89 = __OFADD__(v87, v88);
              v90 = v87 + v88;
              v91 = (float)v87;
              if (v89)
                v92 = (v87 >> 31) + 0x7FFFFFFF;
              else
                v92 = v90;
              v48 = v84 + (float)(v91 * 0.015625);
              v55 = v83 + 0.0;
              if (v92 == 0x80000000)
                v93 = 0x7FFFFFFF;
              else
                v93 = -v92;
              v54 = v85 + 0.0;
              v52 = v86 + (float)((float)v93 * 0.015625);
            }
LABEL_33:
            v56 = v52;
            v57 = v54;
            v58 = v48;
            v59 = v55;
            switch(v200)
            {
              case 0:
                v58 = *(float *)(v9 + 24) - (float)(v52 + v48);
                v56 = v52;
                v57 = v54;
                v59 = v55;
                break;
              case 1:
              case 3:
                v59 = *(float *)(v9 + 24) - (float)(v52 + v48);
                v56 = v54;
                v57 = v52;
                v58 = v55;
                break;
              case 2:
              case 4:
                v56 = v54;
                v57 = v52;
                v58 = v55;
                v59 = v48;
                break;
              default:
                break;
            }
            *(float *)&v202 = v10 + v59;
            *((float *)&v202 + 1) = v11 + v58;
            *((_QWORD *)&v202 + 1) = __PAIR64__(LODWORD(v56), LODWORD(v57));
            v60 = *v39;
            if (v60 <= 2)
            {
              WebCore::Layout::InlineDisplayContentBuilder::appendTextDisplayBox((uint64_t)a1, v39, (float *)&v202, a3);
              goto LABEL_36;
            }
            switch(v60)
            {
              case 3u:
                WebCore::Layout::InlineDisplayContentBuilder::appendHardLineBreakDisplayBox((uint64_t)a1, (uint64_t)v39, (unsigned int *)&v202, a3);
                goto LABEL_36;
              case 6u:
                goto LABEL_72;
              case 4u:
                WebCore::Layout::InlineDisplayContentBuilder::appendSoftLineBreakDisplayBox((uint64_t)a1, (uint64_t)v39, (unsigned int *)&v202, a3);
                goto LABEL_36;
            }
            if (v60 - 7 <= 1)
            {
LABEL_72:
              WebCore::Layout::InlineDisplayContentBuilder::appendAtomicInlineLevelDisplayBox((uint64_t)a1, (uint64_t)v39, (WebCore::FloatRect *)&v202, a3);
              goto LABEL_36;
            }
            if ((v60 | 2) != 0xB || !*(_BYTE *)(v9 + 8))
              goto LABEL_36;
            v114 = *v44;
            v115 = v9 + 40;
            if (*v36 == *v44)
              goto LABEL_107;
            v171 = *(_QWORD *)(v9 + 160);
            v172 = *(_DWORD *)(v171 - 8);
            v173 = (~(v114 << 32) + v114) ^ ((unint64_t)(~(v114 << 32) + v114) >> 22);
            v174 = 9 * ((v173 + ~(v173 << 13)) ^ ((v173 + ~(v173 << 13)) >> 8));
            v175 = (v174 ^ (v174 >> 15)) + ~((v174 ^ (v174 >> 15)) << 27);
            v176 = v172 & ((v175 >> 31) ^ v175);
            v177 = *(_QWORD *)(v171 + 16 * v176);
            if (v177 == v114)
              goto LABEL_173;
            v192 = 1;
            while (v177)
            {
              v176 = ((_DWORD)v176 + v192) & v172;
              v177 = *(_QWORD *)(v171 + 16 * v176);
              ++v192;
              if (v177 == v114)
                goto LABEL_173;
            }
            v176 = *(unsigned int *)(v171 - 4);
LABEL_173:
            v178 = *(_QWORD *)(v171 + 16 * v176 + 8);
            if (v178 >= *(unsigned int *)(v9 + 156))
            {
              __break(0xC471u);
              JUMPOUT(0x1943190ACLL);
            }
            v115 = *(_QWORD *)(v9 + 144) + 104 * v178;
LABEL_107:
            WebCore::Layout::InlineDisplayContentBuilder::appendInlineBoxDisplayBox((uint64_t)a1, (uint64_t)v39, v115, &v202, a3);
LABEL_36:
            v61 = *v39;
            if (v61 <= 4 && v61 != 3 || v61 == 11 && !*(_BYTE *)(v9 + 8))
              break;
            v70 = WebCore::Layout::InlineFormattingContext::geometryForBox(*a1, v43);
            v71 = (float)(v55 + *(float *)(v9 + 12)) * 64.0;
            v72 = v71 >= 2147483650.0 || v71 <= -2147483650.0;
            if (v72)
            {
              if (v71 > -2147483650.0)
                v197 = (int)v71;
              else
                v197 = 0x80000000;
              if (v71 < 2147483650.0)
                v73 = v197;
              else
                v73 = 0x7FFFFFFF;
            }
            else
            {
              v73 = (int)v71;
            }
            v74 = (float)(v48 + *(float *)(v9 + 16)) * 64.0;
            if (v74 < 2147483650.0 && v74 > -2147483650.0)
              goto LABEL_58;
            if (v74 >= 2147483650.0)
            {
              v76 = 0x7FFFFFFFLL;
            }
            else if (v74 > -2147483650.0)
            {
LABEL_58:
              v76 = (int)v74;
            }
            else
            {
              v76 = 0x80000000;
            }
            if ((*v39 | 2) != 0xB)
            {
              *(_QWORD *)v70 = v73 | (unint64_t)(v76 << 32);
              v126 = v70[8];
              v127 = v70[9];
              v89 = __OFADD__(v126, v127);
              v128 = v126 + v127;
              v129 = (v126 >> 31) + 0x7FFFFFFF;
              if (!v89)
                v129 = v128;
              v130 = v70[12];
              v131 = v70[13];
              v89 = __OFADD__(v130, v131);
              v132 = v130 + v131;
              v133 = (v130 >> 31) + 0x7FFFFFFF;
              if (!v89)
                v133 = v132;
              v89 = __OFADD__(v129, v133);
              v134 = v129 + v133;
              v135 = (v129 >> 31) + 0x7FFFFFFF;
              if (!v89)
                v135 = v134;
              v136 = v54 + (float)((float)v135 * -0.015625);
              v137 = v70[10];
              v138 = v70[11];
              v89 = __OFADD__(v137, v138);
              v139 = v137 + v138;
              v140 = (v137 >> 31) + 0x7FFFFFFF;
              if (!v89)
                v140 = v139;
              v141 = v70[14];
              v142 = v70[15];
              v89 = __OFADD__(v141, v142);
              v143 = v141 + v142;
              v144 = (v141 >> 31) + 0x7FFFFFFF;
              if (!v89)
                v144 = v143;
              v89 = __OFADD__(v140, v144);
              v145 = v140 + v144;
              v146 = (v140 >> 31) + 0x7FFFFFFF;
              if (v89)
                v145 = v146;
              v147 = v136 * 64.0;
              if (v147 >= 2147483650.0 || v147 <= -2147483650.0)
              {
                if (v147 > -2147483650.0)
                  v199 = (int)v147;
                else
                  v199 = 0x80000000;
                if (v147 < 2147483650.0)
                  v149 = v199;
                else
                  v149 = 0x7FFFFFFF;
              }
              else
              {
                v149 = (int)v147;
              }
              v150 = (float)(v52 + (float)((float)v145 * -0.015625)) * 64.0;
              if (v150 >= 2147483650.0 || v150 <= -2147483650.0)
              {
                if (v150 >= 2147483650.0)
                {
                  v152 = 0x7FFFFFFF;
                }
                else
                {
                  if (v150 > -2147483650.0)
                    goto LABEL_145;
                  v152 = 0x80000000;
                }
              }
              else
              {
LABEL_145:
                v152 = (int)v150;
              }
              v70[2] = v149;
              v70[3] = v152;
              break;
            }
            v206 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v76, v73)), v37);
            *(_QWORD *)&v207 = __PAIR64__(LODWORD(v52), LODWORD(v54));
            v112 = *v44;
            v113 = v9 + 40;
            if (*v36 != *v44)
            {
              v153 = *(_QWORD *)(v9 + 160);
              v154 = *(_DWORD *)(v153 - 8);
              v155 = (~(v112 << 32) + v112) ^ ((unint64_t)(~(v112 << 32) + v112) >> 22);
              v156 = 9 * ((v155 + ~(v155 << 13)) ^ ((v155 + ~(v155 << 13)) >> 8));
              v157 = (v156 ^ (v156 >> 15)) + ~((v156 ^ (v156 >> 15)) << 27);
              v158 = v154 & ((v157 >> 31) ^ v157);
              v159 = *(_QWORD *)(v153 + 16 * v158);
              if (v159 != v112)
              {
                v189 = 1;
                while (v159)
                {
                  v158 = ((_DWORD)v158 + v189) & v154;
                  v159 = *(_QWORD *)(v153 + 16 * v158);
                  ++v189;
                  if (v159 == v112)
                    goto LABEL_148;
                }
                v158 = *(unsigned int *)(v153 - 4);
              }
LABEL_148:
              v160 = *(_QWORD *)(v153 + 16 * v158 + 8);
              if (v160 >= *(unsigned int *)(v9 + 156))
              {
                __break(0xC471u);
                JUMPOUT(0x1943190B4);
              }
              v113 = *(_QWORD *)(v9 + 144) + 104 * v160;
            }
            WebCore::Layout::InlineDisplayContentBuilder::setInlineBoxGeometry((uint64_t)v70, (uint64_t)v70, (float *)&v206, *(_BYTE *)(v113 + 45));
            break;
        }
      }
      v35 = v203 + 1;
      v203 = v35;
      v34 = *((unsigned int *)a2 + 11);
    }
    while (v35 < v34);
  }
  v206 = 0;
  *(_QWORD *)&v207 = 0;
  if (HIDWORD(v205))
  {
    v161 = *a1;
    if ((_DWORD)v34)
    {
      v162 = *(_DWORD *)(*(_QWORD *)v161 + 56);
      v163 = v34;
      if ((v162 & 0x4000000) == 0)
      {
        v164 = 0;
        v165 = 8;
        while (v164 < *((unsigned int *)a2 + 11))
        {
          v166 = *(_QWORD *)(*(_QWORD *)(*v201 + v165) + 32);
          if ((v166 & 0xE000000) == 0
            && (v166 & 0x180000) != 0x100000
            && WebCore::Layout::Line::Run::isContentfulOrHasDecoration((float *)(*v201 + v165 - 8), v161))
          {
            goto LABEL_159;
          }
          ++v164;
          v165 += 120;
          if (v163 == v164)
            goto LABEL_208;
        }
LABEL_254:
        __break(0xC471u);
        JUMPOUT(0x194319194);
      }
      v194 = 120 * v34;
      v164 = v34 - 1;
      while (1)
      {
        if (v164 >= *((unsigned int *)a2 + 11))
          goto LABEL_254;
        v195 = *(_QWORD *)(*(_QWORD *)(*v201 + v194 - 112) + 32);
        if ((v195 & 0xE000000) == 0
          && (v195 & 0x180000) != 0x100000
          && WebCore::Layout::Line::Run::isContentfulOrHasDecoration((float *)(*v201 + v194 - 120), v161))
        {
          break;
        }
        --v164;
        v194 -= 120;
        if (!v194)
          goto LABEL_208;
      }
LABEL_159:
      if (HIDWORD(v205))
      {
        if ((v162 & 0x4000000) != 0)
        {
          v196 = HIDWORD(v205) - 1;
          while (*((_QWORD *)v204 + v196) >= v164)
          {
            v168 = 0;
            v169 = 0;
            if (--v196 == -1)
              goto LABEL_187;
          }
          v168 = 1;
          v169 = v196;
        }
        else
        {
          v167 = 0;
          while (*((_QWORD *)v204 + v167) <= v164)
          {
            v168 = 0;
            v169 = 0;
            if (HIDWORD(v205) == ++v167)
              goto LABEL_187;
          }
          v168 = 1;
          v169 = v167;
        }
      }
      else
      {
        v168 = 0;
        v169 = 0;
      }
LABEL_187:
      v190 = a1[2];
      v191 = *(_QWORD *)(a1[1] + 4);
    }
    else
    {
LABEL_208:
      v190 = a1[2];
      v191 = *(_QWORD *)(a1[1] + 4);
      v169 = 0;
      v168 = 0;
    }
    WebCore::Layout::setGeometryForOutOfFlowBoxes((unsigned int *)&v204, v169, v168, (uint64_t)v201, (uint64_t)&v206, v161, v190, v191);
  }
  result = v204;
  if (v204)
  {
    v204 = 0;
    LODWORD(v205) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

float WebCore::Layout::LineBox::logicalRectForTextRun(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float i;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 80);
  v3 = a1 + 40;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = a1 + 40;
  if (v4 != v2)
  {
    v8 = *(_QWORD *)(a1 + 160);
    v9 = *(_DWORD *)(v8 - 8);
    v10 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(_QWORD *)(v8 + 16 * v13);
    if (v14 != v2)
    {
      v17 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v17) & v9;
        v14 = *(_QWORD *)(v8 + 16 * v13);
        ++v17;
        if (v14 == v2)
          goto LABEL_5;
      }
      v13 = *(unsigned int *)(v8 - 4);
    }
LABEL_5:
    v15 = *(_QWORD *)(v8 + 16 * v13 + 8);
    if (v15 >= *(unsigned int *)(a1 + 156))
    {
LABEL_24:
      __break(0xC471u);
      JUMPOUT(0x194319398);
    }
    v5 = *(_QWORD *)(a1 + 144) + 104 * v15;
  }
  for (i = *(float *)(v5 + 12) - *(float *)(v5 + 40); v5 != v3; i = i
                                                                   + (float)(*(float *)(v5 + 12) - *(float *)(v5 + 40)))
  {
    if ((*(_QWORD *)(v5 + 72) & 0xFELL) == 6)
      break;
    v16 = *(_QWORD *)(*(_QWORD *)v5 + 80);
    if (v4 == v16)
      break;
    v18 = *(_QWORD *)(a1 + 160);
    v19 = *(_DWORD *)(v18 - 8);
    v20 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(_QWORD *)(v18 + 16 * v23);
    if (v24 != v16)
    {
      v26 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v26) & v19;
        v24 = *(_QWORD *)(v18 + 16 * v23);
        ++v26;
        if (v24 == v16)
          goto LABEL_15;
      }
      v23 = *(unsigned int *)(v18 - 4);
    }
LABEL_15:
    v25 = *(_QWORD *)(v18 + 16 * v23 + 8);
    if (v25 >= *(unsigned int *)(a1 + 156))
      goto LABEL_24;
    v5 = *(_QWORD *)(a1 + 144) + 104 * v25;
  }
  return *(float *)(a1 + 48) + *(float *)(a2 + 24);
}

WTF::StringImpl *WebCore::Layout::InlineDisplayContentBuilder::appendAtomicInlineLevelDisplayBox(uint64_t a1, uint64_t a2, WebCore::FloatRect *a3, unsigned int *a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  WebCore::Layout *v14;
  WTF::StringImpl *v15;
  BOOL v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  int v20;
  __int16 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *result;
  uint64_t v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  _BYTE v37[28];
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  int v41;
  __int128 v42;

  v7 = *(_QWORD *)(a2 + 8);
  v8 = **(_QWORD **)(a1 + 16);
  v9 = *(_BYTE *)(a2 + 40);
  v10 = *(_DWORD *)a3;
  v11 = *((_DWORD *)a3 + 1);
  v12 = *((_DWORD *)a3 + 2);
  v13 = *((_DWORD *)a3 + 3);
  LODWORD(v42) = *(_DWORD *)a3;
  *(_QWORD *)((char *)&v42 + 4) = __PAIR64__(v12, v11);
  HIDWORD(v42) = v13;
  if (!v8
    && (*(_WORD *)(v7 + 12) & 0x200) != 0
    && *(_QWORD *)(WebCore::Layout::Box::rareData((WebCore::Layout::Box *)v7) + 24))
  {
    v14 = *(WebCore::Layout **)(WebCore::Layout::Box::rareData((WebCore::Layout::Box *)v7) + 24);
  }
  else
  {
    v14 = (WebCore::Layout *)(v7 + 16);
  }
  WebCore::Layout::computeInkOverflowForInlineLevelBox(v14, (float32x2_t *)&v42, a3);
  if (*(_BYTE *)(a1 + 41))
    v16 = 1;
  else
    v16 = *(_QWORD *)(v7 + 80) != **(_QWORD **)a1;
  *(_BYTE *)(a1 + 41) = v16;
  v17 = v42;
  v18 = *(_QWORD *)(a2 + 32);
  v19 = *(unsigned __int8 *)(a1 + 40);
  v35 = v7;
  v20 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)(v7 + 8) = v20 + 1;
  *(_QWORD *)&v36 = __PAIR64__(v11, v10);
  *((_QWORD *)&v36 + 1) = __PAIR64__(v13, v12);
  *(_OWORD *)v37 = v17;
  *(_DWORD *)&v37[16] = v8;
  *(_DWORD *)&v37[20] = HIDWORD(v18);
  v37[24] = v18;
  v37[25] = v9;
  if (v19)
    v21 = 149;
  else
    v21 = 21;
  *(_WORD *)&v37[26] = v21;
  v38 = 0;
  v40 = 0;
  v39 = 0;
  v41 = 0;
  v22 = a4[3];
  if (v22 == a4[2])
  {
    WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InlineDisplay::Box>(a4, (unint64_t)&v35);
  }
  else
  {
    v23 = *(_QWORD *)a4;
    v24 = *(_QWORD *)a4 + 80 * v22;
    *(_QWORD *)v24 = v7;
    *(_DWORD *)(v7 + 8) = v20 + 2;
    v25 = v36;
    v26 = *(_OWORD *)v37;
    *(_OWORD *)(v24 + 36) = *(_OWORD *)&v37[12];
    *(_OWORD *)(v24 + 24) = v26;
    *(_OWORD *)(v24 + 8) = v25;
    v27 = v38;
    if (v38)
      *(_DWORD *)v38 += 2;
    *(_QWORD *)(v24 + 52) = v27;
    v28 = v39;
    if (v39)
      *(_DWORD *)v39 += 2;
    v29 = v23 + 80 * v22;
    *(_QWORD *)(v29 + 60) = v28;
    v30 = v40;
    *(_DWORD *)(v29 + 76) = v41;
    *(_QWORD *)(v29 + 68) = v30;
    ++a4[3];
  }
  if ((*(_WORD *)&v37[26] & 0x100) != 0)
  {
    {
      WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
      qword_1EE2F92D8 = 0;
      qword_1EE2F92E0 = 0;
    }
    *(_QWORD *)&v42 = &v35;
    WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v42);
  }
  v31 = v39;
  v39 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v15);
    else
      *(_DWORD *)v31 -= 2;
  }
  result = v38;
  v38 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  v33 = v35;
  v35 = 0;
  if (v33)
  {
    v34 = *(_DWORD *)(v33 + 8);
    if (!v34)
    {
      __break(0xC471u);
      JUMPOUT(0x1943195F4);
    }
    *(_DWORD *)(v33 + 8) = v34 - 1;
  }
  return result;
}

uint64_t WebCore::Layout::computeInkOverflowForInlineLevelBox(WebCore::Layout *this, float32x2_t *a2, WebCore::FloatRect *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  float32x2_t v12;
  float32_t v13;
  float v14;
  float v15;
  float v16;
  int32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *((_QWORD *)this + 1);
  v6 = *(_QWORD *)(v5 + 16);
  v7 = *(unsigned __int8 *)(v6 + 52);
  if ((v7 & 0xE) != 0)
  {
    v21 = *((_QWORD *)this + 1);
    if ((v7 & 0xF) == 0)
      goto LABEL_8;
    v14 = *(float *)(v6 + 48);
    v15 = 3.0;
    if (((v14 < 3.0) & (v7 >> 4)) == 0 && v14 <= 0.0)
      goto LABEL_8;
    if (v14 >= 3.0)
      v15 = *(float *)(v6 + 48);
    v16 = (v7 & 0x10) != 0 ? v15 : *(float *)(v6 + 48);
    if ((float)(WebCore::RenderStyle::outlineOffset(this) + v16) > 0.0)
    {
      *(float *)v17.i32 = WebCore::RenderStyle::outlineSize(this);
      v18 = (float32x2_t)vdup_lane_s32(v17, 0);
      v19 = vsub_f32(*a2, v18);
      v20 = vadd_f32(v18, vadd_f32(v18, a2[1]));
      *a2 = v19;
      a2[1] = v20;
      v5 = *((_QWORD *)this + 1);
      v8 = 1;
    }
    else
    {
LABEL_8:
      v8 = 0;
      v5 = v21;
    }
  }
  else
  {
    v8 = 0;
  }
  v23 = 0;
  WebCore::RenderStyle::getShadowVerticalExtent(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 88), (int *)&v23 + 1, (int *)&v23);
  v22 = 0;
  WebCore::RenderStyle::getShadowHorizontalExtent(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 88), (int *)&v22 + 1, (int *)&v22);
  v9 = v23;
  v10 = v22;
  if (v23 || v22)
  {
    v12 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(HIDWORD(v23), HIDWORD(v22))), (float32x2_t)vdup_n_s32(0xBC800000));
    v13 = a2->f32[1] - v12.f32[1];
    a2->f32[0] = a2->f32[0] - v12.f32[0];
    a2->f32[1] = v13;
    a2[1] = vadd_f32(vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v9, v10)), (float32x2_t)vdup_n_s32(0x3C800000u)), vadd_f32(v12, a2[1]));
    return 1;
  }
  return v8;
}

uint64_t WebCore::RenderStyle::getShadowVerticalExtent(uint64_t result, int *a2, int *a3)
{
  float v3;
  double v4;
  unsigned int v5;
  float v6;
  double v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;

  *a2 = 0;
  for (*a3 = 0; result; result = *(_QWORD *)(result + 56))
  {
    if (*(_BYTE *)(result + 48) != 1)
    {
      if (*(_BYTE *)(result + 30))
        v3 = *(float *)(result + 24);
      else
        v3 = (float)*(int *)(result + 24);
      v4 = ceilf(v3 * 1.4) * 64.0;
      if (v4 >= 2147483650.0)
      {
        v5 = 0x7FFFFFFF;
      }
      else if (v4 <= -2147483650.0)
      {
        v5 = 0x80000000;
      }
      else
      {
        v5 = (int)v4;
      }
      if (*(_BYTE *)(result + 22))
        v6 = *(float *)(result + 16);
      else
        v6 = (float)*(int *)(result + 16);
      v7 = v6 * 64.0;
      if (v7 >= 2147483650.0)
      {
        v8 = 0x7FFFFFFF;
      }
      else if (v7 <= -2147483650.0)
      {
        v8 = 0x80000000;
      }
      else
      {
        v8 = (int)v7;
      }
      v9 = __OFADD__(v5, v8);
      v10 = v5 + v8;
      if (v9)
        v10 = (v5 >> 31) + 0x7FFFFFFF;
      v11 = *(unsigned __int8 *)(result + 12);
      if (v11 == 11)
      {
        v13 = 0;
      }
      else
      {
        if (*(_BYTE *)(result + 14))
          v12 = (int)*(float *)(result + 8);
        else
          v12 = *(_DWORD *)(result + 8);
        if (v12 >= -33554432)
        {
          if (v12 <= 0x1FFFFFF)
            v13 = v12 << 6;
          else
            v13 = 0x7FFFFFFF;
        }
        else
        {
          v13 = 0x80000000;
        }
      }
      v9 = __OFSUB__(v13, v10);
      v14 = v13 - v10;
      v15 = (v13 >> 31) + 0x7FFFFFFF;
      if (!v9)
        v15 = v14;
      if (v15 >= *a2)
        v15 = *a2;
      *a2 = v15;
      if (v11 == 11)
      {
        v17 = 0;
      }
      else
      {
        if (*(_BYTE *)(result + 14))
          v16 = (int)*(float *)(result + 8);
        else
          v16 = *(_DWORD *)(result + 8);
        if (v16 >= -33554432)
        {
          if (v16 <= 0x1FFFFFF)
            v17 = v16 << 6;
          else
            v17 = 0x7FFFFFFF;
        }
        else
        {
          v17 = 0x80000000;
        }
      }
      v9 = __OFADD__(v17, v10);
      v18 = v17 + v10;
      v19 = (v17 >> 31) + 0x7FFFFFFF;
      if (v9)
        v18 = v19;
      if (*a3 > v18)
        v18 = *a3;
      *a3 = v18;
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::getShadowHorizontalExtent(uint64_t result, int *a2, int *a3)
{
  float v3;
  double v4;
  unsigned int v5;
  float v6;
  double v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  float v12;
  double v13;
  unsigned int v14;
  int v15;
  float v16;
  double v17;
  unsigned int v18;
  int v19;

  *a2 = 0;
  for (*a3 = 0; result; result = *(_QWORD *)(result + 56))
  {
    if (*(_BYTE *)(result + 48) != 1)
    {
      if (*(_BYTE *)(result + 30))
        v3 = *(float *)(result + 24);
      else
        v3 = (float)*(int *)(result + 24);
      v4 = ceilf(v3 * 1.4) * 64.0;
      if (v4 >= 2147483650.0)
      {
        v5 = 0x7FFFFFFF;
      }
      else if (v4 <= -2147483650.0)
      {
        v5 = 0x80000000;
      }
      else
      {
        v5 = (int)v4;
      }
      if (*(_BYTE *)(result + 22))
        v6 = *(float *)(result + 16);
      else
        v6 = (float)*(int *)(result + 16);
      v7 = v6 * 64.0;
      v8 = (int)v7;
      if (v7 <= -2147483650.0)
        v8 = 0x80000000;
      if (v7 >= 2147483650.0)
        v8 = 0x7FFFFFFF;
      v9 = __OFADD__(v5, v8);
      v10 = v5 + v8;
      if (v9)
        v10 = (v5 >> 31) + 0x7FFFFFFF;
      v11 = *(unsigned __int8 *)(result + 6);
      if (*(_BYTE *)(result + 6))
        v12 = *(float *)result;
      else
        v12 = (float)*(int *)result;
      v13 = v12 * 64.0;
      if (v13 >= 2147483650.0)
      {
        v14 = 0x7FFFFFFF;
      }
      else if (v13 > -2147483650.0)
      {
        v14 = (int)v13;
      }
      else
      {
        v14 = 0x80000000;
      }
      v15 = v14 - v10;
      if (__OFSUB__(v14, v10))
        v15 = (v14 >> 31) + 0x7FFFFFFF;
      if (v15 >= *a2)
        v15 = *a2;
      *a2 = v15;
      if (v11)
        v16 = *(float *)result;
      else
        v16 = (float)*(int *)result;
      v17 = v16 * 64.0;
      if (v17 >= 2147483650.0)
      {
        v18 = 0x7FFFFFFF;
      }
      else if (v17 <= -2147483650.0)
      {
        v18 = 0x80000000;
      }
      else
      {
        v18 = (int)v17;
      }
      v9 = __OFADD__(v18, v10);
      v19 = v18 + v10;
      if (v9)
        v19 = (v18 >> 31) + 0x7FFFFFFF;
      if (*a3 > v19)
        v19 = *a3;
      *a3 = v19;
    }
  }
  return result;
}

void WebCore::Layout::InlineDisplayContentBuilder::setInlineBoxGeometry(uint64_t a1, uint64_t a2, float *a3, char a4)
{
  double v5;
  unsigned int v6;
  uint64_t v7;
  double v8;
  unsigned int v9;
  uint64_t v10;
  float v11;
  int v12;
  unsigned int v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  signed int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;

  v5 = *a3 * 64.0;
  if (v5 > -2147483650.0)
    v6 = (int)v5;
  else
    v6 = 0x80000000;
  if (v5 < 2147483650.0)
    v7 = v6;
  else
    v7 = 0x7FFFFFFFLL;
  v8 = a3[1] * 64.0;
  if (v8 > -2147483650.0)
    v9 = (int)v8;
  else
    v9 = 0x80000000;
  if (v8 < 2147483650.0)
    v10 = v9;
  else
    v10 = 0x7FFFFFFFLL;
  v11 = ceilf(a3[2] * 64.0);
  if (v11 > -2147500000.0)
    v12 = (int)v11;
  else
    v12 = 0x80000000;
  if (v11 < 2147500000.0)
    v13 = v12;
  else
    v13 = 0x7FFFFFFF;
  v14 = ceilf(a3[3] * 64.0);
  if (v14 >= 2147500000.0)
  {
    v15 = 0x7FFFFFFF;
  }
  else if (v14 <= -2147500000.0)
  {
    v15 = 0x80000000;
  }
  else
  {
    v15 = (int)v14;
  }
  if ((a4 & 1) != 0)
  {
    v25 = v7 | (v10 << 32);
  }
  else
  {
    v16 = WebCore::Layout::BoxGeometry::borderBoxRect(a2);
    if ((int)v16 >= (int)v7)
      v19 = v7;
    else
      v19 = v16;
    if (SHIDWORD(v16) >= (int)v10)
      v20 = v10;
    else
      v20 = HIDWORD(v16);
    v21 = v7 + v13;
    if (__OFADD__((_DWORD)v7, v13))
      v21 = (v7 >> 31) + 0x7FFFFFFF;
    v22 = v16 + v17;
    if (__OFADD__((_DWORD)v16, v17))
      v22 = (v16 >> 31) + 0x7FFFFFFF;
    if ((int)v21 <= v22)
      v21 = v22;
    v23 = v10 + v15;
    if (__OFADD__((_DWORD)v10, v15))
      v23 = (v10 >> 31) + 0x7FFFFFFF;
    v24 = HIDWORD(v16) + v18;
    if (__OFADD__(HIDWORD(v16), v18))
      v24 = (HIDWORD(v16) >> 31) + 0x7FFFFFFF;
    if ((int)v23 <= v24)
      v23 = v24;
    v25 = v19 | (v20 << 32);
    v13 = v21 - v19;
    if (__OFSUB__(v21, (_DWORD)v19))
      v13 = (v21 >> 31) + 0x7FFFFFFF;
    v15 = v23 - v20;
    if (__OFSUB__(v23, (_DWORD)v20))
      v15 = (v23 >> 31) + 0x7FFFFFFF;
  }
  *(_QWORD *)a2 = v25;
  v27 = *(_DWORD *)(a2 + 32);
  v26 = *(_DWORD *)(a2 + 36);
  v28 = __OFADD__(v27, v26);
  v29 = v27 + v26;
  v30 = (v27 >> 31) + 0x7FFFFFFF;
  if (!v28)
    v30 = v29;
  v31 = *(_DWORD *)(a2 + 48);
  v32 = *(_DWORD *)(a2 + 52);
  v28 = __OFADD__(v31, v32);
  v33 = v31 + v32;
  v34 = (v31 >> 31) + 0x7FFFFFFF;
  if (!v28)
    v34 = v33;
  v28 = __OFADD__(v30, v34);
  v35 = v30 + v34;
  v36 = (v30 >> 31) + 0x7FFFFFFF;
  if (!v28)
    v36 = v35;
  v28 = __OFSUB__(v13, v36);
  v37 = v13 - v36;
  if (v28)
    v37 = (v13 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)(a2 + 8) = v37;
  v38 = *(_DWORD *)(a2 + 40);
  v39 = *(_DWORD *)(a2 + 44);
  v28 = __OFADD__(v38, v39);
  v40 = v38 + v39;
  v41 = (v38 >> 31) + 0x7FFFFFFF;
  if (!v28)
    v41 = v40;
  v42 = *(_DWORD *)(a2 + 56);
  v43 = *(_DWORD *)(a2 + 60);
  v28 = __OFADD__(v42, v43);
  v44 = v42 + v43;
  v45 = (v42 >> 31) + 0x7FFFFFFF;
  if (!v28)
    v45 = v44;
  v28 = __OFADD__(v41, v45);
  v46 = v41 + v45;
  v47 = (v41 >> 31) + 0x7FFFFFFF;
  if (!v28)
    v47 = v46;
  v28 = __OFSUB__(v15, v47);
  v48 = v15 - v47;
  if (v28)
    v48 = (v15 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)(a2 + 12) = v48;
}

void WebCore::Layout::InlineDisplayLineBuilder::trailingEllipsisVisualRectAfterTruncation(int a1@<W0>, float *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  float v9;
  WebCore::Layout::Box **v11;
  WebCore::Layout::Box *v12;
  uint64_t LineStyle;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  float v17;
  WTF::StringImpl *v18;
  float v19;
  const WebCore::FontCascade *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  int v32;
  char v33;
  uint64_t v34;
  int v35;
  __int16 v36;

  if (!*(_DWORD *)(a3 + 12))
    goto LABEL_10;
  if (a1 == 3)
    goto LABEL_12;
  if (a1 == 2)
  {
    if (!a4)
      goto LABEL_12;
LABEL_10:
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 16) = 0;
    return;
  }
  if (a1 != 1)
    goto LABEL_10;
  v9 = a2[29];
  if (v9 == 0.0 || v9 <= a2[10])
    goto LABEL_10;
LABEL_12:
  v11 = *(WebCore::Layout::Box ***)a3;
  v12 = **(WebCore::Layout::Box ***)a3;
  if (*(_DWORD *)(*(_QWORD *)a3 + 40))
    LineStyle = (uint64_t)v12 + 16;
  else
    LineStyle = WebCore::Layout::Box::firstLineStyle(v12);
  v14 = *(_QWORD *)(LineStyle + 32) + 32;
  {
    v15 = (WTF::StringImpl *)WebCore::Layout::TextUtil::ellipsisTextRun(BOOL)::horizontalEllipsisStr;
  }
  else
  {
    v29 = *(_QWORD *)(LineStyle + 32) + 32;
    WTF::AtomStringImpl::add();
    v14 = v29;
    v15 = (WTF::StringImpl *)v30;
    WebCore::Layout::TextUtil::ellipsisTextRun(BOOL)::horizontalEllipsisStr = v30;
  }
  LODWORD(v30) = 0;
  if (v15)
    *(_DWORD *)v15 += 2;
  v31 = v15;
  v32 = 0;
  v33 = 1;
  v34 = 0x3F80000000000000;
  v35 = 0;
  v36 = 2052;
  v17 = WebCore::FontCascade::width(v14, (uint64_t)&v30);
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = fmaxf(v17, 0.0);
  if ((a1 - 2) >= 2)
  {
    if (a1 == 1)
      goto LABEL_23;
  }
  else if ((float)(v19 + (float)(a2[27] + a2[29])) > (float)(a2[8] + a2[10]))
  {
LABEL_23:
    v20 = (const WebCore::FontCascade *)*(unsigned int *)(LineStyle + 44);
    if (((v20 >> 13) & 6) - 2 < 4)
    {
      v21 = a2[5];
      v22 = a2[7];
    }
    else
    {
      v21 = a2[4];
      v22 = a2[6];
    }
    v23 = v21 + v22;
    if (v23 < v21)
      v23 = v21;
    WebCore::Layout::truncateOverflowingDisplayBoxes((uint64_t *)a3, 0, *(unsigned int *)(a3 + 12) - 1, *(unsigned int *)(LineStyle + 40), v20, v21, v23, v19);
    goto LABEL_28;
  }
  v27 = *(_DWORD *)(a3 + 12);
  if (v27 < 2)
  {
    if (!v27)
    {
      __break(0xC471u);
      return;
    }
    v24 = *(float *)(*(_QWORD *)a3 + 8);
  }
  else if ((*(_BYTE *)(LineStyle + 43) & 4) != 0)
  {
    v24 = *(float *)(*(_QWORD *)a3 + 88) - v19;
  }
  else
  {
    v24 = *(float *)(*(_QWORD *)a3 + 80 * v27 - 72) + *(float *)(*(_QWORD *)a3 + 80 * v27 - 64);
  }
LABEL_28:
  if (((*(_DWORD *)(LineStyle + 44) >> 13) & 6u) - 2 < 4)
  {
    v28 = *((_DWORD *)v11 + 4);
    *(_DWORD *)a5 = *((_DWORD *)v11 + 2);
    *(float *)(a5 + 4) = v24;
    *(_DWORD *)(a5 + 8) = v28;
    *(float *)(a5 + 12) = v19;
  }
  else
  {
    v25 = *((_DWORD *)v11 + 3);
    v26 = *((_DWORD *)v11 + 5);
    *(float *)a5 = v24;
    *(_DWORD *)(a5 + 4) = v25;
    *(float *)(a5 + 8) = v19;
    *(_DWORD *)(a5 + 12) = v26;
  }
  *(_BYTE *)(a5 + 16) = 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::InlineDisplay::Box>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  WTF::StringImpl *v15;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(_QWORD *)v5;
      *(_QWORD *)a3 = *(_QWORD *)v5;
      ++*(_DWORD *)(v6 + 8);
      v7 = *(_OWORD *)((char *)v5 + 8);
      v8 = *(_OWORD *)((char *)v5 + 24);
      *(_OWORD *)(a3 + 36) = *(_OWORD *)((char *)v5 + 36);
      *(_OWORD *)(a3 + 24) = v8;
      *(_OWORD *)(a3 + 8) = v7;
      v9 = *(_DWORD **)((char *)v5 + 52);
      if (v9)
        *v9 += 2;
      *(_QWORD *)(a3 + 52) = v9;
      v10 = *(_DWORD **)((char *)v5 + 60);
      if (v10)
        *v10 += 2;
      *(_QWORD *)(a3 + 60) = v10;
      v11 = *(_QWORD *)((char *)v5 + 68);
      *(_DWORD *)(a3 + 76) = *((_DWORD *)v5 + 19);
      *(_QWORD *)(a3 + 68) = v11;
      if ((*((_BYTE *)v5 + 51) & 1) != 0)
      {
        {
          WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
          qword_1EE2F92D8 = 0;
          qword_1EE2F92E0 = 0;
        }
        v15 = v5;
        WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v15);
      }
      v12 = *(WTF::StringImpl **)((char *)v5 + 60);
      *(_QWORD *)((char *)v5 + 60) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      result = *(WTF::StringImpl **)((char *)v5 + 52);
      *(_QWORD *)((char *)v5 + 52) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v13 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      if (v13)
      {
        v14 = *(_DWORD *)(v13 + 8);
        if (!v14)
        {
          __break(0xC471u);
          JUMPOUT(0x19431A1BCLL);
        }
        *(_DWORD *)(v13 + 8) = v14 - 1;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 80);
      a3 += 80;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WebCore::LayerOverlapMap::pushSpeculativeCompositingContainer(WebCore::LayerOverlapMap *this, const WebCore::RenderLayer *a2)
{
  uint64_t v4;
  __int128 **v5;
  uint64_t v6;
  __int128 *v7;
  void *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  WTF *v21;
  unsigned int v22;
  WTF *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  void *v29;
  WTF *v30;
  WTF *v31;
  unsigned int v32;
  WTF *v33;
  WTF *v34;

  WebCore::LayerOverlapMap::confirmSpeculativeCompositingContainer(this);
  v4 = *((unsigned int *)this + 3);
  if ((_DWORD)v4)
  {
    v5 = *(__int128 ***)this;
    v6 = *(_QWORD *)this + 8 * v4;
    do
    {
      v7 = *v5;
      v9 = WTF::fastMalloc((WTF *)0x50);
      v10 = *v7;
      *(_QWORD *)(v9 + 16) = *((_QWORD *)v7 + 2);
      *(_OWORD *)v9 = v10;
      v11 = *((unsigned int *)v7 + 9);
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 36) = v11;
      if ((_DWORD)v11)
      {
        if (v11 >= 0x38E38E4)
        {
LABEL_35:
          __break(0xC471u);
          JUMPOUT(0x19431A468);
        }
        v24 = 72 * v11;
        v25 = WTF::fastMalloc((WTF *)(72 * v11));
        *(_DWORD *)(v9 + 32) = (v24 & 0xFFFFFFF8) / 0x48;
        *(_QWORD *)(v9 + 24) = v25;
        WTF::VectorCopier<false,WebCore::OverlapMapContainer::ClippingScope>::uninitializedCopy<WebCore::OverlapMapContainer::ClippingScope>(*((__int128 **)v7 + 3), (__int128 *)(*((_QWORD *)v7 + 3) + 72 * *((unsigned int *)v7 + 9)), v25);
      }
      v12 = *((unsigned int *)v7 + 13);
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_DWORD *)(v9 + 52) = v12;
      if ((_DWORD)v12)
      {
        if (v12 >> 28)
          goto LABEL_35;
        v13 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v12));
        *(_DWORD *)(v9 + 48) = v12;
        *(_QWORD *)(v9 + 40) = v13;
        v14 = *((unsigned int *)v7 + 13);
        if ((_DWORD)v14)
        {
          v15 = (__int128 *)*((_QWORD *)v7 + 5);
          v16 = 16 * v14;
          do
          {
            v17 = *v15++;
            *v13++ = v17;
            v16 -= 16;
          }
          while (v16);
        }
      }
      *(_OWORD *)(v9 + 56) = *(__int128 *)((char *)v7 + 56);
      *(_QWORD *)(v9 + 72) = *((_QWORD *)v7 + 9);
      v34 = (WTF *)v9;
      v18 = *((unsigned int *)this + 7);
      if ((_DWORD)v18 == *((_DWORD *)this + 6))
      {
        WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>((uint64_t)this + 16, (unint64_t)&v34);
      }
      else
      {
        v19 = *((_QWORD *)this + 2);
        v34 = 0;
        *(_QWORD *)(v19 + 8 * v18) = v9;
        *((_DWORD *)this + 7) = v18 + 1;
      }
      v20 = v34;
      v34 = 0;
      if (v20)
      {
        v21 = (WTF *)*((_QWORD *)v20 + 5);
        if (v21)
        {
          *((_QWORD *)v20 + 5) = 0;
          *((_DWORD *)v20 + 12) = 0;
          WTF::fastFree(v21, v8);
        }
        v22 = *((_DWORD *)v20 + 9);
        if (v22)
          WTF::VectorTypeOperations<WebCore::OverlapMapContainer::ClippingScope>::destruct(*((WTF **)v20 + 3), (WTF *)(*((_QWORD *)v20 + 3) + 72 * v22));
        v23 = (WTF *)*((_QWORD *)v20 + 3);
        if (v23)
        {
          *((_QWORD *)v20 + 3) = 0;
          *((_DWORD *)v20 + 8) = 0;
          WTF::fastFree(v23, v8);
        }
        WTF::fastFree(v20, v8);
      }
      ++v5;
    }
    while (v5 != (__int128 **)v6);
  }
  v26 = *((_QWORD *)this + 139);
  result = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)result = v26;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_QWORD *)(result + 72) = a2;
  v34 = (WTF *)result;
  v28 = *((unsigned int *)this + 7);
  if ((_DWORD)v28 == *((_DWORD *)this + 6))
  {
    result = (uint64_t)WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>((uint64_t)this + 16, (unint64_t)&v34);
    v30 = v34;
    v34 = 0;
    if (v30)
    {
      v31 = (WTF *)*((_QWORD *)v30 + 5);
      if (v31)
      {
        *((_QWORD *)v30 + 5) = 0;
        *((_DWORD *)v30 + 12) = 0;
        WTF::fastFree(v31, v29);
      }
      v32 = *((_DWORD *)v30 + 9);
      if (v32)
        WTF::VectorTypeOperations<WebCore::OverlapMapContainer::ClippingScope>::destruct(*((WTF **)v30 + 3), (WTF *)(*((_QWORD *)v30 + 3) + 72 * v32));
      v33 = (WTF *)*((_QWORD *)v30 + 3);
      if (v33)
      {
        *((_QWORD *)v30 + 3) = 0;
        *((_DWORD *)v30 + 8) = 0;
        WTF::fastFree(v33, v29);
      }
      return WTF::fastFree(v30, v29);
    }
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v28) = result;
    *((_DWORD *)this + 7) = v28 + 1;
  }
  return result;
}

double WebCore::LayerOverlapMap::confirmSpeculativeCompositingContainer(WebCore::LayerOverlapMap *this)
{
  uint64_t v2;
  double result;
  uint64_t v4;

  if (*((_DWORD *)this + 7))
  {
    WTF::Vector<std::unique_ptr<WebCore::OverlapMapContainer>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this, 0);
    v2 = *(_QWORD *)this;
    *(_QWORD *)this = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v2;
    result = *((double *)this + 3);
    v4 = *((_QWORD *)this + 1);
    *((double *)this + 1) = result;
    *((_QWORD *)this + 3) = v4;
  }
  return result;
}

uint64_t *WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  *result = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Persistence::Decoder::operator>><std::optional<WebCore::CertificateInfo>,(void *)0>(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4;
  CFTypeRef cf;
  char v7;
  char v8;
  __int16 v9;

  v9 = 0;
  WTF::Persistence::Decoder::operator>>();
  LOBYTE(cf) = 0;
  v8 = 0;
  std::__optional_storage_base<std::optional<WebCore::CertificateInfo>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::optional<WebCore::CertificateInfo>,false>>(a2, (uint64_t *)&cf);
  if (v8)
  {
    if (v7)
    {
      v4 = cf;
      cf = 0;
      if (v4)
        CFRelease(v4);
    }
  }
  return a1;
}

void WTF::Persistence::Coder<WebCore::CertificateInfo>::decodeForPersistence(_BYTE *a1@<X8>)
{
  WTF::Persistence::Decoder::operator>>();
  *a1 = 0;
  a1[8] = 0;
}

uint64_t WTF::Persistence::decodeCFData(WTF::Persistence *this, WTF::Persistence::Decoder *a2)
{
  uint64_t result;

  result = WTF::Persistence::Decoder::operator>>();
  __break(1u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCoreObjCScheduleDeallocateOnMainThread(objc_class *,objc_object *)::$_0,void>::call(uint64_t a1)
{
  const char *v2;
  objc_method *InstanceMethod;
  IMP Implementation;

  v2 = sel_registerName("dealloc");
  InstanceMethod = class_getInstanceMethod(*(Class *)(a1 + 8), v2);
  Implementation = method_getImplementation(InstanceMethod);
  return ((uint64_t (*)(_QWORD, const char *))Implementation)(*(_QWORD *)(a1 + 16), v2);
}

WTF::StringImpl **WebCore::LegacySchemeRegistry::registerURLSchemeAsCORSEnabled(WTF::StringImpl **this, const WTF::String *a2)
{
  WTF::ASCIICaseInsensitiveHash *v2;
  WTF::StringImpl **NeverDestroyedSchemeSet;
  WTF::StringImpl **v4;
  _BYTE v5[24];

  if (*this)
  {
    v2 = (WTF::ASCIICaseInsensitiveHash *)this;
    {
      v4 = this;
      NeverDestroyedSchemeSet = WebCore::makeNeverDestroyedSchemeSet((uint64_t (*)(void))WebCore::builtinCORSEnabledSchemes);
      v2 = (WTF::ASCIICaseInsensitiveHash *)v4;
      WebCore::CORSEnabledSchemes(void)::schemes = (uint64_t)NeverDestroyedSchemeSet;
    }
    return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v2, &WebCore::CORSEnabledSchemes(void)::schemes, (uint64_t)v5);
  }
  return this;
}

uint64_t WebCore::LegacySchemeRegistry::isBuiltinScheme(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  WTF::ASCIICaseInsensitiveHash *v2;
  WTF::ASCIICaseInsensitiveHash *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::ASCIICaseInsensitiveHash *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  _QWORD v20[3];

  if (!*(_QWORD *)this)
    return 0;
  v2 = this;
  if ((byte_1ECE83B12 & 1) != 0)
  {
    if (qword_1ECE83B28)
      goto LABEL_4;
    return WTF::URLParser::isSpecialScheme();
  }
  v18 = 0;
  if (__ldaxr(WebCore::schemeRegistryLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::schemeRegistryLock))
  {
    goto LABEL_11;
  }
  this = (WebCore::LegacySchemeRegistry *)MEMORY[0x19AEA534C](WebCore::schemeRegistryLock, a2);
LABEL_11:
  WebCore::builtinLocalURLSchemes(this);
  if (!qword_1ECE83B18)
  {
    v5 = 0;
    v6 = 0;
LABEL_13:
    v7 = qword_1ECE83B18 + 8 * v6;
    goto LABEL_14;
  }
  v6 = *(unsigned int *)(qword_1ECE83B18 - 4);
  v7 = qword_1ECE83B18 + 8 * v6;
  if (!*(_DWORD *)(qword_1ECE83B18 - 12))
  {
    v5 = (WTF::ASCIICaseInsensitiveHash *)(qword_1ECE83B18 + 8 * v6);
    goto LABEL_13;
  }
  v5 = (WTF::ASCIICaseInsensitiveHash *)qword_1ECE83B18;
  if ((_DWORD)v6)
  {
    v17 = 8 * v6;
    v5 = (WTF::ASCIICaseInsensitiveHash *)qword_1ECE83B18;
    while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
    {
      v5 = (WTF::ASCIICaseInsensitiveHash *)((char *)v5 + 8);
      v17 -= 8;
      if (!v17)
      {
        v5 = (WTF::ASCIICaseInsensitiveHash *)v7;
        break;
      }
    }
  }
LABEL_14:
  if (qword_1ECE83B18)
    v8 = qword_1ECE83B18 + 8 * *(unsigned int *)(qword_1ECE83B18 - 4);
  else
    v8 = 0;
  if ((WTF::ASCIICaseInsensitiveHash *)v8 != v5)
  {
    do
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v5, &v18, (uint64_t)v20);
      v9 = (WTF::ASCIICaseInsensitiveHash *)((char *)v5 + 8);
      v5 = (WTF::ASCIICaseInsensitiveHash *)v7;
      if (v9 != (WTF::ASCIICaseInsensitiveHash *)v7)
      {
        v5 = v9;
        while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
        {
          v5 = (WTF::ASCIICaseInsensitiveHash *)((char *)v5 + 8);
          if (v5 == (WTF::ASCIICaseInsensitiveHash *)v7)
          {
            v5 = (WTF::ASCIICaseInsensitiveHash *)v7;
            break;
          }
        }
      }
    }
    while (v5 != (WTF::ASCIICaseInsensitiveHash *)v8);
  }
  v10 = __ldxr(WebCore::schemeRegistryLock);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, WebCore::schemeRegistryLock))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
  WebCore::add(&v18, (uint64_t (*)(void))WebCore::builtinSecureSchemes);
  WebCore::add(&v18, (uint64_t (*)(void))WebCore::builtinSchemesWithUniqueOrigins);
  WebCore::add(&v18, (uint64_t (*)(void))WebCore::builtinEmptyDocumentSchemes);
  WebCore::add(&v18, (uint64_t (*)(void))WebCore::builtinCanDisplayOnlyIfCanRequestSchemes);
  WebCore::add(&v18, (uint64_t (*)(void))WebCore::builtinCORSEnabledSchemes);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v19 = (WTF::StringImpl *)v20[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v19, &v18, (uint64_t)v20);
  v12 = v19;
  v19 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v19 = (WTF::StringImpl *)v20[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v19, &v18, (uint64_t)v20);
  v14 = v19;
  v19 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v19 = (WTF::StringImpl *)v20[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v19, &v18, (uint64_t)v20);
  v16 = v19;
  v19 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  qword_1ECE83B28 = v18;
  byte_1ECE83B12 = 1;
  if (v18)
  {
LABEL_4:
    if (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&qword_1ECE83B28, v2))
    {
      return 1;
    }
  }
  return WTF::URLParser::isSpecialScheme();
}

uint64_t WebCore::addLayers(uint64_t this, const WebCore::RenderElement *a2, WebCore::RenderElement *a3, WebCore::RenderLayer *a4, BOOL a5)
{
  WebCore::RenderLayer *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore *v11;
  const WebCore::RenderElement **NextLayer;
  void *v13;
  int v14;
  const WebCore::RenderElement **v15;
  WebCore::RenderLayer *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::RenderLayer *v29;
  uint64_t v30;
  WebCore::RenderLayer *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  int v35;
  char v36;
  char v37;
  WebCore::RenderView *v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  WTF *v45;
  uint64_t v46;
  int v47;
  WebCore::RenderLayer *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t i;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  WTF *v57;
  WebCore::RenderLayerCompositor *v58;
  WebCore::RenderLayerCompositor *v59;
  WTF *v60;
  void *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  unint64_t v70;
  int isAtomicInlineLevelBox;
  int v72;
  WebCore::RenderLayer *v73;
  WebCore::RenderLayer *v74;
  WebCore::RenderLayer *v75;
  WTF *v76;
  int v77;
  unsigned int v78;

  v5 = a3;
  v7 = this;
  if ((*((_BYTE *)a2 + 21) & 0x80) != 0)
  {
    v75 = a3;
    ++*((_DWORD *)a3 + 2);
    if ((*((_BYTE *)a2 + 45) & 1) == 0)
    {
      v8 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
      if (v8)
      {
        if ((*(_WORD *)(v8 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19431B178);
        }
        if ((*(_BYTE *)(v8 + 23) & 0x20) != 0)
          goto LABEL_166;
      }
    }
    if ((*((_QWORD *)a2 + 12) & 0xF80000000000) == 0x480000000000)
    {
LABEL_166:
      if ((*((_BYTE *)a2 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19431B4D8);
      }
      if (*(_QWORD *)(*((_QWORD *)a2 + 18) + 40))
      {
LABEL_69:
        if (v75)
        {
          v42 = *((_DWORD *)v75 + 2);
          if (!v42)
          {
            __break(0xC471u);
            JUMPOUT(0x19431B158);
          }
          *((_DWORD *)v75 + 2) = v42 - 1;
        }
        return this;
      }
      WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>::operator=((uint64_t)&v75, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 1944)+ 144));
      v5 = v75;
    }
    if ((*(_BYTE *)(v7 + 45) & 0x10) == 0)
    {
LABEL_13:
      v10 = *(_QWORD *)(v7 + 32);
      if (v10)
      {
        v11 = *(WebCore **)(v10 + 8);
        if (v11)
          ++*((_DWORD *)v11 + 4);
      }
      else
      {
        v11 = 0;
      }
      NextLayer = WebCore::findNextLayer(v11, (const WebCore::RenderElement **)v5, (const WebCore::RenderLayer *)v7, (const WebCore::RenderObject *)1, a5);
      v14 = *((_DWORD *)v11 + 4);
      if (v14)
      {
        v15 = NextLayer;
        *((_DWORD *)v11 + 4) = v14 - 1;
        goto LABEL_18;
      }
LABEL_212:
      __break(0xC471u);
      JUMPOUT(0x19431B0D8);
    }
    if ((*(_BYTE *)(v7 + 45) & 1) != 0)
      goto LABEL_12;
    v9 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8);
    if (!v9)
      goto LABEL_12;
    if ((*(_WORD *)(v9 + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19431B198);
    }
    if ((*(_BYTE *)(v9 + 23) & 0x20) == 0)
    {
LABEL_12:
      if ((*(_QWORD *)(v7 + 96) & 0xF80000000000) != 0x480000000000)
        goto LABEL_13;
      v9 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8);
    }
    WebCore::RenderLayer::topLayerRenderLayers(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 8) + 1944), a2, (uint64_t)&v76);
    v69 = v76;
    if (v78)
    {
      v70 = 0;
      while (*((_QWORD *)v76 + v70) != *(_QWORD *)(v7 + 144))
      {
        if (v78 == ++v70)
          goto LABEL_189;
      }
      if (v70 >= (unint64_t)v78 - 1)
      {
LABEL_189:
        v15 = 0;
      }
      else
      {
        if (v70 + 1 >= v78)
          goto LABEL_212;
        v15 = (const WebCore::RenderElement **)*((_QWORD *)v76 + v70 + 1);
      }
    }
    else
    {
      v15 = 0;
      if (!v76)
      {
LABEL_18:
        if (v15)
          ++*((_DWORD *)v15 + 2);
        if ((*((_BYTE *)a2 + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19431B0F8);
        }
        v16 = v75;
        v17 = *((_QWORD *)a2 + 18);
        if (v17)
          ++*(_DWORD *)(v17 + 8);
        v18 = (uint64_t *)((char *)v16 + 72);
        if (v15)
          v18 = (uint64_t *)(v15 + 6);
        v19 = *v18;
        if (v19)
        {
          *(_QWORD *)(v17 + 48) = v19;
          v20 = (uint64_t *)(v19 + 56);
        }
        else
        {
          v20 = (uint64_t *)((char *)v16 + 64);
        }
        *v20 = v17;
        if (v15)
        {
          v15[6] = (const WebCore::RenderElement *)v17;
          *(_QWORD *)(v17 + 56) = v15;
        }
        else
        {
          *((_QWORD *)v16 + 9) = v17;
        }
        *(_QWORD *)(v17 + 40) = v16;
        if ((*(_BYTE *)(v17 + 24) & 4) == 0
          || (WebCore::RenderLayer::dirtyNormalFlowList(v16, v13), (*(_BYTE *)(v17 + 24) & 4) == 0)
          || *(_QWORD *)(v17 + 64))
        {
          v21 = v17;
          while (1)
          {
            v21 = *(_QWORD *)(v21 + 40);
            if (!v21)
              break;
            if ((*(_BYTE *)(v21 + 24) & 0x4A) != 0)
            {
              v22 = *(_QWORD *)(v21 + 88);
              if (v22 && *(_DWORD *)(v22 + 8))
              {
                if (*(_DWORD *)(v22 + 12))
                  *(_DWORD *)(v22 + 12) = 0;
                v45 = *(WTF **)v22;
                if (*(_QWORD *)v22)
                {
                  *(_QWORD *)v22 = 0;
                  *(_DWORD *)(v22 + 8) = 0;
                  WTF::fastFree(v45, v13);
                }
              }
              v23 = *(_QWORD *)(v21 + 96);
              if (v23 && *(_DWORD *)(v23 + 8))
              {
                if (*(_DWORD *)(v23 + 12))
                  *(_DWORD *)(v23 + 12) = 0;
                v57 = *(WTF **)v23;
                if (*(_QWORD *)v23)
                {
                  *(_QWORD *)v23 = 0;
                  *(_DWORD *)(v23 + 8) = 0;
                  WTF::fastFree(v57, v13);
                }
              }
              v24 = *(_QWORD *)(v21 + 24);
              *(_QWORD *)(v21 + 24) = v24 | 0x80;
              if ((v24 & 0x4000000) != 0)
              {
                *(_DWORD *)(v21 + 12) |= 4u;
                if ((v24 & 4) != 0)
                {
                  v21 = *(_QWORD *)(v21 + 40);
                  if (v21)
                  {
LABEL_117:
                    while (1)
                    {
                      v50 = *(_DWORD *)(v21 + 12);
                      if ((v50 & 1) != 0)
                        break;
                      *(_DWORD *)(v21 + 12) = v50 | 1;
                      if ((*(_BYTE *)(v21 + 24) & 4) == 0)
                      {
                        while (1)
                        {
                          v21 = *(_QWORD *)(v21 + 40);
                          if (!v21)
                            goto LABEL_36;
                          if ((*(_BYTE *)(v21 + 24) & 0x4A) != 0)
                            goto LABEL_121;
                        }
                      }
                      v21 = *(_QWORD *)(v21 + 40);
LABEL_121:
                      if (!v21)
                        goto LABEL_36;
                    }
                  }
                }
                else
                {
                  while (1)
                  {
                    v21 = *(_QWORD *)(v21 + 40);
                    if (!v21)
                      break;
                    if ((*(_BYTE *)(v21 + 24) & 0x4A) != 0)
                      goto LABEL_117;
                  }
                }
              }
              break;
            }
          }
        }
LABEL_36:
        v25 = *(WTF **)(v17 + 224);
        *(_QWORD *)(v17 + 224) = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 1)
            WTF::fastFree(v25, v13);
          else
            --*(_DWORD *)v25;
        }
        v26 = *(_QWORD *)(v17 + 32);
        v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 24) + 8) + 40) + 8);
        if ((*(_QWORD *)(*(_QWORD *)(v27 + 680) + 680) & 0x800000000000) != 0)
        {
          WebCore::RenderLayer::updateAncestorDependentState(void)::$_0::operator()(v17, *(_QWORD **)(v26 + 32));
          v26 = *(_QWORD *)(v17 + 32);
          v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 24) + 8) + 40) + 8);
        }
        if (*(_BYTE *)(v27 + 3418) && (v63 = *(_QWORD *)(v26 + 32)) != 0 && (v64 = *(_QWORD *)(v63 + 8)) != 0)
        {
          v65 = v64;
          while (*(_BYTE *)(v65 + 46) != 90)
          {
            v66 = *(_QWORD *)(v65 + 32);
            if (v66)
            {
              v65 = *(_QWORD *)(v66 + 8);
              if (v65)
                continue;
            }
            if ((*(_QWORD *)(*(_QWORD *)(v27 + 680) + 680) & 0x800000000000) == 0)
              goto LABEL_42;
            while (*(_BYTE *)(v64 + 46) != 67)
            {
              v67 = *(_QWORD *)(v64 + 32);
              if (v67)
              {
                v64 = *(_QWORD *)(v67 + 8);
                if (v64)
                  continue;
              }
              goto LABEL_42;
            }
            break;
          }
          v28 = *(_QWORD *)(v17 + 24);
          if ((v28 & 0x100000000) != 0)
            goto LABEL_43;
          v68 = 0x100000000;
        }
        else
        {
LABEL_42:
          v28 = *(_QWORD *)(v17 + 24);
          if ((v28 & 0x100000000) == 0)
          {
LABEL_43:
            if (v16)
            {
              v29 = v16;
              do
              {
                v30 = *((_QWORD *)v29 + 3);
                if ((v30 & 0x100000) != 0)
                  break;
                *((_QWORD *)v29 + 3) = v30 | 0x100000;
                v29 = (WebCore::RenderLayer *)*((_QWORD *)v29 + 5);
              }
              while (v29);
            }
            WebCore::RenderLayer::updateDescendantDependentFlags((WebCore::RenderLayer *)v17);
            if (v16 && (*(_QWORD *)(v17 + 24) & 0x1800) != 0)
            {
              v31 = v16;
              while (1)
              {
                v32 = *((_QWORD *)v16 + 4);
                v33 = *(_QWORD *)(*(_QWORD *)(v32 + 88) + 40);
                v34 = *(_BYTE *)(v33 + 462);
                v35 = *(_BYTE *)(v33 + 642) & 3;
                v36 = v34 | 0x19;
                if (v35 == 1)
                  v34 |= 0x15u;
                v37 = v35 == 2 ? v36 : v34;
                if ((v37 & 2) != 0)
                {
                  if ((*(_BYTE *)(v32 + 20) & 1) != 0
                    || (v73 = v31,
                        isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox(*((WebCore::RenderObject **)v16
                                                                                               + 4)),
                        v31 = v73,
                        isAtomicInlineLevelBox))
                  {
                    if ((*(_QWORD *)(v32 + 96) & 0x1FLL) != 0x19
                      && (*(unsigned __int8 *)(v32 + 46) - 36 > 4 || (*(_BYTE *)(v32 + 52) & 7) == 1))
                    {
                      break;
                    }
                  }
                }
                if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 88) + 40) + 636) & 0xC0000) != 0)
                {
                  if ((*(_BYTE *)(v32 + 20) & 1) != 0
                    || (v74 = v31,
                        v72 = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v32),
                        v31 = v74,
                        v72))
                  {
                    if ((*(_QWORD *)(v32 + 96) & 0x1FLL) != 0x19)
                    {
                      v62 = *(unsigned __int8 *)(v32 + 46);
                      if ((v62 - 36) <= 4)
                      {
                        if (v62 == 36)
                          break;
                      }
                      else if (v62 != 35 && v62 != 63)
                      {
                        break;
                      }
                    }
                  }
                }
                if ((*((_QWORD *)v31 + 3) & 0x3000) != 0x1000)
                {
                  *((_QWORD *)v31 + 3) = *((_QWORD *)v31 + 3) & 0xFFFFFFFFFFFFCFFFLL | 0x1000;
                  v31 = (WebCore::RenderLayer *)*((_QWORD *)v31 + 5);
                  if (v31)
                    continue;
                }
                goto LABEL_59;
              }
              *((_QWORD *)v16 + 3) = *((_QWORD *)v16 + 3) & 0xFFFFFFFFFFFFCFFFLL | 0x1000;
            }
LABEL_59:
            v38 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v16 + 4) + 24)
                                                                              + 8)
                                                                  + 40)
                                                      + 8)
                                          + 1944);
            this = *((_QWORD *)v38 + 50);
            if (!this)
            {
              v58 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
              this = (uint64_t)WebCore::RenderLayerCompositor::RenderLayerCompositor(v58, v38);
              v59 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v38 + 50);
              *((_QWORD *)v38 + 50) = this;
              if (v59)
              {
                WebCore::RenderLayerCompositor::~RenderLayerCompositor(v59);
                WTF::fastFree(v60, v61);
                this = *((_QWORD *)v38 + 50);
              }
            }
            if (*(_DWORD *)(this + 200))
            {
              *((_DWORD *)v16 + 3) |= 0x10u;
              if ((*((_BYTE *)v16 + 24) & 4) != 0)
              {
                v48 = (WebCore::RenderLayer *)*((_QWORD *)v16 + 5);
                if (v48)
                {
LABEL_103:
                  do
                  {
                    v49 = *((_DWORD *)v48 + 3);
                    if ((v49 & 1) != 0)
                      break;
                    *((_DWORD *)v48 + 3) = v49 | 1;
                    if ((*((_BYTE *)v48 + 24) & 4) == 0)
                    {
                      while (1)
                      {
                        v48 = (WebCore::RenderLayer *)*((_QWORD *)v48 + 5);
                        if (!v48)
                          goto LABEL_61;
                        if ((*((_BYTE *)v48 + 24) & 0x4A) != 0)
                          goto LABEL_107;
                      }
                    }
                    v48 = (WebCore::RenderLayer *)*((_QWORD *)v48 + 5);
LABEL_107:
                    ;
                  }
                  while (v48);
                }
              }
              else
              {
                v48 = v16;
                while (1)
                {
                  v48 = (WebCore::RenderLayer *)*((_QWORD *)v48 + 5);
                  if (!v48)
                    break;
                  if ((*((_BYTE *)v48 + 24) & 0x4A) != 0)
                    goto LABEL_103;
                }
              }
            }
LABEL_61:
            if ((*(_BYTE *)(v17 + 12) & 0x3D) != 0)
            {
              if ((*(_BYTE *)(v17 + 24) & 4) != 0)
              {
                v46 = *(_QWORD *)(v17 + 40);
                if (v46)
                {
LABEL_93:
                  do
                  {
                    v47 = *(_DWORD *)(v46 + 12);
                    if ((v47 & 1) != 0)
                      break;
                    *(_DWORD *)(v46 + 12) = v47 | 1;
                    if ((*(_BYTE *)(v46 + 24) & 4) == 0)
                    {
                      while (1)
                      {
                        v46 = *(_QWORD *)(v46 + 40);
                        if (!v46)
                          goto LABEL_62;
                        if ((*(_BYTE *)(v46 + 24) & 0x4A) != 0)
                          goto LABEL_97;
                      }
                    }
                    v46 = *(_QWORD *)(v46 + 40);
LABEL_97:
                    ;
                  }
                  while (v46);
                }
              }
              else
              {
                v46 = v17;
                while (1)
                {
                  v46 = *(_QWORD *)(v46 + 40);
                  if (!v46)
                    break;
                  if ((*(_BYTE *)(v46 + 24) & 0x4A) != 0)
                    goto LABEL_93;
                }
              }
            }
LABEL_62:
            if ((*(_WORD *)(v17 + 12) & 0xFC2) != 0)
            {
              if ((*(_BYTE *)(v17 + 24) & 4) != 0)
              {
                v43 = *(_QWORD *)(v17 + 40);
                if (v43)
                {
LABEL_77:
                  do
                  {
                    v44 = *(_DWORD *)(v43 + 12);
                    if ((v44 & 2) != 0)
                      break;
                    *(_DWORD *)(v43 + 12) = v44 | 2;
                    if ((*(_BYTE *)(v43 + 24) & 4) == 0)
                    {
                      while (1)
                      {
                        v43 = *(_QWORD *)(v43 + 40);
                        if (!v43)
                          goto LABEL_63;
                        if ((*(_BYTE *)(v43 + 24) & 0x4A) != 0)
                          goto LABEL_81;
                      }
                    }
                    v43 = *(_QWORD *)(v43 + 40);
LABEL_81:
                    ;
                  }
                  while (v43);
                }
              }
              else
              {
                v43 = v17;
                while (1)
                {
                  v43 = *(_QWORD *)(v43 + 40);
                  if (!v43)
                    break;
                  if ((*(_BYTE *)(v43 + 24) & 0x4A) != 0)
                    goto LABEL_77;
                }
              }
            }
LABEL_63:
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 32) + 88) + 40) + 636) & 0x1F00000) != 0x100000
              || (v39 = *(_QWORD *)(v17 + 24), (v39 & 0x800000000000) != 0) && (v39 & 0xA) == 0)
            {
              this = WebCore::RenderLayer::updateAncestorChainHasBlendingDescendants((uint64_t)v16);
            }
            v40 = *(_DWORD *)(v17 + 8);
            if (!v40)
            {
              __break(0xC471u);
              JUMPOUT(0x19431B118);
            }
            *(_DWORD *)(v17 + 8) = v40 - 1;
            if (v15)
            {
              v41 = *((_DWORD *)v15 + 2);
              if (!v41)
              {
                __break(0xC471u);
                JUMPOUT(0x19431B138);
              }
              *((_DWORD *)v15 + 2) = v41 - 1;
            }
            goto LABEL_69;
          }
          v68 = 0;
        }
        *(_QWORD *)(v17 + 24) = v28 & 0xFFFFFFFEFFFFFFFFLL | v68;
        WebCore::RenderLayer::updateSelfPaintingLayer(v17);
        goto LABEL_43;
      }
    }
    v76 = 0;
    v77 = 0;
    WTF::fastFree(v69, v13);
    goto LABEL_18;
  }
  v51 = *((unsigned __int8 *)a2 + 68);
  for (i = *((unsigned int *)a2 + 16); ; i = *(unsigned int *)(v54 + 47))
  {
    v53 = i | (v51 << 32);
    if (!v53)
      break;
    v54 = *(_QWORD *)(v53 + 8);
    if (!v54)
      break;
    if ((*(_BYTE *)(v54 + 45) & 2) == 0)
    {
LABEL_129:
      ++*(_DWORD *)(v54 + 16);
      this = WebCore::addLayers((WebCore *)v7, (const WebCore::RenderElement *)v54, v5, a4);
      v55 = *(_DWORD *)(v54 + 16);
      if (!v55)
      {
        __break(0xC471u);
        JUMPOUT(0x19431B414);
      }
      *(_DWORD *)(v54 + 16) = v55 - 1;
      while (1)
      {
        v56 = *(unsigned int *)(v54 + 47);
        if (!(v56 | ((unint64_t)*(unsigned __int8 *)(v54 + 51) << 32)))
          return this;
        v54 = *(_QWORD *)((v56 | ((unint64_t)*(unsigned __int8 *)(v54 + 51) << 32)) + 8);
        if (!v54)
          return this;
        if ((*(_BYTE *)(v54 + 45) & 2) == 0)
          goto LABEL_129;
      }
    }
    v51 = *(unsigned __int8 *)(v54 + 51);
  }
  return this;
}

const WebCore::RenderElement **WebCore::findNextLayer(WebCore *this, const WebCore::RenderElement **a2, const WebCore::RenderLayer *a3, const WebCore::RenderObject *a4, BOOL a5)
{
  int v5;
  const WebCore::RenderElement **v8;
  uint64_t v9;
  uint64_t v10;
  const WebCore::RenderElement **result;
  uint64_t v12;
  uint64_t v13;
  const WebCore::RenderElement *v14;
  uint64_t v15;
  WebCore *v16;
  int v17;

  v5 = (int)a4;
  if ((*((_BYTE *)this + 21) & 0x80) == 0)
  {
    v8 = 0;
    if (!a3)
      goto LABEL_3;
    goto LABEL_9;
  }
  if ((*((_BYTE *)this + 45) & 0x10) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19431B640);
  }
  result = (const WebCore::RenderElement **)*((_QWORD *)this + 18);
  if (!result)
  {
    v8 = 0;
    goto LABEL_8;
  }
  if (result[5] == (const WebCore::RenderElement *)a2)
    return result;
  v8 = a2;
  if (result == a2)
  {
LABEL_8:
    if (!a3)
    {
LABEL_3:
      v9 = *((unsigned __int8 *)this + 68);
      v10 = *((unsigned int *)this + 16);
LABEL_10:
      while (1)
      {
        v12 = v10 | (v9 << 32);
        if (!v12)
          break;
        v13 = *(_QWORD *)(v12 + 8);
        if (!v13)
          break;
        if ((*(_BYTE *)(v13 + 45) & 2) == 0)
        {
          result = (const WebCore::RenderElement **)WebCore::findNextLayer((WebCore *)v13, (const WebCore::RenderElement *)a2, 0, 0, a5);
          if (result)
            return result;
        }
        v9 = *(unsigned __int8 *)(v13 + 51);
        v10 = *(unsigned int *)(v13 + 47);
      }
      result = v8;
      goto LABEL_13;
    }
LABEL_9:
    v9 = *((unsigned __int8 *)a3 + 51);
    v10 = *(unsigned int *)((char *)a3 + 47);
    goto LABEL_10;
  }
LABEL_13:
  v14 = (const WebCore::RenderElement *)result;
  result = 0;
  if (v14 != (const WebCore::RenderElement *)a2 && v5)
  {
    v15 = *((_QWORD *)this + 4);
    if (v15 && (v16 = *(WebCore **)(v15 + 8)) != 0)
    {
      ++*((_DWORD *)v16 + 4);
      result = (const WebCore::RenderElement **)WebCore::findNextLayer(v16, (const WebCore::RenderElement *)a2, this, (const WebCore::RenderObject *)1, a5);
      v17 = *((_DWORD *)v16 + 4);
      if (!v17)
      {
        __break(0xC471u);
        JUMPOUT(0x19431B620);
      }
      *((_DWORD *)v16 + 4) = v17 - 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::RenderLayer::addChild(WebCore::RenderLayer *this, WebCore::RenderLayer *a2, WebCore::RenderLayer *a3)
{
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  WebCore::RenderLayer *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::RenderLayer *v16;
  uint64_t v17;
  WebCore::RenderLayer *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  char v23;
  char v24;
  WebCore::RenderView *v25;
  uint64_t result;
  uint64_t v27;
  WebCore::RenderLayer *v28;
  int v29;
  WTF *v30;
  WebCore::RenderLayer *v31;
  int v32;
  WebCore::RenderLayer *v33;
  int v34;
  int v35;
  WTF *v36;
  WebCore::RenderLayerCompositor *v37;
  WebCore::RenderLayerCompositor *v38;
  WTF *v39;
  void *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int isAtomicInlineLevelBox;
  int v49;
  WebCore::RenderLayer *v50;
  WebCore::RenderLayer *v51;

  v5 = (char *)this + 72;
  if (a3)
    v5 = (char *)a3 + 48;
  v6 = *(_QWORD *)v5;
  if (v6)
  {
    *((_QWORD *)a2 + 6) = v6;
    v7 = (_QWORD *)(v6 + 56);
  }
  else
  {
    v7 = (_QWORD *)((char *)this + 64);
  }
  *v7 = a2;
  if (a3)
  {
    *((_QWORD *)a3 + 6) = a2;
    *((_QWORD *)a2 + 7) = a3;
  }
  else
  {
    *((_QWORD *)this + 9) = a2;
  }
  *((_QWORD *)a2 + 5) = this;
  if ((*((_BYTE *)a2 + 24) & 4) == 0
    || (WebCore::RenderLayer::dirtyNormalFlowList(this, a2), (*((_BYTE *)a2 + 24) & 4) == 0)
    || *((_QWORD *)a2 + 8))
  {
    v8 = a2;
    while (1)
    {
      v8 = (WebCore::RenderLayer *)*((_QWORD *)v8 + 5);
      if (!v8)
        break;
      if ((*((_BYTE *)v8 + 24) & 0x4A) != 0)
      {
        v9 = *((_QWORD *)v8 + 11);
        if (v9 && *(_DWORD *)(v9 + 8))
        {
          if (*(_DWORD *)(v9 + 12))
            *(_DWORD *)(v9 + 12) = 0;
          v30 = *(WTF **)v9;
          if (*(_QWORD *)v9)
          {
            *(_QWORD *)v9 = 0;
            *(_DWORD *)(v9 + 8) = 0;
            WTF::fastFree(v30, a2);
          }
        }
        v10 = *((_QWORD *)v8 + 12);
        if (v10 && *(_DWORD *)(v10 + 8))
        {
          if (*(_DWORD *)(v10 + 12))
            *(_DWORD *)(v10 + 12) = 0;
          v36 = *(WTF **)v10;
          if (*(_QWORD *)v10)
          {
            *(_QWORD *)v10 = 0;
            *(_DWORD *)(v10 + 8) = 0;
            WTF::fastFree(v36, a2);
          }
        }
        v11 = *((_QWORD *)v8 + 3);
        *((_QWORD *)v8 + 3) = v11 | 0x80;
        if ((v11 & 0x4000000) != 0)
        {
          *((_DWORD *)v8 + 3) |= 4u;
          if ((v11 & 4) != 0)
          {
            v8 = (WebCore::RenderLayer *)*((_QWORD *)v8 + 5);
            if (v8)
            {
LABEL_87:
              while (1)
              {
                v35 = *((_DWORD *)v8 + 3);
                if ((v35 & 1) != 0)
                  break;
                *((_DWORD *)v8 + 3) = v35 | 1;
                if ((*((_BYTE *)v8 + 24) & 4) == 0)
                {
                  while (1)
                  {
                    v8 = (WebCore::RenderLayer *)*((_QWORD *)v8 + 5);
                    if (!v8)
                      goto LABEL_14;
                    if ((*((_BYTE *)v8 + 24) & 0x4A) != 0)
                      goto LABEL_91;
                  }
                }
                v8 = (WebCore::RenderLayer *)*((_QWORD *)v8 + 5);
LABEL_91:
                if (!v8)
                  goto LABEL_14;
              }
            }
          }
          else
          {
            while (1)
            {
              v8 = (WebCore::RenderLayer *)*((_QWORD *)v8 + 5);
              if (!v8)
                break;
              if ((*((_BYTE *)v8 + 24) & 0x4A) != 0)
                goto LABEL_87;
            }
          }
        }
        break;
      }
    }
  }
LABEL_14:
  v12 = (WTF *)*((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 28) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      WTF::fastFree(v12, a2);
    else
      --*(_DWORD *)v12;
  }
  v13 = *((_QWORD *)a2 + 4);
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 24) + 8) + 40) + 8);
  if ((*(_QWORD *)(*(_QWORD *)(v14 + 680) + 680) & 0x800000000000) != 0)
  {
    WebCore::RenderLayer::updateAncestorDependentState(void)::$_0::operator()((uint64_t)a2, *(_QWORD **)(v13 + 32));
    v13 = *((_QWORD *)a2 + 4);
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 24) + 8) + 40) + 8);
  }
  if (!*(_BYTE *)(v14 + 3418) || (v42 = *(_QWORD *)(v13 + 32)) == 0 || (v43 = *(_QWORD *)(v42 + 8)) == 0)
  {
LABEL_20:
    v15 = *((_QWORD *)a2 + 3);
    if ((v15 & 0x100000000) == 0)
      goto LABEL_21;
    v47 = 0;
    goto LABEL_132;
  }
  v44 = v43;
  while (*(_BYTE *)(v44 + 46) != 90)
  {
    v45 = *(_QWORD *)(v44 + 32);
    if (v45)
    {
      v44 = *(_QWORD *)(v45 + 8);
      if (v44)
        continue;
    }
    if ((*(_QWORD *)(*(_QWORD *)(v14 + 680) + 680) & 0x800000000000) == 0)
      goto LABEL_20;
    while (*(_BYTE *)(v43 + 46) != 67)
    {
      v46 = *(_QWORD *)(v43 + 32);
      if (v46)
      {
        v43 = *(_QWORD *)(v46 + 8);
        if (v43)
          continue;
      }
      goto LABEL_20;
    }
    break;
  }
  v15 = *((_QWORD *)a2 + 3);
  if ((v15 & 0x100000000) == 0)
  {
    v47 = 0x100000000;
LABEL_132:
    *((_QWORD *)a2 + 3) = v15 & 0xFFFFFFFEFFFFFFFFLL | v47;
    WebCore::RenderLayer::updateSelfPaintingLayer((uint64_t)a2);
  }
LABEL_21:
  if (this)
  {
    v16 = this;
    do
    {
      v17 = *((_QWORD *)v16 + 3);
      if ((v17 & 0x100000) != 0)
        break;
      *((_QWORD *)v16 + 3) = v17 | 0x100000;
      v16 = (WebCore::RenderLayer *)*((_QWORD *)v16 + 5);
    }
    while (v16);
  }
  WebCore::RenderLayer::updateDescendantDependentFlags(a2);
  if (this && (*((_QWORD *)a2 + 3) & 0x1800) != 0)
  {
    v18 = this;
    while (1)
    {
      v19 = *((_QWORD *)this + 4);
      v20 = *(_QWORD *)(*(_QWORD *)(v19 + 88) + 40);
      v21 = *(_BYTE *)(v20 + 462);
      v22 = *(_BYTE *)(v20 + 642) & 3;
      v23 = v21 | 0x19;
      if (v22 == 1)
        v21 |= 0x15u;
      v24 = v22 == 2 ? v23 : v21;
      if ((v24 & 2) != 0)
      {
        if ((*(_BYTE *)(v19 + 20) & 1) != 0
          || (v50 = v18,
              isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox(*((WebCore::RenderObject **)this + 4)),
              v18 = v50,
              isAtomicInlineLevelBox))
        {
          if ((*(_QWORD *)(v19 + 96) & 0x1FLL) != 0x19
            && (*(unsigned __int8 *)(v19 + 46) - 36 > 4 || (*(_BYTE *)(v19 + 52) & 7) == 1))
          {
            break;
          }
        }
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 88) + 40) + 636) & 0xC0000) != 0)
      {
        if ((*(_BYTE *)(v19 + 20) & 1) != 0
          || (v51 = v18,
              v49 = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v19),
              v18 = v51,
              v49))
        {
          if ((*(_QWORD *)(v19 + 96) & 0x1FLL) != 0x19)
          {
            v41 = *(unsigned __int8 *)(v19 + 46);
            if ((v41 - 36) <= 4)
            {
              if (v41 == 36)
                break;
            }
            else if (v41 != 35 && v41 != 63)
            {
              break;
            }
          }
        }
      }
      if ((*((_QWORD *)v18 + 3) & 0x3000) != 0x1000)
      {
        *((_QWORD *)v18 + 3) = *((_QWORD *)v18 + 3) & 0xFFFFFFFFFFFFCFFFLL | 0x1000;
        v18 = (WebCore::RenderLayer *)*((_QWORD *)v18 + 5);
        if (v18)
          continue;
      }
      goto LABEL_37;
    }
    *((_QWORD *)this + 3) = *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFCFFFLL | 0x1000;
  }
LABEL_37:
  v25 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8)
                                                        + 40)
                                            + 8)
                                + 1944);
  result = *((_QWORD *)v25 + 50);
  if (!result)
  {
    v37 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    result = WebCore::RenderLayerCompositor::RenderLayerCompositor(v37, v25);
    v38 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v25 + 50);
    *((_QWORD *)v25 + 50) = result;
    if (v38)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v38);
      WTF::fastFree(v39, v40);
      result = *((_QWORD *)v25 + 50);
    }
  }
  if (*(_DWORD *)(result + 200))
  {
    *((_DWORD *)this + 3) |= 0x10u;
    if ((*((_BYTE *)this + 24) & 4) != 0)
    {
      v33 = (WebCore::RenderLayer *)*((_QWORD *)this + 5);
      if (v33)
      {
LABEL_74:
        do
        {
          v34 = *((_DWORD *)v33 + 3);
          if ((v34 & 1) != 0)
            break;
          *((_DWORD *)v33 + 3) = v34 | 1;
          if ((*((_BYTE *)v33 + 24) & 4) == 0)
          {
            while (1)
            {
              v33 = (WebCore::RenderLayer *)*((_QWORD *)v33 + 5);
              if (!v33)
                goto LABEL_39;
              if ((*((_BYTE *)v33 + 24) & 0x4A) != 0)
                goto LABEL_78;
            }
          }
          v33 = (WebCore::RenderLayer *)*((_QWORD *)v33 + 5);
LABEL_78:
          ;
        }
        while (v33);
      }
    }
    else
    {
      v33 = this;
      while (1)
      {
        v33 = (WebCore::RenderLayer *)*((_QWORD *)v33 + 5);
        if (!v33)
          break;
        if ((*((_BYTE *)v33 + 24) & 0x4A) != 0)
          goto LABEL_74;
      }
    }
  }
LABEL_39:
  if ((*((_BYTE *)a2 + 12) & 0x3D) != 0)
  {
    if ((*((_BYTE *)a2 + 24) & 4) != 0)
    {
      v31 = (WebCore::RenderLayer *)*((_QWORD *)a2 + 5);
      if (v31)
      {
LABEL_64:
        do
        {
          v32 = *((_DWORD *)v31 + 3);
          if ((v32 & 1) != 0)
            break;
          *((_DWORD *)v31 + 3) = v32 | 1;
          if ((*((_BYTE *)v31 + 24) & 4) == 0)
          {
            while (1)
            {
              v31 = (WebCore::RenderLayer *)*((_QWORD *)v31 + 5);
              if (!v31)
                goto LABEL_40;
              if ((*((_BYTE *)v31 + 24) & 0x4A) != 0)
                goto LABEL_68;
            }
          }
          v31 = (WebCore::RenderLayer *)*((_QWORD *)v31 + 5);
LABEL_68:
          ;
        }
        while (v31);
      }
    }
    else
    {
      v31 = a2;
      while (1)
      {
        v31 = (WebCore::RenderLayer *)*((_QWORD *)v31 + 5);
        if (!v31)
          break;
        if ((*((_BYTE *)v31 + 24) & 0x4A) != 0)
          goto LABEL_64;
      }
    }
  }
LABEL_40:
  if ((*((_WORD *)a2 + 6) & 0xFC2) != 0)
  {
    if ((*((_BYTE *)a2 + 24) & 4) != 0)
    {
      v28 = (WebCore::RenderLayer *)*((_QWORD *)a2 + 5);
      if (v28)
      {
LABEL_48:
        do
        {
          v29 = *((_DWORD *)v28 + 3);
          if ((v29 & 2) != 0)
            break;
          *((_DWORD *)v28 + 3) = v29 | 2;
          if ((*((_BYTE *)v28 + 24) & 4) == 0)
          {
            while (1)
            {
              v28 = (WebCore::RenderLayer *)*((_QWORD *)v28 + 5);
              if (!v28)
                goto LABEL_41;
              if ((*((_BYTE *)v28 + 24) & 0x4A) != 0)
                goto LABEL_52;
            }
          }
          v28 = (WebCore::RenderLayer *)*((_QWORD *)v28 + 5);
LABEL_52:
          ;
        }
        while (v28);
      }
    }
    else
    {
      v28 = a2;
      while (1)
      {
        v28 = (WebCore::RenderLayer *)*((_QWORD *)v28 + 5);
        if (!v28)
          break;
        if ((*((_BYTE *)v28 + 24) & 0x4A) != 0)
          goto LABEL_48;
      }
    }
  }
LABEL_41:
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 88) + 40) + 636) & 0x1F00000) != 0x100000)
    return WebCore::RenderLayer::updateAncestorChainHasBlendingDescendants((uint64_t)this);
  v27 = *((_QWORD *)a2 + 3);
  if ((v27 & 0x800000000000) != 0 && (v27 & 0xA) == 0)
    return WebCore::RenderLayer::updateAncestorChainHasBlendingDescendants((uint64_t)this);
  return result;
}

uint64_t WebCore::RenderLayer::setAncestorChainHasSelfPaintingLayerDescendant(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  int v5;
  char v6;
  char v7;
  int v8;
  int isAtomicInlineLevelBox;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (this)
  {
    v1 = this;
    while (1)
    {
      v2 = *(_QWORD *)(this + 32);
      v3 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + 40);
      v4 = *(_BYTE *)(v3 + 462);
      v5 = *(_BYTE *)(v3 + 642) & 3;
      v6 = v4 | 0x19;
      if (v5 == 1)
        v4 |= 0x15u;
      v7 = v5 == 2 ? v6 : v4;
      if ((v7 & 2) != 0)
      {
        if ((*(_BYTE *)(v2 + 20) & 1) != 0)
          goto LABEL_23;
        v17 = this;
        v13 = *(_QWORD *)(this + 32);
        v15 = v1;
        isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v2);
        v2 = v13;
        v1 = v15;
        v10 = isAtomicInlineLevelBox;
        this = v17;
        if (v10)
        {
LABEL_23:
          if ((*(_QWORD *)(v2 + 96) & 0x1FLL) != 0x19
            && (*(unsigned __int8 *)(v2 + 46) - 36 > 4 || (*(_BYTE *)(v2 + 52) & 7) == 1))
          {
            break;
          }
        }
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + 40) + 636) & 0xC0000) != 0)
      {
        if ((*(_BYTE *)(v2 + 20) & 1) != 0)
          goto LABEL_14;
        v18 = this;
        v14 = v2;
        v16 = v1;
        v11 = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v2);
        v2 = v14;
        v1 = v16;
        v12 = v11;
        this = v18;
        if (v12)
        {
LABEL_14:
          if ((*(_QWORD *)(v2 + 96) & 0x1FLL) != 0x19)
          {
            v8 = *(unsigned __int8 *)(v2 + 46);
            if ((v8 - 36) <= 4)
            {
              if (v8 == 36)
                break;
            }
            else if (v8 != 35 && v8 != 63)
            {
              break;
            }
          }
        }
      }
      if ((*(_QWORD *)(v1 + 24) & 0x3000) != 0x1000)
      {
        *(_QWORD *)(v1 + 24) = *(_QWORD *)(v1 + 24) & 0xFFFFFFFFFFFFCFFFLL | 0x1000;
        v1 = *(_QWORD *)(v1 + 40);
        if (v1)
          continue;
      }
      return this;
    }
    *(_QWORD *)(this + 24) = *(_QWORD *)(this + 24) & 0xFFFFFFFFFFFFCFFFLL | 0x1000;
  }
  return this;
}

void WebCore::GraphicsLayerCA::flushCompositingStateForThisLayerOnly(WebCore::GraphicsLayerCA *this)
{
  float32x2_t v2;
  float v3;
  char v4;
  float32x2_t v5;
  WebCore::GraphicsLayerCA *v6;
  char v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  WTF::WallTime *v13;
  double v14;
  char v15;
  int v16;
  float v17;
  float32x2_t v18;
  _QWORD v19[2];
  char v20;
  size_t v21;

  v20 = 0;
  *(_QWORD *)((char *)v19 + 5) = 0;
  v19[0] = 0;
  if (this)
  {
    v4 = 0;
    v5 = 0;
    v3 = 1.0;
    v6 = this;
    do
    {
      while (((*(uint64_t (**)(WebCore::GraphicsLayerCA *))(*(_QWORD *)v6 + 688))(v6) & 1) != 0)
      {
        v3 = v3 * (*(float (**)(_QWORD))(**((_QWORD **)v6 + 3) + 96))(*((_QWORD *)v6 + 3));
        v5 = vadd_f32(v5, *(float32x2_t *)((char *)v6 + 56));
        v6 = (WebCore::GraphicsLayerCA *)*((_QWORD *)v6 + 25);
        v4 = 1;
        if (!v6)
          goto LABEL_43;
      }
      v5 = vadd_f32(v5, *(float32x2_t *)((char *)v6 + 56));
      v6 = (WebCore::GraphicsLayerCA *)*((_QWORD *)v6 + 25);
    }
    while (v6);
    v2 = 0;
    if ((v4 & 1) == 0)
      goto LABEL_7;
LABEL_43:
    v2 = v5;
  }
  else
  {
    v2 = 0;
    v3 = 1.0;
  }
LABEL_7:
  v18 = v2;
  v7 = *((_BYTE *)this + 889);
  *((_BYTE *)this + 889) = 1;
  v8 = *((unsigned __int8 *)this + 169);
  if (v8 == 3)
    goto LABEL_8;
  v12 = v8 == 2 || (*(_WORD *)((_BYTE *)this + 177) & 0x20) == 0;
  if (v12
    || (v13 = (WTF::WallTime *)(*(uint64_t (**)(WebCore::GraphicsLayerCA *))(*(_QWORD *)this + 720))(this),
        !(_DWORD)v13))
  {
    v9 = *(unsigned __int8 *)(*((_QWORD *)this + 78) + 12);
    if (v9 == 4)
      v10 = 1;
    else
      v10 = *(unsigned __int8 *)(*((_QWORD *)this + 78) + 12);
  }
  else
  {
    WTF::WallTime::now(v13);
    if (v14 - *(double *)&WebCore::systemMemoryLevel(void)::previousCheckTime >= 0.1)
    {
      WebCore::systemMemoryLevel(void)::previousCheckTime = *(_QWORD *)&v14;
      v21 = 4;
      sysctlbyname("kern.memorystatus_level", &WebCore::systemMemoryLevel(void)::memoryFreeLevel, &v21, 0, 0);
    }
    if (WebCore::systemMemoryLevel(void)::memoryFreeLevel >= 35)
      v16 = 1280;
    else
      v16 = 1024;
    v17 = (float)v16;
    if ((float)(v3 * *((float *)this + 22)) > (float)v16)
    {
LABEL_8:
      v9 = *(unsigned __int8 *)(*((_QWORD *)this + 78) + 12);
LABEL_9:
      v10 = 4;
      goto LABEL_10;
    }
    v9 = *(unsigned __int8 *)(*((_QWORD *)this + 78) + 12);
    if (v9 == 4)
      v10 = 1;
    else
      v10 = *(unsigned __int8 *)(*((_QWORD *)this + 78) + 12);
    if ((float)(v3 * *((float *)this + 23)) > v17)
      goto LABEL_9;
  }
LABEL_10:
  if ((_DWORD)v10 != v9)
  {
    WebCore::GraphicsLayerCA::changeLayerTypeTo((uint64_t)this, v10);
    v20 = 1;
  }
  *((_BYTE *)this + 889) = v7;
  WebCore::GraphicsLayerCA::commitLayerChangesBeforeSublayers(this, (WTF::StringImpl *)v19, (float *)&v18, &v20, v3);
  v11 = *((_QWORD *)this + 77);
  if (v11)
  {
    v15 = *((_BYTE *)this + 889);
    *((_BYTE *)this + 889) = 1;
    if ((v11 & 0x100000) != 0)
    {
      WebCore::GraphicsLayerCA::updateMaskLayer(this);
      v11 = *((_QWORD *)this + 77);
    }
    if ((v11 & 4) != 0)
    {
      WebCore::GraphicsLayerCA::updateSublayerList(this, LODWORD(v19[0]) > 0x80);
      v11 = *((_QWORD *)this + 77);
    }
    if ((v11 & 0x200000) != 0)
      WebCore::GraphicsLayerCA::updateReplicatedLayers(this);
    *((_QWORD *)this + 77) = 0;
    *((_BYTE *)this + 889) = v15;
  }
  if (v20)
    (*(void (**)(_QWORD, WebCore::GraphicsLayerCA *))(**((_QWORD **)this + 3) + 64))(*((_QWORD *)this + 3), this);
}

uint64_t WebCore::HTMLPreloadScanner::scan(WebCore::TokenPreloadScanner *this, uint64_t a2, _WORD *a3)
{
  _WORD *v3;
  WTF *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unint64_t v7;
  uint64_t result;
  void *v9;
  double v10;
  double v11;
  float v12;
  WebCore::CachedResourceLoader *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  WebCore::CachedResourceLoader *v35;
  _WORD *v36;
  unsigned __int16 *v37;
  unint64_t v38;
  WebCore::CachedResourceLoader *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  float v46;
  uint64_t v47;
  unsigned int v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WebCore::CachedResourceLoader *v61;
  WTF *v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned __int16 v72;
  const char *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF *v87;
  void *v88;
  int v89;
  WTF *v90;
  unsigned int v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BOOL4 v97;
  WebCore::Document *v98;
  BOOL v99;
  uint64_t v100;
  uint64_t *v101;
  WTF *v102;
  uint64_t v103;
  WTF::String *v104;
  uint64_t v105;
  WTF *v106;
  WTF::StringImpl *v107;
  WebCore::CSSTokenizer *v108;
  WTF *v109;
  void *v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  WebCore::CachedResourceLoader *v113;
  unsigned int *v114;
  void *v115;
  WTF *v116;
  unsigned int v117;
  WebCore::MQ::MediaQuery *v118;
  uint64_t v119;
  _BOOL4 v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  WTF::StringImpl *v124;
  unsigned int *v125;
  unsigned int *v126;
  unsigned int v127;
  int v128;
  unsigned int v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  WTF::StringImpl *v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  WTF::StringImpl *v141;
  __int128 v142;
  char v143;
  _DWORD *v144;
  void *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  unint64_t v148;
  int v149;
  char v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF *v154;
  void *v155;
  uint64_t v156;
  uint64_t *v157;
  WTF *v158;
  void *v159;
  WTF *v160;
  unsigned __int16 v161;
  uint64_t v162;
  int isSupportedType;
  char v164;
  uint64_t v165;
  WTF *v166;
  void *v167;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  float v172;
  void *v173;
  float v174;
  unsigned __int8 *v175;
  unint64_t v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  int *v179;
  WTF::StringImpl *v180;
  int v181;
  uint64_t v182;
  WTF *v183;
  uint64_t v184;
  WTF *v185;
  uint64_t v186;
  int v187;
  WebCore::CachedResourceLoader *v188;
  int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  float v193;
  void *v194;
  float v195;
  unint64_t v196;
  unsigned __int8 *v197;
  unint64_t v198;
  WTF::StringImpl *v199;
  uint64_t v200;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  WebCore::Node *v210;
  uint64_t *v211;
  WTF::StringImpl *v212;
  unsigned int *v213;
  void *v214;
  unsigned int v215;
  WTF::StringImpl *v216;
  uint64_t v217;
  BOOL v218;
  uint64_t v219;
  void *v220;
  BOOL v221;
  WTF::StringImpl *v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  int v225;
  char isSupportedImageVideoOrSVGMIMEType;
  char v227;
  __int16 v228;
  char v229;
  WTF::StringImpl *v230;
  WTF::StringImpl *v231;
  unsigned int v232;
  __int16 v233;
  char v234;
  unsigned int *v235;
  unsigned int *v236;
  unsigned int v237;
  int v238;
  unsigned int v240;
  unsigned int v241;
  WTF::StringImpl *v242;
  WTF::StringImpl *v243;
  WTF::StringImpl *v244;
  uint64_t v245;
  WTF *v246;
  WTF *v247;
  WTF *v248;
  WTF::StringImpl *v249;
  WTF::StringImpl *v250;
  BOOL v251;
  WebCore::CachedResourceLoader *v252;
  WTF::StringImpl *v253;
  WTF::StringImpl *v254;
  BOOL v255;
  BOOL v256;
  WTF::StringImpl *v257;
  WTF::StringImpl *v258;
  uint64_t v259;
  WTF::StringImpl *v260;
  unsigned int v261;
  BOOL v262;
  uint64_t v263;
  unint64_t v265;
  unsigned int v266;
  uint64_t v267;
  WTF::StringImpl *v269;
  WTF::StringImpl *v270;
  int v271;
  WTF::StringImpl *v272;
  int v273;
  WTF::StringImpl *v274;
  WTF::StringImpl *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _DWORD *v279;
  unsigned int v280;
  WTF::StringImpl *v281;
  int v282;
  unint64_t v283;
  uint64_t v284;
  _WORD *v285;
  _QWORD *v286;
  WTF::String *v287;
  WTF::StringImpl **v288;
  WTF::StringImpl **v289;
  uint64_t *v290;
  WebCore::CachedResourceLoader *v292;
  char v293;
  WebCore::Document *v294;
  char v295;
  WebCore::Node *v296;
  unsigned __int8 v297;
  unsigned __int16 **v298;
  WTF::StringImpl **v299;
  WTF *v300;
  uint64_t v301;
  WebCore::MQ::MediaQuery *v302;
  uint64_t v303;
  WTF::StringImpl *v304;
  uint64_t v305;
  WTF::StringImpl *v306;
  WebCore::CachedResourceLoader *v307;
  WTF *v308;
  WTF::StringImpl *v309;
  WTF::StringImpl *v310;
  WTF::StringImpl *v311;
  __int16 v312;
  WTF::StringImpl *v313;
  WTF::StringImpl *v314;
  __int16 v315;
  __int128 v316;
  __int128 v317;
  WTF::StringImpl *v318[4];
  float v319;
  __int16 v320;
  __int16 v321;
  WTF::StringImpl *v322;
  WTF::StringImpl *v323;
  unsigned __int16 *v324;
  unint64_t v325;
  char v326;
  uint64_t v327;
  uint64_t v328;
  WebCore::CachedResourceLoader *v329;
  _WORD v330[26];
  char v331;
  uint64_t v332;
  _DWORD *v333;
  uint64_t v334;
  char v335;
  char v336;
  char v337;
  uint64_t v338;
  WTF::StringImpl *v339;
  unint64_t v340;
  _QWORD v341[5];
  uint64_t v342;
  int v343;
  int v344;
  uint64_t v345;
  __int16 v346;
  uint64_t v347;
  uint64_t v348;
  char v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;

  v3 = a3;
  v4 = this;
  v352 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a3 + 116);
  if (v5 && *(_DWORD *)(v5 + 4))
    WebCore::TokenPreloadScanner::setPredictedBaseElementURL(this, (const WTF::URL *)(a3 + 464));
  v300 = 0;
  v301 = 0;
  v6 = (unsigned __int16 *)((char *)v4 + 304);
  v7 = (unint64_t)v4 + 184;
  result = WebCore::HTMLTokenizer::processToken((WTF *)((char *)v4 + 304), (unint64_t)v4 + 184);
  if ((_DWORD)result)
  {
    v13 = (WTF *)((char *)v4 + 328);
    v14 = (WTF::StringImpl *)&v309;
    v15 = &v313;
    v286 = (_QWORD *)((char *)v4 + 160);
    v287 = (WTF::String *)&v317;
    v289 = v318;
    v290 = (uint64_t *)((char *)v4 + 112);
    v288 = &v318[1];
    v299 = &v309;
    while (1)
    {
      v16 = *((unsigned __int8 *)v4 + 842);
      if (v16 == 2)
        break;
LABEL_5:
      if (v16 == 3)
      {
        v26 = *((unsigned int *)v4 + 81);
        if ((v26 - 9) >= 0xFFFFFFF8)
        {
          v27 = 0;
          v28 = (unsigned __int16 *)*((_QWORD *)v4 + 39);
          v29 = 8 * v26;
          v30 = 56;
          while (1)
          {
            v32 = *v28++;
            v31 = v32;
            if (v32 > 0x7FuLL)
              break;
            v27 |= v31 << v30;
            v30 -= 8;
            if (v29 + v30 == 56)
            {
              v33 = 6;
              if (v27 > 0x70696374757264FFLL)
              {
                if (v27 <= 0x736F75726364FFFFLL)
                {
                  if (v27 == 0x7069637475726500)
                  {
                    v34 = 5;
                  }
                  else
                  {
                    if (v27 != 0x7363726970740000)
                      goto LABEL_82;
                    v34 = 6;
                  }
                }
                else
                {
                  switch(v27)
                  {
                    case 0x736F757263650000:
                      v34 = 7;
                      break;
                    case 0x7374796C65000000:
                      v34 = 8;
                      break;
                    case 0x74656D706C617465:
                      v34 = 9;
                      break;
                    default:
                      goto LABEL_82;
                  }
                }
              }
              else if (v27 <= 0x696E707573FFFFFFLL)
              {
                if (v27 == 0x6261736500000000)
                {
                  v34 = 0;
                }
                else
                {
                  if (v27 != 0x696D670000000000)
                    goto LABEL_82;
                  v34 = 1;
                }
              }
              else
              {
                switch(v27)
                {
                  case 0x696E707574000000:
                    v34 = 2;
                    break;
                  case 0x6C696E6B00000000:
                    v34 = 3;
                    break;
                  case 0x6D65746100000000:
                    v34 = 4;
                    break;
                  default:
                    goto LABEL_82;
                }
              }
              v33 = *((_DWORD *)&WebCore::TokenPreloadScanner::tagIdFor(WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::mappings
                    + 4 * v34
                    + 2);
              if (v33 == 9)
              {
                v189 = *((_DWORD *)v4 + 44);
                if (v189)
                  *((_DWORD *)v4 + 44) = v189 - 1;
                goto LABEL_140;
              }
              goto LABEL_82;
            }
          }
        }
        v33 = 6;
LABEL_82:
        if (!*((_DWORD *)v4 + 44))
        {
          if (v33 == 7)
          {
            if (*((_BYTE *)v4 + 152))
            {
              *(_DWORD *)v4 = 0;
              if (*((_DWORD *)v4 + 4))
              {
                if (*((_DWORD *)v4 + 5))
                  *((_DWORD *)v4 + 5) = 0;
                v247 = (WTF *)*((_QWORD *)v4 + 1);
                if (v247)
                {
                  *((_QWORD *)v4 + 1) = 0;
                  *((_DWORD *)v4 + 4) = 0;
                  WTF::fastFree(v247, v9);
                }
              }
              if (*((_DWORD *)v4 + 8))
              {
                if (*((_DWORD *)v4 + 9))
                  *((_DWORD *)v4 + 9) = 0;
                v248 = (WTF *)*((_QWORD *)v4 + 3);
                if (v248)
                {
                  *((_QWORD *)v4 + 3) = 0;
                  *((_DWORD *)v4 + 8) = 0;
                  WTF::fastFree(v248, v9);
                }
              }
            }
            *((_BYTE *)v4 + 152) = 0;
          }
          else if (v33 == 10)
          {
            v190 = *((_DWORD *)v4 + 43);
            if (v190)
              *((_DWORD *)v4 + 43) = v190 - 1;
          }
        }
        goto LABEL_140;
      }
      if (v16 != 2)
      {
        if (v16 == 5 && *((_BYTE *)v4 + 152))
        {
          v36 = v3;
          v37 = v6;
          v38 = v7;
          v39 = v13;
          v40 = *((_QWORD *)v4 + 7);
          *((_QWORD *)v4 + 7) = &v300;
          v41 = *((unsigned int *)v4 + 81);
          if ((_DWORD)v41)
          {
            v42 = (unsigned __int16 *)*((_QWORD *)v4 + 39);
            v43 = 2 * v41;
            do
            {
              if (*(_DWORD *)v4 == 10)
                break;
              v44 = *v42++;
              WebCore::CSSPreloadScanner::tokenize((uint64_t)v4, v44, v10, v11, v12);
              v43 -= 2;
            }
            while (v43);
          }
          if ((*(_DWORD *)v4 - 7) <= 1)
            WebCore::CSSPreloadScanner::emitRule(v4, (uint64_t)v9, v10, v11, v12);
          *((_QWORD *)v4 + 7) = v40;
          v13 = v39;
          v7 = v38;
          v6 = v37;
          v3 = v36;
          v14 = (WTF::StringImpl *)&v309;
        }
        goto LABEL_140;
      }
      v17 = *((unsigned int *)v4 + 81);
      if ((v17 - 9) < 0xFFFFFFF8)
      {
LABEL_52:
        v24 = 6;
LABEL_93:
        v45 = *((_DWORD *)v4 + 44);
        goto LABEL_94;
      }
      v18 = 0;
      v19 = (unsigned __int16 *)*((_QWORD *)v4 + 39);
      v20 = 8 * v17;
      v21 = 56;
      do
      {
        v23 = *v19++;
        v22 = v23;
        if (v23 > 0x7FuLL)
          goto LABEL_52;
        v18 |= v22 << v21;
        v21 -= 8;
      }
      while (v20 + v21 != 56);
      v24 = 6;
      if (v18 > 0x70696374757264FFLL)
      {
        if (v18 <= 0x736F75726364FFFFLL)
        {
          if (v18 == 0x7069637475726500)
          {
            v25 = 5;
          }
          else
          {
            if (v18 != 0x7363726970740000)
              goto LABEL_93;
            v25 = 6;
          }
        }
        else
        {
          switch(v18)
          {
            case 0x736F757263650000:
              v25 = 7;
              break;
            case 0x7374796C65000000:
              v25 = 8;
              break;
            case 0x74656D706C617465:
              v25 = 9;
              break;
            default:
              goto LABEL_93;
          }
        }
      }
      else if (v18 <= 0x696E707573FFFFFFLL)
      {
        if (v18 == 0x6261736500000000)
        {
          v25 = 0;
        }
        else
        {
          if (v18 != 0x696D670000000000)
            goto LABEL_93;
          v25 = 1;
        }
      }
      else
      {
        switch(v18)
        {
          case 0x696E707574000000:
            v25 = 2;
            break;
          case 0x6C696E6B00000000:
            v25 = 3;
            break;
          case 0x6D65746100000000:
            v25 = 4;
            break;
          default:
            goto LABEL_93;
        }
      }
      v24 = *((_DWORD *)&WebCore::TokenPreloadScanner::tagIdFor(WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::mappings
            + 4 * v25
            + 2);
      if (v24 != 9)
        goto LABEL_93;
      if (WebCore::findAttribute(*((unsigned __int16 ***)v4 + 106), *((_DWORD *)v4 + 215), (int16x8_t *)WebCore::TokenPreloadScanner::scan(WebCore::HTMLToken const&,WTF::Vector<std::unique_ptr<WebCore::PreloadRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::Document &)::shadowRootAsUChar, 14))
      {
        WTF::String::String();
        if (WTF::equalIgnoringASCIICase((uint64_t *)&v307, "open"))
        {
          v188 = v307;
          v307 = 0;
          if (v188)
          {
            if (*(_DWORD *)v188 == 2)
              WTF::StringImpl::destroy(v188, (WTF::StringImpl *)v9);
            else
              *(_DWORD *)v188 -= 2;
          }
        }
        else
        {
          v251 = WTF::equalIgnoringASCIICase((uint64_t *)&v307, "closed");
          v252 = v307;
          v307 = 0;
          if (v252)
          {
            if (*(_DWORD *)v252 == 2)
              WTF::StringImpl::destroy(v252, (WTF::StringImpl *)v9);
            else
              *(_DWORD *)v252 -= 2;
          }
          if (!v251)
            goto LABEL_442;
        }
        if (!*((_DWORD *)v4 + 44))
        {
          v24 = 9;
LABEL_98:
          v46 = *((float *)v4 + 26);
          if ((*((_QWORD *)v3 + 2) & 0xFFFFFFFFFFFFLL) == 0)
          {
            v65 = WTF::fastCompactMalloc((WTF *)0x28);
            *(_DWORD *)v65 = 1;
            *(_QWORD *)(v65 + 16) = 0;
            *(_QWORD *)(v65 + 24) = 0;
            *(_QWORD *)(v65 + 8) = v3;
            *(_BYTE *)(v65 + 32) = 0;
            v66 = *((_QWORD *)v3 + 2);
            *((_QWORD *)v3 + 2) = v66 & 0xFFFF000000000000 | v65;
            v67 = v66 & 0xFFFFFFFFFFFFLL;
            if ((v66 & 0xFFFFFFFFFFFFLL) != 0)
            {
              do
              {
                v68 = __ldaxr((unsigned int *)v67);
                v69 = v68 - 1;
              }
              while (__stlxr(v69, (unsigned int *)v67));
              if (!v69)
              {
                atomic_store(1u, (unsigned int *)v67);
                v182 = *(unsigned int *)(v67 + 28);
                if ((_DWORD)v182)
                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v67 + 16), (WTF::StringImpl *)(*(_QWORD *)(v67 + 16) + 32 * v182));
                v183 = *(WTF **)(v67 + 16);
                if (v183)
                {
                  *(_QWORD *)(v67 + 16) = 0;
                  *(_DWORD *)(v67 + 24) = 0;
                  WTF::fastFree(v183, v9);
                }
                WTF::fastFree((WTF *)v67, v9);
              }
            }
          }
          v47 = *((_QWORD *)v3 + 2) & 0xFFFFFFFFFFFFLL;
          do
            v48 = __ldaxr((unsigned int *)v47);
          while (__stlxr(v48 + 1, (unsigned int *)v47));
          v307 = (WebCore::CachedResourceLoader *)v47;
          LODWORD(v308) = v24;
          v310 = 0;
          v311 = 0;
          v309 = 0;
          v312 = 257;
          v313 = 0;
          v314 = 0;
          v315 = 0;
          v316 = 0u;
          v317 = 0u;
          memset(v318, 0, 29);
          v319 = v46;
          v320 = 512;
          if (v24 > 5)
            goto LABEL_102;
          v90 = (WTF *)*((_QWORD *)v4 + 106);
          v91 = *((_DWORD *)v4 + 215);
          v296 = *(WebCore::Node **)(v47 + 8);
          *((_DWORD *)v296 + 6) += 2;
          if (!v91)
            goto LABEL_233;
          v298 = (unsigned __int16 **)((char *)v90 + 224 * v91);
          while (2)
          {
            WTF::AtomStringImpl::lookUp();
            v92 = v323;
            v93 = (WTF::StringImpl *)*((_QWORD *)v90 + 10);
            v94 = *((unsigned int *)v90 + 23);
            v95 = *((_QWORD *)v4 + 20);
            v96 = *((unsigned int *)v4 + 43);
            v339 = v93;
            v340 = v94;
            if ((_DWORD)v96)
              v97 = *(unsigned __int8 *)(v96 + v95 - 1) != 0;
            else
              v97 = 0;
            v98 = (WebCore::Document *)*((_QWORD *)v307 + 1);
            *((_DWORD *)v98 + 6) += 2;
            if ((_DWORD)v308 == 1)
            {
              if (*(WTF::StringImpl **)(WebCore::HTMLNames::srcAttr + 24) != v92)
              {
                if (*(WTF::StringImpl **)(WebCore::HTMLNames::typeAttr + 24) == v92)
                {
                  v99 = (_DWORD)v94 == 5
                     && (*(_WORD *)v93 & 0xFFDF) == 0x49
                     && (*((_WORD *)v93 + 1) & 0xFFDF) == 0x4D
                     && (*((_WORD *)v93 + 2) & 0xFFDF) == 0x41
                     && (*((_WORD *)v93 + 3) & 0xFFDF) == 0x47
                     && (*((_WORD *)v93 + 4) & 0xFFDF) == 69;
                  BYTE2(v318[3]) = v99;
                }
                goto LABEL_212;
              }
              if (v309 && *((_DWORD *)v309 + 1))
              {
LABEL_212:
                if (*((_DWORD *)v98 + 6) == 2)
                {
                  if ((*((_WORD *)v98 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v98, v9);
                }
                else
                {
                  *((_DWORD *)v98 + 6) -= 2;
                }
LABEL_214:
                if (v92)
                {
                  if (*(_DWORD *)v92 == 2)
                    WTF::StringImpl::destroy(v92, (WTF::StringImpl *)v9);
                  else
                    *(_DWORD *)v92 -= 2;
                }
                v90 = (WTF *)((char *)v90 + 224);
                if (v90 != (WTF *)v298)
                  continue;
                v24 = (int)v308;
LABEL_233:
                if (v24 == 5)
                {
                  v192 = *((unsigned int *)v4 + 43);
                  v100 = (uint64_t)v296;
                  if ((_DWORD)v192
                    && !*(_BYTE *)(v192 + *v286 - 1)
                    && (_BYTE)v312
                    && HIBYTE(v312)
                    && v310
                    && *((_DWORD *)v310 + 1))
                  {
                    WebCore::SizesAttributeParser::SizesAttributeParser((WebCore::SizesAttributeParser *)&v323, (const WTF::String *)&v311, v296);
                    v193 = WebCore::SizesAttributeParser::length((WebCore::SizesAttributeParser *)&v323);
                    WebCore::SizesAttributeParser::~SizesAttributeParser((WebCore::SizesAttributeParser *)&v323, v194);
                    v195 = v319;
                    WTF::AtomString::AtomString((WTF::AtomString *)&v339, &v309);
                    v196 = (unint64_t)v310;
                    if (v310)
                    {
                      v197 = (unsigned __int8 *)*((_QWORD *)v310 + 1);
                      v196 = *((unsigned int *)v310 + 1);
                      v198 = ((unint64_t)*((unsigned int *)v310 + 4) >> 2) & 1;
                    }
                    else
                    {
                      v197 = 0;
                      v198 = 1;
                    }
                    v304 = 0;
                    WebCore::bestFitSourceForImageAttributes((uint64_t *)&v339, v197, v196 | (v198 << 32), &v304, (uint64_t)&v323, v195, v193);
                    v199 = v339;
                    v339 = 0;
                    if (v199)
                    {
                      if (*(_DWORD *)v199 == 2)
                        WTF::StringImpl::destroy(v199, (WTF::StringImpl *)v9);
                      else
                        *(_DWORD *)v199 -= 2;
                    }
                    if ((_DWORD)v325)
                    {
                      v200 = *((unsigned int *)v4 + 43);
                      if (!(_DWORD)v200)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19431E978);
                      }
                      *(_BYTE *)(v200 + *v286 - 1) = 1;
                      WebCore::TokenPreloadScanner::StartTagScanner::setURLToLoadAllowingReplacement((WTF::StringImpl *)&v307, v324, v325);
                    }
                    if (v323)
                    {
                      if (*(_DWORD *)v323 == 2)
                        WTF::StringImpl::destroy(v323, (WTF::StringImpl *)v9);
                      else
                        *(_DWORD *)v323 -= 2;
                    }
                    v24 = (int)v308;
                    v14 = (WTF::StringImpl *)&v309;
                    goto LABEL_234;
                  }
                }
                else
                {
LABEL_234:
                  v100 = (uint64_t)v296;
                  if (!v24 && v310 && *((_DWORD *)v310 + 1))
                  {
                    WebCore::SizesAttributeParser::SizesAttributeParser((WebCore::SizesAttributeParser *)&v323, (const WTF::String *)&v311, v296);
                    v172 = WebCore::SizesAttributeParser::length((WebCore::SizesAttributeParser *)&v323);
                    WebCore::SizesAttributeParser::~SizesAttributeParser((WebCore::SizesAttributeParser *)&v323, v173);
                    v174 = v319;
                    WTF::AtomString::AtomString((WTF::AtomString *)&v339, &v309);
                    if (v310)
                    {
                      v175 = (unsigned __int8 *)*((_QWORD *)v310 + 1);
                      v176 = *((unsigned int *)v310 + 1) | ((unint64_t)((*((_DWORD *)v310 + 4) >> 2) & 1) << 32);
                    }
                    else
                    {
                      v175 = 0;
                      v176 = 0x100000000;
                    }
                    v304 = 0;
                    WebCore::bestFitSourceForImageAttributes((uint64_t *)&v339, v175, v176, &v304, (uint64_t)&v323, v174, v172);
                    v178 = v339;
                    v339 = 0;
                    if (v178)
                    {
                      if (*(_DWORD *)v178 == 2)
                        WTF::StringImpl::destroy(v178, v177);
                      else
                        *(_DWORD *)v178 -= 2;
                    }
                    WebCore::TokenPreloadScanner::StartTagScanner::setURLToLoadAllowingReplacement((WTF::StringImpl *)&v307, v324, v325);
                    if (v323)
                    {
                      if (*(_DWORD *)v323 == 2)
                        WTF::StringImpl::destroy(v323, (WTF::StringImpl *)v9);
                      else
                        *(_DWORD *)v323 -= 2;
                    }
                  }
                }
                if (LOBYTE(v318[3]) && (_QWORD)v317)
                  WebCore::Document::processViewport(v100, (uint64_t *)&v317, 4u);
                if (BYTE1(v318[3]) && (_QWORD)v317)
                  WebCore::Document::processDisabledAdaptations((WebCore::Document *)v100, (const WTF::String *)&v317);
                if (v100)
                {
                  if (*(_DWORD *)(v100 + 24) == 2)
                  {
                    if ((*(_WORD *)(v100 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v100, v9);
                  }
                  else
                  {
                    *(_DWORD *)(v100 + 24) -= 2;
                  }
                }
LABEL_102:
                if (!v309 || !*((_DWORD *)v309 + 1) || (WTF::protocolIs() & 1) != 0 || (WTF::protocolIs() & 1) != 0)
                {
LABEL_103:
                  v49 = v318[2];
                  v318[2] = 0;
                  if (v49)
                  {
                    if (*(_DWORD *)v49 == 2)
                      WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v9);
                    else
                      *(_DWORD *)v49 -= 2;
                  }
                  v50 = v318[1];
                  v318[1] = 0;
                  if (v50)
                  {
                    if (*(_DWORD *)v50 == 2)
                      WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v9);
                    else
                      *(_DWORD *)v50 -= 2;
                  }
                  v51 = v318[0];
                  v318[0] = 0;
                  if (v51)
                  {
                    if (*(_DWORD *)v51 == 2)
                      WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v9);
                    else
                      *(_DWORD *)v51 -= 2;
                  }
                  v52 = (WTF::StringImpl *)*((_QWORD *)&v317 + 1);
                  *((_QWORD *)&v317 + 1) = 0;
                  if (v52)
                  {
                    if (*(_DWORD *)v52 == 2)
                      WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v9);
                    else
                      *(_DWORD *)v52 -= 2;
                  }
                  v53 = (WTF::StringImpl *)v317;
                  *(_QWORD *)&v317 = 0;
                  if (v53)
                  {
                    if (*(_DWORD *)v53 == 2)
                      WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v9);
                    else
                      *(_DWORD *)v53 -= 2;
                  }
                  v54 = (WTF::StringImpl *)*((_QWORD *)&v316 + 1);
                  *((_QWORD *)&v316 + 1) = 0;
                  if (v54)
                  {
                    if (*(_DWORD *)v54 == 2)
                      WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v9);
                    else
                      *(_DWORD *)v54 -= 2;
                  }
                  v55 = (WTF::StringImpl *)v316;
                  *(_QWORD *)&v316 = 0;
                  if (v55)
                  {
                    if (*(_DWORD *)v55 == 2)
                      WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v9);
                    else
                      *(_DWORD *)v55 -= 2;
                  }
                  v56 = v314;
                  v314 = 0;
                  if (v56)
                  {
                    if (*(_DWORD *)v56 == 2)
                      WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v9);
                    else
                      *(_DWORD *)v56 -= 2;
                  }
                  v57 = v313;
                  v313 = 0;
                  if (v57)
                  {
                    if (*(_DWORD *)v57 == 2)
                      WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v9);
                    else
                      *(_DWORD *)v57 -= 2;
                  }
                  v58 = v311;
                  v311 = 0;
                  if (v58)
                  {
                    if (*(_DWORD *)v58 == 2)
                      WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v9);
                    else
                      *(_DWORD *)v58 -= 2;
                  }
                  v59 = v310;
                  v310 = 0;
                  if (v59)
                  {
                    if (*(_DWORD *)v59 == 2)
                      WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v9);
                    else
                      *(_DWORD *)v59 -= 2;
                  }
                  v60 = v309;
                  v309 = 0;
                  if (v60)
                  {
                    if (*(_DWORD *)v60 == 2)
                      WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v9);
                    else
                      *(_DWORD *)v60 -= 2;
                  }
                  v61 = v307;
                  v307 = 0;
                  if (v61)
                  {
                    do
                    {
                      v63 = __ldaxr((unsigned int *)v61);
                      v64 = v63 - 1;
                    }
                    while (__stlxr(v64, (unsigned int *)v61));
                    if (!v64)
                    {
                      atomic_store(1u, (unsigned int *)v61);
                      v184 = *((unsigned int *)v61 + 7);
                      if ((_DWORD)v184)
                        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v61 + 2), (WTF::StringImpl *)(*((_QWORD *)v61 + 2) + 32 * v184));
                      v185 = (WTF *)*((_QWORD *)v61 + 2);
                      if (v185)
                      {
                        *((_QWORD *)v61 + 2) = 0;
                        *((_DWORD *)v61 + 6) = 0;
                        WTF::fastFree(v185, v9);
                      }
                      WTF::fastFree(v61, v9);
                    }
                  }
                  goto LABEL_140;
                }
                v70 = (int)v308;
                if ((_DWORD)v308 == 3)
                {
LABEL_157:
                  v297 = v70;
                  goto LABEL_158;
                }
                LOBYTE(v161) = 1;
                switch((int)v308)
                {
                  case 0:
                  case 5:
                    goto LABEL_345;
                  case 1:
                    if (!BYTE2(v318[3]))
                      goto LABEL_103;
                    LOBYTE(v70) = 1;
                    goto LABEL_157;
                  case 2:
                    if ((_BYTE)v315)
                    {
                      v297 = 2;
LABEL_346:
                      v162 = *((_QWORD *)v307 + 1);
                      *(_DWORD *)(v162 + 24) += 2;
                      isSupportedType = WebCore::LinkLoader::isSupportedType(v297, v318, (const WTF::StringImpl *)v162);
                      v164 = isSupportedType;
                      if (*(_DWORD *)(v162 + 24) == 2)
                      {
                        if ((*(_WORD *)(v162 + 30) & 0x400) != 0)
                        {
                          if (!isSupportedType)
                            goto LABEL_103;
                        }
                        else
                        {
                          WebCore::Node::removedLastRef((WebCore::Node *)v162, v9);
                          if ((v164 & 1) == 0)
                            goto LABEL_103;
                        }
                      }
                      else
                      {
                        *(_DWORD *)(v162 + 24) -= 2;
                        if ((isSupportedType & 1) == 0)
                          goto LABEL_103;
                      }
                      goto LABEL_158;
                    }
                    if (!HIBYTE(v315))
                      goto LABEL_103;
                    v249 = (WTF::StringImpl *)*((_QWORD *)v307 + 1);
                    *((_DWORD *)v249 + 6) += 2;
                    v323 = v249;
                    v161 = WebCore::LinkLoader::resourceTypeFromAsAttribute((uint64_t *)&v317 + 1, v249, 0);
                    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v323);
                    if (v161 < 0x100u)
                      goto LABEL_103;
                    v70 = (int)v308;
LABEL_345:
                    v297 = v161;
                    if (v70 == 2)
                      goto LABEL_346;
LABEL_158:
                    if (!v318[2] || *((_DWORD *)v318[2] + 1) != 4)
                      goto LABEL_160;
                    v186 = *((_QWORD *)v318[2] + 1);
                    if ((*((_BYTE *)v318[2] + 16) & 4) != 0)
                    {
                      if ((*(_BYTE *)v186 & 0xDF) != 0x4C
                        || (*(_BYTE *)(v186 + 1) & 0xDF) != 0x41
                        || (*(_BYTE *)(v186 + 2) & 0xDF) != 0x5A)
                      {
                        goto LABEL_160;
                      }
                      v187 = *(unsigned __int8 *)(v186 + 3);
                    }
                    else
                    {
                      if ((*(_WORD *)v186 & 0xFFDF) != 0x4C
                        || (*(_WORD *)(v186 + 2) & 0xFFDF) != 0x41
                        || (*(_WORD *)(v186 + 4) & 0xFFDF) != 0x5A)
                      {
                        goto LABEL_160;
                      }
                      v187 = *(unsigned __int16 *)(v186 + 6);
                    }
                    if ((v187 & 0xFFFFFFDF) == 0x59)
                      goto LABEL_103;
LABEL_160:
                    v71 = (int)v308;
                    if ((_DWORD)v308 == 3)
                    {
                      v72 = WebCore::ScriptElement::determineScriptType((WebCore::ScriptElement *)v318, &v318[1], (const WTF::String *)1);
                      if (v72 < 0x100u || v72 != 1 && BYTE3(v318[3]))
                        goto LABEL_103;
                      v71 = (int)v308;
                    }
                    else
                    {
                      LOBYTE(v72) = 0;
                    }
                    v295 = v72;
                    if (v71 == 3)
                    {
                      v73 = "script";
                      v74 = 7;
                    }
                    else
                    {
                      v73 = "img";
                      v74 = 4;
                      switch(v71)
                      {
                        case 0:
                        case 5:
                          break;
                        case 1:
                          v73 = "input";
                          v74 = 6;
                          break;
                        case 2:
                          v73 = "link";
                          v74 = 5;
                          break;
                        default:
                          v73 = "unknown";
                          v74 = 8;
                          break;
                      }
                    }
                    v292 = (WebCore::CachedResourceLoader *)v74;
                    v75 = (_QWORD *)WTF::fastMalloc((WTF *)0x70);
                    v76 = v75;
                    v293 = HIBYTE(v320);
                    *v75 = v73;
                    v75[1] = v292;
                    v77 = v309;
                    if (v309)
                      *(_DWORD *)v309 += 2;
                    v75[2] = v77;
                    WTF::URL::isolatedCopy();
                    v76[8] = 0;
                    *((_BYTE *)v76 + 72) = v297;
                    v78 = v316;
                    if ((_QWORD)v316)
                      *(_DWORD *)v316 += 2;
                    v76[11] = 0;
                    v76[12] = 0;
                    v76[10] = v78;
                    *((_BYTE *)v76 + 104) = 0;
                    *((_BYTE *)v76 + 105) = v295;
                    *((_BYTE *)v76 + 106) = v320;
                    *((_BYTE *)v76 + 107) = v293;
                    v339 = (WTF::StringImpl *)v76;
                    v79 = v314;
                    if (v314)
                      *(_DWORD *)v314 += 2;
                    v76[11] = v79;
                    v80 = *((_QWORD *)&v316 + 1);
                    if (*((_QWORD *)&v316 + 1))
                      **((_DWORD **)&v316 + 1) += 2;
                    v76[12] = v80;
                    *((_BYTE *)v76 + 104) = BYTE4(v318[3]);
                    WTF::String::isolatedCopy();
                    v81 = v323;
                    v323 = 0;
                    v82 = (WTF::StringImpl *)v76[8];
                    v76[8] = v81;
                    if (v82)
                    {
                      v83 = *(_DWORD *)v82 - 2;
                      if (*(_DWORD *)v82 == 2)
                      {
                        WTF::StringImpl::destroy(v82, (WTF::StringImpl *)v9);
                        v82 = v323;
                        v323 = 0;
                        if (!v82)
                          goto LABEL_178;
                        v83 = *(_DWORD *)v82 - 2;
                        if (*(_DWORD *)v82 == 2)
                        {
                          WTF::StringImpl::destroy(v82, (WTF::StringImpl *)v9);
                          goto LABEL_178;
                        }
                      }
                      *(_DWORD *)v82 = v83;
                    }
LABEL_178:
                    v84 = v339;
                    if (v339)
                    {
                      LODWORD(v85) = HIDWORD(v301);
                      if (HIDWORD(v301) == (_DWORD)v301)
                      {
                        v101 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v300, HIDWORD(v301) + 1, (unint64_t)&v339);
                        v85 = HIDWORD(v301);
                        v102 = v300;
                        v103 = *v101;
                        *v101 = 0;
                        *((_QWORD *)v102 + v85) = v103;
                      }
                      else
                      {
                        v339 = 0;
                        *((_QWORD *)v300 + HIDWORD(v301)) = v84;
                      }
                      HIDWORD(v301) = v85 + 1;
                      v86 = v339;
                      v339 = 0;
                      if (v86)
                      {
                        WebCore::PreloadRequest::~PreloadRequest(v86, (WTF::StringImpl *)v9);
                        WTF::fastFree(v87, v88);
                      }
                    }
                    goto LABEL_103;
                  default:
                    LOBYTE(v70) = 8;
                    goto LABEL_157;
                }
              }
              v294 = v98;
LABEL_546:
              WebCore::TokenPreloadScanner::StartTagScanner::setURLToLoadAllowingReplacement((WTF::StringImpl *)&v307, (unsigned __int16 *)v93, v94);
LABEL_228:
              v98 = v294;
              goto LABEL_212;
            }
            break;
          }
          v294 = v98;
          switch((int)v308)
          {
            case 0:
              if ((_DWORD)v96 && v97)
                goto LABEL_212;
              if (*(WTF::StringImpl **)(WebCore::HTMLNames::srcsetAttr + 24) == v92 && v310 == 0)
                goto LABEL_579;
              if (*(WTF::StringImpl **)(WebCore::HTMLNames::sizesAttr + 24) == v92 && v311 == 0)
                goto LABEL_585;
              if (*(WTF::StringImpl **)(WebCore::HTMLNames::fetchpriorityAttr + 24) == v92
                && (*(_QWORD *)(*((_QWORD *)v98 + 85) + 672) & 0x8000000000000000) != 0)
              {
                goto LABEL_566;
              }
              if (*(WTF::StringImpl **)(WebCore::HTMLNames::referrerpolicyAttr + 24) == v92)
              {
                v241 = (unsigned __int16)WebCore::parseReferrerPolicy((unsigned __int16 *)v93, v94, 2);
                v98 = v294;
                if (v241 <= 0x100)
                  LOBYTE(v241) = 0;
                LOBYTE(v320) = v241;
                goto LABEL_212;
              }
              if ((*(_QWORD *)(*((_QWORD *)v98 + 85) + 680) & 0x2000000000000) == 0
                || *(WTF::StringImpl **)(WebCore::HTMLNames::loadingAttr + 24) != v92
                || v318[2])
              {
                goto LABEL_227;
              }
              WTF::StringView::toString((uint64_t *)&v323, (WTF::StringView *)&v339);
              v170 = v323;
              v323 = 0;
              v171 = v318[2];
              v318[2] = v170;
              if (v171)
                goto LABEL_580;
              goto LABEL_228;
            case 2:
              if (*(WTF::StringImpl **)(WebCore::HTMLNames::hrefAttr + 24) != v92)
              {
                if (*(WTF::StringImpl **)(WebCore::HTMLNames::relAttr + 24) == v92)
                {
                  WebCore::LinkRelAttribute::LinkRelAttribute(&v323, v98, v93, v94);
                  v98 = v294;
                  v255 = v323 == 255 && (BYTE1(v323) & 4) == 0;
                  v256 = (BYTE1(v323) & 3) == 1 && v255;
                  LOBYTE(v315) = v256;
                  HIBYTE(v315) = (BYTE1(v323) & 0x10) != 0;
                  goto LABEL_212;
                }
                if (*(WTF::StringImpl **)(WebCore::HTMLNames::mediaAttr + 24) == v92)
                {
                  WTF::StringView::toString((uint64_t *)&v323, (WTF::StringView *)&v339);
                  v257 = v323;
                  v323 = 0;
                  v171 = (WTF::StringImpl *)v316;
                  *(_QWORD *)&v316 = v257;
                  if (v171)
                    goto LABEL_580;
                  goto LABEL_228;
                }
                if (*(WTF::StringImpl **)(WebCore::HTMLNames::charsetAttr + 24) == v92)
                {
                  WTF::StringView::toString((uint64_t *)&v323, (WTF::StringView *)&v339);
                  v258 = v323;
                  v323 = 0;
                  v171 = v313;
                  v313 = v258;
                  if (v171)
                    goto LABEL_580;
                  goto LABEL_228;
                }
                if (*(WTF::StringImpl **)(WebCore::HTMLNames::crossoriginAttr + 24) == v92)
                {
                  if (!(_DWORD)v94)
                  {
                    v94 = 0;
                    goto LABEL_667;
                  }
                  v259 = 0;
                  v260 = v93;
                  while (1)
                  {
                    v261 = *(unsigned __int16 *)v260;
                    v262 = v261 > 0x20;
                    v263 = (1 << v261) & 0x100003600;
                    if (v262 || v263 == 0)
                      break;
                    ++v259;
                    v260 = (WTF::StringImpl *)((char *)v260 + 2);
                    if (v94 == v259)
                    {
                      v94 = 0x100000000;
                      v260 = (WTF::StringImpl *)"";
                      goto LABEL_668;
                    }
                  }
                  if ((_DWORD)v94 == 1)
                  {
                    if (!(_DWORD)v259)
                    {
                      v94 = 1;
                      goto LABEL_667;
                    }
                    LODWORD(v265) = 0;
                  }
                  else
                  {
                    v265 = (v94 - 1);
                    do
                    {
                      if (v265 >= v94)
                        goto LABEL_732;
                      v266 = *((unsigned __int16 *)v93 + v265);
                      v262 = v266 > 0x20;
                      v267 = (1 << v266) & 0x100003600;
                      if (v262 || v267 == 0)
                        break;
                      --v265;
                    }
                    while ((_DWORD)v265);
                    if (!(_DWORD)v259 && (_DWORD)v265 == (_DWORD)v94 - 1)
                    {
LABEL_667:
                      v260 = v93;
                      goto LABEL_668;
                    }
                  }
                  v282 = v265 - v259;
                  v283 = v94 - v259;
                  v94 = (v282 + 1);
                  if (v283 < v94)
                  {
LABEL_732:
                    __break(1u);
                    goto LABEL_733;
                  }
LABEL_668:
                  v323 = v260;
                  v324 = (unsigned __int16 *)v94;
                  WTF::StringView::toString((uint64_t *)&v304, (WTF::StringView *)&v323);
                  v269 = v304;
                  v304 = 0;
                  v270 = v314;
                  v314 = v269;
                  if (v270)
                  {
                    v271 = *(_DWORD *)v270 - 2;
                    if (*(_DWORD *)v270 != 2)
                      goto LABEL_670;
                    WTF::StringImpl::destroy(v270, (WTF::StringImpl *)v9);
                    v270 = v304;
                    v304 = 0;
                    if (v270)
                    {
                      v271 = *(_DWORD *)v270 - 2;
                      if (*(_DWORD *)v270 == 2)
                        WTF::StringImpl::destroy(v270, (WTF::StringImpl *)v9);
                      else
LABEL_670:
                        *(_DWORD *)v270 = v271;
                    }
                  }
                  v14 = (WTF::StringImpl *)&v309;
                  v98 = v294;
                  if (!v294)
                    goto LABEL_214;
                  goto LABEL_212;
                }
                v292 = v13;
                if (*(WTF::StringImpl **)(WebCore::HTMLNames::nonceAttr + 24) == v92)
                {
                  WTF::StringView::toString((uint64_t *)&v323, (WTF::StringView *)&v339);
                  v272 = v323;
                  v323 = 0;
                  v243 = (WTF::StringImpl *)*((_QWORD *)&v316 + 1);
                  *((_QWORD *)&v316 + 1) = v272;
                  if (!v243)
                    goto LABEL_584;
                }
                else if (*(WTF::StringImpl **)(WebCore::HTMLNames::asAttr + 24) == v92)
                {
                  WTF::StringView::toString((uint64_t *)&v323, (WTF::StringView *)&v339);
                  v274 = v323;
                  v323 = 0;
                  v243 = (WTF::StringImpl *)*((_QWORD *)&v317 + 1);
                  *((_QWORD *)&v317 + 1) = v274;
                  if (!v243)
                    goto LABEL_584;
                }
                else
                {
                  if (*(WTF::StringImpl **)(WebCore::HTMLNames::typeAttr + 24) != v92)
                  {
                    if (*(WTF::StringImpl **)(WebCore::HTMLNames::referrerpolicyAttr + 24) == v92)
                    {
                      v280 = (unsigned __int16)WebCore::parseReferrerPolicy((unsigned __int16 *)v93, v94, 2);
                      if (v280 <= 0x100)
                        LOBYTE(v280) = 0;
                      LOBYTE(v320) = v280;
                      goto LABEL_584;
                    }
                    v14 = (WTF::StringImpl *)&v309;
                    if (*(WTF::StringImpl **)(WebCore::HTMLNames::fetchpriorityAttr + 24) != v92
                      || (*(_QWORD *)(*((_QWORD *)v98 + 85) + 672) & 0x8000000000000000) == 0)
                    {
                      goto LABEL_212;
                    }
                    WTF::StringView::toString((uint64_t *)&v323, (WTF::StringView *)&v339);
                    v228 = WebCore::parseEnumerationFromString<WebCore::RequestPriority>((uint64_t *)&v323);
                    if ((v228 & 0xFF00) != 0)
                      v229 = v228;
                    else
                      v229 = 2;
                    HIBYTE(v320) = v229;
                    goto LABEL_698;
                  }
                  WTF::StringView::toString((uint64_t *)&v323, (WTF::StringView *)&v339);
                  v275 = v323;
                  v323 = 0;
                  v243 = v318[0];
                  v318[0] = v275;
                  if (!v243)
                    goto LABEL_584;
                }
                v273 = *(_DWORD *)v243 - 2;
                if (*(_DWORD *)v243 != 2)
                  goto LABEL_675;
                WTF::StringImpl::destroy(v243, (WTF::StringImpl *)v9);
LABEL_698:
                v243 = v323;
                v323 = 0;
                if (!v243)
                  goto LABEL_584;
                v273 = *(_DWORD *)v243 - 2;
                if (*(_DWORD *)v243 != 2)
                {
LABEL_675:
                  *(_DWORD *)v243 = v273;
                  goto LABEL_584;
                }
                goto LABEL_700;
              }
              if (!v309 || !*((_DWORD *)v309 + 1))
                goto LABEL_546;
              goto LABEL_212;
            case 3:
              if (*(WTF::StringImpl **)(WebCore::HTMLNames::typeAttr + 24) == v92)
              {
                WTF::StringView::toString((uint64_t *)&v323, (WTF::StringView *)&v339);
                v180 = v323;
                v323 = 0;
                v171 = v318[0];
                v318[0] = v180;
                if (!v171)
                  goto LABEL_228;
              }
              else if (*(WTF::StringImpl **)(WebCore::HTMLNames::languageAttr + 24) == v92)
              {
                WTF::StringView::toString((uint64_t *)&v323, (WTF::StringView *)&v339);
                v230 = v323;
                v323 = 0;
                v171 = v318[1];
                v318[1] = v230;
                if (!v171)
                  goto LABEL_228;
              }
              else
              {
                if (*(WTF::StringImpl **)(WebCore::HTMLNames::nonceAttr + 24) != v92)
                {
                  if (*(WTF::StringImpl **)(WebCore::HTMLNames::referrerpolicyAttr + 24) == v92)
                  {
                    v232 = (unsigned __int16)WebCore::parseReferrerPolicy((unsigned __int16 *)v93, v94, 2);
                    if (v232 <= 0x100)
                      LOBYTE(v232) = 0;
                    LOBYTE(v320) = v232;
                    goto LABEL_228;
                  }
                  if (*(WTF::StringImpl **)(WebCore::HTMLNames::nomoduleAttr + 24) == v92)
                  {
                    BYTE3(v318[3]) = 1;
                    goto LABEL_228;
                  }
                  if (*(WTF::StringImpl **)(WebCore::HTMLNames::asyncAttr + 24) == v92)
                  {
                    BYTE4(v318[3]) = 1;
                    goto LABEL_212;
                  }
                  if (*(WTF::StringImpl **)(WebCore::HTMLNames::fetchpriorityAttr + 24) != v92
                    || (*(_QWORD *)(*((_QWORD *)v98 + 85) + 672) & 0x8000000000000000) == 0)
                  {
LABEL_227:
                    WebCore::TokenPreloadScanner::StartTagScanner::processImageAndScriptAttribute((WTF::StringImpl *)&v307, v92, (unsigned __int16 *)v93, v94);
                    goto LABEL_228;
                  }
LABEL_566:
                  WTF::StringView::toString((uint64_t *)&v323, (WTF::StringView *)&v339);
                  v233 = WebCore::parseEnumerationFromString<WebCore::RequestPriority>((uint64_t *)&v323);
                  if ((v233 & 0xFF00) != 0)
                    v234 = v233;
                  else
                    v234 = 2;
                  HIBYTE(v320) = v234;
LABEL_433:
                  v171 = v323;
                  v323 = 0;
                  if (!v171)
                    goto LABEL_228;
                  v181 = *(_DWORD *)v171 - 2;
                  if (*(_DWORD *)v171 == 2)
                  {
                    WTF::StringImpl::destroy(v171, (WTF::StringImpl *)v9);
                    goto LABEL_228;
                  }
LABEL_405:
                  *(_DWORD *)v171 = v181;
                  goto LABEL_228;
                }
                WTF::StringView::toString((uint64_t *)&v323, (WTF::StringView *)&v339);
                v231 = v323;
                v323 = 0;
                v171 = (WTF::StringImpl *)*((_QWORD *)&v316 + 1);
                *((_QWORD *)&v316 + 1) = v231;
                if (!v171)
                  goto LABEL_228;
              }
              v181 = *(_DWORD *)v171 - 2;
              if (*(_DWORD *)v171 != 2)
                goto LABEL_405;
              WTF::StringImpl::destroy(v171, (WTF::StringImpl *)v9);
              goto LABEL_433;
            case 4:
              if (*(WTF::StringImpl **)(WebCore::HTMLNames::contentAttr + 24) == v92)
              {
                WTF::StringView::toString((uint64_t *)&v323, (WTF::StringView *)&v339);
                v250 = v323;
                v323 = 0;
                v171 = (WTF::StringImpl *)v317;
                *(_QWORD *)&v317 = v250;
                if (v171)
                  goto LABEL_580;
              }
              else
              {
                if (*(WTF::StringImpl **)(WebCore::HTMLNames::nameAttr + 24) != v92)
                  goto LABEL_212;
                LOBYTE(v318[3]) = WTF::equalLettersIgnoringASCIICase((unsigned __int16 *)v93, v94, "viewport", 9uLL);
              }
              goto LABEL_228;
            case 5:
              if ((_DWORD)v96 && v97)
                goto LABEL_212;
              if (*(WTF::StringImpl **)(WebCore::HTMLNames::srcsetAttr + 24) == v92 && v310 == 0)
              {
LABEL_579:
                WTF::StringView::toString((uint64_t *)&v323, (WTF::StringView *)&v339);
                v242 = v323;
                v323 = 0;
                v171 = v310;
                v310 = v242;
                if (!v171)
                  goto LABEL_228;
LABEL_580:
                v181 = *(_DWORD *)v171 - 2;
                if (*(_DWORD *)v171 == 2)
                {
                  WTF::StringImpl::destroy(v171, (WTF::StringImpl *)v9);
                  v243 = v323;
                  v323 = 0;
                  if (v243)
                  {
                    if (*(_DWORD *)v243 == 2)
LABEL_700:
                      WTF::StringImpl::destroy(v243, (WTF::StringImpl *)v9);
                    else
                      *(_DWORD *)v243 -= 2;
LABEL_584:
                    v14 = (WTF::StringImpl *)&v309;
                  }
                  goto LABEL_228;
                }
                goto LABEL_405;
              }
              if (*(WTF::StringImpl **)(WebCore::HTMLNames::sizesAttr + 24) == v92 && v311 == 0)
              {
LABEL_585:
                WTF::StringView::toString((uint64_t *)&v323, (WTF::StringView *)&v339);
                v244 = v323;
                v323 = 0;
                v171 = v311;
                v311 = v244;
                if (v171)
                  goto LABEL_580;
                goto LABEL_228;
              }
              if (*(WTF::StringImpl **)(WebCore::HTMLNames::mediaAttr + 24) != v92 || (_QWORD)v316 != 0)
                goto LABEL_511;
              v285 = v3;
              v292 = v13;
              WTF::StringView::toString((uint64_t *)&v323, (WTF::StringView *)&v339);
              v205 = v323;
              v323 = 0;
              v206 = (WTF::StringImpl *)v316;
              *(_QWORD *)&v316 = v205;
              if (!v206)
                goto LABEL_494;
              v207 = *(_DWORD *)v206 - 2;
              if (*(_DWORD *)v206 != 2)
                goto LABEL_493;
              WTF::StringImpl::destroy(v206, v204);
              v206 = v323;
              v323 = 0;
              if (v206)
              {
                v207 = *(_DWORD *)v206 - 2;
                if (*(_DWORD *)v206 == 2)
                  WTF::StringImpl::destroy(v206, v281);
                else
LABEL_493:
                  *(_DWORD *)v206 = v207;
              }
LABEL_494:
              WebCore::MediaQueryParserContext::MediaQueryParserContext(&v323, v294);
              WebCore::MQ::MediaQueryParser::parse((unsigned int **)&v316, (const WTF::String *)&v323, &v304);
              v208 = *((_QWORD *)v294 + 159);
              v209 = v208;
              if (v208)
              {
                v210 = (WebCore::Node *)*((_QWORD *)v294 + 159);
                *(_DWORD *)(v208 + 24) += 2;
                if (*((_BYTE *)v294 + 3382))
                  v211 = &WebCore::printAtomData;
                else
                  v211 = &WebCore::screenAtomData;
                v284 = WebCore::Node::computedStyle(v210);
              }
              else
              {
                v284 = 0;
                if (*((_BYTE *)v294 + 3382))
                  v211 = &WebCore::printAtomData;
                else
                  v211 = &WebCore::screenAtomData;
              }
              v212 = (WTF::StringImpl *)*v211;
              if (*v211)
                *(_DWORD *)v212 += 2;
              v323 = v212;
              v213 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v294);
              if (v213)
              {
                do
                  v215 = __ldaxr(v213);
                while (__stlxr(v215 + 1, v213));
              }
              v324 = (unsigned __int16 *)v213;
              v325 = v284;
              v326 = 2;
              if (HIDWORD(v305))
              {
                v216 = v304;
                v217 = 56 * HIDWORD(v305) - 56;
                do
                {
                  v218 = WebCore::MQ::MediaQueryEvaluator::evaluate((WebCore::MQ::MediaQueryEvaluator *)&v323, v216);
                  if (v218)
                    break;
                  v216 = (WTF::StringImpl *)((char *)v216 + 56);
                  v219 = v217;
                  v217 -= 56;
                }
                while (v219);
              }
              else
              {
                v218 = 1;
              }
              LOBYTE(v312) = v218;
              WebCore::MQ::MediaQueryEvaluator::~MediaQueryEvaluator((WebCore::MQ::MediaQueryEvaluator *)&v323, v214);
              if (v209)
              {
                if (*(_DWORD *)(v209 + 24) == 2)
                {
                  if ((*(_WORD *)(v209 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v209, v220);
                }
                else
                {
                  *(_DWORD *)(v209 + 24) -= 2;
                }
              }
              WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v304, v220);
              v13 = v292;
              v3 = v285;
              v14 = (WTF::StringImpl *)&v309;
LABEL_511:
              v221 = *(WTF::StringImpl **)(WebCore::HTMLNames::typeAttr + 24) == v92 && v318[0] == 0;
              v98 = v294;
              if (v221)
              {
                WTF::StringView::toString((uint64_t *)&v323, (WTF::StringView *)&v339);
                v223 = v323;
                v323 = 0;
                v224 = v318[0];
                v318[0] = v223;
                if (v224)
                {
                  v225 = *(_DWORD *)v224 - 2;
                  if (*(_DWORD *)v224 != 2)
                    goto LABEL_518;
                  WTF::StringImpl::destroy(v224, v222);
                  v224 = v323;
                  v323 = 0;
                  if (v224)
                  {
                    v225 = *(_DWORD *)v224 - 2;
                    if (*(_DWORD *)v224 == 2)
                      WTF::StringImpl::destroy(v224, v222);
                    else
LABEL_518:
                      *(_DWORD *)v224 = v225;
                  }
                }
                isSupportedImageVideoOrSVGMIMEType = WebCore::MIMETypeRegistry::isSupportedImageVideoOrSVGMIMEType(v318, v222);
                if (HIBYTE(v312))
                  v227 = isSupportedImageVideoOrSVGMIMEType;
                else
                  v227 = 0;
                HIBYTE(v312) = v227;
                goto LABEL_584;
              }
              goto LABEL_212;
            default:
              goto LABEL_212;
          }
        }
      }
LABEL_442:
      v45 = *((_DWORD *)v4 + 44) + 1;
      *((_DWORD *)v4 + 44) = v45;
      v24 = 9;
LABEL_94:
      if (!v45)
      {
        switch(v24)
        {
          case 7:
            *((_BYTE *)v4 + 152) = 1;
            break;
          case 8:
            if (!*v290 || !*(_DWORD *)(*v290 + 4))
              WebCore::TokenPreloadScanner::updatePredictedBaseURL(v4, *((unsigned __int16 ***)v4 + 106), *((_DWORD *)v4 + 215), (*(_QWORD *)(*((_QWORD *)v3 + 85) + 696) >> 24) & 1);
            break;
          case 10:
            LOBYTE(v307) = 0;
            v191 = *((unsigned int *)v4 + 43);
            if ((_DWORD)v191 == *((_DWORD *)v4 + 42))
            {
              WTF::Vector<BOOL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,BOOL>((uint64_t)v286, (unint64_t)&v307);
            }
            else
            {
              *(_BYTE *)(*((_QWORD *)v4 + 20) + v191) = 0;
              *((_DWORD *)v4 + 43) = v191 + 1;
            }
            break;
          default:
            goto LABEL_98;
        }
      }
LABEL_140:
      *((_BYTE *)v4 + 842) = 0;
      if (*((_DWORD *)v4 + 80))
      {
        if (*((_DWORD *)v4 + 81))
          *((_DWORD *)v4 + 81) = 0;
        v62 = (WTF *)*((_QWORD *)v4 + 39);
        if (v13 != v62)
        {
          if (!v62
            || (*((_QWORD *)v4 + 39) = 0, *((_DWORD *)v4 + 80) = 0, WTF::fastFree(v62, v9), !*((_QWORD *)v4 + 39)))
          {
            *((_QWORD *)v4 + 39) = v13;
            *((_DWORD *)v4 + 80) = 256;
          }
        }
      }
      *((_WORD *)v4 + 420) = 0;
      result = WebCore::HTMLTokenizer::processToken((WebCore::HTMLTokenizer *)v6, v7);
      if ((result & 1) == 0)
        goto LABEL_242;
    }
    WTF::AtomStringImpl::lookUp();
    v35 = v307;
    if (v307 == *(WebCore::CachedResourceLoader **)(WebCore::HTMLNames::textareaTag + 24)
      || v307 == *(WebCore::CachedResourceLoader **)(WebCore::HTMLNames::titleTag + 24))
    {
      v89 = 2;
    }
    else if (v307 == *(WebCore::CachedResourceLoader **)(WebCore::HTMLNames::plaintextTag + 24))
    {
      v89 = 6;
    }
    else if (v307 == *(WebCore::CachedResourceLoader **)(WebCore::HTMLNames::scriptTag + 24))
    {
      v89 = 5;
    }
    else
    {
      if (v307 != *(WebCore::CachedResourceLoader **)(WebCore::HTMLNames::styleTag + 24)
        && v307 != *(WebCore::CachedResourceLoader **)(WebCore::HTMLNames::iframeTag + 24)
        && v307 != *(WebCore::CachedResourceLoader **)(WebCore::HTMLNames::xmpTag + 24)
        && v307 != *(WebCore::CachedResourceLoader **)(WebCore::HTMLNames::noembedTag + 24)
        && v307 != *(WebCore::CachedResourceLoader **)(WebCore::HTMLNames::noframesTag + 24)
        && (v307 != *(WebCore::CachedResourceLoader **)(WebCore::HTMLNames::noscriptTag + 24) || !*((_BYTE *)v4 + 3320)))
      {
        goto LABEL_37;
      }
      v89 = 4;
    }
    *(_DWORD *)v6 = v89;
LABEL_37:
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)v35 -= 2;
    }
    v16 = *((unsigned __int8 *)v4 + 842);
    goto LABEL_5;
  }
LABEL_242:
  v4 = v300;
  v104 = (WTF::String *)HIDWORD(v301);
  v300 = 0;
  v301 = 0;
  if (!(_DWORD)v104)
    goto LABEL_336;
  v287 = v104;
  v290 = &v342;
  v288 = (WTF::StringImpl **)&v350;
  v289 = (WTF::StringImpl **)&v345;
  v298 = &v324;
  v299 = (WTF::StringImpl **)((char *)v4 + 8 * (_QWORD)v104);
  v296 = (WebCore::Node *)&v305;
  v292 = (WebCore::CachedResourceLoader *)v341;
  v294 = (WebCore::Document *)&v327;
  v3 = v330;
  v90 = v4;
  do
  {
    v6 = *(unsigned __int16 **)v90;
    *(_QWORD *)v90 = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
    *(_DWORD *)(v7 + 24) += 2;
    v105 = *(_QWORD *)(v7 + 528);
    if (v105)
    {
      v105 = *(_QWORD *)(v105 + 8);
      if (v105)
      {
        v105 = *(_QWORD *)(v105 + 24);
        if (v105)
        {
          v105 = *(_QWORD *)(v105 + 8);
          if (v105)
            LOBYTE(v105) = *(_BYTE *)(v105 + 450) != 0;
        }
      }
    }
    LOBYTE(v339) = v105;
    BYTE1(v339) = (*(_DWORD *)(*(_QWORD *)(v7 + 680) + 672) & 0x8000000) != 0;
    BYTE2(v339) = 0;
    WebCore::CSSTokenizer::tryCreate((unsigned int **)v6 + 10, (uint64_t *)&v323);
    if (v323)
    {
      v106 = (WTF *)(*((_QWORD *)v323 + 6) + 24 * *((unsigned int *)v323 + 15));
      v307 = (WebCore::CachedResourceLoader *)*((_QWORD *)v323 + 6);
      v308 = v106;
      WebCore::MQ::MediaQueryParser::consumeMediaQueryList(&v307, (WebCore::CSSParserTokenRange *)&v339, (uint64_t)&v302);
      v108 = v323;
      v323 = 0;
      if (v108)
      {
        WebCore::CSSTokenizer::~CSSTokenizer(v108, v107);
        WTF::fastFree(v109, v110);
      }
    }
    else
    {
      v302 = 0;
      v303 = 0;
    }
    v111 = *(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL;
    if (v111)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        v111 = *(_QWORD *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
        if (v111)
          v111 = *(_QWORD *)(v111 + 8);
      }
      v112 = (WTF::StringImpl *)(v111 + 80);
    }
    else
    {
      v112 = 0;
    }
    v113 = (WebCore::CachedResourceLoader *)WebCore::screenAtomData;
    if (WebCore::screenAtomData)
      *(_DWORD *)WebCore::screenAtomData += 2;
    v307 = v113;
    v114 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v7);
    v116 = (WTF *)v114;
    if (v114)
    {
      do
        v117 = __ldaxr(v114);
      while (__stlxr(v117 + 1, v114));
    }
    v308 = (WTF *)v114;
    v309 = v112;
    LOBYTE(v310) = 2;
    if (HIDWORD(v303))
    {
      v118 = v302;
      v119 = 56 * HIDWORD(v303) - 56;
      do
      {
        v120 = WebCore::MQ::MediaQueryEvaluator::evaluate((WebCore::MQ::MediaQueryEvaluator *)&v307, v118);
        if (v120)
          break;
        v118 = (WebCore::MQ::MediaQuery *)((char *)v118 + 56);
        v121 = v119;
        v119 -= 56;
      }
      while (v121);
      v116 = v308;
    }
    else
    {
      v120 = 1;
    }
    v308 = 0;
    if (v116)
    {
      do
      {
        v122 = __ldaxr((unsigned int *)v116);
        v123 = v122 - 1;
      }
      while (__stlxr(v123, (unsigned int *)v116));
      if (!v123)
      {
        atomic_store(1u, (unsigned int *)v116);
        v245 = *((unsigned int *)v116 + 7);
        if ((_DWORD)v245)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v116 + 2), (WTF::StringImpl *)(*((_QWORD *)v116 + 2) + 32 * v245));
        v246 = (WTF *)*((_QWORD *)v116 + 2);
        if (v246)
        {
          *((_QWORD *)v116 + 2) = 0;
          *((_DWORD *)v116 + 6) = 0;
          WTF::fastFree(v246, v115);
        }
        WTF::fastFree(v116, v115);
      }
    }
    v124 = v307;
    v307 = 0;
    if (v124)
    {
      if (*(_DWORD *)v124 == 2)
        v124 = (WTF::StringImpl *)WTF::StringImpl::destroy(v124, (WTF::StringImpl *)v115);
      else
        *(_DWORD *)v124 -= 2;
    }
    if (v120)
    {
      v13 = *(WebCore::CachedResourceLoader **)(v7 + 720);
      if (!v13)
      {
        v124 = (WTF::StringImpl *)WebCore::Document::ensureCachedResourceLoader((WebCore::Document *)v7, v115);
        v13 = v124;
      }
      v92 = (WTF::StringImpl *)*((unsigned __int8 *)v6 + 72);
      if ((_DWORD)v92 != 3)
      {
        if ((_DWORD)v92 != 2)
        {
          v179 = WebCore::CachedResourceLoader::defaultCachedResourceOptions(v124);
          WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)&v339, (const WebCore::ResourceLoaderOptions *)v179);
          goto LABEL_296;
        }
        v235 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v7 + 192));
        v236 = v235;
        if (v235)
        {
          do
            v237 = __ldaxr(v235);
          while (__stlxr(v237 + 1, v235));
          v238 = WebCore::ContentSecurityPolicy::allowStyleWithNonce((WebCore::ContentSecurityPolicy *)v235, (const WTF::String *)(v6 + 48), 0);
          if (!atomic_load(v236))
          {
            __break(0xC471u);
            JUMPOUT(0x19431E914);
          }
          v128 = v238;
          do
            v240 = __ldaxr(v236);
          while (__stlxr(v240 - 1, v236));
        }
        else
        {
          v128 = WebCore::ContentSecurityPolicy::allowStyleWithNonce(0, (const WTF::String *)(v6 + 48), 0);
        }
LABEL_281:
        {
          WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options, 0, 0, 0, 1, 1, 2, 1, 2, 1, 1, 0, 0);
        }
        LODWORD(v339) = WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options;
        *(_DWORD *)((char *)&v339 + 3) = *(int *)((char *)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options
                                                + 3);
        v131 = qword_1ECE90818;
        if (qword_1ECE90818)
          *(_DWORD *)qword_1ECE90818 += 2;
        v132 = *(_OWORD *)algn_1ECE90830;
        *(_OWORD *)v292 = xmmword_1ECE90820;
        *((_OWORD *)v292 + 1) = v132;
        v340 = v131;
        v341[4] = qword_1ECE90840;
        v133 = dword_1ECE90854;
        *v290 = 0;
        v290[1] = 0;
        v344 = v133;
        if ((_DWORD)v133)
        {
          if (v133 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x19431E99CLL);
          }
          v276 = WTF::fastMalloc((WTF *)(16 * v133));
          v343 = v133;
          v342 = v276;
          if (dword_1ECE90854)
          {
            v277 = qword_1ECE90848;
            v278 = qword_1ECE90848 + 16 * dword_1ECE90854;
            do
            {
              v279 = *(_DWORD **)v277;
              if (*(_QWORD *)v277)
                *v279 += 2;
              *(_QWORD *)v276 = v279;
              *(_BYTE *)(v276 + 8) = *(_BYTE *)(v277 + 8);
              v277 += 16;
              v276 += 16;
            }
            while (v277 != v278);
          }
        }
        *(_DWORD *)v289 = dword_1ECE90858;
        *((_BYTE *)v289 + 4) = byte_1ECE9085C;
        LOBYTE(v346) = 0;
        v349 = 0;
        if (byte_1ECE90878)
        {
          v346 = word_1ECE90860;
          v134 = qword_1ECE90868;
          if (qword_1ECE90868)
            *(_DWORD *)qword_1ECE90868 += 2;
          v347 = v134;
          v135 = qword_1ECE90870;
          if (qword_1ECE90870)
            *(_DWORD *)qword_1ECE90870 += 2;
          v348 = v135;
          v349 = 1;
        }
        *(_OWORD *)v288 = xmmword_1ECE90880;
        v136 = qword_1ECE90890;
        if (qword_1ECE90890)
          *(_DWORD *)qword_1ECE90890 += 2;
        v351 = v136;
        if (v128)
          *(_DWORD *)((char *)&v350 + 2) &= ~0x100u;
LABEL_296:
        v137 = (WTF::StringImpl *)*((_QWORD *)v6 + 11);
        if (v137)
        {
          *(_DWORD *)v137 += 2;
          v306 = v137;
          v15 = (WTF::StringImpl **)((char *)v6 + 105);
        }
        else
        {
          v306 = 0;
          v15 = (WTF::StringImpl **)((char *)v6 + 105);
          if (*((_BYTE *)v6 + 105) == 1)
            WTF::StringImpl::createWithoutCopyingNonEmpty();
        }
        v138 = *((unsigned __int8 *)v6 + 72);
        if (v138 == 3 || v138 == 1)
          BYTE5(v339) = *((_BYTE *)v6 + 106);
        *(_DWORD *)((char *)&v350 + 2) = *(_DWORD *)((_BYTE *)&v350 + 2) & 0xF9FFFFFF | ((*((_BYTE *)v6 + 107) & 3) << 25);
        v139 = (uint64_t)(v6 + 12);
        v140 = *((_QWORD *)v6 + 3);
        if (!v140 || !*(_DWORD *)(v140 + 4))
          v139 = v7 + 848;
        WebCore::Document::completeURL((WebCore::Document *)v7, (_QWORD *)v6 + 2, v139, 0, (WTF::URL *)&v304);
        v141 = v304;
        if (v304)
          *(_DWORD *)v304 += 2;
        v142 = *((_OWORD *)v296 + 1);
        *(_OWORD *)v298 = *(_OWORD *)v296;
        *((_OWORD *)v298 + 1) = v142;
        v323 = v141;
        v327 = 0;
        WTF::URL::invalidate(v294);
        v328 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v329 = v307;
        v3[24] = 0;
        *((_OWORD *)v3 + 1) = 0u;
        *((_OWORD *)v3 + 2) = 0u;
        *(_OWORD *)v3 = 0u;
        v330[25] = 1;
        v143 = v331 & 0x80 | 4;
        v331 = v143;
        v332 = 0;
        v144 = (_DWORD *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
        {
          *v144 += 2;
          v143 = v331;
        }
        v333 = v144;
        v334 = 0;
        v335 = 0;
        v336 = 0;
        v337 = v337 & 0xE0 | 5;
        v331 = v143 | 2;
        v338 = 0;
        WebCore::createPotentialAccessControlRequest((WebCore::ResourceRequest *)&v323, (WTF::StringImpl *)&v339, v7, (uint64_t *)&v306, 0, (uint64_t)&v307);
        WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v323, v145);
        v147 = v304;
        v304 = 0;
        if (v147)
        {
          if (*(_DWORD *)v147 == 2)
            WTF::StringImpl::destroy(v147, v146);
          else
            *(_DWORD *)v147 -= 2;
        }
        v148 = *((_QWORD *)v6 + 1);
        v9 = (void *)(v148 - 1);
        if (v148 > 1)
        {
          WTF::AtomStringImpl::add();
          v14 = v323;
          if (!v323)
          {
            v150 = 1;
            goto LABEL_312;
          }
LABEL_733:
          v149 = *(_DWORD *)v14;
        }
        else
        {
          v14 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
          v149 = *(_DWORD *)*MEMORY[0x1E0CBF3B8] + 2;
          *(_DWORD *)*MEMORY[0x1E0CBF3B8] = v149;
        }
        v150 = 0;
        *(_DWORD *)v14 = v149 + 2;
LABEL_312:
        v151 = v322;
        v322 = v14;
        if (v151)
        {
          if (*(_DWORD *)v151 == 2)
            WTF::StringImpl::destroy(v151, (WTF::StringImpl *)v9);
          else
            *(_DWORD *)v151 -= 2;
        }
        if ((v150 & 1) == 0)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v9);
          else
            *(_DWORD *)v14 -= 2;
        }
        if (*((_BYTE *)v6 + 104) && *((_BYTE *)v6 + 72) == 3 && !*(_BYTE *)v15)
          v321 = 258;
        v152 = v306;
        v306 = 0;
        if (v152)
        {
          if (*(_DWORD *)v152 == 2)
            WTF::StringImpl::destroy(v152, (WTF::StringImpl *)v9);
          else
            *(_DWORD *)v152 -= 2;
        }
        WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)&v339, (WTF::StringImpl *)v9);
        WebCore::CachedResourceLoader::preload((WebCore::ResourceRequest *)&v307, v13, v92, (uint64_t)&v323);
        if ((_DWORD)v328 != -1)
          (*(&off_1E33DF838 + v328))((int)&v339, (WebCore::CachedResourceHandleBase *)&v323);
        LODWORD(v328) = -1;
        WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)&v307, v153);
        goto LABEL_325;
      }
      v125 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v7 + 192));
      v126 = v125;
      if (v125)
      {
        do
          v127 = __ldaxr(v125);
        while (__stlxr(v127 + 1, v125));
      }
      if (v125[37])
      {
        WTF::String::trim();
        v254 = v323;
        if (v323)
        {
          if (*((_DWORD *)v323 + 1))
          {
            v307 = (WebCore::CachedResourceLoader *)WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForScriptNonce;
            v308 = 0;
            v128 = WebCore::ContentSecurityPolicy::allPoliciesWithDispositionAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::String const&)const,WTF::String&>((uint64_t)v126, 0, (uint64_t)&v307, (uint64_t)&v323);
            v254 = v323;
            v323 = 0;
            if (!v254)
              goto LABEL_279;
          }
          else
          {
            v128 = 0;
            v323 = 0;
          }
          if (*(_DWORD *)v254 == 2)
            WTF::StringImpl::destroy(v254, v253);
          else
            *(_DWORD *)v254 -= 2;
          goto LABEL_279;
        }
        v128 = 0;
      }
      else
      {
        v128 = 1;
      }
LABEL_279:
      if (!atomic_load(v126))
      {
        __break(0xC471u);
        JUMPOUT(0x19431E2CCLL);
      }
      do
        v130 = __ldaxr(v126);
      while (__stlxr(v130 - 1, v126));
      goto LABEL_281;
    }
LABEL_325:
    WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v302, v115);
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v9);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
    if (v6)
    {
      WebCore::PreloadRequest::~PreloadRequest((WebCore::PreloadRequest *)v6, (WTF::StringImpl *)v9);
      WTF::fastFree(v154, v155);
    }
    v90 = (WTF *)((char *)v90 + 8);
  }
  while (v90 != (WTF *)v299);
  v156 = 8 * (_QWORD)v287;
  v157 = (uint64_t *)v4;
  do
  {
    result = *v157;
    *v157 = 0;
    if (result)
    {
      WebCore::PreloadRequest::~PreloadRequest((WebCore::PreloadRequest *)result, (WTF::StringImpl *)v9);
      result = WTF::fastFree(v158, v159);
    }
    ++v157;
    v156 -= 8;
  }
  while (v156);
LABEL_336:
  if (v4)
    result = WTF::fastFree(v4, v9);
  v160 = v300;
  if (HIDWORD(v301))
  {
    v165 = 8 * HIDWORD(v301);
    do
    {
      result = *(_QWORD *)v160;
      *(_QWORD *)v160 = 0;
      if (result)
      {
        WebCore::PreloadRequest::~PreloadRequest((WebCore::PreloadRequest *)result, (WTF::StringImpl *)v9);
        result = WTF::fastFree(v166, v167);
      }
      v160 = (WTF *)((char *)v160 + 8);
      v165 -= 8;
    }
    while (v165);
    v160 = v300;
  }
  if (v160)
  {
    v300 = 0;
    LODWORD(v301) = 0;
    return WTF::fastFree(v160, v9);
  }
  return result;
}

uint64_t WTF::StringView::toString(WTF::StringView *this)
{
  if (*((_BYTE *)this + 12))
    return WTF::String::String();
  else
    return WTF::String::String();
}

WTF::StringImpl *WebCore::TokenPreloadScanner::StartTagScanner::setURLToLoadAllowingReplacement(WTF::StringImpl *result, unsigned __int16 *a2, unint64_t a3)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  unsigned __int16 *i;
  unsigned int v18;
  uint64_t v19;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  WTF::StringImpl *v25;

  v3 = result;
  v4 = a3;
  if ((a3 & 0xFF00000000) != 0)
  {
    if (!(_DWORD)a3)
      goto LABEL_3;
    v6 = 0;
    while (1)
    {
      v7 = *((unsigned __int8 *)a2 + v6);
      v8 = v7 > 0x20;
      v9 = (1 << v7) & 0x100003600;
      if (v8 || v9 == 0)
        break;
      if (a3 == ++v6)
        return result;
    }
    if ((_DWORD)a3 != 1)
    {
      v11 = (a3 - 1);
      while (v11 < a3)
      {
        v12 = *((unsigned __int8 *)a2 + v11);
        v8 = v12 > 0x20;
        v13 = (1 << v12) & 0x100003600;
        if (!v8 && v13 != 0)
        {
          if ((_DWORD)--v11)
            continue;
        }
        if (!(_DWORD)v6 && (_DWORD)v11 == (_DWORD)a3 - 1)
          goto LABEL_3;
        goto LABEL_27;
      }
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    if ((_DWORD)v6)
    {
      LODWORD(v11) = 0;
LABEL_27:
      v15 = (v11 - v6 + 1);
      if ((unint64_t)a3 - v6 < v15)
        goto LABEL_48;
      a3 = v15 | 0x100000000;
    }
  }
  else if ((_DWORD)a3)
  {
    v16 = 0;
    for (i = a2; ; ++i)
    {
      v18 = *i;
      v8 = v18 > 0x20;
      v19 = (1 << v18) & 0x100003600;
      if (v8 || v19 == 0)
        break;
      if (a3 == ++v16)
        return result;
    }
    if ((_DWORD)a3 != 1)
    {
      v21 = (a3 - 1);
      while (v21 < a3)
      {
        v22 = a2[v21];
        v8 = v22 > 0x20;
        v23 = (1 << v22) & 0x100003600;
        if (!v8 && v23 != 0)
        {
          if ((_DWORD)--v21)
            continue;
        }
        if (!(_DWORD)v16 && (_DWORD)v21 == (_DWORD)a3 - 1)
          goto LABEL_3;
        goto LABEL_47;
      }
      goto LABEL_48;
    }
    if ((_DWORD)v16)
    {
      LODWORD(v21) = 0;
LABEL_47:
      a3 = (v21 - v16 + 1);
      if (v4 - v16 < a3)
        goto LABEL_48;
    }
  }
LABEL_3:
  if (!(_DWORD)a3)
    return result;
  if ((a3 & 0xFF00000000) != 0)
  {
    WTF::String::String();
    goto LABEL_6;
  }
LABEL_49:
  WTF::String::String();
LABEL_6:
  result = (WTF::StringImpl *)*((_QWORD *)v3 + 2);
  *((_QWORD *)v3 + 2) = v25;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v5);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::DocumentLoader::updateAdditionalSettingsIfNeeded(WebCore::DocumentLoader *this)
{
  WTF::URL *v2;
  uint64_t v3;
  uint64_t result;
  unsigned __int16 *v5;
  uint64_t v6;

  v2 = (WebCore::DocumentLoader *)((char *)this + 872);
  if ((*((_BYTE *)this + 1056) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::DocumentLoader *)((char *)this + 872));
    *((_BYTE *)this + 1056) |= 1u;
  }
  v5 = (unsigned __int16 *)WTF::URL::host(v2);
  v6 = v3;
  result = WTF::equalLettersIgnoringASCIICase(v5, v3, "icloud.com", 0xBuLL);
  if ((result & 1) != 0
    || (result = WTF::StringView::endsWithIgnoringASCIICase(), (result & 1) != 0)
    || (result = WTF::equalLettersIgnoringASCIICase(v5, v6, "apple.com", 0xAuLL), (result & 1) != 0)
    || (result = WTF::StringView::endsWithIgnoringASCIICase(), (_DWORD)result))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 136) + 720) |= 0x80000u;
  }
  return result;
}

uint64_t WebCore::ResourceResponseBase::cacheControlContainsNoCache(WebCore::ResourceResponseBase *this)
{
  const WebCore::HTTPHeaderMap *v3;
  int64x2_t v4[2];

  if ((*((_WORD *)this + 116) & 1) == 0)
  {
    WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
    WebCore::parseCacheControlDirectives((unsigned int *)this + 20, v3, v4);
    *(int64x2_t *)((char *)this + 200) = v4[0];
    *(int64x2_t *)((char *)this + 209) = *(int64x2_t *)((char *)v4 + 9);
    *((_WORD *)this + 116) |= 1u;
  }
  return *((_BYTE *)this + 224) & 1;
}

unsigned int *WebCore::parseCacheControlDirectives@<X0>(unsigned int *this@<X0>, const WebCore::HTTPHeaderMap *a2@<X1>, int64x2_t *a3@<X8>)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  _DWORD **v7;
  WTF::StringImpl *v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  WTF::StringImpl **v12;
  int v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  WTF *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;

  *a3 = vdupq_n_s64(0x7FF8000000000000uLL);
  a3[1].i64[0] = 0x7FF8000000000000;
  v4 = a3[1].i8[8] & 0xF0;
  a3[1].i8[8] &= 0xF0u;
  v5 = this[3];
  if (!(_DWORD)v5)
  {
LABEL_5:
    v8 = 0;
LABEL_6:
    v9 = 1;
    goto LABEL_7;
  }
  v6 = 0;
  v7 = (_DWORD **)(*(_QWORD *)this + 8);
  while (*((_WORD *)v7 - 4) != 15)
  {
    ++v6;
    v7 += 2;
    if (v5 == v6)
      goto LABEL_5;
  }
  if (v6 >= v5)
  {
    __break(0xC471u);
    JUMPOUT(0x19431F1B0);
  }
  v8 = (WTF::StringImpl *)*v7;
  if (!*v7)
    goto LABEL_6;
  v13 = *((_DWORD *)v8 + 1);
  *(_DWORD *)v8 += 2;
  if (!v13)
  {
    v9 = 0;
    goto LABEL_7;
  }
  v23 = (uint64_t)this;
  WTF::String::removeCharacters<WebCore::parseCacheControlDirectives(WebCore::HTTPHeaderMap const&)::$_0>(&v27, (uint64_t)v8);
  v15 = v27;
  v22 = (WTF::StringImpl *)v27;
  if (v27)
  {
    v16 = *(const char **)(v27 + 8);
    v15 = *(_DWORD *)(v27 + 4);
    v17 = ((unint64_t)*(unsigned int *)(v27 + 16) >> 2) & 1;
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  WebCore::parseCacheHeader((uint64_t)&v24, v16, v15 | (v17 << 32));
  if (v26)
  {
    v18 = 0;
    v19 = 0;
    v20 = 32 * v26;
    do
    {
      if (v19 >= v26)
      {
        __break(0xC471u);
        JUMPOUT(0x19431F210);
      }
      if (!WTF::equalLettersIgnoringASCIICase(*(unsigned __int16 **)((char *)v24 + v18), *(_QWORD *)((char *)v24 + v18 + 8), "no-cache", 9uLL))goto LABEL_35;
      if (v19 >= v26)
      {
        __break(0xC471u);
        JUMPOUT(0x19431F220);
      }
      if (!*(_DWORD *)((char *)v24 + v18 + 24))
      {
        v4 |= 1u;
      }
      else
      {
LABEL_35:
        if (v19 >= v26)
        {
          __break(0xC471u);
          JUMPOUT(0x19431F218);
        }
        if (WTF::equalLettersIgnoringASCIICase(*(unsigned __int16 **)((char *)v24 + v18), *(_QWORD *)((char *)v24 + v18 + 8), "no-store", 9uLL))
        {
          v4 |= 2u;
        }
        else
        {
          if (v19 >= v26)
          {
            __break(0xC471u);
            JUMPOUT(0x19431F228);
          }
          if (WTF::equalLettersIgnoringASCIICase(*(unsigned __int16 **)((char *)v24 + v18), *(_QWORD *)((char *)v24 + v18 + 8), "must-revalidate", 0x10uLL))
          {
            v4 |= 4u;
          }
          else
          {
            if (v19 >= v26)
            {
              __break(0xC471u);
              JUMPOUT(0x19431F230);
            }
            if (WTF::equalLettersIgnoringASCIICase(*(unsigned __int16 **)((char *)v24 + v18), *(_QWORD *)((char *)v24 + v18 + 8), "max-age", 8uLL))goto LABEL_39;
            if (v19 >= v26)
            {
              __break(0xC471u);
              JUMPOUT(0x19431F238);
            }
            if (WTF::equalLettersIgnoringASCIICase(*(unsigned __int16 **)((char *)v24 + v18), *(_QWORD *)((char *)v24 + v18 + 8), "max-stale", 0xAuLL))goto LABEL_39;
            if (v19 >= v26)
            {
              __break(0xC471u);
              JUMPOUT(0x19431F240);
            }
            if (!WTF::equalLettersIgnoringASCIICase(*(unsigned __int16 **)((char *)v24 + v18), *(_QWORD *)((char *)v24 + v18 + 8), "immutable", 0xAuLL))
            {
              if (v19 >= v26)
              {
                __break(0xC471u);
                JUMPOUT(0x19431F248);
              }
              WTF::equalLettersIgnoringASCIICase(*(unsigned __int16 **)((char *)v24 + v18), *(_QWORD *)((char *)v24 + v18 + 8), "stale-while-revalidate", 0x17uLL);
              goto LABEL_39;
            }
            v4 |= 8u;
          }
        }
      }
      a3[1].i8[8] = v4;
LABEL_39:
      ++v19;
      v18 += 32;
    }
    while (v20 != v18);
  }
  v21 = v24;
  if (v24)
  {
    v24 = 0;
    v25 = 0;
    WTF::fastFree(v21, a2);
  }
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, a2);
    else
      *(_DWORD *)v22 -= 2;
  }
  v9 = 0;
  this = (unsigned int *)v23;
LABEL_7:
  if ((v4 & 1) == 0)
  {
    v10 = this[3];
    if (!(_DWORD)v10)
      goto LABEL_12;
    v11 = 0;
    v12 = (WTF::StringImpl **)(*(_QWORD *)this + 8);
    while (*((_WORD *)v12 - 4) != 56)
    {
      ++v11;
      v12 += 2;
      if (v10 == v11)
        goto LABEL_12;
    }
    if (v11 >= v10)
    {
      __break(0xC471u);
      JUMPOUT(0x19431F1B8);
    }
    v14 = *v12;
    if (*v12)
    {
      *(_DWORD *)v14 += 2;
      this = (unsigned int *)WTF::StringImpl::findIgnoringASCIICase();
      a3[1].i8[8] = v4 & 0xFE | (this != (unsigned int *)-1);
      if (*(_DWORD *)v14 == 2)
        this = (unsigned int *)WTF::StringImpl::destroy(v14, a2);
      else
        *(_DWORD *)v14 -= 2;
    }
    else
    {
LABEL_12:
      a3[1].i8[8] = v4 & 0xFE;
    }
  }
  if ((v9 & 1) == 0)
  {
    if (*(_DWORD *)v8 == 2)
      return (unsigned int *)WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  return this;
}

uint64_t WTF::equalLettersIgnoringASCIICase(unsigned __int16 *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  int v14;

  v4 = a4 - 1;
  if (!a4)
    v4 = 0;
  if (v4 != a2)
    return 0;
  if ((a2 & 0xFF00000000) == 0)
  {
    if (v4)
    {
      if ((*a1 | 0x20) == (unsigned __int16)(char)*a3)
      {
        v6 = 0;
        if (a4 <= 1)
          v11 = 1;
        else
          v11 = a4;
        v12 = v11 - 2;
        while (v12 != v6)
        {
          v13 = (char)a3[v6 + 1];
          v14 = a1[++v6] | 0x20;
          if (v14 != v13)
            return v6 >= v4;
        }
        goto LABEL_24;
      }
      return 0;
    }
    return 1;
  }
  if (!v4)
    return 1;
  if ((*(unsigned __int8 *)a1 | 0x20) != *a3)
    return 0;
  v6 = 0;
  if (a4 <= 1)
    v7 = 1;
  else
    v7 = a4;
  v8 = v7 - 2;
  while (v8 != v6)
  {
    v9 = a3[v6 + 1];
    v10 = *((unsigned __int8 *)a1 + ++v6) | 0x20;
    if (v10 != v9)
      return v6 >= v4;
  }
LABEL_24:
  v6 = v4;
  return v6 >= v4;
}

uint64_t WTF::StringView::toDouble(WTF::StringView *this, BOOL *a2)
{
  if (*((_BYTE *)this + 12))
    return WTF::charactersToDouble();
  else
    return WTF::charactersToDouble();
}

uint64_t WebCore::parseCacheHeader(uint64_t result, const char *a2, unint64_t a3)
{
  unint64_t v3;
  const char *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  const char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BOOL4 v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  const char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  __int128 v53;
  __int128 v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  __int128 v67;
  __int128 v68;
  const char *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int16x8_t *v74;
  unint64_t v75;
  int16x8_t v76;
  int8x16_t v77;
  int16x8_t *v78;
  __int8 *v79;
  int16x8_t *v80;
  unint64_t v81;
  int16x8_t v82;
  int8x16_t v83;
  int16x8_t *v84;
  __int8 *v85;
  char *v86;
  const char *v87;
  const char *v88;
  int16x8_t v89;
  int8x16_t v90;
  const char *v91;
  int16x8_t v92;
  const char *v93;
  int16x8_t *v94;
  int16x8_t v95;
  int8x16_t v96;
  int16x8_t *v97;
  const char *v98;
  int16x8_t v99;
  char *v100;
  int16x8_t *v101;
  unint64_t v102;
  int16x8_t v103;
  int8x16_t v104;
  int16x8_t *v105;
  __int8 *v106;
  int16x8_t *v107;
  unint64_t v108;
  int16x8_t v109;
  int8x16_t v110;
  int16x8_t *v111;
  __int8 *v112;
  int16x8_t v113;
  int16x8_t v114;
  uint64_t v115;
  uint64_t v116;
  int16x8_t *v117;
  unint64_t v118;
  int16x8_t v119;
  int8x16_t v120;
  int16x8_t *v121;
  __int8 *v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  _OWORD *v132;
  __int128 v133;
  __int128 v134;
  unint64_t v135;
  const char *v136;
  unint64_t v137;
  uint64_t v138;
  int16x8_t *v139;
  unint64_t v140;
  __int128 v141;
  uint64_t v142;
  unint64_t v143;
  const char *v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;

  v3 = a3;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  if (!(_DWORD)a3)
    return result;
  v4 = a2;
  v5 = result;
  v6 = 0;
  v7 = 0;
  v8 = a3 & 0xFF00000000;
  v9 = a3;
  v140 = (unint64_t)&a2[2 * a3];
  v139 = (int16x8_t *)(v140 - 16);
  v10 = (uint64_t *)MEMORY[0x1E0CBF738];
  v142 = a3 & 0xFF00000000;
  v143 = a3;
  while (1)
  {
    v11 = v7;
    if (!v8)
    {
      if (v9 > v7)
      {
        v74 = (int16x8_t *)&v4[2 * v7];
        v75 = v140 - (_QWORD)v74;
        if ((uint64_t)(v140 - (_QWORD)v74) <= -2)
          goto LABEL_307;
        if (v75 <= 0x3E)
        {
          v10 = (uint64_t *)MEMORY[0x1E0CBF738];
          v8 = v3 & 0xFF00000000;
          v9 = v143;
          while (v74->i16[0] != 44)
          {
            v74 = (int16x8_t *)((char *)v74 + 2);
            v16 = -1;
            v75 -= 2;
            if (!v75)
              goto LABEL_14;
          }
        }
        else
        {
          if ((unint64_t)&v74->u64[1] + 6 >= v140)
          {
            v78 = (int16x8_t *)&v4[2 * v11];
LABEL_220:
            if ((unint64_t)v78 >= v140
              || (v74 = (int16x8_t *)(v140 - 16),
                  v113.i64[0] = 0x2C002C002C002CLL,
                  v113.i64[1] = 0x2C002C002C002CLL,
                  v77 = (int8x16_t)vceqq_s16(*v139, v113),
                  v113.i16[0] = vmaxvq_u16((uint16x8_t)v77),
                  !v113.i32[0]))
            {
              v16 = -1;
LABEL_227:
              v10 = (uint64_t *)MEMORY[0x1E0CBF738];
              v8 = v3 & 0xFF00000000;
              v9 = v143;
              goto LABEL_14;
            }
          }
          else
          {
            while (1)
            {
              v76.i64[0] = 0x2C002C002C002CLL;
              v76.i64[1] = 0x2C002C002C002CLL;
              v77 = (int8x16_t)vceqq_s16(*v74, v76);
              v76.i16[0] = vmaxvq_u16((uint16x8_t)v77);
              if (v76.i32[0])
                break;
              v78 = v74 + 1;
              v79 = &v74[1].i8[14];
              ++v74;
              if ((unint64_t)v79 >= v140)
                goto LABEL_220;
            }
          }
          v74 = (int16x8_t *)((char *)v74
                            + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v77)));
        }
        if (v74 == (int16x8_t *)v140)
          v16 = -1;
        else
          v16 = ((char *)v74 - v4) >> 1;
        goto LABEL_227;
      }
      v16 = -1;
LABEL_164:
      if (v143 <= v11)
        goto LABEL_234;
      v80 = (int16x8_t *)&v4[2 * v11];
      v81 = v140 - (_QWORD)v80;
      if ((uint64_t)(v140 - (_QWORD)v80) <= -2)
        goto LABEL_307;
      if (v81 <= 0x3E)
      {
        while (v80->i16[0] != 61)
        {
          v80 = (int16x8_t *)((char *)v80 + 2);
          v20 = -1;
          v81 -= 2;
          if (!v81)
            goto LABEL_235;
        }
      }
      else
      {
        if ((unint64_t)&v80->u64[1] + 6 >= v140)
        {
          v84 = (int16x8_t *)&v4[2 * v11];
LABEL_229:
          if ((unint64_t)v84 >= v140)
            goto LABEL_234;
          v80 = (int16x8_t *)(v140 - 16);
          v114.i64[0] = 0x3D003D003D003DLL;
          v114.i64[1] = 0x3D003D003D003DLL;
          v83 = (int8x16_t)vceqq_s16(*v139, v114);
          v114.i16[0] = vmaxvq_u16((uint16x8_t)v83);
          if (!v114.i32[0])
            goto LABEL_234;
        }
        else
        {
          while (1)
          {
            v82.i64[0] = 0x3D003D003D003DLL;
            v82.i64[1] = 0x3D003D003D003DLL;
            v83 = (int8x16_t)vceqq_s16(*v80, v82);
            v82.i16[0] = vmaxvq_u16((uint16x8_t)v83);
            if (v82.i32[0])
              break;
            v84 = v80 + 1;
            v85 = &v80[1].i8[14];
            ++v80;
            if ((unint64_t)v85 >= v140)
              goto LABEL_229;
          }
        }
        v80 = (int16x8_t *)((char *)v80
                          + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v83)));
      }
      if (v80 != (int16x8_t *)v140)
      {
        v20 = ((char *)v80 - v4) >> 1;
LABEL_235:
        v10 = (uint64_t *)MEMORY[0x1E0CBF738];
        v8 = v3 & 0xFF00000000;
        goto LABEL_26;
      }
LABEL_234:
      v20 = -1;
      goto LABEL_235;
    }
    v12 = &v4[v7];
    v13 = v9 - v11;
    if (v9 - v11 >= 0x10)
      v14 = 16;
    else
      v14 = v9 - v11;
    if (v14)
    {
      v15 = v14;
      result = (uint64_t)&v4[v11];
      while (*(_BYTE *)result != 44)
      {
        ++result;
        if (!--v15)
          goto LABEL_11;
      }
LABEL_13:
      v16 = result - (_QWORD)v4;
      goto LABEL_14;
    }
LABEL_11:
    if (v13 >= 0x11)
    {
      result = (uint64_t)memchr((void *)&v12[v14], 44, v13 - v14);
      if (result)
        goto LABEL_13;
    }
    v16 = -1;
LABEL_14:
    if (!v8)
      goto LABEL_164;
    v17 = v9 - v11;
    if (v9 - v11 >= 0x10)
      v18 = 16;
    else
      v18 = v9 - v11;
    if (v18)
    {
      v19 = v18;
      result = (uint64_t)&v4[v11];
      while (*(_BYTE *)result != 61)
      {
        ++result;
        if (!--v19)
          goto LABEL_22;
      }
LABEL_25:
      v20 = result - (_QWORD)v4;
      goto LABEL_26;
    }
LABEL_22:
    if (v17 >= 0x11)
    {
      result = (uint64_t)memchr((void *)&v4[v11 + v18], 61, v17 - v18);
      if (result)
        goto LABEL_25;
    }
    v20 = -1;
LABEL_26:
    if (v20 == -1 && v16 == -1)
    {
      if ((_DWORD)v11)
      {
        v3 = (v3 - v11);
        if (v8)
        {
          if (v143 - v11 < v3)
            goto LABEL_307;
          v4 += v11;
          v3 |= 0x100000000uLL;
        }
        else
        {
          if (v143 - v11 < v3)
            goto LABEL_307;
          v4 += 2 * v11;
        }
      }
      result = (uint64_t)WebCore::trimToNextSeparator(v4, v3);
      *(_QWORD *)&v146 = result;
      *((_QWORD *)&v146 + 1) = v126;
      *(_QWORD *)&v147 = 0;
      v127 = *v10;
      if (*v10)
      {
        v128 = *(unsigned __int8 *)(v127 + 16);
        v129 = *(_QWORD *)(v127 + 8);
        LODWORD(v127) = *(_DWORD *)(v127 + 4);
        *(_QWORD *)&v147 = v129;
        v130 = (v128 >> 2) & 1;
      }
      else
      {
        LOBYTE(v130) = 1;
      }
      DWORD2(v147) = v127;
      BYTE12(v147) = v130;
      v131 = v6;
      if (v6 != *(_DWORD *)(v5 + 8))
        goto LABEL_304;
      goto LABEL_286;
    }
    v22 = v16 < v20 || v20 == -1;
    if (v16 != -1 && v22)
    {
      v23 = v16 - v11;
      v9 = v143;
      if ((int)v3 - (int)v11 <= (v16 - v11))
      {
        result = (uint64_t)v4;
        v24 = v3;
        if ((_DWORD)v11)
        {
          v23 = v3 - v11;
          goto LABEL_37;
        }
      }
      else
      {
LABEL_37:
        v24 = v23;
        if (v8)
        {
          if (v143 - v11 < v23)
            goto LABEL_307;
          result = (uint64_t)&v4[v11];
          v24 = v23 | 0x100000000;
        }
        else
        {
          if (v143 - v11 < v23)
            goto LABEL_307;
          result = (uint64_t)&v4[2 * v11];
        }
      }
      result = (uint64_t)WebCore::trimToNextSeparator((const char *)result, v24);
      *(_QWORD *)&v146 = result;
      *((_QWORD *)&v146 + 1) = v27;
      *(_QWORD *)&v147 = 0;
      DWORD2(v147) = 0;
      LOBYTE(v28) = 1;
      BYTE12(v147) = 1;
      v29 = *v10;
      if (*v10)
      {
        v30 = *(unsigned __int8 *)(v29 + 16);
        v31 = *(_QWORD *)(v29 + 8);
        LODWORD(v29) = *(_DWORD *)(v29 + 4);
        *(_QWORD *)&v147 = v31;
        v28 = (v30 >> 2) & 1;
      }
      DWORD2(v147) = v29;
      BYTE12(v147) = v28;
      if (v6 == *(_DWORD *)(v5 + 8))
      {
        result = (uint64_t)WTF::Vector<std::pair<WTF::StringView,WTF::StringView>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v5, v6 + 1, (unint64_t)&v146);
        v32 = (_OWORD *)(*(_QWORD *)v5 + 32 * *(unsigned int *)(v5 + 12));
        v33 = *(_OWORD *)result;
        v34 = *(_OWORD *)(result + 16);
      }
      else
      {
        v32 = (_OWORD *)(*(_QWORD *)v5 + 32 * v6);
        v33 = v146;
        v34 = v147;
      }
      *v32 = v33;
      v32[1] = v34;
      v6 = *(_DWORD *)(v5 + 12) + 1;
      *(_DWORD *)(v5 + 12) = v6;
      goto LABEL_142;
    }
    v25 = v20 - v11;
    if ((int)v3 - (int)v11 <= (v20 - v11))
    {
      result = (uint64_t)v4;
      v26 = v3;
      if (!(_DWORD)v11)
        goto LABEL_56;
      v25 = v3 - v11;
    }
    v26 = v25;
    if (v8)
    {
      if (v143 - v11 < v25)
        goto LABEL_307;
      result = (uint64_t)&v4[v11];
      v26 = v25 | 0x100000000;
    }
    else
    {
      if (v143 - v11 < v25)
        goto LABEL_307;
      result = (uint64_t)&v4[2 * v11];
    }
LABEL_56:
    result = (uint64_t)WebCore::trimToNextSeparator((const char *)result, v26);
    v36 = (v20 + 1);
    v37 = (v3 - v36);
    if (v3 <= v36)
    {
      v39 = 0x100000000;
      v38 = "";
    }
    else
    {
      v38 = v4;
      v39 = v3;
      if ((_DWORD)v20 != -1)
      {
        v73 = v143 - v36;
        if (v142)
        {
          if (v73 < v37)
            goto LABEL_307;
          v38 = &v4[v36];
          v39 = v37 | 0x100000000;
        }
        else
        {
          if (v73 < v37)
            goto LABEL_307;
          v38 = &v4[2 * v36];
          v39 = (v3 - v36);
        }
      }
    }
    *(_QWORD *)&v141 = result;
    *((_QWORD *)&v141 + 1) = v35;
    v144 = v38;
    v145 = v39;
    result = WTF::StringView::startsWith();
    if ((_DWORD)result)
      break;
    if (BYTE4(v145))
    {
      v9 = v143;
      if ((_DWORD)v145)
      {
        if (v145 >= 0x10uLL)
          v46 = 16;
        else
          v46 = v145;
        v47 = v46;
        v48 = v144;
        do
        {
          if (*v48 == 44)
            goto LABEL_87;
          ++v48;
          --v47;
        }
        while (v47);
        if (v145 >= 0x11)
        {
          v48 = memchr((void *)&v144[v46], 44, v145 - v46);
          if (v48)
          {
LABEL_87:
            v49 = v48 - v144;
            goto LABEL_88;
          }
        }
      }
LABEL_287:
      v135 = v145;
      v136 = v144;
      goto LABEL_303;
    }
    if (!(_DWORD)v145)
      goto LABEL_287;
    v93 = &v144[2 * v145];
    if (v145 > 0x1F)
    {
      v94 = (int16x8_t *)v144;
      do
      {
        v95.i64[0] = 0x2C002C002C002CLL;
        v95.i64[1] = 0x2C002C002C002CLL;
        v96 = (int8x16_t)vceqq_s16(*v94, v95);
        v95.i16[0] = vmaxvq_u16((uint16x8_t)v96);
        if (v95.i32[0])
          goto LABEL_196;
        v97 = v94 + 1;
        v98 = &v94[1].i8[14];
        ++v94;
      }
      while (v98 < v93);
      if (v97 < (int16x8_t *)v93)
      {
        v99.i64[0] = 0x2C002C002C002CLL;
        v99.i64[1] = 0x2C002C002C002CLL;
        v96 = (int8x16_t)vceqq_s16(*((int16x8_t *)v93 - 1), v99);
        v99.i16[0] = vmaxvq_u16((uint16x8_t)v96);
        if (v99.i32[0])
        {
          v94 = (int16x8_t *)(v93 - 16);
LABEL_196:
          v100 = &v94->i8[2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v96))];
          goto LABEL_197;
        }
      }
      goto LABEL_287;
    }
    v116 = 2 * v145;
    v100 = (char *)v144;
    while (*(_WORD *)v100 != 44)
    {
      v100 += 2;
      v116 -= 2;
      if (!v116)
        goto LABEL_287;
    }
LABEL_197:
    v10 = (uint64_t *)MEMORY[0x1E0CBF738];
    v9 = v143;
    if (v100 == v93)
      goto LABEL_287;
    v49 = (v100 - v144) >> 1;
LABEL_88:
    if (v49 == -1)
      goto LABEL_287;
    if (v145 <= v49)
    {
      v50 = v145;
    }
    else if (BYTE4(v145))
    {
      v50 = v49 | 0x100000000;
    }
    else
    {
      v50 = v49;
    }
    result = (uint64_t)WebCore::trimToNextSeparator(v144, v50);
    v146 = v141;
    *(_QWORD *)&v147 = result;
    *((_QWORD *)&v147 + 1) = v64;
    v65 = *(unsigned int *)(v5 + 12);
    if ((_DWORD)v65 == *(_DWORD *)(v5 + 8))
    {
      result = (uint64_t)WTF::Vector<std::pair<WTF::StringView,WTF::StringView>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v5, v65 + 1, (unint64_t)&v146);
      v66 = (_OWORD *)(*(_QWORD *)v5 + 32 * *(unsigned int *)(v5 + 12));
      v67 = *(_OWORD *)result;
      v68 = *(_OWORD *)(result + 16);
    }
    else
    {
      v66 = (_OWORD *)(*(_QWORD *)v5 + 32 * v65);
      v67 = v146;
      v68 = v147;
    }
    *v66 = v67;
    v66[1] = v68;
    v6 = *(_DWORD *)(v5 + 12) + 1;
    *(_DWORD *)(v5 + 12) = v6;
    if (!v142)
    {
      if (v9 <= v36)
        goto LABEL_280;
      v107 = (int16x8_t *)&v4[2 * v36];
      v108 = v140 - (_QWORD)v107;
      if ((uint64_t)(v140 - (_QWORD)v107) <= -2)
        goto LABEL_307;
      if (v108 <= 0x3E)
      {
        while (v107->i16[0] != 44)
        {
          v107 = (int16x8_t *)((char *)v107 + 2);
          LODWORD(v16) = -1;
          v108 -= 2;
          if (!v108)
            goto LABEL_281;
        }
LABEL_277:
        if (v107 == (int16x8_t *)v140)
          LODWORD(v16) = -1;
        else
          LODWORD(v16) = ((char *)v107 - v4) >> 1;
      }
      else
      {
        if ((unint64_t)&v107->u64[1] + 6 < v140)
        {
          while (1)
          {
            v109.i64[0] = 0x2C002C002C002CLL;
            v109.i64[1] = 0x2C002C002C002CLL;
            v110 = (int8x16_t)vceqq_s16(*v107, v109);
            v109.i16[0] = vmaxvq_u16((uint16x8_t)v110);
            if (v109.i32[0])
              goto LABEL_276;
            v111 = v107 + 1;
            v112 = &v107[1].i8[14];
            ++v107;
            if ((unint64_t)v112 >= v140)
              goto LABEL_274;
          }
        }
        v111 = (int16x8_t *)&v4[2 * v36];
LABEL_274:
        if ((unint64_t)v111 < v140)
        {
          v107 = (int16x8_t *)(v140 - 16);
          v125.i64[0] = 0x2C002C002C002CLL;
          v125.i64[1] = 0x2C002C002C002CLL;
          v110 = (int8x16_t)vceqq_s16(*v139, v125);
          v125.i16[0] = vmaxvq_u16((uint16x8_t)v110);
          if (v125.i32[0])
          {
LABEL_276:
            v107 = (int16x8_t *)((char *)v107
                               + 2
                               * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v110)));
            goto LABEL_277;
          }
        }
LABEL_280:
        LODWORD(v16) = -1;
      }
LABEL_281:
      v10 = (uint64_t *)MEMORY[0x1E0CBF738];
      v8 = 0;
      v9 = v143;
      goto LABEL_142;
    }
    if (v3 <= v36)
    {
      LODWORD(v16) = -1;
      v8 = v3 & 0xFF00000000;
      goto LABEL_142;
    }
    v69 = &v4[v36];
    v70 = v9 - v36;
    if (v70 >= 0x10)
      v71 = 16;
    else
      v71 = v9 - v36;
    if (v71)
    {
      v72 = v71;
      result = (uint64_t)&v4[v36];
      while (*(_BYTE *)result != 44)
      {
        ++result;
        if (!--v72)
          goto LABEL_137;
      }
      v8 = v3 & 0xFF00000000;
LABEL_141:
      LODWORD(v16) = result - (_DWORD)v4;
      goto LABEL_142;
    }
LABEL_137:
    v8 = v3 & 0xFF00000000;
    if (v70 >= 0x11)
    {
      result = (uint64_t)memchr((void *)&v69[v71], 44, v70 - v71);
      if (result)
        goto LABEL_141;
    }
    LODWORD(v16) = -1;
LABEL_142:
    v7 = v16 + 1;
    if ((int)v16 + 1 >= v3)
      return result;
  }
  if (!BYTE4(v145))
  {
    if (v145 < 2)
      goto LABEL_299;
    v86 = (char *)(v144 + 2);
    v87 = &v144[2 * v145];
    if (2 * (unint64_t)v145 - 65 >= 0xFFFFFFFFFFFFFFC1)
    {
      v115 = 2 * v145 - 2;
      while (*(_WORD *)v86 != 34)
      {
        v86 += 2;
        v115 -= 2;
        if (!v115)
          goto LABEL_300;
      }
    }
    else
    {
      if (v145 < 9)
      {
LABEL_185:
        if (v86 >= v87
          || (v91 = v87 - 16,
              v92.i64[0] = 0x22002200220022,
              v92.i64[1] = 0x22002200220022,
              v90 = (int8x16_t)vceqq_s16(*((int16x8_t *)v87 - 1), v92),
              v92.i16[0] = vmaxvq_u16((uint16x8_t)v90),
              !v92.i32[0]))
        {
LABEL_300:
          v137 = v145 - 1;
          v135 = (v145 - 1);
          goto LABEL_301;
        }
      }
      else
      {
        v88 = v144 + 16;
        while (1)
        {
          v89.i64[0] = 0x22002200220022;
          v89.i64[1] = 0x22002200220022;
          v90 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v88 - 14), v89);
          v89.i16[0] = vmaxvq_u16((uint16x8_t)v90);
          if (v89.i32[0])
            break;
          v88 += 16;
          if (v88 >= v87)
          {
            v86 = (char *)(v88 - 14);
            goto LABEL_185;
          }
        }
        v91 = v88 - 14;
      }
      v86 = (char *)&v91[2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v90))];
    }
    if (v86 == v87)
      goto LABEL_300;
    v43 = (v86 - v144) >> 1;
LABEL_70:
    if (v43 == -1)
    {
      v137 = v145 - 1;
      v135 = (v145 - 1);
      if (BYTE4(v145))
      {
        if (v137 < v135)
          goto LABEL_307;
LABEL_292:
        v136 = v144 + 1;
        v135 |= 0x100000000uLL;
LABEL_303:
        result = (uint64_t)WebCore::trimToNextSeparator(v136, v135);
        v146 = v141;
        *(_QWORD *)&v147 = result;
        *((_QWORD *)&v147 + 1) = v138;
        v131 = *(unsigned int *)(v5 + 12);
        if ((_DWORD)v131 != *(_DWORD *)(v5 + 8))
        {
LABEL_304:
          v132 = (_OWORD *)(*(_QWORD *)v5 + 32 * v131);
          v133 = v146;
          v134 = v147;
          goto LABEL_305;
        }
LABEL_286:
        result = (uint64_t)WTF::Vector<std::pair<WTF::StringView,WTF::StringView>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v5, v131 + 1, (unint64_t)&v146);
        v132 = (_OWORD *)(*(_QWORD *)v5 + 32 * *(unsigned int *)(v5 + 12));
        v133 = *(_OWORD *)result;
        v134 = *(_OWORD *)(result + 16);
LABEL_305:
        *v132 = v133;
        v132[1] = v134;
        ++*(_DWORD *)(v5 + 12);
        return result;
      }
LABEL_301:
      if (v137 < v135)
        goto LABEL_307;
      v136 = v144 + 2;
      goto LABEL_303;
    }
    LODWORD(v44) = v43 - 1;
    if ((int)v145 - 1 >= (v43 - 1))
      v44 = v44;
    else
      v44 = (v145 - 1);
    if (BYTE4(v145))
    {
      if ((unint64_t)v145 - 1 < v44)
        goto LABEL_307;
      v45 = v144 + 1;
      v44 |= 0x100000000uLL;
    }
    else
    {
      if ((unint64_t)v145 - 1 < v44)
        goto LABEL_307;
      v45 = v144 + 2;
    }
    v146 = v141;
    *(_QWORD *)&v147 = v45;
    *((_QWORD *)&v147 + 1) = v44;
    v51 = *(unsigned int *)(v5 + 12);
    if ((_DWORD)v51 == *(_DWORD *)(v5 + 8))
    {
      result = (uint64_t)WTF::Vector<std::pair<WTF::StringView,WTF::StringView>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v5, v51 + 1, (unint64_t)&v146);
      v52 = (_OWORD *)(*(_QWORD *)v5 + 32 * *(unsigned int *)(v5 + 12));
      v53 = *(_OWORD *)result;
      v54 = *(_OWORD *)(result + 16);
    }
    else
    {
      v52 = (_OWORD *)(*(_QWORD *)v5 + 32 * v51);
      v53 = v146;
      v54 = v147;
    }
    *v52 = v53;
    v52[1] = v54;
    v6 = *(_DWORD *)(v5 + 12) + 1;
    *(_DWORD *)(v5 + 12) = v6;
    if (v142)
    {
      if (v3 <= v36)
      {
        v59 = v20 + v43 + ~(_DWORD)v36 + 2;
        v8 = v3 & 0xFF00000000;
        goto LABEL_111;
      }
      v55 = v143 - v36;
      if (v143 - v36 >= 0x10)
        v56 = 16;
      else
        v56 = v143 - v36;
      if (v56)
      {
        v57 = v56;
        result = (uint64_t)&v4[v36];
        while (*(_BYTE *)result != 34)
        {
          ++result;
          if (!--v57)
            goto LABEL_107;
        }
        goto LABEL_109;
      }
LABEL_107:
      if (v55 >= 0x11)
      {
        result = (uint64_t)memchr((void *)&v4[v36 + v56], 34, v55 - v56);
        if (result)
        {
LABEL_109:
          LODWORD(v58) = result - (_DWORD)v4;
          goto LABEL_110;
        }
      }
      goto LABEL_272;
    }
    if (v143 <= v36)
    {
      v59 = v20 + v43 + ~(_DWORD)v36 + 2;
      goto LABEL_245;
    }
    v101 = (int16x8_t *)&v4[2 * v36];
    v102 = v140 - (_QWORD)v101;
    if ((uint64_t)(v140 - (_QWORD)v101) <= -2)
      goto LABEL_307;
    if (v102 <= 0x3E)
    {
      while (v101->i16[0] != 34)
      {
        v101 = (int16x8_t *)((char *)v101 + 2);
        LODWORD(v58) = -1;
        v102 -= 2;
        if (!v102)
          goto LABEL_110;
      }
    }
    else
    {
      if ((unint64_t)&v101->u64[1] + 6 >= v140)
      {
        v105 = (int16x8_t *)&v4[2 * v36];
LABEL_266:
        if ((unint64_t)v105 >= v140
          || (v101 = (int16x8_t *)(v140 - 16),
              v124.i64[0] = 0x22002200220022,
              v124.i64[1] = 0x22002200220022,
              v104 = (int8x16_t)vceqq_s16(*v139, v124),
              v124.i16[0] = vmaxvq_u16((uint16x8_t)v104),
              !v124.i32[0]))
        {
LABEL_272:
          LODWORD(v58) = -1;
          goto LABEL_110;
        }
      }
      else
      {
        while (1)
        {
          v103.i64[0] = 0x22002200220022;
          v103.i64[1] = 0x22002200220022;
          v104 = (int8x16_t)vceqq_s16(*v101, v103);
          v103.i16[0] = vmaxvq_u16((uint16x8_t)v104);
          if (v103.i32[0])
            break;
          v105 = v101 + 1;
          v106 = &v101[1].i8[14];
          ++v101;
          if ((unint64_t)v106 >= v140)
            goto LABEL_266;
        }
      }
      v101 = (int16x8_t *)((char *)v101
                         + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v104)));
    }
    v58 = ((char *)v101 - v4) >> 1;
    if (v101 == (int16x8_t *)v140)
      LODWORD(v58) = -1;
LABEL_110:
    v59 = v43 - 1 + v58 + 2;
    v8 = v3 & 0xFF00000000;
    if (v142)
    {
LABEL_111:
      v10 = (uint64_t *)MEMORY[0x1E0CBF738];
      v9 = v143;
      if (v59 >= v3)
        return result;
      v60 = &v4[v59];
      v61 = v143 - v59;
      if (v61 >= 0x10)
        v62 = 16;
      else
        v62 = v61;
      if (v62)
      {
        v63 = v62;
        result = (uint64_t)v60;
        while (*(_BYTE *)result != 44)
        {
          ++result;
          if (!--v63)
            goto LABEL_119;
        }
      }
      else
      {
LABEL_119:
        if (v61 < 0x11)
          return result;
        result = (uint64_t)memchr((void *)&v60[v62], 44, v61 - v62);
        if (!result)
          return result;
      }
      v16 = result - (_QWORD)v4;
LABEL_122:
      if (v16 == -1)
        return result;
      goto LABEL_142;
    }
LABEL_245:
    if (v143 <= v59)
      return result;
    v117 = (int16x8_t *)&v4[2 * v59];
    v118 = v140 - (_QWORD)v117;
    if ((uint64_t)(v140 - (_QWORD)v117) <= -2)
      goto LABEL_307;
    if (v118 <= 0x3E)
    {
      while (v117->i16[0] != 44)
      {
        v117 = (int16x8_t *)((char *)v117 + 2);
        v118 -= 2;
        if (!v118)
          return result;
      }
    }
    else
    {
      if ((unint64_t)&v117->u64[1] + 6 >= v140)
      {
        v121 = v117;
LABEL_256:
        if ((unint64_t)v121 >= v140)
          return result;
        v117 = (int16x8_t *)(v140 - 16);
        v123.i64[0] = 0x2C002C002C002CLL;
        v123.i64[1] = 0x2C002C002C002CLL;
        v120 = (int8x16_t)vceqq_s16(*v139, v123);
        v123.i16[0] = vmaxvq_u16((uint16x8_t)v120);
        if (!v123.i32[0])
          return result;
      }
      else
      {
        while (1)
        {
          v119.i64[0] = 0x2C002C002C002CLL;
          v119.i64[1] = 0x2C002C002C002CLL;
          v120 = (int8x16_t)vceqq_s16(*v117, v119);
          v119.i16[0] = vmaxvq_u16((uint16x8_t)v120);
          if (v119.i32[0])
            break;
          v121 = v117 + 1;
          v122 = &v117[1].i8[14];
          ++v117;
          if ((unint64_t)v122 >= v140)
            goto LABEL_256;
        }
      }
      v117 = (int16x8_t *)((char *)v117
                         + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v120)));
    }
    v10 = (uint64_t *)MEMORY[0x1E0CBF738];
    v8 = v3 & 0xFF00000000;
    v9 = v143;
    if (v117 == (int16x8_t *)v140)
      return result;
    v16 = ((char *)v117 - v4) >> 1;
    goto LABEL_122;
  }
  if (v145 <= 1)
  {
LABEL_299:
    v135 = 0x100000000;
    v136 = "";
    goto LABEL_303;
  }
  v40 = v145 - 1;
  if (v40 >= 0x10)
    v41 = 16;
  else
    v41 = v145 - 1;
  v42 = v41;
  result = (uint64_t)(v144 + 1);
  do
  {
    if (*(_BYTE *)result == 34)
      goto LABEL_69;
    ++result;
    --v42;
  }
  while (v42);
  if (v145 >= 0x12)
  {
    result = (uint64_t)memchr((void *)&v144[v41 + 1], 34, v40 - v41);
    if (result)
    {
LABEL_69:
      v43 = result - (_QWORD)v144;
      goto LABEL_70;
    }
  }
  v135 = (v145 - 1);
  if (v40 >= v135)
    goto LABEL_292;
LABEL_307:
  __break(1u);
  return result;
}

const char *WebCore::trimToNextSeparator(const char *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  unsigned int v12;
  uint64_t v13;

  if ((a2 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a2)
    {
      v2 = 0;
      do
      {
        v3 = result[v2];
        if ((v3 - 9) <= 0x37 && ((1 << (v3 - 9)) & 0xFE004982800001) != 0)
          break;
        v5 = v3 - 91;
        v6 = v5 > 0x22;
        v7 = (1 << v5) & 0x500000007;
        if (!v6 && v7 != 0)
          break;
        ++v2;
      }
      while (a2 != v2);
      return result;
    }
    return "";
  }
  if (!(_DWORD)a2)
    return "";
  v9 = 0;
  do
  {
    v10 = *(unsigned __int16 *)&result[2 * v9];
    if ((v10 - 9) <= 0x37 && ((1 << (v10 - 9)) & 0xFE004982800001) != 0)
      break;
    v12 = v10 - 91;
    v6 = v12 > 0x22;
    v13 = (1 << v12) & 0x500000007;
    if (!v6 && v13 != 0)
      break;
    ++v9;
  }
  while (a2 != v9);
  return result;
}

char *WTF::Vector<std::pair<WTF::StringView,WTF::StringView>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[32 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v13 = *a1;
        return &v13[32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5)];
      }
      if (!(v10 >> 27))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(32 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
        memcpy(v11, v5, 32 * v6);
        v13 = *a1;
        if (v5)
        {
          if (v13 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v12);
          v13 = *a1;
        }
        return &v13[32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5)];
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x1943204B8);
    }
  }
  v14 = *((unsigned int *)a1 + 2);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v17 = a2;
  else
    v17 = v16;
  if (v17 > v14)
  {
    if (v17 >> 27)
      goto LABEL_30;
    v18 = *((unsigned int *)a1 + 3);
    v19 = (char *)WTF::fastMalloc((WTF *)(32 * v17));
    *((_DWORD *)a1 + 2) = v17;
    *a1 = v19;
    memcpy(v19, v5, 32 * v18);
    if (v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v20);
    }
  }
  return (char *)v3;
}

uint64_t WebCore::ContentSecurityPolicy::allowStyleWithNonce(WebCore::ContentSecurityPolicy *this, const WTF::String *a2, char a3)
{
  uint64_t result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  _QWORD v8[2];
  WTF::StringImpl *v9;

  if ((a3 & 1) != 0)
    return 1;
  if (!*((_DWORD *)this + 37))
    return 1;
  WTF::String::trim();
  v6 = v9;
  if (!v9)
    return 0;
  if (*((_DWORD *)v9 + 1))
  {
    v8[0] = WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForStyleNonce;
    v8[1] = 0;
    result = WebCore::ContentSecurityPolicy::allPoliciesWithDispositionAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::String const&)const,WTF::String&>((uint64_t)this, 0, (uint64_t)v8, (uint64_t)&v9);
    v6 = v9;
    v9 = 0;
    if (!v6)
      return result;
  }
  else
  {
    result = 0;
    v9 = 0;
  }
  if (*(_DWORD *)v6 == 2)
  {
    v7 = result;
    WTF::StringImpl::destroy(v6, v5);
    return v7;
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  return result;
}

uint64_t WebCore::LinkLoader::isSupportedType(int a1, WTF::StringImpl **this, const WTF::StringImpl *a3)
{
  uint64_t result;
  int v4;

  if (!*this || !*((_DWORD *)*this + 1))
    return 1;
  v4 = a1 - 1;
  result = 1;
  switch(v4)
  {
    case 0:
      result = WebCore::MIMETypeRegistry::isSupportedImageVideoOrSVGMIMEType(this, (const WTF::String *)this);
      break;
    case 1:
      result = WebCore::MIMETypeRegistry::isSupportedStyleSheetMIMEType((WebCore::MIMETypeRegistry *)this, (const WTF::String *)this);
      break;
    case 2:
      result = WebCore::MIMETypeRegistry::isSupportedJavaScriptMIMEType((WebCore::MIMETypeRegistry *)this, (const WTF::String *)this);
      break;
    case 3:
      result = WebCore::MIMETypeRegistry::isSupportedFontMIMEType((WebCore::MIMETypeRegistry *)this, (const WTF::String *)this);
      break;
    case 5:
      result = WebCore::MIMETypeRegistry::isSupportedMediaMIMEType(this, (const WTF::String *)this, a3);
      break;
    case 7:
    case 14:
      return result;
    case 13:
      result = WebCore::MIMETypeRegistry::isSupportedTextTrackMIMEType((WebCore::MIMETypeRegistry *)this, (const WTF::String *)this);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

WTF::StringImpl *WebCore::TokenPreloadScanner::StartTagScanner::processImageAndScriptAttribute(WTF::StringImpl *result, WTF::StringImpl *a2, unsigned __int16 *a3, unint64_t a4)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v31[2];
  WTF::StringImpl *v32;
  _QWORD v33[2];

  v4 = result;
  v33[0] = a3;
  v33[1] = a4;
  if (*(WTF::StringImpl **)(WebCore::HTMLNames::srcAttr + 24) != a2)
  {
    if (*(WTF::StringImpl **)(WebCore::HTMLNames::crossoriginAttr + 24) != a2)
    {
      if (*(WTF::StringImpl **)(WebCore::HTMLNames::charsetAttr + 24) != a2)
        return result;
      WTF::StringView::toString(v31, (WTF::StringView *)v33);
      v7 = v31[0];
      v31[0] = 0;
      result = (WTF::StringImpl *)*((_QWORD *)v4 + 6);
      *((_QWORD *)v4 + 6) = v7;
      if (!result)
        return result;
      v8 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result != 2)
      {
LABEL_16:
        *(_DWORD *)result = v8;
        return result;
      }
      WTF::StringImpl::destroy(result, v6);
      result = (WTF::StringImpl *)v31[0];
      v31[0] = 0;
      if (!result)
        return result;
LABEL_58:
      v8 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      goto LABEL_16;
    }
    v10 = a4;
    if ((a4 & 0xFF00000000) != 0)
    {
      if (!(_DWORD)a4)
        goto LABEL_14;
      v12 = 0;
      while (1)
      {
        v13 = *((unsigned __int8 *)a3 + v12);
        v14 = v13 > 0x20;
        v15 = (1 << v13) & 0x100003600;
        if (v14 || v15 == 0)
          break;
        if (a4 == ++v12)
        {
          a4 = 0x100000000;
          a3 = (unsigned __int16 *)"";
          goto LABEL_14;
        }
      }
      if ((_DWORD)a4 != 1)
      {
        v17 = (a4 - 1);
        while (v17 < a4)
        {
          v18 = *((unsigned __int8 *)a3 + v17);
          v14 = v18 > 0x20;
          v19 = (1 << v18) & 0x100003600;
          if (!v14 && v19 != 0)
          {
            if ((_DWORD)--v17)
              continue;
          }
          if (!(_DWORD)v12 && (_DWORD)v17 == (_DWORD)a4 - 1)
            goto LABEL_14;
          goto LABEL_35;
        }
LABEL_56:
        __break(1u);
LABEL_57:
        WTF::StringImpl::destroy(result, a2);
        result = v32;
        v32 = 0;
        if (!result)
          return result;
        goto LABEL_58;
      }
      if ((_DWORD)v12)
      {
        LODWORD(v17) = 0;
LABEL_35:
        v21 = (v17 - v12 + 1);
        if ((unint64_t)a4 - v12 < v21)
          goto LABEL_56;
        a3 = (unsigned __int16 *)((char *)a3 + v12);
        a4 = v21 | 0x100000000;
      }
    }
    else if ((_DWORD)a4)
    {
      v22 = 0;
      v23 = a3;
      while (1)
      {
        v24 = *v23;
        v14 = v24 > 0x20;
        v25 = (1 << v24) & 0x100003600;
        if (v14 || v25 == 0)
          break;
        ++v22;
        ++v23;
        if (a4 == v22)
        {
          a4 = 0x100000000;
          a3 = (unsigned __int16 *)"";
          goto LABEL_14;
        }
      }
      if ((_DWORD)a4 != 1)
      {
        v27 = (a4 - 1);
        while (v27 < a4)
        {
          v28 = a3[v27];
          v14 = v28 > 0x20;
          v29 = (1 << v28) & 0x100003600;
          if (!v14 && v29 != 0)
          {
            if ((_DWORD)--v27)
              continue;
          }
          if (!(_DWORD)v22 && (_DWORD)v27 == (_DWORD)a4 - 1)
            goto LABEL_14;
          goto LABEL_55;
        }
        goto LABEL_56;
      }
      if ((_DWORD)v22)
      {
        LODWORD(v27) = 0;
LABEL_55:
        a4 = (v27 - v22 + 1);
        a3 = v23;
        if (v10 - v22 < a4)
          goto LABEL_56;
      }
    }
LABEL_14:
    v31[0] = (uint64_t)a3;
    v31[1] = a4;
    WTF::StringView::toString((uint64_t *)&v32, (WTF::StringView *)v31);
    v11 = v32;
    v32 = 0;
    result = (WTF::StringImpl *)*((_QWORD *)v4 + 7);
    *((_QWORD *)v4 + 7) = v11;
    if (!result)
      return result;
    v8 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result != 2)
      goto LABEL_16;
    goto LABEL_57;
  }
  v5 = *((_QWORD *)result + 2);
  if (!v5 || !*(_DWORD *)(v5 + 4))
    return WebCore::TokenPreloadScanner::StartTagScanner::setURLToLoadAllowingReplacement(result, a3, a4);
  return result;
}

void WebCore::PreloadRequest::~PreloadRequest(WebCore::PreloadRequest *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
}

unint64_t WebCore::jsDocument_plugins(int a1, WebCore::Node **a2)
{
  JSC::VM *v3;
  unint64_t v4;
  _DWORD *v5;
  _DWORD *v7;

  v3 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::Document::ensureCachedCollection<(WebCore::CollectionType)1>(a2[3], (WTF::StringImpl *)a2, &v7);
  v4 = WebCore::wrap<WebCore::HTMLCollection>(a1, v3, (uint64_t)v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[4];
  }
  return v4;
}

unint64_t WebCore::wrap<WebCore::HTMLCollection>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  unint64_t v25;
  WebCore::JSHTMLCollection *v26;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  WebCore::JSHTMLCollection *v29;
  _QWORD *v30;
  WebCore::JSHTMLCollection *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *Allocator;
  unint64_t v41;
  unint64_t v42;
  _DWORD *v43;
  _QWORD *v44;
  uint64_t v45;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v9 = *(_QWORD *)(v5 + 32);
    if (!v9)
      goto LABEL_12;
    v10 = *(_DWORD *)(v9 - 8);
    v11 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(_QWORD *)(v9 + 16 * v14);
    if (v15 != a3)
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(_QWORD *)(v9 + 16 * v14);
        ++v16;
        if (v15 == a3)
          goto LABEL_11;
      }
      goto LABEL_12;
    }
LABEL_11:
    v6 = *(_QWORD *)(v9 + 16 * v14 + 8);
    if (!v6)
      goto LABEL_12;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (!v6)
      goto LABEL_12;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_12:
  ++*(_DWORD *)(a3 + 16);
  v43 = (_DWORD *)a3;
  v17 = *(_WORD *)(a3 + 21) & 0x1F;
  switch(v17)
  {
    case 7:
      v41 = WebCore::createWrapper<WebCore::HTMLAllCollection,WebCore::HTMLCollection>((uint64_t)a2, (uint64_t *)&v43);
LABEL_52:
      SlowCase = v41;
      goto LABEL_32;
    case 16:
      v41 = WebCore::createWrapper<WebCore::HTMLOptionsCollection,WebCore::HTMLCollection>((uint64_t)a2, (uint64_t *)&v43);
      goto LABEL_52;
    case 20:
      v41 = WebCore::createWrapper<WebCore::HTMLFormControlsCollection,WebCore::HTMLCollection>((uint64_t)a2, (uint64_t *)&v43);
      goto LABEL_52;
  }
  v18 = *((_QWORD *)a2 + 412);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSHTMLCollection::s_info + ~((_QWORD)&WebCore::JSHTMLCollection::s_info << 32)) ^ (((unint64_t)&WebCore::JSHTMLCollection::s_info + ~((_QWORD)&WebCore::JSHTMLCollection::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSHTMLCollection::s_info)
    {
LABEL_17:
      v25 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v25)
        goto LABEL_19;
    }
    else
    {
      v37 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v37) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v37;
        if (v24 == &WebCore::JSHTMLCollection::s_info)
          goto LABEL_17;
      }
    }
  }
  v26 = (WebCore::JSHTMLCollection *)*((_QWORD *)a2 + 7);
  Prototype = (JSC::JSCell *)WebCore::JSHTMLCollection::createPrototype(v26, (JSC::JSCell **)a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSHTMLCollection::createStructure((uint64_t *)v26, (uint64_t)a2, Prototype);
  v25 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSHTMLCollection::s_info);
LABEL_19:
  v29 = (WebCore::JSHTMLCollection *)*((_QWORD *)a2 + 7);
  v30 = (_QWORD *)WebCore::JSHTMLCollection::subspaceForImpl(v29, a2);
  SlowCase = v30[3];
  if (SlowCase >= v30[4])
  {
    SlowCase = v30[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_21;
    }
    v42 = *(_QWORD *)(SlowCase + 8) ^ v30[6];
    v30[4] = SlowCase + HIDWORD(v42);
    v30[5] = SlowCase + (int)v42;
  }
  v30[3] = SlowCase + 32;
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  v31 = (WebCore::JSHTMLCollection *)WebCore::JSDOMObject::JSDOMObject(SlowCase, v25);
  v43 = 0;
  *(_QWORD *)(SlowCase + 24) = a3;
  WebCore::JSHTMLCollection::finishCreation(v31, v29);
  v32 = *((_QWORD *)a2 + 415);
  if ((byte_1EE337AE0 & 1) == 0)
  {
    qword_1EE337AD8 = (uint64_t)&off_1E32A1440;
    byte_1EE337AE0 = 1;
  }
  if (*(_DWORD *)(v32 + 48))
  {
    v45 = a3;
    if ((SlowCase & 8) != 0)
      v38 = (SlowCase - 112) | 1;
    else
      v38 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v38 & 1) != 0)
      v39 = v38 + 47;
    else
      v39 = *(_QWORD *)v38 + 32;
    Allocator = *(_QWORD **)(v39 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v39 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE337AD8;
    Allocator[2] = v32;
    v44 = Allocator;
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v32 + 32), &v45, (uint64_t *)&v44);
    v36 = (uint64_t)v44;
    if (!v44)
      goto LABEL_32;
  }
  else
  {
    if ((SlowCase & 8) != 0)
      v33 = (SlowCase - 112) | 1;
    else
      v33 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v33 & 1) != 0)
      v34 = v33 + 47;
    else
      v34 = *(_QWORD *)v33 + 32;
    v35 = *(_QWORD **)(v34 + 16);
    if (!v35)
      v35 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v34 + 16) = *v35;
    *v35 = SlowCase;
    v35[1] = &qword_1EE337AD8;
    v35[2] = v32;
    v36 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v35;
    if (!v36)
      goto LABEL_32;
  }
  *(_QWORD *)(v36 + 8) = 3;
LABEL_32:
  if (v43)
  {
    if (v43[4] == 1)
      (*(void (**)(void))(*(_QWORD *)v43 + 8))();
    else
      --v43[4];
  }
  return SlowCase;
}

unint64_t WebCore::JSHTMLCollection::finishCreation(WebCore::JSHTMLCollection *this, JSC::VM *a2)
{
  unint64_t result;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
  if (result >= 0x101)
    return JSC::Heap::reportExtraMemoryAllocatedSlowCase();
  return result;
}

uint64_t WebCore::JSHTMLCollection::subspaceForImpl(WebCore::JSHTMLCollection *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4240);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  if (!*(_QWORD *)(v9 + 4240))
  {
    v15 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v15, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v17 = v20;
    v20 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v21;
    v21 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        WTF::fastFree(v18, v16);
      else
        --*(_DWORD *)v18;
    }
    v19 = *(_QWORD *)(v9 + 4240);
    *(_QWORD *)(v9 + 4240) = v15;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v11 = *(_QWORD *)(v3 + 4240);
  *(_QWORD *)(v3 + 4240) = v4;
  if (v11)
  {
    v12 = (WTF *)MEMORY[0x19AEA3528](v11, v10);
    WTF::fastFree(v12, v13);
  }
  v14 = __ldxr((unsigned __int8 *)v7);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSHTMLCollection::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSHTMLCollection::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  JSC::JSObject::visitChildren();
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24));
  if (*(_BYTE *)(a2 + 184))
  {
    *(_QWORD *)(a2 + 144) += result;
    v5 = *(_QWORD *)(a2 + 160);
    v6 = __CFADD__(v5, result);
    v7 = v5 + result;
    if (v6)
      *(_BYTE *)(a2 + 152) = 1;
    else
      *(_QWORD *)(a2 + 160) = v7;
  }
  return result;
}

unint64_t WebCore::CachedHTMLCollection<WebCore::HTMLTagCollection,(WebCore::CollectionTraversalType)0>::memoryCost(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(a1 + 72);
  v3 = (unsigned __int8 *)(a1 + 20);
  if (__ldaxr((unsigned __int8 *)(a1 + 20)))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](a1 + 20);
    goto LABEL_4;
  }
  if (__stxr(1u, v3))
    goto LABEL_3;
LABEL_4:
  v5 = *(uint64_t **)(a1 + 32);
  if (v5)
  {
    v9 = *v5;
    if (*v5)
      LODWORD(v9) = *(_DWORD *)(v9 - 12);
    v10 = v5[1];
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 - 12);
    v6 = 8 * (*((unsigned int *)v5 + 7) + (unint64_t)(v10 + v9));
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr(v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, v3))
      return v6 + 8 * v2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return v6 + 8 * v2;
}

unint64_t WebCore::CachedHTMLCollection<WebCore::ClassCollection,(WebCore::CollectionTraversalType)0>::memoryCost(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(a1 + 72);
  v3 = (unsigned __int8 *)(a1 + 20);
  if (__ldaxr((unsigned __int8 *)(a1 + 20)))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](a1 + 20);
    goto LABEL_4;
  }
  if (__stxr(1u, v3))
    goto LABEL_3;
LABEL_4:
  v5 = *(uint64_t **)(a1 + 32);
  if (v5)
  {
    v9 = *v5;
    if (*v5)
      LODWORD(v9) = *(_DWORD *)(v9 - 12);
    v10 = v5[1];
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 - 12);
    v6 = 8 * (*((unsigned int *)v5 + 7) + (unint64_t)(v10 + v9));
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr(v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, v3))
      return v6 + 8 * v2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return v6 + 8 * v2;
}

unint64_t WebCore::CachedHTMLCollection<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>,(WebCore::CollectionTraversalType)0>::memoryCost(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(a1 + 72);
  v3 = (unsigned __int8 *)(a1 + 20);
  if (__ldaxr((unsigned __int8 *)(a1 + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 20);
LABEL_5:
  v5 = *(uint64_t **)(a1 + 32);
  if (v5)
  {
    v9 = *v5;
    if (*v5)
      LODWORD(v9) = *(_DWORD *)(v9 - 12);
    v10 = v5[1];
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 - 12);
    v6 = 8 * (*((unsigned int *)v5 + 7) + (unint64_t)(v10 + v9));
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr(v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, v3))
      return v6 + 8 * v2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return v6 + 8 * v2;
}

unint64_t WebCore::CachedHTMLCollection<WebCore::AllDescendantsCollection,(WebCore::CollectionTraversalType)0>::memoryCost(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(a1 + 72);
  v3 = (unsigned __int8 *)(a1 + 20);
  if (__ldaxr((unsigned __int8 *)(a1 + 20)))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](a1 + 20);
    goto LABEL_4;
  }
  if (__stxr(1u, v3))
    goto LABEL_3;
LABEL_4:
  v5 = *(uint64_t **)(a1 + 32);
  if (v5)
  {
    v9 = *v5;
    if (*v5)
      LODWORD(v9) = *(_DWORD *)(v9 - 12);
    v10 = v5[1];
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 - 12);
    v6 = 8 * (*((unsigned int *)v5 + 7) + (unint64_t)(v10 + v9));
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr(v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, v3))
      return v6 + 8 * v2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return v6 + 8 * v2;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::virtualHasPendingActivity(WebCore::HTMLMediaElement *this)
{
  return WebCore::HTMLMediaElement::virtualHasPendingActivity((WebCore::HTMLMediaElement *)((char *)this - 112));
}

uint64_t WebCore::HTMLMediaElement::virtualHasPendingActivity(WebCore::HTMLMediaElement *this)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  char v9;

  if (*((_BYTE *)this + 1288) == 1)
    return 1;
  v2 = (_DWORD *)((char *)this + 1265);
  if ((*(_DWORD *)((_BYTE *)this + 1265) & 2) != 0
    || (v3 = *((_QWORD *)this + 200)) != 0
    && *(_BYTE *)(v3 + 48) == 4
    && *(unsigned __int8 *)(v3 + 49) - 1 <= 1)
  {
    if (*((_BYTE *)this + 1697))
      return 1;
    if (*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 467)
      || (*(double (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1456))(this) == 0.0
      || ((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1472))(this) & 1) != 0)
    {
      LOBYTE(result) = 1;
    }
    else if (*((_QWORD *)this + 142) && *((int *)this + 226) >= 1)
    {
      v9 = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1280))(this);
      result = 1;
      if ((v9 & 1) != 0)
        return result;
    }
    else
    {
      result = 1;
      if ((*v2 & 0x8000000) != 0)
        return result;
    }
  }
  else
  {
    LOBYTE(result) = 0;
  }
  v5 = *((_QWORD *)this + 2);
  if ((v5 & 0x1000000000000) != 0 && *(_DWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 0x1C))
  {
    v6 = (unsigned int *)**((_QWORD **)this + 99);
    if (v6)
    {
      v7 = atomic_load(v6);
      if (v7 != 1)
        return 1;
    }
    v8 = *((_QWORD *)this + 142);
    if (v8)
    {
      if (*(_QWORD *)(v8 + 80)
        && ((result & 1) != 0 || (*v2 & 0x800) != 0 || *((_DWORD *)this + 225) == 2 || *((_QWORD *)this + 204)))
      {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t WebCore::Page::setCanStartMedia(uint64_t this, int a2)
{
  uint64_t v2;
  void *v3;
  void (***v4)(_QWORD);
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[2];
  char v9;

  if (*(unsigned __int8 *)(this + 544) != a2)
  {
    v2 = this;
    *(_BYTE *)(this + 544) = a2;
    if (a2)
    {
      while (1)
      {
        WebCore::Page::takeAnyMediaCanStartListener((uint64_t)v8, *(_QWORD *)(v2 + 160));
        if (!v9)
          break;
        v4 = *(void (****)(_QWORD))(v8[0] + 8);
        v5 = *(_QWORD *)(v8[1] + 8);
        *(_DWORD *)(v5 + 24) += 2;
        v7 = v5;
        (**v4)(v4);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v7);
        this = std::__optional_destruct_base<std::pair<WTF::WeakRef<WebCore::MediaCanStartListener,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8, v6);
        if (!*(_BYTE *)(v2 + 544))
          return this;
      }
      return std::__optional_destruct_base<std::pair<WTF::WeakRef<WebCore::MediaCanStartListener,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8, v3);
    }
  }
  return this;
}

uint64_t *WebCore::JSXMLHttpRequestOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t *result;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = *(_DWORD *)(v3 - 32);
  *(_DWORD *)(v3 - 32) = v4 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    result = JSC::weakRemove<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,WebCore::JSBlob *>((uint64_t *)(a3 + 32), v3 - 56);
    v4 = *(_DWORD *)(v3 - 32) - 1;
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
    {
      *(_QWORD *)(v5 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  if (!v4)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 - 56) + 16))(v3 - 56);
  *(_DWORD *)(v3 - 32) = v4;
  return result;
}

WTF *WebCore::RenderIFrame::layout(WebCore::RenderIFrame *this)
{
  char v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  void *v11;
  WTF *result;
  unsigned int v13;
  WebCore::RenderFragmentedFlow *v14;
  BOOL v15;
  _QWORD v16[2];
  uint64_t v17;

  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  WebCore::RenderBox::computeLogicalWidthInFragment(this, (int *)v16, 0);
  v2 = *((_DWORD *)this + 31) >> 13;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    *((_DWORD *)this + 41) = v16[0];
    *((_DWORD *)this + 39) = HIDWORD(v16[0]);
  }
  else
  {
    *((_DWORD *)this + 40) = v16[0];
    *((_DWORD *)this + 38) = HIDWORD(v16[0]);
  }
  v3 = v2 & 7;
  v4 = *((_DWORD *)this + 30);
  v5 = (v4 >> 26) & 1;
  v6 = v5;
  if ((v3 - 2) >= 2)
  {
    if (v3 == 4)
    {
      v6 = (v4 & 0x4000000) == 0;
    }
    else
    {
      v6 = (v4 >> 26) & 1;
      if (v3 != 5)
      {
        if ((v4 & 0x4000000) != 0)
          v7 = 1;
        else
          v7 = 3;
        goto LABEL_9;
      }
    }
  }
  if (v6)
    v7 = 2;
  else
    v7 = 0;
LABEL_9:
  *((_DWORD *)this + v7 + 42) = v17;
  if ((v3 - 2) >= 2)
  {
    if (v3 == 4)
    {
      v5 = (v4 & 0x4000000) == 0;
    }
    else if (v3 != 5)
    {
      v8 = 3;
      if ((v4 & 0x4000000) == 0)
        v8 = 1;
      goto LABEL_14;
    }
  }
  v15 = v5 == 0;
  v8 = 2;
  if (!v15)
    v8 = 0;
LABEL_14:
  *((_DWORD *)this + v8 + 42) = HIDWORD(v17);
  WebCore::RenderBox::updateLogicalHeight(this);
  v10 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      WTF::fastFree(v10, v9);
    else
      --*(_DWORD *)v10;
  }
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v14 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(WebCore::RenderIFrame *))(*(_QWORD *)this + 648))(this);
    if (v14)
      WebCore::RenderFragmentedFlow::clearFragmentsOverflow(v14, this);
  }
  WebCore::RenderBox::addVisualEffectOverflow(this);
  result = WebCore::RenderLayerModelObject::updateLayerTransform(this, v11);
  v13 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)this + 5) = v13;
  if ((*((_BYTE *)this + 45) & 2) == 0)
  {
    *(_WORD *)((char *)this + 69) &= ~1u;
    *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)this + 5) = v13 & 0xFFDFFE07;
  return result;
}

double WebCore::RenderLayer::currentTransform@<D0>(uint64_t a1@<X0>, const WebCore::RenderElement *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v4;
  char v6;
  const WebCore::RenderElement *v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  WTF::StringImpl *v16;
  unsigned __int8 v17;
  WTF::StringImpl *v18;
  void *v19;
  WTF::StringImpl *v21;
  _BYTE v22[16];
  WTF::StringImpl *v23;
  char v24;
  char v25;

  if (*(_QWORD *)(a1 + 200))
  {
    v4 = a2;
    v6 = (char)a2;
    WebCore::Styleable::fromRenderer(*(_QWORD *)(a1 + 32), a2, (uint64_t)v22);
    if (v25 && (WebCore::Styleable::isRunningAcceleratedTransformAnimation((WebCore::Styleable *)v22) & 1) != 0
      || (v6 & 1) == 0)
    {
      WebCore::RenderElement::animatedStyle(*(WebCore::RenderElement **)(a1 + 32), v7, &v21);
      *(_OWORD *)(a3 + 64) = xmmword_1969FCC00;
      *(float64x2_t *)(a3 + 80) = xmmword_1969FCC10;
      *(_OWORD *)(a3 + 96) = xmmword_1969FCC20;
      *(_OWORD *)(a3 + 112) = unk_1969FCC30;
      *(_OWORD *)a3 = constinit_103;
      *(_OWORD *)(a3 + 16) = *(_OWORD *)algn_1969FCBD0;
      *(_OWORD *)(a3 + 32) = xmmword_1969FCBE0;
      *(float64x2_t *)(a3 + 48) = xmmword_1969FCBF0;
      v17 = v4;
      v18 = v21;
      WebCore::RenderLayer::updateTransformFromStyle(a1, a3, (uint64_t)v21, v17);
      WebCore::RenderStyle::~RenderStyle(v18, v19);
      if (*(_DWORD *)v18)
      {
        *(_QWORD *)&v12 = 0;
        *((_OWORD *)v18 + 2) = 0u;
        *((_OWORD *)v18 + 3) = 0u;
        *(_OWORD *)v18 = 0u;
        *((_OWORD *)v18 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v18, v7);
      }
    }
    else
    {
      v8 = *(__int128 **)(a1 + 200);
      v9 = v8[3];
      v11 = *v8;
      v10 = v8[1];
      *(_OWORD *)(a3 + 32) = v8[2];
      *(_OWORD *)(a3 + 48) = v9;
      *(_OWORD *)a3 = v11;
      *(_OWORD *)(a3 + 16) = v10;
      v12 = v8[6];
      v13 = v8[7];
      v15 = v8[4];
      v14 = v8[5];
      *(_OWORD *)(a3 + 96) = v12;
      *(_OWORD *)(a3 + 112) = v13;
      *(_OWORD *)(a3 + 64) = v15;
      *(_OWORD *)(a3 + 80) = v14;
    }
    if (v25)
    {
      if (v24)
      {
        v16 = v23;
        v23 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v7);
          else
            *(_DWORD *)v16 -= 2;
        }
      }
    }
  }
  else
  {
    *(_OWORD *)(a3 + 64) = xmmword_1969FCC00;
    *(float64x2_t *)(a3 + 80) = xmmword_1969FCC10;
    *(_OWORD *)(a3 + 96) = xmmword_1969FCC20;
    *(_OWORD *)(a3 + 112) = unk_1969FCC30;
    *(_OWORD *)a3 = constinit_103;
    *(_OWORD *)(a3 + 16) = *(_OWORD *)algn_1969FCBD0;
    *(_QWORD *)&v12 = 0;
    *(_OWORD *)(a3 + 32) = xmmword_1969FCBE0;
    *(float64x2_t *)(a3 + 48) = xmmword_1969FCBF0;
  }
  return *(double *)&v12;
}

uint64_t WebCore::Styleable::isRunningAcceleratedTransformAnimation(WebCore::Styleable *this)
{
  uint64_t isCurrentlyAffectingProperty;
  uint64_t v3;
  uint64_t *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  WebCore::KeyframeEffect *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  unsigned int v21;

  if ((*(_QWORD *)(*(_QWORD *)this + 72) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  v3 = *(unsigned int *)((*(_QWORD *)(*(_QWORD *)this + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
  if (!(_DWORD)v3)
    return 0;
  v4 = *(uint64_t **)((*(_QWORD *)(*(_QWORD *)this + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
  if (*((_BYTE *)this + 24))
  {
    for (i = 8 * v3; i; i -= 8)
    {
      v6 = *v4;
      if (*(_BYTE *)(*v4 + 96))
      {
        if (*(_DWORD *)(v6 + 80) == *((_DWORD *)this + 2) && *(_QWORD *)(v6 + 88) == *((_QWORD *)this + 2))
          break;
      }
      isCurrentlyAffectingProperty = 0;
      ++v4;
    }
  }
  else
  {
    v8 = 8 * v3;
    isCurrentlyAffectingProperty = 0;
    while (1)
    {
      v6 = *v4;
      if (!*(_BYTE *)(*v4 + 96))
        break;
      ++v4;
      v8 -= 8;
      if (!v8)
        return isCurrentlyAffectingProperty;
    }
  }
  if (!*(_QWORD *)v6)
    return 0;
  WebCore::KeyframeEffectStack::sortedEffects((unsigned int ***)&v20, *(unsigned int ***)v6);
  v10 = v20;
  if (v21)
  {
    v11 = (WTF *)((char *)v20 + 8 * v21);
    v12 = 8 * v21 - 8;
    v13 = v20;
    do
    {
      v14 = v10;
      if (*(_QWORD *)v10)
        v15 = *(WebCore::KeyframeEffect **)(*(_QWORD *)v10 + 8);
      else
        v15 = 0;
      isCurrentlyAffectingProperty = WebCore::KeyframeEffect::isCurrentlyAffectingProperty(v15, 273, 1);
      if ((isCurrentlyAffectingProperty & 1) != 0)
        break;
      v10 = (WTF *)((char *)v14 + 8);
      v16 = v12;
      v12 -= 8;
    }
    while (v16);
    do
    {
      v17 = *(unsigned int **)v13;
      *(_QWORD *)v13 = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          WTF::fastFree((WTF *)v17, v9);
        }
      }
      v13 = (WTF *)((char *)v13 + 8);
    }
    while (v13 != v11);
    v10 = v20;
  }
  else
  {
    isCurrentlyAffectingProperty = 0;
  }
  if (v10)
    WTF::fastFree(v10, v9);
  return isCurrentlyAffectingProperty;
}

void WebCore::RenderTableSection::layoutRows(WebCore::RenderTableSection *this)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  unsigned int v7;
  char *v8;
  WebCore::RenderTableSection *v9;
  int v10;
  int v11;
  int v12;
  _BOOL4 v13;
  int v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  unsigned int v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  int *v31;
  void *v32;
  WTF *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  signed int v52;
  int v53;
  signed int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  BOOL v68;
  uint64_t v69;
  uint64_t i;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int v88;
  int j;
  uint64_t v90;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unint64_t v105;
  unint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  _DWORD *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  int v128;
  int v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  _DWORD *v148;
  unsigned int v149;
  int *v150;
  int *v151;
  int *v152;
  unsigned int v153;
  int v154;
  int v155;
  unsigned int v156;
  char *v157;
  void *v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  const WebCore::RenderBox *v162;
  int v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __int16 v168;
  unsigned int v169;
  BOOL v170;
  int v171;
  int v173;
  unsigned int v174;
  int v175;
  int v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  const WebCore::RenderBox *v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unsigned int v184;
  int v185;
  int v186;
  signed int *v187;
  unsigned int v188;
  signed int v189;
  int v190;
  int v191;
  uint64_t v192;
  int v193;
  int v194;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  WebCore::RenderFragmentedFlow *v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  int v210;
  _BOOL4 v211;
  unint64_t v212;
  int v213;
  int v214;
  unsigned int v215[2];
  __int128 v216;

  v2 = *((unsigned int *)this + 53);
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(unsigned __int8 **)(v3 + 8);
    if (v4)
    {
      v5 = v4[46];
      if (v5 != 35 && v5 != 63)
      {
        __break(0xC471u);
        JUMPOUT(0x194322A80);
      }
    }
  }
  else
  {
    v4 = 0;
  }
  v6 = WebCore::RenderBox::contentLogicalWidth((WebCore::RenderBox *)v4);
  v7 = *((_DWORD *)this + 31);
  v8 = (char *)this + 164;
  if (((v7 >> 13) & 6) - 2 >= 4)
    v8 = (char *)this + 160;
  *(_DWORD *)v8 = v6;
  *((_BYTE *)this + 280) = 0;
  v9 = *(WebCore::RenderTableSection **)(*((_QWORD *)this + 4) + 8);
  if (v9)
  {
    v10 = *((unsigned __int8 *)v9 + 46);
    if (v10 != 35 && v10 != 63)
    {
      __break(0xC471u);
      JUMPOUT(0x194322A40);
    }
  }
  else
  {
    v10 = MEMORY[0x2E];
  }
  v214 = *((_DWORD *)v9 + 84);
  if (v10 != 35 && v10 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x194322A60);
  }
  *(_QWORD *)v215 = *((unsigned int *)v9 + 57);
  v11 = *((_DWORD *)this + 5);
  if ((v11 & 0x20000) == 0)
    goto LABEL_13;
  if ((*((_BYTE *)this + 45) & 2) == 0)
    v9 = this;
  v159 = *((_QWORD *)v9 + 11);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v159 + 32) + 40) + 20)
    || (v160 = *(_QWORD **)(v159 + 40), v160[41])
    || v160[38]
    || v160[39]
    || v160[40]
    || (v11 & 0x100000) != 0)
  {
    v13 = 1;
  }
  else
  {
LABEL_13:
    v12 = (unsigned __int16)v7 >> 13;
    v202 = 2;
    switch(v12)
    {
      case 1:
      case 2:
        goto LABEL_15;
      case 3:
      case 5:
        v12 = 3;
        goto LABEL_15;
      case 4:
        goto LABEL_16;
      default:
        v12 = 0;
LABEL_15:
        v202 = v12;
LABEL_16:
        v13 = (v202 & 0xFFFFFFFD) == 1;
        break;
    }
  }
  *(_QWORD *)&v216 = *((_QWORD *)this + 19);
  v209 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                   + 248);
  v14 = WebCore::LocalFrameViewLayoutContext::pushLayoutState(v209 + 336, this, (int *)&v216, 0, 0);
  v211 = v13;
  if (v13 && v14)
    ++*(_DWORD *)(v209 + 492);
  v210 = v14;
  if (!(_DWORD)v2)
    goto LABEL_199;
  v16 = 0;
  v17 = 1;
  v212 = v2;
  do
  {
    if (v16 >= *((unsigned int *)this + 53))
    {
      __break(0xC471u);
      JUMPOUT(0x194322BA0);
    }
    v18 = *(_QWORD *)(*((_QWORD *)this + 25) + 40 * v16 + 16);
    if (v18)
    {
      v19 = ((*(_DWORD *)(v18 + 124) >> 13) & 6) - 2;
      if (v19 <= 3)
      {
        *(_DWORD *)(v18 + 156) = 0;
        if (v16 >= *((unsigned int *)this + 57))
        {
LABEL_320:
          __break(0xC471u);
          JUMPOUT(0x194322BB0);
        }
        v20 = *((_QWORD *)this + 27);
        v21 = (_DWORD *)(v20 + 4 * v16);
        *(_DWORD *)(v18 + 152) = *v21;
      }
      else
      {
        *(_DWORD *)(v18 + 152) = 0;
        if (v16 >= *((unsigned int *)this + 57))
          goto LABEL_320;
        v20 = *((_QWORD *)this + 27);
        v21 = (_DWORD *)(v20 + 4 * v16);
        *(_DWORD *)(v18 + 156) = *v21;
      }
      v22 = 160;
      if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
        v22 = 164;
      if (v19 >= 4)
        v23 = (_DWORD *)(v18 + 160);
      else
        v23 = (_DWORD *)(v18 + 164);
      *v23 = *(_DWORD *)((char *)this + v22);
      if (v16 + 1 >= *((unsigned int *)this + 57))
      {
        __break(0xC471u);
        JUMPOUT(0x194322BA8);
      }
      v24 = *(_DWORD *)(v20 + 4 * (v16 + 1));
      v25 = *v21;
      v26 = __OFSUB__(v24, v25);
      v27 = v24 - v25;
      v28 = (v24 >> 31) + 0x7FFFFFFF;
      if (!v26)
        v28 = v27;
      v26 = __OFSUB__(v28, v214);
      v29 = v28 - v214;
      v30 = (v28 >> 31) + 0x7FFFFFFF;
      if (!v26)
        v30 = v29;
      if (v19 >= 4)
        v31 = (int *)(v18 + 164);
      else
        v31 = (int *)(v18 + 160);
      *v31 = v30;
      WebCore::RenderLayerModelObject::updateLayerTransform((WTF *)v18, v15);
      v33 = *(WTF **)(v18 + 192);
      *(_QWORD *)(v18 + 192) = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 1)
          WTF::fastFree(v33, v32);
        else
          --*(_DWORD *)v33;
      }
      if ((*(_BYTE *)(v18 + 23) & 0x10) != 0)
      {
        v201 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 648))(v18);
        if (v201)
          WebCore::RenderFragmentedFlow::clearFragmentsOverflow(v201, (const WebCore::RenderBox *)v18);
      }
      WebCore::RenderBox::addVisualEffectOverflow((WebCore::RenderBox *)v18);
    }
    if (!v215[0])
      goto LABEL_169;
    v34 = 0;
    v213 = 0;
    do
    {
      if (*((_BYTE *)this + 282))
        WebCore::RenderTableSection::recalcCells(this);
      if (*((_DWORD *)this + 53) <= v16)
      {
        __break(0xC471u);
        JUMPOUT(0x194322B70);
      }
      v35 = *((_QWORD *)this + 25) + 40 * v16;
      if (v34 >= *(unsigned int *)(v35 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x194322B78);
      }
      v36 = *(_QWORD *)v35 + 32 * v34;
      v37 = *(unsigned int *)(v36 + 12);
      if (!(_DWORD)v37)
        goto LABEL_157;
      v38 = *(_QWORD *)(*(_QWORD *)v36 + 8 * v37 - 8);
      v39 = *(unsigned __int8 *)(v36 + 24);
      if (!v38 || v39 != 0)
        goto LABEL_157;
      v41 = *(_QWORD *)(*(_QWORD *)(v38 + 32) + 8);
      if (*(_BYTE *)(v41 + 46) != 39)
      {
        __break(0xC471u);
        JUMPOUT(0x1943225D8);
      }
      v42 = *(_DWORD *)(v41 + 200);
      if ((*(_BYTE *)(v38 + 251) & 8) != 0)
        v43 = WebCore::RenderTableCell::parseRowSpanFromDOM((WebCore::RenderTableCell *)v38);
      else
        v43 = 1;
      v44 = v42 & 0x7FFFFFFF;
      v45 = v43 + (v42 & 0x7FFFFFFF);
      v46 = *((_DWORD *)this + 57);
      if (v46 <= v45)
      {
        __break(0xC471u);
        JUMPOUT(0x194322B80);
      }
      if (v46 <= v44)
      {
        __break(0xC471u);
        JUMPOUT(0x194322B88);
      }
      v47 = *((_QWORD *)this + 27);
      v48 = *(_DWORD *)(v47 + 4 * v45);
      v49 = *(_DWORD *)(v47 + 4 * v44);
      v26 = __OFSUB__(v48, v49);
      v50 = v48 - v49;
      v51 = (v48 >> 31) + 0x7FFFFFFF;
      if (v26)
        v50 = v51;
      v26 = __OFSUB__(v50, v214);
      v52 = v50 - v214;
      v53 = (v50 >> 31) + 0x7FFFFFFF;
      if (v26)
        v54 = v53;
      else
        v54 = v52;
      v55 = v54 / 64;
      v56 = ((*(_DWORD *)(v38 + 124) >> 13) & 6) - 2;
      v57 = *(_QWORD *)(*(_QWORD *)(v38 + 88) + 8);
      v58 = v57 + 4;
      v59 = v57 + 12;
      if (v56 < 4)
        v59 = v58;
      if (*(_BYTE *)(v59 + 4) == 4)
      {
        v68 = 1;
      }
      else
      {
        v60 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
        v61 = *(unsigned __int8 *)(v60 + 46);
        if (v61 != 35 && v61 != 63)
        {
          __break(0xC471u);
          JUMPOUT(0x194322974);
        }
        v62 = ((*(_DWORD *)(v60 + 124) >> 13) & 6) - 2;
        v63 = *(_QWORD *)(*(_QWORD *)(v60 + 88) + 8);
        v64 = v62 >= 4;
        v65 = v63 + 4;
        v66 = v63 + 12;
        if (!v64)
          v66 = v65;
        if (*(_BYTE *)(v66 + 4))
        {
          v64 = v56 >= 4;
          v67 = (_DWORD *)(v38 + 160);
          if (v64)
            v67 = (_DWORD *)(v38 + 164);
          v68 = *v67 != v55 << 6;
        }
        else
        {
          v68 = 0;
        }
      }
      v69 = *(unsigned __int8 *)(v38 + 68);
      for (i = *(unsigned int *)(v38 + 64); ; i = *(unsigned int *)(v72 + 47))
      {
        v71 = i | (v69 << 32);
        if (!v71)
          goto LABEL_98;
        v72 = *(_QWORD *)(v71 + 8);
        if (!v72)
          goto LABEL_98;
        if ((*(_BYTE *)(v72 + 45) & 4) != 0)
          break;
        v69 = *(unsigned __int8 *)(v72 + 51);
      }
LABEL_85:
      v73 = *(_QWORD *)(*(_QWORD *)(v72 + 88) + 8);
      v74 = v73 + 4;
      v75 = v73 + 12;
      if (((*(_DWORD *)(v72 + 124) >> 13) & 6u) - 2 >= 4)
        v74 = v75;
      if ((*(_BYTE *)(v74 + 4) & 0xF7) != 3
        || !v68
        && !WebCore::shouldFlexCellChild(*(WebCore **)(*(_QWORD *)(v38 + 88) + 8), (const WebCore::RenderTableCell *)*(unsigned int *)(v38 + 124), (const WebCore::RenderBox *)v72)|| ((v77 = *(unsigned __int8 *)(v72 + 46), v77 == 63) || v77 == 35)&& ((v78 = *(_QWORD *)(v72 + 272)) == 0 || !*(_QWORD *)(v78 + 8))&& ((v79 = *(_QWORD *)(v72 + 280)) == 0 || !*(_QWORD *)(v79 + 8))&& ((v80 = *(_QWORD *)(v72 + 288)) == 0 || !*(_QWORD *)(v80 + 8)))
      {
        while (1)
        {
          v76 = *(unsigned int *)(v72 + 47);
          if (!(v76 | ((unint64_t)*(unsigned __int8 *)(v72 + 51) << 32)))
            break;
          v72 = *(_QWORD *)((v76 | ((unint64_t)*(unsigned __int8 *)(v72 + 51) << 32)) + 8);
          if (!v72)
            break;
          if ((*(_BYTE *)(v72 + 45) & 4) != 0)
            goto LABEL_85;
        }
LABEL_98:
        v81 = (uint64_t *)WebCore::percentHeightDescendantsMap;
        if (WebCore::percentHeightDescendantsMap)
        {
          ++*(_DWORD *)(WebCore::percentHeightDescendantsMap + 8);
          v82 = *(_QWORD *)(v38 + 8);
          if (v82)
          {
            if (*(_QWORD *)(v82 + 8))
            {
              v83 = *v81;
              if (v83)
              {
                v84 = *(_DWORD *)(v83 - 8);
                v85 = (~(v82 << 32) + v82) ^ ((unint64_t)(~(v82 << 32) + v82) >> 22);
                v86 = 9 * ((v85 + ~(v85 << 13)) ^ ((v85 + ~(v85 << 13)) >> 8));
                v87 = (v86 ^ (v86 >> 15)) + ~((v86 ^ (v86 >> 15)) << 27);
                v88 = v84 & ((v87 >> 31) ^ v87);
                for (j = 1; ; ++j)
                {
                  v90 = *(_QWORD *)(v83 + 16 * v88);
                  if (!v90)
                    break;
                  if (v90 != -1 && v90 == v82)
                  {
                    v92 = *(_QWORD *)(v83 + 16 * v88 + 8);
                    if (!v92)
                      goto LABEL_111;
                    v161 = *(_QWORD **)(v92 + 8);
                    if (!v161)
                      goto LABEL_111;
                    while (1)
                    {
                      v162 = *(const WebCore::RenderBox **)(*v161 + 8);
                      if (v162)
                        break;
                      v161 = (_QWORD *)v161[2];
                      if (!v161)
                        goto LABEL_111;
                    }
                    v208 = v161;
                    if (!v68
                      && (WebCore::shouldFlexCellChild(*(WebCore **)(*(_QWORD *)(v38 + 88) + 8), (const WebCore::RenderTableCell *)*(unsigned int *)(v38 + 124), v162) & 1) == 0)
                    {
                      while (1)
                      {
                        v179 = v208[2];
                        if (!v179)
                          break;
                        v208 = (_QWORD *)v208[2];
                        v180 = *(const WebCore::RenderBox **)(*(_QWORD *)v179 + 8);
                        if (v180)
                        {
                          ++*(_DWORD *)(v92 + 24);
                          if (WebCore::shouldFlexCellChild(*(WebCore **)(*(_QWORD *)(v38 + 88) + 8), (const WebCore::RenderTableCell *)*(unsigned int *)(v38 + 124), v180))goto LABEL_230;
                        }
                      }
                      ++*(_DWORD *)(v92 + 24);
                      goto LABEL_111;
                    }
                    goto LABEL_230;
                  }
                  v88 = (v88 + j) & v84;
                }
              }
            }
          }
        }
        goto LABEL_111;
      }
LABEL_230:
      v163 = *(_DWORD *)(v38 + 20);
      if ((v163 & 0x20) == 0)
        *(_DWORD *)(v38 + 20) = v163 | 0x20;
      *(_DWORD *)(v38 + 252) = 0;
      *(_DWORD *)(v38 + 256) = 0;
      LODWORD(v216) = v55 << 6;
      v164 = (_QWORD *)WebCore::gOverridingLogicalHeightMap;
      if (!WebCore::gOverridingLogicalHeightMap)
      {
        v164 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v164 = 0;
        v164[1] = 0;
        WebCore::gOverridingLogicalHeightMap = (uint64_t)v164;
      }
      WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,WebCore::LayoutUnit&>((uint64_t)v164, (_QWORD *)v38, &v216);
      if ((*(_BYTE *)(v38 + 20) & 0xF8) != 0)
      {
        v165 = *(_QWORD *)(v38 + 32);
        if (v165
          && (v166 = *(_QWORD *)(v165 + 8)) != 0
          && (*(_BYTE *)(*(_QWORD *)(v166 + 104) + 239) & 0x18) != 0
          && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 24) + 8) + 40)
                                                           + 8)
                                               + 1944)
                                   + 248)
                       + 479))
        {
          WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v38);
        }
        else
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 688))(v38);
        }
      }
      v167 = *(_QWORD *)(v38 + 88);
      v168 = *(_WORD *)(*(_QWORD *)(v167 + 32) + 120);
      if ((v168 & 0x7F) != 0)
      {
        if ((v168 & 0xF) != 1)
          goto LABEL_111;
      }
      else
      {
        v169 = *(unsigned __int8 *)(*(_QWORD *)(v167 + 8) + 68) >> 4;
        v170 = v169 > 9;
        v171 = (1 << v169) & 0x23D;
        if (v170 || v171 == 0)
          goto LABEL_111;
      }
      v173 = WebCore::RenderTableCell::cellBaselinePosition((WebCore::RenderTableCell *)v38);
      v174 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 1048))(v38);
      v175 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 960))(v38);
      v176 = v174 + v175;
      if (__OFADD__(v174, v175))
        v176 = (v174 >> 31) + 0x7FFFFFFF;
      if (v173 > v176)
      {
        if ((int)v16 >= (unint64_t)*((unsigned int *)this + 53))
        {
          __break(0xC471u);
          JUMPOUT(0x194322BB8);
        }
        v177 = *((_QWORD *)this + 25) + 40 * (int)v16;
        v178 = *(_DWORD *)(v177 + 24);
        if (v178 <= v173)
          v178 = v173;
        *(_DWORD *)(v177 + 24) = v178;
      }
LABEL_111:
      WebCore::RenderTableCell::computeIntrinsicPadding(v38, v54);
      v93 = *(_OWORD *)(v38 + 152);
      v216 = v93;
      v94 = *(_QWORD *)(*(_QWORD *)(v38 + 32) + 8);
      if (*(_BYTE *)(v94 + 46) != 39)
      {
        __break(0xC471u);
        JUMPOUT(0x1943225F8);
      }
      v95 = *(_DWORD *)(v94 + 200) & 0x7FFFFFFF;
      if (*((_DWORD *)this + 57) <= v95)
      {
        __break(0xC471u);
        JUMPOUT(0x194322B90);
      }
      v96 = *(unsigned int *)(*((_QWORD *)this + 27) + 4 * v95);
      v97 = *((_QWORD *)this + 4);
      if (v97)
      {
        v98 = *(_QWORD *)(v97 + 8);
        if (v98)
        {
          v99 = *(unsigned __int8 *)(v98 + 46);
          if (v99 != 35 && v99 != 63)
          {
            __break(0xC471u);
            JUMPOUT(0x194322934);
          }
        }
        v100 = *(_DWORD *)(v98 + 332);
        if ((*((_BYTE *)this + 123) & 4) == 0)
        {
          v101 = *(unsigned __int8 *)(v98 + 46);
          if (v101 != 35 && v101 != 63)
          {
            __break(0xC471u);
            JUMPOUT(0x194322954);
          }
          if (*(_DWORD *)(v98 + 212) <= v34)
          {
            __break(0xC471u);
            JUMPOUT(0x194322B98);
          }
          v102 = *(_DWORD *)(*(_QWORD *)(v98 + 200) + 4 * v34);
          goto LABEL_122;
        }
        v207 = v93;
      }
      else
      {
        v207 = v93;
        v100 = MEMORY[0x14C];
      }
      v138 = WebCore::RenderTableSection::table(this);
      v206 = *(unsigned int *)(WebCore::RenderTableSection::table(this) + 228);
      if (*(_DWORD *)(v138 + 212) <= v206)
      {
        __break(0xC471u);
        JUMPOUT(0x194322BC0);
      }
      v205 = *(_QWORD *)(v138 + 200);
      v204 = WebCore::RenderTableSection::table(this);
      v139 = WebCore::RenderTableSection::table(this);
      v140 = *(_DWORD *)(v38 + 248);
      if ((v140 & 0x4000000) != 0)
      {
        v203 = v139;
        v141 = WebCore::RenderTableCell::parseColSpanFromDOM((WebCore::RenderTableCell *)v38);
        v139 = v203;
      }
      else
      {
        v141 = 1;
      }
      v142 = v141 + (v140 & 0x1FFFFFF);
      *(_QWORD *)&v93 = v207;
      if ((*(_BYTE *)(v139 + 328) & 0x40) != 0)
      {
        v196 = *(unsigned int *)(v139 + 228);
        if ((_DWORD)v196)
        {
          v197 = v139;
          v198 = 0;
          v199 = 0;
          v200 = *(_QWORD *)(v197 + 216);
          while (1)
          {
            v199 += *(_DWORD *)(v200 + 4 * v198);
            if (v199 - 1 >= v142)
              break;
            if (v196 == ++v198)
            {
              v142 = v196;
              goto LABEL_183;
            }
          }
          v142 = v198;
        }
        else
        {
          v142 = 0;
        }
      }
LABEL_183:
      if (*(_DWORD *)(v204 + 212) <= v142)
      {
        __break(0xC471u);
        JUMPOUT(0x194322BC8);
      }
      v143 = *(_DWORD *)(v205 + 4 * v206);
      v144 = *(_DWORD *)(*(_QWORD *)(v204 + 200) + 4 * v142);
      v26 = __OFSUB__(v143, v144);
      v102 = v143 - v144;
      if (v26)
        v102 = (v143 >> 31) + 0x7FFFFFFF;
LABEL_122:
      v26 = __OFADD__(v102, v100);
      v103 = v102 + v100;
      v104 = (v102 >> 31) + 0x7FFFFFFF;
      if (!v26)
        v104 = v103;
      v105 = v104 | (unint64_t)(v96 << 32);
      v106 = __ROR8__(v105, 32);
      if (((*(_DWORD *)(v38 + 124) >> 13) & 6u) - 2 > 3)
        v106 = v105;
      *(_QWORD *)(v38 + 152) = v106;
      v107 = v93 - v106;
      if (__OFSUB__((_DWORD)v93, (_DWORD)v106))
        v107 = (v93 >> 31) + 0x7FFFFFFF;
      v108 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                   + 1944)
                       + 248);
      v109 = HIDWORD(v106);
      v26 = __OFSUB__(DWORD1(v93), (_DWORD)v109);
      v110 = DWORD1(v93) - v109;
      if (v26)
        v110 = (DWORD1(v93) >> 31) + 0x7FFFFFFF;
      v111 = *(unsigned int *)(v108 + 508);
      if (!(_DWORD)v111)
        goto LABEL_131;
      v132 = *(_QWORD *)(*(_QWORD *)(v108 + 496) + 8 * v111 - 8);
      if (!v132)
        goto LABEL_167;
      v133 = *(_DWORD *)(v132 + 64);
      v134 = *(_DWORD *)(v132 + 68);
      v26 = __OFADD__(v133, v107);
      v135 = v133 + v107;
      v136 = (v133 >> 31) + 0x7FFFFFFF;
      if (v26)
        v135 = v136;
      v26 = __OFADD__(v134, v110);
      v137 = v134 + v110;
      if (v26)
        v137 = (v134 >> 31) + 0x7FFFFFFF;
      *(_DWORD *)(v132 + 64) = v135;
      *(_DWORD *)(v132 + 68) = v137;
      v111 = *(unsigned int *)(v108 + 508);
      if ((_DWORD)v111)
LABEL_167:
        v112 = *(_DWORD **)(*(_QWORD *)(v108 + 496) + 8 * v111 - 8);
      else
LABEL_131:
        v112 = 0;
      v113 = *(_DWORD *)(v38 + 20);
      if ((v113 & 0xF8) == 0 && v112[18])
      {
        v192 = 156;
        if (((*(_DWORD *)(v38 + 124) >> 13) & 6u) - 2 < 4)
          v192 = 152;
        v193 = WebCore::RenderLayoutState::pageLogicalOffset(v112, v38, *(_DWORD *)(v38 + v192));
        v194 = WebCore::RenderBlock::pageLogicalOffset((WebCore::RenderBlock *)v38);
        v113 = *(_DWORD *)(v38 + 20);
        if (v193 != v194 && (*(_DWORD *)(v38 + 20) & 0x20) == 0)
        {
          v113 |= 0x20u;
          *(_DWORD *)(v38 + 20) = v113;
        }
      }
      if ((v113 & 0xF8) != 0)
      {
        v114 = *(_QWORD *)(v38 + 32);
        if (v114
          && (v115 = *(_QWORD *)(v114 + 8)) != 0
          && (*(_BYTE *)(*(_QWORD *)(v115 + 104) + 239) & 0x18) != 0
          && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 24) + 8) + 40)
                                                           + 8)
                                               + 1944)
                                   + 248)
                       + 479))
        {
          WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v38);
        }
        else
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 688))(v38);
        }
      }
      if (!v112[18])
        goto LABEL_140;
      v187 = (signed int *)(v38 + 160);
      v188 = ((*(_DWORD *)(v38 + 124) >> 13) & 6) - 2;
      if (v188 <= 3)
      {
        v189 = *v187;
        if (*v187 == v54)
          goto LABEL_140;
        if (v189 <= v54)
          goto LABEL_270;
LABEL_264:
        v190 = v189 - v54;
        if (__OFSUB__(v189, v54))
          v190 = (v189 >> 31) + 0x7FFFFFFF;
        v191 = v213;
        if (v213 <= v190)
          v191 = v190;
        v213 = v191;
        if (v188 >= 4)
LABEL_269:
          v187 = (signed int *)(v38 + 164);
LABEL_270:
        *v187 = v54;
        goto LABEL_140;
      }
      v189 = *(_DWORD *)(v38 + 164);
      if (v189 != v54)
      {
        if (v189 > v54)
          goto LABEL_264;
        goto LABEL_269;
      }
LABEL_140:
      v117 = *(_DWORD *)(v38 + 152);
      v116 = *(_DWORD *)(v38 + 156);
      v118 = v117 - v216;
      if (__OFSUB__(v117, (_DWORD)v216))
        v118 = (v117 >> 31) + 0x7FFFFFFF;
      v119 = v116 - DWORD1(v216);
      if (__OFSUB__(v116, DWORD1(v216)))
      {
        v120 = v118 | ((unint64_t)((v116 >> 31) + 0x7FFFFFFF) << 32);
      }
      else
      {
        if (!(v118 | v119))
          goto LABEL_157;
        v120 = v118 | (unint64_t)(v119 << 32);
      }
      v121 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                   + 1944)
                       + 248);
      v122 = *(unsigned int *)(v121 + 508);
      if ((_DWORD)v122)
      {
        v123 = *(_QWORD *)(*(_QWORD *)(v121 + 496) + 8 * v122 - 8);
        if (v123)
        {
          v124 = HIDWORD(v120);
          v125 = *(_DWORD *)(v123 + 64);
          v126 = *(_DWORD *)(v123 + 68);
          v26 = __OFADD__(v125, (_DWORD)v120);
          v127 = v125 + v120;
          v128 = (v125 >> 31) + 0x7FFFFFFF;
          if (v26)
            v127 = v128;
          v26 = __OFADD__(v126, (_DWORD)v124);
          v129 = v126 + v124;
          if (v26)
            v129 = (v126 >> 31) + 0x7FFFFFFF;
          *(_DWORD *)(v123 + 64) = v127;
          *(_DWORD *)(v123 + 68) = v129;
        }
      }
      v130 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
      v131 = *(unsigned __int8 *)(v130 + 46);
      if (v131 != 35 && v131 != 63)
      {
        __break(0xC471u);
        JUMPOUT(0x194322914);
      }
      if ((*(_BYTE *)(v130 + 20) & 8) == 0
        && WebCore::RenderElement::checkForRepaintDuringLayout((WebCore::RenderElement *)v38))
      {
        WebCore::RenderBox::repaintDuringLayoutIfMoved(v38, (const WebCore::LayoutRect *)&v216);
      }
LABEL_157:
      ++v34;
    }
    while (v34 != *(_QWORD *)v215);
    v2 = v212;
    if (v213)
    {
      v181 = *((unsigned int *)this + 57);
      v182 = v17;
      do
      {
        if (v182 >= v181)
        {
          __break(0xC471u);
          JUMPOUT(0x194322BD0);
        }
        v183 = *((_QWORD *)this + 27);
        v184 = *(_DWORD *)(v183 + 4 * v182);
        v26 = __OFADD__(v184, v213);
        v185 = v184 + v213;
        v186 = (v184 >> 31) + 0x7FFFFFFF;
        if (!v26)
          v186 = v185;
        *(_DWORD *)(v183 + 4 * v182++) = v186;
      }
      while (v212 >= v182);
      v156 = 0;
      do
      {
        v145 = WebCore::RenderTableSection::cellAt(this, v16, v156);
        if (*(_DWORD *)(v145 + 12))
        {
          v146 = 0;
          v147 = *(_QWORD *)v145;
          do
          {
            v148 = *(_DWORD **)(v147 + 8 * v146);
            v149 = ((v148[31] >> 13) & 6) - 2;
            v150 = v148 + 40;
            v151 = v148 + 41;
            if (v149 >= 4)
              v152 = v151;
            else
              v152 = v150;
            v153 = *v152;
            v26 = __OFADD__(v153, v213);
            v154 = v153 + v213;
            v155 = (v153 >> 31) + 0x7FFFFFFF;
            if (!v26)
              v155 = v154;
            if (v149 < 4)
              v151 = v150;
            *v151 = v155;
            ++v146;
          }
          while (v146 < *(unsigned int *)(v145 + 12));
        }
        ++v156;
      }
      while (v156 != v215[0]);
    }
LABEL_169:
    ++v16;
    ++v17;
  }
  while (v16 != v2);
LABEL_199:
  if (*((_DWORD *)this + 57) <= v2)
  {
    __break(0xC471u);
    JUMPOUT(0x194322BE4);
  }
  v157 = (char *)this + 160;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v157 = (char *)this + 164;
  *(_DWORD *)v157 = *(_DWORD *)(*((_QWORD *)this + 27) + 4 * v2);
  WebCore::RenderLayerModelObject::updateLayerTransform(this, v15);
  WebCore::RenderTableSection::computeOverflowFromCells(this, (void *)v2, v215[0]);
  if (v210)
  {
    WebCore::LocalFrameViewLayoutContext::popLayoutState(v209 + 336, v158);
    if (v211)
      --*(_DWORD *)(v209 + 492);
  }
}

WTF *WebCore::RenderLayerModelObject::updateLayerTransform(WTF *this, void *a2)
{
  uint64_t v2;
  WTF **v3;
  WTF *v4;
  unsigned int v5;
  WTF **v6;
  int v7;
  _BOOL4 v8;
  WTF *v9;
  WTF *v10;
  _QWORD *v11;
  unint64_t v12;
  char v13;
  float v14;
  float v15;
  float v16;
  float v17;
  WebCore::RenderObject *v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  int v48;
  BOOL v49;
  int v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  BOOL v59;
  int v60;
  int v61;
  int v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  WebCore::RenderView *v79;
  BOOL v80;
  double *v81;
  uint64_t v82;
  void *v83;
  WTF *v84;
  WTF *v85;
  _QWORD *v86;
  WTF *v87;
  void *v88;
  WTF **v89;
  WebCore::RenderLayerCompositor *v90;
  WebCore::RenderLayerCompositor *v91;
  WTF *v92;
  void *v93;
  WTF **v94;
  WebCore::RenderObject *v95;
  float v96;
  _BOOL4 v97;
  double v98;
  double v99;
  double v100;
  int v101;
  double v102;
  int v103;
  double v104;
  int v105;
  double v106;
  int v107;
  uint64_t v108;
  float v109;
  uint64_t v110;
  uint64_t v111;
  float *v112;
  int v113;
  double v114;
  double v115;
  double v116;
  double v117;
  int v118;
  int v119;
  double v120;
  double v121;
  double v122;
  double v123;
  int v124;
  int v125;
  double v126;
  double v127;
  double v128;
  double v129;
  float v130;
  float v131;
  WTF *v132;
  void *v133;
  WTF **v134;
  WebCore::RenderObject *v135;
  _BOOL4 isSVGLayerAwareRenderer;
  float v137;
  float v138;
  float v139;
  double v140;
  double v141;
  float v142;
  float v143;
  float v144;
  float v145;
  _DWORD v146[4];

  v2 = (uint64_t)this;
  if (this)
  {
    if ((*((_BYTE *)this + 45) & 4) != 0)
    {
      this = *(WTF **)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 328);
      if (this)
      {
        this = (WTF *)WebCore::MotionPath::needsUpdateAfterContainingBlockLayout((uint64_t)this);
        if ((_DWORD)this)
        {
          this = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v2);
          if (this)
            return WebCore::LocalFrameViewLayoutContext::setBoxNeedsTransformUpdateAfterContainerLayout((WebCore::LocalFrameViewLayoutContext *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40)+ 8)+ 1944)+ 248)+ 336), (WTF **)v2, this);
        }
      }
    }
  }
  if ((*(_BYTE *)(v2 + 21) & 0x80) == 0)
    return this;
  v3 = *(WTF ***)(v2 + 144);
  v4 = v3[4];
  v5 = *((_DWORD *)v4 + 5);
  if ((v5 & 0x20000) != 0)
  {
    if ((*((_BYTE *)v4 + 45) & 2) != 0)
      v4 = *(WTF **)(*((_QWORD *)v4 + 4) + 8);
    v82 = *((_QWORD *)v4 + 11);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v82 + 32) + 40) + 20)
      || (v86 = *(_QWORD **)(v82 + 40), v86[41])
      || v86[38]
      || v86[39]
      || v86[40])
    {
      v7 = 1;
    }
    else
    {
      v7 = (v5 >> 20) & 1;
    }
    v6 = v3 + 25;
    this = v3[25];
    if (!this)
    {
      if (!v7)
        return this;
      v84 = (WTF *)WTF::fastMalloc((WTF *)0x80);
      *((_OWORD *)v84 + 4) = xmmword_1969FCC00;
      *((_OWORD *)v84 + 5) = unk_1969FCC10;
      *((_OWORD *)v84 + 6) = xmmword_1969FCC20;
      *((_OWORD *)v84 + 7) = unk_1969FCC30;
      *(_OWORD *)v84 = constinit_103;
      *((_OWORD *)v84 + 1) = *(_OWORD *)algn_1969FCBD0;
      *((_OWORD *)v84 + 2) = xmmword_1969FCBE0;
      *((_OWORD *)v84 + 3) = unk_1969FCBF0;
      v85 = *v6;
      *v6 = v84;
      if (v85)
        WTF::fastFree(v85, v83);
      WebCore::RenderLayer::clearClipRectsIncludingDescendants((WTF *)v3, (void *)4);
      v8 = 0;
      this = v3[25];
      goto LABEL_19;
    }
  }
  else
  {
    v6 = v3 + 25;
    this = v3[25];
    if (!this)
      return this;
    LOBYTE(v7) = 0;
  }
  v8 = *((double *)this + 2) != 0.0
    || *((double *)this + 3) != 0.0
    || *((double *)this + 6) != 0.0
    || *((double *)this + 7) != 0.0
    || *((double *)this + 8) != 0.0
    || *((double *)this + 9) != 0.0
    || *((double *)this + 10) != 1.0
    || *((double *)this + 11) != 0.0
    || *((double *)this + 14) != 0.0
    || *((double *)this + 15) != 1.0;
  if ((v7 & 1) == 0)
  {
    v3[25] = 0;
    WTF::fastFree(this, a2);
    this = WebCore::RenderLayer::clearClipRectsIncludingDescendants((WTF *)v3, (void *)4);
    goto LABEL_81;
  }
LABEL_19:
  *(_QWORD *)this = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0x3FF0000000000000;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0x3FF0000000000000;
  v9 = v3[25];
  v10 = v3[4];
  v11 = (_QWORD *)((char *)v10 + 80);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 11) + 32) + 40) + 44);
  if (v12 >= 5)
    v13 = 2;
  else
    v13 = 0x705020406uLL >> (8 * v12);
  v14 = (*(float (**)(WTF *, _QWORD))(*(_QWORD *)v10 + 752))(v10, v13 & 7);
  v18 = v3[4];
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v18 + 3) + 8) + 40) + 8) + 680)
                  + 680);
  v20 = v14 * 64.0;
  v21 = v15;
  v22 = v16;
  v23 = v17;
  if (v20 >= 2147483650.0
    || (v24 = v21 * 64.0, v21 * 64.0 >= 2147483650.0)
    || (v25 = v22 * 64.0, v22 * 64.0 >= 2147483650.0)
    || ((v26 = v23 * 64.0, v23 * 64.0 < 2147483650.0) ? (v27 = v20 <= -2147483650.0) : (v27 = 1),
        !v27 ? (v28 = v24 <= -2147483650.0) : (v28 = 1),
        !v28 ? (v29 = v25 <= -2147483650.0) : (v29 = 1),
        !v29 ? (v30 = v26 <= -2147483650.0) : (v30 = 1),
        v30))
  {
    v98 = v14;
    v99 = v15;
    v141 = v16;
    if ((v19 & 0x800000000000) != 0)
    {
      v134 = v6;
      v135 = v3[4];
      v143 = v16;
      v145 = v15;
      v137 = v14;
      v139 = v17;
      isSVGLayerAwareRenderer = WebCore::RenderObject::isSVGLayerAwareRenderer(v18);
      v72 = v137;
      v78 = v139;
      v75 = v143;
      v71 = v145;
      v18 = v135;
      v6 = v134;
      if (isSVGLayerAwareRenderer && *((_BYTE *)v18 + 46) != 83)
        goto LABEL_75;
    }
    v100 = v98 * 64.0;
    if (v98 * 64.0 >= 2147483650.0)
    {
      v101 = 0x7FFFFFFF;
    }
    else if (v100 <= -2147483650.0)
    {
      v101 = 0x80000000;
    }
    else
    {
      v101 = (int)v100;
    }
    v102 = v99 * 64.0;
    if (v99 * 64.0 >= 2147483650.0)
    {
      v103 = 0x7FFFFFFF;
    }
    else if (v102 <= -2147483650.0)
    {
      v103 = 0x80000000;
    }
    else
    {
      v103 = (int)v102;
    }
    v104 = v141 * 64.0;
    if (v141 * 64.0 >= 2147483650.0)
    {
      v105 = 0x7FFFFFFF;
    }
    else if (v104 <= -2147483650.0)
    {
      v105 = 0x80000000;
    }
    else
    {
      v105 = (int)v104;
    }
    v106 = v23 * 64.0;
    if (v23 * 64.0 >= 2147483650.0)
    {
      v107 = 0x7FFFFFFF;
    }
    else if (v106 <= -2147483650.0)
    {
      v107 = 0x80000000;
    }
    else
    {
      v107 = (int)v106;
    }
    v108 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v18 + 3) + 8) + 40) + 8) + 528);
    v109 = 1.0;
    if (v108)
    {
      v110 = *(_QWORD *)(v108 + 8);
      if (v110)
      {
        v111 = *(_QWORD *)(v110 + 24);
        if (v111)
        {
          v112 = *(float **)(v111 + 8);
          if (v112)
          {
            v113 = (*(_DWORD *)v112)++;
            v109 = v112[91];
            if (v113)
            {
              *(_DWORD *)v112 = v113;
            }
            else
            {
              WebCore::Page::~Page((WebCore::Page *)v112);
              WTF::fastFree(v132, v133);
            }
          }
        }
      }
    }
    v114 = (double)v101 * 0.015625;
    if (v114 < 0.0)
      v115 = round((v114 + (double)-v101) * v109) / v109 - (double)-v101;
    else
      v115 = round(v114 * v109) / v109;
    v116 = (double)v103 * 0.015625;
    if (v116 < 0.0)
      v117 = round((v116 + (double)-v103) * v109) / v109 - (double)-v103;
    else
      v117 = round(v116 * v109) / v109;
    if (v101 <= 0)
      v118 = -(-v101 & 0x3F);
    else
      v118 = v101 & 0x3F;
    v119 = v118 + v105;
    if (__OFADD__(v118, v105))
      v119 = (v118 >> 31) + 0x7FFFFFFF;
    v120 = (double)v119 * 0.015625;
    if (v120 < 0.0)
      v121 = round((v120 + (double)-v119) * v109) / v109 - (double)-v119;
    else
      v121 = round(v120 * v109) / v109;
    v122 = (double)v118 * 0.015625;
    if (v122 < 0.0)
      v123 = round((v122 + (double)-v118) * v109) / v109 - (double)-v118;
    else
      v123 = round(v122 * v109) / v109;
    if (v103 <= 0)
      v124 = -(-v103 & 0x3F);
    else
      v124 = v103 & 0x3F;
    v125 = v124 + v107;
    if (__OFADD__(v124, v107))
      v125 = (v124 >> 31) + 0x7FFFFFFF;
    v126 = (double)v125 * 0.015625;
    if (v126 < 0.0)
      v127 = round((v126 + (double)-v125) * v109) / v109 - (double)-v125;
    else
      v127 = round(v126 * v109) / v109;
    v128 = (double)v124 * 0.015625;
    if (v128 < 0.0)
      v129 = round((v128 + (double)-v124) * v109) / v109 - (double)-v124;
    else
      v129 = round(v128 * v109) / v109;
    v71 = v117;
    v72 = v115;
    v130 = v121;
    v131 = v123;
    v75 = v130 - v131;
    v76 = v127;
    v77 = v129;
  }
  else
  {
    if ((v19 & 0x800000000000) != 0)
    {
      v94 = v6;
      v95 = v3[4];
      v142 = v16;
      v144 = v15;
      v96 = v14;
      v138 = v17;
      v140 = v14 * 64.0;
      v97 = WebCore::RenderObject::isSVGLayerAwareRenderer(v95);
      v20 = v140;
      v78 = v138;
      v75 = v142;
      v71 = v144;
      v18 = v95;
      v6 = v94;
      if (v97)
      {
        v72 = v96;
        if (*((_BYTE *)v18 + 46) != 83)
          goto LABEL_75;
      }
    }
    v31 = (int)v20;
    v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v18 + 3) + 8) + 40) + 8) + 528);
    v33 = 1.0;
    if (v32)
    {
      v34 = *(_QWORD *)(v32 + 8);
      if (v34)
      {
        v35 = *(_QWORD *)(v34 + 24);
        if (v35)
        {
          v36 = *(float **)(v35 + 8);
          if (v36)
          {
            v37 = (*(_DWORD *)v36)++;
            v33 = v36[91];
            if (v37)
            {
              *(_DWORD *)v36 = v37;
            }
            else
            {
              WebCore::Page::~Page((WebCore::Page *)v36);
              WTF::fastFree(v87, v88);
            }
          }
        }
      }
    }
    v38 = (int)v24;
    v39 = (int)v25;
    v40 = (int)v26;
    v41 = (double)v31 * 0.015625;
    if (v41 < 0.0)
      v42 = round((v41 + (double)-v31) * v33) / v33 - (double)-v31;
    else
      v42 = round(v41 * v33) / v33;
    v43 = (double)v38 * 0.015625;
    v44 = v33;
    v45 = round((v43 + (double)-v38) * v33) / v33 - (double)-v38;
    v46 = round(v43 * v33) / v33;
    if (v43 >= 0.0)
      v47 = v46;
    else
      v47 = v45;
    if (v31 <= 0)
      v48 = -(-v31 & 0x3F);
    else
      v48 = v31 & 0x3F;
    v49 = __OFADD__(v48, v39);
    v50 = v48 + v39;
    if (v49)
      v50 = (v48 >> 31) + 0x7FFFFFFF;
    v51 = (double)v50 * 0.015625;
    v52 = round((v51 + (double)-v50) * v44) / v44 - (double)-v50;
    v53 = round(v51 * v44) / v44;
    if (v51 >= 0.0)
      v54 = v53;
    else
      v54 = v52;
    v55 = (double)v48 * 0.015625;
    v56 = round((v55 + (double)-v48) * v44) / v44 - (double)-v48;
    v57 = round(v55 * v44) / v44;
    if (v55 >= 0.0)
      v58 = v57;
    else
      v58 = v56;
    v59 = -v38 < 0;
    v60 = -v38 & 0x3F;
    v61 = (int)v24 & 0x3F;
    if (!v59)
      v61 = -v60;
    v49 = __OFADD__(v61, v40);
    v62 = v61 + v40;
    if (v49)
      v62 = (v61 >> 31) + 0x7FFFFFFF;
    v63 = (double)v62 * 0.015625;
    v64 = round((v63 + (double)-v62) * v44) / v44 - (double)-v62;
    v65 = round(v63 * v44) / v44;
    if (v63 >= 0.0)
      v66 = v65;
    else
      v66 = v64;
    v67 = (double)v61 * 0.015625;
    v68 = round((v67 + (double)-v61) * v44) / v44 - (double)-v61;
    v69 = round(v67 * v44) / v44;
    if (v67 >= 0.0)
      v70 = v69;
    else
      v70 = v68;
    v71 = v47;
    v72 = v42;
    v73 = v54;
    v74 = v58;
    v75 = v73 - v74;
    v76 = v66;
    v77 = v70;
  }
  v78 = v76 - v77;
LABEL_75:
  *(float *)v146 = v72;
  *(float *)&v146[1] = v71;
  *(float *)&v146[2] = v75;
  *(float *)&v146[3] = v78;
  (*(void (**)(WTF *, WTF *, _QWORD *, _DWORD *, uint64_t))(*(_QWORD *)v3[4] + 864))(v3[4], v9, v11, v146, 31);
  v79 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3[4] + 3) + 8) + 40) + 8)
                                + 1944);
  this = (WTF *)*((_QWORD *)v79 + 50);
  if (!this)
  {
    v89 = v6;
    v90 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    this = (WTF *)WebCore::RenderLayerCompositor::RenderLayerCompositor(v90, v79);
    v91 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v79 + 50);
    *((_QWORD *)v79 + 50) = this;
    if (v91)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v91);
      WTF::fastFree(v92, v93);
      this = (WTF *)*((_QWORD *)v79 + 50);
    }
    v6 = v89;
  }
  if (*((_BYTE *)this + 132))
    v80 = (*((_DWORD *)this + 32) & 1) == 0;
  else
    v80 = 1;
  if (v80)
  {
    *((_QWORD *)v9 + 2) = 0;
    *((_QWORD *)v9 + 3) = 0;
    *((_OWORD *)v9 + 3) = 0u;
    *((_OWORD *)v9 + 4) = 0u;
    *((_OWORD *)v9 + 5) = xmmword_1968A14B0;
    *((_OWORD *)v9 + 7) = xmmword_1968A14C0;
  }
LABEL_81:
  v81 = (double *)*v6;
  if (*v6)
  {
    if (v81[2] == 0.0
      && v81[3] == 0.0
      && v81[6] == 0.0
      && v81[7] == 0.0
      && v81[8] == 0.0
      && v81[9] == 0.0
      && v81[10] == 1.0
      && v81[11] == 0.0
      && v81[14] == 0.0)
    {
      if (v8 == (v81[15] != 1.0))
        return this;
LABEL_110:
      WebCore::RenderLayer::dirty3DTransformedDescendantStatus(v3);
      return (WTF *)WebCore::RenderLayer::setNeedsPostLayoutCompositingUpdateOnAncestors((uint64_t)v3);
    }
    if (!v8)
      goto LABEL_110;
  }
  else if (v8)
  {
    goto LABEL_110;
  }
  return this;
}

double WebCore::RenderLayer::updateTransformFromStyle(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8;
  unint64_t v9;
  char v10;
  int v11;
  int v12;
  int v13;
  const WebCore::RenderLayerModelObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  double result;
  WebCore::RenderView *v20;
  uint64_t v21;
  BOOL v22;
  WebCore::RenderLayerCompositor *v23;
  WebCore::RenderLayerCompositor *v24;
  WTF *v25;
  void *v26;
  _DWORD v27[4];
  _DWORD v28[4];

  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 32) + 40) + 44);
  if (v9 >= 5)
    v10 = 2;
  else
    v10 = 0x705020406uLL >> (8 * v9);
  v27[0] = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 752))(v8, v10 & 7);
  v27[1] = v11;
  v27[2] = v12;
  v27[3] = v13;
  WebCore::snapRectToDevicePixelsIfNeeded((WebCore::Page *)v27, *(const WebCore::FloatRect **)(a1 + 32), v14);
  v28[0] = v15;
  v28[1] = v16;
  v28[2] = v17;
  v28[3] = v18;
  (*(void (**)(_QWORD, uint64_t, uint64_t, _DWORD *, _QWORD))(**(_QWORD **)(a1 + 32) + 864))(*(_QWORD *)(a1 + 32), a2, a3, v28, a4);
  v20 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8)
                                                        + 40)
                                            + 8)
                                + 1944);
  v21 = *((_QWORD *)v20 + 50);
  if (!v21)
  {
    v23 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v21 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v23, v20);
    v24 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v20 + 50);
    *((_QWORD *)v20 + 50) = v21;
    if (v24)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v24);
      WTF::fastFree(v25, v26);
      v21 = *((_QWORD *)v20 + 50);
    }
  }
  if (*(_BYTE *)(v21 + 132))
    v22 = (*(_DWORD *)(v21 + 128) & 1) == 0;
  else
    v22 = 1;
  if (v22)
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = xmmword_1968A14B0;
    result = 0.0;
    *(_OWORD *)(a2 + 112) = xmmword_1968A14C0;
  }
  return result;
}

float WebCore::RenderBox::referenceBoxRect(WebCore::RenderBox *a1, int a2)
{
  int v3;

  if ((a2 - 6) < 2)
    return 0.0;
  switch(a2)
  {
    case 1:
      v3 = WebCore::RenderBox::marginBoxRect(a1);
      break;
    case 3:
      v3 = WebCore::RenderBox::paddingBoxRect(a1);
      break;
    case 4:
    case 5:
      v3 = WebCore::RenderBox::contentBoxRect(a1);
      break;
    default:
      return 0.0;
  }
  return (float)v3 * 0.015625;
}

void WebCore::RenderBox::applyTransform(WebCore::MotionPath *a1, float64x2_t *a2, WebCore::RenderStyle *this, __int128 *a4, unsigned __int8 a5)
{
  int v9;
  char v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  WebCore::TranslateTransformOperation *v20;
  uint64_t v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 v29;
  unsigned int v30;
  char v31;
  unsigned int v32;
  int v33;
  unsigned __int8 v34;
  unsigned int v35;
  char v36;
  unsigned int v37;
  int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  float v45;
  BOOL v46;
  BOOL v47;
  float64x2_t v48;
  WebCore::TranslateTransformOperation *v49;
  uint64_t v50;
  double *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  float64x2_t v59;
  float64x2_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  WebCore::TranslateTransformOperation *v68;
  uint64_t v69;
  double *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  WebCore::TranslateTransformOperation *v75;
  uint64_t v76;
  double *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  char v94;
  char v95;
  unsigned int v96[4];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  char v100;
  unsigned int v101;
  unsigned __int8 v102;
  unsigned __int8 v103;
  char v104;
  _QWORD v105[2];

  v89 = *a4;
  LOBYTE(v90) = 0;
  v94 = 0;
  v95 = 0;
  if (a1)
  {
    WebCore::MotionPath::motionPathDataForRenderer(a1, (const WebCore::RenderElement *)a2, v96);
    v92 = v98;
    v93 = v99;
    v94 = v100;
    v90 = *(_OWORD *)v96;
    v91 = v97;
    v9 = *((_BYTE *)a1 + 52) & 7;
    if (v9 == 4 && (*((_BYTE *)a1 + 53) & 1) == 0)
      v10 = 1;
    else
      v10 = (v9 == 4) & *((_BYTE *)a1 + 53);
    v95 = v10;
  }
  v11 = a5;
  if ((a5 & 1) != 0)
  {
    v12 = *((_QWORD *)this + 1);
    v13 = *(_QWORD **)(v12 + 40);
    v14 = v13[38];
    if (v14 && *(double *)(v14 + 40) != 0.0)
      goto LABEL_29;
    v15 = (double *)v13[39];
    if (v15)
    {
      if (v15[2] != 1.0 || v15[3] != 1.0 || v15[4] != 1.0)
        goto LABEL_29;
    }
    v16 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 40);
    v17 = *(unsigned int *)(v16 + 20);
    if ((_DWORD)v17)
    {
      v18 = *(_QWORD **)(v16 + 8);
      v19 = 8 * v17;
      while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v18 + 80))(*v18))
      {
        ++v18;
        v19 -= 8;
        if (!v19)
        {
          v12 = *((_QWORD *)this + 1);
          v13 = *(_QWORD **)(v12 + 40);
          goto LABEL_14;
        }
      }
      v12 = *((_QWORD *)this + 1);
LABEL_29:
      v27 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 40);
      BYTE4(v105[0]) = *(_BYTE *)(v27 + 28);
      v28 = BYTE4(v105[0]);
      v29 = *(_BYTE *)(v27 + 29);
      *(_WORD *)((char *)v105 + 5) = v29;
      v30 = BYTE4(v105[0]) - 2;
      v88 = v11;
      if (v30 >= 9)
      {
        if (BYTE4(v105[0]) == 11)
        {
          LODWORD(v105[0]) = *(_DWORD *)(v27 + 24);
          v32 = v105[0];
          WebCore::Length::ref((int *)v105);
          v31 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
        }
      }
      else
      {
        BYTE6(v105[0]) = *(_BYTE *)(v27 + 30);
        if (BYTE6(v105[0]))
        {
          v32 = *(_DWORD *)(v27 + 24);
          LODWORD(v105[0]) = v32;
          v31 = 1;
        }
        else
        {
          v31 = 0;
          LODWORD(v105[0]) = *(_DWORD *)(v27 + 24);
          v32 = v105[0];
        }
      }
      v104 = 0;
      v102 = *(_BYTE *)(v27 + 36);
      v33 = v102;
      v34 = *(_BYTE *)(v27 + 37);
      v103 = v34;
      v35 = v102 - 2;
      if (v35 >= 9)
      {
        if (v102 == 11)
        {
          v101 = *(_DWORD *)(v27 + 32);
          v37 = v101;
          v61 = v31;
          WebCore::Length::ref((int *)&v101);
          v31 = v61;
          v36 = 0;
        }
        else
        {
          v36 = 0;
          v37 = 0;
        }
      }
      else
      {
        v104 = *(_BYTE *)(v27 + 38);
        v36 = v104;
        if (v104)
        {
          v37 = *(_DWORD *)(v27 + 32);
          v101 = v37;
          v36 = 1;
        }
        else
        {
          v101 = *(_DWORD *)(v27 + 32);
          v37 = v101;
        }
      }
      v96[0] = 0;
      LOBYTE(v96[1]) = v28;
      *(_WORD *)((char *)&v96[1] + 1) = v29;
      if (v30 >= 9)
      {
        if (v28 != 11)
          goto LABEL_42;
      }
      else
      {
        BYTE2(v96[1]) = v31;
      }
      v96[0] = v32;
LABEL_42:
      v96[2] = 0;
      LOBYTE(v96[3]) = v33;
      *(_WORD *)((char *)&v96[3] + 1) = v34;
      if (v35 >= 9)
      {
        v38 = v88;
        if (v33 == 11)
          v96[2] = v37;
      }
      else
      {
        BYTE2(v96[3]) = v36;
        v96[2] = v37;
        v38 = v88;
      }
      v105[0] = *((_QWORD *)&v89 + 1);
      v39 = WebCore::floatPointForLengthPoint(v96, (float *)v105);
      v41 = v40;
      if (LOBYTE(v96[3]) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v96[2]);
      }
      if (LOBYTE(v96[1]) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v96[0]);
      }
      v42 = *((float *)&v89 + 1) + v41;
      v43 = *(float *)&v89 + v39;
      v44 = *((_QWORD *)this + 1);
      v45 = *(float *)(*(_QWORD *)(*(_QWORD *)(v44 + 32) + 40) + 40);
      v46 = v43 == 0.0;
      if (v42 != 0.0)
        v46 = 0;
      v47 = v45 == 0.0 && v46;
      if (!v47)
      {
        v48 = vaddq_f64(a2[7], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a2[3], v42), a2[1], v43), a2[5], v45));
        a2[6] = vaddq_f64(a2[6], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a2[2], v42), *a2, v43), a2[4], v45));
        a2[7] = v48;
      }
      if ((~v38 & 0x1E) != 0)
      {
        if ((v38 & 2) != 0)
        {
          v75 = *(WebCore::TranslateTransformOperation **)(*(_QWORD *)(v44 + 40) + 320);
          if (v75)
          {
            *(_QWORD *)v96 = *((_QWORD *)&v89 + 1);
            WebCore::TranslateTransformOperation::apply(v75, a2, (const WebCore::FloatSize *)v96);
            v44 = *((_QWORD *)this + 1);
          }
        }
        if ((v38 & 4) != 0)
        {
          v76 = *(_QWORD *)(*(_QWORD *)(v44 + 40) + 304);
          if (v76)
          {
            *(_QWORD *)v96 = *((_QWORD *)&v89 + 1);
            WebCore::RotateTransformOperation::apply(v76, a2);
            v44 = *((_QWORD *)this + 1);
          }
        }
        if ((v38 & 8) != 0)
        {
          v77 = *(double **)(*(_QWORD *)(v44 + 40) + 312);
          if (v77)
          {
            WebCore::TransformationMatrix::scale3d(a2, v77[2], v77[3], v77[4]);
            v44 = *((_QWORD *)this + 1);
          }
        }
        if ((v38 & 0x10) != 0)
        {
          v78 = *(_QWORD *)(*(_QWORD *)(v44 + 40) + 328);
          if (v78)
          {
            v96[0] = WebCore::RenderStyle::computeTransformOrigin(this, (const WebCore::FloatRect *)&v89);
            v96[1] = v85;
            v86 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
            v87 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
            v105[0] = *(_QWORD *)(v87 + 440);
            WebCore::MotionPath::applyMotionPathTransform(a2, (uint64_t)&v89, (float *)v96, v78, (_BYTE *)(v87 + 424), (WebCore::Length *)(v87 + 400), (uint64_t)v105, *(unsigned __int8 *)(*(_QWORD *)(v86 + 40) + 44));
            v44 = *((_QWORD *)this + 1);
          }
        }
        v79 = *(_QWORD *)(*(_QWORD *)(v44 + 32) + 40);
        *(_QWORD *)v96 = *((_QWORD *)&v89 + 1);
        if (*(_DWORD *)(v79 + 20))
        {
          v80 = 0;
          do
          {
            v81 = *(_QWORD *)(*(_QWORD *)(v79 + 8) + 8 * v80);
            (*(void (**)(uint64_t, float64x2_t *, unsigned int *))(*(_QWORD *)v81 + 48))(v81, a2, v96);
            ++v80;
          }
          while (v80 < *(unsigned int *)(v79 + 20));
        }
      }
      else
      {
        v49 = *(WebCore::TranslateTransformOperation **)(*(_QWORD *)(v44 + 40) + 320);
        if (v49)
        {
          *(_QWORD *)v96 = *((_QWORD *)&v89 + 1);
          WebCore::TranslateTransformOperation::apply(v49, a2, (const WebCore::FloatSize *)v96);
          v44 = *((_QWORD *)this + 1);
        }
        v50 = *(_QWORD *)(*(_QWORD *)(v44 + 40) + 304);
        if (v50)
        {
          *(_QWORD *)v96 = *((_QWORD *)&v89 + 1);
          WebCore::RotateTransformOperation::apply(v50, a2);
          v44 = *((_QWORD *)this + 1);
        }
        v51 = *(double **)(*(_QWORD *)(v44 + 40) + 312);
        if (v51)
        {
          WebCore::TransformationMatrix::scale3d(a2, v51[2], v51[3], v51[4]);
          v44 = *((_QWORD *)this + 1);
        }
        v52 = *(_QWORD *)(*(_QWORD *)(v44 + 40) + 328);
        if (v52)
        {
          v96[0] = WebCore::RenderStyle::computeTransformOrigin(this, (const WebCore::FloatRect *)&v89);
          v96[1] = v65;
          v66 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
          v67 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
          v105[0] = *(_QWORD *)(v67 + 440);
          WebCore::MotionPath::applyMotionPathTransform(a2, (uint64_t)&v89, (float *)v96, v52, (_BYTE *)(v67 + 424), (WebCore::Length *)(v67 + 400), (uint64_t)v105, *(unsigned __int8 *)(*(_QWORD *)(v66 + 40) + 44));
          v44 = *((_QWORD *)this + 1);
        }
        v53 = *(_QWORD *)(*(_QWORD *)(v44 + 32) + 40);
        *(_QWORD *)v96 = *((_QWORD *)&v89 + 1);
        if (*(_DWORD *)(v53 + 20))
        {
          v54 = 0;
          do
          {
            v55 = *(_QWORD *)(*(_QWORD *)(v53 + 8) + 8 * v54);
            (*(void (**)(uint64_t, float64x2_t *, unsigned int *))(*(_QWORD *)v55 + 48))(v55, a2, v96);
            ++v54;
          }
          while (v54 < *(unsigned int *)(v53 + 20));
        }
      }
      if (!v47)
      {
        v56 = (float)-v43;
        v57 = (float)-v42;
        v58 = (float)-v45;
        v59 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a2[2], v57), *a2, v56), a2[4], v58);
        v60 = vaddq_f64(a2[7], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a2[3], v57), a2[1], v56), a2[5], v58));
        a2[6] = vaddq_f64(a2[6], v59);
        a2[7] = v60;
      }
      return;
    }
LABEL_14:
    if (v13[41])
      goto LABEL_29;
  }
  if ((~v11 & 0x1E) != 0)
  {
    if ((v11 & 2) != 0)
    {
      v68 = *(WebCore::TranslateTransformOperation **)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 320);
      if (v68)
      {
        *(_QWORD *)v96 = *((_QWORD *)&v89 + 1);
        WebCore::TranslateTransformOperation::apply(v68, a2, (const WebCore::FloatSize *)v96);
      }
    }
    if ((v11 & 4) != 0)
    {
      v69 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 304);
      if (v69)
      {
        *(_QWORD *)v96 = *((_QWORD *)&v89 + 1);
        WebCore::RotateTransformOperation::apply(v69, a2);
      }
    }
    if ((v11 & 8) != 0)
    {
      v70 = *(double **)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 312);
      if (v70)
        WebCore::TransformationMatrix::scale3d(a2, v70[2], v70[3], v70[4]);
    }
    if ((v11 & 0x10) != 0)
    {
      v71 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 328);
      if (v71)
      {
        v96[0] = WebCore::RenderStyle::computeTransformOrigin(this, (const WebCore::FloatRect *)&v89);
        v96[1] = v82;
        v83 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
        v84 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
        v105[0] = *(_QWORD *)(v84 + 440);
        WebCore::MotionPath::applyMotionPathTransform(a2, (uint64_t)&v89, (float *)v96, v71, (_BYTE *)(v84 + 424), (WebCore::Length *)(v84 + 400), (uint64_t)v105, *(unsigned __int8 *)(*(_QWORD *)(v83 + 40) + 44));
      }
    }
    v72 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 40);
    *(_QWORD *)v96 = *((_QWORD *)&v89 + 1);
    if (*(_DWORD *)(v72 + 20))
    {
      v73 = 0;
      do
      {
        v74 = *(_QWORD *)(*(_QWORD *)(v72 + 8) + 8 * v73);
        (*(void (**)(uint64_t, float64x2_t *, unsigned int *))(*(_QWORD *)v74 + 48))(v74, a2, v96);
        ++v73;
      }
      while (v73 < *(unsigned int *)(v72 + 20));
    }
  }
  else
  {
    v20 = *(WebCore::TranslateTransformOperation **)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 320);
    if (v20)
    {
      *(_QWORD *)v96 = *((_QWORD *)&v89 + 1);
      WebCore::TranslateTransformOperation::apply(v20, a2, (const WebCore::FloatSize *)v96);
    }
    v21 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 304);
    if (v21)
    {
      *(_QWORD *)v96 = *((_QWORD *)&v89 + 1);
      WebCore::RotateTransformOperation::apply(v21, a2);
    }
    v22 = *(double **)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 312);
    if (v22)
      WebCore::TransformationMatrix::scale3d(a2, v22[2], v22[3], v22[4]);
    v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 328);
    if (v23)
    {
      v96[0] = WebCore::RenderStyle::computeTransformOrigin(this, (const WebCore::FloatRect *)&v89);
      v96[1] = v62;
      v63 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
      v64 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
      v105[0] = *(_QWORD *)(v64 + 440);
      WebCore::MotionPath::applyMotionPathTransform(a2, (uint64_t)&v89, (float *)v96, v23, (_BYTE *)(v64 + 424), (WebCore::Length *)(v64 + 400), (uint64_t)v105, *(unsigned __int8 *)(*(_QWORD *)(v63 + 40) + 44));
    }
    v24 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 40);
    *(_QWORD *)v96 = *((_QWORD *)&v89 + 1);
    if (*(_DWORD *)(v24 + 20))
    {
      v25 = 0;
      do
      {
        v26 = *(_QWORD *)(*(_QWORD *)(v24 + 8) + 8 * v25);
        (*(void (**)(uint64_t, float64x2_t *, unsigned int *))(*(_QWORD *)v26 + 48))(v26, a2, v96);
        ++v25;
      }
      while (v25 < *(unsigned int *)(v24 + 20));
    }
  }
}

WebCore::RenderStyle *WebCore::RenderStyle::applyCSSTransform(WebCore::RenderStyle *result, float64x2_t *a2, WebCore::FloatRect *a3, char a4)
{
  WebCore::TranslateTransformOperation *v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  WebCore::RenderStyle *v13;
  WebCore::RenderStyle *v14;
  WebCore::FloatRect *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::RenderStyle *v19;
  WebCore::RenderStyle *v20;
  WebCore::FloatRect *v21;
  WebCore::FloatRect *v22;
  WebCore::FloatRect *v23;
  uint64_t v24;
  uint64_t v25;

  if ((a4 & 2) != 0)
  {
    v6 = *(WebCore::TranslateTransformOperation **)(*(_QWORD *)(*((_QWORD *)result + 1) + 40) + 320);
    if (v6)
    {
      v25 = *((_QWORD *)a3 + 1);
      v21 = a3;
      v13 = result;
      WebCore::TranslateTransformOperation::apply(v6, a2, (const WebCore::FloatSize *)&v25);
      result = v13;
      a3 = v21;
    }
  }
  if ((a4 & 4) != 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 1) + 40) + 304);
    if (v7)
    {
      v25 = *((_QWORD *)a3 + 1);
      v22 = a3;
      v14 = result;
      WebCore::RotateTransformOperation::apply(v7, a2);
      result = v14;
      a3 = v22;
    }
  }
  if ((a4 & 8) != 0)
  {
    v8 = *(double **)(*(_QWORD *)(*((_QWORD *)result + 1) + 40) + 312);
    if (v8)
    {
      v19 = result;
      v15 = a3;
      WebCore::TransformationMatrix::scale3d(a2, v8[2], v8[3], v8[4]);
      result = v19;
      a3 = v15;
    }
  }
  if ((a4 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 1) + 40) + 328);
    if (v9)
    {
      v20 = result;
      v23 = a3;
      LODWORD(v25) = WebCore::RenderStyle::computeTransformOrigin(result, a3);
      HIDWORD(v25) = v16;
      v17 = *(_QWORD *)(*((_QWORD *)v20 + 1) + 32);
      v18 = *(_QWORD *)(*((_QWORD *)v20 + 1) + 40);
      v24 = *(_QWORD *)(v18 + 440);
      WebCore::MotionPath::applyMotionPathTransform(a2, (uint64_t)v23, (float *)&v25, v9, (_BYTE *)(v18 + 424), (WebCore::Length *)(v18 + 400), (uint64_t)&v24, *(unsigned __int8 *)(*(_QWORD *)(v17 + 40) + 44));
      result = v20;
      a3 = v23;
    }
  }
  v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 1) + 32) + 40);
  v25 = *((_QWORD *)a3 + 1);
  if (*(_DWORD *)(v10 + 20))
  {
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v11);
      result = (WebCore::RenderStyle *)(*(uint64_t (**)(uint64_t, float64x2_t *, uint64_t *))(*(_QWORD *)v12 + 48))(v12, a2, &v25);
      ++v11;
    }
    while (v11 < *(unsigned int *)(v10 + 20));
  }
  return result;
}

void WebCore::MotionPath::motionPathDataForRenderer(WebCore::MotionPath *this@<X0>, const WebCore::RenderElement *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  WebCore::RenderObject *v4;
  const WebCore::RenderObject *v5;
  const WebCore::FloatRect *v6;
  int v7;
  int v8;
  int v9;
  float v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v17;
  _BYTE v18[16];
  _BYTE v19[16];
  float32x4_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v20 = 0uLL;
  v21 = 0u;
  v22 = 0u;
  v23 = 0uLL;
  if ((*((_BYTE *)this + 45) & 0x10) == 0)
    goto LABEL_3;
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 328);
  if (!v3)
    goto LABEL_3;
  v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 328);
  v14 = a3;
  if (*(_DWORD *)(v3 + 12) == 1
    && (*(unsigned int (**)(_QWORD, const WebCore::RenderElement *))(**(_QWORD **)(v15 + 24) + 24))(*(_QWORD *)(v15 + 24), a2) == 1|| (v4 = WebCore::RenderObject::containingBlock(this)) == 0)
  {
    a3 = v14;
LABEL_3:
    *a3 = 0;
    a3[64] = 0;
    return;
  }
  v5 = v4;
  WebCore::containingBlockRectForRenderer(&v20, this, (uint64_t)v4, v15);
  LODWORD(v23) = WebCore::offsetFromContainer(this, v5, (WebCore::RenderBlock *)&v20, v6);
  DWORD1(v23) = v7;
  WebCore::LengthPoint::LengthPoint((WebCore::Length *)v19, *(_QWORD *)(*((_QWORD *)this + 11) + 40) + 408);
  v8 = *(_DWORD *)(v15 + 12);
  if (v8 == 1)
  {
    DWORD2(v23) = WebCore::MotionPath::motionPathDataForRenderer(WebCore::RenderElement const&)::$_0::operator()(v15, (uint64_t)this, v19, (float32x2_t *)&v20, (uint64_t)v5);
    HIDWORD(v23) = v9;
    v8 = *(_DWORD *)(v15 + 12);
  }
  if (v8 == 3)
  {
    WebCore::LengthPoint::LengthPoint((WebCore::Length *)v18, v15 + 28);
    if (v18[4])
    {
      v17 = v20.i64[1];
      v10 = WebCore::floatPointForLengthPoint(v18, (float *)&v17);
    }
    else
    {
      v10 = WebCore::MotionPath::motionPathDataForRenderer(WebCore::RenderElement const&)::$_0::operator()(v15, (uint64_t)this, v19, (float32x2_t *)&v20, (uint64_t)v5);
    }
    *((_QWORD *)&v23 + 1) = __PAIR64__(v11, LODWORD(v10));
    WebCore::LengthSize::~LengthSize((WebCore::LengthSize *)v18);
  }
  v12 = v21;
  *(float32x4_t *)v14 = v20;
  *((_OWORD *)v14 + 1) = v12;
  v13 = v23;
  *((_OWORD *)v14 + 2) = v22;
  *((_OWORD *)v14 + 3) = v13;
  v14[64] = 1;
  WebCore::LengthSize::~LengthSize((WebCore::LengthSize *)v19);
}

BOOL WebCore::TranslateTransformOperation::apply(WebCore::TranslateTransformOperation *this, float64x2_t *a2, const WebCore::FloatSize *a3)
{
  float *v3;
  float v4;
  float *v5;
  float v6;
  double v7;
  double v8;
  float *v9;
  float v10;
  double v11;
  float64x2_t v12;
  float64x2_t v13;
  float v15;
  float v16;
  float v17;
  float v18;
  double v19;
  const WebCore::FloatSize *v20;
  float v21;
  double v22;
  WebCore::TransformationMatrix *v23;
  WebCore::TransformationMatrix *v24;
  WebCore::TransformationMatrix *v25;
  WebCore::TranslateTransformOperation *v26;
  WebCore::TranslateTransformOperation *v27;
  WebCore::TranslateTransformOperation *v28;

  v3 = (float *)((char *)this + 16);
  v4 = *(float *)a3;
  switch(*((_BYTE *)this + 20))
  {
    case 0:
    case 1:
    case 9:
      break;
    case 3:
      v15 = *((float *)this + 4);
      if (!*((_BYTE *)this + 22))
        v15 = (float)SLODWORD(v15);
      v4 = (float)(v4 * v15) / 100.0;
      break;
    case 4:
      if (*((_BYTE *)this + 22))
        v4 = *v3;
      else
        v4 = (float)*(int *)v3;
      break;
    case 0xB:
      v23 = (WebCore::TransformationMatrix *)a2;
      v26 = this;
      v20 = a3;
      WebCore::Length::nonNanCalculatedValue((WebCore::TranslateTransformOperation *)((char *)this + 16), v4);
      a3 = v20;
      a2 = (float64x2_t *)v23;
      this = v26;
      break;
    default:
      v4 = 0.0;
      break;
  }
  v5 = (float *)((char *)this + 24);
  v6 = *((float *)a3 + 1);
  switch(*((_BYTE *)this + 28))
  {
    case 0:
    case 1:
    case 9:
      break;
    case 3:
      v16 = *((float *)this + 6);
      if (!*((_BYTE *)this + 30))
        v16 = (float)SLODWORD(v16);
      v6 = (float)(v6 * v16) / 100.0;
      break;
    case 4:
      if (*((_BYTE *)this + 30))
        v6 = *v5;
      else
        v6 = (float)*(int *)v5;
      break;
    case 0xB:
      v27 = this;
      v21 = v4;
      v24 = (WebCore::TransformationMatrix *)a2;
      WebCore::Length::nonNanCalculatedValue((WebCore::TranslateTransformOperation *)((char *)this + 24), v6);
      a2 = (float64x2_t *)v24;
      this = v27;
      v6 = v18;
      v4 = v21;
      break;
    default:
      v6 = 0.0;
      break;
  }
  v7 = v4;
  v8 = v6;
  v9 = (float *)((char *)this + 32);
  v10 = 1.0;
  switch(*((_BYTE *)this + 36))
  {
    case 0:
    case 1:
    case 9:
      break;
    case 3:
      v17 = *((float *)this + 8);
      if (!*((_BYTE *)this + 38))
        v17 = (float)*((int *)this + 8);
      v10 = v17 / 100.0;
      break;
    case 4:
      if (*((_BYTE *)this + 38))
        v10 = *v9;
      else
        v10 = (float)*(int *)v9;
      break;
    case 0xB:
      v25 = (WebCore::TransformationMatrix *)a2;
      v28 = this;
      v19 = v6;
      v22 = v7;
      WebCore::Length::nonNanCalculatedValue((WebCore::TranslateTransformOperation *)((char *)this + 32), 1.0);
      v8 = v19;
      v7 = v22;
      a2 = (float64x2_t *)v25;
      this = v28;
      break;
    default:
      v10 = 0.0;
      break;
  }
  v11 = v10;
  v12 = vaddq_f64(a2[6], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a2[2], v8), *a2, v7), a2[4], v11));
  v13 = vaddq_f64(a2[7], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a2[3], v8), a2[1], v7), a2[5], v11));
  a2[6] = v12;
  a2[7] = v13;
  return *((_BYTE *)this + 20) == 3 || *((_BYTE *)this + 28) == 3;
}

WebCore::Page *WebCore::snapRectToDevicePixelsIfNeeded(WebCore::Page *this, const WebCore::FloatRect *a2, const WebCore::RenderLayerModelObject *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  WTF *v7;
  void *v8;
  WebCore::Page *v9;
  const WebCore::FloatRect *v10;
  _BOOL4 isSVGLayerAwareRenderer;
  _BOOL4 v12;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) == 0
    || (v9 = this,
        v10 = a2,
        isSVGLayerAwareRenderer = WebCore::RenderObject::isSVGLayerAwareRenderer(a2),
        a2 = v10,
        v12 = isSVGLayerAwareRenderer,
        this = v9,
        !v12)
    || *((_BYTE *)v10 + 46) == 83)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 528);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 24);
        if (v5)
        {
          this = *(WebCore::Page **)(v5 + 8);
          if (this)
          {
            v6 = (*(_DWORD *)this)++;
            if (v6)
            {
              *(_DWORD *)this = v6;
            }
            else
            {
              WebCore::Page::~Page(this);
              return (WebCore::Page *)WTF::fastFree(v7, v8);
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::TransformOperation::isAffectedByTransformOrigin(WebCore::TransformOperation *this)
{
  return 0;
}

void WebCore::RenderTableSection::computeOverflowFromCells(WebCore::RenderTableSection *this, void *a2, unsigned int a3)
{
  unsigned int v4;
  WTF *v6;
  WTF **v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const WebCore::RenderBox *v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  int v34;
  void *v35;
  void *v36;
  uint64_t v37;
  WTF **v38;
  WTF *v39;
  WebCore::RenderFragmentedFlow *v40;
  _DWORD *v41;
  uint64_t v42;
  _QWORD v43[3];

  v4 = a2;
  v6 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v40 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(WebCore::RenderTableSection *))(*(_QWORD *)this + 648))(this);
    if (v40)
      WebCore::RenderFragmentedFlow::clearFragmentsOverflow(v40, this);
  }
  v41 = (_DWORD *)((char *)this + 256);
  v7 = (WTF **)*((_QWORD *)this + 32);
  if (v7)
  {
    *(_QWORD *)v41 = 0;
    v37 = *((unsigned int *)v7 - 1);
    if ((_DWORD)v37)
    {
      v38 = v7;
      do
      {
        v39 = *v38;
        if (*v38 != (WTF *)-1)
        {
          *v38 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 1)
              WTF::fastFree(v39, a2);
            else
              --*(_DWORD *)v39;
          }
        }
        ++v38;
        --v37;
      }
      while (v37);
    }
    WTF::fastFree((WTF *)(v7 - 2), a2);
    v8 = *((_QWORD *)this + 32);
    *((_DWORD *)this + 66) = 0;
    if (v8)
    {
      LODWORD(v8) = *(_DWORD *)(v8 - 12);
      if (v8 > 0x7FFFFFFE)
        LODWORD(v8) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v8) = 0;
    *((_DWORD *)this + 66) = 0;
  }
  *((_DWORD *)this + 67) = 2 * v8;
  if (a3 * v4 >= 0x15F9)
    v9 = (float)((float)(a3 * v4) * 0.1);
  else
    v9 = 0;
  if (v4 && a3)
  {
    v10 = 0;
    v11 = v4 - 1;
    v12 = 32 * a3;
    v42 = v4;
    do
    {
      v13 = 0;
      v14 = 0;
      v15 = v10 + 1;
      do
      {
        if (*((_BYTE *)this + 282))
          WebCore::RenderTableSection::recalcCells(this);
        v16 = *((unsigned int *)this + 53);
        if (v10 >= v16)
        {
LABEL_65:
          __break(0xC471u);
          JUMPOUT(0x194324F28);
        }
        v17 = *((_QWORD *)this + 25) + 40 * v10;
        if (v14 >= *(unsigned int *)(v17 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x194324F30);
        }
        v18 = *(_QWORD *)v17 + v13;
        v19 = *(unsigned int *)(v18 + 12);
        if ((_DWORD)v19)
        {
          v20 = *(const WebCore::RenderBox **)(*(_QWORD *)v18 + 8 * v19 - 8);
          v21 = *(unsigned __int8 *)(v18 + 24);
          if (v20 && v21 == 0)
          {
            if (v10 >= v11)
              goto LABEL_30;
            if (*((_BYTE *)this + 282))
            {
              WebCore::RenderTableSection::recalcCells(this);
              v16 = *((unsigned int *)this + 53);
            }
            if (v16 <= v15)
            {
              __break(0xC471u);
              JUMPOUT(0x194324F38);
            }
            v23 = *((_QWORD *)this + 25) + 40 * v15;
            if (v14 >= *(unsigned int *)(v23 + 12))
              goto LABEL_65;
            v24 = *(_QWORD *)v23 + v13;
            v25 = *(unsigned int *)(v24 + 12);
            if (!(_DWORD)v25 || v20 != *(const WebCore::RenderBox **)(*(_QWORD *)v24 + 8 * v25 - 8))
            {
LABEL_30:
              v43[0] = *((_QWORD *)v20 + 19);
              WebCore::RenderBox::addOverflowFromChild(this, v20, (const WebCore::LayoutSize *)v43);
              v26 = *((_QWORD *)v20 + 24);
              if (v26)
              {
                v27 = *(_QWORD *)(v26 + 20);
                if ((v27 & 0x80000000) != 0)
                  goto LABEL_71;
                v28 = *(_QWORD *)(v26 + 28);
                v29 = v27 + v28;
                if (__OFADD__((_DWORD)v27, (_DWORD)v28))
                  v29 = 0x7FFFFFFF;
                v30 = *((_QWORD *)v20 + 20);
                if (v29 > (int)v30 || (v27 & 0x8000000000000000) != 0)
                  goto LABEL_71;
                v31 = HIDWORD(v27);
                v32 = HIDWORD(v28);
                v33 = __OFADD__((_DWORD)v31, (_DWORD)v32);
                v34 = v31 + v32;
                if (v33)
                  v34 = 0x7FFFFFFF;
                if (v34 > SHIDWORD(v30))
                {
LABEL_71:
                  if (!*((_BYTE *)this + 280))
                  {
                    WTF::WeakHashSet<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderTableCell>((uint64_t)v43, v41, (uint64_t)v20);
                    if (WTF::WeakHashSet<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)v41, v35) > v9)
                    {
                      *((_BYTE *)this + 280) = 1;
                      WTF::WeakHashSet<WebCore::CachedImageClient,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::clear((uint64_t)v41, v36);
                    }
                  }
                }
              }
            }
          }
        }
        ++v14;
        v13 += 32;
      }
      while (v12 != v13);
      ++v10;
    }
    while (v15 != v42);
  }
}

uint64_t WebCore::RotateTransformOperation::apply(uint64_t a1, float64x2_t *a2)
{
  long double v3;
  double v4;
  double v5;
  __double2 v6;
  const double *v9;
  float64x2_t *v10;
  float64x2_t *v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  __double2 v27;
  double sinval;
  double cosval;
  const double *v32;
  float64x2_t *v33;
  float64x2_t *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  double v43;
  double v44;
  __double2 v45;
  double v48;
  double v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[24];
  __int128 v56;
  uint64_t v57;
  float64x2x4_t v58;
  float64x2x4_t v59;
  float64x2x4_t v60;
  float64x2x4_t v61;
  float64x2x4_t v62;
  float64x2x4_t v63;
  float64x2x4_t v64;
  float64x2x4_t v65;

  if (*(_BYTE *)(a1 + 12) != 8)
  {
    v21 = *(double *)(a1 + 16);
    v22 = *(double *)(a1 + 24);
    v24 = *(double *)(a1 + 32);
    v23 = *(double *)(a1 + 40);
    v25 = sqrt(v22 * v22 + v21 * v21 + v24 * v24);
    if (v25 == 0.0 || v25 != 1.0)
    {
      if (v25 == 0.0)
        return 0;
      if (v25 != 1.0)
      {
        v21 = v21 / v25;
        v22 = v22 / v25;
        v24 = v24 / v25;
      }
      v45 = __sincos_stret(v23 * 0.0174532925);
      if (v45.__sinval >= 2.22044605e-16 || v45.__sinval <= -2.22044605e-16)
        sinval = v45.__sinval;
      else
        sinval = 0.0;
      if (v45.__cosval >= 2.22044605e-16 || v45.__cosval <= -2.22044605e-16)
        cosval = v45.__cosval;
      else
        cosval = 0.0;
      v52 = xmmword_1969F8F30;
      v53 = unk_1969F8F40;
      v54 = xmmword_1969F8F50;
      *(_QWORD *)v55 = 0x3FF0000000000000;
      v50 = constinit_5;
      v51 = unk_1969F8F20;
      if (v21 == 1.0 && v22 == 0.0 && v24 == 0.0)
      {
        *(_QWORD *)&v52 = 0;
        *(_QWORD *)&v51 = 0;
        v50 = 0x3FF0000000000000uLL;
        *((double *)&v52 + 1) = cosval;
        *(double *)&v53 = sinval;
        *(_QWORD *)&v54 = 0;
        *((double *)&v54 + 1) = -sinval;
        goto LABEL_71;
      }
      if (v22 == 1.0 && v21 == 0.0 && v24 == 0.0)
      {
        v50 = *(unint64_t *)&cosval;
        *(double *)&v51 = -sinval;
        v52 = xmmword_1968A14C0;
        *(_QWORD *)&v53 = 0;
        v54 = *(unint64_t *)&sinval;
LABEL_71:
        *(double *)v55 = cosval;
        goto LABEL_39;
      }
      if (v22 != 0.0 || v24 != 1.0 || v21 != 0.0)
      {
        *(double *)&v50 = cosval + v21 * v21 * (1.0 - cosval);
        *((double *)&v50 + 1) = sinval * v24 + v22 * v21 * (1.0 - cosval);
        v48 = sinval * v22;
        *(double *)&v51 = -(sinval * v22 - v24 * v21 * (1.0 - cosval));
        *(double *)&v52 = -(sinval * v24 - v22 * v21 * (1.0 - cosval));
        v49 = sinval * v21;
        *((double *)&v52 + 1) = cosval + v22 * v22 * (1.0 - cosval);
        *(double *)&v53 = v49 + v22 * v24 * (1.0 - cosval);
        *(double *)&v54 = v48 + v24 * v21 * (1.0 - cosval);
        *((double *)&v54 + 1) = -(v49 - v22 * v24 * (1.0 - cosval));
        cosval = cosval + v24 * v24 * (1.0 - cosval);
        goto LABEL_71;
      }
      goto LABEL_38;
    }
    v27 = __sincos_stret(v23 * 0.0174532925);
    if (v27.__sinval >= 2.22044605e-16 || v27.__sinval <= -2.22044605e-16)
      sinval = v27.__sinval;
    else
      sinval = 0.0;
    if (v27.__cosval >= 2.22044605e-16 || v27.__cosval <= -2.22044605e-16)
      cosval = v27.__cosval;
    else
      cosval = 0.0;
    v52 = xmmword_1969F8F30;
    v53 = unk_1969F8F40;
    v54 = xmmword_1969F8F50;
    *(_QWORD *)v55 = 0x3FF0000000000000;
    v50 = constinit_5;
    v51 = unk_1969F8F20;
    if (v21 == 1.0 && v22 == 0.0 && v24 == 0.0)
    {
      *(_QWORD *)&v52 = 0;
      *(_QWORD *)&v51 = 0;
      v50 = 0x3FF0000000000000uLL;
      *((double *)&v52 + 1) = cosval;
      *(double *)&v53 = sinval;
      *(_QWORD *)&v54 = 0;
      *((double *)&v54 + 1) = -sinval;
    }
    else if (v22 == 1.0 && v21 == 0.0 && v24 == 0.0)
    {
      v50 = *(unint64_t *)&cosval;
      *(double *)&v51 = -sinval;
      v52 = xmmword_1968A14C0;
      *(_QWORD *)&v53 = 0;
      v54 = *(unint64_t *)&sinval;
    }
    else
    {
      if (v22 == 0.0 && v24 == 1.0 && v21 == 0.0)
      {
LABEL_38:
        *(double *)&v50 = cosval;
        *((double *)&v50 + 1) = sinval;
        *(_QWORD *)&v51 = 0;
        *(double *)&v52 = -sinval;
        *((double *)&v52 + 1) = cosval;
        *(_QWORD *)&v53 = 0;
        v54 = 0uLL;
        *(_QWORD *)v55 = 0x3FF0000000000000;
LABEL_39:
        *((_QWORD *)&v53 + 1) = 0;
        *((_QWORD *)&v51 + 1) = 0;
        *(_OWORD *)&v55[8] = 0u;
        v56 = 0u;
        v57 = 0x3FF0000000000000;
        v32 = (const double *)&v50;
        v33 = a2;
        v35 = *a2;
        v36 = a2[1];
        v37 = a2[2];
        v38 = a2[3];
        v34 = a2 + 4;
        v39 = *v34;
        v40 = v34[1];
        v41 = v34[2];
        v42 = v34[3];
        v64 = vld4q_dup_f64(v32);
        v32 += 4;
        v60 = vld4q_dup_f64(v32);
        v32 += 4;
        *v33 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v64.val[0], v35), v64.val[1], v37), v64.val[2], *v34), v64.val[3], v41);
        v33[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v64.val[0], v36), v64.val[1], v38), v64.val[2], v40), v64.val[3], v42);
        v33 += 2;
        v65 = vld4q_dup_f64(v32);
        v32 += 4;
        *v33 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v60.val[0], v35), v60.val[1], v37), v60.val[2], v39), v60.val[3], v41);
        v33[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v60.val[0], v36), v60.val[1], v38), v60.val[2], v40), v60.val[3], v42);
        v33 += 2;
        v61 = vld4q_dup_f64(v32);
        *v33 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v65.val[0], v35), v65.val[1], v37), v65.val[2], v39), v65.val[3], v41);
        v33[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v65.val[0], v36), v65.val[1], v38), v65.val[2], v40), v65.val[3], v42);
        v33 += 2;
        *v33 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v61.val[0], v35), v61.val[1], v37), v61.val[2], v39), v61.val[3], v41);
        v33[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v61.val[0], v36), v61.val[1], v38), v61.val[2], v40), v61.val[3], v42);
        return 0;
      }
      *(double *)&v50 = cosval + v21 * v21 * (1.0 - cosval);
      *((double *)&v50 + 1) = sinval * v24 + v22 * v21 * (1.0 - cosval);
      v43 = sinval * v22;
      *(double *)&v51 = -(sinval * v22 - v24 * v21 * (1.0 - cosval));
      *(double *)&v52 = -(sinval * v24 - v22 * v21 * (1.0 - cosval));
      v44 = sinval * v21;
      *((double *)&v52 + 1) = cosval + v22 * v22 * (1.0 - cosval);
      *(double *)&v53 = v44 + v22 * v24 * (1.0 - cosval);
      *(double *)&v54 = v43 + v24 * v21 * (1.0 - cosval);
      *((double *)&v54 + 1) = -(v44 - v22 * v24 * (1.0 - cosval));
      cosval = cosval + v24 * v24 * (1.0 - cosval);
    }
    *(double *)v55 = cosval;
    goto LABEL_39;
  }
  v3 = *(double *)(a1 + 40);
  if (fmod(v3, 360.0) != 0.0)
  {
    v6 = __sincos_stret(v3 * 0.0174532925);
    v5 = v6.__cosval;
    v4 = v6.__sinval;
    if (v6.__sinval < 2.22044605e-16 && v6.__sinval > -2.22044605e-16)
      v4 = 0.0;
    if (v6.__cosval < 2.22044605e-16 && v6.__cosval > -2.22044605e-16)
      v5 = 0.0;
    *(double *)&v50 = v5;
    *((double *)&v50 + 1) = v4;
    v51 = 0uLL;
    *(double *)&v52 = -v4;
    *((double *)&v52 + 1) = v5;
    v53 = 0uLL;
    v54 = constinit_39;
    *(_OWORD *)v55 = unk_1969F8FA0;
    *(_QWORD *)&v55[16] = 0;
    v56 = 0uLL;
    v57 = 0x3FF0000000000000;
    v9 = (const double *)&v50;
    v10 = a2;
    v12 = *a2;
    v13 = a2[1];
    v14 = a2[2];
    v15 = a2[3];
    v11 = a2 + 4;
    v16 = *v11;
    v17 = v11[1];
    v18 = v11[2];
    v19 = v11[3];
    v62 = vld4q_dup_f64(v9);
    v9 += 4;
    v58 = vld4q_dup_f64(v9);
    v9 += 4;
    *v10 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v62.val[0], v12), v62.val[1], v14), v62.val[2], *v11), v62.val[3], v18);
    v10[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v62.val[0], v13), v62.val[1], v15), v62.val[2], v17), v62.val[3], v19);
    v10 += 2;
    v63 = vld4q_dup_f64(v9);
    v9 += 4;
    *v10 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v58.val[0], v12), v58.val[1], v14), v58.val[2], v16), v58.val[3], v18);
    v10[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v58.val[0], v13), v58.val[1], v15), v58.val[2], v17), v58.val[3], v19);
    v10 += 2;
    v59 = vld4q_dup_f64(v9);
    *v10 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v63.val[0], v12), v63.val[1], v14), v63.val[2], v16), v63.val[3], v18);
    v10[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v63.val[0], v13), v63.val[1], v15), v63.val[2], v17), v63.val[3], v19);
    v10 += 2;
    *v10 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v59.val[0], v12), v59.val[1], v14), v59.val[2], v16), v59.val[3], v18);
    v10[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v59.val[0], v13), v59.val[1], v15), v59.val[2], v17), v59.val[3], v19);
  }
  return 0;
}

BOOL WebCore::RotateTransformOperation::isAffectedByTransformOrigin(WebCore::RotateTransformOperation *this)
{
  return *((double *)this + 5) != 0.0;
}

WTF::StringImpl *WebCore::RenderElement::animatedStyle@<X0>(WebCore::RenderElement *this@<X0>, const WebCore::RenderElement *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WebCore::RenderStyle *v7;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  WebCore::RenderStyle *v13;
  _BYTE v14[16];
  WTF::StringImpl *v15;
  char v16;
  char v17;

  WebCore::Styleable::fromRenderer((uint64_t)this, a2, (uint64_t)v14);
  if (!v17)
    goto LABEL_10;
  result = WebCore::Styleable::computeAnimatedStyle((WebCore::KeyframeEffectStack *)v14, &v13);
  v7 = v13;
  *a3 = v13;
  if (v17 && v16 != 0)
  {
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (!v7)
  {
LABEL_10:
    result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)result = 0;
    v9 = (_DWORD *)*((_QWORD *)this + 11);
    ++*v9;
    *((_QWORD *)result + 1) = v9;
    *((_QWORD *)result + 2) = *((_QWORD *)this + 12);
    v10 = (_DWORD *)*((_QWORD *)this + 13);
    ++*v10;
    *((_QWORD *)result + 3) = v10;
    v11 = (_DWORD *)*((_QWORD *)this + 14);
    ++*v11;
    *((_QWORD *)result + 4) = v11;
    *((_QWORD *)result + 5) = *((_QWORD *)this + 15);
    *((_QWORD *)result + 6) = 0;
    v12 = (_DWORD *)*((_QWORD *)this + 17);
    ++*v12;
    *((_QWORD *)result + 7) = v12;
    *a3 = result;
  }
  return result;
}

WebCore::RenderLayer *WebCore::LocalFrameView::delegatedScrollingModeDidChange(WebCore::RenderLayer *this)
{
  uint64_t v1;
  WebCore::RenderLayerCompositor *v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v1)
  {
    this = *(WebCore::RenderLayer **)(v1 + 1944);
    if (this)
    {
      this = (WebCore::RenderLayer *)WebCore::RenderView::compositor(this);
      if (*((_BYTE *)this + 195))
      {
        v2 = this;
        WebCore::RenderLayerCompositor::enableCompositingMode(this, 0);
        return WebCore::RenderLayerCompositor::clearBackingForAllLayers(v2);
      }
    }
  }
  return this;
}

uint64_t WebCore::DeprecatedGlobalSettings::setMediaSourceInlinePaintingEnabled(uint64_t this)
{
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  BYTE3(qword_1ECE90A60) = this;
  return WebCore::MediaSessionManagerCocoa::setMediaSourceInlinePaintingEnabled(this);
}

uint64_t WebCore::RenderTableCell::borderStart(WebCore::RenderTableCell *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  WebCore::RenderStyle *v8;
  int v9;
  uint64_t v10;
  float v11;
  double v12;
  uint64_t v14;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    goto LABEL_20;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    goto LABEL_20;
  if (*(_BYTE *)(v2 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x1943258C0);
  }
  v3 = *(_QWORD *)(v2 + 32);
  if (!v3)
    goto LABEL_20;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_20;
  if (*(_BYTE *)(v4 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x1943258E0);
  }
  v5 = *(_QWORD *)(v4 + 32);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0)
  {
LABEL_20:
    v8 = (WebCore::RenderTableCell *)((char *)this + 80);
    v9 = *((_DWORD *)this + 30);
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    {
      if ((v9 & 0x4000000) == 0)
      {
LABEL_14:
        v10 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
        v11 = 0.0;
        if ((*(_BYTE *)(v10 + 124) & 0xE) != 0)
        {
          v14 = *(_QWORD *)(v10 + 200);
          if (*(_BYTE *)(v14 + 5) && *(_BYTE *)(v14 + 76) == 4)
          {
            if (*(_BYTE *)(v14 + 78))
              v11 = *(float *)(v14 + 72);
            else
              v11 = (float)*(int *)(v14 + 72);
          }
          else
          {
            v11 = *(float *)(v10 + 120);
          }
        }
        goto LABEL_15;
      }
      goto LABEL_22;
    }
LABEL_31:
    if ((v9 & 0x4000000) != 0)
      v11 = WebCore::RenderStyle::borderBottomWidth(v8);
    else
      v11 = WebCore::RenderStyle::borderTopWidth(v8);
    goto LABEL_15;
  }
  v7 = *(unsigned __int8 *)(v6 + 46);
  if (v7 != 35 && v7 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x194325914);
  }
  if ((*(_BYTE *)(v6 + 124) & 4) != 0)
    return WebCore::RenderTableCell::borderHalfStart(this, 0);
  v8 = (WebCore::RenderTableCell *)((char *)this + 80);
  v9 = *((_DWORD *)this + 30);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    goto LABEL_31;
  if ((v9 & 0x4000000) == 0)
    goto LABEL_14;
LABEL_22:
  v11 = WebCore::RenderStyle::borderRightWidth(v8);
LABEL_15:
  v12 = v11 * 64.0;
  if (v12 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v12 <= -2147483650.0)
    return 0x80000000;
  return (int)v12;
}

uint64_t *WebCore::setPresentingApplicationBundleIdentifier(WTF::StringImpl **this, const WTF::String *a2)
{
  {
    WebCore::presentingApplicationBundleIdentifierStorage(void)::identifier = 0;
  }
  return WTF::String::operator=(&WebCore::presentingApplicationBundleIdentifierStorage(void)::identifier, this);
}

uint64_t *WebCore::SystemBatteryStatusTestingOverrides::singleton(WebCore::SystemBatteryStatusTestingOverrides *this)
{
  {
    WebCore::SystemBatteryStatusTestingOverrides::singleton(void)::instance = 0;
    *(_QWORD *)algn_1ECE889C8 = 0;
  }
  return &WebCore::SystemBatteryStatusTestingOverrides::singleton(void)::instance;
}

uint64_t WebCore::StorageNamespaceProvider::StorageNamespaceProvider(uint64_t this)
{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E344FAE8;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

double WebCore::UserContentProvider::UserContentProvider(WebCore::UserContentProvider *this)
{
  double result;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E3402CA8;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  return result;
}

uint64_t WebCore::SWClientConnection::SWClientConnection(uint64_t this)
{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E347E178;
  *(_BYTE *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t *WebCore::HTMLMediaElement::setMediaCacheDirectory(WTF::StringImpl **this, const WTF::String *a2)
{
  {
    WebCore::sharedMediaCacheDirectory(void)::sharedMediaCacheDirectory = 0;
  }
  return WTF::String::operator=(&WebCore::sharedMediaCacheDirectory(void)::sharedMediaCacheDirectory, this);
}

WTF::StringImpl *WebCore::DebugPageOverlays::settingsChanged(WebCore::DebugPageOverlays *this, WebCore::Page *a2)
{
  char v3;
  WTF::StringImpl *result;
  uint64_t *v5;

  v3 = *(_BYTE *)(*((_QWORD *)this + 14) + 612);
  if (v3
    || (result = (WTF::StringImpl *)WebCore::DebugPageOverlays::sharedDebugOverlays) != 0
    && (result = (WTF::StringImpl *)WebCore::DebugPageOverlays::hasOverlaysForPage((WebCore::DebugPageOverlays *)WebCore::DebugPageOverlays::sharedDebugOverlays, this), (_DWORD)result))
  {
    v5 = (uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays;
    if (!WebCore::DebugPageOverlays::sharedDebugOverlays)
    {
      v5 = (uint64_t *)operator new();
      *v5 = 0;
      v5[1] = 0;
      WebCore::DebugPageOverlays::sharedDebugOverlays = (uint64_t)v5;
    }
    return WebCore::DebugPageOverlays::updateOverlayRegionVisibility(v5, (uint64_t *)this, v3);
  }
  return result;
}

BOOL WebCore::FontCascade::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  const WTF::StringImpl *v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  WebCore::Length *v26;
  float v27;
  float v28;
  int v29;
  WebCore::Length *v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL8 result;

  v2 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 28))
    return 0;
  if (memcmp(*(const void **)(a1 + 16), *(const void **)(a2 + 16), 8 * v2))
    return 0;
  v5 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v5 != *(_DWORD *)(a2 + 44) || memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), 8 * v5))
    return 0;
  v10 = *(unsigned __int8 *)(a1 + 113);
  v11 = *(unsigned __int8 *)(a2 + 113);
  if (v11 | v10)
  {
    if ((v10 != 0) == (v11 == 0))
      return 0;
  }
  else if ((WebCore::operator==(a1 + 48, a2 + 48, v6) & 1) == 0)
  {
    return 0;
  }
  v12 = *(unsigned __int8 *)(a1 + 120);
  v13 = *(unsigned __int8 *)(a2 + 120);
  if (v12 == 3)
  {
    if (v13 != 3 || *(_QWORD *)(a1 + 128) != *(_QWORD *)(a2 + 128))
      return 0;
  }
  else if (v12 != v13)
  {
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 136) != *(unsigned __int8 *)(a2 + 136))
    return 0;
  if ((*(_BYTE *)(a1 + 137) == 0) == (*(_BYTE *)(a2 + 137) != 0))
    return 0;
  v7.i32[0] = *(_DWORD *)(a2 + 140);
  if (*(float *)(a1 + 140) != *(float *)v7.i32)
    return 0;
  if (*(_QWORD *)(a1 + 144) != *(_QWORD *)(a2 + 144))
    return 0;
  if (*(_QWORD *)(a1 + 152) != *(_QWORD *)(a2 + 152))
    return 0;
  v7.i16[0] = *(_WORD *)(a1 + 160);
  v14 = (int16x4_t)vmovl_s16(v7).u64[0];
  *(float *)v8.i32 = (float)v14.i32[0] * 0.25;
  v9.i16[0] = *(_WORD *)(a2 + 160);
  v15 = (int16x4_t)vmovl_s16(v9).u64[0];
  *(float *)v15.i32 = (float)v15.i32[0] * 0.25;
  if (*(float *)v8.i32 != *(float *)v15.i32)
    return 0;
  v8.i16[0] = *(_WORD *)(a1 + 162);
  v15.i16[0] = *(_WORD *)(a2 + 162);
  v16 = (int16x4_t)vmovl_s16(v15).u64[0];
  *(float *)v16.i32 = (float)v16.i32[0];
  *(float *)v14.i32 = *(float *)v16.i32 * 0.25;
  if ((float)((float)vmovl_s16(v8).i32[0] * 0.25) != (float)(*(float *)v16.i32 * 0.25))
    return 0;
  if (*(_BYTE *)(a1 + 166) && *(_BYTE *)(a2 + 166))
  {
    v14.i16[0] = *(_WORD *)(a1 + 164);
    v16.i16[0] = *(_WORD *)(a2 + 164);
    if ((float)((float)vmovl_s16(v14).i32[0] * 0.25) != (float)((float)vmovl_s16(v16).i32[0] * 0.25))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 166) != 0) != (*(_BYTE *)(a2 + 166) != 0))
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 168) == 0) == (*(_BYTE *)(a2 + 168) != 0))
    return 0;
  if ((*(_BYTE *)(a1 + 169) == 0) == (*(_BYTE *)(a2 + 169) != 0))
    return 0;
  if (*(float *)(a1 + 172) != *(float *)(a2 + 172))
    return 0;
  if (((*(_DWORD *)(a2 + 176) ^ *(_DWORD *)(a1 + 176)) & 0x7FFFFFFF) != 0)
    return 0;
  if ((((*(unsigned __int16 *)(a2 + 180) | (*(unsigned __int8 *)(a2 + 182) << 16)) ^ (*(unsigned __int16 *)(a1 + 180) | (*(unsigned __int8 *)(a1 + 182) << 16))) & 0x3FFFF) != 0)
    return 0;
  v17 = *(_QWORD *)(a1 + 184);
  v18 = *(_QWORD *)(a2 + 184);
  v19 = *(unsigned int *)(v17 + 4);
  if ((_DWORD)v19 != *(_DWORD *)(v18 + 4))
    return 0;
  if ((_DWORD)v19)
  {
    if (*(_QWORD *)(v17 + 8) == *(_QWORD *)(v18 + 8))
    {
      v20 = 0;
      v21 = v17 + 16;
      v22 = v18 + 16;
      while (v19 - 1 != v20)
      {
        v23 = *(_QWORD *)(v21 + 8 * v20);
        v24 = *(_QWORD *)(v22 + 8 * v20++);
        if (v23 != v24)
        {
          if (v20 < v19)
            return 0;
          goto LABEL_33;
        }
      }
      goto LABEL_33;
    }
    return 0;
  }
LABEL_33:
  if (*(float *)(a1 + 192) != *(float *)(a2 + 192))
    return 0;
  if (((*(_WORD *)(a2 + 196) ^ *(_WORD *)(a1 + 196)) & 0x3FF) != 0)
    return 0;
  v25 = *(unsigned __int8 *)(a1 + 204);
  if (v25 != *(unsigned __int8 *)(a2 + 204) || (*(_BYTE *)(a1 + 205) != 0) != (*(_BYTE *)(a2 + 205) != 0))
    return 0;
  if (v25 != 13)
  {
    v26 = (WebCore::Length *)(a1 + 200);
    if (v25 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v26, (const WebCore::Length *)(a2 + 200)) & 1) == 0)
        return 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 206))
        v27 = *(float *)v26;
      else
        v27 = (float)*(int *)v26;
      v28 = *(float *)(a2 + 200);
      if (!*(_BYTE *)(a2 + 206))
        v28 = (float)SLODWORD(v28);
      if (v27 != v28)
        return 0;
    }
  }
  v29 = *(unsigned __int8 *)(a1 + 212);
  if (v29 != *(unsigned __int8 *)(a2 + 212) || (*(_BYTE *)(a1 + 213) != 0) != (*(_BYTE *)(a2 + 213) != 0))
    return 0;
  if (v29 != 13)
  {
    v30 = (WebCore::Length *)(a1 + 208);
    if (v29 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v30, (const WebCore::Length *)(a2 + 208)) & 1) == 0)
        return 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 214))
        v31 = *(float *)v30;
      else
        v31 = (float)*(int *)v30;
      v32 = *(float *)(a2 + 208);
      if (!*(_BYTE *)(a2 + 214))
        v32 = (float)SLODWORD(v32);
      if (v31 != v32)
        return 0;
    }
  }
  v33 = *(_QWORD *)(a1 + 216);
  v34 = *(_QWORD *)(a2 + 216);
  if (v33 == v34)
    return 1;
  result = 0;
  if (v33 && v34)
  {
    if (*(_QWORD *)(v33 + 112) != *(_QWORD *)(v34 + 112) || *(_DWORD *)(v33 + 144) != *(_DWORD *)(v34 + 144))
      return 0;
    return *(unsigned __int16 *)(v33 + 148) == *(unsigned __int16 *)(v34 + 148);
  }
  return result;
}

uint64_t WebCore::DeprecatedGlobalSettings::setMockScrollbarsEnabled(uint64_t this)
{
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = this;
  return this;
}

unsigned int *WebCore::Page::setGroupName(WebCore::Page *this, const WTF::String *a2)
{
  uint64_t v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *result;
  unsigned int v8;
  unsigned int v9;
  const WTF::String *v10;
  unsigned int *v11;
  void *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  _BYTE v22[24];

  v4 = *((_QWORD *)this + 66);
  if (v4)
  {
    v17 = *(_QWORD *)(v4 + 8);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 8);
      if (v18)
      {
        if (*(_DWORD *)(v18 + 4))
          WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NodeIterator>(v17 + 16, this);
      }
    }
  }
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    std::unique_ptr<WebCore::PageGroup>::operator=[abi:sn180100]((WebCore::PageGroup **)this + 65, a2);
    v11 = (unsigned int *)WebCore::PageGroup::pageGroup((WTF::StringImpl **)a2, v10);
    if (v11)
    {
      v20 = v11;
      WTF::WeakPtrFactory<WebCore::PageGroup,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v11, (uint64_t)v11);
      v13 = *(_QWORD *)v20;
      if (*(_QWORD *)v20)
      {
        do
          v21 = __ldaxr((unsigned int *)v13);
        while (__stlxr(v21 + 1, (unsigned int *)v13));
      }
    }
    else
    {
      v13 = 0;
    }
    v14 = (unsigned int *)*((_QWORD *)this + 66);
    *((_QWORD *)this + 66) = v13;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v12);
      }
      v13 = *((_QWORD *)this + 66);
    }
    if (v13)
      v13 = *(_QWORD *)(v13 + 8);
    return WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NodeIterator>(v13 + 16, this, (uint64_t)v22);
  }
  else
  {
    v5 = (unsigned int **)*((_QWORD *)this + 65);
    if (v5)
    {
      WTF::WeakPtrFactory<WebCore::PageGroup,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(*((unsigned int **)this + 65), *((_QWORD *)this + 65));
      v6 = *v5;
      if (*v5)
      {
        do
          v19 = __ldaxr(v6);
        while (__stlxr(v19 + 1, v6));
      }
    }
    else
    {
      v6 = 0;
    }
    result = (unsigned int *)*((_QWORD *)this + 66);
    *((_QWORD *)this + 66) = v6;
    if (result)
    {
      do
      {
        v8 = __ldaxr(result);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, result));
      if (!v9)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, a2);
      }
    }
  }
  return result;
}

uint64_t WebCore::PageGroup::pageGroup(WTF::StringImpl **this, const WTF::String *a2)
{
  uint64_t *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  uint64_t v6;
  char v7;

  v3 = (uint64_t *)qword_1ECE838C0;
  if (!qword_1ECE838C0)
  {
    v3 = (uint64_t *)WTF::fastMalloc((WTF *)8);
    *v3 = 0;
    qword_1ECE838C0 = (uint64_t)v3;
  }
  WTF::HashMap<WTF::String,WebCore::PageGroup *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::PageGroup *>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t)&v6, v3, this);
  if (!v7)
    return *(_QWORD *)(v6 + 8);
  result = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)result = 0;
  v5 = *this;
  if (*this)
    *(_DWORD *)v5 += 2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = v5;
  *(_DWORD *)(result + 32) = ++dword_1ECE838BC;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(v6 + 8) = result;
  return result;
}

uint64_t WTF::HashMap<WTF::String,WebCore::PageGroup *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::PageGroup *>,WTF::HashTableTraits>::add<decltype(nullptr)>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  WTF **v10;
  int i;
  unsigned int v12;
  WTF **v13;
  WTF *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::PageGroup *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::PageGroup *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::PageGroup *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::PageGroup *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = *((_DWORD *)*a3 + 4);
  if (v8 < 0x100)
    v9 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v9 = v8 >> 8;
  v10 = 0;
  for (i = 1; ; ++i)
  {
    v12 = v9 & v7;
    v13 = (WTF **)(v6 + 16 * (v9 & v7));
    v14 = *v13;
    if (!*v13)
    {
      if (v10)
      {
        *v10 = 0;
        v10[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v13 = v10;
      }
      result = (uint64_t)WTF::GenericHashTraits<WTF::AtomString>::assignToEmpty<WTF::AtomString,WTF::AtomString const&>(v13, (WTF::StringImpl *)a3);
      v13[1] = 0;
      v20 = *a2;
      if (*a2)
        v21 = *(_DWORD *)(v20 - 12) + 1;
      else
        v21 = 1;
      *(_DWORD *)(v20 - 12) = v21;
      v22 = *a2;
      if (*a2)
        v23 = *(_DWORD *)(v22 - 12);
      else
        v23 = 0;
      v24 = (*(_DWORD *)(v22 - 16) + v23);
      v25 = *(unsigned int *)(v22 - 4);
      if (v25 > 0x400)
      {
        if (v25 > 2 * v24)
          goto LABEL_21;
      }
      else if (3 * v25 > 4 * v24)
      {
LABEL_21:
        v19 = v22 + 16 * v25;
        v18 = 1;
        goto LABEL_22;
      }
      result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::PageGroup *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::PageGroup *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::PageGroup *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::PageGroup *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, v13);
      v13 = (WTF **)result;
      v22 = *a2;
      if (*a2)
        v25 = *(unsigned int *)(v22 - 4);
      else
        v25 = 0;
      goto LABEL_21;
    }
    if (v14 != (WTF *)-1)
      break;
    v10 = (WTF **)(v6 + 16 * v12);
LABEL_28:
    v9 = i + v12;
  }
  result = WTF::equal(v14, *a3, (const WTF::StringImpl *)a3);
  if (!(_DWORD)result)
    goto LABEL_28;
  v16 = *a2;
  if (*a2)
    v17 = *(unsigned int *)(v16 - 4);
  else
    v17 = 0;
  v18 = 0;
  v19 = v16 + 16 * v17;
LABEL_22:
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v19;
  *(_BYTE *)(a1 + 16) = v18;
  return result;
}

WebCore::SettingsBase *WebCore::SettingsBase::SettingsBase(WebCore::SettingsBase *this, WebCore::Page *a2)
{
  *(_QWORD *)this = &unk_1E3402A18;
  WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)this + 1, (uint64_t)a2);
  *((_QWORD *)this + 2) = 0x3F70624DD2F1A9FCLL;
  WebCore::Timer::Timer<WebCore::SettingsBase,WebCore::SettingsBase>((WebCore::SettingsBase *)((char *)this + 24), (uint64_t)this);
  *((_BYTE *)this + 112) = 0;
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 136) = 0;
  *((_BYTE *)this + 144) = 0;
  *((_BYTE *)this + 160) = 0;
  *((_BYTE *)this + 168) = 0;
  *((_BYTE *)this + 184) = 0;
  *((_BYTE *)this + 192) = 0;
  *((_BYTE *)this + 208) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_QWORD *)this + 27) = 0x3FF9999A3FD9999ALL;
  *((_DWORD *)this + 56) = 1071225242;
  return this;
}

WebCore::TimerBase *WebCore::Timer::Timer<WebCore::SettingsBase,WebCore::SettingsBase>(WebCore::TimerBase *a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)WebCore::TimerBase::TimerBase(a1) = off_1E31F7378;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = off_1E3402C30;
  v4[1] = WebCore::SettingsBase::imageLoadingSettingsTimerFired;
  v4[2] = 0;
  v4[3] = a2;
  *((_QWORD *)a1 + 6) = v4;
  return a1;
}

unsigned int *WebCore::PluginInfoProvider::addPage(WebCore::PluginInfoProvider *this, WebCore::Page *a2)
{
  _BYTE v3[24];

  return WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NodeIterator>((uint64_t)this + 24, a2, (uint64_t)v3);
}

uint64_t WebCore::Page::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x788);
  result = WebCore::Page::Page(v4, a1);
  *a2 = result;
  return result;
}

uint64_t WebCore::Page::Page(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::PointerCaptureController *v10;
  WebCore::ElementTargetingController *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::RTCController *v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::PageConsoleClient *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  WebCore::PerformanceMonitor *v44;
  uint64_t v45;
  _QWORD *v46;
  WebCore::PageOverlayController *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WebCore::OpportunisticTaskScheduler *v57;
  uint64_t v58;
  uint64_t v59;
  WebCore::WritingToolsController *v60;
  WebCore::PluginInfoProvider *v61;
  _DWORD *v62;
  _DWORD *v63;
  unsigned int *v64;
  void *v65;
  unsigned int *v66;
  _DWORD *v67;
  int v68;
  uint64_t v69;
  unsigned int v71;
  unsigned int v72;
  WTF *v73;
  uint64_t v74;
  WebCore::Settings *v75[3];

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a2;
  v4 = (uint64_t *)(a2 + 32);
  v5 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)(a1 + 48) = WebCore::Chrome::Chrome(v5, a1, v4);
  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)(a1 + 56) = WebCore::DragCaretController::DragCaretController(v6);
  v7 = WTF::fastMalloc((WTF *)0xA8);
  *(_QWORD *)(a1 + 64) = WebCore::DragController::DragController(v7, a1, a2 + 56);
  v8 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)(a1 + 72) = WebCore::FocusController::FocusController(v8, a1, 20);
  v9 = WTF::fastMalloc((WTF *)0x88);
  *(_QWORD *)(a1 + 80) = WebCore::InspectorController::InspectorController(v9, a1, a2 + 64);
  v10 = (WebCore::PointerCaptureController *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)(a1 + 88) = WebCore::PointerCaptureController::PointerCaptureController(v10, (WebCore::Page *)a1);
  v11 = (WebCore::ElementTargetingController *)WTF::fastMalloc((WTF *)0x118);
  *(_QWORD *)(a1 + 96) = WebCore::ElementTargetingController::ElementTargetingController(v11, (WebCore::Page *)a1);
  *(_QWORD *)(a1 + 104) = 0;
  WebCore::Settings::create((WebCore::Settings *)a1, v75);
  *(WebCore::Settings **)(a1 + 112) = v75[0];
  v12 = *(_QWORD *)(a2 + 688);
  *(_QWORD *)(a2 + 688) = 0;
  *(_QWORD *)(a1 + 120) = v12;
  v13 = WTF::fastMalloc((WTF *)0xA8);
  *(_QWORD *)(a1 + 128) = WebCore::ProgressTracker::ProgressTracker(v13, a1, a2 + 368);
  v14 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)(a1 + 136) = WebCore::BackForwardController::BackForwardController(v14, a1, (uint64_t *)(a2 + 376));
  *(_QWORD *)(a1 + 144) = 0;
  v15 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 152) = v15;
  v16 = *(_QWORD *)(a2 + 424);
  v17 = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a2 + 432) = 0;
  v74 = v17;
  WebCore::createMainFrame(a1 + 160, a1, a2 + 400, (uint64_t)&v74, *(_QWORD *)(a2 + 416), v16);
  v18 = v74;
  v74 = 0;
  if (v18)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v18 + 8));
  *(_QWORD *)(a1 + 168) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 168));
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  v19 = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a2 + 392) = 0;
  *(_QWORD *)(a1 + 232) = v19;
  *(_OWORD *)(a1 + 240) = 0u;
  v20 = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a2 + 440) = 0;
  *(_QWORD *)(a1 + 256) = v20;
  v21 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a2 + 448) = 0;
  *(_QWORD *)(a1 + 264) = v21;
  v22 = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a2 + 456) = 0;
  *(_QWORD *)(a1 + 272) = v22;
  v23 = *(_QWORD *)(a2 + 568);
  *(_QWORD *)(a2 + 568) = 0;
  *(_QWORD *)(a1 + 280) = v23;
  v24 = *(_QWORD *)(a2 + 576);
  *(_QWORD *)(a2 + 576) = 0;
  *(_QWORD *)(a1 + 288) = v24;
  v25 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a2 + 360) = 0;
  *(_QWORD *)(a1 + 296) = v25;
  v26 = (WebCore::RTCController *)WTF::fastMalloc((WTF *)0x50);
  WebCore::RTCController::RTCController(v26);
  *(_QWORD *)(a1 + 304) = v27;
  *(_DWORD *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 316) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 0x10000;
  *(_DWORD *)(a1 + 340) = 0;
  *(_WORD *)(a1 + 344) = 256;
  *(_BYTE *)(a1 + 346) = 0;
  *(_DWORD *)(a1 + 348) = 1065353216;
  *(_BYTE *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 356) = xmmword_1969F03F0;
  *(_OWORD *)(a1 + 372) = 0u;
  *(_OWORD *)(a1 + 388) = 0u;
  *(_OWORD *)(a1 + 404) = 0u;
  *(_OWORD *)(a1 + 420) = 0u;
  *(_OWORD *)(a1 + 433) = 0u;
  *(_BYTE *)(a1 + 449) = *(_BYTE *)(a2 + 634);
  *(_DWORD *)(a1 + 450) = 0;
  *(_BYTE *)(a1 + 454) = 0;
  *(_QWORD *)(a1 + 456) = 0x3F80000000000000;
  *(_WORD *)(a1 + 464) = 512;
  *(_BYTE *)(a1 + 466) = 2;
  *(_WORD *)(a1 + 468) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_BYTE *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0x7FF8000000000000;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_WORD *)(a1 + 544) = 257;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_BYTE *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 588) = 0;
  *(_OWORD *)(a1 + 572) = 0u;
  WebCore::Timer::Timer<WebCore::Page,WebCore::Page>(a1 + 592, a1, (uint64_t)WebCore::Page::domTimerAlignmentIntervalIncreaseTimerFired, 0);
  *(_QWORD *)(a1 + 648) = 0;
  *(_DWORD *)(a1 + 656) = 1310720;
  *(_WORD *)(a1 + 660) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 753) = 0u;
  v28 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 776) = v28;
  *(_BYTE *)(a1 + 784) = 0;
  v29 = (WebCore::PageConsoleClient *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(a1 + 792) = WebCore::PageConsoleClient::PageConsoleClient(v29, (WebCore::Page *)a1);
  WebCore::PageDebuggable::create((WebCore::PageDebuggable *)(a1 + 800), (WebCore::Page *)a1);
  *(_QWORD *)(a1 + 853) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_QWORD *)(a1 + 864) = 0;
  *(_DWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 829) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_QWORD *)(a1 + 808) = 0;
  v30 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 880) = v30;
  v31 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a2 + 384) = 0;
  *(_QWORD *)(a1 + 888) = v31;
  v32 = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a2 + 464) = 0;
  *(_QWORD *)(a1 + 896) = v32;
  v33 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a2 + 480) = 0;
  *(_QWORD *)(a1 + 904) = v33;
  v34 = *(_QWORD *)(a2 + 472);
  ++*(_DWORD *)(v34 + 8);
  *(_QWORD *)(a1 + 912) = v34;
  v35 = *(_QWORD *)(a2 + 488);
  ++*(_DWORD *)(v35 + 8);
  *(_QWORD *)(a1 + 920) = v35;
  v36 = *(_QWORD *)(a2 + 496);
  ++*(_DWORD *)(v36 + 8);
  *(_QWORD *)(a1 + 928) = v36;
  v37 = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a2 + 504) = 0;
  *(_QWORD *)(a1 + 936) = v37;
  v38 = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a2 + 528) = 0;
  *(_QWORD *)(a1 + 944) = v38;
  v39 = *(_QWORD *)(a2 + 512);
  ++*(_DWORD *)(v39 + 8);
  *(_QWORD *)(a1 + 952) = v39;
  v40 = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a2 + 520) = 0;
  *(_QWORD *)(a1 + 960) = v40;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_QWORD *)(a1 + 1008) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 1024) = 0;
  *(_DWORD *)(a1 + 1016) = 0;
  *(_DWORD *)(a1 + 1019) = 0;
  WebCore::Timer::Timer<WebCore::Page,WebCore::Page>(a1 + 1032, a1, (uint64_t)WebCore::Page::playbackControlsManagerUpdateTimerFired, 0);
  *(_BYTE *)(a1 + 1092) = 0;
  *(_DWORD *)(a1 + 1088) = 0;
  v41 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
  v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 1368))(v41);
  v43 = 1;
  if ((v42 & 1) == 0)
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 1352))(v41);
  *(_BYTE *)(a1 + 1093) = v43;
  *(_BYTE *)(a1 + 1094) = 1;
  *(_DWORD *)(a1 + 1095) = 0;
  *(_DWORD *)(a1 + 1098) = 0;
  *(_QWORD *)(a1 + 1104) = a1 + 1120;
  *(_QWORD *)(a1 + 1112) = 2;
  *(_QWORD *)(a1 + 1128) = 0;
  *(_BYTE *)(a1 + 1136) = 0;
  if ((v43 & 1) != 0)
  {
    v45 = 0;
  }
  else
  {
    v44 = (WebCore::PerformanceMonitor *)WTF::fastMalloc((WTF *)0x1C0);
    v45 = WebCore::PerformanceMonitor::PerformanceMonitor(v44, (WebCore::Page *)a1);
  }
  *(_QWORD *)(a1 + 1144) = v45;
  v75[0] = (WebCore::Settings *)a1;
  std::make_unique[abi:sn180100]<WebCore::LowPowerModeNotifier,WebCore::Page::Page(WebCore::PageConfiguration &&)::$_0>((_QWORD *)(a1 + 1152), (uint64_t *)v75);
  v75[0] = (WebCore::Settings *)a1;
  std::make_unique[abi:sn180100]<WebCore::ThermalMitigationNotifier,WebCore::Page::Page(WebCore::PageConfiguration &&)::$_1>((_QWORD *)(a1 + 1160), (uint64_t *)v75);
  *(_WORD *)(a1 + 1168) = 0;
  *(_BYTE *)(a1 + 1176) = 0;
  *(_BYTE *)(a1 + 1192) = 0;
  v46 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)(a1 + 1200) = WebCore::PerformanceLogging::PerformanceLogging(v46, (WebCore::Page *)a1);
  *(_OWORD *)(a1 + 1208) = 0u;
  WebCore::WheelEventDeltaFilter::create((uint64_t *)(a1 + 1224));
  v47 = (WebCore::PageOverlayController *)WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)(a1 + 1232) = WebCore::PageOverlayController::PageOverlayController(v47, (WebCore::Page *)a1);
  v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)(a1 + 1240) = WebCore::PaymentCoordinator::PaymentCoordinator(v48, (uint64_t *)(a2 + 72));
  *(_QWORD *)(a1 + 1248) = 0;
  v49 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(a1 + 1256) = WebCore::AuthenticatorCoordinator::AuthenticatorCoordinator(v49, (uint64_t *)(a2 + 80));
  *(_BYTE *)(a1 + 1264) = 0;
  *(_BYTE *)(a1 + 1528) = 0;
  if (*(_BYTE *)(a2 + 352))
  {
    WebCore::ApplicationManifest::ApplicationManifest((WebCore::ApplicationManifest *)(a1 + 1264), (const WebCore::ApplicationManifest *)(a2 + 88));
    *(_BYTE *)(a1 + 1528) = 1;
  }
  *(_BYTE *)(a1 + 1536) = 0;
  *(_BYTE *)(a1 + 1592) = 0;
  v50 = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a2 + 536) = 0;
  *(_QWORD *)(a1 + 1600) = v50;
  *(_OWORD *)(a1 + 1608) = 0u;
  v51 = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a2 + 544) = 0;
  *(_QWORD *)(a1 + 1608) = v51;
  LODWORD(v51) = *(_DWORD *)(a2 + 552);
  *(_DWORD *)(a2 + 552) = 0;
  *(_DWORD *)(a1 + 1616) = v51;
  LODWORD(v51) = *(_DWORD *)(a2 + 556);
  *(_DWORD *)(a2 + 556) = 0;
  *(_DWORD *)(a1 + 1620) = v51;
  *(_QWORD *)(a1 + 1624) = 0;
  v52 = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a2 + 560) = 0;
  *(_QWORD *)(a1 + 1624) = v52;
  *(_OWORD *)(a1 + 1632) = 0u;
  std::optional<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>::optional[abi:sn180100](a1 + 1648, (uint64_t *)(a2 + 592));
  *(_BYTE *)(a1 + 1680) = 0;
  *(_BYTE *)(a1 + 1681) = *(_BYTE *)(a2 + 584);
  *(_BYTE *)(a1 + 1682) = 1;
  *(_BYTE *)(a1 + 1683) = *(_BYTE *)(a2 + 625);
  *(_WORD *)(a1 + 1684) = 0;
  *(_BYTE *)(a1 + 1686) = 0;
  *(_BYTE *)(a1 + 1712) = 0;
  *(_BYTE *)(a1 + 1704) = 0;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(_BYTE *)(a1 + 1720) = *(_BYTE *)(a2 + 626);
  *(_QWORD *)(a1 + 1728) = 0;
  v53 = *(_DWORD *)(a2 + 628);
  *(_WORD *)(a1 + 1740) = *(_WORD *)(a2 + 632);
  *(_DWORD *)(a1 + 1736) = v53;
  v54 = *(_QWORD *)(a2 + 640);
  *(_QWORD *)(a2 + 640) = 0;
  *(_QWORD *)(a1 + 1744) = v54;
  v55 = *(_QWORD *)(a2 + 648);
  *(_QWORD *)(a2 + 648) = 0;
  *(_QWORD *)(a1 + 1752) = v55;
  *(_QWORD *)(a1 + 1760) = 0;
  v56 = *(_QWORD *)(a2 + 656);
  *(_QWORD *)(a2 + 656) = 0;
  *(_QWORD *)(a1 + 1768) = v56;
  *(_BYTE *)(a1 + 1776) = 0;
  v57 = (WebCore::OpportunisticTaskScheduler *)WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)(a1 + 1784) = WebCore::OpportunisticTaskScheduler::OpportunisticTaskScheduler(v57, (WebCore::Page *)a1);
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_BYTE *)(a1 + 1808) = *(_BYTE *)(a2 + 680);
  v58 = *(_QWORD *)(a2 + 664);
  *(_QWORD *)(a2 + 664) = 0;
  *(_QWORD *)(a1 + 1816) = v58;
  v59 = *(_QWORD *)(a2 + 672);
  *(_QWORD *)(a2 + 672) = 0;
  *(_QWORD *)(a1 + 1824) = v59;
  *(_QWORD *)(a1 + 1840) = 0;
  *(_QWORD *)(a1 + 1848) = 0;
  *(_QWORD *)(a1 + 1832) = 0;
  v60 = (WebCore::WritingToolsController *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(a1 + 1856) = WebCore::WritingToolsController::WritingToolsController(v60, (WebCore::Page *)a1);
  *(_BYTE *)(a1 + 1864) = 0;
  WebCore::Timer::Timer<WebCore::Page,WebCore::Page>(a1 + 1872, a1, (uint64_t)WebCore::Page::activeNowPlayingSessionUpdateTimerFired, 0);
  WebCore::Page::updateTimerThrottlingState((WebCore::Page *)a1);
  v61 = *(WebCore::PluginInfoProvider **)(a1 + 920);
  ++*((_DWORD *)v61 + 2);
  WebCore::PluginInfoProvider::addPage(v61, (WebCore::Page *)a1);
  if (*((_DWORD *)v61 + 2) == 1)
    (*(void (**)(WebCore::PluginInfoProvider *))(*(_QWORD *)v61 + 8))(v61);
  else
    --*((_DWORD *)v61 + 2);
  v62 = *(_DWORD **)(a1 + 936);
  ++v62[2];
  WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NodeIterator>((uint64_t)(v62 + 4), (_QWORD *)a1, (uint64_t)v75);
  if (v62[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v62 + 8))(v62);
  else
    --v62[2];
  v63 = *(_DWORD **)(a1 + 952);
  ++v63[2];
  v64 = WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NodeIterator>((uint64_t)(v63 + 4), (_QWORD *)a1, (uint64_t)v75);
  if (v63[2] == 1)
    v64 = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v63 + 8))(v63);
  else
    --v63[2];
  if ((WebCore::Page::Page(WebCore::PageConfiguration &&)::firstTimeInitializationRan & 1) == 0)
  {
    WebCore::Page::firstTimeInitialization((WebCore::Page *)v64);
    WebCore::Page::Page(WebCore::PageConfiguration &&)::firstTimeInitializationRan = 1;
  }
  {
    WebCore::allPages(void)::set = 0;
  }
  WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>::WeakRef<void>((unsigned int **)&v73, a1);
  WTF::HashTable<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>>>::add((unsigned int *)v75, (unsigned int **)&v73);
  v66 = (unsigned int *)v73;
  v73 = 0;
  if (v66)
  {
    do
    {
      v71 = __ldaxr(v66);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, v66));
    if (!v72)
    {
      atomic_store(1u, v66);
      WTF::fastFree((WTF *)v66, v65);
    }
  }
  if (!*(_BYTE *)(a1 + 1093))
    WTF::MemoryPressureHandler::setPageCount((WTF::MemoryPressureHandler *)++WebCore::gNonUtilityPageCount);
  v67 = *(_DWORD **)(a1 + 928);
  v68 = v67[2];
  v67[2] = v68 + 1;
  v67[8] = *(_DWORD *)(*(_QWORD *)(a1 + 112) + 544);
  if (v68)
    v67[2] = v68;
  else
    (*(void (**)(_DWORD *))(*(_QWORD *)v67 + 8))(v67);
  v69 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 88);
  if (v69 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v69 + 152))(v69))
    Inspector::RemoteControllableTarget::init(*(Inspector::RemoteControllableTarget **)(a1 + 800));
  WebCore::Page::platformInitialize((WebCore::Page *)a1);
  WebCore::Page::settingsDidChange((WebCore::WebRTCProvider **)a1);
  if (!*(_BYTE *)(a2 + 624))
    *(_BYTE *)(a1 + 1685) = 1;
  if (objc_msgSend(**(id **)(a1 + 1152), "isLowPowerModeEnabled"))
    *(_BYTE *)(a1 + 1168) |= 4u;
  if (WebCore::ThermalMitigationNotifier::thermalMitigationEnabled(*(WebCore::ThermalMitigationNotifier **)(a1 + 1160)))
    *(_BYTE *)(a1 + 1168) |= 0x10u;
  return a1;
}

void WebCore::Page::settingsDidChange(WebCore::WebRTCProvider **this)
{
  WebCore::WebRTCProvider::setH265Support(this[37], HIWORD(*((_DWORD *)this[14] + 180)) & 1);
  WebCore::WebRTCProvider::setVP9Support(this[37], (*((_DWORD *)this[14] + 180) & 0x200000) != 0, (*((_DWORD *)this[14] + 180) & 0x400000) != 0);
  WebCore::WebRTCProvider::setAV1Support(this[37], (*((_DWORD *)this[14] + 180) & 0x2000) != 0);
}

void WebCore::WebRTCProvider::setH265Support(WebCore::WebRTCProvider *this, char a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _BYTE v5[32];
  char v6;

  *((_BYTE *)this + 169) = a2;
  v5[0] = 0;
  v6 = 0;
  std::optional<WebCore::RTCRtpCapabilities>::operator=[abi:sn180100]((WebCore::WebRTCProvider *)((char *)this + 48), (WTF::StringImpl *)v5);
  if (v6)
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::RTCRtpCapabilities *)v5, v3);
  v5[0] = 0;
  v6 = 0;
  std::optional<WebCore::RTCRtpCapabilities>::operator=[abi:sn180100]((WebCore::WebRTCProvider *)((char *)this + 128), (WTF::StringImpl *)v5);
  if (v6)
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::RTCRtpCapabilities *)v5, v4);
}

void WebCore::WebRTCProvider::setVP9Support(WebCore::WebRTCProvider *this, char a2, char a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  _BYTE v6[32];
  char v7;

  *((_BYTE *)this + 170) = a2;
  *((_BYTE *)this + 171) = a3;
  v6[0] = 0;
  v7 = 0;
  std::optional<WebCore::RTCRtpCapabilities>::operator=[abi:sn180100]((WebCore::WebRTCProvider *)((char *)this + 48), (WTF::StringImpl *)v6);
  if (v7)
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::RTCRtpCapabilities *)v6, v4);
  v6[0] = 0;
  v7 = 0;
  std::optional<WebCore::RTCRtpCapabilities>::operator=[abi:sn180100]((WebCore::WebRTCProvider *)((char *)this + 128), (WTF::StringImpl *)v6);
  if (v7)
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::RTCRtpCapabilities *)v6, v5);
}

void WebCore::WebRTCProvider::setAV1Support(WebCore::WebRTCProvider *this, char a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _BYTE v5[32];
  char v6;

  *((_BYTE *)this + 168) = a2;
  v5[0] = 0;
  v6 = 0;
  std::optional<WebCore::RTCRtpCapabilities>::operator=[abi:sn180100]((WebCore::WebRTCProvider *)((char *)this + 48), (WTF::StringImpl *)v5);
  if (v6)
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::RTCRtpCapabilities *)v5, v3);
  v5[0] = 0;
  v6 = 0;
  std::optional<WebCore::RTCRtpCapabilities>::operator=[abi:sn180100]((WebCore::WebRTCProvider *)((char *)this + 128), (WTF::StringImpl *)v5);
  if (v6)
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::RTCRtpCapabilities *)v5, v4);
}

uint64_t *WebCore::WheelEventDeltaFilter::create@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v6;

  v3 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = off_1E3402EA0;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  v6 = 0;
  *a1 = v3;
  return std::unique_ptr<WebCore::BasicWheelEventDeltaFilter>::~unique_ptr[abi:sn180100](&v6, v4);
}

_QWORD *WebCore::LowPowerModeNotifier::LowPowerModeNotifier(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  *a1 = -[WebLowPowerModeObserver initWithNotifier:]([WebLowPowerModeObserver alloc], "initWithNotifier:", a1);
  v4 = *a2;
  *a2 = 0;
  a1[1] = v4;
  return a1;
}

{
  uint64_t v4;

  *a1 = -[WebLowPowerModeObserver initWithNotifier:]([WebLowPowerModeObserver alloc], "initWithNotifier:", a1);
  v4 = *a2;
  *a2 = 0;
  a1[1] = v4;
  return a1;
}

uint64_t WebCore::ThermalMitigationNotifier::thermalMitigationEnabled(WebCore::ThermalMitigationNotifier *this)
{
  return 0;
}

WebCore::Settings *WebCore::Settings::create@<X0>(WebCore::Settings *this@<X0>, WebCore::Settings **a2@<X8>)
{
  unsigned int **v5;
  WebCore::Settings *result;

  v5 = (unsigned int **)WTF::fastMalloc((WTF *)0x2D8);
  result = WebCore::Settings::Settings(v5, this);
  *a2 = result;
  return result;
}

WebCore::Settings *WebCore::Settings::Settings(unsigned int **this, WebCore::Page *a2)
{
  WebCore::SettingsBase *v4;
  WebCore::Settings::Values *v5;
  WTF::StringImpl *v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  WTF *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v20;

  v4 = WebCore::SettingsBase::SettingsBase((WebCore::SettingsBase *)this, a2);
  *((_DWORD *)v4 + 57) = 1;
  *(_QWORD *)v4 = off_1E320CCE8;
  v5 = WebCore::Settings::Values::Values((WebCore::SettingsBase *)((char *)v4 + 232));
  WebCore::Settings::Values::initialize(v5, v6);
  v8 = this[1];
  this[1] = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v7);
    }
  }
  WebCore::SettingsBase::initializeDefaultFontFamilies((WebCore::SettingsBase *)this);
  WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v20, (uint64_t)a2);
  v12 = v20;
  v20 = 0;
  v13 = this[1];
  this[1] = (unsigned int *)v12;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v11);
    }
    v16 = (unsigned int *)v20;
    v20 = 0;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v11);
      }
    }
  }
  return (WebCore::Settings *)this;
}

WebCore::Settings::Values *WebCore::Settings::Values::Values(WebCore::Settings::Values *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_DWORD *)this + 48) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  WTF::URL::invalidate((WebCore::Settings::Values *)((char *)this + 336));
  return this;
}

uint64_t WebCore::Settings::Values::initialize(WebCore::Settings::Values *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t result;
  WebCore::SettingsBase *v14[5];

  *((_QWORD *)this + 10) = 0x409C200000000000;
  *((_DWORD *)this + 22) = 2;
  *((_OWORD *)this + 6) = xmmword_1968A4D80;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *((_WORD *)this + 68) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_BYTE *)this + 138) = 3;
  *(_DWORD *)((char *)this + 139) = 0;
  v5 = (_DWORD *)MEMORY[0x1E0CBEF70];
  *(_WORD *)((char *)this + 143) = 0;
  *v5 += 2;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  *((_BYTE *)this + 160) = 0;
  *(_OWORD *)((char *)this + 168) = xmmword_1968A4D90;
  *((_QWORD *)this + 23) = 0x4020000000000000;
  *((_QWORD *)this + 24) = 0x3D400000000;
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  *((_QWORD *)this + 27) = 0xBFF0000000000000;
  *((_DWORD *)this + 56) = 512;
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  *((_QWORD *)this + 30) = 0x408E000000000000;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 31);
  *((WebCore::SettingsBase **)this + 31) = v14[0];
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0x3FF0000000000000;
  *((_BYTE *)this + 288) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_DWORD *)this + 78) = 5242880;
  *((_WORD *)this + 158) = 0;
  *((_BYTE *)this + 318) = 1;
  *((_QWORD *)this + 40) = 0x4008000000000000;
  *((_BYTE *)this + 328) = 0;
  v14[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v14);
  WTF::URL::operator=((uint64_t)this + 336, (uint64_t *)v14);
  v12 = v14[0];
  v14[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      v12 = (WTF::StringImpl *)WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  *((_QWORD *)this + 47) = 50;
  *((_BYTE *)this + 384) = 0;
  *((_QWORD *)this + 49) = 0x403E000000000000;
  *((_QWORD *)this + 50) = 0x4024000000000000;
  result = WebCore::SettingsBase::defaultMaximumSourceBufferSize(v12);
  *((_DWORD *)this + 102) = result;
  *((_QWORD *)this + 52) = 0x402E000000000000;
  *((_QWORD *)this + 53) = 0;
  *((_BYTE *)this + 492) = 65;
  *((_DWORD *)this + 122) = -1612591547;
  *((_QWORD *)this + 60) = 0x8184317043457300;
  *((_QWORD *)this + 58) = 0xF415724805809972;
  *((_QWORD *)this + 59) = 0x204A67F92C441732;
  *((_QWORD *)this + 56) = 0x1B1140C009CC780BLL;
  *((_QWORD *)this + 57) = 0x9921D49CA6D00480;
  *((_QWORD *)this + 54) = 0x8008E8403A089BCLL;
  *((_QWORD *)this + 55) = 0x8D082F540C279280;
  return result;
}

uint64_t WebCore::Chrome::Chrome(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;

  *(_QWORD *)a1 = off_1E33FD748;
  if (!*(_QWORD *)(a2 + 16))
  {
    v7 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = a2;
    v8 = *(unsigned int **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v7;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v6);
      }
    }
  }
  v11 = *(unsigned int **)(a2 + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)(a1 + 8) = v11;
  v13 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = v13;
  *(_BYTE *)(a1 + 40) = 0;
  return a1;
}

_QWORD *WebCore::Page::firstTimeInitialization(WebCore::Page *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  _QWORD *v7;

  v1 = WebCore::s_platformStrategies;
  v2 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
  if (!v2)
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
    *(_QWORD *)(v1 + 8) = v2;
  }
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E34006D8;
  v3[1] = WebCore::networkStateChanged;
  v7 = v3;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 136))(v2, &v7);
  v4 = (uint64_t)v7;
  v7 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E3400700;
  v7 = v5;
  WebCore::FontCache::registerFontCacheInvalidationCallback((uint64_t *)&v7);
  result = v7;
  v7 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

uint64_t WebCore::FontCache::registerFontCacheInvalidationCallback(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  {
    WebCore::fontCacheInvalidationCallback(void)::callback = 0;
  }
  v1 = *a1;
  *a1 = 0;
  result = WebCore::fontCacheInvalidationCallback(void)::callback;
  WebCore::fontCacheInvalidationCallback(void)::callback = v1;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::Page::platformInitialize(WebCore::Page *this)
{
  NSRunLoop *v2;
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::SchedulePair *v7;
  WTF *v8;

  v2 = (NSRunLoop *)WebThreadNSRunLoop();
  WTF::SchedulePair::create((WTF::SchedulePair *)&v7, v2, (const __CFString *)*MEMORY[0x1E0C9B270]);
  WebCore::Page::addSchedulePair((uint64_t)this, &v7);
  v4 = (unsigned int *)v7;
  v7 = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (WTF *)v4;
      WTF::ThreadSafeRefCounted<WTF::SchedulePair,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v8, v3);
    }
  }
  std::call_once[abi:sn180100]<WebCore::Page::platformInitialize(void)::$_0>((uint64_t)&v8);
}

void sub_1943277B8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, unsigned int *a10)
{
  unsigned int v11;
  unsigned int v12;

  if (a9)
  {
    do
    {
      v11 = __ldaxr(a9);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, a9));
    if (!v12)
    {
      atomic_store(1u, a9);
      a10 = a9;
      WTF::ThreadSafeRefCounted<WTF::SchedulePair,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((WTF **)&a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WebCore::OpportunisticTaskScheduler *WebCore::OpportunisticTaskScheduler::OpportunisticTaskScheduler(WebCore::OpportunisticTaskScheduler *this, WebCore::Page *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  char v8;
  WTF *v9;
  char v10;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)this + 2, (uint64_t)a2);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  v10 = 5;
  WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v9, (uint64_t)this);
  v8 = 1;
  std::make_unique[abi:sn180100]<WebCore::RunLoopObserver,WebCore::RunLoopObserver::WellKnownOrder,WebCore::OpportunisticTaskScheduler::OpportunisticTaskScheduler(WebCore::Page &)::$_0,WebCore::RunLoopObserver::Type>((uint64_t *)this + 6, &v10, (uint64_t *)&v9, &v8);
  v4 = (unsigned int *)v9;
  v9 = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  *((_BYTE *)this + 56) = 0;
  return this;
}

WebCore::PointerCaptureController *WebCore::PointerCaptureController::PointerCaptureController(WebCore::PointerCaptureController *this, WebCore::Page *a2)
{
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_WORD *)this + 8) = 0;
  WebCore::PointerCaptureController::reset(this, a2);
  return this;
}

WebCore::PointerCaptureController::CapturingData *WebCore::PointerCaptureController::reset(WebCore::PointerCaptureController *this, WTF::StringImpl *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::PointerCaptureController::CapturingData **v6;
  WebCore::PointerCaptureController::CapturingData *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WebCore::PointerCaptureController::CapturingData *result;
  WTF *v12;
  void *v13;
  WTF *v14;
  void *v15;
  _BYTE v16[24];
  WebCore::PointerCaptureController::CapturingData *v17;
  uint64_t v18;

  v3 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *v3 = 0;
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = (WebCore::PointerCaptureController::CapturingData **)(v4 + 8);
      do
      {
        if (*(v6 - 1) != (WebCore::PointerCaptureController::CapturingData *)0x7FFFFFFFFFFFFFFFLL)
        {
          v7 = *v6;
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 1)
            {
              WebCore::PointerCaptureController::CapturingData::~CapturingData(v7, a2);
              WTF::fastFree(v12, v13);
            }
            else
            {
              --*(_DWORD *)v7;
            }
          }
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  *((_BYTE *)this + 17) = 0;
  v18 = 1;
  {
    WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::mousePointerEventType(void)::mouseType = (uint64_t)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
  }
  v8 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 8) = 0;
  v9 = WebCore::mousePointerEventType(void)::mouseType;
  if (WebCore::mousePointerEventType(void)::mouseType)
    *(_DWORD *)WebCore::mousePointerEventType(void)::mouseType += 2;
  *(_QWORD *)(v8 + 32) = v9;
  *(_DWORD *)(v8 + 40) = 0;
  *(_BYTE *)(v8 + 44) = -1;
  v17 = (WebCore::PointerCaptureController::CapturingData *)v8;
  WTF::HashMap<long long,WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>,WTF::IntHash<long long>,WTF::SignedWithZeroKeyHashTraits<long long>,WTF::HashTraits<WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::PointerCaptureController::CapturingData,WTF::RawPtrTraits<WebCore::PointerCaptureController::CapturingData>,WTF::DefaultRefDerefTraits<WebCore::PointerCaptureController::CapturingData>>>(v3, (WTF::StringImpl *)&v18, (uint64_t *)&v17, (uint64_t)v16);
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::PointerCaptureController::CapturingData::~CapturingData(result, v10);
      return (WebCore::PointerCaptureController::CapturingData *)WTF::fastFree(v14, v15);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::AuthenticatorCoordinator::AuthenticatorCoordinator(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  *(_QWORD *)result = 0;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = v2;
  *(_BYTE *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

{
  uint64_t v2;

  *(_QWORD *)result = 0;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = v2;
  *(_BYTE *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

WebCore::PageOverlayController *WebCore::PageOverlayController::PageOverlayController(WebCore::PageOverlayController *this, WebCore::Page *a2)
{
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;

  *(_QWORD *)this = off_1E3401628;
  if (!*((_QWORD *)a2 + 2))
  {
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = a2;
    v6 = (unsigned int *)*((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v5;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v4);
      }
    }
  }
  v9 = (unsigned int *)*((_QWORD *)a2 + 2);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *((_QWORD *)this + 1) = v9;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_BYTE *)this + 64) = 0;
  return this;
}

uint64_t WebCore::InspectorController::InspectorController(uint64_t a1, WebCore::Page *a2, WebCore::InspectorClient **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Inspector::FrontendRouter *v9;
  Inspector::FrontendRouter *v10;
  void *v11;
  WebCore::InspectorClient *v12;
  WebCore::InspectorOverlay *v13;
  uint64_t v14;
  WebCore::InspectorClient *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v22;
  Inspector::InspectorConsoleAgent *v23;
  Inspector::FrontendRouter *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)a1 = off_1E33EE3E0;
  v6 = WTF::fastMalloc((WTF *)0xF0);
  WebCore::InstrumentingAgents::InstrumentingAgents(v6, a1);
  *(_QWORD *)(a1 + 8) = v7;
  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 32) = 0;
  *(_QWORD *)v8 = off_1E33EED48;
  v24 = (Inspector::FrontendRouter *)v8;
  std::make_unique[abi:sn180100]<WebCore::WebInjectedScriptManager,WebCore::InspectorController &,WTF::Ref<WebCore::WebInjectedScriptHost,WTF::RawPtrTraits<WebCore::WebInjectedScriptHost>,WTF::DefaultRefDerefTraits<WebCore::WebInjectedScriptHost>>>((_QWORD *)(a1 + 16), a1, &v24);
  v9 = v24;
  if (v24)
  {
    if (*((_DWORD *)v24 + 2) == 1)
      v9 = (Inspector::FrontendRouter *)(*(uint64_t (**)(void))(*(_QWORD *)v24 + 8))();
    else
      --*((_DWORD *)v24 + 2);
  }
  Inspector::FrontendRouter::create(v9);
  v10 = *(Inspector::FrontendRouter **)(a1 + 24);
  ++*(_DWORD *)v10;
  v24 = v10;
  Inspector::BackendDispatcher::create();
  WTF::Ref<Inspector::FrontendRouter,WTF::RawPtrTraits<Inspector::FrontendRouter>,WTF::DefaultRefDerefTraits<Inspector::FrontendRouter>>::~Ref((uint64_t *)&v24, v11);
  v12 = *a3;
  v13 = (WebCore::InspectorOverlay *)WTF::fastMalloc((WTF *)0x138);
  *(_QWORD *)(a1 + 40) = WebCore::InspectorOverlay::InspectorOverlay(v13, a2, v12);
  v14 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v14 = 1;
  *(_OWORD *)(v14 + 8) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_QWORD *)(v14 + 16) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 56) = 0;
  Inspector::AgentRegistry::AgentRegistry((Inspector::AgentRegistry *)(a1 + 64));
  *(_QWORD *)(a1 + 80) = a2;
  v15 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 88) = v15;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(a1 + 80);
  v24 = (Inspector::FrontendRouter *)a1;
  v25 = *(_OWORD *)(a1 + 16);
  v26 = v16;
  v27 = v17;
  v28 = v18;
  v19 = WTF::fastMalloc((WTF *)0x70);
  v20 = WebCore::PageConsoleAgent::PageConsoleAgent(v19, (uint64_t)&v24);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) = v20;
  v22 = v20;
  v23 = 0;
  Inspector::AgentRegistry::append();
  if (v22)
    (*(void (**)(_QWORD *))(*v22 + 8))(v22);
  std::unique_ptr<WebCore::PageConsoleAgent>::~unique_ptr[abi:sn180100](&v23);
  return a1;
}

double WebCore::InstrumentingAgents::InstrumentingAgents(uint64_t a1, uint64_t a2)
{
  double result;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  return result;
}

uint64_t WebCore::DragCaretController::DragCaretController(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_WORD *)(this + 16) = 1;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_BYTE *)(this + 36) &= 0xF0u;
  *(_BYTE *)(this + 40) = 1;
  return this;
}

WebCore::PerformanceMonitor *WebCore::PerformanceMonitor::PerformanceMonitor(WebCore::PerformanceMonitor *this, WebCore::Page *a2)
{
  unsigned int **v4;
  WebCore::TimerBase *v5;
  WTF::MonotonicTime *v6;
  double v7;
  _BYTE v9[25];

  v4 = WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>::WeakRef<void>((unsigned int **)this, (uint64_t)a2);
  WebCore::Timer::Timer<WebCore::PerformanceMonitor,WebCore::PerformanceMonitor>((WebCore::TimerBase *)(v4 + 1), (uint64_t)this, (uint64_t)WebCore::PerformanceMonitor::measurePostLoadCPUUsage, 0);
  *((_BYTE *)this + 64) = 0;
  *((_BYTE *)this + 88) = 0;
  WebCore::Timer::Timer<WebCore::PerformanceMonitor,WebCore::PerformanceMonitor>((WebCore::PerformanceMonitor *)((char *)this + 96), (uint64_t)this, (uint64_t)WebCore::PerformanceMonitor::measurePostBackgroundingCPUUsage, 0);
  *((_BYTE *)this + 152) = 0;
  *((_BYTE *)this + 176) = 0;
  WebCore::Timer::Timer<WebCore::PerformanceMonitor,WebCore::PerformanceMonitor>((WebCore::PerformanceMonitor *)((char *)this + 184), (uint64_t)this, (uint64_t)WebCore::PerformanceMonitor::measurePerActivityStateCPUUsage, 0);
  *((_BYTE *)this + 240) = 0;
  *((_BYTE *)this + 264) = 0;
  WebCore::Timer::Timer<WebCore::PerformanceMonitor,WebCore::PerformanceMonitor>((WebCore::PerformanceMonitor *)((char *)this + 272), (uint64_t)this, (uint64_t)WebCore::PerformanceMonitor::measurePostLoadMemoryUsage, 0);
  WebCore::Timer::Timer<WebCore::PerformanceMonitor,WebCore::PerformanceMonitor>((WebCore::PerformanceMonitor *)((char *)this + 328), (uint64_t)this, (uint64_t)WebCore::PerformanceMonitor::measurePostBackgroundingMemoryUsage, 0);
  v5 = WebCore::Timer::Timer<WebCore::PerformanceMonitor,WebCore::PerformanceMonitor>((WebCore::PerformanceMonitor *)((char *)this + 384), (uint64_t)this, (uint64_t)WebCore::PerformanceMonitor::processMayBecomeInactiveTimerFired, 0);
  *((_BYTE *)this + 440) = 1;
  if ((*(_QWORD *)(*((_QWORD *)a2 + 14) + 680) & 0x800000000) != 0)
  {
    v6 = (WTF::MonotonicTime *)WTF::CPUTime::get(v5);
    *((_OWORD *)this + 15) = *(_OWORD *)v9;
    *(_OWORD *)((char *)this + 249) = *(_OWORD *)&v9[9];
    *((_QWORD *)this + 26) = 0x4082C00000000000;
    WTF::MonotonicTime::now(v6);
    WebCore::TimerBase::setNextFireTime((uint64_t)this + 184, v7 + 600.0);
  }
  return this;
}

WebCore::TimerBase *WebCore::Timer::Timer<WebCore::PerformanceMonitor,WebCore::PerformanceMonitor>(WebCore::TimerBase *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *(_QWORD *)WebCore::TimerBase::TimerBase(a1) = off_1E31F7378;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = off_1E3401A70;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a2;
  *((_QWORD *)a1 + 6) = v8;
  return a1;
}

WebCore::TimerBase *WebCore::TimerBase::TimerBase(WebCore::TimerBase *this)
{
  unint64_t StatusReg;
  unsigned int *v3;
  unsigned int v4;

  *(_QWORD *)this = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  v3 = *(unsigned int **)(StatusReg + 736);
  if (!v3)
    v3 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *((_QWORD *)this + 5) = v3;
  return this;
}

_QWORD *WebCore::PerformanceLogging::PerformanceLogging(_QWORD *this, WebCore::Page *a2)
{
  *this = a2;
  return this;
}

_QWORD *WebCore::PaymentCoordinator::PaymentCoordinator(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  *result = 0;
  v2 = *a2;
  *a2 = 0;
  result[1] = v2;
  result[2] = 0;
  return result;
}

{
  uint64_t v2;

  *result = 0;
  v2 = *a2;
  *a2 = 0;
  result[1] = v2;
  result[2] = 0;
  return result;
}

_QWORD *WebCore::PageConsoleAgent::PageConsoleAgent(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)Inspector::InspectorConsoleAgent::InspectorConsoleAgent();
  *result = off_1E33F1358;
  result[2] = &unk_1E33F13C8;
  result[13] = *(_QWORD *)(a2 + 40);
  return result;
}

WebCore::InspectorOverlay *WebCore::InspectorOverlay::InspectorOverlay(WebCore::InspectorOverlay *this, WebCore::Page *a2, WebCore::InspectorClient *a3)
{
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_BYTE *)this + 120) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  WebCore::Timer::Timer<WebCore::InspectorOverlay,WebCore::InspectorOverlay>((WebCore::InspectorOverlay *)((char *)this + 216), (uint64_t)this);
  *((_DWORD *)this + 76) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  return this;
}

WebCore::TimerBase *WebCore::Timer::Timer<WebCore::InspectorOverlay,WebCore::InspectorOverlay>(WebCore::TimerBase *a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)WebCore::TimerBase::TimerBase(a1) = off_1E31F7378;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = off_1E33EEAF0;
  v4[1] = WebCore::InspectorOverlay::updatePaintRectsTimerFired;
  v4[2] = 0;
  v4[3] = a2;
  *((_QWORD *)a1 + 6) = v4;
  return a1;
}

WebCore::TimerBase *WebCore::Timer::Timer<WebCore::ProgressTracker,WebCore::ProgressTracker>(WebCore::TimerBase *a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)WebCore::TimerBase::TimerBase(a1) = off_1E31F7378;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = off_1E33F6E28;
  v4[1] = WebCore::ProgressTracker::progressHeartbeatTimerFired;
  v4[2] = 0;
  v4[3] = a2;
  *((_QWORD *)a1 + 6) = v4;
  return a1;
}

uint64_t WebCore::FocusController::FocusController(uint64_t a1, uint64_t a2, __int16 a3)
{
  return WebCore::FocusController::FocusController(a1, a2, a3);
}

{
  *(_DWORD *)a1 = 0;
  WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>::WeakRef<void>((unsigned int **)(a1 + 8), a2);
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 26) = a3;
  WebCore::Timer::Timer<WebCore::FocusController,WebCore::FocusController>(a1 + 32, a1);
  *(_QWORD *)(a1 + 88) = 0;
  return a1;
}

uint64_t WebCore::Timer::Timer<WebCore::FocusController,WebCore::FocusController>(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;

  *(_QWORD *)a1 = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = *(unsigned int **)(StatusReg + 736);
  if (!v5)
    v5 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = off_1E31F7378;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E33FEBD0;
  v7[1] = WebCore::FocusController::focusRepaintTimerFired;
  v7[2] = 0;
  v7[3] = a2;
  *(_QWORD *)(a1 + 48) = v7;
  return a1;
}

uint64_t WebCore::DragController::DragController(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  unsigned int **v5;
  unsigned int *v6;

  v5 = WTF::WeakRef<WebCore::Page,WTF::DefaultWeakPtrImpl>::WeakRef<void>((unsigned int **)a1, a2);
  v6 = *a3;
  *a3 = 0;
  v5[1] = v6;
  *((_DWORD *)v5 + 13) = 0;
  *((_DWORD *)v5 + 14) = 0;
  v5[8] = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 0;
  WTF::URL::invalidate((WTF::URL *)(v5 + 8));
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  return a1;
}

uint64_t WebCore::SettingsBase::defaultMaximumSourceBufferSize(WebCore::SettingsBase *this)
{
  return 110376422;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::PageGroup *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::PageGroup *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::PageGroup *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::PageGroup *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (WTF::StringImpl **)v6;
    do
    {
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (*v14)
        {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::PageGroup *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::PageGroup *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::PageGroup *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::PageGroup *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(*a1, v14);
          v16 = v15;
          WebCore::ContentType::~ContentType(v14, v17);
          if (v14 == a3)
            v11 = v16;
        }
        else
        {
          WebCore::ContentType::~ContentType(v14, v10);
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_14;
  }
  result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::PageGroup *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::PageGroup *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::PageGroup *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::PageGroup *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::PageGroup *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::PageGroup *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::PageGroup *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::PageGroup *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t *WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a1;
  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    if (v3)
      goto LABEL_15;
    v3 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 8) = a2;
    v7 = *(unsigned int **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v3;
    if (!v7)
      goto LABEL_15;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v6);
    }
    v3 = *(_QWORD *)(a2 + 8);
    if (v3)
    {
LABEL_15:
      do
        v5 = __ldaxr((unsigned int *)v3);
      while (__stlxr(v5 + 1, (unsigned int *)v3));
    }
    v2 = a1;
  }
  else
  {
    v3 = 0;
  }
  *v2 = v3;
  return v2;
}

uint64_t WTF::SchedulePair::create(WTF::SchedulePair *this, NSRunLoop *a2, const __CFString *a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0x20);
  result = MEMORY[0x19AEA4770](v6, a2, a3);
  *(_QWORD *)this = v6;
  return result;
}

void sub_1943283DC(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebThreadNSRunLoop()
{
  uint64_t result;

  if (webThreadStarted != 1)
    return objc_msgSend(MEMORY[0x1E0C99E58], "currentRunLoop");
  if (byte_1EE337834 == 1)
    return qword_1EE337870;
  result = 0;
  qword_1EE337870 = 0;
  byte_1EE337834 = 1;
  return result;
}

unsigned int **WebCore::ContentExtensions::DFABytecodeInterpreter::actionsMatchingEverything@<X0>(unsigned int **this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v2;
  unsigned int **v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;

  *a2 = 0;
  v2 = **this;
  v9 = 4;
  if (v2 >= 5)
  {
    v3 = this;
    v4 = 4;
    while (1)
    {
      v5 = *((unsigned __int8 *)*v3 + v4);
      if ((v5 & 0xF) != 6)
        break;
      this = (unsigned int **)WebCore::ContentExtensions::DFABytecodeInterpreter::interpretAppendAction((uint64_t)v3, &v9);
      v4 = v9;
LABEL_7:
      if (v4 >= v2)
        return this;
    }
    if ((v5 & 0xF) != 8)
      return this;
    if ((unint64_t)v3[1] <= v4)
    {
      __break(1u);
      return this;
    }
    v6 = v5 & 0x30;
    if ((v5 & 0x30) != 0)
    {
      if (v6 == 32)
      {
        v7 = 4;
      }
      else
      {
        if (v6 != 16)
        {
          v8 = v4 + 1;
          goto LABEL_17;
        }
        v7 = 3;
      }
    }
    else
    {
      v7 = 2;
    }
    v8 = v7 + v4;
LABEL_17:
    v4 = v8 + dword_1968DFE50[(v5 >> 6) ^ 2];
    v9 = v4;
    goto LABEL_7;
  }
  return this;
}

void WebCore::ContentExtensions::ContentExtension::compileGlobalDisplayNoneStyleSheet(WebCore::ContentExtensions::ContentExtension **this)
{
  WTF::StringImpl *v2;
  char *v3;
  WebCore::ContentExtensions::ContentExtension *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::ContentExtensions::ContentExtensionsBackend *v10;
  uint64_t *v11;
  WebCore::StyleSheetContents **v12;
  void *v13;
  WTF::StringImpl *v14;
  WebCore::StyleSheetContents *v15;
  uint64_t v16;
  WebCore::StyleSheetContents *v17;
  WTF::StringImpl *v18;
  char v19;
  WTF::StringImpl *v20;
  WebCore::StyleSheetContents *v21;
  WTF::StringImpl *v22[2];
  int v23;
  char v24;
  _DWORD *v25[2];
  uint64_t v26;
  unint64_t v27;
  unsigned int FirstIgnorePreviousRules;
  WTF::StringImpl *v29[14];
  unsigned int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  FirstIgnorePreviousRules = WebCore::ContentExtensions::ContentExtension::findFirstIgnorePreviousRules(this[2]);
  v26 = (*(uint64_t (**)(WebCore::ContentExtensions::ContentExtension *))(*(_QWORD *)this[2] + 40))(this[2]);
  v27 = (unint64_t)v2;
  v25[0] = &v26;
  v25[1] = &FirstIgnorePreviousRules;
  v22[0] = 0;
  v22[1] = 0;
  v23 = 0;
  v24 = 1;
  v3 = (char *)(this + 21);
  v4 = this[21];
  v5 = *((unsigned int *)this + 45);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    do
    {
      v7 = *(_QWORD *)v4;
      v2 = (WTF::StringImpl *)v27;
      if (v27 <= *(_QWORD *)v4)
      {
        __break(0xC471u);
        JUMPOUT(0x19432878CLL);
      }
      if (FirstIgnorePreviousRules > v7)
      {
        v8 = v26;
        if (*(_BYTE *)(v26 + *(_QWORD *)v4) == 2)
        {
          if (v23)
          {
            WTF::StringBuilder::append((uint64_t)v22, 0x2Cu);
            v8 = v26;
            v2 = (WTF::StringImpl *)v27;
          }
          WebCore::ContentExtensions::DeserializedAction::deserialize(v8, (unint64_t)v2, v7, (uint64_t)v29);
          v9 = v30;
          if (v30 == 2)
          {
            WTF::StringBuilder::append(v22, v29);
            v9 = v30;
          }
          if (v9 != 0xFFFFFFFFLL)
            ((void (*)(WebCore::StyleSheetContents **, WTF::StringImpl **))off_1E3394EA8[v9])(&v21, v29);
        }
      }
      v4 = (WebCore::ContentExtensions::ContentExtension *)((char *)v4 + 8);
      v6 -= 8;
    }
    while (v6);
    if (v23)
    {
      v10 = (WebCore::ContentExtensions::ContentExtensionsBackend *)WTF::StringBuilder::append((uint64_t)v22, 0x7Bu);
      v11 = WebCore::ContentExtensions::ContentExtensionsBackend::displayNoneCSSRule(v10);
      WTF::StringBuilder::append(v22, (WTF::StringImpl **)v11);
      WTF::StringBuilder::append((uint64_t)v22, 0x7Du);
      WebCore::ContentExtensions::contentExtensionCSSParserContext((uint64_t)v29);
      WebCore::StyleSheetContents::create((uint64_t)v29, (uint64_t *)&v21);
      v12 = this + 8;
      WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>::operator=<WebCore::StyleSheetContents>(this + 8, &v21);
      WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>::~Ref(&v21, v13);
      WebCore::CSSParserContext::~CSSParserContext((WebCore::CSSParserContext *)v29, v14);
      v15 = this[8];
      *((_BYTE *)v15 + 120) = 1;
      WTF::StringBuilder::toString((WTF::StringBuilder *)v22, v29);
      v19 = WebCore::StyleSheetContents::parseString(v15, (const WTF::String *)v29, v16, v17);
      v20 = v29[0];
      v29[0] = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v18);
        else
          *(_DWORD *)v20 -= 2;
      }
      if ((v19 & 1) == 0)
        WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>::~Ref(v12, 0);
      WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<WebCore::ContentExtensions::ContentExtension::compileGlobalDisplayNoneStyleSheet(void)::$_0>((uint64_t)v3, v25);
    }
  }
  WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)v22, v2);
}

unint64_t WebCore::ContentExtensions::ContentExtension::findFirstIgnorePreviousRules(WebCore::ContentExtensions::ContentExtension *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;

  v1 = (*(uint64_t (**)(WebCore::ContentExtensions::ContentExtension *))(*(_QWORD *)this + 40))(this);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      if (*(_BYTE *)(v1 + v3) == 4)
        return v4;
      if (v2 <= v4)
      {
        __break(0xC471u);
LABEL_25:
        __break(1u);
LABEL_26:
        JUMPOUT(0x194328854);
      }
      v3 = (v4 + 1);
      v5 = v2 - v3;
      if (v2 < v3)
        goto LABEL_25;
      v6 = *(unsigned __int8 *)(v1 + v4);
      if (v6 == 7)
      {
        if (v5 <= 3)
        {
          __break(0xC471u);
          goto LABEL_26;
        }
      }
      else if (v6 == 6)
      {
        if (v5 <= 3)
        {
          __break(0xC471u);
          JUMPOUT(0x19432887CLL);
        }
      }
      else if (v6 == 5 || v6 == 4 || (v6 & 0xFE) != 2)
      {
        goto LABEL_15;
      }
      v3 = (*(_DWORD *)(v1 + v3) + v4 + 1);
LABEL_15:
      v4 = v3;
    }
    while (v2 > v3);
  }
  return 0xFFFFFFFFLL;
}

uint64_t WTF::Mapper<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<unsigned long long,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>(WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> const&)::{lambda(unsigned long long&&)#1},WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits> const&,void>::map(uint64_t result, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v2 = *a2;
  if (*a2)
  {
    v3 = result;
    v4 = *((unsigned int *)v2 - 3);
    if (!(_DWORD)v4)
      goto LABEL_23;
    if (v4 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    result = WTF::fastMalloc((WTF *)(8 * v4));
    *(_DWORD *)(v3 + 8) = v4;
    *(_QWORD *)v3 = result;
    v2 = *a2;
    if (*a2)
    {
LABEL_23:
      if (*((_DWORD *)v2 - 3))
      {
        v6 = *((unsigned int *)v2 - 1);
        i = v2;
        if ((_DWORD)v6)
        {
          v8 = 8 * v6;
          for (i = v2; (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
          {
            v8 -= 8;
            if (!v8)
              return result;
          }
        }
        v9 = &v2[v6];
        if (v9 != i)
        {
          v10 = *(_QWORD *)v3;
          v11 = *(_DWORD *)(v3 + 12);
LABEL_14:
          v12 = *i++;
          *(_QWORD *)(v10 + 8 * v11++) = v12;
          while (i != v9)
          {
            if ((unint64_t)*i < 0xFFFFFFFFFFFFFFFELL)
            {
              if (i != v9)
                goto LABEL_14;
              break;
            }
            ++i;
          }
          *(_DWORD *)(v3 + 12) = v11;
        }
      }
    }
  }
  return result;
}

double WTF::URL::URL(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  double result;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v2;
  v3 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
  *(_DWORD *)(a1 + 8) = v3;
  v4 = v3 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
  *(_DWORD *)(a1 + 8) = v4;
  v5 = v4 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 8) = v5;
  v6 = v5 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v6 & 0x3F;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
  result = *(double *)((char *)a2 + 28);
  *(double *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 2) &= ~1u;
  return result;
}

uint64_t WebCore::jsNode_nodeName(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *v11;

  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + 24) + 104))(&v11);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = v11;
  if (!v11 || (v5 = *((_DWORD *)v11 + 1)) == 0)
  {
    v6 = *(_QWORD *)(v3 + 41968);
LABEL_7:
    v11 = 0;
    if (!v4)
      return v6;
    goto LABEL_8;
  }
  if (v5 != 1)
    goto LABEL_4;
  v8 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  if ((*((_BYTE *)v11 + 16) & 4) != 0)
  {
    v9 = *v8;
LABEL_15:
    v6 = *(_QWORD *)(v3 + 8 * v9 + 42216);
    goto LABEL_16;
  }
  v10 = *(unsigned __int16 *)v8;
  if (v10 <= 0xFF)
  {
    v9 = v10;
    goto LABEL_15;
  }
LABEL_4:
  v6 = *(_QWORD *)(v3 + 64760);
  if (!v6 || v11 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v4 = v11;
    goto LABEL_7;
  }
LABEL_16:
  v11 = 0;
LABEL_8:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v6;
}

WTF::MonotonicTime *WebCore::TileController::tileCacheLayerBoundsChanged(WebCore::TileController *this)
{
  WTF::MonotonicTime *result;
  uint64_t v3;
  double v4;
  double v5;

  result = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 48) + 144))(*(_QWORD *)(*((_QWORD *)this + 2) + 48));
  if (*((_BYTE *)this + 314))
  {
    result = *(WTF::MonotonicTime **)(*((_QWORD *)this + 2) + 48);
    if (result)
    {
      *((_BYTE *)this + 312) = 0;
      return (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)result + 144))(result);
    }
  }
  else
  {
    v3 = *((_QWORD *)this + 29);
    if ((v3 & 0xFFFFFFFFFFFFLL) == 0 || *(double *)((v3 & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      v4 = *((double *)this + 32);
      *((_QWORD *)this + 28) = 0;
      WTF::MonotonicTime::now(result);
      return (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime((uint64_t)this + 200, v4 + v5);
    }
    else
    {
      *((_QWORD *)this + 29) = v3 & 0xFDFFFFFFFFFFFFLL | 0x2000000000000;
    }
  }
  return result;
}

uint64_t WebCore::GraphicsLayerCA::setChildrenTransform(WebCore::GraphicsLayerCA *this, const WebCore::TransformationMatrix *a2)
{
  double *v4;
  uint64_t result;

  if (*((_QWORD *)this + 14))
    v4 = (double *)*((_QWORD *)this + 14);
  else
    v4 = (double *)&WebCore::TransformationMatrix::identity;
  result = WebCore::TransformationMatrix::operator==((double *)a2, v4);
  if ((result & 1) == 0)
  {
    WebCore::GraphicsLayer::setChildrenTransform(this, a2);
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged((uint64_t)this, 32, 0);
  }
  return result;
}

uint64_t WebCore::GraphicsLayerCA::setBackdropFilters(WebCore::GraphicsLayerCA *this, const WebCore::FilterOperations *a2)
{
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v5 = (*(uint64_t (**)(WebCore::GraphicsLayerCA *))(*(_QWORD *)this + 952))(this);
  v6 = (_QWORD *)((char *)this + 152);
  v7 = *((unsigned int *)this + 41);
  if ((_DWORD)v7 != *((_DWORD *)a2 + 3))
  {
LABEL_10:
    if ((_DWORD)v5)
      WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)this + 38, (uint64_t)a2);
    else
      WebCore::GraphicsLayer::clearBackdropFilters((uint64_t)this, v4);
    WebCore::GraphicsLayerCA::noteLayerPropertyChanged((uint64_t)this, 2415919104, 0);
    return v5;
  }
  v8 = *(_QWORD *)a2;
  v9 = (_QWORD *)*v6;
  if ((_DWORD)v7)
  {
    v10 = 8 * v7 - 8;
    v11 = (_QWORD *)*v6;
    v12 = *(_QWORD **)a2;
    while (1)
    {
      v13 = v10;
      if (!(*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*v11 + 24))(*v11, *v12))
        goto LABEL_10;
      ++v11;
      ++v12;
      v10 = v13 - 8;
      if (!v13)
        goto LABEL_6;
    }
  }
  v12 = *(_QWORD **)a2;
  v11 = (_QWORD *)*v6;
LABEL_6:
  if (v11 != &v9[v7] || v12 != (_QWORD *)(v8 + 8 * v7))
    goto LABEL_10;
  return v5;
}

uint64_t WebCore::GraphicsLayerCA::setFilters(WebCore::GraphicsLayerCA *this, const WebCore::FilterOperations *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v5 = (*(uint64_t (**)(WebCore::GraphicsLayerCA *))(*(_QWORD *)this + 952))(this);
  v6 = *((unsigned int *)this + 37);
  if ((_DWORD)v6 == *((_DWORD *)a2 + 3))
  {
    v7 = *(_QWORD **)a2;
    v8 = *((_QWORD *)this + 17);
    if ((_DWORD)v6)
    {
      v9 = 8 * v6 - 8;
      v10 = (_QWORD *)*((_QWORD *)this + 17);
      v11 = *(_QWORD **)a2;
      while (1)
      {
        v12 = v9;
        if (!(*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*v10 + 24))(*v10, *v11))
          break;
        ++v10;
        ++v11;
        v9 = v12 - 8;
        if (!v12)
          goto LABEL_6;
      }
    }
    else
    {
      v11 = *(_QWORD **)a2;
      v10 = (_QWORD *)*((_QWORD *)this + 17);
LABEL_6:
      if (v10 == (_QWORD *)(v8 + 8 * v6) && v11 == &v7[v6])
        return v5;
    }
  }
  if ((_DWORD)v5)
  {
    WebCore::GraphicsLayer::setFilters(this, a2);
  }
  else
  {
    if (!*((_DWORD *)this + 37))
      return v5;
    WebCore::GraphicsLayer::clearFilters((uint64_t)this, v4);
  }
  WebCore::GraphicsLayerCA::noteLayerPropertyChanged((uint64_t)this, 0x8000000, 0);
  return v5;
}

BOOL WebCore::PlatformCALayerCocoa::filtersCanBeComposited(uint64_t *a1)
{
  unint64_t v1;
  BOOL v2;
  unint64_t v4;
  uint64_t v5;

  v1 = *((unsigned int *)a1 + 3);
  if ((_DWORD)v1)
  {
    v4 = 0;
    v2 = 0;
    v5 = *a1;
    do
    {
      if (!*(_BYTE *)(*(_QWORD *)(v5 + 8 * v4) + 12))
        break;
      if (*(_BYTE *)(*(_QWORD *)(v5 + 8 * v4) + 12) == 11 && v1 - 1 > v4)
        break;
      v2 = ++v4 >= v1;
    }
    while (v1 != v4);
  }
  else
  {
    return 0;
  }
  return v2;
}

uint64_t WebCore::RenderLayerBacking::updateTransform(WebCore::RenderLayerBacking *this, const WebCore::RenderStyle *a2)
{
  const WebCore::RenderStyle *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _QWORD *v12;
  WebCore::ViewTransition *v13;
  int IsCaptured;
  int v15;
  _DWORD *active;
  uint64_t v17;
  double v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  _DWORD *v25;
  WebCore::RenderViewTransitionCapture *v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  __int128 v32;
  __int128 v33;
  float64x2_t v34;
  float64x2_t v35;

  v2 = a2;
  v30 = (float64x2_t)xmmword_1969FCBE0;
  v31 = (float64x2_t)unk_1969FCBF0;
  v34 = (float64x2_t)xmmword_1969FCC20;
  v35 = (float64x2_t)unk_1969FCC30;
  v32 = xmmword_1969FCC00;
  v33 = unk_1969FCC10;
  v28 = (float64x2_t)constinit_103;
  v29 = *(float64x2_t *)algn_1969FCBD0;
  v4 = *((_QWORD *)this + 1);
  v5 = *(_QWORD *)(v4 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8);
  if (*(_QWORD *)(v7 + 1272) == v6)
    goto LABEL_4;
  if (*(_BYTE *)(v5 + 46) == 49)
  {
    v13 = *(WebCore::ViewTransition **)(v7 + 2112);
    if (v13)
    {
      IsCaptured = WebCore::ViewTransition::documentElementIsCaptured(v13);
      v2 = a2;
      v15 = IsCaptured;
      v4 = *((_QWORD *)this + 1);
      v5 = *(_QWORD *)(v4 + 32);
      if (v15)
        goto LABEL_20;
    }
LABEL_4:
    v8 = *(_DWORD *)(v5 + 20);
    if ((v8 & 0x20000) != 0)
    {
      if ((*(_BYTE *)(v5 + 45) & 2) != 0)
        v5 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8);
      v11 = *(_QWORD *)(v5 + 88);
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 32) + 40) + 20)
        || (v12 = *(_QWORD **)(v11 + 40), v12[41])
        || v12[38]
        || v12[39]
        || v12[40]
        || (v8 & 0x100000) != 0)
      {
        WebCore::RenderLayer::updateTransformFromStyle(v4, (uint64_t)&v28, (uint64_t)v2, 0x1Eu);
      }
    }
    goto LABEL_5;
  }
  if ((*(_BYTE *)(v5 + 22) & 0x40) == 0)
    goto LABEL_4;
LABEL_20:
  active = (_DWORD *)WebCore::Document::activeViewTransition(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8)
                                                                                               + 40)
                                                                                   + 8));
  if (active)
  {
    ++active[6];
    v25 = active;
    v17 = WebCore::ViewTransition::viewTransitionNewPseudoForCapturedElement((WebCore::ViewTransition *)active, *(WebCore::RenderLayerModelObject **)(*((_QWORD *)this + 1) + 32));
    if (v17)
    {
      ++*(_DWORD *)(v17 + 16);
      v27 = (WebCore::RenderViewTransitionCapture *)v17;
      WebCore::TransformationMatrix::scaleNonUniform(&v28, *(float *)(v17 + 272), *(float *)(v17 + 276));
      v24 = (double)(int)WebCore::RenderViewTransitionCapture::captureContentInset(v27) * 0.015625;
      v18 = (double)(int)((unint64_t)WebCore::RenderViewTransitionCapture::captureContentInset(v27) >> 32)
          * 0.015625;
      v34 = vaddq_f64(v34, vmlaq_n_f64(vmulq_n_f64(v30, v18), v28, v24));
      v35 = vaddq_f64(v35, vmlaq_n_f64(vmulq_n_f64(v31, v18), v29, v24));
      v19 = *((_DWORD *)v27 + 4);
      if (!v19)
      {
        result = 286;
        __break(0xC471u);
        return result;
      }
      *((_DWORD *)v27 + 4) = v19 - 1;
    }
    v20 = *((_QWORD *)this + 1);
    if ((*(_BYTE *)(v20 + 24) & 1) != 0)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 32) + 24) + 8)
                                                          + 40)
                                              + 8)
                                  + 1944)
                      + 248);
      v22 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v21 + 64) + 832))(v21 + 64, 0, 1);
      v23 = (double)-(int)v22;
      v34 = vaddq_f64(v34, vmlaq_n_f64(vmulq_n_f64(v30, (double)-HIDWORD(v22)), v28, v23));
      v35 = vaddq_f64(v35, vmlaq_n_f64(vmulq_n_f64(v31, (double)-HIDWORD(v22)), v29, v23));
    }
    if (v25[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 16))(v25);
    else
      --v25[6];
  }
LABEL_5:
  v9 = *((_QWORD *)this + 8);
  if (v9)
    (*(void (**)(uint64_t, float64x2_t *, const WebCore::RenderStyle *))(*(_QWORD *)v9 + 184))(v9, &v28, v2);
  return (*(uint64_t (**)(void))(**((_QWORD **)this + 9) + 184))();
}

uint64_t WebCore::GraphicsLayerCA::setTransform(WebCore::GraphicsLayerCA *this, const WebCore::TransformationMatrix *a2)
{
  double *v4;
  uint64_t result;
  _OWORD *v6;
  void *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  WTF *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  if (*((_QWORD *)this + 13))
    v4 = (double *)*((_QWORD *)this + 13);
  else
    v4 = (double *)&WebCore::TransformationMatrix::identity;
  result = WebCore::TransformationMatrix::operator==((double *)a2, v4);
  if ((result & 1) == 0)
  {
    v6 = (_OWORD *)*((_QWORD *)this + 13);
    if (v6)
    {
      v16 = *(_OWORD *)a2;
      v17 = *((_OWORD *)a2 + 1);
      v18 = *((_OWORD *)a2 + 3);
      v6[2] = *((_OWORD *)a2 + 2);
      v6[3] = v18;
      *v6 = v16;
      v6[1] = v17;
      v19 = *((_OWORD *)a2 + 4);
      v20 = *((_OWORD *)a2 + 5);
      v21 = *((_OWORD *)a2 + 7);
      v6[6] = *((_OWORD *)a2 + 6);
      v6[7] = v21;
      v6[4] = v19;
      v6[5] = v20;
    }
    else
    {
      v8 = (_OWORD *)WTF::fastMalloc((WTF *)0x80);
      v9 = *((_OWORD *)a2 + 3);
      v11 = *(_OWORD *)a2;
      v10 = *((_OWORD *)a2 + 1);
      v8[2] = *((_OWORD *)a2 + 2);
      v8[3] = v9;
      *v8 = v11;
      v8[1] = v10;
      v12 = *((_OWORD *)a2 + 7);
      v14 = *((_OWORD *)a2 + 4);
      v13 = *((_OWORD *)a2 + 5);
      v8[6] = *((_OWORD *)a2 + 6);
      v8[7] = v12;
      v8[4] = v14;
      v8[5] = v13;
      v15 = (WTF *)*((_QWORD *)this + 13);
      *((_QWORD *)this + 13) = v8;
      if (v15)
        WTF::fastFree(v15, v7);
    }
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged((uint64_t)this, 16, 0);
  }
  return result;
}

BOOL WebCore::TransformationMatrix::operator==(double *a1, double *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && a1[8] == a2[8]
      && a1[9] == a2[9]
      && a1[10] == a2[10]
      && a1[11] == a2[11]
      && a1[12] == a2[12]
      && a1[13] == a2[13]
      && a1[14] == a2[14]
      && a1[15] == a2[15];
}

uint64_t `non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerSetNeedsToRevalidateTiles(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t i;

  if ((*(_WORD *)(this - 431) & 1) == 0)
  {
    v1 = *(unsigned __int8 *)(this + 281);
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = v2 | 0x40000000;
    if (!v1)
    {
      for (i = *(_QWORD *)(this - 408); i; i = *(_QWORD *)(i + 200))
      {
        if ((*(_BYTE *)(i + 890) & 0x40) != 0)
          break;
        *(_BYTE *)(i + 890) |= 0x40u;
      }
      if (!v2)
        return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(this - 584) + 40))(*(_QWORD *)(this - 584), this - 608);
    }
  }
  return this;
}

uint64_t WebCore::RenderObject::debugDescription@<X0>(WebCore::RenderObject *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  char v18;
  uint64_t *v19;
  const char *v20;
  int v21;
  WTF::StringImpl *v22;
  int v23;
  uint64_t v24[2];
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 1;
  v4 = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 104))(this);
  v6 = v5;
  WTF::Internal::appendHex();
  v25 = v7;
  if (v6)
  {
    v8 = v6 - 1;
    v22 = v4;
    if ((unint64_t)(v6 - 1) >> 31)
    {
      result = 124;
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    v8 = 0;
    v22 = v4;
  }
  v23 = v8;
  v21 = 3;
  v19 = v24;
  v20 = " 0x";
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>((WTF::StringBuilder *)&v15, (uint64_t)&v22, (uint64_t)&v20, (uint64_t *)&v19);
  if ((*((_BYTE *)this + 45) & 1) == 0)
  {
    v10 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v10)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v10 + 304))(&v22);
      LOBYTE(v20) = 32;
      v24[0] = (uint64_t)v22;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v15, (char *)&v20, v24);
      v11 = v22;
      v22 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
  }
  v12 = v15;
  if (v15
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v15),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v15),
        (v12 = v15) != 0))
  {
    *(_DWORD *)v12 += 2;
  }
  *a2 = v12;
  v13 = v16;
  v16 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v9);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = (uint64_t)v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

const char *WebCore::RenderView::renderName(WebCore::RenderView *this)
{
  return "RenderView";
}

uint64_t WebCore::TileController::setScrollingPerformanceTestingEnabled(uint64_t this, char a2)
{
  *(_BYTE *)(this + 306) = a2;
  return this;
}

WTF::StringImpl *WebCore::Element::debugDescription@<X0>(WebCore::Element *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  const WebCore::Element *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  char v15;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  WebCore::Node::debugDescription(this, &v11);
  v6 = v11;
  if (v11)
  {
    v7 = *(_DWORD *)v11;
    *(_DWORD *)v11 += 2;
    v12 = v6;
    v14 = *((_DWORD *)v6 + 1);
    v11 = 0;
    if (v7)
      *(_DWORD *)v6 = v7;
    else
      WTF::StringImpl::destroy(v6, v4);
  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  WebCore::appendAttributes((WTF::StringBuilder *)&v12, this, v5);
  result = v12;
  if (v12
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v12),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v12),
        (result = v12) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v8);
      result = v12;
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::Node::debugDescription@<X0>(WebCore::Node *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v3;
  int8x16_t *v4;
  uint64_t v5;
  int v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _QWORD v12[2];
  int8x16_t *v13[2];
  _BYTE v14[16];
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 104))(&v11);
  v3 = v11;
  v4 = (int8x16_t *)"<none>";
  if (v11)
  {
    if (*((_DWORD *)v11 + 1))
    {
      v4 = (int8x16_t *)"";
      v5 = 1;
    }
    else
    {
      v5 = 7;
    }
    *(_DWORD *)v11 += 2;
  }
  else
  {
    v5 = 7;
  }
  v10 = v3;
  WTF::Internal::appendHex();
  v15 = v6;
  v13[0] = v4;
  v13[1] = (int8x16_t *)v5;
  v12[0] = " 0x";
  v12[1] = 4;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::HexNumberBuffer>(v13, (uint64_t *)&v10, (uint64_t)v12, (uint64_t)v14, a2);
  if (*a2)
  {
    v9 = v10;
    v10 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLElement::nodeName@<X0>(WTF::StringImpl *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v2;
  _QWORD *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v2 = this;
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3358) & 1) == 0)
    return WebCore::Element::nodeName(this, a2);
  v4 = (_QWORD *)*((_QWORD *)this + 12);
  if (!v4[2])
  {
    v5 = (_DWORD *)v4[6];
    if (v5)
    {
LABEL_4:
      *v5 += 2;
LABEL_5:
      *a2 = v5;
      return this;
    }
    WTF::AtomString::convertToASCIIUppercase((WTF::AtomString *)(v4 + 3));
    v7 = *((_QWORD *)v2 + 12);
    v8 = v12;
    v12 = 0;
    this = *(WTF::StringImpl **)(v7 + 48);
    *(_QWORD *)(v7 + 48) = v8;
    if (this)
    {
      v9 = *(_DWORD *)this - 2;
      if (*(_DWORD *)this != 2)
      {
LABEL_9:
        *(_DWORD *)this = v9;
        goto LABEL_10;
      }
      WTF::StringImpl::destroy(this, v6);
      this = v12;
      v12 = 0;
      if (this)
      {
        v9 = *(_DWORD *)this - 2;
        if (*(_DWORD *)this != 2)
          goto LABEL_9;
        this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v11);
      }
    }
LABEL_10:
    v5 = *(_DWORD **)(*((_QWORD *)v2 + 12) + 48);
    if (!v5)
      goto LABEL_5;
    goto LABEL_4;
  }
  WebCore::Element::nodeName(this, &v12);
  WTF::String::convertToASCIIUppercase((WTF::String *)&v12);
  this = v12;
  v12 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v10);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

WTF::StringBuilder *WebCore::appendAttributes(WTF::StringBuilder *this, WTF::StringBuilder *a2, const WebCore::Element *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  const char *v29;
  int v30;

  v3 = *((_QWORD *)a2 + 13);
  if (v3)
  {
    v5 = (uint64_t)this;
    if (!*(_QWORD *)(v3 + 24))
      goto LABEL_50;
    v22 = (*(_BYTE *)(v3 + 4) & 1) != 0 ? *(uint64_t **)(v3 + 40) : (uint64_t *)(v3 + 32);
    v23 = *v22;
    if (*v22 == WebCore::HTMLNames::idAttr)
    {
      v24 = 0;
    }
    else
    {
      v24 = 0;
      v25 = v22 + 2;
      do
      {
        if (*(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        ++v24;
        v26 = *v25;
        v25 += 2;
        v23 = v26;
      }
      while (v26 != WebCore::HTMLNames::idAttr);
    }
    v29 = " id='";
    v30 = 5;
    v28 = v22[2 * v24 + 1];
    v27 = 39;
    this = (WTF::StringBuilder *)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>>(this, (uint64_t)&v29, &v28, &v27);
    v3 = *((_QWORD *)a2 + 13);
    if (v3)
    {
LABEL_50:
      if (*(_QWORD *)(v3 + 16))
      {
        this = (WTF::StringBuilder *)WTF::StringBuilder::append();
        v6 = *(_QWORD *)(*((_QWORD *)a2 + 13) + 16);
        if (v6)
        {
          v7 = *(_DWORD *)(v6 + 12);
          if (v7 > 7)
          {
            v8 = 7;
            goto LABEL_7;
          }
          v8 = *(unsigned int *)(v6 + 12);
          if (v7)
          {
LABEL_7:
            this = WTF::StringBuilder::append((WTF::StringImpl **)v5, (WTF::StringImpl **)(v6 + 16));
            if (v8 != 1)
            {
              v9 = 1;
              v10 = 24;
              do
              {
                LOBYTE(v29) = 32;
                v11 = *(_QWORD *)(v5 + 8);
                if (v11
                  && ((v12 = *(unsigned int *)(v5 + 16), v12 < *(_DWORD *)(v11 + 4))
                    ? (v13 = *(_QWORD *)v5 == 0)
                    : (v13 = 0),
                      v13))
                {
                  v15 = *(_DWORD *)(v11 + 16);
                  v16 = *(_QWORD *)(v11 + 8);
                  *(_DWORD *)(v5 + 16) = v12 + 1;
                  if ((v15 & 4) != 0)
                    *(_BYTE *)(v16 + v12) = 32;
                  else
                    *(_WORD *)(v16 + 2 * v12) = 32;
                }
                else
                {
                  WTF::StringBuilder::append();
                }
                v14 = *(_QWORD *)(*((_QWORD *)a2 + 13) + 16);
                if (*(_DWORD *)(v14 + 12) <= v9)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194329C40);
                }
                this = WTF::StringBuilder::append((WTF::StringImpl **)v5, (WTF::StringImpl **)(v14 + v10));
                ++v9;
                v10 += 8;
              }
              while (v8 != v9);
            }
            if (v7 > 7)
              this = (WTF::StringBuilder *)WTF::StringBuilder::append();
          }
        }
        LOBYTE(v29) = 39;
        v17 = *(_QWORD *)(v5 + 8);
        if (v17
          && ((v18 = *(unsigned int *)(v5 + 16), v18 < *(_DWORD *)(v17 + 4))
            ? (v19 = *(_QWORD *)v5 == 0)
            : (v19 = 0),
              v19))
        {
          v20 = *(_DWORD *)(v17 + 16);
          v21 = *(_QWORD *)(v17 + 8);
          *(_DWORD *)(v5 + 16) = v18 + 1;
          if ((v20 & 4) != 0)
            *(_BYTE *)(v21 + v18) = 39;
          else
            *(_WORD *)(v21 + 2 * v18) = 39;
        }
        else
        {
          return (WTF::StringBuilder *)WTF::StringBuilder::append();
        }
      }
    }
  }
  return this;
}

const char *WebCore::RenderBlock::renderName(WebCore::RenderBlock *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  unsigned __int16 *v6;
  int v7;
  uint64_t v9;
  int v10;

  if ((*((_BYTE *)this + 45) & 1) == 0)
  {
    v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v2
      && (*(_WORD *)(v2 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
    {
      return "RenderBody";
    }
    v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v3)
    {
      if ((*(_WORD *)(v3 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
      {
        return "RenderFieldSet";
      }
    }
  }
  v4 = *((_DWORD *)this + 5);
  if ((v4 & 0x800) != 0)
    return "RenderBlock (floating)";
  if ((v4 & 0x1800000) == 0x1000000)
    return "RenderBlock (positioned)";
  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    if ((*((_BYTE *)this + 45) & 2) != 0)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 96);
      if ((v9 & 0x1F) != 1 && (v9 & 0x1F) != 14)
        goto LABEL_11;
    }
    else
    {
      v9 = *((_QWORD *)this + 12);
      if ((v9 & 0x1F) != 1 && (v9 & 0x1F) != 0xE)
        goto LABEL_11;
    }
    if ((*((_BYTE *)this + 45) & 0x40) != 0
      && (v9 & 0xF80000000000) == 0
      && ((*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 176))(this) & 1) == 0)
    {
      v10 = *((unsigned __int8 *)this + 46);
      if (v10 != 20)
      {
        if ((*((_BYTE *)this + 52) & 7) == 1)
        {
          if ((*((_BYTE *)this + 53) & 2) != 0 || v10 == 26 || v10 == 49)
            goto LABEL_11;
        }
        else if (v10 == 49 || v10 == 26)
        {
          goto LABEL_11;
        }
        return "RenderBlock (anonymous)";
      }
    }
  }
LABEL_11:
  v5 = *((_BYTE *)this + 45);
  if ((v5 & 1) == 0)
  {
    v6 = *(unsigned __int16 **)(*((_QWORD *)this + 3) + 8);
    if (v6)
    {
      if ((~v6[14] & 0x408) == 0)
      {
        if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v6 + 368))(v6))
          return "RenderBlock (generated)";
        v5 = *((_BYTE *)this + 45);
      }
    }
  }
  if ((v5 & 1) != 0)
    return "RenderBlock (generated)";
  v7 = *((_DWORD *)this + 5) & 0x1800000;
  if (v7 == 0x800000)
    return "RenderBlock (relative positioned)";
  if (v7 == 25165824)
    return "RenderBlock (sticky positioned)";
  return "RenderBlock";
}

const char *WebCore::RenderIFrame::renderName(WebCore::RenderIFrame *this)
{
  return "RenderIFrame";
}

uint64_t WebCore::FrameLoader::finishedParsing(WebCore::FrameLoader *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  result = (uint64_t)WebCore::LocalFrame::injectUserScripts((unsigned int *)v2, 1);
  if (*((_DWORD *)this + 16))
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 328))(*((_QWORD *)this + 2));
    WebCore::FrameLoader::scrollToFragmentWithParentBoundary((uint64_t)this, (const WTF::URL *)(*(_QWORD *)(v2 + 296) + 736), 1);
    result = WebCore::FrameLoader::checkCompleted(this);
    v6 = *(_QWORD *)(v2 + 288);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 + 8);
      *(_DWORD *)(v6 + 8) = v7 + 1;
      if (*(_BYTE *)(v6 + 318))
      {
        *(_BYTE *)(v6 + 318) = 0;
        if (*(_QWORD *)(v6 + 40))
        {
          result = WebCore::ScrollView::platformSetScrollbarsSuppressed((id *)v6, 0);
          v7 = *(_DWORD *)(v6 + 8) - 1;
        }
      }
      if (v7)
        *(_DWORD *)(v6 + 8) = v7;
      else
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  else if (!v2)
  {
    return result;
  }
  do
  {
    v8 = __ldaxr(v3);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v3));
  if (!v9)
  {
    atomic_store(1u, v3);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E33F5E98;
    v10[1] = v3;
    v11 = (uint64_t)v10;
    WTF::ensureOnMainThread();
    result = v11;
    if (v11)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  return result;
}

unsigned int *WebCore::HTMLConstructionSite::insertHTMLHtmlStartTagBeforeHTML(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  WebCore::Node *v10;
  void *v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  const WebCore::Style::RuleSet *v18;
  WebCore::TreeScope *v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::HTMLElementStack::ElementRecord *v22;
  WTF *v23;
  void *v24;
  unsigned int *result;
  void *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  WebCore::Node *v34;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = bmalloc::api::isoAllocate();
  v7 = v5;
  *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v5 + 24) = 0x101C00000002;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = v4 + 96;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  ++*(_DWORD *)(v4 + 3324);
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  v8 = WebCore::HTMLNames::htmlTag;
  if (WebCore::HTMLNames::htmlTag)
    ++*(_DWORD *)WebCore::HTMLNames::htmlTag;
  *(_QWORD *)(v5 + 96) = v8;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)v5 = off_1E33BF070;
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  v9 = *(unsigned __int8 *)(a2 + 62);
  if ((*(_BYTE *)(a1 + 168) & 1) == 0)
    WebCore::Element::stripScriptingAttributes((WTF::StringImpl **)v7, a2 + 24);
  WebCore::Element::parserSetAttributes(v7, *(WTF::StringImpl **)(a2 + 24), *(unsigned int *)(a2 + 36));
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v7 + 16) & 0xFEFFFFFFFFFFFFFFLL | ((unint64_t)(v9 != 0) << 56);
  v10 = *(WebCore::Node **)(*(_QWORD *)(a1 + 40) + 8);
  *((_DWORD *)v10 + 6) += 2;
  v33 = (WebCore::Node *)v7;
  v34 = v10;
  *(_DWORD *)(v7 + 24) += 2;
  WebCore::HTMLConstructionSite::attachLater(a1, &v34, &v33, 0);
  if (v33)
  {
    if (*((_DWORD *)v33 + 6) == 2)
    {
      if ((*((_WORD *)v33 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v33, v11);
    }
    else
    {
      *((_DWORD *)v33 + 6) -= 2;
    }
  }
  if (v34)
  {
    if (*((_DWORD *)v34 + 6) == 2)
    {
      if ((*((_WORD *)v34 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v34, v11);
    }
    else
    {
      *((_DWORD *)v34 + 6) -= 2;
    }
  }
  *(_DWORD *)(v7 + 24) += 2;
  v12 = *(_QWORD *)(v7 + 96);
  v13 = *(_WORD *)(v12 + 10);
  v14 = *(_BYTE *)(v12 + 8);
  v15 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 64) = v7;
  v16 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  ++*(_DWORD *)(a1 + 88);
  v20 = WTF::fastMalloc((WTF *)0x28);
  v21 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  *(_WORD *)v20 = v13;
  *(_BYTE *)(v20 + 2) = v14;
  *(_QWORD *)(v20 + 8) = v7;
  *(_QWORD *)(v20 + 16) = v15;
  *(_QWORD *)(v20 + 24) = v16;
  *(_QWORD *)(v20 + 32) = v21;
  v22 = *(WebCore::HTMLElementStack::ElementRecord **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v20;
  if (v22)
  {
    WebCore::HTMLElementStack::ElementRecord::~ElementRecord(v22, v17);
    WTF::fastFree(v23, v24);
  }
  result = (unsigned int *)WebCore::HTMLConstructionSite::executeQueuedTasks((WTF *)a1, v17, v18, v19);
  if (!*(_BYTE *)(a1 + 169))
  {
    v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 528);
    if (v27)
    {
      result = *(unsigned int **)(v27 + 8);
      if (result)
      {
        v28 = result + 2;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 + 1, v28));
        result = WebCore::LocalFrame::injectUserScripts(result, 0);
        do
        {
          v30 = __ldaxr(v28);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v28));
        if (!v31)
        {
          atomic_store(1u, v28);
          v32 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v32 = off_1E31FE290;
          *((_QWORD *)v32 + 1) = v28;
          v34 = v32;
          WTF::ensureOnMainThread();
          result = (unsigned int *)v34;
          v34 = 0;
          if (result)
            result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        }
      }
    }
  }
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v7, v26);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::LocalFrame::injectUserScripts(unsigned int *result, __int16 a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  __int16 v5;
  _DWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  __int16 v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  unsigned int *v13;

  v2 = *((_QWORD *)result + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = result;
      if (*(_DWORD *)(*((_QWORD *)result + 35) + 64)
        || (*(_QWORD *)(*((_QWORD *)result + 17) + 696) & 0x200000) != 0)
      {
        ++*(_DWORD *)v3;
        v5 = *(unsigned __int8 *)(v3 + 1685);
        v6 = *(_DWORD **)(v3 + 936);
        ++v6[2];
        v7 = result + 2;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        v9 = a2 | (v5 << 8);
        v10 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v10 = &off_1E33FF958;
        *(_QWORD *)(v10 + 8) = v4;
        *(_QWORD *)(v10 + 16) = v4;
        *(_WORD *)(v10 + 24) = v9;
        v13 = (unsigned int *)v10;
        (*(void (**)(_DWORD *, unsigned int **))(*(_QWORD *)v6 + 16))(v6, &v13);
        result = v13;
        v13 = 0;
        if (result)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        if (v6[2] == 1)
          result = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
        if (*(_DWORD *)v3 == 1)
        {
          WebCore::Page::~Page((WebCore::Page *)v3);
          return (unsigned int *)WTF::fastFree(v11, v12);
        }
        else
        {
          --*(_DWORD *)v3;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::Element::stripScriptingAttributes(WTF::StringImpl **result, uint64_t a2)
{
  WTF::StringImpl ***v3;
  uint64_t v4;
  WTF::StringImpl ***v5;
  WTF::StringImpl **v6;
  int v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl ***v9;
  char *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl ***v12;
  WTF::StringImpl *v13;
  WTF *v14;
  void *v15;
  WTF::StringImpl ***v16;

  v3 = *(WTF::StringImpl ****)a2;
  v4 = *(unsigned int *)(a2 + 12);
  v5 = (WTF::StringImpl ***)(*(_QWORD *)a2 + 16 * v4);
  if ((_DWORD)v4)
  {
    v6 = result;
    v7 = 0;
    v8 = *(WTF::StringImpl ****)a2;
    v9 = (WTF::StringImpl ***)(*(_QWORD *)a2 + 16 * v4);
    v10 = (char *)v9;
    do
    {
      if (!(*v3)[4] && (*v3)[3] && (WTF::StringImpl::startsWith() & 1) != 0
        || ((*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl ***))*v6 + 59))(v6, v3) & 1) != 0
        || (result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, WTF::StringImpl ***))*v6 + 79))(v6, v3), (_DWORD)result))
      {
        v12 = v3;
        if (v10 != (char *)(*(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 12)))
        {
          if (v3 == v9)
          {
            v12 = (WTF::StringImpl ***)v10;
          }
          else
          {
            memmove(v10, v9, (char *)v8 - (char *)v9);
            v12 = (WTF::StringImpl ***)&v10[(char *)v8 - (char *)v9];
          }
        }
        v13 = (WTF::StringImpl *)v3[1];
        v3[1] = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v11);
          else
            *(_DWORD *)v13 -= 2;
        }
        result = *v3;
        *v3 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
            result = (WTF::StringImpl **)WTF::fastFree(v14, v15);
          }
          else
          {
            --*(_DWORD *)result;
          }
        }
        v9 = v3 + 2;
        ++v7;
        v10 = (char *)v12;
      }
      else
      {
        v12 = (WTF::StringImpl ***)v10;
      }
      v3 += 2;
      v8 += 2;
    }
    while (v3 < v5);
    v3 = *(WTF::StringImpl ****)a2;
    LODWORD(v4) = *(_DWORD *)(a2 + 12);
    v5 = v12;
  }
  else
  {
    v7 = 0;
    v9 = (WTF::StringImpl ***)(*(_QWORD *)a2 + 16 * v4);
  }
  v16 = &v3[2 * v4];
  if (v9 != v16)
  {
    result = (WTF::StringImpl **)memmove(v5, v9, (char *)v16 - (char *)v9);
    LODWORD(v4) = *(_DWORD *)(a2 + 12);
  }
  *(_DWORD *)(a2 + 12) = v4 - v7;
  return result;
}

uint64_t WebCore::HTMLDocument::createParser@<X0>(WebCore::HTMLDocument *this@<X0>, _QWORD *a2@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t result;

  v4 = *((_BYTE *)this + 712);
  v5 = WTF::fastMalloc((WTF *)0xD10);
  result = WebCore::HTMLDocumentParser::HTMLDocumentParser(v5, (uint64_t)this, v4);
  *a2 = result;
  return result;
}

uint64_t WebCore::HTMLDocumentParser::HTMLDocumentParser(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t StatusReg;
  unsigned int *v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD *v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;

  v5 = WebCore::ScriptableDocumentParser::ScriptableDocumentParser(a1, (WebCore::Document *)a2, a3);
  *(_QWORD *)(v5 + 88) = &unk_1E33DF0D8;
  v6 = v5 + 88;
  *(_DWORD *)(v5 + 104) = 0;
  *(_QWORD *)v5 = off_1E33DEFB0;
  *(_QWORD *)(v5 + 96) = &unk_1E33DF120;
  WebCore::HTMLParserOptions::HTMLParserOptions((WebCore::HTMLParserOptions *)(v5 + 108), (WebCore::Document *)a2);
  *(_DWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 144) = 257;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 186) = 0;
  *(_QWORD *)(a1 + 193) = 0;
  *(_QWORD *)(a1 + 208) = WebCore::SegmentedString::advanceEmpty;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = WebCore::SegmentedString::advanceEmpty;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = a1 + 120;
  *(_WORD *)(a1 + 252) = 0;
  *(_QWORD *)(a1 + 256) = a1 + 272;
  *(_QWORD *)(a1 + 264) = 256;
  *(_WORD *)(a1 + 784) = 0;
  *(_BYTE *)(a1 + 786) = 0;
  *(_QWORD *)(a1 + 792) = a1 + 808;
  *(_QWORD *)(a1 + 800) = 10;
  *(_QWORD *)(a1 + 3056) = 0;
  *(_WORD *)(a1 + 3064) = 0;
  *(_QWORD *)(a1 + 3072) = a1 + 248;
  *(_WORD *)(a1 + 3080) = 0;
  *(_BYTE *)(a1 + 3082) = 0;
  *(_QWORD *)(a1 + 3088) = a1 + 3104;
  *(_QWORD *)(a1 + 3096) = 32;
  *(_QWORD *)(a1 + 3168) = a1 + 3184;
  *(_QWORD *)(a1 + 3176) = 32;
  *(_QWORD *)(a1 + 3216) = a1 + 3232;
  *(_QWORD *)(a1 + 3224) = 32;
  *(_QWORD *)(a1 + 3264) = *(_QWORD *)(a1 + 108);
  v7 = WTF::fastMalloc((WTF *)0x40);
  v8 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *(_QWORD *)v7 = v8;
  *(_QWORD *)(v7 + 8) = v6;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 45) = 0u;
  *(_QWORD *)(a1 + 3272) = v7;
  v10 = *(_BYTE *)(a1 + 25);
  v11 = WTF::fastMalloc((WTF *)0x148);
  *(_QWORD *)v11 = a1;
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(a1 + 108);
  *(_QWORD *)(v11 + 16) = 0;
  *(_WORD *)(v11 + 24) = 0;
  *(_BYTE *)(v11 + 26) = 0;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  v12 = *(_DWORD *)(a1 + 112);
  *(_WORD *)(v11 + 56) = 0;
  *(_BYTE *)(v11 + 58) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  *(_QWORD *)(v11 + 80) = 0;
  *(_QWORD *)(v11 + 64) = 0;
  v13 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *(_QWORD *)(v11 + 88) = v13;
  v15 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  *(_QWORD *)(v11 + 96) = v15;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 132) = 0u;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_QWORD *)(v11 + 168) = v11 + 184;
  *(_QWORD *)(v11 + 176) = 1;
  *(_BYTE *)(v11 + 224) = v10;
  *(_WORD *)(v11 + 225) = 0;
  *(_DWORD *)(v11 + 228) = v12;
  *(_BYTE *)(v11 + 232) = *(_BYTE *)(a2 + 3384) == 2;
  *(_QWORD *)(v11 + 240) = 0;
  *(_QWORD *)(v11 + 248) = v11 + 264;
  *(_QWORD *)(v11 + 256) = 1;
  *(_DWORD *)(v11 + 288) = 0;
  *(_OWORD *)(v11 + 272) = 0u;
  *(_BYTE *)(v11 + 292) = 1;
  *(_QWORD *)(v11 + 296) = 0;
  *(_QWORD *)(v11 + 304) = 4294967294;
  *(_QWORD *)(v11 + 312) = 0;
  *(_WORD *)(v11 + 320) = 256;
  *(_QWORD *)(a1 + 3280) = v11;
  *(_OWORD *)(a1 + 3288) = 0u;
  v17 = WTF::fastMalloc((WTF *)0x50);
  v18 = v17;
  *(_QWORD *)v17 = a1;
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 528);
  v20 = 0.5;
  if (v19 && (v21 = *(_QWORD *)(v19 + 8)) != 0)
  {
    v22 = *(_QWORD *)(v21 + 24);
    v23 = 0uLL;
    if (v22)
    {
      v24 = *(_QWORD *)(v22 + 8);
      if (v24)
      {
        if (*(double *)(*(_QWORD *)(v24 + 112) + 448) != -1.0)
          v20 = *(double *)(*(_QWORD *)(v24 + 112) + 448);
      }
    }
  }
  else
  {
    v23 = 0uLL;
  }
  *(double *)(v17 + 8) = v20;
  *(_QWORD *)(v17 + 16) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v17 + 24) = v23;
  *(_OWORD *)(v17 + 40) = v23;
  v26 = *(unsigned int **)(StatusReg + 736);
  if (!v26)
    v26 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 + 1, v26));
  *(_QWORD *)(v18 + 56) = v26;
  *(_QWORD *)(v18 + 16) = off_1E31F7378;
  v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v28 = off_1E33DF178;
  v28[1] = WebCore::HTMLParserScheduler::continueNextChunkTimerFired;
  v28[2] = 0;
  v28[3] = v18;
  *(_QWORD *)(v18 + 64) = v28;
  *(_WORD *)(v18 + 72) = 0;
  *(_QWORD *)(a1 + 3304) = v18;
  *(_QWORD *)(a1 + 3312) = 0;
  v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v29 = 0;
  v30 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 + 1, v30));
  v29[1] = v30;
  *(_QWORD *)(a1 + 3320) = v29;
  *(_BYTE *)(a1 + 3328) = 0;
  *(_DWORD *)(a1 + 3332) = 0;
  v32 = *(_QWORD *)(a2 + 528);
  v35 = !v32 || (v33 = *(_QWORD *)(v32 + 8)) == 0 || (v34 = *(_QWORD *)(v33 + 120)) == 0 || *(_QWORD *)(v34 + 8) == 0;
  *(_BYTE *)(a1 + 3336) = v35 & ((*(_DWORD *)(a2 + 744) & 2u) >> 1);
  return a1;
}

WebCore::HTMLPreloadScanner *WebCore::HTMLDocumentParser::parseDocumentFragment(unsigned int **a1, uint64_t a2, uint64_t a3, char a4)
{
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF *v19;
  WTF::StringImpl *v20;
  void *v21;
  WebCore::HTMLPreloadScanner *result;
  WTF::StringImpl **v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl **v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  unsigned int *v34;
  __int16 v35;
  __int128 v36;
  WTF *v37[2];
  char v38;
  _QWORD v39[2];
  uint64_t (*v40)(WebCore::SegmentedString *__hidden);
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;

  v8 = (_DWORD *)WTF::fastMalloc((WTF *)0xD10);
  v9 = WebCore::ScriptableDocumentParser::ScriptableDocumentParser((uint64_t)v8, *(WebCore::Document **)(*(_QWORD *)(a2 + 40) + 8), a4);
  *(_DWORD *)(v9 + 104) = 0;
  *(_QWORD *)v9 = off_1E33DEFB0;
  *(_QWORD *)(v9 + 88) = &unk_1E33DF0D8;
  *(_QWORD *)(v9 + 96) = &unk_1E33DF120;
  v10 = v9 + 108;
  WebCore::HTMLParserOptions::HTMLParserOptions((WebCore::HTMLParserOptions *)(v9 + 108), *(WebCore::Document **)(*(_QWORD *)(a2 + 40) + 8));
  *((_QWORD *)v8 + 16) = 0;
  *((_QWORD *)v8 + 17) = 0;
  *((_QWORD *)v8 + 15) = 0;
  *((_WORD *)v8 + 72) = 257;
  *(_OWORD *)(v8 + 38) = 0u;
  *(_OWORD *)(v8 + 42) = 0u;
  *((_BYTE *)v8 + 184) = 0;
  *(_QWORD *)((char *)v8 + 186) = 0;
  *(_QWORD *)((char *)v8 + 193) = 0;
  *((_QWORD *)v8 + 26) = WebCore::SegmentedString::advanceEmpty;
  *((_QWORD *)v8 + 27) = 0;
  *((_QWORD *)v8 + 28) = WebCore::SegmentedString::advanceEmpty;
  *((_QWORD *)v8 + 29) = 0;
  *((_QWORD *)v8 + 30) = v8 + 30;
  v8[62] = 0;
  *((_WORD *)v8 + 126) = 0;
  *((_QWORD *)v8 + 32) = v8 + 68;
  *((_QWORD *)v8 + 33) = 256;
  *((_WORD *)v8 + 392) = 0;
  *((_BYTE *)v8 + 786) = 0;
  *((_QWORD *)v8 + 99) = v8 + 202;
  *((_QWORD *)v8 + 100) = 10;
  *((_QWORD *)v8 + 382) = 0;
  *((_WORD *)v8 + 1532) = 0;
  *((_QWORD *)v8 + 384) = v8 + 62;
  *((_WORD *)v8 + 1540) = 0;
  *((_BYTE *)v8 + 3082) = 0;
  *((_QWORD *)v8 + 386) = v8 + 776;
  *((_QWORD *)v8 + 387) = 32;
  *((_QWORD *)v8 + 396) = v8 + 796;
  *((_QWORD *)v8 + 397) = 32;
  *((_QWORD *)v8 + 402) = v8 + 808;
  *((_QWORD *)v8 + 403) = 32;
  *((_QWORD *)v8 + 408) = *(_QWORD *)(v8 + 27);
  *((_QWORD *)v8 + 409) = 0;
  v11 = *((_BYTE *)v8 + 25);
  v12 = WTF::fastMalloc((WTF *)0x148);
  *((_QWORD *)v8 + 410) = WebCore::HTMLTreeBuilder::HTMLTreeBuilder(v12, (uint64_t)v8, a2, a3, v11, v10);
  v8[833] = 0;
  *((_BYTE *)v8 + 3336) = 0;
  *(_OWORD *)(v8 + 822) = 0u;
  *(_OWORD *)(v8 + 826) = 0u;
  *(_OWORD *)((char *)v8 + 3313) = 0u;
  if ((*(_BYTE *)(a3 + 28) & 0x10) == 0)
    goto LABEL_12;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 96) + 24);
  if (v13 == *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24) || v13 == *(_QWORD *)(WebCore::HTMLNames::titleTag + 24))
  {
    v26 = 2;
    goto LABEL_62;
  }
  if (v13 == *(_QWORD *)(WebCore::HTMLNames::plaintextTag + 24))
  {
    v26 = 6;
    goto LABEL_62;
  }
  if (v13 == *(_QWORD *)(WebCore::HTMLNames::scriptTag + 24))
  {
    v26 = 5;
LABEL_62:
    v8[62] = v26;
    goto LABEL_12;
  }
  if (v13 == *(_QWORD *)(WebCore::HTMLNames::styleTag + 24)
    || v13 == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24)
    || v13 == *(_QWORD *)(WebCore::HTMLNames::xmpTag + 24)
    || v13 == *(_QWORD *)(WebCore::HTMLNames::noembedTag + 24)
    || v13 == *(_QWORD *)(WebCore::HTMLNames::noframesTag + 24)
    || v13 == *(_QWORD *)(WebCore::HTMLNames::noscriptTag + 24) && *((_BYTE *)v8 + 3264))
  {
    v26 = 4;
    goto LABEL_62;
  }
LABEL_12:
  v14 = *a1;
  if (*a1)
  {
    *v14 += 2;
    v32 = (WTF::StringImpl *)v14;
    v15 = v14[1];
    LODWORD(v33) = v15;
    HIDWORD(v33) = v15;
    v34 = 0;
    v35 = 257;
    if (v15)
    {
      v16 = (v14[4] >> 2) & 1;
      LOBYTE(v35) = (v14[4] & 4) != 0;
      v14 = (unsigned int *)*((_QWORD *)v14 + 1);
      v34 = v14;
      goto LABEL_15;
    }
    v14 = 0;
  }
  else
  {
    v15 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 257;
  }
  v16 = 1;
LABEL_15:
  v38 = 0;
  *(_OWORD *)v37 = 0uLL;
  v36 = 0uLL;
  memset(v39, 0, 15);
  v40 = WebCore::SegmentedString::advanceEmpty;
  v41 = 0;
  v42 = (uint64_t (*)(uint64_t))WebCore::SegmentedString::advanceEmpty;
  v43 = 0;
  if (!v15)
    goto LABEL_19;
  if (v16)
  {
    LOWORD(v39[0]) = *(unsigned __int8 *)v14;
    if (v15 >= 2)
    {
      BYTE6(v39[1]) = 3;
      goto LABEL_19;
    }
  }
  else
  {
    LOWORD(v39[0]) = *(_WORD *)v14;
    if (v15 > 1)
    {
      v40 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advanceWithoutUpdatingLineNumber16;
      v42 = WebCore::SegmentedString::advanceAndUpdateLineNumber16;
      goto LABEL_19;
    }
  }
  BYTE6(v39[1]) = 0;
  v40 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
  v41 = 0;
  v42 = (uint64_t (*)(uint64_t))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
  v43 = 0;
LABEL_19:
  WebCore::HTMLDocumentParser::insert((uint64_t)v8, (uint64_t)&v32);
  v18 = v36;
  v19 = v37[0];
  if ((unint64_t)v36 > *((_QWORD *)&v36 + 1))
  {
    if (*((_QWORD *)&v36 + 1))
    {
      v30 = 32 * *((_QWORD *)&v36 + 1);
      do
      {
        v31 = *(WTF::StringImpl **)v19;
        *(_QWORD *)v19 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v17);
          else
            *(_DWORD *)v31 -= 2;
        }
        v19 = (WTF *)((char *)v19 + 32);
        v30 -= 32;
      }
      while (v30);
      v19 = v37[0];
      v18 = v36;
    }
    if (v18 != LODWORD(v37[1]))
    {
      v27 = (WTF::StringImpl **)((char *)v19 + 32 * v18);
      v28 = 32 * LODWORD(v37[1]) - 32 * v18;
      do
      {
        v29 = *v27;
        *v27 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v17);
          else
            *(_DWORD *)v29 -= 2;
        }
        v27 += 4;
        v28 -= 32;
      }
      while (v28);
    }
  }
  else
  {
    if ((_QWORD)v36 == *((_QWORD *)&v36 + 1))
      goto LABEL_22;
    v23 = (WTF::StringImpl **)((char *)v37[0] + 32 * v36);
    v24 = 32 * *((_QWORD *)&v36 + 1) - 32 * v36;
    do
    {
      v25 = *v23;
      *v23 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v17);
        else
          *(_DWORD *)v25 -= 2;
      }
      v23 += 4;
      v24 -= 32;
    }
    while (v24);
  }
  v19 = v37[0];
LABEL_22:
  if (v19)
  {
    v37[0] = 0;
    LODWORD(v37[1]) = 0;
    WTF::fastFree(v19, v17);
  }
  v20 = v32;
  v32 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 72))(v8);
  result = WebCore::HTMLDocumentParser::detach((WebCore::HTMLDocumentParser *)v8, v21);
  if (v8[2] == 1)
    return (WebCore::HTMLPreloadScanner *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
  --v8[2];
  return result;
}

void WebCore::HTMLDocumentParser::finish(WebCore::HTMLDocumentParser *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  _QWORD *v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;

  v3 = *((_QWORD *)this + 30);
  if (!*(_BYTE *)(v3 + 64))
  {
    WTF::String::String();
    v11 = v10;
    if (v10)
    {
      LODWORD(v12) = *((_DWORD *)v10 + 1);
      HIDWORD(v12) = v12;
      v13 = 0;
      v14 = 257;
      if ((_DWORD)v12)
      {
        LOBYTE(v14) = (*((_BYTE *)v10 + 16) & 4) != 0;
        v13 = *((_QWORD *)v10 + 1);
      }
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = 257;
    }
    WebCore::SegmentedString::appendSubstring(v3, (uint64_t *)&v11);
    v4 = v11;
    v11 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    *(_BYTE *)(*((_QWORD *)this + 30) + 64) = 1;
  }
  if (*((_DWORD *)this + 833))
    goto LABEL_23;
  v5 = (_QWORD *)*((_QWORD *)this + 410);
  if (!v5[2])
  {
    if (v5[37])
      v6 = 1;
    else
      v6 = v5[39] != 0;
    v7 = *((_QWORD *)this + 409);
    if (v7)
      LODWORD(v7) = *(_QWORD *)(v7 + 16) != 0;
    if (((v6 | v7) & 1) != 0)
      goto LABEL_23;
  }
  if ((v8 = *((_QWORD *)this + 413)) != 0
    && (*(_BYTE *)(v8 + 72)
     || (*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFLL) != 0
     && *(double *)((*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFLL) + 8) != 0.0
     || *(_BYTE *)(v8 + 73))
    || (v9 = *((_QWORD *)this + 409)) != 0 && *(_DWORD *)(v9 + 56))
  {
LABEL_23:
    *((_BYTE *)this + 3328) = 1;
  }
  else
  {
    WebCore::HTMLDocumentParser::prepareToStopParsing(this, a2);
  }
}

void WebCore::HTMLDocumentParser::prepareToStopParsing(WebCore::HTMLDocumentParser *this, WTF::StringImpl *a2)
{
  _QWORD *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_signpost_id_t v9;
  WebCore::HTMLScriptRunner *v10;
  uint64_t v11;
  void *v12;

  ++*((_DWORD *)this + 2);
  if (*((unsigned __int8 *)this + 12) <= 1u)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 410);
    if (!v3[2])
    {
      if (v3[37])
        v4 = 1;
      else
        v4 = v3[39] != 0;
      v5 = *((_QWORD *)this + 409);
      if (v5)
        LODWORD(v5) = *(_QWORD *)(v5 + 16) != 0;
      if (((v4 | v5) & 1) != 0)
        goto LABEL_10;
    }
    if ((v6 = *((_QWORD *)this + 413)) != 0
      && (*(_BYTE *)(v6 + 72)
       || (*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFLL) != 0
       && *(double *)((*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFLL) + 8) != 0.0
       || *(_BYTE *)(v6 + 73))
      || (WebCore::HTMLDocumentParser::pumpTokenizer((uint64_t)this, 1), *((unsigned __int8 *)this + 12) <= 1u))
    {
LABEL_10:
      *((_BYTE *)this + 12) = 1;
      if (!*((_QWORD *)this + 409)
        || ((v8 = *((_QWORD *)this + 2)) == 0 ? (v9 = 0) : (v9 = *(_QWORD *)(v8 + 8)),
            (WebCore::Document::setReadyState(v9, 1), *((_BYTE *)this + 12) != 3)
         && ((v10 = (WebCore::HTMLScriptRunner *)*((_QWORD *)this + 409)) == 0
          || WebCore::HTMLScriptRunner::executeScriptsWaitingForParsing(v10))))
      {
        v7 = *((_QWORD *)this + 410);
        if (!*(_QWORD *)(v7 + 16))
        {
          v11 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 8);
          *(_DWORD *)(v11 + 24) += 2;
          WebCore::Document::finishedParsing(v11, a2);
          if (*(_DWORD *)(v11 + 24) == 2)
          {
            if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v11, v12);
          }
          else
          {
            *(_DWORD *)(v11 + 24) -= 2;
          }
        }
      }
    }
  }
  if (*((_DWORD *)this + 2) == 1)
    (*(void (**)(WebCore::HTMLDocumentParser *))(*(_QWORD *)this + 8))(this);
  else
    --*((_DWORD *)this + 2);
}

WebCore::HTMLPreloadScanner *WebCore::HTMLDocumentParser::detach(WebCore::HTMLDocumentParser *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  WebCore::HTMLPreloadScanner *v10;
  WTF *v11;
  void *v12;
  WebCore::HTMLPreloadScanner *result;
  WTF *v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::HTMLDocumentParser *)((char *)this + 32));
  *((_BYTE *)this + 12) = 3;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v19 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v19)
      {
        v25 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v19));
        v3 = v25;
      }
      v20 = *(WTF **)(v3 + 16);
      if (v20)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v23 = v3;
        WTF::fastFree(v20, a2);
        v3 = v23;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (uint64_t *)*((_QWORD *)this + 409);
  if (v6)
  {
    v7 = *v6;
    *v6 = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr((unsigned int *)v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, (unsigned int *)v7));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)v7);
        v21 = *(unsigned int *)(v7 + 28);
        if ((_DWORD)v21)
        {
          v26 = v7;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v21));
          v7 = v26;
        }
        v22 = *(WTF **)(v7 + 16);
        if (v22)
        {
          *(_QWORD *)(v7 + 16) = 0;
          *(_DWORD *)(v7 + 24) = 0;
          v24 = v7;
          WTF::fastFree(v22, a2);
          v7 = v24;
        }
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  v10 = (WebCore::HTMLPreloadScanner *)*((_QWORD *)this + 411);
  *((_QWORD *)this + 411) = 0;
  if (v10)
  {
    WebCore::HTMLPreloadScanner::~HTMLPreloadScanner(v10, a2);
    WTF::fastFree(v11, v12);
  }
  result = (WebCore::HTMLPreloadScanner *)*((_QWORD *)this + 412);
  *((_QWORD *)this + 412) = 0;
  if (result)
  {
    WebCore::HTMLPreloadScanner::~HTMLPreloadScanner(result, a2);
    result = (WebCore::HTMLPreloadScanner *)WTF::fastFree(v14, v15);
  }
  v16 = (_QWORD *)*((_QWORD *)this + 413);
  *((_QWORD *)this + 413) = 0;
  if (v16)
  {
    if ((v16[6] & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v16 + 2));
    v16[2] = off_1E31F7378;
    v17 = v16[8];
    v16[8] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v16 + 2));
    return (WebCore::HTMLPreloadScanner *)WTF::fastFree((WTF *)v16, v18);
  }
  return result;
}

void WebCore::InsertionPointRecord::~InsertionPointRecord(WebCore::InsertionPointRecord *this)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  char *v5;
  WTF::StringImpl *v6;
  WebCore::SegmentedString *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;

  v2 = *(_QWORD *)this;
  v3 = *(_DWORD *)(*(_QWORD *)this + 12);
  v4 = *(_QWORD *)(*(_QWORD *)this + 32);
  while (v4 != *(_QWORD *)(*(_QWORD *)this + 40))
  {
    v11 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 32 * v4 + 12);
    v12 = v4 + 1;
    do
    {
      v4 = v12;
      v13 = *(unsigned int *)(v2 + 56);
      v14 = v4 >= v13;
      v12 = v4 - v13;
    }
    while (v14);
    v3 += v11;
  }
  v5 = (char *)this + 8;
  WebCore::SegmentedString::append(*(WebCore::SegmentedString **)this, (WebCore::InsertionPointRecord *)((char *)this + 8));
  if (*(char **)(v2 + 120) == v5)
    *(_QWORD *)(v2 + 120) = v2;
  if (*((_BYTE *)this + 72))
    *(_BYTE *)(v2 + 64) = 1;
  v7 = *(WebCore::SegmentedString **)this;
  v8 = *((_DWORD *)this + 32);
  *((_DWORD *)v7 + 18) = v3
                       - *((_DWORD *)this + 33)
                       + *(_DWORD *)(*(_QWORD *)this + 68)
                       + *(_DWORD *)(*(_QWORD *)this + 8)
                       - *(_DWORD *)(*(_QWORD *)this + 12);
  *((_DWORD *)v7 + 19) = v8;
  WTF::Deque<WebCore::SegmentedString::Substring,0ul>::~Deque((unint64_t *)this + 5, v6);
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
}

void WebCore::HTMLDocumentParser::~HTMLDocumentParser(WebCore::HTMLDocumentParser *this, void *a2)
{
  _DWORD *v2;
  void *v3;

  WebCore::HTMLDocumentParser::~HTMLDocumentParser(this, a2);
  if (v2[26])
    bzero(v2, 0xD10uLL);
  else
    WTF::fastFree((WTF *)v2, v3);
}

{
  WTF *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  WebCore::HTMLPreloadScanner *v8;
  WTF *v9;
  void *v10;
  WebCore::HTMLPreloadScanner *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  WebCore::ScriptElement *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF *v31;
  WebCore::HTMLElementStack::ElementRecord *v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  WebCore::HTMLScriptRunner *v42;
  WTF *v43;
  void *v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  WTF *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  WTF *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  WTF *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  WTF *v72;
  uint64_t v73;
  unsigned int *v74;
  uint64_t v75;

  *(_QWORD *)this = off_1E33DEFB0;
  *((_QWORD *)this + 11) = &unk_1E33DF0D8;
  *((_QWORD *)this + 12) = &unk_1E33DF120;
  v3 = (WTF *)*((_QWORD *)this + 415);
  *((_QWORD *)this + 415) = 0;
  if (v3)
  {
    v4 = *((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v4)
    {
      do
      {
        v56 = __ldaxr((unsigned int *)v4);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, (unsigned int *)v4));
      if (!v57)
      {
        atomic_store(1u, (unsigned int *)v4);
        v58 = *(unsigned int *)(v4 + 28);
        if ((_DWORD)v58)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v58));
        v59 = *(WTF **)(v4 + 16);
        if (v59)
        {
          *(_QWORD *)(v4 + 16) = 0;
          *(_DWORD *)(v4 + 24) = 0;
          WTF::fastFree(v59, a2);
        }
        WTF::fastFree((WTF *)v4, a2);
      }
    }
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(*(_QWORD *)v3 + 8) = 0;
      v68 = *(unsigned int **)v3;
      *(_QWORD *)v3 = 0;
      if (v68)
      {
        do
        {
          v69 = __ldaxr(v68);
          v70 = v69 - 1;
        }
        while (__stlxr(v70, v68));
        if (!v70)
        {
          atomic_store(1u, v68);
          WTF::fastFree((WTF *)v68, a2);
        }
      }
    }
    else
    {
      *(_QWORD *)v3 = 0;
    }
    WTF::fastFree(v3, a2);
  }
  v5 = (_QWORD *)*((_QWORD *)this + 413);
  *((_QWORD *)this + 413) = 0;
  if (v5)
  {
    if ((v5[6] & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v5 + 2));
    v5[2] = off_1E31F7378;
    v6 = v5[8];
    v5[8] = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v5 + 2));
    WTF::fastFree((WTF *)v5, v7);
  }
  v8 = (WebCore::HTMLPreloadScanner *)*((_QWORD *)this + 412);
  *((_QWORD *)this + 412) = 0;
  if (v8)
  {
    WebCore::HTMLPreloadScanner::~HTMLPreloadScanner(v8, a2);
    WTF::fastFree(v9, v10);
  }
  v11 = (WebCore::HTMLPreloadScanner *)*((_QWORD *)this + 411);
  *((_QWORD *)this + 411) = 0;
  if (v11)
  {
    WebCore::HTMLPreloadScanner::~HTMLPreloadScanner(v11, a2);
    WTF::fastFree(v12, v13);
  }
  v14 = *((_QWORD *)this + 410);
  *((_QWORD *)this + 410) = 0;
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 312);
    *(_QWORD *)(v14 + 312) = 0;
    if (v15)
    {
      WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v15 + 16), (WTF::StringImpl *)a2);
      v17 = *(WTF::StringImpl **)(v15 + 8);
      *(_QWORD *)(v15 + 8) = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = *(_DWORD **)v15;
      *(_QWORD *)v15 = 0;
      if (v18)
      {
        if (v18[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
        else
          --v18[4];
      }
      WTF::fastFree((WTF *)v15, v16);
    }
    v19 = *(WebCore::ScriptElement **)(v14 + 296);
    *(_QWORD *)(v14 + 296) = 0;
    if (v19)
      WebCore::ScriptElement::deref(v19, a2);
    v20 = *(WTF::StringImpl **)(v14 + 280);
    *(_QWORD *)(v14 + 280) = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *(WTF::StringImpl **)(v14 + 272);
    *(_QWORD *)(v14 + 272) = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = *(WTF **)(v14 + 248);
    if ((WTF *)(v14 + 264) != v22 && v22)
    {
      *(_QWORD *)(v14 + 248) = 0;
      *(_DWORD *)(v14 + 256) = 0;
      WTF::fastFree(v22, a2);
    }
    v23 = *(unsigned int *)(v14 + 180);
    if ((_DWORD)v23)
    {
      v24 = 40 * v23;
      v25 = (uint64_t *)(*(_QWORD *)(v14 + 168) + 24);
      do
      {
        v26 = *v25;
        *v25 = 0;
        if (v26)
        {
          if (*(_DWORD *)(v26 + 24) == 2)
          {
            if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v26, a2);
          }
          else
          {
            *(_DWORD *)(v26 + 24) -= 2;
          }
        }
        v27 = *(v25 - 1);
        *(v25 - 1) = 0;
        if (v27)
        {
          if (*(_DWORD *)(v27 + 24) == 2)
          {
            if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v27, a2);
          }
          else
          {
            *(_DWORD *)(v27 + 24) -= 2;
          }
        }
        v28 = *(v25 - 2);
        *(v25 - 2) = 0;
        if (v28)
        {
          if (*(_DWORD *)(v28 + 24) == 2)
          {
            if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v28, a2);
          }
          else
          {
            *(_DWORD *)(v28 + 24) -= 2;
          }
        }
        v25 += 5;
        v24 -= 40;
      }
      while (v24);
    }
    v29 = *(WTF **)(v14 + 168);
    if ((WTF *)(v14 + 184) != v29 && v29)
    {
      *(_QWORD *)(v14 + 168) = 0;
      *(_DWORD *)(v14 + 176) = 0;
      WTF::fastFree(v29, a2);
    }
    v30 = *(unsigned int *)(v14 + 164);
    if ((_DWORD)v30)
    {
      v73 = 32 * v30;
      v74 = (unsigned int *)(*(_QWORD *)(v14 + 152) + 16);
      do
      {
        WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v74, (WTF::StringImpl *)a2);
        v75 = *((_QWORD *)v74 - 1);
        *((_QWORD *)v74 - 1) = 0;
        if (v75)
        {
          if (*(_DWORD *)(v75 + 24) == 2)
          {
            if ((*(_WORD *)(v75 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v75, a2);
          }
          else
          {
            *(_DWORD *)(v75 + 24) -= 2;
          }
        }
        v74 += 8;
        v73 -= 32;
      }
      while (v73);
    }
    v31 = *(WTF **)(v14 + 152);
    if (v31)
    {
      *(_QWORD *)(v14 + 152) = 0;
      *(_DWORD *)(v14 + 160) = 0;
      WTF::fastFree(v31, a2);
    }
    v32 = *(WebCore::HTMLElementStack::ElementRecord **)(v14 + 112);
    *(_QWORD *)(v14 + 112) = 0;
    if (v32)
    {
      WebCore::HTMLElementStack::ElementRecord::~ElementRecord(v32, (WTF::StringImpl *)a2);
      WTF::fastFree(v33, v34);
    }
    v35 = *(_QWORD *)(v14 + 104);
    *(_QWORD *)(v14 + 104) = 0;
    if (v35)
    {
      if (*(_DWORD *)(v35 + 24) == 2)
      {
        if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v35, a2);
      }
      else
      {
        *(_DWORD *)(v35 + 24) -= 2;
      }
    }
    v36 = *(_QWORD *)(v14 + 96);
    *(_QWORD *)(v14 + 96) = 0;
    if (v36)
    {
      do
      {
        v60 = __ldaxr((unsigned int *)v36);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, (unsigned int *)v36));
      if (!v61)
      {
        atomic_store(1u, (unsigned int *)v36);
        v62 = *(unsigned int *)(v36 + 28);
        if ((_DWORD)v62)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v36 + 16), (WTF::StringImpl *)(*(_QWORD *)(v36 + 16) + 32 * v62));
        v63 = *(WTF **)(v36 + 16);
        if (v63)
        {
          *(_QWORD *)(v36 + 16) = 0;
          *(_DWORD *)(v36 + 24) = 0;
          WTF::fastFree(v63, a2);
        }
        WTF::fastFree((WTF *)v36, a2);
      }
    }
    v37 = *(_QWORD *)(v14 + 88);
    *(_QWORD *)(v14 + 88) = 0;
    if (v37)
    {
      do
      {
        v64 = __ldaxr((unsigned int *)v37);
        v65 = v64 - 1;
      }
      while (__stlxr(v65, (unsigned int *)v37));
      if (!v65)
      {
        atomic_store(1u, (unsigned int *)v37);
        v66 = *(unsigned int *)(v37 + 28);
        if ((_DWORD)v66)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v37 + 16), (WTF::StringImpl *)(*(_QWORD *)(v37 + 16) + 32 * v66));
        v67 = *(WTF **)(v37 + 16);
        if (v67)
        {
          *(_QWORD *)(v37 + 16) = 0;
          *(_DWORD *)(v37 + 24) = 0;
          WTF::fastFree(v67, a2);
        }
        WTF::fastFree((WTF *)v37, a2);
      }
    }
    WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v14 + 72), (WTF::StringImpl *)a2);
    v39 = *(_QWORD *)(v14 + 64);
    *(_QWORD *)(v14 + 64) = 0;
    if (v39)
    {
      if (*(_DWORD *)(v39 + 24) == 2)
      {
        if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v39, v38);
      }
      else
      {
        *(_DWORD *)(v39 + 24) -= 2;
      }
    }
    WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v14 + 40), (WTF::StringImpl *)v38);
    v41 = *(_QWORD *)(v14 + 32);
    *(_QWORD *)(v14 + 32) = 0;
    if (v41)
    {
      if (*(_DWORD *)(v41 + 24) == 2)
      {
        if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v41, v40);
      }
      else
      {
        *(_DWORD *)(v41 + 24) -= 2;
      }
    }
    WTF::fastFree((WTF *)v14, v40);
  }
  v42 = (WebCore::HTMLScriptRunner *)*((_QWORD *)this + 409);
  *((_QWORD *)this + 409) = 0;
  if (v42)
  {
    WebCore::HTMLScriptRunner::~HTMLScriptRunner(v42);
    WTF::fastFree(v43, v44);
  }
  v45 = (WTF *)*((_QWORD *)this + 402);
  if ((WebCore::HTMLDocumentParser *)((char *)this + 3232) != v45 && v45)
  {
    *((_QWORD *)this + 402) = 0;
    *((_DWORD *)this + 806) = 0;
    WTF::fastFree(v45, a2);
  }
  v46 = (WTF *)*((_QWORD *)this + 396);
  if ((WebCore::HTMLDocumentParser *)((char *)this + 3184) != v46 && v46)
  {
    *((_QWORD *)this + 396) = 0;
    *((_DWORD *)this + 794) = 0;
    WTF::fastFree(v46, a2);
  }
  v47 = (WTF *)*((_QWORD *)this + 386);
  if ((WebCore::HTMLDocumentParser *)((char *)this + 3104) != v47 && v47)
  {
    *((_QWORD *)this + 386) = 0;
    *((_DWORD *)this + 774) = 0;
    WTF::fastFree(v47, a2);
  }
  WebCore::HTMLToken::~HTMLToken((WebCore::HTMLDocumentParser *)((char *)this + 256), a2);
  WTF::Deque<WebCore::SegmentedString::Substring,0ul>::~Deque((unint64_t *)this + 19, v48);
  v50 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v49);
    else
      *(_DWORD *)v50 -= 2;
  }
  *(_QWORD *)this = off_1E33A7608;
  *((_QWORD *)this + 4) = off_1E31F7378;
  v51 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  WebCore::TimerBase::~TimerBase((WebCore::HTMLDocumentParser *)((char *)this + 32));
  *(_QWORD *)this = off_1E33A3D50;
  v53 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v53)
  {
    do
    {
      v54 = __ldaxr((unsigned int *)v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, (unsigned int *)v53));
    if (!v55)
    {
      atomic_store(1u, (unsigned int *)v53);
      v71 = *(unsigned int *)(v53 + 28);
      if ((_DWORD)v71)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v53 + 16), (WTF::StringImpl *)(*(_QWORD *)(v53 + 16) + 32 * v71));
      v72 = *(WTF **)(v53 + 16);
      if (v72)
      {
        *(_QWORD *)(v53 + 16) = 0;
        *(_DWORD *)(v53 + 24) = 0;
        WTF::fastFree(v72, v52);
      }
      WTF::fastFree((WTF *)v53, v52);
    }
  }
}

unint64_t *WTF::Deque<WebCore::SegmentedString::Substring,0ul>::~Deque(unint64_t *a1, WTF::StringImpl *a2)
{
  unint64_t v3;
  unint64_t v4;
  WTF *v5;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl **v16;

  v3 = *a1;
  v4 = a1[1];
  v5 = (WTF *)a1[2];
  if (v3 > v4)
  {
    v16 = (WTF::StringImpl **)v5;
    if (v4)
    {
      v11 = 32 * v4;
      do
      {
        v12 = *v16;
        *v16 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, a2);
          else
            *(_DWORD *)v12 -= 2;
        }
        v16 += 4;
        v11 -= 32;
      }
      while (v11);
      v16 = (WTF::StringImpl **)a1[2];
      v3 = *a1;
    }
    v10 = *((unsigned int *)a1 + 6);
    if (v3 != v10)
    {
      v13 = &v16[4 * v3];
      v14 = 32 * v10 - 32 * v3;
      do
      {
        v15 = *v13;
        *v13 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, a2);
          else
            *(_DWORD *)v15 -= 2;
        }
        v13 += 4;
        v14 -= 32;
      }
      while (v14);
    }
LABEL_14:
    v5 = (WTF *)a1[2];
    if (v5)
      goto LABEL_15;
    return a1;
  }
  if (v3 != v4)
  {
    v7 = (WTF::StringImpl **)((char *)v5 + 32 * v3);
    v8 = 32 * v4 - 32 * v3;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
    goto LABEL_14;
  }
  if (v5)
  {
LABEL_15:
    a1[2] = 0;
    *((_DWORD *)a1 + 6) = 0;
    WTF::fastFree(v5, a2);
  }
  return a1;
}

void WebCore::HTMLToken::~HTMLToken(WebCore::HTMLToken *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF *v9;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  WTF *v15;

  v3 = *((_QWORD *)this + 350);
  *((_QWORD *)this + 350) = 0;
  if (v3)
  {
    v4 = *(WTF **)(v3 + 16);
    if (v4)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
      WTF::fastFree(v4, a2);
    }
    v5 = *(WTF **)v3;
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(v3 + 8) = 0;
      WTF::fastFree(v5, a2);
    }
    WTF::fastFree((WTF *)v3, a2);
  }
  v6 = *((unsigned int *)this + 137);
  v7 = (WTF *)*((_QWORD *)this + 67);
  if ((_DWORD)v6)
  {
    v11 = 224 * v6;
    v12 = (WTF *)((char *)v7 + 96);
    do
    {
      v13 = (WTF *)*((_QWORD *)v12 - 2);
      if (v12 != v13 && v13 != 0)
      {
        *((_QWORD *)v12 - 2) = 0;
        *((_DWORD *)v12 - 2) = 0;
        WTF::fastFree(v13, a2);
      }
      v15 = (WTF *)*((_QWORD *)v12 - 12);
      if ((WTF *)((char *)v12 - 80) != v15 && v15 != 0)
      {
        *((_QWORD *)v12 - 12) = 0;
        *((_DWORD *)v12 - 22) = 0;
        WTF::fastFree(v15, a2);
      }
      v12 = (WTF *)((char *)v12 + 224);
      v11 -= 224;
    }
    while (v11);
    v7 = (WTF *)*((_QWORD *)this + 67);
  }
  if ((WebCore::HTMLToken *)((char *)this + 552) != v7 && v7 != 0)
  {
    *((_QWORD *)this + 67) = 0;
    *((_DWORD *)this + 136) = 0;
    WTF::fastFree(v7, a2);
  }
  v9 = *(WTF **)this;
  if ((WebCore::HTMLToken *)((char *)this + 16) != *(WebCore::HTMLToken **)this && v9 != 0)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v9, a2);
  }
}

WTF::StringImpl *WebCore::SegmentedString::append(WebCore::SegmentedString *this, const WebCore::SegmentedString *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int16 v22;

  v4 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v4 += 2;
  v20 = v4;
  v21 = *(_OWORD *)((char *)a2 + 8);
  v22 = *((_WORD *)a2 + 12);
  WebCore::SegmentedString::appendSubstring((uint64_t)this, (uint64_t *)&v20);
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  v8 = *((_QWORD *)a2 + 4);
  v7 = *((_QWORD *)a2 + 5);
  if (v8 != v7)
  {
    v9 = (_QWORD *)((char *)this + 32);
    v10 = *((_QWORD *)this + 5);
    do
    {
      v11 = *((_QWORD *)a2 + 6);
      if (*v9)
      {
        if (v10 + 1 != *v9)
          goto LABEL_13;
      }
      else
      {
        v12 = *((unsigned int *)this + 14);
        if (v10)
        {
          if (v10 != v12 - 1)
            goto LABEL_13;
        }
        else if ((_DWORD)v12)
        {
          v10 = 0;
          goto LABEL_13;
        }
      }
      result = (WTF::StringImpl *)WTF::Deque<WebCore::SegmentedString::Substring,0ul>::expandCapacity((uint64_t)this + 32);
      v10 = *((_QWORD *)this + 5);
LABEL_13:
      v13 = *((_QWORD *)this + 6);
      v14 = *(_DWORD **)(v11 + 32 * v8);
      if (v14)
        *v14 += 2;
      v15 = v13 + 32 * v10;
      *(_QWORD *)v15 = v14;
      v16 = v11 + 32 * v8;
      v17 = *(_OWORD *)(v16 + 8);
      *(_WORD *)(v15 + 24) = *(_WORD *)(v16 + 24);
      *(_OWORD *)(v15 + 8) = v17;
      v18 = *((_QWORD *)this + 5);
      if (v18 == *((unsigned int *)this + 14) - 1)
        v10 = 0;
      else
        v10 = v18 + 1;
      *((_QWORD *)this + 5) = v10;
      v19 = *((unsigned int *)a2 + 14);
      v8 += v19 + 1;
      do
        v8 -= v19;
      while (v8 >= v19);
    }
    while (v7 != v8);
  }
  return result;
}

uint64_t WebCore::ScriptableDocumentParser::ScriptableDocumentParser(uint64_t a1, WebCore::Document *a2, char a3)
{
  unsigned int *v6;
  unsigned int v7;
  unint64_t StatusReg;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E33A3D50;
  *(_WORD *)(a1 + 12) = 0;
  v6 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)a1 = off_1E33A7608;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 25) = a3;
  *(_QWORD *)(a1 + 32) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v9 = *(unsigned int **)(StatusReg + 736);
  if (!v9)
    v9 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 32) = off_1E31F7378;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = off_1E33A7A18;
  v11[1] = WebCore::ScriptableDocumentParser::scriptsWaitingForStylesheetsExecutionTimerFired;
  v11[2] = 0;
  v11[3] = a1;
  *(_QWORD *)(a1 + 80) = v11;
  if ((*(_BYTE *)(a1 + 25) & 1) != 0 && (WebCore::Document::allowsContentJavaScript(a2) & 1) == 0)
    *(_BYTE *)(a1 + 25) &= ~1u;
  return a1;
}

WebCore::HTMLParserOptions *WebCore::HTMLParserOptions::HTMLParserOptions(WebCore::HTMLParserOptions *this, WebCore::Document *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v22;
  _QWORD *v23;

  v4 = *((_QWORD *)a2 + 66);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      v8 = *((_QWORD *)a2 + 85);
      if (*(_BYTE *)(v8 + 392) != 1)
      {
        v9 = (uint64_t *)((char *)a2 + 680);
        v10 = *(_QWORD **)(*(_QWORD *)(v5 + 304) + 16);
        v11 = v10[37];
        if (v11 && (*(_BYTE *)(v11 + 268) & 0x10) != 0 || (v12 = v10[3]) == 0 || !*(_QWORD *)(v12 + 8))
        {
          v17 = 0;
          LOBYTE(v16) = 0;
        }
        else
        {
          v13 = *(_QWORD *)(v10[35] + 16);
          v14 = v10[17];
          if (*(_BYTE *)(v14 + 245))
            v15 = *(unsigned __int8 *)(v14 + 244) != 0;
          else
            v15 = (*(_QWORD *)(v14 + 688) >> 52) & 1;
          v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 968))(v13, v15);
          if (v16)
            LOBYTE(v16) = WebCore::Document::allowsContentJavaScript(a2);
          v17 = 0;
        }
        goto LABEL_15;
      }
      v17 = 0;
LABEL_29:
      LOBYTE(v16) = 1;
      goto LABEL_16;
    }
  }
  else
  {
    v5 = 0;
  }
  v8 = *((_QWORD *)a2 + 85);
  v17 = 1;
  if (*(_BYTE *)(v8 + 392) == 1)
    goto LABEL_29;
  LOBYTE(v16) = 0;
  v9 = (uint64_t *)((char *)a2 + 680);
LABEL_15:
  v8 = *v9;
LABEL_16:
  *(_BYTE *)this = v16;
  *((_BYTE *)this + 1) = (*(_DWORD *)(v8 + 704) & 4) != 0;
  *((_DWORD *)this + 1) = *(_DWORD *)(v8 + 456);
  if ((v17 & 1) == 0)
  {
    v18 = (unsigned int *)(v5 + 8);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v22 = off_1E31FE290;
      v22[1] = v18;
      v23 = v22;
      WTF::ensureOnMainThread();
      if (v23)
        (*(void (**)(_QWORD *))(*v23 + 8))(v23);
    }
  }
  return this;
}

uint64_t WebCore::Document::allowsContentJavaScript(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v10;
  _QWORD *v11;

  while (1)
  {
    if ((*(_QWORD *)(*((_QWORD *)this + 85) + 688) & 0x20000000000000) == 0)
      return 0;
    v1 = *((_QWORD *)this + 66);
    if (v1)
    {
      v2 = *(_QWORD *)(v1 + 8);
      if (v2)
      {
        if (*(WebCore::Document **)(v2 + 296) == this)
          break;
      }
    }
    v3 = *((_QWORD *)this + 88);
    if (v3)
    {
      this = *(WebCore::Document **)(v3 + 8);
      if (this)
        continue;
    }
    return 1;
  }
  v5 = (unsigned int *)(v2 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 280) + 16) + 1168))(*(_QWORD *)(*(_QWORD *)(v2 + 280) + 16));
  do
  {
    v7 = __ldaxr(v5);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v5));
  if (!v8)
  {
    atomic_store(1u, v5);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E31FE290;
    v10[1] = v5;
    v11 = v10;
    WTF::ensureOnMainThread();
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  return v4;
}

void WebCore::HTMLDocumentParser::insert(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  char v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _BOOL4 v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(WebCore::SegmentedString *);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  float *v30;
  int v31;
  uint64_t v32;
  _DWORD *v33;
  __int128 v34;
  void *v35;
  WebCore::HTMLPreloadScanner *v36;
  WTF *v37;
  void *v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;

  if (*(unsigned __int8 *)(a1 + 12) <= 1u)
  {
    ++*(_DWORD *)(a1 + 8);
    if (!*(_BYTE *)(a2 + 25))
      goto LABEL_10;
    *(_BYTE *)(a2 + 25) = 0;
    v4 = *(_QWORD *)(a2 + 32);
    v5 = *(_QWORD *)(a2 + 40);
    if (v4 != v5)
    {
      v41 = *(_QWORD *)(a2 + 48);
      v42 = *(unsigned int *)(a2 + 56);
      do
      {
        *(_BYTE *)(v41 + 32 * v4 + 25) = 0;
        v4 += v42 + 1;
        do
          v4 -= v42;
        while (v4 >= v42);
      }
      while (v5 != v4);
    }
    v6 = *(_DWORD *)(a2 + 12);
    if (v6 < 2)
    {
      *(_BYTE *)(a2 + 80) = 0;
      if (v6)
      {
        v23 = (uint64_t (*)(WebCore::SegmentedString *))WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *(_QWORD *)(a2 + 88) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *(_QWORD *)(a2 + 96) = 0;
        if (*(_BYTE *)(a2 + 25))
          v23 = WebCore::SegmentedString::advancePastSingleCharacterSubstring;
      }
      else
      {
        v23 = WebCore::SegmentedString::advanceEmpty;
        *(_QWORD *)(a2 + 88) = WebCore::SegmentedString::advanceEmpty;
        *(_QWORD *)(a2 + 96) = 0;
      }
    }
    else
    {
      if (*(_BYTE *)(a2 + 24))
      {
        if (*(_BYTE *)(a2 + 25))
          v7 = 3;
        else
          v7 = 2;
        *(_BYTE *)(a2 + 80) = v7;
LABEL_10:
        WebCore::SegmentedString::appendSubstring(a1 + 120, (uint64_t *)a2);
        v10 = *(_QWORD *)(a2 + 32);
        v9 = *(_QWORD *)(a2 + 40);
        while (v9 != v10)
        {
          WTF::Deque<WebCore::SegmentedString::Substring,0ul>::append(a1 + 152, (uint64_t *)(*(_QWORD *)(a2 + 48) + 32 * v10));
          v43 = *(unsigned int *)(a2 + 56);
          v10 += v43 + 1;
          do
            v10 -= v43;
          while (v10 >= v43);
        }
        if (*(unsigned __int8 *)(a1 + 12) <= 1u)
        {
          v11 = *(_QWORD **)(a1 + 3280);
          if (v11[2])
            goto LABEL_18;
          if (v11[37])
            v12 = 1;
          else
            v12 = v11[39] != 0;
          v13 = *(_QWORD *)(a1 + 3272);
          if (v13)
            LODWORD(v13) = *(_QWORD *)(v13 + 16) != 0;
          if (((v12 | v13) & 1) == 0)
          {
LABEL_18:
            v14 = *(_QWORD *)(a1 + 3304);
            if (!v14
              || !*(_BYTE *)(v14 + 72)
              && ((*(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL) == 0
               || *(double *)((*(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
              && !*(_BYTE *)(v14 + 73))
            {
              WebCore::HTMLDocumentParser::pumpTokenizer(a1, 1);
            }
          }
        }
        v15 = *(_QWORD **)(a1 + 3280);
        if (!v15[2])
        {
          if (v15[37])
            v16 = 1;
          else
            v16 = v15[39] != 0;
          v17 = *(_QWORD *)(a1 + 3272);
          if (v17)
            LODWORD(v17) = *(_QWORD *)(v17 + 16) != 0;
          if ((v16 | v17) == 1)
          {
            if (*(_BYTE *)(a1 + 12) == 3)
            {
LABEL_28:
              if (*(_DWORD *)(a1 + 8) == 1)
                (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
              else
                --*(_DWORD *)(a1 + 8);
              return;
            }
            v24 = *(_QWORD *)(a1 + 3296);
            if (!v24)
            {
              v25 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
              v26 = *(_QWORD *)(v25 + 528);
              v27 = 1.0;
              if (v26)
              {
                v28 = *(_QWORD *)(v26 + 8);
                if (v28)
                {
                  v29 = *(_QWORD *)(v28 + 24);
                  if (v29)
                  {
                    v30 = *(float **)(v29 + 8);
                    if (v30)
                    {
                      v31 = (*(_DWORD *)v30)++;
                      v27 = v30[91];
                      if (v31)
                      {
                        *(_DWORD *)v30 = v31;
                      }
                      else
                      {
                        WebCore::Page::~Page((uint64_t)v30);
                        WTF::fastFree(v39, v40);
                      }
                    }
                  }
                }
              }
              v32 = WTF::fastMalloc((WTF *)0xD00);
              v24 = v32;
              *(_DWORD *)v32 = 0;
              *(_OWORD *)(v32 + 8) = 0u;
              *(_OWORD *)(v32 + 24) = 0u;
              *(_OWORD *)(v32 + 40) = 0u;
              *(_QWORD *)(v32 + 56) = 0;
              v33 = *(_DWORD **)(v25 + 736);
              if (v33)
                *v33 += 2;
              *(_QWORD *)(v32 + 64) = v33;
              v34 = *(_OWORD *)(v25 + 744);
              *(_OWORD *)(v32 + 88) = *(_OWORD *)(v25 + 760);
              *(_OWORD *)(v32 + 72) = v34;
              *(float *)(v32 + 104) = v27;
              *(_QWORD *)(v32 + 112) = 0;
              WTF::URL::invalidate((WTF::URL *)(v32 + 112));
              *(_BYTE *)(v24 + 152) = 0;
              *(_QWORD *)(v24 + 160) = 0;
              *(_QWORD *)(v24 + 168) = 0;
              *(_DWORD *)(v24 + 176) = 0;
              *(_QWORD *)(v24 + 184) = 0;
              *(_QWORD *)(v24 + 192) = 0;
              *(_QWORD *)(v24 + 200) = 0;
              *(_WORD *)(v24 + 208) = 257;
              *(_OWORD *)(v24 + 216) = 0u;
              *(_OWORD *)(v24 + 232) = 0u;
              *(_BYTE *)(v24 + 248) = 0;
              *(_QWORD *)(v24 + 250) = 0;
              *(_QWORD *)(v24 + 257) = 0;
              *(_QWORD *)(v24 + 272) = WebCore::SegmentedString::advanceEmpty;
              *(_QWORD *)(v24 + 280) = 0;
              *(_QWORD *)(v24 + 288) = WebCore::SegmentedString::advanceEmpty;
              *(_QWORD *)(v24 + 296) = 0;
              *(_QWORD *)(v24 + 302) = 0;
              *(_QWORD *)(v24 + 312) = v24 + 328;
              *(_QWORD *)(v24 + 320) = 256;
              *(_WORD *)(v24 + 840) = 0;
              *(_BYTE *)(v24 + 842) = 0;
              *(_QWORD *)(v24 + 848) = v24 + 864;
              *(_QWORD *)(v24 + 856) = 10;
              *(_QWORD *)(v24 + 3112) = 0;
              *(_WORD *)(v24 + 3120) = 0;
              *(_QWORD *)(v24 + 3128) = v24 + 304;
              *(_WORD *)(v24 + 3136) = 0;
              *(_BYTE *)(v24 + 3138) = 0;
              *(_QWORD *)(v24 + 3144) = v24 + 3160;
              *(_QWORD *)(v24 + 3152) = 32;
              *(_QWORD *)(v24 + 3224) = v24 + 3240;
              *(_QWORD *)(v24 + 3232) = 32;
              *(_QWORD *)(v24 + 3272) = v24 + 3288;
              *(_QWORD *)(v24 + 3280) = 32;
              *(_QWORD *)(v24 + 3320) = *(_QWORD *)(a1 + 108);
              v36 = *(WebCore::HTMLPreloadScanner **)(a1 + 3296);
              *(_QWORD *)(a1 + 3296) = v24;
              if (v36)
              {
                WebCore::HTMLPreloadScanner::~HTMLPreloadScanner(v36, v35);
                WTF::fastFree(v37, v38);
                v24 = *(_QWORD *)(a1 + 3296);
              }
            }
            WebCore::SegmentedString::append((WebCore::SegmentedString *)(v24 + 184), (const WebCore::SegmentedString *)a2);
            WebCore::HTMLPreloadScanner::scan(*(WebCore::TokenPreloadScanner **)(a1 + 3296), *(_QWORD *)(a1 + 3320), *(_WORD **)(*(_QWORD *)(a1 + 16) + 8));
          }
        }
        if (*(_BYTE *)(a1 + 12) != 3 && *(_BYTE *)(a1 + 3328) && !*(_DWORD *)(a1 + 3332))
        {
          v18 = *(_QWORD **)(a1 + 3280);
          if (v18[2])
            goto LABEL_42;
          if (v18[37])
            v19 = 1;
          else
            v19 = v18[39] != 0;
          v20 = *(_QWORD *)(a1 + 3272);
          if (v20)
            LODWORD(v20) = *(_QWORD *)(v20 + 16) != 0;
          if (((v19 | v20) & 1) == 0)
          {
LABEL_42:
            v21 = *(_QWORD *)(a1 + 3304);
            if (!v21
              || !*(_BYTE *)(v21 + 72)
              && ((*(_QWORD *)(v21 + 48) & 0xFFFFFFFFFFFFLL) == 0
               || *(double *)((*(_QWORD *)(v21 + 48) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
              && !*(_BYTE *)(v21 + 73))
            {
              v22 = *(_QWORD *)(a1 + 3272);
              if (!v22 || !*(_DWORD *)(v22 + 56))
              {
                *(_BYTE *)(a1 + 3328) = 0;
                WebCore::HTMLDocumentParser::prepareToStopParsing((WebCore::HTMLDocumentParser *)a1, v8);
              }
            }
          }
        }
        goto LABEL_28;
      }
      *(_BYTE *)(a2 + 80) = 0;
      v23 = (uint64_t (*)(WebCore::SegmentedString *))WebCore::SegmentedString::advanceWithoutUpdatingLineNumber16;
      *(_QWORD *)(a2 + 88) = WebCore::SegmentedString::advanceWithoutUpdatingLineNumber16;
      *(_QWORD *)(a2 + 96) = 0;
      if (*(_BYTE *)(a2 + 25))
        v23 = (uint64_t (*)(WebCore::SegmentedString *))WebCore::SegmentedString::advanceAndUpdateLineNumber16;
    }
    *(_QWORD *)(a2 + 104) = v23;
    *(_QWORD *)(a2 + 112) = 0;
    goto LABEL_10;
  }
}

uint64_t WebCore::HTMLTreeBuilder::HTMLTreeBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::HTMLElementStack::ElementRecord *v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  __int16 v25;
  uint64_t v26;
  int v28;

  v7 = a4;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a6;
  *(_QWORD *)(a1 + 16) = a3;
  v10 = *(_QWORD *)(a4 + 96);
  *(_WORD *)(a1 + 24) = *(_WORD *)(v10 + 10);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(v10 + 8);
  *(_DWORD *)(a4 + 24) += 2;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v11 = *(_DWORD *)(a6 + 4);
  *(_WORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 58) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v12 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 8));
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *(_QWORD *)(a1 + 88) = v12;
  v14 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a3);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *(_QWORD *)(a1 + 248) = a1 + 264;
  *(_QWORD *)(a1 + 96) = v14;
  *(_OWORD *)(a1 + 104) = 0u;
  v16 = (uint64_t *)(a1 + 104);
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 184;
  *(_QWORD *)(a1 + 176) = 1;
  *(_BYTE *)(a1 + 224) = a5;
  *(_WORD *)(a1 + 225) = 1;
  *(_DWORD *)(a1 + 228) = v11;
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 8) + 3384) == 2;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 256) = 1;
  *(_DWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 292) = 1;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 4294967294;
  *(_QWORD *)(a1 + 312) = 0;
  *(_WORD *)(a1 + 320) = 256;
  *(_DWORD *)(a3 + 24) += 2;
  *(_QWORD *)(a1 + 120) = a3;
  *(_DWORD *)(a1 + 144) = 1;
  v18 = WTF::fastMalloc((WTF *)0x28);
  v19 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  *(_WORD *)v18 = 0;
  *(_BYTE *)(v18 + 2) = 0;
  *(_QWORD *)(v18 + 8) = a3;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 32) = v19;
  v20 = *(WebCore::HTMLElementStack::ElementRecord **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v18;
  if (v20)
  {
    WebCore::HTMLElementStack::ElementRecord::~ElementRecord(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (*(_WORD *)(*(_QWORD *)(v7 + 96) + 10) == 119)
  {
    v28 = 6;
    v23 = *(unsigned int *)(a1 + 260);
    if ((_DWORD)v23 == *(_DWORD *)(a1 + 256))
    {
      WTF::Vector<WebCore::HTMLTreeBuilder::InsertionMode,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTMLTreeBuilder::InsertionMode>(a1 + 248, (unint64_t)&v28);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 248) + 4 * v23) = 6;
      *(_DWORD *)(a1 + 260) = v23 + 1;
    }
  }
  WebCore::HTMLTreeBuilder::resetInsertionModeAppropriately(a1);
  if ((*(_WORD *)(v7 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
  {
    v7 = *(_QWORD *)(v7 + 32);
    if (!v7)
      goto LABEL_15;
    v25 = *(_WORD *)(v7 + 28);
    if ((v25 & 8) == 0)
    {
LABEL_14:
      v7 = 0;
      goto LABEL_15;
    }
    while ((v25 & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
    {
      v7 = *(_QWORD *)(v7 + 32);
      if (!v7)
        goto LABEL_15;
      v25 = *(_WORD *)(v7 + 28);
      if ((v25 & 8) == 0)
        goto LABEL_14;
    }
  }
  *(_DWORD *)(v7 + 24) += 2;
LABEL_15:
  v26 = *v16;
  *v16 = v7;
  if (v26)
  {
    if (*(_DWORD *)(v26 + 24) == 2)
    {
      if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v26, v24);
    }
    else
    {
      *(_DWORD *)(v26 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WebCore::HTMLTreeBuilder::resetInsertionModeAppropriately(uint64_t this)
{
  unsigned __int16 **v1;
  uint64_t v2;
  unsigned __int16 *v3;
  uint64_t v4;
  unsigned __int16 *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;

  v1 = (unsigned __int16 **)(this + 112);
  v2 = *(_QWORD *)(this + 120);
  while (2)
  {
    v3 = *v1;
    v4 = *((_QWORD *)v3 + 1);
    v5 = v3;
    if (v4 == v2)
    {
      v5 = (unsigned __int16 *)(this + 24);
      if (!*(_QWORD *)(this + 16))
        v5 = v3;
    }
    v6 = *v5;
    if (v6 <= 0x36)
    {
      if (*v5 > 0x15u)
      {
        switch(v6)
        {
          case 0x16u:
            v8 = 11;
            goto LABEL_41;
          case 0x1Bu:
            v8 = 12;
            goto LABEL_41;
          case 0x30u:
            v8 = 19;
            goto LABEL_41;
        }
      }
      else if (v6 == 18)
      {
        goto LABEL_40;
      }
      goto LABEL_16;
    }
    switch(*v5)
    {
      case 'j':
        if (v4 == v2)
          goto LABEL_35;
        v9 = 106;
        while (*((_QWORD *)v5 + 1) != v2 && v9 != 119)
        {
          v3 = (unsigned __int16 *)*((_QWORD *)v3 + 4);
          v9 = *v3;
          v5 = v3;
          if (v9 == 116)
          {
            v8 = 17;
            goto LABEL_41;
          }
        }
LABEL_35:
        v8 = 16;
        goto LABEL_41;
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 'x':
      case '|':
        goto LABEL_16;
      case 't':
        v8 = 9;
        goto LABEL_41;
      case 'u':
      case 'y':
      case '{':
        v8 = 13;
        goto LABEL_41;
      case 'v':
      case 'z':
        v8 = 15;
        goto LABEL_41;
      case 'w':
        v7 = *(unsigned int *)(this + 260);
        if (!(_DWORD)v7)
          goto LABEL_43;
        v8 = *(_DWORD *)(*(_QWORD *)(this + 248) + 4 * v7 - 4);
        goto LABEL_41;
      case '}':
        v8 = 14;
        goto LABEL_41;
      default:
        if (v6 != 55)
        {
          if (v6 == 59)
          {
            if (*(_QWORD *)(this + 64))
              v8 = 5;
            else
              v8 = 2;
            goto LABEL_41;
          }
LABEL_16:
          if (v4 == v2)
            goto LABEL_40;
          v1 = (unsigned __int16 **)(v3 + 16);
          continue;
        }
        if (!*(_QWORD *)(this + 16))
          goto LABEL_21;
        v10 = *(_QWORD *)(this + 32);
        if ((*(_WORD *)(v10 + 28) & 8) == 0)
        {
LABEL_43:
          __break(0xC471u);
          JUMPOUT(0x19432CBC8);
        }
        if (v10 == *((_QWORD *)v5 + 1))
LABEL_40:
          v8 = 7;
        else
LABEL_21:
          v8 = 3;
LABEL_41:
        *(_DWORD *)(this + 240) = v8;
        return this;
    }
  }
}

void WebCore::HTMLScriptRunner::~HTMLScriptRunner(WebCore::HTMLScriptRunner *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  WebCore::PendingScript *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::PendingScript *v15;

  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2 && v2[5] && v2[6])
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
  v3 = *((_QWORD *)this + 3);
  for (i = *((_QWORD *)this + 4); v3 != i; i = *((_QWORD *)this + 4))
  {
    WTF::Deque<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>,0ul>::takeFirst(&v15, (uint64_t *)this + 3);
    v10 = v15;
    if (*((_QWORD *)v15 + 5) && *((_QWORD *)v15 + 6))
      (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
    WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>::~Ref(&v15, v10);
    v3 = *((_QWORD *)this + 3);
  }
  v5 = (WTF *)*((_QWORD *)this + 5);
  if (v5)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v5, v2);
  }
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    WTF::RefCounted<WebCore::PendingScript>::deref((_DWORD *)(v6 + 16), v2);
  v7 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v11 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v11)
      {
        v14 = v7;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v11));
        v7 = v14;
      }
      v12 = *(WTF **)(v7 + 16);
      if (v12)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v13 = v7;
        WTF::fastFree(v12, v2);
        v7 = v13;
      }
      WTF::fastFree((WTF *)v7, v2);
    }
  }
}

BOOL WebCore::HTMLScriptRunner::executeScriptsWaitingForParsing(WebCore::HTMLScriptRunner *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::PendingScript *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  WebCore::Document *v17;
  uint64_t v18;
  void *v19;
  WTF *v21;
  void *v22;
  WTF *v23;
  void *v24;

  do
  {
    v2 = *((_QWORD *)this + 3);
    v3 = *((_QWORD *)this + 4);
    if (v2 == v3)
      break;
    v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v2);
    v5 = *(_QWORD *)(v4 + 40);
    if (!v5)
      goto LABEL_27;
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    v8 = *((_QWORD *)this + 3);
    v9 = *((_QWORD *)this + 4);
    if ((v6 & 1) == 0)
    {
      if (v8 == v9)
      {
        __break(0xC471u);
        JUMPOUT(0x19432CEC8);
      }
      v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v8);
LABEL_27:
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), v4);
      return v2 == v3;
    }
    if (v8 == v9)
    {
      __break(0xC471u);
      JUMPOUT(0x19432CEA8);
    }
    v10 = *((_QWORD *)this + 5);
    v11 = *(_QWORD *)(v10 + 8 * v8);
    *(_QWORD *)(v10 + 8 * v8) = 0;
    v12 = *((_QWORD *)this + 5);
    v13 = *(WebCore::PendingScript **)(v12 + 8 * v8);
    *(_QWORD *)(v12 + 8 * v8) = 0;
    if (v13)
    {
      if (*((_DWORD *)v13 + 4) == 1)
      {
        WebCore::PendingScript::~PendingScript(v13, v7);
        WTF::fastFree(v23, v24);
        v8 = *((_QWORD *)this + 3);
      }
      else
      {
        --*((_DWORD *)v13 + 4);
      }
    }
    if (v8 == *((unsigned int *)this + 12) - 1)
      v14 = 0;
    else
      v14 = v8 + 1;
    *((_QWORD *)this + 3) = v14;
    if (*(_QWORD *)(v11 + 40))
      v15 = *(_QWORD *)(v11 + 48) == 0;
    else
      v15 = 1;
    if (!v15)
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), v11);
    LODWORD(v16) = *((_DWORD *)this + 14);
    if (!(_DWORD)v16)
    {
      v16 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v17 = *(WebCore::Document **)(v16 + 8);
        if (v17)
        {
          v18 = WebCore::Document::eventLoop(v17, (WTF::StringImpl *)v7);
          WebCore::EventLoopTaskGroup::performMicrotaskCheckpoint(v18);
          LODWORD(v16) = *((_DWORD *)this + 14);
        }
        else
        {
          LODWORD(v16) = 0;
        }
      }
    }
    *((_DWORD *)this + 14) = v16 + 1;
    WebCore::ScriptElement::executePendingScript(*(WebCore::ScriptElement **)(v11 + 24), (WebCore::PendingScript *)v11);
    --*((_DWORD *)this + 14);
    if (*(_DWORD *)(v11 + 16) == 1)
    {
      WebCore::PendingScript::~PendingScript((WebCore::PendingScript *)v11, v19);
      WTF::fastFree(v21, v22);
    }
    else
    {
      --*(_DWORD *)(v11 + 16);
    }
  }
  while (*(_QWORD *)this && *(_QWORD *)(*(_QWORD *)this + 8));
  return v2 == v3;
}

uint64_t WebCore::JSMutationObserver::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2);
}

float64x2_t WebCore::TransformationMatrix::operator CATransform3D@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t result;
  float64x2_t v6;

  v2 = vcvtq_f64_f32(vcvt_f32_f64(a1[1]));
  *a2 = vcvtq_f64_f32(vcvt_f32_f64(*a1));
  a2[1] = v2;
  v3 = vcvtq_f64_f32(vcvt_f32_f64(a1[3]));
  a2[2] = vcvtq_f64_f32(vcvt_f32_f64(a1[2]));
  a2[3] = v3;
  v4 = vcvtq_f64_f32(vcvt_f32_f64(a1[5]));
  a2[4] = vcvtq_f64_f32(vcvt_f32_f64(a1[4]));
  a2[5] = v4;
  result = vcvtq_f64_f32(vcvt_f32_f64(a1[6]));
  v6 = vcvtq_f64_f32(vcvt_f32_f64(a1[7]));
  a2[6] = result;
  a2[7] = v6;
  return result;
}

unsigned int *WebCore::JSEventTarget::destroy(WebCore::JSEventTarget *this, JSC::JSCell *a2)
{
  unsigned int *result;

  result = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if ((*((_BYTE *)result + 22) & 2) != 0)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      else
      {
        result[6] -= 2;
      }
    }
    else
    {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 96))(result);
    }
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGSVGElement,WebCore::SVGGraphicsElement,WebCore::SVGFitToViewBox>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  WTF::StringImpl **v18;
  int v19;
  WTF::StringImpl **v20;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  uint64_t v33;
  WTF::StringImpl ***v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl **v36;
  int v37;
  WTF::StringImpl **v38;
  WTF *v40;
  void *v41;
  WTF::StringImpl ***v42;
  uint64_t v43;
  WTF::StringImpl ***v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  WTF *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl ***v55;
  WTF::StringImpl ***v56;
  WTF::StringImpl **v57;
  int v58;
  WTF::StringImpl **v59;
  WTF *v61;
  void *v62;
  WTF::StringImpl ***v63;
  WTF::StringImpl ***v64;
  uint64_t v65;
  WTF::StringImpl ***v66;
  WTF::StringImpl ***v67;
  WTF::StringImpl ***v68;
  uint64_t v69;
  WTF::StringImpl ***v70;
  WTF::StringImpl **v71;
  uint64_t v72;
  int v73;
  WTF::StringImpl **v74;
  uint64_t v75;
  WTF *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl ***v81;
  WTF::StringImpl ***v82;
  WTF::StringImpl **v83;
  int v84;
  WTF::StringImpl **v85;
  WTF *v87;
  void *v88;
  WTF::StringImpl **v89;
  uint64_t v90;
  int v91;
  WTF::StringImpl **v92;
  uint64_t v93;
  WTF *v95;
  void *v96;
  uint64_t v97;
  WTF::StringImpl ***v98[2];

  v1 = result;
  if ((byte_1ECE861B0 & 1) == 0)
  {
    v2 = 0;
    v11 = 0;
    v3 = 0;
    qword_1ECE861A8 = 0;
    byte_1ECE861B0 = 1;
    goto LABEL_30;
  }
  v2 = (WTF::StringImpl ***)qword_1ECE861A8;
  if (!qword_1ECE861A8)
  {
    v11 = 0;
    v3 = 0;
LABEL_30:
    v4 = (uint64_t)&v2[2 * v3];
    goto LABEL_17;
  }
  v3 = *(unsigned int *)(qword_1ECE861A8 - 4);
  v4 = qword_1ECE861A8 + 16 * v3;
  if (!*(_DWORD *)(qword_1ECE861A8 - 12))
  {
    v11 = qword_1ECE861A8 + 16 * v3;
    goto LABEL_30;
  }
  if ((_DWORD)v3)
  {
    v5 = (WTF::StringImpl **)WebCore::nullName;
    v6 = 16 * v3;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v5)
        {
          v7 = (*(_DWORD *)v5)++;
          v8 = *v2;
          if (v7)
          {
            *(_DWORD *)v5 = v7;
            v9 = (uint64_t)v5;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
            result = WTF::fastFree(v13, v14);
            v9 = WebCore::nullName;
          }
        }
        else
        {
          v9 = 0;
          v8 = *v2;
        }
        if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
          break;
        v2 += 2;
        v5 = (WTF::StringImpl **)v9;
        v6 -= 16;
        if (!v6)
        {
          v2 = (WTF::StringImpl ***)v4;
          break;
        }
      }
      v11 = (uint64_t)v2;
      v2 = (WTF::StringImpl ***)qword_1ECE861A8;
    }
    else
    {
      v12 = 0;
      while ((unint64_t)(*(_QWORD *)(qword_1ECE861A8 + v12) + 1) <= 1)
      {
        v12 += 16;
        if (v6 == v12)
        {
          v11 = v4;
          goto LABEL_17;
        }
      }
      v11 = qword_1ECE861A8 + v12;
    }
  }
  else
  {
    v11 = qword_1ECE861A8;
  }
LABEL_17:
  if (v2)
    v2 += 2 * *((unsigned int *)v2 - 1);
  while ((WTF::StringImpl ***)v11 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v11 + 8) + 16))(*(_QWORD *)(v11 + 8), *(_QWORD *)(v1 + 8));
    v17 = (WTF::StringImpl ***)(v11 + 16);
    v11 = v4;
    if (v17 != (WTF::StringImpl ***)v4)
    {
      v18 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
        while (1)
        {
          if (v18)
          {
            v19 = (*(_DWORD *)v18)++;
            v20 = *v17;
            if (v19)
            {
              *(_DWORD *)v18 = v19;
            }
            else
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
              result = WTF::fastFree(v15, v16);
            }
          }
          else
          {
            v20 = *v17;
          }
          if (v20 != v18 && (WTF::StringImpl **)((char *)*v17 + 1) != 0)
            break;
          v17 += 2;
          if (v17 == (WTF::StringImpl ***)v4)
            goto LABEL_48;
          v18 = (WTF::StringImpl **)WebCore::nullName;
        }
      }
      else
      {
        while ((unint64_t)*v17 + 1 <= 1)
        {
          v17 += 2;
          if (v17 == (WTF::StringImpl ***)v4)
          {
LABEL_48:
            v11 = v4;
            goto LABEL_50;
          }
        }
      }
      v11 = (uint64_t)v17;
    }
LABEL_50:
    ;
  }
  {
    v22 = 0;
    v34 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_203;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v34 = 0;
    v23 = 0;
LABEL_203:
    v24 = &v22[2 * v23];
    goto LABEL_72;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v34 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_203;
  }
  if ((_DWORD)v23)
  {
    v25 = (WTF::StringImpl **)WebCore::nullName;
    v26 = 16 * v23;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v25)
        {
          v27 = (*(_DWORD *)v25)++;
          v28 = *v22;
          if (v27)
          {
            *(_DWORD *)v25 = v27;
            v29 = (uint64_t)v25;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
            result = WTF::fastFree(v31, v32);
            v29 = WebCore::nullName;
          }
        }
        else
        {
          v29 = 0;
          v28 = *v22;
        }
        if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
          break;
        v22 += 2;
        v25 = (WTF::StringImpl **)v29;
        v26 -= 16;
        if (!v26)
        {
          v22 = v24;
          break;
        }
      }
      v34 = v22;
      v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v33 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v33)
                               + 1) <= 1)
      {
        v33 += 16;
        if (v26 == v33)
        {
          v34 = v24;
          goto LABEL_72;
        }
      }
      v34 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v33);
    }
  }
  else
  {
    v34 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_72:
  if (v22)
    v22 += 2 * *((unsigned int *)v22 - 1);
  while (v34 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v34[1] + 2))(v34[1], *(_QWORD *)(v1 + 8));
    v35 = v34 + 2;
    v34 = v24;
    if (v35 != v24)
    {
      v36 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
        while (1)
        {
          if (v36)
          {
            v37 = (*(_DWORD *)v36)++;
            v38 = *v35;
            if (v37)
            {
              *(_DWORD *)v36 = v37;
            }
            else
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v36);
              result = WTF::fastFree(v40, v41);
            }
          }
          else
          {
            v38 = *v35;
          }
          if (v38 != v36 && (WTF::StringImpl **)((char *)*v35 + 1) != 0)
            break;
          v35 += 2;
          if (v35 == v24)
            goto LABEL_90;
          v36 = (WTF::StringImpl **)WebCore::nullName;
        }
      }
      else
      {
        while ((unint64_t)*v35 + 1 <= 1)
        {
          v35 += 2;
          if (v35 == v24)
          {
LABEL_90:
            v34 = v24;
            goto LABEL_92;
          }
        }
      }
      v34 = v35;
    }
LABEL_92:
    ;
  }
  {
    v42 = 0;
    v55 = 0;
    v43 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_207;
  }
  v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v55 = 0;
    v43 = 0;
LABEL_207:
    v44 = &v42[2 * v43];
    goto LABEL_115;
  }
  v43 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v44 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v43);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v43);
    goto LABEL_207;
  }
  if ((_DWORD)v43)
  {
    v45 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v46 = 16 * v43;
      while (1)
      {
        if (v45)
        {
          v47 = (*(_DWORD *)v45)++;
          v48 = *v42;
          if (v47)
          {
            *(_DWORD *)v45 = v47;
            v49 = (uint64_t)v45;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v45);
            result = WTF::fastFree(v51, v52);
            v49 = WebCore::nullName;
          }
        }
        else
        {
          v49 = 0;
          v48 = *v42;
        }
        if (v48 != v45 && (WTF::StringImpl **)((char *)*v42 + 1) != 0)
          break;
        v42 += 2;
        v45 = (WTF::StringImpl **)v49;
        v46 -= 16;
        if (!v46)
        {
          v42 = v44;
          break;
        }
      }
      v55 = v42;
      v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v53 = 0;
      v54 = 16 * v43;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v53)
                               + 1) <= 1)
      {
        v53 += 16;
        if (v54 == v53)
        {
          v55 = v44;
          goto LABEL_115;
        }
      }
      v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v53);
    }
  }
  else
  {
    v55 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_115:
  if (v42)
    v42 += 2 * *((unsigned int *)v42 - 1);
  while (v55 != v42)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v55[1] + 2))(v55[1], *(_QWORD *)(v1 + 8));
    v56 = v55 + 2;
    v55 = v44;
    if (v56 != v44)
    {
      v57 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
        while (1)
        {
          if (v57)
          {
            v58 = (*(_DWORD *)v57)++;
            v59 = *v56;
            if (v58)
            {
              *(_DWORD *)v57 = v58;
            }
            else
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v57);
              result = WTF::fastFree(v61, v62);
            }
          }
          else
          {
            v59 = *v56;
          }
          if (v59 != v57 && (WTF::StringImpl **)((char *)*v56 + 1) != 0)
            break;
          v56 += 2;
          if (v56 == v44)
            goto LABEL_133;
          v57 = (WTF::StringImpl **)WebCore::nullName;
        }
      }
      else
      {
        while ((unint64_t)*v56 + 1 <= 1)
        {
          v56 += 2;
          if (v56 == v44)
          {
LABEL_133:
            v55 = v44;
            goto LABEL_135;
          }
        }
      }
      v55 = v56;
    }
LABEL_135:
    ;
  }
  {
    v63 = 0;
    v64 = 0;
    v65 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_139;
  }
  v63 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v64 = 0;
    v65 = 0;
LABEL_139:
    v66 = &v63[2 * v65];
    goto LABEL_140;
  }
  v65 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v66 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v65);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v64 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v65);
    goto LABEL_139;
  }
  if ((_DWORD)v65)
  {
    v89 = (WTF::StringImpl **)WebCore::nullName;
    v90 = 16 * v65;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v89)
        {
          v91 = (*(_DWORD *)v89)++;
          v92 = *v63;
          if (v91)
          {
            *(_DWORD *)v89 = v91;
            v93 = (uint64_t)v89;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v89);
            result = WTF::fastFree(v95, v96);
            v93 = WebCore::nullName;
          }
        }
        else
        {
          v93 = 0;
          v92 = *v63;
        }
        if (v92 != v89 && (WTF::StringImpl **)((char *)*v63 + 1) != 0)
          break;
        v63 += 2;
        v89 = (WTF::StringImpl **)v93;
        v90 -= 16;
        if (!v90)
        {
          v63 = v66;
          break;
        }
      }
      v64 = v63;
      v63 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v97 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v97)
                               + 1) <= 1)
      {
        v97 += 16;
        if (v90 == v97)
        {
          v64 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    + 16 * v65);
          goto LABEL_140;
        }
      }
      v64 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v97);
    }
  }
  else
  {
    v64 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_140:
  v98[0] = v64;
  v98[1] = v66;
  if (v63)
    v67 = &v63[2 * *((unsigned int *)v63 - 1)];
  else
    v67 = 0;
  if (v67 != v64)
  {
    do
    {
      (*((void (**)(WTF::StringImpl **, uint64_t))*v64[1] + 2))(v64[1], *(_QWORD *)(v1 + 8) + 184);
      result = (uint64_t)WTF::HashTableIteratorAdapter<WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WebCore::TagCollectionNS *,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::TagCollectionNS *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>::operator++(v98);
      v64 = v98[0];
    }
    while (v98[0] != v67);
  }
  {
    v68 = 0;
    v81 = 0;
    v69 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFitToViewBox>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_201;
  }
  v68 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFitToViewBox>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFitToViewBox>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v81 = 0;
    v69 = 0;
LABEL_201:
    v70 = &v68[2 * v69];
    goto LABEL_168;
  }
  v69 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFitToViewBox>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v70 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFitToViewBox>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v69);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFitToViewBox>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v81 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFitToViewBox>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v69);
    goto LABEL_201;
  }
  if ((_DWORD)v69)
  {
    v71 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v72 = 16 * v69;
      while (1)
      {
        if (v71)
        {
          v73 = (*(_DWORD *)v71)++;
          v74 = *v68;
          if (v73)
          {
            *(_DWORD *)v71 = v73;
            v75 = (uint64_t)v71;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v71);
            result = WTF::fastFree(v77, v78);
            v75 = WebCore::nullName;
          }
        }
        else
        {
          v75 = 0;
          v74 = *v68;
        }
        if (v74 != v71 && (WTF::StringImpl **)((char *)*v68 + 1) != 0)
          break;
        v68 += 2;
        v71 = (WTF::StringImpl **)v75;
        v72 -= 16;
        if (!v72)
        {
          v68 = v70;
          break;
        }
      }
      v81 = v68;
      v68 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFitToViewBox>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v79 = 0;
      v80 = 16 * v69;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFitToViewBox>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v79)
                               + 1) <= 1)
      {
        v79 += 16;
        if (v80 == v79)
        {
          v81 = v70;
          goto LABEL_168;
        }
      }
      v81 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFitToViewBox>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v79);
    }
  }
  else
  {
    v81 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGFitToViewBox>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_168:
  if (v68)
    v68 += 2 * *((unsigned int *)v68 - 1);
  while (v81 != v68)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t))*v81[1] + 2))(v81[1], *(_QWORD *)(v1 + 8) + 216);
    v82 = v81 + 2;
    v81 = v70;
    if (v82 != v70)
    {
      v83 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
        while (1)
        {
          if (v83)
          {
            v84 = (*(_DWORD *)v83)++;
            v85 = *v82;
            if (v84)
            {
              *(_DWORD *)v83 = v84;
            }
            else
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v83);
              result = WTF::fastFree(v87, v88);
            }
          }
          else
          {
            v85 = *v82;
          }
          if (v85 != v83 && (WTF::StringImpl **)((char *)*v82 + 1) != 0)
            break;
          v82 += 2;
          if (v82 == v70)
            goto LABEL_186;
          v83 = (WTF::StringImpl **)WebCore::nullName;
        }
      }
      else
      {
        while ((unint64_t)*v82 + 1 <= 1)
        {
          v82 += 2;
          if (v82 == v70)
          {
LABEL_186:
            v81 = v70;
            goto LABEL_188;
          }
        }
      }
      v81 = v82;
    }
LABEL_188:
    ;
  }
  return result;
}

BOOL WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGCircleElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(WTF::StringImpl **a1)
{
  WTF::StringImpl **v2;
  int v3;
  WTF *v5;
  void *v6;

  v2 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v3 = (*(_DWORD *)WebCore::nullName)++;
    if (v3)
    {
      *(_DWORD *)v2 = v3;
    }
    else
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v2);
      WTF::fastFree(v5, v6);
    }
  }
  return v2 == a1;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGSVGElement,WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGGraphicsElement,WebCore::SVGAnimatedPropertyList<WebCore::SVGTransformList>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFitToViewBox,WebCore::SVGAnimatedValueProperty<WebCore::SVGRect>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

uint64_t WebCore::SVGPointerMemberAccessor<WebCore::SVGFitToViewBox,WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>>::detach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a2 + *(_QWORD *)(result + 8)) + 16) = 0;
  return result;
}

WebCore::SelectorCompiler::SelectorFragment *WebCore::SelectorCompiler::SelectorFragment::SelectorFragment(WebCore::SelectorCompiler::SelectorFragment *this, const WebCore::SelectorCompiler::SelectorFragment *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::SelectorCompiler::SelectorFragment *v39;
  uint64_t v40;
  const WebCore::SelectorCompiler::SelectorFragment *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WebCore::SelectorCompiler::SelectorFragment *v64;
  uint64_t v65;
  const WebCore::SelectorCompiler::SelectorFragment *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  WebCore::SelectorCompiler::SelectorFragment *v77;
  uint64_t v78;
  const WebCore::SelectorCompiler::SelectorFragment *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WebCore::SelectorCompiler::SelectorFragment *v96;
  uint64_t v97;
  const WebCore::SelectorCompiler::SelectorFragment *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  int v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  WebCore::SelectorCompiler::SelectorFragment *v117;
  uint64_t v118;
  const WebCore::SelectorCompiler::SelectorFragment *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;

  *(_OWORD *)this = *(_OWORD *)a2;
  v4 = *((_OWORD *)a2 + 1);
  v5 = *((_OWORD *)a2 + 2);
  v6 = *((_OWORD *)a2 + 3);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_OWORD *)this + 2) = v5;
  *((_OWORD *)this + 3) = v6;
  *((_OWORD *)this + 1) = v4;
  v7 = (WTF *)*((unsigned int *)a2 + 21);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 21) = (_DWORD)v7;
  if ((_DWORD)v7)
  {
    v48 = (void *)WTF::fastMalloc(v7);
    *((_DWORD *)this + 20) = (_DWORD)v7;
    *((_QWORD *)this + 9) = v48;
    memcpy(v48, *((const void **)a2 + 9), *((unsigned int *)a2 + 21));
  }
  v8 = *((unsigned int *)a2 + 25);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 25) = v8;
  if ((_DWORD)v8)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19432E308);
    }
    v49 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *((_DWORD *)this + 24) = v8;
    *((_QWORD *)this + 11) = v49;
    memcpy(v49, *((const void **)a2 + 11), 8 * *((unsigned int *)a2 + 25));
  }
  v9 = *((unsigned int *)a2 + 29);
  v10 = (char *)this + 120;
  *((_QWORD *)this + 13) = (char *)this + 120;
  *((_DWORD *)this + 28) = 8;
  *((_DWORD *)this + 29) = v9;
  if (v9 >= 9)
  {
    if (v9 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19432E310);
    }
    v10 = (char *)WTF::fastMalloc((WTF *)(8 * v9));
    *((_DWORD *)this + 28) = v9;
    *((_QWORD *)this + 13) = v10;
  }
  memcpy(v10, *((const void **)a2 + 13), 8 * *((unsigned int *)a2 + 29));
  WTF::HashTable<WebCore::CSSSelectorPseudoClass,WebCore::CSSSelectorPseudoClass,WTF::IdentityExtractor,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>>::HashTable((uint64_t *)this + 23, (unsigned __int8 **)a2 + 23);
  v11 = *((unsigned int *)a2 + 51);
  v12 = (_QWORD *)((char *)this + 208);
  *((_QWORD *)this + 24) = (char *)this + 208;
  *((_DWORD *)this + 50) = 4;
  *((_DWORD *)this + 51) = v11;
  if (v11 >= 5)
  {
    if (v11 >> 29)
      goto LABEL_124;
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v11));
    *((_DWORD *)this + 50) = v11;
    *((_QWORD *)this + 24) = v12;
  }
  v13 = *((unsigned int *)a2 + 51);
  if ((_DWORD)v13)
  {
    v14 = (uint64_t *)*((_QWORD *)a2 + 24);
    v15 = 8 * v13;
    do
    {
      v16 = *v14++;
      *v12++ = v16;
      v15 -= 8;
    }
    while (v15);
  }
  v17 = *((unsigned int *)a2 + 63);
  v18 = (_OWORD *)((char *)this + 256);
  *((_QWORD *)this + 30) = (char *)this + 256;
  *((_DWORD *)this + 62) = 4;
  *((_DWORD *)this + 63) = v17;
  if (v17 >= 5)
  {
    if (v17 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x19432E318);
    }
    v18 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v17));
    *((_DWORD *)this + 62) = v17;
    *((_QWORD *)this + 30) = v18;
  }
  v19 = *((unsigned int *)a2 + 63);
  if ((_DWORD)v19)
  {
    v45 = (__int128 *)*((_QWORD *)a2 + 30);
    v46 = 16 * v19;
    do
    {
      v47 = *v45++;
      *v18++ = v47;
      v46 -= 16;
    }
    while (v46);
  }
  v20 = *((unsigned int *)a2 + 83);
  v21 = (char *)this + 336;
  *((_QWORD *)this + 40) = (char *)this + 336;
  *((_DWORD *)this + 82) = 2;
  *((_DWORD *)this + 83) = v20;
  if (v20 >= 3)
  {
    if (v20 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19432E330);
    }
    v21 = (char *)WTF::fastMalloc((WTF *)(8 * v20));
    *((_DWORD *)this + 82) = v20;
    *((_QWORD *)this + 40) = v21;
  }
  memcpy(v21, *((const void **)a2 + 40), 8 * *((unsigned int *)a2 + 83));
  v22 = *((unsigned int *)a2 + 91);
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_DWORD *)this + 91) = v22;
  if ((_DWORD)v22)
  {
    if (v22 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x19432E338);
    }
    v81 = 40 * v22;
    v82 = WTF::fastMalloc((WTF *)(40 * v22));
    *((_DWORD *)this + 90) = (v81 & 0xFFFFFFF8) / 0x28;
    *((_QWORD *)this + 44) = v82;
    v83 = *((_DWORD *)a2 + 91);
    if (v83)
    {
      v84 = v82;
      v85 = *((_QWORD *)a2 + 44);
      v86 = v85 + 40 * v83;
      do
      {
        *(_QWORD *)v84 = *(_QWORD *)v85;
        v87 = *(unsigned int *)(v85 + 20);
        *(_QWORD *)(v84 + 8) = 0;
        *(_QWORD *)(v84 + 16) = 0;
        *(_DWORD *)(v84 + 20) = v87;
        if ((_DWORD)v87)
        {
          if (v87 >= 0x208209)
          {
            __break(0xC471u);
            JUMPOUT(0x19432E2E8);
          }
          v89 = 2016 * v87;
          v90 = WTF::fastMalloc((WTF *)(2016 * v87));
          *(_DWORD *)(v84 + 16) = v89 / 0x7E0;
          *(_QWORD *)(v84 + 8) = v90;
          v91 = *(_DWORD *)(v85 + 20);
          if (v91)
          {
            v92 = v90;
            v93 = *(_QWORD *)(v85 + 8);
            v94 = v93 + 2016 * v91;
            do
            {
              v95 = *(unsigned int *)(v93 + 12);
              v96 = (WebCore::SelectorCompiler::SelectorFragment *)(v92 + 16);
              *(_QWORD *)v92 = v92 + 16;
              *(_DWORD *)(v92 + 8) = 4;
              *(_DWORD *)(v92 + 12) = v95;
              if (v95 >= 5)
              {
                if (v95 >= 0x842109)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19432E2F0);
                }
                v101 = 496 * v95;
                v96 = (WebCore::SelectorCompiler::SelectorFragment *)WTF::fastMalloc((WTF *)(496 * v95));
                *(_DWORD *)(v92 + 8) = v101 / 0x1F0;
                *(_QWORD *)v92 = v96;
              }
              v97 = *(unsigned int *)(v93 + 12);
              if ((_DWORD)v97)
              {
                v98 = *(const WebCore::SelectorCompiler::SelectorFragment **)v93;
                v99 = 496 * v97;
                do
                {
                  v96 = (WebCore::SelectorCompiler::SelectorFragment *)(WebCore::SelectorCompiler::SelectorFragment::SelectorFragment(v96, v98)+ 496);
                  v98 = (const WebCore::SelectorCompiler::SelectorFragment *)((char *)v98 + 496);
                  v99 -= 496;
                }
                while (v99);
              }
              v100 = *(_QWORD *)(v93 + 2000);
              *(_QWORD *)(v92 + 2005) = *(_QWORD *)(v93 + 2005);
              *(_QWORD *)(v92 + 2000) = v100;
              v92 += 2016;
              v93 += 2016;
            }
            while (v93 != v94);
          }
        }
        v88 = *(_QWORD *)(v85 + 24);
        *(_BYTE *)(v84 + 32) = *(_BYTE *)(v85 + 32);
        *(_QWORD *)(v84 + 24) = v88;
        v84 += 40;
        v85 += 40;
      }
      while (v85 != v86);
    }
  }
  v23 = *((unsigned int *)a2 + 95);
  v24 = (char *)this + 384;
  *((_QWORD *)this + 46) = (char *)this + 384;
  *((_DWORD *)this + 94) = 2;
  *((_DWORD *)this + 95) = v23;
  if (v23 >= 3)
  {
    if (v23 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19432E340);
    }
    v24 = (char *)WTF::fastMalloc((WTF *)(8 * v23));
    *((_DWORD *)this + 94) = v23;
    *((_QWORD *)this + 46) = v24;
  }
  memcpy(v24, *((const void **)a2 + 46), 8 * *((unsigned int *)a2 + 95));
  v25 = *((unsigned int *)a2 + 103);
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_DWORD *)this + 103) = v25;
  if ((_DWORD)v25)
  {
    if (v25 < 0x6666667)
    {
      v102 = 40 * v25;
      v103 = WTF::fastMalloc((WTF *)(40 * v25));
      *((_DWORD *)this + 102) = (v102 & 0xFFFFFFF8) / 0x28;
      *((_QWORD *)this + 50) = v103;
      v104 = *((_DWORD *)a2 + 103);
      if (v104)
      {
        v105 = v103;
        v106 = *((_QWORD *)a2 + 50);
        v107 = v106 + 40 * v104;
        do
        {
          *(_QWORD *)v105 = *(_QWORD *)v106;
          v108 = *(unsigned int *)(v106 + 20);
          *(_QWORD *)(v105 + 8) = 0;
          *(_QWORD *)(v105 + 16) = 0;
          *(_DWORD *)(v105 + 20) = v108;
          if ((_DWORD)v108)
          {
            if (v108 >= 0x208209)
            {
              __break(0xC471u);
              JUMPOUT(0x19432E2F8);
            }
            v110 = 2016 * v108;
            v111 = WTF::fastMalloc((WTF *)(2016 * v108));
            *(_DWORD *)(v105 + 16) = v110 / 0x7E0;
            *(_QWORD *)(v105 + 8) = v111;
            v112 = *(_DWORD *)(v106 + 20);
            if (v112)
            {
              v113 = v111;
              v114 = *(_QWORD *)(v106 + 8);
              v115 = v114 + 2016 * v112;
              do
              {
                v116 = *(unsigned int *)(v114 + 12);
                v117 = (WebCore::SelectorCompiler::SelectorFragment *)(v113 + 16);
                *(_QWORD *)v113 = v113 + 16;
                *(_DWORD *)(v113 + 8) = 4;
                *(_DWORD *)(v113 + 12) = v116;
                if (v116 >= 5)
                {
                  if (v116 >= 0x842109)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19432E300);
                  }
                  v122 = 496 * v116;
                  v117 = (WebCore::SelectorCompiler::SelectorFragment *)WTF::fastMalloc((WTF *)(496 * v116));
                  *(_DWORD *)(v113 + 8) = v122 / 0x1F0;
                  *(_QWORD *)v113 = v117;
                }
                v118 = *(unsigned int *)(v114 + 12);
                if ((_DWORD)v118)
                {
                  v119 = *(const WebCore::SelectorCompiler::SelectorFragment **)v114;
                  v120 = 496 * v118;
                  do
                  {
                    v117 = (WebCore::SelectorCompiler::SelectorFragment *)(WebCore::SelectorCompiler::SelectorFragment::SelectorFragment(v117, v119)+ 496);
                    v119 = (const WebCore::SelectorCompiler::SelectorFragment *)((char *)v119 + 496);
                    v120 -= 496;
                  }
                  while (v120);
                }
                v121 = *(_QWORD *)(v114 + 2000);
                *(_QWORD *)(v113 + 2005) = *(_QWORD *)(v114 + 2005);
                *(_QWORD *)(v113 + 2000) = v121;
                v113 += 2016;
                v114 += 2016;
              }
              while (v114 != v115);
            }
          }
          v109 = *(_QWORD *)(v106 + 24);
          *(_BYTE *)(v105 + 32) = *(_BYTE *)(v106 + 32);
          *(_QWORD *)(v105 + 24) = v109;
          v105 += 40;
          v106 += 40;
        }
        while (v106 != v107);
      }
      goto LABEL_17;
    }
LABEL_124:
    __break(0xC471u);
    JUMPOUT(0x19432E2B8);
  }
LABEL_17:
  v26 = *((unsigned int *)a2 + 107);
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_DWORD *)this + 107) = v26;
  if ((_DWORD)v26)
  {
    if (v26 >= 0x208209)
    {
      __break(0xC471u);
      JUMPOUT(0x19432E2C0);
    }
    v32 = 2016 * v26;
    v33 = WTF::fastMalloc((WTF *)(2016 * v26));
    *((_DWORD *)this + 106) = v32 / 0x7E0;
    *((_QWORD *)this + 52) = v33;
    v34 = *((_DWORD *)a2 + 107);
    if (v34)
    {
      v35 = v33;
      v36 = *((_QWORD *)a2 + 52);
      v37 = v36 + 2016 * v34;
      do
      {
        v38 = *(unsigned int *)(v36 + 12);
        v39 = (WebCore::SelectorCompiler::SelectorFragment *)(v35 + 16);
        *(_QWORD *)v35 = v35 + 16;
        *(_DWORD *)(v35 + 8) = 4;
        *(_DWORD *)(v35 + 12) = v38;
        if (v38 >= 5)
        {
          if (v38 >= 0x842109)
          {
            __break(0xC471u);
            JUMPOUT(0x19432E2C8);
          }
          v44 = 496 * v38;
          v39 = (WebCore::SelectorCompiler::SelectorFragment *)WTF::fastMalloc((WTF *)(496 * v38));
          *(_DWORD *)(v35 + 8) = v44 / 0x1F0;
          *(_QWORD *)v35 = v39;
        }
        v40 = *(unsigned int *)(v36 + 12);
        if ((_DWORD)v40)
        {
          v41 = *(const WebCore::SelectorCompiler::SelectorFragment **)v36;
          v42 = 496 * v40;
          do
          {
            v39 = (WebCore::SelectorCompiler::SelectorFragment *)(WebCore::SelectorCompiler::SelectorFragment::SelectorFragment(v39, v41)+ 496);
            v41 = (const WebCore::SelectorCompiler::SelectorFragment *)((char *)v41 + 496);
            v42 -= 496;
          }
          while (v42);
        }
        v43 = *(_QWORD *)(v36 + 2000);
        *(_QWORD *)(v35 + 2005) = *(_QWORD *)(v36 + 2005);
        *(_QWORD *)(v35 + 2000) = v43;
        v35 += 2016;
        v36 += 2016;
      }
      while (v36 != v37);
    }
  }
  v27 = *((_QWORD *)a2 + 54);
  *((_BYTE *)this + 440) = *((_BYTE *)a2 + 440);
  *((_QWORD *)this + 54) = v27;
  v28 = *((unsigned int *)a2 + 115);
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_DWORD *)this + 115) = v28;
  if ((_DWORD)v28)
  {
    if (v28 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x19432E320);
    }
    v50 = WTF::fastMalloc((WTF *)(32 * v28));
    *((_DWORD *)this + 114) = v28;
    *((_QWORD *)this + 56) = v50;
    v51 = *((unsigned int *)a2 + 115);
    if ((_DWORD)v51)
    {
      v52 = v50;
      v53 = (uint64_t *)*((_QWORD *)a2 + 56);
      v54 = &v53[4 * v51];
      do
      {
        v55 = *((unsigned int *)v53 + 3);
        *(_QWORD *)v52 = 0;
        *(_QWORD *)(v52 + 8) = 0;
        *(_DWORD *)(v52 + 12) = v55;
        if ((_DWORD)v55)
        {
          if (v55 >= 0x208209)
          {
            __break(0xC471u);
            JUMPOUT(0x19432E2D8);
          }
          v57 = 2016 * v55;
          v58 = WTF::fastMalloc((WTF *)(2016 * v55));
          *(_DWORD *)(v52 + 8) = v57 / 0x7E0;
          *(_QWORD *)v52 = v58;
          v59 = *((_DWORD *)v53 + 3);
          if (v59)
          {
            v60 = v58;
            v61 = *v53;
            v62 = *v53 + 2016 * v59;
            do
            {
              v63 = *(unsigned int *)(v61 + 12);
              v64 = (WebCore::SelectorCompiler::SelectorFragment *)(v60 + 16);
              *(_QWORD *)v60 = v60 + 16;
              *(_DWORD *)(v60 + 8) = 4;
              *(_DWORD *)(v60 + 12) = v63;
              if (v63 >= 5)
              {
                if (v63 >= 0x842109)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19432E2E0);
                }
                v69 = 496 * v63;
                v64 = (WebCore::SelectorCompiler::SelectorFragment *)WTF::fastMalloc((WTF *)(496 * v63));
                *(_DWORD *)(v60 + 8) = v69 / 0x1F0;
                *(_QWORD *)v60 = v64;
              }
              v65 = *(unsigned int *)(v61 + 12);
              if ((_DWORD)v65)
              {
                v66 = *(const WebCore::SelectorCompiler::SelectorFragment **)v61;
                v67 = 496 * v65;
                do
                {
                  v64 = (WebCore::SelectorCompiler::SelectorFragment *)(WebCore::SelectorCompiler::SelectorFragment::SelectorFragment(v64, v66)+ 496);
                  v66 = (const WebCore::SelectorCompiler::SelectorFragment *)((char *)v66 + 496);
                  v67 -= 496;
                }
                while (v67);
              }
              v68 = *(_QWORD *)(v61 + 2000);
              *(_QWORD *)(v60 + 2005) = *(_QWORD *)(v61 + 2005);
              *(_QWORD *)(v60 + 2000) = v68;
              v60 += 2016;
              v61 += 2016;
            }
            while (v61 != v62);
          }
        }
        v56 = v53[2];
        *(_BYTE *)(v52 + 24) = *((_BYTE *)v53 + 24);
        *(_QWORD *)(v52 + 16) = v56;
        v52 += 32;
        v53 += 4;
      }
      while (v53 != v54);
    }
  }
  v29 = *((unsigned int *)a2 + 119);
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = 0;
  *((_DWORD *)this + 119) = v29;
  if ((_DWORD)v29)
  {
    if (v29 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x19432E328);
    }
    v70 = WTF::fastMalloc((WTF *)(16 * v29));
    *((_DWORD *)this + 118) = v29;
    *((_QWORD *)this + 58) = v70;
    v71 = *((unsigned int *)a2 + 119);
    if ((_DWORD)v71)
    {
      v72 = v70;
      v73 = *((_QWORD *)a2 + 58);
      v74 = v73 + 16 * v71;
      do
      {
        v75 = *(unsigned int *)(v73 + 12);
        *(_QWORD *)v72 = 0;
        *(_QWORD *)(v72 + 8) = 0;
        *(_DWORD *)(v72 + 12) = v75;
        if ((_DWORD)v75)
        {
          if (v75 >= 0x842109)
          {
            __break(0xC471u);
            JUMPOUT(0x19432E2D0);
          }
          v76 = 496 * v75;
          v77 = (WebCore::SelectorCompiler::SelectorFragment *)WTF::fastMalloc((WTF *)(496 * v75));
          *(_DWORD *)(v72 + 8) = v76 / 0x1F0;
          *(_QWORD *)v72 = v77;
          v78 = *(unsigned int *)(v73 + 12);
          if ((_DWORD)v78)
          {
            v79 = *(const WebCore::SelectorCompiler::SelectorFragment **)v73;
            v80 = 496 * v78;
            do
            {
              v77 = (WebCore::SelectorCompiler::SelectorFragment *)(WebCore::SelectorCompiler::SelectorFragment::SelectorFragment(v77, v79)+ 496);
              v79 = (const WebCore::SelectorCompiler::SelectorFragment *)((char *)v79 + 496);
              v80 -= 496;
            }
            while (v80);
          }
        }
        v72 += 16;
        v73 += 16;
      }
      while (v73 != v74);
    }
  }
  v30 = *((_QWORD *)a2 + 60);
  *((_BYTE *)this + 488) = *((_BYTE *)a2 + 488);
  *((_QWORD *)this + 60) = v30;
  return this;
}

unint64_t WTF::Vector<WebCore::SelectorCompiler::SelectorFragmentList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 2016 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v7 = a3 - v5;
    WTF::Vector<WebCore::SelectorCompiler::SelectorFragmentList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v7;
  }
  else
  {
    WTF::Vector<WebCore::SelectorCompiler::SelectorFragmentList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<WebCore::SelectorCompiler::SelectorFragmentList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  WTF *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::SelectorCompiler::SelectorFragment **v13;
  void *v14;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x208209)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(WTF **)a1;
      v7 = *(unsigned int *)(a1 + 12);
      v8 = 2016 * v4;
      v9 = WTF::fastMalloc((WTF *)(2016 * v4));
      *(_DWORD *)(a1 + 8) = v8 / 0x7E0;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v7)
      {
        v11 = v9;
        v12 = 2016 * v7;
        v13 = (WebCore::SelectorCompiler::SelectorFragment **)v6;
        do
        {
          WebCore::SelectorCompiler::SelectorFragmentList::SelectorFragmentList(v11, (uint64_t)v13);
          WebCore::SelectorCompiler::SelectorFragmentList::~SelectorFragmentList(v13, v14);
          v11 += 2016;
          v13 += 252;
          v12 -= 2016;
        }
        while (v12);
      }
      if (v6)
      {
        if (*(WTF **)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10);
      }
    }
  }
}

unint64_t WTF::Vector<WebCore::SelectorCompiler::SelectorList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v7 = a3 - v5;
    WTF::Vector<WebCore::SelectorCompiler::SelectorList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v7;
  }
  else
  {
    WTF::Vector<WebCore::SelectorCompiler::SelectorList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::SelectorCompiler::SelectorList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(32 * v5));
      *(_DWORD *)(v6 + 8) = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        result = (uint64_t)v7;
        do
        {
          *(_QWORD *)v10 = 0;
          *(_QWORD *)(v10 + 8) = 0;
          v11 = *(WTF **)result;
          *(_QWORD *)result = 0;
          *(_QWORD *)v10 = v11;
          LODWORD(v11) = *(_DWORD *)(result + 8);
          *(_DWORD *)(result + 8) = 0;
          *(_DWORD *)(v10 + 8) = (_DWORD)v11;
          LODWORD(v11) = *(_DWORD *)(result + 12);
          *(_DWORD *)(result + 12) = 0;
          *(_DWORD *)(v10 + 12) = (_DWORD)v11;
          v12 = *(_QWORD *)(result + 16);
          *(_BYTE *)(v10 + 24) = *(_BYTE *)(result + 24);
          *(_QWORD *)(v10 + 16) = v12;
          WebCore::SelectorCompiler::SelectorList::~SelectorList((WebCore::SelectorCompiler::SelectorList *)result, v9);
          result = v13 + 32;
          v10 += 32;
        }
        while ((WTF *)result != (WTF *)((char *)v7 + 32 * v8));
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        return WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

void WebCore::CachedResourceLoader::visibleResourcesToPrioritize(WebCore::CachedResourceLoader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  void *v19;
  unsigned int *v20;
  WTF *v21;
  uint64_t v22;
  WTF **v23;
  uint64_t v24;
  WTF *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  WTF *v30;
  void *v31;
  unsigned int **v32;
  unsigned int **v33;
  unsigned int **v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::CachedResource *v39;
  int v40;
  uint64_t v41;
  WebCore::CachedResource *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD *v46;
  unsigned int *v47;
  unsigned int *v48;
  WTF *v49;
  unsigned int **v50;

  v3 = *((_QWORD *)this + 9);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v5 = (_QWORD *)*((_QWORD *)this + 8);
    v6 = WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::begin(v5);
    v8 = v6;
    v9 = v7;
    if (v5)
      v5 += 2 * *((unsigned int *)v5 - 1);
    if (v5 != v6)
    {
      do
      {
        v10 = v8[1];
        if (!v10)
          goto LABEL_11;
        v11 = *(_QWORD *)(v10 + 8);
        if (!v11 || (*(_BYTE *)(v11 + 556) & 0x1F) != 1)
          goto LABEL_11;
        v13 = *(_QWORD *)(v11 + 8);
        if (v13)
          goto LABEL_20;
        v13 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v13 = 1;
        *(_QWORD *)(v13 + 8) = v11;
        v43 = *(unsigned int **)(v11 + 8);
        *(_QWORD *)(v11 + 8) = v13;
        if (!v43)
          goto LABEL_20;
        do
        {
          v44 = __ldaxr(v43);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v43));
        if (!v45)
        {
          atomic_store(1u, v43);
          WTF::fastFree((WTF *)v43, v7);
        }
        v13 = *(_QWORD *)(v11 + 8);
        if (v13)
        {
LABEL_20:
          v46 = v5;
          do
            v14 = __ldaxr((unsigned int *)v13);
          while (__stlxr(v14 + 1, (unsigned int *)v13));
          v47 = (unsigned int *)v13;
          v15 = *(_QWORD *)(v13 + 8);
          if (v15)
          {
            v50 = &v47;
            ++*(_DWORD *)(v15 + 548);
            v16 = *(_QWORD *)(v15 + 488);
            if (!v16
              || !*(_QWORD *)(v16 + 8)
              || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v15 + 464), (uint64_t *)&v50, (uint64_t)&v48), v47)&& (v15 = *((_QWORD *)v47 + 1)) != 0)
            {
              if ((*(_WORD *)(v15 + 557) & 0x400) != 0)
              {
                if ((*(_BYTE *)(v15 + 344) & 1) == 0)
                {
                  WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v15 + 160));
                  *(_BYTE *)(v15 + 344) |= 1u;
                }
                if ((*(_BYTE *)(v15 + 168) & 2) != 0)
                {
                  if (v47)
                  {
                    v7 = (_QWORD *)*((_QWORD *)v47 + 1);
                    if (v7[48])
                    {
                      v17 = *(_QWORD *)(*((_QWORD *)this + 9) + 8);
                      *(_DWORD *)(v17 + 24) += 2;
                      WebCore::CachedResourceClientWalker<WebCore::CachedImageClient>::CachedResourceClientWalker((uint64_t *)&v48, (uint64_t)v7);
                      do
                      {
                        v18 = WebCore::CachedResourceClientWalker<WebCore::CachedImageClient>::next(&v48);
                        v20 = v18;
                      }
                      while (v18
                           && (*(unsigned int (**)(unsigned int *, uint64_t))(*(_QWORD *)v18 + 72))(v18, v17) != 1);
                      v21 = v49;
                      v49 = 0;
                      if (v21)
                      {
                        v23 = (WTF **)((char *)v21 + 8);
                        v22 = *(unsigned int *)v21;
                        if ((_DWORD)v22)
                        {
                          v24 = 8 * v22;
                          do
                          {
                            v25 = *v23;
                            *v23 = 0;
                            if (v25)
                            {
                              if (*(_DWORD *)v25 == 1)
                                WTF::fastFree(v25, v19);
                              else
                                --*(_DWORD *)v25;
                            }
                            ++v23;
                            v24 -= 8;
                          }
                          while (v24);
                        }
                        WTF::fastFree(v21, v19);
                      }
                      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v48, v19);
                      if (*(_DWORD *)(v17 + 24) == 2)
                      {
                        if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v17, v7);
                      }
                      else
                      {
                        *(_DWORD *)(v17 + 24) -= 2;
                      }
                      v5 = v46;
                      if (v20)
                      {
                        v26 = 16;
                        v27 = *(unsigned int *)(a2 + 12);
                        if ((_DWORD)v27 == *(_DWORD *)(a2 + 8))
                        {
                          v28 = v27 + (v27 >> 2);
                          if (v28 >= 0x10)
                            v26 = v28 + 1;
                          if (v26 <= v27 + 1)
                            v29 = v27 + 1;
                          else
                            v29 = v26;
                          if (v29 >> 29)
                          {
                            __break(0xC471u);
                            return;
                          }
                          v30 = *(WTF **)a2;
                          v32 = (unsigned int **)WTF::fastMalloc((WTF *)(8 * v29));
                          *(_DWORD *)(a2 + 8) = v29;
                          *(_QWORD *)a2 = v32;
                          if ((_DWORD)v27)
                          {
                            v33 = (unsigned int **)((char *)v30 + 8 * v27);
                            v34 = (unsigned int **)v30;
                            do
                            {
                              v35 = *v34;
                              if (*v34)
                              {
                                do
                                  v36 = __ldaxr(v35);
                                while (__stlxr(v36 + 1, v35));
                                *v32 = v35;
                                v37 = *((_QWORD *)v35 + 1);
                                if (v37)
                                {
                                  v50 = v32;
                                  ++*(_DWORD *)(v37 + 548);
                                  v38 = *(_QWORD *)(v37 + 488);
                                  if (v38)
                                  {
                                    if (*(_QWORD *)(v38 + 8))
                                      WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v37 + 464), (uint64_t *)&v50, (uint64_t)&v48);
                                  }
                                }
                              }
                              else
                              {
                                *v32 = 0;
                              }
                              WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v34, v31);
                              ++v32;
                              ++v34;
                            }
                            while (v34 != v33);
                            v32 = *(unsigned int ***)a2;
                          }
                          if (v30)
                          {
                            if (v32 == (unsigned int **)v30)
                            {
                              v32 = 0;
                              *(_QWORD *)a2 = 0;
                              *(_DWORD *)(a2 + 8) = 0;
                            }
                            WTF::fastFree(v30, v31);
                          }
                          v41 = *(unsigned int *)(a2 + 12);
                          if (v47)
                            v42 = (WebCore::CachedResource *)*((_QWORD *)v47 + 1);
                          else
                            v42 = 0;
                          WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v32[v41], v42);
                          v40 = v41 + 1;
                        }
                        else
                        {
                          if (v47)
                            v39 = (WebCore::CachedResource *)*((_QWORD *)v47 + 1);
                          else
                            v39 = 0;
                          WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)(*(_QWORD *)a2 + 8 * v27), v39);
                          v40 = v27 + 1;
                        }
                        *(_DWORD *)(a2 + 12) = v40;
                        v5 = v46;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
LABEL_11:
          v47 = 0;
        }
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v47, v7);
        while (1)
        {
          v8 += 2;
          if (v8 == v9)
            break;
          if ((unint64_t)(*v8 + 1) > 1)
            goto LABEL_17;
        }
        v8 = v9;
LABEL_17:
        ;
      }
      while (v8 != v5);
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (!result)
    return 0;
  v1 = *((unsigned int *)result - 1);
  v2 = &result[2 * v1];
  if (!*((_DWORD *)result - 3))
    return &result[2 * v1];
  if ((_DWORD)v1)
  {
    v3 = 16 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v3 -= 16;
      if (!v3)
        return v2;
    }
  }
  return result;
}

void WebCore::CachedImage::CachedImageObserver::imageFrameAvailable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  void *v22;
  int i;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int j;
  uint64_t v32;
  WTF *v34;
  WTF **v35;
  uint64_t v36;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  WTF **v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  WTF **v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int **v62;
  unsigned int *v63;
  WTF *v64;

  v8 = a2;
  v9 = a1;
  v10 = *(_QWORD *)(a1 + 24);
  if (!v10)
  {
    v11 = 0;
    v12 = 0;
LABEL_3:
    v13 = v11;
    v11 = v10 + 8 * v12;
    goto LABEL_4;
  }
  v12 = *(unsigned int *)(v10 - 4);
  v11 = v10 + 8 * v12;
  if (!*(_DWORD *)(v10 - 12))
    goto LABEL_3;
  if (!(_DWORD)v12)
  {
    v53 = 0;
    v13 = *(_QWORD *)(a1 + 24);
    goto LABEL_91;
  }
  v52 = 8 * v12;
  v13 = *(_QWORD *)(a1 + 24);
  while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
  {
    v13 += 8;
    v52 -= 8;
    if (!v52)
    {
      v13 = v11;
      break;
    }
  }
LABEL_4:
  if (!v10)
  {
    v14 = 0;
    goto LABEL_6;
  }
  v53 = *(unsigned int *)(v10 - 4);
LABEL_91:
  v14 = v10 + 8 * v53;
LABEL_6:
  v60 = v14;
  if (v14 != v13)
  {
    while (!*(_QWORD *)(*(_QWORD *)v13 + 8))
    {
      v57 = v13 + 8;
      v13 = v11;
      if (v57 != v11)
      {
        v13 = v57;
        while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
        {
          v13 += 8;
          if (v13 == v11)
          {
            v13 = v11;
            break;
          }
        }
      }
      if (v13 == v60)
      {
        v13 = v60;
        break;
      }
    }
  }
  if (v10)
    v10 += 8 * *(unsigned int *)(v10 - 4);
  if (v13 != v10)
  {
    v59 = v10;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)v13 + 8);
      v16 = *(unsigned int **)(v15 + 8);
      if (v16)
        goto LABEL_123;
      v16 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v16 = 1;
      *((_QWORD *)v16 + 1) = v15;
      v54 = *(unsigned int **)(v15 + 8);
      *(_QWORD *)(v15 + 8) = v16;
      if (!v54)
        goto LABEL_123;
      do
      {
        v50 = __ldaxr(v54);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v54));
      if (!v51)
      {
        atomic_store(1u, v54);
        WTF::fastFree((WTF *)v54, a2);
      }
      v16 = *(unsigned int **)(v15 + 8);
      if (v16)
      {
LABEL_123:
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 + 1, v16));
        v61 = v16;
        v18 = *((_QWORD *)v16 + 1);
      }
      else
      {
        v18 = 0;
        v61 = 0;
      }
      v62 = &v61;
      ++*(_DWORD *)(v18 + 548);
      v19 = *(_QWORD *)(v18 + 488);
      if (v19 && *(_QWORD *)(v19 + 8))
      {
        WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v18 + 464), (uint64_t *)&v62, (uint64_t)&v63);
        v16 = v61;
      }
      if (v16)
        v20 = *((_QWORD *)v16 + 1);
      else
        v20 = 0;
      if (*(void **)(v20 + 688) != v8)
        goto LABEL_65;
      WebCore::CachedResourceClientWalker<WebCore::CachedImageClient>::CachedResourceClientWalker((uint64_t *)&v63, v20);
      v21 = WebCore::CachedResourceClientWalker<WebCore::CachedImageClient>::next(&v63);
      if ((a3 & 1) != 0)
      {
        for (i = 2; v21; v21 = WebCore::CachedResourceClientWalker<WebCore::CachedImageClient>::next(&v63))
        {
          if ((*(unsigned int (**)(unsigned int *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 64))(v21, v20, 1, a4) == 1)i = 1;
        }
      }
      else
      {
        if (!v21)
          goto LABEL_51;
        i = 2;
        do
        {
          ++*(_DWORD *)(v20 + 672);
          v24 = *((_QWORD *)v21 + 1);
          if (v24)
          {
            if (*(_QWORD *)(v24 + 8))
            {
              v25 = *(_QWORD *)(v20 + 664);
              if (v25)
              {
                v26 = *(_DWORD *)(v25 - 8);
                v27 = (~(v24 << 32) + v24) ^ ((unint64_t)(~(v24 << 32) + v24) >> 22);
                v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
                v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
                v30 = v26 & ((v29 >> 31) ^ v29);
                for (j = 1; ; ++j)
                {
                  v32 = *(_QWORD *)(v25 + 8 * v30);
                  if (!v32)
                    break;
                  if (v32 != -1 && v32 == v24)
                  {
                    if ((*(unsigned int (**)(unsigned int *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v21 + 64))(v21, v20, 0, a4) == 1)i = 1;
                    break;
                  }
                  v30 = (v30 + j) & v26;
                }
              }
            }
          }
          v21 = WebCore::CachedResourceClientWalker<WebCore::CachedImageClient>::next(&v63);
        }
        while (v21);
      }
      if (i == 2 && (_DWORD)a3 != 0)
      {
        WebCore::CachedImage::protectedImage((WebCore::CachedImage *)v20, (unsigned int **)&v62);
        v55 = (unsigned int *)v62;
        (*((void (**)(unsigned int **))*v62 + 33))(v62);
        if (v55[2] == 1)
          (*(void (**)(unsigned int *))(*(_QWORD *)v55 + 8))(v55);
        else
          --v55[2];
      }
LABEL_51:
      if ((_DWORD)a5 != 1)
      {
        v38 = a4;
        v39 = v8;
        v40 = a3;
        v41 = a5;
        v42 = *(WTF ***)(v20 + 664);
        if (!v42)
        {
          LODWORD(v43) = 0;
          *(_DWORD *)(v20 + 672) = 0;
          goto LABEL_54;
        }
        *(_QWORD *)(v20 + 664) = 0;
        v36 = *((unsigned int *)v42 - 1);
        if ((_DWORD)v36)
        {
          v35 = v42;
          do
          {
            v34 = *v35;
            if (*v35 != (WTF *)-1)
            {
              *v35 = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 1)
                  WTF::fastFree(v34, v22);
                else
                  --*(_DWORD *)v34;
              }
            }
            ++v35;
            --v36;
          }
          while (v36);
        }
        WTF::fastFree((WTF *)(v42 - 2), v22);
        v43 = *(_QWORD *)(v20 + 664);
        *(_DWORD *)(v20 + 672) = 0;
        if (v43)
        {
          LODWORD(v43) = *(_DWORD *)(v43 - 12);
          a5 = v41;
          if (v43 > 0x7FFFFFFE)
            LODWORD(v43) = 0x7FFFFFFF;
        }
        else
        {
LABEL_54:
          a5 = v41;
        }
        a3 = v40;
        *(_DWORD *)(v20 + 676) = 2 * v43;
        v8 = v39;
        a4 = v38;
        v9 = a1;
      }
      v44 = v64;
      v64 = 0;
      if (v44)
      {
        v46 = (WTF **)((char *)v44 + 8);
        v45 = *(unsigned int *)v44;
        if ((_DWORD)v45)
        {
          v47 = 8 * v45;
          do
          {
            v48 = *v46;
            *v46 = 0;
            if (v48)
            {
              if (*(_DWORD *)v48 == 1)
                WTF::fastFree(v48, v22);
              else
                --*(_DWORD *)v48;
            }
            ++v46;
            v47 -= 8;
          }
          while (v47);
        }
        WTF::fastFree(v44, v22);
      }
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v63, v22);
LABEL_65:
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v61, a2);
      v49 = v11;
      if (v13 + 8 != v11)
      {
        v49 = v13 + 8;
        while ((unint64_t)(*(_QWORD *)v49 + 1) <= 1)
        {
          v49 += 8;
          if (v49 == v11)
          {
            v49 = v11;
            break;
          }
        }
      }
      v13 = v60;
      if (v49 != v60)
      {
        v13 = v49;
        if (!*(_QWORD *)(*(_QWORD *)v49 + 8))
        {
          while (1)
          {
            v56 = v13 + 8;
            v13 = v11;
            if (v56 != v11)
            {
              v13 = v56;
              while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
              {
                v13 += 8;
                if (v13 == v11)
                {
                  v13 = v11;
                  break;
                }
              }
            }
            if (v13 == v60)
              break;
            if (*(_QWORD *)(*(_QWORD *)v13 + 8))
              goto LABEL_72;
          }
          v13 = v60;
        }
      }
LABEL_72:
      ++*(_DWORD *)(v9 + 32);
    }
    while (v13 != v59);
  }
}

uint64_t WebCore::RenderElement::imageFrameAvailable(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  WebCore::LocalFrameView *v8;
  uint64_t v9;
  const WebCore::IntRect *v10;
  WTF *v11;
  int isVisibleInDocumentRect;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  void *v16;
  WebCore::RenderView *v18;
  int v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD v24[2];
  WTF *v25[2];

  v8 = *(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40)
                                                           + 8)
                                               + 1944)
                                   + 248);
  ++*((_DWORD *)v8 + 2);
  v24[0] = WebCore::LocalFrameView::windowClipRect(v8);
  v24[1] = v9;
  v25[0] = (WTF *)WebCore::ScrollView::windowToContents((WebCore::Widget **)v8, (const WebCore::IntRect *)v24, v10);
  v25[1] = v11;
  isVisibleInDocumentRect = WebCore::RenderElement::isVisibleInDocumentRect((WebCore::RenderElement *)a1, (const WebCore::IntRect *)v25);
  if (*((_DWORD *)v8 + 2) == 1)
    (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v8 + 8))(v8);
  else
    --*((_DWORD *)v8 + 2);
  if (((isVisibleInDocumentRect | a3 ^ 1) & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2, a4);
  }
  else
  {
    v18 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                  + 1944);
    ++*((_DWORD *)v18 + 4);
    WebCore::RenderView::addRendererWithPausedImageAnimations(v18, (WebCore::RenderElement *)a1, (WebCore::CachedImage *)a2);
    v19 = *((_DWORD *)v18 + 4);
    if (!v19)
    {
      __break(0xC471u);
      JUMPOUT(0x19432F2D8);
    }
    *((_DWORD *)v18 + 4) = v19 - 1;
  }
  if ((*(_BYTE *)(a1 + 45) & 1) == 0)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if (v13)
    {
      if ((*(_WORD *)(v13 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19432F248);
      }
      if ((*(_WORD *)(a2 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(a2 + 720) & 0x10) != 0)
      {
        WebCore::CachedImage::brokenImage(1.0, (uint64_t)v25);
        v21 = (unsigned int *)v25[0];
        if (v25[0])
        {
          v14 = (WTF *)*((_QWORD *)v25[0] + 1);
          v25[0] = 0;
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            atomic_store(1u, v21);
            WTF::fastFree((WTF *)v21, v20);
          }
        }
        else
        {
          v14 = 0;
        }
      }
      else
      {
        v14 = *(WTF **)(a2 + 688);
        if (!v14)
        {
          {
            v14 = (WTF *)WebCore::Image::nullImage(void)::nullImage;
          }
          else
          {
            WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v25);
            v14 = v25[0];
            WebCore::Image::nullImage(void)::nullImage = (uint64_t)v25[0];
          }
        }
      }
      if ((*(unsigned int (**)(WTF *))(*(_QWORD *)v14 + 16))(v14))
      {
        if ((*(_BYTE *)(a1 + 45) & 1) != 0 || (v15 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)) == 0)
        {
          WebCore::Element::dispatchWebKitImageReadyEventForTesting(0);
        }
        else
        {
          if ((*(_WORD *)(v15 + 28) & 8) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19432F268);
          }
          *(_DWORD *)(v15 + 24) += 2;
          WebCore::Element::dispatchWebKitImageReadyEventForTesting((WTF::StringImpl *)v15);
          if (*(_DWORD *)(v15 + 24) == 2)
          {
            if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v15, v16);
          }
          else
          {
            *(_DWORD *)(v15 + 24) -= 2;
          }
        }
      }
    }
  }
  if (isVisibleInDocumentRect)
    return 1;
  else
    return 2;
}

WTF::StringImpl *WebCore::Element::dispatchWebKitImageReadyEventForTesting(WTF::StringImpl *this)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  _DWORD *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 704) & 0x400000000) != 0)
  {
    v1 = this;
    WTF::AtomStringImpl::add();
    WebCore::Event::create(&v4, 1, 1, 0, (uint64_t *)&v5);
    (*(void (**)(WTF::StringImpl *, _DWORD *))(*(_QWORD *)v1 + 48))(v1, v5);
    v3 = v5;
    v5 = 0;
    if (v3)
    {
      if (v3[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      else
        --v3[4];
    }
    this = v4;
    v4 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v2);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

WTF *WebCore::RenderView::addRendererWithPausedImageAnimations(WebCore::RenderView *this, WebCore::RenderElement *a2, WebCore::CachedImage *a3)
{
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int i;
  unsigned int v20;
  uint64_t v21;
  WTF *result;
  unsigned int v23;
  uint64_t v24;
  unsigned int ***v25;
  uint64_t v26;
  unsigned int **v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  WTF *v46;
  void *v47;
  WTF *v48;
  unsigned int **v49;
  unsigned int **v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  WTF *v59;
  void *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  void *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;

  *(_WORD *)((char *)a2 + 69) |= 4u;
  v5 = (uint64_t *)((char *)this + 448);
  v6 = *((_DWORD *)this + 114);
  *((_DWORD *)this + 114) = v6 + 1;
  if (v6 > *((_DWORD *)this + 115))
    WTF::WeakHashMap<WebCore::RenderElement,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((uint64_t)this + 448, a2);
  v7 = *((_QWORD *)a2 + 1);
  if (!v7)
  {
    v7 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = a2;
    v59 = (WTF *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v7;
    if (v59)
    {
      if (*(_DWORD *)v59 == 1)
      {
        WTF::fastFree(v59, a2);
        v7 = *((_QWORD *)a2 + 1);
      }
      else
      {
        --*(_DWORD *)v59;
      }
    }
  }
  v8 = *(_DWORD *)v7;
  *(_DWORD *)v7 += 2;
  v9 = __CFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    WTF::fastFree((WTF *)v7, a2);
  else
    *(_DWORD *)v7 = v10;
  v11 = *v5;
  if (*v5
    || (WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v5, 8u, 0), (v11 = *v5) != 0))
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v14 = 0;
  v15 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = (v17 >> 31) ^ v17;
  for (i = 1; ; ++i)
  {
    v20 = v18 & v13;
    v21 = v11 + 24 * v20;
    result = *(WTF **)v21;
    if (*(_QWORD *)v21 != -1)
      break;
    v14 = v11 + 24 * v20;
LABEL_15:
    v18 = i + v20;
  }
  if (!result)
  {
    if (v14)
    {
      *(_QWORD *)v14 = 0;
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 16) = 0;
      --*(_DWORD *)(*v5 - 16);
      *(_QWORD *)v14 = v7;
    }
    else
    {
      *(_QWORD *)v21 = v7;
      v14 = v11 + 24 * v20;
    }
    v25 = (unsigned int ***)(v14 + 8);
    v26 = *(unsigned int *)(v14 + 20);
    if ((_DWORD)v26)
    {
      v27 = *v25;
      v28 = (uint64_t)&(*v25)[v26];
      do
      {
        v29 = *v27;
        *v27 = 0;
        if (v29)
        {
          do
          {
            v30 = __ldaxr(v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v29));
          if (!v31)
          {
            atomic_store(1u, v29);
            WTF::fastFree((WTF *)v29, a2);
          }
        }
        ++v27;
      }
      while (v27 != (unsigned int **)v28);
    }
    result = (WTF *)*v25;
    if (*v25)
    {
      *(_QWORD *)(v14 + 8) = 0;
      *(_DWORD *)(v14 + 16) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
    }
    *v25 = 0;
    *(_QWORD *)(v14 + 16) = 0;
    v32 = *v5;
    if (*v5)
      v33 = *(_DWORD *)(v32 - 12) + 1;
    else
      v33 = 1;
    *(_DWORD *)(v32 - 12) = v33;
    v34 = *v5;
    if (*v5)
      v35 = *(_DWORD *)(v34 - 12);
    else
      v35 = 0;
    v36 = (*(_DWORD *)(v34 - 16) + v35);
    v37 = *(unsigned int *)(v34 - 4);
    if (v37 > 0x400)
    {
      if (v37 <= 2 * v36)
        goto LABEL_39;
    }
    else if (3 * v37 <= 4 * v36)
    {
      if (!(_DWORD)v37)
      {
        v38 = 8;
LABEL_42:
        result = (WTF *)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v5, v38, (WTF **)v14);
        v14 = (uint64_t)result;
        v34 = *v5;
        if (*v5)
          LODWORD(v37) = *(_DWORD *)(v34 - 4);
        else
          LODWORD(v37) = 0;
        goto LABEL_44;
      }
LABEL_39:
      v38 = (_DWORD)v37 << (6 * *(_DWORD *)(v34 - 12) >= (2 * v37));
      goto LABEL_42;
    }
LABEL_44:
    v24 = v34 + 24 * v37;
    v21 = v14;
    goto LABEL_45;
  }
  if (result != (WTF *)v7)
    goto LABEL_15;
  if ((v12 & 1) != 0)
    v23 = 0;
  else
    v23 = *(_DWORD *)(v11 - 4);
  v24 = v11 + 24 * v23;
  if (*(_DWORD *)v7 == 1)
    result = (WTF *)WTF::fastFree((WTF *)v7, a2);
  else
    --*(_DWORD *)v7;
LABEL_45:
  v39 = *v5;
  if (*v5)
    v39 += 24 * *(unsigned int *)(v39 - 4);
  if (v21 != v39)
  {
    while (!*(_QWORD *)(*(_QWORD *)v21 + 8))
    {
      v68 = v21 + 24;
      v21 = v24;
      if (v68 != v24)
      {
        v21 = v68;
        while ((unint64_t)(*(_QWORD *)v21 + 1) <= 1)
        {
          v21 += 24;
          if (v21 == v24)
          {
            v21 = v24;
            break;
          }
        }
      }
      if (v21 == v39)
      {
        v21 = v39;
        break;
      }
    }
  }
  v40 = *(unsigned int *)(v21 + 20);
  if ((_DWORD)v40)
  {
    v41 = *(_QWORD *)(v21 + 8);
    v42 = *(unsigned int *)(v21 + 20);
    while (!*(_QWORD *)v41 || *(WebCore::CachedImage **)(*(_QWORD *)v41 + 8) != a3)
    {
      v41 += 8;
      if (!--v42)
        goto LABEL_53;
    }
  }
  else
  {
LABEL_53:
    if ((_DWORD)v40 == *(_DWORD *)(v21 + 16))
    {
      v43 = v40 + (v40 >> 2);
      if (v43 >= 0x10)
        v44 = v43 + 1;
      else
        v44 = 16;
      if (v44 <= v40 + 1)
        v45 = v40 + 1;
      else
        v45 = v44;
      if (v45 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19432F8FCLL);
      }
      v46 = *(WTF **)(v21 + 8);
      v48 = (WTF *)WTF::fastMalloc((WTF *)(8 * v45));
      *(_DWORD *)(v21 + 16) = v45;
      *(_QWORD *)(v21 + 8) = v48;
      if ((_DWORD)v40)
      {
        v49 = (unsigned int **)((char *)v46 + 8 * v40);
        v50 = (unsigned int **)v46;
        do
        {
          v51 = *v50;
          *v50 = 0;
          *(_QWORD *)v48 = v51;
          v52 = *v50;
          *v50 = 0;
          if (v52)
          {
            do
            {
              v53 = __ldaxr(v52);
              v54 = v53 - 1;
            }
            while (__stlxr(v54, v52));
            if (!v54)
            {
              atomic_store(1u, v52);
              WTF::fastFree((WTF *)v52, v47);
            }
          }
          v48 = (WTF *)((char *)v48 + 8);
          ++v50;
        }
        while (v50 != v49);
        v48 = *(WTF **)(v21 + 8);
      }
      if (v46)
      {
        if (v48 == v46)
        {
          *(_QWORD *)(v21 + 8) = 0;
          *(_DWORD *)(v21 + 16) = 0;
        }
        WTF::fastFree(v46, v47);
        v48 = *(WTF **)(v21 + 8);
      }
      v57 = *(unsigned int *)(v21 + 20);
      result = (WTF *)*((_QWORD *)a3 + 1);
      if (result)
        goto LABEL_118;
      result = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)result = 1;
      *((_QWORD *)result + 1) = a3;
      v65 = (unsigned int *)*((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = result;
      if (!v65)
        goto LABEL_118;
      do
      {
        v66 = __ldaxr(v65);
        v67 = v66 - 1;
      }
      while (__stlxr(v67, v65));
      if (!v67)
      {
        atomic_store(1u, v65);
        WTF::fastFree((WTF *)v65, v64);
      }
      result = (WTF *)*((_QWORD *)a3 + 1);
      if (result)
      {
LABEL_118:
        do
          v58 = __ldaxr((unsigned int *)result);
        while (__stlxr(v58 + 1, (unsigned int *)result));
      }
      *((_QWORD *)v48 + v57) = result;
    }
    else
    {
      v55 = *(_QWORD *)(v21 + 8);
      result = (WTF *)*((_QWORD *)a3 + 1);
      if (result)
        goto LABEL_119;
      result = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)result = 1;
      *((_QWORD *)result + 1) = a3;
      v61 = (unsigned int *)*((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = result;
      if (!v61)
        goto LABEL_119;
      do
      {
        v62 = __ldaxr(v61);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, v61));
      if (!v63)
      {
        atomic_store(1u, v61);
        WTF::fastFree((WTF *)v61, v60);
      }
      result = (WTF *)*((_QWORD *)a3 + 1);
      if (result)
      {
LABEL_119:
        do
          v56 = __ldaxr((unsigned int *)result);
        while (__stlxr(v56 + 1, (unsigned int *)result));
      }
      *(_QWORD *)(v55 + 8 * v40) = result;
    }
    ++*(_DWORD *)(v21 + 20);
  }
  return result;
}

uint64_t WebCore::CachedImage::CachedImageObserver::allowsAnimation(WebCore::CachedImage::CachedImageObserver *this, const WebCore::Image *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  const WebCore::Image **v19;
  unsigned int *v20;
  void *v21;
  unsigned int *v22;
  WTF *v23;
  const WebCore::Image *v24;
  uint64_t *v25;
  uint64_t v26;
  WTF **v27;
  uint64_t v28;
  WTF *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v38;
  unsigned int *v39;
  unsigned int **v40;
  unsigned int *v41;
  WTF *v42;

  v2 = &qword_1EE2F8000;
  if (!WebCore::Image::gSystemAllowsAnimationControls)
    return 1;
  v5 = *((_QWORD *)this + 3);
  if (!v5)
  {
    v6 = 0;
    v7 = 0;
LABEL_4:
    v8 = v6;
    v6 = v5 + 8 * v7;
    goto LABEL_5;
  }
  v7 = *(unsigned int *)(v5 - 4);
  v6 = v5 + 8 * v7;
  if (!*(_DWORD *)(v5 - 12))
    goto LABEL_4;
  if (!(_DWORD)v7)
  {
    v11 = 0;
    v8 = *((_QWORD *)this + 3);
    goto LABEL_17;
  }
  v10 = 8 * v7;
  v8 = *((_QWORD *)this + 3);
  while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
  {
    v8 += 8;
    v10 -= 8;
    if (!v10)
    {
      v8 = v6;
      break;
    }
  }
LABEL_5:
  if (v5)
  {
    v11 = *(unsigned int *)(v5 - 4);
LABEL_17:
    v9 = v5 + 8 * v11;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  if (v9 != v8)
  {
    while (!*(_QWORD *)(*(_QWORD *)v8 + 8))
    {
      v12 = v8 + 8;
      v8 = v6;
      if (v12 != v6)
      {
        v8 = v12;
        while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
        {
          v8 += 8;
          if (v8 == v6)
          {
            v8 = v6;
            break;
          }
        }
      }
      if (v8 == v9)
      {
        v8 = v9;
        if (!v5)
          goto LABEL_26;
        goto LABEL_83;
      }
    }
  }
  if (v5)
LABEL_83:
    v13 = v5 + 8 * *(unsigned int *)(v5 - 4);
  else
LABEL_26:
    v13 = 0;
  if (v8 != v13)
  {
    v38 = v13;
    do
    {
      v14 = *(_QWORD *)(*(_QWORD *)v8 + 8);
      v15 = *(unsigned int **)(v14 + 8);
      if (v15)
        goto LABEL_86;
      v15 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v15 = 1;
      *((_QWORD *)v15 + 1) = v14;
      v33 = *(unsigned int **)(v14 + 8);
      *(_QWORD *)(v14 + 8) = v15;
      if (!v33)
        goto LABEL_86;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        atomic_store(1u, v33);
        WTF::fastFree((WTF *)v33, v32);
      }
      v15 = *(unsigned int **)(v14 + 8);
      if (v15)
      {
LABEL_86:
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
        v39 = v15;
        v17 = *((_QWORD *)v15 + 1);
      }
      else
      {
        v17 = 0;
        v39 = 0;
      }
      v40 = &v39;
      ++*(_DWORD *)(v17 + 548);
      v18 = *(_QWORD *)(v17 + 488);
      if (v18 && *(_QWORD *)(v18 + 8))
      {
        WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v17 + 464), (uint64_t *)&v40, (uint64_t)&v41);
        v15 = v39;
        if (v39)
        {
LABEL_35:
          v19 = (const WebCore::Image **)*((_QWORD *)v15 + 1);
          goto LABEL_36;
        }
      }
      else if (v15)
      {
        goto LABEL_35;
      }
      v19 = 0;
LABEL_36:
      if (v19[86] == a2)
      {
        if (!*((_BYTE *)v2 + 2865))
        {
          WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v39, v19);
          return 1;
        }
        WebCore::CachedResourceClientWalker<WebCore::CachedImageClient>::CachedResourceClientWalker((uint64_t *)&v41, (uint64_t)v19);
        do
        {
          v20 = WebCore::CachedResourceClientWalker<WebCore::CachedImageClient>::next(&v41);
          v22 = v20;
        }
        while (v20 && ((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v20 + 96))(v20) & 1) != 0);
        v23 = v42;
        v42 = 0;
        if (v23)
        {
          v24 = a2;
          v25 = v2;
          v27 = (WTF **)((char *)v23 + 8);
          v26 = *(unsigned int *)v23;
          if ((_DWORD)v26)
          {
            v28 = 8 * v26;
            do
            {
              v29 = *v27;
              *v27 = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 1)
                  WTF::fastFree(v29, v21);
                else
                  --*(_DWORD *)v29;
              }
              ++v27;
              v28 -= 8;
            }
            while (v28);
          }
          WTF::fastFree(v23, v21);
          v2 = v25;
          a2 = v24;
          v13 = v38;
        }
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v41, v21);
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v39, v30);
        if (!v22)
          return 1;
      }
      else
      {
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v39, v19);
      }
      v31 = v6;
      if (v8 + 8 != v6)
      {
        v31 = v8 + 8;
        while ((unint64_t)(*(_QWORD *)v31 + 1) <= 1)
        {
          v31 += 8;
          if (v31 == v6)
          {
            v31 = v6;
            break;
          }
        }
      }
      v8 = v9;
      if (v31 != v9)
      {
        v8 = v31;
        if (!*(_QWORD *)(*(_QWORD *)v31 + 8))
        {
          while (1)
          {
            v36 = v8 + 8;
            v8 = v6;
            if (v36 != v6)
            {
              v8 = v36;
              while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
              {
                v8 += 8;
                if (v8 == v6)
                {
                  v8 = v6;
                  break;
                }
              }
            }
            if (v8 == v9)
              break;
            v13 = v38;
            if (*(_QWORD *)(*(_QWORD *)v8 + 8))
              goto LABEL_60;
          }
          v8 = v9;
          v13 = v38;
        }
      }
LABEL_60:
      ++*((_DWORD *)this + 8);
    }
    while (v8 != v13);
  }
  return 0;
}

uint64_t WebCore::RenderElement::allowsAnimation(WebCore::RenderElement *this)
{
  char v1;
  uint64_t v2;
  __int16 v3;
  uint64_t result;

  v1 = *((_BYTE *)this + 45);
  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((v1 & 1) != 0)
    return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8)
                                                                              + 528)
                                                                  + 8)
                                                      + 24)
                                          + 8)
                              + 545);
  v3 = *(_WORD *)(v2 + 28);
  if ((v3 & 8) != 0)
  {
    if ((v3 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
      return WebCore::HTMLImageElement::allowsAnimation((WebCore::HTMLImageElement *)v2);
    return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8)
                                                                              + 528)
                                                                  + 8)
                                                      + 24)
                                          + 8)
                              + 545);
  }
  result = 105;
  __break(0xC471u);
  return result;
}

void WebCore::CachedImage::notifyObservers(WebCore::CachedImage *this, const WebCore::IntRect *a2)
{
  unsigned int *v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  WTF **v8;
  uint64_t v9;
  WTF *v10;
  unsigned int *v11;
  WTF *v12;

  WebCore::CachedResourceClientWalker<WebCore::CachedImageClient>::CachedResourceClientWalker((uint64_t *)&v11, (uint64_t)this);
  while (1)
  {
    v4 = WebCore::CachedResourceClientWalker<WebCore::CachedImageClient>::next(&v11);
    if (!v4)
      break;
    (*(void (**)(unsigned int *, WebCore::CachedImage *, const WebCore::IntRect *))(*(_QWORD *)v4 + 48))(v4, this, a2);
  }
  v6 = v12;
  v12 = 0;
  if (v6)
  {
    v8 = (WTF **)((char *)v6 + 8);
    v7 = *(unsigned int *)v6;
    if ((_DWORD)v7)
    {
      v9 = 8 * v7;
      do
      {
        v10 = *v8;
        *v8 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 1)
            WTF::fastFree(v10, v5);
          else
            --*(_DWORD *)v10;
        }
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
    WTF::fastFree(v6, v5);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v11, v5);
}

unsigned int *WebCore::CachedResourceClientWalker<WebCore::CachedImageClient>::next(_QWORD *a1)
{
  unsigned int *v1;
  unint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int i;
  uint64_t v18;

  v1 = (unsigned int *)a1[1];
  if (v1)
  {
    v2 = *v1;
    v3 = a1[2];
    if (v3 >= v2)
    {
      return 0;
    }
    else
    {
      v4 = v1 + 2;
      while (1)
      {
        v5 = v3 + 1;
        a1[2] = v3 + 1;
        if (v2 <= v3)
        {
          __break(0xC471u);
          JUMPOUT(0x19432FFA8);
        }
        v6 = *(_QWORD *)&v4[2 * v3];
        if (v6)
        {
          v7 = *(_QWORD **)(v6 + 8);
          if (v7)
          {
            v8 = *(_QWORD *)(*a1 + 8);
            ++*(_DWORD *)(v8 + 368);
            v9 = v7[1];
            if (v9)
            {
              if (*(_QWORD *)(v9 + 8))
              {
                v10 = *(_QWORD *)(v8 + 360);
                if (v10)
                  break;
              }
            }
          }
        }
LABEL_19:
        v1 = 0;
        v3 = v5;
        if (v5 == v2)
          return v1;
      }
      v11 = v3;
      v12 = *(_DWORD *)(v10 - 8);
      v13 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      for (i = 1; ; ++i)
      {
        v18 = *(_QWORD *)(v10 + 16 * v16);
        if (v18 != -1)
        {
          if (!v18)
            goto LABEL_19;
          if (v18 == v9)
            break;
        }
        v16 = (v16 + i) & v12;
      }
      if ((*(unsigned int (**)(_QWORD *))(*v7 + 32))(v7) != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19432FFC8);
      }
      v1 = *(unsigned int **)&v4[2 * v11];
      if (v1)
        return (unsigned int *)*((_QWORD *)v1 + 1);
    }
  }
  return v1;
}

uint64_t WebCore::CachedImageClient::resourceClientType(WebCore::CachedImageClient *this)
{
  return 1;
}

uint64_t *WebCore::CachedResourceClientWalker<WebCore::CachedImageClient>::CachedResourceClientWalker(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  WTF *v26;
  uint64_t v27;
  WTF *v28;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
    goto LABEL_80;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = a2;
  v30 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  if (!v30)
    goto LABEL_80;
  do
  {
    v31 = __ldaxr(v30);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v30));
  if (!v32)
  {
    atomic_store(1u, v30);
    WTF::fastFree((WTF *)v30, (void *)a2);
  }
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
LABEL_80:
    do
      v5 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v5 + 1, (unsigned int *)v4));
    *a1 = v4;
    v6 = *(_QWORD *)(v4 + 8);
    if (v6)
    {
      v36 = a1;
      ++*(_DWORD *)(v6 + 548);
      v7 = *(_QWORD *)(v6 + 488);
      if (v7)
      {
        if (*(_QWORD *)(v7 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v6 + 464), (uint64_t *)&v36, (uint64_t)&v35);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  v8 = (uint64_t *)(a2 + 360);
  WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(a2 + 360, (void *)a2);
  v10 = *(_QWORD *)(a2 + 360);
  if (v10 && (v11 = *(unsigned int *)(v10 - 12), (_DWORD)v11))
  {
    v12 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v11 + 8));
    *v12 = v11;
    bzero(v12 + 2, 8 * v11);
  }
  else
  {
    v12 = 0;
  }
  a1[1] = (uint64_t)v12;
  a1[2] = 0;
  v13 = *v8;
  if (!*v8)
  {
    v15 = 0;
    v14 = 0;
    goto LABEL_47;
  }
  v14 = *(unsigned int *)(v13 - 4);
  v15 = v13 + 16 * v14;
  if (!*(_DWORD *)(v13 - 12))
  {
LABEL_47:
    v17 = v15;
    v15 = v13 + 16 * v14;
    goto LABEL_17;
  }
  if (!(_DWORD)v14)
  {
    v18 = 0;
    v17 = v13;
    goto LABEL_19;
  }
  v16 = 16 * v14;
  v17 = v13;
  while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
  {
    v17 += 16;
    v16 -= 16;
    if (!v16)
    {
      v17 = v15;
      break;
    }
  }
LABEL_17:
  if (v13)
  {
    v18 = *(unsigned int *)(v13 - 4);
LABEL_19:
    v19 = v13 + 16 * v18;
    goto LABEL_20;
  }
  v19 = 0;
LABEL_20:
  if (v19 != v17)
  {
    while (!*(_QWORD *)(*(_QWORD *)v17 + 8))
    {
      v34 = v17 + 16;
      v17 = v15;
      if (v34 != v15)
      {
        v17 = v34;
        while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
        {
          v17 += 16;
          if (v17 == v15)
          {
            v17 = v15;
            break;
          }
        }
      }
      if (v17 == v19)
      {
        v17 = v19;
        break;
      }
    }
  }
  if (v13)
    v20 = v13 + 16 * *(unsigned int *)(v13 - 4);
  else
    v20 = 0;
  if (v17 != v20)
  {
    v21 = 0;
    do
    {
      v22 = *(_QWORD *)(*(_QWORD *)v17 + 8);
      v23 = *(_QWORD *)(v22 + 8);
      if (!v23)
      {
        v23 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v23 = 1;
        *(_QWORD *)(v23 + 8) = v22;
        v28 = *(WTF **)(v22 + 8);
        *(_QWORD *)(v22 + 8) = v23;
        if (v28)
        {
          if (*(_DWORD *)v28 == 1)
          {
            WTF::fastFree(v28, v9);
            v23 = *(_QWORD *)(v22 + 8);
            if (!v23)
              goto LABEL_28;
          }
          else
          {
            --*(_DWORD *)v28;
          }
        }
      }
      ++*(_DWORD *)v23;
LABEL_28:
      v24 = (unsigned int *)a1[1];
      if (*v24 <= v21)
      {
        __break(0xC471u);
        JUMPOUT(0x1943302BCLL);
      }
      v25 = &v24[2 * v21];
      v26 = (WTF *)*((_QWORD *)v25 + 1);
      *((_QWORD *)v25 + 1) = v23;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
          WTF::fastFree(v26, v9);
        else
          --*(_DWORD *)v26;
      }
      v27 = v15;
      if (v17 + 16 != v15)
      {
        v27 = v17 + 16;
        while ((unint64_t)(*(_QWORD *)v27 + 1) <= 1)
        {
          v27 += 16;
          if (v27 == v15)
          {
            v27 = v15;
            break;
          }
        }
      }
      v17 = v19;
      if (v27 != v19)
      {
        v17 = v27;
        if (!*(_QWORD *)(*(_QWORD *)v27 + 8))
        {
          while (1)
          {
            v33 = v17 + 16;
            v17 = v15;
            if (v33 != v15)
            {
              v17 = v33;
              while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
              {
                v17 += 16;
                if (v17 == v15)
                {
                  v17 = v15;
                  break;
                }
              }
            }
            if (v17 == v19)
              break;
            if (*(_QWORD *)(*(_QWORD *)v17 + 8))
              goto LABEL_39;
          }
          v17 = v19;
        }
      }
LABEL_39:
      ++v21;
      ++*(_DWORD *)(a2 + 368);
    }
    while (v17 != v20);
  }
  return a1;
}

uint64_t WebCore::RenderObject::imageChanged(WebCore::RenderObject *this, WebCore::CachedImage *a2, const WebCore::IntRect *a3)
{
  return (*(uint64_t (**)(WebCore::RenderObject *, WebCore::CachedImage *, const WebCore::IntRect *))(*(_QWORD *)this + 568))(this, a2, a3);
}

WTF::StringImpl *WebCore::RenderBox::imageChanged(WebCore::RenderBox *this, WTF::StringImpl *a2, const WebCore::IntRect *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)();
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD v39[3];
  char v40;
  void *v41;

  v41 = a2;
  v4 = *((_QWORD *)this + 11);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 200) + 8);
  if (v5)
  {
    v26 = a2;
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    if (result == v26)
      goto LABEL_68;
    a2 = v26;
    v4 = *((_QWORD *)this + 11);
  }
  v6 = *(_QWORD *)(v4 + 40);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 216) + 8);
  if (v7)
  {
    v27 = a2;
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    if (result != v27)
    {
      a2 = v27;
      v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
      goto LABEL_3;
    }
LABEL_68:
    v37 = *((_QWORD *)this + 4);
    if (v37 && *(_QWORD *)(v37 + 8))
      return (WTF::StringImpl *)WebCore::RenderObject::repaint((uint64_t)this, 0);
    return result;
  }
LABEL_3:
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                        + 1944)
                            + 248)
                + 480) != 2
    && (*((_BYTE *)this + 21) & 8) != 0)
  {
    v28 = *(_QWORD *)(v6 + 240);
    if (v28)
    {
      v29 = *(_QWORD *)(v28 + 16);
      if (v29)
      {
        v30 = a2;
        v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
        a2 = v30;
        if ((WTF::StringImpl *)v31 == v30)
        {
          v32 = WebCore::RenderBox::ensureShapeOutsideInfo(this, v30);
          v33 = *(_DWORD **)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          if (v33)
          {
            if (v33[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
            else
              --v33[2];
          }
          a2 = v30;
          if ((*((_BYTE *)this + 21) & 8) != 0)
          {
            WebCore::RenderBox::removeFloatingAndInvalidateForLayout(this);
            a2 = v30;
          }
        }
      }
    }
  }
  v40 = 0;
  v39[0] = this;
  v39[1] = &v40;
  v39[2] = &v41;
  v8 = *((_QWORD *)this + 4);
  if (v8)
  {
    if (*(_QWORD *)(v8 + 8))
    {
      v40 = WebCore::RenderBox::repaintLayerRectsForImage(this, a2, *(const WebCore::FillLayer **)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + 8), 1);
      if ((v40 & 1) == 0)
        v40 = WebCore::RenderBox::repaintLayerRectsForImage(this, v41, *(const WebCore::FillLayer **)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 48), 0);
    }
  }
  result = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *(_DWORD *)result += 2;
  v10 = *((_QWORD *)this + 16);
  if (v10 && (v13 = *(unsigned int *)(v10 + 12), (_DWORD)v13))
  {
    v14 = *(uint64_t **)v10;
    v15 = 8 * v13;
    do
    {
      v11 = *v14;
      if ((*(_QWORD *)(*v14 + 16) & 0xF80000000000) == 0x80000000000
        && *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 40) + 592) == result)
      {
        break;
      }
      v11 = 0;
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }
  else
  {
    v11 = 0;
  }
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  if (v11)
    result = (WTF::StringImpl *)WebCore::RenderBox::imageChanged(void const*,WebCore::IntRect const*)::$_0::operator()<WebCore::RenderStyle>((uint64_t)v39, v11);
  if ((*((_BYTE *)this + 21) & 0x80) != 0)
  {
    if ((*((_BYTE *)this + 45) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x194330554);
    }
    v12 = *(_QWORD *)(*((_QWORD *)this + 18) + 256);
    if (v12)
    {
      if (*(_QWORD *)(v12 + 112))
        v16 = WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>::unspecifiedBoolTypeInstance;
      else
        v16 = 0;
      if (v16)
      {
        v34 = v41;
        v35 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 48);
        while (1)
        {
          v36 = *(_QWORD *)(v35 + 16);
          if (v36)
          {
            if ((void *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *, const WebCore::IntRect *))(*(_QWORD *)v36 + 32))(v36, a2, a3) == v34)break;
          }
          v35 = *(_QWORD *)(v35 + 8);
          if (!v35)
            goto LABEL_35;
        }
        if (*(_QWORD *)(v35 + 16))
          WebCore::RenderLayer::contentChanged(*((_QWORD *)this + 18), (const WebCore::RenderObject *)1);
      }
LABEL_35:
      v17 = (WTF::StringImpl *)v41;
      v18 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + 8);
      while (1)
      {
        result = *(WTF::StringImpl **)(v18 + 16);
        if (result)
        {
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *, const WebCore::IntRect *))(*(_QWORD *)result + 32))(result, a2, a3);
          if (result == v17)
            break;
        }
        v18 = *(_QWORD *)(v18 + 8);
        if (!v18)
          return result;
      }
      v19 = *(_QWORD *)(v18 + 16);
      if (v19)
      {
        WebCore::RenderLayer::contentChanged(*((_QWORD *)this + 18), (const WebCore::RenderObject *)2);
        v20 = floorf((*(float (**)(uint64_t, WebCore::RenderBox *, float))(*(_QWORD *)v19 + 120))(v19, this, *(float *)(*((_QWORD *)this + 13) + 184)));
        v22 = 0x7FFFFFFFLL;
        v23 = 0x80000000;
        if (v20 > -2147500000.0)
          v23 = (int)v20;
        if (v20 < 2147500000.0)
          v22 = v23;
        v24 = floorf(v21);
        if (v24 >= 2147500000.0)
        {
          v25 = 0x7FFFFFFF00000000;
        }
        else if (v24 <= -2147500000.0)
        {
          v25 = 0x8000000000000000;
        }
        else
        {
          v25 = (unint64_t)(int)v24 << 32;
        }
        v38 = v25 | v22;
        return (WTF::StringImpl *)WebCore::RenderBox::incrementVisuallyNonEmptyPixelCountIfNeeded((uint64_t)this, (const WebCore::IntSize *)&v38);
      }
    }
  }
  return result;
}

uint64_t WebCore::ImageLoader::imageVisibleInViewport(WebCore::ImageLoader *this, const WebCore::Document *a2)
{
  uint64_t v2;
  uint64_t result;
  WebCore::RenderReplaced *v4;
  _BOOL4 isContentLikelyVisibleInViewport;
  int v6;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (*(const WebCore::Document **)(*(_QWORD *)(v2 + 40) + 8) != a2)
    return 2;
  v4 = (WebCore::RenderReplaced *)(*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL);
  if (!v4)
    return 2;
  if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x19433084CLL);
  }
  if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
    return 2;
  ++*(_DWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
  isContentLikelyVisibleInViewport = WebCore::RenderReplaced::isContentLikelyVisibleInViewport(v4);
  v6 = *((_DWORD *)v4 + 4);
  if (!v6)
    goto LABEL_11;
  if (isContentLikelyVisibleInViewport)
    result = 1;
  else
    result = 2;
  *((_DWORD *)v4 + 4) = v6 - 1;
  return result;
}

void WebCore::RenderImage::imageChanged(WebCore::RenderImage *this, WTF::StringImpl *a2, const WebCore::IntRect *a3, WTF::String *a4, __n128 a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::CachedImage *v31;
  WebCore::Node *v32;
  uint64_t v33;
  WebCore::AXObjectCache *v34;
  WebCore::Element *v35;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3405))
    return;
  if ((*((_BYTE *)this + 23) & 0x60) != 0)
    goto LABEL_61;
  v8 = *((_QWORD *)this + 11);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 48);
  v10 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  if (*(_QWORD *)(v9 + 8))
  {
    while (!*(_QWORD *)(v9 + 16))
    {
      v9 = *(_QWORD *)(v9 + 8);
      if (!v9)
        goto LABEL_8;
    }
    goto LABEL_61;
  }
  if (*(_QWORD *)(v9 + 16))
    v11 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  else
    v11 = 0;
  if (v11)
  {
LABEL_61:
    WebCore::RenderBox::imageChanged(this, a2, a3);
    goto LABEL_12;
  }
LABEL_8:
  v12 = *(_QWORD *)(v8 + 40);
  if (!*(_QWORD *)(*(_QWORD *)(v12 + 216) + 8))
    v10 = 0;
  if (v10 || *(_QWORD *)(v12 + 240))
    goto LABEL_61;
LABEL_12:
  if ((*((_BYTE *)this + 45) & 1) == 0)
  {
    v13 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v13)
    {
      if ((*(_WORD *)(v13 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x194330A24);
      }
      if ((*((_BYTE *)this + 20) & 1) == 0
        && WebCore::RenderImage::shouldCollapseToEmpty(void)const::$_0::operator()((uint64_t)this, a5, (uint64_t)a2, (uint64_t)a3, a4))
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3384) == 1)
        {
LABEL_46:
          WebCore::RenderObject::setNeedsLayout(this, 1);
          goto LABEL_16;
        }
        v27 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
        if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 <= 3)
        {
          if (*(_BYTE *)(v27 + 16))
            goto LABEL_16;
          v28 = v27 + 4;
        }
        else
        {
          if (*(_BYTE *)(v27 + 8))
            goto LABEL_16;
          v28 = v27 + 12;
        }
        if (!*(_BYTE *)(v28 + 4))
          goto LABEL_46;
      }
    }
  }
LABEL_16:
  v14 = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 28) + 72))(*((_QWORD *)this + 28));
  if (!a2 || v14 != a2)
    return;
  v15 = (*(uint64_t (**)(_QWORD, _QWORD, float))(**((_QWORD **)this + 28) + 80))(*((_QWORD *)this + 28), 0, 1.0);
  v16 = *((_WORD *)this + 38);
  if ((v16 & 8) == 0)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                + 1944)
                    + 248);
    v18 = *(_DWORD *)(v17 + 1160);
    if (v18 <= 0x400)
    {
      v20 = (int)v15 >> 6;
      v21 = v15 >> 38;
      if ((int)v15 >> 6 < 0)
        v20 = -v20;
      if ((int)v21 < 0)
        LODWORD(v21) = -(int)v21;
      v22 = v21 * (unint64_t)v20;
      if ((v22 & 0xFFFFFFFF00000000) != 0)
        v23 = 0;
      else
        v23 = v22;
      v24 = __CFADD__(v23, v18);
      v25 = v23 + v18;
      if (v24)
        v25 = -1;
      if ((v22 & 0xFFFFFFFF00000000) != 0)
        v26 = -1;
      else
        v26 = v25;
      *(_DWORD *)(v17 + 1160) = v26;
      v16 = *((_WORD *)this + 38);
    }
    *((_WORD *)this + 38) = v16 | 8;
  }
  if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 28) + 40))(*((_QWORD *)this + 28)))
  {
    v19 = 0;
LABEL_23:
    WebCore::RenderImage::repaintOrMarkForLayout((unint64_t)this, v19, (int *)a3);
    if (WebCore::Document::hasEverCreatedAnAXObjectCache)
    {
      v33 = WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                                           + 40)
                                                                               + 8));
      if (v33)
      {
        v34 = (WebCore::AXObjectCache *)v33;
        v35 = (WebCore::Element *)WebCore::RenderElement::element(this);
        WebCore::AXObjectCache::deferRecomputeIsIgnoredIfNeeded(v34, v35);
      }
    }
    return;
  }
  v29 = *((_QWORD *)this + 27);
  if (!v29
    || !*(_DWORD *)(v29 + 4)
    || !WebCore::Document::hasPendingStyleRecalc(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)
                                                                                               + 8)
                                                                                   + 40)
                                                                       + 8)))
  {
    v30 = *(_QWORD *)(*((_QWORD *)this + 28) + 24);
    if (v30)
      v31 = *(WebCore::CachedImage **)(v30 + 8);
    else
      v31 = 0;
    v19 = WebCore::RenderImage::setImageSizeForAltText(this, v31);
    goto LABEL_23;
  }
  if (WebCore::RenderElement::element(this))
  {
    *((_BYTE *)this + 232) = 1;
    v32 = (WebCore::Node *)WebCore::RenderElement::element(this);
    WebCore::Element::invalidateStyle(v32);
  }
}

uint64_t WebCore::RenderImageResource::imagePtr(WebCore::RenderImageResource *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

void WebCore::RenderImage::repaintOrMarkForLayout(unint64_t a1, int a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  float v21;
  float v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int32x4_t v26;
  const WebCore::FloatRect *v27;
  int v28;
  int v29;
  int v30;
  const WebCore::FloatRect *v31;
  int32x2_t v32;
  float32x4_t v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37[4];
  _DWORD v38[4];
  unint64_t v39;
  unint64_t v40;
  int32x2_t v41[2];
  char v42;
  __int128 v43;
  char v44;

  v6 = (*(uint64_t (**)(_QWORD, uint64_t, float))(**(_QWORD **)(a1 + 224) + 80))(*(_QWORD *)(a1 + 224), 1, *(float *)(*(_QWORD *)(a1 + 104) + 184));
  v7 = WebCore::RenderReplaced::intrinsicSize(a1);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 224) + 40))(*(_QWORD *)(a1 + 224)) & 1) == 0)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 24);
    if (v8)
    {
      if (*(_QWORD *)(v8 + 8))
        *(_QWORD *)(a1 + 200) = v6;
    }
  }
  if (WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a1)
    && (!a2 && v7 == v6
     || (WebCore::RenderReplaced::setNeedsLayoutIfNeededAfterIntrinsicSizeChange((WebCore::RenderReplaced *)a1) & 1) == 0))
  {
    if ((*(_DWORD *)(a1 + 20) & 0x208) == 0x200)
      WebCore::RenderImage::updateInnerContentRect((WebCore::RenderImage *)a1);
    v9 = *(_QWORD *)(a1 + 32);
    if (v9 && *(_QWORD *)(v9 + 8))
    {
      v10 = WebCore::RenderBox::contentBoxRect((WebCore::RenderBox *)a1);
      v39 = v10;
      v40 = v11;
      if (a3)
      {
        v19 = HIDWORD(v11);
        v20 = HIDWORD(v10);
        v21 = (float)a3[1];
        v37[0] = (float)*a3;
        v37[1] = v21;
        v22 = (float)a3[3];
        v37[2] = (float)a3[2];
        v37[3] = v22;
        v23 = v10;
        v24 = v11;
        v25 = (*(uint64_t (**)(_QWORD, _QWORD, float))(**(_QWORD **)(a1 + 224) + 80))(*(_QWORD *)(a1 + 224), 0, 1.0);
        v34 = 0;
        v26.i64[0] = __PAIR64__(v20, v23);
        v26.i64[1] = __PAIR64__(v19, v24);
        v35 = (float)(int)v25 * 0.015625;
        v36 = (float)SHIDWORD(v25) * 0.015625;
        v33 = vmulq_f32(vcvtq_f32_s32(v26), (float32x4_t)vdupq_n_s32(0x3C800000u));
        v38[0] = WebCore::mapRect((WebCore *)v37, (const WebCore::FloatRect *)&v34, (const WebCore::FloatRect *)&v33, v27);
        v38[1] = v28;
        v38[2] = v29;
        v38[3] = v30;
        v41[0] = (int32x2_t)WebCore::enclosingIntRect((WebCore *)v38, v31);
        v41[1] = v32;
        WebCore::LayoutRect::LayoutRect((int8x8_t *)&v43, v41);
        WebCore::LayoutRect::intersect((int *)&v39, (const WebCore::LayoutRect *)&v43);
      }
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944);
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) + 40) + 8) + 3382))
      {
        v13 = *(_QWORD *)(v12 + 248);
        v14 = *(unsigned int *)(v13 + 508);
        if ((_DWORD)v14 && (v14 = *(_QWORD *)(*(_QWORD *)(v13 + 496) + 8 * v14 - 8)) != 0)
        {
          v15 = *(_DWORD *)(v14 + 64);
          LODWORD(v14) = *(_DWORD *)(v14 + 68);
        }
        else
        {
          v15 = 0;
        }
        v16 = __OFADD__((_DWORD)v39, v15);
        v17 = v39 + v15;
        if (v16)
          v17 = (v39 >> 31) + 0x7FFFFFFF;
        v16 = __OFADD__(HIDWORD(v39), (_DWORD)v14);
        v18 = HIDWORD(v39) + v14;
        if (v16)
          v18 = (HIDWORD(v39) >> 31) + 0x7FFFFFFF;
        *(_QWORD *)&v43 = __PAIR64__(v18, v17);
        *((_QWORD *)&v43 + 1) = v40;
        v44 = 1;
        v41[0].i8[0] = 0;
        v42 = 0;
        WebCore::RenderObject::issueRepaint(a1, &v43, 1, 0, (uint64_t)v41);
      }
    }
    if ((*(_BYTE *)(a1 + 21) & 0x80) != 0)
      WebCore::RenderLayer::contentChanged(*(_QWORD *)(a1 + 144), 0);
  }
}

unint64_t WebCore::RenderImageResource::imageSize(uint64_t a1, int a2, float a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  double v12;
  int v13;
  double v14;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
    {
      v7 = *(_QWORD *)(a1 + 16);
      if (v7)
        v8 = *(_QWORD *)(v7 + 8);
      else
        v8 = 0;
      v5 = WebCore::CachedImage::imageSizeForRenderer(v5, v8, a2, a3);
      v3 = HIDWORD(v5);
      v9 = *(_QWORD *)(a1 + 16);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          if ((((*(_BYTE *)(v10 + 52) & 7) == 3) & *(_BYTE *)(v10 + 53)) == 1)
          {
            v11 = *(float *)(v10 + 236);
            v12 = (float)((float)((float)(int)v5 * 0.015625) * v11) * 64.0;
            if (v12 > -2147483650.0)
              v13 = (int)v12;
            else
              v13 = 0x80000000;
            if (v12 < 2147483650.0)
              LODWORD(v5) = v13;
            else
              LODWORD(v5) = 0x7FFFFFFF;
            v14 = (float)((float)((float)(int)v3 * 0.015625) * v11) * 64.0;
            if (v14 >= 2147483650.0)
            {
              v3 = 0x7FFFFFFFLL;
            }
            else if (v14 <= -2147483650.0)
            {
              v3 = 0x80000000;
            }
            else
            {
              v3 = (int)v14;
            }
          }
        }
      }
    }
    else
    {
      v3 = 0;
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  return v5 | (unint64_t)(v3 << 32);
}

uint64_t WebCore::RenderElement::imageVisibleInViewport(WebCore::RenderElement *this, const WebCore::Document *a2)
{
  WebCore::LocalFrameView *v4;
  uint64_t v5;
  const WebCore::IntRect *v6;
  uint64_t v7;
  int isVisibleInDocumentRect;
  _QWORD v9[2];
  _QWORD v10[2];

  if (*(const WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) != a2)
    return 2;
  v4 = *(WebCore::LocalFrameView **)(*((_QWORD *)a2 + 243) + 248);
  ++*((_DWORD *)v4 + 2);
  v9[0] = WebCore::LocalFrameView::windowClipRect(v4);
  v9[1] = v5;
  v10[0] = WebCore::ScrollView::windowToContents((WebCore::Widget **)v4, (const WebCore::IntRect *)v9, v6);
  v10[1] = v7;
  isVisibleInDocumentRect = WebCore::RenderElement::isVisibleInDocumentRect(this, (const WebCore::IntRect *)v10);
  if (*((_DWORD *)v4 + 2) == 1)
    (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v4 + 8))(v4);
  else
    --*((_DWORD *)v4 + 2);
  if (isVisibleInDocumentRect)
    return 1;
  else
    return 2;
}

void WebCore::CachedResourceClientWalker<WebCore::CachedImageClient>::~CachedResourceClientWalker(WebCore::CachedResourceHandleBase *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF **v5;
  uint64_t v6;
  WTF *v7;

  v3 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v5 = (WTF **)((char *)v3 + 8);
    v4 = *(unsigned int *)v3;
    if ((_DWORD)v4)
    {
      v6 = 8 * v4;
      do
      {
        v7 = *v5;
        *v5 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 1)
            WTF::fastFree(v7, a2);
          else
            --*(_DWORD *)v7;
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    WTF::fastFree(v3, a2);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this, a2);
}

BOOL WebCore::RenderReplaced::isContentLikelyVisibleInViewport(WebCore::RenderReplaced *this)
{
  _BOOL8 result;
  WebCore::LocalFrameView *v3;
  uint64_t v4;
  const WebCore::IntRect *v5;
  unint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  signed int v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  int v29;
  _QWORD v30[2];
  char v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;

  result = WebCore::RenderElement::isVisibleIgnoringGeometry(this);
  if (!(_DWORD)result)
    return result;
  v3 = *(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                           + 8)
                                               + 1944)
                                   + 248);
  v33 = WebCore::LocalFrameView::windowClipRect(v3);
  v34 = v4;
  v6 = WebCore::ScrollView::windowToContents((WebCore::Widget **)v3, (const WebCore::IntRect *)&v33, v5);
  v9 = (_DWORD)v6 << 6;
  if ((int)v6 < -33554432)
    v9 = 0x80000000;
  if ((int)v6 <= 0x1FFFFFF)
    v10 = v9;
  else
    v10 = 0x7FFFFFFF;
  v11 = HIDWORD(v6) << 6;
  if (SHIDWORD(v6) < -33554432)
    v11 = 0x80000000;
  if (SHIDWORD(v6) <= 0x1FFFFFF)
    v12 = v11;
  else
    v12 = 0x7FFFFFFF;
  v13 = v7 << 6;
  if (v7 < -33554432)
    v13 = 0x80000000;
  if (v7 <= 0x1FFFFFF)
    v14 = v13;
  else
    v14 = 0x7FFFFFFF;
  v15 = v8 << 6;
  if (v8 < -33554432)
    v15 = 0x80000000;
  if (v8 <= 0x1FFFFFF)
    v16 = v15;
  else
    v16 = 0x7FFFFFFF;
  v30[0] = WebCore::RenderReplaced::replacedContentRect(this);
  v30[1] = v17;
  v31 = 0;
  v32 = 0;
  (*(void (**)(unint64_t *__return_ptr, WebCore::RenderReplaced *, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)this + 472))(&v33, this, v30, 0, 0xC00000000);
  if (!v35)
  {
    __break(0xC471u);
    JUMPOUT(0x194331270);
  }
  if ((int)v34 < 1 || SHIDWORD(v34) <= 0)
  {
    v18 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 <= 3)
    {
      if (!*(_BYTE *)(v18 + 16))
        goto LABEL_54;
      v19 = v18 + 4;
    }
    else
    {
      if (!*(_BYTE *)(v18 + 8))
        goto LABEL_54;
      v19 = v18 + 12;
    }
    if (*(_BYTE *)(v19 + 4))
      goto LABEL_29;
LABEL_54:
    if (v10 <= (int)v33)
    {
      v27 = v10 + v14;
      if (__OFADD__(v10, v14))
        v27 = (v10 >> 31) + 0x7FFFFFFF;
      if (v27 > (int)v33 && v12 <= SHIDWORD(v33))
      {
        v29 = v12 + v16;
        if (__OFADD__(v12, v16))
          v29 = (v12 >> 31) + 0x7FFFFFFF;
        v26 = v29 <= SHIDWORD(v33);
        return !v26;
      }
    }
    return 0;
  }
LABEL_29:
  result = 0;
  if ((int)v34 >= 1)
  {
    v20 = v14 < 1 || v16 < 1;
    if (!v20 && SHIDWORD(v34) >= 1)
    {
      v22 = v33 + v34;
      if (__OFADD__((_DWORD)v33, (_DWORD)v34))
        v22 = (v33 >> 31) + 0x7FFFFFFF;
      if (v10 < v22)
      {
        v23 = v10 + v14;
        if (__OFADD__(v10, v14))
          v23 = (v10 >> 31) + 0x7FFFFFFF;
        if (v23 > (int)v33)
        {
          v24 = HIDWORD(v33) + HIDWORD(v34);
          if (__OFADD__(HIDWORD(v33), HIDWORD(v34)))
            v24 = (HIDWORD(v33) >> 31) + 0x7FFFFFFF;
          if (v12 < v24)
          {
            v25 = v12 + v16;
            if (__OFADD__(v12, v16))
              v25 = (v12 >> 31) + 0x7FFFFFFF;
            v26 = v25 <= SHIDWORD(v33);
            return !v26;
          }
        }
      }
      return 0;
    }
  }
  return result;
}

BOOL WebCore::RenderElement::isVisibleIgnoringGeometry(WebCore::RenderElement *this)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL4 IsOffscreen;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  if (*(_BYTE *)(v1 + 467)
    || (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) != 0
    || (*((_BYTE *)this + 120) & 0x30) != 0)
  {
    return 0;
  }
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 1944) + 248);
  if (*(_QWORD *)(v2 + 40))
  {
    IsOffscreen = WebCore::ScrollView::platformIsOffscreen((id *)v2);
  }
  else if (*(_BYTE *)(v2 + 24))
  {
    IsOffscreen = *(_BYTE *)(v2 + 25) == 0;
  }
  else
  {
    IsOffscreen = 1;
  }
  return !IsOffscreen;
}

uint64_t WebCore::RenderReplaced::setNeedsLayoutIfNeededAfterIntrinsicSizeChange(WebCore::RenderReplaced *this)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  BOOL v7;
  _BOOL4 v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  BOOL v16;

  v2 = 1;
  WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 1, 1);
  v3 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 8);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 <= 3)
  {
    v13 = v3[16];
    v14 = v13 > 0xB || ((1 << v13) & 0x818) == 0;
    v8 = !v14
      && ((v15 = v3[8], v15 <= 0xB) ? (v16 = ((1 << v15) & 0x818) == 0) : (v16 = 1),
          !v16 && v3[40] - 7 >= 4)
      && v3[48] - 11 < 0xFFFFFFFC;
    if ((v13 & 0xFFFFFFF7) == 3 || (v3[48] & 0xF7) == 3)
      goto LABEL_13;
    v9 = v3 + 36;
  }
  else
  {
    v4 = v3[8];
    v5 = v4 > 0xB || ((1 << v4) & 0x818) == 0;
    v8 = !v5
      && ((v6 = v3[16], v6 <= 0xB) ? (v7 = ((1 << v6) & 0x818) == 0) : (v7 = 1), !v7 && v3[24] - 7 >= 4)
      && v3[32] - 11 < 0xFFFFFFFC;
    if ((v4 & 0xFFFFFFF7) == 3 || (v3[32] & 0xF7) == 3)
      goto LABEL_13;
    v9 = v3 + 20;
  }
  if (v8 && (v9[4] & 0xF7) != 3)
  {
    v10 = *((_QWORD *)this + 4);
    if (!v10)
      return 0;
    v11 = *(_QWORD *)(v10 + 8);
    if (!v11 || (*(char *)(v11 + 45) & 0x80000000) == 0 || (*((_BYTE *)this + 21) & 4) != 0)
      return 0;
  }
LABEL_13:
  WebCore::RenderObject::setNeedsLayout(this, 1);
  return v2;
}

uint64_t WebCore::CachedImageClient::allowsAnimation(WebCore::CachedImageClient *this)
{
  return 1;
}

uint64_t WebCore::StyleCachedImage::imageSize(WebCore::StyleCachedImage *this, const WebCore::RenderElement *a2, double a3, double a4, float a5)
{
  float v5;
  uint64_t result;
  uint64_t v9;

  v5 = *(float *)&a3;
  result = WebCore::StyleCachedImage::isRenderSVGResource(this, a2, a3, a4, a5);
  if (!(_DWORD)result)
  {
    v9 = *((_QWORD *)this + 6);
    if (v9)
    {
      result = *(_QWORD *)(v9 + 8);
      if (result)
        return WebCore::CachedImage::imageSizeForRenderer(result, (uint64_t)a2, 0, v5);
    }
  }
  return result;
}

uint64_t WebCore::CachedImage::imageSizeForRenderer(uint64_t a1, uint64_t a2, int a3, float a4)
{
  double v6;
  float v7;
  int v8;
  int v9;
  double v10;
  int v11;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  float v19;
  float v20;
  unint64_t v21;

  v6 = WebCore::CachedImage::imageSizeForRenderer(a1, a2, a3) * 64.0;
  if (v6 > -2147483650.0)
    v8 = (int)v6;
  else
    v8 = 0x80000000;
  if (v6 < 2147483650.0)
    v9 = v8;
  else
    v9 = 0x7FFFFFFF;
  LODWORD(v21) = v9;
  v10 = v7 * 64.0;
  if (v10 >= 2147483650.0)
  {
    v11 = 0x7FFFFFFF;
  }
  else if (v10 <= -2147483650.0)
  {
    v11 = 0x80000000;
  }
  else
  {
    v11 = (int)v10;
  }
  HIDWORD(v21) = v11;
  if (v9 >= 1 && a4 != 1.0 && v11 >= 1)
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 688) + 144))(*(_QWORD *)(a1 + 688)))
      v19 = 1.0;
    else
      v19 = a4;
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 688) + 152))(*(_QWORD *)(a1 + 688)))
      v20 = 1.0;
    else
      v20 = a4;
    WebCore::LayoutSize::scale((int *)&v21, v19, v20);
  }
  v13 = HIDWORD(v21);
  if (v21 <= 0x3F)
    v14 = 64;
  else
    v14 = v21;
  v15 = 64;
  if (HIDWORD(v21) > 0x3F)
    v15 = HIDWORD(v21);
  if (SHIDWORD(v21) < 1)
  {
    v14 = v21;
    v15 = HIDWORD(v21);
  }
  if (a4 == 1.0)
  {
    v14 = v21;
    v15 = HIDWORD(v21);
  }
  if ((int)v21 >= 1)
    v16 = v14;
  else
    v16 = v21;
  if ((int)v21 >= 1)
    v13 = v15;
  return v16 | (v13 << 32);
}

uint64_t WebCore::RenderBox::incrementVisuallyNonEmptyPixelCountIfNeeded(uint64_t this, const WebCore::IntSize *a2)
{
  __int16 v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;

  v2 = *(_WORD *)(this + 76);
  if ((v2 & 8) == 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8)
                               + 1944)
                   + 248);
    v4 = *(_DWORD *)(v3 + 1160);
    if (v4 <= 0x400)
    {
      v5 = *(_DWORD *)a2;
      v6 = *((_DWORD *)a2 + 1);
      if (*(int *)a2 < 0)
        v5 = -v5;
      if (v6 < 0)
        v6 = -v6;
      v7 = v6 * (unint64_t)v5;
      if ((v7 & 0xFFFFFFFF00000000) != 0)
        v8 = 0;
      else
        v8 = v7;
      v9 = __CFADD__(v8, v4);
      v10 = v8 + v4;
      if (v9)
        v10 = -1;
      if ((v7 & 0xFFFFFFFF00000000) != 0)
        v11 = -1;
      else
        v11 = v10;
      *(_DWORD *)(v3 + 1160) = v11;
      v2 = *(_WORD *)(this + 76);
    }
    *(_WORD *)(this + 76) = v2 | 8;
  }
  return this;
}

void WebCore::RenderLayer::contentChanged(uint64_t a1, const WebCore::RenderObject *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  BOOL v8;
  WebCore::TileCoverageMap *v9;
  WebCore *v10;
  __n128 v11;
  WebCore::TileCoverageMap *v12;
  _QWORD v13[2];
  int v14;

  v2 = (int)a2;
  if (a2 <= 7 && ((1 << (char)a2) & 0xE8) != 0
    || (*(_QWORD *)(a1 + 256) ? (v8 = (_DWORD)a2 == 0) : (v8 = 0), v8))
  {
    *(_DWORD *)(a1 + 12) |= 8u;
    if ((*(_BYTE *)(a1 + 24) & 4) != 0)
    {
      v3 = *(_QWORD *)(a1 + 40);
      if (v3)
      {
LABEL_7:
        do
        {
          v4 = *(_DWORD *)(v3 + 12);
          if ((v4 & 1) != 0)
            break;
          *(_DWORD *)(v3 + 12) = v4 | 1;
          if ((*(_BYTE *)(v3 + 24) & 4) == 0)
          {
            while (1)
            {
              v3 = *(_QWORD *)(v3 + 40);
              if (!v3)
                goto LABEL_8;
              if ((*(_BYTE *)(v3 + 24) & 0x4A) != 0)
                goto LABEL_24;
            }
          }
          v3 = *(_QWORD *)(v3 + 40);
LABEL_24:
          ;
        }
        while (v3);
      }
    }
    else
    {
      v3 = a1;
      while (1)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          break;
        if ((*(_BYTE *)(v3 + 24) & 0x4A) != 0)
          goto LABEL_7;
      }
    }
LABEL_8:
    *(_DWORD *)(a1 + 12) |= 0x80u;
    if ((*(_BYTE *)(a1 + 24) & 4) != 0)
    {
      v5 = *(_QWORD *)(a1 + 40);
      if (v5)
      {
LABEL_12:
        do
        {
          v6 = *(_DWORD *)(v5 + 12);
          if ((v6 & 2) != 0)
            break;
          *(_DWORD *)(v5 + 12) = v6 | 2;
          if ((*(_BYTE *)(v5 + 24) & 4) == 0)
          {
            while (1)
            {
              v5 = *(_QWORD *)(v5 + 40);
              if (!v5)
                goto LABEL_13;
              if ((*(_BYTE *)(v5 + 24) & 0x4A) != 0)
                goto LABEL_29;
            }
          }
          v5 = *(_QWORD *)(v5 + 40);
LABEL_29:
          ;
        }
        while (v5);
      }
    }
    else
    {
      v5 = a1;
      while (1)
      {
        v5 = *(_QWORD *)(v5 + 40);
        if (!v5)
          break;
        if ((*(_BYTE *)(v5 + 24) & 0x4A) != 0)
          goto LABEL_12;
      }
    }
  }
LABEL_13:
  v7 = *(uint64_t **)(a1 + 256);
  if (v7)
  {
    v13[0] = *(_QWORD *)(a1 + 256);
    v13[1] = 0;
    v14 = 0;
    switch((int)a2)
    {
      case 0:
      case 3:
        if (WebCore::PaintedContentsInfo::isDirectlyCompositedImage((WebCore::PaintedContentsInfo *)v13))
        {
          WebCore::RenderLayerBacking::updateImageContents((uint64_t)v7, (WebCore::PaintedContentsInfo *)v13);
        }
        else
        {
          if (WebCore::PaintedContentsInfo::isUnscaledBitmapOnly((WebCore::PaintedContentsInfo *)v13) != (unsigned __int16)(*(_WORD *)(v7[9] + 177) & 0x1000) >> 12)
            goto LABEL_38;
          if (v2 != 2)
          {
            if (v2 == 1)
              goto LABEL_50;
            goto LABEL_44;
          }
        }
        break;
      case 1:
LABEL_50:
        if (v7[14])
          WebCore::RenderLayer::setNeedsCompositingConfigurationUpdate(v7[1]);
        break;
      case 2:
        return;
      case 5:
      case 7:
LABEL_38:
        v9 = (WebCore::TileCoverageMap *)WebCore::RenderView::compositor(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7[1] + 32) + 24) + 8) + 40) + 8)
                                                                                                 + 1944));
        WebCore::TileCoverageMap::setNeedsUpdate(v9);
        break;
      default:
LABEL_44:
        if ((v2 - 3) <= 1)
        {
          v10 = *(WebCore **)(v7[1] + 32);
          if (*((_BYTE *)v10 + 46) == 13 && WebCore::canvasCompositingStrategy(v10, a2) == 2)
          {
            if (v2 == 3)
            {
              v12 = (WebCore::TileCoverageMap *)WebCore::RenderView::compositor(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7[1] + 32) + 24) + 8) + 40) + 8) + 1944));
              v11.n128_f64[0] = WebCore::TileCoverageMap::setNeedsUpdate(v12);
            }
            (*(void (**)(uint64_t, __n128))(*(_QWORD *)v7[9] + 336))(v7[9], v11);
          }
        }
        break;
    }
  }
}

double WebCore::ScrollingTree::ScrollingTree(WebCore::ScrollingTree *this)
{
  double result;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E34040D0;
  *((_BYTE *)this + 12) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_BYTE *)this + 48) = 0;
  *((_BYTE *)this + 56) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_WORD *)this + 44) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = this;
  *((_BYTE *)this + 224) = 0;
  *((_WORD *)this + 114) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_BYTE *)this + 264) = 0;
  *(_OWORD *)((char *)this + 153) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *(_OWORD *)((char *)this + 205) = 0u;
  *(_QWORD *)((char *)this + 265) = 0x101010101010101;
  *(_WORD *)((char *)this + 273) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_BYTE *)this + 296) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_BYTE *)this + 328) = 1;
  *(_QWORD *)((char *)this + 332) = 0;
  *((_DWORD *)this + 85) = 0;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeCubicBezier(WebCore::CSSPropertyParserHelpers *this, WebCore::CSSParserTokenRange *a2)
{
  __int128 *v4;
  void *v5;
  double v6;
  char v7;
  uint64_t result;
  __int128 *v10;
  __int128 *v11;
  char v12;
  unsigned int v13;
  __int128 *v14;
  int v15;
  void *v16;
  unint64_t v17;
  char v18;
  __int128 *v19;
  __int128 *v20;
  char v21;
  unsigned int v22;
  __int128 *v23;
  int v24;
  void *v25;
  double v26;
  char v27;
  __int128 *v28;
  __int128 *v29;
  char v30;
  unsigned int v31;
  __int128 *v32;
  int v33;
  void *v34;
  unint64_t v35;
  char v36;
  void *v37;
  char v38;
  __int128 *v39;
  __int128 *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v41 = *(_OWORD *)a2;
  v39 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v41, a2);
  v40 = v4;
  v42 = 0;
  v43 = 0;
  v6 = COERCE_DOUBLE(WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::NumberRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::NumberRaw>::consumeAndResolve(&v39, &v43, (uint64_t)&v42, 0x10100000000));
  v7 = (char)v5;
  if (v42)
    WTF::fastFree((WTF *)(v42 - 16), v5);
  if (v43)
    WTF::fastFree((WTF *)(v43 - 16), v5);
  result = 0;
  if (v7)
  {
    if (v6 >= 0.0 && v6 <= 1.0)
    {
      v10 = v39;
      v11 = v39;
      if (v39 >= v40)
      {
        v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v11 & 0x3F) == 0x15)
      {
        if (v39 == v40)
        {
          v13 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v12 = 1;
          {
            v13 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v13;
          }
        }
        else
        {
          v10 = (__int128 *)((char *)v39 + 24);
          v39 = (__int128 *)((char *)v39 + 24);
          v13 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        while (1)
        {
          if (v10 < v40 || (v12 & 1) != 0)
          {
            v14 = v10 >= v40 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v10;
            v15 = *(_DWORD *)v14;
          }
          else
          {
            v13 = v13 & 0xFF000000 | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v13;
            v12 = 1;
            LOBYTE(v15) = v13;
          }
          if ((v15 & 0x3F) != 0x10)
            break;
          v10 = (__int128 *)((char *)v10 + 24);
          v39 = v10;
        }
        v42 = 0;
        v43 = 0;
        v17 = WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::NumberRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::NumberRaw>::consumeAndResolve(&v39, &v43, (uint64_t)&v42, 0x10100000000);
        v18 = (char)v16;
        if (v42)
          WTF::fastFree((WTF *)(v42 - 16), v16);
        if (v43)
          WTF::fastFree((WTF *)(v43 - 16), v16);
        if (v18)
        {
          v19 = v39;
          v20 = v39;
          if (v39 >= v40)
          {
            v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            {
              *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
              *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            }
          }
          if ((*(_DWORD *)v20 & 0x3F) == 0x15)
          {
            if (v39 == v40)
            {
              v22 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              v21 = 1;
              {
                v22 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
                WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v22;
              }
            }
            else
            {
              v19 = (__int128 *)((char *)v39 + 24);
              v39 = (__int128 *)((char *)v39 + 24);
              v22 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            }
            while (1)
            {
              if (v19 < v40 || (v21 & 1) != 0)
              {
                v23 = v19 >= v40 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v19;
                v24 = *(_DWORD *)v23;
              }
              else
              {
                v22 = v22 & 0xFF000000 | 0x1E;
                WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v22;
                v21 = 1;
                LOBYTE(v24) = v22;
              }
              if ((v24 & 0x3F) != 0x10)
                break;
              v19 = (__int128 *)((char *)v19 + 24);
              v39 = v19;
            }
            v42 = 0;
            v43 = 0;
            v26 = COERCE_DOUBLE(WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::NumberRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::NumberRaw>::consumeAndResolve(&v39, &v43, (uint64_t)&v42, 0x10100000000));
            v27 = (char)v25;
            if (v42)
              WTF::fastFree((WTF *)(v42 - 16), v25);
            if (v43)
              WTF::fastFree((WTF *)(v43 - 16), v25);
            result = 0;
            if (!v27 || v26 < 0.0 || v26 > 1.0)
              goto LABEL_69;
            v28 = v39;
            v29 = v39;
            if (v39 >= v40)
            {
              v29 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              {
                *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
                *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
              }
            }
            if ((*(_DWORD *)v29 & 0x3F) == 0x15)
            {
              if (v39 == v40)
              {
                v31 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                v30 = 1;
                {
                  v31 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
                  WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v31;
                }
              }
              else
              {
                v28 = (__int128 *)((char *)v39 + 24);
                v39 = (__int128 *)((char *)v39 + 24);
                v31 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              }
              while (1)
              {
                if (v28 < v40 || (v30 & 1) != 0)
                {
                  v32 = v28 >= v40 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v28;
                  v33 = *(_DWORD *)v32;
                }
                else
                {
                  v31 = v31 & 0xFF000000 | 0x1E;
                  WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v31;
                  v30 = 1;
                  LOBYTE(v33) = v31;
                }
                if ((v33 & 0x3F) != 0x10)
                  break;
                v28 = (__int128 *)((char *)v28 + 24);
                v39 = v28;
              }
              v42 = 0;
              v43 = 0;
              v35 = WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::NumberRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::NumberRaw>::consumeAndResolve(&v39, &v43, (uint64_t)&v42, 0x10100000000);
              if (v42)
              {
                v37 = v34;
                WTF::fastFree((WTF *)(v42 - 16), v34);
                v34 = v37;
              }
              if (v43)
              {
                v38 = (char)v34;
                WTF::fastFree((WTF *)(v43 - 16), v34);
                LOBYTE(v34) = v38;
              }
              if ((_BYTE)v34 && v39 == v40)
              {
                *(_OWORD *)a2 = v41;
                result = WTF::fastCompactMalloc((WTF *)0x28);
                *(_DWORD *)result = 2;
                v36 = *(_BYTE *)(result + 6);
                *(_WORD *)(result + 4) = -30720;
                *(_BYTE *)(result + 6) = v36 & 0xFC;
                *(double *)(result + 8) = v6;
                *(_QWORD *)(result + 16) = v17;
                *(double *)(result + 24) = v26;
                *(_QWORD *)(result + 32) = v35;
                goto LABEL_69;
              }
            }
          }
        }
      }
      result = 0;
    }
  }
LABEL_69:
  *(_QWORD *)this = result;
  return result;
}

unint64_t WebCore::CSSPropertyParserHelpers::consumeNumberRaw(__int128 **a1, unsigned int a2)
{
  unint64_t result;
  void *v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::NumberRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::NumberRaw>::consumeAndResolve(a1, &v8, (uint64_t)&v7, ((unint64_t)a2 << 8) | 0x10100000000);
  if (v7)
  {
    v4 = v3;
    v5 = result;
    WTF::fastFree((WTF *)(v7 - 16), v3);
    v3 = v4;
    result = v5;
  }
  if (v8)
  {
    v6 = result;
    WTF::fastFree((WTF *)(v8 - 16), v3);
    return v6;
  }
  return result;
}

uint64_t WebCore::PlatformKeyboardEvent::setCurrentModifierState(uint64_t result)
{
  if (!byte_1ECE90CF2)
    byte_1ECE90CF2 = 1;
  WebCore::PlatformKeyboardEvent::s_currentModifiers = result;
  return result;
}

uint64_t WebCore::RunLoopObserver::runLoopObserverFired(WebCore::RunLoopObserver *this, __CFRunLoopObserver *a2, _QWORD *a3, void *a4)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
}

WTF::MonotonicTime *WebCore::Settings::setScrollingPerformanceTestingEnabled(WTF::MonotonicTime *this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 86);
  if (((((v2 & 0x4000000000000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *((unsigned int *)this + 180) | ((unint64_t)*((unsigned __int8 *)this + 724) << 32);
    v4 = *((_QWORD *)this + 89);
    v5 = *((_QWORD *)this + 88);
    v6 = *((_QWORD *)this + 87);
    v7 = *((_QWORD *)this + 85);
    v8 = *((_QWORD *)this + 84);
    v9 = 0x4000000000000000;
    if (!a2)
      v9 = 0;
    *((_QWORD *)this + 83) = *((_QWORD *)this + 83);
    *((_QWORD *)this + 84) = v8;
    *((_QWORD *)this + 87) = v6;
    *((_QWORD *)this + 88) = v5;
    *((_QWORD *)this + 85) = v7;
    *((_QWORD *)this + 86) = v2 & 0xBFFFFFFFFFFFFFFFLL | v9;
    *((_QWORD *)this + 89) = v4;
    *((_DWORD *)this + 180) = v3;
    *((_BYTE *)this + 724) = BYTE4(v3);
    return WebCore::SettingsBase::scrollingPerformanceTestingEnabledChanged(this);
  }
  return this;
}

uint64_t *WebCore::RemoteMediaPlayerSupport::setRegisterRemotePlayerCallback(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((byte_1ECE83C51 & 1) != 0)
  {
    v1 = qword_1ECE83C58;
    v2 = *result;
    *result = 0;
    qword_1ECE83C58 = v2;
    if (v1)
      return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  else
  {
    byte_1ECE83C51 = 1;
    v3 = *result;
    *result = 0;
    qword_1ECE83C58 = v3;
  }
  return result;
}

WebCore::IOSurfacePool *WebCore::IOSurfacePool::create@<X0>(WebCore::IOSurfacePool **a1@<X8>)
{
  WebCore::IOSurfacePool *v3;
  WebCore::IOSurfacePool *result;

  v3 = (WebCore::IOSurfacePool *)WTF::fastMalloc((WTF *)0x80);
  result = WebCore::IOSurfacePool::IOSurfacePool(v3);
  *a1 = result;
  return result;
}

WebCore::IOSurfacePool *WebCore::IOSurfacePool::IOSurfacePool(WebCore::IOSurfacePool *this)
{
  WTF::RunLoop::TimerBase *v2;
  WTF::RunLoop *v3;

  *(_DWORD *)this = 1;
  *((_BYTE *)this + 4) = 0;
  v2 = (WebCore::IOSurfacePool *)((char *)this + 8);
  v3 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  WTF::RunLoop::Timer::Timer<WebCore::IOSurfacePool>(v2, v3, (uint64_t)this);
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 15) = 0x4000000;
  return this;
}

uint64_t WTF::RunLoop::Timer::Timer<WebCore::IOSurfacePool>(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = off_1E3412358;
  v6[1] = WebCore::IOSurfacePool::collectionTimerFired;
  v6[2] = 0;
  v6[3] = a3;
  result = WTF::RunLoop::TimerBase::TimerBase(a1, a2);
  *(_QWORD *)a1 = off_1E32051C0;
  *((_QWORD *)a1 + 3) = v6;
  return result;
}

__int128 *WebCore::MQ::consumeFeatureName(WebCore::MQ *this, __int128 **a2)
{
  __int128 *result;
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  __int128 *v9;
  int v10;
  _DWORD *v11;
  __int128 *v12;
  WebCore::CSSParserTokenRange *v13;
  WebCore::CSSParserTokenRange *v14;
  WebCore::CSSParserTokenRange *v15;
  WebCore::MQ *v16;
  WebCore::MQ *v17;
  WebCore::MQ *v18;
  _QWORD v19[2];

  result = *a2;
  if (*a2 >= a2[1])
  {
    {
      result = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v15 = (WebCore::CSSParserTokenRange *)a2;
      v18 = this;
      result = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      a2 = (__int128 **)v15;
      this = v18;
    }
  }
  if ((*(_BYTE *)result & 0x3F) == 0)
  {
    v4 = *a2;
    if (*a2 == a2[1])
    {
      v14 = (WebCore::CSSParserTokenRange *)a2;
      v17 = this;
      {
        v5 = *a2;
        v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        v4 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        a2 = (__int128 **)v14;
        this = v17;
        v5 = *(__int128 **)v14;
      }
    }
    else
    {
      v5 = (__int128 *)((char *)v4 + 24);
      *a2 = (__int128 *)((char *)v4 + 24);
    }
    while (1)
    {
      if (v5 >= a2[1])
      {
        v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v12 = v4;
          v13 = (WebCore::CSSParserTokenRange *)a2;
          v16 = this;
          v5 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v4 = v12;
          a2 = (__int128 **)v13;
          this = v16;
        }
      }
      if ((*(_DWORD *)v5 & 0x3F) != 0x10)
        break;
      v5 = (__int128 *)((char *)*a2 + 24);
      *a2 = v5;
    }
    v6 = *((_QWORD *)v4 + 1);
    v9 = v4;
    v7 = *(unsigned int *)v4;
    v8 = *((_DWORD *)v9 + 1);
    v19[0] = v6;
    v19[1] = v8 | (((v7 >> 22) & 1) << 32);
    if (v8 >= 3)
    {
      if (((v7 >> 22) & 1) != 0)
      {
        if (*(_BYTE *)v6 == 45)
        {
          v10 = *(unsigned __int8 *)(v6 + 1);
LABEL_11:
          if (v10 == 45)
            return (__int128 *)WTF::StringView::toAtomString((WTF::StringView *)v19, this);
        }
      }
      else if (*(_WORD *)v6 == 45)
      {
        v10 = *(unsigned __int16 *)(v6 + 2);
        goto LABEL_11;
      }
    }
    return (__int128 *)WTF::StringView::convertToASCIILowercaseAtom((WTF::StringView *)v19);
  }
  v11 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v11 += 2;
  *(_QWORD *)this = v11;
  return result;
}

unint64_t WTF::Vector<std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 88 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0x2E8BA2F)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(_DWORD *)(result + 12);
    v5 = 88 * a2;
    v6 = WTF::fastMalloc((WTF *)(88 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x58;
    *(_QWORD *)v2 = v6;
    if (v4)
    {
      v8 = v6;
      v9 = 88 * v4;
      v10 = v3;
      do
      {
        *(_BYTE *)v8 = 0;
        *(_DWORD *)(v8 + 80) = -1;
        v11 = *((unsigned int *)v10 + 20);
        if ((_DWORD)v11 != -1)
        {
          ((void (*)(char *, uint64_t, WTF *))off_1E33995A0[v11])(&v13, v8, v10);
          *(_DWORD *)(v8 + 80) = v11;
          v12 = *((unsigned int *)v10 + 20);
          if ((_DWORD)v12 != -1)
            ((void (*)(char *, WTF *))off_1E3399588[v12])(&v14, v10);
        }
        *((_DWORD *)v10 + 20) = -1;
        v8 += 88;
        v10 = (WTF *)((char *)v10 + 88);
        v9 -= 88;
      }
      while (v9);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void WebCore::MQ::Feature::~Feature(WebCore::MQ::Feature *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;

  if (*((_BYTE *)this + 56))
  {
    v3 = (_DWORD *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v3)
    {
      if (*v3 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
      else
        *v3 -= 2;
    }
  }
  if (*((_BYTE *)this + 32))
  {
    v4 = (_DWORD *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v4)
    {
      if (*v4 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, a2);
      else
        *v4 -= 2;
    }
  }
  v5 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  uint64_t result;
  int *v5;

  result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
  if (result < 0x10000)
  {
    v5 = 0;
    goto LABEL_4;
  }
  if ((unsigned __int16)result < 0x48Eu)
  {
    v5 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v5 += 2;
LABEL_4:
    *a3 = v5;
    return result;
  }
  result = 92;
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WebCore::CSSParserImpl::consumeNamespaceRule(_QWORD *a1, __int128 *a2, __int128 *a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  __int128 *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  WTF::StringImpl *v11;
  __int128 *v12;
  __int128 *v13;

  v12 = a2;
  v13 = a3;
  v11 = 0;
  if (a3 <= a2)
  {
    a2 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)a2 & 0x3F) == 0)
  {
    v7 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace(&v12);
    v8 = *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32);
    v10[0] = *((_QWORD *)v7 + 1);
    v10[1] = v8;
    WTF::StringView::toAtomString((WTF::StringView *)v10, &v11);
  }
  WebCore::consumeStringOrURI((uint64_t)v10, &v12);
  v5 = (WTF::StringImpl *)v10[0];
  if (v10[0] && v12 == v13)
  {
    WebCore::StyleRuleNamespace::create((WebCore::StyleRuleNamespace *)&v11, (const WTF::AtomString *)v10, &v9);
    v5 = (WTF::StringImpl *)v10[0];
    *a1 = v9;
  }
  else
  {
    *a1 = 0;
  }
  v10[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::consumeStringOrURI(uint64_t this, __int128 **a2)
{
  _QWORD *v3;
  __int128 *v4;
  int v5;
  __int128 *v7;
  unint64_t v8;
  WTF::StringView *v9;
  __int128 *v10;
  unint64_t v11;
  _QWORD v12[2];
  __int128 *v13;
  __int128 *v14;

  v3 = (_QWORD *)this;
  v4 = *a2;
  if (*a2 >= a2[1])
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v5 = *(_DWORD *)v4 & 0x3F;
  if (v5 == 28 || v5 == 4)
  {
    v7 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace(a2);
    v8 = *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32);
    v13 = (__int128 *)*((_QWORD *)v7 + 1);
    v14 = (__int128 *)v8;
    v9 = (WTF::StringView *)&v13;
  }
  else
  {
    if (v5 != 1
      || (this = WTF::equalLettersIgnoringASCIICase(*((unsigned __int16 **)v4 + 1), *((unsigned int *)v4 + 1) | ((unint64_t)((*(_DWORD *)v4 >> 22) & 1) << 32), "url", 4uLL), (this & 1) == 0)|| (v13 = WebCore::CSSParserTokenRange::consumeBlock(a2), v14 = v10, this = (uint64_t)WebCore::CSSParserTokenRange::consumeIncludingWhitespace(&v13), (*(_DWORD *)this & 0x3F) == 0x1D)|| v13 != v14)
    {
      *v3 = 0;
      return this;
    }
    v11 = *(unsigned int *)(this + 4) | ((unint64_t)((*(_DWORD *)this >> 22) & 1) << 32);
    v12[0] = *(_QWORD *)(this + 8);
    v12[1] = v11;
    v9 = (WTF::StringView *)v12;
  }
  return WTF::StringView::toAtomString(v9, v3);
}

uint64_t WTF::StringView::toAtomString@<X0>(WTF::StringView *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  if (*((_BYTE *)this + 12))
    result = WTF::AtomStringImpl::add();
  else
    result = WTF::AtomStringImpl::add();
  *a2 = v4;
  return result;
}

uint64_t WebCore::StyleRuleNamespace::create@<X0>(WebCore::StyleRuleNamespace *this@<X0>, const WTF::AtomString *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v7;
  uint64_t result;

  v7 = WTF::fastMalloc((WTF *)0x18);
  result = WebCore::StyleRuleNamespace::StyleRuleNamespace(v7, (_DWORD **)this, (_DWORD **)a2);
  *a3 = result;
  return result;
}

uint64_t WebCore::StyleRuleNamespace::StyleRuleNamespace(uint64_t result, _DWORD **a2, _DWORD **a3)
{
  _DWORD *v3;
  _DWORD *v4;

  *(_DWORD *)result = 1;
  *(_BYTE *)(result + 4) = *(_BYTE *)(result + 4) & 0xC0 | 0xA;
  v3 = *a2;
  if (*a2)
    *v3 += 2;
  *(_QWORD *)(result + 8) = v3;
  v4 = *a3;
  if (*a3)
    *v4 += 2;
  *(_QWORD *)(result + 16) = v4;
  return result;
}

uint64_t WebCore::StyleRuleKeyframes::create@<X0>(WebCore::StyleRuleKeyframes *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _DWORD *v6;

  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)result = 1;
  *(_BYTE *)(result + 4) = *(_BYTE *)(result + 4) & 0xC0 | 7;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v6 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v6 += 2;
  *(_QWORD *)(result + 24) = v6;
  *a2 = result;
  return result;
}

uint64_t WebCore::StyleRuleKeyframes::shrinkToFit(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(unsigned int *)(this + 20);
  if (*(_DWORD *)(this + 16) > v2)
  {
    v3 = this;
    this = *(_QWORD *)(this + 8);
    if ((_DWORD)v2)
    {
      *(_DWORD *)(v3 + 16) = v2;
      this = WTF::fastRealloc((WTF *)this, (void *)(8 * v2));
      *(_QWORD *)(v3 + 8) = this;
    }
    else if (this)
    {
      *(_QWORD *)(v3 + 8) = 0;
      *(_DWORD *)(v3 + 16) = 0;
      return WTF::fastFree((WTF *)this, a2);
    }
  }
  return this;
}

WTF *WebCore::CSSPropertyParserHelpers::consumeFilter@<X0>(__int128 **this@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, int **a4@<X8>)
{
  __int128 *v8;
  int *v9;
  int v10;
  int v11;
  __int128 *v12;
  WebCore::CSSPrimitiveValue *v13;
  __int128 *v14;
  int v15;
  int v16;
  __int128 *v17;
  WebCore::CSSPrimitiveValue *v18;
  int v19;
  double v20;
  int v21;
  WebCore::CSSPrimitiveValue *v22;
  WTF *v23;
  unsigned int v24;
  WTF *v25;
  WTF *result;
  WTF *v29;
  uint64_t v30;
  _DWORD *v31;
  WTF *v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  WebCore::CSSPrimitiveValue *v36;
  __int16 v37;
  int *v38;
  int v39;
  WTF *v40;
  int v41;
  unsigned int v42;
  _BYTE v43[32];
  WTF *v44;
  uint64_t v45;
  _BYTE v46[32];
  WebCore::CSSPrimitiveValue *v47;
  WebCore::CSSPrimitiveValue *v48;
  __int128 *v49;
  __int128 *v50;

  v8 = *this;
  if (*this >= this[1])
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v8 & 0x3F) == 0)
  {
    v35 = *((_DWORD *)v8 + 4);
    if (v35 < 0)
    {
      v35 = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
      *((_DWORD *)v8 + 4) = v35;
    }
    if ((unsigned __int16)v35 == 6)
      return (WTF *)WebCore::CSSPropertyParserHelpers::consumeIdent(this, (WebCore::CSSParserTokenRange *)a2, a4);
  }
  v44 = (WTF *)v46;
  v45 = 4;
  do
  {
    if (!a3)
    {
      WebCore::CSSPropertyParserHelpers::consumeURL(this, (WebCore::CSSParserTokenRange *)a2, &v49);
      v14 = v49;
      if (v49)
        goto LABEL_16;
    }
    v9 = (int *)*this;
    if (*this >= this[1])
    {
      v9 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    v10 = WebCore::CSSParserToken::functionId(v9);
    v11 = v10;
    if (a3)
    {
      if (a3 == 1 && !WebCore::CSSPropertyParserHelpers::isColorFilterFunction(v10))
        goto LABEL_97;
    }
    else if ((v10 - 808) >= 9 && v10 != 462)
    {
      goto LABEL_97;
    }
    v12 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction(this, (WebCore::CSSParserTokenRange *)a2);
    v49 = v12;
    v50 = (__int128 *)a2;
    if (v11 != 816)
    {
      if (v11 == 821)
      {
        if (v12 != (__int128 *)a2)
          goto LABEL_97;
        v37 = 821;
      }
      else
      {
        if (v12 != (__int128 *)a2)
        {
          if (v11 == 815)
          {
            WebCore::CSSPropertyParserHelpers::consumeLength((uint64_t)&v49, 0, 1u, 1, &v48);
          }
          else if (v11 == 811)
          {
            WebCore::CSSPropertyParserHelpers::consumeAngle((uint64_t)&v49, a2[48], 1, 0, &v48);
          }
          else
          {
            WebCore::CSSPropertyParserHelpers::consumePercent((WebCore::CSSCalcValue *)&v49, 1u, &v48);
            v18 = v48;
            if (v48)
              goto LABEL_108;
            WebCore::CSSPropertyParserHelpers::consumeNumber(&v49, (void *)1, &v47);
            v18 = v47;
            v36 = v48;
            v47 = 0;
            v48 = v18;
            if (v36)
            {
              if (*(_DWORD *)v36 == 2)
              {
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v36, (WTF::StringImpl *)a2);
                v38 = (int *)v47;
                v47 = 0;
                if (v38)
                {
                  if (*v38 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v38, (WTF::StringImpl *)a2);
                  else
                    *v38 -= 2;
                }
              }
              else
              {
                *(_DWORD *)v36 -= 2;
              }
              v18 = v48;
            }
            if (v18)
            {
LABEL_108:
              if ((v11 - 810) > 4 || ((1 << (v11 - 42)) & 0x19) == 0)
              {
                v19 = WebCore::CSSPrimitiveValue::primitiveType(v18);
                v20 = v19 == 3 ? 100.0 : 1.0;
                if (WebCore::CSSPrimitiveValue::doubleValue(v48) > v20)
                {
                  v21 = v19 == 3 ? 3 : 1;
                  WebCore::CSSPrimitiveValue::create(v21, (int **)&v47, v20);
                  v22 = v48;
                  v48 = v47;
                  if (v22)
                  {
                    if (*(_DWORD *)v22 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, (WTF::StringImpl *)a2);
                    else
                      *(_DWORD *)v22 -= 2;
                  }
                }
              }
            }
          }
          goto LABEL_13;
        }
        v37 = v11;
      }
      WebCore::CSSFunctionValue::create(v37, (uint64_t *)&v48);
      v14 = (__int128 *)v48;
      if (!v48)
        goto LABEL_97;
      goto LABEL_16;
    }
    WebCore::CSSPropertyParserHelpers::consumeSingleShadow(&v49, (WebCore::CSSParserTokenRange *)a2, 0, 0, &v48);
LABEL_13:
    v13 = v48;
    if (!v48)
      goto LABEL_97;
    if (v49 != v50)
    {
      if (*(_DWORD *)v48 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v48, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v48 -= 2;
LABEL_97:
      *a4 = 0;
      goto LABEL_48;
    }
    v14 = (__int128 *)WTF::fastCompactMalloc((WTF *)0x40);
    *(_DWORD *)v14 = 2;
    v15 = (*((unsigned __int8 *)v14 + 6) << 16) & 0xFC0000;
    *((_DWORD *)v14 + 2) = 1;
    *((_WORD *)v14 + 2) = -7680;
    *((_BYTE *)v14 + 6) = (v15 | 0x10000u) >> 16;
    *((_QWORD *)v14 + 2) = v13;
    *((_WORD *)v14 + 28) = v11;
LABEL_16:
    v49 = v14;
    v16 = HIDWORD(v45);
    if (HIDWORD(v45) == (_DWORD)v45)
    {
      WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>((uint64_t)&v44, (unint64_t)&v49);
    }
    else
    {
      v49 = 0;
      *((_QWORD *)v44 + HIDWORD(v45)) = v14;
      HIDWORD(v45) = v16 + 1;
    }
    v17 = v49;
    v49 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
  while (*this != this[1]);
  v40 = (WTF *)v43;
  v41 = 4;
  v23 = v44;
  if (v44 == (WTF *)v46)
  {
    v24 = HIDWORD(v45);
    memcpy(v43, v46, 8 * HIDWORD(v45));
  }
  else
  {
    v44 = (WTF *)v46;
    v40 = v23;
    v39 = v45;
    v24 = HIDWORD(v45);
    LODWORD(v45) = 4;
    v41 = v39;
  }
  HIDWORD(v45) = 0;
  v42 = v24;
  WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v40, (uint64_t *)&v49);
  *a4 = (int *)v49;
  if (v42)
  {
    v32 = v40;
    v33 = 8 * v42;
    do
    {
      v34 = *(_DWORD **)v32;
      *(_QWORD *)v32 = 0;
      if (v34)
      {
        if (*v34 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, (WTF::StringImpl *)a2);
        else
          *v34 -= 2;
      }
      v32 = (WTF *)((char *)v32 + 8);
      v33 -= 8;
    }
    while (v33);
  }
  v25 = v40;
  if (v43 != (_BYTE *)v40 && v40 != 0)
  {
    v40 = 0;
    v41 = 0;
    WTF::fastFree(v25, a2);
  }
LABEL_48:
  if (HIDWORD(v45))
  {
    v29 = v44;
    v30 = 8 * HIDWORD(v45);
    do
    {
      v31 = *(_DWORD **)v29;
      *(_QWORD *)v29 = 0;
      if (v31)
      {
        if (*v31 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v31, (WTF::StringImpl *)a2);
        else
          *v31 -= 2;
      }
      v29 = (WTF *)((char *)v29 + 8);
      v30 -= 8;
    }
    while (v30);
  }
  result = v44;
  if (v46 != (_BYTE *)v44 && v44 != 0)
  {
    v44 = 0;
    LODWORD(v45) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WebCore::CSSPrimitiveValue::primitiveType(WebCore::CSSPrimitiveValue *this)
{
  __int16 v2;
  int v3;
  uint64_t result;
  _BYTE *v5;

  v2 = *((_WORD *)this + 2);
  v3 = v2 & 0x7F;
  result = 22;
  if ((v3 - 79) >= 2)
  {
    if (v3 == 77)
    {
      return 20;
    }
    else if (v3 != 63)
    {
      result = v2 & 0x7F;
      if ((v2 & 0x7F) == 0x49)
      {
        v5 = *(_BYTE **)(*((_QWORD *)this + 1) + 8);
        if (v5[12] == 1)
        {
          return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v5 + 72))(v5);
        }
        else
        {
          result = 1;
          switch(v5[12])
          {
            case 0:
              return result;
            case 2:
              result = 3;
              break;
            case 3:
              result = 74;
              break;
            case 4:
              result = 75;
              break;
            case 5:
            case 6:
            case 7:
            case 8:
              return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v5 + 72))(v5);
            default:
              result = 0;
              break;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeURL@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  WTF::StringImpl *v6;
  char v7;
  int v8;
  WTF::StringImpl *v9;

  result = WebCore::CSSPropertyParserHelpers::consumeURLRaw(this, a2);
  if (result)
  {
    if ((v5 & 0xFF00000000) != 0)
      WTF::String::String();
    else
      WTF::String::String();
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 2;
    v7 = *(_BYTE *)(result + 6);
    *(_WORD *)(result + 4) = 21;
    *(_BYTE *)(result + 6) = v7 & 0xFC;
    *(_QWORD *)(result + 8) = v9;
    if (v9)
    {
      v8 = *(_DWORD *)v9;
      *(_DWORD *)v9 += 2;
      *a3 = result;
      if (v8)
        *(_DWORD *)v9 = v8;
      else
        return WTF::StringImpl::destroy(v9, v6);
    }
    else
    {
      *a3 = result;
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void WebCore::CSSPropertyParserHelpers::consumeResolution(WebCore::CSSPropertyParserHelpers *this@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  unsigned __int16 *v5;

  v4 = 0;
  v5 = 0;
  WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::ResolutionRaw>::consumeAndResolve((__int128 *)this, &v5, (uint64_t)&v4, 0x10100000100, a2);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), v3);
  if (v5)
    WTF::fastFree((WTF *)(v5 - 8), v3);
}

int *WebCore::CSSPrimitiveValue::create@<X0>(int a1@<W0>, int **a2@<X8>, double a3@<D0>)
{
  char v3;
  unsigned int v6;
  int *result;
  char v9;
  unsigned int v10;
  int *v12;
  int v13;
  unsigned int v14;

  v3 = a1;
  if (a1 != 6)
  {
    if (a1 == 1)
    {
      v14 = (int)a3;
      if ((int)a3 <= 0xFF && *(_QWORD *)&a3 == COERCE__INT64((double)v14))
      {
        result = &WebCore::staticCSSValuePool[4 * v14 + 2064];
        *result += 2;
        goto LABEL_7;
      }
    }
    else if (a1 == 3)
    {
      v10 = (int)a3;
      if ((int)a3 <= 0xFF && *(_QWORD *)&a3 == COERCE__INT64((double)v10))
      {
        result = &WebCore::staticCSSValuePool[4 * v10 + 1040];
        *result += 2;
        goto LABEL_7;
      }
    }
LABEL_6:
    result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *result = 2;
    v9 = *((_BYTE *)result + 6);
    *((_WORD *)result + 2) = v3 & 0x7F;
    *((_BYTE *)result + 6) = v9 & 0xFC;
    *((double *)result + 1) = a3;
LABEL_7:
    *a2 = result;
    return result;
  }
  v6 = (int)a3;
  if ((int)a3 > 0xFF || *(_QWORD *)&a3 != COERCE__INT64((double)v6))
    goto LABEL_6;
  v12 = &WebCore::staticCSSValuePool[4 * v6];
  v13 = v12[16];
  result = v12 + 16;
  *result = v13 + 2;
  *a2 = result;
  return result;
}

uint64_t WebCore::unitCategory(unsigned int a1)
{
  if (a1 > 0x51)
    return 10;
  else
    return byte_1969EDB11[(char)a1];
}

unsigned int *WebCore::compileNodeNodeTypeAttribute@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = 0;
  *(_DWORD *)v3 = 1;
  *a1 = v3;
  *(_QWORD *)(v3 + 20) = -1;
  *(_DWORD *)(v3 + 28) = -1;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E33A95E0;
  result = *(unsigned int **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WebCore::ApplicationCacheStorage *WebCore::ApplicationCacheStorage::ApplicationCacheStorage(WebCore::ApplicationCacheStorage *this, const WTF::String *a2, const WTF::String *a3)
{
  _DWORD *v4;
  _DWORD *v5;

  *(_DWORD *)this = 1;
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *((_QWORD *)this + 1) = v4;
  v5 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v5 += 2;
  *((_QWORD *)this + 2) = v5;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0x7FFFFFFFFFFFFFFFLL;
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 6) = 0x7FFFFFFFFFFFFFFFLL;
  WebCore::SQLiteDatabase::SQLiteDatabase((uint64_t)this + 56);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  return this;
}

uint64_t WebCore::SQLiteDatabase::SQLiteDatabase(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = -1;
  *(_WORD *)(this + 20) = 0;
  *(_BYTE *)(this + 22) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_BYTE *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_BYTE *)(this + 48) = 0;
  *(_DWORD *)(this + 52) = 1;
  *(_QWORD *)(this + 56) = 0;
  return this;
}

{
  *(_DWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = -1;
  *(_WORD *)(this + 20) = 0;
  *(_BYTE *)(this + 22) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_BYTE *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_BYTE *)(this + 48) = 0;
  *(_DWORD *)(this + 52) = 1;
  *(_QWORD *)(this + 56) = 0;
  return this;
}

__int128 *WebCore::CSSFontSelector::addFontFaceRule(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  __int128 *result;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  WTF::StringImpl *v31;
  _DWORD *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::CSSFontFace *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::ScriptExecutionContext *v43;
  WebCore::CSSFontFaceSet *v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  void *v57;
  WTF *v58;
  void *v59;
  WebCore::CSSValue *v60;
  WebCore::CSSPrimitiveValue *v61;
  WebCore::CSSValue *v62;
  uint64_t v63;
  uint64_t v64;
  WebCore::CSSValue *v65;
  WebCore::CSSValue *v66;
  WebCore::CSSValue *v67;
  uint64_t v68;
  __int128 v69;

  if (!*(_BYTE *)(a1 + 173))
  {
    v19 = *(_QWORD *)(a2 + 8);
    WebCore::StyleProperties::getPropertyCSSValue(v19, 8, &v68);
    v21 = (WTF *)v68;
    if (v68 && ((*(unsigned __int16 *)(v68 + 4) | (*(unsigned __int8 *)(v68 + 6) << 16)) & 0x3F800) != 0x1D800)
    {
      v68 = 0;
      if (*(_DWORD *)v21 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v20);
      else
        *(_DWORD *)v21 -= 2;
      v21 = 0;
    }
    else
    {
      v68 = 0;
    }
    WebCore::StyleProperties::getPropertyCSSValue(v19, 16, &v67);
    WebCore::StyleProperties::getPropertyCSSValue(v19, 28, &v66);
    WebCore::StyleProperties::getPropertyCSSValue(v19, 15, &v65);
    WebCore::StyleProperties::getPropertyCSSValue(v19, 231, &v64);
    v32 = (_DWORD *)v64;
    if (v64 && ((*(unsigned __int16 *)(v64 + 4) | (*(unsigned __int8 *)(v64 + 6) << 16)) & 0x3F800) != 0x1D800)
    {
      v64 = 0;
      if (*v32 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v32, v31);
      else
        *v32 -= 2;
      v32 = 0;
    }
    else
    {
      v64 = 0;
    }
    WebCore::StyleProperties::getPropertyCSSValue(v19, 286, &v63);
    v33 = (_DWORD *)v63;
    if (v63 && ((*(unsigned __int16 *)(v63 + 4) | (*(unsigned __int8 *)(v63 + 6) << 16)) & 0x3F800) != 0x1D800)
    {
      __break(0xC471u);
      JUMPOUT(0x194333BC8);
    }
    WebCore::StyleProperties::getPropertyCSSValue(v19, 9, &v62);
    WebCore::StyleProperties::getPropertyCSSValue(v19, 126, &v61);
    WebCore::StyleProperties::getPropertyCSSValue(v19, 229, &v60);
    if (v21 && v32 && *((_DWORD *)v21 + 2) && v32[2])
    {
      v35 = *(_BYTE *)(a1 + 172);
      *(_BYTE *)(a1 + 172) = 1;
      v36 = *(_QWORD *)(a1 + 80);
      if (v36 && (v37 = *(_QWORD *)(v36 + 8)) != 0)
        v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v37 - 96) + 136))(v37 - 96);
      else
        v38 = 0;
      v39 = (WebCore::CSSFontFace *)WTF::fastMalloc((WTF *)0xD0);
      v40 = WebCore::CSSFontFace::CSSFontFace((uint64_t)v39, v38, a2, 0, 0);
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(v40 + 96, (_QWORD *)(a1 + 24), (uint64_t)&v69);
      WebCore::CSSFontFace::setFamilies((uint64_t)v39, v21);
      if (v67)
        WebCore::CSSFontFace::setStyle(v39, v67);
      if (v66)
        WebCore::CSSFontFace::setWeight(v39, v66);
      if (v65)
        WebCore::CSSFontFace::setStretch(v39, v65);
      if (v33)
        WebCore::CSSFontFace::setUnicodeRange((uint64_t)v39, (uint64_t)v33);
      if (v62)
        WebCore::CSSFontFace::setFeatureSettings(v39, v62);
      if (v61)
      {
        if (((*((unsigned __int16 *)v61 + 2) | (*((unsigned __int8 *)v61 + 6) << 16)) & 0x3F800) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x194333BE8);
        }
        WebCore::CSSFontFace::setDisplay(v39, v61);
      }
      if (v60)
        WebCore::CSSFontFace::setSizeAdjust(v39, v60);
      v41 = *(_QWORD *)(a1 + 80);
      if (v41)
      {
        v42 = *(_QWORD *)(v41 + 8);
        if (v42)
          v43 = (WebCore::ScriptExecutionContext *)(v42 - 96);
        else
          v43 = 0;
      }
      else
      {
        v43 = 0;
      }
      WebCore::CSSFontFace::appendSources((unsigned __int8 *)v39, (uint64_t)v32, v43, a3);
      v44 = *(WebCore::CSSFontFaceSet **)(a1 + 96);
      v45 = *((_QWORD *)v44 + 8);
      if (v45)
      {
        v46 = *(_DWORD *)(v45 - 8);
        v47 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
        v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
        v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
        v50 = v46 & ((v49 >> 31) ^ v49);
        v51 = *(_QWORD *)(v45 + 16 * v50);
        if (v51 == a2)
        {
LABEL_82:
          v53 = *(_QWORD *)(v45 + 16 * v50 + 8);
          if (v53)
          {
            ++*(_DWORD *)(v53 + 8);
            WebCore::CSSFontFaceSet::remove(v44, (const WebCore::CSSFontFace *)v53);
            v54 = *(_QWORD *)(v53 + 112);
            if (v54)
            {
              v55 = *(_QWORD *)(v54 + 8);
              if (v55)
                WebCore::FontFace::adopt((WebCore::FontFace *)(v55 - 32), v39);
            }
            if (*(_DWORD *)(v53 + 8) == 1)
            {
              WebCore::CSSFontFace::~CSSFontFace((WebCore::CSSFontFace *)v53);
              WTF::fastFree(v58, v59);
            }
            else
            {
              --*(_DWORD *)(v53 + 8);
            }
          }
        }
        else
        {
          v52 = 1;
          while (v51)
          {
            v50 = ((_DWORD)v50 + v52) & v46;
            v51 = *(_QWORD *)(v45 + 16 * v50);
            ++v52;
            if (v51 == a2)
              goto LABEL_82;
          }
        }
      }
      WebCore::CSSFontFaceSet::add(*(WebCore::CSSFontFaceSet **)(a1 + 96), v39);
      ++*(_DWORD *)(a1 + 164);
      if (*((_DWORD *)v39 + 2) == 1)
      {
        WebCore::CSSFontFace::~CSSFontFace(v39);
        WTF::fastFree(v56, v57);
      }
      else
      {
        --*((_DWORD *)v39 + 2);
      }
      *(_BYTE *)(a1 + 172) = v35;
    }
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v60, v34);
      else
        *(_DWORD *)v60 -= 2;
    }
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v61, v34);
      else
        *(_DWORD *)v61 -= 2;
    }
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v62, v34);
        if (!v33)
          goto LABEL_108;
        goto LABEL_103;
      }
      *(_DWORD *)v62 -= 2;
    }
    if (!v33)
      goto LABEL_108;
LABEL_103:
    if (*v33 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v33, v34);
    else
      *v33 -= 2;
LABEL_108:
    if (v32)
    {
      if (*v32 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v32, v34);
      else
        *v32 -= 2;
    }
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v65, v34);
      else
        *(_DWORD *)v65 -= 2;
    }
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v66, v34);
      else
        *(_DWORD *)v66 -= 2;
    }
    result = (__int128 *)v67;
    if (v67)
    {
      if (*(_DWORD *)v67 == 2)
      {
        result = (__int128 *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v67, v34);
        if (!v21)
          return result;
LABEL_124:
        if (*(_DWORD *)v21 == 2)
          return (__int128 *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v34);
        *(_DWORD *)v21 -= 2;
        return result;
      }
      *(_DWORD *)v67 -= 2;
    }
    if (!v21)
      return result;
    goto LABEL_124;
  }
  ++*(_DWORD *)a2;
  v7 = (uint64_t *)(a1 + 136);
  v6 = *(_QWORD *)(a1 + 136);
  if (v6
    || (WTF::HashTable<WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>,WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>>>::rehash((uint64_t *)(a1 + 136), 8u), (v6 = *v7) != 0))
  {
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = (uint64_t *)(v6 + 8 * v12);
  v14 = *v13;
  if (*v13)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == a2)
      {
        if (*(_DWORD *)a2 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(a2, (WTF::StringImpl *)a2);
        else
          --*(_DWORD *)a2;
        goto LABEL_33;
      }
      if (v14 == -1)
        v15 = v13;
      v12 = (v12 + v16) & v8;
      v13 = (uint64_t *)(v6 + 8 * v12);
      v14 = *v13;
      ++v16;
    }
    while (*v13);
    if (v15)
    {
      *v15 = 0;
      --*(_DWORD *)(*v7 - 16);
      v13 = v15;
    }
  }
  *v13 = a2;
  v17 = *v7;
  if (*v7)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v22 = *v7;
  if (*v7)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 > 2 * v24)
      goto LABEL_33;
    goto LABEL_27;
  }
  if (3 * v25 <= 4 * v24)
  {
    if (!(_DWORD)v25)
    {
      v26 = 8;
      goto LABEL_32;
    }
LABEL_27:
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
LABEL_32:
    WTF::HashTable<WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>,WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>>>::rehash((uint64_t *)(a1 + 136), v26);
  }
LABEL_33:
  result = (__int128 *)(a1 + 64);
  *(_QWORD *)&v69 = a2;
  BYTE8(v69) = a3;
  v28 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v28 == *(_DWORD *)(a1 + 72))
  {
    result = (__int128 *)WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v28 + 1, (unint64_t)&v69);
    v28 = *(unsigned int *)(a1 + 76);
    v29 = *(_QWORD *)(a1 + 64);
    v30 = *result;
  }
  else
  {
    v29 = *(_QWORD *)result;
    v30 = v69;
  }
  *(_OWORD *)(v29 + 16 * v28) = v30;
  ++*(_DWORD *)(a1 + 76);
  return result;
}

uint64_t WebCore::CSSFontFaceSet::add(WebCore::CSSFontFaceSet *this, WebCore::CSSFontFace *a2)
{
  uint64_t **v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  _QWORD v55[3];
  char v56;

  v4 = (uint64_t **)((char *)this + 88);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E3397C88;
  v55[0] = v5;
  WTF::WeakHashSet<WTF::Observer<void ()(void)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v4, v55);
  v6 = v55[0];
  v55[0] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)a2 + 96, this, (uint64_t)v55);
  v8 = *((_QWORD *)this + 7);
  if (v8)
  {
    *((_QWORD *)this + 7) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, v7);
  }
  v9 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v9 == -1)
  {
LABEL_68:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_69;
  }
  v55[0] = &v56;
  if (!((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11CSSFontFace13cssConnectionEvE3__0JZNKS9_13cssConnectionEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_22MutableStylePropertiesENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_17StyleRuleFontFaceENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v9])(v55, (char *)a2 + 16))
  {
    v20 = *((unsigned int *)this + 9);
    if ((_DWORD)v20 != *((_DWORD *)this + 8))
    {
      v19 = v20 + 1;
      v29 = *((_QWORD *)this + 3);
      ++*((_DWORD *)a2 + 2);
      *(_QWORD *)(v29 + 8 * v20) = a2;
      goto LABEL_28;
    }
    v21 = v20 + (v20 >> 2);
    if (v21 >= 0x10)
      v22 = v21 + 1;
    else
      v22 = 16;
    if (v22 <= v20 + 1)
      v23 = v20 + 1;
    else
      v23 = v22;
    if (!(v23 >> 29))
    {
      v24 = (void *)*((_QWORD *)this + 3);
      v25 = (void *)WTF::fastMalloc((WTF *)(8 * v23));
      *((_DWORD *)this + 8) = v23;
      *((_QWORD *)this + 3) = v25;
      memcpy(v25, v24, 8 * v20);
      if (v24)
      {
        if (*((void **)this + 3) == v24)
        {
          *((_QWORD *)this + 3) = 0;
          *((_DWORD *)this + 8) = 0;
        }
        WTF::fastFree((WTF *)v24, v26);
      }
      v27 = *((unsigned int *)this + 9);
      v28 = *((_QWORD *)this + 3);
      ++*((_DWORD *)a2 + 2);
      *(_QWORD *)(v28 + 8 * v27) = a2;
      *((_DWORD *)this + 9) = v27 + 1;
      goto LABEL_29;
    }
    goto LABEL_69;
  }
  v10 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v10 + 1;
  v11 = *((unsigned int *)this + 9);
  if ((_DWORD)v11 == *((_DWORD *)this + 8))
  {
    v12 = v11 + (v11 >> 2);
    if (v12 >= 0x10)
      v13 = v12 + 1;
    else
      v13 = 16;
    if (v13 <= v11 + 1)
      v14 = v11 + 1;
    else
      v14 = v13;
    if (!(v14 >> 29))
    {
      v15 = (void *)*((_QWORD *)this + 3);
      v16 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
      *((_DWORD *)this + 8) = v14;
      *((_QWORD *)this + 3) = v16;
      memcpy(v16, v15, 8 * v11);
      if (v15)
      {
        if (*((void **)this + 3) == v15)
        {
          *((_QWORD *)this + 3) = 0;
          *((_DWORD *)this + 8) = 0;
        }
        WTF::fastFree((WTF *)v15, v17);
      }
      goto LABEL_16;
    }
LABEL_69:
    __break(0xC471u);
    JUMPOUT(0x194334048);
  }
LABEL_16:
  v18 = (_QWORD *)(*((_QWORD *)this + 3) + 8 * v10);
  memmove(v18 + 1, v18, 8 * *((unsigned int *)this + 9) - 8 * v10);
  ++*((_DWORD *)a2 + 2);
  *v18 = a2;
  v19 = *((_DWORD *)this + 9) + 1;
LABEL_28:
  *((_DWORD *)this + 9) = v19;
LABEL_29:
  WebCore::CSSFontFaceSet::addToFacesLookupTable(this, a2);
  if (*((unsigned __int8 *)a2 + 138) - 1 <= 1)
  {
    v30 = *((_DWORD *)this + 32);
    *((_DWORD *)this + 32) = v30 + 1;
    if (!v30)
    {
      *((_DWORD *)this + 20) = 0;
      v31 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v31 = off_1E3397C38;
      v55[0] = v31;
      WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 13, v55);
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    }
  }
  v32 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v32 == -1)
    goto LABEL_68;
  v55[0] = &v56;
  result = ((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11CSSFontFace13cssConnectionEvE3__0JZNKS9_13cssConnectionEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_22MutableStylePropertiesENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_17StyleRuleFontFaceENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v32])(v55, (char *)a2 + 16);
  if (!result)
    return result;
  v34 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v34 == -1)
    goto LABEL_68;
  v55[0] = &v56;
  result = ((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11CSSFontFace13cssConnectionEvE3__0JZNKS9_13cssConnectionEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_22MutableStylePropertiesENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_17StyleRuleFontFaceENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v34])(v55, (char *)a2 + 16);
  v35 = result;
  v38 = *((_QWORD *)this + 8);
  v37 = (uint64_t *)((char *)this + 64);
  v36 = v38;
  if (v38
    || (result = WTF::HashTable<WebCore::StyleRuleFontFace *,WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>>,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashMap<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::CSSFontFace *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleRuleFontFace *>>::rehash(v37, 8u), (v36 = *v37) != 0))
  {
    v39 = *(_DWORD *)(v36 - 8);
  }
  else
  {
    v39 = 0;
  }
  v40 = (~(v35 << 32) + v35) ^ ((unint64_t)(~(v35 << 32) + v35) >> 22);
  v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
  v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
  v43 = v39 & ((v42 >> 31) ^ v42);
  v44 = (uint64_t *)(v36 + 16 * v43);
  v45 = *v44;
  if (!*v44)
  {
LABEL_46:
    *v44 = v35;
    v44[1] = (uint64_t)a2;
    v48 = *v37;
    if (*v37)
      v49 = *(_DWORD *)(v48 - 12) + 1;
    else
      v49 = 1;
    *(_DWORD *)(v48 - 12) = v49;
    v50 = *v37;
    if (*v37)
      v51 = *(_DWORD *)(v50 - 12);
    else
      v51 = 0;
    v52 = (*(_DWORD *)(v50 - 16) + v51);
    v53 = *(unsigned int *)(v50 - 4);
    if (v53 > 0x400)
    {
      if (v53 > 2 * v52)
        return result;
    }
    else
    {
      if (3 * v53 > 4 * v52)
        return result;
      if (!(_DWORD)v53)
      {
        v54 = 8;
        return WTF::HashTable<WebCore::StyleRuleFontFace *,WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>>,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashMap<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::CSSFontFace *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleRuleFontFace *>>::rehash(v37, v54);
      }
    }
    v54 = (_DWORD)v53 << (6 * *(_DWORD *)(v50 - 12) >= (2 * v53));
    return WTF::HashTable<WebCore::StyleRuleFontFace *,WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>>,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashMap<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::CSSFontFace *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleRuleFontFace *>>::rehash(v37, v54);
  }
  v46 = 0;
  v47 = 1;
  while (v45 != v35)
  {
    if (v45 == -1)
      v46 = v44;
    v43 = (v43 + v47) & v39;
    v44 = (uint64_t *)(v36 + 16 * v43);
    v45 = *v44;
    ++v47;
    if (!*v44)
    {
      if (v46)
      {
        *v46 = 0;
        v46[1] = 0;
        --*(_DWORD *)(*v37 - 16);
        v44 = v46;
      }
      goto LABEL_46;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::CSSFontFaceSet::addToFacesLookupTable(WTF::StringImpl *this, WebCore::CSSFontFace *a2)
{
  int *v2;
  int v3;
  WTF::StringImpl *v4;
  unsigned int v5;
  uint64_t v6;
  const WebCore::CSSPrimitiveValue **v7;
  WTF::StringImpl *v8;
  WTF *v9;
  WTF::StringImpl *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  WTF::StringImpl *v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  WebCore *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::FontDatabase *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  WebCore::CSSValuePool *v55;
  WebCore::CSSFontFace *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WebCore::CSSFontFace *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  WebCore::CSSFontFaceSource *v69;
  WTF *v70;
  void *v71;
  char *v72;
  WTF *v73;
  uint64_t v74;
  WebCore::CSSFontFace *v75;
  WebCore::CSSFontFace *v76;
  WTF *v77;
  void *v78;
  WTF *v79;
  uint64_t v80;
  WebCore::CSSFontFace **v81;
  uint64_t v82;
  WebCore::CSSFontFace *v83;
  WTF *v84;
  void *v85;
  WTF *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  WebCore::CSSFontFace **v92;
  WebCore::CSSFontFace *v93;
  WTF *v94;
  void *v95;
  uint64_t v96;
  WTF *v97;
  WebCore::CSSFontFace *v98;
  WTF *v99;
  void *v100;
  WTF *v101;
  unint64_t StatusReg;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  _DWORD *v107;
  int v108;
  void **v109;
  int v110;
  WTF *v111;
  WTF::StringImpl *v112;
  char v113;
  WTF::StringImpl *v114;
  WebCore::CSSFontFace *v115;
  WTF *v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  uint64_t v119;

  v2 = (int *)*((_QWORD *)a2 + 4);
  if (v2)
  {
    v3 = *v2;
    *v2 += 2;
    v108 = v2[2];
    v103 = (uint64_t)v2;
    if (v108)
    {
      v4 = this;
      v5 = 0;
      v6 = 0;
      v107 = v2 + 4;
      v104 = (uint64_t *)((char *)this + 48);
      v105 = (uint64_t *)((char *)this + 40);
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (1)
      {
        if (v5 > 3)
        {
          if (*(_DWORD *)(v103 + 8) <= v5)
          {
            __break(0xC471u);
            JUMPOUT(0x19433486CLL);
          }
          v7 = (const WebCore::CSSPrimitiveValue **)(*(_QWORD *)(v103 + 48) + 8 * (v6 - 4));
        }
        else
        {
          v7 = (const WebCore::CSSPrimitiveValue **)&v107[2 * v6];
        }
        if (((*((unsigned __int16 *)*v7 + 2) | (*((unsigned __int8 *)*v7 + 6) << 16)) & 0x3F800) != 0)
        {
LABEL_140:
          __break(0xC471u);
          JUMPOUT(0x19433484CLL);
        }
        this = (WTF::StringImpl *)WebCore::CSSFontFaceSet::familyNameFromPrimitive(&v116, *v7);
        if (!v116)
          goto LABEL_108;
        v112 = v116;
        if ((*((_BYTE *)v116 + 16) & 0x10) != 0)
        {
          v114 = v116;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase();
          this = v112;
          v8 = v118;
          v118 = 0;
          v112 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
            else
              *(_DWORD *)this -= 2;
          }
          v114 = v8;
          if (!v8)
            goto LABEL_108;
        }
        v118 = 0;
        v119 = 0;
        WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v112, v105, (WTF::ASCIICaseInsensitiveHash *)&v114, (uint64_t *)&v118);
        v9 = v118;
        if (HIDWORD(v119))
        {
          v91 = 8 * HIDWORD(v119);
          v92 = (WebCore::CSSFontFace **)v118;
          do
          {
            v93 = *v92;
            *v92 = 0;
            if (v93)
            {
              if (*((_DWORD *)v93 + 2) == 1)
              {
                WebCore::CSSFontFace::~CSSFontFace(v93);
                WTF::fastFree(v94, v95);
              }
              else
              {
                --*((_DWORD *)v93 + 2);
              }
            }
            ++v92;
            v91 -= 8;
          }
          while (v91);
        }
        if (v9)
          WTF::fastFree(v9, a2);
        v10 = v112;
        v11 = (void **)((char *)v112 + 8);
        if (v113)
          break;
        v21 = (_DWORD *)((char *)v112 + 20);
        v22 = *((unsigned int *)v112 + 5);
        v23 = (char *)*((_QWORD *)v112 + 1);
        if ((_DWORD)v22 == *((_DWORD *)v112 + 4))
          goto LABEL_96;
        v24 = &v23[8 * v22];
LABEL_105:
        ++*((_DWORD *)a2 + 2);
        *(_QWORD *)v24 = a2;
        *v21 = v22 + 1;
        this = v114;
        v114 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
          else
            *(_DWORD *)this -= 2;
        }
LABEL_108:
        v5 = v6 + 1;
        v6 = (v6 + 1);
        if (v108 == v5)
        {
          v3 = *(_DWORD *)v103 - 2;
          goto LABEL_133;
        }
      }
      v109 = (void **)((char *)v112 + 8);
      v110 = v6;
      v12 = *((_QWORD *)v4 + 15);
      if (!v12)
        goto LABEL_85;
      v13 = *(_QWORD *)(v12 + 8);
      if (!v13)
        goto LABEL_85;
      v14 = *v104;
      if (*v104)
      {
        v15 = *(_DWORD *)(v14 - 8);
        v16 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)&v114, a2);
        v17 = 0;
        v18 = v114;
        while (1)
        {
          v19 = v16 & v15;
          v20 = *(_QWORD *)(v14 + 24 * (v16 & v15));
          if (v20 != -1)
          {
            if (!v20)
            {
              v13 = *(_QWORD *)(*((_QWORD *)v4 + 15) + 8);
              break;
            }
            if (WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::ASCIICaseInsensitiveHash>::equal<WTF::String,WTF::String>(v20, (uint64_t)v18))
            {
              goto LABEL_85;
            }
          }
          v16 = ++v17 + v19;
        }
      }
      v25 = *(_QWORD *)(v13 + 80);
      if (!v25 || (v26 = *(_QWORD *)(v25 + 8)) == 0)
      {
LABEL_85:
        v21 = (_DWORD *)((char *)v10 + 20);
        v80 = *((unsigned int *)v10 + 5);
        v11 = v109;
        if ((_DWORD)v80)
        {
          v81 = (WebCore::CSSFontFace **)*v109;
          v82 = 8 * v80;
          do
          {
            v83 = *v81;
            *v81 = 0;
            if (v83)
            {
              if (*((_DWORD *)v83 + 2) == 1)
              {
                WebCore::CSSFontFace::~CSSFontFace(v83);
                WTF::fastFree(v84, v85);
              }
              else
              {
                --*((_DWORD *)v83 + 2);
              }
            }
            ++v81;
            v82 -= 8;
          }
          while (v82);
        }
        v86 = (WTF *)*v109;
        LODWORD(v6) = v110;
        if (*v109)
        {
          *((_QWORD *)v10 + 1) = 0;
          *((_DWORD *)v10 + 4) = 0;
          WTF::fastFree(v86, a2);
        }
        v23 = 0;
        v22 = 0;
        *v109 = 0;
        v109[1] = 0;
LABEL_96:
        v87 = v22 + (v22 >> 2);
        if (v87 >= 0x10)
          v88 = v87 + 1;
        else
          v88 = 16;
        if (v88 <= v22 + 1)
          v89 = v22 + 1;
        else
          v89 = v88;
        if (v89 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x194334874);
        }
        v90 = (void *)WTF::fastMalloc((WTF *)(8 * v89));
        *((_DWORD *)v10 + 4) = v89;
        *((_QWORD *)v10 + 1) = v90;
        memcpy(v90, v23, 8 * v22);
        if (v23)
        {
          if (*v11 == v23)
          {
            *((_QWORD *)v10 + 1) = 0;
            *((_DWORD *)v10 + 4) = 0;
          }
          WTF::fastFree((WTF *)v23, a2);
        }
        v22 = *v21;
        v24 = (char *)*v11 + 8 * v22;
        goto LABEL_105;
      }
      v27 = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v26 - 96) + 136))(v26 - 96);
      v28 = *((_QWORD *)v27 + 58);
      v29 = *(_QWORD *)(StatusReg + 736);
      if (!v29 || (v30 = *(_QWORD *)(v29 + 96)) == 0)
        v30 = WebCore::threadGlobalDataSlow(v27);
      v31 = *(_QWORD *)(v30 + 80);
      if (v31)
      {
        if ((v28 & 0x800) == 0)
        {
LABEL_34:
          v32 = (WebCore::FontDatabase *)(v31 + 208);
          goto LABEL_35;
        }
      }
      else
      {
        WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v30);
        v31 = *(_QWORD *)(v30 + 80);
        if ((v28 & 0x800) == 0)
          goto LABEL_34;
      }
      v32 = (WebCore::FontDatabase *)(v31 + 144);
LABEL_35:
      v33 = WebCore::FontDatabase::collectionForFamily(v32, &v114);
      v34 = *(unsigned int *)(v33 + 12);
      if ((_DWORD)v34)
      {
        if (v34 >= 0x15555556)
          goto LABEL_140;
        v35 = v33;
        v36 = (WTF *)WTF::fastMalloc((WTF *)(12 * v34));
        if (*(_DWORD *)(v35 + 12))
        {
          v38 = 0;
          v39 = 0;
          v40 = v36;
          do
          {
            v41 = *(_QWORD *)v35 + v38;
            v42 = *(_QWORD *)(v41 + 8);
            LODWORD(v41) = *(_DWORD *)(v41 + 16);
            *(_QWORD *)v40 = v42;
            *((_DWORD *)v40 + 2) = v41;
            ++v39;
            v40 = (WTF *)((char *)v40 + 12);
            v38 += 24;
          }
          while (v39 < *(unsigned int *)(v35 + 12));
          if (v39)
          {
            v111 = 0;
            LODWORD(v43) = 0;
            v116 = 0;
            v117 = 0;
            v101 = v36;
            v44 = v36;
            do
            {
              v45 = *(_QWORD *)v44;
              v46 = *((_DWORD *)v44 + 2);
              v47 = *(_QWORD *)(*((_QWORD *)v4 + 15) + 8);
              v48 = *(_QWORD *)(v47 + 80);
              if (v48 && (v49 = *(_QWORD *)(v48 + 8)) != 0)
                v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v49 - 96) + 136))(v49 - 96);
              else
                v50 = 0;
              v51 = WTF::fastMalloc((WTF *)0xD0);
              v115 = (WebCore::CSSFontFace *)WebCore::CSSFontFace::CSSFontFace(v51, v50, 0, 0, 1);
              WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)v115 + 96, (_QWORD *)(v47 + 24), (uint64_t)&v118);
              v52 = v4;
              v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 15) + 8) + 80) + 8);
              if (v53)
                v54 = v53 - 96;
              else
                v54 = 0;
              v55 = (WebCore::CSSValuePool *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 312))(v54);
              v56 = v115;
              WebCore::CSSValuePool::createFontFamilyValue(v55, &v114, &v118);
              v57 = (uint64_t)v118;
              v118 = 0;
              v58 = WTF::fastCompactMalloc((WTF *)0x38);
              *(_DWORD *)v58 = 2;
              v59 = (*(unsigned __int8 *)(v58 + 6) << 16) & 0xFC0000;
              *(_DWORD *)(v58 + 8) = 1;
              *(_WORD *)(v58 + 4) = -9728;
              *(_BYTE *)(v58 + 6) = (v59 | 0x10000u) >> 16;
              *(_QWORD *)(v58 + 16) = v57;
              WebCore::CSSFontFace::setFamilies((uint64_t)v56, (WTF *)v58);
              if (*(_DWORD *)v58 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v58, v60);
              else
                *(_DWORD *)v58 -= 2;
              v61 = v118;
              v118 = 0;
              v4 = v52;
              if (v61)
              {
                if (*(_DWORD *)v61 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v61, v60);
                else
                  *(_DWORD *)v61 -= 2;
              }
              v62 = v115;
              if (!*((_BYTE *)v115 + 124))
                *((_BYTE *)v115 + 124) = 1;
              *((_DWORD *)v62 + 30) = v45;
              if (!*((_BYTE *)v62 + 130))
                *((_BYTE *)v62 + 130) = 1;
              *(_DWORD *)((char *)v62 + 126) = HIDWORD(v45);
              if (!*((_BYTE *)v62 + 136))
                *((_BYTE *)v62 + 136) = 1;
              *((_DWORD *)v62 + 33) = v46;
              v63 = WTF::fastMalloc((WTF *)0x60);
              v65 = v114;
              if (v114)
                *(_DWORD *)v114 += 2;
              *(_QWORD *)v63 = off_1E33978F0;
              *(_QWORD *)(v63 + 8) = 0;
              *(_QWORD *)(v63 + 16) = v65;
              *(_QWORD *)(v63 + 24) = v62;
              *(_OWORD *)(v63 + 32) = 0u;
              *(_OWORD *)(v63 + 48) = 0u;
              *(_OWORD *)(v63 + 64) = 0u;
              *(_OWORD *)(v63 + 77) = 0u;
              v118 = (WTF::StringImpl *)v63;
              v66 = *((unsigned int *)v62 + 23);
              if ((_DWORD)v66 == *((_DWORD *)v62 + 22))
              {
                v67 = (uint64_t *)WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v62 + 10, v66 + 1, (unint64_t)&v118);
                v66 = *((unsigned int *)v62 + 23);
                v68 = (uint64_t *)(*((_QWORD *)v62 + 10) + 8 * v66);
                v63 = *v67;
              }
              else
              {
                v68 = (uint64_t *)(*((_QWORD *)v62 + 10) + 8 * v66);
                v67 = (uint64_t *)&v118;
              }
              *v67 = 0;
              *v68 = v63;
              *((_DWORD *)v62 + 23) = v66 + 1;
              v69 = v118;
              v118 = 0;
              if (v69)
              {
                WebCore::CSSFontFaceSource::~CSSFontFaceSource(v69, v64);
                WTF::fastFree(v70, v71);
              }
              if ((_DWORD)v43 == (_DWORD)v117)
              {
                v72 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v116, v43 + 1, (unint64_t)&v115);
                v43 = HIDWORD(v117);
                v73 = v116;
                v74 = *(_QWORD *)v72;
                *(_QWORD *)v72 = 0;
                v111 = v73;
                *((_QWORD *)v73 + v43) = v74;
              }
              else
              {
                v75 = v115;
                v115 = 0;
                *((_QWORD *)v111 + v43) = v75;
              }
              LODWORD(v43) = v43 + 1;
              HIDWORD(v117) = v43;
              v76 = v115;
              v115 = 0;
              if (v76)
              {
                if (*((_DWORD *)v76 + 2) == 1)
                {
                  WebCore::CSSFontFace::~CSSFontFace(v76);
                  WTF::fastFree(v77, v78);
                }
                else
                {
                  --*((_DWORD *)v76 + 2);
                }
              }
              v44 = (WTF *)((char *)v44 + 12);
            }
            while (v40 != v44);
            WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v118, v104, (WTF::ASCIICaseInsensitiveHash *)&v114, (uint64_t *)&v116);
            v79 = v116;
            if (HIDWORD(v117))
            {
              v96 = 8 * HIDWORD(v117);
              v97 = v116;
              do
              {
                v98 = *(WebCore::CSSFontFace **)v97;
                *(_QWORD *)v97 = 0;
                if (v98)
                {
                  if (*((_DWORD *)v98 + 2) == 1)
                  {
                    WebCore::CSSFontFace::~CSSFontFace(v98);
                    WTF::fastFree(v99, v100);
                  }
                  else
                  {
                    --*((_DWORD *)v98 + 2);
                  }
                }
                v97 = (WTF *)((char *)v97 + 8);
                v96 -= 8;
              }
              while (v96);
            }
            if (v79)
              WTF::fastFree(v79, v37);
            v36 = v101;
          }
        }
        WTF::fastFree(v36, v37);
      }
      goto LABEL_85;
    }
LABEL_133:
    if (v3)
      *(_DWORD *)v103 = v3;
    else
      return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v103, a2);
  }
  return this;
}

_QWORD *WebCore::CSSFontFaceSet::familyNameFromPrimitive(_QWORD *this, const WebCore::CSSPrimitiveValue *a2)
{
  int v2;
  _DWORD *v3;

  v2 = *((_WORD *)a2 + 2) & 0x7F;
  if (v2 == 77)
  {
    v3 = (_DWORD *)*((_QWORD *)a2 + 1);
    if (v3)
LABEL_3:
      *v3 += 2;
  }
  else if (v2 == 80)
  {
    v3 = 0;
    switch(*((_WORD *)a2 + 4))
    {
      case 't':
        v3 = (_DWORD *)WebCore::WebKitFontFamilyNames::serifFamily;
        if (WebCore::WebKitFontFamilyNames::serifFamily)
          goto LABEL_3;
        break;
      case 'u':
        v3 = (_DWORD *)WebCore::WebKitFontFamilyNames::sansSerifFamily;
        if (WebCore::WebKitFontFamilyNames::sansSerifFamily)
          goto LABEL_3;
        break;
      case 'v':
        v3 = (_DWORD *)WebCore::WebKitFontFamilyNames::cursiveFamily;
        if (WebCore::WebKitFontFamilyNames::cursiveFamily)
          goto LABEL_3;
        break;
      case 'w':
        v3 = (_DWORD *)WebCore::WebKitFontFamilyNames::fantasyFamily;
        if (WebCore::WebKitFontFamilyNames::fantasyFamily)
          goto LABEL_3;
        break;
      case 'x':
        v3 = (_DWORD *)WebCore::WebKitFontFamilyNames::monospaceFamily;
        if (WebCore::WebKitFontFamilyNames::monospaceFamily)
          goto LABEL_3;
        break;
      case 'z':
        v3 = (_DWORD *)WebCore::WebKitFontFamilyNames::pictographFamily;
        if (WebCore::WebKitFontFamilyNames::pictographFamily)
          goto LABEL_3;
        break;
      case '{':
        v3 = (_DWORD *)WebCore::WebKitFontFamilyNames::systemUiFamily;
        if (WebCore::WebKitFontFamilyNames::systemUiFamily)
          goto LABEL_3;
        break;
      default:
        break;
    }
  }
  else
  {
    v3 = 0;
  }
  *this = v3;
  return this;
}

uint64_t WebCore::CSSFontFace::CSSFontFace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  int v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t StatusReg;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E3397628;
  if (a3)
  {
    ++*(_DWORD *)a3;
    v9 = 1;
  }
  else
  {
    a3 = WTF::fastMalloc((WTF *)0x60);
    v9 = 0;
    *(_QWORD *)a3 = 0x900000001;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = a3 + 32;
    *(_QWORD *)(a3 + 24) = 4;
  }
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  *(_DWORD *)(a1 + 76) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  if (a4)
  {
    v10 = *(_QWORD *)(a4 + 40);
    if (v10)
      goto LABEL_23;
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = a4 + 32;
    v12 = *(unsigned int **)(a4 + 40);
    *(_QWORD *)(a4 + 40) = v10;
    if (!v12)
      goto LABEL_23;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v11);
    }
    v10 = *(_QWORD *)(a4 + 40);
    if (v10)
    {
LABEL_23:
      do
        v15 = __ldaxr((unsigned int *)v10);
      while (__stlxr(v15 + 1, (unsigned int *)v10));
    }
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)(a1 + 112) = v10;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 124) = 0;
  *(_BYTE *)(a1 + 126) = 0;
  *(_BYTE *)(a1 + 130) = 0;
  *(_BYTE *)(a1 + 132) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 138) = 0;
  *(_BYTE *)(a1 + 139) = a5;
  *(_BYTE *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 141) = a4 == 0;
  if (a2)
  {
    *(_BYTE *)(a1 + 142) = (*(_DWORD *)(a2 + 464) & 0x80000) != 0;
    *(_BYTE *)(a1 + 143) = *(_BYTE *)(a2 + 139);
    v16 = (*(_QWORD *)(a2 + 464) >> 11) & 1;
  }
  else
  {
    *(_WORD *)(a1 + 142) = 0;
    LOBYTE(v16) = 1;
  }
  *(_BYTE *)(a1 + 144) = v16;
  *(_QWORD *)(a1 + 152) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v18 = *(unsigned int **)(StatusReg + 736);
  if (!v18)
    v18 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  *(_QWORD *)(a1 + 192) = v18;
  *(_QWORD *)(a1 + 152) = off_1E31F7378;
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v20 = off_1E3397848;
  v20[1] = WebCore::CSSFontFace::timeoutFired;
  v20[2] = 0;
  v20[3] = a1;
  *(_QWORD *)(a1 + 200) = v20;
  return a1;
}

unsigned __int8 *WebCore::CSSFontFace::appendSources(unsigned __int8 *result, uint64_t a2, WebCore::ScriptExecutionContext *a3, unsigned int a4)
{
  uint64_t v6;
  _BOOL4 v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  WebCore::CSSFontFaceSrcResourceValue *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int *v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  WebCore::CSSFontFaceSource *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  WebCore::CSSFontFaceSource *v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  void *v45;
  uint64_t v46;
  WebCore::CSSFontFaceSource *v48;
  WebCore::CSSFontFaceSource *v49;
  WebCore::CSSFontFaceSource *v50;

  v6 = (uint64_t)result;
  if (a3)
  {
    result = (unsigned __int8 *)(*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a3 + 136))(a3);
    v7 = result[136] != 3;
  }
  else
  {
    v7 = 0;
  }
  v46 = a2;
  v8 = *(_DWORD *)(a2 + 8);
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = a2 + 16;
    v12 = (_QWORD *)(v6 + 80);
    while (1)
    {
      if (v9 > 3)
      {
        if (*(_DWORD *)(v46 + 8) <= v9)
        {
LABEL_46:
          __break(0xC471u);
          JUMPOUT(0x194334F58);
        }
        v13 = *(_QWORD *)(v46 + 48) + 8 * (v10 - 4);
      }
      else
      {
        v13 = v11 + 8 * v10;
      }
      v14 = *(WebCore::CSSFontFaceSrcResourceValue **)v13;
      v15 = (*(unsigned __int16 *)(*(_QWORD *)v13 + 4) | (*(unsigned __int8 *)(*(_QWORD *)v13 + 6) << 16)) & 0x3F800;
      if (!v14 || v15 != 0x10000)
      {
        if (v7)
        {
          if (v15 != 67584)
            goto LABEL_46;
          result = (unsigned __int8 *)WebCore::CSSFontFaceSrcResourceValue::fontLoadRequest(v14, a3, a4, &v49);
          if (v49)
          {
            v27 = (*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a3 + 304))(a3);
            v28 = v49;
            v49 = 0;
            v29 = WTF::fastMalloc((WTF *)0x60);
            v50 = v28;
            v48 = (WebCore::CSSFontFaceSource *)WebCore::CSSFontFaceSource::CSSFontFaceSource(v29, v6, v27, (uint64_t *)&v50);
            if (v50)
              (*(void (**)(WebCore::CSSFontFaceSource *))(*(_QWORD *)v50 + 8))(v50);
            v31 = *(unsigned int *)(v6 + 92);
            if ((_DWORD)v31 == *(_DWORD *)(v6 + 88))
            {
              v32 = (uint64_t *)WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v6 + 80), v31 + 1, (unint64_t)&v48);
              v31 = *(unsigned int *)(v6 + 92);
              v33 = (_QWORD *)(*(_QWORD *)(v6 + 80) + 8 * v31);
            }
            else
            {
              v33 = (_QWORD *)(*v12 + 8 * v31);
              v32 = (uint64_t *)&v48;
            }
            v40 = *v32;
            *v32 = 0;
            *v33 = v40;
            *(_DWORD *)(v6 + 92) = v31 + 1;
            v41 = v48;
            v48 = 0;
            if (v41)
            {
              WebCore::CSSFontFaceSource::~CSSFontFaceSource(v41, v30);
              WTF::fastFree(v42, v43);
            }
            result = (unsigned __int8 *)v49;
            v49 = 0;
            if (result)
              result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
          }
        }
        goto LABEL_41;
      }
      v16 = *((_QWORD *)v14 + 2);
      if (!v16)
        break;
      v17 = *(_QWORD *)(v16 + 8);
      if (!v17)
        break;
      if (v7)
      {
        v18 = WTF::fastMalloc((WTF *)0x60);
        v19 = v18;
        v20 = (_DWORD *)*((_QWORD *)v14 + 1);
        if (v20)
          *v20 += 2;
        *(_QWORD *)v18 = off_1E33978F0;
        *(_QWORD *)(v18 + 8) = 0;
        *(_QWORD *)(v18 + 16) = v20;
        *(_QWORD *)(v18 + 24) = v6;
        *(_OWORD *)(v18 + 32) = 0u;
        *(_OWORD *)(v18 + 48) = 0u;
        *(_QWORD *)(v18 + 64) = 0;
        v21 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v17);
        if (v21)
        {
          do
            v23 = __ldaxr(v21);
          while (__stlxr(v23 + 1, v21));
        }
        *(_QWORD *)(v19 + 72) = v21;
        *(_QWORD *)(v19 + 80) = 0;
        *(_DWORD *)(v19 + 88) = 0;
        *(_BYTE *)(v19 + 92) = 1;
        v50 = (WebCore::CSSFontFaceSource *)v19;
        v24 = *(unsigned int *)(v6 + 92);
        if ((_DWORD)v24 == *(_DWORD *)(v6 + 88))
        {
          v25 = (uint64_t *)WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v6 + 80), v24 + 1, (unint64_t)&v50);
          v24 = *(unsigned int *)(v6 + 92);
          v26 = (uint64_t *)(*(_QWORD *)(v6 + 80) + 8 * v24);
          v19 = *v25;
        }
        else
        {
          v26 = (uint64_t *)(*v12 + 8 * v24);
          v25 = (uint64_t *)&v50;
        }
        *v25 = 0;
        *v26 = v19;
        v39 = v24 + 1;
LABEL_39:
        *(_DWORD *)(v6 + 92) = v39;
        result = (unsigned __int8 *)v50;
        v50 = 0;
        if (result)
        {
          WebCore::CSSFontFaceSource::~CSSFontFaceSource((WebCore::CSSFontFaceSource *)result, v22);
          result = (unsigned __int8 *)WTF::fastFree(v44, v45);
        }
      }
LABEL_41:
      v9 = v10 + 1;
      v10 = (v10 + 1);
      if (v8 == v9)
        goto LABEL_45;
    }
    v34 = WTF::fastMalloc((WTF *)0x60);
    v35 = (_DWORD *)*((_QWORD *)v14 + 1);
    if (v35)
      *v35 += 2;
    *(_QWORD *)v34 = off_1E33978F0;
    *(_QWORD *)(v34 + 8) = 0;
    *(_QWORD *)(v34 + 16) = v35;
    *(_QWORD *)(v34 + 24) = v6;
    *(_OWORD *)(v34 + 32) = 0u;
    *(_OWORD *)(v34 + 48) = 0u;
    *(_OWORD *)(v34 + 64) = 0u;
    *(_OWORD *)(v34 + 77) = 0u;
    v50 = (WebCore::CSSFontFaceSource *)v34;
    v36 = *(unsigned int *)(v6 + 92);
    if ((_DWORD)v36 == *(_DWORD *)(v6 + 88))
    {
      v37 = (uint64_t *)WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v6 + 80), v36 + 1, (unint64_t)&v50);
      v36 = *(unsigned int *)(v6 + 92);
      v38 = (uint64_t *)(*(_QWORD *)(v6 + 80) + 8 * v36);
      v34 = *v37;
    }
    else
    {
      v38 = (uint64_t *)(*v12 + 8 * v36);
      v37 = (uint64_t *)&v50;
    }
    *v37 = 0;
    *v38 = v34;
    v39 = v36 + 1;
    goto LABEL_39;
  }
LABEL_45:
  *(_BYTE *)(v6 + 140) = 1;
  return result;
}

uint64_t WebCore::CSSFontFaceSrcResourceValue::fontLoadRequest@<X0>(WebCore::CSSFontFaceSrcResourceValue *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unsigned int v18;
  WebCore::FontCustomPlatformData *v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  _QWORD *v29;
  uint64_t v30;
  WebCore::CachedResource *v31;
  int v32;
  void *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  void *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  _QWORD v43[3];
  _QWORD *v44;

  v9 = (uint64_t *)((char *)this + 88);
  v8 = *((_QWORD *)this + 11);
  if (v8)
  {
    v10 = *(_QWORD *)(v8 + 8);
    if (v10)
    {
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
      *v11 = off_1E3397D80;
      v11[1] = &unk_1E3397DF0;
      v11[2] = 0;
      v12 = v11 + 3;
      v13 = *(_QWORD *)(v10 + 8);
      if (v13)
        goto LABEL_57;
      v13 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = v10;
      v40 = *(unsigned int **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = v13;
      if (!v40)
        goto LABEL_57;
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        atomic_store(1u, v40);
        WTF::fastFree((WTF *)v40, v39);
      }
      v13 = *(_QWORD *)(v10 + 8);
      if (v13)
      {
LABEL_57:
        do
          v14 = __ldaxr((unsigned int *)v13);
        while (__stlxr(v14 + 1, (unsigned int *)v13));
        *v12 = v13;
        v15 = *(_QWORD *)(v13 + 8);
        if (v15)
        {
          v44 = v11 + 3;
          ++*(_DWORD *)(v15 + 548);
          v16 = *(_QWORD *)(v15 + 488);
          if (v16)
          {
            if (*(_QWORD *)(v16 + 8))
              WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v15 + 464), (uint64_t *)&v44, (uint64_t)v43);
          }
        }
      }
      else
      {
        *v12 = 0;
      }
      v11[4] = 0;
      result = *((_QWORD *)a2 + 13);
      if (result)
        goto LABEL_58;
      result = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)result = 1;
      *(_QWORD *)(result + 8) = (char *)a2 + 96;
      v34 = (unsigned int *)*((_QWORD *)a2 + 13);
      *((_QWORD *)a2 + 13) = result;
      if (!v34)
        goto LABEL_58;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        atomic_store(1u, v34);
        WTF::fastFree((WTF *)v34, v33);
      }
      result = *((_QWORD *)a2 + 13);
      if (result)
      {
LABEL_58:
        do
          v18 = __ldaxr((unsigned int *)result);
        while (__stlxr(v18 + 1, (unsigned int *)result));
      }
      v11[5] = result;
      *a4 = v11;
      return result;
    }
  }
  v19 = (WebCore::CSSFontFaceSrcResourceValue *)((char *)this + 56);
  v20 = *((_QWORD *)this + 7);
  if (!v20 || (v32 = *(_DWORD *)(v20 + 4)) == 0)
  {
    v43[0] = WTF::URL::lastPathComponent((WebCore::CSSFontFaceSrcResourceValue *)((char *)this + 16));
    v43[1] = v21;
    result = WTF::StringView::endsWithIgnoringASCIICase();
    if ((_DWORD)result)
    {
      result = WTF::URL::protocolIs();
      if ((result & 1) == 0)
        goto LABEL_33;
    }
    v22 = 0;
    goto LABEL_17;
  }
  if (v32 != 3)
    goto LABEL_31;
  v37 = *(_QWORD *)(v20 + 8);
  if ((*(_BYTE *)(v20 + 16) & 4) == 0)
  {
    if ((*(_WORD *)v37 & 0xFFDF) == 0x53 && (*(_WORD *)(v37 + 2) & 0xFFDF) == 0x56)
    {
      v38 = *(unsigned __int16 *)(v37 + 4);
      goto LABEL_44;
    }
LABEL_31:
    v22 = 0;
    goto LABEL_32;
  }
  if ((*(_BYTE *)v37 & 0xDF) != 0x53 || (*(_BYTE *)(v37 + 1) & 0xDF) != 0x56)
    goto LABEL_31;
  v38 = *(unsigned __int8 *)(v37 + 2);
LABEL_44:
  v22 = (v38 & 0xFFFFFFDF) == 71;
LABEL_32:
  result = WebCore::FontCustomPlatformData::supportsFormat(v19, a2);
  if ((result & 1) == 0)
  {
LABEL_33:
    *a4 = 0;
    return result;
  }
LABEL_17:
  v23 = *((unsigned int *)this + 19);
  if ((_DWORD)v23)
  {
    v24 = (unsigned __int8 *)*((_QWORD *)this + 8);
    do
    {
      v25 = *v24;
      v26 = v25 > 0xA;
      v27 = (1 << v25) & 0x6B9;
      if (v26 || v27 == 0)
        goto LABEL_33;
      ++v24;
    }
    while (--v23);
  }
  result = (*(uint64_t (**)(WebCore::ScriptExecutionContext *, char *, _BOOL8, uint64_t, _QWORD))(*(_QWORD *)a2 + 320))(a2, (char *)this + 16, v22, a3, *((unsigned __int8 *)this + 80));
  v29 = (_QWORD *)*a4;
  if (v29)
  {
    result = (*(uint64_t (**)(_QWORD *))(*v29 + 72))(v29);
    if ((_DWORD)result)
    {
      v30 = v29[3];
      if (v30)
        v31 = *(WebCore::CachedResource **)(v30 + 8);
      else
        v31 = 0;
      return (uint64_t)WebCore::CachedResourceHandleBase::setResource(v9, v31);
    }
  }
  return result;
}

uint64_t WebCore::CachedFontLoadRequest::isCachedFontLoadRequest(WebCore::CachedFontLoadRequest *this)
{
  return 1;
}

BOOL WebCore::FontCustomPlatformData::supportsFormat(WebCore::FontCustomPlatformData *this, const WTF::String *a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  result = 0;
  switch(*(_DWORD *)(v2 + 4))
  {
    case 3:
      v16 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v16 & 0xDF) != 0x53 || (*(_BYTE *)(v16 + 1) & 0xDF) != 0x56)
          return 0;
        v17 = *(unsigned __int8 *)(v16 + 2);
      }
      else
      {
        if ((*(_WORD *)v16 & 0xFFDF) != 0x53 || (*(_WORD *)(v16 + 2) & 0xFFDF) != 0x56)
          return 0;
        v17 = *(unsigned __int16 *)(v16 + 4);
      }
      return (v17 & 0xFFFFFFDF) == 71;
    case 4:
      v14 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v14 & 0xDF) != 0x57
          || (*(_BYTE *)(v14 + 1) & 0xDF) != 0x4F
          || (*(_BYTE *)(v14 + 2) & 0xDF) != 0x46)
        {
          return 0;
        }
        v15 = *(unsigned __int8 *)(v14 + 3);
      }
      else
      {
        if ((*(_WORD *)v14 & 0xFFDF) != 0x57
          || (*(_WORD *)(v14 + 2) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v14 + 4) & 0xFFDF) != 0x46)
        {
          return 0;
        }
        v15 = *(unsigned __int16 *)(v14 + 6);
      }
      if ((v15 & 0xFFFFFFDF) != 0x46)
        return 0;
      goto LABEL_84;
    case 5:
      v7 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v7 & 0xDF) != 0x57
          || (*(_BYTE *)(v7 + 1) & 0xDF) != 0x4F
          || (*(_BYTE *)(v7 + 2) & 0xDF) != 0x46
          || (*(_BYTE *)(v7 + 3) & 0xDF) != 0x46)
        {
          return 0;
        }
        v8 = *(unsigned __int8 *)(v7 + 4);
      }
      else
      {
        if ((*(_WORD *)v7 & 0xFFDF) != 0x57
          || (*(_WORD *)(v7 + 2) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v7 + 4) & 0xFFDF) != 0x46
          || (*(_WORD *)(v7 + 6) & 0xFFDF) != 0x46)
        {
          return 0;
        }
        v8 = *(unsigned __int16 *)(v7 + 8);
      }
      if ((v8 & 0xFFFFFFDF) == 0x12)
        goto LABEL_84;
      return 0;
    case 8:
      v4 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
      {
        v5 = *(_BYTE *)v4 & 0xDF;
        if (v5 == 84)
        {
          if ((*(_BYTE *)(v4 + 1) & 0xDF) != 0x52
            || (*(_BYTE *)(v4 + 2) & 0xDF) != 0x55
            || (*(_BYTE *)(v4 + 3) & 0xDF) != 0x45)
          {
            return 0;
          }
        }
        else if (v5 != 79
               || (*(_BYTE *)(v4 + 1) & 0xDF) != 0x50
               || (*(_BYTE *)(v4 + 2) & 0xDF) != 0x45
               || (*(_BYTE *)(v4 + 3) & 0xDF) != 0x4E)
        {
          return 0;
        }
        if ((*(_BYTE *)(v4 + 4) & 0xDF) != 0x54
          || (*(_BYTE *)(v4 + 5) & 0xDF) != 0x59
          || (*(_BYTE *)(v4 + 6) & 0xDF) != 0x50)
        {
          return 0;
        }
        v6 = *(unsigned __int8 *)(v4 + 7);
      }
      else
      {
        v18 = *(_WORD *)v4 & 0xFFDF;
        if (v18 == 84)
        {
          if ((*(_WORD *)(v4 + 2) & 0xFFDF) != 0x52
            || (*(_WORD *)(v4 + 4) & 0xFFDF) != 0x55
            || (*(_WORD *)(v4 + 6) & 0xFFDF) != 0x45)
          {
            return 0;
          }
        }
        else if (v18 != 79
               || (*(_WORD *)(v4 + 2) & 0xFFDF) != 0x50
               || (*(_WORD *)(v4 + 4) & 0xFFDF) != 0x45
               || (*(_WORD *)(v4 + 6) & 0xFFDF) != 0x4E)
        {
          return 0;
        }
        if ((*(_WORD *)(v4 + 8) & 0xFFDF) != 0x54
          || (*(_WORD *)(v4 + 10) & 0xFFDF) != 0x59
          || (*(_WORD *)(v4 + 12) & 0xFFDF) != 0x50)
        {
          return 0;
        }
        v6 = *(unsigned __int16 *)(v4 + 14);
      }
      if ((v6 & 0xFFFFFFDF) == 0x45)
        goto LABEL_84;
      return 0;
    case 0xF:
      v11 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v11 & 0xDF) == 0x57
          && (*(_BYTE *)(v11 + 1) & 0xDF) == 0x4F
          && (*(_BYTE *)(v11 + 2) & 0xDF) == 0x46
          && (*(_BYTE *)(v11 + 3) & 0xDF) == 0x46
          && (*(_BYTE *)(v11 + 4) & 0xDF) == 0xD
          && (*(_BYTE *)(v11 + 5) & 0xDF) == 0x56
          && (*(_BYTE *)(v11 + 6) & 0xDF) == 0x41
          && (*(_BYTE *)(v11 + 7) & 0xDF) == 0x52
          && (*(_BYTE *)(v11 + 8) & 0xDF) == 0x49
          && (*(_BYTE *)(v11 + 9) & 0xDF) == 0x41
          && (*(_BYTE *)(v11 + 10) & 0xDF) == 0x54
          && (*(_BYTE *)(v11 + 11) & 0xDF) == 0x49
          && (*(_BYTE *)(v11 + 12) & 0xDF) == 0x4F
          && (*(_BYTE *)(v11 + 13) & 0xDF) == 0x4E)
        {
          v10 = *(unsigned __int8 *)(v11 + 14);
          goto LABEL_76;
        }
      }
      else if ((*(_WORD *)v11 & 0xFFDF) == 0x57
             && (*(_WORD *)(v11 + 2) & 0xFFDF) == 0x4F
             && (*(_WORD *)(v11 + 4) & 0xFFDF) == 0x46
             && (*(_WORD *)(v11 + 6) & 0xFFDF) == 0x46
             && (*(_WORD *)(v11 + 8) & 0xFFDF) == 0xD
             && (*(_WORD *)(v11 + 10) & 0xFFDF) == 0x56
             && (*(_WORD *)(v11 + 12) & 0xFFDF) == 0x41
             && (*(_WORD *)(v11 + 14) & 0xFFDF) == 0x52
             && (*(_WORD *)(v11 + 16) & 0xFFDF) == 0x49
             && (*(_WORD *)(v11 + 18) & 0xFFDF) == 0x41
             && (*(_WORD *)(v11 + 20) & 0xFFDF) == 0x54
             && (*(_WORD *)(v11 + 22) & 0xFFDF) == 0x49
             && (*(_WORD *)(v11 + 24) & 0xFFDF) == 0x4F
             && (*(_WORD *)(v11 + 26) & 0xFFDF) == 0x4E)
      {
        v10 = *(unsigned __int16 *)(v11 + 28);
        goto LABEL_76;
      }
      return 0;
    case 0x10:
      v9 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v9 & 0xDF) == 0x57
          && (*(_BYTE *)(v9 + 1) & 0xDF) == 0x4F
          && (*(_BYTE *)(v9 + 2) & 0xDF) == 0x46
          && (*(_BYTE *)(v9 + 3) & 0xDF) == 0x46
          && (*(_BYTE *)(v9 + 4) & 0xDF) == 0x12
          && (*(_BYTE *)(v9 + 5) & 0xDF) == 0xD
          && (*(_BYTE *)(v9 + 6) & 0xDF) == 0x56
          && (*(_BYTE *)(v9 + 7) & 0xDF) == 0x41
          && (*(_BYTE *)(v9 + 8) & 0xDF) == 0x52
          && (*(_BYTE *)(v9 + 9) & 0xDF) == 0x49
          && (*(_BYTE *)(v9 + 10) & 0xDF) == 0x41
          && (*(_BYTE *)(v9 + 11) & 0xDF) == 0x54
          && (*(_BYTE *)(v9 + 12) & 0xDF) == 0x49
          && (*(_BYTE *)(v9 + 13) & 0xDF) == 0x4F
          && (*(_BYTE *)(v9 + 14) & 0xDF) == 0x4E)
        {
          v10 = *(unsigned __int8 *)(v9 + 15);
          goto LABEL_76;
        }
      }
      else if ((*(_WORD *)v9 & 0xFFDF) == 0x57
             && (*(_WORD *)(v9 + 2) & 0xFFDF) == 0x4F
             && (*(_WORD *)(v9 + 4) & 0xFFDF) == 0x46
             && (*(_WORD *)(v9 + 6) & 0xFFDF) == 0x46
             && (*(_WORD *)(v9 + 8) & 0xFFDF) == 0x12
             && (*(_WORD *)(v9 + 10) & 0xFFDF) == 0xD
             && (*(_WORD *)(v9 + 12) & 0xFFDF) == 0x56
             && (*(_WORD *)(v9 + 14) & 0xFFDF) == 0x41
             && (*(_WORD *)(v9 + 16) & 0xFFDF) == 0x52
             && (*(_WORD *)(v9 + 18) & 0xFFDF) == 0x49
             && (*(_WORD *)(v9 + 20) & 0xFFDF) == 0x41
             && (*(_WORD *)(v9 + 22) & 0xFFDF) == 0x54
             && (*(_WORD *)(v9 + 24) & 0xFFDF) == 0x49
             && (*(_WORD *)(v9 + 26) & 0xFFDF) == 0x4F
             && (*(_WORD *)(v9 + 28) & 0xFFDF) == 0x4E)
      {
        v10 = *(unsigned __int16 *)(v9 + 30);
        goto LABEL_76;
      }
      return 0;
    case 0x13:
      v12 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
      {
        v13 = *(_BYTE *)v12 & 0xDF;
        if (v13 == 84)
        {
          if ((*(_BYTE *)(v12 + 1) & 0xDF) != 0x52
            || (*(_BYTE *)(v12 + 2) & 0xDF) != 0x55
            || (*(_BYTE *)(v12 + 3) & 0xDF) != 0x45
            || (*(_BYTE *)(v12 + 4) & 0xDF) != 0x54
            || (*(_BYTE *)(v12 + 5) & 0xDF) != 0x59
            || (*(_BYTE *)(v12 + 6) & 0xDF) != 0x50
            || (*(_BYTE *)(v12 + 7) & 0xDF) != 0x45
            || (*(_BYTE *)(v12 + 8) & 0xDF) != 0xD
            || (*(_BYTE *)(v12 + 9) & 0xDF) != 0x56
            || (*(_BYTE *)(v12 + 10) & 0xDF) != 0x41
            || (*(_BYTE *)(v12 + 11) & 0xDF) != 0x52
            || (*(_BYTE *)(v12 + 12) & 0xDF) != 0x49
            || (*(_BYTE *)(v12 + 13) & 0xDF) != 0x41
            || (*(_BYTE *)(v12 + 14) & 0xDF) != 0x54
            || (*(_BYTE *)(v12 + 15) & 0xDF) != 0x49
            || (*(_BYTE *)(v12 + 16) & 0xDF) != 0x4F
            || (*(_BYTE *)(v12 + 17) & 0xDF) != 0x4E)
          {
            return 0;
          }
        }
        else if (v13 != 79
               || (*(_BYTE *)(v12 + 1) & 0xDF) != 0x50
               || (*(_BYTE *)(v12 + 2) & 0xDF) != 0x45
               || (*(_BYTE *)(v12 + 3) & 0xDF) != 0x4E
               || (*(_BYTE *)(v12 + 4) & 0xDF) != 0x54
               || (*(_BYTE *)(v12 + 5) & 0xDF) != 0x59
               || (*(_BYTE *)(v12 + 6) & 0xDF) != 0x50
               || (*(_BYTE *)(v12 + 7) & 0xDF) != 0x45
               || (*(_BYTE *)(v12 + 8) & 0xDF) != 0xD
               || (*(_BYTE *)(v12 + 9) & 0xDF) != 0x56
               || (*(_BYTE *)(v12 + 10) & 0xDF) != 0x41
               || (*(_BYTE *)(v12 + 11) & 0xDF) != 0x52
               || (*(_BYTE *)(v12 + 12) & 0xDF) != 0x49
               || (*(_BYTE *)(v12 + 13) & 0xDF) != 0x41
               || (*(_BYTE *)(v12 + 14) & 0xDF) != 0x54
               || (*(_BYTE *)(v12 + 15) & 0xDF) != 0x49
               || (*(_BYTE *)(v12 + 16) & 0xDF) != 0x4F
               || (*(_BYTE *)(v12 + 17) & 0xDF) != 0x4E)
        {
          return 0;
        }
        v10 = *(unsigned __int8 *)(v12 + 18);
      }
      else
      {
        v19 = *(_WORD *)v12 & 0xFFDF;
        if (v19 == 84)
        {
          if ((*(_WORD *)(v12 + 2) & 0xFFDF) != 0x52
            || (*(_WORD *)(v12 + 4) & 0xFFDF) != 0x55
            || (*(_WORD *)(v12 + 6) & 0xFFDF) != 0x45
            || (*(_WORD *)(v12 + 8) & 0xFFDF) != 0x54
            || (*(_WORD *)(v12 + 10) & 0xFFDF) != 0x59
            || (*(_WORD *)(v12 + 12) & 0xFFDF) != 0x50
            || (*(_WORD *)(v12 + 14) & 0xFFDF) != 0x45
            || (*(_WORD *)(v12 + 16) & 0xFFDF) != 0xD
            || (*(_WORD *)(v12 + 18) & 0xFFDF) != 0x56
            || (*(_WORD *)(v12 + 20) & 0xFFDF) != 0x41
            || (*(_WORD *)(v12 + 22) & 0xFFDF) != 0x52
            || (*(_WORD *)(v12 + 24) & 0xFFDF) != 0x49
            || (*(_WORD *)(v12 + 26) & 0xFFDF) != 0x41
            || (*(_WORD *)(v12 + 28) & 0xFFDF) != 0x54
            || (*(_WORD *)(v12 + 30) & 0xFFDF) != 0x49
            || (*(_WORD *)(v12 + 32) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v12 + 34) & 0xFFDF) != 0x4E)
          {
            return 0;
          }
        }
        else if (v19 != 79
               || (*(_WORD *)(v12 + 2) & 0xFFDF) != 0x50
               || (*(_WORD *)(v12 + 4) & 0xFFDF) != 0x45
               || (*(_WORD *)(v12 + 6) & 0xFFDF) != 0x4E
               || (*(_WORD *)(v12 + 8) & 0xFFDF) != 0x54
               || (*(_WORD *)(v12 + 10) & 0xFFDF) != 0x59
               || (*(_WORD *)(v12 + 12) & 0xFFDF) != 0x50
               || (*(_WORD *)(v12 + 14) & 0xFFDF) != 0x45
               || (*(_WORD *)(v12 + 16) & 0xFFDF) != 0xD
               || (*(_WORD *)(v12 + 18) & 0xFFDF) != 0x56
               || (*(_WORD *)(v12 + 20) & 0xFFDF) != 0x41
               || (*(_WORD *)(v12 + 22) & 0xFFDF) != 0x52
               || (*(_WORD *)(v12 + 24) & 0xFFDF) != 0x49
               || (*(_WORD *)(v12 + 26) & 0xFFDF) != 0x41
               || (*(_WORD *)(v12 + 28) & 0xFFDF) != 0x54
               || (*(_WORD *)(v12 + 30) & 0xFFDF) != 0x49
               || (*(_WORD *)(v12 + 32) & 0xFFDF) != 0x4F
               || (*(_WORD *)(v12 + 34) & 0xFFDF) != 0x4E)
        {
          return 0;
        }
        v10 = *(unsigned __int16 *)(v12 + 36);
      }
LABEL_76:
      if ((v10 & 0xFFFFFFDF) != 0x53)
        return 0;
LABEL_84:
      result = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t WebCore::CSSFontFaceSource::CSSFontFaceSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;

  *(_QWORD *)a1 = off_1E33978F0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
    goto LABEL_18;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = a3;
  v9 = *(unsigned int **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = v6;
  if (!v9)
    goto LABEL_18;
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
  {
LABEL_18:
    do
      v12 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v12 + 1, (unsigned int *)v6));
  }
  *(_QWORD *)(a1 + 32) = v6;
  v13 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 77) = 0u;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 64))(v13, a1);
  if (!*(_DWORD *)(a1 + 88)
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    *(_DWORD *)(a1 + 88) = 1;
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 24) + 142))
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40)))
        v14 = 3;
      else
        v14 = 2;
      *(_DWORD *)(a1 + 88) = v14;
    }
  }
  return a1;
}

BOOL WebCore::CachedFontLoadRequest::isPending(WebCore::CachedFontLoadRequest *this)
{
  return (*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 557) & 0xE0) == 32;
}

void WebCore::CachedFontLoadRequest::setClient(unsigned int **a1, _QWORD *a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::CachedResource *v18;
  WebCore::CachedResourceClient *v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::CachedResource *v25;
  WebCore::CachedResourceClient *v26;
  void *v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::CachedResource *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  _BYTE v36[24];
  unsigned int **v37;

  v4 = a1[4];
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  if (a2)
  {
    v6 = a2[1];
    if (v6)
      goto LABEL_62;
    v6 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = a2;
    v7 = (unsigned int *)a2[1];
    a2[1] = v6;
    if (!v7)
      goto LABEL_62;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
    v6 = a2[1];
    if (v6)
    {
LABEL_62:
      do
        v10 = __ldaxr((unsigned int *)v6);
      while (__stlxr(v10 + 1, (unsigned int *)v6));
    }
  }
  else
  {
    v6 = 0;
  }
  v11 = a1[4];
  a1[4] = (unsigned int *)v6;
  if (!v11)
    goto LABEL_16;
  do
  {
    v12 = __ldaxr(v11);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v11));
  if (v13)
  {
LABEL_16:
    if (a2)
      goto LABEL_17;
LABEL_41:
    if (!v4)
      return;
    if (!*((_QWORD *)v4 + 1))
      goto LABEL_51;
    v28 = a1[3];
    if (v28)
    {
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 + 1, v28));
      v35 = v28;
      v30 = *((_QWORD *)v28 + 1);
      if (v30
        && ((v37 = &v35, ++*(_DWORD *)(v30 + 548), (v31 = *(_QWORD *)(v30 + 488)) == 0)
         || !*(_QWORD *)(v31 + 8)
         || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v30 + 464), (uint64_t *)&v37, (uint64_t)v36), (v28 = v35) != 0)))
      {
        v32 = (WebCore::CachedResource *)*((_QWORD *)v28 + 1);
      }
      else
      {
        v32 = 0;
      }
    }
    else
    {
      v32 = 0;
      v35 = 0;
    }
    WebCore::CachedResource::removeClient(v32, a1 + 1);
    goto LABEL_50;
  }
  atomic_store(1u, v11);
  WTF::fastFree((WTF *)v11, a2);
  if (!a2)
    goto LABEL_41;
LABEL_17:
  if (v4)
  {
    if (*((_QWORD *)v4 + 1))
    {
      do
      {
LABEL_51:
        v33 = __ldaxr(v4);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v4));
      if (!v34)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
      return;
    }
    v14 = a1[3];
    if (v14)
    {
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      v35 = v14;
      v16 = *((_QWORD *)v14 + 1);
      if (v16
        && ((v37 = &v35, ++*(_DWORD *)(v16 + 548), (v17 = *(_QWORD *)(v16 + 488)) == 0)
         || !*(_QWORD *)(v17 + 8)
         || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v16 + 464), (uint64_t *)&v37, (uint64_t)v36), (v14 = v35) != 0)))
      {
        v18 = (WebCore::CachedResource *)*((_QWORD *)v14 + 1);
      }
      else
      {
        v18 = 0;
      }
    }
    else
    {
      v18 = 0;
      v35 = 0;
    }
    v19 = (WebCore::CachedResourceClient *)(a1 + 1);
    if (WebCore::CachedResource::addClientToSet(v18, v19))
      (*(void (**)(WebCore::CachedResource *, WebCore::CachedResourceClient *))(*(_QWORD *)v18 + 88))(v18, v19);
LABEL_50:
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v35, v20);
    goto LABEL_51;
  }
  v21 = a1[3];
  if (v21)
  {
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
    v35 = v21;
    v23 = *((_QWORD *)v21 + 1);
    if (v23
      && ((v37 = &v35, ++*(_DWORD *)(v23 + 548), (v24 = *(_QWORD *)(v23 + 488)) == 0)
       || !*(_QWORD *)(v24 + 8)
       || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v23 + 464), (uint64_t *)&v37, (uint64_t)v36), (v21 = v35) != 0)))
    {
      v25 = (WebCore::CachedResource *)*((_QWORD *)v21 + 1);
    }
    else
    {
      v25 = 0;
    }
  }
  else
  {
    v25 = 0;
    v35 = 0;
  }
  v26 = (WebCore::CachedResourceClient *)(a1 + 1);
  if (WebCore::CachedResource::addClientToSet(v25, v26))
    (*(void (**)(WebCore::CachedResource *, WebCore::CachedResourceClient *))(*(_QWORD *)v25 + 88))(v25, v26);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v35, v27);
}

uint64_t WebCore::CachedFont::didAddClient(uint64_t this, WebCore::CachedResourceClient *a2)
{
  uint64_t v3;

  if ((*(_WORD *)(this + 557) & 0x400) == 0)
  {
    v3 = this;
    if ((*(unsigned int (**)(WebCore::CachedResourceClient *))(*(_QWORD *)a2 + 32))(a2) == 2)
    {
      return (*(uint64_t (**)(WebCore::CachedResourceClient *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v3);
    }
    else
    {
      this = 96;
      __break(0xC471u);
    }
  }
  return this;
}

char *WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,1ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  void *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 + 1 > a2)
        v9 = v8 + 1;
      else
        v9 = a2;
      if (v9 <= v7)
      {
        v12 = *a1;
        return &v12[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (!(v9 >> 29))
      {
        v10 = (char *)WTF::fastMalloc((WTF *)(8 * v9));
        *((_DWORD *)a1 + 2) = v9;
        *a1 = v10;
        memcpy(v10, v5, 8 * v6);
        v12 = *a1;
        if (v5)
        {
          if (v12 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v11);
          v12 = *a1;
        }
        return &v12[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_24:
      __break(0xC471u);
      JUMPOUT(0x194336478);
    }
  }
  v13 = *((unsigned int *)a1 + 2);
  v14 = v13 + (v13 >> 2);
  if (v14 + 1 > a2)
    v15 = v14 + 1;
  else
    v15 = a2;
  if (v15 > v13)
  {
    if (v15 >> 29)
      goto LABEL_24;
    v16 = *((unsigned int *)a1 + 3);
    v17 = (char *)WTF::fastMalloc((WTF *)(8 * v15));
    *((_DWORD *)a1 + 2) = v15;
    *a1 = v17;
    memcpy(v17, v5, 8 * v16);
    if (v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return (char *)v3;
}

unsigned int *WTF::WeakHashSet<WTF::Observer<void ()(void)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t **a1, _QWORD *a2)
{
  unsigned int *result;
  void *v5;
  WTF *v6;
  WTF *v7;
  unsigned int *v8;
  uint64_t *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  uint64_t v16;
  WTF *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  uint64_t v21;

  v20 = 0;
  v21 = 0;
  result = (unsigned int *)WTF::Mapper<WTF::WeakHashSet<WTF::Observer<void ()(void)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WTF::Observer<void ()(void)>&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WTF::Observer<void ()(void)>,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map((uint64_t)&v20, a1);
  v6 = v20;
  if (HIDWORD(v21))
  {
    v7 = (WTF *)((char *)v20 + 8 * HIDWORD(v21));
    do
    {
      v8 = *(unsigned int **)v6;
      if (*(_QWORD *)v6)
      {
        v5 = (void *)*((_QWORD *)v8 + 1);
        if (v5)
        {
          v9 = *a1;
          if (*a1)
          {
            v10 = *((_DWORD *)v9 - 2);
            v11 = ((unint64_t)v8 + ~((_QWORD)v8 << 32)) ^ (((unint64_t)v8 + ~((_QWORD)v8 << 32)) >> 22);
            v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
            v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
            v14 = v10 & ((v13 >> 31) ^ v13);
            for (i = 1; ; ++i)
            {
              v16 = v9[v14];
              if (v16 != -1)
              {
                if (!v16)
                  goto LABEL_12;
                if ((unsigned int *)v16 == v8)
                  break;
              }
              v14 = (v14 + i) & v10;
            }
            result = (unsigned int *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
          }
        }
      }
LABEL_12:
      v6 = (WTF *)((char *)v6 + 8);
    }
    while (v6 != v7);
    v6 = v20;
    if (HIDWORD(v21))
    {
      v17 = (WTF *)((char *)v20 + 8 * HIDWORD(v21));
      do
      {
        result = *(unsigned int **)v6;
        *(_QWORD *)v6 = 0;
        if (result)
        {
          do
          {
            v18 = __ldaxr(result);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, result));
          if (!v19)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, v5);
          }
        }
        v6 = (WTF *)((char *)v6 + 8);
      }
      while (v6 != v17);
      v6 = v20;
    }
  }
  if (v6)
  {
    v20 = 0;
    LODWORD(v21) = 0;
    return (unsigned int *)WTF::fastFree(v6, v5);
  }
  return result;
}

void sub_1943365E4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, unsigned int a13)
{
  WTF *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  if (a13)
  {
    v14 = a11;
    do
    {
      v15 = *(unsigned int **)v14;
      *(_QWORD *)v14 = 0;
      if (v15)
      {
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v15);
          WTF::fastFree((WTF *)v15, a2);
        }
      }
      v14 = (WTF *)((char *)v14 + 8);
    }
    while (v14 != (WTF *)((char *)a11 + 8 * a13));
  }
  if (a11)
    WTF::fastFree(a11, a2);
  _Unwind_Resume(exception_object);
}

unsigned int *WebCore::FrameDestructionObserver::observeFrame(WebCore::FrameDestructionObserver *this, WebCore::LocalFrame *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _BYTE v15[24];

  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      WTF::WeakHashSet<WebCore::FrameDestructionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::FrameDestructionObserver>(v5 + 248, this);
  }
  if (a2)
  {
    result = (unsigned int *)*((_QWORD *)a2 + 2);
    if (result)
      goto LABEL_26;
    result = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
    *result = 1;
    *((_QWORD *)result + 1) = a2;
    v12 = (unsigned int *)*((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = result;
    if (!v12)
      goto LABEL_26;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
    result = (unsigned int *)*((_QWORD *)a2 + 2);
    if (result)
    {
LABEL_26:
      do
        v11 = __ldaxr(result);
      while (__stlxr(v11 + 1, result));
    }
  }
  else
  {
    result = 0;
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = result;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
    result = (unsigned int *)*((_QWORD *)this + 2);
  }
  if (result)
  {
    v10 = *((_QWORD *)result + 1);
    if (v10)
      return WTF::WeakHashSet<WebCore::FrameDestructionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::FrameDestructionObserver>(v10 + 248, this, (uint64_t)v15);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::StyleRuleFontFace *,WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>>,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashMap<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::CSSFontFace *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleRuleFontFace *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (_QWORD *)(v4 + 16 * i);
      if ((unint64_t)(*v10 + 1) >= 2)
      {
        v11 = *a1;
        if (*a1)
          v12 = *(_DWORD *)(v11 - 8);
        else
          v12 = 0;
        v13 = (~(*v10 << 32) + *v10) ^ ((~(*v10 << 32) + *v10) >> 22);
        v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((unint64_t)(v13 + ~(v13 << 13)) >> 8));
        v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        v16 = v12 & ((v15 >> 31) ^ v15);
        v17 = 1;
        do
        {
          v18 = v16;
          v19 = *(_QWORD *)(v11 + 16 * v16);
          v16 = (v16 + v17++) & v12;
        }
        while (v19);
        *(_OWORD *)(v11 + 16 * v18) = *(_OWORD *)v10;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>,WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleFontFace,WTF::RawPtrTraits<WebCore::StyleRuleFontFace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleFontFace>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t i;
  _QWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  _DWORD *v22;
  _DWORD *v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (_QWORD *)(v4 + 8 * i);
      v11 = (_DWORD *)*v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 8 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (_QWORD *)(v12 + 8 * v19);
          *v21 = 0;
          v22 = (_DWORD *)*v10;
          *v10 = 0;
          *v21 = v22;
          v23 = (_DWORD *)*v10;
          *v10 = 0;
          if (v23)
          {
            if (*v23 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v23, v8);
            else
              --*v23;
          }
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

char *WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  void *v21;
  uint64_t v22;
  WTF *v23;
  __int128 v24;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 16 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v14 = *(WTF **)a1;
        return (char *)v14 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
      if (!(v10 >> 28))
      {
        v11 = WTF::fastMalloc((WTF *)(16 * v10));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        do
        {
          *(_OWORD *)(v11 + v13) = *(_OWORD *)((char *)v5 + v13);
          v13 += 16;
        }
        while (16 * v6 != v13);
        v14 = *(WTF **)a1;
        if (v5)
        {
          if (v14 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v14 = *(WTF **)a1;
        }
        return (char *)v14 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x194336C1CLL);
    }
  }
  v15 = *(unsigned int *)(a1 + 8);
  v16 = v15 + (v15 >> 2);
  if (v16 >= 0x10)
    v17 = v16 + 1;
  else
    v17 = 16;
  if (v17 <= a2)
    v18 = a2;
  else
    v18 = v17;
  if (v18 > v15)
  {
    if (v18 >> 28)
      goto LABEL_35;
    v19 = *(unsigned int *)(a1 + 12);
    v20 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v18));
    *(_DWORD *)(a1 + 8) = v18;
    *(_QWORD *)a1 = v20;
    if ((_DWORD)v19)
    {
      v22 = 16 * v19;
      v23 = v5;
      do
      {
        v24 = *(_OWORD *)v23;
        v23 = (WTF *)((char *)v23 + 16);
        *v20++ = v24;
        v22 -= 16;
      }
      while (v22);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v21);
    }
  }
  return (char *)v3;
}

uint64_t WebCore::JSNodeListOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v25;
  uint64_t v26;

  result = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = v4 + 1;
  v5 = result + 8;
  if (!result)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v7 + 16 * v13);
      if (v14 != result)
      {
        v25 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v25) & v9;
          v14 = *(_QWORD *)(v7 + 16 * v13);
          ++v25;
          if (v14 == result)
            goto LABEL_11;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_11:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v15 = (_QWORD *)(v7 + 16 * v13);
        *v15 = -1;
        v18 = v15[1];
        v17 = v15 + 1;
        v16 = v18;
        if (v18)
        {
          *(_QWORD *)(v16 + 8) = 3;
          *v17 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v19 = *v6;
        if (*v6)
          v20 = *(_DWORD *)(v19 - 12) - 1;
        else
          v20 = -1;
        *(_DWORD *)(v19 - 12) = v20;
        v21 = *v6;
        if (*v6)
        {
          v22 = 6 * *(_DWORD *)(v21 - 12);
          v23 = *(_DWORD *)(v21 - 4);
          if (v22 < v23 && v23 >= 9)
          {
            v26 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v23 >> 1, 0);
            result = v26;
          }
        }
      }
    }
    v4 = *(_DWORD *)(result + 16) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (!v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_DWORD *)(result + 16) = v4;
  return result;
}

uint64_t *WebCore::setScreenProperties(uint64_t a1)
{
  {
    WebCore::screenProperties(void)::screenProperties = 0;
    qword_1ECE90D08 = 0;
  }
  LODWORD(WebCore::screenProperties(void)::screenProperties) = *(_DWORD *)a1;
  return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::operator=((_DWORD **)(a1 + 8));
}

uint64_t WebCore::SettingsBase::backgroundShouldExtendBeyondPageChanged(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v1 = *(_QWORD *)(this + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    v3 = *(_QWORD *)(v2 + 160);
    if (*(_BYTE *)(v3 + 144))
      v3 = 0;
    if (v2)
      v4 = v3 == 0;
    else
      v4 = 1;
    if (!v4)
      return JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::singletonFlag(*(_QWORD *)(v3 + 288));
  }
  return this;
}

uint64_t WebCore::Scrollbar::updateThumbProportion(WebCore::Scrollbar *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 10);
  (*(void (**)(uint64_t, WebCore::Scrollbar *, uint64_t))(*(_QWORD *)v2 + 104))(v2, this, 4);
  (*(void (**)(uint64_t, WebCore::Scrollbar *, uint64_t))(*(_QWORD *)v2 + 104))(v2, this, 8);
  return (*(uint64_t (**)(uint64_t, WebCore::Scrollbar *, uint64_t))(*(_QWORD *)v2 + 104))(v2, this, 16);
}

uint64_t WebCore::ScrollbarThemeComposite::invalidatePart(uint64_t result, WebCore::Widget *this, int a3)
{
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  CGRect *v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  const CGRect *v19;
  int v20;
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[2];
  CGPoint origin;
  CGRect v25;

  if (!a3)
    return result;
  v5 = result;
  origin = (CGPoint)0;
  if (a3 > 63)
  {
    switch(a3)
    {
      case 64:
        v6 = *(uint64_t (**)(void))(*(_QWORD *)result + 272);
        goto LABEL_22;
      case 128:
        v9 = WebCore::Widget::frameRect(this);
        break;
      case 256:
        v9 = (*(uint64_t (**)(uint64_t, WebCore::Widget *, uint64_t))(*(_QWORD *)result + 280))(result, this, 1);
        break;
      default:
        goto LABEL_10;
    }
    *(_QWORD *)&origin.x = v9;
    goto LABEL_23;
  }
  if (a3 != 1)
  {
    if (a3 == 2)
    {
      v6 = *(uint64_t (**)(void))(*(_QWORD *)result + 272);
      goto LABEL_22;
    }
    if (a3 == 32)
    {
      v6 = *(uint64_t (**)(void))(*(_QWORD *)result + 264);
LABEL_22:
      v9 = v6();
LABEL_23:
      origin.y = v14;
      v10 = HIDWORD(v9);
      goto LABEL_15;
    }
LABEL_10:
    v25.origin.x = 0.0;
    v25.origin.y = 0.0;
    v23[0] = 0;
    v23[1] = 0;
    v22[0] = 0;
    v22[1] = 0;
    v21[0] = (*(uint64_t (**)(uint64_t, WebCore::Widget *, _QWORD))(*(_QWORD *)result + 280))(result, this, 0);
    v21[1] = v7;
    (*(void (**)(uint64_t, WebCore::Widget *, _QWORD *, CGRect *, _QWORD *, _QWORD *))(*(_QWORD *)v5 + 296))(v5, this, v21, &v25, v23, v22);
    v8 = (CGRect *)v23;
    if (a3 == 16)
      v8 = (CGRect *)v22;
    if (a3 == 4)
      v8 = &v25;
    origin = v8->origin;
    LODWORD(v9) = LODWORD(origin.x);
    LODWORD(v10) = HIDWORD(origin.x);
    goto LABEL_15;
  }
  v9 = (*(uint64_t (**)(uint64_t, WebCore::Widget *, uint64_t, uint64_t))(*(_QWORD *)result + 264))(result, this, 1, 1);
  origin.y = v13;
  v10 = HIDWORD(v9);
LABEL_15:
  v11 = (void *)*((_QWORD *)this + 5);
  if (v11)
  {
    v20 = v9;
    if (objc_msgSend(v11, "conformsToProtocol:", &unk_1EE342188))
      v11 = (void *)objc_msgSend(v11, "superview");
    objc_msgSend(v11, "frame");
    v25.origin.x = v15;
    v25.origin.y = v16;
    v25.size.width = v17;
    v25.size.height = v18;
    v12 = WebCore::enclosingIntRect(&v25, v19);
    LODWORD(v9) = v20;
  }
  else
  {
    v12 = *((_QWORD *)this + 6);
  }
  LODWORD(origin.x) = v9 - v12;
  HIDWORD(origin.x) = v10 - HIDWORD(v12);
  return (*(uint64_t (**)(WebCore::Widget *, CGPoint *))(*(_QWORD *)this + 32))(this, &origin);
}

uint64_t WebCore::Scrollbar::invalidateRect(uint64_t this, const WebCore::IntRect *a2)
{
  if (!*(_BYTE *)(this + 200))
    return (*(uint64_t (**)(_QWORD, uint64_t, const WebCore::IntRect *))(**(_QWORD **)(this + 64) + 320))(*(_QWORD *)(this + 64), this, a2);
  return this;
}

uint64_t WebCore::ScrollbarThemeComposite::splitTrack(WebCore::ScrollbarThemeComposite *this, WebCore::Scrollbar *a2, const WebCore::IntRect *a3, WebCore::IntRect *a4, WebCore::IntRect *a5, WebCore::IntRect *a6)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t result;
  int v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  const CGRect *v36;
  int v37;
  CGRect v40;

  v9 = (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *, const WebCore::IntRect *))(*(_QWORD *)this + 368))(this, a2, a3);
  v11 = v10;
  v12 = *((unsigned __int8 *)a2 + 72);
  v13 = (void *)*((_QWORD *)a2 + 5);
  if (v13)
  {
    if (objc_msgSend(*((id *)a2 + 5), "conformsToProtocol:", &unk_1EE342188))
      v13 = (void *)objc_msgSend(v13, "superview");
    objc_msgSend(v13, "frame");
    v40.origin.x = v32;
    v40.origin.y = v33;
    v40.size.width = v34;
    v40.size.height = v35;
    WebCore::enclosingIntRect(&v40, v36);
  }
  else
  {
    v14 = *((_QWORD *)a2 + 7);
  }
  if (v12)
    v15 = v14;
  else
    v15 = HIDWORD(v14);
  v16 = (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *))(*(_QWORD *)this + 160))(this, a2);
  v17 = v16;
  if (*((_BYTE *)a2 + 72))
  {
    v18 = v11 - v15;
    if ((int)v11 < (int)v15)
      ++v18;
    v19 = v9 + (v18 >> 1);
    v20 = HIDWORD(v9);
    v21 = v16 + HIDWORD(v9);
    v22 = (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *))(*(_QWORD *)this + 168))(this, a2);
    result = v15;
    *(_DWORD *)a5 = v19;
    if (v22 >= 0)
      v24 = v22;
    else
      v24 = v22 + 1;
    LODWORD(v25) = v17 + (v24 >> 1);
    LODWORD(v26) = v25 + HIDWORD(v9);
    v27 = HIDWORD(v11) - v25;
    LODWORD(v15) = v22;
    v28 = v11;
    v29 = v9;
  }
  else
  {
    v37 = v16 + v9;
    v20 = HIDWORD(v9);
    v25 = HIDWORD(v11);
    v30 = HIDWORD(v11) - v15;
    if (SHIDWORD(v11) < (int)v15)
      ++v30;
    v21 = HIDWORD(v9) + (v30 >> 1);
    result = (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *))(*(_QWORD *)this
                                                                                                 + 168))(this, a2);
    *(_DWORD *)a5 = v37;
    if ((int)result >= 0)
      v31 = result;
    else
      v31 = result + 1;
    v28 = v17 + (v31 >> 1);
    v29 = v28 + v9;
    LODWORD(v11) = v11 - v28;
    v26 = HIDWORD(v9);
    v27 = v25;
  }
  *((_DWORD *)a5 + 1) = v21;
  *((_DWORD *)a5 + 2) = result;
  *((_DWORD *)a5 + 3) = v15;
  *(_DWORD *)a4 = v9;
  *((_DWORD *)a4 + 1) = v20;
  *((_DWORD *)a4 + 2) = v28;
  *((_DWORD *)a4 + 3) = v25;
  *(_DWORD *)a6 = v29;
  *((_DWORD *)a6 + 1) = v26;
  *((_DWORD *)a6 + 2) = v11;
  *((_DWORD *)a6 + 3) = v27;
  return result;
}

uint64_t WebCore::ScrollbarThemeComposite::thumbLength(WebCore::ScrollbarThemeComposite *this, WebCore::Scrollbar *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  int v10;
  signed int v11;
  signed int v12;
  signed int v13;

  if (!*((_BYTE *)a2 + 136))
    return 0;
  v4 = (float)*((int *)a2 + 22);
  v5 = *((float *)a2 + 24);
  v6 = -v5;
  v7 = (float)*((int *)a2 + 23);
  v8 = (float)(v5 + v4) - v7;
  if (v8 <= v6)
    v8 = v6;
  v9 = v4 / (float)(fmaxf(v8, 0.0) + v7);
  v10 = (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *))(*(_QWORD *)this + 184))(this);
  v11 = llroundf(v9 * (float)v10);
  v12 = (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *))(*(_QWORD *)this + 304))(this, a2);
  if (v12 <= v11)
    v13 = v11;
  else
    v13 = v12;
  if (v13 <= v10)
    return v13;
  else
    return 0;
}

uint64_t WebCore::ScrollbarThemeComposite::trackLength(WebCore::ScrollbarThemeComposite *this, WebCore::Scrollbar *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD v8[2];

  v8[0] = (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *, _QWORD))(*(_QWORD *)this + 280))(this, a2, 0);
  v8[1] = v4;
  (*(void (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *, _QWORD *))(*(_QWORD *)this + 368))(this, a2, v8);
  if (*((_BYTE *)a2 + 72))
    return v6;
  else
    return v5;
}

uint64_t WebCore::ScrollbarThemeComposite::constrainTrackRectToTrackPieces(WebCore::ScrollbarThemeComposite *this, WebCore::Scrollbar *a2, const WebCore::IntRect *a3)
{
  return *(_QWORD *)a3;
}

uint64_t WebCore::ScrollbarThemeIOS::trackRect(WebCore::ScrollbarThemeIOS *this, WebCore::Scrollbar *a2)
{
  return 0;
}

uint64_t WebCore::ScrollbarThemeIOS::minimumThumbLength(WebCore::ScrollbarThemeIOS *this, WebCore::Scrollbar *a2)
{
  return 0;
}

uint64_t WebCore::ScrollbarThemeComposite::thumbPosition(WebCore::ScrollbarThemeComposite *this, WebCore::Scrollbar *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v9;
  int v10;
  float v11;

  if (!*((_BYTE *)a2 + 136))
    return 0;
  v3 = *((float *)a2 + 24);
  v4 = (float)*((int *)a2 + 22);
  v5 = (float)*((int *)a2 + 23);
  v6 = (float)(v3 + v4) - v5;
  if (v6 <= (float)-v3)
    v6 = -v3;
  v7 = (float)(fmaxf(v6, 0.0) + v5) - v4;
  if (v7 == 0.0)
    return 1;
  v9 = fmaxf(v3, 0.0);
  v10 = (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *))(*(_QWORD *)this + 184))(this, a2);
  v11 = (float)(v9
              * (float)(int)(v10
                           - (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *))(*(_QWORD *)this + 168))(this, a2)))/ v7;
  if (v11 > 0.0 && v11 < 1.0)
    return 1;
  else
    return (int)v11;
}

uint64_t WebCore::ScrollableArea::invalidateScrollbar(WebCore::ScrollableArea *this, WebCore::Scrollbar *a2, const WebCore::IntRect *a3)
{
  uint64_t v6;
  uint64_t result;
  WebCore::Scrollbar *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  WebCore::ScrollableArea *v15;
  WTF *v16;

  v6 = *((_QWORD *)this + 3);
  if (!v6)
  {
    if ((*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 688))(this))
    {
      v15 = this;
      std::make_unique[abi:sn180100]<WebCore::ScrollbarsControllerMock,WebCore::ScrollableArea &,WebCore::ScrollableArea::internalCreateScrollbarsController(void)::$_0>((uint64_t *)&v16, (uint64_t)this, (uint64_t *)&v15);
      v13 = v16;
      v16 = 0;
      v14 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v13;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      std::unique_ptr<WebCore::ScrollbarsControllerMock>::~unique_ptr[abi:sn180100](&v16, v12);
    }
    else
    {
      (*(void (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 304))(this);
    }
    v6 = *((_QWORD *)this + 3);
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1943375ECLL);
    }
  }
  result = (*(uint64_t (**)(uint64_t, WebCore::Scrollbar *))(*(_QWORD *)v6 + 280))(v6, a2);
  if ((_DWORD)result)
  {
    v8 = (WebCore::Scrollbar *)(*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 392))(this);
    v9 = *(_QWORD *)this;
    if (v8 == a2)
    {
      v10 = (*(uint64_t (**)(WebCore::ScrollableArea *))(v9 + 672))(this);
    }
    else
    {
      if ((WebCore::Scrollbar *)(*(uint64_t (**)(WebCore::ScrollableArea *))(v9 + 400))(this) != a2)
        return (*(uint64_t (**)(WebCore::ScrollableArea *, WebCore::Scrollbar *, const WebCore::IntRect *))(*(_QWORD *)this + 808))(this, a2, a3);
      v10 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 680))(this);
    }
    if (v10)
    {
      v11 = v10;
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 320))(v10);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 336))(v11);
    }
    return (*(uint64_t (**)(WebCore::ScrollableArea *, WebCore::Scrollbar *, const WebCore::IntRect *))(*(_QWORD *)this + 808))(this, a2, a3);
  }
  return result;
}

uint64_t WebCore::ScrollbarsController::scrollbarsCanBeActive(WebCore::ScrollbarsController *this)
{
  return 1;
}

uint64_t WebCore::RenderLayerScrollableArea::layerForHorizontalScrollbar(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 12) + 256);
  if (v1)
    return *(_QWORD *)(v1 + 128);
  else
    return 0;
}

uint64_t WebCore::RenderLayerScrollableArea::invalidateScrollbarRect(WebCore::RenderLayerScrollableArea *this, WebCore::Scrollbar *a2, const WebCore::IntRect *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  int v35;
  int v36;
  float v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  float v46[4];
  uint64_t v47;
  _BYTE v48[20];
  __int128 v49;
  char v50;

  result = WebCore::RenderLayerScrollableArea::canUseCompositedScrolling(this);
  if ((result & 1) != 0)
    return result;
  v7 = *((_QWORD *)this + 12);
  v8 = *(_QWORD *)(v7 + 256);
  if (*((WebCore::Scrollbar **)this + 17) != a2)
  {
    if (!v8)
      goto LABEL_5;
    v9 = *(_QWORD *)(v8 + 128);
    if (!v9)
      goto LABEL_5;
LABEL_46:
    v37 = WebCore::FloatRect::FloatRect(v46, (int *)a3);
    return (*(uint64_t (**)(uint64_t, float *, uint64_t, float))(*(_QWORD *)v9 + 328))(v9, v46, 1, v37);
  }
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 136);
    if (v9)
      goto LABEL_46;
  }
LABEL_5:
  v10 = *(_QWORD *)(v7 + 32);
  if ((*(_BYTE *)(v10 + 45) & 4) != 0)
    v11 = v10;
  else
    v11 = 0;
  v12 = *(_QWORD *)(v11 + 32);
  if (v12 && *(_QWORD *)(v12 + 8))
  {
    v14 = *(_QWORD *)a3;
    v13 = *((_QWORD *)a3 + 1);
    result = WebCore::RenderLayerScrollableArea::overflowControlsRects(this, (uint64_t)v46);
    if (*((WebCore::Scrollbar **)this + 17) == a2)
      v15 = (float *)&v47;
    else
      v15 = v46;
    v16 = *(_QWORD *)v15;
    v17 = v16 + v14;
    v18 = (v16 + (v14 & 0xFFFFFFFF00000000)) >> 32;
    v19 = ((_DWORD)v16 + (_DWORD)v14) << 6;
    if (v17 < -33554432)
      v19 = 0x80000000;
    if (v17 > 0x1FFFFFF)
      v19 = 0x7FFFFFFF;
    v20 = (_DWORD)v18 << 6;
    if ((int)v18 < -33554432)
      v20 = 0x80000000;
    if ((int)v18 > 0x1FFFFFF)
      v20 = 0x7FFFFFFF;
    v21 = ((_DWORD)v13 << 6);
    if ((int)v13 < -33554432)
      v21 = 0x80000000;
    if ((int)v13 > 0x1FFFFFF)
      v21 = 0x7FFFFFFFLL;
    v22 = 0x8000000000000000;
    if (SHIDWORD(v13) >= -33554432)
      v22 = HIDWORD(v13) << 38;
    if (SHIDWORD(v13) > 0x1FFFFFF)
      v22 = 0x7FFFFFFF00000000;
    v23 = (unsigned __int16)*(_DWORD *)(v11 + 124) >> 13;
    v24 = v23 > 5;
    v25 = (1 << v23) & 0x2A;
    if (!v24 && v25 != 0)
    {
      if ((*(_BYTE *)(v11 + 21) & 0x10) != 0)
      {
        v42 = *(_DWORD *)(v11 + 160);
        v32 = __OFADD__(v19, (_DWORD)v21);
        v43 = v19 + v21;
        v44 = (v19 >> 31) + 0x7FFFFFFF;
        if (!v32)
          v44 = v43;
        v32 = __OFSUB__(v42, v44);
        v19 = v42 - v44;
        v45 = (v42 >> 31) + 0x7FFFFFFF;
        if (v32)
          v19 = v45;
      }
      else
      {
        v38 = *(_DWORD *)(v11 + 164);
        v32 = __OFADD__(v20, HIDWORD(v22));
        v39 = v20 + HIDWORD(v22);
        v40 = (v20 >> 31) + 0x7FFFFFFF;
        if (!v32)
          v40 = v39;
        v32 = __OFSUB__(v38, v40);
        v20 = v38 - v40;
        v41 = (v38 >> 31) + 0x7FFFFFFF;
        if (v32)
          v20 = v41;
      }
    }
    v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 8) + 40) + 8) + 1944);
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 24) + 8) + 40) + 8) + 3382))
    {
      v28 = v22 | v21;
      v29 = *(_QWORD *)(v27 + 248);
      v30 = *(unsigned int *)(v29 + 508);
      if ((_DWORD)v30 && (v30 = *(_QWORD *)(*(_QWORD *)(v29 + 496) + 8 * v30 - 8)) != 0)
      {
        v31 = *(_DWORD *)(v30 + 64);
        LODWORD(v30) = *(_DWORD *)(v30 + 68);
      }
      else
      {
        v31 = 0;
      }
      v32 = __OFADD__(v19, v31);
      v33 = v19 + v31;
      v34 = (v19 >> 31) + 0x7FFFFFFF;
      if (!v32)
        v34 = v33;
      v32 = __OFADD__(v20, (_DWORD)v30);
      v35 = v20 + v30;
      v36 = (v20 >> 31) + 0x7FFFFFFF;
      if (!v32)
        v36 = v35;
      *(_QWORD *)&v49 = __PAIR64__(v36, v34);
      *((_QWORD *)&v49 + 1) = v28;
      v50 = 1;
      v48[0] = 0;
      v48[16] = 0;
      return WebCore::RenderObject::issueRepaint(v11, &v49, 1, 0, (uint64_t)v48);
    }
  }
  return result;
}

uint64_t WebCore::ScrollingEffectsController::stopKeyboardScrolling(WebCore::ScrollingEffectsController *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8));
  return WebCore::KeyboardScrollingAnimator::handleKeyUpEvent(v1);
}

uint64_t WebCore::ScrollAnimator::keyboardScrollingAnimator(WebCore::ScrollAnimator *this)
{
  return *((_QWORD *)this + 16);
}

void WebCore::SWRegistrationDatabase::importRegistrations(WebCore::SWRegistrationDatabase *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  uint8_t *v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  int *IdentifierInternal;
  const char *v9;
  sqlite3_stmt **v10;
  float v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  float v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  double v22;
  const WTF::String *v23;
  WTF::StringImpl *v24;
  unsigned __int16 v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  const WTF::String *v29;
  WTF::StringImpl *v30;
  unsigned __int16 v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const WebCore::ServiceWorkerRegistrationKey *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  NSObject *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  NSObject *v42;
  WTF::StringImpl *v43;
  NSObject *v44;
  WTF::StringImpl *v45;
  NSObject *v46;
  WTF::StringImpl *v47;
  NSObject *v48;
  NSObject *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  NSObject *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  CFTypeRef v59;
  uint64_t v60;
  __int128 v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  int v65;
  WTF::StringImpl *v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  NSObject *v71;
  int *v72;
  NSObject *v73;
  const char *v74;
  NSObject *v75;
  void *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  int v79;
  uint64_t v80;
  sqlite3 *v81;
  int v82;
  sqlite3 *v83;
  uint64_t v84;
  const char *v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  sqlite3 *v88;
  int v89;
  sqlite3 *v90;
  uint64_t v91;
  const char *v92;
  int *v93;
  _QWORD v94[2];
  WTF::StringImpl *v95;
  __int128 v96;
  __int128 v97;
  char v98;
  char v99;
  uint64_t v100;
  _BYTE v101[120];
  char v102[8];
  uint64_t v103;
  char v104;
  WTF **v105;
  char v106;
  CFTypeRef cf;
  char v108;
  uint64_t v109;
  _QWORD v110[2];
  WTF::StringImpl *v111;
  __int16 v112;
  __int128 v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  char v118;
  char v119;
  WTF::StringImpl *v120;
  __int128 v121;
  __int128 v122;
  WTF::StringImpl *v123;
  __int128 v124;
  __int128 v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  WebCore::SQLiteStatement *v131;
  uint8_t buf[8];
  _BYTE v133[10];
  _QWORD v134[49];
  int v135;
  char v136;
  __int16 v137;
  __int128 v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  __int128 v141;
  __int128 v142;
  char v143;
  __int16 v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  char v149;
  char v150;
  char v151;
  char v152;
  uint64_t v153;
  uint8_t v154[8];
  uint8_t *v155;
  WTF::StringImpl *v156;
  __int128 v157;
  __int128 v158;
  char v159;
  double v160;
  char v161;
  char v162;
  char v163;
  char v164;
  _BYTE v165[72];
  _BYTE v166[24];
  int v167;
  char v168;
  _BYTE v169[72];
  char v170;
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  if ((WebCore::SWRegistrationDatabase::prepareDatabase((uint64_t *)this, 0) & 1) == 0)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  if (!*((_QWORD *)this + 1))
  {
    WebCore::SWRegistrationDatabase::clearAllRegistrations((WTF **)this);
    *(_QWORD *)buf = 0;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)v133 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
    WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v4);
    return;
  }
  v5 = buf;
  WebCore::SWRegistrationDatabase::cachedStatement(&v131, (uint64_t)this, 0);
  if (v131)
  {
    v130 = 0;
    v129 = 0;
    v6 = WebCore::SQLiteStatement::step((sqlite3_stmt **)v131);
    IdentifierInternal = &dword_1940B8000;
    v9 = "SWRegistrationDatabase::importRegistrations failed to decode service worker registration key";
    while (1)
    {
      if (v6 != 100)
      {
        if (v6 == 101
          || (v67 = qword_1ECE7CAB8, !os_log_type_enabled((os_log_t)qword_1ECE7CAB8, OS_LOG_TYPE_ERROR)))
        {
LABEL_116:
          v68 = v129;
          v129 = 0;
          *(_QWORD *)a2 = v68;
          v69 = v130;
          v130 = 0;
          *(_QWORD *)(a2 + 8) = v69;
          *(_BYTE *)(a2 + 16) = 1;
          WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v129, v7);
          goto LABEL_117;
        }
        v87 = *((_QWORD *)this + 1);
        v88 = *(sqlite3 **)(v87 + 8);
        if (v88)
        {
          v89 = sqlite3_errcode(v88);
          v87 = *((_QWORD *)this + 1);
          v90 = *(sqlite3 **)(v87 + 8);
          if (v90)
          {
            v92 = sqlite3_errmsg(v90);
          }
          else
          {
LABEL_144:
            v91 = *(_QWORD *)(v87 + 56);
            if (v91)
              v92 = (const char *)(v91 + 16);
            else
              v92 = "database is not open";
          }
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&buf[4] = v89;
          *(_WORD *)v133 = 2080;
          *(_QWORD *)(v5 + 10) = v92;
          _os_log_error_impl(&dword_1940B8000, v67, OS_LOG_TYPE_ERROR, "SWRegistrationDatabase::importRegistrations failed on executing statement (%d) - %s", buf, 0x12u);
          goto LABEL_116;
        }
        v89 = *(_DWORD *)(v87 + 52);
        goto LABEL_144;
      }
      v10 = (sqlite3_stmt **)v131;
      WebCore::SQLiteStatement::columnText((sqlite3_stmt **)v131, 0, buf);
      WebCore::ServiceWorkerRegistrationKey::fromDatabaseKey((uint64_t)buf, (uint64_t)v169, v11);
      v13 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      if (v170)
        break;
      v42 = off_1ECE7CA18;
      if (os_log_type_enabled((os_log_t)off_1ECE7CA18, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(IdentifierInternal, v42, OS_LOG_TYPE_ERROR, v9, buf, 2u);
      }
LABEL_86:
      std::optional<WebCore::ServiceWorkerRegistrationKey>::~optional((uint64_t)v169, v43);
      v6 = WebCore::SQLiteStatement::step(v10);
    }
    WebCore::SQLiteStatement::columnText(v10, 1, buf);
    MEMORY[0x19AEA52D4](&v127, buf, 0);
    v15 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    WebCore::SQLiteStatement::columnText(v10, 2, &v126);
    MEMORY[0x19AEA52F8](&v123, &v127, &v126, 0);
    WebCore::SQLiteStatement::columnText(v10, 3, buf);
    v17 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
    {
      v18 = *(_QWORD *)(*(_QWORD *)buf + 8);
      v17 = *(unsigned int *)(*(_QWORD *)buf + 4);
      v19 = ((unint64_t)*(unsigned int *)(*(_QWORD *)buf + 16) >> 2) & 1;
    }
    else
    {
      v18 = 0;
      v19 = 1;
    }
    WebCore::SecurityOriginData::fromDatabaseIdentifier(v18, (const char *)(v17 | (v19 << 32)), (uint64_t)v166, v16);
    v21 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = WebCore::SQLiteStatement::columnDouble(v10, 4);
    WebCore::SQLiteStatement::columnText(v10, 5, buf);
    v25 = WebCore::convertStringToUpdateViaCache((WebCore *)buf, v23);
    v26 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v24);
      else
        *(_DWORD *)v26 -= 2;
    }
    WebCore::SQLiteStatement::columnText(v10, 6, buf);
    MEMORY[0x19AEA52D4](&v120, buf, 0);
    v28 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }
    WebCore::SQLiteStatement::columnText(v10, 7, buf);
    v31 = WebCore::convertStringToWorkerType((WebCore *)buf, v29);
    v32 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v30);
      else
        *(_DWORD *)v32 -= 2;
    }
    LOBYTE(v115) = 0;
    v119 = 0;
    WebCore::SQLiteStatement::columnBlobAsSpan(v10, 8);
    if (v33)
    {
      WTF::Persistence::Decoder::Decoder();
      WTF::Persistence::Decoder::operator>><WebCore::ContentSecurityPolicyResponseHeaders,(void *)0>((uint64_t)buf, (uint64_t)&v115);
      if (!v119)
      {
        v44 = off_1ECE7CA18;
        if (os_log_type_enabled((os_log_t)off_1ECE7CA18, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v154 = 0;
          _os_log_error_impl(IdentifierInternal, v44, OS_LOG_TYPE_ERROR, "SWRegistrationDatabase::importRegistrations failed to decode contentSecurityPolicy", v154, 2u);
        }
        WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)buf);
        goto LABEL_71;
      }
      WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)buf);
    }
    LOBYTE(v112) = 0;
    v114 = 0;
    WebCore::SQLiteStatement::columnBlobAsSpan(v10, 9);
    if (v34)
    {
      WTF::Persistence::Decoder::Decoder();
      WTF::Persistence::Decoder::operator>><WebCore::CrossOriginEmbedderPolicy,(void *)0>((uint64_t)buf, (uint64_t)&v112);
      if (!v114)
      {
        v46 = off_1ECE7CA18;
        if (os_log_type_enabled((os_log_t)off_1ECE7CA18, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v154 = 0;
          _os_log_error_impl(IdentifierInternal, v46, OS_LOG_TYPE_ERROR, "SWRegistrationDatabase::importRegistrations failed to decode crossOriginEmbedderPolicy", v154, 2u);
        }
        WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)buf);
        goto LABEL_70;
      }
      WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)buf);
    }
    WebCore::SQLiteStatement::columnText(v10, 10, &v111);
    v109 = 0;
    memset(v110, 0, 13);
    WebCore::SQLiteStatement::columnBlobAsSpan(v10, 11);
    if (v35)
    {
      WTF::Persistence::Decoder::Decoder();
      LOBYTE(v105) = 0;
      v106 = 0;
      WTF::Persistence::Decoder::operator>><WTF::HashMap<WTF::URL,WebCore::ImportedScriptAttributes,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ImportedScriptAttributes>,WTF::HashTableTraits>,(void *)0>((uint64_t)buf, (uint64_t)&v105);
      if (!v106)
      {
        v49 = off_1ECE7CA18;
        if (os_log_type_enabled((os_log_t)off_1ECE7CA18, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v154 = 0;
          _os_log_error_impl(IdentifierInternal, v49, OS_LOG_TYPE_ERROR, "SWRegistrationDatabase::importRegistrations failed to decode scriptResourceMapWithoutScripts", v154, 2u);
        }
        WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)buf);
        goto LABEL_67;
      }
      v36 = (const WebCore::ServiceWorkerRegistrationKey *)WebCore::SWRegistrationDatabase::scriptStorage(this);
      if (!v170)
        goto LABEL_153;
      WebCore::populateScriptSourcesFromDisk(v154, v36, (const WTF::URL *)v169, &v105);
      WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::operator=((uint64_t)&v109, (uint64_t *)v154);
      WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::~HashMap((uint64_t)v154, v37);
      if (v105)
        WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ImportedScriptAttributes>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ImportedScriptAttributes>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ImportedScriptAttributes,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ImportedScriptAttributes>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::deallocateTable(v105, v38);
      WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)buf);
    }
    WebCore::SQLiteStatement::columnBlobAsSpan(v10, 12);
    LOBYTE(cf) = 0;
    v108 = 0;
    WTF::Persistence::Decoder::Decoder();
    WTF::Persistence::Decoder::operator>><WebCore::CertificateInfo,(void *)0>((uint64_t)&v105, (uint64_t)&cf);
    if (!v108)
    {
      v48 = off_1ECE7CA18;
      if (os_log_type_enabled((os_log_t)off_1ECE7CA18, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(IdentifierInternal, v48, OS_LOG_TYPE_ERROR, "SWRegistrationDatabase::importRegistrations failed to decode certificateInfo", buf, 2u);
      }
LABEL_51:
      WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)&v105);
      if (!v108 || (v36 = (const WebCore::ServiceWorkerRegistrationKey *)cf, cf = 0, !v36))
      {
LABEL_67:
        WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::~HashMap((uint64_t)&v109, v41);
        v50 = v111;
        v111 = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 2)
            WTF::StringImpl::destroy(v50, v47);
          else
            *(_DWORD *)v50 -= 2;
        }
LABEL_70:
        std::optional<WebCore::CrossOriginEmbedderPolicy>::~optional((uint64_t)&v112, v47);
LABEL_71:
        std::optional<WebCore::ContentSecurityPolicyResponseHeaders>::~optional((uint64_t)&v115, v45);
        v51 = v120;
        v120 = 0;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2)
            WTF::StringImpl::destroy(v51, v43);
          else
            *(_DWORD *)v51 -= 2;
        }
        if (v168 && v167 != -1)
          ((void (*)(uint8_t *, _BYTE *))off_1E3482200[v167])(buf, v166);
        v52 = v123;
        v123 = 0;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
            WTF::StringImpl::destroy(v52, v43);
          else
            *(_DWORD *)v52 -= 2;
        }
        v53 = v126;
        v126 = 0;
        if (v53)
        {
          if (*(_DWORD *)v53 == 2)
            WTF::StringImpl::destroy(v53, v43);
          else
            *(_DWORD *)v53 -= 2;
        }
        v54 = v127;
        v127 = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, v43);
          else
            *(_DWORD *)v54 -= 2;
        }
        goto LABEL_86;
      }
LABEL_154:
      CFRelease(v36);
      goto LABEL_67;
    }
    WebCore::SQLiteStatement::columnBlobAsSpan(v10, 13);
    v102[0] = 0;
    v104 = 0;
    WTF::Persistence::Decoder::Decoder();
    v36 = (const WebCore::ServiceWorkerRegistrationKey *)WTF::Persistence::Decoder::operator>><WebCore::NavigationPreloadState,(void *)0>((uint64_t)v101, (uint64_t)v102);
    if (!v104)
    {
      v55 = off_1ECE7CA18;
      if (!os_log_type_enabled((os_log_t)off_1ECE7CA18, OS_LOG_TYPE_ERROR))
        goto LABEL_50;
      *(_WORD *)buf = 0;
      v72 = IdentifierInternal;
      v73 = v55;
      v74 = "SWRegistrationDatabase::importRegistrations failed to decode navigationPreloadState";
      goto LABEL_123;
    }
    if ((v128 & 1) == 0 || !v168 || v25 < 0x100u || (v121 & 1) == 0 || v31 < 0x100u || (v124 & 1) == 0)
    {
      v39 = off_1ECE7CA18;
      if (!os_log_type_enabled((os_log_t)off_1ECE7CA18, OS_LOG_TYPE_ERROR))
      {
LABEL_50:
        WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)v101);
        WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v102, v40);
        goto LABEL_51;
      }
      *(_WORD *)buf = 0;
      v72 = IdentifierInternal;
      v73 = v39;
      v74 = "SWRegistrationDatabase::importRegistrations failed to decode part of the registration";
LABEL_123:
      _os_log_error_impl(v72, v73, OS_LOG_TYPE_ERROR, v74, buf, 2u);
      goto LABEL_50;
    }
    if (v170)
    {
      if ((WebCore::operator==((uint64_t)v169, (uint64_t)v166) & 1) == 0)
      {
        v71 = off_1ECE7CA18;
        if (!os_log_type_enabled((os_log_t)off_1ECE7CA18, OS_LOG_TYPE_ERROR))
          goto LABEL_50;
        *(_WORD *)buf = 0;
        v72 = &dword_1940B8000;
        v74 = "SWRegistrationDatabase::importRegistrations found inconsistent registration";
        v73 = v71;
        goto LABEL_123;
      }
      v36 = (const WebCore::ServiceWorkerRegistrationKey *)WebCore::SWRegistrationDatabase::scriptStorage(this);
      if (v170)
      {
        WebCore::SWScriptStorage::retrieve((WebCore::SWScriptStorage *)&v100, v36, (const WTF::URL *)v169);
        if (!v100)
        {
          v75 = off_1ECE7CA18;
          if (!os_log_type_enabled((os_log_t)off_1ECE7CA18, OS_LOG_TYPE_ERROR))
            goto LABEL_141;
          WTF::String::utf8();
          v77 = *(_QWORD *)v154 ? *(_QWORD *)v154 + 16 : 0;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)(v5 + 4) = v77;
          _os_log_error_impl(&dword_1940B8000, v75, OS_LOG_TYPE_ERROR, "SWRegistrationDatabase::importRegistrations failed to retrieve main script for %s from disk", buf, 0xCu);
          v78 = *(WTF::StringImpl **)v154;
          *(_QWORD *)v154 = 0;
          if (!v78)
            goto LABEL_141;
          v79 = *(_DWORD *)v78 - 1;
          if (*(_DWORD *)v78 == 1)
          {
            WTF::fastFree(v78, v76);
LABEL_141:
            WebCore::ScriptBuffer::~ScriptBuffer((WebCore::ScriptBuffer *)&v100, v76);
            goto LABEL_50;
          }
LABEL_140:
          *(_DWORD *)v78 = v79;
          goto LABEL_141;
        }
        IdentifierInternal = (int *)WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
        v36 = (const WebCore::ServiceWorkerRegistrationKey *)WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
        v5 = (uint8_t *)v36;
        v93 = IdentifierInternal;
        v94[0] = IdentifierInternal;
        v94[1] = v36;
        v56 = v120;
        if (v120)
          *(_DWORD *)v120 += 2;
        v95 = v56;
        v96 = v121;
        v97 = v122;
        v98 = 4;
        v99 = v31;
        if (v170)
        {
          IdentifierInternal = (int *)v9;
          v9 = v165;
          WebCore::ServiceWorkerRegistrationKey::ServiceWorkerRegistrationKey((uint64_t)v154, (uint64_t)v169);
          v57 = v123;
          v123 = 0;
          v155 = v5;
          v156 = v57;
          v157 = v124;
          v158 = v125;
          LODWORD(v124) = v124 & 0xFFFFFFFE;
          v159 = v25;
          v160 = v22;
          v161 = 0;
          v162 = 0;
          v163 = 0;
          v164 = 0;
          std::optional<WebCore::ServiceWorkerData>::optional[abi:sn180100]<WebCore::ServiceWorkerData,0>((uint64_t)v165, (uint64_t)v94);
          buf[0] = 0;
          v133[8] = 0;
          v36 = (const WebCore::ServiceWorkerRegistrationKey *)WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)v134, (uint64_t)v154);
          v58 = v100;
          v100 = 0;
          v134[44] = v93;
          v134[45] = v58;
          if (v108)
          {
            v59 = cf;
            cf = 0;
            v134[46] = v59;
            v5 = buf;
            if (v119)
            {
              v134[47] = v115;
              v60 = v116;
              v115 = 0;
              v116 = 0;
              v134[48] = v60;
              v135 = v117;
              v136 = v118;
              if (v114)
              {
                v137 = v112;
                v61 = v113;
                v113 = 0uLL;
                v138 = v61;
                v62 = v111;
                v111 = 0;
                v63 = v120;
                v120 = 0;
                v139 = v62;
                v140 = v63;
                v141 = v121;
                v142 = v122;
                LODWORD(v121) = v121 & 0xFFFFFFFE;
                v143 = v31;
                v144 = 257;
                v145 = 1;
                v146 = v109;
                *(_QWORD *)&v61 = v110[0];
                v109 = 0;
                memset(v110, 0, 13);
                v147 = v61;
                v148 = v110[1];
                v149 = BYTE4(v110[1]);
                v150 = 0;
                v151 = 0;
                if (v104)
                {
                  v9 = (const char *)IdentifierInternal;
                  v152 = v102[0];
                  v64 = v103;
                  v103 = 0;
                  v153 = v64;
                  v65 = HIDWORD(v130);
                  if (HIDWORD(v130) == (_DWORD)v130)
                  {
                    WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServiceWorkerContextData>((uint64_t)&v129, (unint64_t)buf);
                  }
                  else
                  {
                    WebCore::ServiceWorkerContextData::ServiceWorkerContextData(v129 + 592 * HIDWORD(v130), (__int128 *)buf);
                    HIDWORD(v130) = v65 + 1;
                  }
                  IdentifierInternal = &dword_1940B8000;
                  WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)buf, v66);
                  WebCore::ServiceWorkerRegistrationData::~ServiceWorkerRegistrationData((WebCore::ServiceWorkerRegistrationData *)v154, v86);
                  v78 = v95;
                  v95 = 0;
                  if (!v78)
                    goto LABEL_141;
                  v79 = *(_DWORD *)v78 - 2;
                  if (*(_DWORD *)v78 == 2)
                  {
                    WTF::StringImpl::destroy(v78, (WTF::StringImpl *)v76);
                    goto LABEL_141;
                  }
                  goto LABEL_140;
                }
              }
            }
          }
        }
      }
    }
LABEL_153:
    __break(1u);
    goto LABEL_154;
  }
  v70 = off_1ECE7CA18;
  if (os_log_type_enabled((os_log_t)off_1ECE7CA18, OS_LOG_TYPE_ERROR))
  {
    v80 = *((_QWORD *)this + 1);
    v81 = *(sqlite3 **)(v80 + 8);
    if (v81)
    {
      v82 = sqlite3_errcode(v81);
      v80 = *((_QWORD *)this + 1);
      v83 = *(sqlite3 **)(v80 + 8);
      if (v83)
      {
        v85 = sqlite3_errmsg(v83);
LABEL_136:
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = v82;
        *(_WORD *)v133 = 2080;
        *(_QWORD *)&v133[2] = v85;
        _os_log_error_impl(&dword_1940B8000, v70, OS_LOG_TYPE_ERROR, "SWRegistrationDatabase::importRegistrations failed on creating statement (%d) - %s", buf, 0x12u);
        goto LABEL_119;
      }
    }
    else
    {
      v82 = *(_DWORD *)(v80 + 52);
    }
    v84 = *(_QWORD *)(v80 + 56);
    if (v84)
      v85 = (const char *)(v84 + 16);
    else
      v85 = "database is not open";
    goto LABEL_136;
  }
LABEL_119:
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
LABEL_117:
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v131);
}

void WebCore::SWRegistrationDatabase::~SWRegistrationDatabase(WebCore::SWRegistrationDatabase *this)
{
  WTF::StringImpl *v2;
  void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  WebCore::SWRegistrationDatabase::close((WTF **)this);
  std::unique_ptr<WebCore::SWScriptStorage>::~unique_ptr[abi:sn180100]((WTF **)this + 4, v2);
  WTF::Vector<std::unique_ptr<WebCore::SQLiteStatement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, v3);
  std::unique_ptr<WebCore::SQLiteDatabase>::~unique_ptr[abi:sn180100]((uint64_t *)this + 1);
  v5 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
}

uint64_t WebCore::SWRegistrationDatabase::clearAllRegistrations(WTF **this)
{
  const WTF::String *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;

  WebCore::SWRegistrationDatabase::close(this);
  WebCore::databaseFilePath((WTF::StringImpl *)&v9, *this);
  WebCore::SQLiteFileSystem::deleteDatabaseFile(&v9, v2);
  v4 = v9;
  v9 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::scriptDirectoryPath(&v9, *this);
  WTF::FileSystemImpl::deleteNonEmptyDirectory((WTF::FileSystemImpl *)&v9, v5);
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  return WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)this, v6);
}

WTF::StringImpl *WebCore::databaseFilePath(WTF::StringImpl *this, const WTF::String *a2)
{
  _DWORD *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (a2 && *((_DWORD *)a2 + 1))
  {
    WTF::makeString<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral>(&v4);
    WTF::FileSystemImpl::pathByAppendingComponent();
    this = v4;
    v4 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v3);
      else
        *(_DWORD *)this -= 2;
    }
  }
  else
  {
    v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v2 += 2;
    *(_QWORD *)this = v2;
  }
  return this;
}

WTF **WebCore::SWRegistrationDatabase::close(WTF **this)
{
  uint64_t v1;
  WTF::StringImpl *v2;

  if (*((_DWORD *)this + 7)
    && (v1 = (uint64_t)this,
        this = (WTF **)WTF::UniqueRef<WebCore::SQLiteStatement>::~UniqueRef((sqlite3_stmt ***)this[2]),
        *(_DWORD *)(v1 + 28) >= 2u)
    && (this = (WTF **)WTF::UniqueRef<WebCore::SQLiteStatement>::~UniqueRef((sqlite3_stmt ***)(*(_QWORD *)(v1 + 16) + 8)),
        *(_DWORD *)(v1 + 28) >= 3u))
  {
    WTF::UniqueRef<WebCore::SQLiteStatement>::~UniqueRef((sqlite3_stmt ***)(*(_QWORD *)(v1 + 16) + 16));
    std::unique_ptr<WebCore::SQLiteDatabase>::~unique_ptr[abi:sn180100]((uint64_t *)(v1 + 8));
    return std::unique_ptr<WebCore::SWScriptStorage>::~unique_ptr[abi:sn180100]((WTF **)(v1 + 32), v2);
  }
  else
  {
    __break(0xC471u);
  }
  return this;
}

_QWORD *WebCore::scriptDirectoryPath(_QWORD *this, const WTF::String *a2)
{
  _DWORD *v2;

  if (a2 && *((_DWORD *)a2 + 1))
    return (_QWORD *)WTF::FileSystemImpl::pathByAppendingComponent();
  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *this = v2;
  return this;
}

uint64_t WebCore::SQLiteFileSystem::deleteDatabaseFile(WTF::StringImpl **this, const WTF::String *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  const WTF::String *v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  const WTF::String *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  v3 = *this;
  if (*this)
    *(_DWORD *)v3 += 2;
  v25 = v3;
  WTF::makeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v25, (int8x16_t *)"", 1, &v26);
  v5 = v25;
  v25 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v26, v4);
  v8 = WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v26, v6);
  v9 = v26;
  v26 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *this;
  if (*this)
    *(_DWORD *)v10 += 2;
  v25 = v10;
  WTF::makeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v25, (int8x16_t *)"-shm", 5, &v26);
  v12 = v25;
  v25 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v26, v11);
  v15 = WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v26, v13);
  v16 = v26;
  v26 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *this;
  if (*this)
    *(_DWORD *)v17 += 2;
  v25 = v17;
  WTF::makeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v25, (int8x16_t *)"-wal", 5, &v26);
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v26, v18);
  v22 = WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v26, v20);
  v23 = v26;
  v26 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  return (v8 | v15 | v22) ^ 1u;
}

uint64_t WebCore::SWRegistrationDatabase::prepareDatabase(uint64_t *a1, char a2)
{
  uint64_t v4;
  uint64_t *v5;
  const WTF::String *v6;
  uint64_t v7;
  const WTF::String *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  const WTF::String *v14;
  sqlite3 *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  WTF *v19;
  WTF::StringImpl *v20;
  _BYTE buf[24];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a1 + 1;
  v4 = a1[1];
  if (v4 && *(_QWORD *)(v4 + 8))
    return 1;
  v6 = (const WTF::String *)*a1;
  if (!*a1 || !*((_DWORD *)v6 + 1))
    return 0;
  WebCore::databaseFilePath((WTF::StringImpl *)&v20, v6);
  v10 = WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v20, v9);
  if ((a2 & 1) == 0 && !v10)
    goto LABEL_8;
  v13 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)buf = WebCore::SQLiteDatabase::SQLiteDatabase(v13);
  std::unique_ptr<WebCore::SQLiteDatabase>::operator=[abi:sn180100](v5, (uint64_t *)buf);
  std::unique_ptr<WebCore::SQLiteDatabase>::~unique_ptr[abi:sn180100]((uint64_t *)buf);
  WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)a1, v14);
  if ((WebCore::SQLiteDatabase::open(a1[1], (WTF::FileSystemImpl *)&v20, 2u, 0) & 1) != 0)
  {
    if ((WebCore::SWRegistrationDatabase::ensureValidRecordsTable((WebCore::SWRegistrationDatabase *)a1) & 1) != 0)
    {
LABEL_8:
      v7 = 1;
      goto LABEL_9;
    }
  }
  else
  {
    v15 = *(sqlite3 **)(*v5 + 8);
    if (v15)
      sqlite3_errcode(v15);
    v16 = off_1ECE7CA18;
    if (os_log_type_enabled((os_log_t)off_1ECE7CA18, OS_LOG_TYPE_ERROR))
    {
      WTF::String::utf8();
      v17 = v19 ? (uint64_t)v19 + 16 : 0;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v17;
      _os_log_error_impl(&dword_1940B8000, v16, OS_LOG_TYPE_ERROR, "SWRegistrationDatabase::prepareDatabase failed to open database at '%s'", buf, 0xCu);
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
          WTF::fastFree(v19, v18);
        else
          --*(_DWORD *)v19;
      }
    }
  }
  std::unique_ptr<WebCore::SQLiteDatabase>::~unique_ptr[abi:sn180100](v5);
  v7 = 0;
LABEL_9:
  v12 = v20;
  v20 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  return v7;
}

uint64_t WTF::Vector<std::unique_ptr<WebCore::SQLiteStatement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  sqlite3_stmt ***v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(sqlite3_stmt ****)a1;
    v5 = 8 * v3;
    do
    {
      v4 = (sqlite3_stmt ***)(WTF::UniqueRef<WebCore::SQLiteStatement>::~UniqueRef(v4) + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v3;
  WTF *v4;
  WebCore::ServiceWorkerContextData *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v6 = *(WebCore::ServiceWorkerContextData **)a1;
    v7 = 592 * v3;
    do
    {
      WebCore::ServiceWorkerContextData::~ServiceWorkerContextData(v6, a2);
      v6 = (WebCore::ServiceWorkerContextData *)(v8 + 592);
      v7 -= 592;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::MonotonicTime *WebCore::Settings::setHiddenPageDOMTimerThrottlingAutoIncreases(WTF::MonotonicTime *this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 85);
  if (((((v2 & 0x10000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *((unsigned int *)this + 180) | ((unint64_t)*((unsigned __int8 *)this + 724) << 32);
    v4 = *((_QWORD *)this + 89);
    v5 = *((_QWORD *)this + 88);
    v6 = *((_QWORD *)this + 87);
    v7 = *((_QWORD *)this + 86);
    v8 = *((_QWORD *)this + 84);
    v9 = 0x10000;
    if (!a2)
      v9 = 0;
    *((_QWORD *)this + 83) = *((_QWORD *)this + 83);
    *((_QWORD *)this + 84) = v8;
    *((_QWORD *)this + 85) = v2 & 0xFFFFFFFFFFFEFFFFLL | v9;
    *((_QWORD *)this + 86) = v7;
    *((_QWORD *)this + 87) = v6;
    *((_QWORD *)this + 88) = v5;
    *((_QWORD *)this + 89) = v4;
    *((_DWORD *)this + 180) = v3;
    *((_BYTE *)this + 724) = BYTE4(v3);
    return WebCore::SettingsBase::hiddenPageDOMTimerThrottlingStateChanged(this);
  }
  return this;
}

uint64_t WebCore::Settings::setHiddenPageCSSAnimationSuspensionEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 680);
  if (((((v2 & 0x8000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 712);
    v5 = *(_QWORD *)(this + 704);
    v6 = *(_QWORD *)(this + 696);
    v7 = *(_QWORD *)(this + 688);
    v8 = *(_QWORD *)(this + 672);
    v9 = 0x8000;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 664) = *(_QWORD *)(this + 664);
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 680) = v2 & 0xFFFFFFFFFFFF7FFFLL | v9;
    *(_QWORD *)(this + 688) = v7;
    *(_QWORD *)(this + 696) = v6;
    *(_QWORD *)(this + 704) = v5;
    *(_QWORD *)(this + 712) = v4;
    *(_DWORD *)(this + 720) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    return WebCore::SettingsBase::hiddenPageCSSAnimationSuspensionEnabledChanged(this);
  }
  return this;
}

uint64_t WebCore::Settings::setLegacyLineLayoutVisualCoverageEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(this + 680);
  if (((((v2 & 0x4000000000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 712);
    v5 = *(_QWORD *)(this + 704);
    v6 = *(_QWORD *)(this + 696);
    v7 = *(_QWORD *)(this + 688);
    v8 = *(_QWORD *)(this + 672);
    v9 = 0x4000000000000;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 664) = *(_QWORD *)(this + 664);
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 680) = v2 & 0xFFFBFFFFFFFFFFFFLL | v9;
    *(_QWORD *)(this + 688) = v7;
    *(_QWORD *)(this + 696) = v6;
    *(_QWORD *)(this + 704) = v5;
    *(_QWORD *)(this + 712) = v4;
    *(_DWORD *)(this + 720) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    v10 = *(_QWORD *)(this + 8);
    if (v10)
    {
      this = *(_QWORD *)(v10 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

uint64_t WebCore::Settings::setLegacyOverflowScrollingTouchEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 712);
  if (((((v2 & 0x4000000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 704);
    v5 = *(_QWORD *)(this + 696);
    v6 = *(_QWORD *)(this + 688);
    v7 = *(_QWORD *)(this + 680);
    v8 = *(_QWORD *)(this + 672);
    v9 = 0x4000000000;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 664) = *(_QWORD *)(this + 664);
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 680) = v7;
    *(_QWORD *)(this + 688) = v6;
    *(_QWORD *)(this + 696) = v5;
    *(_QWORD *)(this + 704) = v4;
    *(_DWORD *)(this + 720) = v3;
    *(_QWORD *)(this + 712) = v2 & 0xFFFFFFBFFFFFFFFFLL | v9;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    return WebCore::SettingsBase::setNeedsRelayoutAllFrames(this);
  }
  return this;
}

WTF::MonotonicTime *WebCore::Settings::setHiddenPageDOMTimerThrottlingEnabled(WTF::MonotonicTime *this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 85);
  if (((((v2 & 0x20000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *((unsigned int *)this + 180) | ((unint64_t)*((unsigned __int8 *)this + 724) << 32);
    v4 = *((_QWORD *)this + 89);
    v5 = *((_QWORD *)this + 88);
    v6 = *((_QWORD *)this + 87);
    v7 = *((_QWORD *)this + 86);
    v8 = *((_QWORD *)this + 84);
    v9 = 0x20000;
    if (!a2)
      v9 = 0;
    *((_QWORD *)this + 83) = *((_QWORD *)this + 83);
    *((_QWORD *)this + 84) = v8;
    *((_QWORD *)this + 85) = v2 & 0xFFFFFFFFFFFDFFFFLL | v9;
    *((_QWORD *)this + 86) = v7;
    *((_QWORD *)this + 87) = v6;
    *((_QWORD *)this + 88) = v5;
    *((_QWORD *)this + 89) = v4;
    *((_DWORD *)this + 180) = v3;
    *((_BYTE *)this + 724) = BYTE4(v3);
    return WebCore::SettingsBase::hiddenPageDOMTimerThrottlingStateChanged(this);
  }
  return this;
}

uint64_t WebCore::Settings::setPunchOutWhiteBackgroundsInDarkMode(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(this + 688);
  if (((((v2 & 0x2000000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 712);
    v5 = *(_QWORD *)(this + 704);
    v6 = *(_QWORD *)(this + 696);
    v7 = *(_QWORD *)(this + 680);
    v8 = *(_QWORD *)(this + 672);
    v9 = 0x2000000000;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 664) = *(_QWORD *)(this + 664);
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 696) = v6;
    *(_QWORD *)(this + 704) = v5;
    *(_QWORD *)(this + 680) = v7;
    *(_QWORD *)(this + 688) = v2 & 0xFFFFFFDFFFFFFFFFLL | v9;
    *(_QWORD *)(this + 712) = v4;
    *(_DWORD *)(this + 720) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    v10 = *(_QWORD *)(this + 8);
    if (v10)
    {
      this = *(_QWORD *)(v10 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

_QWORD *WebCore::Settings::setTextAutosizingUsesIdempotentMode(_QWORD *this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = this[89];
  if (((((v2 & 0x400000000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *((unsigned int *)this + 180) | ((unint64_t)*((unsigned __int8 *)this + 724) << 32);
    v4 = this[88];
    v5 = this[87];
    v6 = this[86];
    v7 = this[85];
    v8 = this[84];
    v9 = 0x400000000000;
    if (!a2)
      v9 = 0;
    this[83] = this[83];
    this[84] = v8;
    this[85] = v7;
    this[86] = v6;
    this[87] = v5;
    this[88] = v4;
    *((_DWORD *)this + 180) = v3;
    this[89] = v2 & 0xFFFFBFFFFFFFFFFFLL | v9;
    *((_BYTE *)this + 724) = BYTE4(v3);
    return WebCore::SettingsBase::textAutosizingUsesIdempotentModeChanged(this);
  }
  return this;
}

uint64_t WebCore::Settings::setShouldEnableTextAutosizingBoost(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 712);
  if (((((v2 & 0x80000000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 704);
    v5 = *(_QWORD *)(this + 696);
    v6 = *(_QWORD *)(this + 688);
    v7 = *(_QWORD *)(this + 680);
    v8 = *(_QWORD *)(this + 672);
    v9 = 0x80000000000;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 664) = *(_QWORD *)(this + 664);
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 680) = v7;
    *(_QWORD *)(this + 688) = v6;
    *(_QWORD *)(this + 696) = v5;
    *(_QWORD *)(this + 704) = v4;
    *(_DWORD *)(this + 720) = v3;
    *(_QWORD *)(this + 712) = v2 & 0xFFFFF7FFFFFFFFFFLL | v9;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    return WebCore::SettingsBase::shouldEnableTextAutosizingBoostChanged(this);
  }
  return this;
}

uint64_t WebCore::Settings::setShouldAllowUserInstalledFonts(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(this + 696);
  if (((((v2 & 0x800) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 712);
    v5 = *(_QWORD *)(this + 704);
    v6 = *(_QWORD *)(this + 688);
    v7 = *(_QWORD *)(this + 680);
    v8 = *(_QWORD *)(this + 672);
    v9 = 2048;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 664) = *(_QWORD *)(this + 664);
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 680) = v7;
    *(_QWORD *)(this + 688) = v6;
    *(_QWORD *)(this + 704) = v5;
    *(_QWORD *)(this + 712) = v4;
    *(_QWORD *)(this + 696) = v2 & 0xFFFFFFFFFFFFF7FFLL | v9;
    *(_DWORD *)(this + 720) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    v10 = *(_QWORD *)(this + 8);
    if (v10)
    {
      this = *(_QWORD *)(v10 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

uint64_t WebCore::Settings::setGraphicsContextFiltersEnabled(uint64_t this, int a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;

  v2 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
  if (((((v2 & 0x4000000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(_QWORD *)(this + 712);
    v4 = *(_QWORD *)(this + 704);
    v5 = *(_QWORD *)(this + 696);
    v6 = *(_QWORD *)(this + 688);
    v7 = *(_QWORD *)(this + 680);
    v8 = *(_QWORD *)(this + 672);
    v9 = 64;
    if (!a2)
      v9 = 0;
    v10 = v2 & 0xFFFFFFBFFFFFFFFFLL;
    *(_QWORD *)(this + 664) = *(_QWORD *)(this + 664);
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 680) = v7;
    *(_QWORD *)(this + 688) = v6;
    *(_QWORD *)(this + 696) = v5;
    *(_QWORD *)(this + 704) = v4;
    *(_QWORD *)(this + 712) = v3;
    *(_DWORD *)(this + 720) = v10;
    *(_BYTE *)(this + 724) = BYTE4(v10) | v9;
    return WebCore::SettingsBase::setNeedsRelayoutAllFrames(this);
  }
  return this;
}

uint64_t WebCore::Settings::setCSSWordBreakAutoPhraseEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(this + 672);
  if (((((v2 & 0x2000000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 712);
    v5 = *(_QWORD *)(this + 704);
    v6 = *(_QWORD *)(this + 696);
    v7 = *(_QWORD *)(this + 688);
    v8 = *(_QWORD *)(this + 664);
    v9 = 0x2000000000;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 680) = *(_QWORD *)(this + 680);
    *(_QWORD *)(this + 688) = v7;
    *(_QWORD *)(this + 664) = v8;
    *(_QWORD *)(this + 672) = v2 & 0xFFFFFFDFFFFFFFFFLL | v9;
    *(_QWORD *)(this + 696) = v6;
    *(_QWORD *)(this + 704) = v5;
    *(_QWORD *)(this + 712) = v4;
    *(_DWORD *)(this + 720) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    v10 = *(_QWORD *)(this + 8);
    if (v10)
    {
      this = *(_QWORD *)(v10 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

uint64_t WebCore::Settings::setAsyncOverflowScrollingEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 664);
  if (((((int)v2 >= 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 712);
    v5 = *(_QWORD *)(this + 704);
    v6 = *(_QWORD *)(this + 696);
    v7 = *(_QWORD *)(this + 688);
    v8 = *(_QWORD *)(this + 672);
    v9 = 0x80000000;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 680) = *(_QWORD *)(this + 680);
    *(_QWORD *)(this + 688) = v7;
    *(_QWORD *)(this + 664) = v2 & 0xFFFFFFFF7FFFFFFFLL | v9;
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 696) = v6;
    *(_QWORD *)(this + 704) = v5;
    *(_QWORD *)(this + 712) = v4;
    *(_DWORD *)(this + 720) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    return WebCore::SettingsBase::setNeedsRelayoutAllFrames(this);
  }
  return this;
}

uint64_t WebCore::Settings::setAcceleratedCompositingEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(this + 664);
  if (((((v2 & 0x10) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 712);
    v5 = *(_QWORD *)(this + 704);
    v6 = *(_QWORD *)(this + 696);
    v7 = *(_QWORD *)(this + 688);
    v8 = *(_QWORD *)(this + 672);
    v9 = 16;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 680) = *(_QWORD *)(this + 680);
    *(_QWORD *)(this + 688) = v7;
    *(_QWORD *)(this + 664) = v2 & 0xFFFFFFFFFFFFFFEFLL | v9;
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 696) = v6;
    *(_QWORD *)(this + 704) = v5;
    *(_QWORD *)(this + 712) = v4;
    *(_DWORD *)(this + 720) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    v10 = *(_QWORD *)(this + 8);
    if (v10)
    {
      this = *(_QWORD *)(v10 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

uint64_t WebCore::Settings::setICECandidateFilteringEnabled(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 680);
  if (((((v2 & 0x400000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 712);
    v5 = *(_QWORD *)(this + 704);
    v6 = *(_QWORD *)(this + 696);
    v7 = *(_QWORD *)(this + 688);
    v8 = *(_QWORD *)(this + 672);
    v9 = 0x400000;
    if (!(_DWORD)a2)
      v9 = 0;
    *(_QWORD *)(this + 664) = *(_QWORD *)(this + 664);
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 680) = v2 & 0xFFFFFFFFFFBFFFFFLL | v9;
    *(_QWORD *)(this + 688) = v7;
    *(_QWORD *)(this + 696) = v6;
    *(_QWORD *)(this + 704) = v5;
    *(_QWORD *)(this + 712) = v4;
    *(_DWORD *)(this + 720) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    return WebCore::SettingsBase::iceCandidateFilteringEnabledChanged(this, a2);
  }
  return this;
}

WebCore::PageOverlay **WebCore::Settings::setResourceUsageOverlayVisible(WebCore::PageOverlay **this, int a2)
{
  unint64_t v2;
  unint64_t v3;
  WebCore::PageOverlay *v4;
  WebCore::PageOverlay *v5;
  WebCore::PageOverlay *v6;
  WebCore::PageOverlay *v7;
  WebCore::PageOverlay *v8;
  uint64_t v9;

  v2 = (unint64_t)this[89];
  if (((((v2 & 0x20000000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *((unsigned int *)this + 180) | ((unint64_t)*((unsigned __int8 *)this + 724) << 32);
    v4 = this[88];
    v5 = this[87];
    v6 = this[86];
    v7 = this[85];
    v8 = this[84];
    v9 = 0x20000000000;
    if (!a2)
      v9 = 0;
    this[83] = this[83];
    this[84] = v8;
    this[85] = v7;
    this[86] = v6;
    this[87] = v5;
    this[88] = v4;
    *((_DWORD *)this + 180) = v3;
    this[89] = (WebCore::PageOverlay *)(v2 & 0xFFFFFDFFFFFFFFFFLL | v9);
    *((_BYTE *)this + 724) = BYTE4(v3);
    return WebCore::SettingsBase::resourceUsageOverlayVisibleChanged(this);
  }
  return this;
}

WTF::MonotonicTime *WebCore::Settings::setLayerBasedSVGEngineEnabled(WTF::MonotonicTime *this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 85);
  if (((((v2 & 0x800000000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *((unsigned int *)this + 180) | ((unint64_t)*((unsigned __int8 *)this + 724) << 32);
    v4 = *((_QWORD *)this + 89);
    v5 = *((_QWORD *)this + 88);
    v6 = *((_QWORD *)this + 87);
    v7 = *((_QWORD *)this + 86);
    v8 = *((_QWORD *)this + 84);
    v9 = 0x800000000000;
    if (!a2)
      v9 = 0;
    *((_QWORD *)this + 83) = *((_QWORD *)this + 83);
    *((_QWORD *)this + 84) = v8;
    *((_QWORD *)this + 85) = v2 & 0xFFFF7FFFFFFFFFFFLL | v9;
    *((_QWORD *)this + 86) = v7;
    *((_QWORD *)this + 87) = v6;
    *((_QWORD *)this + 88) = v5;
    *((_QWORD *)this + 89) = v4;
    *((_DWORD *)this + 180) = v3;
    *((_BYTE *)this + 724) = BYTE4(v3);
    return WebCore::SettingsBase::layerBasedSVGEngineEnabledChanged(this);
  }
  return this;
}

uint64_t WebCore::Settings::setAuthorAndUserStylesEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(this + 664);
  if (((((v2 & 0x400000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 712);
    v5 = *(_QWORD *)(this + 704);
    v6 = *(_QWORD *)(this + 696);
    v7 = *(_QWORD *)(this + 688);
    v8 = *(_QWORD *)(this + 672);
    v9 = 0x400000000;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 680) = *(_QWORD *)(this + 680);
    *(_QWORD *)(this + 688) = v7;
    *(_QWORD *)(this + 664) = v2 & 0xFFFFFFFBFFFFFFFFLL | v9;
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 696) = v6;
    *(_QWORD *)(this + 704) = v5;
    *(_QWORD *)(this + 712) = v4;
    *(_DWORD *)(this + 720) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    v10 = *(_QWORD *)(this + 8);
    if (v10)
    {
      this = *(_QWORD *)(v10 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

uint64_t WebCore::Settings::setAsyncFrameScrollingEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 664);
  if (((((v2 & 0x40000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 712);
    v5 = *(_QWORD *)(this + 704);
    v6 = *(_QWORD *)(this + 696);
    v7 = *(_QWORD *)(this + 688);
    v8 = *(_QWORD *)(this + 672);
    v9 = 0x40000000;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 680) = *(_QWORD *)(this + 680);
    *(_QWORD *)(this + 688) = v7;
    *(_QWORD *)(this + 664) = v2 & 0xFFFFFFFFBFFFFFFFLL | v9;
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 696) = v6;
    *(_QWORD *)(this + 704) = v5;
    *(_QWORD *)(this + 712) = v4;
    *(_DWORD *)(this + 720) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    return WebCore::SettingsBase::setNeedsRelayoutAllFrames(this);
  }
  return this;
}

uint64_t WebCore::Settings::setMockCaptureDevicesEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 712);
  if (((((v2 & 0x4000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 704);
    v5 = *(_QWORD *)(this + 696);
    v6 = *(_QWORD *)(this + 688);
    v7 = *(_QWORD *)(this + 680);
    v8 = *(_QWORD *)(this + 672);
    v9 = 0x4000000;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 664) = *(_QWORD *)(this + 664);
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 680) = v7;
    *(_QWORD *)(this + 688) = v6;
    *(_QWORD *)(this + 696) = v5;
    *(_QWORD *)(this + 704) = v4;
    *(_DWORD *)(this + 720) = v3;
    *(_QWORD *)(this + 712) = v2 & 0xFFFFFFFFFBFFFFFFLL | v9;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    return WebCore::SettingsBase::mockCaptureDevicesEnabledChanged((WebCore::SettingsBase *)this);
  }
  return this;
}

uint64_t WebCore::Settings::setAcceleratedFiltersEnabled(uint64_t this, int a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;

  v2 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
  if (((((v2 & 0x2000000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(_QWORD *)(this + 712);
    v4 = *(_QWORD *)(this + 704);
    v5 = *(_QWORD *)(this + 696);
    v6 = *(_QWORD *)(this + 688);
    v7 = *(_QWORD *)(this + 680);
    v8 = *(_QWORD *)(this + 672);
    v9 = 32;
    if (!a2)
      v9 = 0;
    v10 = v2 & 0xFFFFFFDFFFFFFFFFLL;
    *(_QWORD *)(this + 664) = *(_QWORD *)(this + 664);
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 680) = v7;
    *(_QWORD *)(this + 688) = v6;
    *(_QWORD *)(this + 696) = v5;
    *(_QWORD *)(this + 704) = v4;
    *(_QWORD *)(this + 712) = v3;
    *(_DWORD *)(this + 720) = v10;
    *(_BYTE *)(this + 724) = BYTE4(v10) | v9;
    return WebCore::SettingsBase::setNeedsRelayoutAllFrames(this);
  }
  return this;
}

uint64_t WebCore::Settings::setLoadsImagesAutomatically(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 680);
  if (((((v2 & 0x2000000000000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 712);
    v5 = *(_QWORD *)(this + 704);
    v6 = *(_QWORD *)(this + 696);
    v7 = *(_QWORD *)(this + 688);
    v8 = *(_QWORD *)(this + 672);
    v9 = 0x2000000000000000;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 664) = *(_QWORD *)(this + 664);
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 680) = v2 & 0xDFFFFFFFFFFFFFFFLL | v9;
    *(_QWORD *)(this + 688) = v7;
    *(_QWORD *)(this + 696) = v6;
    *(_QWORD *)(this + 704) = v5;
    *(_QWORD *)(this + 712) = v4;
    *(_DWORD *)(this + 720) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    return WebCore::SettingsBase::imagesEnabledChanged((WebCore::SettingsBase *)this);
  }
  return this;
}

uint64_t WebCore::Settings::setVisualViewportEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(this + 704);
  if (((((v2 & 0x1000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 712);
    v5 = *(_QWORD *)(this + 696);
    v6 = *(_QWORD *)(this + 688);
    v7 = *(_QWORD *)(this + 680);
    v8 = *(_QWORD *)(this + 672);
    v9 = 4096;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 664) = *(_QWORD *)(this + 664);
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 680) = v7;
    *(_QWORD *)(this + 688) = v6;
    *(_QWORD *)(this + 704) = v2 & 0xFFFFFFFFFFFFEFFFLL | v9;
    *(_QWORD *)(this + 712) = v4;
    *(_QWORD *)(this + 696) = v5;
    *(_DWORD *)(this + 720) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    v10 = *(_QWORD *)(this + 8);
    if (v10)
    {
      this = *(_QWORD *)(v10 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

uint64_t WebCore::Settings::setTextAutosizingEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(this + 712);
  if (((((v2 & 0x100000000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 704);
    v5 = *(_QWORD *)(this + 696);
    v6 = *(_QWORD *)(this + 688);
    v7 = *(_QWORD *)(this + 680);
    v8 = *(_QWORD *)(this + 672);
    v9 = 0x100000000000;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 664) = *(_QWORD *)(this + 664);
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 680) = v7;
    *(_QWORD *)(this + 688) = v6;
    *(_QWORD *)(this + 696) = v5;
    *(_QWORD *)(this + 704) = v4;
    *(_DWORD *)(this + 720) = v3;
    *(_QWORD *)(this + 712) = v2 & 0xFFFFEFFFFFFFFFFFLL | v9;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    v10 = *(_QWORD *)(this + 8);
    if (v10)
    {
      this = *(_QWORD *)(v10 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

uint64_t WebCore::Settings::setTextAreasAreResizable(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(this + 696);
  if (((((v2 & 0x8000000000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 712);
    v5 = *(_QWORD *)(this + 704);
    v6 = *(_QWORD *)(this + 688);
    v7 = *(_QWORD *)(this + 680);
    v8 = *(_QWORD *)(this + 672);
    v9 = 0x8000000000000;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 664) = *(_QWORD *)(this + 664);
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 680) = v7;
    *(_QWORD *)(this + 688) = v6;
    *(_QWORD *)(this + 704) = v5;
    *(_QWORD *)(this + 712) = v4;
    *(_QWORD *)(this + 696) = v2 & 0xFFF7FFFFFFFFFFFFLL | v9;
    *(_DWORD *)(this + 720) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    v10 = *(_QWORD *)(this + 8);
    if (v10)
    {
      this = *(_QWORD *)(v10 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

WebCore::Page *WebCore::Settings::setDNSPrefetchingEnabled(WebCore::Page *this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 84);
  if (((((v2 & 0x10000000000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *((unsigned int *)this + 180) | ((unint64_t)*((unsigned __int8 *)this + 724) << 32);
    v4 = *((_QWORD *)this + 89);
    v5 = *((_QWORD *)this + 88);
    v6 = *((_QWORD *)this + 87);
    v7 = *((_QWORD *)this + 86);
    v8 = *((_QWORD *)this + 83);
    v9 = 0x10000000000000;
    if (!a2)
      v9 = 0;
    *((_QWORD *)this + 85) = *((_QWORD *)this + 85);
    *((_QWORD *)this + 86) = v7;
    *((_QWORD *)this + 83) = v8;
    *((_QWORD *)this + 84) = v2 & 0xFFEFFFFFFFFFFFFFLL | v9;
    *((_QWORD *)this + 87) = v6;
    *((_QWORD *)this + 88) = v5;
    *((_QWORD *)this + 89) = v4;
    *((_DWORD *)this + 180) = v3;
    *((_BYTE *)this + 724) = BYTE4(v3);
    return WebCore::SettingsBase::dnsPrefetchingEnabledChanged(this);
  }
  return this;
}

uint64_t *WebCore::Settings::setUsesBackForwardCache(uint64_t *this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = this[88];
  if (((((v2 & 0x20) == 0) ^ a2) & 1) == 0)
  {
    v3 = *((unsigned int *)this + 180) | ((unint64_t)*((unsigned __int8 *)this + 724) << 32);
    v4 = this[89];
    v5 = this[87];
    v6 = this[86];
    v7 = this[85];
    v8 = this[84];
    v9 = 32;
    if (!a2)
      v9 = 0;
    this[83] = this[83];
    this[84] = v8;
    this[85] = v7;
    this[86] = v6;
    this[88] = v2 & 0xFFFFFFFFFFFFFFDFLL | v9;
    this[89] = v4;
    this[87] = v5;
    *((_DWORD *)this + 180) = v3;
    *((_BYTE *)this + 724) = BYTE4(v3);
    return WebCore::SettingsBase::usesBackForwardCacheChanged(this);
  }
  return this;
}

uint64_t WebCore::Settings::setCanvasFiltersEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 664);
  if (((((v2 & 0x400000000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 712);
    v5 = *(_QWORD *)(this + 704);
    v6 = *(_QWORD *)(this + 696);
    v7 = *(_QWORD *)(this + 688);
    v8 = *(_QWORD *)(this + 672);
    v9 = 0x400000000000;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 680) = *(_QWORD *)(this + 680);
    *(_QWORD *)(this + 688) = v7;
    *(_QWORD *)(this + 664) = v2 & 0xFFFFBFFFFFFFFFFFLL | v9;
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 696) = v6;
    *(_QWORD *)(this + 704) = v5;
    *(_QWORD *)(this + 712) = v4;
    *(_DWORD *)(this + 720) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    return WebCore::SettingsBase::setNeedsRelayoutAllFrames(this);
  }
  return this;
}

uint64_t WebCore::Settings::setShowRepaintCounter(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(this + 696);
  if (((((int)v2 >= 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 712);
    v5 = *(_QWORD *)(this + 704);
    v6 = *(_QWORD *)(this + 688);
    v7 = *(_QWORD *)(this + 680);
    v8 = *(_QWORD *)(this + 672);
    v9 = 0x80000000;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 664) = *(_QWORD *)(this + 664);
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 680) = v7;
    *(_QWORD *)(this + 688) = v6;
    *(_QWORD *)(this + 704) = v5;
    *(_QWORD *)(this + 712) = v4;
    *(_QWORD *)(this + 696) = v2 & 0xFFFFFFFF7FFFFFFFLL | v9;
    *(_DWORD *)(this + 720) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    v10 = *(_QWORD *)(this + 8);
    if (v10)
    {
      this = *(_QWORD *)(v10 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

uint64_t WebCore::Settings::setColorFilterEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(this + 664);
  if (((((v2 & 0x40000000000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 712);
    v5 = *(_QWORD *)(this + 704);
    v6 = *(_QWORD *)(this + 696);
    v7 = *(_QWORD *)(this + 688);
    v8 = *(_QWORD *)(this + 672);
    v9 = 0x40000000000000;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 680) = *(_QWORD *)(this + 680);
    *(_QWORD *)(this + 688) = v7;
    *(_QWORD *)(this + 664) = v2 & 0xFFBFFFFFFFFFFFFFLL | v9;
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 696) = v6;
    *(_QWORD *)(this + 704) = v5;
    *(_QWORD *)(this + 712) = v4;
    *(_DWORD *)(this + 720) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    v10 = *(_QWORD *)(this + 8);
    if (v10)
    {
      this = *(_QWORD *)(v10 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

uint64_t WebCore::Settings::setCoreMathMLEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(this + 664);
  if ((((v2 >= 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 712);
    v5 = *(_QWORD *)(this + 704);
    v6 = *(_QWORD *)(this + 696);
    v7 = *(_QWORD *)(this + 688);
    v8 = *(_QWORD *)(this + 672);
    v9 = 0x8000000000000000;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 680) = *(_QWORD *)(this + 680);
    *(_QWORD *)(this + 688) = v7;
    *(_QWORD *)(this + 664) = v9 & 0x8000000000000000 | v2 & 0x7FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 696) = v6;
    *(_QWORD *)(this + 704) = v5;
    *(_QWORD *)(this + 712) = v4;
    *(_DWORD *)(this + 720) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    v10 = *(_QWORD *)(this + 8);
    if (v10)
    {
      this = *(_QWORD *)(v10 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

uint64_t WebCore::Settings::setShowDebugBorders(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(this + 696);
  if (((((v2 & 0x10000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(unsigned int *)(this + 720) | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    v4 = *(_QWORD *)(this + 712);
    v5 = *(_QWORD *)(this + 704);
    v6 = *(_QWORD *)(this + 688);
    v7 = *(_QWORD *)(this + 680);
    v8 = *(_QWORD *)(this + 672);
    v9 = 0x10000000;
    if (!a2)
      v9 = 0;
    *(_QWORD *)(this + 664) = *(_QWORD *)(this + 664);
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 680) = v7;
    *(_QWORD *)(this + 688) = v6;
    *(_QWORD *)(this + 704) = v5;
    *(_QWORD *)(this + 712) = v4;
    *(_QWORD *)(this + 696) = v2 & 0xFFFFFFFFEFFFFFFFLL | v9;
    *(_DWORD *)(this + 720) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v3);
    v10 = *(_QWORD *)(this + 8);
    if (v10)
    {
      this = *(_QWORD *)(v10 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

uint64_t WebCore::JSNavigator::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSNavigator::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

BOOL WebCore::DOMAudioSession::virtualHasPendingActivity(WebCore::DOMAudioSession *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(this);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = *((_QWORD *)this + 6);
  if ((v5 & 0x1000000000000) == 0)
    return 0;
  v7 = v5 & 0xFFFFFFFFFFFFLL;
  v8 = *(unsigned int *)(v7 + 28);
  if (!(_DWORD)v8)
    return 0;
  v9 = *(uint64_t **)(v7 + 16);
  v10 = *(_QWORD *)(v4 + 1984);
  v11 = 32 * v8 - 32;
  do
  {
    v12 = *v9;
    v9 += 4;
    result = v12 == v10;
    v13 = v12 == v10 || v11 == 0;
    v11 -= 32;
  }
  while (!v13);
  return result;
}

uint64_t WebCore::threadGlobalDataSlow(WebCore *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v1)
    v1 = WTF::Thread::initializeCurrentTLS(this);
  v2 = *(_QWORD *)(v1 + 96);
  if (!v2)
  {
    v2 = WTF::fastMalloc((WTF *)0x60);
    *(_DWORD *)(v2 + 8) = 1;
    v3 = (unsigned int *)(v2 + 8);
    *(_QWORD *)v2 = off_1E31F4A70;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v4 = 0;
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)v2 = off_1E3407108;
    *(_BYTE *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 40) = 0;
    v5 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v5 + 28) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
    *(_WORD *)(v5 + 24) = 0;
    if (WTF::isUIThread((WTF *)v5))
    {
      {
        WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
        qword_1ECE90CE8 = 0;
      }
      WebCore::ThreadTimers::setSharedTimer((uint64_t **)v5, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
    }
    *(_QWORD *)(v2 + 48) = v5;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_BYTE *)(v2 + 88) = 0;
    if (pthread_main_np())
    {
      WebCore::sharedMainThreadStaticData = v2;
      do
        v6 = __ldaxr(v3);
      while (__stlxr(v6 + 1, v3));
    }
    v7 = *(unsigned int **)(v1 + 96);
    *(_QWORD *)(v1 + 96) = v2;
    if (v7)
    {
      v8 = v7 + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v7 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
      }
    }
  }
  return v2;
}

WebCore::EventNames **WebCore::ThreadGlobalData::initializeEventNames(WebCore::EventNames **this)
{
  WebCore::EventNames *v2;
  WTF::StringImpl *v3;
  WebCore::EventNames *v5;

  v2 = (WebCore::EventNames *)WTF::fastMalloc((WTF *)0xA10);
  v5 = (WebCore::EventNames *)WebCore::EventNames::EventNames(v2);
  std::unique_ptr<WebCore::EventNames>::operator=[abi:sn180100](this + 5, (WTF::StringImpl *)&v5);
  return std::unique_ptr<WebCore::EventNames>::~unique_ptr[abi:sn180100](&v5, v3);
}

WTF::MonotonicTime *WebCore::ThreadTimers::setSharedTimer(uint64_t **this, WebCore::SharedTimer *a2)
{
  WTF::MonotonicTime *result;
  WTF::MonotonicTime *v5;
  WTF::MonotonicTime *v6;
  uint64_t v7;
  double v8;
  __n128 v9;
  double v10;
  WTF::MonotonicTime *v13;

  result = (WTF::MonotonicTime *)this[2];
  if (result)
  {
    v13 = 0;
    (*(void (**)(WTF::MonotonicTime *, WTF::MonotonicTime **))(*(_QWORD *)result + 16))(result, &v13);
    v5 = v13;
    v13 = 0;
    if (v5)
      (*(void (**)(WTF::MonotonicTime *))(*(_QWORD *)v5 + 8))(v5);
    result = (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t *))(*this[2] + 32))(this[2]);
    this[4] = 0;
  }
  this[2] = (uint64_t *)a2;
  if (a2)
  {
    v6 = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v6 = off_1E3407210;
    v13 = v6;
    (*(void (**)(WebCore::SharedTimer *, WTF::MonotonicTime **))(*(_QWORD *)a2 + 16))(a2, &v13);
    result = v13;
    v13 = 0;
    if (result)
      result = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)result + 8))(result);
    if (this[2])
    {
      while (1)
      {
        if (!*((_DWORD *)this + 3))
          goto LABEL_12;
        v7 = **this;
        if (*(_QWORD *)(v7 + 32))
          break;
        result = (WTF::MonotonicTime *)WebCore::TimerBase::heapDeleteNullMin(this);
      }
      if (*((_BYTE *)this + 24))
      {
LABEL_12:
        this[4] = 0;
        return (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t *))(*this[2] + 32))(this[2]);
      }
      v8 = *(double *)(v7 + 8);
      result = (WTF::MonotonicTime *)WTF::MonotonicTime::now(result);
      v10 = *((double *)this + 4);
      if (v10 == 0.0 || v10 > v9.n128_f64[0] || v9.n128_f64[0] < v8)
      {
        *((double *)this + 4) = v8;
        v9.n128_f64[0] = v8 - v9.n128_f64[0];
        if (v9.n128_f64[0] < 0.0)
          v9.n128_f64[0] = 0.0;
        return (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t *, __n128))(*this[2] + 24))(this[2], v9);
      }
    }
  }
  return result;
}

uint64_t WebCore::MainThreadSharedTimer::setFiredFunction(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v2 = *a2;
  if (*(_QWORD *)(result + 8))
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    *a2 = 0;
    v4 = *(_QWORD *)(result + 8);
    *(_QWORD *)(result + 8) = v2;
    if (v4)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    result = 76;
    __break(0xC471u);
  }
  return result;
}

WebCore::EventPath *WebCore::EventPath::EventPath(WebCore::EventPath *this, WebCore::Node *a2, WebCore::Event *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = (char *)this + 24;
  *((_QWORD *)this + 2) = 32;
  WebCore::EventPath::buildPath(this, a2, a3);
  v6 = (*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a3 + 152))(a3);
  if (v6)
  {
    v7 = v6;
    if ((*(_QWORD *)(v6 + 16) & 0x2000000000000) != 0)
    {
      v8 = *(_DWORD *)(v6 + 24);
      *(_DWORD *)(v6 + 24) = v8 + 2;
      if (*((_DWORD *)this + 5))
      {
        WebCore::EventPath::setRelatedTarget(this, a2, (WebCore::Node *)v6);
        v8 = *(_DWORD *)(v7 + 24) - 2;
      }
      if (v8)
      {
        *(_DWORD *)(v7 + 24) = v8;
      }
      else if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
    }
  }
  if ((*(unsigned int (**)(WebCore::Event *))(*(_QWORD *)a3 + 120))(a3))
  {
    ++*((_DWORD *)a3 + 4);
    WebCore::EventPath::retargetTouchLists(this, a3);
    if (*((_DWORD *)a3 + 4) == 1)
      (*(void (**)(WebCore::Event *))(*(_QWORD *)a3 + 8))(a3);
    else
      --*((_DWORD *)a3 + 4);
  }
  return this;
}

uint64_t WebCore::Event::isTouchEvent(WebCore::Event *this)
{
  return 0;
}

uint64_t WebCore::Event::isFocusEvent(WebCore::Event *this)
{
  return 0;
}

void WebCore::EventContext::~EventContext(WebCore::EventContext *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF **v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WebCore::WindowProxy *v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  WebCore::WindowProxy *v21;
  uint64_t v22;
  WTF **v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  WebCore::WindowProxy *v27;
  WTF *v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;
  void *v32;
  WTF *v33;
  void *v34;
  WTF *v35;
  void *v36;

  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v10 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v10)
      {
        v11 = *(WTF ***)(v3 + 8);
        v12 = 8 * v10;
        do
        {
          v13 = *v11;
          *v11 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 1)
            {
              v14 = *((_QWORD *)v13 + 2);
              *((_QWORD *)v13 + 2) = 0;
              if (v14)
              {
                if ((*(_BYTE *)(v14 + 22) & 2) != 0)
                {
                  if (*(_DWORD *)(v14 + 24) == 2)
                  {
                    if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v14);
                  }
                  else
                  {
                    *(_DWORD *)(v14 + 24) -= 2;
                  }
                }
                else
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 96))(v14);
                }
              }
              v15 = (WebCore::WindowProxy *)*((_QWORD *)v13 + 1);
              *((_QWORD *)v13 + 1) = 0;
              if (v15)
              {
                if (*(_DWORD *)v15 == 1)
                {
                  WebCore::WindowProxy::~WindowProxy(v15, a2);
                  WTF::fastFree(v31, v32);
                }
                else
                {
                  --*(_DWORD *)v15;
                }
              }
              WTF::fastFree(v13, a2);
            }
            else
            {
              --*(_DWORD *)v13;
            }
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
      v28 = *(WTF **)(v3 + 8);
      if (v28)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        WTF::fastFree(v28, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v16 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v16)
      {
        v17 = *(WTF ***)(v4 + 8);
        v18 = 8 * v16;
        do
        {
          v19 = *v17;
          *v17 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 1)
            {
              v20 = *((_QWORD *)v19 + 2);
              *((_QWORD *)v19 + 2) = 0;
              if (v20)
              {
                if ((*(_BYTE *)(v20 + 22) & 2) != 0)
                {
                  if (*(_DWORD *)(v20 + 24) == 2)
                  {
                    if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v20);
                  }
                  else
                  {
                    *(_DWORD *)(v20 + 24) -= 2;
                  }
                }
                else
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 96))(v20);
                }
              }
              v21 = (WebCore::WindowProxy *)*((_QWORD *)v19 + 1);
              *((_QWORD *)v19 + 1) = 0;
              if (v21)
              {
                if (*(_DWORD *)v21 == 1)
                {
                  WebCore::WindowProxy::~WindowProxy(v21, a2);
                  WTF::fastFree(v33, v34);
                }
                else
                {
                  --*(_DWORD *)v21;
                }
              }
              WTF::fastFree(v19, a2);
            }
            else
            {
              --*(_DWORD *)v19;
            }
          }
          ++v17;
          v18 -= 8;
        }
        while (v18);
      }
      v29 = *(WTF **)(v4 + 8);
      if (v29)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        WTF::fastFree(v29, a2);
      }
      WTF::fastFree((WTF *)v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      v22 = *(unsigned int *)(v5 + 20);
      if ((_DWORD)v22)
      {
        v23 = *(WTF ***)(v5 + 8);
        v24 = 8 * v22;
        do
        {
          v25 = *v23;
          *v23 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 1)
            {
              v26 = *((_QWORD *)v25 + 2);
              *((_QWORD *)v25 + 2) = 0;
              if (v26)
              {
                if ((*(_BYTE *)(v26 + 22) & 2) != 0)
                {
                  if (*(_DWORD *)(v26 + 24) == 2)
                  {
                    if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v26);
                  }
                  else
                  {
                    *(_DWORD *)(v26 + 24) -= 2;
                  }
                }
                else
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 96))(v26);
                }
              }
              v27 = (WebCore::WindowProxy *)*((_QWORD *)v25 + 1);
              *((_QWORD *)v25 + 1) = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 1)
                {
                  WebCore::WindowProxy::~WindowProxy(v27, a2);
                  WTF::fastFree(v35, v36);
                }
                else
                {
                  --*(_DWORD *)v27;
                }
              }
              WTF::fastFree(v25, a2);
            }
            else
            {
              --*(_DWORD *)v25;
            }
          }
          ++v23;
          v24 -= 8;
        }
        while (v24);
      }
      v30 = *(WTF **)(v5 + 8);
      if (v30)
      {
        *(_QWORD *)(v5 + 8) = 0;
        *(_DWORD *)(v5 + 16) = 0;
        WTF::fastFree(v30, a2);
      }
      WTF::fastFree((WTF *)v5, a2);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if ((*(_BYTE *)(v7 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
    }
  }
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if ((*(_BYTE *)(v8 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v8);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
    }
  }
  v9 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
}

_DWORD *WebCore::DOMWindow::derefEventTarget(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 72))(this);
  --this[6];
  return this;
}

WebCore::EventPath *WebCore::EventPath::EventPath(WebCore::EventPath *this, WebCore::EventTarget *a2)
{
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v9;
  _QWORD v10[3];
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (WebCore::EventPath *)((char *)this + 24);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = (char *)this + 24;
  *((_QWORD *)this + 2) = 32;
  v5 = *((_QWORD *)a2 + 2);
  if ((v5 & 0x2000000000000) != 0)
  {
    *((_DWORD *)a2 + 6) += 2;
  }
  else
  {
    (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)a2 + 88))(a2);
    v5 = *((_QWORD *)a2 + 2);
  }
  if ((v5 & 0x2000000000000) != 0)
    *((_DWORD *)a2 + 6) += 2;
  else
    (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)a2 + 88))(a2);
  LODWORD(v9) = 32;
  v10[0] = 0;
  if ((*((_BYTE *)a2 + 22) & 2) != 0)
    *((_DWORD *)a2 + 6) += 2;
  else
    (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)a2 + 88))(a2);
  v10[1] = a2;
  if ((*((_BYTE *)a2 + 22) & 2) != 0)
    *((_DWORD *)a2 + 6) += 2;
  else
    (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)a2 + 88))(a2);
  v10[2] = a2;
  v11 = 0u;
  v12 = 0u;
  v13 = 0;
  HIDWORD(v9) = 1;
  v6 = *((unsigned int *)this + 5);
  v7 = (WTF *)*((_QWORD *)this + 1);
  if ((_DWORD)v6)
  {
    WTF::VectorDestructor<true,WebCore::EventContext>::destruct((uint64_t)v7, (WTF *)((char *)v7 + 64 * v6));
    v7 = (WTF *)*((_QWORD *)this + 1);
  }
  if (v7 != v4)
  {
    if (v7)
    {
      *((_QWORD *)this + 1) = 0;
      *((_DWORD *)this + 4) = 0;
      WTF::fastFree(v7, a2);
    }
    *((_QWORD *)this + 1) = v4;
  }
  WTF::VectorMover<false,WebCore::EventContext>::move((WebCore::EventContext *)v10, (WTF::StringImpl *)&v14, v4);
  *((_QWORD *)this + 2) = v9;
  if ((*((_BYTE *)a2 + 22) & 2) != 0)
  {
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a2);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
  }
  else
  {
    (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)a2 + 96))(a2);
  }
  if ((*((_BYTE *)a2 + 22) & 2) != 0)
  {
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a2);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
  }
  else
  {
    (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)a2 + 96))(a2);
  }
  return this;
}

uint64_t WebCore::DOMWindow::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

uint64_t WebCore::ActiveDOMObject::virtualHasPendingActivity(WebCore::ActiveDOMObject *this)
{
  return 0;
}

uint64_t WebCore::RenderBox::computeIntrinsicLogicalWidthUsing(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;

  v7 = *(unsigned __int8 *)(a2 + 4);
  if (v7 == 9)
  {
    HIDWORD(v25) = 0;
    LODWORD(result) = WebCore::RenderBox::fillAvailableMeasure(a1, a3, (_DWORD *)&v25 + 1, &v25);
    if ((int)result <= a4)
      return a4;
    else
      return result;
  }
  else
  {
    v24 = 0;
    if (v7 != 6 && WebCore::RenderBox::shouldComputeLogicalWidthFromAspectRatio((WebCore::RenderBox *)a1))
    {
      v19 = WebCore::RenderBox::computeLogicalWidthFromAspectRatioInternal((WebCore::RenderBox *)a1);
      if (__OFSUB__(v19, a4))
        v20 = (v19 >> 31) + 0x7FFFFFFF;
      else
        v20 = v19 - a4;
      LODWORD(v24) = v20;
      HIDWORD(v24) = v20;
      v21 = *(unsigned int *)(a1 + 64);
      if (v21 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)
        && *(_QWORD *)((v21 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8))
      {
        v25 = 0;
        (*(void (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)a1 + 1632))(a1, (char *)&v25 + 4, &v25);
        if (v20 <= SHIDWORD(v25))
          v22 = HIDWORD(v25);
        else
          v22 = v20;
        v23 = v25;
        if (v20 > (int)v25)
          v23 = v20;
        v24 = __PAIR64__(v22, v23);
      }
    }
    else
    {
      (*(void (**)(uint64_t, char *, unint64_t *))(*(_QWORD *)a1 + 1632))(a1, (char *)&v24 + 4, &v24);
    }
    v9 = *(unsigned __int8 *)(a2 + 4);
    if ((v9 - 6) < 2)
    {
      v10 = HIDWORD(v24);
LABEL_7:
      v11 = __OFADD__(v10, a4);
      v12 = v10 + a4;
      v13 = (v10 >> 31) + 0x7FFFFFFF;
      if (v11)
        return v13;
      else
        return v12;
    }
    if (v9 != 10)
    {
      if (v9 != 8)
        return 0;
      v10 = v24;
      goto LABEL_7;
    }
    if (__OFADD__(HIDWORD(v24), a4))
      v15 = (HIDWORD(v24) >> 31) + 0x7FFFFFFF;
    else
      v15 = HIDWORD(v24) + a4;
    v16 = (v24 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__((_DWORD)v24, a4))
      v16 = v24 + a4;
    v24 = __PAIR64__(v15, v16);
    HIDWORD(v25) = 0;
    v17 = WebCore::RenderBox::fillAvailableMeasure(a1, a3, (_DWORD *)&v25 + 1, &v25);
    v18 = v24;
    if (v17 < (int)v24)
      v18 = v17;
    if (SHIDWORD(v24) <= v18)
      return v18;
    else
      return HIDWORD(v24);
  }
}

void WebCore::RenderBlockFlow::computeIntrinsicLogicalWidths(WebCore::RenderBlockFlow *this, WebCore::LayoutUnit *a2, WebCore::LayoutUnit *a3)
{
  const WebCore::RenderBlockFlow *v6;
  WebCore::RenderObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  __int16 v13;
  WebCore::LayoutIntegration::LineLayout *v14;
  uint64_t v15;
  WebCore::LayoutIntegration::LineLayout **v16;
  WebCore::LayoutIntegration::LineLayout *v17;
  WTF *v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int32x2_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  float v28;
  double v29;
  int v30;
  int v31;
  WebCore::RenderBlockFlow *v32;
  char v33;
  int v34;
  float v35;
  float v36;
  int v37;
  int v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  WebCore::RenderBlockFlow *v47;
  int v48;
  _BYTE *v49;
  char *v50;
  uint64_t v51;
  unsigned int v52;
  __n128 v53;
  unsigned int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  int v62;
  unsigned int v63;
  __n128 v64;
  unsigned int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  int v73;
  WebCore::RenderBlockFlow *v74;
  int v75;
  unsigned int v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  float v84;
  BOOL v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  float v90;
  uint64_t v91;
  uint64_t *v92;
  int v93;
  unsigned int v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  float v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  float v105;
  int v106;
  int v107;
  int v108;
  _BOOL4 v109;
  float v110;
  float v111;
  float v112;
  int v113;
  int v114;
  int v115;
  float v116;
  const WebCore::RenderObject *v117;
  float v118;
  _BOOL4 v119;
  int v120;
  float v121;
  float v122;
  float v123;
  int v124;
  float *v125;
  float v126;
  float v127;
  int v128;
  float v129;
  int v130;
  float v131;
  int v132;
  double v133;
  int v134;
  float v135;
  float v136;
  int v137;
  unsigned int v138;
  int v139;
  BOOL v141;
  int v142;
  float v143;
  int v144;
  int v145;
  int v146;
  float v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  WebCore::RenderMarquee *v153;
  int v154;
  unsigned int v155;
  int v156;
  int v157;
  uint64_t v158;
  int v159;
  float v160;
  double v161;
  int v162;
  int v163;
  unsigned int v164;
  int v165;
  unsigned int v166;
  int v167;
  unsigned int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  BOOL v173;
  int v174;
  unint64_t v175;
  unint64_t v176;
  WebCore::LayoutUnit *v177;
  int v178;
  WebCore::RenderText *v179;
  unsigned int v180;
  unsigned int v181;
  int v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int v187;
  unsigned int *v188;
  int v189;
  int v190;
  float v191;
  int v192;
  unint64_t v193;
  int v194;
  float v195;
  int v196;
  float v197;
  int v198;
  double v199;
  float v200;
  WebCore::LayoutUnit **v201;
  float v202;
  uint64_t v203;
  float v204;
  uint64_t CharacterIndexStrippingSpaces;
  float started;
  _BOOL4 v207;
  int v208;
  uint64_t v209;
  unsigned int *v210;
  int v211;
  float v212;
  int v213;
  float v214;
  float v215;
  int v216;
  float v217;
  int v218;
  int v219;
  float v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  _BOOL4 v225;
  WebCore::RenderObject *v226;
  uint64_t v227;
  uint64_t v228;
  float v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  float v233;
  char *v234;
  int v235;
  int v236;
  const WebCore::RenderObject *v237;
  int v238;
  int v239;
  unsigned int v240;
  float v241;
  int v242;
  float v243;
  int v244;
  float v245;
  int v246;
  char *v247;
  int *v248;
  int v249;
  double v250;
  int v251;
  int v252;
  int *v253;
  int v254;
  double v255;
  int v256;
  double v257;
  int v258;
  WTF *v259;
  double v260;
  int v261;
  double v262;
  double v263;
  int v264;
  int v265;
  unint64_t v266;
  uint64_t v267;
  double v268;
  int v269;
  int v270;
  int v271;
  unint64_t v272;
  unsigned int v273;
  int v274;
  int v275;
  uint64_t v276;
  unsigned int v277;
  int v278;
  int v279;
  unsigned int v280;
  int v281;
  float v282;
  int v283;
  int v284;
  int v285;
  float v286;
  int v287;
  unint64_t v288;
  unint64_t v289;
  unsigned int v290;
  float v291;
  const WebCore::RenderBlockFlow *v292;
  float v293;
  int v294;
  int v295;
  float v296;
  int v297;
  float v298;
  unsigned int v299;
  unsigned int v300;
  int v301;
  WebCore::RenderStyle *v302;
  unsigned int v303;
  char v304;
  WebCore::LayoutUnit *v305;
  BOOL v306;
  WebCore::RenderText *v307;
  char v308;
  int v309;
  _BOOL4 v310;
  char v311;
  float *v312;
  _BOOL4 v313;
  _BYTE *v314;
  _BOOL4 v315;
  WebCore::LayoutUnit *v316;
  uint64_t v317;
  float v318;
  float v319;
  unsigned __int8 v320;
  unsigned __int8 v321;
  unsigned __int8 v322;
  char v323;
  char v324;
  char v325;
  WTF *v326;
  uint64_t v327;
  BOOL v328;
  WebCore::LayoutUnit *v329;
  unsigned int v330;
  unsigned __int8 v331;
  char v332;
  char v333;
  unsigned int v334;
  unsigned __int8 v335;
  char v336;
  char v337;
  float v338;
  unsigned __int8 v339;
  char v340;
  char v341;

  if (WebCore::RenderElement::shouldApplySizeOrInlineSizeContainment(this))
  {
    v176 = WebCore::RenderBox::explicitIntrinsicInnerLogicalWidth(this);
    if ((v176 & 0xFF00000000) == 0)
      goto LABEL_294;
    *(_DWORD *)a2 = v176;
    v177 = a3;
    *(_DWORD *)a3 = v176;
    v178 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= (int)v176)
      v178 = v176;
    goto LABEL_600;
  }
  if ((*((_BYTE *)this + 22) & 4) == 0)
  {
    WebCore::RenderBlock::computeBlockPreferredLogicalWidths(this, a2, a3);
    goto LABEL_294;
  }
  v8 = *((unsigned int *)this + 16);
  if (v8 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
  {
    v9 = *(_QWORD *)((v8 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 + 20);
      if ((v10 & 0x800) != 0 || (v10 & 0x1800000) == 0x1000000)
      {
        v24 = *(unsigned int *)(v9 + 47) | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32);
        if (!v24)
          goto LABEL_38;
        v25 = *(_QWORD *)(v24 + 8);
        if (!v25)
          goto LABEL_38;
        while (1)
        {
          v174 = *(_DWORD *)(v25 + 20);
          if ((v174 & 0x800) == 0 && (v174 & 0x1800000) != 0x1000000)
            break;
          v175 = *(unsigned int *)(v25 + 47) | ((unint64_t)*(unsigned __int8 *)(v25 + 51) << 32);
          if (v175)
          {
            v25 = *(_QWORD *)(v175 + 8);
            if (v25)
              continue;
          }
          goto LABEL_38;
        }
      }
      v11 = *(unsigned __int16 *)((char *)this + 69);
      if (!(v11 >> 13))
      {
        v12 = (*((_BYTE *)this + 52) & 7) != 1 || (*((_BYTE *)this + 53) & 8) == 0;
        if (v12 || ((v172 = *((unsigned __int8 *)this + 46), v172 != 90) ? (v173 = v172 == 67) : (v173 = 1), v173))
          v13 = 0x2000;
        else
          v13 = 0x4000;
        LOWORD(v11) = v13 | v11;
        *(_WORD *)((char *)this + 69) = v11;
      }
      if ((v11 & 0xE000) == 0x2000
        && WebCore::LayoutIntegration::canUseForPreferredWidthComputation(this, v6))
      {
        if (*((_DWORD *)this + 60) == 1 && *((_QWORD *)this + 29))
          goto LABEL_24;
        v14 = (WebCore::LayoutIntegration::LineLayout *)WTF::fastMalloc((WTF *)0x70);
        WebCore::LayoutIntegration::LineLayout::LineLayout(v14, this);
        v15 = *((unsigned int *)this + 60);
        if ((_DWORD)v15 != -1)
        {
          v16 = (WebCore::LayoutIntegration::LineLayout **)((char *)this + 232);
          if ((_DWORD)v15 == 1)
          {
            v17 = *v16;
            *v16 = v14;
            if (!v17)
              goto LABEL_28;
            WebCore::LayoutIntegration::LineLayout::~LineLayout(v17);
            if (*(_DWORD *)v18)
            {
              *((_OWORD *)v18 + 5) = 0u;
              *((_OWORD *)v18 + 6) = 0u;
              *((_OWORD *)v18 + 3) = 0u;
              *((_OWORD *)v18 + 4) = 0u;
              *((_OWORD *)v18 + 1) = 0u;
              *((_OWORD *)v18 + 2) = 0u;
              *(_OWORD *)v18 = 0u;
            }
            else
            {
              WTF::fastFree(v18, v19);
            }
LABEL_24:
            if (*((_DWORD *)this + 60) == 1)
              v14 = (WebCore::LayoutIntegration::LineLayout *)*((_QWORD *)this + 29);
            else
              v14 = 0;
LABEL_28:
            v20 = WebCore::LayoutIntegration::LineLayout::computeIntrinsicWidthConstraints(v14);
            *(_DWORD *)a2 = v20;
            *(_DWORD *)a3 = HIDWORD(v20);
            v21 = *((unsigned int *)this + 16);
            if (v21 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
            {
              v22 = *(_QWORD *)((v21 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
              v316 = this;
              v317 = v22;
              if (v22)
              {
                v23 = vdup_n_s32(0x7FC00000u);
                do
                {
                  *(_DWORD *)(v22 + 20) &= ~0x2000u;
                  if ((*(_BYTE *)(v22 + 45) & 2) != 0)
                    *(int32x2_t *)(v22 + 84) = v23;
                  WebCore::InlineWalker::advance((WebCore::InlineWalker *)&v316);
                  v22 = v317;
                }
                while (v317);
              }
            }
            goto LABEL_294;
          }
          ((void (*)(WebCore::LayoutUnit **, WebCore::LayoutIntegration::LineLayout **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateENS_10unique_ptrIN7WebCore17LayoutIntegration10LineLayoutENS_14default_deleteISA_EEEENS7_INS8_16LegacyLineLayoutENSB_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v15])(&v316, v16);
        }
        *((_QWORD *)this + 29) = v14;
        *((_DWORD *)this + 60) = 1;
        goto LABEL_28;
      }
    }
  }
LABEL_38:
  v329 = 0;
  v26 = 1;
  v328 = 1;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3384) == 2
    && *((_BYTE *)this + 46) == 37)
  {
    v221 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
    v222 = v221 + 12;
    v223 = v221 + 4;
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
      v222 = v223;
    v224 = *(unsigned __int8 *)(v222 + 4);
    v225 = v224 < 0xB && ((0x781u >> v224) & 1) != 0 || v224 - 5 < 2;
    v26 = !v225;
  }
  v310 = (*((_BYTE *)this + 123) & 0x40) == 0;
  v27 = *((_QWORD *)this + 13);
  v301 = v26;
  v305 = a3;
  if (*(_BYTE *)(v27 + 180) == 4)
  {
    if (*(_BYTE *)(v27 + 182))
      v28 = *(float *)(v27 + 176);
    else
      v28 = (float)*(int *)(v27 + 176);
    v29 = v28 * 64.0;
    if (v29 >= 2147483650.0)
    {
      v30 = 0x7FFFFFFF;
    }
    else if (v29 <= -2147483650.0)
    {
      v30 = 0x80000000;
    }
    else
    {
      v30 = (int)v29;
    }
    v303 = v30;
    goto LABEL_46;
  }
  v226 = WebCore::RenderObject::containingBlock(this);
  if (!v226)
    goto LABEL_716;
  v227 = *(_QWORD *)(*((_QWORD *)v226 + 11) + 8);
  if (((*((_DWORD *)v226 + 31) >> 13) & 6u) - 2 <= 3)
  {
    if (*(_BYTE *)(v227 + 16) == 4)
    {
      v228 = v227 + 12;
      goto LABEL_491;
    }
LABEL_716:
    v303 = 0;
    goto LABEL_46;
  }
  if (*(_BYTE *)(v227 + 8) != 4)
    goto LABEL_716;
  v228 = v227 + 4;
LABEL_491:
  if (*(_BYTE *)(v228 + 6))
    v229 = *(float *)v228;
  else
    v229 = (float)*(int *)v228;
  v303 = WebCore::minimumValueForLength<float>((unsigned __int8 *)(*((_QWORD *)this + 13) + 176), v229);
LABEL_46:
  v31 = 0;
  v32 = 0;
  v306 = 0;
  v307 = 0;
  v309 = 0;
  v313 = 0;
  v302 = 0;
  v304 = 0;
  v311 = 0;
  v312 = 0;
  v33 = *(_DWORD *)(*((_QWORD *)this + 13) + 236) >> 7;
  v326 = 0;
  v327 = 0;
  v34 = 1;
  v35 = 0.0;
  v36 = 0.0;
  v308 = v33;
  while (2)
  {
    v37 = v31;
    v31 = 0;
    while (1)
    {
      if (!v37 && v32 && (*((_DWORD *)v32 + 5) & 0x802) == 0 && (*((_DWORD *)v32 + 5) & 0x1800000) != 0x1000000)
      {
        v45 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)v32 + 112))(v32);
        goto LABEL_74;
      }
      if (!v34)
        break;
      v43 = *((unsigned int *)this + 16);
      v34 = 0;
      if (!(v43 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)))
        break;
      v45 = *(_QWORD *)((v43 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
LABEL_74:
      if (!v45)
        break;
      v32 = (WebCore::RenderBlockFlow *)v45;
LABEL_76:
      v44 = *((_DWORD *)v32 + 5);
      if ((v44 & 0x1800000) != 0x1000000)
      {
        v39 = *((unsigned __int8 *)v32 + 45);
        if ((v39 & 2) != 0 || (v39 & 0x20) != 0)
          goto LABEL_89;
        if ((v44 & 0x802) != 0 || *((_BYTE *)v32 + 46) == 17)
          goto LABEL_89;
      }
    }
    if (v37)
    {
      if (!v32)
        break;
      while (1)
      {
LABEL_59:
        if (v32 == this)
          goto LABEL_269;
        v40 = *(unsigned int *)((char *)v32 + 47);
        if (v40 | ((unint64_t)*((unsigned __int8 *)v32 + 51) << 32)
          && *(_QWORD *)((v40 | ((unint64_t)*((unsigned __int8 *)v32 + 51) << 32)) + 8))
        {
          v32 = *(WebCore::RenderBlockFlow **)((v40 | ((unint64_t)*((unsigned __int8 *)v32 + 51) << 32)) + 8);
          goto LABEL_76;
        }
        v41 = *((_QWORD *)v32 + 4);
        if (!v41)
          goto LABEL_269;
        v32 = *(WebCore::RenderBlockFlow **)(v41 + 8);
        v42 = !v32 || v32 == this;
        if (!v42 && (*((_BYTE *)v32 + 45) & 0x20) != 0)
          break;
        if (!v32)
          goto LABEL_269;
      }
      v31 = 1;
      goto LABEL_76;
    }
    if (v32)
    {
      v39 = *((unsigned __int8 *)v32 + 45);
      if ((v39 & 0x20) == 0)
        goto LABEL_59;
      v44 = *((_DWORD *)v32 + 5);
      v31 = 1;
LABEL_89:
      v47 = v32;
      if (((v39 | v44) & 2) != 0)
        v47 = *(WebCore::RenderBlockFlow **)(*((_QWORD *)v32 + 4) + 8);
      v48 = *((_DWORD *)v47 + 30);
      if ((v39 & 0x40) == 0)
        goto LABEL_92;
      if ((v39 & 2) != 0)
      {
        v74 = *(WebCore::RenderBlockFlow **)(*((_QWORD *)v32 + 4) + 8);
        if ((*((_QWORD *)v74 + 12) & 0x1FLL) != 0x19)
        {
          v49 = (char *)v32 + 46;
          if (*((_BYTE *)v32 + 46) == 17)
            goto LABEL_611;
          goto LABEL_365;
        }
      }
      else
      {
        v74 = v32;
        if ((*((_QWORD *)v32 + 12) & 0x1FLL) != 0x19)
        {
          v49 = (char *)v32 + 46;
          if (*((_BYTE *)v32 + 46) != 17)
          {
            v50 = (char *)v32 + 20;
            v315 = (v48 & 0x40000000) == 0;
            v314 = (char *)v32 + 45;
LABEL_94:
            if ((v39 & 0x20) != 0)
            {
              ++*((_DWORD *)v32 + 4);
              v51 = *(_QWORD *)v32;
              if (!v31)
              {
                v52 = (*(uint64_t (**)(WebCore::RenderBlockFlow *, _QWORD))(v51 + 1128))(v32, 0);
                v54 = *((_DWORD *)v32 + 30);
                v55 = (v54 >> 26) & 1;
                v56 = (unsigned __int16)*((_DWORD *)v32 + 31) >> 13;
                if ((v56 - 2) >= 2)
                {
                  if (v56 == 4)
                  {
                    v55 = (v54 & 0x4000000) == 0;
                  }
                  else if (v56 != 5)
                  {
                    v57 = 3;
                    if ((v54 & 0x4000000) != 0)
                      v57 = 1;
                    goto LABEL_101;
                  }
                }
                v12 = v55 == 0;
                v57 = 2;
                if (v12)
                  v57 = 0;
LABEL_101:
                v58 = *(_QWORD *)(*((_QWORD *)v32 + 11) + 24) + 40;
                v59 = v58 + 8 * v57;
                v334 = 0;
                v337 = 0;
                v335 = *(_BYTE *)(v59 + 4);
                v60 = v335;
                v336 = *(_BYTE *)(v59 + 5);
                if (v335 <= 0xDu)
                {
                  if (((1 << v335) & 0x7FC) != 0)
                  {
                    v61 = *(unsigned __int8 *)(v58 + 8 * v57 + 6);
                    v337 = v61;
                    if (v61)
                    {
                      v62 = 0;
                      v53.n128_u32[0] = *(_DWORD *)v59;
                      v334 = *(_DWORD *)v59;
                    }
                    else
                    {
                      v334 = *(_DWORD *)v59;
                      v53.n128_u32[0] = v334;
                      v62 = 1;
                    }
LABEL_120:
                    if (v335)
                    {
                      if (v335 != 4)
                        goto LABEL_122;
                      if (v62)
                        v53.n128_f32[0] = (float)v53.n128_i32[0];
                      v53.n128_f64[0] = v53.n128_f32[0] * 64.0;
                      if (v53.n128_f64[0] >= 2147483650.0)
                      {
                        v60 = 0x7FFFFFFF;
                      }
                      else if (v53.n128_f64[0] <= -2147483650.0)
                      {
                        v60 = 0x80000000;
                      }
                      else
                      {
                        v60 = (int)v53.n128_f64[0];
                      }
                    }
LABEL_123:
                    v75 = (*(uint64_t (**)(WebCore::RenderBlockFlow *, __n128))(*(_QWORD *)v32 + 976))(v32, v53);
                    v76 = *((_DWORD *)v32 + 30);
                    v77 = (v76 >> 26) & 1;
                    v78 = (unsigned __int16)*((_DWORD *)v32 + 31) >> 13;
                    if ((v78 - 2) >= 2)
                    {
                      if (v78 == 4)
                      {
                        v77 = (v76 & 0x4000000) == 0;
                      }
                      else if (v78 != 5)
                      {
                        v79 = 3;
                        if ((v76 & 0x4000000) != 0)
                          v79 = 1;
                        goto LABEL_128;
                      }
                    }
                    v12 = v77 == 0;
                    v79 = 2;
                    if (v12)
                      v79 = 0;
LABEL_128:
                    v80 = v31;
                    v81 = *(_QWORD *)(*((_QWORD *)v32 + 11) + 24) + 72 + 8 * v79;
                    v330 = 0;
                    v333 = 0;
                    v331 = *(_BYTE *)(v81 + 4);
                    v82 = v331;
                    v332 = *(_BYTE *)(v81 + 5);
                    if (v331 - 2 >= 9)
                    {
                      if (v331 == 11)
                      {
                        v330 = *(_DWORD *)v81;
                        WebCore::Length::ref((int *)&v330);
                      }
                      else if (!v331)
                      {
                        goto LABEL_131;
                      }
LABEL_130:
                      v82 = v75;
                      goto LABEL_131;
                    }
                    v83 = *(unsigned __int8 *)(v81 + 6);
                    v333 = *(_BYTE *)(v81 + 6);
                    v84 = *(float *)v81;
                    v330 = *(_DWORD *)v81;
                    if (v331 != 4)
                      goto LABEL_130;
                    if (!v83)
                      v84 = (float)SLODWORD(v84);
                    v262 = v84 * 64.0;
                    if (v262 >= 2147483650.0)
                    {
                      v82 = 0x7FFFFFFF;
                    }
                    else if (v262 <= -2147483650.0)
                    {
                      v82 = 0x80000000;
                    }
                    else
                    {
                      v82 = (int)v262;
                    }
LABEL_131:
                    v85 = __OFADD__(v60, v82);
                    v86 = v60 + v82;
                    if (v85)
                      v87 = (v60 >> 31) + 0x7FFFFFFF;
                    else
                      v87 = v86;
                    v88 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)v32 + 1064))(v32);
                    if (__OFADD__(v87, v88))
                      v89 = (v87 >> 31) + 0x7FFFFFFF;
                    else
                      v89 = v87 + v88;
                    v33 = v308;
                    if (v331 == 11)
                    {
                      {
                        WebCore::calculationValues(void)::map = 1;
                        qword_1ECE90C98 = 0;
                      }
                      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v330);
                    }
                    if (v335 != 11)
                    {
                      v90 = (float)((float)v89 * 0.015625) + 0.0;
                      v92 = (uint64_t *)((char *)v32 + 96);
                      v91 = *((_QWORD *)v32 + 12);
                      if ((v91 & 0x1F) == 0x18)
                      {
LABEL_432:
                        v202 = *((float *)&v329 + 1);
                        v316 = v329;
                        v203 = HIDWORD(v327);
                        if (HIDWORD(v327) == (_DWORD)v327)
                        {
                          WTF::Vector<std::pair<WebCore::LayoutUnit,WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<float,float>>((uint64_t)&v326, (float *)&v316);
                        }
                        else
                        {
                          v257 = *(float *)&v329 * 64.0;
                          if (v257 >= 2147483650.0)
                          {
                            v258 = 0x7FFFFFFF;
                          }
                          else if (v257 <= -2147483650.0)
                          {
                            v258 = 0x80000000;
                          }
                          else
                          {
                            v258 = (int)v257;
                          }
                          v259 = v326;
                          *((_DWORD *)v326 + 2 * HIDWORD(v327)) = v258;
                          v260 = v202 * 64.0;
                          if (v260 >= 2147483650.0)
                          {
                            v261 = 0x7FFFFFFF;
                          }
                          else if (v260 <= -2147483650.0)
                          {
                            v261 = 0x80000000;
                          }
                          else
                          {
                            v261 = (int)v260;
                          }
                          *((_DWORD *)v259 + 2 * v203 + 1) = v261;
                          HIDWORD(v327) = v203 + 1;
                        }
                        v33 = v308;
                        v31 = v80;
LABEL_166:
                        v91 = *v92;
                      }
LABEL_167:
                      v105 = v90 + *(float *)&v329;
                      v35 = v90 + *((float *)&v329 + 1);
                      *(float *)&v329 = v90 + *(float *)&v329;
                      *((float *)&v329 + 1) = v90 + *((float *)&v329 + 1);
                      if (v31 && (v91 & 0x1F) == 0x18 && HIDWORD(v327))
                      {
                        v247 = (char *)v326 + 8 * HIDWORD(v327);
                        v249 = *((_DWORD *)v247 - 2);
                        v248 = (int *)(v247 - 8);
                        v250 = (float)(v105 - (float)((float)v249 * 0.015625)) * 64.0;
                        if (v250 > -2147483650.0)
                          v251 = (int)v250;
                        else
                          v251 = 0x80000000;
                        if (v250 < 2147483650.0)
                          v252 = v251;
                        else
                          v252 = 0x7FFFFFFF;
                        *v248 = v252;
                        v254 = v248[1];
                        v253 = v248 + 1;
                        v255 = (float)(v35 - (float)((float)v254 * 0.015625)) * 64.0;
                        if (v255 >= 2147483650.0)
                        {
                          v256 = 0x7FFFFFFF;
                        }
                        else if (v255 <= -2147483650.0)
                        {
                          v256 = 0x80000000;
                        }
                        else
                        {
                          v256 = (int)v255;
                        }
                        *v253 = v256;
                        v33 = v308;
                      }
                      v106 = *((_DWORD *)v32 + 4);
                      *((_DWORD *)v32 + 5) &= ~0x2000u;
                      if (!v106)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19433BC28);
                      }
                      *((_DWORD *)v32 + 4) = v106 - 1;
                      v36 = v35;
LABEL_171:
                      v107 = *v314;
                      if ((v107 & 0x22222222) != 0)
                      {
                        if ((v107 & 2) == 0)
                          goto LABEL_249;
                        v108 = *((_DWORD *)v32 + 4);
                        *((_DWORD *)v32 + 4) = v108 + 1;
                        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v32 + 4) + 8) + 104) + 231) & 1) != 0
                          && *v49 == 3)
                        {
                          *((_DWORD *)v32 + 4) = v108 + 2;
                          WebCore::RenderCombineText::combineTextIfNeeded(v32);
                          v194 = *((_DWORD *)v32 + 4);
                          if (!v194)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19433CBBCLL);
                          }
                          *((_DWORD *)v32 + 4) = v194 - 1;
                          v33 = v308;
                        }
                        v109 = v328;
                        WebCore::RenderText::trimmedPreferredWidths((uint64_t)v32, v35, &v328, (uint64_t)&v316);
                        v110 = *((float *)&v316 + 1);
                        v111 = *(float *)&v316;
                        if (!v324 && *((float *)&v316 + 1) == 0.0)
                        {
                          if (v315 && (v320 | v321 || v322))
                          {
                            v112 = ceilf(*(float *)&v329 * 64.0);
                            if (v112 >= 2147500000.0)
                            {
                              v113 = 0x7FFFFFFF;
                            }
                            else if (v112 <= -2147500000.0)
                            {
                              v113 = 0x80000000;
                            }
                            else
                            {
                              v113 = (int)v112;
                            }
                            if (v113 <= *(_DWORD *)a2)
                              v113 = *(_DWORD *)a2;
                            *(_DWORD *)a2 = v113;
                            LODWORD(v329) = 0;
                          }
                          v114 = *((_DWORD *)v32 + 4);
                          if (v114)
                          {
                            *((_DWORD *)v32 + 4) = v114 - 1;
                            v36 = v35;
                            continue;
                          }
LABEL_434:
                          __break(0xC471u);
                          JUMPOUT(0x19433BE74);
                        }
                        if (v328)
                          v125 = (float *)v32;
                        else
                          v125 = 0;
                        v312 = v125;
                        if (!(v304 & 1 | ((v311 & 1) == 0)))
                        {
                          v304 = 0;
                          v126 = 0.0;
                          goto LABEL_216;
                        }
                        v126 = WebCore::LayoutUnit::ceilToFloat((WebCore::LayoutUnit *)v303);
                        *(float *)&v317 = v126 + *(float *)&v317;
                        if ((v311 & 1) == 0)
                        {
                          v110 = v110 + v126;
                          v318 = v126 + v318;
                        }
                        v111 = v111 + v126;
                        if (v111 < 0.0)
                        {
                          v199 = v111 * 64.0;
                          if (v199 >= 2147483650.0)
                          {
                            v304 = 1;
                            v290 = 0x7FFFFFFF;
                          }
                          else
                          {
                            if (v199 > -2147483650.0)
                            {
                              v303 = (int)v199;
                              v304 = 1;
                              goto LABEL_361;
                            }
                            v304 = 1;
                            v290 = 0x80000000;
                          }
                          v303 = v290;
                        }
LABEL_361:
                        v311 = 1;
LABEL_216:
                        if ((v33 & 1) != 0 && !v306)
                        {
                          v204 = v126;
                          if (v109)
                            CharacterIndexStrippingSpaces = WebCore::RenderText::firstCharacterIndexStrippingSpaces(v32);
                          else
                            CharacterIndexStrippingSpaces = 0;
                          started = WebCore::RenderText::hangablePunctuationStartWidth(v32, CharacterIndexStrippingSpaces);
                          v111 = v111 - started;
                          v110 = v110 - started;
                          *(float *)&v317 = *(float *)&v317 - started;
                          v318 = v318 - started;
                          v306 = 1;
                          v126 = v204;
                          v33 = v308;
                        }
                        if (v323)
                        {
                          if (v320)
                          {
                            v127 = ceilf(*(float *)&v329 * 64.0);
                            if (v127 >= 2147500000.0)
                            {
                              v128 = 0x7FFFFFFF;
                            }
                            else if (v127 <= -2147500000.0)
                            {
                              v128 = 0x80000000;
                            }
                            else
                            {
                              v128 = (int)v127;
                            }
                            if (v128 <= *(_DWORD *)a2)
                              v128 = *(_DWORD *)a2;
                            *(_DWORD *)a2 = v128;
                          }
                          else
                          {
                            v200 = ceilf((float)(*(float *)&v329 + *(float *)&v317) * 64.0);
                            if (v200 >= 2147500000.0)
                            {
                              v128 = 0x7FFFFFFF;
                            }
                            else if (v200 <= -2147500000.0)
                            {
                              v128 = 0x80000000;
                            }
                            else
                            {
                              v128 = (int)v200;
                            }
                            if (v128 <= *(_DWORD *)a2)
                              v128 = *(_DWORD *)a2;
                            *(_DWORD *)a2 = v128;
                            v111 = v111 - v126;
                          }
                          v129 = ceilf(v111 * 64.0);
                          if (v321 | v322)
                          {
                            if (v129 < 2147500000.0)
                            {
                              if (v129 <= -2147500000.0)
                                v294 = 0x80000000;
                              else
                                v294 = (int)v129;
                            }
                            else
                            {
                              v294 = 0x7FFFFFFF;
                            }
                            v309 = 0;
                            if (v294 > v128)
                              v128 = v294;
                            *(_DWORD *)a2 = v128;
                            LODWORD(v329) = 0;
                          }
                          else
                          {
                            if (v129 < 2147500000.0)
                            {
                              if (v129 <= -2147500000.0)
                                v295 = 0x80000000;
                              else
                                v295 = (int)v129;
                            }
                            else
                            {
                              v295 = 0x7FFFFFFF;
                            }
                            if (v295 > v128)
                              v128 = v295;
                            *(_DWORD *)a2 = v128;
                            LODWORD(v329) = HIDWORD(v317);
                            v309 = 1;
                          }
                        }
                        else
                        {
                          *(float *)&v329 = v111 + *(float *)&v329;
                        }
                        if (v324)
                        {
                          v195 = ceilf((float)(v35 + v318) * 64.0);
                          if (v195 >= 2147500000.0)
                          {
                            v196 = 0x7FFFFFFF;
                          }
                          else if (v195 <= -2147500000.0)
                          {
                            v196 = 0x80000000;
                          }
                          else
                          {
                            v196 = (int)v195;
                          }
                          if (v196 <= *(_DWORD *)v305)
                            v196 = *(_DWORD *)v305;
                          v197 = ceilf(v110 * 64.0);
                          if (v197 >= 2147500000.0)
                          {
                            v198 = 0x7FFFFFFF;
                          }
                          else if (v197 <= -2147500000.0)
                          {
                            v198 = 0x80000000;
                          }
                          else
                          {
                            v198 = (int)v197;
                          }
                          if (v198 > v196)
                            v196 = v198;
                          *(_DWORD *)v305 = v196;
                          v35 = v319;
                          *((float *)&v329 + 1) = v319;
                          v306 = 1;
                          if (v325)
                            v328 = 1;
                          v311 = 1;
                        }
                        else
                        {
                          v35 = v35 + fmaxf(v110, 0.0);
                          *((float *)&v329 + 1) = v35;
                        }
                        v130 = *((_DWORD *)v32 + 4);
                        if (!v130)
                          goto LABEL_434;
                        *((_DWORD *)v32 + 4) = v130 - 1;
                        v36 = v35;
                        v307 = v32;
LABEL_249:
                        if (*((_BYTE *)v32 + 46) == 20)
                          v328 = 1;
LABEL_251:
                        v313 = (*v314 & 0x22) == 32;
                        v310 = v315;
                        continue;
                      }
                      v338 = 0.0;
                      v334 = 0;
                      if ((v107 & 4) != 0)
                      {
                        ++*((_DWORD *)v32 + 4);
                        if (((*((_BYTE *)v32 + 21) & 0x10) == 0) == ((*((_BYTE *)this + 21) & 0x10) == 0))
                        {
                          WebCore::RenderBlock::computeChildPreferredLogicalWidths(this, v32, (WebCore::LayoutUnit *)&v338, (WebCore::LayoutUnit *)&v334);
                        }
                        else
                        {
                          v240 = WebCore::RenderBoxModelObject::borderAndPaddingLogicalHeight(v32);
                          (*(void (**)(WebCore::LayoutUnit **__return_ptr, WebCore::RenderBlockFlow *, _QWORD, _QWORD))(*(_QWORD *)v32 + 1312))(&v316, v32, v240, 0);
                          v338 = *(float *)&v316;
                          v334 = v316;
                        }
                        v115 = *((_DWORD *)v32 + 4);
                        if (!v115)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19433BEFCLL);
                        }
                        *((_DWORD *)v32 + 4) = v115 - 1;
                      }
                      else
                      {
                        WebCore::RenderBlock::computeChildPreferredLogicalWidths(this, v32, (WebCore::LayoutUnit *)&v338, (WebCore::LayoutUnit *)&v334);
                      }
                      v116 = WebCore::LayoutUnit::ceilToFloat((WebCore::LayoutUnit *)LODWORD(v338));
                      v118 = WebCore::LayoutUnit::ceilToFloat((WebCore::LayoutUnit *)v334);
                      if ((v50[1] & 8) == 0)
                      {
                        v119 = 0;
                        goto LABEL_193;
                      }
                      v236 = WebCore::RenderStyle::usedClear(v32, v117);
                      if (v302)
                      {
                        v238 = v236;
                        v239 = WebCore::RenderStyle::usedFloat(v302, v237);
                        if (v239 == 2 && (v238 & 0xFFFFFFFD) == 1)
                        {
                          v119 = 1;
LABEL_563:
                          v302 = v32;
                          v33 = v308;
LABEL_193:
                          if ((*(unsigned int (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)v32 + 152))(v32))
                            v120 = v301;
                          else
                            v120 = 1;
                          if (v120 && (v315 || v310))
                          {
                            if (!(v309 & 1 | !v313 | v119))
                              goto LABEL_198;
                            goto LABEL_263;
                          }
                          if (v119)
                          {
LABEL_263:
                            v136 = ceilf(*(float *)&v329 * 64.0);
                            if (v136 >= 2147500000.0)
                            {
                              v137 = 0x7FFFFFFF;
                            }
                            else if (v136 <= -2147500000.0)
                            {
                              v137 = 0x80000000;
                            }
                            else
                            {
                              v137 = (int)v136;
                            }
                            if (v137 <= *(_DWORD *)a2)
                              v137 = *(_DWORD *)a2;
                            *(_DWORD *)a2 = v137;
                            LODWORD(v329) = 0;
LABEL_198:
                            if (v119)
                            {
                              v241 = ceilf(*((float *)&v329 + 1) * 64.0);
                              if (v241 >= 2147500000.0)
                              {
                                v242 = 0x7FFFFFFF;
                              }
                              else if (v241 <= -2147500000.0)
                              {
                                v242 = 0x80000000;
                              }
                              else
                              {
                                v242 = (int)v241;
                              }
                              if (v242 <= *(_DWORD *)v305)
                                v242 = *(_DWORD *)v305;
                              *(_DWORD *)v305 = v242;
                              HIDWORD(v329) = 0;
                              v33 = v308;
                            }
                          }
                          v121 = v90 + v116;
                          v122 = v90 + v118;
                          if ((v311 & 1) != 0)
                          {
LABEL_200:
                            v311 = 1;
                          }
                          else if ((v50[1] & 8) != 0)
                          {
                            v311 = 0;
                          }
                          else
                          {
                            v133 = WebCore::LayoutUnit::ceilToFloat((WebCore::LayoutUnit *)v303) * 64.0;
                            if (v133 >= 2147483650.0)
                            {
                              v134 = 0x7FFFFFFF;
                            }
                            else if (v133 <= -2147483650.0)
                            {
                              v134 = 0x80000000;
                            }
                            else
                            {
                              v134 = (int)v133;
                            }
                            v135 = (float)v134 * 0.015625;
                            v121 = v121 + v135;
                            v122 = v122 + v135;
                            if (v121 >= 0.0)
                              goto LABEL_200;
                            v245 = ceilf(v121 * 64.0);
                            if (v245 >= 2147500000.0)
                            {
                              v311 = 0;
                              v246 = 0x7FFFFFFF;
                            }
                            else
                            {
                              v311 = 0;
                              if (v245 <= -2147500000.0)
                                v246 = 0x80000000;
                              else
                                v246 = (int)v245;
                            }
                            v303 = v246;
                            v33 = v308;
                          }
                          if ((v33 & 1) != 0 && !v306)
                            v306 = (v50[1] & 8) == 0;
                          v35 = fmaxf(v122, 0.0) + *((float *)&v329 + 1);
                          *((float *)&v329 + 1) = v35;
                          if ((v315 & v120) == 1 && ((!v313 | v309) & 1) != 0)
                          {
                            v123 = ceilf(v121 * 64.0);
                            if (v123 >= 2147500000.0)
                            {
                              v124 = 0x7FFFFFFF;
                            }
                            else if (v123 <= -2147500000.0)
                            {
                              v124 = 0x80000000;
                            }
                            else
                            {
                              v124 = (int)v123;
                            }
                            if (v124 <= *(_DWORD *)a2)
                              v124 = *(_DWORD *)a2;
                            *(_DWORD *)a2 = v124;
                            LODWORD(v329) = 0;
                          }
                          else if ((v50[1] & 8) != 0)
                          {
                            v243 = ceilf(v121 * 64.0);
                            if (v243 >= 2147500000.0)
                            {
                              v244 = 0x7FFFFFFF;
                            }
                            else if (v243 <= -2147500000.0)
                            {
                              v244 = 0x80000000;
                            }
                            else
                            {
                              v244 = (int)v243;
                            }
                            if (v244 <= *(_DWORD *)a2)
                              v244 = *(_DWORD *)a2;
                            *(_DWORD *)a2 = v244;
                            v33 = v308;
                          }
                          else
                          {
                            *(float *)&v329 = v121 + *(float *)&v329;
                          }
                          if ((v315 & v120 & v313) == 1)
                          {
                            v131 = ceilf(*(float *)&v329 * 64.0);
                            if (v131 >= 2147500000.0)
                            {
                              v132 = 0x7FFFFFFF;
                            }
                            else if (v131 <= -2147500000.0)
                            {
                              v132 = 0x80000000;
                            }
                            else
                            {
                              v132 = (int)v131;
                            }
                            if (v132 <= *(_DWORD *)a2)
                              v132 = *(_DWORD *)a2;
                            *(_DWORD *)a2 = v132;
                            LODWORD(v329) = 0;
                          }
                          if ((v50[1] & 8) == 0)
                          {
                            v307 = 0;
                            v312 = 0;
                            v328 = 0;
                          }
                          v36 = v35;
                          goto LABEL_249;
                        }
                        if (v239 == 4)
                        {
                          v119 = (v238 & 0xFE) == 2;
                          goto LABEL_563;
                        }
                      }
                      v119 = 0;
                      goto LABEL_563;
                    }
                    v201 = (WebCore::LayoutUnit **)&v334;
LABEL_427:
                    {
                      WebCore::calculationValues(void)::map = 1;
                      qword_1ECE90C98 = 0;
                    }
                    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)v201);
                    v90 = (float)((float)v89 * 0.015625) + 0.0;
                    v92 = (uint64_t *)((char *)v32 + 96);
                    v91 = *((_QWORD *)v32 + 12);
                    if (!v31 && (*((_QWORD *)v32 + 12) & 0x1FLL) == 0x18)
                    {
                      v80 = v31;
                      goto LABEL_432;
                    }
                    goto LABEL_167;
                  }
                  if (((1 << v335) & 0x3003) != 0)
                  {
                    v62 = 1;
                    v53.n128_u32[0] = 0;
                    goto LABEL_120;
                  }
                  v334 = *(_DWORD *)v59;
                  WebCore::Length::ref((int *)&v334);
                }
LABEL_122:
                v60 = v52;
                goto LABEL_123;
              }
              v63 = (*(uint64_t (**)(WebCore::RenderBlockFlow *, _QWORD))(v51 + 1136))(v32, 0);
              v65 = *((_DWORD *)v32 + 30);
              v66 = (v65 >> 26) & 1;
              v67 = (unsigned __int16)*((_DWORD *)v32 + 31) >> 13;
              if ((v67 - 2) >= 2)
              {
                if (v67 == 4)
                {
                  v66 = (v65 & 0x4000000) == 0;
                }
                else if (v67 != 5)
                {
                  v68 = 3;
                  if ((v65 & 0x4000000) == 0)
                    v68 = 1;
                  goto LABEL_110;
                }
              }
              v12 = v66 == 0;
              v68 = 2;
              if (!v12)
                v68 = 0;
LABEL_110:
              v69 = *(_QWORD *)(*((_QWORD *)v32 + 11) + 24) + 40;
              v70 = v69 + 8 * v68;
              LODWORD(v316) = 0;
              BYTE6(v316) = 0;
              BYTE4(v316) = *(_BYTE *)(v70 + 4);
              v71 = BYTE4(v316);
              BYTE5(v316) = *(_BYTE *)(v70 + 5);
              if (BYTE4(v316) <= 0xDu)
              {
                if (((1 << SBYTE4(v316)) & 0x7FC) != 0)
                {
                  v72 = *(unsigned __int8 *)(v69 + 8 * v68 + 6);
                  BYTE6(v316) = v72;
                  if (v72)
                  {
                    v73 = 0;
                    v64.n128_u32[0] = *(_DWORD *)v70;
                    LODWORD(v316) = *(_DWORD *)v70;
                  }
                  else
                  {
                    LODWORD(v316) = *(_DWORD *)v70;
                    v64.n128_u32[0] = v316;
                    v73 = 1;
                  }
LABEL_146:
                  if (BYTE4(v316))
                  {
                    if (BYTE4(v316) != 4)
                      goto LABEL_148;
                    if (v73)
                      v64.n128_f32[0] = (float)v64.n128_i32[0];
                    v64.n128_f64[0] = v64.n128_f32[0] * 64.0;
                    if (v64.n128_f64[0] >= 2147483650.0)
                    {
                      v71 = 0x7FFFFFFF;
                    }
                    else if (v64.n128_f64[0] <= -2147483650.0)
                    {
                      v71 = 0x80000000;
                    }
                    else
                    {
                      v71 = (int)v64.n128_f64[0];
                    }
                  }
LABEL_149:
                  v93 = (*(uint64_t (**)(WebCore::RenderBlockFlow *, __n128))(*(_QWORD *)v32 + 984))(v32, v64);
                  v94 = *((_DWORD *)v32 + 30);
                  v95 = (v94 >> 26) & 1;
                  v96 = (unsigned __int16)*((_DWORD *)v32 + 31) >> 13;
                  if ((v96 - 2) >= 2)
                  {
                    if (v96 == 4)
                    {
                      v95 = (v94 & 0x4000000) == 0;
                    }
                    else if (v96 != 5)
                    {
                      v97 = 3;
                      if ((v94 & 0x4000000) == 0)
                        v97 = 1;
                      goto LABEL_154;
                    }
                  }
                  v12 = v95 == 0;
                  v97 = 2;
                  if (!v12)
                    v97 = 0;
LABEL_154:
                  v98 = *(_QWORD *)(*((_QWORD *)v32 + 11) + 24) + 72 + 8 * v97;
                  v338 = 0.0;
                  v341 = 0;
                  v339 = *(_BYTE *)(v98 + 4);
                  v99 = v339;
                  v340 = *(_BYTE *)(v98 + 5);
                  if (v339 - 2 >= 9)
                  {
                    if (v339 == 11)
                    {
                      v338 = *(float *)v98;
                      WebCore::Length::ref((int *)&v338);
                    }
                    else if (!v339)
                    {
                      goto LABEL_157;
                    }
LABEL_156:
                    v99 = v93;
                  }
                  else
                  {
                    v100 = *(unsigned __int8 *)(v98 + 6);
                    v341 = *(_BYTE *)(v98 + 6);
                    v101 = *(float *)v98;
                    v338 = *(float *)v98;
                    if (v339 != 4)
                      goto LABEL_156;
                    if (!v100)
                      v101 = (float)SLODWORD(v101);
                    v263 = v101 * 64.0;
                    if (v263 >= 2147483650.0)
                    {
                      v99 = 0x7FFFFFFF;
                    }
                    else if (v263 <= -2147483650.0)
                    {
                      v99 = 0x80000000;
                    }
                    else
                    {
                      v99 = (int)v263;
                    }
                  }
LABEL_157:
                  v85 = __OFADD__(v71, v99);
                  v102 = v71 + v99;
                  if (v85)
                    v103 = (v71 >> 31) + 0x7FFFFFFF;
                  else
                    v103 = v102;
                  v104 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)v32 + 1072))(v32);
                  if (__OFADD__(v103, v104))
                    v89 = (v103 >> 31) + 0x7FFFFFFF;
                  else
                    v89 = v103 + v104;
                  v33 = v308;
                  if (v339 == 11)
                  {
                    {
                      WebCore::calculationValues(void)::map = 1;
                      qword_1ECE90C98 = 0;
                    }
                    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)LODWORD(v338));
                  }
                  if (BYTE4(v316) != 11)
                  {
                    v90 = (float)((float)v89 * 0.015625) + 0.0;
                    v92 = (uint64_t *)((char *)v32 + 96);
                    goto LABEL_166;
                  }
                  v201 = &v316;
                  goto LABEL_427;
                }
                if (((1 << SBYTE4(v316)) & 0x3003) != 0)
                {
                  v73 = 1;
                  v64.n128_u32[0] = 0;
                  goto LABEL_146;
                }
                LODWORD(v316) = *(_DWORD *)v70;
                WebCore::Length::ref((int *)&v316);
              }
LABEL_148:
              v71 = v63;
              goto LABEL_149;
            }
            v179 = v307;
            if ((v44 & 0x800) == 0)
              v179 = 0;
            v307 = v179;
            v181 = *((_DWORD *)this + 30);
            v180 = *((_DWORD *)this + 31);
            v182 = v181 & 0x4000000;
            v183 = (v181 >> 26) & 1;
            v184 = (unsigned __int16)v180 >> 13;
            if ((v184 - 2) >= 2)
            {
              if (v184 == 4)
              {
                v183 = v182 == 0;
              }
              else if (v184 != 5)
              {
                if (v182)
                  v185 = 1;
                else
                  v185 = 3;
LABEL_387:
                v186 = *(_QWORD *)(*((_QWORD *)v32 + 11) + 24);
                v187 = v180 >> 13;
                v188 = (unsigned int *)(v186 + 40 + 8 * v185);
                BYTE6(v316) = 0;
                BYTE4(v316) = *((_BYTE *)v188 + 4);
                v189 = BYTE4(v316);
                BYTE5(v316) = *((_BYTE *)v188 + 5);
                v190 = 1;
                v191 = 0.0;
                if (BYTE4(v316) > 0xDu)
                {
                  v193 = 0;
                }
                else if (((1 << SBYTE4(v316)) & 0x7FC) != 0)
                {
                  v192 = *(unsigned __int8 *)(v186 + 40 + 8 * v185 + 6);
                  BYTE6(v316) = v192;
                  if (v192)
                  {
                    v190 = 0;
                    v191 = *(float *)v188;
                    *(float *)&v316 = v191;
                    v193 = LODWORD(v191);
                  }
                  else
                  {
                    v193 = *v188;
                    LODWORD(v316) = v193;
                    v191 = *(float *)&v193;
                  }
                }
                else if (((1 << SBYTE4(v316)) & 0x3003) != 0)
                {
                  v193 = 0;
                  LODWORD(v316) = 0;
                }
                else
                {
                  LODWORD(v316) = *v188;
                  v288 = v316;
                  WebCore::Length::ref((int *)&v316);
                  v193 = v288;
                  v186 = *(_QWORD *)(*((_QWORD *)v32 + 11) + 24);
                  v187 = *((_DWORD *)this + 31) >> 13;
                  v182 = *((_DWORD *)this + 30) & 0x4000000;
                  v191 = *(float *)&v288;
                  v190 = 1;
                }
                v207 = v182 != 0;
                v208 = v187 & 7;
                if ((v208 - 2) >= 2)
                {
                  if (v208 == 4)
                  {
                    v207 = v182 == 0;
                  }
                  else if (v208 != 5)
                  {
                    v12 = v182 == 0;
                    v209 = 3;
                    if (v12)
                      v209 = 1;
                    goto LABEL_449;
                  }
                }
                v209 = 2;
                if (v207)
                  v209 = 0;
LABEL_449:
                v210 = (unsigned int *)(v186 + 40 + 8 * v209);
                v341 = 0;
                v339 = *((_BYTE *)v210 + 4);
                v211 = v339;
                v340 = *((_BYTE *)v210 + 5);
                if (v339 - 2 >= 9)
                {
                  if (v339 == 11)
                  {
                    v299 = v193;
                    v338 = *(float *)v210;
                    v298 = v338;
                    WebCore::Length::ref((int *)&v338);
                    v6 = (const WebCore::RenderBlockFlow *)LODWORD(v298);
                    v193 = v299;
LABEL_452:
                    v212 = *(float *)&v6;
                    v213 = 1;
                  }
                  else
                  {
                    v6 = 0;
                    v213 = 1;
                    v212 = 0.0;
                  }
                }
                else
                {
                  if (!*((_BYTE *)v210 + 6))
                  {
                    v6 = (const WebCore::RenderBlockFlow *)*v210;
                    goto LABEL_452;
                  }
                  v213 = 0;
                  v212 = *(float *)v210;
                  v6 = (const WebCore::RenderBlockFlow *)*v210;
                }
                if (v189 == 4)
                {
                  v214 = (float)SLODWORD(v191);
                  if (!v190)
                    v214 = v191;
                  v215 = ceilf(v214 * 64.0);
                  if (v215 >= 2147500000.0)
                  {
                    v216 = 0x7FFFFFFF;
                  }
                  else if (v215 <= -2147500000.0)
                  {
                    v216 = 0x80000000;
                  }
                  else
                  {
                    v216 = (int)v215;
                  }
                }
                else
                {
                  v216 = 0;
                }
                if (v211 == 4)
                {
                  if (v213)
                    v212 = (float)SLODWORD(v212);
                  v217 = ceilf(v212 * 64.0);
                  if (v217 >= 2147500000.0)
                  {
                    v218 = 0x7FFFFFFF;
                  }
                  else if (v217 <= -2147500000.0)
                  {
                    v218 = 0x80000000;
                  }
                  else
                  {
                    v218 = (int)v217;
                  }
                  v85 = __OFADD__(v216, v218);
                  v219 = v216 + v218;
                  if (v85)
                    v216 = (v216 >> 31) + 0x7FFFFFFF;
                  else
                    v216 = v219;
                }
                v220 = (float)v216 * 0.015625;
                if (v216 != vcvts_n_s32_f32(v220, 6uLL))
                {
                  v291 = 3.4028e38;
                  if (v220 <= 0.0)
                    v291 = 1.1755e-38;
                  v300 = v193;
                  v292 = v6;
                  v293 = nextafterf((float)v216 * 0.015625, v291);
                  v6 = v292;
                  v193 = v300;
                  v220 = v293;
                }
                if (v211 == 11)
                {
                  v289 = v193;
                  {
                    WebCore::calculationValues(void)::map = 1;
                    qword_1ECE90C98 = 0;
                  }
                  WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v6);
                  v193 = v289;
                }
                v33 = v308;
                if (v189 == 11)
                {
                  {
                    WebCore::calculationValues(void)::map = 1;
                    qword_1ECE90C98 = 0;
                  }
                  WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v193);
                  v33 = v308;
                }
                v90 = v220 + 0.0;
                goto LABEL_171;
              }
            }
            if (v183)
              v185 = 2;
            else
              v185 = 0;
            goto LABEL_387;
          }
LABEL_611:
          if ((*((_BYTE *)v32 + 52) & 7) != 2 || (*((_BYTE *)v32 + 53) & 1) == 0)
          {
            v315 = (v48 & 0x40000000) == 0;
            v280 = WebCore::RenderStyle::whiteSpace((WebCore::RenderBlockFlow *)((char *)this + 80));
            if (v280 > 5 || ((1 << v280) & 0x26) == 0)
              WebCore::stripTrailingSpace((WebCore::Length *)((char *)&v329 + 4), (float *)&v329, v312, v7);
            v281 = *(_DWORD *)a2;
            v282 = ceilf(*(float *)&v329 * 64.0);
            if (v282 > -2147500000.0)
              v283 = (int)v282;
            else
              v283 = 0x80000000;
            if (v282 < 2147500000.0)
              v284 = v283;
            else
              v284 = 0x7FFFFFFF;
            if (v284 > v281)
              v281 = v284;
            *(_DWORD *)a2 = v281;
            v285 = *(_DWORD *)v305;
            v286 = ceilf(*((float *)&v329 + 1) * 64.0);
            if (v286 >= 2147500000.0)
            {
              v287 = 0x7FFFFFFF;
            }
            else if (v286 <= -2147500000.0)
            {
              v287 = 0x80000000;
            }
            else
            {
              v287 = (int)v286;
            }
            v312 = 0;
            v314 = (char *)v32 + 45;
            if (v287 > v285)
              v285 = v287;
            *(_DWORD *)v305 = v285;
            v329 = 0;
            v306 = 1;
            v328 = 1;
            v35 = 0.0;
            v36 = 0.0;
            v311 = 1;
            v33 = v308;
            goto LABEL_251;
          }
          v33 = v308;
          if ((v39 & 2) == 0)
          {
            v296 = ceilf(*(float *)&v329 * 64.0);
            if (v296 >= 2147500000.0)
            {
              v297 = 0x7FFFFFFF;
            }
            else if (v296 <= -2147500000.0)
            {
              v297 = 0x80000000;
            }
            else
            {
              v297 = (int)v296;
            }
            if (v297 <= *(_DWORD *)a2)
              v297 = *(_DWORD *)a2;
            *(_DWORD *)a2 = v297;
            LODWORD(v329) = 0;
            v33 = v308;
            continue;
          }
LABEL_365:
          v50 = (char *)v32 + 20;
          v315 = (v48 & 0x40000000) == 0;
          v314 = (char *)v32 + 45;
LABEL_366:
          v90 = 0.0;
          goto LABEL_171;
        }
      }
      if ((*(_DWORD *)(*((_QWORD *)v74 + 13) + 236) & 0x18) != 0x10 || ((*((_DWORD *)this + 31) >> 13) & 6u) - 2 <= 3)
      {
        LODWORD(v316) = 0;
        v338 = 0.0;
        WebCore::RenderBlock::computeChildPreferredLogicalWidths(this, v32, (WebCore::LayoutUnit *)&v316, (WebCore::LayoutUnit *)&v338);
        if (HIDWORD(v327))
        {
          v234 = (char *)v326 + 8 * HIDWORD(v327);
          --HIDWORD(v327);
          v235 = *((_DWORD *)v234 - 1);
          *(float *)&v329 = *(float *)&v329
                          + fmaxf(WebCore::LayoutUnit::ceilToFloat((WebCore::LayoutUnit *)v316)- (float)((float)*((int *)v234 - 2) * 0.015625), 0.0);
          v35 = v36
              + fmaxf(WebCore::LayoutUnit::ceilToFloat((WebCore::LayoutUnit *)LODWORD(v338))- (float)((float)v235 * 0.015625), 0.0);
          *((float *)&v329 + 1) = v35;
          v36 = v35;
        }
        v33 = v308;
        continue;
      }
LABEL_92:
      v49 = (char *)v32 + 46;
      if (*((_BYTE *)v32 + 46) == 17)
        goto LABEL_611;
      v50 = (char *)v32 + 20;
      v315 = (v48 & 0x40000000) == 0;
      v314 = (char *)v32 + 45;
      if ((v39 & 2) == 0)
        goto LABEL_94;
      goto LABEL_366;
    }
    break;
  }
LABEL_269:
  v138 = *((_DWORD *)this + 30);
  v139 = (v138 >> 27) & 7;
  v141 = (v138 & 0x40000000) == 0 && v139 == 3;
  if (v139 != 1 && !v141)
    WebCore::stripTrailingSpace((WebCore::Length *)((char *)&v329 + 4), (float *)&v329, v312, v7);
  if ((v33 & 2) != 0)
  {
    if (v307)
    {
      v230 = *((_QWORD *)v307 + 13);
      if (v230)
      {
        v231 = *(_DWORD *)(v230 + 4);
        if (v231)
        {
          if (v312 == (float *)v307)
            v232 = WebCore::RenderText::lastCharacterIndexStrippingSpaces(v307);
          else
            v232 = (v231 - 1);
          v233 = WebCore::RenderText::hangablePunctuationEndWidth(v307, v232);
          *(float *)&v329 = *(float *)&v329 - v233;
          *((float *)&v329 + 1) = *((float *)&v329 + 1) - v233;
        }
      }
    }
  }
  v142 = *(_DWORD *)a2;
  v143 = ceilf(*(float *)&v329 * 64.0);
  if (v143 > -2147500000.0)
    v144 = (int)v143;
  else
    v144 = 0x80000000;
  if (v143 < 2147500000.0)
    v145 = v144;
  else
    v145 = 0x7FFFFFFF;
  if (v145 > v142)
    v142 = v145;
  *(_DWORD *)a2 = v142;
  a3 = v305;
  v146 = *(_DWORD *)v305;
  v147 = ceilf(*((float *)&v329 + 1) * 64.0);
  if (v147 >= 2147500000.0)
  {
    v148 = 0x7FFFFFFF;
  }
  else if (v147 <= -2147500000.0)
  {
    v148 = 0x80000000;
  }
  else
  {
    v148 = (int)v147;
  }
  if (v148 > v146)
    v146 = v148;
  *(_DWORD *)v305 = v146;
  if (v326)
    WTF::fastFree(v326, v6);
LABEL_294:
  v149 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 <= *(_DWORD *)a3)
    v149 = *(_DWORD *)a3;
  *(_DWORD *)a3 = v149;
  v150 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 24);
  if ((*(_BYTE *)(v150 + 56) & 2) == 0)
  {
    v177 = a3;
    v264 = *(unsigned __int16 *)(v150 + 8) << 6;
LABEL_577:
    v265 = WebCore::RenderBlockFlow::columnGap(this);
    v266 = (unint64_t)(v265 * (uint64_t)(v264 - 64)) >> 6;
    if ((int)((unint64_t)(v265 * (uint64_t)(v264 - 64)) >> 32) >> 6 != (int)v266 >> 31)
      LODWORD(v266) = ((v265 ^ (v264 - 64)) >> 31) + 0x7FFFFFFF;
    v267 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 24);
    if ((*(_BYTE *)(v267 + 56) & 1) != 0)
    {
      v271 = v264;
      v272 = (unint64_t)(*(int *)a2 * (uint64_t)v264) >> 6;
      v273 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
      if ((int)((unint64_t)(*(int *)a2 * (uint64_t)v264) >> 32) >> 6 == (int)v272 >> 31)
        v273 = v272;
      v85 = __OFADD__(v273, (_DWORD)v266);
      v274 = v273 + v266;
      v275 = (v273 >> 31) + 0x7FFFFFFF;
      if (v85)
        v270 = v275;
      else
        v270 = v274;
      v269 = 0;
    }
    else
    {
      v268 = *(float *)(v267 + 4) * 64.0;
      if (v268 >= 2147483650.0)
      {
        v269 = 0x7FFFFFFF;
      }
      else if (v268 <= -2147483650.0)
      {
        v269 = 0x80000000;
      }
      else
      {
        v269 = (int)v268;
      }
      if (v269 >= *(_DWORD *)a2)
        v270 = *(_DWORD *)a2;
      else
        v270 = v269;
      v271 = v264;
    }
    *(_DWORD *)a2 = v270;
    if (*(_DWORD *)v177 > v269)
      v269 = *(_DWORD *)v177;
    v276 = v271 * (uint64_t)v269;
    v277 = (v269 >> 31) + 0x7FFFFFFF;
    if ((v276 >> 38) == (int)((unint64_t)v276 >> 6) >> 31)
      v277 = (unint64_t)v276 >> 6;
    v85 = __OFADD__(v277, (_DWORD)v266);
    v178 = v277 + v266;
    if (v85)
      v178 = (v277 >> 31) + 0x7FFFFFFF;
LABEL_600:
    a3 = v177;
    *(_DWORD *)v177 = v178;
    goto LABEL_298;
  }
  if ((*(_BYTE *)(v150 + 56) & 1) == 0)
  {
    v177 = a3;
    v264 = 64;
    goto LABEL_577;
  }
LABEL_298:
  if ((*((_BYTE *)this + 123) & 0x40) != 0 && (*((_BYTE *)this + 22) & 4) != 0)
  {
    v151 = *((_QWORD *)this + 18);
    if (v151)
    {
      v152 = *(_QWORD *)(v151 + 264);
      if (v152)
      {
        v153 = *(WebCore::RenderMarquee **)(v152 + 168);
        if (v153)
        {
          if (WebCore::RenderMarquee::isHorizontal(v153))
            *(_DWORD *)a2 = 0;
        }
      }
    }
  }
  if (*((_BYTE *)this + 46) == 37)
  {
    WebCore::RenderTableCell::styleOrColLogicalWidth(this, (uint64_t)&v316);
    v159 = BYTE4(v316);
    if (BYTE4(v316) == 4)
    {
      v160 = *(float *)&v316;
      if (!BYTE6(v316))
        v160 = (float)(int)v316;
      if (v160 <= 0.0)
        goto LABEL_304;
      v161 = v160 * 64.0;
      if (v161 >= 2147483650.0)
      {
        v162 = 0x7FFFFFFF;
      }
      else if (v161 <= -2147483650.0)
      {
        v162 = 0x80000000;
      }
      else
      {
        v162 = (int)v161;
      }
      if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8) + 68) & 4) != 0)
      {
        v164 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1064))(this);
        v165 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1072))(this);
        if (__OFADD__(v164, v165))
          v166 = (v164 >> 31) + 0x7FFFFFFF;
        else
          v166 = v164 + v165;
        v167 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 976))(this);
        if (__OFADD__(v166, v167))
          v168 = (v166 >> 31) + 0x7FFFFFFF;
        else
          v168 = v166 + v167;
        v169 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 984))(this);
        v170 = v168 + v169;
        if (__OFADD__(v168, v169))
          v170 = (v168 >> 31) + 0x7FFFFFFF;
        v85 = __OFSUB__(v162, v170);
        v171 = v162 - v170;
        if (v85)
          v162 = (v162 >> 31) + 0x7FFFFFFF;
        else
          v162 = v171;
      }
      v163 = *(_DWORD *)a2;
      if (v162 > *(_DWORD *)a2)
        v163 = v162;
      *(_DWORD *)a3 = v163 & ~(v163 >> 31);
      v159 = BYTE4(v316);
    }
    if (v159 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v316);
    }
  }
LABEL_304:
  v154 = *((_DWORD *)this + 5);
  if ((v154 & 0x10000) == 0)
  {
LABEL_305:
    v155 = 0;
    goto LABEL_306;
  }
  if ((v154 & 0x1000) != 0)
  {
LABEL_316:
    if ((*((_QWORD *)this + 12) & 0x1C00) != 0xC00 || (WebCore::RenderBox::canUseOverlayScrollbars(this) & 1) != 0)
      goto LABEL_305;
    v158 = 170;
  }
  else
  {
    if ((*((_QWORD *)this + 12) & 0xE000) != 0x6000)
      goto LABEL_305;
    if (WebCore::RenderBox::canUseOverlayScrollbars(this))
    {
      if ((*((_BYTE *)this + 21) & 0x10) == 0)
        goto LABEL_305;
      goto LABEL_316;
    }
    v158 = 169;
  }
  v278 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 8 * v158))(this);
  v279 = v278 << 6;
  if (v278 > 0x1FFFFFF)
    v279 = 0x7FFFFFFF;
  if (v278 >= -33554432)
    v155 = v279;
  else
    v155 = 0x80000000;
LABEL_306:
  v156 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(*(_DWORD *)a3, v155))
    v156 = *(_DWORD *)a3 + v155;
  *(_DWORD *)a3 = v156;
  v85 = __OFADD__(*(_DWORD *)a2, v155);
  v157 = *(_DWORD *)a2 + v155;
  if (v85)
    v157 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)a2 = v157;
}

int *WebCore::RenderBlock::computeBlockPreferredLogicalWidths(WebCore::RenderBlock *this, WebCore::LayoutUnit *a2, WebCore::LayoutUnit *a3)
{
  int v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  int *result;
  unsigned int v11;
  unsigned int v12;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  float v27;
  int v28;
  _BOOL4 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  float v34;
  int v35;
  float v36;
  double v37;
  unsigned int v38;
  double v39;
  int v40;
  int v41;
  const WebCore::RenderObject *v42;
  int v43;
  int v44;
  BOOL v45;
  signed int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  int *v51;
  int v52;
  BOOL v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  int v71;
  int v72;
  int v73;
  char v74;
  char v75;
  char v76;
  int v77;
  int v78;
  unsigned int v79;
  WebCore::RenderObject *v80;
  char *v81;
  _BOOL4 v82;
  uint64_t v83;
  unsigned int v84;
  unsigned __int8 v85;
  char v86;
  char v87;
  unsigned int v88;
  unsigned __int8 v89;
  char v90;
  char v91;
  uint64_t v92;

  v6 = *((_DWORD *)this + 30);
  v81 = (char *)this + 120;
  v7 = (v6 & 0x40000000) != 0 && (v6 & 0x38000000) == 0;
  v82 = v7;
  v8 = *((unsigned int *)this + 16);
  if (v8 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
    v9 = *(_QWORD *)((v8 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
  else
    v9 = 0;
  v80 = WebCore::RenderObject::containingBlock(this);
  v92 = 0;
  result = (int *)(*(uint64_t (**)(WebCore::RenderBlock *, char *, uint64_t *))(*(_QWORD *)this + 1768))(this, (char *)&v92 + 4, &v92);
  if ((_DWORD)result)
  {
    v71 = HIDWORD(v92);
    if (SHIDWORD(v92) <= *(_DWORD *)a2)
      v71 = *(_DWORD *)a2;
    *(_DWORD *)a2 = v71;
    v72 = v92;
    if ((int)v92 <= *(_DWORD *)a3)
      v72 = *(_DWORD *)a3;
    *(_DWORD *)a3 = v72;
  }
  if (v9)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = *(_DWORD *)(v9 + 20);
      if ((v13 & 0x1800000) != 0x1000000)
      {
        if ((v13 & 0x400) == 0)
        {
          v14 = *(_BYTE *)(v9 + 45);
LABEL_12:
          v15 = v9;
          if ((v14 & 2) != 0)
          {
            v65 = *(_QWORD *)(v9 + 32);
            if (v65)
              v15 = *(_QWORD *)(v65 + 8);
            else
              v15 = 0;
          }
          if ((v14 & 4) == 0)
            goto LABEL_16;
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1504))(v9) & 1) != 0)
          {
            v16 = 1;
          }
          else
          {
            if ((*(_BYTE *)(v9 + 45) & 1) == 0)
              goto LABEL_16;
            if ((*(_BYTE *)(v9 + 45) & 2) != 0)
            {
              v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 8) + 96);
              if ((v66 & 0x1F) != 1 && (v66 & 0x1F) != 14)
                goto LABEL_16;
LABEL_127:
              v16 = 0;
              if ((*(_BYTE *)(v9 + 45) & 0x40) != 0 && (v66 & 0xF80000000000) == 0)
              {
                if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 176))(v9) & 1) != 0)
                  goto LABEL_16;
                v67 = *(unsigned __int8 *)(v9 + 46);
                if (v67 == 20 || (*(_BYTE *)(v9 + 52) & 7) == 1 && (*(_BYTE *)(v9 + 53) & 2) != 0)
                  goto LABEL_16;
                v16 = 0;
                if (v67 != 26 && v67 != 49)
                  v16 = (*(unsigned __int8 *)(v9 + 22) >> 2) & 1;
              }
            }
            else
            {
              v66 = *(_QWORD *)(v9 + 96);
              if ((v66 & 0x1F) == 1 || (v66 & 0x1F) == 0xE)
                goto LABEL_127;
LABEL_16:
              v16 = 0;
            }
            if ((*(_BYTE *)(v9 + 21) & 8) == 0 && !v16)
            {
LABEL_19:
              v17 = *(_QWORD *)(*(_QWORD *)(v15 + 88) + 24);
              v19 = *((_DWORD *)this + 30);
              v18 = *((_DWORD *)this + 31);
              v20 = v19 & 0x4000000;
              v21 = (v19 >> 26) & 1;
              v22 = (unsigned __int16)v18 >> 13;
              if ((v22 - 2) >= 2)
              {
                if (v22 == 4)
                {
                  v21 = v20 == 0;
                }
                else if (v22 != 5)
                {
                  v23 = 3;
                  if (v20)
                    v23 = 1;
                  goto LABEL_24;
                }
              }
              v53 = v21 == 0;
              v23 = 2;
              if (v53)
                v23 = 0;
LABEL_24:
              v24 = v18 >> 13;
              v25 = v17 + 40 + 8 * v23;
              v88 = 0;
              v91 = 0;
              v89 = *(_BYTE *)(v25 + 4);
              v26 = v89;
              v90 = *(_BYTE *)(v25 + 5);
              if (v89 - 2 >= 9)
              {
                if (v89 == 11)
                {
                  v88 = *(_DWORD *)v25;
                  v69 = v88;
                  WebCore::Length::ref((int *)&v88);
                  v17 = *(_QWORD *)(*(_QWORD *)(v15 + 88) + 24);
                  v24 = *((_DWORD *)this + 31) >> 13;
                  v20 = *((_DWORD *)this + 30) & 0x4000000;
                  v27 = *(float *)&v69;
LABEL_27:
                  v28 = 1;
                }
                else
                {
                  v28 = 1;
                  v27 = 0.0;
                }
              }
              else
              {
                v91 = *(_BYTE *)(v25 + 6);
                if (!v91)
                {
                  v88 = *(_DWORD *)v25;
                  v27 = *(float *)&v88;
                  goto LABEL_27;
                }
                v28 = 0;
                v27 = *(float *)v25;
                v88 = *(_DWORD *)v25;
              }
              v29 = v20 != 0;
              v30 = v24 & 7;
              if ((v30 - 2) >= 2)
              {
                if (v30 == 4)
                {
                  v29 = v20 == 0;
                }
                else if (v30 != 5)
                {
                  v53 = v20 == 0;
                  v31 = 3;
                  if (v53)
                    v31 = 1;
                  goto LABEL_36;
                }
              }
              v31 = 2;
              if (v29)
                v31 = 0;
LABEL_36:
              v32 = v17 + 40 + 8 * v31;
              v84 = 0;
              v87 = 0;
              v85 = *(_BYTE *)(v32 + 4);
              v33 = v85;
              v86 = *(_BYTE *)(v32 + 5);
              if (v85 - 2 >= 9)
              {
                if (v85 == 11)
                {
                  v84 = *(_DWORD *)v32;
                  v79 = v84;
                  WebCore::Length::ref((int *)&v84);
                  v34 = *(float *)&v79;
LABEL_39:
                  v35 = 1;
                }
                else
                {
                  v35 = 1;
                  v34 = 0.0;
                }
              }
              else
              {
                v87 = *(_BYTE *)(v32 + 6);
                if (!v87)
                {
                  v84 = *(_DWORD *)v32;
                  v34 = *(float *)&v84;
                  goto LABEL_39;
                }
                v35 = 0;
                v34 = *(float *)v32;
                v84 = *(_DWORD *)v32;
              }
              if (v26 == 4)
              {
                v36 = (float)SLODWORD(v27);
                if (!v28)
                  v36 = v27;
                v37 = (float)(v36 + 0.0) * 64.0;
                if (v37 >= 2147483650.0)
                {
                  v38 = 0x7FFFFFFF;
                }
                else if (v37 <= -2147483650.0)
                {
                  v38 = 0x80000000;
                }
                else
                {
                  v38 = (int)v37;
                }
              }
              else
              {
                v38 = 0;
              }
              if (v33 == 4)
              {
                if (v35)
                  v34 = (float)SLODWORD(v34);
                v39 = (float)(v34 + 0.0) * 64.0;
                if (v39 >= 2147483650.0)
                {
                  v40 = 0x7FFFFFFF;
                }
                else if (v39 <= -2147483650.0)
                {
                  v40 = 0x80000000;
                }
                else
                {
                  v40 = (int)v39;
                }
              }
              else
              {
                v40 = 0;
              }
              v41 = v38 + v40;
              if (__OFADD__(v38, v40))
                v41 = (v38 >> 31) + 0x7FFFFFFF;
              v83 = 0;
              result = (int *)WebCore::RenderBlock::computeChildPreferredLogicalWidths(this, (WebCore::RenderObject *)v9, (WebCore::LayoutUnit *)((char *)&v83 + 4), (WebCore::LayoutUnit *)&v83);
              v43 = HIDWORD(v83) + v41;
              if (__OFADD__(HIDWORD(v83), v41))
                v43 = (HIDWORD(v83) >> 31) + 0x7FFFFFFF;
              v44 = *(_DWORD *)a2;
              if (v43 > *(_DWORD *)a2)
                v44 = v43;
              *(_DWORD *)a2 = v44;
              if (v82)
              {
                v73 = *(unsigned __int8 *)(v9 + 46);
                if (v73 != 35 && v73 != 63)
                {
                  if (v43 <= *(_DWORD *)a3)
                    v43 = *(_DWORD *)a3;
                  *(_DWORD *)a3 = v43;
                }
              }
              v45 = __OFADD__((_DWORD)v83, v41);
              v46 = v83 + v41;
              if (v45)
                v46 = (v83 >> 31) + 0x7FFFFFFF;
              v47 = *(_DWORD *)(v9 + 20);
              if ((v47 & 0x800) == 0)
              {
                if (v16)
                {
                  v51 = (int *)((char *)v80 + 120);
                  if (!v80)
                    v51 = (int *)v81;
                  v52 = *v51;
                  v53 = (v52 & 0x4000000) == 0;
                  if ((v52 & 0x4000000) != 0)
                    v54 = v40;
                  else
                    v54 = v38;
                  if (v53)
                    v55 = v40;
                  else
                    v55 = v38;
                  if (v54 >= 1)
                  {
                    if ((int)v11 > v54)
                      v54 = v11;
                  }
                  else
                  {
                    v45 = __OFADD__(v11, v54);
                    v54 += v11;
                    if (v45)
                      v54 = (v11 >> 31) + 0x7FFFFFFF;
                  }
                  if (v55 >= 1)
                  {
                    if ((int)v12 > v55)
                      v55 = v12;
                  }
                  else
                  {
                    v45 = __OFADD__(v12, v55);
                    v55 += v12;
                    if (v45)
                      v55 = (v12 >> 31) + 0x7FFFFFFF;
                  }
                  v45 = __OFADD__((_DWORD)v83, v54);
                  v56 = v83 + v54;
                  if (v45)
                    v56 = (v83 >> 31) + 0x7FFFFFFF;
                  v57 = v56 + v55;
                  if (__OFADD__(v56, v55))
                    v57 = (v56 >> 31) + 0x7FFFFFFF;
                  v58 = v11 + v12;
                  if (__OFADD__(v11, v12))
                    v58 = (v11 >> 31) + 0x7FFFFFFF;
                  v12 = 0;
                  v11 = 0;
                  if (v57 <= v58)
                    v46 = v58;
                  else
                    v46 = v57;
                }
                else
                {
                  v48 = v11 + v12;
                  if (__OFADD__(v11, v12))
                    v48 = (v11 >> 31) + 0x7FFFFFFF;
                  v12 = 0;
                  v11 = 0;
                  if (v48 <= *(_DWORD *)a3)
                    v48 = *(_DWORD *)a3;
                  *(_DWORD *)a3 = v48;
                  v47 = *(_DWORD *)(v9 + 20);
                }
              }
              if ((v47 & 0x800) != 0)
              {
                result = (int *)WebCore::RenderStyle::usedFloat((WebCore::RenderStyle *)v9, v42);
                if ((_DWORD)result == 2)
                {
                  if (__OFADD__(v11, v46))
                    v11 = (v11 >> 31) + 0x7FFFFFFF;
                  else
                    v11 += v46;
                }
                else if (__OFADD__(v12, v46))
                {
                  v12 = (v12 >> 31) + 0x7FFFFFFF;
                }
                else
                {
                  v12 += v46;
                }
              }
              else
              {
                v49 = *(_DWORD *)a3;
                if (v46 > *(_DWORD *)a3)
                  v49 = v46;
                *(_DWORD *)a3 = v49;
              }
              v50 = *(unsigned int *)(v9 + 47);
              if (v50 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32))
                v9 = *(_QWORD *)((v50 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32)) + 8);
              else
                v9 = 0;
              if (v85 == 11)
              {
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v84);
              }
              if (v89 == 11)
              {
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v88);
              }
              goto LABEL_78;
            }
          }
          v59 = v11 + v12;
          if (__OFADD__(v11, v12))
            v59 = (v11 >> 31) + 0x7FFFFFFF;
          v60 = v9;
          if ((*(_BYTE *)(v9 + 45) & 2) != 0)
            v60 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8);
          v61 = *(_WORD *)(v60 + 98) & 7;
          if (v61)
          {
            switch(v61)
            {
              case 1:
                goto LABEL_195;
              case 2:
                goto LABEL_199;
              case 3:
              case 4:
                v74 = *((_BYTE *)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v9) + 123);
                if (v61 == 3)
                  v75 = 2;
                else
                  v75 = 1;
                if (v61 == 3)
                  v76 = 1;
                else
                  v76 = 2;
                if ((v74 & 4) != 0)
                  LOBYTE(v61) = v75;
                else
                  LOBYTE(v61) = v76;
                if ((v61 & 1) == 0)
                  goto LABEL_198;
                goto LABEL_195;
              case 5:
                LOBYTE(v61) = 3;
LABEL_195:
                v11 = 0;
                v77 = *(_DWORD *)a3;
                if (v59 > *(_DWORD *)a3)
                  v77 = v59;
                *(_DWORD *)a3 = v77;
LABEL_198:
                if ((v61 & 0xFE) == 2)
                {
LABEL_199:
                  v12 = 0;
                  v78 = *(_DWORD *)a3;
                  if (v59 > *(_DWORD *)a3)
                    v78 = v59;
                  *(_DWORD *)a3 = v78;
                }
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x19433D628);
            }
          }
          goto LABEL_19;
        }
        v14 = *(_BYTE *)(v9 + 45);
        if ((v14 & 1) != 0)
          goto LABEL_12;
        v68 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 8);
        if (!v68
          || (*(_WORD *)(v68 + 28) & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(v68 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
        {
          goto LABEL_12;
        }
      }
      v62 = *(unsigned int *)(v9 + 47);
      if (!(v62 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32)))
        goto LABEL_117;
      v9 = *(_QWORD *)((v62 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32)) + 8);
LABEL_78:
      if (!v9)
        goto LABEL_117;
    }
  }
  v12 = 0;
  v11 = 0;
LABEL_117:
  *(_DWORD *)a2 &= ~(*(int *)a2 >> 31);
  v63 = *(_DWORD *)a3;
  v64 = v11 + v12;
  if (__OFADD__(v11, v12))
    v64 = (v11 >> 31) + 0x7FFFFFFF;
  if (v63 <= v64)
    v63 = v64;
  *(_DWORD *)a3 = v63 & ~(v63 >> 31);
  return result;
}

uint64_t WebCore::RenderBlock::computeChildPreferredLogicalWidths(WebCore::RenderBlock *this, WebCore::RenderObject *a2, WebCore::LayoutUnit *a3, WebCore::LayoutUnit *a4)
{
  WebCore::LayoutUnit *v4;
  WebCore::RenderObject *v6;
  int v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  float v17;
  double v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  double *v26;
  double v27;
  double v28;
  int v29;
  WebCore::LayoutUnit *v30;
  char *v31;
  int v32;

  v4 = a4;
  v6 = a2;
  if ((*((_BYTE *)a2 + 45) & 4) != 0)
  {
    v7 = *((_DWORD *)a2 + 4);
    v8 = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 4) = v7 + 1;
    if (((v8 & 0x1000) == 0) == ((*((_BYTE *)this + 21) & 0x10) == 0))
    {
      if (v7 != -1)
      {
        *((_DWORD *)a2 + 4) = v7;
        goto LABEL_5;
      }
LABEL_50:
      __break(0xC471u);
      JUMPOUT(0x19433D9BCLL);
    }
    if ((v8 & 0xF8) == 0)
    {
      v31 = (char *)a2 + 160;
      if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4)
        v31 = (char *)a2 + 164;
      result = *(unsigned int *)v31;
LABEL_48:
      *(_DWORD *)v4 = result;
      *(_DWORD *)a3 = result;
      v32 = *((_DWORD *)v6 + 4);
      if (v32)
      {
        *((_DWORD *)v6 + 4) = v32 - 1;
        return result;
      }
      goto LABEL_50;
    }
    if (WebCore::RenderBox::shouldComputeLogicalHeightFromAspectRatio(a2, a2))
    {
      v15 = *(_QWORD *)(*((_QWORD *)v6 + 11) + 8);
      if (((*((_DWORD *)v6 + 31) >> 13) & 6u) - 2 <= 3)
      {
        if (*(_BYTE *)(v15 + 16) == 4)
        {
          v16 = v15 + 12;
          goto LABEL_18;
        }
      }
      else if (*(_BYTE *)(v15 + 8) == 4)
      {
        v16 = v15 + 4;
LABEL_18:
        if (*(_BYTE *)(v16 + 6))
          v17 = *(float *)v16;
        else
          v17 = (float)*(int *)v16;
        v18 = v17 * 64.0;
        v19 = 0x80000000;
        if (v18 > -2147483650.0)
          v19 = (int)v18;
        if (v18 < 2147483650.0)
          v20 = v19;
        else
          v20 = 0x7FFFFFFF;
        v21 = WebCore::RenderBoxModelObject::horizontalBorderAndPaddingExtent(v6);
        v22 = WebCore::RenderBoxModelObject::verticalBorderAndPaddingExtent(v6);
        v23 = *((_QWORD *)v6 + 11);
        v24 = *(_QWORD *)(v23 + 32);
        v25 = (double *)(v24 + 112);
        if (((*((_DWORD *)v6 + 31) >> 13) & 6u) - 2 >= 4)
          v26 = (double *)(v24 + 112);
        else
          v26 = (double *)(v24 + 104);
        if (((*((_DWORD *)v6 + 31) >> 13) & 6u) - 2 >= 4)
          v25 = (double *)(v24 + 104);
        v27 = *v25 / *v26 * 64.0;
        if (v27 >= 2147483650.0)
        {
          v28 = 33554432.0;
        }
        else if (v27 <= -2147483650.0)
        {
          v28 = -33554432.0;
        }
        else
        {
          v28 = (double)(int)v27 * 0.015625;
        }
        if ((*(_DWORD *)(v24 + 148) & 0x60) == 0x40)
          v29 = 0;
        else
          v29 = (*(unsigned __int8 *)(*(_QWORD *)(v23 + 8) + 68) >> 2) & 1;
        result = WebCore::RenderBox::blockSizeFromAspectRatio(v21, v22, v29, v20, (*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148) >> 5) & 3, (*((_BYTE *)this + 52) & 7) == 3, v28);
        goto LABEL_48;
      }
    }
    result = WebCore::RenderBox::computeLogicalHeightWithoutLayout(v6);
    goto LABEL_48;
  }
LABEL_5:
  result = (*(uint64_t (**)(WebCore::RenderBlock *, WebCore::RenderObject *, WebCore::LayoutUnit *, WebCore::LayoutUnit *))(*(_QWORD *)this + 1808))(this, a2, a3, a4);
  if ((*((_BYTE *)v6 + 45) & 0x40) == 0)
    return result;
  if ((*((_BYTE *)v6 + 45) & 2) != 0)
    v6 = *(WebCore::RenderObject **)(*((_QWORD *)v6 + 4) + 8);
  v10 = *(_QWORD *)(*((_QWORD *)v6 + 11) + 8);
  v11 = v10 + 12;
  v12 = v10 + 4;
  if (((*((_DWORD *)v6 + 31) >> 13) & 6u) - 2 >= 4)
    v11 = v12;
  v13 = *(unsigned __int8 *)(v11 + 4);
  if (v13 == 8)
  {
    v30 = v4;
    v4 = a3;
LABEL_38:
    *(_DWORD *)v4 = *(_DWORD *)v30;
    return result;
  }
  if (v13 == 7)
  {
    v30 = a3;
    goto LABEL_38;
  }
  return result;
}

uint64_t WebCore::RenderFlexibleBox::avoidsFloats(WebCore::RenderFlexibleBox *this)
{
  return 1;
}

uint64_t WebCore::RenderBlock::computeChildIntrinsicLogicalWidths(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result;

  *a3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 408))(a2);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 416))(a2);
  *a4 = result;
  return result;
}

uint64_t WebCore::RenderBox::maxPreferredLogicalWidth(WebCore::RenderBox *this)
{
  if ((*((_BYTE *)this + 21) & 0x20) != 0)
    (*(void (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1640))(this);
  return *((unsigned int *)this + 47);
}

uint64_t WebCore::RenderBox::minPreferredLogicalWidth(WebCore::RenderBox *this)
{
  if ((*((_BYTE *)this + 21) & 0x20) != 0)
    (*(void (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1640))(this);
  return *((unsigned int *)this + 46);
}

uint64_t WebCore::RenderBlock::computePreferredWidthsForExcludedChildren(WebCore::RenderBlock *this, WebCore::LayoutUnit *a2, WebCore::LayoutUnit *a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  float v20;
  double v21;
  unsigned int v22;
  int v23;
  float v24;
  double v25;
  int v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  unsigned int v34;
  unsigned __int8 v35;
  char v36;
  unsigned int v37;
  unsigned __int8 v38;
  char v39;

  if ((*((_BYTE *)this + 45) & 1) != 0)
    return 0;
  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!v3
    || (*(_WORD *)(v3 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
  {
    return 0;
  }
  result = WebCore::RenderBlock::findFieldsetLegend((uint64_t)this, 0);
  if (result)
  {
    v5 = result;
    *(_DWORD *)(result + 20) |= 0x400u;
    WebCore::RenderBlock::computeChildPreferredLogicalWidths(this, (WebCore::RenderObject *)result, a2, a3);
    v6 = WebCore::RenderBox::intrinsicScrollbarLogicalWidth(this);
    v7 = v6 << 6;
    if (v6 < -33554432)
      v7 = 0x80000000;
    if (v6 > 0x1FFFFFF)
      v7 = 0x7FFFFFFF;
    v8 = *(_DWORD *)a2 - v7;
    if (__OFSUB__(*(_DWORD *)a2, v7))
      v8 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
    *(_DWORD *)a2 = v8;
    v9 = __OFSUB__(*(_DWORD *)a3, v7);
    v10 = *(_DWORD *)a3 - v7;
    if (v9)
      v10 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
    *(_DWORD *)a3 = v10;
    v11 = *((_DWORD *)this + 30);
    v12 = (v11 >> 26) & 1;
    v13 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    if ((v13 - 2) >= 2)
    {
      if (v13 == 4)
      {
        v12 = (v11 & 0x4000000) == 0;
      }
      else if (v13 != 5)
      {
        v14 = 3;
        if ((v11 & 0x4000000) != 0)
          v14 = 1;
        goto LABEL_21;
      }
    }
    v30 = v12 == 0;
    v14 = 2;
    if (v30)
      v14 = 0;
LABEL_21:
    WebCore::Length::Length((WebCore::Length *)&v37, (const WebCore::Length *)(*(_QWORD *)(*(_QWORD *)(v5 + 88) + 24) + 8 * v14 + 40));
    v15 = *((_DWORD *)this + 30);
    v16 = (v15 >> 26) & 1;
    v17 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    if ((v17 - 2) >= 2)
    {
      if (v17 == 4)
      {
        v16 = (v15 & 0x4000000) == 0;
      }
      else if (v17 != 5)
      {
        v18 = 3;
        if ((v15 & 0x4000000) == 0)
          v18 = 1;
LABEL_26:
        WebCore::Length::Length((WebCore::Length *)&v34, (const WebCore::Length *)(*(_QWORD *)(*(_QWORD *)(v5 + 88) + 24) + 8 * v18 + 40));
        v19 = v38;
        if (v38 == 4)
        {
          v20 = *(float *)&v37;
          if (!v39)
            v20 = (float)(int)v37;
          v21 = (float)(v20 + 0.0) * 64.0;
          if (v21 >= 2147483650.0)
          {
            v22 = 0x7FFFFFFF;
          }
          else if (v21 <= -2147483650.0)
          {
            v22 = 0x80000000;
          }
          else
          {
            v22 = (int)v21;
          }
        }
        else
        {
          v22 = 0;
        }
        v23 = v35;
        if (v35 == 4)
        {
          v24 = *(float *)&v34;
          if (!v36)
            v24 = (float)(int)v34;
          v25 = (float)(v24 + 0.0) * 64.0;
          if (v25 >= 2147483650.0)
          {
            v26 = 0x7FFFFFFF;
          }
          else if (v25 <= -2147483650.0)
          {
            v26 = 0x80000000;
          }
          else
          {
            v26 = (int)v25;
          }
        }
        else
        {
          v26 = 0;
        }
        v9 = __OFADD__(v22, v26);
        v27 = v22 + v26;
        if (v9)
          v27 = (v22 >> 31) + 0x7FFFFFFF;
        v28 = *(_DWORD *)a2 + v27;
        if (__OFADD__(*(_DWORD *)a2, v27))
          v28 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
        *(_DWORD *)a2 = v28;
        v29 = *(_DWORD *)a3 + v27;
        if (__OFADD__(*(_DWORD *)a3, v27))
          v29 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
        *(_DWORD *)a3 = v29;
        if (v23 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v34);
          v19 = v38;
        }
        if (v19 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v37);
        }
        return 1;
      }
    }
    v30 = v16 == 0;
    v18 = 2;
    if (!v30)
      v18 = 0;
    goto LABEL_26;
  }
  return result;
}

float WebCore::LayoutUnit::ceilToFloat(WebCore::LayoutUnit *this)
{
  float result;
  float v2;

  result = (float)(int)this * 0.015625;
  if (vcvts_n_s32_f32(result, 6uLL) != (_DWORD)this)
  {
    v2 = 1.1755e-38;
    if (result > 0.0)
      v2 = 3.4028e38;
    return nextafterf(result, v2);
  }
  return result;
}

uint64_t WebCore::RenderObject::isImage(WebCore::RenderObject *this)
{
  return 0;
}

WebCore::Length *WebCore::stripTrailingSpace(WebCore::Length *this, float *a2, float *a3, WebCore::RenderObject *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  float v13;
  WTF::StringImpl *v14;
  int v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a3)
  {
    v22 = v7;
    v23 = v6;
    v24 = v4;
    v25 = v5;
    if ((*((_BYTE *)a3 + 45) & 2) != 0)
    {
      v9 = (float *)this;
      v21 = 32;
      v10 = *((_QWORD *)a3 + 4);
      if (v10)
      {
        v10 = *(_QWORD *)(v10 + 8);
        v11 = *(_QWORD *)(v10 + 112);
      }
      else
      {
        v11 = MEMORY[0x70];
      }
      WebCore::RenderBlock::constructTextRun(1uLL, v10 + 80, 4, 0, (uint64_t)&v19);
      v13 = WebCore::FontCascade::width(v11 + 32, (uint64_t)&v19);
      v14 = v20;
      v20 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v12);
        else
          *(_DWORD *)v14 -= 2;
      }
      this = (WebCore::Length *)(v11 + 240);
      v15 = *(unsigned __int8 *)(v11 + 244);
      if (v15 == 4)
      {
        if (*(_BYTE *)(v11 + 246))
          v16 = *(float *)this;
        else
          v16 = (float)*(int *)this;
      }
      else if (v15 == 3)
      {
        if (*(_BYTE *)(v11 + 246))
          v18 = *(float *)this;
        else
          v18 = (float)*(int *)this;
        v16 = (float)(v18 / 100.0) * *(float *)(v11 + 204);
      }
      else
      {
        v16 = 0.0;
        if (v15 == 11)
          this = (WebCore::Length *)WebCore::Length::nonNanCalculatedValue(this, *(float *)(v11 + 204));
      }
      v17 = *v9 - (float)(v13 + v16);
      *v9 = v17;
      if (*a2 > v17)
        *a2 = v17;
    }
  }
  return this;
}

uint64_t WebCore::RenderDeprecatedFlexibleBox::avoidsFloats(WebCore::RenderDeprecatedFlexibleBox *this)
{
  return 1;
}

uint64_t WebCore::RenderBox::computeIntrinsicKeywordLogicalWidths(WebCore::RenderBox *this, WebCore::LayoutUnit *a2, WebCore::LayoutUnit *a3)
{
  return (*(uint64_t (**)(WebCore::RenderBox *, WebCore::LayoutUnit *, WebCore::LayoutUnit *))(*(_QWORD *)this + 1624))(this, a2, a3);
}

uint64_t WebCore::RenderReplaced::computePreferredLogicalWidths(WebCore::RenderReplaced *this)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t result;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  _BYTE *v24;
  float *v25;
  float v26;
  BOOL v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;

  v2 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  v3 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v4 = v3 + 12;
  v5 = v3 + 4;
  if (v2 < 4)
    v5 = v4;
  if ((*(_BYTE *)(v5 + 4) & 0xF7) == 3)
  {
    v6 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 1320))(this);
    if (v2 <= 3)
      v6 >>= 32;
  }
  else
  {
    LODWORD(v6) = (*(uint64_t (**)(WebCore::RenderReplaced *, uint64_t))(*(_QWORD *)this + 1328))(this, 1);
  }
  *((_DWORD *)this + 46) = v6;
  *((_DWORD *)this + 47) = v6;
  v7 = *((_QWORD *)this + 4);
  v9 = v7
    && (v8 = *(_QWORD *)(v7 + 8)) != 0
    && *(char *)(v8 + 45) < 0
    && (*((_BYTE *)this + 21) & 4) == 0
    && *(_BYTE *)(v8 + 395) != 0;
  v10 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  v11 = *(_BYTE **)(*((_QWORD *)this + 11) + 8);
  if (v10 <= 3)
  {
    if ((v11[16] & 0xF7) == 3)
      goto LABEL_12;
    v24 = v11 + 44;
  }
  else
  {
    if ((v11[8] & 0xF7) == 3)
    {
LABEL_12:
      *((_DWORD *)this + 46) = 0;
      goto LABEL_13;
    }
    v24 = v11 + 28;
  }
  if ((v24[4] & 0xF7) == 3)
    goto LABEL_12;
LABEL_13:
  if (v9)
    goto LABEL_18;
  if (v10 <= 3)
  {
    if (v11[40] != 4)
      goto LABEL_66;
    v25 = (float *)(v11 + 36);
  }
  else
  {
    if (v11[24] != 4)
      goto LABEL_16;
    v25 = (float *)(v11 + 20);
  }
  if (*((_BYTE *)v25 + 6))
    v26 = *v25;
  else
    v26 = (float)*(int *)v25;
  if (v26 > 0.0)
  {
    v27 = v10 >= 4;
    v28 = v11 + 36;
    v29 = v11 + 20;
    if (v27)
      v30 = (uint64_t)v29;
    else
      v30 = (uint64_t)v28;
    v31 = WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing(this, v30);
    v32 = *((_DWORD *)this + 47);
    if (v32 <= v31)
      v32 = v31;
    *((_DWORD *)this + 47) = v32;
    v33 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
    v34 = v33 + 36;
    v35 = v33 + 20;
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
      v36 = v35;
    else
      v36 = v34;
    v37 = WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing(this, v36);
    v38 = *((_DWORD *)this + 46);
    if (v38 <= v37)
      v38 = v37;
    *((_DWORD *)this + 46) = v38;
    v11 = *(_BYTE **)(*((_QWORD *)this + 11) + 8);
    v10 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  }
LABEL_16:
  if (v10 > 3)
  {
    if (v11[32] != 4)
      goto LABEL_18;
    v39 = (uint64_t)(v11 + 28);
    goto LABEL_54;
  }
LABEL_66:
  if (v11[48] != 4)
    goto LABEL_18;
  v39 = (uint64_t)(v11 + 44);
LABEL_54:
  v40 = WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing(this, v39);
  v41 = *((_DWORD *)this + 47);
  if (v40 < v41)
    v41 = v40;
  *((_DWORD *)this + 47) = v41;
  v42 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v43 = v42 + 44;
  v44 = v42 + 28;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v45 = v44;
  else
    v45 = v43;
  v46 = WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing(this, v45);
  v47 = *((_DWORD *)this + 46);
  if (v46 < v47)
    v47 = v46;
  *((_DWORD *)this + 46) = v47;
LABEL_18:
  v12 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 1064))(this);
  v13 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 1072))(this);
  if (__OFADD__(v12, v13))
    v14 = (v12 >> 31) + 0x7FFFFFFF;
  else
    v14 = v12 + v13;
  v15 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 976))(this);
  if (__OFADD__(v14, v15))
    v16 = (v14 >> 31) + 0x7FFFFFFF;
  else
    v16 = v14 + v15;
  result = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 984))(this);
  v18 = v16 + result;
  if (__OFADD__(v16, (_DWORD)result))
    v18 = (v16 >> 31) + 0x7FFFFFFF;
  v19 = *((_DWORD *)this + 46);
  v20 = v19 + v18;
  if (__OFADD__(v19, v18))
    v20 = (v19 >> 31) + 0x7FFFFFFF;
  *((_DWORD *)this + 46) = v20;
  v21 = *((_DWORD *)this + 47);
  v22 = __OFADD__(v21, v18);
  v23 = v21 + v18;
  if (v22)
    v23 = (v21 >> 31) + 0x7FFFFFFF;
  *((_DWORD *)this + 47) = v23;
  *((_DWORD *)this + 5) &= ~0x2000u;
  return result;
}

uint64_t WebCore::RenderStyle::usedClear(WebCore::RenderStyle *this, const WebCore::RenderObject *a2)
{
  WebCore::RenderStyle *v2;
  unsigned int v3;
  uint64_t result;
  char v5;
  char v6;
  unsigned int v7;

  v2 = this;
  if ((*((_BYTE *)this + 45) & 2) != 0)
    v2 = *(WebCore::RenderStyle **)(*((_QWORD *)this + 4) + 8);
  v3 = *((_WORD *)v2 + 49) & 7;
  if (v3 < 3)
    return v3;
  v7 = v3;
  if (v3 - 3 < 2)
  {
    v5 = *((_BYTE *)WebCore::RenderObject::containingBlock(this) + 123);
    if (v7 == 3)
      v6 = 2;
    else
      v6 = 1;
    if (v7 == 3)
      LOBYTE(v3) = 1;
    else
      LOBYTE(v3) = 2;
    if ((v5 & 4) != 0)
      LOBYTE(v3) = v6;
    return v3;
  }
  if (v3 == 5)
  {
    LOBYTE(v3) = 3;
    return v3;
  }
  result = 3809;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderStyle::usedFloat(WebCore::RenderStyle *this, const WebCore::RenderObject *a2)
{
  WebCore::RenderStyle *v2;
  int v3;
  uint64_t v4;
  uint64_t result;
  char v6;
  unsigned int v7;
  unsigned int v8;

  v2 = this;
  if ((*((_BYTE *)this + 45) & 2) != 0)
    v2 = *(WebCore::RenderStyle **)(*((_QWORD *)this + 4) + 8);
  v3 = (*((_DWORD *)v2 + 24) >> 25) & 7;
  v4 = 1;
  switch(v3)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v4 = 2;
      goto LABEL_5;
    case 2:
      v4 = 4;
      goto LABEL_5;
    case 3:
    case 4:
      v6 = *((_BYTE *)WebCore::RenderObject::containingBlock(this) + 123);
      if (v3 == 3)
        v7 = 4;
      else
        v7 = 2;
      if (v3 == 3)
        v8 = 2;
      else
        v8 = 4;
      if ((v6 & 4) != 0)
        v4 = v7;
      else
        v4 = v8;
LABEL_5:
      result = v4;
      break;
    default:
      result = 3830;
      __break(0xC471u);
      break;
  }
  return result;
}

unint64_t WebCore::RenderReplaced::computeIntrinsicLogicalWidths(WebCore::RenderReplaced *this, WebCore::LayoutUnit *a2, WebCore::LayoutUnit *a3)
{
  unsigned int v5;
  unint64_t result;
  unint64_t v7;

  v5 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  result = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)this + 1320))(this);
  v7 = HIDWORD(result);
  if (v5 > 3)
    LODWORD(v7) = result;
  *(_DWORD *)a3 = v7;
  *(_DWORD *)a2 = v7;
  return result;
}

uint64_t WebCore::IOSApplication::isEvernote(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE81758 == 1)
    return byte_1ECE81757 != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE81757 = IsEqualTo;
  byte_1ECE81758 = 1;
  return result;
}

void sub_19433E5A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::FontPlatformData::attributes(WebCore::FontPlatformData *this@<X0>, uint64_t a2@<X8>)
{
  __int16 v4;
  char v5;
  __int16 v6;
  const __CTFontDescriptor *v7;
  const __CFURL *v8;
  CFStringRef v9;
  CFStringRef v10;

  v4 = *((_WORD *)this + 6);
  v5 = *((_BYTE *)this + 14);
  v6 = *((_WORD *)this + 12);
  *(_DWORD *)a2 = *((_DWORD *)this + 2);
  *(_WORD *)(a2 + 4) = v4;
  *(_BYTE *)(a2 + 6) = v5;
  *(_WORD *)(a2 + 7) = v6;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v7 = CTFontCopyFontDescriptor(*(CTFontRef *)this);
  *(_QWORD *)(a2 + 16) = CTFontDescriptorCopyAttributes(v7);
  if (!*((_QWORD *)this + 2))
  {
    *(_DWORD *)(a2 + 24) = CTFontDescriptorGetOptions();
    v8 = (const __CFURL *)CTFontCopyAttribute(*(CTFontRef *)this, (CFStringRef)*MEMORY[0x1E0CA83C8]);
    v9 = CFURLGetString(v8);
    v10 = v9;
    if (v9)
      CFRetain(v9);
    *(_QWORD *)(a2 + 32) = v10;
    *(_QWORD *)(a2 + 40) = CTFontCopyPostScriptName(*(CTFontRef *)this);
    if (v8)
      CFRelease(v8);
  }
  if (v7)
    CFRelease(v7);
}

void WebCore::MediaEngineConfigurationFactory::clearFactories(WebCore::MediaEngineConfigurationFactory *this)
{
  uint64_t *v1;
  void *v2;

  v1 = WebCore::factories(this);
  WTF::Vector<WebCore::MediaEngineConfigurationFactory::MediaEngineFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)v1, v2);
}

uint64_t *WebCore::MediaEngineConfigurationFactory::installFactory(WebCore *a1)
{
  uint64_t *result;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  result = WebCore::factories(a1);
  if (HIDWORD(qword_1EE2F8D90) == (_DWORD)qword_1EE2F8D90)
    return WTF::Vector<WebCore::MediaEngineConfigurationFactory::MediaEngineFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaEngineConfigurationFactory::MediaEngineFactory>((uint64_t)&WebCore::factories(void)::factories, (unint64_t)a1);
  v3 = HIDWORD(qword_1EE2F8D90) + 1;
  v4 = (_QWORD *)(WebCore::factories(void)::factories + 16 * HIDWORD(qword_1EE2F8D90));
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  *v4 = v5;
  v6 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  v4[1] = v6;
  HIDWORD(qword_1EE2F8D90) = v3;
  return result;
}

uint64_t *WebCore::factories(WebCore *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  {
    WebCore::defaultFactories((WebCore *)&v4);
    WebCore::factories(void)::factories = v4;
    v2 = v5;
    v4 = 0;
    v5 = 0;
    qword_1EE2F8D90 = v2;
    WTF::Vector<WebCore::MediaEngineConfigurationFactory::MediaEngineFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v4, v3);
  }
  return &WebCore::factories(void)::factories;
}

uint64_t WebCore::defaultFactories(WebCore *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3417A28;
  v2[1] = WebCore::createMediaPlayerDecodingConfigurationCocoa;
  v5 = (uint64_t)v2;
  v6 = 0;
  WTF::Vector<WebCore::MediaEngineConfigurationFactory::MediaEngineFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaEngineConfigurationFactory::MediaEngineFactory>((uint64_t)this, (unint64_t)&v5);
  v3 = v6;
  v6 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *WTF::Vector<WebCore::MediaEngineConfigurationFactory::MediaEngineFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaEngineConfigurationFactory::MediaEngineFactory>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  result = (uint64_t *)WTF::Vector<WebCore::MediaEngineConfigurationFactory::MediaEngineFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4 + 1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v4);
  v7 = *result;
  *result = 0;
  *v6 = v7;
  v8 = result[1];
  result[1] = 0;
  v6[1] = v8;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

unint64_t WTF::Vector<WebCore::MediaEngineConfigurationFactory::MediaEngineFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::MediaEngineConfigurationFactory::MediaEngineFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebCore::MediaEngineConfigurationFactory::MediaEngineFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::MediaEngineConfigurationFactory::MediaEngineFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = (_QWORD *)result;
        result = (uint64_t)v4;
        do
        {
          v8 = *(WTF **)result;
          *(_QWORD *)result = 0;
          *v7 = v8;
          v9 = *(_QWORD *)(result + 8);
          *(_QWORD *)(result + 8) = 0;
          v7[1] = v9;
          WebCore::MediaEngineConfigurationFactory::MediaEngineFactory::~MediaEngineFactory((WebCore::MediaEngineConfigurationFactory::MediaEngineFactory *)result);
          result = v10 + 16;
          v7 += 2;
        }
        while ((WTF *)result != (WTF *)((char *)v4 + 16 * v5));
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::MediaEngineConfigurationFactory::MediaEngineFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::MediaEngineConfigurationFactory::MediaEngineFactory *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WebCore::MediaEngineConfigurationFactory::MediaEngineFactory **)a1;
    v7 = 16 * v3;
    do
    {
      WebCore::MediaEngineConfigurationFactory::MediaEngineFactory::~MediaEngineFactory(v6);
      v6 = (WebCore::MediaEngineConfigurationFactory::MediaEngineFactory *)(v8 + 16);
      v7 -= 16;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WTF::Vector<WebCore::MediaEngineConfigurationFactory::MediaEngineFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, void *a2)
{
  WebCore::MediaEngineConfigurationFactory::MediaEngineFactory *v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;

  if ((_DWORD)qword_1EE2F8D90)
  {
    if (HIDWORD(qword_1EE2F8D90))
    {
      v2 = (WebCore::MediaEngineConfigurationFactory::MediaEngineFactory *)WebCore::factories(void)::factories;
      v3 = 16 * HIDWORD(qword_1EE2F8D90);
      do
      {
        WebCore::MediaEngineConfigurationFactory::MediaEngineFactory::~MediaEngineFactory(v2);
        v2 = (WebCore::MediaEngineConfigurationFactory::MediaEngineFactory *)(v4 + 16);
        v3 -= 16;
      }
      while (v3);
      HIDWORD(qword_1EE2F8D90) = 0;
    }
    v5 = (WTF *)WebCore::factories(void)::factories;
    if (WebCore::factories(void)::factories)
    {
      WebCore::factories(void)::factories = 0;
      LODWORD(qword_1EE2F8D90) = 0;
      WTF::fastFree(v5, a2);
    }
  }
}

void WebCore::MediaEngineConfigurationFactory::MediaEngineFactory::~MediaEngineFactory(WebCore::MediaEngineConfigurationFactory::MediaEngineFactory *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void WebCore::CachedResourceLoader::allCachedSVGImages(WebCore::CachedResourceLoader *this@<X0>, const WTF::StringImpl *a2@<X2>, uint64_t a3@<X8>)
{
  WTF **v5;
  uint64_t v6;
  WTF **v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  WTF *v34[3];
  unsigned int **v35;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v5 = (WTF **)*((_QWORD *)this + 5);
  v6 = *((unsigned int *)this + 12);
  v7 = &v5[5 * v6];
  if (*((_DWORD *)this + 13))
  {
    if ((_DWORD)v6)
    {
      v8 = 40 * v6;
      while (WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::isEmptyBucket(v5))
      {
        v5 += 5;
        v8 -= 40;
        if (!v8)
        {
          v5 = v7;
          break;
        }
      }
      v9 = v5;
      v5 = (WTF **)*((_QWORD *)this + 5);
      LODWORD(v6) = *((_DWORD *)this + 12);
    }
    else
    {
      v9 = (WTF::StringImpl **)*((_QWORD *)this + 5);
    }
  }
  else
  {
    v9 = &v5[5 * v6];
  }
  v10 = &v5[5 * v6];
  if (v9 != v10)
  {
    v11 = (uint64_t *)((char *)this + 64);
    while (1)
    {
      WTF::HashMap<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v11, v9, a2, v34);
      if (!v34[0])
        break;
      v13 = *((_QWORD *)v34[0] + 1);
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)v34, v12);
      if (!v13)
        goto LABEL_13;
      v16 = *(_QWORD *)(v13 + 8);
      if (!v16)
      {
        v16 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v16 = 1;
        *(_QWORD *)(v16 + 8) = v13;
        v27 = *(unsigned int **)(v13 + 8);
        *(_QWORD *)(v13 + 8) = v16;
        if (v27)
        {
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            atomic_store(1u, v27);
            WTF::fastFree((WTF *)v27, v14);
          }
          v16 = *(_QWORD *)(v13 + 8);
          if (!v16)
            goto LABEL_13;
        }
      }
      do
        v17 = __ldaxr((unsigned int *)v16);
      while (__stlxr(v17 + 1, (unsigned int *)v16));
      v33 = (unsigned int *)v16;
      v18 = *(_QWORD *)(v16 + 8);
      if (v18)
      {
        v35 = &v33;
        ++*(_DWORD *)(v18 + 548);
        v19 = *(_QWORD *)(v18 + 488);
        if (!v19
          || !*(_QWORD *)(v19 + 8)
          || (v16 = (uint64_t)WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v18 + 464), (uint64_t *)&v35, (uint64_t)v34), v33)&& (v18 = *((_QWORD *)v33 + 1)) != 0)
        {
          if ((*(_BYTE *)(v18 + 556) & 0x1F) == 1)
          {
            if ((*(_WORD *)(v18 + 557) >> 5) - 3 <= 1
              && (*(_BYTE *)(v18 + 720) & 0x10) != 0)
            {
              WebCore::CachedImage::brokenImage(1.0, (uint64_t)v34);
              v30 = (unsigned int *)v34[0];
              if (!v34[0])
                goto LABEL_14;
              v20 = (WTF *)*((_QWORD *)v34[0] + 1);
              v34[0] = 0;
              do
              {
                v31 = __ldaxr(v30);
                v32 = v31 - 1;
              }
              while (__stlxr(v32, v30));
              if (!v32)
              {
                atomic_store(1u, v30);
                WTF::fastFree((WTF *)v30, v14);
              }
              if (!v20)
                goto LABEL_14;
            }
            else
            {
              v20 = *(WTF **)(v18 + 688);
              if (!v20)
                v20 = (WTF *)WebCore::Image::nullImage((WebCore::Image *)v16);
            }
            if ((*(unsigned int (**)(WTF *))(*(_QWORD *)v20 + 56))(v20))
            {
              ++*((_DWORD *)v20 + 2);
              v34[0] = v20;
              v21 = *(unsigned int *)(a3 + 12);
              if ((_DWORD)v21 == *(_DWORD *)(a3 + 8))
              {
                v23 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v21 + 1, (unint64_t)v34);
                v21 = *(unsigned int *)(a3 + 12);
                v24 = *(_QWORD *)a3;
                v25 = *v23;
                *v23 = 0;
                *(_QWORD *)(v24 + 8 * v21) = v25;
              }
              else
              {
                v22 = *(_QWORD *)a3;
                v34[0] = 0;
                *(_QWORD *)(v22 + 8 * v21) = v20;
              }
              *(_DWORD *)(a3 + 12) = v21 + 1;
              v26 = v34[0];
              v34[0] = 0;
              if (v26)
              {
                if (*((_DWORD *)v26 + 2) == 1)
                  (*(void (**)(WTF *))(*(_QWORD *)v26 + 8))(v26);
                else
                  --*((_DWORD *)v26 + 2);
              }
            }
          }
        }
      }
LABEL_14:
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v33, v14);
      v15 = v9 + 5;
      v9 = v7;
      if (v15 != v7)
      {
        v9 = v15;
        while (WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::isEmptyBucket(v9))
        {
          v9 += 5;
          if (v9 == v7)
          {
            v9 = v7;
            break;
          }
        }
      }
      if (v9 == v10)
        return;
    }
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)v34, v12);
LABEL_13:
    v33 = 0;
    goto LABEL_14;
  }
}

uint64_t WebCore::DeprecatedGlobalSettings::setVorbisDecoderEnabled(uint64_t this)
{
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  BYTE1(qword_1ECE90A60) = this;
  return WebCore::PlatformMediaSessionManager::setVorbisDecoderEnabled(this);
}

uint64_t WebCore::DeprecatedGlobalSettings::setOpusDecoderEnabled(uint64_t this)
{
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  BYTE2(qword_1ECE90A60) = this;
  return WebCore::PlatformMediaSessionManager::setOpusDecoderEnabled(this);
}

__int128 *WebCore::VP9TestingOverrides::singleton(WebCore::VP9TestingOverrides *this)
{
  {
    xmmword_1EE2F9BB8 = 0u;
    *(_OWORD *)&byte_1EE2F9BC8 = 0u;
    WebCore::VP9TestingOverrides::singleton(void)::instance = 0u;
  }
  return &WebCore::VP9TestingOverrides::singleton(void)::instance;
}

void WebCore::RenderThemeIOS::systemFocusRingColor(WebCore::RenderThemeIOS *this@<X0>, _QWORD *a2@<X8>)
{
  WebCore *v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;

  if ((byte_1ECE81F94 & 1) == 0)
  {
    LOBYTE(qword_1ECE82008) = 0;
    byte_1ECE82010 = 0;
    byte_1ECE81F94 = 1;
LABEL_3:
    v3 = (WebCore *)objc_msgSend((id)PAL::getUIColorClass(this), "systemBlueColor");
    WebCore::colorFromCocoaColor(v3, (uint64_t *)&v16);
    if ((byte_1ECE81F94 & 1) != 0)
    {
      if (byte_1ECE82010)
      {
        v5 = qword_1ECE82008;
        v6 = v16;
        if ((qword_1ECE82008 & 0x8000000000000) != 0)
          goto LABEL_28;
        if (qword_1ECE82008 == v16 && (v16 & 0x8000000000000) == 0)
        {
          v6 = qword_1ECE82008;
          goto LABEL_10;
        }
        goto LABEL_8;
      }
    }
    else
    {
      byte_1ECE81F94 = 1;
    }
    qword_1ECE82008 = 0;
    if (v16)
    {
      qword_1ECE82008 = v16;
      v16 = 0;
    }
    byte_1ECE82010 = 1;
    while (1)
    {
LABEL_20:
      if ((byte_1ECE81F94 & 1) != 0)
      {
        v6 = byte_1ECE82010;
        if (byte_1ECE82010)
          goto LABEL_22;
      }
      else
      {
        v6 = (unint64_t)&byte_1ECE81F94;
        LOBYTE(qword_1ECE82008) = 0;
        byte_1ECE82010 = 0;
        v5 = 1;
        byte_1ECE81F94 = 1;
      }
      __break(1u);
LABEL_28:
      if ((v6 & 0x8000000000000) == 0
        || *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 4)
        || *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 8)
        || *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0xC)
        || *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0x10)
        || HIBYTE(v5) != HIBYTE(v6)
        || BYTE6(v5) != BYTE6(v6))
      {
        break;
      }
LABEL_10:
      if ((v6 & 0x8000000000000) != 0)
      {
        v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
          v5 = __stlxr(v9, v7);
        }
        while ((_DWORD)v5);
        if (!v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, v4);
        }
      }
    }
    v13 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
      v5 = __stlxr(v15, v13);
    }
    while ((_DWORD)v5);
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v4);
    }
LABEL_8:
    qword_1ECE82008 = v16;
    goto LABEL_20;
  }
  if (!byte_1ECE82010)
    goto LABEL_3;
LABEL_22:
  v10 = qword_1ECE82008;
  *a2 = qword_1ECE82008;
  if ((v10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
}

void WebCore::colorFromCocoaColor(WebCore *this@<X0>, uint64_t *a2@<X8>)
{
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  CGContext *v18;
  unsigned int data;
  double v20;
  double v21;
  double v22;
  double v23;
  char v24;
  char **v25;
  char *v26;
  CGRect v27;

  if (this)
  {
    v22 = 0.0;
    v23 = 0.0;
    v20 = 0.0;
    v21 = 0.0;
    if ((-[WebCore getRed:green:blue:alpha:](this, "getRed:green:blue:alpha:", &v23, &v22, &v21, &v20) & 1) != 0)
    {
      v5 = v23;
      v9 = llroundf(v5 * 255.0);
      v10 = 255;
      if (v9 >= 255)
        v9 = 255;
      v11 = v9 & ~(v9 >> 63);
      v6 = v22;
      v12 = llroundf(v6 * 255.0);
      if (v12 >= 255)
        v12 = 255;
      v13 = v12 & ~(v12 >> 63);
      v7 = v21;
      v14 = llroundf(v7 * 255.0);
      if (v14 >= 255)
        v14 = 255;
      v15 = v14 & ~(v14 >> 63);
      v8 = v20;
      v16 = llroundf(v8 * 255.0);
      if (v16 < 255)
        v10 = v16;
      *a2 = bswap32(((v10 & ~(v10 >> 63)) << 24) | (v15 << 16) | (v13 << 8) | v11) | 0x1104000000000000;
    }
    else
    {
      {
        WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::colorSpace = 0;
      }
      v17 = atomic_load(&WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::onceFlag);
      if (v17 != -1)
      {
        v26 = &v24;
        v25 = &v26;
        std::__call_once(&WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::onceFlag, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CGColorSpace * WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::{lambda(void)#1} &&>>);
      }
      v18 = CGBitmapContextCreate(&data, 1uLL, 1uLL, 8uLL, 4uLL, (CGColorSpaceRef)WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::colorSpace, 1u);
      CGContextSetFillColorWithColor(v18, (CGColorRef)-[WebCore CGColor](this, "CGColor"));
      v27.origin.x = 0.0;
      v27.origin.y = 0.0;
      v27.size.width = 1.0;
      v27.size.height = 1.0;
      CGContextFillRect(v18, v27);
      *a2 = bswap32(data) | 0x1104000000000000;
      if (v18)
        CFRelease(v18);
    }
  }
  else
  {
    *a2 = 0;
  }
}

void sub_19433F330(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::Layout::InlineContentBreaker::processInlineContent(_BYTE *a1@<X0>, uint64_t ***a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  WebCore::FontCascadeFonts **v5;
  unint64_t v6;
  uint64_t v8;
  BOOL v10;
  uint64_t *v11;
  __int16 v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  WTF::StringImpl *v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t i;
  __int16 v32;
  unsigned int v33;
  int v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t **v38;
  float v39;
  float v40;
  unint64_t v41;
  float v42;
  unint64_t v43;
  char v44;
  uint64_t *v45;
  BOOL v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  int v51;
  BOOL v52;
  unsigned int v53;
  BOOL v54;
  int v55;
  _BOOL4 v56;
  uint64_t v57;
  int v58;
  int v59;
  BOOL v60;
  unint64_t UserPerceivedCharacterLength;
  unsigned int v62;
  char v63;
  uint64_t **v64;
  uint64_t v65;
  __int16 v66;
  unsigned int v67;
  int v68;
  float v70;
  _QWORD *v71;
  unsigned int v72;
  int v73;
  BOOL v76;
  WTF::StringImpl *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  float v87;
  float *v88;
  uint64_t v89;
  float v90;
  float *v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  const WebCore::FontCascade *v96;
  uint64_t v97;
  const WebCore::FontCascade *v98;
  float v99;
  float v100;
  WTF::StringImpl *v101;
  float v102;
  uint64_t *v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  _QWORD *v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  int v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  float v116;
  float v117;
  unint64_t v118;
  int v119;
  __int16 v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t HyphenLocation;
  BOOL v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t **v127;
  unint64_t v128;
  WTF::StringImpl *v129;
  uint64_t *v130;
  unint64_t v131;
  uint64_t **v132;
  float v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  int v143;
  int v144;
  unint64_t v146;
  unint64_t v147;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  float v151;
  float v152;
  unint64_t TrailingRunIndexBeforeBreakableRun;
  char v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char v159;
  WebCore::RenderStyle *v160;
  _QWORD *v161;
  uint64_t v162;
  _BYTE v163[7];
  _BYTE v164[7];
  _BYTE v165[7];
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  char v171;
  char v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;

  v6 = a3;
  v8 = (uint64_t)a1;
  if (*a1)
    v10 = *((_BYTE *)a2 + 117) == 0;
  else
    v10 = 1;
  if (!v10)
  {
    if (!*((_DWORD *)a2 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x194340640);
    }
    v11 = **a2;
    v12 = *(_WORD *)((char *)v11 + 21);
    if ((v12 & 0xF) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19433FE58);
    }
    v13 = *v11;
    if ((*(_BYTE *)(*v11 + 59) & 0x40) != 0)
      goto LABEL_24;
    if (*(_BYTE *)(a3 + 21))
    {
      LOBYTE(v22) = 0;
      if (*(_BYTE *)(a3 + 16))
        v21 = 5;
      else
        v21 = 2;
    }
    else
    {
      v14 = v12 & 0x30;
      if (*((_DWORD *)v11 + 3))
        v15 = 0;
      else
        v15 = v14 == 0;
      if (v15)
        goto LABEL_24;
      v16 = *(_DWORD *)(*(_QWORD *)(v13 + 40) + 228);
      v17 = (v16 >> 6) & 7;
      v18 = (v16 & 0x7000) == 0x5000 || v17 == 1;
      v19 = *v11;
      if (!v18)
      {
        if (v17 != 3 && (v16 & 0x600) != 0x400)
        {
          if (v17 == 2 || ((v16 & 0xC00000) == 0x800000 ? (v20 = *(_BYTE *)(v8 + 1) == 0) : (v20 = 0), !v20))
          {
LABEL_24:
            v21 = 0;
            LOBYTE(v22) = 0;
LABEL_25:
            v23 = 0;
LABEL_30:
            *(_DWORD *)a4 = v21;
            *(_BYTE *)(a4 + 4) = v23;
            *(_QWORD *)(a4 + 8) = 0;
            *(_QWORD *)(a4 + 16) = v6;
            *(float *)(a4 + 24) = a5;
            *(_BYTE *)(a4 + 28) = 0;
            *(_BYTE *)(a4 + 32) = 0;
            *(_BYTE *)(a4 + 40) = 1;
            *(_BYTE *)(a4 + 48) = 0;
            *(_BYTE *)(a4 + 52) = 0;
            v24 = (_QWORD *)(a4 + 64);
            *(_BYTE *)(a4 + 56) = v22;
            goto LABEL_31;
          }
          v25 = (WTF::StringImpl *)(*(_QWORD *)(v13 + 48) + 176);
          {
            qword_1EE2E4E30 = 0;
            xmmword_1EE2E4E10 = 0u;
            unk_1EE2E4E20 = 0u;
            WTF::TinyLRUCachePolicy<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>>::cache(void)::cache = 0u;
            unk_1EE2E4E00 = 0u;
          }
          v22 = *(_QWORD *)WTF::TinyLRUCache<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>,4ul,WTF::TinyLRUCachePolicy<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>>>::get((uint64_t)&WTF::TinyLRUCachePolicy<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>>::cache(void)::cache, v25);
          if (!v22)
          {
            v21 = 0;
            goto LABEL_25;
          }
          goto LABEL_36;
        }
        v60 = (v16 & 0xC00000) == 0x800000 && *(_BYTE *)(v8 + 1) == 0;
        v19 = *v11;
        if (v60)
        {
          WebCore::canHyphenate((WebCore *)(*(_QWORD *)(v13 + 48) + 176), (const WTF::AtomString *)a2);
          v19 = *v11;
        }
      }
      if ((*(_WORD *)(v19 + 12) & 0x20) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1943402B8);
      }
      UserPerceivedCharacterLength = WebCore::Layout::TextUtil::firstUserPerceivedCharacterLength(v19, (WTF::StringImpl *)*((unsigned int *)v11 + 4), (const char *)*((unsigned int *)v11 + 3));
      if (UserPerceivedCharacterLength < *((unsigned int *)v11 + 3))
      {
        v6 = UserPerceivedCharacterLength;
        a5 = WebCore::Layout::TextUtil::width(v11, (WebCore::FontCascadeFonts **)(*(_QWORD *)(v13 + 48) + 32), *((_DWORD *)v11 + 4), *((_DWORD *)v11 + 4) + UserPerceivedCharacterLength, 0, 0.0);
        v21 = 1;
        LOBYTE(v22) = 1;
        v23 = 1;
        goto LABEL_30;
      }
      v21 = 0;
      LOBYTE(v22) = 0;
    }
    v23 = 1;
    goto LABEL_30;
  }
LABEL_36:
  if (*((_BYTE *)a2 + 118))
    goto LABEL_37;
  v26 = *((float *)a2 + 23);
  v27 = *((float *)a2 + 24);
  if (v27 != 0.0 || v26 != 0.0)
  {
    v62 = *((_DWORD *)a2 + 3);
    if (v62)
    {
      v63 = 0;
      v64 = *a2;
      v65 = (uint64_t)&(*a2)[3 * v62];
      while (1)
      {
        while (1)
        {
          v66 = *(_WORD *)((char *)*v64 + 21);
          v67 = v66 & 0xF;
          if ((v66 & 0xF) != 0)
            break;
          if ((v66 & 0x30) != 0x10)
            goto LABEL_122;
          v64 += 3;
          v63 = 1;
          if (v64 == (uint64_t **)v65)
            goto LABEL_37;
        }
        v50 = v67 > 8;
        v68 = (1 << v67) & 0x160;
        if (v50 || v68 == 0)
          break;
        v64 += 3;
        if (v64 == (uint64_t **)v65)
        {
          if ((v63 & 1) != 0)
            goto LABEL_37;
          break;
        }
      }
    }
LABEL_122:
    v70 = *((float *)a2 + 22) - v27;
    if (!*(_BYTE *)(v6 + 20))
      v26 = 0.0;
    if ((float)(v70 - v26) <= *(float *)(v6 + 4))
      goto LABEL_37;
  }
  if (*((_BYTE *)a2 + 104))
  {
    v116 = *((float *)a2 + 25);
    v117 = *((float *)a2 + 22);
    if (v116 == v117 || v116 != 0.0 && (float)(v117 - v116) <= *(float *)(v6 + 4))
      goto LABEL_37;
  }
  v28 = *(float *)(v6 + 8);
  if (v28 != 0.0)
  {
    v29 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v29)
    {
      v30 = *a2;
      for (i = 24 * v29; i; i -= 24)
      {
        v32 = *(_WORD *)((char *)*v30 + 21);
        v33 = v32 & 0xF;
        if ((v32 & 0xF) != 0)
        {
          if (v33 > 8 || ((1 << v33) & 0x160) == 0)
            goto LABEL_50;
        }
        else
        {
          v34 = v32 & 0x30;
          if (*((_DWORD *)*v30 + 3))
            v35 = 0;
          else
            v35 = v34 == 0;
          if (!v35)
            goto LABEL_50;
        }
        v30 += 3;
      }
    }
    if (*((float *)a2 + 22) <= (float)(v28 + *(float *)(v6 + 4)))
      goto LABEL_37;
  }
LABEL_50:
  if (!*((_BYTE *)a2 + 116))
  {
    v36 = *((unsigned int *)a2 + 3);
    if (v36 >= 2)
    {
      v43 = 0;
      v132 = *a2;
      do
      {
        if ((*(_WORD *)((_BYTE *)*v132 + 21) & 0xF) == 4)
          goto LABEL_76;
        ++v43;
        v132 += 3;
      }
      while (v36 != v43);
    }
    v43 = 0;
    goto LABEL_76;
  }
  v36 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v36)
    goto LABEL_56;
  v37 = 0;
  v38 = *a2;
  v39 = *(float *)(v6 + 4);
  v40 = 0.0;
  v41 = 1;
  while (1)
  {
    if ((*(_WORD *)((_BYTE *)v38[v37] + 21) & 0xF) == 8)
    {
      v42 = v40;
      goto LABEL_55;
    }
    v42 = v40 + *(float *)&v38[v37 + 2];
    if (v42 > v39)
      break;
LABEL_55:
    v37 += 3;
    ++v41;
    v40 = v42;
    if (3 * v36 == v37)
      goto LABEL_56;
  }
  if (3 * v36 == v37)
  {
LABEL_56:
    if (*((_DWORD *)a2 + 3))
      v43 = v36 - 1;
    else
      v43 = 0;
    goto LABEL_76;
  }
  v43 = v41 - 1;
  if (v41 - 1 >= v36)
  {
    __break(0xC471u);
    JUMPOUT(0x194340670);
  }
  if ((*(_WORD *)((_BYTE *)v38[v37] + 21) & 0xF) == 0 && (*((_BYTE *)v38[v37 + 1] + 43) & 0x40) == 0)
  {
    v173 = (WTF::StringImpl *)(v41 - 1);
    LOBYTE(v174) = 1;
    *((float *)&v174 + 1) = v40 + *(float *)v6;
    WebCore::Layout::InlineContentBreaker::tryBreakingTextRun((uint64_t)&v166, (char *)v8, (const WebCore::FontCascade *)a2, (uint64_t)&v173, (const WebCore::FontCascade *)v6, fmaxf(v39 - v40, 0.0));
    if ((_BYTE)v169)
    {
      if (v166)
      {
        v133 = *(float *)&v167;
        LOBYTE(v134) = BYTE4(v167);
        LODWORD(v5) = *(unsigned __int16 *)((char *)&v167 + 5) | (HIBYTE(v167) << 16);
        LOBYTE(v135) = v168;
        LODWORD(v177) = *(_DWORD *)((char *)&v168 + 1);
        *(_DWORD *)((char *)&v177 + 3) = HIDWORD(v168);
        v136 = (unint64_t)v166 & 0xFFFFFFFFFFFFFF00;
        v137 = v166;
        v8 = 1;
        v138 = 1;
      }
      else
      {
        TrailingRunIndexBeforeBreakableRun = WebCore::Layout::findTrailingRunIndexBeforeBreakableRun((unint64_t)*a2, *((_DWORD *)a2 + 3), v41 - 1);
        if (v154)
        {
          v43 = TrailingRunIndexBeforeBreakableRun;
          v8 = 0;
          v137 = 0;
          v136 = 0;
          v138 = 1;
        }
        else
        {
          v43 = 0;
          v138 = 0;
          v137 = 0;
          v136 = 0;
        }
      }
      v139 = 0;
      v125 = v136 | v137;
      *(_DWORD *)v164 = v177;
      *(_DWORD *)&v164[3] = *(_DWORD *)((char *)&v177 + 3);
      v47 = v43;
LABEL_290:
      if (v138)
      {
        *(float *)&v162 = v133;
        v140 = 0;
        if (!v139 || (LOBYTE(v138) = *(_BYTE *)(v6 + 21), !(_BYTE)v138))
        {
          LOBYTE(v138) = 0;
          goto LABEL_314;
        }
        v141 = 0;
        LOBYTE(v47) = 0;
        v142 = 0;
        LOBYTE(v125) = 0;
      }
      else
      {
        LOBYTE(v134) = *(_BYTE *)(v6 + 21);
        if (!(_BYTE)v134)
        {
          v146 = *((unsigned int *)a2 + 3);
          if ((_DWORD)v146)
          {
            v47 = 0;
            v41 = (unint64_t)*a2;
            v43 = 24;
            while (1)
            {
              v8 = *(_QWORD *)(v41 + 24 * v47);
              if ((*(_WORD *)(v8 + 21) & 0xF) == 0)
                break;
              ++v47;
              v43 += 24;
              if (v47 == v146)
                goto LABEL_319;
            }
          }
          else
          {
LABEL_319:
            __break(1u);
          }
          if (v47 >= v146)
          {
            __break(0xC471u);
            JUMPOUT(0x1943406F0);
          }
          if ((*(_WORD *)(*(_QWORD *)v8 + 12) & 0x20) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19434062CLL);
          }
          v147 = WebCore::Layout::TextUtil::firstUserPerceivedCharacterLength(*(_QWORD *)v8, (WTF::StringImpl *)*(unsigned int *)(v8 + 16), (const char *)*(unsigned int *)(v8 + 12));
          if (v147 < *(unsigned int *)(v8 + 12))
          {
            v125 = v147;
            v143 = 1;
            v133 = WebCore::Layout::TextUtil::width((uint64_t *)v8, (WebCore::FontCascadeFonts **)(*(_QWORD *)(*(_QWORD *)(v41 + 24 * v47 + 8) + 32) + 32), *(_DWORD *)(v8 + 16), *(_DWORD *)(v8 + 16) + v147, 1, *(float *)v6);
            v144 = 0;
            v44 = 0;
            LOBYTE(v138) = 0;
            LOBYTE(v135) = 0;
            LOBYTE(v134) = 0;
            v141 = v47 & 0x7FFFFFFFFFFFFF00;
            v142 = v125 & 0xFFFFFFFFFFFFFF00;
            v140 = 1;
            LOBYTE(v8) = 1;
          }
          else
          {
            v135 = *((unsigned int *)a2 + 3);
            v134 = v135 - 1;
            if (v47 == v135 - 1 || (LOBYTE(v138) = v47 + 1, v47 + 1 >= v135))
            {
LABEL_332:
              v144 = 0;
              v143 = 0;
              v141 = 0;
              LOBYTE(v47) = 0;
              v142 = 0;
              LOBYTE(v125) = 0;
              v140 = 0;
            }
            else
            {
              v135 = (unint64_t)*a2 + v43;
              while (1)
              {
                v138 = *(_WORD *)(*(_QWORD *)v135 + 21) & 0xF;
                if (v138 != 8 && v138 != 6)
                  break;
                ++v47;
                v135 += 24;
                if (v134 == v47)
                  goto LABEL_332;
              }
              v144 = 0;
              v142 = 0;
              LOBYTE(v125) = 0;
              v44 = 0;
              LOBYTE(v138) = 0;
              LOBYTE(v8) = 0;
              v141 = v47 & 0xFFFFFFFFFFFFFF00;
              v143 = 1;
              v140 = 1;
            }
          }
          goto LABEL_295;
        }
        v141 = 0;
        LOBYTE(v47) = 0;
        v142 = 0;
        LOBYTE(v125) = 0;
        v140 = 0;
      }
      v143 = 2;
      v144 = 1;
      goto LABEL_295;
    }
    v36 = *((unsigned int *)a2 + 3);
  }
  if (v43 >= v36)
  {
    __break(0xC471u);
    JUMPOUT(0x194340678);
  }
  v45 = (*a2)[v37];
  if (v45)
    v46 = (*(_WORD *)((_BYTE *)v45 + 21) & 0x3F) == 16;
  else
    v46 = 0;
  if (v46 && (*(_DWORD *)(*(_QWORD *)(*v45 + 40) + 228) & 0x7000) == 0x4000
    || (v177 = v41 - 1, v47 = v41 - 2, v176 = v41 - 2, !(v37 * 8)))
  {
LABEL_73:
    if (v36 != 1)
    {
      if (!v36)
      {
        __break(0xC471u);
        JUMPOUT(0x194340688);
      }
      v71 = (_QWORD *)***a2;
      v72 = *(_DWORD *)(v71[5] + 228);
      v73 = (v72 >> 6) & 7;
      if ((v72 & 0x7000) != 0x5000 && v73 != 1)
      {
        if (!*(_BYTE *)(v6 + 22) && v73 == 3)
          goto LABEL_237;
        if ((v72 & 0x600) == 0x200 && *(_BYTE *)v8 == 0)
        {
          if (!*(_BYTE *)(v6 + 22))
            goto LABEL_237;
LABEL_139:
          if (v73 != 2)
          {
            v76 = (v72 & 0xC00000) == 0x800000 && *(_BYTE *)(v8 + 1) == 0;
            if (v76 && WebCore::canHyphenate((WebCore *)(v71[6] + 176), (const WTF::AtomString *)a2))
              goto LABEL_146;
          }
        }
        else
        {
          if (*(_BYTE *)(v6 + 22) || (v72 & 0x600) != 0x400)
            goto LABEL_139;
LABEL_237:
          if (WebCore::Layout::InlineContentBreaker::wordBreakBehavior(WebCore::RenderStyle const&,BOOL)const::$_0::operator()(*(_BYTE *)(v8 + 1), (uint64_t)(v71 + 2)) >= 4)
          {
LABEL_146:
            v160 = (WebCore::RenderStyle *)(v71 + 2);
            v161 = v71;
            v174 = 0;
            v175 = 0x100000000;
            v173 = 0;
            v78 = *((unsigned int *)a2 + 3);
            if ((_DWORD)v78)
            {
              v79 = 0;
              v162 = 0;
              v5 = 0;
              while (1)
              {
                v80 = (*a2)[v79];
                if ((*(_WORD *)((_BYTE *)v80 + 21) & 0xF) != 8)
                {
                  if (!WebCore::FontCascade::operator==(*(_QWORD *)(*v80 + 48) + 32, v161[6] + 32))
                    goto LABEL_230;
                  if ((*(_WORD *)((_BYTE *)v80 + 21) & 0xF) != 0 || (*(_WORD *)((_BYTE *)v80 + 21) & 0x30) == 16)
                    goto LABEL_230;
                  if ((*(_WORD *)(*v80 + 12) & 0x20) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x194340330);
                  }
                  v82 = *(WTF::StringImpl **)(*v80 + 120);
                  if (v82)
                  {
                    v77 = (WTF::StringImpl *)*((unsigned int *)v80 + 4);
                    if ((_DWORD)v77 || *((_DWORD *)v82 + 1) > *((_DWORD *)v80 + 3))
                    {
                      WTF::StringImpl::substring(v82);
                    }
                    else
                    {
                      *(_DWORD *)v82 += 2;
                      v166 = v82;
                    }
                  }
                  else
                  {
                    v166 = 0;
                  }
                  v83 = v166;
                  if ((_DWORD)v175 || v174)
                  {
                    if (v166 && (*((_BYTE *)v166 + 16) & 4) == 0)
                      WTF::StringBuilder::append();
                    else
                      WTF::StringBuilder::append();
                  }
                  else
                  {
                    if (v166)
                      *(_DWORD *)v166 += 2;
                    v84 = v173;
                    v173 = v83;
                    if (v84)
                    {
                      if (*(_DWORD *)v84 == 2)
                      {
                        WTF::StringImpl::destroy(v84, v77);
                        v83 = v166;
                      }
                      else
                      {
                        *(_DWORD *)v84 -= 2;
                      }
                    }
                    if (v83)
                      LODWORD(v83) = *((_DWORD *)v83 + 1);
                    LODWORD(v175) = (_DWORD)v83;
                  }
                  v85 = v166;
                  v166 = 0;
                  if (v85)
                  {
                    if (*(_DWORD *)v85 == 2)
                      WTF::StringImpl::destroy(v85, v77);
                    else
                      *(_DWORD *)v85 -= 2;
                  }
                  if ((unint64_t)v5 >= v43)
                    v86 = 0;
                  else
                    v86 = *((unsigned int *)v80 + 3);
                  v162 += v86;
                  v78 = *((unsigned int *)a2 + 3);
                }
                v5 = (WebCore::FontCascadeFonts **)((char *)v5 + 1);
                v79 += 3;
                if ((unint64_t)v5 >= v78)
                  goto LABEL_199;
              }
            }
            v162 = 0;
LABEL_199:
            v92 = v161[6];
            v5 = (WebCore::FontCascadeFonts **)(v92 + 32);
            v94 = *WebCore::RenderStyle::hyphenString(v160, v77);
            if (!v94)
              goto LABEL_251;
            v93 = (WTF::StringImpl *)*(unsigned int *)(v94 + 4);
            if (((*(_DWORD *)(v94 + 16) >> 2) & 1) != 0)
            {
              if ((_DWORD)v93)
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                goto LABEL_203;
              }
LABEL_251:
              v95 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
              *MEMORY[0x1E0CBEF70] += 2;
            }
            else
            {
              if (!(_DWORD)v93)
                goto LABEL_251;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_203:
              v95 = v166;
            }
            LODWORD(v166) = 0;
            if (v95)
            {
              *(_DWORD *)v95 += 2;
              v167 = v95;
              LODWORD(v168) = 0;
              BYTE4(v168) = 1;
              v169 = 0x3F80000000000000;
              v170 = 0;
              v171 = 4;
              v172 = v172 & 0xE0 | 8;
              if (*(_DWORD *)v95 == 2)
                WTF::StringImpl::destroy(v95, v93);
              else
                *(_DWORD *)v95 -= 2;
            }
            else
            {
              v167 = 0;
              LODWORD(v168) = 0;
              BYTE4(v168) = 1;
              v169 = 0x3F80000000000000;
              v170 = 0;
              v171 = 4;
              v172 = v172 & 0xE0 | 8;
            }
            v99 = WebCore::FontCascade::width(v92 + 32, (uint64_t)&v166);
            if (v99 >= 0.0)
              v100 = v99;
            else
              v100 = 0.0;
            v101 = v167;
            v167 = 0;
            if (v101)
            {
              if (*(_DWORD *)v101 == 2)
                WTF::StringImpl::destroy(v101, v77);
              else
                *(_DWORD *)v101 -= 2;
            }
            v102 = *(float *)(v6 + 4) - v100;
            if (v102 > 0.0 && (float)((float)(*(float *)(v92 + 204) * 5.0) * 0.25) < v102)
            {
              if (v43 >= *((unsigned int *)a2 + 3))
              {
                __break(0xC471u);
                JUMPOUT(0x1943406E0);
              }
              v103 = (*a2)[v37];
              if (v103)
              {
                if ((*(_WORD *)((_BYTE *)v103 + 21) & 0xF) == 0)
                {
                  v104 = WebCore::Layout::TextUtil::breakWord((WebCore::Layout::TextUtil **)v103, (const WebCore::Layout::InlineTextItem *)(v92 + 32), v96, *(float *)&(*a2)[v37 + 2], v102, *(float *)v6, v97, v98);
                  v105 = v174;
                  if (!v174)
                  {
                    v106 = v173;
                    v107 = v161;
                    if (v173)
                      goto LABEL_220;
                    goto LABEL_221;
                  }
                  v106 = v174;
                  v107 = v161;
LABEL_220:
                  if ((*((_BYTE *)v106 + 16) & 4) != 0)
                  {
LABEL_221:
                    v108 = v175;
                    if ((_DWORD)v175)
                    {
                      if (v173)
                        v105 = v173;
                      if ((v175 & 0x80000000) != 0)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x194340534);
                      }
                      v109 = *((_QWORD *)v105 + 1);
                    }
                    else
                    {
                      v109 = 0;
                    }
                    v110 = 0x100000000;
                  }
                  else
                  {
                    v108 = v175;
                    if ((_DWORD)v175)
                    {
                      if (v173)
                        v105 = v173;
                      if ((v175 & 0x80000000) != 0)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1943405ECLL);
                      }
                      v110 = 0;
                      v109 = *((_QWORD *)v105 + 1);
                    }
                    else
                    {
                      v110 = 0;
                      v109 = 0;
                    }
                    v107 = v161;
                  }
                  v111 = v104 + v162;
                  v112 = v107[5];
                  v113 = *(unsigned __int16 *)(v112 + 296);
                  if (v113 == 0xFFFF)
                    LOWORD(v113) = 0;
                  if (v111 >= (__int16)v113)
                  {
                    v118 = (__int16)v113;
                    v119 = *(unsigned __int16 *)(v112 + 298);
                    v120 = v119 == 0xFFFF ? 0 : v119;
                    if (v108 > (unint64_t)(__int16)v113
                      && v108 > (unint64_t)v120
                      && (__int16)v113 + (uint64_t)v120 <= (unint64_t)v108)
                    {
                      v121 = v110 | v108;
                      v122 = (unint64_t)v108 - v120 >= v111 ? v104 + v162 : v108 - (uint64_t)v120;
                      HyphenLocation = WebCore::lastHyphenLocation(v109, v121, v122 + 1, (WTF::StringImpl *)(v161[6] + 176));
                      v124 = HyphenLocation && HyphenLocation >= v118;
                      if (v124)
                      {
                        v125 = HyphenLocation;
                        v47 = 0;
                        v126 = *((unsigned int *)a2 + 3);
                        v127 = *a2;
                        do
                        {
                          if (v126 == v47)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1943406D8);
                          }
                          if ((*(_WORD *)((_BYTE *)*v127 + 21) & 0xF) != 8)
                          {
                            if ((*(_WORD *)((_BYTE *)*v127 + 21) & 0xF) != 0)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1943403FCLL);
                            }
                            v128 = *((unsigned int *)*v127 + 3);
                            v124 = v125 >= v128;
                            v129 = (WTF::StringImpl *)(v125 - v128);
                            if (v129 == 0 || !v124)
                              goto LABEL_277;
                            v125 = (unint64_t)v129;
                          }
                          ++v47;
                          v127 += 3;
                        }
                        while (v41 != v47);
                        v47 = v41;
LABEL_277:
                        if (v47 >= v126)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1943406E8);
                        }
                        v130 = (*a2)[3 * v47];
                        if ((*(_WORD *)((_BYTE *)v130 + 21) & 0xF) != 0)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19434060CLL);
                        }
                        v131 = *((unsigned int *)v130 + 3);
                        if (v125 <= v131)
                        {
                          if (v125 >= v131)
                          {
                            LOBYTE(v8) = 0;
                            v125 = 0;
                          }
                          else
                          {
                            LOBYTE(v8) = 1;
                            LODWORD(v162) = WebCore::Layout::TextUtil::width(v130, v5, *((_DWORD *)v130 + 4), *((_DWORD *)v130 + 4) + v125, 1, *(float *)v6);
                          }
                          v149 = v174;
                          v174 = 0;
                          if (v149)
                          {
                            if (*(_DWORD *)v149 == 2)
                              WTF::StringImpl::destroy(v149, v77);
                            else
                              *(_DWORD *)v149 -= 2;
                          }
                          v150 = v173;
                          v173 = 0;
                          if (v150)
                          {
                            if (*(_DWORD *)v150 == 2)
                              WTF::StringImpl::destroy(v150, v77);
                            else
                              *(_DWORD *)v150 -= 2;
                          }
                          LOBYTE(v138) = LOBYTE(v100);
                          LODWORD(v5) = LODWORD(v100) >> 8;
                          v140 = 1;
                          LOBYTE(v135) = 1;
                          LOBYTE(v134) = LOBYTE(v100);
                          goto LABEL_314;
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_230:
            v114 = v174;
            v174 = 0;
            if (v114)
            {
              if (*(_DWORD *)v114 == 2)
                WTF::StringImpl::destroy(v114, v77);
              else
                *(_DWORD *)v114 -= 2;
            }
            v115 = v173;
            v173 = 0;
            if (v115)
            {
              if (*(_DWORD *)v115 == 2)
                WTF::StringImpl::destroy(v115, v77);
              else
                *(_DWORD *)v115 -= 2;
            }
          }
        }
      }
    }
    v36 = *((unsigned int *)a2 + 3);
    if (v43 >= v36)
    {
      __break(0xC471u);
      JUMPOUT(0x194340680);
    }
    if (v41 < v36)
    {
      v87 = v40 + *(float *)&(*a2)[v37 + 2];
      do
      {
        v88 = (float *)&(*a2)[v37];
        if ((*(_WORD *)(*((_QWORD *)v88 + 3) + 21) & 0xF) == 0
          && (*(_BYTE *)(*((_QWORD *)v88 + 4) + 43) & 0x40) == 0)
        {
          v173 = (WTF::StringImpl *)v41;
          LOBYTE(v174) = 1;
          *((float *)&v174 + 1) = v87 + *(float *)v6;
          WebCore::Layout::InlineContentBreaker::tryBreakingTextRun((uint64_t)&v166, (char *)v8, (const WebCore::FontCascade *)a2, (uint64_t)&v173, (const WebCore::FontCascade *)v6, 0.0);
          if ((_BYTE)v169)
          {
            if (v166)
            {
              v133 = *(float *)&v167;
              LOBYTE(v134) = BYTE4(v167);
              LODWORD(v5) = *(unsigned __int16 *)((char *)&v167 + 5) | (HIBYTE(v167) << 16);
              LOBYTE(v135) = v168;
              LODWORD(v177) = *(_DWORD *)((char *)&v168 + 1);
              *(_DWORD *)((char *)&v177 + 3) = HIDWORD(v168);
              v155 = (unint64_t)v166 & 0xFFFFFFFFFFFFFF00;
              v156 = v166;
              v138 = 1;
              v8 = 1;
            }
            else
            {
              v158 = WebCore::Layout::findTrailingRunIndexBeforeBreakableRun((unint64_t)*a2, *((_DWORD *)a2 + 3), v41);
              LOBYTE(v134) = 1;
              v155 = 0;
              v156 = 0;
              v138 = v159 != 0;
              v8 = v159 == 0;
              if (v159)
                v41 = v158;
              else
                v41 = v43;
            }
            v125 = v156 | v155;
            *(_DWORD *)v164 = v177;
            *(_DWORD *)&v164[3] = *(_DWORD *)((char *)&v177 + 3);
            v47 = v41;
            v139 = v138;
            goto LABEL_290;
          }
          v36 = *((unsigned int *)a2 + 3);
        }
        v87 = v87 + v88[10];
        ++v41;
        v37 += 3;
      }
      while (v41 < v36);
    }
LABEL_76:
    if (*(_BYTE *)(v6 + 21))
    {
      if (v43 >= v36)
      {
        __break(0xC471u);
        JUMPOUT(0x194340690);
      }
      v48 = *(*a2)[3 * v43];
      v49 = *(_DWORD *)(v48 + 32) & 0x1F;
      v50 = v49 > 0x18;
      v51 = (1 << v49) & 0x1400001;
      v52 = v50 || v51 == 0;
      if (v52 || ((v53 = *(_WORD *)(v48 + 12) & 0xF, v53 <= 0xB) ? (v54 = ((1 << v53) & 0x884) == 0) : (v54 = 1), !v54))
        v48 = *(_QWORD *)(v48 + 80);
      v55 = *(_DWORD *)(v48 + 56);
      v56 = (v55 & 0x40000000) == 0;
      if ((v55 & 0x40000000) != 0 && v43)
      {
        v57 = 24 * v43 - 24;
        do
        {
          if (v43 - 1 >= v36)
          {
            __break(0xC471u);
            JUMPOUT(0x194340648);
          }
          v58 = *(_DWORD *)(*(_QWORD *)(**(uint64_t **)((char *)*a2 + v57) + 80) + 56) & 0x40000000;
          v56 = v58 == 0;
          if (!v57)
            break;
          v57 -= 24;
        }
        while (v58);
      }
      if (v56)
      {
        *(_DWORD *)a4 = 2;
        *(_BYTE *)(a4 + 4) = 1;
        *(_BYTE *)(a4 + 8) = 0;
        *(_BYTE *)(a4 + 56) = 0;
        *(_QWORD *)(a4 + 64) = 0;
        goto LABEL_95;
      }
      v24 = (_QWORD *)(a4 + 64);
      if (*(_BYTE *)(v6 + 22))
      {
        *(_DWORD *)a4 = 4;
        *(_BYTE *)(a4 + 4) = 1;
      }
      else
      {
        *(_DWORD *)a4 = 0;
        *(_BYTE *)(a4 + 4) = 0;
      }
      *(_BYTE *)(a4 + 8) = 0;
      *(_BYTE *)(a4 + 56) = 0;
LABEL_31:
      *v24 = 0;
      return;
    }
LABEL_37:
    *(_DWORD *)a4 = 0;
    *(_BYTE *)(a4 + 4) = 0;
    *(_BYTE *)(a4 + 8) = 0;
    v24 = (_QWORD *)(a4 + 64);
    *(_BYTE *)(a4 + 56) = 0;
    goto LABEL_31;
  }
  v89 = v37 * 8;
  v90 = v40;
  while (2)
  {
    if (v47 >= *((unsigned int *)a2 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x194340698);
    }
    v5 = (WebCore::FontCascadeFonts **)*a2;
    v91 = (float *)((char *)*a2 + v89);
    v90 = v90 - *(v91 - 2);
    if ((*(_WORD *)(*((_QWORD *)v91 - 3) + 21) & 0xF) != 0 || (*(_BYTE *)(*((_QWORD *)v91 - 2) + 43) & 0x40) != 0)
    {
LABEL_196:
      v176 = --v47;
      v89 -= 24;
      if (!v89)
      {
        v36 = *((unsigned int *)a2 + 3);
        goto LABEL_73;
      }
      continue;
    }
    break;
  }
  v151 = *(float *)v6;
  v152 = fmaxf(*(float *)(v6 + 4) - v90, 0.0);
  v173 = (WTF::StringImpl *)v47;
  LOBYTE(v174) = 0;
  *(float *)&v162 = v90;
  *((float *)&v174 + 1) = v90 + v151;
  WebCore::Layout::InlineContentBreaker::tryBreakingTextRun((uint64_t)&v166, (char *)v8, (const WebCore::FontCascade *)a2, (uint64_t)&v173, (const WebCore::FontCascade *)v6, v152);
  if (!(_BYTE)v169)
  {
    v90 = *(float *)&v162;
    goto LABEL_196;
  }
  v157 = *(uint64_t *)((char *)v5 + v89 - 24);
  if ((*(_WORD *)(v157 + 21) & 0xF) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194340668);
  }
  v125 = (unint64_t)v166;
  if (v166 == (WTF::StringImpl *)*(unsigned int *)(v157 + 12))
  {
    v173 = (WTF::StringImpl *)&v176;
    v174 = (WTF::StringImpl *)&v177;
    v175 = (uint64_t)a2;
    v47 = WebCore::Layout::InlineContentBreaker::tryBreakingPreviousNonOverflowingRuns(WebCore::Layout::InlineContentBreaker::LineStatus const&,WTF::Vector<WebCore::Layout::InlineContentBreaker::ContinuousContent::Run,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,float)const::$_0::operator()((uint64_t **)&v173);
    LOBYTE(v8) = 0;
    v125 = 0;
  }
  else
  {
    LODWORD(v162) = (_DWORD)v167;
    LOBYTE(v134) = BYTE4(v167);
    LODWORD(v5) = *(unsigned __int16 *)((char *)&v167 + 5) | (HIBYTE(v167) << 16);
    LOBYTE(v135) = v168;
    *(_DWORD *)v165 = *(_DWORD *)((char *)&v168 + 1);
    *(_DWORD *)&v165[3] = HIDWORD(v168);
    LOBYTE(v8) = 1;
  }
  v140 = 0;
  LOBYTE(v138) = 0;
  *(_DWORD *)v164 = *(_DWORD *)v165;
  *(_DWORD *)&v164[3] = *(_DWORD *)&v165[3];
LABEL_314:
  v144 = 0;
  v44 = v140;
  v141 = v47 & 0xFFFFFFFFFFFFFF00;
  v142 = v125 & 0xFFFFFFFFFFFFFF00;
  *(_DWORD *)v163 = *(_DWORD *)v164;
  *(_DWORD *)&v163[3] = *(_DWORD *)&v164[3];
  v143 = 1;
  v140 = 1;
  v133 = *(float *)&v162;
LABEL_295:
  *(_DWORD *)a4 = v143;
  *(_BYTE *)(a4 + 4) = 1;
  *(_QWORD *)(a4 + 8) = v47 | v141;
  *(_QWORD *)(a4 + 16) = v125 | v142;
  *(float *)(a4 + 24) = v133;
  *(_BYTE *)(a4 + 28) = v134;
  *(_WORD *)(a4 + 29) = (_WORD)v5;
  *(_BYTE *)(a4 + 31) = BYTE2(v5);
  *(_BYTE *)(a4 + 32) = v135;
  *(_DWORD *)(a4 + 33) = *(_DWORD *)v163;
  *(_DWORD *)(a4 + 36) = *(_DWORD *)&v163[3];
  *(_BYTE *)(a4 + 40) = v8;
  *(_BYTE *)(a4 + 48) = v138;
  *(_WORD *)(a4 + 49) = (_WORD)v5;
  *(_BYTE *)(a4 + 51) = BYTE2(v5);
  *(_BYTE *)(a4 + 52) = v44;
  *(_BYTE *)(a4 + 56) = v140;
  *(_QWORD *)(a4 + 64) = 0;
  if (v144)
  {
LABEL_95:
    if (!*(_BYTE *)(v6 + 16) || !WebCore::Layout::hasLeadingTextContent((uint64_t)*a2, *((_DWORD *)a2 + 3)))
      return;
    if (*(float *)(v6 + 12) <= *(float *)(v6 + 4))
      v59 = 3;
    else
      v59 = 5;
    *(_DWORD *)a4 = v59;
    *(_BYTE *)(a4 + 4) = 1;
    *(_BYTE *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 56) = 0;
    v24 = (_QWORD *)(a4 + 64);
    goto LABEL_31;
  }
}

void WebCore::Layout::InlineContentBreaker::tryBreakingTextRun(uint64_t a1, char *a2, const WebCore::FontCascade *a3, uint64_t a4, const WebCore::FontCascade *a5, float a6)
{
  float v6;
  uint64_t v7;
  const WebCore::FontCascade *v8;
  uint64_t v9;
  WebCore::Layout::TextUtil ***v10;
  WebCore::Layout::TextUtil **v11;
  __int16 v12;
  float v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v22;
  WTF::StringImpl *v25;
  char v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl *v31;
  uint64_t *v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  float v36;
  WTF::StringImpl *v37;
  int v38;
  float v39;
  unint64_t v40;
  char v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  int v50;
  __int16 v51;
  unint64_t v52;
  unint64_t v53;
  BOOL v54;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t HyphenLocation;
  uint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  float v65;
  unint64_t v66;
  unsigned int *v67;
  float v68;
  WTF::StringImpl *v69;
  float v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int *v74;
  uint64_t v75;
  uint64_t v76;
  UChar32 v77;
  unint64_t v78;
  char *v79;
  unsigned int v80;
  uint64_t v81;
  UChar32 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t **v91;
  uint64_t *v92;
  uint64_t *v93;
  __int16 v94;
  uint64_t v95;
  uint64_t v96;
  _DWORD *v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  UChar32 v104;
  uint64_t v105;
  unsigned int v106;
  int8_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  UChar32 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  float v116;
  int v117;
  unsigned int v118;
  unsigned int v119;
  _DWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  UChar32 v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  UChar32 v133;
  uint64_t v134;
  BOOL v135;
  __int16 v136;
  int v137;
  uint64_t v138;
  float v139;
  int v140[2];
  WebCore::FontCascadeFonts **v141;
  WebCore::FontCascadeFonts **v142;
  WebCore::FontCascade *v143;
  unsigned int *v144;
  uint64_t *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  const WebCore::FontCascade *v148;
  uint64_t v149;
  BOOL *v150;
  WebCore::Layout::TextUtil ***v151;
  float *v152;
  BOOL v153;
  float v154;

  v154 = a6;
  v7 = *(_QWORD *)a4;
  if (*(_QWORD *)a4 >= (unint64_t)*((unsigned int *)a3 + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x194341254);
  }
  v8 = a3;
  v9 = *(_QWORD *)a3;
  v10 = (WebCore::Layout::TextUtil ***)(*(_QWORD *)a3 + 24 * v7);
  v11 = *v10;
  v12 = *(_WORD *)((char *)*v10 + 21);
  if ((v12 & 0xF) != 0)
    goto LABEL_137;
  v13 = a6;
  v16 = v9 + 24 * v7;
  v19 = *(_QWORD *)(v16 + 8);
  v18 = v16 + 8;
  v17 = v19;
  v153 = a6 > 0.0;
  v20 = *(_DWORD *)(*(_QWORD *)(v19 + 24) + 228);
  if ((v20 & 0x7000) == 0x5000)
  {
    v26 = 2;
LABEL_23:
    v27 = (float *)(*(_QWORD *)(v17 + 32) + 32);
    goto LABEL_24;
  }
  v22 = (v20 >> 6) & 7;
  if (v22 == 1)
  {
    v141 = (WebCore::FontCascadeFonts **)(*(_QWORD *)(v17 + 32) + 32);
LABEL_105:
    if ((v12 & 0x30) == 0x10 || !*((_DWORD *)v11 + 3))
      goto LABEL_18;
    v145 = (uint64_t *)v11;
    if (*(_BYTE *)(a4 + 8))
    {
      if (v13 > 0.0)
      {
        v67 = (unsigned int *)*v10;
        if ((*(_WORD *)((_BYTE *)*v10 + 21) & 0xF) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x194341154);
        }
        v68 = v13;
        v13 = *(float *)(a4 + 12);
        v143 = (WebCore::FontCascade *)WebCore::Layout::TextUtil::breakWord(*v10, (const WebCore::Layout::InlineTextItem *)(*(_QWORD *)(*(_QWORD *)v18 + 32)+ 32), a3, *(float *)(v9 + 24 * v7 + 16), v68, v13, a4, a5);
        if (v143)
        {
          if (v143 != (WebCore::FontCascade *)v67[3])
          {
            *(_QWORD *)v140 = v67;
            if ((*(_WORD *)(*(_QWORD *)v67 + 12) & 0x20) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x194341174);
            }
            v70 = *(float *)&v69;
            v71 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 24) + 228) >> 12) & 7;
            v72 = *(_QWORD *)(*(_QWORD *)v67 + 120);
            if (v72)
            {
              v73 = *(_DWORD *)(v72 + 4);
              *(_DWORD *)v72 += 2;
              v74 = v67 + 4;
              v75 = (*(_DWORD *)(*(_QWORD *)v140 + 16) + (_DWORD)v143);
              if (v73 <= v75)
              {
                v77 = 0;
              }
              else
              {
                v76 = *(_QWORD *)(v72 + 8);
                v77 = (*(_BYTE *)(v72 + 16) & 4) != 0
                    ? *(unsigned __int8 *)(v76 + v75)
                    : *(unsigned __int16 *)(v76 + 2 * v75);
              }
            }
            else
            {
              v77 = 0;
              v74 = v67 + 4;
            }
            if (v71 != 1 && (v77 == 8208 || v77 == 8211)
              || v77 == 160
              || (v107 = u_charType(v77), v77 != 92) && ((1 << v107) & 0x30B00000) != 0)
            {
              v78 = *v74;
              v79 = (char *)v143 + v78;
              if ((unint64_t)v143 + v78 > v78)
              {
                if (v72)
                {
                  do
                  {
                    v80 = *(_DWORD *)(v72 + 4);
                    if (v80 > v79 && (*(_BYTE *)(v72 + 16) & 4) == 0)
                    {
                      v83 = *(_QWORD *)(v72 + 8);
                      if ((*(_WORD *)(v83 + 2 * v79) & 0xFC00) == 0xDC00)
                      {
                        if (v80 <= (int)v79 - 1)
                          v84 = 0;
                        else
                          v84 = *(_WORD *)(v83 + 2 * ((_DWORD)v79 - 1));
                        v79 -= (v84 & 0xFC00) == 55296;
                      }
                    }
                    if (v80 <= v79)
                    {
                      v82 = 0;
                    }
                    else
                    {
                      v81 = *(_QWORD *)(v72 + 8);
                      if ((*(_BYTE *)(v72 + 16) & 4) != 0)
                        v82 = *(unsigned __int8 *)(v81 + v79);
                      else
                        v82 = *(unsigned __int16 *)(v81 + 2 * v79);
                    }
                    if (WebCore::Layout::canBreakBefore(v82, v71))
                      break;
                    --v79;
                  }
                  while ((unint64_t)v79 > v78);
                }
                else
                {
                  v108 = 1;
                  while (((1 << u_charType(0)) & 0x30B00000) != 0)
                  {
                    v143 = 0;
                    if ((unint64_t)--v79 <= v78)
                      goto LABEL_217;
                  }
                }
              }
              v143 = (WebCore::FontCascade *)&v79[-v78];
              if (v79 == (char *)v78)
              {
                v143 = 0;
                v108 = 1;
              }
              else
              {
                v6 = WebCore::Layout::TextUtil::width(*(uint64_t **)v140, (WebCore::FontCascadeFonts **)(*(_QWORD *)(*(_QWORD *)v18 + 32) + 32), v78, v79, 1, v13);
                v108 = 0;
              }
            }
            else
            {
              v108 = 0;
              v6 = v70;
            }
LABEL_217:
            if (v72)
            {
              if (*(_DWORD *)v72 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v72, v69);
              else
                *(_DWORD *)v72 -= 2;
            }
            if ((v108 & 1) == 0)
            {
              *(_QWORD *)a1 = v143;
              *(float *)(a1 + 8) = v6;
              goto LABEL_228;
            }
          }
        }
      }
      if ((*(_WORD *)(*v145 + 12) & 0x20) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1943414B4);
      }
      v121 = *(_QWORD *)(*v145 + 120);
      if (v121 && (v122 = *((unsigned int *)v145 + 4), *(_DWORD *)(v121 + 4) > v122))
      {
        v123 = *(_QWORD *)(v121 + 8);
        if ((*(_BYTE *)(v121 + 16) & 4) != 0)
          v124 = *(unsigned __int8 *)(v123 + v122);
        else
          v124 = *(unsigned __int16 *)(v123 + 2 * v122);
      }
      else
      {
        v124 = 0;
      }
      if (WebCore::Layout::canBreakBefore(v124, (*(_DWORD *)(*(_QWORD *)(v17 + 24) + 228) >> 12) & 7))
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
LABEL_228:
        *(_BYTE *)(a1 + 12) = 0;
        *(_BYTE *)(a1 + 16) = 0;
        *(_BYTE *)(a1 + 24) = 1;
        return;
      }
      if (*((_BYTE *)a5 + 21))
        goto LABEL_18;
      if ((*(_WORD *)(*v145 + 12) & 0x20) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1943414D4);
      }
      v126 = *(_QWORD *)(*v145 + 120);
      if (v126)
      {
        *(_DWORD *)v126 += 2;
        v127 = *((_DWORD *)v145 + 4);
        v128 = v127;
        while (1)
        {
          v129 = *((_DWORD *)v145 + 3);
          if (v128 >= v129 + *((_DWORD *)v145 + 4))
            break;
          v130 = v128 + 1;
          v131 = *(_DWORD *)(v126 + 4);
          if (v131 <= v128
            || (*(_BYTE *)(v126 + 16) & 4) != 0
            || ((v134 = *(_QWORD *)(v126 + 8), (*(_WORD *)(v134 + 2 * v128) & 0xFC00) == 0xD800)
              ? (v135 = v130 == v129)
              : (v135 = 1),
                v135))
          {
            ++v128;
          }
          else
          {
            if (v131 <= v130)
              v136 = 0;
            else
              v136 = *(_WORD *)(v134 + 2 * v130);
            if ((v136 & 0xFC00) == 0xDC00)
              v128 += 2;
            else
              ++v128;
          }
          if (v131 <= v128)
          {
            v133 = 0;
          }
          else
          {
            v132 = *(_QWORD *)(v126 + 8);
            if ((*(_BYTE *)(v126 + 16) & 4) != 0)
              v133 = *(unsigned __int8 *)(v132 + v128);
            else
              v133 = *(unsigned __int16 *)(v132 + 2 * v128);
          }
          if (WebCore::Layout::canBreakBefore(v133, (*(_DWORD *)(*(_QWORD *)(v17 + 24) + 228) >> 12) & 7))
            goto LABEL_261;
        }
        v137 = 0;
        v138 = 0;
      }
      else
      {
        v127 = *((_DWORD *)v145 + 4);
        v128 = v127;
        do
        {
          if (v128 >= *((_DWORD *)v145 + 3) + *((_DWORD *)v145 + 4))
            goto LABEL_262;
          ++v128;
        }
        while (((1 << u_charType(0)) & 0x30B00000) != 0);
LABEL_261:
        if (v128 == *((_DWORD *)v145 + 3) + *((_DWORD *)v145 + 4))
        {
LABEL_262:
          v138 = 0;
          v137 = 0;
          goto LABEL_264;
        }
        v138 = v128 - v127;
        v139 = *(float *)(a4 + 12);
        v137 = 1;
        v13 = WebCore::Layout::TextUtil::width(v145, (WebCore::FontCascadeFonts **)(*(_QWORD *)(v17 + 32) + 32), v127, v128, 1, v139);
LABEL_264:
        if (!v126)
          goto LABEL_267;
      }
      if (*(_DWORD *)v126 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v126, v125);
      else
        *(_DWORD *)v126 -= 2;
LABEL_267:
      if (!v137)
        goto LABEL_18;
      *(_QWORD *)a1 = v138;
      *(float *)(a1 + 8) = v13;
      goto LABEL_228;
    }
    v85 = *(_QWORD *)a4;
    v86 = *((unsigned int *)v8 + 3);
    v54 = v86 > *(_QWORD *)a4;
    v87 = v86 - *(_QWORD *)a4;
    if (!v54)
    {
LABEL_137:
      __break(0xC471u);
      JUMPOUT(0x194340E1CLL);
    }
    v88 = *(_QWORD *)(*(_QWORD *)v8 + 24 * v85);
    if ((*(_WORD *)(v88 + 21) & 0xF) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x194341134);
    }
    v89 = *(_QWORD *)v8 + 24 * v85;
    v90 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v89 + 8) + 24) + 228) >> 12) & 7;
    v91 = (uint64_t **)(v89 + 24);
    do
    {
      if (!--v87)
        goto LABEL_174;
      v93 = *v91;
      v91 += 3;
      v92 = v93;
      v94 = *(_WORD *)((char *)v93 + 21);
    }
    while ((v94 & 0xF) != 0);
    v95 = *v92;
    if ((v94 & 0x30) == 0x10)
    {
      if ((*(_DWORD *)(v95 + 56) & 0x38000000) == 0x18000000)
        goto LABEL_144;
    }
    else
    {
      if ((*(_WORD *)(v95 + 12) & 0x20) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1943411A4);
      }
      v109 = *(_QWORD *)(v95 + 120);
      if (v109 && (v110 = *((unsigned int *)v92 + 4), *(_DWORD *)(v109 + 4) > v110))
      {
        v111 = *(_QWORD *)(v109 + 8);
        if ((*(_BYTE *)(v109 + 16) & 4) != 0)
          v112 = *(unsigned __int8 *)(v111 + v110);
        else
          v112 = *(unsigned __int16 *)(v111 + 2 * v110);
      }
      else
      {
        v112 = 0;
      }
      if (!WebCore::Layout::canBreakBefore(v112, v90))
      {
LABEL_144:
        if ((*(_WORD *)(*(_QWORD *)v88 + 12) & 0x20) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1943411C4);
        }
        v96 = *(_QWORD *)(*(_QWORD *)v88 + 120);
        if (v96)
        {
          *(_DWORD *)v96 += 2;
          v99 = *(_DWORD *)(v88 + 16);
          v97 = (_DWORD *)(v88 + 16);
          v98 = v99;
          v100 = *(v97 - 1) + v99;
          while (1)
          {
            v101 = v100 - 1;
            if (v100 - 1 <= v98)
              break;
            v102 = *(_DWORD *)(v96 + 4);
            if (v102 <= v101
              || (*(_BYTE *)(v96 + 16) & 4) != 0
              || (v105 = *(_QWORD *)(v96 + 8), (*(_WORD *)(v105 + 2 * v101) & 0xFC00) != 0xDC00))
            {
              --v100;
            }
            else
            {
              v106 = v100 - 2;
              --v100;
              if (v102 > v106)
              {
                if ((*(_WORD *)(v105 + 2 * v106) & 0xFC00) == 0xD800)
                  v100 = v106;
                else
                  v100 = v101;
              }
            }
            if (v102 <= v100)
            {
              v104 = 0;
            }
            else
            {
              v103 = *(_QWORD *)(v96 + 8);
              if ((*(_BYTE *)(v96 + 16) & 4) != 0)
                v104 = *(unsigned __int8 *)(v103 + v100);
              else
                v104 = *(unsigned __int16 *)(v103 + 2 * v100);
            }
            if (WebCore::Layout::canBreakBefore(v104, v90))
              goto LABEL_192;
          }
          v117 = 0;
          LOBYTE(v100) = 0;
        }
        else
        {
          v119 = *(_DWORD *)(v88 + 16);
          v97 = (_DWORD *)(v88 + 16);
          v118 = v119;
          v100 = *(v97 - 1) + v119;
          do
          {
            if (--v100 <= v118)
            {
              LOBYTE(v100) = 0;
              v117 = 0;
              goto LABEL_196;
            }
          }
          while (((1 << u_charType(0)) & 0x30B00000) != 0);
LABEL_192:
          v120 = (_DWORD *)(v100 >> 8);
          if (v100 == *v97)
          {
            LOBYTE(v100) = 0;
            v117 = 0;
          }
          else
          {
            v117 = 1;
          }
          v97 = v120;
LABEL_196:
          if (!v96)
            goto LABEL_199;
        }
        if (*(_DWORD *)v96 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v96, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v96 -= 2;
LABEL_199:
        if (!v117)
          goto LABEL_18;
        v113 = v100 | ((_QWORD)v97 << 8);
LABEL_175:
        v114 = *((unsigned int *)v145 + 4);
        v115 = v113 - v114;
        v116 = WebCore::Layout::TextUtil::width(v145, v141, v114, v114 + v115, 1, *(float *)(a4 + 12));
        *(_QWORD *)a1 = v115;
        *(float *)(a1 + 8) = v116;
        *(_BYTE *)(a1 + 12) = 0;
        *(_BYTE *)(a1 + 16) = 0;
        goto LABEL_96;
      }
    }
LABEL_174:
    v113 = (*(_DWORD *)(v88 + 12) + *(_DWORD *)(v88 + 16));
    goto LABEL_175;
  }
  if (*((_BYTE *)a5 + 22) || v22 != 3)
  {
    if ((v20 & 0x600) == 0x200 && *a2 == 0)
    {
      if (*((_BYTE *)a5 + 22))
      {
LABEL_13:
        if (v22 == 2)
          goto LABEL_18;
        if ((v20 & 0xC00000) != 0x800000 || a2[1] != 0)
          goto LABEL_18;
        v25 = (WTF::StringImpl *)(*(_QWORD *)(v17 + 32) + 176);
        {
          qword_1EE2E4E30 = 0;
          xmmword_1EE2E4E10 = 0u;
          unk_1EE2E4E20 = 0u;
          WTF::TinyLRUCachePolicy<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>>::cache(void)::cache = 0u;
          unk_1EE2E4E00 = 0u;
        }
        if (!*(_QWORD *)WTF::TinyLRUCache<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>,4ul,WTF::TinyLRUCachePolicy<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>>>::get((uint64_t)&WTF::TinyLRUCachePolicy<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>>::cache(void)::cache, v25))goto LABEL_18;
        v26 = 4;
        goto LABEL_23;
      }
    }
    else if (*((_BYTE *)a5 + 22) || (v20 & 0x600) != 0x400)
    {
      goto LABEL_13;
    }
  }
  v41 = WebCore::Layout::InlineContentBreaker::wordBreakBehavior(WebCore::RenderStyle const&,BOOL)const::$_0::operator()(a2[1], v17);
  v141 = (WebCore::FontCascadeFonts **)(*(_QWORD *)(v17 + 32) + 32);
  if ((v41 & 1) != 0)
  {
    v12 = *(_WORD *)((char *)v11 + 21);
    goto LABEL_105;
  }
  v26 = v41;
  v27 = (float *)(*(_QWORD *)(v17 + 32) + 32);
LABEL_24:
  v144 = (unsigned int *)v11;
  if ((v26 & 4) == 0)
    goto LABEL_28;
  if (v13 <= 0.0 && *(_BYTE *)(a4 + 8))
  {
LABEL_27:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
LABEL_28:
    if ((v26 & 2) != 0)
    {
      v146 = (WTF::StringImpl *)v144;
      v147 = (WTF::StringImpl *)a4;
      v148 = v8;
      v149 = (uint64_t)v27;
      v150 = &v153;
      v151 = v10;
      v152 = &v154;
      WebCore::Layout::InlineContentBreaker::tryBreakingTextRun(WTF::Vector<WebCore::Layout::InlineContentBreaker::ContinuousContent::Run,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::Layout::CandidateTextRunForBreaking const&,float,WebCore::Layout::InlineContentBreaker::LineStatus const&)const::$_2::operator()(a1, (uint64_t *)&v146, (uint64_t)a3, a4, a5);
      return;
    }
LABEL_18:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    return;
  }
  v28 = *(_QWORD *)(*(_QWORD *)(v17 + 24) + 288);
  if (v28)
    goto LABEL_38;
  {
    WTF::AtomStringImpl::add();
    WebCore::RenderStyle::hyphenString(void)const::hyphenMinusString = (uint64_t)v146;
  }
  {
    WTF::AtomStringImpl::add();
    WebCore::RenderStyle::hyphenString(void)const::hyphenString = (uint64_t)v146;
  }
  v29 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(v17 + 32) + 32), a2);
  v30 = WebCore::Font::glyphForCharacter(v29, (void *)0x2010);
  v32 = &WebCore::RenderStyle::hyphenString(void)const::hyphenMinusString;
  if (v30)
    v32 = &WebCore::RenderStyle::hyphenString(void)const::hyphenString;
  v28 = *v32;
  if (v28)
  {
LABEL_38:
    v31 = (WTF::StringImpl *)*(unsigned int *)(v28 + 4);
    if (((*(_DWORD *)(v28 + 16) >> 2) & 1) != 0)
    {
      if ((_DWORD)v31)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_41:
        v34 = v146;
        goto LABEL_42;
      }
    }
    else if ((_DWORD)v31)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      goto LABEL_41;
    }
  }
  v34 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  v33 = *MEMORY[0x1E0CBEF70] + 2;
  *MEMORY[0x1E0CBEF70] = v33;
LABEL_42:
  LODWORD(v146) = 0;
  if (v34)
  {
    *(_DWORD *)v34 += 2;
    LOBYTE(v33) = BYTE5(v150);
  }
  v147 = v34;
  LODWORD(v148) = 0;
  BYTE4(v148) = 1;
  v149 = 0x3F80000000000000;
  LODWORD(v150) = 0;
  BYTE4(v150) = 4;
  BYTE5(v150) = v33 & 0xE0 | 8;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v31);
    else
      *(_DWORD *)v34 -= 2;
  }
  v36 = WebCore::FontCascade::width((uint64_t)v27, (uint64_t)&v146);
  v37 = v147;
  v147 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v35);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = *(unsigned __int8 *)(a4 + 8);
  if (*(_BYTE *)(a4 + 8))
  {
    v39 = v154 - v36;
    if ((float)(v154 - v36) <= 0.0 || (float)((float)(v27[43] * 5.0) * 0.25) >= v39)
      goto LABEL_27;
    if ((*(_WORD *)(*(_QWORD *)v144 + 12) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19434106CLL);
    }
    v40 = WebCore::Layout::TextUtil::breakWord(*(WebCore::Layout::TextUtil **)v144, (const WebCore::Layout::InlineTextBox *)v144[4], v144[3], (WebCore::FontCascade *)v27, *(float *)(v9 + 24 * v7 + 16), v39, *(float *)(a4 + 12), a5);
  }
  else
  {
    v40 = 0;
  }
  v142 = (WebCore::FontCascadeFonts **)v27;
  if ((*(_WORD *)(*(_QWORD *)v144 + 12) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194340F88);
  }
  v42 = *(WTF::StringImpl **)(*(_QWORD *)v144 + 120);
  if (!v42)
  {
    v45 = 0;
    v43 = 0;
    v46 = 0x100000000;
    v44 = 1;
    goto LABEL_67;
  }
  a3 = (const WebCore::FontCascade *)v144[3];
  v35 = (WTF::StringImpl *)v144[4];
  if ((_DWORD)v35 || (LODWORD(v43) = *((_DWORD *)v42 + 1), v43 > a3))
  {
    v66 = v40;
    WTF::StringImpl::substring(*(WTF::StringImpl **)(*(_QWORD *)v144 + 120));
    v42 = v146;
    if (!v146)
    {
      v45 = 0;
      v43 = 0;
      v46 = 0x100000000;
      v44 = 1;
      v40 = v66;
      goto LABEL_67;
    }
    LODWORD(v43) = *((_DWORD *)v146 + 1);
    v40 = v66;
  }
  else
  {
    *(_DWORD *)v42 += 2;
  }
  v44 = 0;
  v45 = *((_QWORD *)v42 + 1);
  v46 = (unint64_t)((*((_DWORD *)v42 + 4) >> 2) & 1) << 32;
  v43 = v43;
LABEL_67:
  v47 = *(_QWORD *)(v17 + 24);
  v48 = *(unsigned __int16 *)(v47 + 296);
  if (v48 == 0xFFFF)
    LOWORD(v48) = 0;
  v49 = (__int16)v48;
  if (v38 && v40 < (__int16)v48)
    goto LABEL_90;
  v50 = *(unsigned __int16 *)(v47 + 298);
  v51 = v50 == 0xFFFF ? 0 : v50;
  v52 = v51;
  v53 = (__int16)v48 + (uint64_t)v51;
  v54 = v43 > (__int16)v48 && v43 > v52;
  if (!v54 || v53 > v43)
    goto LABEL_90;
  v56 = v46 | v43;
  if (v38)
    v57 = v40;
  else
    v57 = v43;
  v58 = v43 - v52;
  if (v58 >= v57)
    v58 = v57;
  HyphenLocation = WebCore::lastHyphenLocation(v45, v56, v58 + 1, (WTF::StringImpl *)(*(_QWORD *)(v17 + 32) + 176));
  if (!HyphenLocation || HyphenLocation < v49)
  {
LABEL_90:
    v61 = 0;
    v62 = 0;
    v63 = 1;
  }
  else
  {
    v63 = 0;
    v62 = HyphenLocation & 0xFFFFFFFFFFFFFF00;
    v61 = HyphenLocation;
  }
  if ((v44 & 1) == 0)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v35);
    else
      *(_DWORD *)v42 -= 2;
  }
  v27 = (float *)v142;
  if ((v63 & 1) != 0)
    goto LABEL_27;
  v64 = v62 | v61;
  v65 = WebCore::Layout::TextUtil::width((uint64_t *)v144, v142, v144[4], v144[4] + v64, 1, *(float *)(a4 + 12));
  *(_QWORD *)a1 = v64;
  *(float *)(a1 + 8) = v65;
  *(float *)(a1 + 12) = v36;
  *(_BYTE *)(a1 + 16) = 1;
LABEL_96:
  *(_BYTE *)(a1 + 24) = 1;
}

uint64_t WebCore::toJS<WebCore::IDLUSVString,WTF::String>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *a2;
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

void WebCore::Document::cookie(WebCore::Document *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  __int128 v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  __int128 *v15;
  WTF::StringImpl *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  double v25;
  WTF::StringImpl *v26;
  _DWORD *v27;
  WTF *v28;
  void *v29;
  __int128 v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  __int128 v33;
  __int128 v34;

  v3 = *((_QWORD *)this + 66);
  if (!v3)
    goto LABEL_16;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_16;
  v6 = *(_QWORD *)(v4 + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      if ((*(_QWORD *)(*(_QWORD *)(v7 + 112) + 664) & 0x800000000000000) == 0)
        goto LABEL_16;
    }
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 121);
  if (v8)
    *(_DWORD *)v8 += 2;
  v32 = v8;
  v9 = *((_OWORD *)this + 62);
  v33 = *((_OWORD *)this + 61);
  v34 = v9;
  if ((WTF::URL::protocolIs() & 1) != 0 || (v33 & 2) != 0)
    v11 = 0;
  else
    v11 = WTF::URL::protocolIs() ^ 1;
  v12 = v32;
  v32 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, v10);
      if (v11)
        goto LABEL_16;
      goto LABEL_18;
    }
    *(_DWORD *)v12 -= 2;
  }
  if (v11)
  {
LABEL_16:
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 16) = 0;
    return;
  }
LABEL_18:
  WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)this + 192), v10);
  if (!v13 || *(_DWORD *)(v13 + 32) == 1)
  {
    *(_BYTE *)a2 = 14;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    return;
  }
  v15 = (__int128 *)((char *)this + 976);
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 121);
  if (v16)
  {
    *(_DWORD *)v16 += 2;
    v32 = v16;
    v17 = *((_OWORD *)this + 62);
    v33 = *v15;
    v34 = v17;
    if (*((_DWORD *)v16 + 1))
    {
      if ((*((_QWORD *)this + 355) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*((_QWORD *)this + 355) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        v18 = *((_QWORD *)this + 66);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 8);
          if (v19)
          {
            v20 = *(_QWORD *)(v19 + 24);
            if (v20)
            {
              v21 = *(_QWORD *)(v20 + 8);
              if (v21)
              {
                ++*(_DWORD *)v21;
                (***(void (****)(WTF::StringImpl **__return_ptr, _QWORD, WebCore::Document *, WTF::StringImpl **))(v21 + 888))(&v31, *(_QWORD *)(v21 + 888), this, &v32);
                v23 = v31;
                if (v31)
                  *(_DWORD *)v31 += 2;
                v24 = (WTF::StringImpl *)*((_QWORD *)this + 359);
                *((_QWORD *)this + 359) = v23;
                if (v24)
                {
                  if (*(_DWORD *)v24 == 2)
                    v24 = (WTF::StringImpl *)WTF::StringImpl::destroy(v24, v22);
                  else
                    *(_DWORD *)v24 -= 2;
                }
                *((_QWORD *)this + 354) = 0;
                WTF::MonotonicTime::now(v24);
                WebCore::TimerBase::setNextFireTime((uint64_t)this + 2808, v25 + 0.0);
                v26 = v31;
                v31 = 0;
                if (v26)
                {
                  if (*(_DWORD *)v26 == 2)
                    WTF::StringImpl::destroy(v26, v14);
                  else
                    *(_DWORD *)v26 -= 2;
                }
                if (*(_DWORD *)v21 == 1)
                {
                  WebCore::Page::~Page(v21);
                  WTF::fastFree(v28, v29);
                }
                else
                {
                  --*(_DWORD *)v21;
                }
              }
            }
          }
        }
      }
      v27 = (_DWORD *)*((_QWORD *)this + 359);
      if (v27)
        *v27 += 2;
      *(_QWORD *)a2 = v27;
      *(_DWORD *)(a2 + 16) = 0;
      v16 = v32;
      goto LABEL_46;
    }
  }
  else
  {
    v30 = *((_OWORD *)this + 62);
    v33 = *v15;
    v34 = v30;
  }
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 16) = 0;
LABEL_46:
  v32 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
}

