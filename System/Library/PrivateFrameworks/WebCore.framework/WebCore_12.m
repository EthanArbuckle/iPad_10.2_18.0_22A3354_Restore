BOOL WebCore::MIMETypeRegistry::canShowMIMEType(WTF::StringImpl **this, const WTF::String *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v4;
  const WTF::String *v5;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  char *v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  char **v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  WTF::StringImpl *v21;
  BOOL v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int i;
  int v30;
  WTF *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  unsigned __int16 v35;
  int v36;
  WTF::StringImpl *v37;

  v4 = *this;
  if (!*this)
    goto LABEL_2;
  if (!*((_DWORD *)v4 + 1))
    goto LABEL_42;
  *(_DWORD *)v4 += 2;
  v37 = v4;
  if ((WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)1> [43]>::contains<WTF::String>((const char ***)WebCore::MIMETypeRegistry::isSupportedImageMIMEType(WTF::String const&)::supportedImageMIMETypeSet, (uint64_t *)&v37) & 1) != 0)
  {
    v22 = 1;
  }
  {
    if (WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes)
      v22 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes, (WTF::ASCIICaseInsensitiveHash *)&v37) != 0;
    else
      v22 = 0;
  }
  else
  {
    v22 = 0;
    WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes = 0;
  }
  v23 = v37;
  v37 = 0;
  if (!v23)
    goto LABEL_36;
  if (*(_DWORD *)v23 != 2)
  {
    *(_DWORD *)v23 -= 2;
LABEL_36:
    if (v22)
      return 1;
    goto LABEL_37;
  }
  v23 = (WTF::StringImpl *)WTF::StringImpl::destroy(v23, v21);
  if (v22)
    return 1;
LABEL_37:
  if (!*this)
    goto LABEL_2;
  if (*((_DWORD *)*this + 1))
  {
    WebCore::MIMETypeRegistry::supportedNonImageMIMETypes(v23);
    if (qword_1ECE83B38)
    {
      if (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&qword_1ECE83B38, (WTF::ASCIICaseInsensitiveHash *)this))
      {
        return 1;
      }
    }
  }
LABEL_42:
  if (*this && *((_DWORD *)*this + 1))
  {
    if ((byte_1ECE83B31 & 1) != 0)
    {
      v25 = (WTF::StringImpl *)qword_1ECE83B40;
      if (qword_1ECE83B40)
        goto LABEL_46;
    }
    else
    {
      v37 = 0;
      WebCore::MediaPlayer::getSupportedTypes((WebCore *)&v37);
      v25 = v37;
      qword_1ECE83B40 = (uint64_t)v37;
      byte_1ECE83B31 = 1;
      if (v37)
      {
LABEL_46:
        v26 = *((_DWORD *)v25 - 2);
        v27 = *((_DWORD *)*this + 4);
        if (v27 < 0x100)
          v28 = WTF::StringImpl::hashSlowCase(*this);
        else
          v28 = v27 >> 8;
        for (i = 0; ; v28 = i + v30)
        {
          v30 = v28 & v26;
          v31 = (WTF *)*((_QWORD *)v25 + (v28 & v26));
          if (!v31)
            break;
          if (v31 != (WTF *)-1 && (WTF::equal(v31, *this, a3) & 1) != 0)
            return 1;
          ++i;
        }
      }
    }
  }
LABEL_2:
  if (WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [16]>::contains<WTF::String>(WebCore::MIMETypeRegistry::isSupportedJavaScriptMIMEType(WTF::String const&)::supportedJavaScriptMIMETypes, (uint64_t *)this)|| (WebCore::MIMETypeRegistry::isSupportedJSONMIMEType((WebCore::MIMETypeRegistry *)this, v5) & 1) != 0|| WebCore::PreviewConverter::supportsMIMEType((WebCore::PreviewConverter *)this, v6))
  {
    return 1;
  }
  if (WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [4]>::contains<WTF::String>((char ***)WebCore::MIMETypeRegistry::isUSDMIMEType(WTF::String const&)::usdMIMETypeSet, (uint64_t *)this))
  {
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
      goto LABEL_8;
    }
    if (BYTE5(qword_1ECE90A60))
      return 1;
  }
LABEL_8:
  v7 = *this;
  if (!*this)
    return 0;
  v8 = (char *)*((unsigned int *)v7 + 1);
  if (v8 < 5)
    return 0;
  v9 = *((_DWORD *)v7 + 4);
  v10 = (unsigned __int8 *)*((_QWORD *)v7 + 1);
  if ((v9 & 4) != 0)
  {
    v11 = *v10;
    if ((v11 & 0xFFFFFFDF) != 0x54 || (v10[1] & 0xDF) != 0x45 || (v10[2] & 0xDF) != 0x58 || (v10[3] & 0xDF) != 0x54)
      return 0;
    v12 = v10[4];
  }
  else
  {
    v11 = *(_WORD *)v10;
    if ((*(_WORD *)v10 & 0xFFDF) != 0x54
      || (*((_WORD *)v10 + 1) & 0xFFDF) != 0x45
      || (*((_WORD *)v10 + 2) & 0xFFDF) != 0x58
      || (*((_WORD *)v10 + 3) & 0xFFDF) != 0x54)
    {
      return 0;
    }
    v12 = *((unsigned __int16 *)v10 + 4);
  }
  if ((v12 & 0xFFFFFFDF) != 0xF)
    return 0;
  if ((v9 & 4) != 0)
  {
    v13 = 0;
    v14 = v11 | 0x20;
    v15 = v10 + 1;
    while (1)
    {
      v16 = &(&WebCore::unsupportedTextMIMETypeArray)[2 * v13];
      v17 = v16[1];
      if (v17)
        --v17;
      if (v17 == v8 && v14 == **v16)
        break;
LABEL_22:
      if (++v13 == 13)
      {
        v16 = WebCore::MIMETypeRegistry::isSupportedImageMIMEType(WTF::String const&)::supportedImageMIMETypeSet;
        return (char *)v16 - (char *)&WebCore::unsupportedTextMIMETypeArray == 208;
      }
    }
    v18 = 0;
    while (v8 - 1 != v18)
    {
      v19 = v18[(_QWORD)(*v16 + 1)];
      v20 = (v18++)[(_QWORD)v15] | 0x20;
      if (v20 != v19)
      {
        if (v18 < v8)
          goto LABEL_22;
        return (char *)v16 - (char *)&WebCore::unsupportedTextMIMETypeArray == 208;
      }
    }
  }
  else
  {
    v32 = 0;
    while (1)
    {
      v16 = &(&WebCore::unsupportedTextMIMETypeArray)[2 * v32];
      v33 = v16[1];
      if (v33)
        --v33;
      if (v33 == v8 && (*(unsigned __int16 *)v10 | 0x20) == (unsigned __int16)**v16)
        break;
LABEL_65:
      ++v32;
      v16 = WebCore::MIMETypeRegistry::isSupportedImageMIMEType(WTF::String const&)::supportedImageMIMETypeSet;
      if (v32 == 13)
        return (char *)v16 - (char *)&WebCore::unsupportedTextMIMETypeArray == 208;
    }
    v34 = 0;
    while (v8 - 1 != v34)
    {
      v35 = v34[(_QWORD)(*v16 + 1)];
      v36 = *(unsigned __int16 *)&v10[2 * (_QWORD)v34++ + 2] | 0x20;
      if (v36 != v35)
      {
        if (v34 < v8)
          goto LABEL_65;
        return (char *)v16 - (char *)&WebCore::unsupportedTextMIMETypeArray == 208;
      }
    }
  }
  return (char *)v16 - (char *)&WebCore::unsupportedTextMIMETypeArray == 208;
}

uint64_t WebCore::JSEvent::subspaceForImpl(WebCore::JSEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3664);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  if (!*(_QWORD *)(v9 + 3664))
  {
    v15 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v15, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v17 = v20;
    v20 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v21;
    v21 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        WTF::fastFree(v18, v16);
      else
        --*(_DWORD *)v18;
    }
    v19 = *(_QWORD *)(v9 + 3664);
    *(_QWORD *)(v9 + 3664) = v15;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v11 = *(_QWORD *)(v3 + 3664);
  *(_QWORD *)(v3 + 3664) = v4;
  if (v11)
  {
    v12 = (WTF *)MEMORY[0x19AEA3528](v11, v10);
    WTF::fastFree(v12, v13);
  }
  v14 = __ldxr((unsigned __int8 *)v7);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t JSC::JSObject::get(JSC::Structure *this, JSC::JSGlobalObject *a2, unint64_t a3)
{
  unint64_t v3;
  JSC::Structure *v6;
  JSC::VM *v7;
  char v8;
  _BYTE *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  _BYTE *v27;
  uint64_t v28;
  JSC::VM *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _WORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  int v56;
  unsigned __int16 *v57;
  uint64_t v58;
  unsigned int v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  unsigned __int16 *v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  JSC::VM *v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  unsigned int v89;
  int v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  unsigned __int8 *v98;
  uint64_t v99;
  unsigned int v100;
  JSC::VM *v101;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int hasExceptionsAfterHandlingTraps;
  unsigned __int8 *v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  unsigned __int8 *v115;
  int v116;
  int v117;
  const WTF::StringImpl *v118;
  const unsigned __int8 *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  JSC::Structure *v123;
  unint64_t v124;
  _QWORD v125[2];
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  v6 = this;
  v130 = *MEMORY[0x1E0C80C00];
  v7 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v122 = 0xFFFFFFFF00000000;
  LOBYTE(v126) = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v9 = (char *)this + 6;
  v8 = *((_BYTE *)this + 6);
  v124 = 0;
  memset(v125, 0, 13);
  v123 = this;
  v10 = a3 >> 4;
  v11 = (int64_t)this;
  if ((v8 & 8) == 0)
  {
    v3 = (unint64_t)this;
    do
    {
      v12 = *(_DWORD *)v3 & 0xFFFFFFFE;
      v13 = 16 * v12;
      if (!(_DWORD)v10 || (v10 & ~*(_DWORD *)(16 * v12 + 0x20)) != 0)
        goto LABEL_16;
      v14 = *(_QWORD *)(16 * v12 + 0x58);
      if (!v14)
      {
        v25 = *(_QWORD *)(16 * v12 + 0x40);
        if (!v25 || *(_BYTE *)(v25 + 5) != 1 && *(_DWORD *)(v25 + 80) < 2u)
          goto LABEL_16;
        v14 = JSC::Structure::materializePropertyTable((JSC::Structure *)v13, v7);
        if (!v14)
          goto LABEL_16;
      }
      if (!*(_DWORD *)(v14 + 24))
        goto LABEL_16;
      v15 = *(_QWORD *)(v14 + 16);
      v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
      v17 = *(unsigned int *)(v14 + 8);
      v18 = *(_DWORD *)(a3 + 16);
      if ((v15 & 1) != 0)
      {
        if ((v18 & 0x20) != 0)
          v18 = *(_DWORD *)(a3 + 32);
        v19 = *(_DWORD *)(v14 + 12);
        v20 = (v18 >> 8) & *(_QWORD *)&v19;
        v21 = *(unsigned __int8 *)(v16 + v20);
        if (!*(_BYTE *)(v16 + v20))
          goto LABEL_16;
        v22 = v16 + v17;
        v23 = 1;
        while (1)
        {
          v24 = *(_QWORD *)(v22 + 8 * (v21 - 1));
          if (a3 == (v24 & 0xFFFFFFFFFFFFLL))
            break;
          v20 = ((_DWORD)v20 + v23) & v19;
          v21 = *(unsigned __int8 *)(v16 + v20);
          ++v23;
          if (!*(_BYTE *)(v16 + v20))
            goto LABEL_16;
        }
        v46 = (v24 >> 16) & 0xFF00000000 | HIBYTE(v24);
      }
      else
      {
        if ((v18 & 0x20) != 0)
          v18 = *(_DWORD *)(a3 + 32);
        v65 = *(_DWORD *)(v14 + 12);
        v66 = v65 & (v18 >> 8);
        v67 = *(_DWORD *)(v16 + 4 * v66);
        if (!v67)
          goto LABEL_16;
        v68 = v16 + 4 * v17;
        v69 = 1;
        while (1)
        {
          v70 = (v67 - 1);
          if (*(_QWORD *)(v68 + 16 * v70) == a3)
            break;
          v66 = (v66 + v69) & v65;
          v67 = *(_DWORD *)(v16 + 4 * v66);
          ++v69;
          if (!v67)
            goto LABEL_16;
        }
        v46 = *(unsigned int *)(v68 + 16 * v70 + 8) | ((unint64_t)*(unsigned __int8 *)(v68 + 16 * v70 + 12) << 32);
      }
      if ((_DWORD)v46 != -1)
      {
        v47 = HIDWORD(v46);
        if ((int)v46 > 63)
        {
          v61 = *(_QWORD *)(v3 + 8) - 8;
          v62 = 0x3F00000000 - (v46 << 32);
        }
        else
        {
          v61 = v3 + 16;
          v62 = v46 << 32;
        }
        v63 = *(_QWORD *)(v61 + (v62 >> 29));
        if ((v63 & 0xFFFE000000000002) != 0)
        {
LABEL_83:
          v120 = v63;
          v124 = v3;
LABEL_84:
          v122 = __PAIR64__(v46, v47);
          v45 = 1;
          LOWORD(v125[1]) = 257;
          goto LABEL_62;
        }
        v64 = *(unsigned __int8 *)(v63 + 5);
        if (v64 != 6)
        {
          if (v64 == 5)
            goto LABEL_89;
          goto LABEL_83;
        }
        v71 = *(_DWORD *)(v13 + 16) & 3;
        v72 = *(_QWORD *)(v63 + 16);
        if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v63 & 0xFFFFFFFE) + 0x4C))
        {
          v74 = *(_QWORD *)(v63 + 24);
          v73 = *(_QWORD *)(v63 + 32);
          v120 = *(_QWORD *)(v63 + 8);
          v121 = v72;
          LODWORD(v122) = HIDWORD(v46);
          v124 = v3;
LABEL_104:
          BYTE1(v125[1]) = 3;
          v45 = 1;
          if (v71 != 2)
            LOBYTE(v125[1]) = 1;
          BYTE3(v125[1]) = 1;
          v128 = v74;
          v129 = v73;
          goto LABEL_62;
        }
        v120 = *(_QWORD *)(v63 + 8);
        v121 = v72;
        LODWORD(v122) = HIDWORD(v46);
        v124 = v3;
        goto LABEL_125;
      }
LABEL_16:
      if ((*v9 & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
        goto LABEL_86;
      v11 = *(_QWORD *)(v13 + 48);
      if (!v11)
        v11 = *(_QWORD *)(v3 + 16);
      if ((v11 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v11 + 5) < 0x17u)
      {
        if (!a3)
          goto LABEL_61;
        v51 = *(_DWORD *)(a3 + 16);
        if ((v51 & 0x20) != 0)
          goto LABEL_61;
        v52 = *(_WORD **)(a3 + 8);
        v53 = *(unsigned int *)(a3 + 4);
        if ((v51 & 4) == 0)
        {
          if ((_DWORD)v53)
          {
            v54 = (unsigned __int16)*v52 - 48;
            if (v54 <= 9 && (v53 < 2 || *v52 != 48))
            {
              v57 = v52 + 1;
              v58 = v53 - 1;
              while (v58)
              {
                if (v54 <= 0x19999999)
                {
                  v59 = *v57 - 48;
                  if (v59 <= 9)
                  {
                    v60 = __CFADD__(v59, 10 * v54);
                    v54 = v59 + 10 * (_DWORD)v54;
                    ++v57;
                    --v58;
                    if (!v60)
                      continue;
                  }
                }
                goto LABEL_61;
              }
              goto LABEL_188;
            }
          }
          goto LABEL_61;
        }
        if (!(_DWORD)v53)
          goto LABEL_61;
        v54 = *(unsigned __int8 *)v52 - 48;
        if (v54 > 9 || v53 >= 2 && *(_BYTE *)v52 == 48)
          goto LABEL_61;
        v98 = (unsigned __int8 *)v52 + 1;
        v99 = v53 - 1;
        while (v99)
        {
          if (v54 > 0x19999999)
            goto LABEL_61;
          v100 = *v98 - 48;
          if (v100 > 9)
            goto LABEL_61;
          v45 = 0;
          v60 = __CFADD__(v100, 10 * v54);
          v54 = v100 + 10 * (_DWORD)v54;
          ++v98;
          --v99;
          if (v60)
            goto LABEL_62;
        }
LABEL_188:
        if ((_DWORD)v54 == -1)
        {
LABEL_61:
          v45 = 0;
          goto LABEL_62;
        }
        v101 = (JSC::VM *)*((_QWORD *)a2 + 7);
        while (2)
        {
          v102 = 16 * (*(_DWORD *)v6 & 0xFFFFFFFE);
          v103 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *, uint64_t, uint64_t *))(16 * *(unsigned int *)(v102 + 0x4C) + 0x70))(v6, a2, v54, &v120);
          v104 = v103;
          if (*((_DWORD *)v101 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v101);
            if (((hasExceptionsAfterHandlingTraps | v104) & 1) != 0)
            {
LABEL_216:
              v45 = hasExceptionsAfterHandlingTraps ^ 1;
              goto LABEL_62;
            }
          }
          else if ((v103 & 1) != 0)
          {
            goto LABEL_86;
          }
          v105 = BYTE2(v125[1]);
          if (BYTE2(v125[1]) == 3)
          {
            if (BYTE4(v125[1]))
              goto LABEL_61;
            v106 = *((unsigned __int8 *)v6 + 5);
            if (v106 == 61)
            {
LABEL_204:
              v107 = *(_QWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x30);
              if (!v107)
                v107 = *((_QWORD *)v6 + 2);
              goto LABEL_206;
            }
LABEL_199:
            if ((v106 - 39) <= 0xA)
            {
              if (JSC::JSArrayBufferView::length(v6) <= v54)
                goto LABEL_61;
              v105 = BYTE2(v125[1]);
            }
          }
          else
          {
            v106 = *((unsigned __int8 *)v6 + 5);
            if (v106 != 61)
              goto LABEL_199;
            if (BYTE2(v125[1]) == 1)
              goto LABEL_61;
          }
          if ((*(_WORD *)(v102 + 12) & 0x800) == 0 || v105 == 3)
            goto LABEL_204;
          if ((*(_WORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
          {
            v107 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *))(16
                                                                                      * *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C)
                                                                                      + 0xB0))(v6, a2);
          }
          else
          {
            v107 = *(_QWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x30);
            if (!v107)
              v107 = *((_QWORD *)v6 + 2);
          }
          if (*((_DWORD *)v101 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v101) & 1) != 0)
            goto LABEL_61;
LABEL_206:
          if ((v107 & 0xFFFE000000000002) != 0)
            goto LABEL_61;
          v45 = 0;
          v6 = (JSC::Structure *)v107;
          if (*(unsigned __int8 *)(v107 + 5) <= 0x16u)
            goto LABEL_62;
          continue;
        }
      }
      v9 = (_BYTE *)(v11 + 6);
      v3 = v11;
    }
    while ((*(_BYTE *)(v11 + 6) & 8) == 0);
  }
  if (a3)
  {
    v26 = *(_DWORD *)(a3 + 16);
    if ((v26 & 0x20) == 0)
    {
      v27 = *(_BYTE **)(a3 + 8);
      v28 = *(unsigned int *)(a3 + 4);
      if ((v26 & 4) != 0)
      {
        if ((_DWORD)v28)
        {
          v3 = *v27 - 48;
          if (v3 <= 9 && (v28 < 2 || *v27 != 48))
          {
            v110 = v27 + 1;
            v111 = v28 - 1;
            while (v111)
            {
              if (v3 <= 0x19999999)
              {
                v112 = *v110 - 48;
                if (v112 <= 9)
                {
                  v60 = __CFADD__(v112, 10 * v3);
                  v3 = v112 + 10 * (_DWORD)v3;
                  ++v110;
                  --v111;
                  if (!v60)
                    continue;
                }
              }
              goto LABEL_27;
            }
            if ((_DWORD)v3 != -1)
              goto LABEL_133;
          }
        }
      }
      else if ((_DWORD)v28)
      {
        v3 = *(unsigned __int16 *)v27 - 48;
        if (v3 <= 9 && (v28 < 2 || *(_WORD *)v27 != 48))
        {
          v76 = (unsigned __int16 *)(v27 + 2);
          v77 = v28 - 1;
          while (v77)
          {
            if (v3 <= 0x19999999)
            {
              v78 = *v76 - 48;
              if (v78 <= 9)
              {
                v60 = __CFADD__(v78, 10 * v3);
                v3 = v78 + 10 * (_DWORD)v3;
                ++v76;
                --v77;
                if (!v60)
                  continue;
              }
            }
            goto LABEL_27;
          }
          if ((_DWORD)v3 != -1)
          {
LABEL_133:
            v80 = (JSC::VM *)*((_QWORD *)a2 + 7);
            while (1)
            {
              v81 = 16 * (*(_DWORD *)v6 & 0xFFFFFFFE);
              v82 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v81 + 0x4C) + 0x70))(v6, a2, v3, &v120);
              v83 = v82;
              if (*((_DWORD *)v80 + 20))
              {
                hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v80);
                if (((hasExceptionsAfterHandlingTraps | v83) & 1) != 0)
                  goto LABEL_216;
              }
              else if ((v82 & 1) != 0)
              {
                goto LABEL_86;
              }
              v84 = BYTE2(v125[1]);
              if (BYTE2(v125[1]) == 3)
              {
                if (BYTE4(v125[1]))
                  goto LABEL_61;
                v85 = *((unsigned __int8 *)v6 + 5);
                if (v85 == 61)
                {
LABEL_148:
                  v86 = *(_QWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x30);
                  if (!v86)
                    v86 = *((_QWORD *)v6 + 2);
                  goto LABEL_150;
                }
              }
              else
              {
                v85 = *((unsigned __int8 *)v6 + 5);
                if (v85 == 61)
                {
                  if (BYTE2(v125[1]) == 1)
                    goto LABEL_61;
                  goto LABEL_146;
                }
              }
              if ((v85 - 39) <= 0xA)
              {
                if (JSC::JSArrayBufferView::length(v6) <= v3)
                  goto LABEL_61;
                v84 = BYTE2(v125[1]);
              }
LABEL_146:
              if ((*(_WORD *)(v81 + 12) & 0x800) == 0 || v84 == 3)
                goto LABEL_148;
              if ((*(_WORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
              {
                v86 = (*(uint64_t (**)(JSC::Structure *, JSC::JSGlobalObject *))(16
                                                                                         * *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C)
                                                                                         + 0xB0))(v6, a2);
              }
              else
              {
                v86 = *(_QWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x30);
                if (!v86)
                  v86 = *((_QWORD *)v6 + 2);
              }
              if (*((_DWORD *)v80 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v80) & 1) != 0)
                goto LABEL_61;
LABEL_150:
              if ((v86 & 0xFFFE000000000002) != 0)
                goto LABEL_61;
              v45 = 0;
              v6 = (JSC::Structure *)v86;
              if (*(unsigned __int8 *)(v86 + 5) <= 0x16u)
                goto LABEL_62;
            }
          }
        }
      }
    }
  }
LABEL_27:
  v29 = (JSC::VM *)*((_QWORD *)a2 + 7);
  while (1)
  {
    v30 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v11 + 6) & 8) != 0)
    {
      v95 = (*(uint64_t (**)(int64_t, JSC::JSGlobalObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) + 0x68))(v11, a2, a3, &v120);
      v96 = v95;
      if (*((_DWORD *)v29 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v29);
        if (((hasExceptionsAfterHandlingTraps | v96) & 1) != 0)
          goto LABEL_216;
      }
      else if ((v95 & 1) != 0)
      {
        goto LABEL_86;
      }
      if (BYTE2(v125[1]) == 3)
      {
        if (BYTE4(v125[1]))
          goto LABEL_61;
        v97 = *(unsigned __int8 *)(v11 + 5);
        if (v97 == 61)
          goto LABEL_43;
      }
      else
      {
        v97 = *(unsigned __int8 *)(v11 + 5);
        if (v97 == 61)
        {
          if (BYTE2(v125[1]) == 1)
            goto LABEL_61;
          goto LABEL_43;
        }
      }
      if (!a3)
        goto LABEL_43;
      if ((v97 - 50) < 0xFFFFFFF5)
        goto LABEL_43;
      v113 = *(_DWORD *)(a3 + 16);
      if ((v113 & 0x20) != 0)
        goto LABEL_43;
      v114 = *(unsigned int *)(a3 + 4);
      if (!(_DWORD)v114)
        goto LABEL_43;
      v115 = *(unsigned __int8 **)(a3 + 8);
      if ((v113 & 4) != 0)
      {
        v116 = *v115;
        if ((_DWORD)v114 == 1)
        {
LABEL_250:
          if ((v116 - 48) < 0xA)
            goto LABEL_61;
          goto LABEL_43;
        }
        if (v116 == 45)
        {
          v117 = v115[1];
LABEL_260:
          if ((v117 - 48) >= 0xA)
          {
            if ((_DWORD)v114 != 9 || v117 != 73)
              goto LABEL_43;
          }
          else if ((_DWORD)v114 == 2)
          {
            goto LABEL_61;
          }
LABEL_264:
          v3 = v3 & 0xFFFFFF0000000000 | v114 | ((unint64_t)((v113 >> 2) & 1) << 32);
          JSC::jsToNumber();
          v118 = (const WTF::StringImpl *)WTF::numberToString();
          if ((WTF::equal((WTF *)a3, v118, v119) & 1) != 0)
            goto LABEL_61;
          goto LABEL_43;
        }
      }
      else
      {
        v116 = *(unsigned __int16 *)v115;
        if ((_DWORD)v114 == 1)
          goto LABEL_250;
        if (v116 == 45)
        {
          v117 = *((unsigned __int16 *)v115 + 1);
          goto LABEL_260;
        }
      }
      if ((v116 - 48) >= 0xA && ((_DWORD)v114 != 8 || v116 != 73) && ((_DWORD)v114 != 3 || v116 != 78))
        goto LABEL_43;
      goto LABEL_264;
    }
    if (!(_DWORD)v10 || (v10 & ~*(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x20)) != 0)
      goto LABEL_42;
    v31 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x58);
    if (!v31)
    {
      v42 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x40);
      if (!v42 || *(_BYTE *)(v42 + 5) != 1 && *(_DWORD *)(v42 + 80) < 2u)
        goto LABEL_42;
      v31 = JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE)), v29);
      if (!v31)
        goto LABEL_42;
    }
    if (!*(_DWORD *)(v31 + 24))
      goto LABEL_42;
    v32 = *(_QWORD *)(v31 + 16);
    v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
    v34 = *(unsigned int *)(v31 + 8);
    v35 = *(_DWORD *)(a3 + 16);
    if ((v32 & 1) == 0)
      break;
    if ((v35 & 0x20) != 0)
      v35 = *(_DWORD *)(a3 + 32);
    v36 = *(_DWORD *)(v31 + 12);
    v37 = (v35 >> 8) & *(_QWORD *)&v36;
    v38 = *(unsigned __int8 *)(v33 + v37);
    if (*(_BYTE *)(v33 + v37))
    {
      v39 = v33 + v34;
      v40 = 1;
      while (1)
      {
        v41 = *(_QWORD *)(v39 + 8 * (v38 - 1));
        if (a3 == (v41 & 0xFFFFFFFFFFFFLL))
          break;
        v37 = ((_DWORD)v37 + v40) & v36;
        v38 = *(unsigned __int8 *)(v33 + v37);
        ++v40;
        if (!*(_BYTE *)(v33 + v37))
          goto LABEL_42;
      }
      v46 = (v41 >> 16) & 0xFF00000000 | HIBYTE(v41);
      goto LABEL_51;
    }
LABEL_42:
    if ((*(_BYTE *)(v11 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      goto LABEL_86;
LABEL_43:
    if ((*(_WORD *)(v30 + 12) & 0x800) != 0)
    {
      v43 = *(_DWORD *)v11;
      if (BYTE2(v125[1]) != 3)
      {
        v108 = 16 * (v43 & 0xFFFFFFFE);
        if ((*(_WORD *)(v108 + 12) & 0x800) != 0)
        {
          v44 = (*(uint64_t (**)(int64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v108 + 76)
                                                                                 + 0xB0))(v11, a2);
        }
        else
        {
          v44 = *(_QWORD *)(v108 + 48);
          if (!v44)
            v44 = *(_QWORD *)(v11 + 16);
        }
        if (*((_DWORD *)v29 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v29) & 1) != 0)
          goto LABEL_61;
        goto LABEL_47;
      }
    }
    else
    {
      v43 = *(_DWORD *)v11;
    }
    v44 = *(_QWORD *)(16 * (v43 & 0xFFFFFFFE) + 0x30);
    if (!v44)
      v44 = *(_QWORD *)(v11 + 16);
LABEL_47:
    if ((v44 & 0xFFFE000000000002) != 0)
      goto LABEL_61;
    v45 = 0;
    v11 = v44;
    if (*(unsigned __int8 *)(v44 + 5) <= 0x16u)
      goto LABEL_62;
  }
  v87 = v10;
  if ((v35 & 0x20) != 0)
    v35 = *(_DWORD *)(a3 + 32);
  v88 = *(_DWORD *)(v31 + 12);
  v89 = v88 & (v35 >> 8);
  v90 = *(_DWORD *)(v33 + 4 * v89);
  if (!v90)
    goto LABEL_42;
  v91 = v33 + 4 * v34;
  v92 = 1;
  while (1)
  {
    v93 = (v90 - 1);
    if (*(_QWORD *)(v91 + 16 * v93) == a3)
      break;
    v89 = (v89 + v92) & v88;
    v90 = *(_DWORD *)(v33 + 4 * v89);
    ++v92;
    v10 = v87;
    if (!v90)
      goto LABEL_42;
  }
  v46 = *(unsigned int *)(v91 + 16 * v93 + 8) | ((unint64_t)*(unsigned __int8 *)(v91 + 16 * v93 + 12) << 32);
  v10 = v87;
LABEL_51:
  if ((_DWORD)v46 == -1)
    goto LABEL_42;
  v47 = HIDWORD(v46);
  if ((int)v46 > 63)
  {
    v48 = *(_QWORD *)(v11 + 8) - 8;
    v49 = 0x3F00000000 - (v46 << 32);
  }
  else
  {
    v48 = v11 + 16;
    v49 = v46 << 32;
  }
  v50 = *(_QWORD *)(v48 + (v49 >> 29));
  if ((v50 & 0xFFFE000000000002) != 0)
  {
LABEL_55:
    v120 = v50;
    v124 = v11;
    goto LABEL_84;
  }
  v79 = *(unsigned __int8 *)(v50 + 5);
  if (v79 == 6)
  {
    v71 = *(_DWORD *)(v30 + 16) & 3;
    v94 = *(_QWORD *)(v50 + 16);
    if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x4C))
    {
      v74 = *(_QWORD *)(v50 + 24);
      v73 = *(_QWORD *)(v50 + 32);
      v120 = *(_QWORD *)(v50 + 8);
      v121 = v94;
      LODWORD(v122) = HIDWORD(v46);
      v124 = v11;
      goto LABEL_104;
    }
    v120 = *(_QWORD *)(v50 + 8);
    v121 = v94;
    LODWORD(v122) = HIDWORD(v46);
    v124 = v11;
LABEL_125:
    v45 = 1;
    BYTE1(v125[1]) = 3;
    if (v71 != 2)
      LOBYTE(v125[1]) = 1;
    goto LABEL_62;
  }
  if (v79 != 5)
    goto LABEL_55;
LABEL_89:
  JSC::JSObject::fillGetterPropertySlot();
LABEL_86:
  v45 = 1;
LABEL_62:
  if (*((_DWORD *)v7 + 20))
  {
    v75 = JSC::VM::hasExceptionsAfterHandlingTraps(v7);
    result = 10;
    if ((v75 & 1) == 0 && ((v45 ^ 1) & 1) == 0)
      goto LABEL_110;
  }
  else
  {
    if (!v45)
    {
      result = 10;
      goto LABEL_65;
    }
LABEL_110:
    if (BYTE1(v125[1]) == 1)
    {
      result = v120;
    }
    else if (BYTE1(v125[1]) == 2)
    {
      result = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v120, a2);
    }
    else
    {
      result = JSC::PropertySlot::customGetter();
    }
  }
LABEL_65:
  if (v127)
  {
    v56 = *(_DWORD *)(v126 + 4);
    if (!v56)
    {
      __break(0xC471u);
      JUMPOUT(0x1944FC0C8);
    }
    *(_DWORD *)(v126 + 4) = v56 - 1;
  }
  return result;
}

void WebCore::ContainerNode::querySelector(WebCore::ContainerNode *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>, int16x8_t a4@<Q0>)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  WebCore::Document::selectorQueryForString((WebCore::Document *)v6, a2, (uint64_t)&v12, a4);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  v8 = v14;
  if (!v14)
  {
    v15 = 0;
    WebCore::SelectorDataList::execute<WebCore::Element *>(v12 + 8, (uint64_t)this);
    *(_QWORD *)a3 = v15;
LABEL_5:
    *(_DWORD *)(a3 + 16) = v8;
    ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore13SelectorQueryENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v8])(&v15, &v12);
    return;
  }
  if (v14 == 1)
  {
    v9 = v13;
    v13 = 0;
    *(_BYTE *)a3 = v12;
    *(_QWORD *)(a3 + 8) = v9;
    goto LABEL_5;
  }
  v10 = std::__throw_bad_variant_access[abi:sn180100]();
  WebCore::SelectorDataList::execute<WebCore::Element *>(v10, v11);
}

void WebCore::SelectorDataList::execute<WebCore::Element *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const WebCore::CSSSelector *v4;
  __n128 v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  WebCore *v10;
  WebCore *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t i;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  WebCore::ContainerNode **v22;
  uint64_t v23;
  const WTF::AtomString *v24;
  unsigned int v25;
  int v26;
  int v27;
  void *v28;
  WebCore *v29;
  WebCore *v30;
  const WebCore::CSSSelector **v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t j;
  _QWORD *v38;
  __int16 v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t *v46;
  int v47;
  void *v48;
  uint64_t v49;
  BOOL v50;
  BOOL v51;
  const WebCore::TreeScope *v52;
  unsigned int *v53;
  __n128 v54;
  WebCore::Node *v55;
  __int16 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  int v61;
  WTF *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  BOOL v75;
  BOOL v76;
  WebCore::ContainerNode **v77;
  WebCore *v78;
  WebCore *v79;
  BOOL v80;
  BOOL v81;
  uint64_t *AllElementsById;
  __n128 v83;
  unsigned int v84;
  int v85;
  int v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const WebCore::Element *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  int v95;
  WTF *v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  WTF *v104;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  int v113;
  WTF *v114;
  WTF::StringImpl *v115;
  WebCore *v116;
  BOOL v117;
  BOOL v118;
  uint64_t v119;
  const WebCore::CSSSelector **v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  int v125;
  WTF *v126;
  WTF::StringImpl *v127;
  uint64_t v128;
  BOOL v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  BOOL v137;
  uint64_t v138;
  uint64_t (**v139)(uint64_t);
  uint64_t v140;
  uint64_t (*v141)(uint64_t);
  BOOL v143;
  WebCore::Node *v144;
  uint64_t v145;
  _BYTE v146[2];
  uint64_t v147;
  WTF::StringImpl *v148;
  char v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  __int16 v153;
  uint64_t v154;
  WTF *v155;
  uint64_t v156;
  _BYTE v157[128];
  int v158;
  char v159;
  uint64_t v160;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v160 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(v2 + 16);
  v7 = v4;
  v8 = v3;
  v9 = (unsigned int *)v2;
  v10 = (WebCore *)v3;
  v11 = (WebCore *)v3;
  switch(v6)
  {
    case 0u:
    case 1u:
      if (!v9[3])
      {
        __break(0xC471u);
        JUMPOUT(0x1944FD950);
      }
      v46 = *(uint64_t **)v9;
      v47 = *(unsigned __int8 *)(*(_QWORD *)v9 + 8);
      if (*(_BYTE *)(*(_QWORD *)v9 + 8))
        goto LABEL_79;
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 577))
      {
        WebCore::SelectorCompiler::SelectorCodeGenerator::SelectorCodeGenerator((uint64_t)&v147, (WebCore *)*v46, (const WebCore::CSSSelector *)1);
        *((_BYTE *)v46 + 8) = WebCore::SelectorCompiler::SelectorCodeGenerator::compile((uint64_t)&v147, (int **)v46 + 2);
        WebCore::SelectorCompiler::SelectorCodeGenerator::~SelectorCodeGenerator((WebCore::SelectorCompiler::SelectorCodeGenerator *)&v147, v48);
        v47 = *((unsigned __int8 *)v46 + 8);
        v6 = v9[4];
LABEL_79:
        if (v47 != 1)
        {
          if (!v6)
          {
            v9[4] = 3;
            v10 = (WebCore *)v8;
            goto LABEL_171;
          }
          v9[4] = 4;
          goto LABEL_169;
        }
      }
      else
      {
        *((_BYTE *)v46 + 8) = 1;
      }
      if (v6)
      {
        v9[4] = 7;
        goto LABEL_311;
      }
      v9[4] = 6;
      goto LABEL_314;
    case 2u:
      v98 = v9[3];
      if (!(_DWORD)v98)
        goto LABEL_228;
      v99 = (_BYTE *)(*(_QWORD *)v9 + 8);
      v100 = 32 * v98;
      while (1)
      {
        v101 = *v99;
        if (!*v99)
        {
          WebCore::SelectorCompiler::compileSelector((uint64_t)v99, *((_QWORD *)v99 - 1));
          v101 = *v99;
        }
        if (v101 == 1)
          break;
        v99 += 32;
        v100 -= 32;
        if (!v100)
        {
LABEL_228:
          v9[4] = 5;
LABEL_229:
          LOBYTE(v147) = 3;
          HIDWORD(v147) = 0;
          v148 = 0;
          v149 = 0;
          v150 = 0;
          v153 = 0;
          v154 = 0;
          v155 = (WTF *)v157;
          v156 = 8;
          v158 = 0;
          v159 = 0;
          if ((*(_WORD *)(v8 + 28) & 0xF000) == 0x9000)
            v102 = 0;
          else
            v102 = v8;
          v151 = v102;
          v152 = 0;
          v103 = *(_QWORD *)(v8 + 80);
          if (v103)
          {
            while ((*(_WORD *)(v103 + 28) & 8) == 0)
            {
              v103 = *(_QWORD *)(v103 + 56);
              if (!v103)
                goto LABEL_233;
            }
LABEL_392:
            while (1)
            {
              v138 = v9[3];
              if ((_DWORD)v138)
                break;
LABEL_398:
              v136 = *(_QWORD *)(v103 + 80);
              if (!v136)
              {
                if (v103 == v8)
                  goto LABEL_233;
                while (1)
                {
                  v136 = *(_QWORD *)(v103 + 56);
                  if (v136)
                    break;
                  v103 = *(_QWORD *)(v103 + 32);
                  if (v103)
                    v137 = v103 == v8;
                  else
                    v137 = 1;
                  if (v137)
                    goto LABEL_233;
                }
              }
              v103 = v136;
              if ((*(_WORD *)(v136 + 28) & 8) == 0)
              {
                while (v136 != v8)
                {
                  while (1)
                  {
                    v103 = *(_QWORD *)(v136 + 56);
                    if (v103)
                      break;
                    v136 = *(_QWORD *)(v136 + 32);
                    if (v136)
                      v143 = v136 == v8;
                    else
                      v143 = 1;
                    if (v143)
                      goto LABEL_233;
                  }
                  v136 = *(_QWORD *)(v136 + 56);
                  if ((*(_WORD *)(v103 + 28) & 8) != 0)
                    goto LABEL_392;
                }
                goto LABEL_233;
              }
            }
            v139 = (uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16);
            v140 = 32 * v138;
            while (1)
            {
              v141 = *v139;
              if (*((_BYTE *)v139 - 8) == 2
                 ? v141(v103)
                 : ((unsigned int (*)(uint64_t, uint64_t *))v141)(v103, &v147))
              {
                break;
              }
              v139 += 4;
              v140 -= 32;
              if (!v140)
                goto LABEL_398;
            }
            *v7 = v103;
          }
LABEL_233:
          v104 = v155;
          if (v157 != (_BYTE *)v155 && v155 != 0)
          {
            v155 = 0;
            LODWORD(v156) = 0;
            WTF::fastFree(v104, (void *)v3);
          }
          v106 = v148;
          v148 = 0;
          if (v106)
          {
            if (*(_DWORD *)v106 == 2)
              WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v3);
            else
              *(_DWORD *)v106 -= 2;
          }
          return;
        }
      }
      v9[4] = 12;
LABEL_265:
      v29 = *(WebCore **)(v8 + 80);
      if (!v29)
        return;
      while ((*((_WORD *)v29 + 14) & 8) == 0)
      {
        v29 = (WebCore *)*((_QWORD *)v29 + 7);
        if (!v29)
          return;
      }
LABEL_315:
      while (1)
      {
        v119 = v9[3];
        if ((_DWORD)v119)
          break;
LABEL_328:
        v128 = *((_QWORD *)v29 + 10);
        if (!v128)
        {
          if (v29 == (WebCore *)v8)
            return;
          while (1)
          {
            v128 = *((_QWORD *)v29 + 7);
            if (v128)
              break;
            v29 = (WebCore *)*((_QWORD *)v29 + 4);
            if (v29)
              v130 = v29 == (WebCore *)v8;
            else
              v130 = 1;
            if (v130)
              return;
          }
        }
        v29 = (WebCore *)v128;
        if ((*(_WORD *)(v128 + 28) & 8) == 0)
        {
          while (v128 != v8)
          {
            while (1)
            {
              v29 = *(WebCore **)(v128 + 56);
              if (v29)
                break;
              v128 = *(_QWORD *)(v128 + 32);
              if (v128)
                v129 = v128 == v8;
              else
                v129 = 1;
              if (v129)
                return;
            }
            v128 = *(_QWORD *)(v128 + 56);
            if ((*((_WORD *)v29 + 14) & 8) != 0)
              goto LABEL_315;
          }
          return;
        }
      }
      v120 = *(const WebCore::CSSSelector ***)v9;
      v121 = 32 * v119;
      while (1)
      {
        v122 = *(_QWORD *)(*((_QWORD *)v29 + 5) + 8);
        LOBYTE(v144) = *(_BYTE *)(v122 + 3384) != 2;
        BYTE1(v144) = *(_BYTE *)(v122 + 3358) & 1;
        LOBYTE(v147) = 3;
        HIDWORD(v147) = 0;
        v148 = 0;
        v149 = 0;
        v150 = 0;
        v152 = 0;
        v153 = 0;
        v154 = 0;
        v155 = (WTF *)v157;
        v156 = 8;
        v158 = 0;
        v159 = 0;
        if ((*(_WORD *)(v8 + 28) & 0xF000) == 0x9000)
          v123 = 0;
        else
          v123 = v8;
        v151 = v123;
        v125 = WebCore::SelectorChecker::match((WebCore::SelectorChecker *)&v144, *v120, v29, (WebCore::SelectorChecker::CheckingContext *)&v147, v5);
        v126 = v155;
        if (v157 != (_BYTE *)v155 && v155)
        {
          v155 = 0;
          LODWORD(v156) = 0;
          WTF::fastFree(v126, v124);
        }
        v127 = v148;
        v148 = 0;
        if (v127)
        {
          if (*(_DWORD *)v127 == 2)
            WTF::StringImpl::destroy(v127, (WTF::StringImpl *)v124);
          else
            *(_DWORD *)v127 -= 2;
        }
        if (v125)
          goto LABEL_350;
        v120 += 4;
        v121 -= 32;
        if (!v121)
          goto LABEL_328;
      }
    case 3u:
      goto LABEL_171;
    case 4u:
LABEL_169:
      if (!v9[3])
      {
        __break(0xC471u);
        JUMPOUT(0x1944FD948);
      }
      v10 = WebCore::filterRootById((WebCore *)v8, **(WebCore::ContainerNode ***)v9, v4);
      goto LABEL_171;
    case 5u:
      goto LABEL_229;
    case 6u:
      goto LABEL_30;
    case 7u:
LABEL_311:
      if (!v9[3])
      {
        __break(0xC471u);
        JUMPOUT(0x1944FD960);
      }
      v11 = WebCore::filterRootById((WebCore *)v8, **(WebCore::ContainerNode ***)v9, v4);
      goto LABEL_30;
    case 8u:
      if (!v9[3])
      {
        __break(0xC471u);
        JUMPOUT(0x1944FD930);
      }
      v22 = *(WebCore::ContainerNode ***)v9;
      v3 = **(_QWORD **)v9;
      if ((*(_BYTE *)(v8 + 22) & 8) == 0)
        goto LABEL_26;
      v23 = *(_QWORD *)(v8 + 40);
      if (*(_BYTE *)(*(_QWORD *)(v23 + 8) + 3384) == 2)
        goto LABEL_26;
      v24 = (const WTF::AtomString *)(v3 + 8);
      break;
    case 9u:
      if (!v9[3])
      {
        __break(0xC471u);
        JUMPOUT(0x1944FD928);
      }
      v15 = *(_QWORD **)(**(_QWORD **)v9 + 8);
      v16 = v15[4];
      if (v16 == WebCore::starAtomData)
      {
        v17 = v15[3];
        if (v17 == v16)
        {
          v107 = *(WTF::StringImpl **)(v3 + 80);
          if (!v107)
            return;
          do
          {
            if ((*((_WORD *)v107 + 14) & 8) != 0)
              goto LABEL_246;
            v107 = (WTF::StringImpl *)*((_QWORD *)v107 + 7);
          }
          while (v107);
          return;
        }
        v18 = v15[5];
        if ((*(_WORD *)(v3 + 28) & 0xF000) == 0x9000 && v18 == *(_QWORD *)(WebCore::HTMLNames::baseTag + 24))
        {
          v19 = *(_QWORD *)(v3 + 1184);
          if (v19)
          {
            v20 = *(_QWORD *)(v19 + 8);
            if (v20)
            {
              v21 = *(_DWORD *)(v20 + 24);
              *(_DWORD *)(v20 + 24) = v21 + 2;
              *(_QWORD *)v4 = v20;
              if (v21)
              {
                *(_DWORD *)(v20 + 24) = v21;
              }
              else if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v20, (void *)v3);
              }
            }
          }
          return;
        }
        if (v17 == v18)
        {
          i = *(_QWORD *)(v3 + 80);
          if (!i)
            return;
          while ((*(_WORD *)(i + 28) & 8) == 0)
          {
            i = *(_QWORD *)(i + 56);
            if (!i)
              return;
          }
          while (1)
          {
            if (*(_QWORD *)(*(_QWORD *)(i + 96) + 24) == v17)
              goto LABEL_104;
            v49 = *(_QWORD *)(i + 80);
            if (!v49)
            {
              if (i == v3)
                return;
              while (1)
              {
                v49 = *(_QWORD *)(i + 56);
                if (v49)
                  break;
                i = *(_QWORD *)(i + 32);
                if (i)
                  v51 = i == v3;
                else
                  v51 = 1;
                if (v51)
                  return;
              }
            }
            if ((*(_WORD *)(v49 + 28) & 8) != 0)
            {
              i = v49;
            }
            else
            {
              do
              {
                if (v49 == v3)
                  return;
                while (1)
                {
                  i = *(_QWORD *)(v49 + 56);
                  if (i)
                    break;
                  v49 = *(_QWORD *)(v49 + 32);
                  if (v49)
                    v50 = v49 == v3;
                  else
                    v50 = 1;
                  if (v50)
                    return;
                }
                v49 = *(_QWORD *)(v49 + 56);
              }
              while ((*(_WORD *)(i + 28) & 8) == 0);
            }
          }
        }
        v107 = *(WTF::StringImpl **)(v3 + 80);
        if (!v107)
          return;
        while ((*((_WORD *)v107 + 14) & 8) == 0)
        {
          v107 = (WTF::StringImpl *)*((_QWORD *)v107 + 7);
          if (!v107)
            return;
        }
        v147 = v3;
        v148 = v107;
        while (1)
        {
          if ((*((_WORD *)v107 + 14) & 0x10) != 0
            && (*(_WORD *)(*(_QWORD *)(*((_QWORD *)v107 + 5) + 8) + 3358) & 1) != 0)
          {
            v134 = *(_QWORD *)(*((_QWORD *)v107 + 12) + 24);
            v135 = v15[5];
          }
          else
          {
            v134 = *(_QWORD *)(*((_QWORD *)v107 + 12) + 24);
            v135 = v15[3];
          }
          if (v134 == v135)
            break;
          WebCore::ElementDescendantIterator<WebCore::Element>::operator++(&v147);
          v107 = v148;
          if (!v148)
            return;
        }
      }
      else
      {
        v107 = *(WTF::StringImpl **)(v3 + 80);
        if (!v107)
          return;
        while ((*((_WORD *)v107 + 14) & 8) == 0)
        {
          v107 = (WTF::StringImpl *)*((_QWORD *)v107 + 7);
          if (!v107)
            return;
        }
        v147 = v3;
        v148 = v107;
        while (1)
        {
          v131 = *((_QWORD *)v107 + 12);
          if (*(_QWORD *)(v131 + 32) == v15[4])
          {
            if ((*((_WORD *)v107 + 14) & 0x10) != 0
              && (*(_WORD *)(*(_QWORD *)(*((_QWORD *)v107 + 5) + 8) + 3358) & 1) != 0)
            {
              v132 = *(_QWORD *)(v131 + 24);
              v133 = v15[5];
            }
            else
            {
              v132 = *(_QWORD *)(v131 + 24);
              v133 = v15[3];
            }
            if (v132 == v133)
              break;
          }
          WebCore::ElementDescendantIterator<WebCore::Element>::operator++(&v147);
          v107 = v148;
          if (!v148)
            return;
        }
      }
      goto LABEL_246;
    case 0xAu:
      if (!v9[3])
      {
        __break(0xC471u);
        JUMPOUT(0x1944FD920);
      }
      v12 = **(_QWORD **)v9;
      v13 = (_QWORD *)(v12 + 8);
      if ((*(_BYTE *)(v12 + 2) & 0x10) != 0)
        v13 = (_QWORD *)(*v13 + 8);
      i = *(_QWORD *)(v3 + 80);
      if (!i)
        return;
      while ((*(_WORD *)(i + 28) & 8) == 0)
      {
        i = *(_QWORD *)(i + 56);
        if (!i)
          return;
      }
LABEL_56:
      v42 = *(_QWORD *)(i + 104);
      if (v42)
      {
        v43 = *(_QWORD *)(v42 + 16);
        if (v43)
        {
          v44 = 0;
          do
          {
            if (*(_QWORD *)(v43 + 16 + 8 * v44) == *v13)
            {
LABEL_104:
              *(_QWORD *)v4 = i;
              return;
            }
            ++v44;
          }
          while (v44 < *(unsigned int *)(v43 + 12));
        }
      }
      v40 = *(_QWORD *)(i + 80);
      if (v40)
        goto LABEL_62;
      if (i == v3)
        return;
      do
      {
        v40 = *(_QWORD *)(i + 56);
        if (v40)
        {
LABEL_62:
          for (i = v40; (*(_WORD *)(i + 28) & 8) == 0; v40 = *(_QWORD *)(v40 + 56))
          {
            if (v40 == v3)
              return;
            while (1)
            {
              i = *(_QWORD *)(v40 + 56);
              if (i)
                break;
              v40 = *(_QWORD *)(v40 + 32);
              if (v40)
                v45 = v40 == v3;
              else
                v45 = 1;
              if (v45)
                return;
            }
          }
          goto LABEL_56;
        }
        i = *(_QWORD *)(i + 32);
        if (i)
          v41 = i == v3;
        else
          v41 = 1;
      }
      while (!v41);
      return;
    case 0xBu:
      if (!v9[3])
      {
        __break(0xC471u);
        JUMPOUT(0x1944FD940);
      }
      v32 = **(_QWORD **)v9;
      v35 = *(_QWORD *)(v32 + 8);
      v33 = (_QWORD *)(v32 + 8);
      v34 = v35;
      v36 = (_QWORD *)(v35 + 8);
      if ((*((_BYTE *)v33 - 6) & 0x10) != 0)
        v33 = v36;
      j = *(_QWORD *)(v3 + 80);
      if (!j)
        return;
      v38 = *(_QWORD **)(v34 + 32);
      v39 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 3358);
      while ((*(_WORD *)(j + 28) & 8) == 0)
      {
        j = *(_QWORD *)(j + 56);
        if (!j)
          return;
      }
LABEL_130:
      v64 = *(_QWORD *)(j + 104);
      if (v64)
      {
        v65 = *(_DWORD *)(v64 + 4);
        v66 = v65 >> 5;
        if ((v65 & 1) != 0 ? *(_DWORD *)(v64 + 52) : v65 >> 5)
        {
          v68 = v38 + 3;
          if ((v39 & 1) != 0)
          {
            if ((*(_WORD *)(j + 28) & 0x10) != 0)
              v68 = v38 + 5;
            else
              v68 = v38 + 3;
          }
          if ((v65 & 1) != 0)
          {
            v69 = *(_QWORD *)(v64 + 40);
            v66 = *(_DWORD *)(v64 + 52);
          }
          else
          {
            v69 = v64 + 32;
          }
          if (v66)
          {
            v70 = 0;
            v71 = *v68;
            do
            {
              v72 = *(_QWORD *)(v69 + 16 * v70);
              if (v71 == *(_QWORD *)(v72 + 24)
                && (v38[2] == WebCore::starAtomData || v38[4] == *(_QWORD *)(v72 + 32))
                && *v33 == *(_QWORD *)(v69 + 16 * v70 + 8))
              {
                *(_QWORD *)v4 = j;
                return;
              }
              v73 = v70 + 1;
              v70 = (v70 + 1);
            }
            while (v66 != v73);
          }
        }
      }
      v74 = *(_QWORD *)(j + 80);
      if (v74)
        goto LABEL_145;
      if (j == v8)
        return;
      do
      {
        v74 = *(_QWORD *)(j + 56);
        if (v74)
        {
LABEL_145:
          for (j = v74; (*(_WORD *)(j + 28) & 8) == 0; v74 = *(_QWORD *)(v74 + 56))
          {
            if (v74 == v8)
              return;
            while (1)
            {
              j = *(_QWORD *)(v74 + 56);
              if (j)
                break;
              v74 = *(_QWORD *)(v74 + 32);
              if (v74)
                v75 = v74 == v8;
              else
                v75 = 1;
              if (v75)
                return;
            }
          }
          goto LABEL_130;
        }
        j = *(_QWORD *)(j + 32);
        if (j)
          v76 = j == v8;
        else
          v76 = 1;
      }
      while (!v76);
      return;
    case 0xCu:
      goto LABEL_265;
    default:
      return;
  }
  do
  {
    v25 = *((_DWORD *)v24 - 2);
    v26 = (v25 >> 4) & 0x1F;
    if (v26 == 2
      || v26 == 4 && *(_QWORD *)(*(_QWORD *)v24 + 32) == WebCore::HTMLNames::idAttr && (v25 & 0x800000) == 0)
    {
      if ((v25 & 0x100000) != 0)
        v24 = (const WTF::AtomString *)(*(_QWORD *)v24 + 8);
      if (WebCore::TreeScope::containsMultipleElementsWithId(v23, (uint64_t *)v24))
      {
        AllElementsById = WebCore::TreeScope::getAllElementsById(*(WebCore::TreeScopeOrderedMap ***)(v8 + 40), v24);
        v84 = *(unsigned __int16 *)(v8 + 28);
        v85 = v84 & 0xF000;
        v86 = (v84 >> 7) & 1;
        if (v85 == 36864)
          v87 = 1;
        else
          v87 = v86;
        v88 = *((unsigned int *)AllElementsById + 3);
        if ((_DWORD)v88)
        {
          v89 = *AllElementsById;
          v90 = 8 * v88;
          while (1)
          {
            if ((v87 & 1) != 0
              || WebCore::Node::isDescendantOf(*(const WebCore::Node ****)(*(_QWORD *)v89 + 8), (const WebCore::Node ***)v8))
            {
              v91 = *(const WebCore::Element **)(*(_QWORD *)v89 + 8);
              v92 = *(_QWORD *)(*((_QWORD *)v91 + 5) + 8);
              LOBYTE(v144) = *(_BYTE *)(v92 + 3384) != 2;
              BYTE1(v144) = *(_BYTE *)(v92 + 3358) & 1;
              LOBYTE(v147) = 3;
              HIDWORD(v147) = 0;
              v148 = 0;
              v149 = 0;
              v150 = 0;
              v152 = 0;
              v153 = 0;
              v154 = 0;
              v155 = (WTF *)v157;
              v156 = 8;
              v158 = 0;
              v159 = 0;
              if ((*(_WORD *)(v8 + 28) & 0xF000) == 0x9000)
                v93 = 0;
              else
                v93 = v8;
              v151 = v93;
              v95 = WebCore::SelectorChecker::match((WebCore::SelectorChecker *)&v144, *v22, v91, (WebCore::SelectorChecker::CheckingContext *)&v147, v83);
              v96 = v155;
              if (v157 != (_BYTE *)v155 && v155)
              {
                v155 = 0;
                LODWORD(v156) = 0;
                WTF::fastFree(v96, v94);
              }
              v97 = v148;
              v148 = 0;
              if (v97)
              {
                if (*(_DWORD *)v97 == 2)
                  WTF::StringImpl::destroy(v97, (WTF::StringImpl *)v94);
                else
                  *(_DWORD *)v97 -= 2;
              }
              if (v95)
                break;
            }
            v89 += 8;
            v90 -= 8;
            if (!v90)
              return;
          }
          v107 = *(WTF::StringImpl **)(*(_QWORD *)v89 + 8);
LABEL_246:
          *v7 = v107;
        }
        return;
      }
      if (!*(_QWORD *)v24)
        return;
      if (!*(_DWORD *)(*(_QWORD *)v24 + 4))
        return;
      v52 = *(const WebCore::TreeScope **)(v8 + 40);
      v53 = (unsigned int *)*((_QWORD *)v52 + 3);
      if (!v53)
        return;
      WebCore::TreeScopeOrderedMap::getElementById(v53, v24, v52, (uint64_t *)&v144);
      v55 = v144;
      if (!v144)
        return;
      v56 = *(_WORD *)(v8 + 28);
      v57 = v56 & 0xF000;
      if (v57 != 36864 && (v56 & 0x80) == 0)
      {
        if (!WebCore::Node::isDescendantOf((const WebCore::Node ***)v144, (const WebCore::Node ***)v8))
        {
LABEL_125:
          if (*((_DWORD *)v55 + 6) == 2)
          {
            if ((*((_WORD *)v55 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v55, v60);
          }
          else
          {
            *((_DWORD *)v55 + 6) -= 2;
          }
          return;
        }
        v57 = *(_WORD *)(v8 + 28) & 0xF000;
      }
      v58 = *(_QWORD *)(*((_QWORD *)v55 + 5) + 8);
      v146[0] = *(_BYTE *)(v58 + 3384) != 2;
      v146[1] = *(_BYTE *)(v58 + 3358) & 1;
      LOBYTE(v147) = 3;
      HIDWORD(v147) = 0;
      v148 = 0;
      v149 = 0;
      v150 = 0;
      v153 = 0;
      v154 = 0;
      v155 = (WTF *)v157;
      v54.n128_u64[0] = 8;
      v156 = 8;
      v158 = 0;
      v159 = 0;
      if (v57 == 36864)
        v59 = 0;
      else
        v59 = v8;
      v151 = v59;
      v152 = 0;
      v61 = WebCore::SelectorChecker::match((WebCore::SelectorChecker *)v146, *v22, v55, (WebCore::SelectorChecker::CheckingContext *)&v147, v54);
      v62 = v155;
      if (v157 != (_BYTE *)v155 && v155)
      {
        v155 = 0;
        LODWORD(v156) = 0;
        WTF::fastFree(v62, v60);
      }
      v63 = v148;
      v148 = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
          WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v60);
        else
          *(_DWORD *)v63 -= 2;
      }
      if (v61)
        *v7 = v55;
      goto LABEL_125;
    }
    v24 = (const WTF::AtomString *)((char *)v24 + 16);
  }
  while ((v25 & 0x8000F) == 0);
LABEL_26:
  v27 = *((unsigned __int8 *)v22 + 8);
  if (*((_BYTE *)v22 + 8))
    goto LABEL_29;
  if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 577))
  {
    *((_BYTE *)v22 + 8) = 1;
LABEL_314:
    v11 = (WebCore *)v8;
    goto LABEL_30;
  }
  WebCore::SelectorCompiler::SelectorCodeGenerator::SelectorCodeGenerator((uint64_t)&v147, (WebCore *)v3, (const WebCore::CSSSelector *)1);
  *((_BYTE *)v22 + 8) = WebCore::SelectorCompiler::SelectorCodeGenerator::compile((uint64_t)&v147, (int **)v22 + 2);
  WebCore::SelectorCompiler::SelectorCodeGenerator::~SelectorCodeGenerator((WebCore::SelectorCompiler::SelectorCodeGenerator *)&v147, v28);
  v27 = *((unsigned __int8 *)v22 + 8);
LABEL_29:
  v10 = (WebCore *)v8;
  v11 = (WebCore *)v8;
  if (v27 == 1)
  {
LABEL_30:
    if (!v9[3])
    {
      __break(0xC471u);
      JUMPOUT(0x1944FD958);
    }
    v29 = (WebCore *)*((_QWORD *)v11 + 10);
    if (v29)
    {
      v30 = v11;
      v31 = *(const WebCore::CSSSelector ***)v9;
      while ((*((_WORD *)v29 + 14) & 8) == 0)
      {
        v29 = (WebCore *)*((_QWORD *)v29 + 7);
        if (!v29)
          return;
      }
      do
      {
LABEL_276:
        v110 = *(_QWORD *)(*((_QWORD *)v29 + 5) + 8);
        LOBYTE(v144) = *(_BYTE *)(v110 + 3384) != 2;
        BYTE1(v144) = *(_BYTE *)(v110 + 3358) & 1;
        LOBYTE(v147) = 3;
        HIDWORD(v147) = 0;
        v148 = 0;
        v149 = 0;
        v150 = 0;
        v152 = 0;
        v153 = 0;
        v154 = 0;
        v155 = (WTF *)v157;
        v156 = 8;
        v158 = 0;
        v159 = 0;
        if ((*(_WORD *)(v8 + 28) & 0xF000) == 0x9000)
          v111 = 0;
        else
          v111 = v8;
        v151 = v111;
        v113 = WebCore::SelectorChecker::match((WebCore::SelectorChecker *)&v144, *v31, v29, (WebCore::SelectorChecker::CheckingContext *)&v147, v5);
        v114 = v155;
        if (v157 != (_BYTE *)v155 && v155)
        {
          v155 = 0;
          LODWORD(v156) = 0;
          WTF::fastFree(v114, v112);
        }
        v115 = v148;
        v148 = 0;
        if (v115)
        {
          if (*(_DWORD *)v115 == 2)
            WTF::StringImpl::destroy(v115, (WTF::StringImpl *)v112);
          else
            *(_DWORD *)v115 -= 2;
        }
        if (v113)
        {
LABEL_350:
          *v7 = v29;
          return;
        }
        v116 = (WebCore *)*((_QWORD *)v29 + 10);
        if (!v116)
        {
          if (v29 == v30)
            return;
          while (1)
          {
            v116 = (WebCore *)*((_QWORD *)v29 + 7);
            if (v116)
              break;
            v29 = (WebCore *)*((_QWORD *)v29 + 4);
            if (v29)
              v118 = v29 == v30;
            else
              v118 = 1;
            if (v118)
              return;
          }
        }
        v29 = v116;
      }
      while ((*((_WORD *)v116 + 14) & 8) != 0);
      while (v116 != v30)
      {
        while (1)
        {
          v29 = (WebCore *)*((_QWORD *)v116 + 7);
          if (v29)
            break;
          v116 = (WebCore *)*((_QWORD *)v116 + 4);
          if (v116)
            v117 = v116 == v30;
          else
            v117 = 1;
          if (v117)
            return;
        }
        v116 = (WebCore *)*((_QWORD *)v116 + 7);
        if ((*((_WORD *)v29 + 14) & 8) != 0)
          goto LABEL_276;
      }
    }
  }
  else
  {
LABEL_171:
    if (!v9[3])
    {
      __break(0xC471u);
      JUMPOUT(0x1944FD938);
    }
    v77 = *(WebCore::ContainerNode ***)v9;
    if (*((_BYTE *)v77 + 8) == 2)
    {
      v78 = (WebCore *)*((_QWORD *)v10 + 10);
      if (v78)
      {
        while ((*((_WORD *)v78 + 14) & 8) == 0)
        {
          v78 = (WebCore *)*((_QWORD *)v78 + 7);
          if (!v78)
            return;
        }
        while (1)
        {
LABEL_198:
          if (((unsigned int (*)(WebCore *))v77[2])(v78))
          {
            *v7 = v78;
            return;
          }
          v79 = (WebCore *)*((_QWORD *)v78 + 10);
          if (!v79)
          {
            if (v78 == v10)
              return;
            while (1)
            {
              v79 = (WebCore *)*((_QWORD *)v78 + 7);
              if (v79)
                break;
              v78 = (WebCore *)*((_QWORD *)v78 + 4);
              if (v78)
                v81 = v78 == v10;
              else
                v81 = 1;
              if (v81)
                return;
            }
          }
          if ((*((_WORD *)v79 + 14) & 8) == 0)
            break;
          v78 = v79;
        }
        while (v79 != v10)
        {
          while (1)
          {
            v78 = (WebCore *)*((_QWORD *)v79 + 7);
            if (v78)
              break;
            v79 = (WebCore *)*((_QWORD *)v79 + 4);
            if (v79)
              v80 = v79 == v10;
            else
              v80 = 1;
            if (v80)
              return;
          }
          v79 = (WebCore *)*((_QWORD *)v79 + 7);
          if ((*((_WORD *)v78 + 14) & 8) != 0)
            goto LABEL_198;
        }
      }
    }
    else
    {
      LOBYTE(v147) = 3;
      HIDWORD(v147) = 0;
      v148 = 0;
      v149 = 0;
      v150 = 0;
      v153 = 0;
      v154 = 0;
      v155 = (WTF *)v157;
      v156 = 8;
      v158 = 0;
      v159 = 0;
      if ((*(_WORD *)(v8 + 28) & 0xF000) == 0x9000)
        v108 = 0;
      else
        v108 = v8;
      v151 = v108;
      v152 = 0;
      v109 = *((_QWORD *)v10 + 10);
      if (v109)
      {
        while ((*(_WORD *)(v109 + 28) & 8) == 0)
        {
          v109 = *(_QWORD *)(v109 + 56);
          if (!v109)
            goto LABEL_251;
        }
        v144 = v10;
        v145 = v109;
        while (!((unsigned int (*)(uint64_t, uint64_t *))v77[2])(v109, &v147))
        {
          WebCore::ElementDescendantIterator<WebCore::Element>::operator++(&v144);
          v109 = v145;
          if (!v145)
            goto LABEL_251;
        }
        *v7 = v109;
      }
LABEL_251:
      WebCore::SelectorChecker::CheckingContext::~CheckingContext((WebCore::SelectorChecker::CheckingContext *)&v147, (void *)v3);
    }
  }
}

BOOL WebCore::TreeScope::containsMultipleElementsWithId(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int i;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v13;

  v2 = *(uint64_t **)(a1 + 24);
  if (!v2)
    return 0;
  v3 = *a2;
  if (!*a2)
    return 0;
  if (!*(_DWORD *)(v3 + 4))
    return 0;
  v5 = *v2;
  if (!v5)
    return 0;
  v6 = 0;
  v7 = *(_DWORD *)(v5 - 8);
  for (i = *(_DWORD *)(v3 + 16) >> 8; ; i = ++v6 + v9)
  {
    v9 = i & v7;
    v10 = (uint64_t *)(v5 + 40 * (i & v7));
    v11 = *v10;
    if (!*v10)
      break;
    if (v11 != -1 && v11 == v3)
    {
      v13 = *(_DWORD *)(v5 - 4);
      return v10 != (uint64_t *)(v5 + 40 * v13) && *((_DWORD *)v10 + 4) > 1u;
    }
  }
  v13 = *(_DWORD *)(v5 - 4);
  v10 = (uint64_t *)(v5 + 40 * v13);
  return v10 != (uint64_t *)(v5 + 40 * v13) && *((_DWORD *)v10 + 4) > 1u;
}

unsigned int *WebCore::TreeScopeOrderedMap::getElementById@<X0>(unsigned int *this@<X0>, const WTF::AtomString *a2@<X1>, const WebCore::TreeScope *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  int v8;
  unsigned int i;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;

  v5 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_15;
  v8 = 0;
  for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = ++v8 + v10)
  {
    v10 = i & *(_DWORD *)(v5 - 8);
    v11 = (uint64_t *)(v5 + 40 * v10);
    v12 = *v11;
    if (!*v11)
      break;
    if (v12 != -1 && v12 == *(_QWORD *)a2)
    {
      v14 = *(_DWORD *)(v5 - 4);
      goto LABEL_10;
    }
  }
  v14 = *(_DWORD *)(v5 - 4);
  v11 = (uint64_t *)(v5 + 40 * v14);
LABEL_10:
  if (v11 == (uint64_t *)(v5 + 40 * v14))
  {
LABEL_15:
    *a4 = 0;
    return this;
  }
  v15 = v11[1];
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      *(_DWORD *)(v16 + 24) += 2;
      if (*(const WebCore::TreeScope **)(v16 + 40) != a3)
      {
        __break(0xC471u);
        JUMPOUT(0x1944FDD74);
      }
      *a4 = v16;
      return this;
    }
  }
  v17 = *(_QWORD *)a3;
  v18 = *(_DWORD *)(*(_QWORD *)a3 + 24);
  *(_DWORD *)(v17 + 24) = v18 + 2;
  v19 = *(_QWORD *)(v17 + 80);
  if (!v19)
  {
    *a4 = 0;
    goto LABEL_19;
  }
  while ((*(_WORD *)(v19 + 28) & 8) == 0)
  {
    v19 = *(_QWORD *)(v19 + 56);
    if (!v19)
      goto LABEL_24;
  }
  v20 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_29:
  while (1)
  {
    v21 = *(_DWORD *)(v19 + 24);
    *(_DWORD *)(v19 + 24) = v21 + 2;
    if ((*(_BYTE *)(v19 + 22) & 0x18) != 0)
    {
      v22 = *(_QWORD *)(v19 + 104);
      if (v22)
      {
        v23 = v20;
        if (*(_QWORD *)(v22 + 24))
        {
          v32 = *(unsigned int *)(v22 + 4);
          if ((v32 & 1) != 0)
          {
            v33 = *(uint64_t **)(v22 + 40);
            v34 = *(unsigned int *)(v22 + 52);
          }
          else
          {
            v33 = (uint64_t *)(v22 + 32);
            v34 = v32 >> 5;
          }
          if (v34)
          {
            while (1)
            {
              v35 = *v33;
              if (*v33 == WebCore::HTMLNames::idAttr
                || *(_QWORD *)(v35 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
                && *(_QWORD *)(v35 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
              {
                break;
              }
              v33 += 2;
              if (!--v34)
                goto LABEL_73;
            }
          }
          else
          {
LABEL_73:
            v33 = 0;
          }
          v23 = v33 + 1;
        }
      }
      else
      {
        v23 = v20;
      }
      if (*v23 == *(_QWORD *)a2)
        break;
    }
    if (v21)
    {
      *(_DWORD *)(v19 + 24) = v21;
    }
    else if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
    {
      this = (unsigned int *)WebCore::Node::removedLastRef((WebCore::Node *)v19);
    }
    v24 = *(_QWORD *)(v19 + 80);
    if (!v24)
    {
      if (v19 == v17)
        goto LABEL_56;
      while (1)
      {
        v24 = *(_QWORD *)(v19 + 56);
        if (v24)
          break;
        v19 = *(_QWORD *)(v19 + 32);
        if (v19)
          v26 = v19 == v17;
        else
          v26 = 1;
        if (v26)
          goto LABEL_56;
      }
    }
    v19 = v24;
    if ((*(_WORD *)(v24 + 28) & 8) == 0)
    {
      while (v24 != v17)
      {
        while (1)
        {
          v19 = *(_QWORD *)(v24 + 56);
          if (v19)
            break;
          v24 = *(_QWORD *)(v24 + 32);
          if (v24)
            v25 = v24 == v17;
          else
            v25 = 1;
          if (v25)
            goto LABEL_56;
        }
        v24 = *(_QWORD *)(v24 + 56);
        if ((*(_WORD *)(v19 + 28) & 8) != 0)
          goto LABEL_29;
      }
LABEL_56:
      v19 = 0;
      goto LABEL_24;
    }
  }
  this = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v19);
  if (this)
  {
    do
      v28 = __ldaxr(this);
    while (__stlxr(v28 + 1, this));
  }
  v29 = v11[1];
  v11[1] = (uint64_t)this;
  if (v29)
  {
    do
    {
      v30 = __ldaxr((unsigned int *)v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, (unsigned int *)v29));
    if (!v31)
    {
      atomic_store(1u, (unsigned int *)v29);
      v36 = *(unsigned int *)(v29 + 28);
      if ((_DWORD)v36)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v29 + 16), (WTF::StringImpl *)(*(_QWORD *)(v29 + 16) + 32 * v36));
      v37 = *(WTF **)(v29 + 16);
      if (v37)
      {
        *(_QWORD *)(v29 + 16) = 0;
        *(_DWORD *)(v29 + 24) = 0;
        WTF::fastFree(v37, v27);
      }
      this = (unsigned int *)WTF::fastFree((WTF *)v29, v27);
    }
  }
  if (*(const WebCore::TreeScope **)(v19 + 40) != a3)
  {
    __break(0xC471u);
    JUMPOUT(0x1944FDD54);
  }
LABEL_24:
  *a4 = v19;
  if (v17)
  {
    v18 = *(_DWORD *)(v17 + 24) - 2;
LABEL_19:
    if (v18)
    {
      *(_DWORD *)(v17 + 24) = v18;
    }
    else if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
    {
      return (unsigned int *)WebCore::Node::removedLastRef((WebCore::Node *)v17);
    }
  }
  return this;
}

uint64_t WebCore::LocalFrameView::scrollToFragment(WebCore::LocalFrameView *this, const WTF::URL *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unsigned int *v21;
  void *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::Node *v26;
  WebCore::Element *v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  WTF::MonotonicTime *v31;
  void *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t result;
  uint64_t *v40;
  uint64_t *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  void *v46;
  uint64_t v47;
  __int16 v48;
  _BYTE v49[104];
  char v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  WebCore::Node *v55;
  _DWORD *v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t *v60;
  unsigned int v61;
  _BYTE v62[16];
  uint64_t v63[6];
  char v64;

  v3 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = (WTF::StringImpl *)WTF::URL::fragmentIdentifier(a2);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 3072);
  if (v7)
    *(_DWORD *)v7 += 2;
  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 128) + 8) == *((_QWORD *)this + 41)
    && v7
    && (*(_QWORD *)(*(_QWORD *)(v3 + 680) + 688) & 0x100000000000000) != 0)
  {
    v19 = *(unsigned int *)(v7 + 4);
    if ((_DWORD)v19)
    {
      WebCore::FragmentDirectiveParser::FragmentDirectiveParser((uint64_t)v63, *(_QWORD *)(v7 + 8), v19 | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32));
      if (v64)
      {
        v21 = (unsigned int *)WTF::Vector<WebCore::ParsedTextDirective,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v62, v63);
        WebCore::FragmentDirectiveRangeFinder::findRangesFromTextDirectives(v21, (WTF::StringImpl *)v3, (uint64_t)&v60);
        if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 136) + 688) & 0x1000000000000000) != 0 && v61)
        {
          v40 = v60;
          v41 = &v60[4 * v61];
          do
          {
            v42 = (WTF::StringImpl *)*v40;
            *((_DWORD *)v42 + 6) = *(_DWORD *)(*v40 + 24) + 2;
            v51 = v42;
            LODWORD(v52) = *((_DWORD *)v40 + 2);
            v43 = v40[2];
            *(_DWORD *)(v43 + 24) += 2;
            v53 = v43;
            v54 = *((_DWORD *)v40 + 6);
            v44 = WebCore::Document::fragmentHighlightRegistry((WebCore::Document *)v3);
            WebCore::StaticRange::create((WebCore::StaticRange *)&v51, &v56);
            WebCore::HighlightRegistry::addAnnotationHighlightWithRange(v44, (uint64_t *)&v56);
            v45 = v56;
            v56 = 0;
            if (v45)
            {
              if (v45[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v45 + 8))(v45);
              else
                --v45[2];
            }
            WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&v51);
            v40 += 4;
          }
          while (v40 != v41);
        }
        if (v61)
        {
          v23 = v60;
          v24 = *v60;
          *(_DWORD *)(v24 + 24) = *(_DWORD *)(*v60 + 24) + 2;
          v56 = (_DWORD *)v24;
          v57 = *((_DWORD *)v23 + 2);
          v25 = v23[2];
          *(_DWORD *)(v25 + 24) += 2;
          v58 = v25;
          v59 = *((_DWORD *)v23 + 6);
          v26 = WebCore::commonInclusiveAncestor<(WebCore::TreeType)2>((uint64_t *)&v56);
          if (v26)
          {
            v27 = v26;
            *((_DWORD *)v26 + 6) += 2;
            v55 = v26;
            v28 = *((_WORD *)v26 + 14);
            if ((v28 & 8) != 0)
            {
LABEL_39:
              if ((v28 & 8) == 0)
              {
                result = 105;
                __break(0xC471u);
                return result;
              }
              WebCore::Document::setCSSTarget(v3, v27);
              goto LABEL_41;
            }
            v29 = *((_QWORD *)v26 + 4);
            if (v29)
            {
              if ((*(_WORD *)(v29 + 28) & 8) != 0)
                v30 = *((_QWORD *)v26 + 4);
              else
                v30 = 0;
            }
            else
            {
              v30 = 0;
            }
            WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v55, v30);
            v27 = v55;
            if (v55)
            {
              v28 = *((_WORD *)v55 + 14);
              goto LABEL_39;
            }
          }
          else
          {
            v55 = 0;
          }
LABEL_41:
          WebCore::VisibleSelection::VisibleSelection((uint64_t)v49, (uint64_t)&v56, 1, 0);
          v50 = 1;
          WebCore::TemporarySelectionChange::TemporarySelectionChange((uint64_t)&v51, v3, (uint64_t)v49, 449);
          if (v50)
            WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v49);
          WebCore::LocalFrameView::maintainScrollPositionAtScrollToTextFragmentRange(this, (WebCore::SimpleRange *)&v56);
          v33 = *((_QWORD *)this + 41);
          if ((*(_QWORD *)(*(_QWORD *)(v33 + 136) + 688) & 0x800000000000000) != 0
            && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v33 + 24) + 8) + 1091))
          {
            *((_QWORD *)this + 122) = 0;
            WTF::MonotonicTime::now(v31);
            WebCore::TimerBase::setNextFireTime((uint64_t)this + 952, v34 + 0.1);
          }
          WebCore::TemporarySelectionChange::~TemporarySelectionChange((WebCore::TemporarySelectionChange *)&v51, v32);
          v35 = (uint64_t)v55;
          v55 = 0;
          if (v35)
          {
            if (*(_DWORD *)(v35 + 24) == 2)
            {
              if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v35);
            }
            else
            {
              *(_DWORD *)(v35 + 24) -= 2;
            }
          }
          WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&v56);
          WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v60, v36);
          WTF::Vector<WebCore::ParsedTextDirective,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v62, v37);
          WTF::Vector<WebCore::ParsedTextDirective,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v63, v38);
LABEL_50:
          v18 = 1;
          goto LABEL_57;
        }
        WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v60, v22);
        WTF::Vector<WebCore::ParsedTextDirective,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v62, v46);
      }
      WTF::Vector<WebCore::ParsedTextDirective,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v63, v20);
    }
  }
  if ((WebCore::LocalFrameView::scrollToFragmentInternal(this, (uint64_t)v4, v6) & 1) != 0)
    goto LABEL_50;
  {
    PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
    *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((uint64_t *)&off_1E31F4A18, (PAL *)"UTF-8", v9);
    *((_QWORD *)&xmmword_1ECE86C80 + 1) = v47;
    v51 = (WTF::StringImpl *)xmmword_1ECE86C80;
    v52 = v47;
    if (v47 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
    {
      if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v51))
      {
        v48 = 165;
      }
      else
      {
        v48 = 92;
      }
    }
    else
    {
      v48 = 92;
    }
    word_1ECE86C90 = v48;
  }
  if ((_DWORD)v6)
  {
    PAL::decodeEscapeSequences<PAL::URLEscapeSequence>(v4, v6, (PAL *)&PAL::UTF8Encoding(void)::globalUTF8Encoding, &v51, v10);
  }
  else if ((v6 & 0xFF00000000) != 0)
  {
    WTF::String::String();
  }
  else
  {
    WTF::String::String();
  }
  if (v51)
  {
    v11 = *((_QWORD *)v51 + 1);
    v12 = *((unsigned int *)v51 + 1) | ((unint64_t)((*((_DWORD *)v51 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v12 = 0x100000000;
  }
  v13 = WebCore::LocalFrameView::scrollToFragmentInternal(this, v11, v12);
  v14 = v51;
  v51 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v14 -= 2;
  }
  if ((v13 & 1) != 0)
    goto LABEL_50;
  v15 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  WebCore::Document::setCSSTarget(v15, 0);
  if ((*(_WORD *)(v15 + 3358) & 0x20) == 0
    || (v16 = *(_QWORD *)(v15 + 1272)) == 0
    || (*(_WORD *)(v16 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
LABEL_56:
    v18 = 0;
    goto LABEL_57;
  }
  *(_DWORD *)(v16 + 24) += 2;
  WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v15);
  WebCore::SVGSVGElement::resetScrollAnchor((WebCore::SVGSVGElement *)v16, v17);
  if (*(_DWORD *)(v16 + 24) == 2)
  {
    if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v16);
    goto LABEL_56;
  }
  v18 = 0;
  *(_DWORD *)(v16 + 24) -= 2;
LABEL_57:
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v7, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return v18;
}

uint64_t WebCore::LocalFrameView::scrollToFragmentInternal(WebCore::LocalFrameView *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  int v10;
  uint64_t v11;
  int v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  int v16;
  __int16 v17;

  v3 = a2;
  if (!a2)
    return v3;
  v7 = *(_QWORD *)(*((_QWORD *)a1 + 41) + 296);
  if (WebCore::Style::Scope::hasPendingSheets(*(WebCore::Style::Scope **)(v7 + 1328)) && !*(_BYTE *)(v7 + 3379))
  {
    __break(0xC471u);
    JUMPOUT(0x1944FE4F8);
  }
  WebCore::TreeScope::findAnchor(v7 + 96, (unsigned __int8 *)v3, a3, (uint64_t *)&v15);
  WebCore::Document::setCSSTarget(v7, v15);
  if ((*(_WORD *)(v7 + 3358) & 0x20) != 0)
  {
    if (!(_DWORD)a3)
      goto LABEL_8;
    v11 = *(_QWORD *)(v7 + 1272);
    if (v11
      && (*(_WORD *)(v11 + 28) & 0x20) != 0
      && *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
      *(_DWORD *)(v11 + 24) += 2;
      v3 = WebCore::SVGSVGElement::scrollToFragment(v11, (unsigned __int8 *)v3, a3);
      v12 = *(_DWORD *)(v11 + 24) - 2;
      if ((v3 & 1) != 0 || !v15)
      {
        if (*(_DWORD *)(v11 + 24) == 2)
        {
          if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v11);
        }
        else
        {
          *(_DWORD *)(v11 + 24) = v12;
        }
        goto LABEL_9;
      }
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11);
      }
      else
      {
        *(_DWORD *)(v11 + 24) = v12;
      }
    }
    v8 = v15;
    if (!v15)
    {
LABEL_19:
      v14 = 0;
      WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v14, *(_QWORD *)(*((_QWORD *)a1 + 41) + 296));
      v8 = v14;
LABEL_32:
      WebCore::LocalFrameView::maintainScrollPositionAtAnchor(a1, v8);
      if (v15)
      {
        if ((*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)v15 + 552))(v15))
        {
          v16 = 0;
          v17 = 1;
          WebCore::Document::setFocusedElement((WebCore::Document *)v7, (uint64_t)v15, &v16);
        }
        else
        {
          v17 = 0;
          v16 = 0;
          WebCore::Document::setFocusedElement((WebCore::Document *)v7, 0, &v16);
          WebCore::Document::setFocusNavigationStartingNode((uint64_t *)v7, v15);
        }
      }
      v13 = v14;
      v14 = 0;
      if (v13)
      {
        if (*((_DWORD *)v13 + 6) == 2)
        {
          if ((*((_WORD *)v13 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v13);
        }
        else
        {
          *((_DWORD *)v13 + 6) -= 2;
        }
      }
      v3 = 1;
      goto LABEL_9;
    }
LABEL_31:
    *((_DWORD *)v8 + 6) += 2;
    v14 = v8;
    goto LABEL_32;
  }
  v8 = v15;
  if (v15)
    goto LABEL_31;
  if (!(_DWORD)a3)
    goto LABEL_19;
  if ((_DWORD)a3 == 3)
  {
    if ((a3 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)v3 & 0xDF) != 0x54 || (*(_BYTE *)(v3 + 1) & 0xDF) != 0x4F)
        goto LABEL_8;
      v10 = *(unsigned __int8 *)(v3 + 2);
    }
    else
    {
      if ((*(_WORD *)v3 & 0xFFDF) != 0x54 || (*(_WORD *)(v3 + 2) & 0xFFDF) != 0x4F)
        goto LABEL_8;
      v10 = *(unsigned __int16 *)(v3 + 4);
    }
    if ((v10 & 0xFFFFFFDF) == 0x50)
      goto LABEL_19;
  }
LABEL_8:
  v3 = 0;
LABEL_9:
  v9 = v15;
  v15 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  return v3;
}

unsigned int *WebCore::StyledElement::rebuildPresentationalHintStyle(WebCore::StyledElement *this)
{
  __int16 v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  int v6;
  WTF *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int *result;
  WTF *v17;
  unsigned int *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  _BOOL4 v23;
  int v24;
  int v25;
  _BOOL4 v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int **v35;
  char *v36;
  unsigned int v37;
  _BOOL4 v38;
  int v39;
  int v40;
  _BOOL4 v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD **v46;
  _DWORD *v47;
  WTF *v48;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int *v53;
  _DWORD *v54;
  unsigned int *v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int *v58;
  _DWORD *v59;
  WTF *v60;

  v2 = *((_WORD *)this + 14);
  v3 = WTF::fastMalloc((WTF *)0x60);
  v5 = v3;
  if ((v2 & 0x20) != 0)
    v6 = 10;
  else
    v6 = 9;
  *(_DWORD *)v3 = 1;
  *(_DWORD *)(v3 + 4) = v6;
  v7 = (WTF *)(v3 + 32);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = v3 + 32;
  *(_QWORD *)(v3 + 24) = 4;
  v8 = *((_QWORD *)this + 13);
  v9 = *(_DWORD *)(v8 + 4);
  if ((v9 & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 40);
    v11 = *(_DWORD *)(v8 + 52);
  }
  else
  {
    v10 = v8 + 32;
    v11 = v9 >> 5;
  }
  if (v11)
  {
    v12 = 0;
    do
    {
      (*(void (**)(WebCore::StyledElement *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 1128))(this, v10 + 16 * v12, v10 + 16 * v12 + 8, v5);
      v13 = v12 + 1;
      v12 = (v12 + 1);
    }
    while (v11 != v13);
  }
  if ((*((_WORD *)this + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
  {
    WebCore::HTMLImageElement::collectExtraStyleForPresentationalHints(this, (WebCore::MutableStyleProperties *)v5);
  }
  v14 = *((_QWORD *)this + 13);
  if (!v14 || (v15 = *(_DWORD *)(v14 + 4), (v15 & 1) == 0))
  {
    WebCore::Element::createUniqueElementData(this);
    v14 = *((_QWORD *)this + 13);
    v15 = *(_DWORD *)(v14 + 4);
  }
  *(_DWORD *)(v14 + 4) = v15 & 0xFFFFFFFB;
  if (*(_DWORD *)(v5 + 28))
  {
    if ((v2 & 0x20) == 0)
    {
LABEL_16:
      result = (unsigned int *)WebCore::ImmutableStyleProperties::createDeduplicating(*(_QWORD *)(v5 + 16), *(unsigned int *)(v5 + 28), (const WTF::StringImpl *)(*(_DWORD *)(v5 + 4) & 7), &v60);
      v17 = v60;
LABEL_17:
      v60 = 0;
      v18 = *(unsigned int **)(v14 + 32);
      *(_QWORD *)(v14 + 32) = v17;
      if (v18)
      {
        if (*v18 == 1)
        {
          v51 = v18[1];
          if (v51 >= 0x10)
          {
            v52 = 0;
            v53 = (unsigned int *)((char *)v18 + ((v51 >> 3) & 0x1FFFFFFE) + 8);
            do
            {
              v54 = (_DWORD *)(*v53 | ((unint64_t)*((unsigned __int8 *)v53 + 4) << 32));
              if (*v54 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v54, v4);
              else
                *v54 -= 2;
              ++v52;
              v53 = (unsigned int *)((char *)v53 + 5);
            }
            while (v52 < (unint64_t)v18[1] >> 4);
          }
          result = (unsigned int *)WTF::fastFree((WTF *)v18, v4);
          v55 = (unsigned int *)v60;
          v60 = 0;
          if (v55)
          {
            if (*v55 == 1)
            {
              v56 = v55[1];
              if (v56 >= 0x10)
              {
                v57 = 0;
                v58 = (unsigned int *)((char *)v55 + ((v56 >> 3) & 0x1FFFFFFE) + 8);
                do
                {
                  v59 = (_DWORD *)(*v58 | ((unint64_t)*((unsigned __int8 *)v58 + 4) << 32));
                  if (*v59 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v59, v4);
                  else
                    *v59 -= 2;
                  ++v57;
                  v58 = (unsigned int *)((char *)v58 + 5);
                }
                while (v57 < (unint64_t)v55[1] >> 4);
              }
              result = (unsigned int *)WTF::fastFree((WTF *)v55, v4);
            }
            else
            {
              --*v55;
            }
          }
        }
        else
        {
          --*v18;
        }
      }
      goto LABEL_20;
    }
    WebCore::StyleProperties::getPropertyCSSValue(v5, 298, &v60);
    if (v60)
    {
      if (((*((unsigned __int16 *)v60 + 2) | (*((unsigned __int8 *)v60 + 6) << 16)) & 0x3F800) != 0)
      {
        if (*(_DWORD *)v60 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v60, v19);
        else
          *(_DWORD *)v60 -= 2;
      }
      else
      {
        if ((*((_WORD *)v60 + 2) & 0x7F) == 0x49)
        {
          v26 = 0;
          v27 = 0;
        }
        else
        {
          v26 = *((double *)v60 + 1) == 0.0;
          v27 = 1;
        }
        v28 = v26 | (v27 << 8);
        if (*(_DWORD *)v60 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v60, v19);
        else
          *(_DWORD *)v60 -= 2;
        if (v28 != 257)
          goto LABEL_40;
      }
    }
    WebCore::StyleProperties::getPropertyCSSValue(v5, 299, &v60);
    if (v60)
    {
      if (((*((unsigned __int16 *)v60 + 2) | (*((unsigned __int8 *)v60 + 6) << 16)) & 0x3F800) != 0)
      {
        if (*(_DWORD *)v60 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v60, v20);
        else
          *(_DWORD *)v60 -= 2;
      }
      else
      {
        if ((*((_WORD *)v60 + 2) & 0x7F) == 0x49)
        {
          v38 = 0;
          v39 = 0;
        }
        else
        {
          v38 = *((double *)v60 + 1) == 0.0;
          v39 = 1;
        }
        v40 = v38 | (v39 << 8);
        if (*(_DWORD *)v60 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v60, v20);
        else
          *(_DWORD *)v60 -= 2;
        if (v40 != 257)
          goto LABEL_40;
      }
    }
    WebCore::StyleProperties::getPropertyCSSValue(v5, 107, &v60);
    if (v60)
    {
      if (((*((unsigned __int16 *)v60 + 2) | (*((unsigned __int8 *)v60 + 6) << 16)) & 0x3F800) != 0)
      {
        if (*(_DWORD *)v60 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v60, v21);
        else
          *(_DWORD *)v60 -= 2;
      }
      else
      {
        if ((*((_WORD *)v60 + 2) & 0x7F) == 0x49)
        {
          v41 = 0;
          v42 = 0;
        }
        else
        {
          v41 = *((double *)v60 + 1) == 0.0;
          v42 = 1;
        }
        v43 = v41 | (v42 << 8);
        if (*(_DWORD *)v60 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v60, v21);
        else
          *(_DWORD *)v60 -= 2;
        if (v43 != 257)
          goto LABEL_40;
      }
    }
    WebCore::StyleProperties::getPropertyCSSValue(v5, 108, &v60);
    if (!v60)
      goto LABEL_16;
    if (((*((unsigned __int16 *)v60 + 2) | (*((unsigned __int8 *)v60 + 6) << 16)) & 0x3F800) != 0)
    {
      if (*(_DWORD *)v60 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v60, v22);
      else
        *(_DWORD *)v60 -= 2;
      goto LABEL_16;
    }
    if ((*((_WORD *)v60 + 2) & 0x7F) == 0x49)
    {
      v23 = 0;
      v24 = 0;
    }
    else
    {
      v23 = *((double *)v60 + 1) == 0.0;
      v24 = 1;
    }
    v25 = v23 | (v24 << 8);
    if (*(_DWORD *)v60 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v60, v22);
    else
      *(_DWORD *)v60 -= 2;
    if (v25 == 257)
      goto LABEL_16;
LABEL_40:
    v29 = *(_QWORD *)(v5 + 16);
    v30 = *(unsigned int *)(v5 + 28);
    v31 = *(_DWORD *)(v5 + 4);
    result = (unsigned int *)WTF::fastMalloc((WTF *)(7 * v30 + 8));
    v17 = (WTF *)result;
    *result = 1;
    result[1] = (16 * v30) | v31 & 7;
    if ((_DWORD)v30)
    {
      v32 = 0;
      v33 = result + 2;
      v34 = 2 * (v30 & 0xFFFFFFF);
      v35 = (unsigned int **)(v29 + 8);
      do
      {
        *((_WORD *)v33 + v32) = *((_WORD *)v35 - 4);
        result = *v35;
        if (*v35)
          *result += 2;
        v36 = (char *)v33 + v34;
        *(_DWORD *)v36 = (_DWORD)result;
        v36[4] = BYTE4(result);
        v37 = *result;
        *result += 2;
        if (v37)
          *result = v37;
        else
          result = (unsigned int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v4);
        ++v32;
        v34 += 5;
        v35 += 2;
      }
      while (v30 != v32);
    }
    goto LABEL_17;
  }
  result = *(unsigned int **)(v14 + 32);
  *(_QWORD *)(v14 + 32) = 0;
  if (result)
    result = WebCore::ImmutableStyleProperties::deref(result, v4);
LABEL_20:
  if (*(_DWORD *)v5 == 1)
  {
    v44 = *(unsigned int *)(v5 + 28);
    if ((_DWORD)v44)
    {
      v45 = 16 * v44;
      v46 = (_DWORD **)(*(_QWORD *)(v5 + 16) + 8);
      do
      {
        v47 = *v46;
        *v46 = 0;
        if (v47)
        {
          if (*v47 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, v4);
          else
            *v47 -= 2;
        }
        v46 += 2;
        v45 -= 16;
      }
      while (v45);
    }
    v48 = *(WTF **)(v5 + 16);
    if (v7 != v48 && v48 != 0)
    {
      *(_QWORD *)(v5 + 16) = 0;
      *(_DWORD *)(v5 + 24) = 0;
      WTF::fastFree(v48, v4);
    }
    v50 = *(_QWORD *)(v5 + 8);
    *(_QWORD *)(v5 + 8) = 0;
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    return (unsigned int *)WTF::fastFree((WTF *)v5, v4);
  }
  else
  {
    --*(_DWORD *)v5;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLElement::collectPresentationalHintsForAttribute(WTF::StringImpl *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  WTF::StringImpl *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::MutableStyleProperties *v12;
  int v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  WebCore::MutableStyleProperties *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  WTF::StringImpl *v53;

  v5 = this;
  v6 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v6 <= 0x1BA)
  {
    if (v6 != 432)
    {
      if (v6 != 411)
      {
        if (v6 == 286)
        {
          if (WTF::equalLettersIgnoringASCIICase((uint64_t *)a3, "middle", 7uLL))
            return (WTF::StringImpl *)WebCore::StyledElement::addPropertyToPresentationalHintStyle((int)v5, a4, 249, 0x104u);
          else
            return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)v5, (uint64_t)a4, 249, (uint64_t)a3);
        }
        return this;
      }
      v25 = *(_QWORD *)a3;
      if (!*(_QWORD *)a3)
        return this;
      v26 = *(_DWORD *)(v25 + 4);
      if (v26 <= 4)
      {
        if (v26 == 4)
        {
          v31 = *(_QWORD *)(v25 + 8);
          if ((*(_BYTE *)(v25 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v31 & 0xDF) != 0x54
              || (*(_BYTE *)(v31 + 1) & 0xDF) != 0x52
              || (*(_BYTE *)(v31 + 2) & 0xDF) != 0x55)
            {
              return this;
            }
            v32 = *(unsigned __int8 *)(v31 + 3);
          }
          else
          {
            if ((*(_WORD *)v31 & 0xFFDF) != 0x54
              || (*(_WORD *)(v31 + 2) & 0xFFDF) != 0x52
              || (*(_WORD *)(v31 + 4) & 0xFFDF) != 0x55)
            {
              return this;
            }
            v32 = *(unsigned __int16 *)(v31 + 6);
          }
          if ((v32 & 0xFFFFFFDF) != 0x45)
            return this;
        }
        else if (v26)
        {
          return this;
        }
        v29 = 543;
      }
      else
      {
        if (v26 == 5)
        {
          v44 = *(_QWORD *)(v25 + 8);
          if ((*(_BYTE *)(v25 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v44 & 0xDF) != 0x46
              || (*(_BYTE *)(v44 + 1) & 0xDF) != 0x41
              || (*(_BYTE *)(v44 + 2) & 0xDF) != 0x4C
              || (*(_BYTE *)(v44 + 3) & 0xDF) != 0x53)
            {
              return this;
            }
            v45 = *(unsigned __int8 *)(v44 + 4);
          }
          else
          {
            if ((*(_WORD *)v44 & 0xFFDF) != 0x46
              || (*(_WORD *)(v44 + 2) & 0xFFDF) != 0x41
              || (*(_WORD *)(v44 + 4) & 0xFFDF) != 0x4C
              || (*(_WORD *)(v44 + 6) & 0xFFDF) != 0x53)
            {
              return this;
            }
            v45 = *(unsigned __int16 *)(v44 + 8);
          }
          if ((v45 & 0xFFFFFFDF) != 0x45)
            return this;
          v29 = 542;
          goto LABEL_87;
        }
        if (v26 != 14)
          return this;
        v27 = *(_QWORD *)(v25 + 8);
        if ((*(_BYTE *)(v25 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v27 & 0xDF) != 0x50
            || (*(_BYTE *)(v27 + 1) & 0xDF) != 0x4C
            || (*(_BYTE *)(v27 + 2) & 0xDF) != 0x41
            || (*(_BYTE *)(v27 + 3) & 0xDF) != 0x49
            || (*(_BYTE *)(v27 + 4) & 0xDF) != 0x4E
            || (*(_BYTE *)(v27 + 5) & 0xDF) != 0x54
            || (*(_BYTE *)(v27 + 6) & 0xDF) != 0x45
            || (*(_BYTE *)(v27 + 7) & 0xDF) != 0x58
            || (*(_BYTE *)(v27 + 8) & 0xDF) != 0x54
            || (*(_BYTE *)(v27 + 9) & 0xDF) != 0xD
            || (*(_BYTE *)(v27 + 10) & 0xDF) != 0x4F
            || (*(_BYTE *)(v27 + 11) & 0xDF) != 0x4E
            || (*(_BYTE *)(v27 + 12) & 0xDF) != 0x4C)
          {
            return this;
          }
          v28 = *(unsigned __int8 *)(v27 + 13);
        }
        else
        {
          if ((*(_WORD *)v27 & 0xFFDF) != 0x50
            || (*(_WORD *)(v27 + 2) & 0xFFDF) != 0x4C
            || (*(_WORD *)(v27 + 4) & 0xFFDF) != 0x41
            || (*(_WORD *)(v27 + 6) & 0xFFDF) != 0x49
            || (*(_WORD *)(v27 + 8) & 0xFFDF) != 0x4E
            || (*(_WORD *)(v27 + 10) & 0xFFDF) != 0x54
            || (*(_WORD *)(v27 + 12) & 0xFFDF) != 0x45
            || (*(_WORD *)(v27 + 14) & 0xFFDF) != 0x58
            || (*(_WORD *)(v27 + 16) & 0xFFDF) != 0x54
            || (*(_WORD *)(v27 + 18) & 0xFFDF) != 0xD
            || (*(_WORD *)(v27 + 20) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v27 + 22) & 0xFFDF) != 0x4E
            || (*(_WORD *)(v27 + 24) & 0xFFDF) != 0x4C)
          {
            return this;
          }
          v28 = *(unsigned __int16 *)(v27 + 26);
        }
        if ((v28 & 0xFFFFFFDF) != 0x59)
          return this;
        v29 = 544;
      }
      v33 = 0x14F0u;
      WebCore::staticCSSValuePool[v33] += 2;
      v53 = (WTF::StringImpl *)&WebCore::staticCSSValuePool[v33];
      WebCore::MutableStyleProperties::setProperty(a4, 191, (_DWORD **)&v53, 0);
      v35 = v53;
      v53 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v35, v34);
        else
          *(_DWORD *)v35 -= 2;
      }
      v36 = 0x1500u;
      WebCore::staticCSSValuePool[v36] += 2;
      v53 = (WTF::StringImpl *)&WebCore::staticCSSValuePool[v36];
      WebCore::MutableStyleProperties::setProperty(a4, 337, (_DWORD **)&v53, 0);
      v38 = v53;
      v53 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v38, v37);
        else
          *(_DWORD *)v38 -= 2;
      }
      v39 = 0x150Cu;
      WebCore::staticCSSValuePool[v39] += 2;
      v53 = (WTF::StringImpl *)&WebCore::staticCSSValuePool[v39];
      WebCore::MutableStyleProperties::setProperty(a4, 153, (_DWORD **)&v53, 0);
      v41 = v53;
      v53 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v41, v40);
        else
          *(_DWORD *)v41 -= 2;
      }
      dword_1ECE8BC48 += 2;
      v53 = (WTF::StringImpl *)&WebCore::staticCSSValuePool[3112];
      WebCore::MutableStyleProperties::setProperty(a4, 34, (_DWORD **)&v53, 0);
      v43 = v53;
      v53 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v43, v42);
        else
          *(_DWORD *)v43 -= 2;
      }
LABEL_87:
      WebCore::staticCSSValuePool[4 * v29 + 3088] += 2;
      v53 = (WTF::StringImpl *)&WebCore::staticCSSValuePool[4 * v29 + 3088];
      v12 = a4;
      v13 = 348;
      goto LABEL_14;
    }
    v16 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
      return this;
    v17 = *(_DWORD *)(v16 + 4);
    if (v17 == 4)
    {
      v46 = *(_QWORD *)(v16 + 8);
      if ((*(_BYTE *)(v16 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v46 & 0xDF) != 0x41
          || (*(_BYTE *)(v46 + 1) & 0xDF) != 0x55
          || (*(_BYTE *)(v46 + 2) & 0xDF) != 0x54)
        {
          return this;
        }
        v47 = *(unsigned __int8 *)(v46 + 3);
      }
      else
      {
        if ((*(_WORD *)v46 & 0xFFDF) != 0x41
          || (*(_WORD *)(v46 + 2) & 0xFFDF) != 0x55
          || (*(_WORD *)(v46 + 4) & 0xFFDF) != 0x54)
        {
          return this;
        }
        v47 = *(unsigned __int16 *)(v46 + 6);
      }
      if ((v47 & 0xFFFFFFDF) != 0x4F)
        return this;
      v48 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
      v24 = 465;
      if (*(_QWORD *)(WebCore::HTMLNames::preTag + 24) != v48)
      {
        if (*(_QWORD *)(WebCore::HTMLNames::textareaTag + 24) == v48)
          v24 = 465;
        else
          v24 = 755;
      }
      v22 = a4;
      v23 = 285;
      return (WTF::StringImpl *)WebCore::StyledElement::addPropertyToPresentationalHintStyle((int)this, v22, v23, v24);
    }
    if (v17 != 3)
      return this;
    v18 = *(_QWORD *)(v16 + 8);
    if ((*(_BYTE *)(v16 + 16) & 4) != 0)
    {
      v19 = *(_BYTE *)v18 & 0xDF;
      if (v19 == 82)
      {
        if ((*(_BYTE *)(v18 + 1) & 0xDF) != 0x54)
          return this;
        v20 = *(unsigned __int8 *)(v18 + 2);
LABEL_32:
        if ((v20 & 0xFFFFFFDF) != 0x4C)
          return this;
LABEL_33:
        this = WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)a4, 6, (uint64_t)a3);
        v21 = *(_QWORD *)(*((_QWORD *)v5 + 12) + 24);
        if (v21 == *(_QWORD *)(WebCore::HTMLNames::bdiTag + 24)
          || v21 == *(_QWORD *)(WebCore::HTMLNames::bdoTag + 24)
          || v21 == *(_QWORD *)(WebCore::HTMLNames::outputTag + 24))
        {
          return this;
        }
        LODWORD(this) = (_DWORD)v5;
        v22 = a4;
        v23 = 285;
        v24 = 755;
        return (WTF::StringImpl *)WebCore::StyledElement::addPropertyToPresentationalHintStyle((int)this, v22, v23, v24);
      }
      if (v19 != 76 || (*(_BYTE *)(v18 + 1) & 0xDF) != 0x54)
        return this;
      v49 = *(unsigned __int8 *)(v18 + 2);
    }
    else
    {
      v50 = *(_WORD *)v18 & 0xFFDF;
      if (v50 == 82)
      {
        if ((*(_WORD *)(v18 + 2) & 0xFFDF) != 0x54)
          return this;
        v20 = *(unsigned __int16 *)(v18 + 4);
        goto LABEL_32;
      }
      if (v50 != 76 || (*(_WORD *)(v18 + 2) & 0xFFDF) != 0x54)
        return this;
      v49 = *(unsigned __int16 *)(v18 + 4);
    }
    if ((v49 & 0xFFFFFFDF) != 0x52)
      return this;
    goto LABEL_33;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) > 0x3B4u)
  {
    if (v6 != 949)
      return this;
    v7 = *((_QWORD *)this + 13);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if ((v8 & 1) != 0)
      {
        v9 = *(uint64_t **)(v7 + 40);
        LODWORD(v10) = *(_DWORD *)(v7 + 52);
      }
      else
      {
        v9 = (uint64_t *)(v7 + 32);
        LODWORD(v10) = v8 >> 5;
      }
      if ((_DWORD)v10)
      {
        v10 = v10;
        do
        {
          v11 = *v9;
          if (*v9 == WebCore::XMLNames::langAttr
            || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::XMLNames::langAttr + 24)
            && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::XMLNames::langAttr + 32))
          {
            return this;
          }
          v9 += 2;
        }
        while (--v10);
      }
    }
    if (*(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4))
    {
      WebCore::serializeString(a3, a3, &v53);
      WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)v5, (uint64_t)a4, 33, (uint64_t)&v53);
      this = v53;
      v53 = 0;
      if (!this)
        return this;
      v15 = *(_DWORD *)this - 2;
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v30);
LABEL_16:
      *(_DWORD *)this = v15;
      return this;
    }
    WebCore::staticCSSValuePool[4664] += 2;
    v53 = (WTF::StringImpl *)&WebCore::staticCSSValuePool[4664];
    v12 = a4;
    v13 = 33;
LABEL_14:
    WebCore::MutableStyleProperties::setProperty(v12, v13, (_DWORD **)&v53, 0);
    this = v53;
    v53 = 0;
    if (!this)
      return this;
    v15 = *(_DWORD *)this - 2;
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)this, v14);
    goto LABEL_16;
  }
  if (v6 != 443)
  {
    if (v6 != 505)
    {
      if (v6 == 947)
        return WebCore::HTMLElement::mapLanguageAttributeToLocale(this, a3, a4);
      return this;
    }
    v22 = a4;
    v23 = 7;
    goto LABEL_119;
  }
  if (WTF::equalLettersIgnoringASCIICase((uint64_t *)a3, "true", 5uLL))
    return (WTF::StringImpl *)WebCore::StyledElement::addPropertyToPresentationalHintStyle((int)v5, a4, 347, 0x221u);
  this = (WTF::StringImpl *)WTF::equalLettersIgnoringASCIICase((uint64_t *)a3, "false", 6uLL);
  if ((_DWORD)this)
  {
    LODWORD(this) = (_DWORD)v5;
    v22 = a4;
    v23 = 347;
LABEL_119:
    v24 = 6;
    return (WTF::StringImpl *)WebCore::StyledElement::addPropertyToPresentationalHintStyle((int)this, v22, v23, v24);
  }
  return this;
}

uint64_t WebCore::SelectorQueryCache::add(WebCore::SelectorQueryCache *this, const WTF::String *a2, const WebCore::Document *a3, int16x8_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  const WTF::StringImpl *v30;
  __int32 v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int32x2_t v39;
  uint32x2_t v40;
  int8x8_t v41;
  uint32x2_t v42;
  int8x8_t v43;
  int32x2_t v44;
  int32x2_t v45;
  unint64_t v46;
  int i;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  BOOL v51;
  char v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  void *v56;
  uint64_t v57;
  _BOOL4 v59;
  BOOL v60;
  uint64_t v61;
  _BOOL4 v62;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  int v73;
  int v74;
  unsigned int v75;
  WebCore::QualifiedName::QualifiedNameImpl *v76;
  unsigned int ***v77;
  uint64_t v78;
  WebCore::QualifiedName::QualifiedNameImpl *v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int *v92;
  uint64_t v93;
  WebCore::HTMLDocument *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BOOL4 v98;
  int v99;
  WTF *v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  int *v108;
  char v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  WTF *v113;
  void *v114;
  _QWORD *v115;
  unsigned int **v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  unsigned __int8 v123;
  WebCore::QualifiedName::QualifiedNameImpl *v124;
  unsigned __int8 v125;
  WebCore::QualifiedName::QualifiedNameImpl *v126;
  char v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int *v130;
  WTF::StringImpl *v131;
  uint64_t v132;
  unsigned __int8 v133;
  _BYTE v134[24];
  unsigned int v135;
  WTF::StringImpl *v136[2];
  char v137;
  _QWORD v138[2];
  int v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this - 12) == 512)
  {
    v115 = WTF::HashMap<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::unique_ptr<WebCore::SelectorQuery>>,WTF::HashTableTraits>::random((uint64_t *)this);
    WTF::HashMap<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::unique_ptr<WebCore::SelectorQuery>>,WTF::HashTableTraits>::remove(this, (uint64_t)v115);
  }
  LOBYTE(v122) = *((_BYTE *)a3 + 3384) == 2;
  v7 = *((_QWORD *)a3 + 85);
  v8 = *(_DWORD *)(v7 + 704);
  v9 = *(_QWORD *)(v7 + 696);
  v10 = *(_QWORD *)(v7 + 688);
  *((_QWORD *)&v12 + 1) = v10;
  *(_QWORD *)&v12 = *(_QWORD *)(v7 + 680);
  v11 = v12 >> 18;
  *((_QWORD *)&v12 + 1) = v10;
  v13 = v12 >> 14;
  *((_QWORD *)&v12 + 1) = v12;
  *(_QWORD *)&v12 = *(_QWORD *)(v7 + 672);
  a4.i16[0] = v12 >> 18;
  a4.i16[1] = v12 >> 38;
  a4.i16[2] = v13;
  a4.i16[3] = v11;
  *(int8x8_t *)a4.i8 = vand_s8(*(int8x8_t *)a4.i8, (int8x8_t)0x1000100010001);
  *(_DWORD *)((char *)&v122 + 1) = vmovn_s16(a4).u32[0];
  BYTE5(v122) = (v10 & 0x20000000) != 0;
  BYTE6(v122) = (v9 & 0x20000000000000) != 0;
  HIBYTE(v122) = (v8 & 0x400) != 0;
  v123 = 0;
  WebCore::SecurityContext::securityOrigin((const WebCore::Document *)((char *)a3 + 192), a2);
  v15 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v15 += 2;
  v131 = v15;
  v132 = v122;
  v133 = v123;
  v134[0] = 0;
  v135 = -1;
  v16 = *(unsigned int *)(v14 + 32);
  if ((_DWORD)v16 != -1)
  {
    ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t))off_1E33A7D28[v16])(v136, v134, v14 + 8);
    v135 = v16;
  }
  v17 = *(_QWORD *)this;
  if (*(_QWORD *)this
    || (WTF::HashTable<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::unique_ptr<WebCore::SelectorQuery>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>>::expand((uint64_t *)this, 0), (v17 = *(_QWORD *)this) != 0))
  {
    v121 = *(_DWORD *)(v17 - 8);
  }
  else
  {
    v121 = 0;
  }
  v18 = *((_DWORD *)v131 + 4);
  v116 = (unsigned int **)a2;
  v117 = (uint64_t *)this;
  v119 = v17;
  if (v18 < 0x100)
    v120 = WTF::StringImpl::hashSlowCase(v131);
  else
    v120 = v18 >> 8;
  v19 = v132;
  v20 = BYTE1(v132);
  v21 = BYTE2(v132);
  v22 = BYTE3(v132);
  v23 = BYTE4(v132);
  v24 = BYTE5(v132);
  v25 = BYTE6(v132);
  v26 = HIBYTE(v132);
  WORD2(v124) = 0;
  BYTE6(v124) = 0;
  v126 = (WebCore::QualifiedName::QualifiedNameImpl *)&v124;
  if (v135 == -1)
    v27 = -1;
  else
    v27 = v135;
  v28 = (v27 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v27 - 1640531527) << 16) ^ ((unsigned __int16)v27
                                                                                             - 1640531527);
  v29 = (v27 >> 37) & 0x7FFF800 ^ ((v28 + WORD2(v27) + (v28 >> 11)) << 16) ^ (v28 + WORD2(v27) + (v28 >> 11));
  LODWORD(v124) = v29 + (v29 >> 11);
  if (v135 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v136[0] = (WTF::StringImpl *)&v126;
  ((void (*)(WTF::StringImpl **, _BYTE *))off_1E33A7E88[v135])(v136, v134);
  v31 = (int)v124;
  if (BYTE6(v124))
  {
    v112 = ((_DWORD)v124 + WORD2(v124)) ^ (((_DWORD)v124 + WORD2(v124)) << 11);
    v31 = v112 + (v112 >> 17);
  }
  v118 = 0;
  v32 = ((v19 - 1640531527) ^ ((v19 - 1640531527) << 16))
      + v20
      + (((v19 - 1640531527) ^ ((v19 - 1640531527) << 16)) >> 11);
  v33 = (v32 ^ (v32 << 16)) + v21 + ((v32 ^ (v32 << 16)) >> 11);
  v34 = (v33 ^ (v33 << 16)) + v22 + ((v33 ^ (v33 << 16)) >> 11);
  v35 = (v34 ^ (v34 << 16)) + v23 + ((v34 ^ (v34 << 16)) >> 11);
  v36 = (v35 ^ (v35 << 16)) + v24 + ((v35 ^ (v35 << 16)) >> 11);
  v37 = (v36 ^ (v36 << 16)) + v25 + ((v36 ^ (v36 << 16)) >> 11);
  v38 = (v37 ^ (v37 << 16)) + v26 + ((v37 ^ (v37 << 16)) >> 11);
  v39.i32[0] = v31;
  v39.i32[1] = (v38 ^ (v38 << 16)) + ((v38 ^ (v38 << 16)) >> 11);
  v40 = (uint32x2_t)veor_s8((int8x8_t)vshl_n_s32(v39, 3uLL), (int8x8_t)v39);
  v41 = (int8x8_t)vsra_n_u32(v40, v40, 5uLL);
  v42 = (uint32x2_t)veor_s8((int8x8_t)vshl_n_s32((int32x2_t)v41, 2uLL), v41);
  v43 = (int8x8_t)vsra_n_u32(v42, v42, 0xFuLL);
  v44 = (int32x2_t)veor_s8((int8x8_t)vshl_n_s32((int32x2_t)v43, 0xAuLL), v43);
  v45 = (int32x2_t)vbsl_s8((int8x8_t)vceqz_s32(v44), (int8x8_t)0x7C800000FF000000, (int8x8_t)vmul_s32(v44, (int32x2_t)0x109132F905AC73FELL));
  v46 = (0xD7862706ELL
       * (unint64_t)(277951225 * v120
                          + 95187966
                          * ((0xD7862706ELL * (unint64_t)vadd_s32(v45, vdup_lane_s32(v45, 1)).u32[0]) >> 4))) >> 4;
  for (i = 1; ; ++i)
  {
    v48 = v46 & v121;
    v49 = v119 + (v48 << 6);
    v136[1] = 0;
    v136[0] = 0;
    v137 = 0;
    LODWORD(v140) = 0;
    v138[0] = 0;
    v138[1] = 0;
    v139 = 0;
    if (WTF::equal(*(WTF **)v49, 0, v30))
      v51 = *(_QWORD *)(v49 + 8) == 0;
    else
      v51 = 0;
    if (!v51 || *(_BYTE *)(v49 + 16) != 0)
    {
      v53 = 0;
      v54 = 0;
LABEL_27:
      ((void (*)(WebCore::QualifiedName::QualifiedNameImpl **, _QWORD *))off_1E33A7D18[v54])(&v126, v138);
      goto LABEL_28;
    }
    v54 = v140;
    if ((WTF::StringImpl **)v49 == v136)
    {
      v53 = 1;
    }
    else
    {
      v61 = *(unsigned int *)(v49 + 48);
      v62 = v140 == v61;
      if (v140 == 0xFFFFFFFFLL)
        v62 = 0;
      if (v61 == 0xFFFFFFFFLL)
        v53 = v140 == 0xFFFFFFFFLL;
      else
        v53 = v62;
      if ((_DWORD)v61 != -1 && v62)
      {
        v126 = (WebCore::QualifiedName::QualifiedNameImpl *)&v124;
        v53 = ((uint64_t (*)(WebCore::QualifiedName::QualifiedNameImpl **, uint64_t, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v140])(&v126, v49 + 24, v138);
        v54 = v140;
      }
    }
    if (v54 != 0xFFFFFFFFLL)
      goto LABEL_27;
LABEL_28:
    LODWORD(v140) = -1;
    v55 = v136[0];
    v136[0] = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, v50);
      else
        *(_DWORD *)v55 -= 2;
    }
    if ((v53 & 1) != 0)
      break;
    if (*(_QWORD *)v49 == -1)
    {
      v118 = v119 + (v48 << 6);
    }
    else if (WTF::equal(*(WTF **)v49, v131, v30)
           && *(unsigned __int8 *)(v49 + 8) == v132
           && __PAIR64__(*(unsigned __int8 *)(v49 + 10), *(unsigned __int8 *)(v49 + 9)) == __PAIR64__(BYTE2(v132), BYTE1(v132))&& __PAIR64__(*(unsigned __int8 *)(v49 + 12), *(unsigned __int8 *)(v49 + 11)) == __PAIR64__(BYTE4(v132), BYTE3(v132))&& __PAIR64__(*(unsigned __int8 *)(v49 + 14), *(unsigned __int8 *)(v49 + 13)) == __PAIR64__(BYTE6(v132), BYTE5(v132))&& __PAIR64__(*(unsigned __int8 *)(v49 + 16), *(unsigned __int8 *)(v49 + 15)) == __PAIR64__(v133, HIBYTE(v132)))
    {
      if ((WTF::StringImpl **)v49 == &v131)
      {
        v49 = (uint64_t)&v131;
        goto LABEL_71;
      }
      v57 = *(unsigned int *)(v49 + 48);
      v59 = v135 == (_DWORD)v57 && v135 != -1;
      if ((_DWORD)v57 == -1 || !v59)
      {
        if ((_DWORD)v57 == -1)
          v60 = v135 == -1;
        else
          v60 = v59;
        if (v60)
          goto LABEL_71;
      }
      else
      {
        v136[0] = (WTF::StringImpl *)&v126;
        if ((((uint64_t (*)(WTF::StringImpl **, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v57])(v136, v49 + 24, v134) & 1) != 0)goto LABEL_71;
      }
    }
    LODWORD(v46) = i + v48;
  }
  if (v118)
  {
    *(_QWORD *)v118 = 0;
    *(_QWORD *)(v118 + 8) = 0;
    *(_BYTE *)(v118 + 16) = 0;
    *(_DWORD *)(v118 + 48) = 0;
    *(_QWORD *)(v118 + 24) = 0;
    *(_QWORD *)(v118 + 32) = 0;
    *(_DWORD *)(v118 + 40) = 0;
    *(_QWORD *)(v118 + 56) = 0;
    --*(_DWORD *)(*v117 - 16);
    v49 = v118;
  }
  v67 = v131;
  if (v131)
    *(_DWORD *)v131 += 2;
  v68 = *(WTF::StringImpl **)v49;
  *(_QWORD *)v49 = v67;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
      WTF::StringImpl::destroy(v68, v50);
    else
      *(_DWORD *)v68 -= 2;
  }
  v69 = v132;
  *(_BYTE *)(v49 + 16) = v133;
  *(_QWORD *)(v49 + 8) = v69;
  v70 = *(unsigned int *)(v49 + 48);
  if ((_DWORD)v70 == -1)
  {
    if (v135 != -1)
    {
LABEL_87:
      v136[0] = (WTF::StringImpl *)(v49 + 24);
      ((void (*)(WTF::StringImpl **))off_1E33A7E98[v135])(v136);
    }
  }
  else
  {
    if (v135 != -1)
      goto LABEL_87;
    ((void (*)(WTF::StringImpl **, uint64_t))off_1E33A7D18[v70])(v136, v49 + 24);
    *(_DWORD *)(v49 + 48) = -1;
  }
  WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v136, v116, 0, 0);
  WebCore::parseCSSSelectorList(v140, v140 + 24 * v141, &v122, 0, 0, (uint64_t)&v124);
  if (!v125)
  {
    v72 = 0;
    goto LABEL_130;
  }
  v72 = (uint64_t)v124;
  if (v124)
  {
    while ((WebCore::forEachTagSelector<WebCore::CSSSelectorList::hasExplicitNestingParent(void)::$_0>((WebCore::CSSSelector *)v72) & 1) == 0)
    {
      do
      {
        v74 = *(_DWORD *)v72;
        v72 += 16;
        v73 = v74;
      }
      while ((v74 & 0x80000) == 0);
      if ((v73 & 0x20000) != 0)
        goto LABEL_93;
    }
    v75 = v125;
    if (!v125)
      goto LABEL_173;
    WebCore::CSSSelectorParser::resolveNestingParent((WebCore::CSSSelectorParser *)&v124, 0, &v126);
    std::optional<WebCore::CSSSelectorList>::operator=[abi:sn180100]<WebCore::CSSSelectorList,void>((uint64_t)&v124, (uint64_t *)&v126);
    v71 = v126;
    v126 = 0;
    if (v71)
      WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)&v126, v71);
LABEL_93:
    v75 = v125;
    if (!v125)
    {
LABEL_173:
      __break(1u);
LABEL_174:
      if ((v75 & 0x800000) != 0)
      {
LABEL_149:
        *(_DWORD *)(v72 + 24) = 0;
        goto LABEL_127;
      }
LABEL_175:
      v99 = 8;
      goto LABEL_126;
    }
  }
  v72 = WTF::fastMalloc((WTF *)0x20);
  v76 = v124;
  v124 = 0;
  *(_QWORD *)v72 = v76;
  *(_QWORD *)(v72 + 8) = 0;
  v77 = (unsigned int ***)(v72 + 8);
  *(_QWORD *)(v72 + 16) = 0;
  if (!v76)
    goto LABEL_125;
  LODWORD(v78) = 0;
  v79 = v76;
  do
  {
    v80 = v78;
    do
    {
      v82 = *(_DWORD *)v79;
      v79 = (WebCore::QualifiedName::QualifiedNameImpl *)((char *)v79 + 16);
      v81 = v82;
    }
    while ((v82 & 0x80000) == 0);
    v78 = (v78 + 1);
  }
  while ((v81 & 0x20000) == 0);
  if ((_DWORD)v78)
  {
    if (!(v78 >> 27))
    {
      v83 = WTF::fastMalloc((WTF *)(32 * v78));
      *(_DWORD *)(v72 + 16) = v78;
      *(_QWORD *)(v72 + 8) = v83;
      v76 = *(WebCore::QualifiedName::QualifiedNameImpl **)v72;
      goto LABEL_102;
    }
LABEL_180:
    __break(0xC471u);
    JUMPOUT(0x194500158);
  }
LABEL_102:
  if (v76)
  {
    do
    {
      v126 = v76;
      v127 = 0;
      v128 = 0;
      v129 = 0;
      v84 = *(unsigned int *)(v72 + 20);
      if ((_DWORD)v84 == *(_DWORD *)(v72 + 16))
      {
        WTF::Vector<WebCore::SelectorDataList::SelectorData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SelectorDataList::SelectorData>((uint64_t)v77, (unint64_t)&v126);
      }
      else
      {
        v85 = *(_QWORD *)(v72 + 8) + 32 * v84;
        *(_QWORD *)v85 = v76;
        *(_BYTE *)(v85 + 8) = 0;
        *(_QWORD *)(v85 + 16) = v128;
        v86 = v129;
        v129 = 0;
        *(_QWORD *)(v85 + 24) = v86;
        ++*(_DWORD *)(v72 + 20);
      }
      v87 = v129;
      v129 = 0;
      if (v87)
      {
        do
        {
          v88 = __ldaxr(v87);
          v89 = v88 - 1;
        }
        while (__stlxr(v89, v87));
        if (!v89)
        {
          atomic_store(1u, v87);
          v130 = v87;
          WTF::ThreadSafeRefCounted<JSC::ExecutableMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v130);
        }
      }
      do
      {
        v91 = *(_DWORD *)v76;
        v76 = (WebCore::QualifiedName::QualifiedNameImpl *)((char *)v76 + 16);
        v90 = v91;
      }
      while ((v91 & 0x80000) == 0);
    }
    while ((v90 & 0x20000) == 0);
  }
  if (v80)
  {
LABEL_125:
    v99 = 2;
    goto LABEL_126;
  }
  if (!*(_DWORD *)(v72 + 20))
    goto LABEL_180;
  v92 = **v77;
  v75 = *v92;
  if ((*v92 & 0x80000) == 0)
  {
    v108 = (int *)(v92 + 2);
    v109 = 1;
    while (1)
    {
      v110 = *(v108 - 2);
      v111 = (v110 >> 4) & 0x1F;
      if (v111 == 2
        || v111 == 4 && *(_QWORD *)(*(_QWORD *)v108 + 32) == WebCore::HTMLNames::idAttr && (v110 & 0x800000) == 0)
      {
        break;
      }
      v109 &= (*(v108 - 2) & 0xF) == 0;
      v108 += 4;
      if ((v110 & 0x80000) != 0)
        goto LABEL_149;
    }
    if ((v109 & 1) == 0)
    {
      v99 = 1;
      goto LABEL_126;
    }
    goto LABEL_175;
  }
  switch((v75 >> 4) & 0x1F)
  {
    case 1u:
      v99 = 9;
      break;
    case 2u:
      goto LABEL_175;
    case 3u:
      v99 = 10;
      break;
    case 4u:
      v93 = *((_QWORD *)v92 + 1);
      v95 = *(_QWORD *)(v93 + 32);
      v94 = (WebCore::HTMLDocument *)(v93 + 32);
      if (v95 == WebCore::HTMLNames::idAttr)
        goto LABEL_174;
      if ((v75 & 0x800000) != 0)
        goto LABEL_149;
      if (!WebCore::HTMLDocument::isCaseSensitiveAttribute(v94, v71))
        goto LABEL_149;
      v96 = *(_QWORD *)v94;
      if (*(_QWORD *)(*(_QWORD *)v94 + 40) == *(_QWORD *)(WebCore::HTMLNames::styleAttr + 24)
        && (*(_QWORD *)(v96 + 16) == WebCore::starAtomData
         || *(_QWORD *)(v96 + 32) == *(_QWORD *)(WebCore::HTMLNames::styleAttr + 32)))
      {
        goto LABEL_149;
      }
      WebCore::SVGElement::animatableAttributeForName(v96 + 24, &v126);
      v97 = *(_QWORD *)v94;
      v98 = *(_QWORD *)(*(_QWORD *)v94 + 24) != *((_QWORD *)v126 + 3)
         || *(_QWORD *)(v97 + 16) != WebCore::starAtomData && *(_QWORD *)(v97 + 32) != *((_QWORD *)v126 + 4);
      if (*(_DWORD *)v126 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v126);
        WTF::fastFree(v113, v114);
      }
      else
      {
        --*(_DWORD *)v126;
      }
      if (!v98)
        goto LABEL_149;
      v99 = 11;
      break;
    default:
      goto LABEL_149;
  }
LABEL_126:
  *(_DWORD *)(v72 + 24) = v99;
LABEL_127:
  if (v125)
  {
    v71 = v124;
    v124 = 0;
    if (v71)
      WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)&v124, v71);
  }
LABEL_130:
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v136, v71);
  v100 = *(WTF **)(v49 + 56);
  *(_QWORD *)(v49 + 56) = v72;
  if (v100)
  {
    WTF::Vector<WebCore::SelectorDataList::SelectorData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v100 + 8, v56);
    v101 = *(WTF::StringImpl **)v100;
    *(_QWORD *)v100 = 0;
    if (v101)
      WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)v100, v101);
    WTF::fastFree(v100, v101);
  }
  v102 = *v117;
  if (*v117)
    v103 = *(_DWORD *)(v102 - 12) + 1;
  else
    v103 = 1;
  *(_DWORD *)(v102 - 12) = v103;
  v104 = *v117;
  if (*v117)
    v105 = *(_DWORD *)(v104 - 12);
  else
    v105 = 0;
  v106 = (*(_DWORD *)(v104 - 16) + v105);
  v107 = *(unsigned int *)(v104 - 4);
  if (v107 > 0x400)
  {
    if (v107 <= 2 * v106)
LABEL_140:
      v49 = WTF::HashTable<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::unique_ptr<WebCore::SelectorQuery>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>>::expand(v117, v49);
  }
  else if (3 * v107 <= 4 * v106)
  {
    goto LABEL_140;
  }
LABEL_71:
  v64 = *(_QWORD *)(v49 + 56);
  if (v135 != -1)
    ((void (*)(WTF::StringImpl **, _BYTE *))off_1E33A7D18[v135])(v136, v134);
  v135 = -1;
  v65 = v131;
  v131 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v56);
    else
      *(_DWORD *)v65 -= 2;
  }
  return v64;
}

uint64_t WTF::HashTable<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::unique_ptr<WebCore::SelectorQuery>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>,std::unique_ptr<WebCore::SelectorQuery>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::unique_ptr<WebCore::SelectorQuery>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::CSSSelectorParserContext,WebCore::SecurityOriginData>>>::rehash(a1, v5, a2);
}

uint64_t WebCore::SWServer::handleLowMemoryWarning(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(this + 177))
    return this;
  v1 = this;
  v2 = *(_QWORD *)(this + 72);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    v4 = v2 + 96 * v3;
    if (*(_DWORD *)(v2 - 12))
    {
      if ((_DWORD)v3)
      {
        v5 = 96 * v3;
        while (1)
        {
          this = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebCore::SWServer::Clients>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebCore::SWServer::Clients>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebCore::SWServer::Clients,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::SWServer::Clients>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyBucket(v2);
          if ((this & 1) == 0)
          {
            this = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebCore::SWServer::Clients>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebCore::SWServer::Clients>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebCore::SWServer::Clients,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::SWServer::Clients>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isDeletedBucket(v2);
            if (!(_DWORD)this)
              break;
          }
          v2 += 96;
          v5 -= 96;
          if (!v5)
          {
            v2 = v4;
            break;
          }
        }
        v6 = v2;
        v2 = *(_QWORD *)(v1 + 72);
        if (!v2)
          goto LABEL_48;
      }
      else
      {
        v6 = *(_QWORD *)(this + 72);
      }
LABEL_15:
      v7 = v2 + 96 * *(unsigned int *)(v2 - 4);
      goto LABEL_16;
    }
    v6 = v2 + 96 * v3;
  }
  else
  {
    v6 = 0;
    LODWORD(v3) = 0;
  }
  v4 = v2 + 96 * v3;
  if (v2)
    goto LABEL_15;
LABEL_48:
  v7 = 0;
LABEL_16:
  if (v7 != v6)
  {
    v15 = v7;
    do
    {
      v8 = *(_QWORD *)(v6 + 80);
      if (v8)
      {
        *(_QWORD *)(v8 + 24) = 0;
        WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
        this = WebCore::TimerBase::setNextFireTime(v8, v9 + 0.0);
      }
      v10 = v6 + 96;
      v6 = v4;
      if (v10 != v4)
      {
        v6 = v10;
        while (1)
        {
          v20 = 0u;
          v21 = 0u;
          v18 = 0u;
          v19 = 0u;
          if ((__int128 *)v6 == &v18)
          {
            v11 = 1;
          }
          else if (*(_DWORD *)(v6 + 24)
                 || (v17 = &v16,
                     this = std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,std::__variant_detail::_Trait::ProcessQualified<WTF::ObjectIdentifierGeneric<std::__variant_detail::_Trait::OpaqueOriginIdentifierType,std::__variant_detail::_Trait::ProcessQualified::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,std::__variant_detail::_Trait::ProcessQualified<WTF::ObjectIdentifierGeneric<std::__variant_detail::_Trait::OpaqueOriginIdentifierType,std::__variant_detail::_Trait::ProcessQualified::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const>((uint64_t)&v17, v6, (uint64_t)&v18), !(_DWORD)this))
          {
            v11 = 0;
          }
          else
          {
            v12 = *(unsigned int *)(v6 + 56);
            v13 = DWORD2(v21) != -1 && DWORD2(v21) == v12;
            if ((_DWORD)v12 == -1)
              v11 = DWORD2(v21) == -1;
            else
              v11 = v13;
            if ((_DWORD)v12 != -1 && v13)
            {
              v17 = &v16;
              this = ((uint64_t (*)(char **, uint64_t, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v12])(&v17, v6 + 32, &v20);
              v11 = this;
            }
          }
          if (DWORD2(v21) != -1)
            this = ((uint64_t (*)(char **, __int128 *))off_1E3482200[DWORD2(v21)])(&v17, &v20);
          DWORD2(v21) = -1;
          if (DWORD2(v19) != -1)
            this = ((uint64_t (*)(char **, __int128 *))off_1E3482200[DWORD2(v19)])(&v17, &v18);
          if ((v11 & 1) == 0)
          {
            v14 = *(unsigned int *)(v6 + 24);
            if ((_DWORD)v14 == -1)
              std::__throw_bad_variant_access[abi:sn180100]();
            *(_QWORD *)&v18 = &v17;
            this = ((uint64_t (*)(__int128 *, uint64_t))off_1E3482248[v14])(&v18, v6);
            if (!(_DWORD)this)
              break;
          }
          v6 += 96;
          if (v6 == v4)
          {
            v6 = v4;
            break;
          }
        }
      }
    }
    while (v6 != v15);
  }
  return this;
}

void WebCore::FrameLoader::continueLoadAfterNavigationPolicy(uint64_t a1, WebCore::ResourceRequest *this, uint64_t a3, int a4, int a5)
{
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  int *v13;
  int v14;
  int v15;
  WebCore::HistoryItem *v16;
  char v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;
  unsigned int v31;
  unsigned int v32;
  NSObject *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  const char *v38;
  NSObject *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL4 v45;
  int v46;
  void *v47;
  uint64_t v48;
  WebCore::BackForwardController **v49;
  WebCore::HistoryItem *v50;
  char isTargetItem;
  WTF::StringImpl *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  WebCore::DiagnosticLoggingKeys *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _BOOL4 v65;
  WebCore::DiagnosticLoggingKeys *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  _QWORD *v70;
  uint64_t v71;
  _BOOL4 v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  _BYTE buf[12];
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  _BOOL4 v81;
  __int16 v82;
  _BYTE v83[10];
  __int16 v84;
  int v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
  v11 = (unsigned int *)(v10 + 1);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = (int *)v10[23];
  v14 = *v13;
  v15 = *v13 + 1;
  *v13 = v15;
  v16 = (WebCore::HistoryItem *)*((_QWORD *)v13 + 4);
  if (v16)
  {
    *v13 = v14 + 2;
    isTargetItem = WebCore::HistoryItem::isTargetItem(v16);
    if (!*v13)
    {
      __break(0xC471u);
      JUMPOUT(0x194500D10);
    }
    v17 = isTargetItem;
    v15 = *v13 - 1;
    *v13 = v15;
  }
  else
  {
    v17 = 0;
  }
  if (!v15)
  {
    __break(0xC471u);
    JUMPOUT(0x194500C00);
  }
  *v13 = v15 - 1;
  if ((a5 & 1) != 0)
  {
    v18 = 1;
  }
  else
  {
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    v18 = *((_BYTE *)this + 8) & 1;
  }
  if (a4 || (WebCore::FrameLoader::shouldClose((WebCore::FrameLoader *)a1) & v18 & 1) == 0)
  {
    v39 = qword_1ECE7C860;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
    {
      v40 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
      v41 = v40[3];
      if (v41 && (v42 = *(_QWORD *)(v41 + 8)) != 0 && *(_BYTE *)(v42 + 40))
        v43 = *(_QWORD *)(v42 + 32);
      else
        v43 = 0;
      v44 = v40[4];
      v45 = *(_QWORD *)(v40[16] + 8) == (_QWORD)v40;
      if ((*((_BYTE *)this + 184) & 1) == 0)
      {
        v73 = v44;
        v72 = v45;
        WebCore::ResourceRequest::doUpdateResourceRequest(this);
        v45 = v72;
        v44 = v73;
        *((_BYTE *)this + 184) |= 1u;
      }
      v46 = *((_DWORD *)this + 2) & 1;
      *(_DWORD *)buf = 134219520;
      *(_QWORD *)&buf[4] = a1;
      v76 = 2048;
      v77 = v43;
      v78 = 2048;
      v79 = v44;
      v80 = 1024;
      v81 = v45;
      v82 = 1024;
      *(_DWORD *)v83 = a5;
      *(_WORD *)&v83[4] = 1024;
      *(_DWORD *)&v83[6] = v46;
      v84 = 1024;
      v85 = a4;
      _os_log_impl(&dword_1940B8000, v39, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::continueLoadAfterNavigationPolicy: can't continue loading frame due to the following reasons (allowNavigationToInvalidURL = %d, requestURLIsValid = %d, navigationPolicyDecision = %d)", buf, 0x38u);
    }
    if (*(_BYTE *)(a1 + 152))
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 200))(*(_QWORD *)(a1 + 16));
      *(_WORD *)(a1 + 152) = 0;
    }
    if (a4 == 2)
    {
      WebCore::FrameLoader::stopAllLoaders(a1, 1, 0);
      if ((*(_QWORD *)(a1 + 296) & 0xFFFFFFFFFFFFLL) != 0)
        WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 264));
    }
    *(_QWORD *)buf = 0;
    WebCore::FrameLoader::setPolicyDocumentLoader(a1, (WebCore::DocumentLoader **)buf, a4 == 2);
    if (*(_QWORD *)buf)
    {
      if (*(_DWORD *)(*(_QWORD *)buf + 24) == 1)
        (*(void (**)(void))(**(_QWORD **)buf + 24))();
      else
        --*(_DWORD *)(*(_QWORD *)buf + 24);
    }
    if (a4 != 2 || *(_QWORD **)(v10[16] + 8) == v10)
    {
      WebCore::FrameLoader::checkCompleted((WebCore::FrameLoader *)a1, v47);
      if (a4 != 2)
        WebCore::FrameLoader::checkLoadComplete((WTF *)a1, 0);
    }
    else
    {
      *(_BYTE *)(a1 + 157) = 1;
    }
    if (((v17 & 1) != 0 || *(_QWORD **)(v10[16] + 8) == v10)
      && *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 26) - 1 <= 2)
    {
      v48 = v10[3];
      if (v48)
      {
        v49 = *(WebCore::BackForwardController ***)(v48 + 8);
        if (v49)
        {
          ++*(_DWORD *)v49;
          v50 = *(WebCore::HistoryItem **)(*(_QWORD *)(*(_QWORD *)(v10[16] + 8) + 184) + 16);
          if (v50)
          {
            ++*(_DWORD *)v50;
            WebCore::BackForwardController::setCurrentItem(v49[17], v50);
            WTF::RefCounted<WebCore::HistoryItem>::deref(v50);
          }
          WTF::RefCounted<WebCore::Page>::deref((WebCore::Page *)v49);
        }
      }
    }
    goto LABEL_34;
  }
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  if (WTF::URL::protocolIsJavaScript(this))
  {
    WebCore::NavigationAction::NavigationAction((WebCore::NavigationAction *)buf, (const WebCore::NavigationAction *)(*(_QWORD *)(a1 + 104) + 1632));
    v74 = 0;
    WebCore::FrameLoader::setPolicyDocumentLoader(a1, &v74, 0);
    if (v74)
    {
      if (*((_DWORD *)v74 + 6) == 1)
        (*(void (**)(void))(*(_QWORD *)v74 + 24))();
      else
        --*((_DWORD *)v74 + 6);
    }
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    WebCore::FrameLoader::executeJavaScriptURL((WebCore::FrameLoader *)a1, this, (const WebCore::NavigationAction *)buf);
    WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)buf, v52);
    goto LABEL_34;
  }
  v19 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 26);
  WebCore::FrameLoader::stopAllLoaders(a1, 0, 0);
  v20 = v10[3];
  if (!v20 || !*(_QWORD *)(v20 + 8))
  {
    v33 = qword_1ECE7C860;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
      goto LABEL_34;
    v34 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
    v35 = v34[3];
    if (v35)
    {
      v35 = *(_QWORD *)(v35 + 8);
      if (v35)
      {
        if (*(_BYTE *)(v35 + 40))
          v35 = *(_QWORD *)(v35 + 32);
        else
          v35 = 0;
      }
    }
    v36 = v34[4];
    v37 = *(_QWORD *)(v34[16] + 8) == (_QWORD)v34;
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    v76 = 2048;
    v77 = v35;
    v78 = 2048;
    v79 = v36;
    v80 = 1024;
    v81 = v37;
    v38 = "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::continueLoadAfterNavigationPolicy: can't continu"
          "e loading frame because it became defunct";
    goto LABEL_41;
  }
  v21 = *(_QWORD *)(a1 + 104);
  if (v21)
    ++*(_DWORD *)(v21 + 24);
  *(_QWORD *)buf = v21;
  WebCore::FrameLoader::setProvisionalDocumentLoader(a1, (uint64_t *)buf);
  if (*(_QWORD *)buf)
  {
    if (*(_DWORD *)(*(_QWORD *)buf + 24) == 1)
      (*(void (**)(void))(**(_QWORD **)buf + 24))();
    else
      --*(_DWORD *)(*(_QWORD *)buf + 24);
  }
  v22 = qword_1ECE7C860;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
  {
    v23 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
    v24 = v23[3];
    if (v24)
    {
      v24 = *(_QWORD *)(v24 + 8);
      if (v24)
      {
        if (*(_BYTE *)(v24 + 40))
          v24 = *(_QWORD *)(v24 + 32);
        else
          v24 = 0;
      }
    }
    v25 = v23[4];
    v26 = *(_QWORD *)(v23[16] + 8) == (_QWORD)v23;
    v27 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)&buf[4] = a1;
    v76 = 2048;
    v77 = v24;
    v78 = 2048;
    v79 = v25;
    v80 = 1024;
    v81 = v26;
    v82 = 2048;
    *(_QWORD *)v83 = v27;
    _os_log_impl(&dword_1940B8000, v22, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::continueLoadAfterNavigationPolicy: Setting provisional document loader (m_provisionalDocumentLoader=%p)", buf, 0x30u);
  }
  *(_BYTE *)(a1 + 81) = v19;
  *(_BYTE *)(a1 + 80) = 0;
  WebCore::FrameLoader::provisionalLoadStarted((WebCore::FrameLoader *)a1);
  *(_QWORD *)buf = 0;
  WebCore::FrameLoader::setPolicyDocumentLoader(a1, (WebCore::DocumentLoader **)buf, 0);
  if (*(_QWORD *)buf)
  {
    if (*(_DWORD *)(*(_QWORD *)buf + 24) == 1)
      (*(void (**)(void))(**(_QWORD **)buf + 24))();
    else
      --*(_DWORD *)(*(_QWORD *)buf + 24);
  }
  if ((v19 - 1) > 2)
    goto LABEL_30;
  v53 = v10[3];
  if (v53)
    v54 = *(uint64_t **)(v53 + 8);
  else
    v54 = 0;
  v55 = WebCore::Page::diagnosticLoggingClient(v54);
  v56 = v55;
  v57 = *(_QWORD *)(v10[23] + 32);
  if (v57 && *(_QWORD *)(v57 + 200))
  {
    v58 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::backForwardCacheKey((uint64_t *)buf, (WebCore::DiagnosticLoggingKeys *)v55);
    WebCore::DiagnosticLoggingKeys::retrievalKey((uint64_t *)&v74, v58);
    (*(void (**)(uint64_t *, _BYTE *, WTF::StringImpl **, _QWORD, uint64_t))(*v56 + 8))(v56, buf, &v74, 0, 1);
    v60 = v74;
    v74 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v59);
      else
        *(_DWORD *)v60 -= 2;
    }
    v61 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, v59);
      else
        *(_DWORD *)v61 -= 2;
    }
    WebCore::FrameLoader::loadProvisionalItemFromCachedPage((WebCore::FrameLoader *)a1);
    v33 = qword_1ECE7C860;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
      goto LABEL_34;
    v62 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
    v63 = v62[3];
    if (v63)
    {
      v63 = *(_QWORD *)(v63 + 8);
      if (v63)
      {
        if (*(_BYTE *)(v63 + 40))
          v63 = *(_QWORD *)(v63 + 32);
        else
          v63 = 0;
      }
    }
    v64 = v62[4];
    v65 = *(_QWORD *)(v62[16] + 8) == (_QWORD)v62;
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    v76 = 2048;
    v77 = v63;
    v78 = 2048;
    v79 = v64;
    v80 = 1024;
    v81 = v65;
    v38 = "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::continueLoadAfterNavigationPolicy: can't continu"
          "e loading frame because it will be loaded from cache";
LABEL_41:
    _os_log_impl(&dword_1940B8000, v33, OS_LOG_TYPE_DEFAULT, v38, buf, 0x26u);
    goto LABEL_34;
  }
  v66 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::backForwardCacheKey((uint64_t *)buf, (WebCore::DiagnosticLoggingKeys *)v55);
  WebCore::DiagnosticLoggingKeys::retrievalKey((uint64_t *)&v74, v66);
  (*(void (**)(uint64_t *, _BYTE *, WTF::StringImpl **, uint64_t, uint64_t))(*v56 + 8))(v56, buf, &v74, 1, 1);
  v68 = v74;
  v74 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
      WTF::StringImpl::destroy(v68, v67);
    else
      *(_DWORD *)v68 -= 2;
  }
  v69 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, v67);
    else
      *(_DWORD *)v69 -= 2;
  }
  do
LABEL_30:
    v28 = __ldaxr(v11);
  while (__stlxr(v28 + 1, v11));
  v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v29 = &off_1E33F60A0;
  v29[1] = a1;
  v29[2] = v10;
  *(_QWORD *)buf = v29;
  if (!a3)
  {
    v30 = v29;
    WTF::Detail::CallableWrapper<WebCore::FrameLoader::continueLoadAfterNavigationPolicy(WebCore::ResourceRequest const&,WebCore::FormState *,WebCore::NavigationPolicyDecision,WebCore::AllowNavigationToInvalidURL)::$_0,void>::call((uint64_t)v29);
LABEL_33:
    (*(void (**)(_QWORD *))(*v30 + 8))(v30);
    goto LABEL_34;
  }
  (*(void (**)(_QWORD, uint64_t, _BYTE *))(**(_QWORD **)(a1 + 16) + 440))(*(_QWORD *)(a1 + 16), a3, buf);
  v30 = *(_QWORD **)buf;
  *(_QWORD *)buf = 0;
  if (v30)
    goto LABEL_33;
  do
  {
LABEL_34:
    v31 = __ldaxr(v11);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v11));
  if (!v32)
  {
    atomic_store(1u, v11);
    v70 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v70 = off_1E31FE290;
    v70[1] = v11;
    *(_QWORD *)buf = v70;
    WTF::ensureOnMainThread();
    v71 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v71)
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  }
}

void WebCore::DocumentLoader::continueAfterContentPolicy(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  const WTF::String *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t (*v15)();
  uint64_t (*v16)();
  WebCore *v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  char v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WebCore::FrameLoader *v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::FrameLoader *v39;
  int v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::SubresourceLoader *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  void *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  _BOOL4 v65;
  unsigned int v66;
  _QWORD *v67;
  uint64_t v68;
  void *v69;
  NSObject *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  _BOOL4 v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  WTF::StringImpl *v79;
  _BYTE buf[22];
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  _BOOL4 v84;
  __int16 v85;
  int v86;
  char v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 3549) = 0;
  if (*(_BYTE *)(a1 + 3538))
    return;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(uint64_t **)(v4 + 8);
    if (v5)
    {
      if (!a2)
      {
        v6 = *(_QWORD *)(v5[35] + 16);
        WebCore::ResourceResponse::platformLazyInit(a1 + 1272, 1);
        v7 = (WTF::StringImpl **)(a1 + 1312);
        if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 680))(v6, a1 + 1312))
        {
LABEL_106:
          WebCore::PolicyChecker::cannotShowMIMEType(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8)
                                                                           + 280)
                                                               + 24));
LABEL_107:
          WebCore::DocumentLoader::stopLoadingForPolicyChange(a1, 0);
          return;
        }
        WebCore::ResourceResponse::platformLazyInit(a1 + 1272, 1);
        v9 = *v7;
        if (!*v7)
        {
LABEL_14:
          WebCore::ResourceResponse::platformLazyInit(a1 + 1272, 1);
          if (WTF::URL::protocolIs())
          {
            v53 = *(_QWORD *)(a1 + 16);
            if (v53)
            {
              v54 = *(_QWORD **)(v53 + 8);
              if (v54)
              {
                if (*(_QWORD **)(v54[16] + 8) == v54
                  && !*(_BYTE *)(a1 + 3532)
                  && (*(_QWORD *)(v54[17] + 664) & 0x100000) == 0)
                {
                  v55 = (_QWORD *)v54[37];
                  if (v55)
                  {
                    v56 = *(_QWORD *)(a1 + 2784);
                    if (!v56)
                      v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 656);
                    WebCore::ResourceResponse::platformLazyInit(a1 + 1272, 1);
                    WTF::URL::stringCenterEllipsizedToLength((WTF::URL *)(a1 + 1272));
                    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"Not allowed to navigate top frame to data URL '", 48, (uint64_t *)&v79, (int8x16_t *)"'.", 3, buf);
                    WebCore::Document::addConsoleMessage(v55, 8, 2, (WTF::StringImpl **)buf, v56);
                    v58 = *(WTF::StringImpl **)buf;
                    *(_QWORD *)buf = 0;
                    if (v58)
                    {
                      if (*(_DWORD *)v58 == 2)
                        WTF::StringImpl::destroy(v58, v57);
                      else
                        *(_DWORD *)v58 -= 2;
                    }
                    v59 = v79;
                    v79 = 0;
                    if (v59)
                    {
                      if (*(_DWORD *)v59 == 2)
                        WTF::StringImpl::destroy(v59, v57);
                      else
                        *(_DWORD *)v59 -= 2;
                    }
                  }
                  v60 = qword_1ECE7C608;
                  if (!os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_106;
                  v61 = *(_QWORD *)(a1 + 16);
                  if (v61)
                  {
                    v62 = *(_QWORD *)(v61 + 8);
                    if (v62)
                    {
                      WebCore::Frame::pageID(*(WebCore::Frame **)(v61 + 8));
                      if (!v64)
                        v63 = 0;
                      v61 = *(_QWORD *)(v62 + 32);
                      v65 = *(_QWORD *)(*(_QWORD *)(v62 + 128) + 8) == v62;
                      goto LABEL_105;
                    }
                    v63 = 0;
                    v61 = 0;
                  }
                  else
                  {
                    v63 = 0;
                  }
                  v65 = 0;
LABEL_105:
                  *(_DWORD *)buf = 134218752;
                  *(_QWORD *)&buf[4] = a1;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v63;
                  v81 = 2048;
                  v82 = v61;
                  v83 = 1024;
                  v84 = v65;
                  _os_log_impl(&dword_1940B8000, v60, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::continueAfterContentPolicy: cannot show URL", buf, 0x26u);
                  goto LABEL_106;
                }
              }
            }
          }
          goto LABEL_15;
        }
        *(_DWORD *)v9 += 2;
        v79 = v9;
        if (!WebCore::MIMETypeRegistry::isWebArchiveMIMEType((WebCore::MIMETypeRegistry *)&v79, v8))
          goto LABEL_9;
        WebCore::ResourceResponse::platformLazyInit(a1 + 1272, 1);
        if ((WTF::URL::protocolIs() & 1) != 0)
          goto LABEL_9;
        v11 = 0;
        if (*(_QWORD *)(a1 + 360))
          v16 = WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance;
        else
          v16 = 0;
        if (v16)
          goto LABEL_10;
        if ((*(_BYTE *)(a1 + 1056) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a1 + 872));
          *(_BYTE *)(a1 + 1056) |= 1u;
        }
        v17 = (WebCore *)WTF::URL::protocol((WTF::URL *)(a1 + 872));
        *(_QWORD *)buf = v17;
        *(_QWORD *)&buf[8] = v10;
        if (!v17)
          goto LABEL_45;
        if (__ldaxr(WebCore::schemeRegistryLock))
        {
          __clrex();
        }
        else if (!__stxr(1u, WebCore::schemeRegistryLock))
        {
LABEL_34:
          {
            v78 = WebCore::builtinLocalURLSchemes(v17);
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(&WebCore::localURLSchemes(void)::localSchemes, (WTF::ASCIICaseInsensitiveHash **)v78);
          }
          v21 = WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains<WTF::StringViewHashTranslator,WTF::StringView>(&WebCore::localURLSchemes(void)::localSchemes, (unsigned __int8 **)buf, v18, v19);
          v22 = v21;
          v23 = __ldxr(WebCore::schemeRegistryLock);
          if (v23 == 1)
          {
            if (!__stlxr(0, WebCore::schemeRegistryLock))
            {
              if (!v21)
                goto LABEL_45;
LABEL_43:
              v24 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
              v25 = *(_QWORD *)(*(_QWORD *)(v24 + 128) + 8);
              v26 = *(_DWORD *)(*(_QWORD *)(v25 + 136) + 720);
              if (v25 != v24)
              {
                if ((v26 & 2) != 0)
                {
LABEL_9:
                  v11 = 0;
                  goto LABEL_10;
                }
                goto LABEL_45;
              }
              v11 = 0;
              if (*(_BYTE *)(a1 + 3532) || (v26 & 2) != 0)
              {
LABEL_10:
                v12 = v79;
                v79 = 0;
                if (v12)
                {
                  if (*(_DWORD *)v12 == 2)
                    WTF::StringImpl::destroy(v12, v10);
                  else
                    *(_DWORD *)v12 -= 2;
                }
                if ((v11 & 1) != 0)
                  goto LABEL_106;
                goto LABEL_14;
              }
LABEL_45:
              v11 = 1;
              goto LABEL_10;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
          if ((v22 & 1) == 0)
            goto LABEL_45;
          goto LABEL_43;
        }
        v17 = (WebCore *)MEMORY[0x19AEA534C](WebCore::schemeRegistryLock);
        goto LABEL_34;
      }
      if ((a2 - 2) < 2)
      {
        v28 = *(_QWORD *)(a1 + 80);
        if (v28)
        {
          v29 = *(_QWORD *)(v28 + 8);
          if (v29)
          {
            v30 = *(_QWORD *)(v29 + 384);
            if (v30)
              WebCore::InspectorInstrumentation::continueWithPolicyDownload(v5[3], *(Inspector::IdentifiersFactory **)(v30 + 744), a1, a1 + 1272);
          }
        }
        goto LABEL_107;
      }
      if (a2 != 1)
      {
LABEL_15:
        WebCore::ResourceResponse::platformLazyInit(a1 + 1272, 1);
        if ((*(_BYTE *)(a1 + 1280) & 2) != 0)
        {
          WebCore::ResourceResponse::platformLazyInit(a1 + 1272, 1);
          if (*(_WORD *)(a1 + 1408))
          {
            if ((*(__int16 *)(a1 + 1408) - 300) <= 0xFFFFFF9B)
            {
              v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 120);
              if (v48)
              {
                v49 = *(_QWORD *)(v48 + 8);
                if (v49)
                {
                  if (*(_QWORD *)(*(_QWORD *)(v49 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::objectTag + 24))
                  {
                    *(_DWORD *)(v49 + 24) += 2;
                    WebCore::HTMLObjectElement::renderFallbackContent(v49, v13);
                    v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 280) + 16);
                    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v50 + 568))(buf, v50, a1 + 872);
                    v87 = 3;
                    WebCore::DocumentLoader::cancelMainResourceLoad(a1, (uint64_t)buf, 0);
                    WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)buf, v51);
                    if (*(_DWORD *)(v49 + 24) == 2)
                    {
                      if ((*(_WORD *)(v49 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v49, v52);
                    }
                    else
                    {
                      *(_DWORD *)(v49 + 24) -= 2;
                    }
                  }
                }
              }
            }
          }
        }
        if (!*(_BYTE *)(a1 + 3538))
        {
          v14 = *(_QWORD *)(a1 + 360);
          v15 = v14
              ? WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance
              : 0;
          if (v15 && *(_BYTE *)(a1 + 3548))
          {
            if (v14)
            {
              do
                v66 = __ldaxr((unsigned int *)v14);
              while (__stlxr(v66 + 1, (unsigned int *)v14));
              if (*(_QWORD *)(v14 + 48))
              {
                v67 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v67 = off_1E33F38D8;
                v67[1] = a1;
                *(_QWORD *)buf = v67;
                WebCore::FragmentedSharedBuffer::forEachSegmentAsSharedBuffer(v14, buf);
                v68 = *(_QWORD *)buf;
                *(_QWORD *)buf = 0;
                if (v68)
                  (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
              }
              if (*(_BYTE *)(a1 + 3548))
                WebCore::DocumentLoader::finishedLoading((WebCore::DocumentLoader *)a1);
              WebCore::DocumentLoader::clearMainResource((WebCore::DocumentLoader *)a1);
              WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v14, v69);
            }
            else
            {
              WebCore::DocumentLoader::finishedLoading((WebCore::DocumentLoader *)a1);
              WebCore::DocumentLoader::clearMainResource((WebCore::DocumentLoader *)a1);
            }
          }
        }
        return;
      }
      v31 = *(_QWORD *)(a1 + 80);
      if (!v31 || (v32 = *(_QWORD *)(v31 + 8)) == 0)
      {
        v70 = qword_1ECE7C608;
        if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
        {
          WebCore::Frame::pageID((WebCore::Frame *)v5);
          if (v72)
            v73 = v71;
          else
            v73 = 0;
          v74 = *(_QWORD *)(v5[16] + 8) == (_QWORD)v5;
          v75 = v5[4];
          *(_DWORD *)buf = 134218752;
          *(_QWORD *)&buf[4] = a1;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v73;
          v81 = 2048;
          v82 = v75;
          v83 = 1024;
          v84 = v74;
          _os_log_impl(&dword_1940B8000, v70, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::continueAfterContentPolicy: cannot show URL", buf, 0x26u);
          v5 = *(uint64_t **)(*(_QWORD *)(a1 + 16) + 8);
        }
        (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v5[35] + 16) + 592))(buf, *(_QWORD *)(v5[35] + 16), a1 + 872);
        WebCore::DocumentLoader::mainReceivedError(a1, (WebCore::ResourceError *)buf, 0);
        goto LABEL_123;
      }
      v33 = *(_QWORD *)(v32 + 384);
      if (!v33
        || (WebCore::InspectorInstrumentation::continueWithPolicyDownload(v5[3], *(Inspector::IdentifiersFactory **)(v33 + 744), a1, a1 + 1272), (v34 = *(_QWORD *)(a1 + 16)) != 0)&& (v5 = *(uint64_t **)(v34 + 8)) != 0)
      {
        v35 = (WebCore::FrameLoader *)v5[35];
      }
      else
      {
        v35 = 0;
      }
      v36 = WebCore::FrameLoader::effectiveSandboxFlags(v35);
      v37 = *(_QWORD *)(a1 + 16);
      if (v36 < 0)
      {
        if (v37)
        {
          v76 = *(_QWORD *)(v37 + 8);
          if (v76)
          {
            v77 = *(_QWORD **)(v76 + 296);
            if (v77)
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              WebCore::Document::addConsoleMessage(v77, 8, 2, (WTF::StringImpl **)buf, 0);
LABEL_73:
              v43 = *(WTF::StringImpl **)buf;
              *(_QWORD *)buf = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, v42);
                else
                  *(_DWORD *)v43 -= 2;
              }
            }
          }
        }
      }
      else
      {
        if (v37 && (v38 = *(_QWORD *)(v37 + 8)) != 0)
          v39 = *(WebCore::FrameLoader **)(v38 + 280);
        else
          v39 = 0;
        WebCore::FrameLoader::setOriginalURLForDownloadRequest(v39, (WebCore::ResourceRequest *)(a1 + 872));
        if ((*(_BYTE *)(a1 + 1056) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a1 + 872));
          *(_BYTE *)(a1 + 1056) |= 1u;
        }
        v40 = WTF::URL::protocolIs();
        v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 280) + 16);
        if (v40)
        {
          *(_QWORD *)buf = 0;
          (*(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v41 + 472))(v41, a1 + 872, buf, 0);
          goto LABEL_73;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v41 + 856))(v41, a1, a1 + 872, a1 + 1272);
      }
      v44 = *(_QWORD *)(a1 + 80);
      if (!v44 || (v45 = *(_QWORD *)(v44 + 8)) == 0 || (v46 = *(WebCore::SubresourceLoader **)(v45 + 384)) == 0)
      {
        WebCore::DocumentLoader::stopLoadingForPolicyChange(a1, 0);
        return;
      }
      WebCore::DocumentLoader::interruptedForPolicyChangeError((WebCore::DocumentLoader *)buf, a1);
      WebCore::SubresourceLoader::didFail(v46, (WTF::StringImpl **)buf);
LABEL_123:
      WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)buf, v47);
      return;
    }
  }
  v27 = qword_1ECE7C608;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = 0;
    v81 = 2048;
    v82 = 0;
    v83 = 1024;
    v84 = 0;
    v85 = 1024;
    v86 = a2;
    _os_log_impl(&dword_1940B8000, v27, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::continueAfterContentPolicy: policyAction=%i received by DocumentLoader with null frame", buf, 0x2Cu);
  }
}

uint64_t WebCore::DOMTimer::install(_BYTE *a1, uint64_t *a2, int a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  WTF::JSONImpl::Value *v17;
  double v18;
  int v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  double v26;
  uint64_t v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  _QWORD *v33;
  void *v34;
  WebCore::TimerBase *v35;
  uint64_t v36;
  int v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  WTF *v47;
  uint64_t *v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  _QWORD *v56;
  int v57;
  _QWORD *v58;
  int v59;
  WebCore::DOMTimer *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  WTF::JSONImpl::Object *v67;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  _QWORD *v76;
  int v77;
  WebCore::DOMTimer *v78;
  int v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v87;
  int v88;
  uint64_t v89;
  unsigned int *v90;
  double v91;
  uint64_t v92;
  unsigned int v94;
  WTF *v95;
  void *v96;
  WTF *v97;
  void *v98;
  WTF *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  WTF *v105;
  void *v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  double v111;
  double v112;
  uint64_t v113;
  void *v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  _QWORD *v119;
  void *v120;
  WebCore::TimerBase *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  double v128;
  WTF *v129;
  WTF *v130;
  void *v131;
  _QWORD *v132;
  WebCore::TimerBase *v133[3];

  v8 = WTF::fastMalloc((WTF *)0x68);
  v9 = v8;
  *(_DWORD *)(v8 + 24) = 1;
  v10 = (uint64_t *)a1;
  if (!a1[274])
  {
    v11 = a1 - 192;
    v12 = *((_QWORD *)a1 + 64);
    if (v12)
    {
      v13 = *(_BYTE **)(v12 + 8);
      if (v13)
        v11 = v13;
    }
    v10 = (uint64_t *)(v11 + 192);
  }
  *(_QWORD *)v8 = &off_1E33A18C0;
  *(_QWORD *)(v8 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v8, (WebCore::ScriptExecutionContext *)v10);
  *(_QWORD *)v9 = &off_1E33A0540;
  *(_QWORD *)(v9 + 16) = 0;
  if (*((_BYTE *)v10 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x194501F78);
  }
  v132 = (_QWORD *)v9;
  v14 = WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add(v10 + 16, (uint64_t *)&v132, (uint64_t)v133);
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)v9 = &off_1E33FE028;
  v15 = *((_DWORD *)a1 + 45);
  *(_DWORD *)(v9 + 44) = v15;
  *(_QWORD *)(v9 + 48) = 0;
  v16 = *a2;
  *a2 = 0;
  *(_QWORD *)(v9 + 56) = v16;
  *(double *)(v9 + 64) = a4;
  *(_DWORD *)(v9 + 72) = 0;
  v17 = (WTF::JSONImpl::Value *)(a3 ^ 1u);
  *(_BYTE *)(v9 + 76) = a3 ^ 1;
  v18 = 0.0;
  if (a3)
  {
    v18 = 0.001;
    v19 = 5;
  }
  else
  {
    v19 = 10;
  }
  if (v18 >= a4)
    v20 = v18;
  else
    v20 = a4;
  if (v15 >= v19)
  {
    v126 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8);
    if (v126)
      v127 = v126 - 96;
    else
      v127 = 0;
    v128 = (*(double (**)(uint64_t))(*(_QWORD *)v127 + 360))(v127);
    if (v20 < v128)
      v20 = v128;
    if (*(_DWORD *)(v9 + 72) == 1 && v20 < 1.0)
      v20 = 1.0;
  }
  *(double *)(v9 + 80) = v20;
  if (WTF::isMainThread((WTF *)v14))
  {
    {
      v21 = WebCore::currentToken(void)::token;
      if (WebCore::currentToken(void)::token)
        ++*(_DWORD *)WebCore::currentToken(void)::token;
    }
    else
    {
      v21 = 0;
      WebCore::currentToken(void)::token = 0;
    }
  }
  else
  {
    v21 = 0;
  }
  *(_QWORD *)(v9 + 88) = v21;
  *(_QWORD *)(v9 + 96) = 0;
  v22 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 104))(a1);
  ++*(_DWORD *)(v22 + 8);
  v23 = *(_DWORD *)(v9 + 44);
  v24 = *(unsigned __int8 *)(v9 + 76);
  if (*(_BYTE *)(v9 + 76))
    v25 = 10;
  else
    v25 = 5;
  *(_BYTE *)(v9 + 77) = v23 >= v25;
  if (v24)
  {
    v26 = *(double *)(v9 + 80);
    v27 = *(_QWORD *)(v9 + 32);
    if (v27)
      goto LABEL_207;
    v27 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v27 = 1;
    *(_QWORD *)(v27 + 8) = v9;
    v29 = *(unsigned int **)(v9 + 32);
    *(_QWORD *)(v9 + 32) = v27;
    if (!v29)
      goto LABEL_207;
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, v28);
    }
    v27 = *(_QWORD *)(v9 + 32);
    if (v27)
    {
LABEL_207:
      do
        v32 = __ldaxr((unsigned int *)v27);
      while (__stlxr(v32 + 1, (unsigned int *)v27));
    }
    v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v33 = &off_1E33FE4F0;
    v33[1] = v27;
    v132 = v33;
    WebCore::EventLoopTaskGroup::scheduleTask(v22, (uint64_t)(a1 + 96), v23 >= v25, 19, (uint64_t *)&v132, v133, v26);
    v35 = v133[0];
    if (v133[0])
      ++*((_DWORD *)v133[0] + 12);
    v36 = *(_QWORD *)(v9 + 48);
    *(_QWORD *)(v9 + 48) = v35;
    if (v36)
      WTF::RefCounted<WebCore::EventLoopTimer>::deref(v36 + 48, v34);
    WebCore::EventLoopTimerHandle::~EventLoopTimerHandle((WebCore::EventLoopTimerHandle *)v133, v34);
    if (v132)
      (*(void (**)(_QWORD *))(*v132 + 8))(v132);
  }
  else
  {
    v111 = *(double *)(v9 + 64);
    v112 = *(double *)(v9 + 80);
    v113 = *(_QWORD *)(v9 + 32);
    if (v113)
      goto LABEL_208;
    v113 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v113 = 1;
    *(_QWORD *)(v113 + 8) = v9;
    v115 = *(unsigned int **)(v9 + 32);
    *(_QWORD *)(v9 + 32) = v113;
    if (!v115)
      goto LABEL_208;
    do
    {
      v116 = __ldaxr(v115);
      v117 = v116 - 1;
    }
    while (__stlxr(v117, v115));
    if (!v117)
    {
      atomic_store(1u, v115);
      WTF::fastFree((WTF *)v115, v114);
    }
    v113 = *(_QWORD *)(v9 + 32);
    if (v113)
    {
LABEL_208:
      do
        v118 = __ldaxr((unsigned int *)v113);
      while (__stlxr(v118 + 1, (unsigned int *)v113));
    }
    v119 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v119 = &off_1E33FE518;
    v119[1] = v113;
    v132 = v119;
    WebCore::EventLoopTaskGroup::scheduleRepeatingTask(v22, (_QWORD *)a1 + 12, v23 >= v25, 19, (uint64_t *)&v132, v133, v111, v112);
    v121 = v133[0];
    if (v133[0])
      ++*((_DWORD *)v133[0] + 12);
    v122 = *(_QWORD *)(v9 + 48);
    *(_QWORD *)(v9 + 48) = v121;
    if (v122)
      WTF::RefCounted<WebCore::EventLoopTimer>::deref(v122 + 48, v120);
    WebCore::EventLoopTimerHandle::~EventLoopTimerHandle((WebCore::EventLoopTimerHandle *)v133, v120);
    v123 = (uint64_t)v132;
    v132 = 0;
    if (v123)
      (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  }
  v37 = *(_DWORD *)(v22 + 8);
  if (!v37)
  {
    __break(0xC471u);
    JUMPOUT(0x194501F98);
  }
  *(_DWORD *)(v22 + 8) = v37 - 1;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v9);
  if (*(_BYTE *)(v9 + 76) && *(double *)(v9 + 80) <= 0.001 && !a1[274])
  {
    *((_DWORD *)a1 - 42) += 2;
    v39 = *((_QWORD *)a1 + 42);
    if (v39)
    {
      v40 = *(_QWORD *)(v39 + 8);
      if (v40)
      {
        v41 = *(_QWORD *)(v40 + 24);
        if (v41)
        {
          v42 = *(_QWORD *)(v41 + 8);
          if (v42)
          {
            ++*(_DWORD *)v42;
            v43 = *(_QWORD *)(v42 + 1784);
            v44 = WTF::fastMalloc((WTF *)0x10);
            *(_DWORD *)v44 = 1;
            v45 = *(_QWORD *)(v43 + 8);
            if (v45)
              goto LABEL_209;
            v45 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v45 = 1;
            *(_QWORD *)(v45 + 8) = v43;
            v107 = *(unsigned int **)(v43 + 8);
            *(_QWORD *)(v43 + 8) = v45;
            if (!v107)
              goto LABEL_209;
            do
            {
              v108 = __ldaxr(v107);
              v109 = v108 - 1;
            }
            while (__stlxr(v109, v107));
            if (!v109)
            {
              atomic_store(1u, v107);
              WTF::fastFree((WTF *)v107, v38);
            }
            v45 = *(_QWORD *)(v43 + 8);
            if (v45)
            {
LABEL_209:
              do
                v46 = __ldaxr((unsigned int *)v45);
              while (__stlxr(v46 + 1, (unsigned int *)v45));
            }
            *(_QWORD *)(v44 + 8) = v45;
            ++*(_QWORD *)(v43 + 24);
            v47 = *(WTF **)(v9 + 96);
            *(_QWORD *)(v9 + 96) = v44;
            if (v47)
            {
              if (*(_DWORD *)v47 == 1)
              {
                v101 = *((_QWORD *)v47 + 1);
                if (v101)
                {
                  v102 = *(_QWORD *)(v101 + 8);
                  if (v102)
                    --*(_QWORD *)(v102 + 24);
                  *((_QWORD *)v47 + 1) = 0;
                  do
                  {
                    v103 = __ldaxr((unsigned int *)v101);
                    v104 = v103 - 1;
                  }
                  while (__stlxr(v104, (unsigned int *)v101));
                  if (!v104)
                  {
                    atomic_store(1u, (unsigned int *)v101);
                    v129 = v47;
                    WTF::fastFree((WTF *)v101, v38);
                    v47 = v129;
                  }
                }
                else
                {
                  *((_QWORD *)v47 + 1) = 0;
                }
                WTF::fastFree(v47, v38);
              }
              else
              {
                --*(_DWORD *)v47;
              }
            }
            if (*(_DWORD *)v42 == 1)
            {
              WebCore::Page::~Page(v42);
              WTF::fastFree(v99, v100);
            }
            else
            {
              --*(_DWORD *)v42;
            }
          }
        }
      }
    }
    if (*((_DWORD *)a1 - 42) == 2)
    {
      if ((*((_WORD *)a1 - 81) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(a1 - 192), v38);
    }
    else
    {
      *((_DWORD *)a1 - 42) -= 2;
    }
  }
  v48 = (uint64_t *)(a1 + 136);
  while (1)
  {
    v49 = *((_DWORD *)a1 + 44);
    v50 = v49 < 0 ? 1 : v49 + 1;
    *((_DWORD *)a1 + 44) = v50;
    *(_DWORD *)(v9 + 40) = v50;
    v51 = *((_QWORD *)a1 + 17);
    if (v51
      || (WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::RefPtr<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash((uint64_t *)a1 + 17, 8u), (v51 = *v48) != 0))
    {
      v52 = *(_DWORD *)(v51 - 8);
    }
    else
    {
      v52 = 0;
    }
    v53 = 9 * ((v50 + ~(v50 << 15)) ^ ((v50 + ~(v50 << 15)) >> 10));
    v54 = (v53 ^ (v53 >> 6)) + ~((v53 ^ (v53 >> 6)) << 11);
    v55 = v52 & (v54 ^ HIWORD(v54));
    v56 = (_QWORD *)(v51 + 16 * v55);
    v57 = *(_DWORD *)v56;
    if (!*(_DWORD *)v56)
      break;
    v58 = 0;
    v59 = 1;
    while (v57 != v50)
    {
      if (v57 == -1)
        v58 = v56;
      v55 = (v55 + v59) & v52;
      v56 = (_QWORD *)(v51 + 16 * v55);
      v57 = *(_DWORD *)v56;
      ++v59;
      if (!*(_DWORD *)v56)
      {
        if (v58)
        {
          *v58 = 0;
          v58[1] = 0;
          --*(_DWORD *)(*v48 - 16);
          v56 = v58;
        }
        goto LABEL_69;
      }
    }
  }
LABEL_69:
  *(_DWORD *)v56 = v50;
  ++*(_DWORD *)(v9 + 24);
  v60 = (WebCore::DOMTimer *)v56[1];
  v56[1] = v9;
  if (v60)
  {
    if (*((_DWORD *)v60 + 6) == 1)
    {
      WebCore::DOMTimer::~DOMTimer(v60, v38);
      WTF::fastFree(v97, v98);
    }
    else
    {
      --*((_DWORD *)v60 + 6);
    }
  }
  v61 = *v48;
  if (*v48)
    v62 = *(_DWORD *)(v61 - 12) + 1;
  else
    v62 = 1;
  *(_DWORD *)(v61 - 12) = v62;
  v63 = *v48;
  if (*v48)
    v64 = *(_DWORD *)(v63 - 12);
  else
    v64 = 0;
  v65 = (*(_DWORD *)(v63 - 16) + v64);
  v66 = *(unsigned int *)(v63 - 4);
  if (v66 > 0x400)
  {
    if (v66 > 2 * v65)
      goto LABEL_78;
    goto LABEL_131;
  }
  if (3 * v66 <= 4 * v65)
  {
    if (!(_DWORD)v66)
    {
      v94 = 8;
      goto LABEL_145;
    }
LABEL_131:
    v94 = (_DWORD)v66 << (6 * *(_DWORD *)(v63 - 12) >= (2 * v66));
LABEL_145:
    WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::RefPtr<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash((uint64_t *)a1 + 17, v94);
  }
LABEL_78:
  v67 = (WTF::JSONImpl::Object *)*(unsigned int *)(v9 + 40);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v110 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)a1, (WebCore::ScriptExecutionContext *)v38);
    if (v110)
      WebCore::InspectorInstrumentation::didInstallTimerImpl(v110, v67, v17, (WebCore::ScriptExecutionContext *)a1, a4);
  }
  if (!a1[274])
  {
    if ((byte_1ECE83858 & 1) == 0)
    {
      qword_1ECE83850 = 0;
      byte_1ECE83858 = 1;
    }
    v69 = *(_DWORD *)(v9 + 40);
    v70 = *(_DWORD *)(v9 + 24);
    *(_DWORD *)(v9 + 24) = v70 + 1;
    if (_MergedGlobals_209 == 1)
    {
      v71 = qword_1ECE83850;
      if (qword_1ECE83850
        || (WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(8u, 0), (v71 = qword_1ECE83850) != 0))
      {
        v72 = *(_DWORD *)(v71 - 8);
      }
      else
      {
        v72 = 0;
      }
      v73 = 9 * ((v69 + ~(v69 << 15)) ^ ((v69 + ~(v69 << 15)) >> 10));
      v74 = (v73 ^ (v73 >> 6)) + ~((v73 ^ (v73 >> 6)) << 11);
      v75 = v72 & (v74 ^ HIWORD(v74));
      v76 = (_QWORD *)(v71 + 16 * v75);
      v77 = *(_DWORD *)v76;
      if (!*(_DWORD *)v76)
      {
LABEL_89:
        *(_DWORD *)v76 = v69;
        v78 = (WebCore::DOMTimer *)v76[1];
        v76[1] = v9;
        if (v78)
        {
          if (*((_DWORD *)v78 + 6) == 1)
          {
            WebCore::DOMTimer::~DOMTimer(v78, v38);
            WTF::fastFree(v105, v106);
          }
          else
          {
            --*((_DWORD *)v78 + 6);
          }
        }
        if (qword_1ECE83850)
          v79 = *(_DWORD *)(qword_1ECE83850 - 12) + 1;
        else
          v79 = 1;
        *(_DWORD *)(qword_1ECE83850 - 12) = v79;
        if (qword_1ECE83850)
          v80 = *(_DWORD *)(qword_1ECE83850 - 12);
        else
          v80 = 0;
        v81 = (*(_DWORD *)(qword_1ECE83850 - 16) + v80);
        v82 = *(unsigned int *)(qword_1ECE83850 - 4);
        if (v82 > 0x400)
        {
          if (v82 > 2 * v81)
            goto LABEL_100;
        }
        else if (3 * v82 > 4 * v81)
        {
          goto LABEL_100;
        }
        WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::expand(v76);
LABEL_100:
        if (a1[274])
          goto LABEL_127;
        *((_DWORD *)a1 - 42) += 2;
        v83 = WebCore::Document::contentChangeObserver((WebCore::Document *)(a1 - 192));
        v84 = *(_QWORD *)(v83 + 8);
        if ((*(_QWORD *)(*(_QWORD *)(v84 + 680) + 704) & 0x200000000000) == 0)
          goto LABEL_122;
        v85 = v83;
        if (*(_BYTE *)(v83 + 152)
          || *(_BYTE *)(v83 + 158)
          || *(_BYTE *)(v83 + 157)
          || *(_BYTE *)(v83 + 156)
          || *(_BYTE *)(v83 + 154))
        {
          if (*(_BYTE *)(v83 + 155))
            goto LABEL_115;
        }
        else if ((*(_QWORD *)(v83 + 48) & 0xFFFFFFFFFFFFLL) != 0
               && *(double *)((*(_QWORD *)(v83 + 48) & 0xFFFFFFFFFFFFLL) + 8) != 0.0
               && *(_BYTE *)(v83 + 155) != 0)
        {
LABEL_115:
          if (*(_DWORD *)(v83 + 120) != 2)
          {
            v87 = *(unsigned __int8 *)(v84 + 467);
            v88 = a4 <= 0.4 ? (int)v17 : 0;
            if (!v87 && v88)
            {
              WTF::WeakHashSet<WebCore::DOMTimer const,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::DOMTimer>(v83 + 72, (_QWORD *)v9, (uint64_t)v133);
              *(_DWORD *)(v85 + 120) = 1;
            }
          }
        }
LABEL_122:
        if (WebCore::DeferDOMTimersForScope::s_isDeferring)
        {
          v89 = WebCore::Document::domTimerHoldingTank((WebCore::Document *)(a1 - 192));
          v90 = WTF::WeakHashSet<WebCore::DOMTimer const,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::DOMTimer>(v89, (_QWORD *)v9, (uint64_t)v133);
          if ((*(_QWORD *)(v89 + 48) & 0xFFFFFFFFFFFFLL) == 0
            || *(double *)((*(_QWORD *)(v89 + 48) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
          {
            *(_QWORD *)(v89 + 40) = 0;
            WTF::MonotonicTime::now((WTF::MonotonicTime *)v90);
            WebCore::TimerBase::setNextFireTime(v89 + 16, v91 + 0.032);
          }
        }
        if (*((_DWORD *)a1 - 42) == 2)
        {
          if ((*((_WORD *)a1 - 81) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)(a1 - 192), v38);
        }
        else
        {
          *((_DWORD *)a1 - 42) -= 2;
        }
        goto LABEL_127;
      }
      v124 = 0;
      v125 = 1;
      while (v77 != v69)
      {
        if (v77 == -1)
          v124 = v76;
        v75 = (v75 + v125) & v72;
        v76 = (_QWORD *)(v71 + 16 * v75);
        v77 = *(_DWORD *)v76;
        ++v125;
        if (!*(_DWORD *)v76)
        {
          if (v124)
          {
            *v124 = 0;
            v124[1] = 0;
            --*(_DWORD *)(v71 - 16);
            v76 = v124;
          }
          goto LABEL_89;
        }
      }
      v70 = *(_DWORD *)(v9 + 24) - 1;
      if (*(_DWORD *)(v9 + 24) != 1)
        goto LABEL_84;
    }
    else if (v70)
    {
LABEL_84:
      *(_DWORD *)(v9 + 24) = v70;
      goto LABEL_100;
    }
    WebCore::DOMTimer::~DOMTimer((WebCore::DOMTimer *)v9, v38);
    WTF::fastFree(v130, v131);
    goto LABEL_100;
  }
LABEL_127:
  v92 = *(unsigned int *)(v9 + 40);
  if (*(_DWORD *)(v9 + 24) == 1)
  {
    WebCore::DOMTimer::~DOMTimer((WebCore::DOMTimer *)v9, v38);
    WTF::fastFree(v95, v96);
  }
  else
  {
    --*(_DWORD *)(v9 + 24);
  }
  return v92;
}

_QWORD *WebCore::EventNames::EventNames(WebCore::EventNames *this, uint64_t a2)
{
  _QWORD *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  int v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  int v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  int v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  int v279;
  uint64_t v280;
  int v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  int v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  int v303;
  uint64_t v304;
  int v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  int v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  int v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  int v321;
  uint64_t v322;
  int v323;
  uint64_t v324;
  int v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  int v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  int v337;
  uint64_t v338;
  int v339;
  uint64_t v340;
  int v341;
  uint64_t v342;
  int v343;
  uint64_t v344;
  int v345;
  uint64_t v346;
  int v347;
  uint64_t v348;
  int v349;
  uint64_t v350;
  int v351;
  uint64_t v352;
  int v353;
  uint64_t v354;
  int v355;
  uint64_t v356;
  int v357;
  uint64_t v358;
  int v359;
  uint64_t v360;
  int v361;
  uint64_t v362;
  int v363;
  uint64_t v364;
  int v365;
  uint64_t v366;
  int v367;
  uint64_t v368;
  int v369;
  uint64_t v370;
  int v371;
  uint64_t v372;
  int v373;
  uint64_t v374;
  int v375;
  uint64_t v376;
  int v377;
  uint64_t v378;
  int v379;
  uint64_t v380;
  int v381;
  uint64_t v382;
  int v383;
  uint64_t v384;
  int v385;
  uint64_t v386;
  int v387;
  uint64_t v388;
  int v389;
  uint64_t v390;
  int v391;
  uint64_t v392;
  int v393;
  uint64_t v394;
  int v395;
  uint64_t v396;
  int v397;
  uint64_t v398;
  int v399;
  uint64_t v400;
  int v401;
  uint64_t v402;
  int v403;
  uint64_t v404;
  int v405;
  uint64_t v406;
  int v407;
  uint64_t v408;
  int v409;
  uint64_t v410;
  int v411;
  uint64_t v412;
  int v413;
  uint64_t v414;
  int v415;
  uint64_t v416;
  int v417;
  uint64_t v418;
  int v419;
  uint64_t v420;
  int v421;
  uint64_t v422;
  int v423;
  uint64_t v424;
  int v425;
  uint64_t v426;
  int v427;
  uint64_t v428;
  int v429;
  uint64_t v430;
  int v431;
  uint64_t v432;
  int v433;
  uint64_t v434;
  int v435;
  uint64_t v436;
  int v437;
  uint64_t v438;
  int v439;
  uint64_t v440;
  int v441;
  uint64_t v442;
  int v443;
  uint64_t v444;
  int v445;
  uint64_t v446;
  int v447;
  uint64_t v448;
  int v449;
  uint64_t v450;
  int v451;
  uint64_t v452;
  int v453;
  uint64_t v454;
  int v455;
  uint64_t v456;
  int v457;
  uint64_t v458;
  int v459;
  uint64_t v460;
  int v461;
  uint64_t v462;
  int v463;
  uint64_t v464;
  int v465;
  uint64_t v466;
  int v467;
  uint64_t v468;
  int v469;
  uint64_t v470;
  int v471;
  uint64_t v472;
  int v473;
  uint64_t v474;
  int v475;
  uint64_t v476;
  int v477;
  uint64_t v478;
  int v479;
  uint64_t v480;
  int v481;
  uint64_t v482;
  int v483;
  uint64_t v484;
  int v485;
  uint64_t v486;
  int v487;
  uint64_t v488;
  int v489;
  uint64_t v490;
  int v491;
  uint64_t v492;
  int v493;
  uint64_t v494;
  int v495;
  uint64_t v496;
  int v497;
  uint64_t v498;
  int v499;
  uint64_t v500;
  int v501;
  uint64_t v502;
  int v503;
  uint64_t v504;
  int v505;
  uint64_t v506;
  int v507;
  uint64_t v508;
  int v509;
  uint64_t v510;
  int v511;
  uint64_t v512;
  int v513;
  uint64_t v514;
  int v515;
  uint64_t v516;
  int v517;
  uint64_t v518;
  int v519;
  uint64_t v520;
  int v521;
  uint64_t v522;
  int v523;
  uint64_t v524;
  int v525;
  uint64_t v526;
  int v527;
  uint64_t v528;
  int v529;
  uint64_t v530;
  int v531;
  uint64_t v532;
  int v533;
  uint64_t v534;
  int v535;
  uint64_t v536;
  int v537;
  uint64_t v538;
  int v539;
  uint64_t v540;
  int v541;
  uint64_t v542;
  int v543;
  uint64_t v544;
  int v545;
  uint64_t v546;
  int v547;
  uint64_t v548;
  int v549;
  uint64_t v550;
  int v551;
  uint64_t v552;
  int v553;
  uint64_t v554;
  int v555;
  uint64_t v556;
  int v557;
  uint64_t v558;
  int v559;
  uint64_t v560;
  int v561;
  uint64_t v562;
  int v563;
  uint64_t v564;
  int v565;
  uint64_t v566;
  int v567;
  uint64_t v568;
  int v569;
  uint64_t v570;
  int v571;
  uint64_t v572;
  int v573;
  uint64_t v574;
  int v575;
  uint64_t v576;
  int v577;
  uint64_t v578;
  int v579;
  uint64_t v580;
  int v581;
  uint64_t v582;
  int v583;
  uint64_t v584;
  int v585;
  uint64_t v586;
  int v587;
  uint64_t v588;
  int v589;
  uint64_t v590;
  int v591;
  uint64_t v592;
  int v593;
  uint64_t v594;
  int v595;
  uint64_t v596;
  int v597;
  uint64_t v598;
  int v599;
  uint64_t v600;
  int v601;
  uint64_t v602;
  int v603;
  uint64_t v604;
  int v605;
  uint64_t v606;
  int v607;
  uint64_t v608;
  int v609;
  uint64_t v610;
  int v611;
  uint64_t v612;
  int v613;
  uint64_t v614;
  int v615;
  uint64_t v616;
  int v617;
  uint64_t v618;
  int v619;
  uint64_t v620;
  int v621;
  uint64_t v622;
  int v623;
  uint64_t v624;
  int v625;
  uint64_t v626;
  int v627;
  uint64_t v628;
  int v629;
  uint64_t v630;
  int v631;
  uint64_t v632;
  int v633;
  uint64_t v634;
  int v635;
  uint64_t v636;
  int v637;
  uint64_t v638;
  int v639;
  uint64_t v640;
  int v641;
  uint64_t v642;
  int v643;
  uint64_t v644;
  int v645;
  uint64_t v646;

  v2 = (_QWORD *)MEMORY[0x1E0C80A78](this, a2);
  v646 = *MEMORY[0x1E0C80C00];
  WTF::AtomStringImpl::add();
  *v2 = v8;
  WTF::AtomStringImpl::add();
  v2[1] = v8;
  WTF::AtomStringImpl::add();
  v2[2] = v8;
  WTF::AtomStringImpl::add();
  v2[3] = v8;
  WTF::AtomStringImpl::add();
  v2[4] = v8;
  WTF::AtomStringImpl::add();
  v2[5] = v8;
  WTF::AtomStringImpl::add();
  v2[6] = v8;
  WTF::AtomStringImpl::add();
  v2[7] = v8;
  WTF::AtomStringImpl::add();
  v2[8] = v8;
  WTF::AtomStringImpl::add();
  v2[9] = v8;
  WTF::AtomStringImpl::add();
  v2[10] = v8;
  WTF::AtomStringImpl::add();
  v2[11] = v8;
  WTF::AtomStringImpl::add();
  v2[12] = v8;
  WTF::AtomStringImpl::add();
  v2[13] = v8;
  WTF::AtomStringImpl::add();
  v2[14] = v8;
  WTF::AtomStringImpl::add();
  v2[15] = v8;
  WTF::AtomStringImpl::add();
  v2[16] = v8;
  WTF::AtomStringImpl::add();
  v2[17] = v8;
  WTF::AtomStringImpl::add();
  v2[18] = v8;
  WTF::AtomStringImpl::add();
  v2[19] = v8;
  WTF::AtomStringImpl::add();
  v2[20] = v8;
  WTF::AtomStringImpl::add();
  v2[21] = v8;
  WTF::AtomStringImpl::add();
  v2[22] = v8;
  WTF::AtomStringImpl::add();
  v2[23] = v8;
  WTF::AtomStringImpl::add();
  v2[24] = v8;
  WTF::AtomStringImpl::add();
  v2[25] = v8;
  WTF::AtomStringImpl::add();
  v2[26] = v8;
  WTF::AtomStringImpl::add();
  v2[27] = v8;
  WTF::AtomStringImpl::add();
  v2[28] = v8;
  WTF::AtomStringImpl::add();
  v2[29] = v8;
  WTF::AtomStringImpl::add();
  v2[30] = v8;
  WTF::AtomStringImpl::add();
  v2[31] = v8;
  WTF::AtomStringImpl::add();
  v2[32] = v8;
  WTF::AtomStringImpl::add();
  v2[33] = v8;
  WTF::AtomStringImpl::add();
  v2[34] = v8;
  WTF::AtomStringImpl::add();
  v2[35] = v8;
  WTF::AtomStringImpl::add();
  v2[36] = v8;
  WTF::AtomStringImpl::add();
  v2[37] = v8;
  WTF::AtomStringImpl::add();
  v2[38] = v8;
  WTF::AtomStringImpl::add();
  v2[39] = v8;
  WTF::AtomStringImpl::add();
  v2[40] = v8;
  WTF::AtomStringImpl::add();
  v2[41] = v8;
  WTF::AtomStringImpl::add();
  v2[42] = v8;
  WTF::AtomStringImpl::add();
  v2[43] = v8;
  WTF::AtomStringImpl::add();
  v2[44] = v8;
  WTF::AtomStringImpl::add();
  v2[45] = v8;
  WTF::AtomStringImpl::add();
  v2[46] = v8;
  WTF::AtomStringImpl::add();
  v2[47] = v8;
  WTF::AtomStringImpl::add();
  v2[48] = v8;
  WTF::AtomStringImpl::add();
  v2[49] = v8;
  WTF::AtomStringImpl::add();
  v2[50] = v8;
  WTF::AtomStringImpl::add();
  v2[51] = v8;
  WTF::AtomStringImpl::add();
  v2[52] = v8;
  WTF::AtomStringImpl::add();
  v2[53] = v8;
  WTF::AtomStringImpl::add();
  v2[54] = v8;
  WTF::AtomStringImpl::add();
  v2[55] = v8;
  WTF::AtomStringImpl::add();
  v2[56] = v8;
  WTF::AtomStringImpl::add();
  v2[57] = v8;
  WTF::AtomStringImpl::add();
  v2[58] = v8;
  WTF::AtomStringImpl::add();
  v2[59] = v8;
  WTF::AtomStringImpl::add();
  v2[60] = v8;
  WTF::AtomStringImpl::add();
  v2[61] = v8;
  WTF::AtomStringImpl::add();
  v2[62] = v8;
  WTF::AtomStringImpl::add();
  v2[63] = v8;
  WTF::AtomStringImpl::add();
  v2[64] = v8;
  WTF::AtomStringImpl::add();
  v2[65] = v8;
  WTF::AtomStringImpl::add();
  v2[66] = v8;
  WTF::AtomStringImpl::add();
  v2[67] = v8;
  WTF::AtomStringImpl::add();
  v2[68] = v8;
  WTF::AtomStringImpl::add();
  v2[69] = v8;
  WTF::AtomStringImpl::add();
  v2[70] = v8;
  WTF::AtomStringImpl::add();
  v2[71] = v8;
  WTF::AtomStringImpl::add();
  v2[72] = v8;
  WTF::AtomStringImpl::add();
  v2[73] = v8;
  WTF::AtomStringImpl::add();
  v2[74] = v8;
  WTF::AtomStringImpl::add();
  v2[75] = v8;
  WTF::AtomStringImpl::add();
  v2[76] = v8;
  WTF::AtomStringImpl::add();
  v2[77] = v8;
  WTF::AtomStringImpl::add();
  v2[78] = v8;
  WTF::AtomStringImpl::add();
  v2[79] = v8;
  WTF::AtomStringImpl::add();
  v2[80] = v8;
  WTF::AtomStringImpl::add();
  v2[81] = v8;
  WTF::AtomStringImpl::add();
  v2[82] = v8;
  WTF::AtomStringImpl::add();
  v2[83] = v8;
  WTF::AtomStringImpl::add();
  v2[84] = v8;
  WTF::AtomStringImpl::add();
  v2[85] = v8;
  WTF::AtomStringImpl::add();
  v2[86] = v8;
  WTF::AtomStringImpl::add();
  v2[87] = v8;
  WTF::AtomStringImpl::add();
  v2[88] = v8;
  WTF::AtomStringImpl::add();
  v2[89] = v8;
  WTF::AtomStringImpl::add();
  v2[90] = v8;
  WTF::AtomStringImpl::add();
  v2[91] = v8;
  WTF::AtomStringImpl::add();
  v2[92] = v8;
  WTF::AtomStringImpl::add();
  v2[93] = v8;
  WTF::AtomStringImpl::add();
  v2[94] = v8;
  WTF::AtomStringImpl::add();
  v2[95] = v8;
  WTF::AtomStringImpl::add();
  v2[96] = v8;
  WTF::AtomStringImpl::add();
  v2[97] = v8;
  WTF::AtomStringImpl::add();
  v2[98] = v8;
  WTF::AtomStringImpl::add();
  v2[99] = v8;
  WTF::AtomStringImpl::add();
  v2[100] = v8;
  WTF::AtomStringImpl::add();
  v2[101] = v8;
  WTF::AtomStringImpl::add();
  v2[102] = v8;
  WTF::AtomStringImpl::add();
  v2[103] = v8;
  WTF::AtomStringImpl::add();
  v2[104] = v8;
  WTF::AtomStringImpl::add();
  v2[105] = v8;
  WTF::AtomStringImpl::add();
  v2[106] = v8;
  WTF::AtomStringImpl::add();
  v2[107] = v8;
  WTF::AtomStringImpl::add();
  v2[108] = v8;
  WTF::AtomStringImpl::add();
  v2[109] = v8;
  WTF::AtomStringImpl::add();
  v2[110] = v8;
  WTF::AtomStringImpl::add();
  v2[111] = v8;
  WTF::AtomStringImpl::add();
  v2[112] = v8;
  WTF::AtomStringImpl::add();
  v2[113] = v8;
  WTF::AtomStringImpl::add();
  v2[114] = v8;
  WTF::AtomStringImpl::add();
  v2[115] = v8;
  WTF::AtomStringImpl::add();
  v2[116] = v8;
  WTF::AtomStringImpl::add();
  v2[117] = v8;
  WTF::AtomStringImpl::add();
  v2[118] = v8;
  WTF::AtomStringImpl::add();
  v2[119] = v8;
  WTF::AtomStringImpl::add();
  v2[120] = v8;
  WTF::AtomStringImpl::add();
  v2[121] = v8;
  WTF::AtomStringImpl::add();
  v2[122] = v8;
  WTF::AtomStringImpl::add();
  v2[123] = v8;
  WTF::AtomStringImpl::add();
  v2[124] = v8;
  WTF::AtomStringImpl::add();
  v2[125] = v8;
  WTF::AtomStringImpl::add();
  v2[126] = v8;
  WTF::AtomStringImpl::add();
  v2[127] = v8;
  WTF::AtomStringImpl::add();
  v2[128] = v8;
  WTF::AtomStringImpl::add();
  v2[129] = v8;
  WTF::AtomStringImpl::add();
  v2[130] = v8;
  WTF::AtomStringImpl::add();
  v2[131] = v8;
  WTF::AtomStringImpl::add();
  v2[132] = v8;
  WTF::AtomStringImpl::add();
  v2[133] = v8;
  WTF::AtomStringImpl::add();
  v2[134] = v8;
  WTF::AtomStringImpl::add();
  v2[135] = v8;
  WTF::AtomStringImpl::add();
  v2[136] = v8;
  WTF::AtomStringImpl::add();
  v2[137] = v8;
  WTF::AtomStringImpl::add();
  v2[138] = v8;
  WTF::AtomStringImpl::add();
  v2[139] = v8;
  WTF::AtomStringImpl::add();
  v2[140] = v8;
  WTF::AtomStringImpl::add();
  v2[141] = v8;
  WTF::AtomStringImpl::add();
  v2[142] = v8;
  WTF::AtomStringImpl::add();
  v2[143] = v8;
  WTF::AtomStringImpl::add();
  v2[144] = v8;
  WTF::AtomStringImpl::add();
  v2[145] = v8;
  WTF::AtomStringImpl::add();
  v2[146] = v8;
  WTF::AtomStringImpl::add();
  v2[147] = v8;
  WTF::AtomStringImpl::add();
  v2[148] = v8;
  WTF::AtomStringImpl::add();
  v2[149] = v8;
  WTF::AtomStringImpl::add();
  v2[150] = v8;
  WTF::AtomStringImpl::add();
  v2[151] = v8;
  WTF::AtomStringImpl::add();
  v2[152] = v8;
  WTF::AtomStringImpl::add();
  v2[153] = v8;
  WTF::AtomStringImpl::add();
  v2[154] = v8;
  WTF::AtomStringImpl::add();
  v2[155] = v8;
  WTF::AtomStringImpl::add();
  v2[156] = v8;
  WTF::AtomStringImpl::add();
  v2[157] = v8;
  WTF::AtomStringImpl::add();
  v2[158] = v8;
  WTF::AtomStringImpl::add();
  v2[159] = v8;
  WTF::AtomStringImpl::add();
  v2[160] = v8;
  WTF::AtomStringImpl::add();
  v2[161] = v8;
  WTF::AtomStringImpl::add();
  v2[162] = v8;
  WTF::AtomStringImpl::add();
  v2[163] = v8;
  WTF::AtomStringImpl::add();
  v2[164] = v8;
  WTF::AtomStringImpl::add();
  v2[165] = v8;
  WTF::AtomStringImpl::add();
  v2[166] = v8;
  WTF::AtomStringImpl::add();
  v2[167] = v8;
  WTF::AtomStringImpl::add();
  v2[168] = v8;
  WTF::AtomStringImpl::add();
  v2[169] = v8;
  WTF::AtomStringImpl::add();
  v2[170] = v8;
  WTF::AtomStringImpl::add();
  v2[171] = v8;
  WTF::AtomStringImpl::add();
  v2[172] = v8;
  WTF::AtomStringImpl::add();
  v2[173] = v8;
  WTF::AtomStringImpl::add();
  v2[174] = v8;
  WTF::AtomStringImpl::add();
  v2[175] = v8;
  WTF::AtomStringImpl::add();
  v2[176] = v8;
  WTF::AtomStringImpl::add();
  v2[177] = v8;
  WTF::AtomStringImpl::add();
  v2[178] = v8;
  WTF::AtomStringImpl::add();
  v2[179] = v8;
  WTF::AtomStringImpl::add();
  v2[180] = v8;
  WTF::AtomStringImpl::add();
  v2[181] = v8;
  WTF::AtomStringImpl::add();
  v2[182] = v8;
  WTF::AtomStringImpl::add();
  v2[183] = v8;
  WTF::AtomStringImpl::add();
  v2[184] = v8;
  WTF::AtomStringImpl::add();
  v2[185] = v8;
  WTF::AtomStringImpl::add();
  v2[186] = v8;
  WTF::AtomStringImpl::add();
  v2[187] = v8;
  WTF::AtomStringImpl::add();
  v2[188] = v8;
  WTF::AtomStringImpl::add();
  v2[189] = v8;
  WTF::AtomStringImpl::add();
  v2[190] = v8;
  WTF::AtomStringImpl::add();
  v2[191] = v8;
  WTF::AtomStringImpl::add();
  v2[192] = v8;
  WTF::AtomStringImpl::add();
  v2[193] = v8;
  WTF::AtomStringImpl::add();
  v2[194] = v8;
  WTF::AtomStringImpl::add();
  v2[195] = v8;
  WTF::AtomStringImpl::add();
  v2[196] = v8;
  WTF::AtomStringImpl::add();
  v2[197] = v8;
  WTF::AtomStringImpl::add();
  v2[198] = v8;
  WTF::AtomStringImpl::add();
  v2[199] = v8;
  WTF::AtomStringImpl::add();
  v2[200] = v8;
  WTF::AtomStringImpl::add();
  v2[201] = v8;
  WTF::AtomStringImpl::add();
  v2[202] = v8;
  WTF::AtomStringImpl::add();
  v2[203] = v8;
  WTF::AtomStringImpl::add();
  v2[204] = v8;
  WTF::AtomStringImpl::add();
  v2[205] = v8;
  WTF::AtomStringImpl::add();
  v2[206] = v8;
  WTF::AtomStringImpl::add();
  v2[207] = v8;
  WTF::AtomStringImpl::add();
  v2[208] = v8;
  WTF::AtomStringImpl::add();
  v2[209] = v8;
  WTF::AtomStringImpl::add();
  v2[210] = v8;
  WTF::AtomStringImpl::add();
  v2[211] = v8;
  WTF::AtomStringImpl::add();
  v2[212] = v8;
  WTF::AtomStringImpl::add();
  v2[213] = v8;
  WTF::AtomStringImpl::add();
  v2[214] = v8;
  WTF::AtomStringImpl::add();
  v2[215] = v8;
  WTF::AtomStringImpl::add();
  v2[216] = v8;
  WTF::AtomStringImpl::add();
  v2[217] = v8;
  WTF::AtomStringImpl::add();
  v2[218] = v8;
  WTF::AtomStringImpl::add();
  v2[219] = v8;
  WTF::AtomStringImpl::add();
  v2[220] = v8;
  WTF::AtomStringImpl::add();
  v2[221] = v8;
  WTF::AtomStringImpl::add();
  v2[222] = v8;
  WTF::AtomStringImpl::add();
  v2[223] = v8;
  WTF::AtomStringImpl::add();
  v2[224] = v8;
  WTF::AtomStringImpl::add();
  v2[225] = v8;
  WTF::AtomStringImpl::add();
  v2[226] = v8;
  WTF::AtomStringImpl::add();
  v2[227] = v8;
  WTF::AtomStringImpl::add();
  v2[228] = v8;
  WTF::AtomStringImpl::add();
  v2[229] = v8;
  WTF::AtomStringImpl::add();
  v2[230] = v8;
  WTF::AtomStringImpl::add();
  v2[231] = v8;
  WTF::AtomStringImpl::add();
  v2[232] = v8;
  WTF::AtomStringImpl::add();
  v2[233] = v8;
  WTF::AtomStringImpl::add();
  v2[234] = v8;
  WTF::AtomStringImpl::add();
  v2[235] = v8;
  WTF::AtomStringImpl::add();
  v2[236] = v8;
  WTF::AtomStringImpl::add();
  v2[237] = v8;
  WTF::AtomStringImpl::add();
  v2[238] = v8;
  WTF::AtomStringImpl::add();
  v2[239] = v8;
  WTF::AtomStringImpl::add();
  v2[240] = v8;
  WTF::AtomStringImpl::add();
  v2[241] = v8;
  WTF::AtomStringImpl::add();
  v2[242] = v8;
  WTF::AtomStringImpl::add();
  v2[243] = v8;
  WTF::AtomStringImpl::add();
  v2[244] = v8;
  WTF::AtomStringImpl::add();
  v2[245] = v8;
  WTF::AtomStringImpl::add();
  v2[246] = v8;
  WTF::AtomStringImpl::add();
  v2[247] = v8;
  WTF::AtomStringImpl::add();
  v2[248] = v8;
  WTF::AtomStringImpl::add();
  v2[249] = v8;
  WTF::AtomStringImpl::add();
  v2[250] = v8;
  WTF::AtomStringImpl::add();
  v2[251] = v8;
  WTF::AtomStringImpl::add();
  v2[252] = v8;
  WTF::AtomStringImpl::add();
  v2[253] = v8;
  WTF::AtomStringImpl::add();
  v2[254] = v8;
  WTF::AtomStringImpl::add();
  v2[255] = v8;
  WTF::AtomStringImpl::add();
  v2[256] = v8;
  WTF::AtomStringImpl::add();
  v2[257] = v8;
  WTF::AtomStringImpl::add();
  v2[258] = v8;
  WTF::AtomStringImpl::add();
  v2[259] = v8;
  WTF::AtomStringImpl::add();
  v2[260] = v8;
  WTF::AtomStringImpl::add();
  v2[261] = v8;
  WTF::AtomStringImpl::add();
  v2[262] = v8;
  WTF::AtomStringImpl::add();
  v2[263] = v8;
  WTF::AtomStringImpl::add();
  v2[264] = v8;
  WTF::AtomStringImpl::add();
  v2[265] = v8;
  WTF::AtomStringImpl::add();
  v2[266] = v8;
  WTF::AtomStringImpl::add();
  v2[267] = v8;
  WTF::AtomStringImpl::add();
  v2[268] = v8;
  WTF::AtomStringImpl::add();
  v2[269] = v8;
  WTF::AtomStringImpl::add();
  v2[270] = v8;
  WTF::AtomStringImpl::add();
  v2[271] = v8;
  WTF::AtomStringImpl::add();
  v2[272] = v8;
  WTF::AtomStringImpl::add();
  v2[273] = v8;
  WTF::AtomStringImpl::add();
  v2[274] = v8;
  WTF::AtomStringImpl::add();
  v2[275] = v8;
  WTF::AtomStringImpl::add();
  v2[276] = v8;
  WTF::AtomStringImpl::add();
  v2[277] = v8;
  WTF::AtomStringImpl::add();
  v2[278] = v8;
  WTF::AtomStringImpl::add();
  v2[279] = v8;
  WTF::AtomStringImpl::add();
  v2[280] = v8;
  WTF::AtomStringImpl::add();
  v2[281] = v8;
  WTF::AtomStringImpl::add();
  v2[282] = v8;
  WTF::AtomStringImpl::add();
  v2[283] = v8;
  WTF::AtomStringImpl::add();
  v2[284] = v8;
  WTF::AtomStringImpl::add();
  v2[285] = v8;
  WTF::AtomStringImpl::add();
  v2[286] = v8;
  WTF::AtomStringImpl::add();
  v2[287] = v8;
  WTF::AtomStringImpl::add();
  v2[288] = v8;
  WTF::AtomStringImpl::add();
  v2[289] = v8;
  WTF::AtomStringImpl::add();
  v2[290] = v8;
  WTF::AtomStringImpl::add();
  v2[291] = v8;
  WTF::AtomStringImpl::add();
  v2[292] = v8;
  WTF::AtomStringImpl::add();
  v2[293] = v8;
  WTF::AtomStringImpl::add();
  v2[294] = v8;
  WTF::AtomStringImpl::add();
  v2[295] = v8;
  WTF::AtomStringImpl::add();
  v2[296] = v8;
  WTF::AtomStringImpl::add();
  v2[297] = v8;
  WTF::AtomStringImpl::add();
  v2[298] = v8;
  WTF::AtomStringImpl::add();
  v2[299] = v8;
  WTF::AtomStringImpl::add();
  v2[300] = v8;
  WTF::AtomStringImpl::add();
  v2[301] = v8;
  WTF::AtomStringImpl::add();
  v2[302] = v8;
  WTF::AtomStringImpl::add();
  v2[303] = v8;
  WTF::AtomStringImpl::add();
  v2[304] = v8;
  WTF::AtomStringImpl::add();
  v2[305] = v8;
  WTF::AtomStringImpl::add();
  v2[306] = v8;
  WTF::AtomStringImpl::add();
  v2[307] = v8;
  WTF::AtomStringImpl::add();
  v2[308] = v8;
  WTF::AtomStringImpl::add();
  v2[309] = v8;
  WTF::AtomStringImpl::add();
  v2[310] = v8;
  WTF::AtomStringImpl::add();
  v2[311] = v8;
  WTF::AtomStringImpl::add();
  v2[312] = v8;
  WTF::AtomStringImpl::add();
  v2[313] = v8;
  WTF::AtomStringImpl::add();
  v2[314] = v8;
  WTF::AtomStringImpl::add();
  v2[315] = v8;
  WTF::AtomStringImpl::add();
  v2[316] = v8;
  WTF::AtomStringImpl::add();
  v2[317] = v8;
  WTF::AtomStringImpl::add();
  v2[318] = v8;
  WTF::AtomStringImpl::add();
  v9 = -2145386495;
  WTF::AtomStringImpl::add();
  v10 = v7;
  v11 = 2;
  WTF::AtomStringImpl::add();
  v12 = v7;
  v13 = 3;
  WTF::AtomStringImpl::add();
  v14 = v7;
  v15 = 4;
  WTF::AtomStringImpl::add();
  v16 = v7;
  v17 = 5;
  WTF::AtomStringImpl::add();
  v18 = v7;
  v19 = 6;
  WTF::AtomStringImpl::add();
  v20 = v7;
  v21 = 7;
  WTF::AtomStringImpl::add();
  v22 = v7;
  v23 = 8;
  WTF::AtomStringImpl::add();
  v24 = v7;
  v25 = 9;
  WTF::AtomStringImpl::add();
  v26 = v7;
  v27 = 10;
  WTF::AtomStringImpl::add();
  v28 = v7;
  v29 = 11;
  WTF::AtomStringImpl::add();
  v30 = v7;
  v31 = 12;
  WTF::AtomStringImpl::add();
  v32 = v7;
  v33 = 13;
  WTF::AtomStringImpl::add();
  v34 = v7;
  v35 = 14;
  WTF::AtomStringImpl::add();
  v36 = v7;
  v37 = 15;
  WTF::AtomStringImpl::add();
  v38 = v7;
  v39 = 65552;
  WTF::AtomStringImpl::add();
  v40 = v7;
  v41 = 65553;
  WTF::AtomStringImpl::add();
  v42 = v7;
  v43 = 65554;
  WTF::AtomStringImpl::add();
  v44 = v7;
  v45 = 65555;
  WTF::AtomStringImpl::add();
  v46 = v7;
  v47 = 20;
  WTF::AtomStringImpl::add();
  v48 = v7;
  v49 = 21;
  WTF::AtomStringImpl::add();
  v50 = v7;
  v51 = 22;
  WTF::AtomStringImpl::add();
  v52 = v7;
  v53 = 23;
  WTF::AtomStringImpl::add();
  v54 = v7;
  v55 = 24;
  WTF::AtomStringImpl::add();
  v56 = v7;
  v57 = 25;
  WTF::AtomStringImpl::add();
  v58 = v7;
  v59 = 26;
  WTF::AtomStringImpl::add();
  v60 = v7;
  v61 = 27;
  WTF::AtomStringImpl::add();
  v62 = v7;
  v63 = 28;
  WTF::AtomStringImpl::add();
  v64 = v7;
  v65 = 29;
  WTF::AtomStringImpl::add();
  v66 = v7;
  v67 = 30;
  WTF::AtomStringImpl::add();
  v68 = v7;
  v69 = 31;
  WTF::AtomStringImpl::add();
  v70 = v7;
  v71 = 32;
  WTF::AtomStringImpl::add();
  v72 = v7;
  v73 = 33;
  WTF::AtomStringImpl::add();
  v74 = v7;
  v75 = 34;
  WTF::AtomStringImpl::add();
  v76 = v7;
  v77 = 35;
  WTF::AtomStringImpl::add();
  v78 = v7;
  v79 = 36;
  WTF::AtomStringImpl::add();
  v80 = v7;
  v81 = 37;
  WTF::AtomStringImpl::add();
  v82 = v7;
  v83 = 38;
  WTF::AtomStringImpl::add();
  v84 = v7;
  v85 = -2147483609;
  WTF::AtomStringImpl::add();
  v86 = v7;
  v87 = 40;
  WTF::AtomStringImpl::add();
  v88 = v7;
  v89 = 41;
  WTF::AtomStringImpl::add();
  v90 = v7;
  v91 = 42;
  WTF::AtomStringImpl::add();
  v92 = v7;
  v93 = 43;
  WTF::AtomStringImpl::add();
  v94 = v7;
  v95 = 44;
  WTF::AtomStringImpl::add();
  v96 = v7;
  v97 = 45;
  WTF::AtomStringImpl::add();
  v98 = v7;
  v99 = 46;
  WTF::AtomStringImpl::add();
  v100 = v7;
  v101 = 47;
  WTF::AtomStringImpl::add();
  v102 = v7;
  v103 = 48;
  WTF::AtomStringImpl::add();
  v104 = v7;
  v105 = 49;
  WTF::AtomStringImpl::add();
  v106 = v7;
  v107 = 50;
  WTF::AtomStringImpl::add();
  v108 = v7;
  v109 = -2145386445;
  WTF::AtomStringImpl::add();
  v110 = v7;
  v111 = 52;
  WTF::AtomStringImpl::add();
  v112 = v7;
  v113 = 53;
  WTF::AtomStringImpl::add();
  v114 = v7;
  v115 = 54;
  WTF::AtomStringImpl::add();
  v116 = v7;
  v117 = 55;
  WTF::AtomStringImpl::add();
  v118 = v7;
  v119 = 56;
  WTF::AtomStringImpl::add();
  v120 = v7;
  v121 = 57;
  WTF::AtomStringImpl::add();
  v122 = v7;
  v123 = 58;
  WTF::AtomStringImpl::add();
  v124 = v7;
  v125 = 59;
  WTF::AtomStringImpl::add();
  v126 = v7;
  v127 = 60;
  WTF::AtomStringImpl::add();
  v128 = v7;
  v129 = 61;
  WTF::AtomStringImpl::add();
  v130 = v7;
  v131 = 62;
  WTF::AtomStringImpl::add();
  v132 = v7;
  v133 = -2147483585;
  WTF::AtomStringImpl::add();
  v134 = v7;
  v135 = 64;
  WTF::AtomStringImpl::add();
  v136 = v7;
  v137 = 65;
  WTF::AtomStringImpl::add();
  v138 = v7;
  v139 = 66;
  WTF::AtomStringImpl::add();
  v140 = v7;
  v141 = 67;
  WTF::AtomStringImpl::add();
  v142 = v7;
  v143 = 68;
  WTF::AtomStringImpl::add();
  v144 = v7;
  v145 = 69;
  WTF::AtomStringImpl::add();
  v146 = v7;
  v147 = 70;
  WTF::AtomStringImpl::add();
  v148 = v7;
  v149 = 71;
  WTF::AtomStringImpl::add();
  v150 = v7;
  v151 = 72;
  WTF::AtomStringImpl::add();
  v152 = v7;
  v153 = 73;
  WTF::AtomStringImpl::add();
  v154 = v7;
  v155 = -2147483574;
  WTF::AtomStringImpl::add();
  v156 = v7;
  v157 = 75;
  WTF::AtomStringImpl::add();
  v158 = v7;
  v159 = 76;
  WTF::AtomStringImpl::add();
  v160 = v7;
  v161 = 77;
  WTF::AtomStringImpl::add();
  v162 = v7;
  v163 = 78;
  WTF::AtomStringImpl::add();
  v164 = v7;
  v165 = 79;
  WTF::AtomStringImpl::add();
  v166 = v7;
  v167 = 80;
  WTF::AtomStringImpl::add();
  v168 = v7;
  v169 = 81;
  WTF::AtomStringImpl::add();
  v170 = v7;
  v171 = 82;
  WTF::AtomStringImpl::add();
  v172 = v7;
  v173 = 83;
  WTF::AtomStringImpl::add();
  v174 = v7;
  v175 = 84;
  WTF::AtomStringImpl::add();
  v176 = v7;
  v177 = 85;
  WTF::AtomStringImpl::add();
  v178 = v7;
  v179 = 86;
  WTF::AtomStringImpl::add();
  v180 = v7;
  v181 = 87;
  WTF::AtomStringImpl::add();
  v182 = v7;
  v183 = 88;
  WTF::AtomStringImpl::add();
  v184 = v7;
  v185 = 89;
  WTF::AtomStringImpl::add();
  v186 = v7;
  v187 = 90;
  WTF::AtomStringImpl::add();
  v188 = v7;
  v189 = 91;
  WTF::AtomStringImpl::add();
  v190 = v7;
  v191 = 92;
  WTF::AtomStringImpl::add();
  v192 = v7;
  v193 = 93;
  WTF::AtomStringImpl::add();
  v194 = v7;
  v195 = 94;
  WTF::AtomStringImpl::add();
  v196 = v7;
  v197 = 95;
  WTF::AtomStringImpl::add();
  v198 = v7;
  v199 = 96;
  WTF::AtomStringImpl::add();
  v200 = v7;
  v201 = 97;
  WTF::AtomStringImpl::add();
  v202 = v7;
  v203 = 98;
  WTF::AtomStringImpl::add();
  v204 = v7;
  v205 = 99;
  WTF::AtomStringImpl::add();
  v206 = v7;
  v207 = 100;
  WTF::AtomStringImpl::add();
  v208 = v7;
  v209 = 101;
  WTF::AtomStringImpl::add();
  v210 = v7;
  v211 = 102;
  WTF::AtomStringImpl::add();
  v212 = v7;
  v213 = -2147483545;
  WTF::AtomStringImpl::add();
  v214 = v7;
  v215 = 104;
  WTF::AtomStringImpl::add();
  v216 = v7;
  v217 = 105;
  WTF::AtomStringImpl::add();
  v218 = v7;
  v219 = 106;
  WTF::AtomStringImpl::add();
  v220 = v7;
  v221 = 107;
  WTF::AtomStringImpl::add();
  v222 = v7;
  v223 = 108;
  WTF::AtomStringImpl::add();
  v224 = v7;
  v225 = 524397;
  WTF::AtomStringImpl::add();
  v226 = v7;
  v227 = 524398;
  WTF::AtomStringImpl::add();
  v228 = v7;
  v229 = 111;
  WTF::AtomStringImpl::add();
  v230 = v7;
  v231 = 1048688;
  WTF::AtomStringImpl::add();
  v232 = v7;
  v233 = 1048689;
  WTF::AtomStringImpl::add();
  v234 = v7;
  v235 = 114;
  WTF::AtomStringImpl::add();
  v236 = v7;
  v237 = 115;
  WTF::AtomStringImpl::add();
  v238 = v7;
  v239 = 116;
  WTF::AtomStringImpl::add();
  v240 = v7;
  v241 = 1048693;
  WTF::AtomStringImpl::add();
  v242 = v7;
  v243 = 118;
  WTF::AtomStringImpl::add();
  v244 = v7;
  v245 = 119;
  WTF::AtomStringImpl::add();
  v246 = v7;
  v247 = 120;
  WTF::AtomStringImpl::add();
  v248 = v7;
  v249 = 121;
  WTF::AtomStringImpl::add();
  v250 = v7;
  v251 = 122;
  WTF::AtomStringImpl::add();
  v252 = v7;
  v253 = 123;
  WTF::AtomStringImpl::add();
  v254 = v7;
  v255 = 124;
  WTF::AtomStringImpl::add();
  v256 = v7;
  v257 = 125;
  WTF::AtomStringImpl::add();
  v258 = v7;
  v259 = 126;
  WTF::AtomStringImpl::add();
  v260 = v7;
  v261 = 127;
  WTF::AtomStringImpl::add();
  v262 = v7;
  v263 = 128;
  WTF::AtomStringImpl::add();
  v264 = v7;
  v265 = 129;
  WTF::AtomStringImpl::add();
  v266 = v7;
  v267 = 130;
  WTF::AtomStringImpl::add();
  v268 = v7;
  v269 = 131;
  WTF::AtomStringImpl::add();
  v270 = v7;
  v271 = -2147483516;
  WTF::AtomStringImpl::add();
  v272 = v7;
  v273 = -2147483515;
  WTF::AtomStringImpl::add();
  v274 = v7;
  v275 = 134;
  WTF::AtomStringImpl::add();
  v276 = v7;
  v277 = -2147483513;
  WTF::AtomStringImpl::add();
  v278 = v7;
  v279 = 136;
  WTF::AtomStringImpl::add();
  v280 = v7;
  v281 = 137;
  WTF::AtomStringImpl::add();
  v282 = v7;
  v283 = 138;
  WTF::AtomStringImpl::add();
  v284 = v7;
  v285 = 139;
  WTF::AtomStringImpl::add();
  v286 = v7;
  v287 = 140;
  WTF::AtomStringImpl::add();
  v288 = v7;
  v289 = 141;
  WTF::AtomStringImpl::add();
  v290 = v7;
  v291 = 142;
  WTF::AtomStringImpl::add();
  v292 = v7;
  v293 = 143;
  WTF::AtomStringImpl::add();
  v294 = v7;
  v295 = 144;
  WTF::AtomStringImpl::add();
  v296 = v7;
  v297 = 145;
  WTF::AtomStringImpl::add();
  v298 = v7;
  v299 = 146;
  WTF::AtomStringImpl::add();
  v300 = v7;
  v301 = 147;
  WTF::AtomStringImpl::add();
  v302 = v7;
  v303 = 148;
  WTF::AtomStringImpl::add();
  v304 = v7;
  v305 = 149;
  WTF::AtomStringImpl::add();
  v306 = v7;
  v307 = 150;
  WTF::AtomStringImpl::add();
  v308 = v7;
  v309 = 151;
  WTF::AtomStringImpl::add();
  v310 = v7;
  v311 = -2136735592;
  WTF::AtomStringImpl::add();
  v312 = v7;
  v313 = 153;
  WTF::AtomStringImpl::add();
  v314 = v7;
  v315 = 154;
  WTF::AtomStringImpl::add();
  v316 = v7;
  v317 = -2134638437;
  WTF::AtomStringImpl::add();
  v318 = v7;
  v319 = 4194460;
  WTF::AtomStringImpl::add();
  v320 = v7;
  v321 = 4194461;
  WTF::AtomStringImpl::add();
  v322 = v7;
  v323 = -2136735586;
  WTF::AtomStringImpl::add();
  v324 = v7;
  v325 = -2080374625;
  WTF::AtomStringImpl::add();
  v326 = v7;
  v327 = 160;
  WTF::AtomStringImpl::add();
  v328 = v7;
  v329 = 161;
  WTF::AtomStringImpl::add();
  v330 = v7;
  v331 = 162;
  WTF::AtomStringImpl::add();
  v332 = v7;
  v333 = 163;
  WTF::AtomStringImpl::add();
  v334 = v7;
  v335 = 164;
  WTF::AtomStringImpl::add();
  v336 = v7;
  v337 = 165;
  WTF::AtomStringImpl::add();
  v338 = v7;
  v339 = 166;
  WTF::AtomStringImpl::add();
  v340 = v7;
  v341 = 167;
  WTF::AtomStringImpl::add();
  v342 = v7;
  v343 = 168;
  WTF::AtomStringImpl::add();
  v344 = v7;
  v345 = 169;
  WTF::AtomStringImpl::add();
  v346 = v7;
  v347 = 170;
  WTF::AtomStringImpl::add();
  v348 = v7;
  v349 = 171;
  WTF::AtomStringImpl::add();
  v350 = v7;
  v351 = 172;
  WTF::AtomStringImpl::add();
  v352 = v7;
  v353 = 173;
  WTF::AtomStringImpl::add();
  v354 = v7;
  v355 = 174;
  WTF::AtomStringImpl::add();
  v356 = v7;
  v357 = 175;
  WTF::AtomStringImpl::add();
  v358 = v7;
  v359 = 176;
  WTF::AtomStringImpl::add();
  v360 = v7;
  v361 = 177;
  WTF::AtomStringImpl::add();
  v362 = v7;
  v363 = 178;
  WTF::AtomStringImpl::add();
  v364 = v7;
  v365 = 179;
  WTF::AtomStringImpl::add();
  v366 = v7;
  v367 = 180;
  WTF::AtomStringImpl::add();
  v368 = v7;
  v369 = 181;
  WTF::AtomStringImpl::add();
  v370 = v7;
  v371 = 182;
  WTF::AtomStringImpl::add();
  v372 = v7;
  v373 = 183;
  WTF::AtomStringImpl::add();
  v374 = v7;
  v375 = 184;
  WTF::AtomStringImpl::add();
  v376 = v7;
  v377 = 185;
  WTF::AtomStringImpl::add();
  v378 = v7;
  v379 = -2130444102;
  WTF::AtomStringImpl::add();
  v380 = v7;
  v381 = -2130444101;
  WTF::AtomStringImpl::add();
  v382 = v7;
  v383 = -2130444100;
  WTF::AtomStringImpl::add();
  v384 = v7;
  v385 = -2130444099;
  WTF::AtomStringImpl::add();
  v386 = v7;
  v387 = 190;
  WTF::AtomStringImpl::add();
  v388 = v7;
  v389 = 191;
  WTF::AtomStringImpl::add();
  v390 = v7;
  v391 = -2130444096;
  WTF::AtomStringImpl::add();
  v392 = v7;
  v393 = -2130444095;
  WTF::AtomStringImpl::add();
  v394 = v7;
  v395 = -2130444094;
  WTF::AtomStringImpl::add();
  v396 = v7;
  v397 = -2130444093;
  WTF::AtomStringImpl::add();
  v398 = v7;
  v399 = 196;
  WTF::AtomStringImpl::add();
  v400 = v7;
  v401 = 197;
  WTF::AtomStringImpl::add();
  v402 = v7;
  v403 = 198;
  WTF::AtomStringImpl::add();
  v404 = v7;
  v405 = 199;
  WTF::AtomStringImpl::add();
  v406 = v7;
  v407 = 200;
  WTF::AtomStringImpl::add();
  v408 = v7;
  v409 = 201;
  WTF::AtomStringImpl::add();
  v410 = v7;
  v411 = 202;
  WTF::AtomStringImpl::add();
  v412 = v7;
  v413 = 203;
  WTF::AtomStringImpl::add();
  v414 = v7;
  v415 = 204;
  WTF::AtomStringImpl::add();
  v416 = v7;
  v417 = 205;
  WTF::AtomStringImpl::add();
  v418 = v7;
  v419 = 206;
  WTF::AtomStringImpl::add();
  v420 = v7;
  v421 = 207;
  WTF::AtomStringImpl::add();
  v422 = v7;
  v423 = 208;
  WTF::AtomStringImpl::add();
  v424 = v7;
  v425 = 209;
  WTF::AtomStringImpl::add();
  v426 = v7;
  v427 = 210;
  WTF::AtomStringImpl::add();
  v428 = v7;
  v429 = 211;
  WTF::AtomStringImpl::add();
  v430 = v7;
  v431 = 212;
  WTF::AtomStringImpl::add();
  v432 = v7;
  v433 = 213;
  WTF::AtomStringImpl::add();
  v434 = v7;
  v435 = 214;
  WTF::AtomStringImpl::add();
  v436 = v7;
  v437 = 215;
  WTF::AtomStringImpl::add();
  v438 = v7;
  v439 = 216;
  WTF::AtomStringImpl::add();
  v440 = v7;
  v441 = 217;
  WTF::AtomStringImpl::add();
  v442 = v7;
  v443 = 218;
  WTF::AtomStringImpl::add();
  v444 = v7;
  v445 = 219;
  WTF::AtomStringImpl::add();
  v446 = v7;
  v447 = 220;
  WTF::AtomStringImpl::add();
  v448 = v7;
  v449 = 221;
  WTF::AtomStringImpl::add();
  v450 = v7;
  v451 = 222;
  WTF::AtomStringImpl::add();
  v452 = v7;
  v453 = 223;
  WTF::AtomStringImpl::add();
  v454 = v7;
  v455 = 224;
  WTF::AtomStringImpl::add();
  v456 = v7;
  v457 = 225;
  WTF::AtomStringImpl::add();
  v458 = v7;
  v459 = 226;
  WTF::AtomStringImpl::add();
  v460 = v7;
  v461 = 227;
  WTF::AtomStringImpl::add();
  v462 = v7;
  v463 = 228;
  WTF::AtomStringImpl::add();
  v464 = v7;
  v465 = 229;
  WTF::AtomStringImpl::add();
  v466 = v7;
  v467 = 230;
  WTF::AtomStringImpl::add();
  v468 = v7;
  v469 = 231;
  WTF::AtomStringImpl::add();
  v470 = v7;
  v471 = 232;
  WTF::AtomStringImpl::add();
  v472 = v7;
  v473 = 233;
  WTF::AtomStringImpl::add();
  v474 = v7;
  v475 = 234;
  WTF::AtomStringImpl::add();
  v476 = v7;
  v477 = 235;
  WTF::AtomStringImpl::add();
  v478 = v7;
  v479 = 236;
  WTF::AtomStringImpl::add();
  v480 = v7;
  v481 = 237;
  WTF::AtomStringImpl::add();
  v482 = v7;
  v483 = 238;
  WTF::AtomStringImpl::add();
  v484 = v7;
  v485 = 239;
  WTF::AtomStringImpl::add();
  v486 = v7;
  v487 = 240;
  WTF::AtomStringImpl::add();
  v488 = v7;
  v489 = 241;
  WTF::AtomStringImpl::add();
  v490 = v7;
  v491 = 242;
  WTF::AtomStringImpl::add();
  v492 = v7;
  v493 = 243;
  WTF::AtomStringImpl::add();
  v494 = v7;
  v495 = 244;
  WTF::AtomStringImpl::add();
  v496 = v7;
  v497 = 245;
  WTF::AtomStringImpl::add();
  v498 = v7;
  v499 = 246;
  WTF::AtomStringImpl::add();
  v500 = v7;
  v501 = 247;
  WTF::AtomStringImpl::add();
  v502 = v7;
  v503 = 248;
  WTF::AtomStringImpl::add();
  v504 = v7;
  v505 = 249;
  WTF::AtomStringImpl::add();
  v506 = v7;
  v507 = 250;
  WTF::AtomStringImpl::add();
  v508 = v7;
  v509 = 251;
  WTF::AtomStringImpl::add();
  v510 = v7;
  v511 = 252;
  WTF::AtomStringImpl::add();
  v512 = v7;
  v513 = 253;
  WTF::AtomStringImpl::add();
  v514 = v7;
  v515 = 254;
  WTF::AtomStringImpl::add();
  v516 = v7;
  v517 = -2147483393;
  WTF::AtomStringImpl::add();
  v518 = v7;
  v519 = 256;
  WTF::AtomStringImpl::add();
  v520 = v7;
  v521 = 257;
  WTF::AtomStringImpl::add();
  v522 = v7;
  v523 = 258;
  WTF::AtomStringImpl::add();
  v524 = v7;
  v525 = 259;
  WTF::AtomStringImpl::add();
  v526 = v7;
  v527 = -2130444028;
  WTF::AtomStringImpl::add();
  v528 = v7;
  v529 = -2130444027;
  WTF::AtomStringImpl::add();
  v530 = v7;
  v531 = -2130444026;
  WTF::AtomStringImpl::add();
  v532 = v7;
  v533 = -2096889593;
  WTF::AtomStringImpl::add();
  v534 = v7;
  v535 = -2096889592;
  WTF::AtomStringImpl::add();
  v536 = v7;
  v537 = 265;
  WTF::AtomStringImpl::add();
  v538 = v7;
  v539 = 131338;
  WTF::AtomStringImpl::add();
  v540 = v7;
  v541 = 131339;
  WTF::AtomStringImpl::add();
  v542 = v7;
  v543 = 131340;
  WTF::AtomStringImpl::add();
  v544 = v7;
  v545 = 131341;
  WTF::AtomStringImpl::add();
  v546 = v7;
  v547 = 270;
  WTF::AtomStringImpl::add();
  v548 = v7;
  v549 = 271;
  WTF::AtomStringImpl::add();
  v550 = v7;
  v551 = 272;
  WTF::AtomStringImpl::add();
  v552 = v7;
  v553 = 273;
  WTF::AtomStringImpl::add();
  v554 = v7;
  v555 = 274;
  WTF::AtomStringImpl::add();
  v556 = v7;
  v557 = 275;
  WTF::AtomStringImpl::add();
  v558 = v7;
  v559 = 276;
  WTF::AtomStringImpl::add();
  v560 = v7;
  v561 = 277;
  WTF::AtomStringImpl::add();
  v562 = v7;
  v563 = 278;
  WTF::AtomStringImpl::add();
  v564 = v7;
  v565 = 279;
  WTF::AtomStringImpl::add();
  v566 = v7;
  v567 = 280;
  WTF::AtomStringImpl::add();
  v568 = v7;
  v569 = 281;
  WTF::AtomStringImpl::add();
  v570 = v7;
  v571 = 282;
  WTF::AtomStringImpl::add();
  v572 = v7;
  v573 = 283;
  WTF::AtomStringImpl::add();
  v574 = v7;
  v575 = 284;
  WTF::AtomStringImpl::add();
  v576 = v7;
  v577 = 285;
  WTF::AtomStringImpl::add();
  v578 = v7;
  v579 = 286;
  WTF::AtomStringImpl::add();
  v580 = v7;
  v581 = 287;
  WTF::AtomStringImpl::add();
  v582 = v7;
  v583 = 288;
  WTF::AtomStringImpl::add();
  v584 = v7;
  v585 = 289;
  WTF::AtomStringImpl::add();
  v586 = v7;
  v587 = 65826;
  WTF::AtomStringImpl::add();
  v588 = v7;
  v589 = 65827;
  WTF::AtomStringImpl::add();
  v590 = v7;
  v591 = 65828;
  WTF::AtomStringImpl::add();
  v592 = v7;
  v593 = -2147483355;
  WTF::AtomStringImpl::add();
  v594 = v7;
  v595 = 131366;
  WTF::AtomStringImpl::add();
  v596 = v7;
  v597 = 295;
  WTF::AtomStringImpl::add();
  v598 = v7;
  v599 = 296;
  WTF::AtomStringImpl::add();
  v600 = v7;
  v601 = 297;
  WTF::AtomStringImpl::add();
  v602 = v7;
  v603 = 298;
  WTF::AtomStringImpl::add();
  v604 = v7;
  v605 = 299;
  WTF::AtomStringImpl::add();
  v606 = v7;
  v607 = 300;
  WTF::AtomStringImpl::add();
  v608 = v7;
  v609 = 301;
  WTF::AtomStringImpl::add();
  v610 = v7;
  v611 = 302;
  WTF::AtomStringImpl::add();
  v612 = v7;
  v613 = 303;
  WTF::AtomStringImpl::add();
  v614 = v7;
  v615 = 304;
  WTF::AtomStringImpl::add();
  v616 = v7;
  v617 = 305;
  WTF::AtomStringImpl::add();
  v618 = v7;
  v619 = 306;
  WTF::AtomStringImpl::add();
  v620 = v7;
  v621 = 307;
  WTF::AtomStringImpl::add();
  v622 = v7;
  v623 = 308;
  WTF::AtomStringImpl::add();
  v624 = v7;
  v625 = 309;
  WTF::AtomStringImpl::add();
  v626 = v7;
  v627 = 310;
  WTF::AtomStringImpl::add();
  v628 = v7;
  v629 = 311;
  WTF::AtomStringImpl::add();
  v630 = v7;
  v631 = 312;
  WTF::AtomStringImpl::add();
  v632 = v7;
  v633 = 313;
  WTF::AtomStringImpl::add();
  v634 = v7;
  v635 = 314;
  WTF::AtomStringImpl::add();
  v636 = v7;
  v637 = -2080374469;
  WTF::AtomStringImpl::add();
  v638 = v7;
  v639 = 316;
  WTF::AtomStringImpl::add();
  v640 = v7;
  v641 = 317;
  WTF::AtomStringImpl::add();
  v642 = v7;
  v643 = 318;
  WTF::AtomStringImpl::add();
  v644 = v7;
  v645 = 319;
  WTF::HashMap<WTF::AtomString,WebCore::EventTypeInfo,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::EventTypeInfo>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::HashMap((uint64_t)(v2 + 319), &v8, 319);
  v4 = 5104;
  do
  {
    v5 = *(WTF::StringImpl **)((char *)&v8 + v4 - 16);
    *(uint64_t *)((char *)&v8 + v4 - 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    v4 -= 16;
  }
  while (v4);
  return v2;
}

uint64_t WebCore::JSHTMLTitleElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSHTMLScriptElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSHTMLTitleElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSHTMLDivElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::createAccessControlPreflightRequest@<X0>(WebCore *this@<X0>, const WebCore::ResourceRequest *a2@<X1>, WTF::StringImpl **a3@<X2>, const WTF::String *a4@<X3>, uint64_t a5@<X8>)
{
  int v5;
  _DWORD *v10;
  WTF **v11;
  char v12;
  _DWORD *v13;
  char v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  const WTF::StringImpl *v22;
  char v23;
  int v24;
  uint64_t result;
  WTF::StringImpl *v26;
  WTF *v27;
  __int128 v28;
  char v29;
  int v30;
  char v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl **v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  WTF::StringImpl *v55;
  BOOL v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  int v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  uint64_t (**v79)(uint64_t *, uint64_t *);
  uint64_t v80;
  int v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83[3];
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  unsigned __int16 v90;
  char v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  uint64_t v94;

  v5 = (int)a4;
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v10 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v10 += 2;
  *(_QWORD *)a5 = v10;
  *(_OWORD *)(a5 + 8) = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)(a5 + 24) = *(_OWORD *)((char *)this + 24);
  *(_QWORD *)(a5 + 40) = 0;
  v11 = (WTF **)(a5 + 40);
  WTF::URL::invalidate((WTF::URL *)(a5 + 40));
  *(_QWORD *)(a5 + 80) = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a5 + 88) = v86;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_DWORD *)(a5 + 144) = 0x10000;
  v12 = *(_BYTE *)(a5 + 148) & 0x80 | 4;
  *(_BYTE *)(a5 + 148) = v12;
  *(_QWORD *)(a5 + 152) = 0;
  v13 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v13 += 2;
    v12 = *(_BYTE *)(a5 + 148);
  }
  *(_QWORD *)(a5 + 160) = v13;
  *(_QWORD *)(a5 + 168) = 0;
  *(_BYTE *)(a5 + 176) = 0;
  *(_BYTE *)(a5 + 180) = 0;
  *(_BYTE *)(a5 + 184) = *(_BYTE *)(a5 + 184) & 0xE0 | 5;
  *(_BYTE *)(a5 + 148) = v12 | 2;
  *(_QWORD *)(a5 + 192) = 0;
  WebCore::ResourceRequestBase::updateResourceRequest((WebCore::ResourceRequest *)a5, 0);
  v14 = *(_BYTE *)(a5 + 184);
  if (*(double *)(a5 + 80) != 0.0)
  {
    *(_QWORD *)(a5 + 80) = 0;
    v14 &= ~2u;
    *(_BYTE *)(a5 + 184) = v14;
  }
  if ((v14 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
    v14 = *(_BYTE *)(a5 + 184) | 1;
    *(_BYTE *)(a5 + 184) = v14;
  }
  if (*(_DWORD *)(a5 + 20) > *(_DWORD *)(a5 + 12))
  {
    WTF::URL::removeCredentials((WTF::URL *)a5);
    v14 = *(_BYTE *)(a5 + 184) & 0xFD;
    *(_BYTE *)(a5 + 184) = v14;
    if ((v14 & 1) != 0)
      goto LABEL_13;
  }
  else if ((v14 & 1) != 0)
  {
    goto LABEL_13;
  }
  WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
  v14 = *(_BYTE *)(a5 + 184) | 1;
  *(_BYTE *)(a5 + 184) = v14;
LABEL_13:
  v15 = *(_BYTE *)(a5 + 148);
  if ((v15 & 2) != 0)
  {
    if ((v14 & 1) != 0
      || (WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5),
          v14 = *(_BYTE *)(a5 + 184) | 1,
          *(_BYTE *)(a5 + 184) = v14,
          v15 = *(_BYTE *)(a5 + 148),
          (v15 & 2) != 0))
    {
      *(_BYTE *)(a5 + 148) = v15 & 0xFD;
      *(_BYTE *)(a5 + 184) = v14 & 0xFD;
    }
  }
  v16 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v16 == 1)
    goto LABEL_203;
  if ((_DWORD)v16 == -1)
  {
    v77 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*,false>(v77, v78, v79, v80, v81);
  }
  v86 = (WTF::StringImpl *)v83;
  v17 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v16])(&v86, (char *)a2 + 8);
  if (MEMORY[0x19AEA53F4](*v17, "file", 4) && *((_BYTE *)a2 + 59))
LABEL_203:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  else
    WebCore::SecurityOriginData::toString((const WebCore::ResourceRequest *)((char *)a2 + 8), &v86);
  if ((*(_BYTE *)(a5 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
    *(_BYTE *)(a5 + 184) |= 1u;
  }
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a5 + 96), (WTF::StringImpl *)0x35, &v86);
  *(_BYTE *)(a5 + 184) &= ~2u;
  v19 = v86;
  v86 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v83[0] = v86;
  WebCore::ResourceRequestBase::setHTTPMethod((WTF **)a5, v83);
  v21 = v83[0];
  v83[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  if ((*(_BYTE *)(a5 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
    *(_BYTE *)(a5 + 184) |= 1u;
  }
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a5 + 96), (WTF::StringImpl *)0xC, (WTF::StringImpl **)this + 11);
  v23 = *(_BYTE *)(a5 + 184) & 0xFD;
  *(_BYTE *)(a5 + 184) = v23;
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
    v23 = *(_BYTE *)(a5 + 184);
  }
  v24 = *((unsigned __int8 *)this + 146);
  if ((v23 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
    v23 = *(_BYTE *)(a5 + 184) | 1;
    *(_BYTE *)(a5 + 184) = v23;
  }
  if (*(unsigned __int8 *)(a5 + 146) != v24)
  {
    *(_BYTE *)(a5 + 146) = v24;
    v23 &= ~2u;
    *(_BYTE *)(a5 + 184) = v23;
  }
  if ((*((_BYTE *)this + 184) & 1) != 0)
  {
    if ((v23 & 1) != 0)
      goto LABEL_40;
  }
  else
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
    if ((*(_BYTE *)(a5 + 184) & 1) != 0)
      goto LABEL_40;
  }
  WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
  *(_BYTE *)(a5 + 184) |= 1u;
LABEL_40:
  result = WTF::equal(*v11, *((const WTF::StringImpl **)this + 5), v22);
  if ((_DWORD)result)
  {
    v29 = *(_BYTE *)(a5 + 184);
  }
  else
  {
    v27 = (WTF *)*((_QWORD *)this + 5);
    if (v27)
      *(_DWORD *)v27 += 2;
    result = (uint64_t)*v11;
    *v11 = v27;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
      else
        *(_DWORD *)result -= 2;
    }
    v28 = *((_OWORD *)this + 4);
    *(_OWORD *)(a5 + 48) = *((_OWORD *)this + 3);
    *(_OWORD *)(a5 + 64) = v28;
    v29 = *(_BYTE *)(a5 + 184) & 0xFD;
    *(_BYTE *)(a5 + 184) = v29;
  }
  v30 = *((_BYTE *)this + 148) & 4;
  if ((v29 & 1) == 0)
  {
    result = WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
    v29 = *(_BYTE *)(a5 + 184) | 1;
    *(_BYTE *)(a5 + 184) = v29;
  }
  v31 = *(_BYTE *)(a5 + 148);
  if ((v30 != 0) == ((v31 & 4) == 0))
  {
    *(_BYTE *)(a5 + 148) = v31 & 0xFB | v30;
    *(_BYTE *)(a5 + 184) = v29 & 0xFD;
  }
  if (*a3)
    result = (uint64_t)WebCore::ResourceRequestBase::setHTTPReferrer((WebCore::ResourceRequestBase *)a5, a3);
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    result = WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  if (*((_DWORD *)this + 27) | *((_DWORD *)this + 31))
  {
    v93 = 0;
    v94 = 0;
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)&v86, (uint64_t)this + 96, *((WTF::StringImpl **)this + 12), *((_QWORD *)this + 14));
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)v83, (uint64_t)this + 96, (WTF::StringImpl *)(*((_QWORD *)this + 12) + 16 * *((unsigned int *)this + 27)), *((_QWORD *)this + 14) + 16 * *((unsigned int *)this + 31));
    while (v87 != v83[1] || v88 != v83[2])
    {
      if (!v91 || !WebCore::isCrossOriginSafeRequestHeader(v90, &v92))
      {
        WTF::String::convertToASCIILowercase((WTF::String *)&v89);
        LODWORD(v34) = HIDWORD(v94);
        if (HIDWORD(v94) == (_DWORD)v94)
        {
          v37 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v93, HIDWORD(v94) + 1, (unint64_t)&v82);
          v34 = HIDWORD(v94);
          v38 = v93;
          v39 = *v37;
          *v37 = 0;
          *((_QWORD *)v38 + v34) = v39;
        }
        else
        {
          v35 = v82;
          v82 = 0;
          *((_QWORD *)v93 + HIDWORD(v94)) = v35;
        }
        HIDWORD(v94) = v34 + 1;
        v36 = v82;
        v82 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v33);
          else
            *(_DWORD *)v36 -= 2;
        }
      }
      WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::operator++((uint64_t)&v86, v33);
    }
    v40 = v85;
    v85 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v32);
      else
        *(_DWORD *)v40 -= 2;
    }
    v41 = v84;
    v84 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v32);
      else
        *(_DWORD *)v41 -= 2;
    }
    v42 = v92;
    v92 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v32);
      else
        *(_DWORD *)v42 -= 2;
    }
    v43 = v89;
    v89 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v32);
      else
        *(_DWORD *)v43 -= 2;
    }
    v86 = (WTF::StringImpl *)WTF::codePointCompareLessThan;
    v44 = 126 - 2 * __clz(HIDWORD(v94));
    if (HIDWORD(v94))
      v45 = v44;
    else
      v45 = 0;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*,false>((uint64_t)v93, (WTF::StringImpl *)((char *)v93 + 8 * HIDWORD(v94)), (uint64_t (**)(uint64_t *, uint64_t *))&v86, v45, 1);
    v86 = 0;
    v87 = 0;
    LODWORD(v88) = 0;
    BYTE4(v88) = 1;
    v47 = HIDWORD(v94);
    if (HIDWORD(v94))
    {
      v48 = v93;
      v49 = *(WTF::StringImpl **)v93;
      if (*(_QWORD *)v93)
        *(_DWORD *)v49 += 2;
      v86 = v49;
      v50 = *(_QWORD *)v48;
      if (*(_QWORD *)v48)
        LODWORD(v50) = *(_DWORD *)(v50 + 4);
      LODWORD(v88) = v50;
      if ((_DWORD)v47 != 1)
      {
        v51 = (WTF::StringImpl **)((char *)v48 + 8);
        v52 = 8 * v47 - 8;
        do
        {
          LOBYTE(v83[0]) = 44;
          if (v87
            && ((v53 = v88, v88 < *((_DWORD *)v87 + 1)) ? (v54 = v86 == 0) : (v54 = 0), v54))
          {
            v59 = *((_DWORD *)v87 + 4);
            v60 = *((_QWORD *)v87 + 1);
            LODWORD(v88) = (_DWORD)v88 + 1;
            if ((v59 & 4) != 0)
              *(_BYTE *)(v60 + v53) = 44;
            else
              *(_WORD *)(v60 + 2 * v53) = 44;
          }
          else
          {
            WTF::StringBuilder::append();
          }
          v55 = *v51;
          if ((_DWORD)v88)
            v56 = 0;
          else
            v56 = v87 == 0;
          if (v56)
          {
            if (v55)
              *(_DWORD *)v55 += 2;
            v57 = v86;
            v86 = v55;
            if (v57)
            {
              if (*(_DWORD *)v57 == 2)
                WTF::StringImpl::destroy(v57, v46);
              else
                *(_DWORD *)v57 -= 2;
            }
            v58 = *v51;
            if (*v51)
              LODWORD(v58) = *((_DWORD *)v58 + 1);
            LODWORD(v88) = (_DWORD)v58;
          }
          else if (v55 && (*((_BYTE *)v55 + 16) & 4) == 0)
          {
            WTF::StringBuilder::append();
          }
          else
          {
            WTF::StringBuilder::append();
          }
          ++v51;
          v52 -= 8;
        }
        while (v52);
        LODWORD(v50) = (_DWORD)v88;
      }
      if ((_DWORD)v50)
      {
        v61 = v86;
        if (v86
          || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v86),
              WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v86),
              (v61 = v86) != 0))
        {
          *(_DWORD *)v61 += 2;
        }
        v83[0] = v61;
        if ((*(_BYTE *)(a5 + 184) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
          *(_BYTE *)(a5 + 184) |= 1u;
        }
        WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a5 + 96), (WTF::StringImpl *)0xB, v83);
        *(_BYTE *)(a5 + 184) &= ~2u;
        v62 = v83[0];
        v83[0] = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
            WTF::StringImpl::destroy(v62, v46);
          else
            *(_DWORD *)v62 -= 2;
        }
      }
    }
    v63 = v87;
    v87 = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2)
        WTF::StringImpl::destroy(v63, v46);
      else
        *(_DWORD *)v63 -= 2;
    }
    result = (uint64_t)v86;
    v86 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v46);
      else
        *(_DWORD *)result -= 2;
    }
    v64 = v93;
    if (!HIDWORD(v94))
    {
      if (!v93)
        goto LABEL_138;
LABEL_184:
      v93 = 0;
      LODWORD(v94) = 0;
      result = WTF::fastFree(v64, v46);
      if (!v5)
        return result;
      goto LABEL_139;
    }
    v73 = 8 * HIDWORD(v94);
    do
    {
      result = *(_QWORD *)v64;
      *(_QWORD *)v64 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v46);
        else
          *(_DWORD *)result -= 2;
      }
      v64 = (WTF *)((char *)v64 + 8);
      v73 -= 8;
    }
    while (v73);
    v64 = v93;
    if (v93)
      goto LABEL_184;
  }
LABEL_138:
  if (!v5)
    return result;
LABEL_139:
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  WebCore::SecurityOrigin::create(this, (uint64_t *)v83);
  v65 = v83[0];
  result = WebCore::SecurityOrigin::isPotentiallyTrustworthy(v83[0]);
  if ((_DWORD)result)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v93 = v86;
    if ((*(_BYTE *)(a5 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
      *(_BYTE *)(a5 + 184) |= 1u;
    }
    WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a5 + 96), (WTF::StringImpl *)0x42, &v93);
    *(_BYTE *)(a5 + 184) &= ~2u;
    v68 = v93;
    v93 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, v67);
      else
        *(_DWORD *)v68 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v93 = v86;
    if ((*(_BYTE *)(a5 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
      *(_BYTE *)(a5 + 184) |= 1u;
    }
    WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a5 + 96), (WTF::StringImpl *)0x41, &v93);
    *(_BYTE *)(a5 + 184) &= ~2u;
    v70 = v93;
    v93 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, v69);
      else
        *(_DWORD *)v70 -= 2;
    }
    if (!WebCore::SecurityOrigin::isSameOriginAs(a2, v65))
      WebCore::SecurityOrigin::isSameSiteAs(a2, v65);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    if ((*(_BYTE *)(a5 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
      *(_BYTE *)(a5 + 184) |= 1u;
    }
    WebCore::HTTPHeaderMap::add((WTF::StringImpl *)(a5 + 96), 67, (uint64_t *)&v86);
    *(_BYTE *)(a5 + 184) &= ~2u;
    result = (uint64_t)v86;
    v86 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v66);
      else
        *(_DWORD *)result -= 2;
    }
  }
  v83[0] = 0;
  if (v65)
  {
    do
    {
      v71 = __ldaxr((unsigned int *)v65);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, (unsigned int *)v65));
    if (!v72)
    {
      atomic_store(1u, (unsigned int *)v65);
      v74 = (WTF::StringImpl *)*((_QWORD *)v65 + 6);
      *((_QWORD *)v65 + 6) = 0;
      if (v74)
      {
        if (*(_DWORD *)v74 == 2)
          WTF::StringImpl::destroy(v74, v66);
        else
          *(_DWORD *)v74 -= 2;
      }
      v75 = (WTF::StringImpl *)*((_QWORD *)v65 + 5);
      *((_QWORD *)v65 + 5) = 0;
      if (v75)
      {
        if (*(_DWORD *)v75 == 2)
          WTF::StringImpl::destroy(v75, v66);
        else
          *(_DWORD *)v75 -= 2;
      }
      v76 = *((unsigned int *)v65 + 8);
      if ((_DWORD)v76 != -1)
        ((void (*)(WTF::StringImpl **, char *))off_1E33F32C0[v76])(&v86, (char *)v65 + 8);
      *((_DWORD *)v65 + 8) = -1;
      return WTF::fastFree(v65, v66);
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*,false>(uint64_t result, WTF::StringImpl *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, int a5)
{
  WTF::StringImpl **v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t (*v17)(uint64_t *, uint64_t *);
  char v18;
  int v19;
  WTF::StringImpl *v20;
  char v21;
  int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t *v28;
  uint64_t *v29;
  char v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  char v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  int v48;
  uint64_t v49;
  int v50;
  WTF::StringImpl *v51;
  uint64_t *v52;
  char v53;
  BOOL v54;
  uint64_t v55;
  uint64_t *v56;
  char v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  WTF::StringImpl **v62;
  unint64_t v63;
  uint64_t v65;
  int v66;
  uint64_t *v67;
  uint64_t *v68;

  v8 = (WTF::StringImpl **)result;
LABEL_2:
  v9 = (uint64_t *)((char *)a2 - 8);
  v67 = (uint64_t *)((char *)a2 - 24);
  v68 = (uint64_t *)((char *)a2 - 16);
  v10 = (uint64_t)v8;
LABEL_3:
  v11 = 1 - a4;
  v66 = a5;
  while (2)
  {
    v8 = (WTF::StringImpl **)v10;
    v12 = (uint64_t)a2 - v10;
    v13 = ((uint64_t)a2 - v10) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)((uint64_t *)a2 - 1, (uint64_t *)v10);
        if ((_DWORD)result)
        {
          v55 = *(_QWORD *)v10;
          goto LABEL_71;
        }
        return result;
      case 3uLL:
        v56 = (uint64_t *)(v10 + 8);
        v57 = (*a3)((uint64_t *)(v10 + 8), (uint64_t *)v10);
        result = (*a3)(v9, (uint64_t *)(v10 + 8));
        if ((v57 & 1) != 0)
        {
          v55 = *(_QWORD *)v10;
          if ((_DWORD)result)
          {
LABEL_71:
            *(_QWORD *)v10 = *v9;
LABEL_72:
            *v9 = v55;
            return result;
          }
          *(_QWORD *)v10 = *(_QWORD *)(v10 + 8);
          *(_QWORD *)(v10 + 8) = v55;
          result = (*a3)(v9, (uint64_t *)(v10 + 8));
          if ((_DWORD)result)
          {
            v55 = *v56;
            *v56 = *v9;
            goto LABEL_72;
          }
        }
        else if ((_DWORD)result)
        {
          v65 = *(_QWORD *)(v10 + 8);
          *(_QWORD *)(v10 + 8) = *v9;
          *v9 = v65;
          goto LABEL_88;
        }
        return result;
      case 4uLL:
        return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>((uint64_t *)v10, (uint64_t *)(v10 + 8), (uint64_t *)(v10 + 16), (uint64_t *)a2 - 1, a3);
      case 5uLL:
        v56 = (uint64_t *)(v10 + 8);
        v58 = (uint64_t *)(v10 + 24);
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>((uint64_t *)v10, (uint64_t *)(v10 + 8), (uint64_t *)(v10 + 16), (uint64_t *)(v10 + 24), a3);
        result = (*a3)(v9, (uint64_t *)(v10 + 24));
        if ((_DWORD)result)
        {
          v59 = *v58;
          *v58 = *v9;
          *v9 = v59;
          result = (*a3)((uint64_t *)(v10 + 24), (uint64_t *)(v10 + 16));
          if ((_DWORD)result)
          {
            *(int8x16_t *)(v10 + 16) = vextq_s8(*(int8x16_t *)(v10 + 16), *(int8x16_t *)(v10 + 16), 8uLL);
            result = (*a3)((uint64_t *)(v10 + 16), (uint64_t *)(v10 + 8));
            if ((_DWORD)result)
            {
              *(int8x16_t *)(v10 + 8) = vextq_s8(*(int8x16_t *)(v10 + 8), *(int8x16_t *)(v10 + 8), 8uLL);
LABEL_88:
              result = (*a3)(v56, (uint64_t *)v10);
              if ((_DWORD)result)
                *(int8x16_t *)v10 = vextq_s8(*(int8x16_t *)v10, *(int8x16_t *)v10, 8uLL);
            }
          }
        }
        return result;
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>((WTF::StringImpl *)v10, a2, (uint64_t (**)(WTF::StringImpl **, uint64_t))a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>((WTF::StringImpl *)v10, a2, (uint64_t (**)(WTF::StringImpl **, char *))a3);
        }
        v14 = v11;
        if (v11 != 1)
        {
          v15 = v13 >> 1;
          v16 = (uint64_t *)(v10 + 8 * (v13 >> 1));
          v17 = *a3;
          if ((unint64_t)v12 >= 0x401)
          {
            v18 = v17((uint64_t *)&v8[v13 >> 1], (uint64_t *)v8);
            v19 = (*a3)((uint64_t *)a2 - 1, v16);
            if ((v18 & 1) != 0)
            {
              v20 = *v8;
              if (v19)
              {
                *v8 = (WTF::StringImpl *)*v9;
              }
              else
              {
                *v8 = (WTF::StringImpl *)*v16;
                *v16 = (uint64_t)v20;
                if (!(*a3)((uint64_t *)a2 - 1, v16))
                  goto LABEL_24;
                v20 = (WTF::StringImpl *)*v16;
                *v16 = *v9;
              }
              *v9 = (uint64_t)v20;
            }
            else if (v19)
            {
              v24 = *v16;
              *v16 = *v9;
              *v9 = v24;
              if ((*a3)(v16, (uint64_t *)v8))
              {
                v25 = *v8;
                *v8 = (WTF::StringImpl *)*v16;
                *v16 = (uint64_t)v25;
              }
            }
LABEL_24:
            v28 = (uint64_t *)(v8 + 1);
            v29 = (uint64_t *)&v8[v15 - 1];
            v30 = (*a3)(v29, (uint64_t *)v8 + 1);
            v31 = (*a3)(v68, v29);
            if ((v30 & 1) != 0)
            {
              v32 = *v28;
              if (v31)
              {
                v33 = (uint64_t *)((char *)a2 - 16);
                *v28 = *v68;
              }
              else
              {
                *v28 = *v29;
                *v29 = v32;
                if (!(*a3)(v68, (uint64_t *)&v8[v15 - 1]))
                  goto LABEL_38;
                v32 = *v29;
                v33 = (uint64_t *)((char *)a2 - 16);
                *v29 = *v68;
              }
              *v33 = v32;
            }
            else if (v31)
            {
              v34 = *v29;
              *v29 = *v68;
              *v68 = v34;
              if ((*a3)((uint64_t *)&v8[v15 - 1], (uint64_t *)v8 + 1))
              {
                v35 = *v28;
                *v28 = *v29;
                *v29 = v35;
              }
            }
LABEL_38:
            v36 = (uint64_t *)(v8 + 2);
            v37 = (uint64_t *)&v8[v15 + 1];
            v38 = (*a3)(v37, (uint64_t *)v8 + 2);
            v39 = (*a3)(v67, v37);
            if ((v38 & 1) != 0)
            {
              v40 = *v36;
              if (v39)
              {
                v41 = (uint64_t *)((char *)a2 - 24);
                *v36 = *v67;
              }
              else
              {
                *v36 = *v37;
                *v37 = v40;
                if (!(*a3)(v67, v37))
                  goto LABEL_47;
                v40 = *v37;
                v41 = (uint64_t *)((char *)a2 - 24);
                *v37 = *v67;
              }
              *v41 = v40;
            }
            else if (v39)
            {
              v42 = *v37;
              *v37 = *v67;
              *v67 = v42;
              if ((*a3)(v37, (uint64_t *)v8 + 2))
              {
                v43 = *v36;
                *v36 = *v37;
                *v37 = v43;
              }
            }
LABEL_47:
            v44 = (*a3)(v16, v29);
            v45 = (*a3)(v37, v16);
            if ((v44 & 1) != 0)
            {
              v46 = *v29;
              if (v45)
              {
                *v29 = *v37;
                *v37 = v46;
                v47 = (WTF::StringImpl *)*v16;
                goto LABEL_56;
              }
              *v29 = *v16;
              *v16 = v46;
              v50 = (*a3)(v37, v16);
              v47 = (WTF::StringImpl *)*v16;
              if (v50)
              {
                v49 = *v37;
                *v16 = *v37;
                *v37 = (uint64_t)v47;
                goto LABEL_55;
              }
            }
            else
            {
              v47 = (WTF::StringImpl *)*v16;
              if (v45)
              {
                *v16 = *v37;
                *v37 = (uint64_t)v47;
                v48 = (*a3)(v16, v29);
                v47 = (WTF::StringImpl *)*v16;
                if (v48)
                {
                  v49 = *v29;
                  *v29 = (uint64_t)v47;
                  *v16 = v49;
LABEL_55:
                  v47 = (WTF::StringImpl *)v49;
                }
              }
            }
LABEL_56:
            a5 = v66;
            v51 = *v8;
            *v8 = v47;
            *v16 = (uint64_t)v51;
            if ((v66 & 1) != 0)
              goto LABEL_58;
            goto LABEL_57;
          }
          v21 = v17((uint64_t *)v8, (uint64_t *)&v8[v13 >> 1]);
          v22 = (*a3)((uint64_t *)a2 - 1, (uint64_t *)v8);
          if ((v21 & 1) != 0)
          {
            v23 = (WTF::StringImpl *)*v16;
            if (v22)
            {
              *v16 = *v9;
              goto LABEL_32;
            }
            *v16 = (uint64_t)*v8;
            *v8 = v23;
            if ((*a3)((uint64_t *)a2 - 1, (uint64_t *)v8))
            {
              v23 = *v8;
              *v8 = (WTF::StringImpl *)*v9;
LABEL_32:
              *v9 = (uint64_t)v23;
            }
LABEL_33:
            if ((a5 & 1) != 0)
              goto LABEL_58;
            goto LABEL_57;
          }
          if (!v22)
            goto LABEL_33;
          v26 = *v8;
          *v8 = (WTF::StringImpl *)*v9;
          *v9 = (uint64_t)v26;
          if (!(*a3)((uint64_t *)v8, v16))
            goto LABEL_33;
          v27 = (WTF::StringImpl *)*v16;
          *v16 = (uint64_t)*v8;
          *v8 = v27;
          if ((a5 & 1) != 0)
            goto LABEL_58;
LABEL_57:
          if (((*a3)((uint64_t *)v8 - 1, (uint64_t *)v8) & 1) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::String *,BOOL (*&)(WTF::String const&,WTF::String const&)>(v8, (WTF::StringImpl **)a2, (uint64_t (**)(WTF::StringImpl **, WTF::StringImpl **))a3);
            v10 = result;
            goto LABEL_63;
          }
LABEL_58:
          v52 = std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::String *,BOOL (*&)(WTF::String const&,WTF::String const&)>(v8, a2, (uint64_t *)a3);
          if ((v53 & 1) == 0)
            goto LABEL_61;
          v54 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>((uint64_t *)v8, (WTF::StringImpl **)v52, a3);
          v10 = (uint64_t)(v52 + 1);
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(v52 + 1, (WTF::StringImpl **)a2, a3);
          if (!(_DWORD)result)
          {
            v11 = v14 + 1;
            if (v54)
              continue;
LABEL_61:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*,false>(v8, v52, a3, -v14, a5 & 1);
            v10 = (uint64_t)(v52 + 1);
LABEL_63:
            a5 = 0;
            a4 = -v14;
            goto LABEL_3;
          }
          a4 = -v14;
          a2 = (WTF::StringImpl *)v52;
          if (v54)
            return result;
          goto LABEL_2;
        }
        if ((WTF::StringImpl *)v10 != a2)
        {
          v60 = (v13 - 2) >> 1;
          v61 = v60 + 1;
          v62 = (WTF::StringImpl **)(v10 + 8 * v60);
          do
          {
            std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(v10, (uint64_t (**)(WTF::StringImpl **, WTF::StringImpl **))a3, ((uint64_t)a2 - v10) >> 3, v62--);
            --v61;
          }
          while (v61);
          v63 = (unint64_t)v12 >> 3;
          do
          {
            result = (uint64_t)std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*)(WTF::String const&,WTF::String const&),WTF::String*>((WTF::StringImpl *)v10, a2, (uint64_t (**)(WTF::StringImpl **, uint64_t))a3, v63);
            a2 = (WTF::StringImpl *)((char *)a2 - 8);
          }
          while (v63-- > 2);
        }
        return result;
    }
  }
}

WTF::StringImpl *WebCore::HTTPHeaderMap::add(WTF::StringImpl *result, int a2, uint64_t *a3)
{
  WTF::StringImpl *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  char v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;

  v3 = result;
  v4 = *((unsigned int *)result + 3);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *(_QWORD *)result;
    v7 = 8;
    while (*(unsigned __int16 *)(v6 + v7 - 8) != a2)
    {
      ++v5;
      v7 += 16;
      if (v4 == v5)
        goto LABEL_5;
    }
    if (v5 >= v4)
    {
      __break(0xC471u);
      JUMPOUT(0x194508D18);
    }
    v10 = *(WTF::StringImpl **)(v6 + v7);
    if (v10)
      *(_DWORD *)v10 += 2;
    v11 = *a3;
    if (*a3)
      *(_DWORD *)v11 += 2;
    if (v10)
      v12 = *((_DWORD *)v10 + 1);
    else
      v12 = 0;
    if (v11)
    {
      v13 = *(_DWORD *)(v11 + 4);
      if (v13 < 0)
        goto LABEL_55;
    }
    else
    {
      v13 = 0;
    }
    v14 = __OFADD__(v13, 2);
    v15 = v13 + 2;
    v16 = v14;
    if ((v12 & 0x80000000) == 0 && (v16 & 1) == 0)
    {
      v17 = (v12 + v15);
      if (!__OFADD__(v12, v15))
      {
        if (v10)
        {
          v18 = *((_DWORD *)v10 + 4);
          v19 = (v18 >> 2) & 1;
          if (!v11 || (v18 & 4) == 0)
          {
LABEL_29:
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v17, v19, (uint64_t)v10, (int8x16_t *)", ", 2u, v11, &v28);
            v21 = v28;
            if (v28 && v5 < *((unsigned int *)v3 + 3))
            {
              v22 = *(_QWORD *)v3;
              v28 = 0;
              v23 = *(WTF::StringImpl **)(v22 + v7);
              *(_QWORD *)(v22 + v7) = v21;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2)
                  WTF::StringImpl::destroy(v23, v20);
                else
                  *(_DWORD *)v23 -= 2;
              }
              result = v28;
              v28 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
                else
                  *(_DWORD *)result -= 2;
              }
              if (v11)
              {
                if (*(_DWORD *)v11 == 2)
                  result = (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v11, v20);
                else
                  *(_DWORD *)v11 -= 2;
              }
              if (v10)
              {
                if (*(_DWORD *)v10 != 2)
                {
                  *(_DWORD *)v10 -= 2;
                  return result;
                }
                result = v10;
                return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
              }
              return result;
            }
LABEL_58:
            __break(0xC471u);
            JUMPOUT(0x194508D10);
          }
        }
        else if (!v11)
        {
          v19 = 1;
          goto LABEL_29;
        }
        v19 = (*(unsigned __int8 *)(v11 + 16) >> 2) & 1;
        goto LABEL_29;
      }
    }
LABEL_55:
    v28 = 0;
    goto LABEL_58;
  }
LABEL_5:
  LOWORD(v28) = a2;
  v8 = (WTF::StringImpl *)*a3;
  if (*a3)
    *(_DWORD *)v8 += 2;
  v29 = v8;
  if ((_DWORD)v4 == *((_DWORD *)result + 2))
  {
    v24 = WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)result, v4 + 1, (unint64_t)&v28);
    v25 = *((unsigned int *)v3 + 3);
    v26 = *(_QWORD *)v3 + 16 * v25;
    *(_WORD *)v26 = *(_WORD *)v24;
    v27 = *(_QWORD *)(v24 + 8);
    *(_QWORD *)(v24 + 8) = 0;
    *(_QWORD *)(v26 + 8) = v27;
    result = v29;
    *((_DWORD *)v3 + 3) = v25 + 1;
    v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
        return result;
      }
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
    }
  }
  else
  {
    v9 = *(_QWORD *)result + 16 * v4;
    *(_WORD *)v9 = a2;
    *(_QWORD *)(v9 + 8) = v8;
    *((_DWORD *)result + 3) = v4 + 1;
  }
  return result;
}

WTF::StringImpl *WebCore::JSBuiltinInternalFunctions::initialize(WebCore::JSBuiltinInternalFunctions *this, WebCore::JSDOMGlobalObject *a2)
{
  uint64_t v2;
  const JSCell *v3;
  const JSCell *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  WTF::StringImpl *v10;
  uint64_t BuiltinExecutable;
  unint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  WTF::StringImpl *v20;
  uint64_t Allocator;
  unint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t *v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t *v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t *v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t *v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t *v129;
  WTF::StringImpl *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t *v139;
  WTF::StringImpl *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  WTF::StringImpl *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t *v149;
  WTF::StringImpl *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  WTF::StringImpl *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t *v159;
  WTF::StringImpl *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  WTF::StringImpl *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t *v169;
  WTF::StringImpl *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  WTF::StringImpl *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t *v179;
  WTF::StringImpl *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  WTF::StringImpl *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t *v189;
  WTF::StringImpl *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  WTF::StringImpl *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t *v199;
  WTF::StringImpl *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  WTF::StringImpl *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t *v209;
  WTF::StringImpl *v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  WTF::StringImpl *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t *v219;
  WTF::StringImpl *v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  WTF::StringImpl *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t *v229;
  WTF::StringImpl *v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  WTF::StringImpl *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t *v239;
  WTF::StringImpl *v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  WTF::StringImpl *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t *v249;
  WTF::StringImpl *v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  WTF::StringImpl *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t *v259;
  WTF::StringImpl *v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  WTF::StringImpl *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t *v269;
  WTF::StringImpl *v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  WTF::StringImpl *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t *v279;
  WTF::StringImpl *v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  WTF::StringImpl *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  uint64_t *v289;
  WTF::StringImpl *v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  WTF::StringImpl *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _QWORD *v298;
  uint64_t *v299;
  WTF::StringImpl *v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  WTF::StringImpl *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  _QWORD *v308;
  uint64_t *v309;
  WTF::StringImpl *v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  WTF::StringImpl *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  _QWORD *v318;
  uint64_t *v319;
  WTF::StringImpl *v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  WTF::StringImpl *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t *v329;
  WTF::StringImpl *v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  WTF::StringImpl *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  _QWORD *v338;
  uint64_t *v339;
  WTF::StringImpl *v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  WTF::StringImpl *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  _QWORD *v348;
  uint64_t *v349;
  WTF::StringImpl *v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  WTF::StringImpl *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  _QWORD *v358;
  uint64_t *v359;
  WTF::StringImpl *v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  WTF::StringImpl *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  _QWORD *v368;
  uint64_t *v369;
  WTF::StringImpl *v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  WTF::StringImpl *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  _QWORD *v378;
  uint64_t *v379;
  WTF::StringImpl *v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  WTF::StringImpl *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  _QWORD *v388;
  uint64_t *v389;
  WTF::StringImpl *v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  WTF::StringImpl *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  _QWORD *v398;
  uint64_t *v399;
  WTF::StringImpl *v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t v403;
  WTF::StringImpl *v404;
  uint64_t v405;
  _QWORD *v406;
  WTF::StringImpl *v407;
  WTF::StringImpl *v408;
  uint64_t v409;
  _DWORD *v410;
  uint64_t v411;
  _DWORD *v412;
  uint64_t v413;
  _DWORD *v414;
  uint64_t v415;
  _DWORD *v416;
  uint64_t v417;
  _DWORD *v418;
  uint64_t v419;
  _DWORD *v420;
  uint64_t v421;
  _DWORD *v422;
  uint64_t v423;
  _DWORD *v424;
  uint64_t v425;
  _DWORD *v426;
  uint64_t v427;
  _DWORD *v428;
  uint64_t v429;
  _DWORD *v430;
  uint64_t v431;
  _DWORD *v432;
  uint64_t v433;
  _DWORD *v434;
  uint64_t v435;
  _DWORD *v436;
  uint64_t v437;
  _DWORD *v438;
  uint64_t v439;
  _DWORD *v440;
  uint64_t v441;
  _DWORD *v442;
  uint64_t v443;
  _DWORD *v444;
  uint64_t v445;
  _DWORD *v446;
  uint64_t v447;
  _DWORD *v448;
  uint64_t v449;
  _DWORD *v450;
  uint64_t v451;
  _DWORD *v452;
  uint64_t v453;
  _DWORD *v454;
  uint64_t v455;
  _DWORD *v456;
  uint64_t v457;
  _DWORD *v458;
  uint64_t v459;
  _DWORD *v460;
  uint64_t v461;
  _DWORD *v462;
  uint64_t v463;
  _DWORD *v464;
  uint64_t v465;
  _DWORD *v466;
  uint64_t v467;
  _DWORD *v468;
  uint64_t v469;
  _DWORD *v470;
  uint64_t v471;
  _DWORD *v472;
  uint64_t v473;
  _DWORD *v474;
  uint64_t v475;
  _DWORD *v476;
  uint64_t v477;
  _DWORD *v478;
  uint64_t v479;
  _DWORD *v480;
  uint64_t v481;
  _DWORD *v482;
  uint64_t v483;
  _DWORD *v484;
  uint64_t v485;
  _DWORD *v486;
  uint64_t v487;
  _DWORD *v488;
  uint64_t v489;
  _DWORD *v490;
  uint64_t v491;
  _DWORD *v492;
  uint64_t v493;
  _DWORD *v494;
  uint64_t v495;
  _DWORD *v496;
  uint64_t v497;
  _DWORD *v498;
  uint64_t v499;
  _DWORD *v500;
  uint64_t v501;
  _DWORD *v502;
  uint64_t v503;
  _DWORD *v504;
  uint64_t v505;
  _DWORD *v506;
  uint64_t v507;
  _DWORD *v508;
  uint64_t v509;
  _DWORD *v510;
  uint64_t v511;
  _DWORD *v512;
  uint64_t v513;
  _DWORD *v514;
  uint64_t v515;
  _DWORD *v516;
  uint64_t v517;
  _DWORD *v518;
  uint64_t v519;
  _DWORD *v520;
  uint64_t v521;
  _DWORD *v522;
  uint64_t v523;
  _DWORD *v524;
  uint64_t v525;
  _DWORD *v526;
  uint64_t v527;
  _DWORD *v528;
  uint64_t v529;
  _DWORD *v530;
  uint64_t v531;
  _DWORD *v532;
  uint64_t v533;
  _DWORD *v534;
  uint64_t v535;
  _DWORD *v536;
  uint64_t v537;
  _DWORD *v538;
  uint64_t v539;
  _DWORD *v540;
  uint64_t v541;
  _DWORD *v542;
  uint64_t v543;
  _DWORD *v544;
  uint64_t v545;
  _DWORD *v546;
  uint64_t v547;
  _DWORD *v548;
  uint64_t v549;
  _DWORD *v550;
  uint64_t v551;
  _DWORD *v552;
  uint64_t v553;
  _DWORD *v554;
  uint64_t v555;
  _DWORD *v556;
  uint64_t v557;
  _DWORD *v558;
  uint64_t v559;
  _DWORD *v560;
  uint64_t v561;
  _DWORD *v562;
  uint64_t v563;
  _DWORD *v564;
  uint64_t v565;
  _DWORD *v566;
  uint64_t v567;
  _DWORD *v568;
  uint64_t v569;
  _DWORD *v570;
  uint64_t v571;
  _DWORD *v572;
  uint64_t v573;
  _DWORD *v574;
  uint64_t v575;
  _DWORD *v576;
  uint64_t v577;
  _DWORD *v578;
  uint64_t v579;
  _DWORD *v580;
  uint64_t v581;
  _DWORD *v582;
  uint64_t v583;
  _DWORD *v584;
  uint64_t v585;
  _DWORD *v586;
  uint64_t v587;
  _DWORD *v588;
  uint64_t v589;
  _DWORD *v590;
  uint64_t v591;
  _DWORD *v592;
  uint64_t v593;
  _DWORD *v594;
  uint64_t v595;
  _DWORD *v596;
  uint64_t v597;
  _DWORD *v598;
  uint64_t v599;
  _DWORD *v600;
  uint64_t v601;
  _DWORD *v602;
  uint64_t v603;
  _DWORD *v604;
  uint64_t v605;
  _DWORD *v606;
  uint64_t v607;
  _DWORD *v608;
  uint64_t v609;
  _DWORD *v610;
  uint64_t v611;
  _DWORD *v612;
  uint64_t v613;
  _DWORD *v614;
  uint64_t v615;
  _DWORD *v616;
  uint64_t v617;
  _DWORD *v618;
  uint64_t v619;
  _DWORD *v620;
  uint64_t v621;
  _DWORD *v622;
  uint64_t v623;
  _DWORD *v624;
  uint64_t v625;
  _DWORD *v626;
  uint64_t v627;
  _DWORD *v628;
  uint64_t v629;
  _DWORD *v630;
  uint64_t v631;
  _DWORD *v632;
  uint64_t v633;
  _DWORD *v634;
  uint64_t v635;
  _DWORD *v636;
  uint64_t v637;
  _DWORD *v638;
  uint64_t v639;
  _DWORD *v640;
  uint64_t v641;
  _DWORD *v642;
  uint64_t v643;
  _DWORD *v644;
  uint64_t v645;
  _DWORD *v646;
  uint64_t v647;
  _DWORD *v648;
  uint64_t v649;
  _DWORD *v650;
  uint64_t v651;
  _DWORD *v652;
  uint64_t v653;
  _DWORD *v654;
  uint64_t v655;
  _DWORD *v656;
  uint64_t v657;
  _DWORD *v658;
  uint64_t v659;
  _DWORD *v660;
  uint64_t v661;
  _DWORD *v662;
  uint64_t v663;
  _DWORD *v664;
  uint64_t v665;
  _DWORD *v666;
  uint64_t v667;
  _DWORD *v668;
  uint64_t v669;
  _DWORD *v670;
  uint64_t v671;
  _DWORD *v672;
  uint64_t v673;
  _DWORD *v674;
  uint64_t v675;
  _DWORD *v676;
  uint64_t v677;
  _DWORD *v678;
  uint64_t v679;
  _DWORD *v680;
  uint64_t v681;
  _DWORD *v682;
  uint64_t v683;
  _DWORD *v684;
  uint64_t v685;
  _DWORD *v686;
  uint64_t v687;
  _DWORD *v688;
  uint64_t v689;
  _DWORD *v690;
  uint64_t v691;
  _DWORD *v692;
  uint64_t v693;
  _DWORD *v694;
  uint64_t v695;
  _DWORD *v696;
  uint64_t v697;
  _DWORD *v698;
  uint64_t v699;
  _DWORD *v700;
  uint64_t v701;
  _DWORD *v702;
  uint64_t v703;
  _DWORD *v704;
  uint64_t v705;
  _DWORD *v706;
  uint64_t v707;
  _DWORD *v708;
  uint64_t v709;
  _DWORD *v710;
  uint64_t v711;
  _DWORD *v712;
  uint64_t v713;
  _DWORD *v714;
  uint64_t v715;
  _DWORD *v716;
  uint64_t v717;
  _DWORD *v718;
  uint64_t v719;
  _DWORD *v720;
  uint64_t v721;
  _DWORD *v722;
  uint64_t v723;
  _DWORD *v724;
  uint64_t v725;
  _DWORD *v726;
  uint64_t v727;
  _DWORD *v728;
  uint64_t v729;
  _DWORD *v730;
  uint64_t v731;
  _DWORD *v732;
  uint64_t v733;
  _DWORD *v734;
  uint64_t v735;
  _DWORD *v736;
  uint64_t v737;
  _DWORD *v738;
  uint64_t v739;
  _DWORD *v740;
  uint64_t v741;
  _DWORD *v742;
  uint64_t v743;
  _DWORD *v744;
  uint64_t v745;
  _DWORD *v746;
  uint64_t v747;
  _DWORD *v748;
  WTF::StringImpl *v749;
  uint64_t i;
  WTF::StringImpl *result;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  WTF::StringImpl *v872[2];
  int v873;
  _DWORD *v874;
  uint64_t v875;
  int v876;
  _DWORD *v877;
  uint64_t v878;
  int v879;
  _DWORD *v880;
  uint64_t v881;
  int v882;
  _DWORD *v883;
  uint64_t v884;
  int v885;
  _DWORD *v886;
  uint64_t v887;
  int v888;
  _DWORD *v889;
  uint64_t v890;
  int v891;
  _DWORD *v892;
  uint64_t v893;
  int v894;
  _DWORD *v895;
  uint64_t v896;
  int v897;
  _DWORD *v898;
  uint64_t v899;
  int v900;
  _DWORD *v901;
  uint64_t v902;
  int v903;
  _DWORD *v904;
  uint64_t v905;
  int v906;
  _DWORD *v907;
  uint64_t v908;
  int v909;
  _DWORD *v910;
  uint64_t v911;
  int v912;
  _DWORD *v913;
  uint64_t v914;
  int v915;
  _DWORD *v916;
  uint64_t v917;
  int v918;
  _DWORD *v919;
  uint64_t v920;
  int v921;
  _DWORD *v922;
  uint64_t v923;
  int v924;
  _DWORD *v925;
  uint64_t v926;
  int v927;
  _DWORD *v928;
  uint64_t v929;
  int v930;
  _DWORD *v931;
  uint64_t v932;
  int v933;
  _DWORD *v934;
  uint64_t v935;
  int v936;
  _DWORD *v937;
  uint64_t v938;
  int v939;
  _DWORD *v940;
  uint64_t v941;
  int v942;
  _DWORD *v943;
  uint64_t v944;
  int v945;
  _DWORD *v946;
  uint64_t v947;
  int v948;
  _DWORD *v949;
  uint64_t v950;
  int v951;
  _DWORD *v952;
  uint64_t v953;
  int v954;
  _DWORD *v955;
  uint64_t v956;
  int v957;
  _DWORD *v958;
  uint64_t v959;
  int v960;
  _DWORD *v961;
  uint64_t v962;
  int v963;
  _DWORD *v964;
  uint64_t v965;
  int v966;
  _DWORD *v967;
  uint64_t v968;
  int v969;
  _DWORD *v970;
  uint64_t v971;
  int v972;
  _DWORD *v973;
  uint64_t v974;
  int v975;
  _DWORD *v976;
  uint64_t v977;
  int v978;
  _DWORD *v979;
  uint64_t v980;
  int v981;
  _DWORD *v982;
  uint64_t v983;
  int v984;
  _DWORD *v985;
  uint64_t v986;
  int v987;
  _DWORD *v988;
  uint64_t v989;
  int v990;
  _DWORD *v991;
  uint64_t v992;
  int v993;
  _DWORD *v994;
  uint64_t v995;
  int v996;
  _DWORD *v997;
  uint64_t v998;
  int v999;
  _DWORD *v1000;
  uint64_t v1001;
  int v1002;
  _DWORD *v1003;
  uint64_t v1004;
  int v1005;
  _DWORD *v1006;
  uint64_t v1007;
  int v1008;
  _DWORD *v1009;
  uint64_t v1010;
  int v1011;
  _DWORD *v1012;
  uint64_t v1013;
  int v1014;
  _DWORD *v1015;
  uint64_t v1016;
  int v1017;
  _DWORD *v1018;
  uint64_t v1019;
  int v1020;
  _DWORD *v1021;
  uint64_t v1022;
  int v1023;
  _DWORD *v1024;
  uint64_t v1025;
  int v1026;
  _DWORD *v1027;
  uint64_t v1028;
  int v1029;
  _DWORD *v1030;
  uint64_t v1031;
  int v1032;
  _DWORD *v1033;
  uint64_t v1034;
  int v1035;
  _DWORD *v1036;
  uint64_t v1037;
  int v1038;
  _DWORD *v1039;
  uint64_t v1040;
  int v1041;
  _DWORD *v1042;
  uint64_t v1043;
  int v1044;
  _DWORD *v1045;
  uint64_t v1046;
  int v1047;
  _DWORD *v1048;
  uint64_t v1049;
  int v1050;
  _DWORD *v1051;
  uint64_t v1052;
  int v1053;
  _DWORD *v1054;
  uint64_t v1055;
  int v1056;
  _DWORD *v1057;
  uint64_t v1058;
  int v1059;
  _DWORD *v1060;
  uint64_t v1061;
  int v1062;
  _DWORD *v1063;
  uint64_t v1064;
  int v1065;
  _DWORD *v1066;
  uint64_t v1067;
  int v1068;
  _DWORD *v1069;
  uint64_t v1070;
  int v1071;
  _DWORD *v1072;
  uint64_t v1073;
  int v1074;
  _DWORD *v1075;
  uint64_t v1076;
  int v1077;
  _DWORD *v1078;
  uint64_t v1079;
  int v1080;
  _DWORD *v1081;
  uint64_t v1082;
  int v1083;
  _DWORD *v1084;
  uint64_t v1085;
  int v1086;
  _DWORD *v1087;
  uint64_t v1088;
  int v1089;
  _DWORD *v1090;
  uint64_t v1091;
  int v1092;
  _DWORD *v1093;
  uint64_t v1094;
  int v1095;
  _DWORD *v1096;
  uint64_t v1097;
  int v1098;
  _DWORD *v1099;
  uint64_t v1100;
  int v1101;
  _DWORD *v1102;
  uint64_t v1103;
  int v1104;
  _DWORD *v1105;
  uint64_t v1106;
  int v1107;
  _DWORD *v1108;
  uint64_t v1109;
  int v1110;
  _DWORD *v1111;
  uint64_t v1112;
  int v1113;
  _DWORD *v1114;
  uint64_t v1115;
  int v1116;
  _DWORD *v1117;
  uint64_t v1118;
  int v1119;
  _DWORD *v1120;
  uint64_t v1121;
  int v1122;
  _DWORD *v1123;
  uint64_t v1124;
  int v1125;
  _DWORD *v1126;
  uint64_t v1127;
  int v1128;
  _DWORD *v1129;
  uint64_t v1130;
  int v1131;
  _DWORD *v1132;
  uint64_t v1133;
  int v1134;
  _DWORD *v1135;
  uint64_t v1136;
  int v1137;
  _DWORD *v1138;
  uint64_t v1139;
  int v1140;
  _DWORD *v1141;
  uint64_t v1142;
  int v1143;
  _DWORD *v1144;
  uint64_t v1145;
  int v1146;
  _DWORD *v1147;
  uint64_t v1148;
  int v1149;
  _DWORD *v1150;
  uint64_t v1151;
  int v1152;
  _DWORD *v1153;
  uint64_t v1154;
  int v1155;
  _DWORD *v1156;
  uint64_t v1157;
  int v1158;
  _DWORD *v1159;
  uint64_t v1160;
  int v1161;
  _DWORD *v1162;
  uint64_t v1163;
  int v1164;
  _DWORD *v1165;
  uint64_t v1166;
  int v1167;
  _DWORD *v1168;
  uint64_t v1169;
  int v1170;
  _DWORD *v1171;
  uint64_t v1172;
  int v1173;
  _DWORD *v1174;
  uint64_t v1175;
  int v1176;
  _DWORD *v1177;
  uint64_t v1178;
  int v1179;
  _DWORD *v1180;
  uint64_t v1181;
  int v1182;
  _DWORD *v1183;
  uint64_t v1184;
  int v1185;
  _DWORD *v1186;
  uint64_t v1187;
  int v1188;
  _DWORD *v1189;
  uint64_t v1190;
  int v1191;
  _DWORD *v1192;
  uint64_t v1193;
  int v1194;
  _DWORD *v1195;
  uint64_t v1196;
  int v1197;
  _DWORD *v1198;
  uint64_t v1199;
  int v1200;
  _DWORD *v1201;
  uint64_t v1202;
  int v1203;
  _DWORD *v1204;
  uint64_t v1205;
  int v1206;
  _DWORD *v1207;
  uint64_t v1208;
  int v1209;
  _DWORD *v1210;
  uint64_t v1211;
  int v1212;
  _DWORD *v1213;
  uint64_t v1214;
  int v1215;
  _DWORD *v1216;
  uint64_t v1217;
  int v1218;
  _DWORD *v1219;
  uint64_t v1220;
  int v1221;
  _DWORD *v1222;
  uint64_t v1223;
  int v1224;
  _DWORD *v1225;
  uint64_t v1226;
  int v1227;
  _DWORD *v1228;
  uint64_t v1229;
  int v1230;
  _DWORD *v1231;
  uint64_t v1232;
  int v1233;
  _DWORD *v1234;
  uint64_t v1235;
  int v1236;
  _DWORD *v1237;
  uint64_t v1238;
  int v1239;
  _DWORD *v1240;
  uint64_t v1241;
  int v1242;
  _DWORD *v1243;
  uint64_t v1244;
  int v1245;
  _DWORD *v1246;
  uint64_t v1247;
  int v1248;
  _DWORD *v1249;
  uint64_t v1250;
  int v1251;
  _DWORD *v1252;
  uint64_t v1253;
  int v1254;
  _DWORD *v1255;
  uint64_t v1256;
  int v1257;
  _DWORD *v1258;
  uint64_t v1259;
  int v1260;
  _DWORD *v1261;
  uint64_t v1262;
  int v1263;
  _DWORD *v1264;
  uint64_t v1265;
  int v1266;
  _DWORD *v1267;
  uint64_t v1268;
  int v1269;
  _DWORD *v1270;
  uint64_t v1271;
  int v1272;
  _DWORD *v1273;
  uint64_t v1274;
  int v1275;
  _DWORD *v1276;
  uint64_t v1277;
  int v1278;
  _DWORD *v1279;
  uint64_t v1280;
  int v1281;
  _DWORD *v1282;
  uint64_t v1283;
  int v1284;
  _DWORD *v1285;
  uint64_t v1286;
  int v1287;
  _DWORD *v1288;
  uint64_t v1289;
  int v1290;
  _DWORD *v1291;
  uint64_t v1292;
  int v1293;
  _DWORD *v1294;
  uint64_t v1295;
  int v1296;
  _DWORD *v1297;
  uint64_t v1298;
  int v1299;
  _DWORD *v1300;
  uint64_t v1301;
  int v1302;
  _DWORD *v1303;
  uint64_t v1304;
  int v1305;
  _DWORD *v1306;
  uint64_t v1307;
  int v1308;
  _DWORD *v1309;
  uint64_t v1310;
  int v1311;
  _DWORD *v1312;
  uint64_t v1313;
  int v1314;
  _DWORD *v1315;
  uint64_t v1316;
  int v1317;
  _DWORD *v1318;
  uint64_t v1319;
  int v1320;
  _DWORD *v1321;
  uint64_t v1322;
  int v1323;
  _DWORD *v1324;
  uint64_t v1325;
  int v1326;
  _DWORD *v1327;
  uint64_t v1328;
  int v1329;
  _DWORD *v1330;
  uint64_t v1331;
  int v1332;
  _DWORD *v1333;
  uint64_t v1334;
  int v1335;
  _DWORD *v1336;
  uint64_t v1337;
  int v1338;
  _DWORD *v1339;
  uint64_t v1340;
  int v1341;
  _DWORD *v1342;
  uint64_t v1343;
  int v1344;
  _DWORD *v1345;
  uint64_t v1346;
  int v1347;
  _DWORD *v1348;
  uint64_t v1349;
  int v1350;
  _DWORD *v1351;
  uint64_t v1352;
  int v1353;
  _DWORD *v1354;
  uint64_t v1355;
  int v1356;
  _DWORD *v1357;
  uint64_t v1358;
  int v1359;
  _DWORD *v1360;
  uint64_t v1361;
  int v1362;
  _DWORD *v1363;
  uint64_t v1364;
  int v1365;
  _DWORD *v1366;
  uint64_t v1367;
  int v1368;
  _DWORD *v1369;
  uint64_t v1370;
  int v1371;
  _DWORD *v1372;
  uint64_t v1373;
  int v1374;
  _DWORD *v1375;
  uint64_t v1376;
  int v1377;
  _DWORD *v1378;
  uint64_t v1379;
  int v1380;
  _DWORD *v1381;
  uint64_t v1382;
  int v1383;
  uint64_t v1384;

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v4 = v3;
  v5 = (_QWORD *)v2;
  v1384 = *MEMORY[0x1E0C80C00];
  WebCore::ReadableByteStreamInternalsBuiltinFunctions::init((WebCore::ReadableByteStreamInternalsBuiltinFunctions *)(v2 + 8), v3);
  WebCore::ReadableStreamInternalsBuiltinFunctions::init((WebCore::ReadableStreamInternalsBuiltinFunctions *)(v5 + 36), v4);
  v6 = v5[85];
  v7 = *(_QWORD *)(v6 + 41456);
  v8 = *(_QWORD **)(v7 + 6248);
  if (!v8 || !*v8 || (v8[1] & 3) != 0)
  {
    v9 = (uint64_t *)(v7 + 6248);
    v10 = *(WTF::StringImpl **)(v7 + 6032);
    if (v10)
      *(_DWORD *)v10 += 2;
    v872[0] = v10;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v792 = BuiltinExecutable;
      v832 = v7;
      if ((BuiltinExecutable & 8) != 0)
        v12 = (BuiltinExecutable - 112) | 1;
      else
        v12 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v12 & 1) != 0)
        v752 = v12 + 47;
      else
        v752 = *(_QWORD *)v12 + 32;
      BuiltinExecutable = *(_QWORD *)(v752 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v752 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v792;
      *(_QWORD *)(BuiltinExecutable + 8) = v832 + 5920;
      *(_QWORD *)(BuiltinExecutable + 16) = v9;
    }
    v13 = *v9;
    *v9 = BuiltinExecutable;
    if (v13)
      *(_QWORD *)(v13 + 8) = 3;
    v14 = v872[0];
    v872[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v15 = JSC::JSFunction::create();
  v5[92] = v15;
  if (v15 && *(_DWORD *)(v6 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v6 + 192), v4);
  v16 = v5[85];
  v17 = *(_QWORD *)(v16 + 41456);
  v18 = *(_QWORD **)(v17 + 6280);
  if (!v18 || !*v18 || (v18[1] & 3) != 0)
  {
    v19 = (uint64_t *)(v17 + 6280);
    v20 = *(WTF::StringImpl **)(v17 + 6176);
    if (v20)
      *(_DWORD *)v20 += 2;
    v872[0] = v20;
    Allocator = JSC::createBuiltinExecutable();
    if (Allocator)
    {
      v793 = Allocator;
      v833 = v17;
      if ((Allocator & 8) != 0)
        v22 = (Allocator - 112) | 1;
      else
        v22 = Allocator & 0xFFFFFFFFFFFFC000;
      if ((v22 & 1) != 0)
        v753 = v22 + 47;
      else
        v753 = *(_QWORD *)v22 + 32;
      Allocator = *(_QWORD *)(v753 + 16);
      if (!Allocator)
        Allocator = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v753 + 16) = *(_QWORD *)Allocator;
      *(_QWORD *)Allocator = v793;
      *(_QWORD *)(Allocator + 8) = v833 + 5920;
      *(_QWORD *)(Allocator + 16) = v19;
    }
    v23 = *v19;
    *v19 = Allocator;
    if (v23)
      *(_QWORD *)(v23 + 8) = 3;
    v24 = v872[0];
    v872[0] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v22);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v25 = JSC::JSFunction::create();
  v5[101] = v25;
  if (v25 && *(_DWORD *)(v16 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v16 + 192), v4);
  v26 = v5[85];
  v27 = *(_QWORD *)(v26 + 41456);
  v28 = *(_QWORD **)(v27 + 6312);
  if (!v28 || !*v28 || (v28[1] & 3) != 0)
  {
    v29 = (uint64_t *)(v27 + 6312);
    v30 = *(WTF::StringImpl **)(v27 + 6128);
    if (v30)
      *(_DWORD *)v30 += 2;
    v872[0] = v30;
    v31 = JSC::createBuiltinExecutable();
    if (v31)
    {
      v794 = v31;
      v834 = v27;
      if ((v31 & 8) != 0)
        v32 = (v31 - 112) | 1;
      else
        v32 = v31 & 0xFFFFFFFFFFFFC000;
      if ((v32 & 1) != 0)
        v754 = v32 + 47;
      else
        v754 = *(_QWORD *)v32 + 32;
      v31 = *(_QWORD *)(v754 + 16);
      if (!v31)
        v31 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v754 + 16) = *(_QWORD *)v31;
      *(_QWORD *)v31 = v794;
      *(_QWORD *)(v31 + 8) = v834 + 5920;
      *(_QWORD *)(v31 + 16) = v29;
    }
    v33 = *v29;
    *v29 = v31;
    if (v33)
      *(_QWORD *)(v33 + 8) = 3;
    v34 = v872[0];
    v872[0] = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v32);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v35 = JSC::JSFunction::create();
  v5[98] = v35;
  if (v35 && *(_DWORD *)(v26 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v26 + 192), v4);
  v36 = v5[85];
  v37 = *(_QWORD *)(v36 + 41456);
  v38 = *(_QWORD **)(v37 + 6344);
  if (!v38 || !*v38 || (v38[1] & 3) != 0)
  {
    v39 = (uint64_t *)(v37 + 6344);
    v40 = *(WTF::StringImpl **)(v37 + 6144);
    if (v40)
      *(_DWORD *)v40 += 2;
    v872[0] = v40;
    v41 = JSC::createBuiltinExecutable();
    if (v41)
    {
      v795 = v41;
      v835 = v37;
      if ((v41 & 8) != 0)
        v42 = (v41 - 112) | 1;
      else
        v42 = v41 & 0xFFFFFFFFFFFFC000;
      if ((v42 & 1) != 0)
        v755 = v42 + 47;
      else
        v755 = *(_QWORD *)v42 + 32;
      v41 = *(_QWORD *)(v755 + 16);
      if (!v41)
        v41 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v755 + 16) = *(_QWORD *)v41;
      *(_QWORD *)v41 = v795;
      *(_QWORD *)(v41 + 8) = v835 + 5920;
      *(_QWORD *)(v41 + 16) = v39;
    }
    v43 = *v39;
    *v39 = v41;
    if (v43)
      *(_QWORD *)(v43 + 8) = 3;
    v44 = v872[0];
    v872[0] = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v42);
      else
        *(_DWORD *)v44 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v45 = JSC::JSFunction::create();
  v5[99] = v45;
  if (v45 && *(_DWORD *)(v36 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v36 + 192), v4);
  v46 = v5[85];
  v47 = *(_QWORD *)(v46 + 41456);
  v48 = *(_QWORD **)(v47 + 6376);
  if (!v48 || !*v48 || (v48[1] & 3) != 0)
  {
    v49 = (uint64_t *)(v47 + 6376);
    v50 = *(WTF::StringImpl **)(v47 + 6112);
    if (v50)
      *(_DWORD *)v50 += 2;
    v872[0] = v50;
    v51 = JSC::createBuiltinExecutable();
    if (v51)
    {
      v796 = v51;
      v836 = v47;
      if ((v51 & 8) != 0)
        v52 = (v51 - 112) | 1;
      else
        v52 = v51 & 0xFFFFFFFFFFFFC000;
      if ((v52 & 1) != 0)
        v756 = v52 + 47;
      else
        v756 = *(_QWORD *)v52 + 32;
      v51 = *(_QWORD *)(v756 + 16);
      if (!v51)
        v51 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v756 + 16) = *(_QWORD *)v51;
      *(_QWORD *)v51 = v796;
      *(_QWORD *)(v51 + 8) = v836 + 5920;
      *(_QWORD *)(v51 + 16) = v49;
    }
    v53 = *v49;
    *v49 = v51;
    if (v53)
      *(_QWORD *)(v53 + 8) = 3;
    v54 = v872[0];
    v872[0] = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v52);
      else
        *(_DWORD *)v54 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v55 = JSC::JSFunction::create();
  v5[97] = v55;
  if (v55 && *(_DWORD *)(v46 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v46 + 192), v4);
  v56 = v5[85];
  v57 = *(_QWORD *)(v56 + 41456);
  v58 = *(_QWORD **)(v57 + 6408);
  if (!v58 || !*v58 || (v58[1] & 3) != 0)
  {
    v59 = (uint64_t *)(v57 + 6408);
    v60 = *(WTF::StringImpl **)(v57 + 6096);
    if (v60)
      *(_DWORD *)v60 += 2;
    v872[0] = v60;
    v61 = JSC::createBuiltinExecutable();
    if (v61)
    {
      v797 = v61;
      v837 = v57;
      if ((v61 & 8) != 0)
        v62 = (v61 - 112) | 1;
      else
        v62 = v61 & 0xFFFFFFFFFFFFC000;
      if ((v62 & 1) != 0)
        v757 = v62 + 47;
      else
        v757 = *(_QWORD *)v62 + 32;
      v61 = *(_QWORD *)(v757 + 16);
      if (!v61)
        v61 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v757 + 16) = *(_QWORD *)v61;
      *(_QWORD *)v61 = v797;
      *(_QWORD *)(v61 + 8) = v837 + 5920;
      *(_QWORD *)(v61 + 16) = v59;
    }
    v63 = *v59;
    *v59 = v61;
    if (v63)
      *(_QWORD *)(v63 + 8) = 3;
    v64 = v872[0];
    v872[0] = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
        WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v62);
      else
        *(_DWORD *)v64 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v65 = JSC::JSFunction::create();
  v5[96] = v65;
  if (v65 && *(_DWORD *)(v56 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v56 + 192), v4);
  v66 = v5[85];
  v67 = *(_QWORD *)(v66 + 41456);
  v68 = *(_QWORD **)(v67 + 6440);
  if (!v68 || !*v68 || (v68[1] & 3) != 0)
  {
    v69 = (uint64_t *)(v67 + 6440);
    v70 = *(WTF::StringImpl **)(v67 + 6080);
    if (v70)
      *(_DWORD *)v70 += 2;
    v872[0] = v70;
    v71 = JSC::createBuiltinExecutable();
    if (v71)
    {
      v823 = v71;
      v863 = v67;
      if ((v71 & 8) != 0)
        v72 = (v71 - 112) | 1;
      else
        v72 = v71 & 0xFFFFFFFFFFFFC000;
      if ((v72 & 1) != 0)
        v783 = v72 + 47;
      else
        v783 = *(_QWORD *)v72 + 32;
      v71 = *(_QWORD *)(v783 + 16);
      if (!v71)
        v71 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v783 + 16) = *(_QWORD *)v71;
      *(_QWORD *)v71 = v823;
      *(_QWORD *)(v71 + 8) = v863 + 5920;
      *(_QWORD *)(v71 + 16) = v69;
    }
    v73 = *v69;
    *v69 = v71;
    if (v73)
      *(_QWORD *)(v73 + 8) = 3;
    v74 = v872[0];
    v872[0] = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v72);
      else
        *(_DWORD *)v74 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v75 = JSC::JSFunction::create();
  v5[95] = v75;
  if (v75 && *(_DWORD *)(v66 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v66 + 192), v4);
  v76 = v5[85];
  v77 = *(_QWORD *)(v76 + 41456);
  v78 = *(_QWORD **)(v77 + 6472);
  if (!v78 || !*v78 || (v78[1] & 3) != 0)
  {
    v79 = (uint64_t *)(v77 + 6472);
    v80 = *(WTF::StringImpl **)(v77 + 6208);
    if (v80)
      *(_DWORD *)v80 += 2;
    v872[0] = v80;
    v81 = JSC::createBuiltinExecutable();
    if (v81)
    {
      v824 = v81;
      v864 = v77;
      if ((v81 & 8) != 0)
        v82 = (v81 - 112) | 1;
      else
        v82 = v81 & 0xFFFFFFFFFFFFC000;
      if ((v82 & 1) != 0)
        v784 = v82 + 47;
      else
        v784 = *(_QWORD *)v82 + 32;
      v81 = *(_QWORD *)(v784 + 16);
      if (!v81)
        v81 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v784 + 16) = *(_QWORD *)v81;
      *(_QWORD *)v81 = v824;
      *(_QWORD *)(v81 + 8) = v864 + 5920;
      *(_QWORD *)(v81 + 16) = v79;
    }
    v83 = *v79;
    *v79 = v81;
    if (v83)
      *(_QWORD *)(v83 + 8) = 3;
    v84 = v872[0];
    v872[0] = 0;
    if (v84)
    {
      if (*(_DWORD *)v84 == 2)
        WTF::StringImpl::destroy(v84, (WTF::StringImpl *)v82);
      else
        *(_DWORD *)v84 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v85 = JSC::JSFunction::create();
  v5[103] = v85;
  if (v85 && *(_DWORD *)(v76 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v76 + 192), v4);
  v86 = v5[85];
  v87 = *(_QWORD *)(v86 + 41456);
  v88 = *(_QWORD **)(v87 + 6504);
  if (!v88 || !*v88 || (v88[1] & 3) != 0)
  {
    v89 = (uint64_t *)(v87 + 6504);
    v90 = *(WTF::StringImpl **)(v87 + 6048);
    if (v90)
      *(_DWORD *)v90 += 2;
    v872[0] = v90;
    v91 = JSC::createBuiltinExecutable();
    if (v91)
    {
      v825 = v91;
      v865 = v87;
      if ((v91 & 8) != 0)
        v92 = (v91 - 112) | 1;
      else
        v92 = v91 & 0xFFFFFFFFFFFFC000;
      if ((v92 & 1) != 0)
        v785 = v92 + 47;
      else
        v785 = *(_QWORD *)v92 + 32;
      v91 = *(_QWORD *)(v785 + 16);
      if (!v91)
        v91 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v785 + 16) = *(_QWORD *)v91;
      *(_QWORD *)v91 = v825;
      *(_QWORD *)(v91 + 8) = v865 + 5920;
      *(_QWORD *)(v91 + 16) = v89;
    }
    v93 = *v89;
    *v89 = v91;
    if (v93)
      *(_QWORD *)(v93 + 8) = 3;
    v94 = v872[0];
    v872[0] = 0;
    if (v94)
    {
      if (*(_DWORD *)v94 == 2)
        WTF::StringImpl::destroy(v94, (WTF::StringImpl *)v92);
      else
        *(_DWORD *)v94 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v95 = JSC::JSFunction::create();
  v5[93] = v95;
  if (v95 && *(_DWORD *)(v86 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v86 + 192), v4);
  v96 = v5[85];
  v97 = *(_QWORD *)(v96 + 41456);
  v98 = *(_QWORD **)(v97 + 6536);
  if (!v98 || !*v98 || (v98[1] & 3) != 0)
  {
    v99 = (uint64_t *)(v97 + 6536);
    v100 = *(WTF::StringImpl **)(v97 + 5952);
    if (v100)
      *(_DWORD *)v100 += 2;
    v872[0] = v100;
    v101 = JSC::createBuiltinExecutable();
    if (v101)
    {
      v826 = v101;
      v866 = v97;
      if ((v101 & 8) != 0)
        v102 = (v101 - 112) | 1;
      else
        v102 = v101 & 0xFFFFFFFFFFFFC000;
      if ((v102 & 1) != 0)
        v786 = v102 + 47;
      else
        v786 = *(_QWORD *)v102 + 32;
      v101 = *(_QWORD *)(v786 + 16);
      if (!v101)
        v101 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v786 + 16) = *(_QWORD *)v101;
      *(_QWORD *)v101 = v826;
      *(_QWORD *)(v101 + 8) = v866 + 5920;
      *(_QWORD *)(v101 + 16) = v99;
    }
    v103 = *v99;
    *v99 = v101;
    if (v103)
      *(_QWORD *)(v103 + 8) = 3;
    v104 = v872[0];
    v872[0] = 0;
    if (v104)
    {
      if (*(_DWORD *)v104 == 2)
        WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v102);
      else
        *(_DWORD *)v104 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v105 = JSC::JSFunction::create();
  v5[87] = v105;
  if (v105 && *(_DWORD *)(v96 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v96 + 192), v4);
  v106 = v5[85];
  v107 = *(_QWORD *)(v106 + 41456);
  v108 = *(_QWORD **)(v107 + 6568);
  if (!v108 || !*v108 || (v108[1] & 3) != 0)
  {
    v109 = (uint64_t *)(v107 + 6568);
    v110 = *(WTF::StringImpl **)(v107 + 5968);
    if (v110)
      *(_DWORD *)v110 += 2;
    v872[0] = v110;
    v111 = JSC::createBuiltinExecutable();
    if (v111)
    {
      v827 = v111;
      v867 = v107;
      if ((v111 & 8) != 0)
        v112 = (v111 - 112) | 1;
      else
        v112 = v111 & 0xFFFFFFFFFFFFC000;
      if ((v112 & 1) != 0)
        v787 = v112 + 47;
      else
        v787 = *(_QWORD *)v112 + 32;
      v111 = *(_QWORD *)(v787 + 16);
      if (!v111)
        v111 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v787 + 16) = *(_QWORD *)v111;
      *(_QWORD *)v111 = v827;
      *(_QWORD *)(v111 + 8) = v867 + 5920;
      *(_QWORD *)(v111 + 16) = v109;
    }
    v113 = *v109;
    *v109 = v111;
    if (v113)
      *(_QWORD *)(v113 + 8) = 3;
    v114 = v872[0];
    v872[0] = 0;
    if (v114)
    {
      if (*(_DWORD *)v114 == 2)
        WTF::StringImpl::destroy(v114, (WTF::StringImpl *)v112);
      else
        *(_DWORD *)v114 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v115 = JSC::JSFunction::create();
  v5[88] = v115;
  if (v115 && *(_DWORD *)(v106 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v106 + 192), v4);
  v116 = v5[85];
  v117 = *(_QWORD *)(v116 + 41456);
  v118 = *(_QWORD **)(v117 + 6600);
  if (!v118 || !*v118 || (v118[1] & 3) != 0)
  {
    v119 = (uint64_t *)(v117 + 6600);
    v120 = *(WTF::StringImpl **)(v117 + 6064);
    if (v120)
      *(_DWORD *)v120 += 2;
    v872[0] = v120;
    v121 = JSC::createBuiltinExecutable();
    if (v121)
    {
      v798 = v121;
      v838 = v117;
      if ((v121 & 8) != 0)
        v122 = (v121 - 112) | 1;
      else
        v122 = v121 & 0xFFFFFFFFFFFFC000;
      if ((v122 & 1) != 0)
        v758 = v122 + 47;
      else
        v758 = *(_QWORD *)v122 + 32;
      v121 = *(_QWORD *)(v758 + 16);
      if (!v121)
        v121 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v758 + 16) = *(_QWORD *)v121;
      *(_QWORD *)v121 = v798;
      *(_QWORD *)(v121 + 8) = v838 + 5920;
      *(_QWORD *)(v121 + 16) = v119;
    }
    v123 = *v119;
    *v119 = v121;
    if (v123)
      *(_QWORD *)(v123 + 8) = 3;
    v124 = v872[0];
    v872[0] = 0;
    if (v124)
    {
      if (*(_DWORD *)v124 == 2)
        WTF::StringImpl::destroy(v124, (WTF::StringImpl *)v122);
      else
        *(_DWORD *)v124 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v125 = JSC::JSFunction::create();
  v5[94] = v125;
  if (v125 && *(_DWORD *)(v116 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v116 + 192), v4);
  v126 = v5[85];
  v127 = *(_QWORD *)(v126 + 41456);
  v128 = *(_QWORD **)(v127 + 6632);
  if (!v128 || !*v128 || (v128[1] & 3) != 0)
  {
    v129 = (uint64_t *)(v127 + 6632);
    v130 = *(WTF::StringImpl **)(v127 + 6160);
    if (v130)
      *(_DWORD *)v130 += 2;
    v872[0] = v130;
    v131 = JSC::createBuiltinExecutable();
    if (v131)
    {
      v828 = v131;
      v868 = v127;
      if ((v131 & 8) != 0)
        v132 = (v131 - 112) | 1;
      else
        v132 = v131 & 0xFFFFFFFFFFFFC000;
      if ((v132 & 1) != 0)
        v788 = v132 + 47;
      else
        v788 = *(_QWORD *)v132 + 32;
      v131 = *(_QWORD *)(v788 + 16);
      if (!v131)
        v131 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v788 + 16) = *(_QWORD *)v131;
      *(_QWORD *)v131 = v828;
      *(_QWORD *)(v131 + 8) = v868 + 5920;
      *(_QWORD *)(v131 + 16) = v129;
    }
    v133 = *v129;
    *v129 = v131;
    if (v133)
      *(_QWORD *)(v133 + 8) = 3;
    v134 = v872[0];
    v872[0] = 0;
    if (v134)
    {
      if (*(_DWORD *)v134 == 2)
        WTF::StringImpl::destroy(v134, (WTF::StringImpl *)v132);
      else
        *(_DWORD *)v134 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v135 = JSC::JSFunction::create();
  v5[100] = v135;
  if (v135 && *(_DWORD *)(v126 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v126 + 192), v4);
  v136 = v5[85];
  v137 = *(_QWORD *)(v136 + 41456);
  v138 = *(_QWORD **)(v137 + 6664);
  if (!v138 || !*v138 || (v138[1] & 3) != 0)
  {
    v139 = (uint64_t *)(v137 + 6664);
    v140 = *(WTF::StringImpl **)(v137 + 6016);
    if (v140)
      *(_DWORD *)v140 += 2;
    v872[0] = v140;
    v141 = JSC::createBuiltinExecutable();
    if (v141)
    {
      v829 = v141;
      v869 = v137;
      if ((v141 & 8) != 0)
        v142 = (v141 - 112) | 1;
      else
        v142 = v141 & 0xFFFFFFFFFFFFC000;
      if ((v142 & 1) != 0)
        v789 = v142 + 47;
      else
        v789 = *(_QWORD *)v142 + 32;
      v141 = *(_QWORD *)(v789 + 16);
      if (!v141)
        v141 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v789 + 16) = *(_QWORD *)v141;
      *(_QWORD *)v141 = v829;
      *(_QWORD *)(v141 + 8) = v869 + 5920;
      *(_QWORD *)(v141 + 16) = v139;
    }
    v143 = *v139;
    *v139 = v141;
    if (v143)
      *(_QWORD *)(v143 + 8) = 3;
    v144 = v872[0];
    v872[0] = 0;
    if (v144)
    {
      if (*(_DWORD *)v144 == 2)
        WTF::StringImpl::destroy(v144, (WTF::StringImpl *)v142);
      else
        *(_DWORD *)v144 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v145 = JSC::JSFunction::create();
  v5[91] = v145;
  if (v145 && *(_DWORD *)(v136 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v136 + 192), v4);
  v146 = v5[85];
  v147 = *(_QWORD *)(v146 + 41456);
  v148 = *(_QWORD **)(v147 + 6696);
  if (!v148 || !*v148 || (v148[1] & 3) != 0)
  {
    v149 = (uint64_t *)(v147 + 6696);
    v150 = *(WTF::StringImpl **)(v147 + 5984);
    if (v150)
      *(_DWORD *)v150 += 2;
    v872[0] = v150;
    v151 = JSC::createBuiltinExecutable();
    if (v151)
    {
      v799 = v151;
      v839 = v147;
      if ((v151 & 8) != 0)
        v152 = (v151 - 112) | 1;
      else
        v152 = v151 & 0xFFFFFFFFFFFFC000;
      if ((v152 & 1) != 0)
        v759 = v152 + 47;
      else
        v759 = *(_QWORD *)v152 + 32;
      v151 = *(_QWORD *)(v759 + 16);
      if (!v151)
        v151 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v759 + 16) = *(_QWORD *)v151;
      *(_QWORD *)v151 = v799;
      *(_QWORD *)(v151 + 8) = v839 + 5920;
      *(_QWORD *)(v151 + 16) = v149;
    }
    v153 = *v149;
    *v149 = v151;
    if (v153)
      *(_QWORD *)(v153 + 8) = 3;
    v154 = v872[0];
    v872[0] = 0;
    if (v154)
    {
      if (*(_DWORD *)v154 == 2)
        WTF::StringImpl::destroy(v154, (WTF::StringImpl *)v152);
      else
        *(_DWORD *)v154 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v155 = JSC::JSFunction::create();
  v5[89] = v155;
  if (v155 && *(_DWORD *)(v146 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v146 + 192), v4);
  v156 = v5[85];
  v157 = *(_QWORD *)(v156 + 41456);
  v158 = *(_QWORD **)(v157 + 6728);
  if (!v158 || !*v158 || (v158[1] & 3) != 0)
  {
    v159 = (uint64_t *)(v157 + 6728);
    v160 = *(WTF::StringImpl **)(v157 + 6000);
    if (v160)
      *(_DWORD *)v160 += 2;
    v872[0] = v160;
    v161 = JSC::createBuiltinExecutable();
    if (v161)
    {
      v800 = v161;
      v840 = v157;
      if ((v161 & 8) != 0)
        v162 = (v161 - 112) | 1;
      else
        v162 = v161 & 0xFFFFFFFFFFFFC000;
      if ((v162 & 1) != 0)
        v760 = v162 + 47;
      else
        v760 = *(_QWORD *)v162 + 32;
      v161 = *(_QWORD *)(v760 + 16);
      if (!v161)
        v161 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v760 + 16) = *(_QWORD *)v161;
      *(_QWORD *)v161 = v800;
      *(_QWORD *)(v161 + 8) = v840 + 5920;
      *(_QWORD *)(v161 + 16) = v159;
    }
    v163 = *v159;
    *v159 = v161;
    if (v163)
      *(_QWORD *)(v163 + 8) = 3;
    v164 = v872[0];
    v872[0] = 0;
    if (v164)
    {
      if (*(_DWORD *)v164 == 2)
        WTF::StringImpl::destroy(v164, (WTF::StringImpl *)v162);
      else
        *(_DWORD *)v164 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v165 = JSC::JSFunction::create();
  v5[90] = v165;
  if (v165 && *(_DWORD *)(v156 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v156 + 192), v4);
  v166 = v5[85];
  v167 = *(_QWORD *)(v166 + 41456);
  v168 = *(_QWORD **)(v167 + 6760);
  if (!v168 || !*v168 || (v168[1] & 3) != 0)
  {
    v169 = (uint64_t *)(v167 + 6760);
    v170 = *(WTF::StringImpl **)(v167 + 5936);
    if (v170)
      *(_DWORD *)v170 += 2;
    v872[0] = v170;
    v171 = JSC::createBuiltinExecutable();
    if (v171)
    {
      v801 = v171;
      v841 = v167;
      if ((v171 & 8) != 0)
        v172 = (v171 - 112) | 1;
      else
        v172 = v171 & 0xFFFFFFFFFFFFC000;
      if ((v172 & 1) != 0)
        v761 = v172 + 47;
      else
        v761 = *(_QWORD *)v172 + 32;
      v171 = *(_QWORD *)(v761 + 16);
      if (!v171)
        v171 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v761 + 16) = *(_QWORD *)v171;
      *(_QWORD *)v171 = v801;
      *(_QWORD *)(v171 + 8) = v841 + 5920;
      *(_QWORD *)(v171 + 16) = v169;
    }
    v173 = *v169;
    *v169 = v171;
    if (v173)
      *(_QWORD *)(v173 + 8) = 3;
    v174 = v872[0];
    v872[0] = 0;
    if (v174)
    {
      if (*(_DWORD *)v174 == 2)
        WTF::StringImpl::destroy(v174, (WTF::StringImpl *)v172);
      else
        *(_DWORD *)v174 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v175 = JSC::JSFunction::create();
  v5[86] = v175;
  if (v175 && *(_DWORD *)(v166 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v166 + 192), v4);
  v176 = v5[85];
  v177 = *(_QWORD *)(v176 + 41456);
  v178 = *(_QWORD **)(v177 + 6792);
  if (!v178 || !*v178 || (v178[1] & 3) != 0)
  {
    v179 = (uint64_t *)(v177 + 6792);
    v180 = *(WTF::StringImpl **)(v177 + 6192);
    if (v180)
      *(_DWORD *)v180 += 2;
    v872[0] = v180;
    v181 = JSC::createBuiltinExecutable();
    if (v181)
    {
      v802 = v181;
      v842 = v177;
      if ((v181 & 8) != 0)
        v182 = (v181 - 112) | 1;
      else
        v182 = v181 & 0xFFFFFFFFFFFFC000;
      if ((v182 & 1) != 0)
        v762 = v182 + 47;
      else
        v762 = *(_QWORD *)v182 + 32;
      v181 = *(_QWORD *)(v762 + 16);
      if (!v181)
        v181 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v762 + 16) = *(_QWORD *)v181;
      *(_QWORD *)v181 = v802;
      *(_QWORD *)(v181 + 8) = v842 + 5920;
      *(_QWORD *)(v181 + 16) = v179;
    }
    v183 = *v179;
    *v179 = v181;
    if (v183)
      *(_QWORD *)(v183 + 8) = 3;
    v184 = v872[0];
    v872[0] = 0;
    if (v184)
    {
      if (*(_DWORD *)v184 == 2)
        WTF::StringImpl::destroy(v184, (WTF::StringImpl *)v182);
      else
        *(_DWORD *)v184 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v185 = JSC::JSFunction::create();
  v5[102] = v185;
  if (v185 && *(_DWORD *)(v176 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v176 + 192), v4);
  v186 = v5[104];
  v187 = *(_QWORD *)(v186 + 41456);
  v188 = *(_QWORD **)(v187 + 7400);
  if (!v188 || !*v188 || (v188[1] & 3) != 0)
  {
    v189 = (uint64_t *)(v187 + 7400);
    v190 = *(WTF::StringImpl **)(v187 + 7120);
    if (v190)
      *(_DWORD *)v190 += 2;
    v872[0] = v190;
    v191 = JSC::createBuiltinExecutable();
    if (v191)
    {
      v803 = v191;
      v843 = v187;
      if ((v191 & 8) != 0)
        v192 = (v191 - 112) | 1;
      else
        v192 = v191 & 0xFFFFFFFFFFFFC000;
      if ((v192 & 1) != 0)
        v763 = v192 + 47;
      else
        v763 = *(_QWORD *)v192 + 32;
      v191 = *(_QWORD *)(v763 + 16);
      if (!v191)
        v191 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v763 + 16) = *(_QWORD *)v191;
      *(_QWORD *)v191 = v803;
      *(_QWORD *)(v191 + 8) = v843 + 7056;
      *(_QWORD *)(v191 + 16) = v189;
    }
    v193 = *v189;
    *v189 = v191;
    if (v193)
      *(_QWORD *)(v193 + 8) = 3;
    v194 = v872[0];
    v872[0] = 0;
    if (v194)
    {
      if (*(_DWORD *)v194 == 2)
        WTF::StringImpl::destroy(v194, (WTF::StringImpl *)v192);
      else
        *(_DWORD *)v194 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v195 = JSC::JSFunction::create();
  v5[108] = v195;
  if (v195 && *(_DWORD *)(v186 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v186 + 192), v4);
  v196 = v5[104];
  v197 = *(_QWORD *)(v196 + 41456);
  v198 = *(_QWORD **)(v197 + 7432);
  if (!v198 || !*v198 || (v198[1] & 3) != 0)
  {
    v199 = (uint64_t *)(v197 + 7432);
    v200 = *(WTF::StringImpl **)(v197 + 7136);
    if (v200)
      *(_DWORD *)v200 += 2;
    v872[0] = v200;
    v201 = JSC::createBuiltinExecutable();
    if (v201)
    {
      v804 = v201;
      v844 = v197;
      if ((v201 & 8) != 0)
        v202 = (v201 - 112) | 1;
      else
        v202 = v201 & 0xFFFFFFFFFFFFC000;
      if ((v202 & 1) != 0)
        v764 = v202 + 47;
      else
        v764 = *(_QWORD *)v202 + 32;
      v201 = *(_QWORD *)(v764 + 16);
      if (!v201)
        v201 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v764 + 16) = *(_QWORD *)v201;
      *(_QWORD *)v201 = v804;
      *(_QWORD *)(v201 + 8) = v844 + 7056;
      *(_QWORD *)(v201 + 16) = v199;
    }
    v203 = *v199;
    *v199 = v201;
    if (v203)
      *(_QWORD *)(v203 + 8) = 3;
    v204 = v872[0];
    v872[0] = 0;
    if (v204)
    {
      if (*(_DWORD *)v204 == 2)
        WTF::StringImpl::destroy(v204, (WTF::StringImpl *)v202);
      else
        *(_DWORD *)v204 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v205 = JSC::JSFunction::create();
  v5[109] = v205;
  if (v205 && *(_DWORD *)(v196 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v196 + 192), v4);
  v206 = v5[104];
  v207 = *(_QWORD *)(v206 + 41456);
  v208 = *(_QWORD **)(v207 + 7464);
  if (!v208 || !*v208 || (v208[1] & 3) != 0)
  {
    v209 = (uint64_t *)(v207 + 7464);
    v210 = *(WTF::StringImpl **)(v207 + 7072);
    if (v210)
      *(_DWORD *)v210 += 2;
    v872[0] = v210;
    v211 = JSC::createBuiltinExecutable();
    if (v211)
    {
      v805 = v211;
      v845 = v207;
      if ((v211 & 8) != 0)
        v212 = (v211 - 112) | 1;
      else
        v212 = v211 & 0xFFFFFFFFFFFFC000;
      if ((v212 & 1) != 0)
        v765 = v212 + 47;
      else
        v765 = *(_QWORD *)v212 + 32;
      v211 = *(_QWORD *)(v765 + 16);
      if (!v211)
        v211 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v765 + 16) = *(_QWORD *)v211;
      *(_QWORD *)v211 = v805;
      *(_QWORD *)(v211 + 8) = v845 + 7056;
      *(_QWORD *)(v211 + 16) = v209;
    }
    v213 = *v209;
    *v209 = v211;
    if (v213)
      *(_QWORD *)(v213 + 8) = 3;
    v214 = v872[0];
    v872[0] = 0;
    if (v214)
    {
      if (*(_DWORD *)v214 == 2)
        WTF::StringImpl::destroy(v214, (WTF::StringImpl *)v212);
      else
        *(_DWORD *)v214 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v215 = JSC::JSFunction::create();
  v5[105] = v215;
  if (v215 && *(_DWORD *)(v206 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v206 + 192), v4);
  v216 = v5[104];
  v217 = *(_QWORD *)(v216 + 41456);
  v218 = *(_QWORD **)(v217 + 7496);
  if (!v218 || !*v218 || (v218[1] & 3) != 0)
  {
    v219 = (uint64_t *)(v217 + 7496);
    v220 = *(WTF::StringImpl **)(v217 + 7088);
    if (v220)
      *(_DWORD *)v220 += 2;
    v872[0] = v220;
    v221 = JSC::createBuiltinExecutable();
    if (v221)
    {
      v806 = v221;
      v846 = v217;
      if ((v221 & 8) != 0)
        v222 = (v221 - 112) | 1;
      else
        v222 = v221 & 0xFFFFFFFFFFFFC000;
      if ((v222 & 1) != 0)
        v766 = v222 + 47;
      else
        v766 = *(_QWORD *)v222 + 32;
      v221 = *(_QWORD *)(v766 + 16);
      if (!v221)
        v221 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v766 + 16) = *(_QWORD *)v221;
      *(_QWORD *)v221 = v806;
      *(_QWORD *)(v221 + 8) = v846 + 7056;
      *(_QWORD *)(v221 + 16) = v219;
    }
    v223 = *v219;
    *v219 = v221;
    if (v223)
      *(_QWORD *)(v223 + 8) = 3;
    v224 = v872[0];
    v872[0] = 0;
    if (v224)
    {
      if (*(_DWORD *)v224 == 2)
        WTF::StringImpl::destroy(v224, (WTF::StringImpl *)v222);
      else
        *(_DWORD *)v224 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v225 = JSC::JSFunction::create();
  v5[106] = v225;
  if (v225 && *(_DWORD *)(v216 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v216 + 192), v4);
  v226 = v5[104];
  v227 = *(_QWORD *)(v226 + 41456);
  v228 = *(_QWORD **)(v227 + 7528);
  if (!v228 || !*v228 || (v228[1] & 3) != 0)
  {
    v229 = (uint64_t *)(v227 + 7528);
    v230 = *(WTF::StringImpl **)(v227 + 7104);
    if (v230)
      *(_DWORD *)v230 += 2;
    v872[0] = v230;
    v231 = JSC::createBuiltinExecutable();
    if (v231)
    {
      v807 = v231;
      v847 = v227;
      if ((v231 & 8) != 0)
        v232 = (v231 - 112) | 1;
      else
        v232 = v231 & 0xFFFFFFFFFFFFC000;
      if ((v232 & 1) != 0)
        v767 = v232 + 47;
      else
        v767 = *(_QWORD *)v232 + 32;
      v231 = *(_QWORD *)(v767 + 16);
      if (!v231)
        v231 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v767 + 16) = *(_QWORD *)v231;
      *(_QWORD *)v231 = v807;
      *(_QWORD *)(v231 + 8) = v847 + 7056;
      *(_QWORD *)(v231 + 16) = v229;
    }
    v233 = *v229;
    *v229 = v231;
    if (v233)
      *(_QWORD *)(v233 + 8) = 3;
    v234 = v872[0];
    v872[0] = 0;
    if (v234)
    {
      if (*(_DWORD *)v234 == 2)
        WTF::StringImpl::destroy(v234, (WTF::StringImpl *)v232);
      else
        *(_DWORD *)v234 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v235 = JSC::JSFunction::create();
  v5[107] = v235;
  if (v235 && *(_DWORD *)(v226 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v226 + 192), v4);
  v236 = v5[104];
  v237 = *(_QWORD *)(v236 + 41456);
  v238 = *(_QWORD **)(v237 + 7560);
  if (!v238 || !*v238 || (v238[1] & 3) != 0)
  {
    v239 = (uint64_t *)(v237 + 7560);
    v240 = *(WTF::StringImpl **)(v237 + 7328);
    if (v240)
      *(_DWORD *)v240 += 2;
    v872[0] = v240;
    v241 = JSC::createBuiltinExecutable();
    if (v241)
    {
      v808 = v241;
      v848 = v237;
      if ((v241 & 8) != 0)
        v242 = (v241 - 112) | 1;
      else
        v242 = v241 & 0xFFFFFFFFFFFFC000;
      if ((v242 & 1) != 0)
        v768 = v242 + 47;
      else
        v768 = *(_QWORD *)v242 + 32;
      v241 = *(_QWORD *)(v768 + 16);
      if (!v241)
        v241 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v768 + 16) = *(_QWORD *)v241;
      *(_QWORD *)v241 = v808;
      *(_QWORD *)(v241 + 8) = v848 + 7056;
      *(_QWORD *)(v241 + 16) = v239;
    }
    v243 = *v239;
    *v239 = v241;
    if (v243)
      *(_QWORD *)(v243 + 8) = 3;
    v244 = v872[0];
    v872[0] = 0;
    if (v244)
    {
      if (*(_DWORD *)v244 == 2)
        WTF::StringImpl::destroy(v244, (WTF::StringImpl *)v242);
      else
        *(_DWORD *)v244 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v245 = JSC::JSFunction::create();
  v5[121] = v245;
  if (v245 && *(_DWORD *)(v236 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v236 + 192), v4);
  v246 = v5[104];
  v247 = *(_QWORD *)(v246 + 41456);
  v248 = *(_QWORD **)(v247 + 7592);
  if (!v248 || !*v248 || (v248[1] & 3) != 0)
  {
    v249 = (uint64_t *)(v247 + 7592);
    v250 = *(WTF::StringImpl **)(v247 + 7344);
    if (v250)
      *(_DWORD *)v250 += 2;
    v872[0] = v250;
    v251 = JSC::createBuiltinExecutable();
    if (v251)
    {
      v809 = v251;
      v849 = v247;
      if ((v251 & 8) != 0)
        v252 = (v251 - 112) | 1;
      else
        v252 = v251 & 0xFFFFFFFFFFFFC000;
      if ((v252 & 1) != 0)
        v769 = v252 + 47;
      else
        v769 = *(_QWORD *)v252 + 32;
      v251 = *(_QWORD *)(v769 + 16);
      if (!v251)
        v251 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v769 + 16) = *(_QWORD *)v251;
      *(_QWORD *)v251 = v809;
      *(_QWORD *)(v251 + 8) = v849 + 7056;
      *(_QWORD *)(v251 + 16) = v249;
    }
    v253 = *v249;
    *v249 = v251;
    if (v253)
      *(_QWORD *)(v253 + 8) = 3;
    v254 = v872[0];
    v872[0] = 0;
    if (v254)
    {
      if (*(_DWORD *)v254 == 2)
        WTF::StringImpl::destroy(v254, (WTF::StringImpl *)v252);
      else
        *(_DWORD *)v254 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v255 = JSC::JSFunction::create();
  v5[122] = v255;
  if (v255 && *(_DWORD *)(v246 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v246 + 192), v4);
  v256 = v5[104];
  v257 = *(_QWORD *)(v256 + 41456);
  v258 = *(_QWORD **)(v257 + 7624);
  if (!v258 || !*v258 || (v258[1] & 3) != 0)
  {
    v259 = (uint64_t *)(v257 + 7624);
    v260 = *(WTF::StringImpl **)(v257 + 7360);
    if (v260)
      *(_DWORD *)v260 += 2;
    v872[0] = v260;
    v261 = JSC::createBuiltinExecutable();
    if (v261)
    {
      v810 = v261;
      v850 = v257;
      if ((v261 & 8) != 0)
        v262 = (v261 - 112) | 1;
      else
        v262 = v261 & 0xFFFFFFFFFFFFC000;
      if ((v262 & 1) != 0)
        v770 = v262 + 47;
      else
        v770 = *(_QWORD *)v262 + 32;
      v261 = *(_QWORD *)(v770 + 16);
      if (!v261)
        v261 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v770 + 16) = *(_QWORD *)v261;
      *(_QWORD *)v261 = v810;
      *(_QWORD *)(v261 + 8) = v850 + 7056;
      *(_QWORD *)(v261 + 16) = v259;
    }
    v263 = *v259;
    *v259 = v261;
    if (v263)
      *(_QWORD *)(v263 + 8) = 3;
    v264 = v872[0];
    v872[0] = 0;
    if (v264)
    {
      if (*(_DWORD *)v264 == 2)
        WTF::StringImpl::destroy(v264, (WTF::StringImpl *)v262);
      else
        *(_DWORD *)v264 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v265 = JSC::JSFunction::create();
  v5[123] = v265;
  if (v265 && *(_DWORD *)(v256 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v256 + 192), v4);
  v266 = v5[104];
  v267 = *(_QWORD *)(v266 + 41456);
  v268 = *(_QWORD **)(v267 + 7656);
  if (!v268 || !*v268 || (v268[1] & 3) != 0)
  {
    v269 = (uint64_t *)(v267 + 7656);
    v270 = *(WTF::StringImpl **)(v267 + 7152);
    if (v270)
      *(_DWORD *)v270 += 2;
    v872[0] = v270;
    v271 = JSC::createBuiltinExecutable();
    if (v271)
    {
      v811 = v271;
      v851 = v267;
      if ((v271 & 8) != 0)
        v272 = (v271 - 112) | 1;
      else
        v272 = v271 & 0xFFFFFFFFFFFFC000;
      if ((v272 & 1) != 0)
        v771 = v272 + 47;
      else
        v771 = *(_QWORD *)v272 + 32;
      v271 = *(_QWORD *)(v771 + 16);
      if (!v271)
        v271 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v771 + 16) = *(_QWORD *)v271;
      *(_QWORD *)v271 = v811;
      *(_QWORD *)(v271 + 8) = v851 + 7056;
      *(_QWORD *)(v271 + 16) = v269;
    }
    v273 = *v269;
    *v269 = v271;
    if (v273)
      *(_QWORD *)(v273 + 8) = 3;
    v274 = v872[0];
    v872[0] = 0;
    if (v274)
    {
      if (*(_DWORD *)v274 == 2)
        WTF::StringImpl::destroy(v274, (WTF::StringImpl *)v272);
      else
        *(_DWORD *)v274 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v275 = JSC::JSFunction::create();
  v5[110] = v275;
  if (v275 && *(_DWORD *)(v266 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v266 + 192), v4);
  v276 = v5[104];
  v277 = *(_QWORD *)(v276 + 41456);
  v278 = *(_QWORD **)(v277 + 7688);
  if (!v278 || !*v278 || (v278[1] & 3) != 0)
  {
    v279 = (uint64_t *)(v277 + 7688);
    v280 = *(WTF::StringImpl **)(v277 + 7168);
    if (v280)
      *(_DWORD *)v280 += 2;
    v872[0] = v280;
    v281 = JSC::createBuiltinExecutable();
    if (v281)
    {
      v812 = v281;
      v852 = v277;
      if ((v281 & 8) != 0)
        v282 = (v281 - 112) | 1;
      else
        v282 = v281 & 0xFFFFFFFFFFFFC000;
      if ((v282 & 1) != 0)
        v772 = v282 + 47;
      else
        v772 = *(_QWORD *)v282 + 32;
      v281 = *(_QWORD *)(v772 + 16);
      if (!v281)
        v281 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v772 + 16) = *(_QWORD *)v281;
      *(_QWORD *)v281 = v812;
      *(_QWORD *)(v281 + 8) = v852 + 7056;
      *(_QWORD *)(v281 + 16) = v279;
    }
    v283 = *v279;
    *v279 = v281;
    if (v283)
      *(_QWORD *)(v283 + 8) = 3;
    v284 = v872[0];
    v872[0] = 0;
    if (v284)
    {
      if (*(_DWORD *)v284 == 2)
        WTF::StringImpl::destroy(v284, (WTF::StringImpl *)v282);
      else
        *(_DWORD *)v284 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v285 = JSC::JSFunction::create();
  v5[111] = v285;
  if (v285 && *(_DWORD *)(v276 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v276 + 192), v4);
  v286 = v5[104];
  v287 = *(_QWORD *)(v286 + 41456);
  v288 = *(_QWORD **)(v287 + 7720);
  if (!v288 || !*v288 || (v288[1] & 3) != 0)
  {
    v289 = (uint64_t *)(v287 + 7720);
    v290 = *(WTF::StringImpl **)(v287 + 7184);
    if (v290)
      *(_DWORD *)v290 += 2;
    v872[0] = v290;
    v291 = JSC::createBuiltinExecutable();
    if (v291)
    {
      v813 = v291;
      v853 = v287;
      if ((v291 & 8) != 0)
        v292 = (v291 - 112) | 1;
      else
        v292 = v291 & 0xFFFFFFFFFFFFC000;
      if ((v292 & 1) != 0)
        v773 = v292 + 47;
      else
        v773 = *(_QWORD *)v292 + 32;
      v291 = *(_QWORD *)(v773 + 16);
      if (!v291)
        v291 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v773 + 16) = *(_QWORD *)v291;
      *(_QWORD *)v291 = v813;
      *(_QWORD *)(v291 + 8) = v853 + 7056;
      *(_QWORD *)(v291 + 16) = v289;
    }
    v293 = *v289;
    *v289 = v291;
    if (v293)
      *(_QWORD *)(v293 + 8) = 3;
    v294 = v872[0];
    v872[0] = 0;
    if (v294)
    {
      if (*(_DWORD *)v294 == 2)
        WTF::StringImpl::destroy(v294, (WTF::StringImpl *)v292);
      else
        *(_DWORD *)v294 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v295 = JSC::JSFunction::create();
  v5[112] = v295;
  if (v295 && *(_DWORD *)(v286 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v286 + 192), v4);
  v296 = v5[104];
  v297 = *(_QWORD *)(v296 + 41456);
  v298 = *(_QWORD **)(v297 + 7752);
  if (!v298 || !*v298 || (v298[1] & 3) != 0)
  {
    v299 = (uint64_t *)(v297 + 7752);
    v300 = *(WTF::StringImpl **)(v297 + 7200);
    if (v300)
      *(_DWORD *)v300 += 2;
    v872[0] = v300;
    v301 = JSC::createBuiltinExecutable();
    if (v301)
    {
      v814 = v301;
      v854 = v297;
      if ((v301 & 8) != 0)
        v302 = (v301 - 112) | 1;
      else
        v302 = v301 & 0xFFFFFFFFFFFFC000;
      if ((v302 & 1) != 0)
        v774 = v302 + 47;
      else
        v774 = *(_QWORD *)v302 + 32;
      v301 = *(_QWORD *)(v774 + 16);
      if (!v301)
        v301 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v774 + 16) = *(_QWORD *)v301;
      *(_QWORD *)v301 = v814;
      *(_QWORD *)(v301 + 8) = v854 + 7056;
      *(_QWORD *)(v301 + 16) = v299;
    }
    v303 = *v299;
    *v299 = v301;
    if (v303)
      *(_QWORD *)(v303 + 8) = 3;
    v304 = v872[0];
    v872[0] = 0;
    if (v304)
    {
      if (*(_DWORD *)v304 == 2)
        WTF::StringImpl::destroy(v304, (WTF::StringImpl *)v302);
      else
        *(_DWORD *)v304 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v305 = JSC::JSFunction::create();
  v5[113] = v305;
  if (v305 && *(_DWORD *)(v296 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v296 + 192), v4);
  v306 = v5[104];
  v307 = *(_QWORD *)(v306 + 41456);
  v308 = *(_QWORD **)(v307 + 7784);
  if (!v308 || !*v308 || (v308[1] & 3) != 0)
  {
    v309 = (uint64_t *)(v307 + 7784);
    v310 = *(WTF::StringImpl **)(v307 + 7216);
    if (v310)
      *(_DWORD *)v310 += 2;
    v872[0] = v310;
    v311 = JSC::createBuiltinExecutable();
    if (v311)
    {
      v815 = v311;
      v855 = v307;
      if ((v311 & 8) != 0)
        v312 = (v311 - 112) | 1;
      else
        v312 = v311 & 0xFFFFFFFFFFFFC000;
      if ((v312 & 1) != 0)
        v775 = v312 + 47;
      else
        v775 = *(_QWORD *)v312 + 32;
      v311 = *(_QWORD *)(v775 + 16);
      if (!v311)
        v311 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v775 + 16) = *(_QWORD *)v311;
      *(_QWORD *)v311 = v815;
      *(_QWORD *)(v311 + 8) = v855 + 7056;
      *(_QWORD *)(v311 + 16) = v309;
    }
    v313 = *v309;
    *v309 = v311;
    if (v313)
      *(_QWORD *)(v313 + 8) = 3;
    v314 = v872[0];
    v872[0] = 0;
    if (v314)
    {
      if (*(_DWORD *)v314 == 2)
        WTF::StringImpl::destroy(v314, (WTF::StringImpl *)v312);
      else
        *(_DWORD *)v314 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v315 = JSC::JSFunction::create();
  v5[114] = v315;
  if (v315 && *(_DWORD *)(v306 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v306 + 192), v4);
  v316 = v5[104];
  v317 = *(_QWORD *)(v316 + 41456);
  v318 = *(_QWORD **)(v317 + 7816);
  if (!v318 || !*v318 || (v318[1] & 3) != 0)
  {
    v319 = (uint64_t *)(v317 + 7816);
    v320 = *(WTF::StringImpl **)(v317 + 7232);
    if (v320)
      *(_DWORD *)v320 += 2;
    v872[0] = v320;
    v321 = JSC::createBuiltinExecutable();
    if (v321)
    {
      v816 = v321;
      v856 = v317;
      if ((v321 & 8) != 0)
        v322 = (v321 - 112) | 1;
      else
        v322 = v321 & 0xFFFFFFFFFFFFC000;
      if ((v322 & 1) != 0)
        v776 = v322 + 47;
      else
        v776 = *(_QWORD *)v322 + 32;
      v321 = *(_QWORD *)(v776 + 16);
      if (!v321)
        v321 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v776 + 16) = *(_QWORD *)v321;
      *(_QWORD *)v321 = v816;
      *(_QWORD *)(v321 + 8) = v856 + 7056;
      *(_QWORD *)(v321 + 16) = v319;
    }
    v323 = *v319;
    *v319 = v321;
    if (v323)
      *(_QWORD *)(v323 + 8) = 3;
    v324 = v872[0];
    v872[0] = 0;
    if (v324)
    {
      if (*(_DWORD *)v324 == 2)
        WTF::StringImpl::destroy(v324, (WTF::StringImpl *)v322);
      else
        *(_DWORD *)v324 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v325 = JSC::JSFunction::create();
  v5[115] = v325;
  if (v325 && *(_DWORD *)(v316 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v316 + 192), v4);
  v326 = v5[104];
  v327 = *(_QWORD *)(v326 + 41456);
  v328 = *(_QWORD **)(v327 + 7848);
  if (!v328 || !*v328 || (v328[1] & 3) != 0)
  {
    v329 = (uint64_t *)(v327 + 7848);
    v330 = *(WTF::StringImpl **)(v327 + 7248);
    if (v330)
      *(_DWORD *)v330 += 2;
    v872[0] = v330;
    v331 = JSC::createBuiltinExecutable();
    if (v331)
    {
      v817 = v331;
      v857 = v327;
      if ((v331 & 8) != 0)
        v332 = (v331 - 112) | 1;
      else
        v332 = v331 & 0xFFFFFFFFFFFFC000;
      if ((v332 & 1) != 0)
        v777 = v332 + 47;
      else
        v777 = *(_QWORD *)v332 + 32;
      v331 = *(_QWORD *)(v777 + 16);
      if (!v331)
        v331 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v777 + 16) = *(_QWORD *)v331;
      *(_QWORD *)v331 = v817;
      *(_QWORD *)(v331 + 8) = v857 + 7056;
      *(_QWORD *)(v331 + 16) = v329;
    }
    v333 = *v329;
    *v329 = v331;
    if (v333)
      *(_QWORD *)(v333 + 8) = 3;
    v334 = v872[0];
    v872[0] = 0;
    if (v334)
    {
      if (*(_DWORD *)v334 == 2)
        WTF::StringImpl::destroy(v334, (WTF::StringImpl *)v332);
      else
        *(_DWORD *)v334 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v335 = JSC::JSFunction::create();
  v5[116] = v335;
  if (v335 && *(_DWORD *)(v326 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v326 + 192), v4);
  v336 = v5[104];
  v337 = *(_QWORD *)(v336 + 41456);
  v338 = *(_QWORD **)(v337 + 7880);
  if (!v338 || !*v338 || (v338[1] & 3) != 0)
  {
    v339 = (uint64_t *)(v337 + 7880);
    v340 = *(WTF::StringImpl **)(v337 + 7296);
    if (v340)
      *(_DWORD *)v340 += 2;
    v872[0] = v340;
    v341 = JSC::createBuiltinExecutable();
    if (v341)
    {
      v830 = v341;
      v870 = v337;
      if ((v341 & 8) != 0)
        v342 = (v341 - 112) | 1;
      else
        v342 = v341 & 0xFFFFFFFFFFFFC000;
      if ((v342 & 1) != 0)
        v790 = v342 + 47;
      else
        v790 = *(_QWORD *)v342 + 32;
      v341 = *(_QWORD *)(v790 + 16);
      if (!v341)
        v341 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v790 + 16) = *(_QWORD *)v341;
      *(_QWORD *)v341 = v830;
      *(_QWORD *)(v341 + 8) = v870 + 7056;
      *(_QWORD *)(v341 + 16) = v339;
    }
    v343 = *v339;
    *v339 = v341;
    if (v343)
      *(_QWORD *)(v343 + 8) = 3;
    v344 = v872[0];
    v872[0] = 0;
    if (v344)
    {
      if (*(_DWORD *)v344 == 2)
        WTF::StringImpl::destroy(v344, (WTF::StringImpl *)v342);
      else
        *(_DWORD *)v344 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v345 = JSC::JSFunction::create();
  v5[119] = v345;
  if (v345 && *(_DWORD *)(v336 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v336 + 192), v4);
  v346 = v5[104];
  v347 = *(_QWORD *)(v346 + 41456);
  v348 = *(_QWORD **)(v347 + 7912);
  if (!v348 || !*v348 || (v348[1] & 3) != 0)
  {
    v349 = (uint64_t *)(v347 + 7912);
    v350 = *(WTF::StringImpl **)(v347 + 7264);
    if (v350)
      *(_DWORD *)v350 += 2;
    v872[0] = v350;
    v351 = JSC::createBuiltinExecutable();
    if (v351)
    {
      v831 = v351;
      v871 = v347;
      if ((v351 & 8) != 0)
        v352 = (v351 - 112) | 1;
      else
        v352 = v351 & 0xFFFFFFFFFFFFC000;
      if ((v352 & 1) != 0)
        v791 = v352 + 47;
      else
        v791 = *(_QWORD *)v352 + 32;
      v351 = *(_QWORD *)(v791 + 16);
      if (!v351)
        v351 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v791 + 16) = *(_QWORD *)v351;
      *(_QWORD *)v351 = v831;
      *(_QWORD *)(v351 + 8) = v871 + 7056;
      *(_QWORD *)(v351 + 16) = v349;
    }
    v353 = *v349;
    *v349 = v351;
    if (v353)
      *(_QWORD *)(v353 + 8) = 3;
    v354 = v872[0];
    v872[0] = 0;
    if (v354)
    {
      if (*(_DWORD *)v354 == 2)
        WTF::StringImpl::destroy(v354, (WTF::StringImpl *)v352);
      else
        *(_DWORD *)v354 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v355 = JSC::JSFunction::create();
  v5[117] = v355;
  if (v355 && *(_DWORD *)(v346 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v346 + 192), v4);
  v356 = v5[104];
  v357 = *(_QWORD *)(v356 + 41456);
  v358 = *(_QWORD **)(v357 + 7944);
  if (!v358 || !*v358 || (v358[1] & 3) != 0)
  {
    v359 = (uint64_t *)(v357 + 7944);
    v360 = *(WTF::StringImpl **)(v357 + 7280);
    if (v360)
      *(_DWORD *)v360 += 2;
    v872[0] = v360;
    v361 = JSC::createBuiltinExecutable();
    if (v361)
    {
      v818 = v361;
      v858 = v357;
      if ((v361 & 8) != 0)
        v362 = (v361 - 112) | 1;
      else
        v362 = v361 & 0xFFFFFFFFFFFFC000;
      if ((v362 & 1) != 0)
        v778 = v362 + 47;
      else
        v778 = *(_QWORD *)v362 + 32;
      v361 = *(_QWORD *)(v778 + 16);
      if (!v361)
        v361 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v778 + 16) = *(_QWORD *)v361;
      *(_QWORD *)v361 = v818;
      *(_QWORD *)(v361 + 8) = v858 + 7056;
      *(_QWORD *)(v361 + 16) = v359;
    }
    v363 = *v359;
    *v359 = v361;
    if (v363)
      *(_QWORD *)(v363 + 8) = 3;
    v364 = v872[0];
    v872[0] = 0;
    if (v364)
    {
      if (*(_DWORD *)v364 == 2)
        WTF::StringImpl::destroy(v364, (WTF::StringImpl *)v362);
      else
        *(_DWORD *)v364 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v365 = JSC::JSFunction::create();
  v5[118] = v365;
  if (v365 && *(_DWORD *)(v356 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v356 + 192), v4);
  v366 = v5[104];
  v367 = *(_QWORD *)(v366 + 41456);
  v368 = *(_QWORD **)(v367 + 7976);
  if (!v368 || !*v368 || (v368[1] & 3) != 0)
  {
    v369 = (uint64_t *)(v367 + 7976);
    v370 = *(WTF::StringImpl **)(v367 + 7312);
    if (v370)
      *(_DWORD *)v370 += 2;
    v872[0] = v370;
    v371 = JSC::createBuiltinExecutable();
    if (v371)
    {
      v819 = v371;
      v859 = v367;
      if ((v371 & 8) != 0)
        v372 = (v371 - 112) | 1;
      else
        v372 = v371 & 0xFFFFFFFFFFFFC000;
      if ((v372 & 1) != 0)
        v779 = v372 + 47;
      else
        v779 = *(_QWORD *)v372 + 32;
      v371 = *(_QWORD *)(v779 + 16);
      if (!v371)
        v371 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v779 + 16) = *(_QWORD *)v371;
      *(_QWORD *)v371 = v819;
      *(_QWORD *)(v371 + 8) = v859 + 7056;
      *(_QWORD *)(v371 + 16) = v369;
    }
    v373 = *v369;
    *v369 = v371;
    if (v373)
      *(_QWORD *)(v373 + 8) = 3;
    v374 = v872[0];
    v872[0] = 0;
    if (v374)
    {
      if (*(_DWORD *)v374 == 2)
        WTF::StringImpl::destroy(v374, (WTF::StringImpl *)v372);
      else
        *(_DWORD *)v374 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v375 = JSC::JSFunction::create();
  v5[120] = v375;
  if (v375 && *(_DWORD *)(v366 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v366 + 192), v4);
  WebCore::WritableStreamInternalsBuiltinFunctions::init((WebCore::WritableStreamInternalsBuiltinFunctions *)(v5 + 124), v4);
  v376 = v5[174];
  v377 = *(_QWORD *)(v376 + 41456);
  v378 = *(_QWORD **)(v377 + 10984);
  if (!v378 || !*v378 || (v378[1] & 3) != 0)
  {
    v379 = (uint64_t *)(v377 + 10984);
    v380 = *(WTF::StringImpl **)(v377 + 10928);
    if (v380)
      *(_DWORD *)v380 += 2;
    v872[0] = v380;
    v381 = JSC::createBuiltinExecutable();
    if (v381)
    {
      v820 = v381;
      v860 = v377;
      if ((v381 & 8) != 0)
        v382 = (v381 - 112) | 1;
      else
        v382 = v381 & 0xFFFFFFFFFFFFC000;
      if ((v382 & 1) != 0)
        v780 = v382 + 47;
      else
        v780 = *(_QWORD *)v382 + 32;
      v381 = *(_QWORD *)(v780 + 16);
      if (!v381)
        v381 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v780 + 16) = *(_QWORD *)v381;
      *(_QWORD *)v381 = v820;
      *(_QWORD *)(v381 + 8) = v860 + 10912;
      *(_QWORD *)(v381 + 16) = v379;
    }
    v383 = *v379;
    *v379 = v381;
    if (v383)
      *(_QWORD *)(v383 + 8) = 3;
    v384 = v872[0];
    v872[0] = 0;
    if (v384)
    {
      if (*(_DWORD *)v384 == 2)
        WTF::StringImpl::destroy(v384, (WTF::StringImpl *)v382);
      else
        *(_DWORD *)v384 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v385 = JSC::JSFunction::create();
  v5[175] = v385;
  if (v385 && *(_DWORD *)(v376 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v376 + 192), v4);
  v386 = v5[174];
  v387 = *(_QWORD *)(v386 + 41456);
  v388 = *(_QWORD **)(v387 + 11016);
  if (!v388 || !*v388 || (v388[1] & 3) != 0)
  {
    v389 = (uint64_t *)(v387 + 11016);
    v390 = *(WTF::StringImpl **)(v387 + 10944);
    if (v390)
      *(_DWORD *)v390 += 2;
    v872[0] = v390;
    v391 = JSC::createBuiltinExecutable();
    if (v391)
    {
      v821 = v391;
      v861 = v387;
      if ((v391 & 8) != 0)
        v392 = (v391 - 112) | 1;
      else
        v392 = v391 & 0xFFFFFFFFFFFFC000;
      if ((v392 & 1) != 0)
        v781 = v392 + 47;
      else
        v781 = *(_QWORD *)v392 + 32;
      v391 = *(_QWORD *)(v781 + 16);
      if (!v391)
        v391 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v781 + 16) = *(_QWORD *)v391;
      *(_QWORD *)v391 = v821;
      *(_QWORD *)(v391 + 8) = v861 + 10912;
      *(_QWORD *)(v391 + 16) = v389;
    }
    v393 = *v389;
    *v389 = v391;
    if (v393)
      *(_QWORD *)(v393 + 8) = 3;
    v394 = v872[0];
    v872[0] = 0;
    if (v394)
    {
      if (*(_DWORD *)v394 == 2)
        WTF::StringImpl::destroy(v394, (WTF::StringImpl *)v392);
      else
        *(_DWORD *)v394 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v395 = JSC::JSFunction::create();
  v5[176] = v395;
  if (v395 && *(_DWORD *)(v386 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v386 + 192), v4);
  v396 = v5[177];
  v397 = *(_QWORD *)(v396 + 41456);
  v398 = *(_QWORD **)(v397 + 11592);
  if (!v398 || !*v398 || (v398[1] & 3) != 0)
  {
    v399 = (uint64_t *)(v397 + 11592);
    v400 = *(WTF::StringImpl **)(v397 + 11552);
    if (v400)
      *(_DWORD *)v400 += 2;
    v872[0] = v400;
    v401 = JSC::createBuiltinExecutable();
    if (v401)
    {
      v822 = v401;
      v862 = v397;
      if ((v401 & 8) != 0)
        v402 = (v401 - 112) | 1;
      else
        v402 = v401 & 0xFFFFFFFFFFFFC000;
      if ((v402 & 1) != 0)
        v782 = v402 + 47;
      else
        v782 = *(_QWORD *)v402 + 32;
      v401 = *(_QWORD *)(v782 + 16);
      if (!v401)
        v401 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v782 + 16) = *(_QWORD *)v401;
      *(_QWORD *)v401 = v822;
      *(_QWORD *)(v401 + 8) = v862 + 11536;
      *(_QWORD *)(v401 + 16) = v399;
    }
    v403 = *v399;
    *v399 = v401;
    if (v403)
      *(_QWORD *)(v403 + 8) = 3;
    v404 = v872[0];
    v872[0] = 0;
    if (v404)
    {
      if (*(_DWORD *)v404 == 2)
        WTF::StringImpl::destroy(v404, (WTF::StringImpl *)v402);
      else
        *(_DWORD *)v404 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v405 = JSC::JSFunction::create();
  v5[178] = v405;
  if (v405 && *(_DWORD *)(v396 + 760) >= *((unsigned __int8 *)v4 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v396 + 192), v4);
  v406 = *(_QWORD **)(*v5 + 41456);
  v407 = (WTF::StringImpl *)v5[2];
  v408 = (WTF::StringImpl *)v406[125];
  if (v408)
    *(_DWORD *)v408 += 2;
  v872[0] = v408;
  v872[1] = v407;
  v873 = 10;
  v409 = v5[3];
  v410 = (_DWORD *)v406[127];
  if (v410)
    *v410 += 2;
  v874 = v410;
  v875 = v409;
  v876 = 10;
  v411 = v5[4];
  v412 = (_DWORD *)v406[129];
  if (v412)
    *v412 += 2;
  v877 = v412;
  v878 = v411;
  v879 = 10;
  v413 = v5[5];
  v414 = (_DWORD *)v406[131];
  if (v414)
    *v414 += 2;
  v880 = v414;
  v881 = v413;
  v882 = 10;
  v415 = v5[6];
  v416 = (_DWORD *)v406[133];
  if (v416)
    *v416 += 2;
  v883 = v416;
  v884 = v415;
  v885 = 10;
  v417 = v5[7];
  v418 = (_DWORD *)v406[135];
  if (v418)
    *v418 += 2;
  v886 = v418;
  v887 = v417;
  v888 = 10;
  v419 = v5[8];
  v420 = (_DWORD *)v406[137];
  if (v420)
    *v420 += 2;
  v889 = v420;
  v890 = v419;
  v891 = 10;
  v421 = v5[9];
  v422 = (_DWORD *)v406[139];
  if (v422)
    *v422 += 2;
  v892 = v422;
  v893 = v421;
  v894 = 10;
  v423 = v5[10];
  v424 = (_DWORD *)v406[141];
  if (v424)
    *v424 += 2;
  v895 = v424;
  v896 = v423;
  v897 = 10;
  v425 = v5[11];
  v426 = (_DWORD *)v406[143];
  if (v426)
    *v426 += 2;
  v898 = v426;
  v899 = v425;
  v900 = 10;
  v427 = v5[12];
  v428 = (_DWORD *)v406[145];
  if (v428)
    *v428 += 2;
  v901 = v428;
  v902 = v427;
  v903 = 10;
  v429 = v5[13];
  v430 = (_DWORD *)v406[147];
  if (v430)
    *v430 += 2;
  v904 = v430;
  v905 = v429;
  v906 = 10;
  v431 = v5[14];
  v432 = (_DWORD *)v406[149];
  if (v432)
    *v432 += 2;
  v907 = v432;
  v908 = v431;
  v909 = 10;
  v433 = v5[15];
  v434 = (_DWORD *)v406[151];
  if (v434)
    *v434 += 2;
  v910 = v434;
  v911 = v433;
  v912 = 10;
  v435 = v5[16];
  v436 = (_DWORD *)v406[153];
  if (v436)
    *v436 += 2;
  v913 = v436;
  v914 = v435;
  v915 = 10;
  v437 = v5[17];
  v438 = (_DWORD *)v406[155];
  if (v438)
    *v438 += 2;
  v916 = v438;
  v917 = v437;
  v918 = 10;
  v439 = v5[18];
  v440 = (_DWORD *)v406[157];
  if (v440)
    *v440 += 2;
  v919 = v440;
  v920 = v439;
  v921 = 10;
  v441 = v5[19];
  v442 = (_DWORD *)v406[159];
  if (v442)
    *v442 += 2;
  v922 = v442;
  v923 = v441;
  v924 = 10;
  v443 = v5[20];
  v444 = (_DWORD *)v406[161];
  if (v444)
    *v444 += 2;
  v925 = v444;
  v926 = v443;
  v927 = 10;
  v445 = v5[21];
  v446 = (_DWORD *)v406[163];
  if (v446)
    *v446 += 2;
  v928 = v446;
  v929 = v445;
  v930 = 10;
  v447 = v5[22];
  v448 = (_DWORD *)v406[165];
  if (v448)
    *v448 += 2;
  v931 = v448;
  v932 = v447;
  v933 = 10;
  v449 = v5[23];
  v450 = (_DWORD *)v406[167];
  if (v450)
    *v450 += 2;
  v934 = v450;
  v935 = v449;
  v936 = 10;
  v451 = v5[24];
  v452 = (_DWORD *)v406[169];
  if (v452)
    *v452 += 2;
  v937 = v452;
  v938 = v451;
  v939 = 10;
  v453 = v5[25];
  v454 = (_DWORD *)v406[171];
  if (v454)
    *v454 += 2;
  v940 = v454;
  v941 = v453;
  v942 = 10;
  v455 = v5[26];
  v456 = (_DWORD *)v406[173];
  if (v456)
    *v456 += 2;
  v943 = v456;
  v944 = v455;
  v945 = 10;
  v457 = v5[27];
  v458 = (_DWORD *)v406[175];
  if (v458)
    *v458 += 2;
  v946 = v458;
  v947 = v457;
  v948 = 10;
  v459 = v5[28];
  v460 = (_DWORD *)v406[177];
  if (v460)
    *v460 += 2;
  v949 = v460;
  v950 = v459;
  v951 = 10;
  v461 = v5[29];
  v462 = (_DWORD *)v406[179];
  if (v462)
    *v462 += 2;
  v952 = v462;
  v953 = v461;
  v954 = 10;
  v463 = v5[30];
  v464 = (_DWORD *)v406[181];
  if (v464)
    *v464 += 2;
  v955 = v464;
  v956 = v463;
  v957 = 10;
  v465 = v5[31];
  v466 = (_DWORD *)v406[183];
  if (v466)
    *v466 += 2;
  v958 = v466;
  v959 = v465;
  v960 = 10;
  v467 = v5[32];
  v468 = (_DWORD *)v406[185];
  if (v468)
    *v468 += 2;
  v961 = v468;
  v962 = v467;
  v963 = 10;
  v469 = v5[33];
  v470 = (_DWORD *)v406[187];
  if (v470)
    *v470 += 2;
  v964 = v470;
  v965 = v469;
  v966 = 10;
  v471 = v5[34];
  v472 = (_DWORD *)v406[189];
  if (v472)
    *v472 += 2;
  v967 = v472;
  v968 = v471;
  v969 = 10;
  v473 = v5[35];
  v474 = (_DWORD *)v406[191];
  if (v474)
    *v474 += 2;
  v970 = v474;
  v971 = v473;
  v972 = 10;
  v475 = v5[37];
  v476 = (_DWORD *)v406[453];
  if (v476)
    *v476 += 2;
  v973 = v476;
  v974 = v475;
  v975 = 10;
  v477 = v5[38];
  v478 = (_DWORD *)v406[455];
  if (v478)
    *v478 += 2;
  v976 = v478;
  v977 = v477;
  v978 = 10;
  v479 = v5[39];
  v480 = (_DWORD *)v406[457];
  if (v480)
    *v480 += 2;
  v979 = v480;
  v980 = v479;
  v981 = 10;
  v481 = v5[40];
  v482 = (_DWORD *)v406[459];
  if (v482)
    *v482 += 2;
  v982 = v482;
  v983 = v481;
  v984 = 10;
  v483 = v5[41];
  v484 = (_DWORD *)v406[461];
  if (v484)
    *v484 += 2;
  v985 = v484;
  v986 = v483;
  v987 = 10;
  v485 = v5[42];
  v486 = (_DWORD *)v406[463];
  if (v486)
    *v486 += 2;
  v988 = v486;
  v989 = v485;
  v990 = 10;
  v487 = v5[43];
  v488 = (_DWORD *)v406[465];
  if (v488)
    *v488 += 2;
  v991 = v488;
  v992 = v487;
  v993 = 10;
  v489 = v5[44];
  v490 = (_DWORD *)v406[467];
  if (v490)
    *v490 += 2;
  v994 = v490;
  v995 = v489;
  v996 = 10;
  v491 = v5[45];
  v492 = (_DWORD *)v406[469];
  if (v492)
    *v492 += 2;
  v997 = v492;
  v998 = v491;
  v999 = 10;
  v493 = v5[46];
  v494 = (_DWORD *)v406[471];
  if (v494)
    *v494 += 2;
  v1000 = v494;
  v1001 = v493;
  v1002 = 10;
  v495 = v5[47];
  v496 = (_DWORD *)v406[473];
  if (v496)
    *v496 += 2;
  v1003 = v496;
  v1004 = v495;
  v1005 = 10;
  v497 = v5[48];
  v498 = (_DWORD *)v406[475];
  if (v498)
    *v498 += 2;
  v1006 = v498;
  v1007 = v497;
  v1008 = 10;
  v499 = v5[49];
  v500 = (_DWORD *)v406[477];
  if (v500)
    *v500 += 2;
  v1009 = v500;
  v1010 = v499;
  v1011 = 10;
  v501 = v5[50];
  v502 = (_DWORD *)v406[479];
  if (v502)
    *v502 += 2;
  v1012 = v502;
  v1013 = v501;
  v1014 = 10;
  v503 = v5[51];
  v504 = (_DWORD *)v406[481];
  if (v504)
    *v504 += 2;
  v1015 = v504;
  v1016 = v503;
  v1017 = 10;
  v505 = v5[52];
  v506 = (_DWORD *)v406[483];
  if (v506)
    *v506 += 2;
  v1018 = v506;
  v1019 = v505;
  v1020 = 10;
  v507 = v5[53];
  v508 = (_DWORD *)v406[485];
  if (v508)
    *v508 += 2;
  v1021 = v508;
  v1022 = v507;
  v1023 = 10;
  v509 = v5[54];
  v510 = (_DWORD *)v406[487];
  if (v510)
    *v510 += 2;
  v1024 = v510;
  v1025 = v509;
  v1026 = 10;
  v511 = v5[55];
  v512 = (_DWORD *)v406[489];
  if (v512)
    *v512 += 2;
  v1027 = v512;
  v1028 = v511;
  v1029 = 10;
  v513 = v5[56];
  v514 = (_DWORD *)v406[491];
  if (v514)
    *v514 += 2;
  v1030 = v514;
  v1031 = v513;
  v1032 = 10;
  v515 = v5[57];
  v516 = (_DWORD *)v406[493];
  if (v516)
    *v516 += 2;
  v1033 = v516;
  v1034 = v515;
  v1035 = 10;
  v517 = v5[58];
  v518 = (_DWORD *)v406[495];
  if (v518)
    *v518 += 2;
  v1036 = v518;
  v1037 = v517;
  v1038 = 10;
  v519 = v5[59];
  v520 = (_DWORD *)v406[497];
  if (v520)
    *v520 += 2;
  v1039 = v520;
  v1040 = v519;
  v1041 = 10;
  v521 = v5[60];
  v522 = (_DWORD *)v406[499];
  if (v522)
    *v522 += 2;
  v1042 = v522;
  v1043 = v521;
  v1044 = 10;
  v523 = v5[61];
  v524 = (_DWORD *)v406[501];
  if (v524)
    *v524 += 2;
  v1045 = v524;
  v1046 = v523;
  v1047 = 10;
  v525 = v5[62];
  v526 = (_DWORD *)v406[503];
  if (v526)
    *v526 += 2;
  v1048 = v526;
  v1049 = v525;
  v1050 = 10;
  v527 = v5[63];
  v528 = (_DWORD *)v406[505];
  if (v528)
    *v528 += 2;
  v1051 = v528;
  v1052 = v527;
  v1053 = 10;
  v529 = v5[64];
  v530 = (_DWORD *)v406[507];
  if (v530)
    *v530 += 2;
  v1054 = v530;
  v1055 = v529;
  v1056 = 10;
  v531 = v5[65];
  v532 = (_DWORD *)v406[509];
  if (v532)
    *v532 += 2;
  v1057 = v532;
  v1058 = v531;
  v1059 = 10;
  v533 = v5[66];
  v534 = (_DWORD *)v406[511];
  if (v534)
    *v534 += 2;
  v1060 = v534;
  v1061 = v533;
  v1062 = 10;
  v535 = v5[67];
  v536 = (_DWORD *)v406[513];
  if (v536)
    *v536 += 2;
  v1063 = v536;
  v1064 = v535;
  v1065 = 10;
  v537 = v5[68];
  v538 = (_DWORD *)v406[515];
  if (v538)
    *v538 += 2;
  v1066 = v538;
  v1067 = v537;
  v1068 = 10;
  v539 = v5[69];
  v540 = (_DWORD *)v406[517];
  if (v540)
    *v540 += 2;
  v1069 = v540;
  v1070 = v539;
  v1071 = 10;
  v541 = v5[70];
  v542 = (_DWORD *)v406[519];
  if (v542)
    *v542 += 2;
  v1072 = v542;
  v1073 = v541;
  v1074 = 10;
  v543 = v5[71];
  v544 = (_DWORD *)v406[521];
  if (v544)
    *v544 += 2;
  v1075 = v544;
  v1076 = v543;
  v1077 = 10;
  v545 = v5[72];
  v546 = (_DWORD *)v406[523];
  if (v546)
    *v546 += 2;
  v1078 = v546;
  v1079 = v545;
  v1080 = 10;
  v547 = v5[73];
  v548 = (_DWORD *)v406[525];
  if (v548)
    *v548 += 2;
  v1081 = v548;
  v1082 = v547;
  v1083 = 10;
  v549 = v5[74];
  v550 = (_DWORD *)v406[527];
  if (v550)
    *v550 += 2;
  v1084 = v550;
  v1085 = v549;
  v1086 = 10;
  v551 = v5[75];
  v552 = (_DWORD *)v406[529];
  if (v552)
    *v552 += 2;
  v1087 = v552;
  v1088 = v551;
  v1089 = 10;
  v553 = v5[76];
  v554 = (_DWORD *)v406[531];
  if (v554)
    *v554 += 2;
  v1090 = v554;
  v1091 = v553;
  v1092 = 10;
  v555 = v5[77];
  v556 = (_DWORD *)v406[533];
  if (v556)
    *v556 += 2;
  v1093 = v556;
  v1094 = v555;
  v1095 = 10;
  v557 = v5[78];
  v558 = (_DWORD *)v406[535];
  if (v558)
    *v558 += 2;
  v1096 = v558;
  v1097 = v557;
  v1098 = 10;
  v559 = v5[79];
  v560 = (_DWORD *)v406[537];
  if (v560)
    *v560 += 2;
  v1099 = v560;
  v1100 = v559;
  v1101 = 10;
  v561 = v5[80];
  v562 = (_DWORD *)v406[539];
  if (v562)
    *v562 += 2;
  v1102 = v562;
  v1103 = v561;
  v1104 = 10;
  v563 = v5[81];
  v564 = (_DWORD *)v406[541];
  if (v564)
    *v564 += 2;
  v1105 = v564;
  v1106 = v563;
  v1107 = 10;
  v565 = v5[82];
  v566 = (_DWORD *)v406[543];
  if (v566)
    *v566 += 2;
  v1108 = v566;
  v1109 = v565;
  v1110 = 10;
  v567 = v5[83];
  v568 = (_DWORD *)v406[545];
  if (v568)
    *v568 += 2;
  v1111 = v568;
  v1112 = v567;
  v1113 = 10;
  v569 = v5[84];
  v570 = (_DWORD *)v406[547];
  if (v570)
    *v570 += 2;
  v1114 = v570;
  v1115 = v569;
  v1116 = 10;
  v571 = v5[86];
  v572 = (_DWORD *)v406[743];
  if (v572)
    *v572 += 2;
  v1117 = v572;
  v1118 = v571;
  v1119 = 10;
  v573 = v5[87];
  v574 = (_DWORD *)v406[745];
  if (v574)
    *v574 += 2;
  v1120 = v574;
  v1121 = v573;
  v1122 = 10;
  v575 = v5[88];
  v576 = (_DWORD *)v406[747];
  if (v576)
    *v576 += 2;
  v1123 = v576;
  v1124 = v575;
  v1125 = 10;
  v577 = v5[89];
  v578 = (_DWORD *)v406[749];
  if (v578)
    *v578 += 2;
  v1126 = v578;
  v1127 = v577;
  v1128 = 10;
  v579 = v5[90];
  v580 = (_DWORD *)v406[751];
  if (v580)
    *v580 += 2;
  v1129 = v580;
  v1130 = v579;
  v1131 = 10;
  v581 = v5[91];
  v582 = (_DWORD *)v406[753];
  if (v582)
    *v582 += 2;
  v1132 = v582;
  v1133 = v581;
  v1134 = 10;
  v583 = v5[92];
  v584 = (_DWORD *)v406[755];
  if (v584)
    *v584 += 2;
  v1135 = v584;
  v1136 = v583;
  v1137 = 10;
  v585 = v5[93];
  v586 = (_DWORD *)v406[757];
  if (v586)
    *v586 += 2;
  v1138 = v586;
  v1139 = v585;
  v1140 = 10;
  v587 = v5[94];
  v588 = (_DWORD *)v406[759];
  if (v588)
    *v588 += 2;
  v1141 = v588;
  v1142 = v587;
  v1143 = 10;
  v589 = v5[95];
  v590 = (_DWORD *)v406[761];
  if (v590)
    *v590 += 2;
  v1144 = v590;
  v1145 = v589;
  v1146 = 10;
  v591 = v5[96];
  v592 = (_DWORD *)v406[763];
  if (v592)
    *v592 += 2;
  v1147 = v592;
  v1148 = v591;
  v1149 = 10;
  v593 = v5[97];
  v594 = (_DWORD *)v406[765];
  if (v594)
    *v594 += 2;
  v1150 = v594;
  v1151 = v593;
  v1152 = 10;
  v595 = v5[98];
  v596 = (_DWORD *)v406[767];
  if (v596)
    *v596 += 2;
  v1153 = v596;
  v1154 = v595;
  v1155 = 10;
  v597 = v5[99];
  v598 = (_DWORD *)v406[769];
  if (v598)
    *v598 += 2;
  v1156 = v598;
  v1157 = v597;
  v1158 = 10;
  v599 = v5[100];
  v600 = (_DWORD *)v406[771];
  if (v600)
    *v600 += 2;
  v1159 = v600;
  v1160 = v599;
  v1161 = 10;
  v601 = v5[101];
  v602 = (_DWORD *)v406[773];
  if (v602)
    *v602 += 2;
  v1162 = v602;
  v1163 = v601;
  v1164 = 10;
  v603 = v5[102];
  v604 = (_DWORD *)v406[775];
  if (v604)
    *v604 += 2;
  v1165 = v604;
  v1166 = v603;
  v1167 = 10;
  v605 = v5[103];
  v606 = (_DWORD *)v406[777];
  if (v606)
    *v606 += 2;
  v1168 = v606;
  v1169 = v605;
  v1170 = 10;
  v607 = v5[105];
  v608 = (_DWORD *)v406[885];
  if (v608)
    *v608 += 2;
  v1171 = v608;
  v1172 = v607;
  v1173 = 10;
  v609 = v5[106];
  v610 = (_DWORD *)v406[887];
  if (v610)
    *v610 += 2;
  v1174 = v610;
  v1175 = v609;
  v1176 = 10;
  v611 = v5[107];
  v612 = (_DWORD *)v406[889];
  if (v612)
    *v612 += 2;
  v1177 = v612;
  v1178 = v611;
  v1179 = 10;
  v613 = v5[108];
  v614 = (_DWORD *)v406[891];
  if (v614)
    *v614 += 2;
  v1180 = v614;
  v1181 = v613;
  v1182 = 10;
  v615 = v5[109];
  v616 = (_DWORD *)v406[893];
  if (v616)
    *v616 += 2;
  v1183 = v616;
  v1184 = v615;
  v1185 = 10;
  v617 = v5[110];
  v618 = (_DWORD *)v406[895];
  if (v618)
    *v618 += 2;
  v1186 = v618;
  v1187 = v617;
  v1188 = 10;
  v619 = v5[111];
  v620 = (_DWORD *)v406[897];
  if (v620)
    *v620 += 2;
  v1189 = v620;
  v1190 = v619;
  v1191 = 10;
  v621 = v5[112];
  v622 = (_DWORD *)v406[899];
  if (v622)
    *v622 += 2;
  v1192 = v622;
  v1193 = v621;
  v1194 = 10;
  v623 = v5[113];
  v624 = (_DWORD *)v406[901];
  if (v624)
    *v624 += 2;
  v1195 = v624;
  v1196 = v623;
  v1197 = 10;
  v625 = v5[114];
  v626 = (_DWORD *)v406[903];
  if (v626)
    *v626 += 2;
  v1198 = v626;
  v1199 = v625;
  v1200 = 10;
  v627 = v5[115];
  v628 = (_DWORD *)v406[905];
  if (v628)
    *v628 += 2;
  v1201 = v628;
  v1202 = v627;
  v1203 = 10;
  v629 = v5[116];
  v630 = (_DWORD *)v406[907];
  if (v630)
    *v630 += 2;
  v1204 = v630;
  v1205 = v629;
  v1206 = 10;
  v631 = v5[117];
  v632 = (_DWORD *)v406[909];
  if (v632)
    *v632 += 2;
  v1207 = v632;
  v1208 = v631;
  v1209 = 10;
  v633 = v5[118];
  v634 = (_DWORD *)v406[911];
  if (v634)
    *v634 += 2;
  v1210 = v634;
  v1211 = v633;
  v1212 = 10;
  v635 = v5[119];
  v636 = (_DWORD *)v406[913];
  if (v636)
    *v636 += 2;
  v1213 = v636;
  v1214 = v635;
  v1215 = 10;
  v637 = v5[120];
  v638 = (_DWORD *)v406[915];
  if (v638)
    *v638 += 2;
  v1216 = v638;
  v1217 = v637;
  v1218 = 10;
  v639 = v5[121];
  v640 = (_DWORD *)v406[917];
  if (v640)
    *v640 += 2;
  v1219 = v640;
  v1220 = v639;
  v1221 = 10;
  v641 = v5[122];
  v642 = (_DWORD *)v406[919];
  if (v642)
    *v642 += 2;
  v1222 = v642;
  v1223 = v641;
  v1224 = 10;
  v643 = v5[123];
  v644 = (_DWORD *)v406[921];
  if (v644)
    *v644 += 2;
  v1225 = v644;
  v1226 = v643;
  v1227 = 10;
  v645 = v5[125];
  v646 = (_DWORD *)v406[1071];
  if (v646)
    *v646 += 2;
  v1228 = v646;
  v1229 = v645;
  v1230 = 10;
  v647 = v5[126];
  v648 = (_DWORD *)v406[1073];
  if (v648)
    *v648 += 2;
  v1231 = v648;
  v1232 = v647;
  v1233 = 10;
  v649 = v5[127];
  v650 = (_DWORD *)v406[1075];
  if (v650)
    *v650 += 2;
  v1234 = v650;
  v1235 = v649;
  v1236 = 10;
  v651 = v5[128];
  v652 = (_DWORD *)v406[1077];
  if (v652)
    *v652 += 2;
  v1237 = v652;
  v1238 = v651;
  v1239 = 10;
  v653 = v5[129];
  v654 = (_DWORD *)v406[1079];
  if (v654)
    *v654 += 2;
  v1240 = v654;
  v1241 = v653;
  v1242 = 10;
  v655 = v5[130];
  v656 = (_DWORD *)v406[1081];
  if (v656)
    *v656 += 2;
  v1243 = v656;
  v1244 = v655;
  v1245 = 10;
  v657 = v5[131];
  v658 = (_DWORD *)v406[1083];
  if (v658)
    *v658 += 2;
  v1246 = v658;
  v1247 = v657;
  v1248 = 10;
  v659 = v5[132];
  v660 = (_DWORD *)v406[1085];
  if (v660)
    *v660 += 2;
  v1249 = v660;
  v1250 = v659;
  v1251 = 10;
  v661 = v5[133];
  v662 = (_DWORD *)v406[1087];
  if (v662)
    *v662 += 2;
  v1252 = v662;
  v1253 = v661;
  v1254 = 10;
  v663 = v5[134];
  v664 = (_DWORD *)v406[1089];
  if (v664)
    *v664 += 2;
  v1255 = v664;
  v1256 = v663;
  v1257 = 10;
  v665 = v5[135];
  v666 = (_DWORD *)v406[1091];
  if (v666)
    *v666 += 2;
  v1258 = v666;
  v1259 = v665;
  v1260 = 10;
  v667 = v5[136];
  v668 = (_DWORD *)v406[1093];
  if (v668)
    *v668 += 2;
  v1261 = v668;
  v1262 = v667;
  v1263 = 10;
  v669 = v5[137];
  v670 = (_DWORD *)v406[1095];
  if (v670)
    *v670 += 2;
  v1264 = v670;
  v1265 = v669;
  v1266 = 10;
  v671 = v5[138];
  v672 = (_DWORD *)v406[1097];
  if (v672)
    *v672 += 2;
  v1267 = v672;
  v1268 = v671;
  v1269 = 10;
  v673 = v5[139];
  v674 = (_DWORD *)v406[1099];
  if (v674)
    *v674 += 2;
  v1270 = v674;
  v1271 = v673;
  v1272 = 10;
  v675 = v5[140];
  v676 = (_DWORD *)v406[1101];
  if (v676)
    *v676 += 2;
  v1273 = v676;
  v1274 = v675;
  v1275 = 10;
  v677 = v5[141];
  v678 = (_DWORD *)v406[1103];
  if (v678)
    *v678 += 2;
  v1276 = v678;
  v1277 = v677;
  v1278 = 10;
  v679 = v5[142];
  v680 = (_DWORD *)v406[1105];
  if (v680)
    *v680 += 2;
  v1279 = v680;
  v1280 = v679;
  v1281 = 10;
  v681 = v5[143];
  v682 = (_DWORD *)v406[1107];
  if (v682)
    *v682 += 2;
  v1282 = v682;
  v1283 = v681;
  v1284 = 10;
  v683 = v5[144];
  v684 = (_DWORD *)v406[1109];
  if (v684)
    *v684 += 2;
  v1285 = v684;
  v1286 = v683;
  v1287 = 10;
  v685 = v5[145];
  v686 = (_DWORD *)v406[1111];
  if (v686)
    *v686 += 2;
  v1288 = v686;
  v1289 = v685;
  v1290 = 10;
  v687 = v5[146];
  v688 = (_DWORD *)v406[1113];
  if (v688)
    *v688 += 2;
  v1291 = v688;
  v1292 = v687;
  v1293 = 10;
  v689 = v5[147];
  v690 = (_DWORD *)v406[1115];
  if (v690)
    *v690 += 2;
  v1294 = v690;
  v1295 = v689;
  v1296 = 10;
  v691 = v5[148];
  v692 = (_DWORD *)v406[1117];
  if (v692)
    *v692 += 2;
  v1297 = v692;
  v1298 = v691;
  v1299 = 10;
  v693 = v5[149];
  v694 = (_DWORD *)v406[1119];
  if (v694)
    *v694 += 2;
  v1300 = v694;
  v1301 = v693;
  v1302 = 10;
  v695 = v5[150];
  v696 = (_DWORD *)v406[1121];
  if (v696)
    *v696 += 2;
  v1303 = v696;
  v1304 = v695;
  v1305 = 10;
  v697 = v5[151];
  v698 = (_DWORD *)v406[1123];
  if (v698)
    *v698 += 2;
  v1306 = v698;
  v1307 = v697;
  v1308 = 10;
  v699 = v5[152];
  v700 = (_DWORD *)v406[1125];
  if (v700)
    *v700 += 2;
  v1309 = v700;
  v1310 = v699;
  v1311 = 10;
  v701 = v5[153];
  v702 = (_DWORD *)v406[1127];
  if (v702)
    *v702 += 2;
  v1312 = v702;
  v1313 = v701;
  v1314 = 10;
  v703 = v5[154];
  v704 = (_DWORD *)v406[1129];
  if (v704)
    *v704 += 2;
  v1315 = v704;
  v1316 = v703;
  v1317 = 10;
  v705 = v5[155];
  v706 = (_DWORD *)v406[1131];
  if (v706)
    *v706 += 2;
  v1318 = v706;
  v1319 = v705;
  v1320 = 10;
  v707 = v5[156];
  v708 = (_DWORD *)v406[1133];
  if (v708)
    *v708 += 2;
  v1321 = v708;
  v1322 = v707;
  v1323 = 10;
  v709 = v5[157];
  v710 = (_DWORD *)v406[1135];
  if (v710)
    *v710 += 2;
  v1324 = v710;
  v1325 = v709;
  v1326 = 10;
  v711 = v5[158];
  v712 = (_DWORD *)v406[1137];
  if (v712)
    *v712 += 2;
  v1327 = v712;
  v1328 = v711;
  v1329 = 10;
  v713 = v5[159];
  v714 = (_DWORD *)v406[1139];
  if (v714)
    *v714 += 2;
  v1330 = v714;
  v1331 = v713;
  v1332 = 10;
  v715 = v5[160];
  v716 = (_DWORD *)v406[1141];
  if (v716)
    *v716 += 2;
  v1333 = v716;
  v1334 = v715;
  v1335 = 10;
  v717 = v5[161];
  v718 = (_DWORD *)v406[1143];
  if (v718)
    *v718 += 2;
  v1336 = v718;
  v1337 = v717;
  v1338 = 10;
  v719 = v5[162];
  v720 = (_DWORD *)v406[1145];
  if (v720)
    *v720 += 2;
  v1339 = v720;
  v1340 = v719;
  v1341 = 10;
  v721 = v5[163];
  v722 = (_DWORD *)v406[1147];
  if (v722)
    *v722 += 2;
  v1342 = v722;
  v1343 = v721;
  v1344 = 10;
  v723 = v5[164];
  v724 = (_DWORD *)v406[1149];
  if (v724)
    *v724 += 2;
  v1345 = v724;
  v1346 = v723;
  v1347 = 10;
  v725 = v5[165];
  v726 = (_DWORD *)v406[1151];
  if (v726)
    *v726 += 2;
  v1348 = v726;
  v1349 = v725;
  v1350 = 10;
  v727 = v5[166];
  v728 = (_DWORD *)v406[1153];
  if (v728)
    *v728 += 2;
  v1351 = v728;
  v1352 = v727;
  v1353 = 10;
  v729 = v5[167];
  v730 = (_DWORD *)v406[1155];
  if (v730)
    *v730 += 2;
  v1354 = v730;
  v1355 = v729;
  v1356 = 10;
  v731 = v5[168];
  v732 = (_DWORD *)v406[1157];
  if (v732)
    *v732 += 2;
  v1357 = v732;
  v1358 = v731;
  v1359 = 10;
  v733 = v5[169];
  v734 = (_DWORD *)v406[1159];
  if (v734)
    *v734 += 2;
  v1360 = v734;
  v1361 = v733;
  v1362 = 10;
  v735 = v5[170];
  v736 = (_DWORD *)v406[1161];
  if (v736)
    *v736 += 2;
  v1363 = v736;
  v1364 = v735;
  v1365 = 10;
  v737 = v5[171];
  v738 = (_DWORD *)v406[1163];
  if (v738)
    *v738 += 2;
  v1366 = v738;
  v1367 = v737;
  v1368 = 10;
  v739 = v5[172];
  v740 = (_DWORD *)v406[1165];
  if (v740)
    *v740 += 2;
  v1369 = v740;
  v1370 = v739;
  v1371 = 10;
  v741 = v5[173];
  v742 = (_DWORD *)v406[1167];
  if (v742)
    *v742 += 2;
  v1372 = v742;
  v1373 = v741;
  v1374 = 10;
  v743 = v5[175];
  v744 = (_DWORD *)v406[1367];
  if (v744)
    *v744 += 2;
  v1375 = v744;
  v1376 = v743;
  v1377 = 10;
  v745 = v5[176];
  v746 = (_DWORD *)v406[1369];
  if (v746)
    *v746 += 2;
  v1378 = v746;
  v1379 = v745;
  v1380 = 10;
  v747 = v5[178];
  v748 = (_DWORD *)v406[1445];
  if (v748)
    *v748 += 2;
  v1381 = v748;
  v1382 = v747;
  v1383 = 10;
  JSC::JSGlobalObject::addStaticGlobals();
  for (i = 510; i != -3; i -= 3)
  {
    result = v872[i];
    v872[i] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v749);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::ReadableByteStreamInternalsBuiltinFunctions::init(WebCore::ReadableByteStreamInternalsBuiltinFunctions *this, const JSCell *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  WTF::StringImpl *v8;
  uint64_t BuiltinExecutable;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  WTF::StringImpl *v17;
  uint64_t Allocator;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t *v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t *v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t *v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t *v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t *v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t *v142;
  WTF::StringImpl *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t *v151;
  WTF::StringImpl *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t *v160;
  WTF::StringImpl *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t *v169;
  WTF::StringImpl *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t *v178;
  WTF::StringImpl *v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t *v187;
  WTF::StringImpl *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t *v196;
  WTF::StringImpl *v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t *v205;
  WTF::StringImpl *v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t *v214;
  WTF::StringImpl *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t *v223;
  WTF::StringImpl *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t *v232;
  WTF::StringImpl *v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t *v241;
  WTF::StringImpl *v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t *v250;
  WTF::StringImpl *v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t *v259;
  WTF::StringImpl *v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t *v268;
  WTF::StringImpl *v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t *v277;
  WTF::StringImpl *v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t *v286;
  WTF::StringImpl *v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t *v295;
  WTF::StringImpl *v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  _QWORD *v303;
  uint64_t *v304;
  WTF::StringImpl *v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t result;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  WTF::StringImpl *v412;
  WTF::StringImpl *v413;
  WTF::StringImpl *v414;
  WTF::StringImpl *v415;
  WTF::StringImpl *v416;
  WTF::StringImpl *v417;
  WTF::StringImpl *v418;
  WTF::StringImpl *v419;
  WTF::StringImpl *v420;
  WTF::StringImpl *v421;
  WTF::StringImpl *v422;
  WTF::StringImpl *v423;
  WTF::StringImpl *v424;
  WTF::StringImpl *v425;
  WTF::StringImpl *v426;
  WTF::StringImpl *v427;
  WTF::StringImpl *v428;
  WTF::StringImpl *v429;
  WTF::StringImpl *v430;
  WTF::StringImpl *v431;
  WTF::StringImpl *v432;
  WTF::StringImpl *v433;
  WTF::StringImpl *v434;
  WTF::StringImpl *v435;
  WTF::StringImpl *v436;
  WTF::StringImpl *v437;
  WTF::StringImpl *v438;
  WTF::StringImpl *v439;
  WTF::StringImpl *v440;
  WTF::StringImpl *v441;
  WTF::StringImpl *v442;
  WTF::StringImpl *v443;
  WTF::StringImpl *v444;
  WTF::StringImpl *v445;

  v4 = *(_QWORD *)this;
  v5 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v6 = *(_QWORD **)(v5 + 1560);
  if (!v6 || !*v6 || (v6[1] & 3) != 0)
  {
    v7 = (uint64_t *)(v5 + 1560);
    v8 = *(WTF::StringImpl **)(v5 + 1040);
    if (v8)
      *(_DWORD *)v8 += 2;
    v412 = v8;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v378 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v10 = (BuiltinExecutable - 112) | 1;
      else
        v10 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      v310 = v5 + 976;
      if ((v10 & 1) != 0)
        v311 = v10 + 47;
      else
        v311 = *(_QWORD *)v10 + 32;
      BuiltinExecutable = *(_QWORD *)(v311 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v311 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v378;
      *(_QWORD *)(BuiltinExecutable + 8) = v310;
      *(_QWORD *)(BuiltinExecutable + 16) = v7;
    }
    v11 = *v7;
    *v7 = BuiltinExecutable;
    if (v11)
      *(_QWORD *)(v11 + 8) = 3;
    if (v412)
    {
      if (*(_DWORD *)v412 == 2)
        WTF::StringImpl::destroy(v412, (WTF::StringImpl *)v10);
      else
        *(_DWORD *)v412 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v12 = JSC::JSFunction::create();
  *((_QWORD *)this + 4) = v12;
  if (v12 && *(_DWORD *)(v4 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v4 + 192), a2);
  v13 = *(_QWORD *)this;
  v14 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v15 = *(_QWORD **)(v14 + 1592);
  if (!v15 || !*v15 || (v15[1] & 3) != 0)
  {
    v16 = (uint64_t *)(v14 + 1592);
    v17 = *(WTF::StringImpl **)(v14 + 1056);
    if (v17)
      *(_DWORD *)v17 += 2;
    v413 = v17;
    Allocator = JSC::createBuiltinExecutable();
    if (Allocator)
    {
      v379 = Allocator;
      if ((Allocator & 8) != 0)
        v19 = (Allocator - 112) | 1;
      else
        v19 = Allocator & 0xFFFFFFFFFFFFC000;
      v312 = v14 + 976;
      if ((v19 & 1) != 0)
        v313 = v19 + 47;
      else
        v313 = *(_QWORD *)v19 + 32;
      Allocator = *(_QWORD *)(v313 + 16);
      if (!Allocator)
        Allocator = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v313 + 16) = *(_QWORD *)Allocator;
      *(_QWORD *)Allocator = v379;
      *(_QWORD *)(Allocator + 8) = v312;
      *(_QWORD *)(Allocator + 16) = v16;
    }
    v20 = *v16;
    *v16 = Allocator;
    if (v20)
      *(_QWORD *)(v20 + 8) = 3;
    if (v413)
    {
      if (*(_DWORD *)v413 == 2)
        WTF::StringImpl::destroy(v413, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)v413 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v21 = JSC::JSFunction::create();
  *((_QWORD *)this + 5) = v21;
  if (v21 && *(_DWORD *)(v13 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v13 + 192), a2);
  v22 = *(_QWORD *)this;
  v23 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v24 = *(_QWORD **)(v23 + 1624);
  if (!v24 || !*v24 || (v24[1] & 3) != 0)
  {
    v25 = (uint64_t *)(v23 + 1624);
    v26 = *(WTF::StringImpl **)(v23 + 992);
    if (v26)
      *(_DWORD *)v26 += 2;
    v414 = v26;
    v27 = JSC::createBuiltinExecutable();
    if (v27)
    {
      v380 = v27;
      if ((v27 & 8) != 0)
        v28 = (v27 - 112) | 1;
      else
        v28 = v27 & 0xFFFFFFFFFFFFC000;
      v314 = v23 + 976;
      if ((v28 & 1) != 0)
        v315 = v28 + 47;
      else
        v315 = *(_QWORD *)v28 + 32;
      v27 = *(_QWORD *)(v315 + 16);
      if (!v27)
        v27 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v315 + 16) = *(_QWORD *)v27;
      *(_QWORD *)v27 = v380;
      *(_QWORD *)(v27 + 8) = v314;
      *(_QWORD *)(v27 + 16) = v25;
    }
    v29 = *v25;
    *v25 = v27;
    if (v29)
      *(_QWORD *)(v29 + 8) = 3;
    if (v414)
    {
      if (*(_DWORD *)v414 == 2)
        WTF::StringImpl::destroy(v414, (WTF::StringImpl *)v28);
      else
        *(_DWORD *)v414 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v30 = JSC::JSFunction::create();
  *((_QWORD *)this + 1) = v30;
  if (v30 && *(_DWORD *)(v22 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v22 + 192), a2);
  v31 = *(_QWORD *)this;
  v32 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v33 = *(_QWORD **)(v32 + 1656);
  if (!v33 || !*v33 || (v33[1] & 3) != 0)
  {
    v34 = (uint64_t *)(v32 + 1656);
    v35 = *(WTF::StringImpl **)(v32 + 1024);
    if (v35)
      *(_DWORD *)v35 += 2;
    v415 = v35;
    v36 = JSC::createBuiltinExecutable();
    if (v36)
    {
      v381 = v36;
      if ((v36 & 8) != 0)
        v37 = (v36 - 112) | 1;
      else
        v37 = v36 & 0xFFFFFFFFFFFFC000;
      v316 = v32 + 976;
      if ((v37 & 1) != 0)
        v317 = v37 + 47;
      else
        v317 = *(_QWORD *)v37 + 32;
      v36 = *(_QWORD *)(v317 + 16);
      if (!v36)
        v36 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v317 + 16) = *(_QWORD *)v36;
      *(_QWORD *)v36 = v381;
      *(_QWORD *)(v36 + 8) = v316;
      *(_QWORD *)(v36 + 16) = v34;
    }
    v38 = *v34;
    *v34 = v36;
    if (v38)
      *(_QWORD *)(v38 + 8) = 3;
    if (v415)
    {
      if (*(_DWORD *)v415 == 2)
        WTF::StringImpl::destroy(v415, (WTF::StringImpl *)v37);
      else
        *(_DWORD *)v415 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v39 = JSC::JSFunction::create();
  *((_QWORD *)this + 3) = v39;
  if (v39 && *(_DWORD *)(v31 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v31 + 192), a2);
  v40 = *(_QWORD *)this;
  v41 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v42 = *(_QWORD **)(v41 + 1688);
  if (!v42 || !*v42 || (v42[1] & 3) != 0)
  {
    v43 = (uint64_t *)(v41 + 1688);
    v44 = *(WTF::StringImpl **)(v41 + 1008);
    if (v44)
      *(_DWORD *)v44 += 2;
    v416 = v44;
    v45 = JSC::createBuiltinExecutable();
    if (v45)
    {
      v382 = v45;
      if ((v45 & 8) != 0)
        v46 = (v45 - 112) | 1;
      else
        v46 = v45 & 0xFFFFFFFFFFFFC000;
      v318 = v41 + 976;
      if ((v46 & 1) != 0)
        v319 = v46 + 47;
      else
        v319 = *(_QWORD *)v46 + 32;
      v45 = *(_QWORD *)(v319 + 16);
      if (!v45)
        v45 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v319 + 16) = *(_QWORD *)v45;
      *(_QWORD *)v45 = v382;
      *(_QWORD *)(v45 + 8) = v318;
      *(_QWORD *)(v45 + 16) = v43;
    }
    v47 = *v43;
    *v43 = v45;
    if (v47)
      *(_QWORD *)(v47 + 8) = 3;
    if (v416)
    {
      if (*(_DWORD *)v416 == 2)
        WTF::StringImpl::destroy(v416, (WTF::StringImpl *)v46);
      else
        *(_DWORD *)v416 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v48 = JSC::JSFunction::create();
  *((_QWORD *)this + 2) = v48;
  if (v48 && *(_DWORD *)(v40 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v40 + 192), a2);
  v49 = *(_QWORD *)this;
  v50 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v51 = *(_QWORD **)(v50 + 1720);
  if (!v51 || !*v51 || (v51[1] & 3) != 0)
  {
    v52 = (uint64_t *)(v50 + 1720);
    v53 = *(WTF::StringImpl **)(v50 + 1088);
    if (v53)
      *(_DWORD *)v53 += 2;
    v417 = v53;
    v54 = JSC::createBuiltinExecutable();
    if (v54)
    {
      v383 = v54;
      if ((v54 & 8) != 0)
        v55 = (v54 - 112) | 1;
      else
        v55 = v54 & 0xFFFFFFFFFFFFC000;
      v320 = v50 + 976;
      if ((v55 & 1) != 0)
        v321 = v55 + 47;
      else
        v321 = *(_QWORD *)v55 + 32;
      v54 = *(_QWORD *)(v321 + 16);
      if (!v54)
        v54 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v321 + 16) = *(_QWORD *)v54;
      *(_QWORD *)v54 = v383;
      *(_QWORD *)(v54 + 8) = v320;
      *(_QWORD *)(v54 + 16) = v52;
    }
    v56 = *v52;
    *v52 = v54;
    if (v56)
      *(_QWORD *)(v56 + 8) = 3;
    if (v417)
    {
      if (*(_DWORD *)v417 == 2)
        WTF::StringImpl::destroy(v417, (WTF::StringImpl *)v55);
      else
        *(_DWORD *)v417 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v57 = JSC::JSFunction::create();
  *((_QWORD *)this + 7) = v57;
  if (v57 && *(_DWORD *)(v49 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v49 + 192), a2);
  v58 = *(_QWORD *)this;
  v59 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v60 = *(_QWORD **)(v59 + 1752);
  if (!v60 || !*v60 || (v60[1] & 3) != 0)
  {
    v61 = (uint64_t *)(v59 + 1752);
    v62 = *(WTF::StringImpl **)(v59 + 1200);
    if (v62)
      *(_DWORD *)v62 += 2;
    v418 = v62;
    v63 = JSC::createBuiltinExecutable();
    if (v63)
    {
      v402 = v63;
      if ((v63 & 8) != 0)
        v64 = (v63 - 112) | 1;
      else
        v64 = v63 & 0xFFFFFFFFFFFFC000;
      v358 = v59 + 976;
      if ((v64 & 1) != 0)
        v359 = v64 + 47;
      else
        v359 = *(_QWORD *)v64 + 32;
      v63 = *(_QWORD *)(v359 + 16);
      if (!v63)
        v63 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v359 + 16) = *(_QWORD *)v63;
      *(_QWORD *)v63 = v402;
      *(_QWORD *)(v63 + 8) = v358;
      *(_QWORD *)(v63 + 16) = v61;
    }
    v65 = *v61;
    *v61 = v63;
    if (v65)
      *(_QWORD *)(v65 + 8) = 3;
    if (v418)
    {
      if (*(_DWORD *)v418 == 2)
        WTF::StringImpl::destroy(v418, (WTF::StringImpl *)v64);
      else
        *(_DWORD *)v418 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v66 = JSC::JSFunction::create();
  *((_QWORD *)this + 14) = v66;
  if (v66 && *(_DWORD *)(v58 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v58 + 192), a2);
  v67 = *(_QWORD *)this;
  v68 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v69 = *(_QWORD **)(v68 + 1784);
  if (!v69 || !*v69 || (v69[1] & 3) != 0)
  {
    v70 = (uint64_t *)(v68 + 1784);
    v71 = *(WTF::StringImpl **)(v68 + 1120);
    if (v71)
      *(_DWORD *)v71 += 2;
    v419 = v71;
    v72 = JSC::createBuiltinExecutable();
    if (v72)
    {
      v384 = v72;
      if ((v72 & 8) != 0)
        v73 = (v72 - 112) | 1;
      else
        v73 = v72 & 0xFFFFFFFFFFFFC000;
      v322 = v68 + 976;
      if ((v73 & 1) != 0)
        v323 = v73 + 47;
      else
        v323 = *(_QWORD *)v73 + 32;
      v72 = *(_QWORD *)(v323 + 16);
      if (!v72)
        v72 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v323 + 16) = *(_QWORD *)v72;
      *(_QWORD *)v72 = v384;
      *(_QWORD *)(v72 + 8) = v322;
      *(_QWORD *)(v72 + 16) = v70;
    }
    v74 = *v70;
    *v70 = v72;
    if (v74)
      *(_QWORD *)(v74 + 8) = 3;
    if (v419)
    {
      if (*(_DWORD *)v419 == 2)
        WTF::StringImpl::destroy(v419, (WTF::StringImpl *)v73);
      else
        *(_DWORD *)v419 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v75 = JSC::JSFunction::create();
  *((_QWORD *)this + 9) = v75;
  if (v75 && *(_DWORD *)(v67 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v67 + 192), a2);
  v76 = *(_QWORD *)this;
  v77 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v78 = *(_QWORD **)(v77 + 1816);
  if (!v78 || !*v78 || (v78[1] & 3) != 0)
  {
    v79 = (uint64_t *)(v77 + 1816);
    v80 = *(WTF::StringImpl **)(v77 + 1104);
    if (v80)
      *(_DWORD *)v80 += 2;
    v420 = v80;
    v81 = JSC::createBuiltinExecutable();
    if (v81)
    {
      v403 = v81;
      if ((v81 & 8) != 0)
        v82 = (v81 - 112) | 1;
      else
        v82 = v81 & 0xFFFFFFFFFFFFC000;
      v360 = v77 + 976;
      if ((v82 & 1) != 0)
        v361 = v82 + 47;
      else
        v361 = *(_QWORD *)v82 + 32;
      v81 = *(_QWORD *)(v361 + 16);
      if (!v81)
        v81 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v361 + 16) = *(_QWORD *)v81;
      *(_QWORD *)v81 = v403;
      *(_QWORD *)(v81 + 8) = v360;
      *(_QWORD *)(v81 + 16) = v79;
    }
    v83 = *v79;
    *v79 = v81;
    if (v83)
      *(_QWORD *)(v83 + 8) = 3;
    if (v420)
    {
      if (*(_DWORD *)v420 == 2)
        WTF::StringImpl::destroy(v420, (WTF::StringImpl *)v82);
      else
        *(_DWORD *)v420 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v84 = JSC::JSFunction::create();
  *((_QWORD *)this + 8) = v84;
  if (v84 && *(_DWORD *)(v76 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v76 + 192), a2);
  v85 = *(_QWORD *)this;
  v86 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v87 = *(_QWORD **)(v86 + 1848);
  if (!v87 || !*v87 || (v87[1] & 3) != 0)
  {
    v88 = (uint64_t *)(v86 + 1848);
    v89 = *(WTF::StringImpl **)(v86 + 1232);
    if (v89)
      *(_DWORD *)v89 += 2;
    v421 = v89;
    v90 = JSC::createBuiltinExecutable();
    if (v90)
    {
      v410 = v90;
      if ((v90 & 8) != 0)
        v91 = (v90 - 112) | 1;
      else
        v91 = v90 & 0xFFFFFFFFFFFFC000;
      v374 = v86 + 976;
      if ((v91 & 1) != 0)
        v375 = v91 + 47;
      else
        v375 = *(_QWORD *)v91 + 32;
      v90 = *(_QWORD *)(v375 + 16);
      if (!v90)
        v90 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v375 + 16) = *(_QWORD *)v90;
      *(_QWORD *)v90 = v410;
      *(_QWORD *)(v90 + 8) = v374;
      *(_QWORD *)(v90 + 16) = v88;
    }
    v92 = *v88;
    *v88 = v90;
    if (v92)
      *(_QWORD *)(v92 + 8) = 3;
    if (v421)
    {
      if (*(_DWORD *)v421 == 2)
        WTF::StringImpl::destroy(v421, (WTF::StringImpl *)v91);
      else
        *(_DWORD *)v421 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v93 = JSC::JSFunction::create();
  *((_QWORD *)this + 16) = v93;
  if (v93 && *(_DWORD *)(v85 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v85 + 192), a2);
  v94 = *(_QWORD *)this;
  v95 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v96 = *(_QWORD **)(v95 + 1880);
  if (!v96 || !*v96 || (v96[1] & 3) != 0)
  {
    v97 = (uint64_t *)(v95 + 1880);
    v98 = *(WTF::StringImpl **)(v95 + 1488);
    if (v98)
      *(_DWORD *)v98 += 2;
    v422 = v98;
    v99 = JSC::createBuiltinExecutable();
    if (v99)
    {
      v411 = v99;
      if ((v99 & 8) != 0)
        v100 = (v99 - 112) | 1;
      else
        v100 = v99 & 0xFFFFFFFFFFFFC000;
      v376 = v95 + 976;
      if ((v100 & 1) != 0)
        v377 = v100 + 47;
      else
        v377 = *(_QWORD *)v100 + 32;
      v99 = *(_QWORD *)(v377 + 16);
      if (!v99)
        v99 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v377 + 16) = *(_QWORD *)v99;
      *(_QWORD *)v99 = v411;
      *(_QWORD *)(v99 + 8) = v376;
      *(_QWORD *)(v99 + 16) = v97;
    }
    v101 = *v97;
    *v97 = v99;
    if (v101)
      *(_QWORD *)(v101 + 8) = 3;
    if (v422)
    {
      if (*(_DWORD *)v422 == 2)
        WTF::StringImpl::destroy(v422, (WTF::StringImpl *)v100);
      else
        *(_DWORD *)v422 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v102 = JSC::JSFunction::create();
  *((_QWORD *)this + 32) = v102;
  if (v102 && *(_DWORD *)(v94 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v94 + 192), a2);
  v103 = *(_QWORD *)this;
  v104 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v105 = *(_QWORD **)(v104 + 1912);
  if (!v105 || !*v105 || (v105[1] & 3) != 0)
  {
    v106 = (uint64_t *)(v104 + 1912);
    v107 = *(WTF::StringImpl **)(v104 + 1504);
    if (v107)
      *(_DWORD *)v107 += 2;
    v423 = v107;
    v108 = JSC::createBuiltinExecutable();
    if (v108)
    {
      v404 = v108;
      if ((v108 & 8) != 0)
        v109 = (v108 - 112) | 1;
      else
        v109 = v108 & 0xFFFFFFFFFFFFC000;
      v362 = v104 + 976;
      if ((v109 & 1) != 0)
        v363 = v109 + 47;
      else
        v363 = *(_QWORD *)v109 + 32;
      v108 = *(_QWORD *)(v363 + 16);
      if (!v108)
        v108 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v363 + 16) = *(_QWORD *)v108;
      *(_QWORD *)v108 = v404;
      *(_QWORD *)(v108 + 8) = v362;
      *(_QWORD *)(v108 + 16) = v106;
    }
    v110 = *v106;
    *v106 = v108;
    if (v110)
      *(_QWORD *)(v110 + 8) = 3;
    if (v423)
    {
      if (*(_DWORD *)v423 == 2)
        WTF::StringImpl::destroy(v423, (WTF::StringImpl *)v109);
      else
        *(_DWORD *)v423 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v111 = JSC::JSFunction::create();
  *((_QWORD *)this + 33) = v111;
  if (v111 && *(_DWORD *)(v103 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v103 + 192), a2);
  v112 = *(_QWORD *)this;
  v113 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v114 = *(_QWORD **)(v113 + 1944);
  if (!v114 || !*v114 || (v114[1] & 3) != 0)
  {
    v115 = (uint64_t *)(v113 + 1944);
    v116 = *(WTF::StringImpl **)(v113 + 1248);
    if (v116)
      *(_DWORD *)v116 += 2;
    v424 = v116;
    v117 = JSC::createBuiltinExecutable();
    if (v117)
    {
      v385 = v117;
      if ((v117 & 8) != 0)
        v118 = (v117 - 112) | 1;
      else
        v118 = v117 & 0xFFFFFFFFFFFFC000;
      v324 = v113 + 976;
      if ((v118 & 1) != 0)
        v325 = v118 + 47;
      else
        v325 = *(_QWORD *)v118 + 32;
      v117 = *(_QWORD *)(v325 + 16);
      if (!v117)
        v117 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v325 + 16) = *(_QWORD *)v117;
      *(_QWORD *)v117 = v385;
      *(_QWORD *)(v117 + 8) = v324;
      *(_QWORD *)(v117 + 16) = v115;
    }
    v119 = *v115;
    *v115 = v117;
    if (v119)
      *(_QWORD *)(v119 + 8) = 3;
    if (v424)
    {
      if (*(_DWORD *)v424 == 2)
        WTF::StringImpl::destroy(v424, (WTF::StringImpl *)v118);
      else
        *(_DWORD *)v424 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v120 = JSC::JSFunction::create();
  *((_QWORD *)this + 17) = v120;
  if (v120 && *(_DWORD *)(v112 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v112 + 192), a2);
  v121 = *(_QWORD *)this;
  v122 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v123 = *(_QWORD **)(v122 + 1976);
  if (!v123 || !*v123 || (v123[1] & 3) != 0)
  {
    v124 = (uint64_t *)(v122 + 1976);
    v125 = *(WTF::StringImpl **)(v122 + 1296);
    if (v125)
      *(_DWORD *)v125 += 2;
    v425 = v125;
    v126 = JSC::createBuiltinExecutable();
    if (v126)
    {
      v405 = v126;
      if ((v126 & 8) != 0)
        v127 = (v126 - 112) | 1;
      else
        v127 = v126 & 0xFFFFFFFFFFFFC000;
      v364 = v122 + 976;
      if ((v127 & 1) != 0)
        v365 = v127 + 47;
      else
        v365 = *(_QWORD *)v127 + 32;
      v126 = *(_QWORD *)(v365 + 16);
      if (!v126)
        v126 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v365 + 16) = *(_QWORD *)v126;
      *(_QWORD *)v126 = v405;
      *(_QWORD *)(v126 + 8) = v364;
      *(_QWORD *)(v126 + 16) = v124;
    }
    v128 = *v124;
    *v124 = v126;
    if (v128)
      *(_QWORD *)(v128 + 8) = 3;
    if (v425)
    {
      if (*(_DWORD *)v425 == 2)
        WTF::StringImpl::destroy(v425, (WTF::StringImpl *)v127);
      else
        *(_DWORD *)v425 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v129 = JSC::JSFunction::create();
  *((_QWORD *)this + 20) = v129;
  if (v129 && *(_DWORD *)(v121 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v121 + 192), a2);
  v130 = *(_QWORD *)this;
  v131 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v132 = *(_QWORD **)(v131 + 2008);
  if (!v132 || !*v132 || (v132[1] & 3) != 0)
  {
    v133 = (uint64_t *)(v131 + 2008);
    v134 = *(WTF::StringImpl **)(v131 + 1424);
    if (v134)
      *(_DWORD *)v134 += 2;
    v426 = v134;
    v135 = JSC::createBuiltinExecutable();
    if (v135)
    {
      v406 = v135;
      if ((v135 & 8) != 0)
        v136 = (v135 - 112) | 1;
      else
        v136 = v135 & 0xFFFFFFFFFFFFC000;
      v366 = v131 + 976;
      if ((v136 & 1) != 0)
        v367 = v136 + 47;
      else
        v367 = *(_QWORD *)v136 + 32;
      v135 = *(_QWORD *)(v367 + 16);
      if (!v135)
        v135 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v367 + 16) = *(_QWORD *)v135;
      *(_QWORD *)v135 = v406;
      *(_QWORD *)(v135 + 8) = v366;
      *(_QWORD *)(v135 + 16) = v133;
    }
    v137 = *v133;
    *v133 = v135;
    if (v137)
      *(_QWORD *)(v137 + 8) = 3;
    if (v426)
    {
      if (*(_DWORD *)v426 == 2)
        WTF::StringImpl::destroy(v426, (WTF::StringImpl *)v136);
      else
        *(_DWORD *)v426 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v138 = JSC::JSFunction::create();
  *((_QWORD *)this + 28) = v138;
  if (v138 && *(_DWORD *)(v130 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v130 + 192), a2);
  v139 = *(_QWORD *)this;
  v140 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v141 = *(_QWORD **)(v140 + 2040);
  if (!v141 || !*v141 || (v141[1] & 3) != 0)
  {
    v142 = (uint64_t *)(v140 + 2040);
    v143 = *(WTF::StringImpl **)(v140 + 1072);
    if (v143)
      *(_DWORD *)v143 += 2;
    v427 = v143;
    v144 = JSC::createBuiltinExecutable();
    if (v144)
    {
      v386 = v144;
      if ((v144 & 8) != 0)
        v145 = (v144 - 112) | 1;
      else
        v145 = v144 & 0xFFFFFFFFFFFFC000;
      v326 = v140 + 976;
      if ((v145 & 1) != 0)
        v327 = v145 + 47;
      else
        v327 = *(_QWORD *)v145 + 32;
      v144 = *(_QWORD *)(v327 + 16);
      if (!v144)
        v144 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v327 + 16) = *(_QWORD *)v144;
      *(_QWORD *)v144 = v386;
      *(_QWORD *)(v144 + 8) = v326;
      *(_QWORD *)(v144 + 16) = v142;
    }
    v146 = *v142;
    *v142 = v144;
    if (v146)
      *(_QWORD *)(v146 + 8) = 3;
    if (v427)
    {
      if (*(_DWORD *)v427 == 2)
        WTF::StringImpl::destroy(v427, (WTF::StringImpl *)v145);
      else
        *(_DWORD *)v427 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v147 = JSC::JSFunction::create();
  *((_QWORD *)this + 6) = v147;
  if (v147 && *(_DWORD *)(v139 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v139 + 192), a2);
  v148 = *(_QWORD *)this;
  v149 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v150 = *(_QWORD **)(v149 + 2072);
  if (!v150 || !*v150 || (v150[1] & 3) != 0)
  {
    v151 = (uint64_t *)(v149 + 2072);
    v152 = *(WTF::StringImpl **)(v149 + 1520);
    if (v152)
      *(_DWORD *)v152 += 2;
    v428 = v152;
    v153 = JSC::createBuiltinExecutable();
    if (v153)
    {
      v387 = v153;
      if ((v153 & 8) != 0)
        v154 = (v153 - 112) | 1;
      else
        v154 = v153 & 0xFFFFFFFFFFFFC000;
      v328 = v149 + 976;
      if ((v154 & 1) != 0)
        v329 = v154 + 47;
      else
        v329 = *(_QWORD *)v154 + 32;
      v153 = *(_QWORD *)(v329 + 16);
      if (!v153)
        v153 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v329 + 16) = *(_QWORD *)v153;
      *(_QWORD *)v153 = v387;
      *(_QWORD *)(v153 + 8) = v328;
      *(_QWORD *)(v153 + 16) = v151;
    }
    v155 = *v151;
    *v151 = v153;
    if (v155)
      *(_QWORD *)(v155 + 8) = 3;
    if (v428)
    {
      if (*(_DWORD *)v428 == 2)
        WTF::StringImpl::destroy(v428, (WTF::StringImpl *)v154);
      else
        *(_DWORD *)v428 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v156 = JSC::JSFunction::create();
  *((_QWORD *)this + 34) = v156;
  if (v156 && *(_DWORD *)(v148 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v148 + 192), a2);
  v157 = *(_QWORD *)this;
  v158 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v159 = *(_QWORD **)(v158 + 2104);
  if (!v159 || !*v159 || (v159[1] & 3) != 0)
  {
    v160 = (uint64_t *)(v158 + 2104);
    v161 = *(WTF::StringImpl **)(v158 + 1168);
    if (v161)
      *(_DWORD *)v161 += 2;
    v429 = v161;
    v162 = JSC::createBuiltinExecutable();
    if (v162)
    {
      v388 = v162;
      if ((v162 & 8) != 0)
        v163 = (v162 - 112) | 1;
      else
        v163 = v162 & 0xFFFFFFFFFFFFC000;
      v330 = v158 + 976;
      if ((v163 & 1) != 0)
        v331 = v163 + 47;
      else
        v331 = *(_QWORD *)v163 + 32;
      v162 = *(_QWORD *)(v331 + 16);
      if (!v162)
        v162 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v331 + 16) = *(_QWORD *)v162;
      *(_QWORD *)v162 = v388;
      *(_QWORD *)(v162 + 8) = v330;
      *(_QWORD *)(v162 + 16) = v160;
    }
    v164 = *v160;
    *v160 = v162;
    if (v164)
      *(_QWORD *)(v164 + 8) = 3;
    if (v429)
    {
      if (*(_DWORD *)v429 == 2)
        WTF::StringImpl::destroy(v429, (WTF::StringImpl *)v163);
      else
        *(_DWORD *)v429 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v165 = JSC::JSFunction::create();
  *((_QWORD *)this + 12) = v165;
  if (v165 && *(_DWORD *)(v157 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v157 + 192), a2);
  v166 = *(_QWORD *)this;
  v167 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v168 = *(_QWORD **)(v167 + 2136);
  if (!v168 || !*v168 || (v168[1] & 3) != 0)
  {
    v169 = (uint64_t *)(v167 + 2136);
    v170 = *(WTF::StringImpl **)(v167 + 1184);
    if (v170)
      *(_DWORD *)v170 += 2;
    v430 = v170;
    v171 = JSC::createBuiltinExecutable();
    if (v171)
    {
      v389 = v171;
      if ((v171 & 8) != 0)
        v172 = (v171 - 112) | 1;
      else
        v172 = v171 & 0xFFFFFFFFFFFFC000;
      v332 = v167 + 976;
      if ((v172 & 1) != 0)
        v333 = v172 + 47;
      else
        v333 = *(_QWORD *)v172 + 32;
      v171 = *(_QWORD *)(v333 + 16);
      if (!v171)
        v171 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v333 + 16) = *(_QWORD *)v171;
      *(_QWORD *)v171 = v389;
      *(_QWORD *)(v171 + 8) = v332;
      *(_QWORD *)(v171 + 16) = v169;
    }
    v173 = *v169;
    *v169 = v171;
    if (v173)
      *(_QWORD *)(v173 + 8) = 3;
    if (v430)
    {
      if (*(_DWORD *)v430 == 2)
        WTF::StringImpl::destroy(v430, (WTF::StringImpl *)v172);
      else
        *(_DWORD *)v430 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v174 = JSC::JSFunction::create();
  *((_QWORD *)this + 13) = v174;
  if (v174 && *(_DWORD *)(v166 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v166 + 192), a2);
  v175 = *(_QWORD *)this;
  v176 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v177 = *(_QWORD **)(v176 + 2168);
  if (!v177 || !*v177 || (v177[1] & 3) != 0)
  {
    v178 = (uint64_t *)(v176 + 2168);
    v179 = *(WTF::StringImpl **)(v176 + 1392);
    if (v179)
      *(_DWORD *)v179 += 2;
    v431 = v179;
    v180 = JSC::createBuiltinExecutable();
    if (v180)
    {
      v390 = v180;
      if ((v180 & 8) != 0)
        v181 = (v180 - 112) | 1;
      else
        v181 = v180 & 0xFFFFFFFFFFFFC000;
      v334 = v176 + 976;
      if ((v181 & 1) != 0)
        v335 = v181 + 47;
      else
        v335 = *(_QWORD *)v181 + 32;
      v180 = *(_QWORD *)(v335 + 16);
      if (!v180)
        v180 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v335 + 16) = *(_QWORD *)v180;
      *(_QWORD *)v180 = v390;
      *(_QWORD *)(v180 + 8) = v334;
      *(_QWORD *)(v180 + 16) = v178;
    }
    v182 = *v178;
    *v178 = v180;
    if (v182)
      *(_QWORD *)(v182 + 8) = 3;
    if (v431)
    {
      if (*(_DWORD *)v431 == 2)
        WTF::StringImpl::destroy(v431, (WTF::StringImpl *)v181);
      else
        *(_DWORD *)v431 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v183 = JSC::JSFunction::create();
  *((_QWORD *)this + 26) = v183;
  if (v183 && *(_DWORD *)(v175 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v175 + 192), a2);
  v184 = *(_QWORD *)this;
  v185 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v186 = *(_QWORD **)(v185 + 2200);
  if (!v186 || !*v186 || (v186[1] & 3) != 0)
  {
    v187 = (uint64_t *)(v185 + 2200);
    v188 = *(WTF::StringImpl **)(v185 + 1328);
    if (v188)
      *(_DWORD *)v188 += 2;
    v432 = v188;
    v189 = JSC::createBuiltinExecutable();
    if (v189)
    {
      v391 = v189;
      if ((v189 & 8) != 0)
        v190 = (v189 - 112) | 1;
      else
        v190 = v189 & 0xFFFFFFFFFFFFC000;
      v336 = v185 + 976;
      if ((v190 & 1) != 0)
        v337 = v190 + 47;
      else
        v337 = *(_QWORD *)v190 + 32;
      v189 = *(_QWORD *)(v337 + 16);
      if (!v189)
        v189 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v337 + 16) = *(_QWORD *)v189;
      *(_QWORD *)v189 = v391;
      *(_QWORD *)(v189 + 8) = v336;
      *(_QWORD *)(v189 + 16) = v187;
    }
    v191 = *v187;
    *v187 = v189;
    if (v191)
      *(_QWORD *)(v191 + 8) = 3;
    if (v432)
    {
      if (*(_DWORD *)v432 == 2)
        WTF::StringImpl::destroy(v432, (WTF::StringImpl *)v190);
      else
        *(_DWORD *)v432 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v192 = JSC::JSFunction::create();
  *((_QWORD *)this + 22) = v192;
  if (v192 && *(_DWORD *)(v184 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v184 + 192), a2);
  v193 = *(_QWORD *)this;
  v194 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v195 = *(_QWORD **)(v194 + 2232);
  if (!v195 || !*v195 || (v195[1] & 3) != 0)
  {
    v196 = (uint64_t *)(v194 + 2232);
    v197 = *(WTF::StringImpl **)(v194 + 1376);
    if (v197)
      *(_DWORD *)v197 += 2;
    v433 = v197;
    v198 = JSC::createBuiltinExecutable();
    if (v198)
    {
      v392 = v198;
      if ((v198 & 8) != 0)
        v199 = (v198 - 112) | 1;
      else
        v199 = v198 & 0xFFFFFFFFFFFFC000;
      v338 = v194 + 976;
      if ((v199 & 1) != 0)
        v339 = v199 + 47;
      else
        v339 = *(_QWORD *)v199 + 32;
      v198 = *(_QWORD *)(v339 + 16);
      if (!v198)
        v198 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v339 + 16) = *(_QWORD *)v198;
      *(_QWORD *)v198 = v392;
      *(_QWORD *)(v198 + 8) = v338;
      *(_QWORD *)(v198 + 16) = v196;
    }
    v200 = *v196;
    *v196 = v198;
    if (v200)
      *(_QWORD *)(v200 + 8) = 3;
    if (v433)
    {
      if (*(_DWORD *)v433 == 2)
        WTF::StringImpl::destroy(v433, (WTF::StringImpl *)v199);
      else
        *(_DWORD *)v433 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v201 = JSC::JSFunction::create();
  *((_QWORD *)this + 25) = v201;
  if (v201 && *(_DWORD *)(v193 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v193 + 192), a2);
  v202 = *(_QWORD *)this;
  v203 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v204 = *(_QWORD **)(v203 + 2264);
  if (!v204 || !*v204 || (v204[1] & 3) != 0)
  {
    v205 = (uint64_t *)(v203 + 2264);
    v206 = *(WTF::StringImpl **)(v203 + 1360);
    if (v206)
      *(_DWORD *)v206 += 2;
    v434 = v206;
    v207 = JSC::createBuiltinExecutable();
    if (v207)
    {
      v393 = v207;
      if ((v207 & 8) != 0)
        v208 = (v207 - 112) | 1;
      else
        v208 = v207 & 0xFFFFFFFFFFFFC000;
      v340 = v203 + 976;
      if ((v208 & 1) != 0)
        v341 = v208 + 47;
      else
        v341 = *(_QWORD *)v208 + 32;
      v207 = *(_QWORD *)(v341 + 16);
      if (!v207)
        v207 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v341 + 16) = *(_QWORD *)v207;
      *(_QWORD *)v207 = v393;
      *(_QWORD *)(v207 + 8) = v340;
      *(_QWORD *)(v207 + 16) = v205;
    }
    v209 = *v205;
    *v205 = v207;
    if (v209)
      *(_QWORD *)(v209 + 8) = 3;
    if (v434)
    {
      if (*(_DWORD *)v434 == 2)
        WTF::StringImpl::destroy(v434, (WTF::StringImpl *)v208);
      else
        *(_DWORD *)v434 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v210 = JSC::JSFunction::create();
  *((_QWORD *)this + 24) = v210;
  if (v210 && *(_DWORD *)(v202 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v202 + 192), a2);
  v211 = *(_QWORD *)this;
  v212 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v213 = *(_QWORD **)(v212 + 2296);
  if (!v213 || !*v213 || (v213[1] & 3) != 0)
  {
    v214 = (uint64_t *)(v212 + 2296);
    v215 = *(WTF::StringImpl **)(v212 + 1344);
    if (v215)
      *(_DWORD *)v215 += 2;
    v435 = v215;
    v216 = JSC::createBuiltinExecutable();
    if (v216)
    {
      v394 = v216;
      if ((v216 & 8) != 0)
        v217 = (v216 - 112) | 1;
      else
        v217 = v216 & 0xFFFFFFFFFFFFC000;
      v342 = v212 + 976;
      if ((v217 & 1) != 0)
        v343 = v217 + 47;
      else
        v343 = *(_QWORD *)v217 + 32;
      v216 = *(_QWORD *)(v343 + 16);
      if (!v216)
        v216 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v343 + 16) = *(_QWORD *)v216;
      *(_QWORD *)v216 = v394;
      *(_QWORD *)(v216 + 8) = v342;
      *(_QWORD *)(v216 + 16) = v214;
    }
    v218 = *v214;
    *v214 = v216;
    if (v218)
      *(_QWORD *)(v218 + 8) = 3;
    if (v435)
    {
      if (*(_DWORD *)v435 == 2)
        WTF::StringImpl::destroy(v435, (WTF::StringImpl *)v217);
      else
        *(_DWORD *)v435 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v219 = JSC::JSFunction::create();
  *((_QWORD *)this + 23) = v219;
  if (v219 && *(_DWORD *)(v211 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v211 + 192), a2);
  v220 = *(_QWORD *)this;
  v221 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v222 = *(_QWORD **)(v221 + 2328);
  if (!v222 || !*v222 || (v222[1] & 3) != 0)
  {
    v223 = (uint64_t *)(v221 + 2328);
    v224 = *(WTF::StringImpl **)(v221 + 1280);
    if (v224)
      *(_DWORD *)v224 += 2;
    v436 = v224;
    v225 = JSC::createBuiltinExecutable();
    if (v225)
    {
      v395 = v225;
      if ((v225 & 8) != 0)
        v226 = (v225 - 112) | 1;
      else
        v226 = v225 & 0xFFFFFFFFFFFFC000;
      v344 = v221 + 976;
      if ((v226 & 1) != 0)
        v345 = v226 + 47;
      else
        v345 = *(_QWORD *)v226 + 32;
      v225 = *(_QWORD *)(v345 + 16);
      if (!v225)
        v225 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v345 + 16) = *(_QWORD *)v225;
      *(_QWORD *)v225 = v395;
      *(_QWORD *)(v225 + 8) = v344;
      *(_QWORD *)(v225 + 16) = v223;
    }
    v227 = *v223;
    *v223 = v225;
    if (v227)
      *(_QWORD *)(v227 + 8) = 3;
    if (v436)
    {
      if (*(_DWORD *)v436 == 2)
        WTF::StringImpl::destroy(v436, (WTF::StringImpl *)v226);
      else
        *(_DWORD *)v436 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v228 = JSC::JSFunction::create();
  *((_QWORD *)this + 19) = v228;
  if (v228 && *(_DWORD *)(v220 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v220 + 192), a2);
  v229 = *(_QWORD *)this;
  v230 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v231 = *(_QWORD **)(v230 + 2360);
  if (!v231 || !*v231 || (v231[1] & 3) != 0)
  {
    v232 = (uint64_t *)(v230 + 2360);
    v233 = *(WTF::StringImpl **)(v230 + 1216);
    if (v233)
      *(_DWORD *)v233 += 2;
    v437 = v233;
    v234 = JSC::createBuiltinExecutable();
    if (v234)
    {
      v407 = v234;
      if ((v234 & 8) != 0)
        v235 = (v234 - 112) | 1;
      else
        v235 = v234 & 0xFFFFFFFFFFFFC000;
      v368 = v230 + 976;
      if ((v235 & 1) != 0)
        v369 = v235 + 47;
      else
        v369 = *(_QWORD *)v235 + 32;
      v234 = *(_QWORD *)(v369 + 16);
      if (!v234)
        v234 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v369 + 16) = *(_QWORD *)v234;
      *(_QWORD *)v234 = v407;
      *(_QWORD *)(v234 + 8) = v368;
      *(_QWORD *)(v234 + 16) = v232;
    }
    v236 = *v232;
    *v232 = v234;
    if (v236)
      *(_QWORD *)(v236 + 8) = 3;
    if (v437)
    {
      if (*(_DWORD *)v437 == 2)
        WTF::StringImpl::destroy(v437, (WTF::StringImpl *)v235);
      else
        *(_DWORD *)v437 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v237 = JSC::JSFunction::create();
  *((_QWORD *)this + 15) = v237;
  if (v237 && *(_DWORD *)(v229 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v229 + 192), a2);
  v238 = *(_QWORD *)this;
  v239 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v240 = *(_QWORD **)(v239 + 2392);
  if (!v240 || !*v240 || (v240[1] & 3) != 0)
  {
    v241 = (uint64_t *)(v239 + 2392);
    v242 = *(WTF::StringImpl **)(v239 + 1408);
    if (v242)
      *(_DWORD *)v242 += 2;
    v438 = v242;
    v243 = JSC::createBuiltinExecutable();
    if (v243)
    {
      v396 = v243;
      if ((v243 & 8) != 0)
        v244 = (v243 - 112) | 1;
      else
        v244 = v243 & 0xFFFFFFFFFFFFC000;
      v346 = v239 + 976;
      if ((v244 & 1) != 0)
        v347 = v244 + 47;
      else
        v347 = *(_QWORD *)v244 + 32;
      v243 = *(_QWORD *)(v347 + 16);
      if (!v243)
        v243 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v347 + 16) = *(_QWORD *)v243;
      *(_QWORD *)v243 = v396;
      *(_QWORD *)(v243 + 8) = v346;
      *(_QWORD *)(v243 + 16) = v241;
    }
    v245 = *v241;
    *v241 = v243;
    if (v245)
      *(_QWORD *)(v245 + 8) = 3;
    if (v438)
    {
      if (*(_DWORD *)v438 == 2)
        WTF::StringImpl::destroy(v438, (WTF::StringImpl *)v244);
      else
        *(_DWORD *)v438 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v246 = JSC::JSFunction::create();
  *((_QWORD *)this + 27) = v246;
  if (v246 && *(_DWORD *)(v238 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v238 + 192), a2);
  v247 = *(_QWORD *)this;
  v248 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v249 = *(_QWORD **)(v248 + 2424);
  if (!v249 || !*v249 || (v249[1] & 3) != 0)
  {
    v250 = (uint64_t *)(v248 + 2424);
    v251 = *(WTF::StringImpl **)(v248 + 1264);
    if (v251)
      *(_DWORD *)v251 += 2;
    v439 = v251;
    v252 = JSC::createBuiltinExecutable();
    if (v252)
    {
      v408 = v252;
      if ((v252 & 8) != 0)
        v253 = (v252 - 112) | 1;
      else
        v253 = v252 & 0xFFFFFFFFFFFFC000;
      v370 = v248 + 976;
      if ((v253 & 1) != 0)
        v371 = v253 + 47;
      else
        v371 = *(_QWORD *)v253 + 32;
      v252 = *(_QWORD *)(v371 + 16);
      if (!v252)
        v252 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v371 + 16) = *(_QWORD *)v252;
      *(_QWORD *)v252 = v408;
      *(_QWORD *)(v252 + 8) = v370;
      *(_QWORD *)(v252 + 16) = v250;
    }
    v254 = *v250;
    *v250 = v252;
    if (v254)
      *(_QWORD *)(v254 + 8) = 3;
    if (v439)
    {
      if (*(_DWORD *)v439 == 2)
        WTF::StringImpl::destroy(v439, (WTF::StringImpl *)v253);
      else
        *(_DWORD *)v439 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v255 = JSC::JSFunction::create();
  *((_QWORD *)this + 18) = v255;
  if (v255 && *(_DWORD *)(v247 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v247 + 192), a2);
  v256 = *(_QWORD *)this;
  v257 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v258 = *(_QWORD **)(v257 + 2456);
  if (!v258 || !*v258 || (v258[1] & 3) != 0)
  {
    v259 = (uint64_t *)(v257 + 2456);
    v260 = *(WTF::StringImpl **)(v257 + 1136);
    if (v260)
      *(_DWORD *)v260 += 2;
    v440 = v260;
    v261 = JSC::createBuiltinExecutable();
    if (v261)
    {
      v409 = v261;
      if ((v261 & 8) != 0)
        v262 = (v261 - 112) | 1;
      else
        v262 = v261 & 0xFFFFFFFFFFFFC000;
      v372 = v257 + 976;
      if ((v262 & 1) != 0)
        v373 = v262 + 47;
      else
        v373 = *(_QWORD *)v262 + 32;
      v261 = *(_QWORD *)(v373 + 16);
      if (!v261)
        v261 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v373 + 16) = *(_QWORD *)v261;
      *(_QWORD *)v261 = v409;
      *(_QWORD *)(v261 + 8) = v372;
      *(_QWORD *)(v261 + 16) = v259;
    }
    v263 = *v259;
    *v259 = v261;
    if (v263)
      *(_QWORD *)(v263 + 8) = 3;
    if (v440)
    {
      if (*(_DWORD *)v440 == 2)
        WTF::StringImpl::destroy(v440, (WTF::StringImpl *)v262);
      else
        *(_DWORD *)v440 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v264 = JSC::JSFunction::create();
  *((_QWORD *)this + 10) = v264;
  if (v264 && *(_DWORD *)(v256 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v256 + 192), a2);
  v265 = *(_QWORD *)this;
  v266 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v267 = *(_QWORD **)(v266 + 2488);
  if (!v267 || !*v267 || (v267[1] & 3) != 0)
  {
    v268 = (uint64_t *)(v266 + 2488);
    v269 = *(WTF::StringImpl **)(v266 + 1152);
    if (v269)
      *(_DWORD *)v269 += 2;
    v441 = v269;
    v270 = JSC::createBuiltinExecutable();
    if (v270)
    {
      v397 = v270;
      if ((v270 & 8) != 0)
        v271 = (v270 - 112) | 1;
      else
        v271 = v270 & 0xFFFFFFFFFFFFC000;
      v348 = v266 + 976;
      if ((v271 & 1) != 0)
        v349 = v271 + 47;
      else
        v349 = *(_QWORD *)v271 + 32;
      v270 = *(_QWORD *)(v349 + 16);
      if (!v270)
        v270 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v349 + 16) = *(_QWORD *)v270;
      *(_QWORD *)v270 = v397;
      *(_QWORD *)(v270 + 8) = v348;
      *(_QWORD *)(v270 + 16) = v268;
    }
    v272 = *v268;
    *v268 = v270;
    if (v272)
      *(_QWORD *)(v272 + 8) = 3;
    if (v441)
    {
      if (*(_DWORD *)v441 == 2)
        WTF::StringImpl::destroy(v441, (WTF::StringImpl *)v271);
      else
        *(_DWORD *)v441 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v273 = JSC::JSFunction::create();
  *((_QWORD *)this + 11) = v273;
  if (v273 && *(_DWORD *)(v265 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v265 + 192), a2);
  v274 = *(_QWORD *)this;
  v275 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v276 = *(_QWORD **)(v275 + 2520);
  if (!v276 || !*v276 || (v276[1] & 3) != 0)
  {
    v277 = (uint64_t *)(v275 + 2520);
    v278 = *(WTF::StringImpl **)(v275 + 1472);
    if (v278)
      *(_DWORD *)v278 += 2;
    v442 = v278;
    v279 = JSC::createBuiltinExecutable();
    if (v279)
    {
      v398 = v279;
      if ((v279 & 8) != 0)
        v280 = (v279 - 112) | 1;
      else
        v280 = v279 & 0xFFFFFFFFFFFFC000;
      v350 = v275 + 976;
      if ((v280 & 1) != 0)
        v351 = v280 + 47;
      else
        v351 = *(_QWORD *)v280 + 32;
      v279 = *(_QWORD *)(v351 + 16);
      if (!v279)
        v279 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v351 + 16) = *(_QWORD *)v279;
      *(_QWORD *)v279 = v398;
      *(_QWORD *)(v279 + 8) = v350;
      *(_QWORD *)(v279 + 16) = v277;
    }
    v281 = *v277;
    *v277 = v279;
    if (v281)
      *(_QWORD *)(v281 + 8) = 3;
    if (v442)
    {
      if (*(_DWORD *)v442 == 2)
        WTF::StringImpl::destroy(v442, (WTF::StringImpl *)v280);
      else
        *(_DWORD *)v442 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v282 = JSC::JSFunction::create();
  *((_QWORD *)this + 31) = v282;
  if (v282 && *(_DWORD *)(v274 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v274 + 192), a2);
  v283 = *(_QWORD *)this;
  v284 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v285 = *(_QWORD **)(v284 + 2552);
  if (!v285 || !*v285 || (v285[1] & 3) != 0)
  {
    v286 = (uint64_t *)(v284 + 2552);
    v287 = *(WTF::StringImpl **)(v284 + 1456);
    if (v287)
      *(_DWORD *)v287 += 2;
    v443 = v287;
    v288 = JSC::createBuiltinExecutable();
    if (v288)
    {
      v399 = v288;
      if ((v288 & 8) != 0)
        v289 = (v288 - 112) | 1;
      else
        v289 = v288 & 0xFFFFFFFFFFFFC000;
      v352 = v284 + 976;
      if ((v289 & 1) != 0)
        v353 = v289 + 47;
      else
        v353 = *(_QWORD *)v289 + 32;
      v288 = *(_QWORD *)(v353 + 16);
      if (!v288)
        v288 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v353 + 16) = *(_QWORD *)v288;
      *(_QWORD *)v288 = v399;
      *(_QWORD *)(v288 + 8) = v352;
      *(_QWORD *)(v288 + 16) = v286;
    }
    v290 = *v286;
    *v286 = v288;
    if (v290)
      *(_QWORD *)(v290 + 8) = 3;
    if (v443)
    {
      if (*(_DWORD *)v443 == 2)
        WTF::StringImpl::destroy(v443, (WTF::StringImpl *)v289);
      else
        *(_DWORD *)v443 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v291 = JSC::JSFunction::create();
  *((_QWORD *)this + 30) = v291;
  if (v291 && *(_DWORD *)(v283 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v283 + 192), a2);
  v292 = *(_QWORD *)this;
  v293 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v294 = *(_QWORD **)(v293 + 2584);
  if (!v294 || !*v294 || (v294[1] & 3) != 0)
  {
    v295 = (uint64_t *)(v293 + 2584);
    v296 = *(WTF::StringImpl **)(v293 + 1312);
    if (v296)
      *(_DWORD *)v296 += 2;
    v444 = v296;
    v297 = JSC::createBuiltinExecutable();
    if (v297)
    {
      v400 = v297;
      if ((v297 & 8) != 0)
        v298 = (v297 - 112) | 1;
      else
        v298 = v297 & 0xFFFFFFFFFFFFC000;
      v354 = v293 + 976;
      if ((v298 & 1) != 0)
        v355 = v298 + 47;
      else
        v355 = *(_QWORD *)v298 + 32;
      v297 = *(_QWORD *)(v355 + 16);
      if (!v297)
        v297 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v355 + 16) = *(_QWORD *)v297;
      *(_QWORD *)v297 = v400;
      *(_QWORD *)(v297 + 8) = v354;
      *(_QWORD *)(v297 + 16) = v295;
    }
    v299 = *v295;
    *v295 = v297;
    if (v299)
      *(_QWORD *)(v299 + 8) = 3;
    if (v444)
    {
      if (*(_DWORD *)v444 == 2)
        WTF::StringImpl::destroy(v444, (WTF::StringImpl *)v298);
      else
        *(_DWORD *)v444 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v300 = JSC::JSFunction::create();
  *((_QWORD *)this + 21) = v300;
  if (v300 && *(_DWORD *)(v292 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v292 + 192), a2);
  v301 = *(_QWORD *)this;
  v302 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v303 = *(_QWORD **)(v302 + 2616);
  if (!v303 || !*v303 || (v303[1] & 3) != 0)
  {
    v304 = (uint64_t *)(v302 + 2616);
    v305 = *(WTF::StringImpl **)(v302 + 1440);
    if (v305)
      *(_DWORD *)v305 += 2;
    v445 = v305;
    v306 = JSC::createBuiltinExecutable();
    if (v306)
    {
      v401 = v306;
      if ((v306 & 8) != 0)
        v307 = (v306 - 112) | 1;
      else
        v307 = v306 & 0xFFFFFFFFFFFFC000;
      v356 = v302 + 976;
      if ((v307 & 1) != 0)
        v357 = v307 + 47;
      else
        v357 = *(_QWORD *)v307 + 32;
      v306 = *(_QWORD *)(v357 + 16);
      if (!v306)
        v306 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v357 + 16) = *(_QWORD *)v306;
      *(_QWORD *)v306 = v401;
      *(_QWORD *)(v306 + 8) = v356;
      *(_QWORD *)(v306 + 16) = v304;
    }
    v308 = *v304;
    *v304 = v306;
    if (v308)
      *(_QWORD *)(v308 + 8) = 3;
    if (v445)
    {
      if (*(_DWORD *)v445 == 2)
        WTF::StringImpl::destroy(v445, (WTF::StringImpl *)v307);
      else
        *(_DWORD *)v445 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  result = JSC::JSFunction::create();
  *((_QWORD *)this + 29) = result;
  if (result)
  {
    if (*(_DWORD *)(v301 + 760) >= *((unsigned __int8 *)a2 + 7))
      return JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v301 + 192), a2);
  }
  return result;
}

uint64_t WebCore::WritableStreamInternalsBuiltinFunctions::init(WebCore::WritableStreamInternalsBuiltinFunctions *this, const JSCell *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  WTF::StringImpl *v8;
  uint64_t BuiltinExecutable;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  WTF::StringImpl *v17;
  uint64_t Allocator;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t *v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t *v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t *v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t *v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t *v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t *v142;
  WTF::StringImpl *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t *v151;
  WTF::StringImpl *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t *v160;
  WTF::StringImpl *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t *v169;
  WTF::StringImpl *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t *v178;
  WTF::StringImpl *v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t *v187;
  WTF::StringImpl *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t *v196;
  WTF::StringImpl *v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t *v205;
  WTF::StringImpl *v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t *v214;
  WTF::StringImpl *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t *v223;
  WTF::StringImpl *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t *v232;
  WTF::StringImpl *v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t *v241;
  WTF::StringImpl *v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t *v250;
  WTF::StringImpl *v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t *v259;
  WTF::StringImpl *v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t *v268;
  WTF::StringImpl *v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t *v277;
  WTF::StringImpl *v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t *v286;
  WTF::StringImpl *v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t *v295;
  WTF::StringImpl *v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  _QWORD *v303;
  uint64_t *v304;
  WTF::StringImpl *v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t *v313;
  WTF::StringImpl *v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  _QWORD *v321;
  uint64_t *v322;
  WTF::StringImpl *v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  _QWORD *v330;
  uint64_t *v331;
  WTF::StringImpl *v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  _QWORD *v339;
  uint64_t *v340;
  WTF::StringImpl *v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  _QWORD *v348;
  uint64_t *v349;
  WTF::StringImpl *v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  _QWORD *v357;
  uint64_t *v358;
  WTF::StringImpl *v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t *v367;
  WTF::StringImpl *v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  _QWORD *v375;
  uint64_t *v376;
  WTF::StringImpl *v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  _QWORD *v384;
  uint64_t *v385;
  WTF::StringImpl *v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  uint64_t *v394;
  WTF::StringImpl *v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  _QWORD *v402;
  uint64_t *v403;
  WTF::StringImpl *v404;
  uint64_t v405;
  unint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  _QWORD *v411;
  uint64_t *v412;
  WTF::StringImpl *v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  _QWORD *v420;
  uint64_t *v421;
  WTF::StringImpl *v422;
  uint64_t v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  _QWORD *v429;
  uint64_t *v430;
  WTF::StringImpl *v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  _QWORD *v438;
  uint64_t *v439;
  WTF::StringImpl *v440;
  uint64_t v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t result;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  WTF::StringImpl *v592;
  WTF::StringImpl *v593;
  WTF::StringImpl *v594;
  WTF::StringImpl *v595;
  WTF::StringImpl *v596;
  WTF::StringImpl *v597;
  WTF::StringImpl *v598;
  WTF::StringImpl *v599;
  WTF::StringImpl *v600;
  WTF::StringImpl *v601;
  WTF::StringImpl *v602;
  WTF::StringImpl *v603;
  WTF::StringImpl *v604;
  WTF::StringImpl *v605;
  WTF::StringImpl *v606;
  WTF::StringImpl *v607;
  WTF::StringImpl *v608;
  WTF::StringImpl *v609;
  WTF::StringImpl *v610;
  WTF::StringImpl *v611;
  WTF::StringImpl *v612;
  WTF::StringImpl *v613;
  WTF::StringImpl *v614;
  WTF::StringImpl *v615;
  WTF::StringImpl *v616;
  WTF::StringImpl *v617;
  WTF::StringImpl *v618;
  WTF::StringImpl *v619;
  WTF::StringImpl *v620;
  WTF::StringImpl *v621;
  WTF::StringImpl *v622;
  WTF::StringImpl *v623;
  WTF::StringImpl *v624;
  WTF::StringImpl *v625;
  WTF::StringImpl *v626;
  WTF::StringImpl *v627;
  WTF::StringImpl *v628;
  WTF::StringImpl *v629;
  WTF::StringImpl *v630;
  WTF::StringImpl *v631;
  WTF::StringImpl *v632;
  WTF::StringImpl *v633;
  WTF::StringImpl *v634;
  WTF::StringImpl *v635;
  WTF::StringImpl *v636;
  WTF::StringImpl *v637;
  WTF::StringImpl *v638;
  WTF::StringImpl *v639;
  WTF::StringImpl *v640;

  v4 = *(_QWORD *)this;
  v5 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v6 = *(_QWORD **)(v5 + 9368);
  if (!v6 || !*v6 || (v6[1] & 3) != 0)
  {
    v7 = (uint64_t *)(v5 + 9368);
    v8 = *(WTF::StringImpl **)(v5 + 8640);
    if (v8)
      *(_DWORD *)v8 += 2;
    v592 = v8;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v535 = BuiltinExecutable;
      v584 = v5;
      if ((BuiltinExecutable & 8) != 0)
        v10 = (BuiltinExecutable - 112) | 1;
      else
        v10 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v486 = v10 + 47;
      else
        v486 = *(_QWORD *)v10 + 32;
      BuiltinExecutable = *(_QWORD *)(v486 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v486 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v535;
      *(_QWORD *)(BuiltinExecutable + 8) = v584 + 8544;
      *(_QWORD *)(BuiltinExecutable + 16) = v7;
    }
    v11 = *v7;
    *v7 = BuiltinExecutable;
    if (v11)
      *(_QWORD *)(v11 + 8) = 3;
    if (v592)
    {
      if (*(_DWORD *)v592 == 2)
        WTF::StringImpl::destroy(v592, (WTF::StringImpl *)v10);
      else
        *(_DWORD *)v592 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v12 = JSC::JSFunction::create();
  *((_QWORD *)this + 6) = v12;
  if (v12 && *(_DWORD *)(v4 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v4 + 192), a2);
  v13 = *(_QWORD *)this;
  v14 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v15 = *(_QWORD **)(v14 + 9400);
  if (!v15 || !*v15 || (v15[1] & 3) != 0)
  {
    v16 = (uint64_t *)(v14 + 9400);
    v17 = *(WTF::StringImpl **)(v14 + 8656);
    if (v17)
      *(_DWORD *)v17 += 2;
    v593 = v17;
    Allocator = JSC::createBuiltinExecutable();
    if (Allocator)
    {
      v494 = Allocator;
      v543 = v14;
      if ((Allocator & 8) != 0)
        v19 = (Allocator - 112) | 1;
      else
        v19 = Allocator & 0xFFFFFFFFFFFFC000;
      if ((v19 & 1) != 0)
        v445 = v19 + 47;
      else
        v445 = *(_QWORD *)v19 + 32;
      Allocator = *(_QWORD *)(v445 + 16);
      if (!Allocator)
        Allocator = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v445 + 16) = *(_QWORD *)Allocator;
      *(_QWORD *)Allocator = v494;
      *(_QWORD *)(Allocator + 8) = v543 + 8544;
      *(_QWORD *)(Allocator + 16) = v16;
    }
    v20 = *v16;
    *v16 = Allocator;
    if (v20)
      *(_QWORD *)(v20 + 8) = 3;
    if (v593)
    {
      if (*(_DWORD *)v593 == 2)
        WTF::StringImpl::destroy(v593, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)v593 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v21 = JSC::JSFunction::create();
  *((_QWORD *)this + 7) = v21;
  if (v21 && *(_DWORD *)(v13 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v13 + 192), a2);
  v22 = *(_QWORD *)this;
  v23 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v24 = *(_QWORD **)(v23 + 9432);
  if (!v24 || !*v24 || (v24[1] & 3) != 0)
  {
    v25 = (uint64_t *)(v23 + 9432);
    v26 = *(WTF::StringImpl **)(v23 + 8560);
    if (v26)
      *(_DWORD *)v26 += 2;
    v594 = v26;
    v27 = JSC::createBuiltinExecutable();
    if (v27)
    {
      v495 = v27;
      v544 = v23;
      if ((v27 & 8) != 0)
        v28 = (v27 - 112) | 1;
      else
        v28 = v27 & 0xFFFFFFFFFFFFC000;
      if ((v28 & 1) != 0)
        v446 = v28 + 47;
      else
        v446 = *(_QWORD *)v28 + 32;
      v27 = *(_QWORD *)(v446 + 16);
      if (!v27)
        v27 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v446 + 16) = *(_QWORD *)v27;
      *(_QWORD *)v27 = v495;
      *(_QWORD *)(v27 + 8) = v544 + 8544;
      *(_QWORD *)(v27 + 16) = v25;
    }
    v29 = *v25;
    *v25 = v27;
    if (v29)
      *(_QWORD *)(v29 + 8) = 3;
    if (v594)
    {
      if (*(_DWORD *)v594 == 2)
        WTF::StringImpl::destroy(v594, (WTF::StringImpl *)v28);
      else
        *(_DWORD *)v594 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v30 = JSC::JSFunction::create();
  *((_QWORD *)this + 1) = v30;
  if (v30 && *(_DWORD *)(v22 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v22 + 192), a2);
  v31 = *(_QWORD *)this;
  v32 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v33 = *(_QWORD **)(v32 + 9464);
  if (!v33 || !*v33 || (v33[1] & 3) != 0)
  {
    v34 = (uint64_t *)(v32 + 9464);
    v35 = *(WTF::StringImpl **)(v32 + 8592);
    if (v35)
      *(_DWORD *)v35 += 2;
    v595 = v35;
    v36 = JSC::createBuiltinExecutable();
    if (v36)
    {
      v536 = v36;
      v585 = v32;
      if ((v36 & 8) != 0)
        v37 = (v36 - 112) | 1;
      else
        v37 = v36 & 0xFFFFFFFFFFFFC000;
      if ((v37 & 1) != 0)
        v487 = v37 + 47;
      else
        v487 = *(_QWORD *)v37 + 32;
      v36 = *(_QWORD *)(v487 + 16);
      if (!v36)
        v36 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v487 + 16) = *(_QWORD *)v36;
      *(_QWORD *)v36 = v536;
      *(_QWORD *)(v36 + 8) = v585 + 8544;
      *(_QWORD *)(v36 + 16) = v34;
    }
    v38 = *v34;
    *v34 = v36;
    if (v38)
      *(_QWORD *)(v38 + 8) = 3;
    if (v595)
    {
      if (*(_DWORD *)v595 == 2)
        WTF::StringImpl::destroy(v595, (WTF::StringImpl *)v37);
      else
        *(_DWORD *)v595 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v39 = JSC::JSFunction::create();
  *((_QWORD *)this + 3) = v39;
  if (v39 && *(_DWORD *)(v31 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v31 + 192), a2);
  v40 = *(_QWORD *)this;
  v41 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v42 = *(_QWORD **)(v41 + 9496);
  if (!v42 || !*v42 || (v42[1] & 3) != 0)
  {
    v43 = (uint64_t *)(v41 + 9496);
    v44 = *(WTF::StringImpl **)(v41 + 8576);
    if (v44)
      *(_DWORD *)v44 += 2;
    v596 = v44;
    v45 = JSC::createBuiltinExecutable();
    if (v45)
    {
      v496 = v45;
      v545 = v41;
      if ((v45 & 8) != 0)
        v46 = (v45 - 112) | 1;
      else
        v46 = v45 & 0xFFFFFFFFFFFFC000;
      if ((v46 & 1) != 0)
        v447 = v46 + 47;
      else
        v447 = *(_QWORD *)v46 + 32;
      v45 = *(_QWORD *)(v447 + 16);
      if (!v45)
        v45 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v447 + 16) = *(_QWORD *)v45;
      *(_QWORD *)v45 = v496;
      *(_QWORD *)(v45 + 8) = v545 + 8544;
      *(_QWORD *)(v45 + 16) = v43;
    }
    v47 = *v43;
    *v43 = v45;
    if (v47)
      *(_QWORD *)(v47 + 8) = 3;
    if (v596)
    {
      if (*(_DWORD *)v596 == 2)
        WTF::StringImpl::destroy(v596, (WTF::StringImpl *)v46);
      else
        *(_DWORD *)v596 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v48 = JSC::JSFunction::create();
  *((_QWORD *)this + 2) = v48;
  if (v48 && *(_DWORD *)(v40 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v40 + 192), a2);
  v49 = *(_QWORD *)this;
  v50 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v51 = *(_QWORD **)(v50 + 9528);
  if (!v51 || !*v51 || (v51[1] & 3) != 0)
  {
    v52 = (uint64_t *)(v50 + 9528);
    v53 = *(WTF::StringImpl **)(v50 + 8608);
    if (v53)
      *(_DWORD *)v53 += 2;
    v597 = v53;
    v54 = JSC::createBuiltinExecutable();
    if (v54)
    {
      v497 = v54;
      v546 = v50;
      if ((v54 & 8) != 0)
        v55 = (v54 - 112) | 1;
      else
        v55 = v54 & 0xFFFFFFFFFFFFC000;
      if ((v55 & 1) != 0)
        v448 = v55 + 47;
      else
        v448 = *(_QWORD *)v55 + 32;
      v54 = *(_QWORD *)(v448 + 16);
      if (!v54)
        v54 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v448 + 16) = *(_QWORD *)v54;
      *(_QWORD *)v54 = v497;
      *(_QWORD *)(v54 + 8) = v546 + 8544;
      *(_QWORD *)(v54 + 16) = v52;
    }
    v56 = *v52;
    *v52 = v54;
    if (v56)
      *(_QWORD *)(v56 + 8) = 3;
    if (v597)
    {
      if (*(_DWORD *)v597 == 2)
        WTF::StringImpl::destroy(v597, (WTF::StringImpl *)v55);
      else
        *(_DWORD *)v597 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v57 = JSC::JSFunction::create();
  *((_QWORD *)this + 4) = v57;
  if (v57 && *(_DWORD *)(v49 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v49 + 192), a2);
  v58 = *(_QWORD *)this;
  v59 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v60 = *(_QWORD **)(v59 + 9560);
  if (!v60 || !*v60 || (v60[1] & 3) != 0)
  {
    v61 = (uint64_t *)(v59 + 9560);
    v62 = *(WTF::StringImpl **)(v59 + 8800);
    if (v62)
      *(_DWORD *)v62 += 2;
    v598 = v62;
    v63 = JSC::createBuiltinExecutable();
    if (v63)
    {
      v498 = v63;
      v547 = v59;
      if ((v63 & 8) != 0)
        v64 = (v63 - 112) | 1;
      else
        v64 = v63 & 0xFFFFFFFFFFFFC000;
      if ((v64 & 1) != 0)
        v449 = v64 + 47;
      else
        v449 = *(_QWORD *)v64 + 32;
      v63 = *(_QWORD *)(v449 + 16);
      if (!v63)
        v63 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v449 + 16) = *(_QWORD *)v63;
      *(_QWORD *)v63 = v498;
      *(_QWORD *)(v63 + 8) = v547 + 8544;
      *(_QWORD *)(v63 + 16) = v61;
    }
    v65 = *v61;
    *v61 = v63;
    if (v65)
      *(_QWORD *)(v65 + 8) = 3;
    if (v598)
    {
      if (*(_DWORD *)v598 == 2)
        WTF::StringImpl::destroy(v598, (WTF::StringImpl *)v64);
      else
        *(_DWORD *)v598 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v66 = JSC::JSFunction::create();
  *((_QWORD *)this + 16) = v66;
  if (v66 && *(_DWORD *)(v58 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v58 + 192), a2);
  v67 = *(_QWORD *)this;
  v68 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v69 = *(_QWORD **)(v68 + 9592);
  if (!v69 || !*v69 || (v69[1] & 3) != 0)
  {
    v70 = (uint64_t *)(v68 + 9592);
    v71 = *(WTF::StringImpl **)(v68 + 8752);
    if (v71)
      *(_DWORD *)v71 += 2;
    v599 = v71;
    v72 = JSC::createBuiltinExecutable();
    if (v72)
    {
      v499 = v72;
      v548 = v68;
      if ((v72 & 8) != 0)
        v73 = (v72 - 112) | 1;
      else
        v73 = v72 & 0xFFFFFFFFFFFFC000;
      if ((v73 & 1) != 0)
        v450 = v73 + 47;
      else
        v450 = *(_QWORD *)v73 + 32;
      v72 = *(_QWORD *)(v450 + 16);
      if (!v72)
        v72 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v450 + 16) = *(_QWORD *)v72;
      *(_QWORD *)v72 = v499;
      *(_QWORD *)(v72 + 8) = v548 + 8544;
      *(_QWORD *)(v72 + 16) = v70;
    }
    v74 = *v70;
    *v70 = v72;
    if (v74)
      *(_QWORD *)(v74 + 8) = 3;
    if (v599)
    {
      if (*(_DWORD *)v599 == 2)
        WTF::StringImpl::destroy(v599, (WTF::StringImpl *)v73);
      else
        *(_DWORD *)v599 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v75 = JSC::JSFunction::create();
  *((_QWORD *)this + 13) = v75;
  if (v75 && *(_DWORD *)(v67 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v67 + 192), a2);
  v76 = *(_QWORD *)this;
  v77 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v78 = *(_QWORD **)(v77 + 9624);
  if (!v78 || !*v78 || (v78[1] & 3) != 0)
  {
    v79 = (uint64_t *)(v77 + 9624);
    v80 = *(WTF::StringImpl **)(v77 + 8672);
    if (v80)
      *(_DWORD *)v80 += 2;
    v600 = v80;
    v81 = JSC::createBuiltinExecutable();
    if (v81)
    {
      v537 = v81;
      v586 = v77;
      if ((v81 & 8) != 0)
        v82 = (v81 - 112) | 1;
      else
        v82 = v81 & 0xFFFFFFFFFFFFC000;
      if ((v82 & 1) != 0)
        v488 = v82 + 47;
      else
        v488 = *(_QWORD *)v82 + 32;
      v81 = *(_QWORD *)(v488 + 16);
      if (!v81)
        v81 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v488 + 16) = *(_QWORD *)v81;
      *(_QWORD *)v81 = v537;
      *(_QWORD *)(v81 + 8) = v586 + 8544;
      *(_QWORD *)(v81 + 16) = v79;
    }
    v83 = *v79;
    *v79 = v81;
    if (v83)
      *(_QWORD *)(v83 + 8) = 3;
    if (v600)
    {
      if (*(_DWORD *)v600 == 2)
        WTF::StringImpl::destroy(v600, (WTF::StringImpl *)v82);
      else
        *(_DWORD *)v600 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v84 = JSC::JSFunction::create();
  *((_QWORD *)this + 8) = v84;
  if (v84 && *(_DWORD *)(v76 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v76 + 192), a2);
  v85 = *(_QWORD *)this;
  v86 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v87 = *(_QWORD **)(v86 + 9656);
  if (!v87 || !*v87 || (v87[1] & 3) != 0)
  {
    v88 = (uint64_t *)(v86 + 9656);
    v89 = *(WTF::StringImpl **)(v86 + 8720);
    if (v89)
      *(_DWORD *)v89 += 2;
    v601 = v89;
    v90 = JSC::createBuiltinExecutable();
    if (v90)
    {
      v500 = v90;
      v549 = v86;
      if ((v90 & 8) != 0)
        v91 = (v90 - 112) | 1;
      else
        v91 = v90 & 0xFFFFFFFFFFFFC000;
      if ((v91 & 1) != 0)
        v451 = v91 + 47;
      else
        v451 = *(_QWORD *)v91 + 32;
      v90 = *(_QWORD *)(v451 + 16);
      if (!v90)
        v90 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v451 + 16) = *(_QWORD *)v90;
      *(_QWORD *)v90 = v500;
      *(_QWORD *)(v90 + 8) = v549 + 8544;
      *(_QWORD *)(v90 + 16) = v88;
    }
    v92 = *v88;
    *v88 = v90;
    if (v92)
      *(_QWORD *)(v92 + 8) = 3;
    if (v601)
    {
      if (*(_DWORD *)v601 == 2)
        WTF::StringImpl::destroy(v601, (WTF::StringImpl *)v91);
      else
        *(_DWORD *)v601 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v93 = JSC::JSFunction::create();
  *((_QWORD *)this + 11) = v93;
  if (v93 && *(_DWORD *)(v85 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v85 + 192), a2);
  v94 = *(_QWORD *)this;
  v95 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v96 = *(_QWORD **)(v95 + 9688);
  if (!v96 || !*v96 || (v96[1] & 3) != 0)
  {
    v97 = (uint64_t *)(v95 + 9688);
    v98 = *(WTF::StringImpl **)(v95 + 8736);
    if (v98)
      *(_DWORD *)v98 += 2;
    v602 = v98;
    v99 = JSC::createBuiltinExecutable();
    if (v99)
    {
      v501 = v99;
      v550 = v95;
      if ((v99 & 8) != 0)
        v100 = (v99 - 112) | 1;
      else
        v100 = v99 & 0xFFFFFFFFFFFFC000;
      if ((v100 & 1) != 0)
        v452 = v100 + 47;
      else
        v452 = *(_QWORD *)v100 + 32;
      v99 = *(_QWORD *)(v452 + 16);
      if (!v99)
        v99 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v452 + 16) = *(_QWORD *)v99;
      *(_QWORD *)v99 = v501;
      *(_QWORD *)(v99 + 8) = v550 + 8544;
      *(_QWORD *)(v99 + 16) = v97;
    }
    v101 = *v97;
    *v97 = v99;
    if (v101)
      *(_QWORD *)(v101 + 8) = 3;
    if (v602)
    {
      if (*(_DWORD *)v602 == 2)
        WTF::StringImpl::destroy(v602, (WTF::StringImpl *)v100);
      else
        *(_DWORD *)v602 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v102 = JSC::JSFunction::create();
  *((_QWORD *)this + 12) = v102;
  if (v102 && *(_DWORD *)(v94 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v94 + 192), a2);
  v103 = *(_QWORD *)this;
  v104 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v105 = *(_QWORD **)(v104 + 9720);
  if (!v105 || !*v105 || (v105[1] & 3) != 0)
  {
    v106 = (uint64_t *)(v104 + 9720);
    v107 = *(WTF::StringImpl **)(v104 + 8816);
    if (v107)
      *(_DWORD *)v107 += 2;
    v603 = v107;
    v108 = JSC::createBuiltinExecutable();
    if (v108)
    {
      v502 = v108;
      v551 = v104;
      if ((v108 & 8) != 0)
        v109 = (v108 - 112) | 1;
      else
        v109 = v108 & 0xFFFFFFFFFFFFC000;
      if ((v109 & 1) != 0)
        v453 = v109 + 47;
      else
        v453 = *(_QWORD *)v109 + 32;
      v108 = *(_QWORD *)(v453 + 16);
      if (!v108)
        v108 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v453 + 16) = *(_QWORD *)v108;
      *(_QWORD *)v108 = v502;
      *(_QWORD *)(v108 + 8) = v551 + 8544;
      *(_QWORD *)(v108 + 16) = v106;
    }
    v110 = *v106;
    *v106 = v108;
    if (v110)
      *(_QWORD *)(v110 + 8) = 3;
    if (v603)
    {
      if (*(_DWORD *)v603 == 2)
        WTF::StringImpl::destroy(v603, (WTF::StringImpl *)v109);
      else
        *(_DWORD *)v603 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v111 = JSC::JSFunction::create();
  *((_QWORD *)this + 17) = v111;
  if (v111 && *(_DWORD *)(v103 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v103 + 192), a2);
  v112 = *(_QWORD *)this;
  v113 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v114 = *(_QWORD **)(v113 + 9752);
  if (!v114 || !*v114 || (v114[1] & 3) != 0)
  {
    v115 = (uint64_t *)(v113 + 9752);
    v116 = *(WTF::StringImpl **)(v113 + 8784);
    if (v116)
      *(_DWORD *)v116 += 2;
    v604 = v116;
    v117 = JSC::createBuiltinExecutable();
    if (v117)
    {
      v503 = v117;
      v552 = v113;
      if ((v117 & 8) != 0)
        v118 = (v117 - 112) | 1;
      else
        v118 = v117 & 0xFFFFFFFFFFFFC000;
      if ((v118 & 1) != 0)
        v454 = v118 + 47;
      else
        v454 = *(_QWORD *)v118 + 32;
      v117 = *(_QWORD *)(v454 + 16);
      if (!v117)
        v117 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v454 + 16) = *(_QWORD *)v117;
      *(_QWORD *)v117 = v503;
      *(_QWORD *)(v117 + 8) = v552 + 8544;
      *(_QWORD *)(v117 + 16) = v115;
    }
    v119 = *v115;
    *v115 = v117;
    if (v119)
      *(_QWORD *)(v119 + 8) = 3;
    if (v604)
    {
      if (*(_DWORD *)v604 == 2)
        WTF::StringImpl::destroy(v604, (WTF::StringImpl *)v118);
      else
        *(_DWORD *)v604 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v120 = JSC::JSFunction::create();
  *((_QWORD *)this + 15) = v120;
  if (v120 && *(_DWORD *)(v112 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v112 + 192), a2);
  v121 = *(_QWORD *)this;
  v122 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v123 = *(_QWORD **)(v122 + 9784);
  if (!v123 || !*v123 || (v123[1] & 3) != 0)
  {
    v124 = (uint64_t *)(v122 + 9784);
    v125 = *(WTF::StringImpl **)(v122 + 8768);
    if (v125)
      *(_DWORD *)v125 += 2;
    v605 = v125;
    v126 = JSC::createBuiltinExecutable();
    if (v126)
    {
      v538 = v126;
      v587 = v122;
      if ((v126 & 8) != 0)
        v127 = (v126 - 112) | 1;
      else
        v127 = v126 & 0xFFFFFFFFFFFFC000;
      if ((v127 & 1) != 0)
        v489 = v127 + 47;
      else
        v489 = *(_QWORD *)v127 + 32;
      v126 = *(_QWORD *)(v489 + 16);
      if (!v126)
        v126 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v489 + 16) = *(_QWORD *)v126;
      *(_QWORD *)v126 = v538;
      *(_QWORD *)(v126 + 8) = v587 + 8544;
      *(_QWORD *)(v126 + 16) = v124;
    }
    v128 = *v124;
    *v124 = v126;
    if (v128)
      *(_QWORD *)(v128 + 8) = 3;
    if (v605)
    {
      if (*(_DWORD *)v605 == 2)
        WTF::StringImpl::destroy(v605, (WTF::StringImpl *)v127);
      else
        *(_DWORD *)v605 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v129 = JSC::JSFunction::create();
  *((_QWORD *)this + 14) = v129;
  if (v129 && *(_DWORD *)(v121 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v121 + 192), a2);
  v130 = *(_QWORD *)this;
  v131 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v132 = *(_QWORD **)(v131 + 9816);
  if (!v132 || !*v132 || (v132[1] & 3) != 0)
  {
    v133 = (uint64_t *)(v131 + 9816);
    v134 = *(WTF::StringImpl **)(v131 + 8832);
    if (v134)
      *(_DWORD *)v134 += 2;
    v606 = v134;
    v135 = JSC::createBuiltinExecutable();
    if (v135)
    {
      v504 = v135;
      v553 = v131;
      if ((v135 & 8) != 0)
        v136 = (v135 - 112) | 1;
      else
        v136 = v135 & 0xFFFFFFFFFFFFC000;
      if ((v136 & 1) != 0)
        v455 = v136 + 47;
      else
        v455 = *(_QWORD *)v136 + 32;
      v135 = *(_QWORD *)(v455 + 16);
      if (!v135)
        v135 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v455 + 16) = *(_QWORD *)v135;
      *(_QWORD *)v135 = v504;
      *(_QWORD *)(v135 + 8) = v553 + 8544;
      *(_QWORD *)(v135 + 16) = v133;
    }
    v137 = *v133;
    *v133 = v135;
    if (v137)
      *(_QWORD *)(v137 + 8) = 3;
    if (v606)
    {
      if (*(_DWORD *)v606 == 2)
        WTF::StringImpl::destroy(v606, (WTF::StringImpl *)v136);
      else
        *(_DWORD *)v606 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v138 = JSC::JSFunction::create();
  *((_QWORD *)this + 18) = v138;
  if (v138 && *(_DWORD *)(v130 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v130 + 192), a2);
  v139 = *(_QWORD *)this;
  v140 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v141 = *(_QWORD **)(v140 + 9848);
  if (!v141 || !*v141 || (v141[1] & 3) != 0)
  {
    v142 = (uint64_t *)(v140 + 9848);
    v143 = *(WTF::StringImpl **)(v140 + 8848);
    if (v143)
      *(_DWORD *)v143 += 2;
    v607 = v143;
    v144 = JSC::createBuiltinExecutable();
    if (v144)
    {
      v505 = v144;
      v554 = v140;
      if ((v144 & 8) != 0)
        v145 = (v144 - 112) | 1;
      else
        v145 = v144 & 0xFFFFFFFFFFFFC000;
      if ((v145 & 1) != 0)
        v456 = v145 + 47;
      else
        v456 = *(_QWORD *)v145 + 32;
      v144 = *(_QWORD *)(v456 + 16);
      if (!v144)
        v144 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v456 + 16) = *(_QWORD *)v144;
      *(_QWORD *)v144 = v505;
      *(_QWORD *)(v144 + 8) = v554 + 8544;
      *(_QWORD *)(v144 + 16) = v142;
    }
    v146 = *v142;
    *v142 = v144;
    if (v146)
      *(_QWORD *)(v146 + 8) = 3;
    if (v607)
    {
      if (*(_DWORD *)v607 == 2)
        WTF::StringImpl::destroy(v607, (WTF::StringImpl *)v145);
      else
        *(_DWORD *)v607 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v147 = JSC::JSFunction::create();
  *((_QWORD *)this + 19) = v147;
  if (v147 && *(_DWORD *)(v139 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v139 + 192), a2);
  v148 = *(_QWORD *)this;
  v149 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v150 = *(_QWORD **)(v149 + 9880);
  if (!v150 || !*v150 || (v150[1] & 3) != 0)
  {
    v151 = (uint64_t *)(v149 + 9880);
    v152 = *(WTF::StringImpl **)(v149 + 9168);
    if (v152)
      *(_DWORD *)v152 += 2;
    v608 = v152;
    v153 = JSC::createBuiltinExecutable();
    if (v153)
    {
      v506 = v153;
      v555 = v149;
      if ((v153 & 8) != 0)
        v154 = (v153 - 112) | 1;
      else
        v154 = v153 & 0xFFFFFFFFFFFFC000;
      if ((v154 & 1) != 0)
        v457 = v154 + 47;
      else
        v457 = *(_QWORD *)v154 + 32;
      v153 = *(_QWORD *)(v457 + 16);
      if (!v153)
        v153 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v457 + 16) = *(_QWORD *)v153;
      *(_QWORD *)v153 = v506;
      *(_QWORD *)(v153 + 8) = v555 + 8544;
      *(_QWORD *)(v153 + 16) = v151;
    }
    v155 = *v151;
    *v151 = v153;
    if (v155)
      *(_QWORD *)(v155 + 8) = 3;
    if (v608)
    {
      if (*(_DWORD *)v608 == 2)
        WTF::StringImpl::destroy(v608, (WTF::StringImpl *)v154);
      else
        *(_DWORD *)v608 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v156 = JSC::JSFunction::create();
  *((_QWORD *)this + 39) = v156;
  if (v156 && *(_DWORD *)(v148 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v148 + 192), a2);
  v157 = *(_QWORD *)this;
  v158 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v159 = *(_QWORD **)(v158 + 9912);
  if (!v159 || !*v159 || (v159[1] & 3) != 0)
  {
    v160 = (uint64_t *)(v158 + 9912);
    v161 = *(WTF::StringImpl **)(v158 + 9184);
    if (v161)
      *(_DWORD *)v161 += 2;
    v609 = v161;
    v162 = JSC::createBuiltinExecutable();
    if (v162)
    {
      v507 = v162;
      v556 = v158;
      if ((v162 & 8) != 0)
        v163 = (v162 - 112) | 1;
      else
        v163 = v162 & 0xFFFFFFFFFFFFC000;
      if ((v163 & 1) != 0)
        v458 = v163 + 47;
      else
        v458 = *(_QWORD *)v163 + 32;
      v162 = *(_QWORD *)(v458 + 16);
      if (!v162)
        v162 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v458 + 16) = *(_QWORD *)v162;
      *(_QWORD *)v162 = v507;
      *(_QWORD *)(v162 + 8) = v556 + 8544;
      *(_QWORD *)(v162 + 16) = v160;
    }
    v164 = *v160;
    *v160 = v162;
    if (v164)
      *(_QWORD *)(v164 + 8) = 3;
    if (v609)
    {
      if (*(_DWORD *)v609 == 2)
        WTF::StringImpl::destroy(v609, (WTF::StringImpl *)v163);
      else
        *(_DWORD *)v609 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v165 = JSC::JSFunction::create();
  *((_QWORD *)this + 40) = v165;
  if (v165 && *(_DWORD *)(v157 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v157 + 192), a2);
  v166 = *(_QWORD *)this;
  v167 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v168 = *(_QWORD **)(v167 + 9944);
  if (!v168 || !*v168 || (v168[1] & 3) != 0)
  {
    v169 = (uint64_t *)(v167 + 9944);
    v170 = *(WTF::StringImpl **)(v167 + 9200);
    if (v170)
      *(_DWORD *)v170 += 2;
    v610 = v170;
    v171 = JSC::createBuiltinExecutable();
    if (v171)
    {
      v508 = v171;
      v557 = v167;
      if ((v171 & 8) != 0)
        v172 = (v171 - 112) | 1;
      else
        v172 = v171 & 0xFFFFFFFFFFFFC000;
      if ((v172 & 1) != 0)
        v459 = v172 + 47;
      else
        v459 = *(_QWORD *)v172 + 32;
      v171 = *(_QWORD *)(v459 + 16);
      if (!v171)
        v171 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v459 + 16) = *(_QWORD *)v171;
      *(_QWORD *)v171 = v508;
      *(_QWORD *)(v171 + 8) = v557 + 8544;
      *(_QWORD *)(v171 + 16) = v169;
    }
    v173 = *v169;
    *v169 = v171;
    if (v173)
      *(_QWORD *)(v173 + 8) = 3;
    if (v610)
    {
      if (*(_DWORD *)v610 == 2)
        WTF::StringImpl::destroy(v610, (WTF::StringImpl *)v172);
      else
        *(_DWORD *)v610 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v174 = JSC::JSFunction::create();
  *((_QWORD *)this + 41) = v174;
  if (v174 && *(_DWORD *)(v166 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v166 + 192), a2);
  v175 = *(_QWORD *)this;
  v176 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v177 = *(_QWORD **)(v176 + 9976);
  if (!v177 || !*v177 || (v177[1] & 3) != 0)
  {
    v178 = (uint64_t *)(v176 + 9976);
    v179 = *(WTF::StringImpl **)(v176 + 9216);
    if (v179)
      *(_DWORD *)v179 += 2;
    v611 = v179;
    v180 = JSC::createBuiltinExecutable();
    if (v180)
    {
      v509 = v180;
      v558 = v176;
      if ((v180 & 8) != 0)
        v181 = (v180 - 112) | 1;
      else
        v181 = v180 & 0xFFFFFFFFFFFFC000;
      if ((v181 & 1) != 0)
        v460 = v181 + 47;
      else
        v460 = *(_QWORD *)v181 + 32;
      v180 = *(_QWORD *)(v460 + 16);
      if (!v180)
        v180 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v460 + 16) = *(_QWORD *)v180;
      *(_QWORD *)v180 = v509;
      *(_QWORD *)(v180 + 8) = v558 + 8544;
      *(_QWORD *)(v180 + 16) = v178;
    }
    v182 = *v178;
    *v178 = v180;
    if (v182)
      *(_QWORD *)(v182 + 8) = 3;
    if (v611)
    {
      if (*(_DWORD *)v611 == 2)
        WTF::StringImpl::destroy(v611, (WTF::StringImpl *)v181);
      else
        *(_DWORD *)v611 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v183 = JSC::JSFunction::create();
  *((_QWORD *)this + 42) = v183;
  if (v183 && *(_DWORD *)(v175 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v175 + 192), a2);
  v184 = *(_QWORD *)this;
  v185 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v186 = *(_QWORD **)(v185 + 10008);
  if (!v186 || !*v186 || (v186[1] & 3) != 0)
  {
    v187 = (uint64_t *)(v185 + 10008);
    v188 = *(WTF::StringImpl **)(v185 + 9232);
    if (v188)
      *(_DWORD *)v188 += 2;
    v612 = v188;
    v189 = JSC::createBuiltinExecutable();
    if (v189)
    {
      v510 = v189;
      v559 = v185;
      if ((v189 & 8) != 0)
        v190 = (v189 - 112) | 1;
      else
        v190 = v189 & 0xFFFFFFFFFFFFC000;
      if ((v190 & 1) != 0)
        v461 = v190 + 47;
      else
        v461 = *(_QWORD *)v190 + 32;
      v189 = *(_QWORD *)(v461 + 16);
      if (!v189)
        v189 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v461 + 16) = *(_QWORD *)v189;
      *(_QWORD *)v189 = v510;
      *(_QWORD *)(v189 + 8) = v559 + 8544;
      *(_QWORD *)(v189 + 16) = v187;
    }
    v191 = *v187;
    *v187 = v189;
    if (v191)
      *(_QWORD *)(v191 + 8) = 3;
    if (v612)
    {
      if (*(_DWORD *)v612 == 2)
        WTF::StringImpl::destroy(v612, (WTF::StringImpl *)v190);
      else
        *(_DWORD *)v612 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v192 = JSC::JSFunction::create();
  *((_QWORD *)this + 43) = v192;
  if (v192 && *(_DWORD *)(v184 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v184 + 192), a2);
  v193 = *(_QWORD *)this;
  v194 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v195 = *(_QWORD **)(v194 + 10040);
  if (!v195 || !*v195 || (v195[1] & 3) != 0)
  {
    v196 = (uint64_t *)(v194 + 10040);
    v197 = *(WTF::StringImpl **)(v194 + 9248);
    if (v197)
      *(_DWORD *)v197 += 2;
    v613 = v197;
    v198 = JSC::createBuiltinExecutable();
    if (v198)
    {
      v511 = v198;
      v560 = v194;
      if ((v198 & 8) != 0)
        v199 = (v198 - 112) | 1;
      else
        v199 = v198 & 0xFFFFFFFFFFFFC000;
      if ((v199 & 1) != 0)
        v462 = v199 + 47;
      else
        v462 = *(_QWORD *)v199 + 32;
      v198 = *(_QWORD *)(v462 + 16);
      if (!v198)
        v198 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v462 + 16) = *(_QWORD *)v198;
      *(_QWORD *)v198 = v511;
      *(_QWORD *)(v198 + 8) = v560 + 8544;
      *(_QWORD *)(v198 + 16) = v196;
    }
    v200 = *v196;
    *v196 = v198;
    if (v200)
      *(_QWORD *)(v200 + 8) = 3;
    if (v613)
    {
      if (*(_DWORD *)v613 == 2)
        WTF::StringImpl::destroy(v613, (WTF::StringImpl *)v199);
      else
        *(_DWORD *)v613 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v201 = JSC::JSFunction::create();
  *((_QWORD *)this + 44) = v201;
  if (v201 && *(_DWORD *)(v193 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v193 + 192), a2);
  v202 = *(_QWORD *)this;
  v203 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v204 = *(_QWORD **)(v203 + 10072);
  if (!v204 || !*v204 || (v204[1] & 3) != 0)
  {
    v205 = (uint64_t *)(v203 + 10072);
    v206 = *(WTF::StringImpl **)(v203 + 9264);
    if (v206)
      *(_DWORD *)v206 += 2;
    v614 = v206;
    v207 = JSC::createBuiltinExecutable();
    if (v207)
    {
      v512 = v207;
      v561 = v203;
      if ((v207 & 8) != 0)
        v208 = (v207 - 112) | 1;
      else
        v208 = v207 & 0xFFFFFFFFFFFFC000;
      if ((v208 & 1) != 0)
        v463 = v208 + 47;
      else
        v463 = *(_QWORD *)v208 + 32;
      v207 = *(_QWORD *)(v463 + 16);
      if (!v207)
        v207 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v463 + 16) = *(_QWORD *)v207;
      *(_QWORD *)v207 = v512;
      *(_QWORD *)(v207 + 8) = v561 + 8544;
      *(_QWORD *)(v207 + 16) = v205;
    }
    v209 = *v205;
    *v205 = v207;
    if (v209)
      *(_QWORD *)(v209 + 8) = 3;
    if (v614)
    {
      if (*(_DWORD *)v614 == 2)
        WTF::StringImpl::destroy(v614, (WTF::StringImpl *)v208);
      else
        *(_DWORD *)v614 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v210 = JSC::JSFunction::create();
  *((_QWORD *)this + 45) = v210;
  if (v210 && *(_DWORD *)(v202 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v202 + 192), a2);
  v211 = *(_QWORD *)this;
  v212 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v213 = *(_QWORD **)(v212 + 10104);
  if (!v213 || !*v213 || (v213[1] & 3) != 0)
  {
    v214 = (uint64_t *)(v212 + 10104);
    v215 = *(WTF::StringImpl **)(v212 + 9280);
    if (v215)
      *(_DWORD *)v215 += 2;
    v615 = v215;
    v216 = JSC::createBuiltinExecutable();
    if (v216)
    {
      v513 = v216;
      v562 = v212;
      if ((v216 & 8) != 0)
        v217 = (v216 - 112) | 1;
      else
        v217 = v216 & 0xFFFFFFFFFFFFC000;
      if ((v217 & 1) != 0)
        v464 = v217 + 47;
      else
        v464 = *(_QWORD *)v217 + 32;
      v216 = *(_QWORD *)(v464 + 16);
      if (!v216)
        v216 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v464 + 16) = *(_QWORD *)v216;
      *(_QWORD *)v216 = v513;
      *(_QWORD *)(v216 + 8) = v562 + 8544;
      *(_QWORD *)(v216 + 16) = v214;
    }
    v218 = *v214;
    *v214 = v216;
    if (v218)
      *(_QWORD *)(v218 + 8) = 3;
    if (v615)
    {
      if (*(_DWORD *)v615 == 2)
        WTF::StringImpl::destroy(v615, (WTF::StringImpl *)v217);
      else
        *(_DWORD *)v615 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v219 = JSC::JSFunction::create();
  *((_QWORD *)this + 46) = v219;
  if (v219 && *(_DWORD *)(v211 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v211 + 192), a2);
  v220 = *(_QWORD *)this;
  v221 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v222 = *(_QWORD **)(v221 + 10136);
  if (!v222 || !*v222 || (v222[1] & 3) != 0)
  {
    v223 = (uint64_t *)(v221 + 10136);
    v224 = *(WTF::StringImpl **)(v221 + 9296);
    if (v224)
      *(_DWORD *)v224 += 2;
    v616 = v224;
    v225 = JSC::createBuiltinExecutable();
    if (v225)
    {
      v514 = v225;
      v563 = v221;
      if ((v225 & 8) != 0)
        v226 = (v225 - 112) | 1;
      else
        v226 = v225 & 0xFFFFFFFFFFFFC000;
      if ((v226 & 1) != 0)
        v465 = v226 + 47;
      else
        v465 = *(_QWORD *)v226 + 32;
      v225 = *(_QWORD *)(v465 + 16);
      if (!v225)
        v225 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v465 + 16) = *(_QWORD *)v225;
      *(_QWORD *)v225 = v514;
      *(_QWORD *)(v225 + 8) = v563 + 8544;
      *(_QWORD *)(v225 + 16) = v223;
    }
    v227 = *v223;
    *v223 = v225;
    if (v227)
      *(_QWORD *)(v227 + 8) = 3;
    if (v616)
    {
      if (*(_DWORD *)v616 == 2)
        WTF::StringImpl::destroy(v616, (WTF::StringImpl *)v226);
      else
        *(_DWORD *)v616 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v228 = JSC::JSFunction::create();
  *((_QWORD *)this + 47) = v228;
  if (v228 && *(_DWORD *)(v220 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v220 + 192), a2);
  v229 = *(_QWORD *)this;
  v230 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v231 = *(_QWORD **)(v230 + 10168);
  if (!v231 || !*v231 || (v231[1] & 3) != 0)
  {
    v232 = (uint64_t *)(v230 + 10168);
    v233 = *(WTF::StringImpl **)(v230 + 9312);
    if (v233)
      *(_DWORD *)v233 += 2;
    v617 = v233;
    v234 = JSC::createBuiltinExecutable();
    if (v234)
    {
      v539 = v234;
      v588 = v230;
      if ((v234 & 8) != 0)
        v235 = (v234 - 112) | 1;
      else
        v235 = v234 & 0xFFFFFFFFFFFFC000;
      if ((v235 & 1) != 0)
        v490 = v235 + 47;
      else
        v490 = *(_QWORD *)v235 + 32;
      v234 = *(_QWORD *)(v490 + 16);
      if (!v234)
        v234 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v490 + 16) = *(_QWORD *)v234;
      *(_QWORD *)v234 = v539;
      *(_QWORD *)(v234 + 8) = v588 + 8544;
      *(_QWORD *)(v234 + 16) = v232;
    }
    v236 = *v232;
    *v232 = v234;
    if (v236)
      *(_QWORD *)(v236 + 8) = 3;
    if (v617)
    {
      if (*(_DWORD *)v617 == 2)
        WTF::StringImpl::destroy(v617, (WTF::StringImpl *)v235);
      else
        *(_DWORD *)v617 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v237 = JSC::JSFunction::create();
  *((_QWORD *)this + 48) = v237;
  if (v237 && *(_DWORD *)(v229 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v229 + 192), a2);
  v238 = *(_QWORD *)this;
  v239 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v240 = *(_QWORD **)(v239 + 10200);
  if (!v240 || !*v240 || (v240[1] & 3) != 0)
  {
    v241 = (uint64_t *)(v239 + 10200);
    v242 = *(WTF::StringImpl **)(v239 + 9328);
    if (v242)
      *(_DWORD *)v242 += 2;
    v618 = v242;
    v243 = JSC::createBuiltinExecutable();
    if (v243)
    {
      v515 = v243;
      v564 = v239;
      if ((v243 & 8) != 0)
        v244 = (v243 - 112) | 1;
      else
        v244 = v243 & 0xFFFFFFFFFFFFC000;
      if ((v244 & 1) != 0)
        v466 = v244 + 47;
      else
        v466 = *(_QWORD *)v244 + 32;
      v243 = *(_QWORD *)(v466 + 16);
      if (!v243)
        v243 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v466 + 16) = *(_QWORD *)v243;
      *(_QWORD *)v243 = v515;
      *(_QWORD *)(v243 + 8) = v564 + 8544;
      *(_QWORD *)(v243 + 16) = v241;
    }
    v245 = *v241;
    *v241 = v243;
    if (v245)
      *(_QWORD *)(v245 + 8) = 3;
    if (v618)
    {
      if (*(_DWORD *)v618 == 2)
        WTF::StringImpl::destroy(v618, (WTF::StringImpl *)v244);
      else
        *(_DWORD *)v618 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v246 = JSC::JSFunction::create();
  *((_QWORD *)this + 49) = v246;
  if (v246 && *(_DWORD *)(v238 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v238 + 192), a2);
  v247 = *(_QWORD *)this;
  v248 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v249 = *(_QWORD **)(v248 + 10232);
  if (!v249 || !*v249 || (v249[1] & 3) != 0)
  {
    v250 = (uint64_t *)(v248 + 10232);
    v251 = *(WTF::StringImpl **)(v248 + 9040);
    if (v251)
      *(_DWORD *)v251 += 2;
    v619 = v251;
    v252 = JSC::createBuiltinExecutable();
    if (v252)
    {
      v516 = v252;
      v565 = v248;
      if ((v252 & 8) != 0)
        v253 = (v252 - 112) | 1;
      else
        v253 = v252 & 0xFFFFFFFFFFFFC000;
      if ((v253 & 1) != 0)
        v467 = v253 + 47;
      else
        v467 = *(_QWORD *)v253 + 32;
      v252 = *(_QWORD *)(v467 + 16);
      if (!v252)
        v252 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v467 + 16) = *(_QWORD *)v252;
      *(_QWORD *)v252 = v516;
      *(_QWORD *)(v252 + 8) = v565 + 8544;
      *(_QWORD *)(v252 + 16) = v250;
    }
    v254 = *v250;
    *v250 = v252;
    if (v254)
      *(_QWORD *)(v254 + 8) = 3;
    if (v619)
    {
      if (*(_DWORD *)v619 == 2)
        WTF::StringImpl::destroy(v619, (WTF::StringImpl *)v253);
      else
        *(_DWORD *)v619 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v255 = JSC::JSFunction::create();
  *((_QWORD *)this + 31) = v255;
  if (v255 && *(_DWORD *)(v247 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v247 + 192), a2);
  v256 = *(_QWORD *)this;
  v257 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v258 = *(_QWORD **)(v257 + 10264);
  if (!v258 || !*v258 || (v258[1] & 3) != 0)
  {
    v259 = (uint64_t *)(v257 + 10264);
    v260 = *(WTF::StringImpl **)(v257 + 9056);
    if (v260)
      *(_DWORD *)v260 += 2;
    v620 = v260;
    v261 = JSC::createBuiltinExecutable();
    if (v261)
    {
      v517 = v261;
      v566 = v257;
      if ((v261 & 8) != 0)
        v262 = (v261 - 112) | 1;
      else
        v262 = v261 & 0xFFFFFFFFFFFFC000;
      if ((v262 & 1) != 0)
        v468 = v262 + 47;
      else
        v468 = *(_QWORD *)v262 + 32;
      v261 = *(_QWORD *)(v468 + 16);
      if (!v261)
        v261 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v468 + 16) = *(_QWORD *)v261;
      *(_QWORD *)v261 = v517;
      *(_QWORD *)(v261 + 8) = v566 + 8544;
      *(_QWORD *)(v261 + 16) = v259;
    }
    v263 = *v259;
    *v259 = v261;
    if (v263)
      *(_QWORD *)(v263 + 8) = 3;
    if (v620)
    {
      if (*(_DWORD *)v620 == 2)
        WTF::StringImpl::destroy(v620, (WTF::StringImpl *)v262);
      else
        *(_DWORD *)v620 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v264 = JSC::JSFunction::create();
  *((_QWORD *)this + 32) = v264;
  if (v264 && *(_DWORD *)(v256 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v256 + 192), a2);
  v265 = *(_QWORD *)this;
  v266 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v267 = *(_QWORD **)(v266 + 10296);
  if (!v267 || !*v267 || (v267[1] & 3) != 0)
  {
    v268 = (uint64_t *)(v266 + 10296);
    v269 = *(WTF::StringImpl **)(v266 + 9072);
    if (v269)
      *(_DWORD *)v269 += 2;
    v621 = v269;
    v270 = JSC::createBuiltinExecutable();
    if (v270)
    {
      v518 = v270;
      v567 = v266;
      if ((v270 & 8) != 0)
        v271 = (v270 - 112) | 1;
      else
        v271 = v270 & 0xFFFFFFFFFFFFC000;
      if ((v271 & 1) != 0)
        v469 = v271 + 47;
      else
        v469 = *(_QWORD *)v271 + 32;
      v270 = *(_QWORD *)(v469 + 16);
      if (!v270)
        v270 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v469 + 16) = *(_QWORD *)v270;
      *(_QWORD *)v270 = v518;
      *(_QWORD *)(v270 + 8) = v567 + 8544;
      *(_QWORD *)(v270 + 16) = v268;
    }
    v272 = *v268;
    *v268 = v270;
    if (v272)
      *(_QWORD *)(v272 + 8) = 3;
    if (v621)
    {
      if (*(_DWORD *)v621 == 2)
        WTF::StringImpl::destroy(v621, (WTF::StringImpl *)v271);
      else
        *(_DWORD *)v621 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v273 = JSC::JSFunction::create();
  *((_QWORD *)this + 33) = v273;
  if (v273 && *(_DWORD *)(v265 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v265 + 192), a2);
  v274 = *(_QWORD *)this;
  v275 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v276 = *(_QWORD **)(v275 + 10328);
  if (!v276 || !*v276 || (v276[1] & 3) != 0)
  {
    v277 = (uint64_t *)(v275 + 10328);
    v278 = *(WTF::StringImpl **)(v275 + 9088);
    if (v278)
      *(_DWORD *)v278 += 2;
    v622 = v278;
    v279 = JSC::createBuiltinExecutable();
    if (v279)
    {
      v519 = v279;
      v568 = v275;
      if ((v279 & 8) != 0)
        v280 = (v279 - 112) | 1;
      else
        v280 = v279 & 0xFFFFFFFFFFFFC000;
      if ((v280 & 1) != 0)
        v470 = v280 + 47;
      else
        v470 = *(_QWORD *)v280 + 32;
      v279 = *(_QWORD *)(v470 + 16);
      if (!v279)
        v279 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v470 + 16) = *(_QWORD *)v279;
      *(_QWORD *)v279 = v519;
      *(_QWORD *)(v279 + 8) = v568 + 8544;
      *(_QWORD *)(v279 + 16) = v277;
    }
    v281 = *v277;
    *v277 = v279;
    if (v281)
      *(_QWORD *)(v281 + 8) = 3;
    if (v622)
    {
      if (*(_DWORD *)v622 == 2)
        WTF::StringImpl::destroy(v622, (WTF::StringImpl *)v280);
      else
        *(_DWORD *)v622 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v282 = JSC::JSFunction::create();
  *((_QWORD *)this + 34) = v282;
  if (v282 && *(_DWORD *)(v274 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v274 + 192), a2);
  v283 = *(_QWORD *)this;
  v284 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v285 = *(_QWORD **)(v284 + 10360);
  if (!v285 || !*v285 || (v285[1] & 3) != 0)
  {
    v286 = (uint64_t *)(v284 + 10360);
    v287 = *(WTF::StringImpl **)(v284 + 9104);
    if (v287)
      *(_DWORD *)v287 += 2;
    v623 = v287;
    v288 = JSC::createBuiltinExecutable();
    if (v288)
    {
      v520 = v288;
      v569 = v284;
      if ((v288 & 8) != 0)
        v289 = (v288 - 112) | 1;
      else
        v289 = v288 & 0xFFFFFFFFFFFFC000;
      if ((v289 & 1) != 0)
        v471 = v289 + 47;
      else
        v471 = *(_QWORD *)v289 + 32;
      v288 = *(_QWORD *)(v471 + 16);
      if (!v288)
        v288 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v471 + 16) = *(_QWORD *)v288;
      *(_QWORD *)v288 = v520;
      *(_QWORD *)(v288 + 8) = v569 + 8544;
      *(_QWORD *)(v288 + 16) = v286;
    }
    v290 = *v286;
    *v286 = v288;
    if (v290)
      *(_QWORD *)(v290 + 8) = 3;
    if (v623)
    {
      if (*(_DWORD *)v623 == 2)
        WTF::StringImpl::destroy(v623, (WTF::StringImpl *)v289);
      else
        *(_DWORD *)v623 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v291 = JSC::JSFunction::create();
  *((_QWORD *)this + 35) = v291;
  if (v291 && *(_DWORD *)(v283 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v283 + 192), a2);
  v292 = *(_QWORD *)this;
  v293 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v294 = *(_QWORD **)(v293 + 10392);
  if (!v294 || !*v294 || (v294[1] & 3) != 0)
  {
    v295 = (uint64_t *)(v293 + 10392);
    v296 = *(WTF::StringImpl **)(v293 + 9120);
    if (v296)
      *(_DWORD *)v296 += 2;
    v624 = v296;
    v297 = JSC::createBuiltinExecutable();
    if (v297)
    {
      v521 = v297;
      v570 = v293;
      if ((v297 & 8) != 0)
        v298 = (v297 - 112) | 1;
      else
        v298 = v297 & 0xFFFFFFFFFFFFC000;
      if ((v298 & 1) != 0)
        v472 = v298 + 47;
      else
        v472 = *(_QWORD *)v298 + 32;
      v297 = *(_QWORD *)(v472 + 16);
      if (!v297)
        v297 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v472 + 16) = *(_QWORD *)v297;
      *(_QWORD *)v297 = v521;
      *(_QWORD *)(v297 + 8) = v570 + 8544;
      *(_QWORD *)(v297 + 16) = v295;
    }
    v299 = *v295;
    *v295 = v297;
    if (v299)
      *(_QWORD *)(v299 + 8) = 3;
    if (v624)
    {
      if (*(_DWORD *)v624 == 2)
        WTF::StringImpl::destroy(v624, (WTF::StringImpl *)v298);
      else
        *(_DWORD *)v624 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v300 = JSC::JSFunction::create();
  *((_QWORD *)this + 36) = v300;
  if (v300 && *(_DWORD *)(v292 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v292 + 192), a2);
  v301 = *(_QWORD *)this;
  v302 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v303 = *(_QWORD **)(v302 + 10424);
  if (!v303 || !*v303 || (v303[1] & 3) != 0)
  {
    v304 = (uint64_t *)(v302 + 10424);
    v305 = *(WTF::StringImpl **)(v302 + 9136);
    if (v305)
      *(_DWORD *)v305 += 2;
    v625 = v305;
    v306 = JSC::createBuiltinExecutable();
    if (v306)
    {
      v522 = v306;
      v571 = v302;
      if ((v306 & 8) != 0)
        v307 = (v306 - 112) | 1;
      else
        v307 = v306 & 0xFFFFFFFFFFFFC000;
      if ((v307 & 1) != 0)
        v473 = v307 + 47;
      else
        v473 = *(_QWORD *)v307 + 32;
      v306 = *(_QWORD *)(v473 + 16);
      if (!v306)
        v306 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v473 + 16) = *(_QWORD *)v306;
      *(_QWORD *)v306 = v522;
      *(_QWORD *)(v306 + 8) = v571 + 8544;
      *(_QWORD *)(v306 + 16) = v304;
    }
    v308 = *v304;
    *v304 = v306;
    if (v308)
      *(_QWORD *)(v308 + 8) = 3;
    if (v625)
    {
      if (*(_DWORD *)v625 == 2)
        WTF::StringImpl::destroy(v625, (WTF::StringImpl *)v307);
      else
        *(_DWORD *)v625 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v309 = JSC::JSFunction::create();
  *((_QWORD *)this + 37) = v309;
  if (v309 && *(_DWORD *)(v301 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v301 + 192), a2);
  v310 = *(_QWORD *)this;
  v311 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v312 = *(_QWORD **)(v311 + 10456);
  if (!v312 || !*v312 || (v312[1] & 3) != 0)
  {
    v313 = (uint64_t *)(v311 + 10456);
    v314 = *(WTF::StringImpl **)(v311 + 9152);
    if (v314)
      *(_DWORD *)v314 += 2;
    v626 = v314;
    v315 = JSC::createBuiltinExecutable();
    if (v315)
    {
      v523 = v315;
      v572 = v311;
      if ((v315 & 8) != 0)
        v316 = (v315 - 112) | 1;
      else
        v316 = v315 & 0xFFFFFFFFFFFFC000;
      if ((v316 & 1) != 0)
        v474 = v316 + 47;
      else
        v474 = *(_QWORD *)v316 + 32;
      v315 = *(_QWORD *)(v474 + 16);
      if (!v315)
        v315 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v474 + 16) = *(_QWORD *)v315;
      *(_QWORD *)v315 = v523;
      *(_QWORD *)(v315 + 8) = v572 + 8544;
      *(_QWORD *)(v315 + 16) = v313;
    }
    v317 = *v313;
    *v313 = v315;
    if (v317)
      *(_QWORD *)(v317 + 8) = 3;
    if (v626)
    {
      if (*(_DWORD *)v626 == 2)
        WTF::StringImpl::destroy(v626, (WTF::StringImpl *)v316);
      else
        *(_DWORD *)v626 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v318 = JSC::JSFunction::create();
  *((_QWORD *)this + 38) = v318;
  if (v318 && *(_DWORD *)(v310 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v310 + 192), a2);
  v319 = *(_QWORD *)this;
  v320 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v321 = *(_QWORD **)(v320 + 10488);
  if (!v321 || !*v321 || (v321[1] & 3) != 0)
  {
    v322 = (uint64_t *)(v320 + 10488);
    v323 = *(WTF::StringImpl **)(v320 + 8688);
    if (v323)
      *(_DWORD *)v323 += 2;
    v627 = v323;
    v324 = JSC::createBuiltinExecutable();
    if (v324)
    {
      v524 = v324;
      v573 = v320;
      if ((v324 & 8) != 0)
        v325 = (v324 - 112) | 1;
      else
        v325 = v324 & 0xFFFFFFFFFFFFC000;
      if ((v325 & 1) != 0)
        v475 = v325 + 47;
      else
        v475 = *(_QWORD *)v325 + 32;
      v324 = *(_QWORD *)(v475 + 16);
      if (!v324)
        v324 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v475 + 16) = *(_QWORD *)v324;
      *(_QWORD *)v324 = v524;
      *(_QWORD *)(v324 + 8) = v573 + 8544;
      *(_QWORD *)(v324 + 16) = v322;
    }
    v326 = *v322;
    *v322 = v324;
    if (v326)
      *(_QWORD *)(v326 + 8) = 3;
    if (v627)
    {
      if (*(_DWORD *)v627 == 2)
        WTF::StringImpl::destroy(v627, (WTF::StringImpl *)v325);
      else
        *(_DWORD *)v627 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v327 = JSC::JSFunction::create();
  *((_QWORD *)this + 9) = v327;
  if (v327 && *(_DWORD *)(v319 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v319 + 192), a2);
  v328 = *(_QWORD *)this;
  v329 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v330 = *(_QWORD **)(v329 + 10520);
  if (!v330 || !*v330 || (v330[1] & 3) != 0)
  {
    v331 = (uint64_t *)(v329 + 10520);
    v332 = *(WTF::StringImpl **)(v329 + 8704);
    if (v332)
      *(_DWORD *)v332 += 2;
    v628 = v332;
    v333 = JSC::createBuiltinExecutable();
    if (v333)
    {
      v540 = v333;
      v589 = v329;
      if ((v333 & 8) != 0)
        v334 = (v333 - 112) | 1;
      else
        v334 = v333 & 0xFFFFFFFFFFFFC000;
      if ((v334 & 1) != 0)
        v491 = v334 + 47;
      else
        v491 = *(_QWORD *)v334 + 32;
      v333 = *(_QWORD *)(v491 + 16);
      if (!v333)
        v333 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v491 + 16) = *(_QWORD *)v333;
      *(_QWORD *)v333 = v540;
      *(_QWORD *)(v333 + 8) = v589 + 8544;
      *(_QWORD *)(v333 + 16) = v331;
    }
    v335 = *v331;
    *v331 = v333;
    if (v335)
      *(_QWORD *)(v335 + 8) = 3;
    if (v628)
    {
      if (*(_DWORD *)v628 == 2)
        WTF::StringImpl::destroy(v628, (WTF::StringImpl *)v334);
      else
        *(_DWORD *)v628 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v336 = JSC::JSFunction::create();
  *((_QWORD *)this + 10) = v336;
  if (v336 && *(_DWORD *)(v328 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v328 + 192), a2);
  v337 = *(_QWORD *)this;
  v338 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v339 = *(_QWORD **)(v338 + 10552);
  if (!v339 || !*v339 || (v339[1] & 3) != 0)
  {
    v340 = (uint64_t *)(v338 + 10552);
    v341 = *(WTF::StringImpl **)(v338 + 8864);
    if (v341)
      *(_DWORD *)v341 += 2;
    v629 = v341;
    v342 = JSC::createBuiltinExecutable();
    if (v342)
    {
      v542 = v342;
      v591 = v338;
      if ((v342 & 8) != 0)
        v343 = (v342 - 112) | 1;
      else
        v343 = v342 & 0xFFFFFFFFFFFFC000;
      if ((v343 & 1) != 0)
        v493 = v343 + 47;
      else
        v493 = *(_QWORD *)v343 + 32;
      v342 = *(_QWORD *)(v493 + 16);
      if (!v342)
        v342 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v493 + 16) = *(_QWORD *)v342;
      *(_QWORD *)v342 = v542;
      *(_QWORD *)(v342 + 8) = v591 + 8544;
      *(_QWORD *)(v342 + 16) = v340;
    }
    v344 = *v340;
    *v340 = v342;
    if (v344)
      *(_QWORD *)(v344 + 8) = 3;
    if (v629)
    {
      if (*(_DWORD *)v629 == 2)
        WTF::StringImpl::destroy(v629, (WTF::StringImpl *)v343);
      else
        *(_DWORD *)v629 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v345 = JSC::JSFunction::create();
  *((_QWORD *)this + 20) = v345;
  if (v345 && *(_DWORD *)(v337 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v337 + 192), a2);
  v346 = *(_QWORD *)this;
  v347 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v348 = *(_QWORD **)(v347 + 10584);
  if (!v348 || !*v348 || (v348[1] & 3) != 0)
  {
    v349 = (uint64_t *)(v347 + 10584);
    v350 = *(WTF::StringImpl **)(v347 + 8624);
    if (v350)
      *(_DWORD *)v350 += 2;
    v630 = v350;
    v351 = JSC::createBuiltinExecutable();
    if (v351)
    {
      v525 = v351;
      v574 = v347;
      if ((v351 & 8) != 0)
        v352 = (v351 - 112) | 1;
      else
        v352 = v351 & 0xFFFFFFFFFFFFC000;
      if ((v352 & 1) != 0)
        v476 = v352 + 47;
      else
        v476 = *(_QWORD *)v352 + 32;
      v351 = *(_QWORD *)(v476 + 16);
      if (!v351)
        v351 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v476 + 16) = *(_QWORD *)v351;
      *(_QWORD *)v351 = v525;
      *(_QWORD *)(v351 + 8) = v574 + 8544;
      *(_QWORD *)(v351 + 16) = v349;
    }
    v353 = *v349;
    *v349 = v351;
    if (v353)
      *(_QWORD *)(v353 + 8) = 3;
    if (v630)
    {
      if (*(_DWORD *)v630 == 2)
        WTF::StringImpl::destroy(v630, (WTF::StringImpl *)v352);
      else
        *(_DWORD *)v630 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v354 = JSC::JSFunction::create();
  *((_QWORD *)this + 5) = v354;
  if (v354 && *(_DWORD *)(v346 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v346 + 192), a2);
  v355 = *(_QWORD *)this;
  v356 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v357 = *(_QWORD **)(v356 + 10616);
  if (!v357 || !*v357 || (v357[1] & 3) != 0)
  {
    v358 = (uint64_t *)(v356 + 10616);
    v359 = *(WTF::StringImpl **)(v356 + 8880);
    if (v359)
      *(_DWORD *)v359 += 2;
    v631 = v359;
    v360 = JSC::createBuiltinExecutable();
    if (v360)
    {
      v526 = v360;
      v575 = v356;
      if ((v360 & 8) != 0)
        v361 = (v360 - 112) | 1;
      else
        v361 = v360 & 0xFFFFFFFFFFFFC000;
      if ((v361 & 1) != 0)
        v477 = v361 + 47;
      else
        v477 = *(_QWORD *)v361 + 32;
      v360 = *(_QWORD *)(v477 + 16);
      if (!v360)
        v360 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v477 + 16) = *(_QWORD *)v360;
      *(_QWORD *)v360 = v526;
      *(_QWORD *)(v360 + 8) = v575 + 8544;
      *(_QWORD *)(v360 + 16) = v358;
    }
    v362 = *v358;
    *v358 = v360;
    if (v362)
      *(_QWORD *)(v362 + 8) = 3;
    if (v631)
    {
      if (*(_DWORD *)v631 == 2)
        WTF::StringImpl::destroy(v631, (WTF::StringImpl *)v361);
      else
        *(_DWORD *)v631 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v363 = JSC::JSFunction::create();
  *((_QWORD *)this + 21) = v363;
  if (v363 && *(_DWORD *)(v355 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v355 + 192), a2);
  v364 = *(_QWORD *)this;
  v365 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v366 = *(_QWORD **)(v365 + 10648);
  if (!v366 || !*v366 || (v366[1] & 3) != 0)
  {
    v367 = (uint64_t *)(v365 + 10648);
    v368 = *(WTF::StringImpl **)(v365 + 8896);
    if (v368)
      *(_DWORD *)v368 += 2;
    v632 = v368;
    v369 = JSC::createBuiltinExecutable();
    if (v369)
    {
      v527 = v369;
      v576 = v365;
      if ((v369 & 8) != 0)
        v370 = (v369 - 112) | 1;
      else
        v370 = v369 & 0xFFFFFFFFFFFFC000;
      if ((v370 & 1) != 0)
        v478 = v370 + 47;
      else
        v478 = *(_QWORD *)v370 + 32;
      v369 = *(_QWORD *)(v478 + 16);
      if (!v369)
        v369 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v478 + 16) = *(_QWORD *)v369;
      *(_QWORD *)v369 = v527;
      *(_QWORD *)(v369 + 8) = v576 + 8544;
      *(_QWORD *)(v369 + 16) = v367;
    }
    v371 = *v367;
    *v367 = v369;
    if (v371)
      *(_QWORD *)(v371 + 8) = 3;
    if (v632)
    {
      if (*(_DWORD *)v632 == 2)
        WTF::StringImpl::destroy(v632, (WTF::StringImpl *)v370);
      else
        *(_DWORD *)v632 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v372 = JSC::JSFunction::create();
  *((_QWORD *)this + 22) = v372;
  if (v372 && *(_DWORD *)(v364 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v364 + 192), a2);
  v373 = *(_QWORD *)this;
  v374 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v375 = *(_QWORD **)(v374 + 10680);
  if (!v375 || !*v375 || (v375[1] & 3) != 0)
  {
    v376 = (uint64_t *)(v374 + 10680);
    v377 = *(WTF::StringImpl **)(v374 + 8912);
    if (v377)
      *(_DWORD *)v377 += 2;
    v633 = v377;
    v378 = JSC::createBuiltinExecutable();
    if (v378)
    {
      v528 = v378;
      v577 = v374;
      if ((v378 & 8) != 0)
        v379 = (v378 - 112) | 1;
      else
        v379 = v378 & 0xFFFFFFFFFFFFC000;
      if ((v379 & 1) != 0)
        v479 = v379 + 47;
      else
        v479 = *(_QWORD *)v379 + 32;
      v378 = *(_QWORD *)(v479 + 16);
      if (!v378)
        v378 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v479 + 16) = *(_QWORD *)v378;
      *(_QWORD *)v378 = v528;
      *(_QWORD *)(v378 + 8) = v577 + 8544;
      *(_QWORD *)(v378 + 16) = v376;
    }
    v380 = *v376;
    *v376 = v378;
    if (v380)
      *(_QWORD *)(v380 + 8) = 3;
    if (v633)
    {
      if (*(_DWORD *)v633 == 2)
        WTF::StringImpl::destroy(v633, (WTF::StringImpl *)v379);
      else
        *(_DWORD *)v633 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v381 = JSC::JSFunction::create();
  *((_QWORD *)this + 23) = v381;
  if (v381 && *(_DWORD *)(v373 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v373 + 192), a2);
  v382 = *(_QWORD *)this;
  v383 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v384 = *(_QWORD **)(v383 + 10712);
  if (!v384 || !*v384 || (v384[1] & 3) != 0)
  {
    v385 = (uint64_t *)(v383 + 10712);
    v386 = *(WTF::StringImpl **)(v383 + 8928);
    if (v386)
      *(_DWORD *)v386 += 2;
    v634 = v386;
    v387 = JSC::createBuiltinExecutable();
    if (v387)
    {
      v529 = v387;
      v578 = v383;
      if ((v387 & 8) != 0)
        v388 = (v387 - 112) | 1;
      else
        v388 = v387 & 0xFFFFFFFFFFFFC000;
      if ((v388 & 1) != 0)
        v480 = v388 + 47;
      else
        v480 = *(_QWORD *)v388 + 32;
      v387 = *(_QWORD *)(v480 + 16);
      if (!v387)
        v387 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v480 + 16) = *(_QWORD *)v387;
      *(_QWORD *)v387 = v529;
      *(_QWORD *)(v387 + 8) = v578 + 8544;
      *(_QWORD *)(v387 + 16) = v385;
    }
    v389 = *v385;
    *v385 = v387;
    if (v389)
      *(_QWORD *)(v389 + 8) = 3;
    if (v634)
    {
      if (*(_DWORD *)v634 == 2)
        WTF::StringImpl::destroy(v634, (WTF::StringImpl *)v388);
      else
        *(_DWORD *)v634 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v390 = JSC::JSFunction::create();
  *((_QWORD *)this + 24) = v390;
  if (v390 && *(_DWORD *)(v382 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v382 + 192), a2);
  v391 = *(_QWORD *)this;
  v392 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v393 = *(_QWORD **)(v392 + 10744);
  if (!v393 || !*v393 || (v393[1] & 3) != 0)
  {
    v394 = (uint64_t *)(v392 + 10744);
    v395 = *(WTF::StringImpl **)(v392 + 8944);
    if (v395)
      *(_DWORD *)v395 += 2;
    v635 = v395;
    v396 = JSC::createBuiltinExecutable();
    if (v396)
    {
      v530 = v396;
      v579 = v392;
      if ((v396 & 8) != 0)
        v397 = (v396 - 112) | 1;
      else
        v397 = v396 & 0xFFFFFFFFFFFFC000;
      if ((v397 & 1) != 0)
        v481 = v397 + 47;
      else
        v481 = *(_QWORD *)v397 + 32;
      v396 = *(_QWORD *)(v481 + 16);
      if (!v396)
        v396 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v481 + 16) = *(_QWORD *)v396;
      *(_QWORD *)v396 = v530;
      *(_QWORD *)(v396 + 8) = v579 + 8544;
      *(_QWORD *)(v396 + 16) = v394;
    }
    v398 = *v394;
    *v394 = v396;
    if (v398)
      *(_QWORD *)(v398 + 8) = 3;
    if (v635)
    {
      if (*(_DWORD *)v635 == 2)
        WTF::StringImpl::destroy(v635, (WTF::StringImpl *)v397);
      else
        *(_DWORD *)v635 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v399 = JSC::JSFunction::create();
  *((_QWORD *)this + 25) = v399;
  if (v399 && *(_DWORD *)(v391 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v391 + 192), a2);
  v400 = *(_QWORD *)this;
  v401 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v402 = *(_QWORD **)(v401 + 10776);
  if (!v402 || !*v402 || (v402[1] & 3) != 0)
  {
    v403 = (uint64_t *)(v401 + 10776);
    v404 = *(WTF::StringImpl **)(v401 + 8960);
    if (v404)
      *(_DWORD *)v404 += 2;
    v636 = v404;
    v405 = JSC::createBuiltinExecutable();
    if (v405)
    {
      v531 = v405;
      v580 = v401;
      if ((v405 & 8) != 0)
        v406 = (v405 - 112) | 1;
      else
        v406 = v405 & 0xFFFFFFFFFFFFC000;
      if ((v406 & 1) != 0)
        v482 = v406 + 47;
      else
        v482 = *(_QWORD *)v406 + 32;
      v405 = *(_QWORD *)(v482 + 16);
      if (!v405)
        v405 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v482 + 16) = *(_QWORD *)v405;
      *(_QWORD *)v405 = v531;
      *(_QWORD *)(v405 + 8) = v580 + 8544;
      *(_QWORD *)(v405 + 16) = v403;
    }
    v407 = *v403;
    *v403 = v405;
    if (v407)
      *(_QWORD *)(v407 + 8) = 3;
    if (v636)
    {
      if (*(_DWORD *)v636 == 2)
        WTF::StringImpl::destroy(v636, (WTF::StringImpl *)v406);
      else
        *(_DWORD *)v636 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v408 = JSC::JSFunction::create();
  *((_QWORD *)this + 26) = v408;
  if (v408 && *(_DWORD *)(v400 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v400 + 192), a2);
  v409 = *(_QWORD *)this;
  v410 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v411 = *(_QWORD **)(v410 + 10808);
  if (!v411 || !*v411 || (v411[1] & 3) != 0)
  {
    v412 = (uint64_t *)(v410 + 10808);
    v413 = *(WTF::StringImpl **)(v410 + 8976);
    if (v413)
      *(_DWORD *)v413 += 2;
    v637 = v413;
    v414 = JSC::createBuiltinExecutable();
    if (v414)
    {
      v532 = v414;
      v581 = v410;
      if ((v414 & 8) != 0)
        v415 = (v414 - 112) | 1;
      else
        v415 = v414 & 0xFFFFFFFFFFFFC000;
      if ((v415 & 1) != 0)
        v483 = v415 + 47;
      else
        v483 = *(_QWORD *)v415 + 32;
      v414 = *(_QWORD *)(v483 + 16);
      if (!v414)
        v414 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v483 + 16) = *(_QWORD *)v414;
      *(_QWORD *)v414 = v532;
      *(_QWORD *)(v414 + 8) = v581 + 8544;
      *(_QWORD *)(v414 + 16) = v412;
    }
    v416 = *v412;
    *v412 = v414;
    if (v416)
      *(_QWORD *)(v416 + 8) = 3;
    if (v637)
    {
      if (*(_DWORD *)v637 == 2)
        WTF::StringImpl::destroy(v637, (WTF::StringImpl *)v415);
      else
        *(_DWORD *)v637 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v417 = JSC::JSFunction::create();
  *((_QWORD *)this + 27) = v417;
  if (v417 && *(_DWORD *)(v409 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v409 + 192), a2);
  v418 = *(_QWORD *)this;
  v419 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v420 = *(_QWORD **)(v419 + 10840);
  if (!v420 || !*v420 || (v420[1] & 3) != 0)
  {
    v421 = (uint64_t *)(v419 + 10840);
    v422 = *(WTF::StringImpl **)(v419 + 8992);
    if (v422)
      *(_DWORD *)v422 += 2;
    v638 = v422;
    v423 = JSC::createBuiltinExecutable();
    if (v423)
    {
      v541 = v423;
      v590 = v419;
      if ((v423 & 8) != 0)
        v424 = (v423 - 112) | 1;
      else
        v424 = v423 & 0xFFFFFFFFFFFFC000;
      if ((v424 & 1) != 0)
        v492 = v424 + 47;
      else
        v492 = *(_QWORD *)v424 + 32;
      v423 = *(_QWORD *)(v492 + 16);
      if (!v423)
        v423 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v492 + 16) = *(_QWORD *)v423;
      *(_QWORD *)v423 = v541;
      *(_QWORD *)(v423 + 8) = v590 + 8544;
      *(_QWORD *)(v423 + 16) = v421;
    }
    v425 = *v421;
    *v421 = v423;
    if (v425)
      *(_QWORD *)(v425 + 8) = 3;
    if (v638)
    {
      if (*(_DWORD *)v638 == 2)
        WTF::StringImpl::destroy(v638, (WTF::StringImpl *)v424);
      else
        *(_DWORD *)v638 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v426 = JSC::JSFunction::create();
  *((_QWORD *)this + 28) = v426;
  if (v426 && *(_DWORD *)(v418 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v418 + 192), a2);
  v427 = *(_QWORD *)this;
  v428 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v429 = *(_QWORD **)(v428 + 10872);
  if (!v429 || !*v429 || (v429[1] & 3) != 0)
  {
    v430 = (uint64_t *)(v428 + 10872);
    v431 = *(WTF::StringImpl **)(v428 + 9008);
    if (v431)
      *(_DWORD *)v431 += 2;
    v639 = v431;
    v432 = JSC::createBuiltinExecutable();
    if (v432)
    {
      v533 = v432;
      v582 = v428;
      if ((v432 & 8) != 0)
        v433 = (v432 - 112) | 1;
      else
        v433 = v432 & 0xFFFFFFFFFFFFC000;
      if ((v433 & 1) != 0)
        v484 = v433 + 47;
      else
        v484 = *(_QWORD *)v433 + 32;
      v432 = *(_QWORD *)(v484 + 16);
      if (!v432)
        v432 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v484 + 16) = *(_QWORD *)v432;
      *(_QWORD *)v432 = v533;
      *(_QWORD *)(v432 + 8) = v582 + 8544;
      *(_QWORD *)(v432 + 16) = v430;
    }
    v434 = *v430;
    *v430 = v432;
    if (v434)
      *(_QWORD *)(v434 + 8) = 3;
    if (v639)
    {
      if (*(_DWORD *)v639 == 2)
        WTF::StringImpl::destroy(v639, (WTF::StringImpl *)v433);
      else
        *(_DWORD *)v639 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v435 = JSC::JSFunction::create();
  *((_QWORD *)this + 29) = v435;
  if (v435 && *(_DWORD *)(v427 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v427 + 192), a2);
  v436 = *(_QWORD *)this;
  v437 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v438 = *(_QWORD **)(v437 + 10904);
  if (!v438 || !*v438 || (v438[1] & 3) != 0)
  {
    v439 = (uint64_t *)(v437 + 10904);
    v440 = *(WTF::StringImpl **)(v437 + 9024);
    if (v440)
      *(_DWORD *)v440 += 2;
    v640 = v440;
    v441 = JSC::createBuiltinExecutable();
    if (v441)
    {
      v534 = v441;
      v583 = v437;
      if ((v441 & 8) != 0)
        v442 = (v441 - 112) | 1;
      else
        v442 = v441 & 0xFFFFFFFFFFFFC000;
      if ((v442 & 1) != 0)
        v485 = v442 + 47;
      else
        v485 = *(_QWORD *)v442 + 32;
      v441 = *(_QWORD *)(v485 + 16);
      if (!v441)
        v441 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v485 + 16) = *(_QWORD *)v441;
      *(_QWORD *)v441 = v534;
      *(_QWORD *)(v441 + 8) = v583 + 8544;
      *(_QWORD *)(v441 + 16) = v439;
    }
    v443 = *v439;
    *v439 = v441;
    if (v443)
      *(_QWORD *)(v443 + 8) = 3;
    if (v640)
    {
      if (*(_DWORD *)v640 == 2)
        WTF::StringImpl::destroy(v640, (WTF::StringImpl *)v442);
      else
        *(_DWORD *)v640 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  result = JSC::JSFunction::create();
  *((_QWORD *)this + 30) = result;
  if (result)
  {
    if (*(_DWORD *)(v436 + 760) >= *((unsigned __int8 *)a2 + 7))
      return JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v436 + 192), a2);
  }
  return result;
}

uint64_t WebCore::ReadableStreamInternalsBuiltinFunctions::init(WebCore::ReadableStreamInternalsBuiltinFunctions *this, const JSCell *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  WTF::StringImpl *v8;
  uint64_t BuiltinExecutable;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  WTF::StringImpl *v17;
  uint64_t Allocator;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t *v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t *v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t *v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t *v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t *v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t *v142;
  WTF::StringImpl *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t *v151;
  WTF::StringImpl *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t *v160;
  WTF::StringImpl *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t *v169;
  WTF::StringImpl *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t *v178;
  WTF::StringImpl *v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t *v187;
  WTF::StringImpl *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t *v196;
  WTF::StringImpl *v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t *v205;
  WTF::StringImpl *v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t *v214;
  WTF::StringImpl *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t *v223;
  WTF::StringImpl *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t *v232;
  WTF::StringImpl *v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t *v241;
  WTF::StringImpl *v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t *v250;
  WTF::StringImpl *v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t *v259;
  WTF::StringImpl *v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t *v268;
  WTF::StringImpl *v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t *v277;
  WTF::StringImpl *v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t *v286;
  WTF::StringImpl *v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t *v295;
  WTF::StringImpl *v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  _QWORD *v303;
  uint64_t *v304;
  WTF::StringImpl *v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t *v313;
  WTF::StringImpl *v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  _QWORD *v321;
  uint64_t *v322;
  WTF::StringImpl *v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  _QWORD *v330;
  uint64_t *v331;
  WTF::StringImpl *v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  _QWORD *v339;
  uint64_t *v340;
  WTF::StringImpl *v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  _QWORD *v348;
  uint64_t *v349;
  WTF::StringImpl *v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  _QWORD *v357;
  uint64_t *v358;
  WTF::StringImpl *v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t *v367;
  WTF::StringImpl *v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  _QWORD *v375;
  uint64_t *v376;
  WTF::StringImpl *v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  _QWORD *v384;
  uint64_t *v385;
  WTF::StringImpl *v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  uint64_t *v394;
  WTF::StringImpl *v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  _QWORD *v402;
  uint64_t *v403;
  WTF::StringImpl *v404;
  uint64_t v405;
  unint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  _QWORD *v411;
  uint64_t *v412;
  WTF::StringImpl *v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  _QWORD *v420;
  uint64_t *v421;
  WTF::StringImpl *v422;
  uint64_t v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  _QWORD *v429;
  uint64_t *v430;
  WTF::StringImpl *v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t result;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  WTF::StringImpl *v580;
  WTF::StringImpl *v581;
  WTF::StringImpl *v582;
  WTF::StringImpl *v583;
  WTF::StringImpl *v584;
  WTF::StringImpl *v585;
  WTF::StringImpl *v586;
  WTF::StringImpl *v587;
  WTF::StringImpl *v588;
  WTF::StringImpl *v589;
  WTF::StringImpl *v590;
  WTF::StringImpl *v591;
  WTF::StringImpl *v592;
  WTF::StringImpl *v593;
  WTF::StringImpl *v594;
  WTF::StringImpl *v595;
  WTF::StringImpl *v596;
  WTF::StringImpl *v597;
  WTF::StringImpl *v598;
  WTF::StringImpl *v599;
  WTF::StringImpl *v600;
  WTF::StringImpl *v601;
  WTF::StringImpl *v602;
  WTF::StringImpl *v603;
  WTF::StringImpl *v604;
  WTF::StringImpl *v605;
  WTF::StringImpl *v606;
  WTF::StringImpl *v607;
  WTF::StringImpl *v608;
  WTF::StringImpl *v609;
  WTF::StringImpl *v610;
  WTF::StringImpl *v611;
  WTF::StringImpl *v612;
  WTF::StringImpl *v613;
  WTF::StringImpl *v614;
  WTF::StringImpl *v615;
  WTF::StringImpl *v616;
  WTF::StringImpl *v617;
  WTF::StringImpl *v618;
  WTF::StringImpl *v619;
  WTF::StringImpl *v620;
  WTF::StringImpl *v621;
  WTF::StringImpl *v622;
  WTF::StringImpl *v623;
  WTF::StringImpl *v624;
  WTF::StringImpl *v625;
  WTF::StringImpl *v626;
  WTF::StringImpl *v627;

  v4 = *(_QWORD *)this;
  v5 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v6 = *(_QWORD **)(v5 + 4408);
  if (!v6 || !*v6 || (v6[1] & 3) != 0)
  {
    v7 = (uint64_t *)(v5 + 4408);
    v8 = *(WTF::StringImpl **)(v5 + 3632);
    if (v8)
      *(_DWORD *)v8 += 2;
    v580 = v8;
    BuiltinExecutable = JSC::createBuiltinExecutable();
    if (BuiltinExecutable)
    {
      v532 = BuiltinExecutable;
      if ((BuiltinExecutable & 8) != 0)
        v10 = (BuiltinExecutable - 112) | 1;
      else
        v10 = BuiltinExecutable & 0xFFFFFFFFFFFFC000;
      v436 = v5 + 3600;
      if ((v10 & 1) != 0)
        v437 = v10 + 47;
      else
        v437 = *(_QWORD *)v10 + 32;
      BuiltinExecutable = *(_QWORD *)(v437 + 16);
      if (!BuiltinExecutable)
        BuiltinExecutable = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v437 + 16) = *(_QWORD *)BuiltinExecutable;
      *(_QWORD *)BuiltinExecutable = v532;
      *(_QWORD *)(BuiltinExecutable + 8) = v436;
      *(_QWORD *)(BuiltinExecutable + 16) = v7;
    }
    v11 = *v7;
    *v7 = BuiltinExecutable;
    if (v11)
      *(_QWORD *)(v11 + 8) = 3;
    if (v580)
    {
      if (*(_DWORD *)v580 == 2)
        WTF::StringImpl::destroy(v580, (WTF::StringImpl *)v10);
      else
        *(_DWORD *)v580 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v12 = JSC::JSFunction::create();
  *((_QWORD *)this + 2) = v12;
  if (v12 && *(_DWORD *)(v4 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v4 + 192), a2);
  v13 = *(_QWORD *)this;
  v14 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v15 = *(_QWORD **)(v14 + 4440);
  if (!v15 || !*v15 || (v15[1] & 3) != 0)
  {
    v16 = (uint64_t *)(v14 + 4440);
    v17 = *(WTF::StringImpl **)(v14 + 4176);
    if (v17)
      *(_DWORD *)v17 += 2;
    v581 = v17;
    Allocator = JSC::createBuiltinExecutable();
    if (Allocator)
    {
      v533 = Allocator;
      if ((Allocator & 8) != 0)
        v19 = (Allocator - 112) | 1;
      else
        v19 = Allocator & 0xFFFFFFFFFFFFC000;
      v438 = v14 + 3600;
      if ((v19 & 1) != 0)
        v439 = v19 + 47;
      else
        v439 = *(_QWORD *)v19 + 32;
      Allocator = *(_QWORD *)(v439 + 16);
      if (!Allocator)
        Allocator = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v439 + 16) = *(_QWORD *)Allocator;
      *(_QWORD *)Allocator = v533;
      *(_QWORD *)(Allocator + 8) = v438;
      *(_QWORD *)(Allocator + 16) = v16;
    }
    v20 = *v16;
    *v16 = Allocator;
    if (v20)
      *(_QWORD *)(v20 + 8) = 3;
    if (v581)
    {
      if (*(_DWORD *)v581 == 2)
        WTF::StringImpl::destroy(v581, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)v581 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v21 = JSC::JSFunction::create();
  *((_QWORD *)this + 36) = v21;
  if (v21 && *(_DWORD *)(v13 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v13 + 192), a2);
  v22 = *(_QWORD *)this;
  v23 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v24 = *(_QWORD **)(v23 + 4472);
  if (!v24 || !*v24 || (v24[1] & 3) != 0)
  {
    v25 = (uint64_t *)(v23 + 4472);
    v26 = *(WTF::StringImpl **)(v23 + 3920);
    if (v26)
      *(_DWORD *)v26 += 2;
    v582 = v26;
    v27 = JSC::createBuiltinExecutable();
    if (v27)
    {
      v534 = v27;
      if ((v27 & 8) != 0)
        v28 = (v27 - 112) | 1;
      else
        v28 = v27 & 0xFFFFFFFFFFFFC000;
      v440 = v23 + 3600;
      if ((v28 & 1) != 0)
        v441 = v28 + 47;
      else
        v441 = *(_QWORD *)v28 + 32;
      v27 = *(_QWORD *)(v441 + 16);
      if (!v27)
        v27 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v441 + 16) = *(_QWORD *)v27;
      *(_QWORD *)v27 = v534;
      *(_QWORD *)(v27 + 8) = v440;
      *(_QWORD *)(v27 + 16) = v25;
    }
    v29 = *v25;
    *v25 = v27;
    if (v29)
      *(_QWORD *)(v29 + 8) = 3;
    if (v582)
    {
      if (*(_DWORD *)v582 == 2)
        WTF::StringImpl::destroy(v582, (WTF::StringImpl *)v28);
      else
        *(_DWORD *)v582 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v30 = JSC::JSFunction::create();
  *((_QWORD *)this + 20) = v30;
  if (v30 && *(_DWORD *)(v22 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v22 + 192), a2);
  v31 = *(_QWORD *)this;
  v32 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v33 = *(_QWORD **)(v32 + 4504);
  if (!v33 || !*v33 || (v33[1] & 3) != 0)
  {
    v34 = (uint64_t *)(v32 + 4504);
    v35 = *(WTF::StringImpl **)(v32 + 4192);
    if (v35)
      *(_DWORD *)v35 += 2;
    v583 = v35;
    v36 = JSC::createBuiltinExecutable();
    if (v36)
    {
      v535 = v36;
      if ((v36 & 8) != 0)
        v37 = (v36 - 112) | 1;
      else
        v37 = v36 & 0xFFFFFFFFFFFFC000;
      v442 = v32 + 3600;
      if ((v37 & 1) != 0)
        v443 = v37 + 47;
      else
        v443 = *(_QWORD *)v37 + 32;
      v36 = *(_QWORD *)(v443 + 16);
      if (!v36)
        v36 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v443 + 16) = *(_QWORD *)v36;
      *(_QWORD *)v36 = v535;
      *(_QWORD *)(v36 + 8) = v442;
      *(_QWORD *)(v36 + 16) = v34;
    }
    v38 = *v34;
    *v34 = v36;
    if (v38)
      *(_QWORD *)(v38 + 8) = 3;
    if (v583)
    {
      if (*(_DWORD *)v583 == 2)
        WTF::StringImpl::destroy(v583, (WTF::StringImpl *)v37);
      else
        *(_DWORD *)v583 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v39 = JSC::JSFunction::create();
  *((_QWORD *)this + 37) = v39;
  if (v39 && *(_DWORD *)(v31 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v31 + 192), a2);
  v40 = *(_QWORD *)this;
  v41 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v42 = *(_QWORD **)(v41 + 4536);
  if (!v42 || !*v42 || (v42[1] & 3) != 0)
  {
    v43 = (uint64_t *)(v41 + 4536);
    v44 = *(WTF::StringImpl **)(v41 + 4224);
    if (v44)
      *(_DWORD *)v44 += 2;
    v584 = v44;
    v45 = JSC::createBuiltinExecutable();
    if (v45)
    {
      v573 = v45;
      if ((v45 & 8) != 0)
        v46 = (v45 - 112) | 1;
      else
        v46 = v45 & 0xFFFFFFFFFFFFC000;
      v518 = v41 + 3600;
      if ((v46 & 1) != 0)
        v519 = v46 + 47;
      else
        v519 = *(_QWORD *)v46 + 32;
      v45 = *(_QWORD *)(v519 + 16);
      if (!v45)
        v45 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v519 + 16) = *(_QWORD *)v45;
      *(_QWORD *)v45 = v573;
      *(_QWORD *)(v45 + 8) = v518;
      *(_QWORD *)(v45 + 16) = v43;
    }
    v47 = *v43;
    *v43 = v45;
    if (v47)
      *(_QWORD *)(v47 + 8) = 3;
    if (v584)
    {
      if (*(_DWORD *)v584 == 2)
        WTF::StringImpl::destroy(v584, (WTF::StringImpl *)v46);
      else
        *(_DWORD *)v584 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v48 = JSC::JSFunction::create();
  *((_QWORD *)this + 39) = v48;
  if (v48 && *(_DWORD *)(v40 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v40 + 192), a2);
  v49 = *(_QWORD *)this;
  v50 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v51 = *(_QWORD **)(v50 + 4568);
  if (!v51 || !*v51 || (v51[1] & 3) != 0)
  {
    v52 = (uint64_t *)(v50 + 4568);
    v53 = *(WTF::StringImpl **)(v50 + 4272);
    if (v53)
      *(_DWORD *)v53 += 2;
    v585 = v53;
    v54 = JSC::createBuiltinExecutable();
    if (v54)
    {
      v536 = v54;
      if ((v54 & 8) != 0)
        v55 = (v54 - 112) | 1;
      else
        v55 = v54 & 0xFFFFFFFFFFFFC000;
      v444 = v50 + 3600;
      if ((v55 & 1) != 0)
        v445 = v55 + 47;
      else
        v445 = *(_QWORD *)v55 + 32;
      v54 = *(_QWORD *)(v445 + 16);
      if (!v54)
        v54 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v445 + 16) = *(_QWORD *)v54;
      *(_QWORD *)v54 = v536;
      *(_QWORD *)(v54 + 8) = v444;
      *(_QWORD *)(v54 + 16) = v52;
    }
    v56 = *v52;
    *v52 = v54;
    if (v56)
      *(_QWORD *)(v56 + 8) = 3;
    if (v585)
    {
      if (*(_DWORD *)v585 == 2)
        WTF::StringImpl::destroy(v585, (WTF::StringImpl *)v55);
      else
        *(_DWORD *)v585 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v57 = JSC::JSFunction::create();
  *((_QWORD *)this + 42) = v57;
  if (v57 && *(_DWORD *)(v49 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v49 + 192), a2);
  v58 = *(_QWORD *)this;
  v59 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v60 = *(_QWORD **)(v59 + 4600);
  if (!v60 || !*v60 || (v60[1] & 3) != 0)
  {
    v61 = (uint64_t *)(v59 + 4600);
    v62 = *(WTF::StringImpl **)(v59 + 3872);
    if (v62)
      *(_DWORD *)v62 += 2;
    v586 = v62;
    v63 = JSC::createBuiltinExecutable();
    if (v63)
    {
      v537 = v63;
      if ((v63 & 8) != 0)
        v64 = (v63 - 112) | 1;
      else
        v64 = v63 & 0xFFFFFFFFFFFFC000;
      v446 = v59 + 3600;
      if ((v64 & 1) != 0)
        v447 = v64 + 47;
      else
        v447 = *(_QWORD *)v64 + 32;
      v63 = *(_QWORD *)(v447 + 16);
      if (!v63)
        v63 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v447 + 16) = *(_QWORD *)v63;
      *(_QWORD *)v63 = v537;
      *(_QWORD *)(v63 + 8) = v446;
      *(_QWORD *)(v63 + 16) = v61;
    }
    v65 = *v61;
    *v61 = v63;
    if (v65)
      *(_QWORD *)(v65 + 8) = 3;
    if (v586)
    {
      if (*(_DWORD *)v586 == 2)
        WTF::StringImpl::destroy(v586, (WTF::StringImpl *)v64);
      else
        *(_DWORD *)v586 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v66 = JSC::JSFunction::create();
  *((_QWORD *)this + 17) = v66;
  if (v66 && *(_DWORD *)(v58 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v58 + 192), a2);
  v67 = *(_QWORD *)this;
  v68 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v69 = *(_QWORD **)(v68 + 4632);
  if (!v69 || !*v69 || (v69[1] & 3) != 0)
  {
    v70 = (uint64_t *)(v68 + 4632);
    v71 = *(WTF::StringImpl **)(v68 + 4368);
    if (v71)
      *(_DWORD *)v71 += 2;
    v587 = v71;
    v72 = JSC::createBuiltinExecutable();
    if (v72)
    {
      v538 = v72;
      if ((v72 & 8) != 0)
        v73 = (v72 - 112) | 1;
      else
        v73 = v72 & 0xFFFFFFFFFFFFC000;
      v448 = v68 + 3600;
      if ((v73 & 1) != 0)
        v449 = v73 + 47;
      else
        v449 = *(_QWORD *)v73 + 32;
      v72 = *(_QWORD *)(v449 + 16);
      if (!v72)
        v72 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v449 + 16) = *(_QWORD *)v72;
      *(_QWORD *)v72 = v538;
      *(_QWORD *)(v72 + 8) = v448;
      *(_QWORD *)(v72 + 16) = v70;
    }
    v74 = *v70;
    *v70 = v72;
    if (v74)
      *(_QWORD *)(v74 + 8) = 3;
    if (v587)
    {
      if (*(_DWORD *)v587 == 2)
        WTF::StringImpl::destroy(v587, (WTF::StringImpl *)v73);
      else
        *(_DWORD *)v587 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v75 = JSC::JSFunction::create();
  *((_QWORD *)this + 48) = v75;
  if (v75 && *(_DWORD *)(v67 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v67 + 192), a2);
  v76 = *(_QWORD *)this;
  v77 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v78 = *(_QWORD **)(v77 + 4664);
  if (!v78 || !*v78 || (v78[1] & 3) != 0)
  {
    v79 = (uint64_t *)(v77 + 4664);
    v80 = *(WTF::StringImpl **)(v77 + 4032);
    if (v80)
      *(_DWORD *)v80 += 2;
    v588 = v80;
    v81 = JSC::createBuiltinExecutable();
    if (v81)
    {
      v539 = v81;
      if ((v81 & 8) != 0)
        v82 = (v81 - 112) | 1;
      else
        v82 = v81 & 0xFFFFFFFFFFFFC000;
      v450 = v77 + 3600;
      if ((v82 & 1) != 0)
        v451 = v82 + 47;
      else
        v451 = *(_QWORD *)v82 + 32;
      v81 = *(_QWORD *)(v451 + 16);
      if (!v81)
        v81 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v451 + 16) = *(_QWORD *)v81;
      *(_QWORD *)v81 = v539;
      *(_QWORD *)(v81 + 8) = v450;
      *(_QWORD *)(v81 + 16) = v79;
    }
    v83 = *v79;
    *v79 = v81;
    if (v83)
      *(_QWORD *)(v83 + 8) = 3;
    if (v588)
    {
      if (*(_DWORD *)v588 == 2)
        WTF::StringImpl::destroy(v588, (WTF::StringImpl *)v82);
      else
        *(_DWORD *)v588 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v84 = JSC::JSFunction::create();
  *((_QWORD *)this + 27) = v84;
  if (v84 && *(_DWORD *)(v76 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v76 + 192), a2);
  v85 = *(_QWORD *)this;
  v86 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v87 = *(_QWORD **)(v86 + 4696);
  if (!v87 || !*v87 || (v87[1] & 3) != 0)
  {
    v88 = (uint64_t *)(v86 + 4696);
    v89 = *(WTF::StringImpl **)(v86 + 4208);
    if (v89)
      *(_DWORD *)v89 += 2;
    v589 = v89;
    v90 = JSC::createBuiltinExecutable();
    if (v90)
    {
      v540 = v90;
      if ((v90 & 8) != 0)
        v91 = (v90 - 112) | 1;
      else
        v91 = v90 & 0xFFFFFFFFFFFFC000;
      v452 = v86 + 3600;
      if ((v91 & 1) != 0)
        v453 = v91 + 47;
      else
        v453 = *(_QWORD *)v91 + 32;
      v90 = *(_QWORD *)(v453 + 16);
      if (!v90)
        v90 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v453 + 16) = *(_QWORD *)v90;
      *(_QWORD *)v90 = v540;
      *(_QWORD *)(v90 + 8) = v452;
      *(_QWORD *)(v90 + 16) = v88;
    }
    v92 = *v88;
    *v88 = v90;
    if (v92)
      *(_QWORD *)(v92 + 8) = 3;
    if (v589)
    {
      if (*(_DWORD *)v589 == 2)
        WTF::StringImpl::destroy(v589, (WTF::StringImpl *)v91);
      else
        *(_DWORD *)v589 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v93 = JSC::JSFunction::create();
  *((_QWORD *)this + 38) = v93;
  if (v93 && *(_DWORD *)(v85 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v85 + 192), a2);
  v94 = *(_QWORD *)this;
  v95 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v96 = *(_QWORD **)(v95 + 4728);
  if (!v96 || !*v96 || (v96[1] & 3) != 0)
  {
    v97 = (uint64_t *)(v95 + 4728);
    v98 = *(WTF::StringImpl **)(v95 + 3616);
    if (v98)
      *(_DWORD *)v98 += 2;
    v590 = v98;
    v99 = JSC::createBuiltinExecutable();
    if (v99)
    {
      v541 = v99;
      if ((v99 & 8) != 0)
        v100 = (v99 - 112) | 1;
      else
        v100 = v99 & 0xFFFFFFFFFFFFC000;
      v454 = v95 + 3600;
      if ((v100 & 1) != 0)
        v455 = v100 + 47;
      else
        v455 = *(_QWORD *)v100 + 32;
      v99 = *(_QWORD *)(v455 + 16);
      if (!v99)
        v99 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v455 + 16) = *(_QWORD *)v99;
      *(_QWORD *)v99 = v541;
      *(_QWORD *)(v99 + 8) = v454;
      *(_QWORD *)(v99 + 16) = v97;
    }
    v101 = *v97;
    *v97 = v99;
    if (v101)
      *(_QWORD *)(v101 + 8) = 3;
    if (v590)
    {
      if (*(_DWORD *)v590 == 2)
        WTF::StringImpl::destroy(v590, (WTF::StringImpl *)v100);
      else
        *(_DWORD *)v590 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v102 = JSC::JSFunction::create();
  *((_QWORD *)this + 1) = v102;
  if (v102 && *(_DWORD *)(v94 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v94 + 192), a2);
  v103 = *(_QWORD *)this;
  v104 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v105 = *(_QWORD **)(v104 + 4760);
  if (!v105 || !*v105 || (v105[1] & 3) != 0)
  {
    v106 = (uint64_t *)(v104 + 4760);
    v107 = *(WTF::StringImpl **)(v104 + 4240);
    if (v107)
      *(_DWORD *)v107 += 2;
    v591 = v107;
    v108 = JSC::createBuiltinExecutable();
    if (v108)
    {
      v542 = v108;
      if ((v108 & 8) != 0)
        v109 = (v108 - 112) | 1;
      else
        v109 = v108 & 0xFFFFFFFFFFFFC000;
      v456 = v104 + 3600;
      if ((v109 & 1) != 0)
        v457 = v109 + 47;
      else
        v457 = *(_QWORD *)v109 + 32;
      v108 = *(_QWORD *)(v457 + 16);
      if (!v108)
        v108 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v457 + 16) = *(_QWORD *)v108;
      *(_QWORD *)v108 = v542;
      *(_QWORD *)(v108 + 8) = v456;
      *(_QWORD *)(v108 + 16) = v106;
    }
    v110 = *v106;
    *v106 = v108;
    if (v110)
      *(_QWORD *)(v110 + 8) = 3;
    if (v591)
    {
      if (*(_DWORD *)v591 == 2)
        WTF::StringImpl::destroy(v591, (WTF::StringImpl *)v109);
      else
        *(_DWORD *)v591 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v111 = JSC::JSFunction::create();
  *((_QWORD *)this + 40) = v111;
  if (v111 && *(_DWORD *)(v103 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v103 + 192), a2);
  v112 = *(_QWORD *)this;
  v113 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v114 = *(_QWORD **)(v113 + 4792);
  if (!v114 || !*v114 || (v114[1] & 3) != 0)
  {
    v115 = (uint64_t *)(v113 + 4792);
    v116 = *(WTF::StringImpl **)(v113 + 3824);
    if (v116)
      *(_DWORD *)v116 += 2;
    v592 = v116;
    v117 = JSC::createBuiltinExecutable();
    if (v117)
    {
      v574 = v117;
      if ((v117 & 8) != 0)
        v118 = (v117 - 112) | 1;
      else
        v118 = v117 & 0xFFFFFFFFFFFFC000;
      v520 = v113 + 3600;
      if ((v118 & 1) != 0)
        v521 = v118 + 47;
      else
        v521 = *(_QWORD *)v118 + 32;
      v117 = *(_QWORD *)(v521 + 16);
      if (!v117)
        v117 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v521 + 16) = *(_QWORD *)v117;
      *(_QWORD *)v117 = v574;
      *(_QWORD *)(v117 + 8) = v520;
      *(_QWORD *)(v117 + 16) = v115;
    }
    v119 = *v115;
    *v115 = v117;
    if (v119)
      *(_QWORD *)(v119 + 8) = 3;
    if (v592)
    {
      if (*(_DWORD *)v592 == 2)
        WTF::StringImpl::destroy(v592, (WTF::StringImpl *)v118);
      else
        *(_DWORD *)v592 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v120 = JSC::JSFunction::create();
  *((_QWORD *)this + 14) = v120;
  if (v120 && *(_DWORD *)(v112 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v112 + 192), a2);
  v121 = *(_QWORD *)this;
  v122 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v123 = *(_QWORD **)(v122 + 4824);
  if (!v123 || !*v123 || (v123[1] & 3) != 0)
  {
    v124 = (uint64_t *)(v122 + 4824);
    v125 = *(WTF::StringImpl **)(v122 + 3760);
    if (v125)
      *(_DWORD *)v125 += 2;
    v593 = v125;
    v126 = JSC::createBuiltinExecutable();
    if (v126)
    {
      v543 = v126;
      if ((v126 & 8) != 0)
        v127 = (v126 - 112) | 1;
      else
        v127 = v126 & 0xFFFFFFFFFFFFC000;
      v458 = v122 + 3600;
      if ((v127 & 1) != 0)
        v459 = v127 + 47;
      else
        v459 = *(_QWORD *)v127 + 32;
      v126 = *(_QWORD *)(v459 + 16);
      if (!v126)
        v126 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v459 + 16) = *(_QWORD *)v126;
      *(_QWORD *)v126 = v543;
      *(_QWORD *)(v126 + 8) = v458;
      *(_QWORD *)(v126 + 16) = v124;
    }
    v128 = *v124;
    *v124 = v126;
    if (v128)
      *(_QWORD *)(v128 + 8) = 3;
    if (v593)
    {
      if (*(_DWORD *)v593 == 2)
        WTF::StringImpl::destroy(v593, (WTF::StringImpl *)v127);
      else
        *(_DWORD *)v593 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v129 = JSC::JSFunction::create();
  *((_QWORD *)this + 10) = v129;
  if (v129 && *(_DWORD *)(v121 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v121 + 192), a2);
  v130 = *(_QWORD *)this;
  v131 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v132 = *(_QWORD **)(v131 + 4856);
  if (!v132 || !*v132 || (v132[1] & 3) != 0)
  {
    v133 = (uint64_t *)(v131 + 4856);
    v134 = *(WTF::StringImpl **)(v131 + 3792);
    if (v134)
      *(_DWORD *)v134 += 2;
    v594 = v134;
    v135 = JSC::createBuiltinExecutable();
    if (v135)
    {
      v544 = v135;
      if ((v135 & 8) != 0)
        v136 = (v135 - 112) | 1;
      else
        v136 = v135 & 0xFFFFFFFFFFFFC000;
      v460 = v131 + 3600;
      if ((v136 & 1) != 0)
        v461 = v136 + 47;
      else
        v461 = *(_QWORD *)v136 + 32;
      v135 = *(_QWORD *)(v461 + 16);
      if (!v135)
        v135 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v461 + 16) = *(_QWORD *)v135;
      *(_QWORD *)v135 = v544;
      *(_QWORD *)(v135 + 8) = v460;
      *(_QWORD *)(v135 + 16) = v133;
    }
    v137 = *v133;
    *v133 = v135;
    if (v137)
      *(_QWORD *)(v137 + 8) = 3;
    if (v594)
    {
      if (*(_DWORD *)v594 == 2)
        WTF::StringImpl::destroy(v594, (WTF::StringImpl *)v136);
      else
        *(_DWORD *)v594 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v138 = JSC::JSFunction::create();
  *((_QWORD *)this + 12) = v138;
  if (v138 && *(_DWORD *)(v130 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v130 + 192), a2);
  v139 = *(_QWORD *)this;
  v140 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v141 = *(_QWORD **)(v140 + 4888);
  if (!v141 || !*v141 || (v141[1] & 3) != 0)
  {
    v142 = (uint64_t *)(v140 + 4888);
    v143 = *(WTF::StringImpl **)(v140 + 3776);
    if (v143)
      *(_DWORD *)v143 += 2;
    v595 = v143;
    v144 = JSC::createBuiltinExecutable();
    if (v144)
    {
      v545 = v144;
      if ((v144 & 8) != 0)
        v145 = (v144 - 112) | 1;
      else
        v145 = v144 & 0xFFFFFFFFFFFFC000;
      v462 = v140 + 3600;
      if ((v145 & 1) != 0)
        v463 = v145 + 47;
      else
        v463 = *(_QWORD *)v145 + 32;
      v144 = *(_QWORD *)(v463 + 16);
      if (!v144)
        v144 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v463 + 16) = *(_QWORD *)v144;
      *(_QWORD *)v144 = v545;
      *(_QWORD *)(v144 + 8) = v462;
      *(_QWORD *)(v144 + 16) = v142;
    }
    v146 = *v142;
    *v142 = v144;
    if (v146)
      *(_QWORD *)(v146 + 8) = 3;
    if (v595)
    {
      if (*(_DWORD *)v595 == 2)
        WTF::StringImpl::destroy(v595, (WTF::StringImpl *)v145);
      else
        *(_DWORD *)v595 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v147 = JSC::JSFunction::create();
  *((_QWORD *)this + 11) = v147;
  if (v147 && *(_DWORD *)(v139 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v139 + 192), a2);
  v148 = *(_QWORD *)this;
  v149 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v150 = *(_QWORD **)(v149 + 4920);
  if (!v150 || !*v150 || (v150[1] & 3) != 0)
  {
    v151 = (uint64_t *)(v149 + 4920);
    v152 = *(WTF::StringImpl **)(v149 + 3744);
    if (v152)
      *(_DWORD *)v152 += 2;
    v596 = v152;
    v153 = JSC::createBuiltinExecutable();
    if (v153)
    {
      v546 = v153;
      if ((v153 & 8) != 0)
        v154 = (v153 - 112) | 1;
      else
        v154 = v153 & 0xFFFFFFFFFFFFC000;
      v464 = v149 + 3600;
      if ((v154 & 1) != 0)
        v465 = v154 + 47;
      else
        v465 = *(_QWORD *)v154 + 32;
      v153 = *(_QWORD *)(v465 + 16);
      if (!v153)
        v153 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v465 + 16) = *(_QWORD *)v153;
      *(_QWORD *)v153 = v546;
      *(_QWORD *)(v153 + 8) = v464;
      *(_QWORD *)(v153 + 16) = v151;
    }
    v155 = *v151;
    *v151 = v153;
    if (v155)
      *(_QWORD *)(v155 + 8) = 3;
    if (v596)
    {
      if (*(_DWORD *)v596 == 2)
        WTF::StringImpl::destroy(v596, (WTF::StringImpl *)v154);
      else
        *(_DWORD *)v596 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v156 = JSC::JSFunction::create();
  *((_QWORD *)this + 9) = v156;
  if (v156 && *(_DWORD *)(v148 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v148 + 192), a2);
  v157 = *(_QWORD *)this;
  v158 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v159 = *(_QWORD **)(v158 + 4952);
  if (!v159 || !*v159 || (v159[1] & 3) != 0)
  {
    v160 = (uint64_t *)(v158 + 4952);
    v161 = *(WTF::StringImpl **)(v158 + 3728);
    if (v161)
      *(_DWORD *)v161 += 2;
    v597 = v161;
    v162 = JSC::createBuiltinExecutable();
    if (v162)
    {
      v547 = v162;
      if ((v162 & 8) != 0)
        v163 = (v162 - 112) | 1;
      else
        v163 = v162 & 0xFFFFFFFFFFFFC000;
      v466 = v158 + 3600;
      if ((v163 & 1) != 0)
        v467 = v163 + 47;
      else
        v467 = *(_QWORD *)v163 + 32;
      v162 = *(_QWORD *)(v467 + 16);
      if (!v162)
        v162 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v467 + 16) = *(_QWORD *)v162;
      *(_QWORD *)v162 = v547;
      *(_QWORD *)(v162 + 8) = v466;
      *(_QWORD *)(v162 + 16) = v160;
    }
    v164 = *v160;
    *v160 = v162;
    if (v164)
      *(_QWORD *)(v164 + 8) = 3;
    if (v597)
    {
      if (*(_DWORD *)v597 == 2)
        WTF::StringImpl::destroy(v597, (WTF::StringImpl *)v163);
      else
        *(_DWORD *)v597 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v165 = JSC::JSFunction::create();
  *((_QWORD *)this + 8) = v165;
  if (v165 && *(_DWORD *)(v157 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v157 + 192), a2);
  v166 = *(_QWORD *)this;
  v167 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v168 = *(_QWORD **)(v167 + 4984);
  if (!v168 || !*v168 || (v168[1] & 3) != 0)
  {
    v169 = (uint64_t *)(v167 + 4984);
    v170 = *(WTF::StringImpl **)(v167 + 3856);
    if (v170)
      *(_DWORD *)v170 += 2;
    v598 = v170;
    v171 = JSC::createBuiltinExecutable();
    if (v171)
    {
      v548 = v171;
      if ((v171 & 8) != 0)
        v172 = (v171 - 112) | 1;
      else
        v172 = v171 & 0xFFFFFFFFFFFFC000;
      v468 = v167 + 3600;
      if ((v172 & 1) != 0)
        v469 = v172 + 47;
      else
        v469 = *(_QWORD *)v172 + 32;
      v171 = *(_QWORD *)(v469 + 16);
      if (!v171)
        v171 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v469 + 16) = *(_QWORD *)v171;
      *(_QWORD *)v171 = v548;
      *(_QWORD *)(v171 + 8) = v468;
      *(_QWORD *)(v171 + 16) = v169;
    }
    v173 = *v169;
    *v169 = v171;
    if (v173)
      *(_QWORD *)(v173 + 8) = 3;
    if (v598)
    {
      if (*(_DWORD *)v598 == 2)
        WTF::StringImpl::destroy(v598, (WTF::StringImpl *)v172);
      else
        *(_DWORD *)v598 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v174 = JSC::JSFunction::create();
  *((_QWORD *)this + 16) = v174;
  if (v174 && *(_DWORD *)(v166 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v166 + 192), a2);
  v175 = *(_QWORD *)this;
  v176 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v177 = *(_QWORD **)(v176 + 5016);
  if (!v177 || !*v177 || (v177[1] & 3) != 0)
  {
    v178 = (uint64_t *)(v176 + 5016);
    v179 = *(WTF::StringImpl **)(v176 + 3840);
    if (v179)
      *(_DWORD *)v179 += 2;
    v599 = v179;
    v180 = JSC::createBuiltinExecutable();
    if (v180)
    {
      v575 = v180;
      if ((v180 & 8) != 0)
        v181 = (v180 - 112) | 1;
      else
        v181 = v180 & 0xFFFFFFFFFFFFC000;
      v522 = v176 + 3600;
      if ((v181 & 1) != 0)
        v523 = v181 + 47;
      else
        v523 = *(_QWORD *)v181 + 32;
      v180 = *(_QWORD *)(v523 + 16);
      if (!v180)
        v180 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v523 + 16) = *(_QWORD *)v180;
      *(_QWORD *)v180 = v575;
      *(_QWORD *)(v180 + 8) = v522;
      *(_QWORD *)(v180 + 16) = v178;
    }
    v182 = *v178;
    *v178 = v180;
    if (v182)
      *(_QWORD *)(v182 + 8) = 3;
    if (v599)
    {
      if (*(_DWORD *)v599 == 2)
        WTF::StringImpl::destroy(v599, (WTF::StringImpl *)v181);
      else
        *(_DWORD *)v599 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v183 = JSC::JSFunction::create();
  *((_QWORD *)this + 15) = v183;
  if (v183 && *(_DWORD *)(v175 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v175 + 192), a2);
  v184 = *(_QWORD *)this;
  v185 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v186 = *(_QWORD **)(v185 + 5048);
  if (!v186 || !*v186 || (v186[1] & 3) != 0)
  {
    v187 = (uint64_t *)(v185 + 5048);
    v188 = *(WTF::StringImpl **)(v185 + 3808);
    if (v188)
      *(_DWORD *)v188 += 2;
    v600 = v188;
    v189 = JSC::createBuiltinExecutable();
    if (v189)
    {
      v576 = v189;
      if ((v189 & 8) != 0)
        v190 = (v189 - 112) | 1;
      else
        v190 = v189 & 0xFFFFFFFFFFFFC000;
      v524 = v185 + 3600;
      if ((v190 & 1) != 0)
        v525 = v190 + 47;
      else
        v525 = *(_QWORD *)v190 + 32;
      v189 = *(_QWORD *)(v525 + 16);
      if (!v189)
        v189 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v525 + 16) = *(_QWORD *)v189;
      *(_QWORD *)v189 = v576;
      *(_QWORD *)(v189 + 8) = v524;
      *(_QWORD *)(v189 + 16) = v187;
    }
    v191 = *v187;
    *v187 = v189;
    if (v191)
      *(_QWORD *)(v191 + 8) = 3;
    if (v600)
    {
      if (*(_DWORD *)v600 == 2)
        WTF::StringImpl::destroy(v600, (WTF::StringImpl *)v190);
      else
        *(_DWORD *)v600 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v192 = JSC::JSFunction::create();
  *((_QWORD *)this + 13) = v192;
  if (v192 && *(_DWORD *)(v184 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v184 + 192), a2);
  v193 = *(_QWORD *)this;
  v194 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v195 = *(_QWORD **)(v194 + 5080);
  if (!v195 || !*v195 || (v195[1] & 3) != 0)
  {
    v196 = (uint64_t *)(v194 + 5080);
    v197 = *(WTF::StringImpl **)(v194 + 4304);
    if (v197)
      *(_DWORD *)v197 += 2;
    v601 = v197;
    v198 = JSC::createBuiltinExecutable();
    if (v198)
    {
      v549 = v198;
      if ((v198 & 8) != 0)
        v199 = (v198 - 112) | 1;
      else
        v199 = v198 & 0xFFFFFFFFFFFFC000;
      v470 = v194 + 3600;
      if ((v199 & 1) != 0)
        v471 = v199 + 47;
      else
        v471 = *(_QWORD *)v199 + 32;
      v198 = *(_QWORD *)(v471 + 16);
      if (!v198)
        v198 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v471 + 16) = *(_QWORD *)v198;
      *(_QWORD *)v198 = v549;
      *(_QWORD *)(v198 + 8) = v470;
      *(_QWORD *)(v198 + 16) = v196;
    }
    v200 = *v196;
    *v196 = v198;
    if (v200)
      *(_QWORD *)(v200 + 8) = 3;
    if (v601)
    {
      if (*(_DWORD *)v601 == 2)
        WTF::StringImpl::destroy(v601, (WTF::StringImpl *)v199);
      else
        *(_DWORD *)v601 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v201 = JSC::JSFunction::create();
  *((_QWORD *)this + 44) = v201;
  if (v201 && *(_DWORD *)(v193 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v193 + 192), a2);
  v202 = *(_QWORD *)this;
  v203 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v204 = *(_QWORD **)(v203 + 5112);
  if (!v204 || !*v204 || (v204[1] & 3) != 0)
  {
    v205 = (uint64_t *)(v203 + 5112);
    v206 = *(WTF::StringImpl **)(v203 + 4352);
    if (v206)
      *(_DWORD *)v206 += 2;
    v602 = v206;
    v207 = JSC::createBuiltinExecutable();
    if (v207)
    {
      v550 = v207;
      if ((v207 & 8) != 0)
        v208 = (v207 - 112) | 1;
      else
        v208 = v207 & 0xFFFFFFFFFFFFC000;
      v472 = v203 + 3600;
      if ((v208 & 1) != 0)
        v473 = v208 + 47;
      else
        v473 = *(_QWORD *)v208 + 32;
      v207 = *(_QWORD *)(v473 + 16);
      if (!v207)
        v207 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v473 + 16) = *(_QWORD *)v207;
      *(_QWORD *)v207 = v550;
      *(_QWORD *)(v207 + 8) = v472;
      *(_QWORD *)(v207 + 16) = v205;
    }
    v209 = *v205;
    *v205 = v207;
    if (v209)
      *(_QWORD *)(v209 + 8) = 3;
    if (v602)
    {
      if (*(_DWORD *)v602 == 2)
        WTF::StringImpl::destroy(v602, (WTF::StringImpl *)v208);
      else
        *(_DWORD *)v602 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v210 = JSC::JSFunction::create();
  *((_QWORD *)this + 47) = v210;
  if (v210 && *(_DWORD *)(v202 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v202 + 192), a2);
  v211 = *(_QWORD *)this;
  v212 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v213 = *(_QWORD **)(v212 + 5144);
  if (!v213 || !*v213 || (v213[1] & 3) != 0)
  {
    v214 = (uint64_t *)(v212 + 5144);
    v215 = *(WTF::StringImpl **)(v212 + 4320);
    if (v215)
      *(_DWORD *)v215 += 2;
    v603 = v215;
    v216 = JSC::createBuiltinExecutable();
    if (v216)
    {
      v551 = v216;
      if ((v216 & 8) != 0)
        v217 = (v216 - 112) | 1;
      else
        v217 = v216 & 0xFFFFFFFFFFFFC000;
      v474 = v212 + 3600;
      if ((v217 & 1) != 0)
        v475 = v217 + 47;
      else
        v475 = *(_QWORD *)v217 + 32;
      v216 = *(_QWORD *)(v475 + 16);
      if (!v216)
        v216 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v475 + 16) = *(_QWORD *)v216;
      *(_QWORD *)v216 = v551;
      *(_QWORD *)(v216 + 8) = v474;
      *(_QWORD *)(v216 + 16) = v214;
    }
    v218 = *v214;
    *v214 = v216;
    if (v218)
      *(_QWORD *)(v218 + 8) = 3;
    if (v603)
    {
      if (*(_DWORD *)v603 == 2)
        WTF::StringImpl::destroy(v603, (WTF::StringImpl *)v217);
      else
        *(_DWORD *)v603 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v219 = JSC::JSFunction::create();
  *((_QWORD *)this + 45) = v219;
  if (v219 && *(_DWORD *)(v211 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v211 + 192), a2);
  v220 = *(_QWORD *)this;
  v221 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v222 = *(_QWORD **)(v221 + 5176);
  if (!v222 || !*v222 || (v222[1] & 3) != 0)
  {
    v223 = (uint64_t *)(v221 + 5176);
    v224 = *(WTF::StringImpl **)(v221 + 4336);
    if (v224)
      *(_DWORD *)v224 += 2;
    v604 = v224;
    v225 = JSC::createBuiltinExecutable();
    if (v225)
    {
      v552 = v225;
      if ((v225 & 8) != 0)
        v226 = (v225 - 112) | 1;
      else
        v226 = v225 & 0xFFFFFFFFFFFFC000;
      v476 = v221 + 3600;
      if ((v226 & 1) != 0)
        v477 = v226 + 47;
      else
        v477 = *(_QWORD *)v226 + 32;
      v225 = *(_QWORD *)(v477 + 16);
      if (!v225)
        v225 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v477 + 16) = *(_QWORD *)v225;
      *(_QWORD *)v225 = v552;
      *(_QWORD *)(v225 + 8) = v476;
      *(_QWORD *)(v225 + 16) = v223;
    }
    v227 = *v223;
    *v223 = v225;
    if (v227)
      *(_QWORD *)(v227 + 8) = 3;
    if (v604)
    {
      if (*(_DWORD *)v604 == 2)
        WTF::StringImpl::destroy(v604, (WTF::StringImpl *)v226);
      else
        *(_DWORD *)v604 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v228 = JSC::JSFunction::create();
  *((_QWORD *)this + 46) = v228;
  if (v228 && *(_DWORD *)(v220 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v220 + 192), a2);
  v229 = *(_QWORD *)this;
  v230 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v231 = *(_QWORD **)(v230 + 5208);
  if (!v231 || !*v231 || (v231[1] & 3) != 0)
  {
    v232 = (uint64_t *)(v230 + 5208);
    v233 = *(WTF::StringImpl **)(v230 + 3648);
    if (v233)
      *(_DWORD *)v233 += 2;
    v605 = v233;
    v234 = JSC::createBuiltinExecutable();
    if (v234)
    {
      v553 = v234;
      if ((v234 & 8) != 0)
        v235 = (v234 - 112) | 1;
      else
        v235 = v234 & 0xFFFFFFFFFFFFC000;
      v478 = v230 + 3600;
      if ((v235 & 1) != 0)
        v479 = v235 + 47;
      else
        v479 = *(_QWORD *)v235 + 32;
      v234 = *(_QWORD *)(v479 + 16);
      if (!v234)
        v234 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v479 + 16) = *(_QWORD *)v234;
      *(_QWORD *)v234 = v553;
      *(_QWORD *)(v234 + 8) = v478;
      *(_QWORD *)(v234 + 16) = v232;
    }
    v236 = *v232;
    *v232 = v234;
    if (v236)
      *(_QWORD *)(v236 + 8) = 3;
    if (v605)
    {
      if (*(_DWORD *)v605 == 2)
        WTF::StringImpl::destroy(v605, (WTF::StringImpl *)v235);
      else
        *(_DWORD *)v605 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v237 = JSC::JSFunction::create();
  *((_QWORD *)this + 3) = v237;
  if (v237 && *(_DWORD *)(v229 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v229 + 192), a2);
  v238 = *(_QWORD *)this;
  v239 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v240 = *(_QWORD **)(v239 + 5240);
  if (!v240 || !*v240 || (v240[1] & 3) != 0)
  {
    v241 = (uint64_t *)(v239 + 5240);
    v242 = *(WTF::StringImpl **)(v239 + 3680);
    if (v242)
      *(_DWORD *)v242 += 2;
    v606 = v242;
    v243 = JSC::createBuiltinExecutable();
    if (v243)
    {
      v554 = v243;
      if ((v243 & 8) != 0)
        v244 = (v243 - 112) | 1;
      else
        v244 = v243 & 0xFFFFFFFFFFFFC000;
      v480 = v239 + 3600;
      if ((v244 & 1) != 0)
        v481 = v244 + 47;
      else
        v481 = *(_QWORD *)v244 + 32;
      v243 = *(_QWORD *)(v481 + 16);
      if (!v243)
        v243 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v481 + 16) = *(_QWORD *)v243;
      *(_QWORD *)v243 = v554;
      *(_QWORD *)(v243 + 8) = v480;
      *(_QWORD *)(v243 + 16) = v241;
    }
    v245 = *v241;
    *v241 = v243;
    if (v245)
      *(_QWORD *)(v245 + 8) = 3;
    if (v606)
    {
      if (*(_DWORD *)v606 == 2)
        WTF::StringImpl::destroy(v606, (WTF::StringImpl *)v244);
      else
        *(_DWORD *)v606 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v246 = JSC::JSFunction::create();
  *((_QWORD *)this + 5) = v246;
  if (v246 && *(_DWORD *)(v238 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v238 + 192), a2);
  v247 = *(_QWORD *)this;
  v248 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v249 = *(_QWORD **)(v248 + 5272);
  if (!v249 || !*v249 || (v249[1] & 3) != 0)
  {
    v250 = (uint64_t *)(v248 + 5272);
    v251 = *(WTF::StringImpl **)(v248 + 3664);
    if (v251)
      *(_DWORD *)v251 += 2;
    v607 = v251;
    v252 = JSC::createBuiltinExecutable();
    if (v252)
    {
      v577 = v252;
      if ((v252 & 8) != 0)
        v253 = (v252 - 112) | 1;
      else
        v253 = v252 & 0xFFFFFFFFFFFFC000;
      v526 = v248 + 3600;
      if ((v253 & 1) != 0)
        v527 = v253 + 47;
      else
        v527 = *(_QWORD *)v253 + 32;
      v252 = *(_QWORD *)(v527 + 16);
      if (!v252)
        v252 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v527 + 16) = *(_QWORD *)v252;
      *(_QWORD *)v252 = v577;
      *(_QWORD *)(v252 + 8) = v526;
      *(_QWORD *)(v252 + 16) = v250;
    }
    v254 = *v250;
    *v250 = v252;
    if (v254)
      *(_QWORD *)(v254 + 8) = 3;
    if (v607)
    {
      if (*(_DWORD *)v607 == 2)
        WTF::StringImpl::destroy(v607, (WTF::StringImpl *)v253);
      else
        *(_DWORD *)v607 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v255 = JSC::JSFunction::create();
  *((_QWORD *)this + 4) = v255;
  if (v255 && *(_DWORD *)(v247 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v247 + 192), a2);
  v256 = *(_QWORD *)this;
  v257 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v258 = *(_QWORD **)(v257 + 5304);
  if (!v258 || !*v258 || (v258[1] & 3) != 0)
  {
    v259 = (uint64_t *)(v257 + 5304);
    v260 = *(WTF::StringImpl **)(v257 + 4144);
    if (v260)
      *(_DWORD *)v260 += 2;
    v608 = v260;
    v261 = JSC::createBuiltinExecutable();
    if (v261)
    {
      v578 = v261;
      if ((v261 & 8) != 0)
        v262 = (v261 - 112) | 1;
      else
        v262 = v261 & 0xFFFFFFFFFFFFC000;
      v528 = v257 + 3600;
      if ((v262 & 1) != 0)
        v529 = v262 + 47;
      else
        v529 = *(_QWORD *)v262 + 32;
      v261 = *(_QWORD *)(v529 + 16);
      if (!v261)
        v261 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v529 + 16) = *(_QWORD *)v261;
      *(_QWORD *)v261 = v578;
      *(_QWORD *)(v261 + 8) = v528;
      *(_QWORD *)(v261 + 16) = v259;
    }
    v263 = *v259;
    *v259 = v261;
    if (v263)
      *(_QWORD *)(v263 + 8) = 3;
    if (v608)
    {
      if (*(_DWORD *)v608 == 2)
        WTF::StringImpl::destroy(v608, (WTF::StringImpl *)v262);
      else
        *(_DWORD *)v608 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v264 = JSC::JSFunction::create();
  *((_QWORD *)this + 34) = v264;
  if (v264 && *(_DWORD *)(v256 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v256 + 192), a2);
  v265 = *(_QWORD *)this;
  v266 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v267 = *(_QWORD **)(v266 + 5336);
  if (!v267 || !*v267 || (v267[1] & 3) != 0)
  {
    v268 = (uint64_t *)(v266 + 5336);
    v269 = *(WTF::StringImpl **)(v266 + 4080);
    if (v269)
      *(_DWORD *)v269 += 2;
    v609 = v269;
    v270 = JSC::createBuiltinExecutable();
    if (v270)
    {
      v579 = v270;
      if ((v270 & 8) != 0)
        v271 = (v270 - 112) | 1;
      else
        v271 = v270 & 0xFFFFFFFFFFFFC000;
      v530 = v266 + 3600;
      if ((v271 & 1) != 0)
        v531 = v271 + 47;
      else
        v531 = *(_QWORD *)v271 + 32;
      v270 = *(_QWORD *)(v531 + 16);
      if (!v270)
        v270 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v531 + 16) = *(_QWORD *)v270;
      *(_QWORD *)v270 = v579;
      *(_QWORD *)(v270 + 8) = v530;
      *(_QWORD *)(v270 + 16) = v268;
    }
    v272 = *v268;
    *v268 = v270;
    if (v272)
      *(_QWORD *)(v272 + 8) = 3;
    if (v609)
    {
      if (*(_DWORD *)v609 == 2)
        WTF::StringImpl::destroy(v609, (WTF::StringImpl *)v271);
      else
        *(_DWORD *)v609 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v273 = JSC::JSFunction::create();
  *((_QWORD *)this + 30) = v273;
  if (v273 && *(_DWORD *)(v265 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v265 + 192), a2);
  v274 = *(_QWORD *)this;
  v275 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v276 = *(_QWORD **)(v275 + 5368);
  if (!v276 || !*v276 || (v276[1] & 3) != 0)
  {
    v277 = (uint64_t *)(v275 + 5368);
    v278 = *(WTF::StringImpl **)(v275 + 3952);
    if (v278)
      *(_DWORD *)v278 += 2;
    v610 = v278;
    v279 = JSC::createBuiltinExecutable();
    if (v279)
    {
      v555 = v279;
      if ((v279 & 8) != 0)
        v280 = (v279 - 112) | 1;
      else
        v280 = v279 & 0xFFFFFFFFFFFFC000;
      v482 = v275 + 3600;
      if ((v280 & 1) != 0)
        v483 = v280 + 47;
      else
        v483 = *(_QWORD *)v280 + 32;
      v279 = *(_QWORD *)(v483 + 16);
      if (!v279)
        v279 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v483 + 16) = *(_QWORD *)v279;
      *(_QWORD *)v279 = v555;
      *(_QWORD *)(v279 + 8) = v482;
      *(_QWORD *)(v279 + 16) = v277;
    }
    v281 = *v277;
    *v277 = v279;
    if (v281)
      *(_QWORD *)(v281 + 8) = 3;
    if (v610)
    {
      if (*(_DWORD *)v610 == 2)
        WTF::StringImpl::destroy(v610, (WTF::StringImpl *)v280);
      else
        *(_DWORD *)v610 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v282 = JSC::JSFunction::create();
  *((_QWORD *)this + 22) = v282;
  if (v282 && *(_DWORD *)(v274 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v274 + 192), a2);
  v283 = *(_QWORD *)this;
  v284 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v285 = *(_QWORD **)(v284 + 5400);
  if (!v285 || !*v285 || (v285[1] & 3) != 0)
  {
    v286 = (uint64_t *)(v284 + 5400);
    v287 = *(WTF::StringImpl **)(v284 + 3712);
    if (v287)
      *(_DWORD *)v287 += 2;
    v611 = v287;
    v288 = JSC::createBuiltinExecutable();
    if (v288)
    {
      v556 = v288;
      if ((v288 & 8) != 0)
        v289 = (v288 - 112) | 1;
      else
        v289 = v288 & 0xFFFFFFFFFFFFC000;
      v484 = v284 + 3600;
      if ((v289 & 1) != 0)
        v485 = v289 + 47;
      else
        v485 = *(_QWORD *)v289 + 32;
      v288 = *(_QWORD *)(v485 + 16);
      if (!v288)
        v288 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v485 + 16) = *(_QWORD *)v288;
      *(_QWORD *)v288 = v556;
      *(_QWORD *)(v288 + 8) = v484;
      *(_QWORD *)(v288 + 16) = v286;
    }
    v290 = *v286;
    *v286 = v288;
    if (v290)
      *(_QWORD *)(v290 + 8) = 3;
    if (v611)
    {
      if (*(_DWORD *)v611 == 2)
        WTF::StringImpl::destroy(v611, (WTF::StringImpl *)v289);
      else
        *(_DWORD *)v611 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v291 = JSC::JSFunction::create();
  *((_QWORD *)this + 7) = v291;
  if (v291 && *(_DWORD *)(v283 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v283 + 192), a2);
  v292 = *(_QWORD *)this;
  v293 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v294 = *(_QWORD **)(v293 + 5432);
  if (!v294 || !*v294 || (v294[1] & 3) != 0)
  {
    v295 = (uint64_t *)(v293 + 5432);
    v296 = *(WTF::StringImpl **)(v293 + 4048);
    if (v296)
      *(_DWORD *)v296 += 2;
    v612 = v296;
    v297 = JSC::createBuiltinExecutable();
    if (v297)
    {
      v557 = v297;
      if ((v297 & 8) != 0)
        v298 = (v297 - 112) | 1;
      else
        v298 = v297 & 0xFFFFFFFFFFFFC000;
      v486 = v293 + 3600;
      if ((v298 & 1) != 0)
        v487 = v298 + 47;
      else
        v487 = *(_QWORD *)v298 + 32;
      v297 = *(_QWORD *)(v487 + 16);
      if (!v297)
        v297 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v487 + 16) = *(_QWORD *)v297;
      *(_QWORD *)v297 = v557;
      *(_QWORD *)(v297 + 8) = v486;
      *(_QWORD *)(v297 + 16) = v295;
    }
    v299 = *v295;
    *v295 = v297;
    if (v299)
      *(_QWORD *)(v299 + 8) = 3;
    if (v612)
    {
      if (*(_DWORD *)v612 == 2)
        WTF::StringImpl::destroy(v612, (WTF::StringImpl *)v298);
      else
        *(_DWORD *)v612 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v300 = JSC::JSFunction::create();
  *((_QWORD *)this + 28) = v300;
  if (v300 && *(_DWORD *)(v292 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v292 + 192), a2);
  v301 = *(_QWORD *)this;
  v302 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v303 = *(_QWORD **)(v302 + 5464);
  if (!v303 || !*v303 || (v303[1] & 3) != 0)
  {
    v304 = (uint64_t *)(v302 + 5464);
    v305 = *(WTF::StringImpl **)(v302 + 4256);
    if (v305)
      *(_DWORD *)v305 += 2;
    v613 = v305;
    v306 = JSC::createBuiltinExecutable();
    if (v306)
    {
      v558 = v306;
      if ((v306 & 8) != 0)
        v307 = (v306 - 112) | 1;
      else
        v307 = v306 & 0xFFFFFFFFFFFFC000;
      v488 = v302 + 3600;
      if ((v307 & 1) != 0)
        v489 = v307 + 47;
      else
        v489 = *(_QWORD *)v307 + 32;
      v306 = *(_QWORD *)(v489 + 16);
      if (!v306)
        v306 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v489 + 16) = *(_QWORD *)v306;
      *(_QWORD *)v306 = v558;
      *(_QWORD *)(v306 + 8) = v488;
      *(_QWORD *)(v306 + 16) = v304;
    }
    v308 = *v304;
    *v304 = v306;
    if (v308)
      *(_QWORD *)(v308 + 8) = 3;
    if (v613)
    {
      if (*(_DWORD *)v613 == 2)
        WTF::StringImpl::destroy(v613, (WTF::StringImpl *)v307);
      else
        *(_DWORD *)v613 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v309 = JSC::JSFunction::create();
  *((_QWORD *)this + 41) = v309;
  if (v309 && *(_DWORD *)(v301 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v301 + 192), a2);
  v310 = *(_QWORD *)this;
  v311 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v312 = *(_QWORD **)(v311 + 5496);
  if (!v312 || !*v312 || (v312[1] & 3) != 0)
  {
    v313 = (uint64_t *)(v311 + 5496);
    v314 = *(WTF::StringImpl **)(v311 + 3904);
    if (v314)
      *(_DWORD *)v314 += 2;
    v614 = v314;
    v315 = JSC::createBuiltinExecutable();
    if (v315)
    {
      v559 = v315;
      if ((v315 & 8) != 0)
        v316 = (v315 - 112) | 1;
      else
        v316 = v315 & 0xFFFFFFFFFFFFC000;
      v490 = v311 + 3600;
      if ((v316 & 1) != 0)
        v491 = v316 + 47;
      else
        v491 = *(_QWORD *)v316 + 32;
      v315 = *(_QWORD *)(v491 + 16);
      if (!v315)
        v315 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v491 + 16) = *(_QWORD *)v315;
      *(_QWORD *)v315 = v559;
      *(_QWORD *)(v315 + 8) = v490;
      *(_QWORD *)(v315 + 16) = v313;
    }
    v317 = *v313;
    *v313 = v315;
    if (v317)
      *(_QWORD *)(v317 + 8) = 3;
    if (v614)
    {
      if (*(_DWORD *)v614 == 2)
        WTF::StringImpl::destroy(v614, (WTF::StringImpl *)v316);
      else
        *(_DWORD *)v614 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v318 = JSC::JSFunction::create();
  *((_QWORD *)this + 19) = v318;
  if (v318 && *(_DWORD *)(v310 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v310 + 192), a2);
  v319 = *(_QWORD *)this;
  v320 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v321 = *(_QWORD **)(v320 + 5528);
  if (!v321 || !*v321 || (v321[1] & 3) != 0)
  {
    v322 = (uint64_t *)(v320 + 5528);
    v323 = *(WTF::StringImpl **)(v320 + 3984);
    if (v323)
      *(_DWORD *)v323 += 2;
    v615 = v323;
    v324 = JSC::createBuiltinExecutable();
    if (v324)
    {
      v560 = v324;
      if ((v324 & 8) != 0)
        v325 = (v324 - 112) | 1;
      else
        v325 = v324 & 0xFFFFFFFFFFFFC000;
      v492 = v320 + 3600;
      if ((v325 & 1) != 0)
        v493 = v325 + 47;
      else
        v493 = *(_QWORD *)v325 + 32;
      v324 = *(_QWORD *)(v493 + 16);
      if (!v324)
        v324 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v493 + 16) = *(_QWORD *)v324;
      *(_QWORD *)v324 = v560;
      *(_QWORD *)(v324 + 8) = v492;
      *(_QWORD *)(v324 + 16) = v322;
    }
    v326 = *v322;
    *v322 = v324;
    if (v326)
      *(_QWORD *)(v326 + 8) = 3;
    if (v615)
    {
      if (*(_DWORD *)v615 == 2)
        WTF::StringImpl::destroy(v615, (WTF::StringImpl *)v325);
      else
        *(_DWORD *)v615 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v327 = JSC::JSFunction::create();
  *((_QWORD *)this + 24) = v327;
  if (v327 && *(_DWORD *)(v319 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v319 + 192), a2);
  v328 = *(_QWORD *)this;
  v329 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v330 = *(_QWORD **)(v329 + 5560);
  if (!v330 || !*v330 || (v330[1] & 3) != 0)
  {
    v331 = (uint64_t *)(v329 + 5560);
    v332 = *(WTF::StringImpl **)(v329 + 4064);
    if (v332)
      *(_DWORD *)v332 += 2;
    v616 = v332;
    v333 = JSC::createBuiltinExecutable();
    if (v333)
    {
      v561 = v333;
      if ((v333 & 8) != 0)
        v334 = (v333 - 112) | 1;
      else
        v334 = v333 & 0xFFFFFFFFFFFFC000;
      v494 = v329 + 3600;
      if ((v334 & 1) != 0)
        v495 = v334 + 47;
      else
        v495 = *(_QWORD *)v334 + 32;
      v333 = *(_QWORD *)(v495 + 16);
      if (!v333)
        v333 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v495 + 16) = *(_QWORD *)v333;
      *(_QWORD *)v333 = v561;
      *(_QWORD *)(v333 + 8) = v494;
      *(_QWORD *)(v333 + 16) = v331;
    }
    v335 = *v331;
    *v331 = v333;
    if (v335)
      *(_QWORD *)(v335 + 8) = 3;
    if (v616)
    {
      if (*(_DWORD *)v616 == 2)
        WTF::StringImpl::destroy(v616, (WTF::StringImpl *)v334);
      else
        *(_DWORD *)v616 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v336 = JSC::JSFunction::create();
  *((_QWORD *)this + 29) = v336;
  if (v336 && *(_DWORD *)(v328 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v328 + 192), a2);
  v337 = *(_QWORD *)this;
  v338 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v339 = *(_QWORD **)(v338 + 5592);
  if (!v339 || !*v339 || (v339[1] & 3) != 0)
  {
    v340 = (uint64_t *)(v338 + 5592);
    v341 = *(WTF::StringImpl **)(v338 + 4000);
    if (v341)
      *(_DWORD *)v341 += 2;
    v617 = v341;
    v342 = JSC::createBuiltinExecutable();
    if (v342)
    {
      v562 = v342;
      if ((v342 & 8) != 0)
        v343 = (v342 - 112) | 1;
      else
        v343 = v342 & 0xFFFFFFFFFFFFC000;
      v496 = v338 + 3600;
      if ((v343 & 1) != 0)
        v497 = v343 + 47;
      else
        v497 = *(_QWORD *)v343 + 32;
      v342 = *(_QWORD *)(v497 + 16);
      if (!v342)
        v342 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v497 + 16) = *(_QWORD *)v342;
      *(_QWORD *)v342 = v562;
      *(_QWORD *)(v342 + 8) = v496;
      *(_QWORD *)(v342 + 16) = v340;
    }
    v344 = *v340;
    *v340 = v342;
    if (v344)
      *(_QWORD *)(v344 + 8) = 3;
    if (v617)
    {
      if (*(_DWORD *)v617 == 2)
        WTF::StringImpl::destroy(v617, (WTF::StringImpl *)v343);
      else
        *(_DWORD *)v617 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v345 = JSC::JSFunction::create();
  *((_QWORD *)this + 25) = v345;
  if (v345 && *(_DWORD *)(v337 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v337 + 192), a2);
  v346 = *(_QWORD *)this;
  v347 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v348 = *(_QWORD **)(v347 + 5624);
  if (!v348 || !*v348 || (v348[1] & 3) != 0)
  {
    v349 = (uint64_t *)(v347 + 5624);
    v350 = *(WTF::StringImpl **)(v347 + 3936);
    if (v350)
      *(_DWORD *)v350 += 2;
    v618 = v350;
    v351 = JSC::createBuiltinExecutable();
    if (v351)
    {
      v563 = v351;
      if ((v351 & 8) != 0)
        v352 = (v351 - 112) | 1;
      else
        v352 = v351 & 0xFFFFFFFFFFFFC000;
      v498 = v347 + 3600;
      if ((v352 & 1) != 0)
        v499 = v352 + 47;
      else
        v499 = *(_QWORD *)v352 + 32;
      v351 = *(_QWORD *)(v499 + 16);
      if (!v351)
        v351 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v499 + 16) = *(_QWORD *)v351;
      *(_QWORD *)v351 = v563;
      *(_QWORD *)(v351 + 8) = v498;
      *(_QWORD *)(v351 + 16) = v349;
    }
    v353 = *v349;
    *v349 = v351;
    if (v353)
      *(_QWORD *)(v353 + 8) = 3;
    if (v618)
    {
      if (*(_DWORD *)v618 == 2)
        WTF::StringImpl::destroy(v618, (WTF::StringImpl *)v352);
      else
        *(_DWORD *)v618 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v354 = JSC::JSFunction::create();
  *((_QWORD *)this + 21) = v354;
  if (v354 && *(_DWORD *)(v346 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v346 + 192), a2);
  v355 = *(_QWORD *)this;
  v356 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v357 = *(_QWORD **)(v356 + 5656);
  if (!v357 || !*v357 || (v357[1] & 3) != 0)
  {
    v358 = (uint64_t *)(v356 + 5656);
    v359 = *(WTF::StringImpl **)(v356 + 4160);
    if (v359)
      *(_DWORD *)v359 += 2;
    v619 = v359;
    v360 = JSC::createBuiltinExecutable();
    if (v360)
    {
      v564 = v360;
      if ((v360 & 8) != 0)
        v361 = (v360 - 112) | 1;
      else
        v361 = v360 & 0xFFFFFFFFFFFFC000;
      v500 = v356 + 3600;
      if ((v361 & 1) != 0)
        v501 = v361 + 47;
      else
        v501 = *(_QWORD *)v361 + 32;
      v360 = *(_QWORD *)(v501 + 16);
      if (!v360)
        v360 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v501 + 16) = *(_QWORD *)v360;
      *(_QWORD *)v360 = v564;
      *(_QWORD *)(v360 + 8) = v500;
      *(_QWORD *)(v360 + 16) = v358;
    }
    v362 = *v358;
    *v358 = v360;
    if (v362)
      *(_QWORD *)(v362 + 8) = 3;
    if (v619)
    {
      if (*(_DWORD *)v619 == 2)
        WTF::StringImpl::destroy(v619, (WTF::StringImpl *)v361);
      else
        *(_DWORD *)v619 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v363 = JSC::JSFunction::create();
  *((_QWORD *)this + 35) = v363;
  if (v363 && *(_DWORD *)(v355 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v355 + 192), a2);
  v364 = *(_QWORD *)this;
  v365 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v366 = *(_QWORD **)(v365 + 5688);
  if (!v366 || !*v366 || (v366[1] & 3) != 0)
  {
    v367 = (uint64_t *)(v365 + 5688);
    v368 = *(WTF::StringImpl **)(v365 + 4016);
    if (v368)
      *(_DWORD *)v368 += 2;
    v620 = v368;
    v369 = JSC::createBuiltinExecutable();
    if (v369)
    {
      v565 = v369;
      if ((v369 & 8) != 0)
        v370 = (v369 - 112) | 1;
      else
        v370 = v369 & 0xFFFFFFFFFFFFC000;
      v502 = v365 + 3600;
      if ((v370 & 1) != 0)
        v503 = v370 + 47;
      else
        v503 = *(_QWORD *)v370 + 32;
      v369 = *(_QWORD *)(v503 + 16);
      if (!v369)
        v369 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v503 + 16) = *(_QWORD *)v369;
      *(_QWORD *)v369 = v565;
      *(_QWORD *)(v369 + 8) = v502;
      *(_QWORD *)(v369 + 16) = v367;
    }
    v371 = *v367;
    *v367 = v369;
    if (v371)
      *(_QWORD *)(v371 + 8) = 3;
    if (v620)
    {
      if (*(_DWORD *)v620 == 2)
        WTF::StringImpl::destroy(v620, (WTF::StringImpl *)v370);
      else
        *(_DWORD *)v620 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v372 = JSC::JSFunction::create();
  *((_QWORD *)this + 26) = v372;
  if (v372 && *(_DWORD *)(v364 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v364 + 192), a2);
  v373 = *(_QWORD *)this;
  v374 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v375 = *(_QWORD **)(v374 + 5720);
  if (!v375 || !*v375 || (v375[1] & 3) != 0)
  {
    v376 = (uint64_t *)(v374 + 5720);
    v377 = *(WTF::StringImpl **)(v374 + 4112);
    if (v377)
      *(_DWORD *)v377 += 2;
    v621 = v377;
    v378 = JSC::createBuiltinExecutable();
    if (v378)
    {
      v566 = v378;
      if ((v378 & 8) != 0)
        v379 = (v378 - 112) | 1;
      else
        v379 = v378 & 0xFFFFFFFFFFFFC000;
      v504 = v374 + 3600;
      if ((v379 & 1) != 0)
        v505 = v379 + 47;
      else
        v505 = *(_QWORD *)v379 + 32;
      v378 = *(_QWORD *)(v505 + 16);
      if (!v378)
        v378 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v505 + 16) = *(_QWORD *)v378;
      *(_QWORD *)v378 = v566;
      *(_QWORD *)(v378 + 8) = v504;
      *(_QWORD *)(v378 + 16) = v376;
    }
    v380 = *v376;
    *v376 = v378;
    if (v380)
      *(_QWORD *)(v380 + 8) = 3;
    if (v621)
    {
      if (*(_DWORD *)v621 == 2)
        WTF::StringImpl::destroy(v621, (WTF::StringImpl *)v379);
      else
        *(_DWORD *)v621 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v381 = JSC::JSFunction::create();
  *((_QWORD *)this + 32) = v381;
  if (v381 && *(_DWORD *)(v373 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v373 + 192), a2);
  v382 = *(_QWORD *)this;
  v383 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v384 = *(_QWORD **)(v383 + 5752);
  if (!v384 || !*v384 || (v384[1] & 3) != 0)
  {
    v385 = (uint64_t *)(v383 + 5752);
    v386 = *(WTF::StringImpl **)(v383 + 3888);
    if (v386)
      *(_DWORD *)v386 += 2;
    v622 = v386;
    v387 = JSC::createBuiltinExecutable();
    if (v387)
    {
      v567 = v387;
      if ((v387 & 8) != 0)
        v388 = (v387 - 112) | 1;
      else
        v388 = v387 & 0xFFFFFFFFFFFFC000;
      v506 = v383 + 3600;
      if ((v388 & 1) != 0)
        v507 = v388 + 47;
      else
        v507 = *(_QWORD *)v388 + 32;
      v387 = *(_QWORD *)(v507 + 16);
      if (!v387)
        v387 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v507 + 16) = *(_QWORD *)v387;
      *(_QWORD *)v387 = v567;
      *(_QWORD *)(v387 + 8) = v506;
      *(_QWORD *)(v387 + 16) = v385;
    }
    v389 = *v385;
    *v385 = v387;
    if (v389)
      *(_QWORD *)(v389 + 8) = 3;
    if (v622)
    {
      if (*(_DWORD *)v622 == 2)
        WTF::StringImpl::destroy(v622, (WTF::StringImpl *)v388);
      else
        *(_DWORD *)v622 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v390 = JSC::JSFunction::create();
  *((_QWORD *)this + 18) = v390;
  if (v390 && *(_DWORD *)(v382 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v382 + 192), a2);
  v391 = *(_QWORD *)this;
  v392 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v393 = *(_QWORD **)(v392 + 5784);
  if (!v393 || !*v393 || (v393[1] & 3) != 0)
  {
    v394 = (uint64_t *)(v392 + 5784);
    v395 = *(WTF::StringImpl **)(v392 + 3696);
    if (v395)
      *(_DWORD *)v395 += 2;
    v623 = v395;
    v396 = JSC::createBuiltinExecutable();
    if (v396)
    {
      v568 = v396;
      if ((v396 & 8) != 0)
        v397 = (v396 - 112) | 1;
      else
        v397 = v396 & 0xFFFFFFFFFFFFC000;
      v508 = v392 + 3600;
      if ((v397 & 1) != 0)
        v509 = v397 + 47;
      else
        v509 = *(_QWORD *)v397 + 32;
      v396 = *(_QWORD *)(v509 + 16);
      if (!v396)
        v396 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v509 + 16) = *(_QWORD *)v396;
      *(_QWORD *)v396 = v568;
      *(_QWORD *)(v396 + 8) = v508;
      *(_QWORD *)(v396 + 16) = v394;
    }
    v398 = *v394;
    *v394 = v396;
    if (v398)
      *(_QWORD *)(v398 + 8) = 3;
    if (v623)
    {
      if (*(_DWORD *)v623 == 2)
        WTF::StringImpl::destroy(v623, (WTF::StringImpl *)v397);
      else
        *(_DWORD *)v623 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v399 = JSC::JSFunction::create();
  *((_QWORD *)this + 6) = v399;
  if (v399 && *(_DWORD *)(v391 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v391 + 192), a2);
  v400 = *(_QWORD *)this;
  v401 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v402 = *(_QWORD **)(v401 + 5816);
  if (!v402 || !*v402 || (v402[1] & 3) != 0)
  {
    v403 = (uint64_t *)(v401 + 5816);
    v404 = *(WTF::StringImpl **)(v401 + 4128);
    if (v404)
      *(_DWORD *)v404 += 2;
    v624 = v404;
    v405 = JSC::createBuiltinExecutable();
    if (v405)
    {
      v569 = v405;
      if ((v405 & 8) != 0)
        v406 = (v405 - 112) | 1;
      else
        v406 = v405 & 0xFFFFFFFFFFFFC000;
      v510 = v401 + 3600;
      if ((v406 & 1) != 0)
        v511 = v406 + 47;
      else
        v511 = *(_QWORD *)v406 + 32;
      v405 = *(_QWORD *)(v511 + 16);
      if (!v405)
        v405 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v511 + 16) = *(_QWORD *)v405;
      *(_QWORD *)v405 = v569;
      *(_QWORD *)(v405 + 8) = v510;
      *(_QWORD *)(v405 + 16) = v403;
    }
    v407 = *v403;
    *v403 = v405;
    if (v407)
      *(_QWORD *)(v407 + 8) = 3;
    if (v624)
    {
      if (*(_DWORD *)v624 == 2)
        WTF::StringImpl::destroy(v624, (WTF::StringImpl *)v406);
      else
        *(_DWORD *)v624 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v408 = JSC::JSFunction::create();
  *((_QWORD *)this + 33) = v408;
  if (v408 && *(_DWORD *)(v400 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v400 + 192), a2);
  v409 = *(_QWORD *)this;
  v410 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v411 = *(_QWORD **)(v410 + 5848);
  if (!v411 || !*v411 || (v411[1] & 3) != 0)
  {
    v412 = (uint64_t *)(v410 + 5848);
    v413 = *(WTF::StringImpl **)(v410 + 4288);
    if (v413)
      *(_DWORD *)v413 += 2;
    v625 = v413;
    v414 = JSC::createBuiltinExecutable();
    if (v414)
    {
      v570 = v414;
      if ((v414 & 8) != 0)
        v415 = (v414 - 112) | 1;
      else
        v415 = v414 & 0xFFFFFFFFFFFFC000;
      v512 = v410 + 3600;
      if ((v415 & 1) != 0)
        v513 = v415 + 47;
      else
        v513 = *(_QWORD *)v415 + 32;
      v414 = *(_QWORD *)(v513 + 16);
      if (!v414)
        v414 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v513 + 16) = *(_QWORD *)v414;
      *(_QWORD *)v414 = v570;
      *(_QWORD *)(v414 + 8) = v512;
      *(_QWORD *)(v414 + 16) = v412;
    }
    v416 = *v412;
    *v412 = v414;
    if (v416)
      *(_QWORD *)(v416 + 8) = 3;
    if (v625)
    {
      if (*(_DWORD *)v625 == 2)
        WTF::StringImpl::destroy(v625, (WTF::StringImpl *)v415);
      else
        *(_DWORD *)v625 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v417 = JSC::JSFunction::create();
  *((_QWORD *)this + 43) = v417;
  if (v417 && *(_DWORD *)(v409 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v409 + 192), a2);
  v418 = *(_QWORD *)this;
  v419 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v420 = *(_QWORD **)(v419 + 5880);
  if (!v420 || !*v420 || (v420[1] & 3) != 0)
  {
    v421 = (uint64_t *)(v419 + 5880);
    v422 = *(WTF::StringImpl **)(v419 + 4096);
    if (v422)
      *(_DWORD *)v422 += 2;
    v626 = v422;
    v423 = JSC::createBuiltinExecutable();
    if (v423)
    {
      v571 = v423;
      if ((v423 & 8) != 0)
        v424 = (v423 - 112) | 1;
      else
        v424 = v423 & 0xFFFFFFFFFFFFC000;
      v514 = v419 + 3600;
      if ((v424 & 1) != 0)
        v515 = v424 + 47;
      else
        v515 = *(_QWORD *)v424 + 32;
      v423 = *(_QWORD *)(v515 + 16);
      if (!v423)
        v423 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v515 + 16) = *(_QWORD *)v423;
      *(_QWORD *)v423 = v571;
      *(_QWORD *)(v423 + 8) = v514;
      *(_QWORD *)(v423 + 16) = v421;
    }
    v425 = *v421;
    *v421 = v423;
    if (v425)
      *(_QWORD *)(v425 + 8) = 3;
    if (v626)
    {
      if (*(_DWORD *)v626 == 2)
        WTF::StringImpl::destroy(v626, (WTF::StringImpl *)v424);
      else
        *(_DWORD *)v626 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  v426 = JSC::JSFunction::create();
  *((_QWORD *)this + 31) = v426;
  if (v426 && *(_DWORD *)(v418 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v418 + 192), a2);
  v427 = *(_QWORD *)this;
  v428 = *(_QWORD *)(*(_QWORD *)this + 41456);
  v429 = *(_QWORD **)(v428 + 5912);
  if (!v429 || !*v429 || (v429[1] & 3) != 0)
  {
    v430 = (uint64_t *)(v428 + 5912);
    v431 = *(WTF::StringImpl **)(v428 + 3968);
    if (v431)
      *(_DWORD *)v431 += 2;
    v627 = v431;
    v432 = JSC::createBuiltinExecutable();
    if (v432)
    {
      v572 = v432;
      if ((v432 & 8) != 0)
        v433 = (v432 - 112) | 1;
      else
        v433 = v432 & 0xFFFFFFFFFFFFC000;
      v516 = v428 + 3600;
      if ((v433 & 1) != 0)
        v517 = v433 + 47;
      else
        v517 = *(_QWORD *)v433 + 32;
      v432 = *(_QWORD *)(v517 + 16);
      if (!v432)
        v432 = JSC::WeakSet::findAllocator();
      *(_QWORD *)(v517 + 16) = *(_QWORD *)v432;
      *(_QWORD *)v432 = v572;
      *(_QWORD *)(v432 + 8) = v516;
      *(_QWORD *)(v432 + 16) = v430;
    }
    v434 = *v430;
    *v430 = v432;
    if (v434)
      *(_QWORD *)(v434 + 8) = 3;
    if (v627)
    {
      if (*(_DWORD *)v627 == 2)
        WTF::StringImpl::destroy(v627, (WTF::StringImpl *)v433);
      else
        *(_DWORD *)v627 -= 2;
    }
  }
  JSC::UnlinkedFunctionExecutable::link();
  result = JSC::JSFunction::create();
  *((_QWORD *)this + 23) = result;
  if (result)
  {
    if (*(_DWORD *)(v427 + 760) >= *((unsigned __int8 *)a2 + 7))
      return JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v427 + 192), a2);
  }
  return result;
}

unsigned int *WebCore::ContainerNode::querySelectorAll@<X0>(WebCore::ContainerNode *this@<X0>, const WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int16x8_t v7;
  _DWORD *v8;
  unsigned int *result;
  int v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  void *v13;
  int v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  WebCore::Document::resultForSelectorAll(v6, this, a2, (uint64_t *)&v22);
  v8 = v22;
  if (v22)
  {
    result = (unsigned int *)bmalloc::api::isoAllocate();
    result[4] = 1;
    *(_QWORD *)result = off_1E33A8468;
    *((_QWORD *)result + 1) = 0;
    v14 = v8[4];
    v8[4] = v14 + 1;
    *((_QWORD *)result + 3) = v8;
    *(_QWORD *)a3 = result;
    *(_DWORD *)(a3 + 16) = 0;
    if (v14)
      v8[4] = v14;
    else
      result = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    goto LABEL_19;
  }
  WebCore::Document::selectorQueryForString((WebCore::Document *)v6, a2, (uint64_t)&v22, v7);
  if (v24)
  {
    if (v24 == 1)
    {
      v20 = v23;
      v23 = 0;
      *(_BYTE *)a3 = (_BYTE)v22;
      *(_QWORD *)(a3 + 8) = v20;
      v19 = 1;
      *(_DWORD *)(a3 + 16) = 1;
      goto LABEL_18;
    }
    result = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_30;
  }
  result = v22 + 2;
  v10 = v22[6];
  if (v10 != 10)
  {
    v12 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_10;
  }
  if (!v22[5])
  {
LABEL_30:
    __break(0xC471u);
    return result;
  }
  v11 = **(_QWORD **)result;
  v12 = (WTF::StringImpl **)(v11 + 8);
  if ((*(_BYTE *)(v11 + 2) & 0x10) != 0)
    v12 = (WTF::StringImpl **)((char *)*v12 + 8);
LABEL_10:
  v15 = *v12;
  if (*v12)
    *(_DWORD *)v15 += 2;
  v21 = v15;
  v16 = v10 - 9;
  v25 = 0;
  v26 = 0;
  WebCore::SelectorDataList::execute<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)result, (uint64_t)this);
  v18 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v18 + 16) = 1;
  *(_QWORD *)v18 = off_1E33A8508;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 24) = v25;
  *(_QWORD *)(v18 + 32) = v26;
  if (v16 <= 1)
  {
    WebCore::Document::addResultForSelectorAll((WebCore::Document *)v6, this, a2, (WebCore::NodeList *)v18, &v21);
    v15 = v21;
  }
  *(_QWORD *)a3 = v18;
  *(_DWORD *)(a3 + 16) = 0;
  v21 = 0;
  if (!v15)
    goto LABEL_17;
  if (*(_DWORD *)v15 != 2)
  {
    *(_DWORD *)v15 -= 2;
LABEL_17:
    v19 = 0;
LABEL_18:
    result = (unsigned int *)((uint64_t (*)(uint64_t *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore13SelectorQueryENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v19])(&v25, &v22);
    goto LABEL_19;
  }
  result = (unsigned int *)WTF::StringImpl::destroy(v15, v17);
  v19 = v24;
  if (v24 != -1)
    goto LABEL_18;
LABEL_19:
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v6, v13);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::Document::addResultForSelectorAll(WebCore::Document *this, WebCore::ContainerNode *a2, WTF::StringImpl **a3, WebCore::NodeList *a4, WTF::StringImpl **a5)
{
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int i;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  void *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  WTF::StringImpl **v48;
  WebCore::NodeList *v49;
  WTF::StringImpl *result;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  WTF *v62;
  unsigned int v63;
  uint64_t v64;
  WTF *v65;
  WTF::StringImpl *v66;
  uint64_t *v67;
  WTF::StringImpl *v68;
  WebCore::NodeList *v69;
  WTF::StringImpl *v70;

  v9 = (uint64_t *)((char *)this + 2176);
  v10 = *((_DWORD *)this + 546);
  *((_DWORD *)this + 546) = v10 + 1;
  if (v10 > *((_DWORD *)this + 547))
    WTF::WeakHashMap<WebCore::Node,std::unique_ptr<WebCore::QuerySelectorAllResults>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences((uint64_t)this + 2176, a2);
  if ((*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v56 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v56 = 1;
    *(_QWORD *)(v56 + 16) = 0;
    *(_QWORD *)(v56 + 24) = 0;
    *(_QWORD *)(v56 + 8) = a2;
    *(_BYTE *)(v56 + 32) = 0;
    v57 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v57 & 0xFFFF000000000000 | v56;
    v58 = v57 & 0xFFFFFFFFFFFFLL;
    if ((v57 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v59 = __ldaxr((unsigned int *)v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, (unsigned int *)v58));
      if (!v60)
      {
        atomic_store(1u, (unsigned int *)v58);
        v61 = *(unsigned int *)(v58 + 28);
        if ((_DWORD)v61)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v58 + 16), (WTF::StringImpl *)(*(_QWORD *)(v58 + 16) + 32 * v61));
        v62 = *(WTF **)(v58 + 16);
        if (v62)
        {
          *(_QWORD *)(v58 + 16) = 0;
          *(_DWORD *)(v58 + 24) = 0;
          WTF::fastFree(v62, a2);
        }
        WTF::fastFree((WTF *)v58, a2);
      }
    }
  }
  v11 = *((_QWORD *)a2 + 2);
  v12 = v11 & 0xFFFFFFFFFFFFLL;
  do
    v13 = __ldaxr((unsigned int *)v12);
  while (__stlxr(v13 + 1, (unsigned int *)v12));
  do
    v14 = __ldaxr((unsigned int *)v12);
  while (__stlxr(v14 + 1, (unsigned int *)v12));
  if (v12)
  {
    do
    {
      v15 = __ldaxr((unsigned int *)v12);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)v12));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)v12);
      v64 = *(unsigned int *)((v11 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v64)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v11 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v11 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v64));
      v65 = *(WTF **)((v11 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (v65)
      {
        *(_QWORD *)((v11 & 0xFFFFFFFFFFFFLL) + 0x10) = 0;
        *(_DWORD *)((v11 & 0xFFFFFFFFFFFFLL) + 0x18) = 0;
        WTF::fastFree(v65, a2);
      }
      WTF::fastFree((WTF *)(v11 & 0xFFFFFFFFFFFFLL), a2);
    }
  }
  v17 = *v9;
  if (*v9
    || (WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v9, 8u, 0), (v17 = *v9) != 0))
  {
    v18 = 0;
    v19 = *(_DWORD *)(v17 - 8);
  }
  else
  {
    v19 = 0;
    v18 = 1;
  }
  v20 = 0;
  v21 = (v12 + ~(v11 << 32)) ^ ((unint64_t)(v12 + ~(v11 << 32)) >> 22);
  v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
  v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
  v24 = (v23 >> 31) ^ v23;
  for (i = 1; ; ++i)
  {
    v26 = v24 & v19;
    v27 = (uint64_t *)(v17 + 16 * v26);
    v28 = *v27;
    if (*v27 != -1)
      break;
    v20 = (uint64_t *)(v17 + 16 * v26);
LABEL_19:
    v24 = i + v26;
  }
  if (!v28)
  {
    if (v20)
    {
      *v20 = 0;
      v20[1] = 0;
      --*(_DWORD *)(*v9 - 16);
      *v20 = v12;
      v27 = v20;
    }
    else
    {
      *v27 = v12;
    }
    *((_QWORD *)a2 + 2) |= 0x40000000000000uLL;
    v29 = WTF::fastMalloc((WTF *)0xD0);
    *(_OWORD *)(v29 + 32) = 0u;
    *(_OWORD *)(v29 + 48) = 0u;
    *(_OWORD *)(v29 + 64) = 0u;
    *(_OWORD *)(v29 + 80) = 0u;
    *(_OWORD *)(v29 + 96) = 0u;
    *(_OWORD *)(v29 + 112) = 0u;
    *(_OWORD *)(v29 + 128) = 0u;
    *(_OWORD *)(v29 + 144) = 0u;
    *(_OWORD *)(v29 + 160) = 0u;
    *(_OWORD *)(v29 + 176) = 0u;
    *(_OWORD *)(v29 + 192) = 0u;
    *(_OWORD *)(v29 + 16) = 0u;
    *(_QWORD *)v29 = v29 + 16;
    *(_QWORD *)(v29 + 8) = 8;
    v30 = (unsigned int *)v27[1];
    v27[1] = v29;
    if (v30)
    {
      v31 = WTF::Vector<WebCore::QuerySelectorAllResults::Entry,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v30, a2);
      WTF::fastFree((WTF *)v31, v32);
    }
    v33 = *v9;
    if (*v9)
      v34 = *(_DWORD *)(v33 - 12) + 1;
    else
      v34 = 1;
    *(_DWORD *)(v33 - 12) = v34;
    v35 = *v9;
    if (*v9)
      v36 = *(_DWORD *)(v35 - 12);
    else
      v36 = 0;
    v37 = (*(_DWORD *)(v35 - 16) + v36);
    v38 = *(unsigned int *)(v35 - 4);
    if (v38 > 0x400)
    {
      if (v38 <= 2 * v37)
        goto LABEL_75;
    }
    else if (3 * v38 <= 4 * v37)
    {
      if (!(_DWORD)v38)
      {
        v39 = 8;
        goto LABEL_32;
      }
LABEL_75:
      v39 = (_DWORD)v38 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v38));
LABEL_32:
      v27 = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::QuerySelectorAllResults>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::QuerySelectorAllResults>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v9, v39, v27);
      v35 = *v9;
      if (*v9)
        v38 = *(unsigned int *)(v35 - 4);
      else
        v38 = 0;
    }
    v40 = (uint64_t *)(v35 + 16 * v38);
    goto LABEL_35;
  }
  if (v28 != v12)
    goto LABEL_19;
  if ((v18 & 1) != 0)
    v51 = 0;
  else
    v51 = *(unsigned int *)(v17 - 4);
  v40 = (uint64_t *)(v17 + 16 * v51);
  if (v12)
  {
    do
    {
      v52 = __ldaxr((unsigned int *)v12);
      v53 = v52 - 1;
    }
    while (__stlxr(v53, (unsigned int *)v12));
    if (!v53)
    {
      atomic_store(1u, (unsigned int *)v12);
      v54 = *(unsigned int *)(v12 + 28);
      if ((_DWORD)v54)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v54));
      v55 = *(WTF **)(v12 + 16);
      if (v55)
      {
        *(_QWORD *)(v12 + 16) = 0;
        *(_DWORD *)(v12 + 24) = 0;
        WTF::fastFree(v55, a2);
      }
      WTF::fastFree((WTF *)v12, a2);
    }
  }
LABEL_35:
  v41 = *v9;
  if (*v9)
    v41 += 16 * *(unsigned int *)(v41 - 4);
  if (v27 != (uint64_t *)v41)
  {
    while (!*(_QWORD *)(*v27 + 8))
    {
      v67 = v27 + 2;
      v27 = v40;
      if (v67 != v40)
      {
        v27 = v67;
        while ((unint64_t)(*v27 + 1) <= 1)
        {
          v27 += 2;
          if (v27 == v40)
          {
            v27 = v40;
            break;
          }
        }
      }
      if (v27 == (uint64_t *)v41)
      {
        v27 = (uint64_t *)v41;
        break;
      }
    }
  }
  v42 = v27[1];
  if (*(_DWORD *)(v42 + 12) >= 8u)
  {
    v63 = WTF::weakRandomNumber<unsigned int>();
    WTF::Vector<WebCore::QuerySelectorAllResults::Entry,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(v42, (WTF::StringImpl *)(v63 % *(_DWORD *)(v42 + 12)));
  }
  v43 = *a3;
  if (*a3)
    *(_DWORD *)v43 += 2;
  ++*((_DWORD *)a4 + 4);
  v68 = v43;
  v69 = a4;
  v44 = *a5;
  if (*a5)
    *(_DWORD *)v44 += 2;
  v70 = v44;
  v45 = *(_DWORD *)(v42 + 12);
  if (v45 == *(_DWORD *)(v42 + 8))
  {
    WTF::Vector<WebCore::QuerySelectorAllResults::Entry,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::QuerySelectorAllResults::Entry>(v42, (unint64_t)&v68);
    v66 = v70;
    v70 = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
        WTF::StringImpl::destroy(v66, a2);
      else
        *(_DWORD *)v66 -= 2;
    }
  }
  else
  {
    v46 = v45 + 1;
    v47 = *(_QWORD *)v42;
    v68 = 0;
    v48 = (WTF::StringImpl **)(v47 + 24 * v45);
    *v48 = v43;
    v69 = 0;
    v48[1] = a4;
    v48[2] = v44;
    *(_DWORD *)(v42 + 12) = v46;
    v70 = 0;
  }
  v49 = v69;
  v69 = 0;
  if (v49)
  {
    if (*((_DWORD *)v49 + 4) == 1)
      (*(void (**)(WebCore::NodeList *))(*(_QWORD *)v49 + 8))(v49);
    else
      --*((_DWORD *)v49 + 4);
  }
  result = v68;
  v68 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

int32x2_t *WebCore::JSBuiltinFunctions::JSBuiltinFunctions(int32x2_t *this, JSC::VM *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  _QWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  _QWORD *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  _QWORD *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  _DWORD *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int32x2_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  int v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  int v61;
  WTF::StringImpl *v62;
  _QWORD *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  _DWORD *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  _QWORD *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  _DWORD *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  _QWORD *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  _DWORD *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  int32x2_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  int v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  int v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  int v104;
  WTF::StringImpl *v105;
  _QWORD *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  _DWORD *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  _QWORD *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  _DWORD *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  _QWORD *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  _DWORD *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  int32x2_t v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  int v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  int v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  int v147;
  WTF::StringImpl *v148;
  _QWORD *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  _DWORD *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  _QWORD *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  _DWORD *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  _QWORD *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  _DWORD *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  int32x2_t v175;
  WTF::StringImpl *v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  int v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  int v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  int v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  int v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  int v200;
  WTF::StringImpl *v201;
  WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  int v205;
  WTF::StringImpl *v206;
  _QWORD *v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  _DWORD *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  _QWORD *v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218;
  WTF::StringImpl *v219;
  WTF::StringImpl *v220;
  _DWORD *v221;
  WTF::StringImpl *v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  _QWORD *v225;
  WTF::StringImpl *v226;
  WTF::StringImpl *v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  _DWORD *v230;
  WTF::StringImpl *v231;
  WTF::StringImpl *v232;
  WTF::StringImpl *v233;
  _QWORD *v234;
  WTF::StringImpl *v235;
  WTF::StringImpl *v236;
  WTF::StringImpl *v237;
  WTF::StringImpl *v238;
  _DWORD *v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  WTF::StringImpl *v242;
  _QWORD *v243;
  WTF::StringImpl *v244;
  WTF::StringImpl *v245;
  WTF::StringImpl *v246;
  WTF::StringImpl *v247;
  _DWORD *v248;
  WTF::StringImpl *v249;
  WTF::StringImpl *v250;
  WTF::StringImpl *v251;
  _QWORD *v252;
  WTF::StringImpl *v253;
  WTF::StringImpl *v254;
  WTF::StringImpl *v255;
  WTF::StringImpl *v256;
  _DWORD *v257;
  WTF::StringImpl *v258;
  WTF::StringImpl *v259;
  int32x2_t v260;
  WTF::StringImpl *v261;
  WTF::StringImpl *v262;
  WTF::StringImpl *v263;
  WTF::StringImpl *v264;
  int v265;
  WTF::StringImpl *v266;
  WTF::StringImpl *v267;
  WTF::StringImpl *v268;
  WTF::StringImpl *v269;
  int v270;
  WTF::StringImpl *v271;
  WTF::StringImpl *v272;
  WTF::StringImpl *v273;
  WTF::StringImpl *v274;
  int v275;
  WTF::StringImpl *v276;
  WTF::StringImpl *v277;
  WTF::StringImpl *v278;
  WTF::StringImpl *v279;
  int v280;
  WTF::StringImpl *v281;
  WTF::StringImpl *v282;
  WTF::StringImpl *v283;
  WTF::StringImpl *v284;
  int v285;
  WTF::StringImpl *v286;
  _QWORD *v287;
  WTF::StringImpl *v288;
  WTF::StringImpl *v289;
  WTF::StringImpl *v290;
  WTF::StringImpl *v291;
  _DWORD *v292;
  WTF::StringImpl *v293;
  WTF::StringImpl *v294;
  WTF::StringImpl *v295;
  _QWORD *v296;
  WTF::StringImpl *v297;
  WTF::StringImpl *v298;
  WTF::StringImpl *v299;
  WTF::StringImpl *v300;
  _DWORD *v301;
  WTF::StringImpl *v302;
  WTF::StringImpl *v303;
  WTF::StringImpl *v304;
  _QWORD *v305;
  WTF::StringImpl *v306;
  WTF::StringImpl *v307;
  WTF::StringImpl *v308;
  WTF::StringImpl *v309;
  _DWORD *v310;
  WTF::StringImpl *v311;
  WTF::StringImpl *v312;
  WTF::StringImpl *v313;
  _QWORD *v314;
  WTF::StringImpl *v315;
  WTF::StringImpl *v316;
  WTF::StringImpl *v317;
  WTF::StringImpl *v318;
  _DWORD *v319;
  WTF::StringImpl *v320;
  WTF::StringImpl *v321;
  WTF::StringImpl *v322;
  _QWORD *v323;
  WTF::StringImpl *v324;
  WTF::StringImpl *v325;
  WTF::StringImpl *v326;
  WTF::StringImpl *v327;
  _DWORD *v328;
  WTF::StringImpl *v329;
  WTF::StringImpl *v330;
  int32x2_t v331;
  WTF::StringImpl *v332;
  WTF::StringImpl *v333;
  WTF::StringImpl *v334;
  WTF::StringImpl *v335;
  int v336;
  WTF::StringImpl *v337;
  WTF::StringImpl *v338;
  WTF::StringImpl *v339;
  WTF::StringImpl *v340;
  int v341;
  WTF::StringImpl *v342;
  WTF::StringImpl *v343;
  WTF::StringImpl *v344;
  WTF::StringImpl *v345;
  int v346;
  WTF::StringImpl *v347;
  WTF::StringImpl *v348;
  WTF::StringImpl *v349;
  WTF::StringImpl *v350;
  int v351;
  WTF::StringImpl *v352;
  _QWORD *v353;
  WTF::StringImpl *v354;
  WTF::StringImpl *v355;
  WTF::StringImpl *v356;
  WTF::StringImpl *v357;
  _DWORD *v358;
  WTF::StringImpl *v359;
  WTF::StringImpl *v360;
  WTF::StringImpl *v361;
  _QWORD *v362;
  WTF::StringImpl *v363;
  WTF::StringImpl *v364;
  WTF::StringImpl *v365;
  WTF::StringImpl *v366;
  _DWORD *v367;
  WTF::StringImpl *v368;
  WTF::StringImpl *v369;
  WTF::StringImpl *v370;
  _QWORD *v371;
  WTF::StringImpl *v372;
  WTF::StringImpl *v373;
  WTF::StringImpl *v374;
  WTF::StringImpl *v375;
  _DWORD *v376;
  WTF::StringImpl *v377;
  WTF::StringImpl *v378;
  WTF::StringImpl *v379;
  _QWORD *v380;
  WTF::StringImpl *v381;
  WTF::StringImpl *v382;
  WTF::StringImpl *v383;
  WTF::StringImpl *v384;
  _DWORD *v385;
  WTF::StringImpl *v386;
  WTF::StringImpl *v387;
  int32x2_t v388;
  WTF::StringImpl *v389;
  WTF::StringImpl *v390;
  WTF::StringImpl *v391;
  WTF::StringImpl *v392;
  int v393;
  WTF::StringImpl *v394;
  WTF::StringImpl *v395;
  WTF::StringImpl *v396;
  WTF::StringImpl *v397;
  int v398;
  WTF::StringImpl *v399;
  WTF::StringImpl *v400;
  WTF::StringImpl *v401;
  WTF::StringImpl *v402;
  int v403;
  WTF::StringImpl *v404;
  WTF::StringImpl *v405;
  WTF::StringImpl *v406;
  WTF::StringImpl *v407;
  int v408;
  WTF::StringImpl *v409;
  WTF::StringImpl *v410;
  WTF::StringImpl *v411;
  WTF::StringImpl *v412;
  int v413;
  WTF::StringImpl *v414;
  _QWORD *v415;
  WTF::StringImpl *v416;
  WTF::StringImpl *v417;
  WTF::StringImpl *v418;
  WTF::StringImpl *v419;
  _DWORD *v420;
  WTF::StringImpl *v421;
  WTF::StringImpl *v422;
  WTF::StringImpl *v423;
  _QWORD *v424;
  WTF::StringImpl *v425;
  WTF::StringImpl *v426;
  WTF::StringImpl *v427;
  WTF::StringImpl *v428;
  _DWORD *v429;
  WTF::StringImpl *v430;
  WTF::StringImpl *v431;
  WTF::StringImpl *v432;
  _QWORD *v433;
  WTF::StringImpl *v434;
  WTF::StringImpl *v435;
  WTF::StringImpl *v436;
  WTF::StringImpl *v437;
  _DWORD *v438;
  WTF::StringImpl *v439;
  WTF::StringImpl *v440;
  WTF::StringImpl *v441;
  _QWORD *v442;
  WTF::StringImpl *v443;
  WTF::StringImpl *v444;
  WTF::StringImpl *v445;
  WTF::StringImpl *v446;
  _DWORD *v447;
  WTF::StringImpl *v448;
  WTF::StringImpl *v449;
  WTF::StringImpl *v450;
  _QWORD *v451;
  WTF::StringImpl *v452;
  WTF::StringImpl *v453;
  WTF::StringImpl *v454;
  WTF::StringImpl *v455;
  _DWORD *v456;
  WTF::StringImpl *v457;
  WTF::StringImpl *v458;
  int32x2_t v459;
  WTF::StringImpl *v460;
  WTF::StringImpl *v461;
  WTF::StringImpl *v462;
  WTF::StringImpl *v463;
  int v464;
  WTF::StringImpl *v465;
  WTF::StringImpl *v466;
  WTF::StringImpl *v467;
  WTF::StringImpl *v468;
  int v469;
  WTF::StringImpl *v470;
  WTF::StringImpl *v471;
  WTF::StringImpl *v472;
  WTF::StringImpl *v473;
  int v474;
  WTF::StringImpl *v475;
  WTF::StringImpl *v476;
  WTF::StringImpl *v477;
  WTF::StringImpl *v478;
  int v479;
  WTF::StringImpl *v480;
  WTF::StringImpl *v481;
  WTF::StringImpl *v482;
  WTF::StringImpl *v483;
  int v484;
  WTF::StringImpl *v485;
  _QWORD *v486;
  WTF::StringImpl *v487;
  WTF::StringImpl *v488;
  WTF::StringImpl *v489;
  WTF::StringImpl *v490;
  _DWORD *v491;
  WTF::StringImpl *v492;
  WTF::StringImpl *v493;
  WTF::StringImpl *v494;
  _QWORD *v495;
  WTF::StringImpl *v496;
  WTF::StringImpl *v497;
  WTF::StringImpl *v498;
  WTF::StringImpl *v499;
  _DWORD *v500;
  WTF::StringImpl *v501;
  WTF::StringImpl *v502;
  WTF::StringImpl *v503;
  _QWORD *v504;
  WTF::StringImpl *v505;
  WTF::StringImpl *v506;
  WTF::StringImpl *v507;
  WTF::StringImpl *v508;
  _DWORD *v509;
  WTF::StringImpl *v510;
  WTF::StringImpl *v511;
  WTF::StringImpl *v512;
  _QWORD *v513;
  WTF::StringImpl *v514;
  WTF::StringImpl *v515;
  WTF::StringImpl *v516;
  WTF::StringImpl *v517;
  _DWORD *v518;
  WTF::StringImpl *v519;
  WTF::StringImpl *v520;
  WTF::StringImpl *v521;
  _QWORD *v522;
  WTF::StringImpl *v523;
  WTF::StringImpl *v524;
  WTF::StringImpl *v525;
  WTF::StringImpl *v526;
  _DWORD *v527;
  WTF::StringImpl *v528;
  WTF::StringImpl *v529;
  int32x2_t v530;
  WTF::StringImpl *v531;
  WTF::StringImpl *v532;
  WTF::StringImpl *v533;
  WTF::StringImpl *v534;
  int v535;
  WTF::StringImpl *v536;
  WTF::StringImpl *v537;
  WTF::StringImpl *v538;
  WTF::StringImpl *v539;
  int v540;
  WTF::StringImpl *v541;
  WTF::StringImpl *v542;
  WTF::StringImpl *v543;
  WTF::StringImpl *v544;
  int v545;
  WTF::StringImpl *v546;
  WTF::StringImpl *v547;
  WTF::StringImpl *v548;
  WTF::StringImpl *v549;
  int v550;
  WTF::StringImpl *v551;
  WTF::StringImpl *v552;
  WTF::StringImpl *v553;
  WTF::StringImpl *v554;
  int v555;
  WTF::StringImpl *v556;
  _QWORD *v557;
  WTF::StringImpl *v558;
  WTF::StringImpl *v559;
  WTF::StringImpl *v560;
  WTF::StringImpl *v561;
  _DWORD *v562;
  WTF::StringImpl *v563;
  WTF::StringImpl *v564;
  WTF::StringImpl *v565;
  _QWORD *v566;
  WTF::StringImpl *v567;
  WTF::StringImpl *v568;
  WTF::StringImpl *v569;
  WTF::StringImpl *v570;
  _DWORD *v571;
  WTF::StringImpl *v572;
  WTF::StringImpl *v573;
  WTF::StringImpl *v574;
  _QWORD *v575;
  WTF::StringImpl *v576;
  WTF::StringImpl *v577;
  WTF::StringImpl *v578;
  WTF::StringImpl *v579;
  _DWORD *v580;
  WTF::StringImpl *v581;
  WTF::StringImpl *v582;
  WTF::StringImpl *v583;
  _QWORD *v584;
  WTF::StringImpl *v585;
  WTF::StringImpl *v586;
  WTF::StringImpl *v587;
  WTF::StringImpl *v588;
  _DWORD *v589;
  WTF::StringImpl *v590;
  WTF::StringImpl *v591;
  WTF::StringImpl *v592;
  _QWORD *v593;
  WTF::StringImpl *v594;
  WTF::StringImpl *v595;
  WTF::StringImpl *v596;
  WTF::StringImpl *v597;
  _DWORD *v598;
  WTF::StringImpl *v599;
  WTF::StringImpl *v600;
  int32x2_t v601;
  WTF::StringImpl *v602;
  WTF::StringImpl *v603;
  WTF::StringImpl *v604;
  WTF::StringImpl *v605;
  int v606;
  WTF::StringImpl *v607;
  WTF::StringImpl *v608;
  WTF::StringImpl *v609;
  WTF::StringImpl *v610;
  int v611;
  WTF::StringImpl *v612;
  WTF::StringImpl *v613;
  WTF::StringImpl *v614;
  WTF::StringImpl *v615;
  int v616;
  WTF::StringImpl *v617;
  _QWORD *v618;
  WTF::StringImpl *v619;
  WTF::StringImpl *v620;
  WTF::StringImpl *v621;
  WTF::StringImpl *v622;
  _DWORD *v623;
  WTF::StringImpl *v624;
  WTF::StringImpl *v625;
  WTF::StringImpl *v626;
  _QWORD *v627;
  WTF::StringImpl *v628;
  WTF::StringImpl *v629;
  WTF::StringImpl *v630;
  WTF::StringImpl *v631;
  _DWORD *v632;
  WTF::StringImpl *v633;
  WTF::StringImpl *v634;
  WTF::StringImpl *v635;
  _QWORD *v636;
  WTF::StringImpl *v637;
  WTF::StringImpl *v638;
  WTF::StringImpl *v639;
  WTF::StringImpl *v640;
  _DWORD *v641;
  WTF::StringImpl *v642;
  WTF::StringImpl *v643;
  int32x2_t v644;
  WTF::StringImpl *v645;
  WTF::StringImpl *v646;
  WTF::StringImpl *v647;
  WTF::StringImpl *v648;
  int v649;
  WTF::StringImpl *v650;
  WTF::StringImpl *v651;
  WTF::StringImpl *v652;
  WTF::StringImpl *v653;
  int v654;
  WTF::StringImpl *v655;
  WTF::StringImpl *v656;
  WTF::StringImpl *v657;
  WTF::StringImpl *v658;
  int v659;
  WTF::StringImpl *v660;
  WTF::StringImpl *v661;
  WTF::StringImpl *v662;
  WTF::StringImpl *v663;
  int v664;
  WTF::StringImpl *v665;
  WTF::StringImpl *v666;
  WTF::StringImpl *v667;
  WTF::StringImpl *v668;
  int v669;
  WTF::StringImpl *v670;
  WTF::StringImpl *v671;
  WTF::StringImpl *v672;
  WTF::StringImpl *v673;
  int v674;
  WTF::StringImpl *v675;
  WTF::StringImpl *v676;
  WTF::StringImpl *v677;
  WTF::StringImpl *v678;
  int v679;
  WTF::StringImpl *v680;
  WTF::StringImpl *v681;
  WTF::StringImpl *v682;
  WTF::StringImpl *v683;
  int v684;
  WTF::StringImpl *v685;
  _QWORD *v686;
  WTF::StringImpl *v687;
  WTF::StringImpl *v688;
  WTF::StringImpl *v689;
  WTF::StringImpl *v690;
  _DWORD *v691;
  WTF::StringImpl *v692;
  WTF::StringImpl *v693;
  WTF::StringImpl *v694;
  _QWORD *v695;
  WTF::StringImpl *v696;
  WTF::StringImpl *v697;
  WTF::StringImpl *v698;
  WTF::StringImpl *v699;
  _DWORD *v700;
  WTF::StringImpl *v701;
  WTF::StringImpl *v702;
  WTF::StringImpl *v703;
  _QWORD *v704;
  WTF::StringImpl *v705;
  WTF::StringImpl *v706;
  WTF::StringImpl *v707;
  WTF::StringImpl *v708;
  _DWORD *v709;
  WTF::StringImpl *v710;
  WTF::StringImpl *v711;
  WTF::StringImpl *v712;
  _QWORD *v713;
  WTF::StringImpl *v714;
  WTF::StringImpl *v715;
  WTF::StringImpl *v716;
  WTF::StringImpl *v717;
  _DWORD *v718;
  WTF::StringImpl *v719;
  WTF::StringImpl *v720;
  WTF::StringImpl *v721;
  _QWORD *v722;
  WTF::StringImpl *v723;
  WTF::StringImpl *v724;
  WTF::StringImpl *v725;
  WTF::StringImpl *v726;
  _DWORD *v727;
  WTF::StringImpl *v728;
  WTF::StringImpl *v729;
  WTF::StringImpl *v730;
  _QWORD *v731;
  WTF::StringImpl *v732;
  WTF::StringImpl *v733;
  WTF::StringImpl *v734;
  WTF::StringImpl *v735;
  _DWORD *v736;
  WTF::StringImpl *v737;
  WTF::StringImpl *v738;
  WTF::StringImpl *v739;
  _QWORD *v740;
  WTF::StringImpl *v741;
  WTF::StringImpl *v742;
  WTF::StringImpl *v743;
  WTF::StringImpl *v744;
  _DWORD *v745;
  WTF::StringImpl *v746;
  WTF::StringImpl *v747;
  WTF::StringImpl *v748;
  _QWORD *v749;
  WTF::StringImpl *v750;
  WTF::StringImpl *v751;
  WTF::StringImpl *v752;
  WTF::StringImpl *v753;
  _DWORD *v754;
  WTF::StringImpl *v755;
  WTF::StringImpl *v756;
  int32x2_t v757;
  WTF::StringImpl *v758;
  WTF::StringImpl *v759;
  WTF::StringImpl *v760;
  WTF::StringImpl *v761;
  int v762;
  WTF::StringImpl *v763;
  WTF::StringImpl *v764;
  WTF::StringImpl *v765;
  WTF::StringImpl *v766;
  int v767;
  WTF::StringImpl *v768;
  _QWORD *v769;
  WTF::StringImpl *v770;
  WTF::StringImpl *v771;
  WTF::StringImpl *v772;
  WTF::StringImpl *v773;
  _DWORD *v774;
  WTF::StringImpl *v775;
  WTF::StringImpl *v776;
  WTF::StringImpl *v777;
  _QWORD *v778;
  WTF::StringImpl *v779;
  WTF::StringImpl *v780;
  WTF::StringImpl *v781;
  WTF::StringImpl *v782;
  _DWORD *v783;
  WTF::StringImpl *v784;
  WTF::StringImpl *v785;
  int32x2_t v786;
  WTF::StringImpl *v787;
  WTF::StringImpl *v788;
  WTF::StringImpl *v789;
  WTF::StringImpl *v790;
  int v791;
  WTF::StringImpl *v792;
  WTF::StringImpl *v793;
  WTF::StringImpl *v794;
  WTF::StringImpl *v795;
  int v796;
  WTF::StringImpl *v797;
  WTF::StringImpl *v798;
  WTF::StringImpl *v799;
  WTF::StringImpl *v800;
  int v801;
  WTF::StringImpl *v802;
  WTF::StringImpl *v803;
  WTF::StringImpl *v804;
  WTF::StringImpl *v805;
  int v806;
  WTF::StringImpl *v807;
  WTF::StringImpl *v808;
  WTF::StringImpl *v809;
  WTF::StringImpl *v810;
  int v811;
  WTF::StringImpl *v812;
  WTF::StringImpl *v813;
  WTF::StringImpl *v814;
  WTF::StringImpl *v815;
  int v816;
  WTF::StringImpl *v817;
  _QWORD *v818;
  WTF::StringImpl *v819;
  WTF::StringImpl *v820;
  WTF::StringImpl *v821;
  WTF::StringImpl *v822;
  _DWORD *v823;
  WTF::StringImpl *v824;
  WTF::StringImpl *v825;
  WTF::StringImpl *v826;
  _QWORD *v827;
  WTF::StringImpl *v828;
  WTF::StringImpl *v829;
  WTF::StringImpl *v830;
  WTF::StringImpl *v831;
  _DWORD *v832;
  WTF::StringImpl *v833;
  WTF::StringImpl *v834;
  WTF::StringImpl *v835;
  _QWORD *v836;
  WTF::StringImpl *v837;
  WTF::StringImpl *v838;
  WTF::StringImpl *v839;
  WTF::StringImpl *v840;
  _DWORD *v841;
  WTF::StringImpl *v842;
  WTF::StringImpl *v843;
  WTF::StringImpl *v844;
  _QWORD *v845;
  WTF::StringImpl *v846;
  WTF::StringImpl *v847;
  WTF::StringImpl *v848;
  WTF::StringImpl *v849;
  _DWORD *v850;
  WTF::StringImpl *v851;
  WTF::StringImpl *v852;
  WTF::StringImpl *v853;
  _QWORD *v854;
  WTF::StringImpl *v855;
  WTF::StringImpl *v856;
  WTF::StringImpl *v857;
  WTF::StringImpl *v858;
  _DWORD *v859;
  WTF::StringImpl *v860;
  WTF::StringImpl *v861;
  WTF::StringImpl *v862;
  _QWORD *v863;
  WTF::StringImpl *v864;
  WTF::StringImpl *v865;
  WTF::StringImpl *v866;
  WTF::StringImpl *v867;
  _DWORD *v868;
  WTF::StringImpl *v869;
  WTF::StringImpl *v870;
  int32x2_t v871;
  WTF::StringImpl *v872;
  WTF::StringImpl *v873;
  WTF::StringImpl *v874;
  WTF::StringImpl *v875;
  int v876;
  WTF::StringImpl *v877;
  WTF::StringImpl *v878;
  WTF::StringImpl *v879;
  WTF::StringImpl *v880;
  int v881;
  WTF::StringImpl *v882;
  WTF::StringImpl *v883;
  WTF::StringImpl *v884;
  WTF::StringImpl *v885;
  int v886;
  WTF::StringImpl *v887;
  WTF::StringImpl *v888;
  WTF::StringImpl *v889;
  WTF::StringImpl *v890;
  int v891;
  WTF::StringImpl *v892;
  _QWORD *v893;
  WTF::StringImpl *v894;
  WTF::StringImpl *v895;
  WTF::StringImpl *v896;
  WTF::StringImpl *v897;
  _DWORD *v898;
  WTF::StringImpl *v899;
  WTF::StringImpl *v900;
  WTF::StringImpl *v901;
  _QWORD *v902;
  WTF::StringImpl *v903;
  WTF::StringImpl *v904;
  WTF::StringImpl *v905;
  WTF::StringImpl *v906;
  _DWORD *v907;
  WTF::StringImpl *v908;
  WTF::StringImpl *v909;
  WTF::StringImpl *v910;
  _QWORD *v911;
  WTF::StringImpl *v912;
  WTF::StringImpl *v913;
  WTF::StringImpl *v914;
  WTF::StringImpl *v915;
  _DWORD *v916;
  WTF::StringImpl *v917;
  WTF::StringImpl *v918;
  WTF::StringImpl *v919;
  _QWORD *v920;
  WTF::StringImpl *v921;
  WTF::StringImpl *v922;
  WTF::StringImpl *v923;
  WTF::StringImpl *v924;
  _DWORD *v925;
  WTF::StringImpl *v926;
  WTF::StringImpl *v927;
  int32x2_t v928;
  WTF::StringImpl *v929;
  WTF::StringImpl *v930;
  WTF::StringImpl *v931;
  WTF::StringImpl *v932;
  int v933;
  WTF::StringImpl *v934;
  WTF::StringImpl *v935;
  WTF::StringImpl *v936;
  _DWORD *v937;
  WTF::StringImpl *v938;
  WTF::StringImpl *v939;
  WTF::StringImpl *v940;
  int32x2_t v942;
  WTF::StringImpl *v943;
  WTF::StringImpl *v944[2];
  __int128 v945;
  __int128 v946;
  WTF::StringImpl *v947;
  WTF::StringImpl *v948;

  *this = (int32x2_t)a2;
  this[1] = (int32x2_t)&off_1E3393EA8;
  this[2] = (int32x2_t)a2;
  WTF::AtomStringImpl::addLiteral();
  this[3] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v4);
  v6 = v944[0];
  v7 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[4] = (int32x2_t)v6;
  if (v7)
    *(_DWORD *)v6 = v7;
  else
    WTF::StringImpl::destroy(v6, v5);
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v5);
  else
    *(_DWORD *)v3 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[5] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v9);
  v11 = v944[0];
  v12 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[6] = (int32x2_t)v11;
  if (v12)
    *(_DWORD *)v11 = v12;
  else
    WTF::StringImpl::destroy(v11, v10);
  if (*(_DWORD *)v8 == 2)
    WTF::StringImpl::destroy(v8, v10);
  else
    *(_DWORD *)v8 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[7] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v14);
  v16 = v944[0];
  v17 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[8] = (int32x2_t)v16;
  if (v17)
    *(_DWORD *)v16 = v17;
  else
    WTF::StringImpl::destroy(v16, v15);
  if (*(_DWORD *)v13 == 2)
    WTF::StringImpl::destroy(v13, v15);
  else
    *(_DWORD *)v13 -= 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v18 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v21 = v948;
  v948 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  *v19 = off_1E33948F0;
  v22 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  if (v18)
    v23 = v18;
  else
    v23 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *(_DWORD *)v23 += 2;
  v19[15] = v23;
  this[9] = (int32x2_t)v19;
  this[10].i32[0] = 0;
  this[10].i32[1] = *((_DWORD *)v23 + 1);
  this[11] = vmax_s32(v942, 0);
  v24 = v947;
  v947 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v20);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v25)
  {
    if (v25[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
    else
      --v25[2];
  }
  v26 = v944[0];
  v944[0] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v20);
    else
      *(_DWORD *)v26 -= 2;
  }
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v20);
    else
      *(_DWORD *)v18 -= 2;
  }
  v27 = v943;
  v943 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v20);
    else
      *(_DWORD *)v27 -= 2;
  }
  this[12] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v28 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v31 = v948;
  v948 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v30);
    else
      *(_DWORD *)v31 -= 2;
  }
  *v29 = off_1E33948F0;
  if (v28)
    v32 = v28;
  else
    v32 = v22;
  *(_DWORD *)v32 += 2;
  v29[15] = v32;
  this[13] = (int32x2_t)v29;
  this[14].i32[0] = 0;
  this[14].i32[1] = *((_DWORD *)v32 + 1);
  this[15] = vmax_s32(v942, 0);
  v33 = v947;
  v947 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v30);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v34)
  {
    if (v34[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
    else
      --v34[2];
  }
  v35 = v944[0];
  v944[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v30);
    else
      *(_DWORD *)v35 -= 2;
  }
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v30);
    else
      *(_DWORD *)v28 -= 2;
  }
  v36 = v943;
  v943 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v30);
    else
      *(_DWORD *)v36 -= 2;
  }
  this[16] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v37 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v40 = v948;
  v948 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v39);
    else
      *(_DWORD *)v40 -= 2;
  }
  *v38 = off_1E33948F0;
  if (v37)
    v41 = v37;
  else
    v41 = v22;
  *(_DWORD *)v41 += 2;
  v38[15] = v41;
  this[17] = (int32x2_t)v38;
  this[18].i32[0] = 0;
  this[18].i32[1] = *((_DWORD *)v41 + 1);
  this[19] = vmax_s32(v942, 0);
  v42 = v947;
  v947 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v39);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v43)
  {
    if (v43[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 8))(v43);
    else
      --v43[2];
  }
  v44 = v944[0];
  v944[0] = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v39);
    else
      *(_DWORD *)v44 -= 2;
  }
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v39);
    else
      *(_DWORD *)v37 -= 2;
  }
  v45 = v943;
  v943 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v39);
    else
      *(_DWORD *)v45 -= 2;
  }
  v46 = *this;
  this[20] = 0;
  this[21] = (int32x2_t)&off_1E3393ED8;
  this[22] = v46;
  WTF::AtomStringImpl::addLiteral();
  this[23] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v47 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v48);
  v50 = v944[0];
  v51 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[24] = (int32x2_t)v50;
  if (v51)
    *(_DWORD *)v50 = v51;
  else
    WTF::StringImpl::destroy(v50, v49);
  if (*(_DWORD *)v47 == 2)
    WTF::StringImpl::destroy(v47, v49);
  else
    *(_DWORD *)v47 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[25] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v52 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v53);
  v55 = v944[0];
  v56 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[26] = (int32x2_t)v55;
  if (v56)
    *(_DWORD *)v55 = v56;
  else
    WTF::StringImpl::destroy(v55, v54);
  if (*(_DWORD *)v52 == 2)
    WTF::StringImpl::destroy(v52, v54);
  else
    *(_DWORD *)v52 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[27] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v57 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v58);
  v60 = v944[0];
  v61 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[28] = (int32x2_t)v60;
  if (v61)
    *(_DWORD *)v60 = v61;
  else
    WTF::StringImpl::destroy(v60, v59);
  if (*(_DWORD *)v57 == 2)
    WTF::StringImpl::destroy(v57, v59);
  else
    *(_DWORD *)v57 -= 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v62 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v63 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v65 = v948;
  v948 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, v64);
    else
      *(_DWORD *)v65 -= 2;
  }
  *v63 = off_1E33948F0;
  if (v62)
    v66 = v62;
  else
    v66 = v22;
  *(_DWORD *)v66 += 2;
  v63[15] = v66;
  this[29] = (int32x2_t)v63;
  this[30].i32[0] = 0;
  this[30].i32[1] = *((_DWORD *)v66 + 1);
  this[31] = vmax_s32(v942, 0);
  v67 = v947;
  v947 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, v64);
    else
      *(_DWORD *)v67 -= 2;
  }
  v68 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v68)
  {
    if (v68[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v68 + 8))(v68);
    else
      --v68[2];
  }
  v69 = v944[0];
  v944[0] = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, v64);
    else
      *(_DWORD *)v69 -= 2;
  }
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v64);
    else
      *(_DWORD *)v62 -= 2;
  }
  v70 = v943;
  v943 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
      WTF::StringImpl::destroy(v70, v64);
    else
      *(_DWORD *)v70 -= 2;
  }
  this[32] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v71 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v72 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v74 = v948;
  v948 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v73);
    else
      *(_DWORD *)v74 -= 2;
  }
  *v72 = off_1E33948F0;
  if (v71)
    v75 = v71;
  else
    v75 = v22;
  *(_DWORD *)v75 += 2;
  v72[15] = v75;
  this[33] = (int32x2_t)v72;
  this[34].i32[0] = 0;
  this[34].i32[1] = *((_DWORD *)v75 + 1);
  this[35] = vmax_s32(v942, 0);
  v76 = v947;
  v947 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
      WTF::StringImpl::destroy(v76, v73);
    else
      *(_DWORD *)v76 -= 2;
  }
  v77 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v77)
  {
    if (v77[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v77 + 8))(v77);
    else
      --v77[2];
  }
  v78 = v944[0];
  v944[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
      WTF::StringImpl::destroy(v78, v73);
    else
      *(_DWORD *)v78 -= 2;
  }
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
      WTF::StringImpl::destroy(v71, v73);
    else
      *(_DWORD *)v71 -= 2;
  }
  v79 = v943;
  v943 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
      WTF::StringImpl::destroy(v79, v73);
    else
      *(_DWORD *)v79 -= 2;
  }
  this[36] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v80 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v81 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v83 = v948;
  v948 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
      WTF::StringImpl::destroy(v83, v82);
    else
      *(_DWORD *)v83 -= 2;
  }
  *v81 = off_1E33948F0;
  if (v80)
    v84 = v80;
  else
    v84 = v22;
  *(_DWORD *)v84 += 2;
  v81[15] = v84;
  this[37] = (int32x2_t)v81;
  this[38].i32[0] = 0;
  this[38].i32[1] = *((_DWORD *)v84 + 1);
  this[39] = vmax_s32(v942, 0);
  v85 = v947;
  v947 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
      WTF::StringImpl::destroy(v85, v82);
    else
      *(_DWORD *)v85 -= 2;
  }
  v86 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v86)
  {
    if (v86[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v86 + 8))(v86);
    else
      --v86[2];
  }
  v87 = v944[0];
  v944[0] = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
      WTF::StringImpl::destroy(v87, v82);
    else
      *(_DWORD *)v87 -= 2;
  }
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
      WTF::StringImpl::destroy(v80, v82);
    else
      *(_DWORD *)v80 -= 2;
  }
  v88 = v943;
  v943 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
      WTF::StringImpl::destroy(v88, v82);
    else
      *(_DWORD *)v88 -= 2;
  }
  v89 = *this;
  this[40] = 0;
  this[41] = (int32x2_t)&off_1E3393F08;
  this[42] = v89;
  WTF::AtomStringImpl::addLiteral();
  this[43] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v90 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v91);
  v93 = v944[0];
  v94 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[44] = (int32x2_t)v93;
  if (v94)
    *(_DWORD *)v93 = v94;
  else
    WTF::StringImpl::destroy(v93, v92);
  if (*(_DWORD *)v90 == 2)
    WTF::StringImpl::destroy(v90, v92);
  else
    *(_DWORD *)v90 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[45] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v95 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v96);
  v98 = v944[0];
  v99 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[46] = (int32x2_t)v98;
  if (v99)
    *(_DWORD *)v98 = v99;
  else
    WTF::StringImpl::destroy(v98, v97);
  if (*(_DWORD *)v95 == 2)
    WTF::StringImpl::destroy(v95, v97);
  else
    *(_DWORD *)v95 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[47] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v100 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v101);
  v103 = v944[0];
  v104 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[48] = (int32x2_t)v103;
  if (v104)
    *(_DWORD *)v103 = v104;
  else
    WTF::StringImpl::destroy(v103, v102);
  if (*(_DWORD *)v100 == 2)
    WTF::StringImpl::destroy(v100, v102);
  else
    *(_DWORD *)v100 -= 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v105 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v106 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v108 = v948;
  v948 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
      WTF::StringImpl::destroy(v108, v107);
    else
      *(_DWORD *)v108 -= 2;
  }
  *v106 = off_1E33948F0;
  if (v105)
    v109 = v105;
  else
    v109 = v22;
  *(_DWORD *)v109 += 2;
  v106[15] = v109;
  this[49] = (int32x2_t)v106;
  this[50].i32[0] = 0;
  this[50].i32[1] = *((_DWORD *)v109 + 1);
  this[51] = vmax_s32(v942, 0);
  v110 = v947;
  v947 = 0;
  if (v110)
  {
    if (*(_DWORD *)v110 == 2)
      WTF::StringImpl::destroy(v110, v107);
    else
      *(_DWORD *)v110 -= 2;
  }
  v111 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v111)
  {
    if (v111[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v111 + 8))(v111);
    else
      --v111[2];
  }
  v112 = v944[0];
  v944[0] = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 2)
      WTF::StringImpl::destroy(v112, v107);
    else
      *(_DWORD *)v112 -= 2;
  }
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
      WTF::StringImpl::destroy(v105, v107);
    else
      *(_DWORD *)v105 -= 2;
  }
  v113 = v943;
  v943 = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
      WTF::StringImpl::destroy(v113, v107);
    else
      *(_DWORD *)v113 -= 2;
  }
  this[52] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v114 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v115 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v117 = v948;
  v948 = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
      WTF::StringImpl::destroy(v117, v116);
    else
      *(_DWORD *)v117 -= 2;
  }
  *v115 = off_1E33948F0;
  if (v114)
    v118 = v114;
  else
    v118 = v22;
  *(_DWORD *)v118 += 2;
  v115[15] = v118;
  this[53] = (int32x2_t)v115;
  this[54].i32[0] = 0;
  this[54].i32[1] = *((_DWORD *)v118 + 1);
  this[55] = vmax_s32(v942, 0);
  v119 = v947;
  v947 = 0;
  if (v119)
  {
    if (*(_DWORD *)v119 == 2)
      WTF::StringImpl::destroy(v119, v116);
    else
      *(_DWORD *)v119 -= 2;
  }
  v120 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v120)
  {
    if (v120[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v120 + 8))(v120);
    else
      --v120[2];
  }
  v121 = v944[0];
  v944[0] = 0;
  if (v121)
  {
    if (*(_DWORD *)v121 == 2)
      WTF::StringImpl::destroy(v121, v116);
    else
      *(_DWORD *)v121 -= 2;
  }
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
      WTF::StringImpl::destroy(v114, v116);
    else
      *(_DWORD *)v114 -= 2;
  }
  v122 = v943;
  v943 = 0;
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
      WTF::StringImpl::destroy(v122, v116);
    else
      *(_DWORD *)v122 -= 2;
  }
  this[56] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v123 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v124 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v126 = v948;
  v948 = 0;
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
      WTF::StringImpl::destroy(v126, v125);
    else
      *(_DWORD *)v126 -= 2;
  }
  *v124 = off_1E33948F0;
  if (v123)
    v127 = v123;
  else
    v127 = v22;
  *(_DWORD *)v127 += 2;
  v124[15] = v127;
  this[57] = (int32x2_t)v124;
  this[58].i32[0] = 0;
  this[58].i32[1] = *((_DWORD *)v127 + 1);
  this[59] = vmax_s32(v942, 0);
  v128 = v947;
  v947 = 0;
  if (v128)
  {
    if (*(_DWORD *)v128 == 2)
      WTF::StringImpl::destroy(v128, v125);
    else
      *(_DWORD *)v128 -= 2;
  }
  v129 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v129)
  {
    if (v129[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v129 + 8))(v129);
    else
      --v129[2];
  }
  v130 = v944[0];
  v944[0] = 0;
  if (v130)
  {
    if (*(_DWORD *)v130 == 2)
      WTF::StringImpl::destroy(v130, v125);
    else
      *(_DWORD *)v130 -= 2;
  }
  if (v123)
  {
    if (*(_DWORD *)v123 == 2)
      WTF::StringImpl::destroy(v123, v125);
    else
      *(_DWORD *)v123 -= 2;
  }
  v131 = v943;
  v943 = 0;
  if (v131)
  {
    if (*(_DWORD *)v131 == 2)
      WTF::StringImpl::destroy(v131, v125);
    else
      *(_DWORD *)v131 -= 2;
  }
  v132 = *this;
  this[60] = 0;
  this[61] = (int32x2_t)&off_1E3393F38;
  this[62] = v132;
  WTF::AtomStringImpl::addLiteral();
  this[63] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v133 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v134);
  v136 = v944[0];
  v137 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[64] = (int32x2_t)v136;
  if (v137)
    *(_DWORD *)v136 = v137;
  else
    WTF::StringImpl::destroy(v136, v135);
  if (*(_DWORD *)v133 == 2)
    WTF::StringImpl::destroy(v133, v135);
  else
    *(_DWORD *)v133 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[65] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v138 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v139);
  v141 = v944[0];
  v142 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[66] = (int32x2_t)v141;
  if (v142)
    *(_DWORD *)v141 = v142;
  else
    WTF::StringImpl::destroy(v141, v140);
  if (*(_DWORD *)v138 == 2)
    WTF::StringImpl::destroy(v138, v140);
  else
    *(_DWORD *)v138 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[67] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v143 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v144);
  v146 = v944[0];
  v147 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[68] = (int32x2_t)v146;
  if (v147)
    *(_DWORD *)v146 = v147;
  else
    WTF::StringImpl::destroy(v146, v145);
  if (*(_DWORD *)v143 == 2)
    WTF::StringImpl::destroy(v143, v145);
  else
    *(_DWORD *)v143 -= 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v148 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v149 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v151 = v948;
  v948 = 0;
  if (v151)
  {
    if (*(_DWORD *)v151 == 2)
      WTF::StringImpl::destroy(v151, v150);
    else
      *(_DWORD *)v151 -= 2;
  }
  *v149 = off_1E33948F0;
  if (v148)
    v152 = v148;
  else
    v152 = v22;
  *(_DWORD *)v152 += 2;
  v149[15] = v152;
  this[69] = (int32x2_t)v149;
  this[70].i32[0] = 0;
  this[70].i32[1] = *((_DWORD *)v152 + 1);
  this[71] = vmax_s32(v942, 0);
  v153 = v947;
  v947 = 0;
  if (v153)
  {
    if (*(_DWORD *)v153 == 2)
      WTF::StringImpl::destroy(v153, v150);
    else
      *(_DWORD *)v153 -= 2;
  }
  v154 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v154)
  {
    if (v154[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v154 + 8))(v154);
    else
      --v154[2];
  }
  v155 = v944[0];
  v944[0] = 0;
  if (v155)
  {
    if (*(_DWORD *)v155 == 2)
      WTF::StringImpl::destroy(v155, v150);
    else
      *(_DWORD *)v155 -= 2;
  }
  if (v148)
  {
    if (*(_DWORD *)v148 == 2)
      WTF::StringImpl::destroy(v148, v150);
    else
      *(_DWORD *)v148 -= 2;
  }
  v156 = v943;
  v943 = 0;
  if (v156)
  {
    if (*(_DWORD *)v156 == 2)
      WTF::StringImpl::destroy(v156, v150);
    else
      *(_DWORD *)v156 -= 2;
  }
  this[72] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v157 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v158 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v160 = v948;
  v948 = 0;
  if (v160)
  {
    if (*(_DWORD *)v160 == 2)
      WTF::StringImpl::destroy(v160, v159);
    else
      *(_DWORD *)v160 -= 2;
  }
  *v158 = off_1E33948F0;
  if (v157)
    v161 = v157;
  else
    v161 = v22;
  *(_DWORD *)v161 += 2;
  v158[15] = v161;
  this[73] = (int32x2_t)v158;
  this[74].i32[0] = 0;
  this[74].i32[1] = *((_DWORD *)v161 + 1);
  this[75] = vmax_s32(v942, 0);
  v162 = v947;
  v947 = 0;
  if (v162)
  {
    if (*(_DWORD *)v162 == 2)
      WTF::StringImpl::destroy(v162, v159);
    else
      *(_DWORD *)v162 -= 2;
  }
  v163 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v163)
  {
    if (v163[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v163 + 8))(v163);
    else
      --v163[2];
  }
  v164 = v944[0];
  v944[0] = 0;
  if (v164)
  {
    if (*(_DWORD *)v164 == 2)
      WTF::StringImpl::destroy(v164, v159);
    else
      *(_DWORD *)v164 -= 2;
  }
  if (v157)
  {
    if (*(_DWORD *)v157 == 2)
      WTF::StringImpl::destroy(v157, v159);
    else
      *(_DWORD *)v157 -= 2;
  }
  v165 = v943;
  v943 = 0;
  if (v165)
  {
    if (*(_DWORD *)v165 == 2)
      WTF::StringImpl::destroy(v165, v159);
    else
      *(_DWORD *)v165 -= 2;
  }
  this[76] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v166 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v167 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v169 = v948;
  v948 = 0;
  if (v169)
  {
    if (*(_DWORD *)v169 == 2)
      WTF::StringImpl::destroy(v169, v168);
    else
      *(_DWORD *)v169 -= 2;
  }
  *v167 = off_1E33948F0;
  if (v166)
    v170 = v166;
  else
    v170 = v22;
  *(_DWORD *)v170 += 2;
  v167[15] = v170;
  this[77] = (int32x2_t)v167;
  this[78].i32[0] = 0;
  this[78].i32[1] = *((_DWORD *)v170 + 1);
  this[79] = vmax_s32(v942, 0);
  v171 = v947;
  v947 = 0;
  if (v171)
  {
    if (*(_DWORD *)v171 == 2)
      WTF::StringImpl::destroy(v171, v168);
    else
      *(_DWORD *)v171 -= 2;
  }
  v172 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v172)
  {
    if (v172[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v172 + 8))(v172);
    else
      --v172[2];
  }
  v173 = v944[0];
  v944[0] = 0;
  if (v173)
  {
    if (*(_DWORD *)v173 == 2)
      WTF::StringImpl::destroy(v173, v168);
    else
      *(_DWORD *)v173 -= 2;
  }
  if (v166)
  {
    if (*(_DWORD *)v166 == 2)
      WTF::StringImpl::destroy(v166, v168);
    else
      *(_DWORD *)v166 -= 2;
  }
  v174 = v943;
  v943 = 0;
  if (v174)
  {
    if (*(_DWORD *)v174 == 2)
      WTF::StringImpl::destroy(v174, v168);
    else
      *(_DWORD *)v174 -= 2;
  }
  this[80] = 0;
  v175 = *this;
  this[81] = (int32x2_t)&off_1E3393F68;
  this[82] = v175;
  WTF::AtomStringImpl::addLiteral();
  this[83] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v176 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v177);
  v179 = v944[0];
  v180 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[84] = (int32x2_t)v179;
  if (v180)
    *(_DWORD *)v179 = v180;
  else
    WTF::StringImpl::destroy(v179, v178);
  if (*(_DWORD *)v176 == 2)
    WTF::StringImpl::destroy(v176, v178);
  else
    *(_DWORD *)v176 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[85] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v181 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v182);
  v184 = v944[0];
  v185 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[86] = (int32x2_t)v184;
  if (v185)
    *(_DWORD *)v184 = v185;
  else
    WTF::StringImpl::destroy(v184, v183);
  if (*(_DWORD *)v181 == 2)
    WTF::StringImpl::destroy(v181, v183);
  else
    *(_DWORD *)v181 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[87] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v186 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v187);
  v189 = v944[0];
  v190 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[88] = (int32x2_t)v189;
  if (v190)
    *(_DWORD *)v189 = v190;
  else
    WTF::StringImpl::destroy(v189, v188);
  if (*(_DWORD *)v186 == 2)
    WTF::StringImpl::destroy(v186, v188);
  else
    *(_DWORD *)v186 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[89] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v191 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v192);
  v194 = v944[0];
  v195 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[90] = (int32x2_t)v194;
  if (v195)
    *(_DWORD *)v194 = v195;
  else
    WTF::StringImpl::destroy(v194, v193);
  if (*(_DWORD *)v191 == 2)
    WTF::StringImpl::destroy(v191, v193);
  else
    *(_DWORD *)v191 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[91] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v196 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v197);
  v199 = v944[0];
  v200 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[92] = (int32x2_t)v199;
  if (v200)
    *(_DWORD *)v199 = v200;
  else
    WTF::StringImpl::destroy(v199, v198);
  if (*(_DWORD *)v196 == 2)
    WTF::StringImpl::destroy(v196, v198);
  else
    *(_DWORD *)v196 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[93] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v201 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v202);
  v204 = v944[0];
  v205 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[94] = (int32x2_t)v204;
  if (v205)
    *(_DWORD *)v204 = v205;
  else
    WTF::StringImpl::destroy(v204, v203);
  if (*(_DWORD *)v201 == 2)
    WTF::StringImpl::destroy(v201, v203);
  else
    *(_DWORD *)v201 -= 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v206 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v207 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v209 = v948;
  v948 = 0;
  if (v209)
  {
    if (*(_DWORD *)v209 == 2)
      WTF::StringImpl::destroy(v209, v208);
    else
      *(_DWORD *)v209 -= 2;
  }
  *v207 = off_1E33948F0;
  if (v206)
    v210 = v206;
  else
    v210 = v22;
  *(_DWORD *)v210 += 2;
  v207[15] = v210;
  this[95] = (int32x2_t)v207;
  this[96].i32[0] = 0;
  this[96].i32[1] = *((_DWORD *)v210 + 1);
  this[97] = vmax_s32(v942, 0);
  v211 = v947;
  v947 = 0;
  if (v211)
  {
    if (*(_DWORD *)v211 == 2)
      WTF::StringImpl::destroy(v211, v208);
    else
      *(_DWORD *)v211 -= 2;
  }
  v212 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v212)
  {
    if (v212[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v212 + 8))(v212);
    else
      --v212[2];
  }
  v213 = v944[0];
  v944[0] = 0;
  if (v213)
  {
    if (*(_DWORD *)v213 == 2)
      WTF::StringImpl::destroy(v213, v208);
    else
      *(_DWORD *)v213 -= 2;
  }
  if (v206)
  {
    if (*(_DWORD *)v206 == 2)
      WTF::StringImpl::destroy(v206, v208);
    else
      *(_DWORD *)v206 -= 2;
  }
  v214 = v943;
  v943 = 0;
  if (v214)
  {
    if (*(_DWORD *)v214 == 2)
      WTF::StringImpl::destroy(v214, v208);
    else
      *(_DWORD *)v214 -= 2;
  }
  this[98] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v215 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v216 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v218 = v948;
  v948 = 0;
  if (v218)
  {
    if (*(_DWORD *)v218 == 2)
      WTF::StringImpl::destroy(v218, v217);
    else
      *(_DWORD *)v218 -= 2;
  }
  *v216 = off_1E33948F0;
  if (v215)
    v219 = v215;
  else
    v219 = v22;
  *(_DWORD *)v219 += 2;
  v216[15] = v219;
  this[99] = (int32x2_t)v216;
  this[100].i32[0] = 0;
  this[100].i32[1] = *((_DWORD *)v219 + 1);
  this[101] = vmax_s32(v942, 0);
  v220 = v947;
  v947 = 0;
  if (v220)
  {
    if (*(_DWORD *)v220 == 2)
      WTF::StringImpl::destroy(v220, v217);
    else
      *(_DWORD *)v220 -= 2;
  }
  v221 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v221)
  {
    if (v221[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v221 + 8))(v221);
    else
      --v221[2];
  }
  v222 = v944[0];
  v944[0] = 0;
  if (v222)
  {
    if (*(_DWORD *)v222 == 2)
      WTF::StringImpl::destroy(v222, v217);
    else
      *(_DWORD *)v222 -= 2;
  }
  if (v215)
  {
    if (*(_DWORD *)v215 == 2)
      WTF::StringImpl::destroy(v215, v217);
    else
      *(_DWORD *)v215 -= 2;
  }
  v223 = v943;
  v943 = 0;
  if (v223)
  {
    if (*(_DWORD *)v223 == 2)
      WTF::StringImpl::destroy(v223, v217);
    else
      *(_DWORD *)v223 -= 2;
  }
  this[102] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v224 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v225 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v227 = v948;
  v948 = 0;
  if (v227)
  {
    if (*(_DWORD *)v227 == 2)
      WTF::StringImpl::destroy(v227, v226);
    else
      *(_DWORD *)v227 -= 2;
  }
  *v225 = off_1E33948F0;
  if (v224)
    v228 = v224;
  else
    v228 = v22;
  *(_DWORD *)v228 += 2;
  v225[15] = v228;
  this[103] = (int32x2_t)v225;
  this[104].i32[0] = 0;
  this[104].i32[1] = *((_DWORD *)v228 + 1);
  this[105] = vmax_s32(v942, 0);
  v229 = v947;
  v947 = 0;
  if (v229)
  {
    if (*(_DWORD *)v229 == 2)
      WTF::StringImpl::destroy(v229, v226);
    else
      *(_DWORD *)v229 -= 2;
  }
  v230 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v230)
  {
    if (v230[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v230 + 8))(v230);
    else
      --v230[2];
  }
  v231 = v944[0];
  v944[0] = 0;
  if (v231)
  {
    if (*(_DWORD *)v231 == 2)
      WTF::StringImpl::destroy(v231, v226);
    else
      *(_DWORD *)v231 -= 2;
  }
  if (v224)
  {
    if (*(_DWORD *)v224 == 2)
      WTF::StringImpl::destroy(v224, v226);
    else
      *(_DWORD *)v224 -= 2;
  }
  v232 = v943;
  v943 = 0;
  if (v232)
  {
    if (*(_DWORD *)v232 == 2)
      WTF::StringImpl::destroy(v232, v226);
    else
      *(_DWORD *)v232 -= 2;
  }
  this[106] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v233 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v234 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v236 = v948;
  v948 = 0;
  if (v236)
  {
    if (*(_DWORD *)v236 == 2)
      WTF::StringImpl::destroy(v236, v235);
    else
      *(_DWORD *)v236 -= 2;
  }
  *v234 = off_1E33948F0;
  if (v233)
    v237 = v233;
  else
    v237 = v22;
  *(_DWORD *)v237 += 2;
  v234[15] = v237;
  this[107] = (int32x2_t)v234;
  this[108].i32[0] = 0;
  this[108].i32[1] = *((_DWORD *)v237 + 1);
  this[109] = vmax_s32(v942, 0);
  v238 = v947;
  v947 = 0;
  if (v238)
  {
    if (*(_DWORD *)v238 == 2)
      WTF::StringImpl::destroy(v238, v235);
    else
      *(_DWORD *)v238 -= 2;
  }
  v239 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v239)
  {
    if (v239[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v239 + 8))(v239);
    else
      --v239[2];
  }
  v240 = v944[0];
  v944[0] = 0;
  if (v240)
  {
    if (*(_DWORD *)v240 == 2)
      WTF::StringImpl::destroy(v240, v235);
    else
      *(_DWORD *)v240 -= 2;
  }
  if (v233)
  {
    if (*(_DWORD *)v233 == 2)
      WTF::StringImpl::destroy(v233, v235);
    else
      *(_DWORD *)v233 -= 2;
  }
  v241 = v943;
  v943 = 0;
  if (v241)
  {
    if (*(_DWORD *)v241 == 2)
      WTF::StringImpl::destroy(v241, v235);
    else
      *(_DWORD *)v241 -= 2;
  }
  this[110] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v242 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v243 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v245 = v948;
  v948 = 0;
  if (v245)
  {
    if (*(_DWORD *)v245 == 2)
      WTF::StringImpl::destroy(v245, v244);
    else
      *(_DWORD *)v245 -= 2;
  }
  *v243 = off_1E33948F0;
  if (v242)
    v246 = v242;
  else
    v246 = v22;
  *(_DWORD *)v246 += 2;
  v243[15] = v246;
  this[111] = (int32x2_t)v243;
  this[112].i32[0] = 0;
  this[112].i32[1] = *((_DWORD *)v246 + 1);
  this[113] = vmax_s32(v942, 0);
  v247 = v947;
  v947 = 0;
  if (v247)
  {
    if (*(_DWORD *)v247 == 2)
      WTF::StringImpl::destroy(v247, v244);
    else
      *(_DWORD *)v247 -= 2;
  }
  v248 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v248)
  {
    if (v248[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v248 + 8))(v248);
    else
      --v248[2];
  }
  v249 = v944[0];
  v944[0] = 0;
  if (v249)
  {
    if (*(_DWORD *)v249 == 2)
      WTF::StringImpl::destroy(v249, v244);
    else
      *(_DWORD *)v249 -= 2;
  }
  if (v242)
  {
    if (*(_DWORD *)v242 == 2)
      WTF::StringImpl::destroy(v242, v244);
    else
      *(_DWORD *)v242 -= 2;
  }
  v250 = v943;
  v943 = 0;
  if (v250)
  {
    if (*(_DWORD *)v250 == 2)
      WTF::StringImpl::destroy(v250, v244);
    else
      *(_DWORD *)v250 -= 2;
  }
  this[114] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v251 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v252 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v254 = v948;
  v948 = 0;
  if (v254)
  {
    if (*(_DWORD *)v254 == 2)
      WTF::StringImpl::destroy(v254, v253);
    else
      *(_DWORD *)v254 -= 2;
  }
  *v252 = off_1E33948F0;
  if (v251)
    v255 = v251;
  else
    v255 = v22;
  *(_DWORD *)v255 += 2;
  v252[15] = v255;
  this[115] = (int32x2_t)v252;
  this[116].i32[0] = 0;
  this[116].i32[1] = *((_DWORD *)v255 + 1);
  this[117] = vmax_s32(v942, 0);
  v256 = v947;
  v947 = 0;
  if (v256)
  {
    if (*(_DWORD *)v256 == 2)
      WTF::StringImpl::destroy(v256, v253);
    else
      *(_DWORD *)v256 -= 2;
  }
  v257 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v257)
  {
    if (v257[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v257 + 8))(v257);
    else
      --v257[2];
  }
  v258 = v944[0];
  v944[0] = 0;
  if (v258)
  {
    if (*(_DWORD *)v258 == 2)
      WTF::StringImpl::destroy(v258, v253);
    else
      *(_DWORD *)v258 -= 2;
  }
  if (v251)
  {
    if (*(_DWORD *)v251 == 2)
      WTF::StringImpl::destroy(v251, v253);
    else
      *(_DWORD *)v251 -= 2;
  }
  v259 = v943;
  v943 = 0;
  if (v259)
  {
    if (*(_DWORD *)v259 == 2)
      WTF::StringImpl::destroy(v259, v253);
    else
      *(_DWORD *)v259 -= 2;
  }
  this[118] = 0;
  WebCore::ReadableByteStreamInternalsBuiltinsWrapper::ReadableByteStreamInternalsBuiltinsWrapper(this + 119, *(JSC::VM **)this);
  v260 = *this;
  this[325] = (int32x2_t)&off_1E3393FC8;
  this[326] = v260;
  WTF::AtomStringImpl::addLiteral();
  this[327] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v261 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v262);
  v264 = v944[0];
  v265 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[328] = (int32x2_t)v264;
  if (v265)
    *(_DWORD *)v264 = v265;
  else
    WTF::StringImpl::destroy(v264, v263);
  if (*(_DWORD *)v261 == 2)
    WTF::StringImpl::destroy(v261, v263);
  else
    *(_DWORD *)v261 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[329] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v266 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v267);
  v269 = v944[0];
  v270 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[330] = (int32x2_t)v269;
  if (v270)
    *(_DWORD *)v269 = v270;
  else
    WTF::StringImpl::destroy(v269, v268);
  if (*(_DWORD *)v266 == 2)
    WTF::StringImpl::destroy(v266, v268);
  else
    *(_DWORD *)v266 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[331] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v271 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v272);
  v274 = v944[0];
  v275 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[332] = (int32x2_t)v274;
  if (v275)
    *(_DWORD *)v274 = v275;
  else
    WTF::StringImpl::destroy(v274, v273);
  if (*(_DWORD *)v271 == 2)
    WTF::StringImpl::destroy(v271, v273);
  else
    *(_DWORD *)v271 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[333] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v276 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v277);
  v279 = v944[0];
  v280 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[334] = (int32x2_t)v279;
  if (v280)
    *(_DWORD *)v279 = v280;
  else
    WTF::StringImpl::destroy(v279, v278);
  if (*(_DWORD *)v276 == 2)
    WTF::StringImpl::destroy(v276, v278);
  else
    *(_DWORD *)v276 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[335] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v281 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v282);
  v284 = v944[0];
  v285 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[336] = (int32x2_t)v284;
  if (v285)
    *(_DWORD *)v284 = v285;
  else
    WTF::StringImpl::destroy(v284, v283);
  if (*(_DWORD *)v281 == 2)
    WTF::StringImpl::destroy(v281, v283);
  else
    *(_DWORD *)v281 -= 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v286 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v287 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v289 = v948;
  v948 = 0;
  if (v289)
  {
    if (*(_DWORD *)v289 == 2)
      WTF::StringImpl::destroy(v289, v288);
    else
      *(_DWORD *)v289 -= 2;
  }
  *v287 = off_1E33948F0;
  if (v286)
    v290 = v286;
  else
    v290 = v22;
  *(_DWORD *)v290 += 2;
  v287[15] = v290;
  this[337] = (int32x2_t)v287;
  this[338].i32[0] = 0;
  this[338].i32[1] = *((_DWORD *)v290 + 1);
  this[339] = vmax_s32(v942, 0);
  v291 = v947;
  v947 = 0;
  if (v291)
  {
    if (*(_DWORD *)v291 == 2)
      WTF::StringImpl::destroy(v291, v288);
    else
      *(_DWORD *)v291 -= 2;
  }
  v292 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v292)
  {
    if (v292[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v292 + 8))(v292);
    else
      --v292[2];
  }
  v293 = v944[0];
  v944[0] = 0;
  if (v293)
  {
    if (*(_DWORD *)v293 == 2)
      WTF::StringImpl::destroy(v293, v288);
    else
      *(_DWORD *)v293 -= 2;
  }
  if (v286)
  {
    if (*(_DWORD *)v286 == 2)
      WTF::StringImpl::destroy(v286, v288);
    else
      *(_DWORD *)v286 -= 2;
  }
  v294 = v943;
  v943 = 0;
  if (v294)
  {
    if (*(_DWORD *)v294 == 2)
      WTF::StringImpl::destroy(v294, v288);
    else
      *(_DWORD *)v294 -= 2;
  }
  this[340] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v295 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v296 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v298 = v948;
  v948 = 0;
  if (v298)
  {
    if (*(_DWORD *)v298 == 2)
      WTF::StringImpl::destroy(v298, v297);
    else
      *(_DWORD *)v298 -= 2;
  }
  *v296 = off_1E33948F0;
  if (v295)
    v299 = v295;
  else
    v299 = v22;
  *(_DWORD *)v299 += 2;
  v296[15] = v299;
  this[341] = (int32x2_t)v296;
  this[342].i32[0] = 0;
  this[342].i32[1] = *((_DWORD *)v299 + 1);
  this[343] = vmax_s32(v942, 0);
  v300 = v947;
  v947 = 0;
  if (v300)
  {
    if (*(_DWORD *)v300 == 2)
      WTF::StringImpl::destroy(v300, v297);
    else
      *(_DWORD *)v300 -= 2;
  }
  v301 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v301)
  {
    if (v301[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v301 + 8))(v301);
    else
      --v301[2];
  }
  v302 = v944[0];
  v944[0] = 0;
  if (v302)
  {
    if (*(_DWORD *)v302 == 2)
      WTF::StringImpl::destroy(v302, v297);
    else
      *(_DWORD *)v302 -= 2;
  }
  if (v295)
  {
    if (*(_DWORD *)v295 == 2)
      WTF::StringImpl::destroy(v295, v297);
    else
      *(_DWORD *)v295 -= 2;
  }
  v303 = v943;
  v943 = 0;
  if (v303)
  {
    if (*(_DWORD *)v303 == 2)
      WTF::StringImpl::destroy(v303, v297);
    else
      *(_DWORD *)v303 -= 2;
  }
  this[344] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v304 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v305 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v307 = v948;
  v948 = 0;
  if (v307)
  {
    if (*(_DWORD *)v307 == 2)
      WTF::StringImpl::destroy(v307, v306);
    else
      *(_DWORD *)v307 -= 2;
  }
  *v305 = off_1E33948F0;
  if (v304)
    v308 = v304;
  else
    v308 = v22;
  *(_DWORD *)v308 += 2;
  v305[15] = v308;
  this[345] = (int32x2_t)v305;
  this[346].i32[0] = 0;
  this[346].i32[1] = *((_DWORD *)v308 + 1);
  this[347] = vmax_s32(v942, 0);
  v309 = v947;
  v947 = 0;
  if (v309)
  {
    if (*(_DWORD *)v309 == 2)
      WTF::StringImpl::destroy(v309, v306);
    else
      *(_DWORD *)v309 -= 2;
  }
  v310 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v310)
  {
    if (v310[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v310 + 8))(v310);
    else
      --v310[2];
  }
  v311 = v944[0];
  v944[0] = 0;
  if (v311)
  {
    if (*(_DWORD *)v311 == 2)
      WTF::StringImpl::destroy(v311, v306);
    else
      *(_DWORD *)v311 -= 2;
  }
  if (v304)
  {
    if (*(_DWORD *)v304 == 2)
      WTF::StringImpl::destroy(v304, v306);
    else
      *(_DWORD *)v304 -= 2;
  }
  v312 = v943;
  v943 = 0;
  if (v312)
  {
    if (*(_DWORD *)v312 == 2)
      WTF::StringImpl::destroy(v312, v306);
    else
      *(_DWORD *)v312 -= 2;
  }
  this[348] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v313 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v314 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v316 = v948;
  v948 = 0;
  if (v316)
  {
    if (*(_DWORD *)v316 == 2)
      WTF::StringImpl::destroy(v316, v315);
    else
      *(_DWORD *)v316 -= 2;
  }
  *v314 = off_1E33948F0;
  if (v313)
    v317 = v313;
  else
    v317 = v22;
  *(_DWORD *)v317 += 2;
  v314[15] = v317;
  this[349] = (int32x2_t)v314;
  this[350].i32[0] = 0;
  this[350].i32[1] = *((_DWORD *)v317 + 1);
  this[351] = vmax_s32(v942, 0);
  v318 = v947;
  v947 = 0;
  if (v318)
  {
    if (*(_DWORD *)v318 == 2)
      WTF::StringImpl::destroy(v318, v315);
    else
      *(_DWORD *)v318 -= 2;
  }
  v319 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v319)
  {
    if (v319[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v319 + 8))(v319);
    else
      --v319[2];
  }
  v320 = v944[0];
  v944[0] = 0;
  if (v320)
  {
    if (*(_DWORD *)v320 == 2)
      WTF::StringImpl::destroy(v320, v315);
    else
      *(_DWORD *)v320 -= 2;
  }
  if (v313)
  {
    if (*(_DWORD *)v313 == 2)
      WTF::StringImpl::destroy(v313, v315);
    else
      *(_DWORD *)v313 -= 2;
  }
  v321 = v943;
  v943 = 0;
  if (v321)
  {
    if (*(_DWORD *)v321 == 2)
      WTF::StringImpl::destroy(v321, v315);
    else
      *(_DWORD *)v321 -= 2;
  }
  this[352] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v322 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v323 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v325 = v948;
  v948 = 0;
  if (v325)
  {
    if (*(_DWORD *)v325 == 2)
      WTF::StringImpl::destroy(v325, v324);
    else
      *(_DWORD *)v325 -= 2;
  }
  *v323 = off_1E33948F0;
  if (v322)
    v326 = v322;
  else
    v326 = v22;
  *(_DWORD *)v326 += 2;
  v323[15] = v326;
  this[353] = (int32x2_t)v323;
  this[354].i32[0] = 0;
  this[354].i32[1] = *((_DWORD *)v326 + 1);
  this[355] = vmax_s32(v942, 0);
  v327 = v947;
  v947 = 0;
  if (v327)
  {
    if (*(_DWORD *)v327 == 2)
      WTF::StringImpl::destroy(v327, v324);
    else
      *(_DWORD *)v327 -= 2;
  }
  v328 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v328)
  {
    if (v328[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v328 + 8))(v328);
    else
      --v328[2];
  }
  v329 = v944[0];
  v944[0] = 0;
  if (v329)
  {
    if (*(_DWORD *)v329 == 2)
      WTF::StringImpl::destroy(v329, v324);
    else
      *(_DWORD *)v329 -= 2;
  }
  if (v322)
  {
    if (*(_DWORD *)v322 == 2)
      WTF::StringImpl::destroy(v322, v324);
    else
      *(_DWORD *)v322 -= 2;
  }
  v330 = v943;
  v943 = 0;
  if (v330)
  {
    if (*(_DWORD *)v330 == 2)
      WTF::StringImpl::destroy(v330, v324);
    else
      *(_DWORD *)v330 -= 2;
  }
  this[356] = 0;
  v331 = *this;
  this[357] = (int32x2_t)&off_1E3393FF8;
  this[358] = v331;
  WTF::AtomStringImpl::addLiteral();
  this[359] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v332 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v333);
  v335 = v944[0];
  v336 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[360] = (int32x2_t)v335;
  if (v336)
    *(_DWORD *)v335 = v336;
  else
    WTF::StringImpl::destroy(v335, v334);
  if (*(_DWORD *)v332 == 2)
    WTF::StringImpl::destroy(v332, v334);
  else
    *(_DWORD *)v332 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[361] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v337 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v338);
  v340 = v944[0];
  v341 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[362] = (int32x2_t)v340;
  if (v341)
    *(_DWORD *)v340 = v341;
  else
    WTF::StringImpl::destroy(v340, v339);
  if (*(_DWORD *)v337 == 2)
    WTF::StringImpl::destroy(v337, v339);
  else
    *(_DWORD *)v337 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[363] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v342 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v343);
  v345 = v944[0];
  v346 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[364] = (int32x2_t)v345;
  if (v346)
    *(_DWORD *)v345 = v346;
  else
    WTF::StringImpl::destroy(v345, v344);
  if (*(_DWORD *)v342 == 2)
    WTF::StringImpl::destroy(v342, v344);
  else
    *(_DWORD *)v342 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[365] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v347 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v348);
  v350 = v944[0];
  v351 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[366] = (int32x2_t)v350;
  if (v351)
    *(_DWORD *)v350 = v351;
  else
    WTF::StringImpl::destroy(v350, v349);
  if (*(_DWORD *)v347 == 2)
    WTF::StringImpl::destroy(v347, v349);
  else
    *(_DWORD *)v347 -= 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v352 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v353 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v355 = v948;
  v948 = 0;
  if (v355)
  {
    if (*(_DWORD *)v355 == 2)
      WTF::StringImpl::destroy(v355, v354);
    else
      *(_DWORD *)v355 -= 2;
  }
  *v353 = off_1E33948F0;
  if (v352)
    v356 = v352;
  else
    v356 = v22;
  *(_DWORD *)v356 += 2;
  v353[15] = v356;
  this[367] = (int32x2_t)v353;
  this[368].i32[0] = 0;
  this[368].i32[1] = *((_DWORD *)v356 + 1);
  this[369] = vmax_s32(v942, 0);
  v357 = v947;
  v947 = 0;
  if (v357)
  {
    if (*(_DWORD *)v357 == 2)
      WTF::StringImpl::destroy(v357, v354);
    else
      *(_DWORD *)v357 -= 2;
  }
  v358 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v358)
  {
    if (v358[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v358 + 8))(v358);
    else
      --v358[2];
  }
  v359 = v944[0];
  v944[0] = 0;
  if (v359)
  {
    if (*(_DWORD *)v359 == 2)
      WTF::StringImpl::destroy(v359, v354);
    else
      *(_DWORD *)v359 -= 2;
  }
  if (v352)
  {
    if (*(_DWORD *)v352 == 2)
      WTF::StringImpl::destroy(v352, v354);
    else
      *(_DWORD *)v352 -= 2;
  }
  v360 = v943;
  v943 = 0;
  if (v360)
  {
    if (*(_DWORD *)v360 == 2)
      WTF::StringImpl::destroy(v360, v354);
    else
      *(_DWORD *)v360 -= 2;
  }
  this[370] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v361 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v362 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v364 = v948;
  v948 = 0;
  if (v364)
  {
    if (*(_DWORD *)v364 == 2)
      WTF::StringImpl::destroy(v364, v363);
    else
      *(_DWORD *)v364 -= 2;
  }
  *v362 = off_1E33948F0;
  if (v361)
    v365 = v361;
  else
    v365 = v22;
  *(_DWORD *)v365 += 2;
  v362[15] = v365;
  this[371] = (int32x2_t)v362;
  this[372].i32[0] = 0;
  this[372].i32[1] = *((_DWORD *)v365 + 1);
  this[373] = vmax_s32(v942, 0);
  v366 = v947;
  v947 = 0;
  if (v366)
  {
    if (*(_DWORD *)v366 == 2)
      WTF::StringImpl::destroy(v366, v363);
    else
      *(_DWORD *)v366 -= 2;
  }
  v367 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v367)
  {
    if (v367[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v367 + 8))(v367);
    else
      --v367[2];
  }
  v368 = v944[0];
  v944[0] = 0;
  if (v368)
  {
    if (*(_DWORD *)v368 == 2)
      WTF::StringImpl::destroy(v368, v363);
    else
      *(_DWORD *)v368 -= 2;
  }
  if (v361)
  {
    if (*(_DWORD *)v361 == 2)
      WTF::StringImpl::destroy(v361, v363);
    else
      *(_DWORD *)v361 -= 2;
  }
  v369 = v943;
  v943 = 0;
  if (v369)
  {
    if (*(_DWORD *)v369 == 2)
      WTF::StringImpl::destroy(v369, v363);
    else
      *(_DWORD *)v369 -= 2;
  }
  this[374] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v370 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v371 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v373 = v948;
  v948 = 0;
  if (v373)
  {
    if (*(_DWORD *)v373 == 2)
      WTF::StringImpl::destroy(v373, v372);
    else
      *(_DWORD *)v373 -= 2;
  }
  *v371 = off_1E33948F0;
  if (v370)
    v374 = v370;
  else
    v374 = v22;
  *(_DWORD *)v374 += 2;
  v371[15] = v374;
  this[375] = (int32x2_t)v371;
  this[376].i32[0] = 0;
  this[376].i32[1] = *((_DWORD *)v374 + 1);
  this[377] = vmax_s32(v942, 0);
  v375 = v947;
  v947 = 0;
  if (v375)
  {
    if (*(_DWORD *)v375 == 2)
      WTF::StringImpl::destroy(v375, v372);
    else
      *(_DWORD *)v375 -= 2;
  }
  v376 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v376)
  {
    if (v376[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v376 + 8))(v376);
    else
      --v376[2];
  }
  v377 = v944[0];
  v944[0] = 0;
  if (v377)
  {
    if (*(_DWORD *)v377 == 2)
      WTF::StringImpl::destroy(v377, v372);
    else
      *(_DWORD *)v377 -= 2;
  }
  if (v370)
  {
    if (*(_DWORD *)v370 == 2)
      WTF::StringImpl::destroy(v370, v372);
    else
      *(_DWORD *)v370 -= 2;
  }
  v378 = v943;
  v943 = 0;
  if (v378)
  {
    if (*(_DWORD *)v378 == 2)
      WTF::StringImpl::destroy(v378, v372);
    else
      *(_DWORD *)v378 -= 2;
  }
  this[378] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v379 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v380 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v382 = v948;
  v948 = 0;
  if (v382)
  {
    if (*(_DWORD *)v382 == 2)
      WTF::StringImpl::destroy(v382, v381);
    else
      *(_DWORD *)v382 -= 2;
  }
  *v380 = off_1E33948F0;
  if (v379)
    v383 = v379;
  else
    v383 = v22;
  *(_DWORD *)v383 += 2;
  v380[15] = v383;
  this[379] = (int32x2_t)v380;
  this[380].i32[0] = 0;
  this[380].i32[1] = *((_DWORD *)v383 + 1);
  this[381] = vmax_s32(v942, 0);
  v384 = v947;
  v947 = 0;
  if (v384)
  {
    if (*(_DWORD *)v384 == 2)
      WTF::StringImpl::destroy(v384, v381);
    else
      *(_DWORD *)v384 -= 2;
  }
  v385 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v385)
  {
    if (v385[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v385 + 8))(v385);
    else
      --v385[2];
  }
  v386 = v944[0];
  v944[0] = 0;
  if (v386)
  {
    if (*(_DWORD *)v386 == 2)
      WTF::StringImpl::destroy(v386, v381);
    else
      *(_DWORD *)v386 -= 2;
  }
  if (v379)
  {
    if (*(_DWORD *)v379 == 2)
      WTF::StringImpl::destroy(v379, v381);
    else
      *(_DWORD *)v379 -= 2;
  }
  v387 = v943;
  v943 = 0;
  if (v387)
  {
    if (*(_DWORD *)v387 == 2)
      WTF::StringImpl::destroy(v387, v381);
    else
      *(_DWORD *)v387 -= 2;
  }
  this[382] = 0;
  v388 = *this;
  this[383] = (int32x2_t)&off_1E3394028;
  this[384] = v388;
  WTF::AtomStringImpl::addLiteral();
  this[385] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v389 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v390);
  v392 = v944[0];
  v393 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[386] = (int32x2_t)v392;
  if (v393)
    *(_DWORD *)v392 = v393;
  else
    WTF::StringImpl::destroy(v392, v391);
  if (*(_DWORD *)v389 == 2)
    WTF::StringImpl::destroy(v389, v391);
  else
    *(_DWORD *)v389 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[387] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v394 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v395);
  v397 = v944[0];
  v398 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[388] = (int32x2_t)v397;
  if (v398)
    *(_DWORD *)v397 = v398;
  else
    WTF::StringImpl::destroy(v397, v396);
  if (*(_DWORD *)v394 == 2)
    WTF::StringImpl::destroy(v394, v396);
  else
    *(_DWORD *)v394 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[389] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v399 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v400);
  v402 = v944[0];
  v403 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[390] = (int32x2_t)v402;
  if (v403)
    *(_DWORD *)v402 = v403;
  else
    WTF::StringImpl::destroy(v402, v401);
  if (*(_DWORD *)v399 == 2)
    WTF::StringImpl::destroy(v399, v401);
  else
    *(_DWORD *)v399 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[391] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v404 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v405);
  v407 = v944[0];
  v408 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[392] = (int32x2_t)v407;
  if (v408)
    *(_DWORD *)v407 = v408;
  else
    WTF::StringImpl::destroy(v407, v406);
  if (*(_DWORD *)v404 == 2)
    WTF::StringImpl::destroy(v404, v406);
  else
    *(_DWORD *)v404 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[393] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v409 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v410);
  v412 = v944[0];
  v413 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[394] = (int32x2_t)v412;
  if (v413)
    *(_DWORD *)v412 = v413;
  else
    WTF::StringImpl::destroy(v412, v411);
  if (*(_DWORD *)v409 == 2)
    WTF::StringImpl::destroy(v409, v411);
  else
    *(_DWORD *)v409 -= 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v414 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v415 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v417 = v948;
  v948 = 0;
  if (v417)
  {
    if (*(_DWORD *)v417 == 2)
      WTF::StringImpl::destroy(v417, v416);
    else
      *(_DWORD *)v417 -= 2;
  }
  *v415 = off_1E33948F0;
  if (v414)
    v418 = v414;
  else
    v418 = v22;
  *(_DWORD *)v418 += 2;
  v415[15] = v418;
  this[395] = (int32x2_t)v415;
  this[396].i32[0] = 0;
  this[396].i32[1] = *((_DWORD *)v418 + 1);
  this[397] = vmax_s32(v942, 0);
  v419 = v947;
  v947 = 0;
  if (v419)
  {
    if (*(_DWORD *)v419 == 2)
      WTF::StringImpl::destroy(v419, v416);
    else
      *(_DWORD *)v419 -= 2;
  }
  v420 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v420)
  {
    if (v420[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v420 + 8))(v420);
    else
      --v420[2];
  }
  v421 = v944[0];
  v944[0] = 0;
  if (v421)
  {
    if (*(_DWORD *)v421 == 2)
      WTF::StringImpl::destroy(v421, v416);
    else
      *(_DWORD *)v421 -= 2;
  }
  if (v414)
  {
    if (*(_DWORD *)v414 == 2)
      WTF::StringImpl::destroy(v414, v416);
    else
      *(_DWORD *)v414 -= 2;
  }
  v422 = v943;
  v943 = 0;
  if (v422)
  {
    if (*(_DWORD *)v422 == 2)
      WTF::StringImpl::destroy(v422, v416);
    else
      *(_DWORD *)v422 -= 2;
  }
  this[398] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v423 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v424 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v426 = v948;
  v948 = 0;
  if (v426)
  {
    if (*(_DWORD *)v426 == 2)
      WTF::StringImpl::destroy(v426, v425);
    else
      *(_DWORD *)v426 -= 2;
  }
  *v424 = off_1E33948F0;
  if (v423)
    v427 = v423;
  else
    v427 = v22;
  *(_DWORD *)v427 += 2;
  v424[15] = v427;
  this[399] = (int32x2_t)v424;
  this[400].i32[0] = 0;
  this[400].i32[1] = *((_DWORD *)v427 + 1);
  this[401] = vmax_s32(v942, 0);
  v428 = v947;
  v947 = 0;
  if (v428)
  {
    if (*(_DWORD *)v428 == 2)
      WTF::StringImpl::destroy(v428, v425);
    else
      *(_DWORD *)v428 -= 2;
  }
  v429 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v429)
  {
    if (v429[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v429 + 8))(v429);
    else
      --v429[2];
  }
  v430 = v944[0];
  v944[0] = 0;
  if (v430)
  {
    if (*(_DWORD *)v430 == 2)
      WTF::StringImpl::destroy(v430, v425);
    else
      *(_DWORD *)v430 -= 2;
  }
  if (v423)
  {
    if (*(_DWORD *)v423 == 2)
      WTF::StringImpl::destroy(v423, v425);
    else
      *(_DWORD *)v423 -= 2;
  }
  v431 = v943;
  v943 = 0;
  if (v431)
  {
    if (*(_DWORD *)v431 == 2)
      WTF::StringImpl::destroy(v431, v425);
    else
      *(_DWORD *)v431 -= 2;
  }
  this[402] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v432 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v433 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v435 = v948;
  v948 = 0;
  if (v435)
  {
    if (*(_DWORD *)v435 == 2)
      WTF::StringImpl::destroy(v435, v434);
    else
      *(_DWORD *)v435 -= 2;
  }
  *v433 = off_1E33948F0;
  if (v432)
    v436 = v432;
  else
    v436 = v22;
  *(_DWORD *)v436 += 2;
  v433[15] = v436;
  this[403] = (int32x2_t)v433;
  this[404].i32[0] = 0;
  this[404].i32[1] = *((_DWORD *)v436 + 1);
  this[405] = vmax_s32(v942, 0);
  v437 = v947;
  v947 = 0;
  if (v437)
  {
    if (*(_DWORD *)v437 == 2)
      WTF::StringImpl::destroy(v437, v434);
    else
      *(_DWORD *)v437 -= 2;
  }
  v438 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v438)
  {
    if (v438[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v438 + 8))(v438);
    else
      --v438[2];
  }
  v439 = v944[0];
  v944[0] = 0;
  if (v439)
  {
    if (*(_DWORD *)v439 == 2)
      WTF::StringImpl::destroy(v439, v434);
    else
      *(_DWORD *)v439 -= 2;
  }
  if (v432)
  {
    if (*(_DWORD *)v432 == 2)
      WTF::StringImpl::destroy(v432, v434);
    else
      *(_DWORD *)v432 -= 2;
  }
  v440 = v943;
  v943 = 0;
  if (v440)
  {
    if (*(_DWORD *)v440 == 2)
      WTF::StringImpl::destroy(v440, v434);
    else
      *(_DWORD *)v440 -= 2;
  }
  this[406] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v441 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v442 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v444 = v948;
  v948 = 0;
  if (v444)
  {
    if (*(_DWORD *)v444 == 2)
      WTF::StringImpl::destroy(v444, v443);
    else
      *(_DWORD *)v444 -= 2;
  }
  *v442 = off_1E33948F0;
  if (v441)
    v445 = v441;
  else
    v445 = v22;
  *(_DWORD *)v445 += 2;
  v442[15] = v445;
  this[407] = (int32x2_t)v442;
  this[408].i32[0] = 0;
  this[408].i32[1] = *((_DWORD *)v445 + 1);
  this[409] = vmax_s32(v942, 0);
  v446 = v947;
  v947 = 0;
  if (v446)
  {
    if (*(_DWORD *)v446 == 2)
      WTF::StringImpl::destroy(v446, v443);
    else
      *(_DWORD *)v446 -= 2;
  }
  v447 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v447)
  {
    if (v447[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v447 + 8))(v447);
    else
      --v447[2];
  }
  v448 = v944[0];
  v944[0] = 0;
  if (v448)
  {
    if (*(_DWORD *)v448 == 2)
      WTF::StringImpl::destroy(v448, v443);
    else
      *(_DWORD *)v448 -= 2;
  }
  if (v441)
  {
    if (*(_DWORD *)v441 == 2)
      WTF::StringImpl::destroy(v441, v443);
    else
      *(_DWORD *)v441 -= 2;
  }
  v449 = v943;
  v943 = 0;
  if (v449)
  {
    if (*(_DWORD *)v449 == 2)
      WTF::StringImpl::destroy(v449, v443);
    else
      *(_DWORD *)v449 -= 2;
  }
  this[410] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v450 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v451 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v453 = v948;
  v948 = 0;
  if (v453)
  {
    if (*(_DWORD *)v453 == 2)
      WTF::StringImpl::destroy(v453, v452);
    else
      *(_DWORD *)v453 -= 2;
  }
  *v451 = off_1E33948F0;
  if (v450)
    v454 = v450;
  else
    v454 = v22;
  *(_DWORD *)v454 += 2;
  v451[15] = v454;
  this[411] = (int32x2_t)v451;
  this[412].i32[0] = 0;
  this[412].i32[1] = *((_DWORD *)v454 + 1);
  this[413] = vmax_s32(v942, 0);
  v455 = v947;
  v947 = 0;
  if (v455)
  {
    if (*(_DWORD *)v455 == 2)
      WTF::StringImpl::destroy(v455, v452);
    else
      *(_DWORD *)v455 -= 2;
  }
  v456 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v456)
  {
    if (v456[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v456 + 8))(v456);
    else
      --v456[2];
  }
  v457 = v944[0];
  v944[0] = 0;
  if (v457)
  {
    if (*(_DWORD *)v457 == 2)
      WTF::StringImpl::destroy(v457, v452);
    else
      *(_DWORD *)v457 -= 2;
  }
  if (v450)
  {
    if (*(_DWORD *)v450 == 2)
      WTF::StringImpl::destroy(v450, v452);
    else
      *(_DWORD *)v450 -= 2;
  }
  v458 = v943;
  v943 = 0;
  if (v458)
  {
    if (*(_DWORD *)v458 == 2)
      WTF::StringImpl::destroy(v458, v452);
    else
      *(_DWORD *)v458 -= 2;
  }
  this[414] = 0;
  v459 = *this;
  this[415] = (int32x2_t)&off_1E3394058;
  this[416] = v459;
  WTF::AtomStringImpl::addLiteral();
  this[417] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v460 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v461);
  v463 = v944[0];
  v464 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[418] = (int32x2_t)v463;
  if (v464)
    *(_DWORD *)v463 = v464;
  else
    WTF::StringImpl::destroy(v463, v462);
  if (*(_DWORD *)v460 == 2)
    WTF::StringImpl::destroy(v460, v462);
  else
    *(_DWORD *)v460 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[419] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v465 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v466);
  v468 = v944[0];
  v469 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[420] = (int32x2_t)v468;
  if (v469)
    *(_DWORD *)v468 = v469;
  else
    WTF::StringImpl::destroy(v468, v467);
  if (*(_DWORD *)v465 == 2)
    WTF::StringImpl::destroy(v465, v467);
  else
    *(_DWORD *)v465 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[421] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v470 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v471);
  v473 = v944[0];
  v474 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[422] = (int32x2_t)v473;
  if (v474)
    *(_DWORD *)v473 = v474;
  else
    WTF::StringImpl::destroy(v473, v472);
  if (*(_DWORD *)v470 == 2)
    WTF::StringImpl::destroy(v470, v472);
  else
    *(_DWORD *)v470 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[423] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v475 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v476);
  v478 = v944[0];
  v479 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[424] = (int32x2_t)v478;
  if (v479)
    *(_DWORD *)v478 = v479;
  else
    WTF::StringImpl::destroy(v478, v477);
  if (*(_DWORD *)v475 == 2)
    WTF::StringImpl::destroy(v475, v477);
  else
    *(_DWORD *)v475 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[425] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v480 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v481);
  v483 = v944[0];
  v484 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[426] = (int32x2_t)v483;
  if (v484)
    *(_DWORD *)v483 = v484;
  else
    WTF::StringImpl::destroy(v483, v482);
  if (*(_DWORD *)v480 == 2)
    WTF::StringImpl::destroy(v480, v482);
  else
    *(_DWORD *)v480 -= 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v485 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v486 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v488 = v948;
  v948 = 0;
  if (v488)
  {
    if (*(_DWORD *)v488 == 2)
      WTF::StringImpl::destroy(v488, v487);
    else
      *(_DWORD *)v488 -= 2;
  }
  *v486 = off_1E33948F0;
  if (v485)
    v489 = v485;
  else
    v489 = v22;
  *(_DWORD *)v489 += 2;
  v486[15] = v489;
  this[427] = (int32x2_t)v486;
  this[428].i32[0] = 0;
  this[428].i32[1] = *((_DWORD *)v489 + 1);
  this[429] = vmax_s32(v942, 0);
  v490 = v947;
  v947 = 0;
  if (v490)
  {
    if (*(_DWORD *)v490 == 2)
      WTF::StringImpl::destroy(v490, v487);
    else
      *(_DWORD *)v490 -= 2;
  }
  v491 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v491)
  {
    if (v491[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v491 + 8))(v491);
    else
      --v491[2];
  }
  v492 = v944[0];
  v944[0] = 0;
  if (v492)
  {
    if (*(_DWORD *)v492 == 2)
      WTF::StringImpl::destroy(v492, v487);
    else
      *(_DWORD *)v492 -= 2;
  }
  if (v485)
  {
    if (*(_DWORD *)v485 == 2)
      WTF::StringImpl::destroy(v485, v487);
    else
      *(_DWORD *)v485 -= 2;
  }
  v493 = v943;
  v943 = 0;
  if (v493)
  {
    if (*(_DWORD *)v493 == 2)
      WTF::StringImpl::destroy(v493, v487);
    else
      *(_DWORD *)v493 -= 2;
  }
  this[430] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v494 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v495 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v497 = v948;
  v948 = 0;
  if (v497)
  {
    if (*(_DWORD *)v497 == 2)
      WTF::StringImpl::destroy(v497, v496);
    else
      *(_DWORD *)v497 -= 2;
  }
  *v495 = off_1E33948F0;
  if (v494)
    v498 = v494;
  else
    v498 = v22;
  *(_DWORD *)v498 += 2;
  v495[15] = v498;
  this[431] = (int32x2_t)v495;
  this[432].i32[0] = 0;
  this[432].i32[1] = *((_DWORD *)v498 + 1);
  this[433] = vmax_s32(v942, 0);
  v499 = v947;
  v947 = 0;
  if (v499)
  {
    if (*(_DWORD *)v499 == 2)
      WTF::StringImpl::destroy(v499, v496);
    else
      *(_DWORD *)v499 -= 2;
  }
  v500 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v500)
  {
    if (v500[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v500 + 8))(v500);
    else
      --v500[2];
  }
  v501 = v944[0];
  v944[0] = 0;
  if (v501)
  {
    if (*(_DWORD *)v501 == 2)
      WTF::StringImpl::destroy(v501, v496);
    else
      *(_DWORD *)v501 -= 2;
  }
  if (v494)
  {
    if (*(_DWORD *)v494 == 2)
      WTF::StringImpl::destroy(v494, v496);
    else
      *(_DWORD *)v494 -= 2;
  }
  v502 = v943;
  v943 = 0;
  if (v502)
  {
    if (*(_DWORD *)v502 == 2)
      WTF::StringImpl::destroy(v502, v496);
    else
      *(_DWORD *)v502 -= 2;
  }
  this[434] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v503 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v504 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v506 = v948;
  v948 = 0;
  if (v506)
  {
    if (*(_DWORD *)v506 == 2)
      WTF::StringImpl::destroy(v506, v505);
    else
      *(_DWORD *)v506 -= 2;
  }
  *v504 = off_1E33948F0;
  if (v503)
    v507 = v503;
  else
    v507 = v22;
  *(_DWORD *)v507 += 2;
  v504[15] = v507;
  this[435] = (int32x2_t)v504;
  this[436].i32[0] = 0;
  this[436].i32[1] = *((_DWORD *)v507 + 1);
  this[437] = vmax_s32(v942, 0);
  v508 = v947;
  v947 = 0;
  if (v508)
  {
    if (*(_DWORD *)v508 == 2)
      WTF::StringImpl::destroy(v508, v505);
    else
      *(_DWORD *)v508 -= 2;
  }
  v509 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v509)
  {
    if (v509[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v509 + 8))(v509);
    else
      --v509[2];
  }
  v510 = v944[0];
  v944[0] = 0;
  if (v510)
  {
    if (*(_DWORD *)v510 == 2)
      WTF::StringImpl::destroy(v510, v505);
    else
      *(_DWORD *)v510 -= 2;
  }
  if (v503)
  {
    if (*(_DWORD *)v503 == 2)
      WTF::StringImpl::destroy(v503, v505);
    else
      *(_DWORD *)v503 -= 2;
  }
  v511 = v943;
  v943 = 0;
  if (v511)
  {
    if (*(_DWORD *)v511 == 2)
      WTF::StringImpl::destroy(v511, v505);
    else
      *(_DWORD *)v511 -= 2;
  }
  this[438] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v512 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v513 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v515 = v948;
  v948 = 0;
  if (v515)
  {
    if (*(_DWORD *)v515 == 2)
      WTF::StringImpl::destroy(v515, v514);
    else
      *(_DWORD *)v515 -= 2;
  }
  *v513 = off_1E33948F0;
  if (v512)
    v516 = v512;
  else
    v516 = v22;
  *(_DWORD *)v516 += 2;
  v513[15] = v516;
  this[439] = (int32x2_t)v513;
  this[440].i32[0] = 0;
  this[440].i32[1] = *((_DWORD *)v516 + 1);
  this[441] = vmax_s32(v942, 0);
  v517 = v947;
  v947 = 0;
  if (v517)
  {
    if (*(_DWORD *)v517 == 2)
      WTF::StringImpl::destroy(v517, v514);
    else
      *(_DWORD *)v517 -= 2;
  }
  v518 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v518)
  {
    if (v518[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v518 + 8))(v518);
    else
      --v518[2];
  }
  v519 = v944[0];
  v944[0] = 0;
  if (v519)
  {
    if (*(_DWORD *)v519 == 2)
      WTF::StringImpl::destroy(v519, v514);
    else
      *(_DWORD *)v519 -= 2;
  }
  if (v512)
  {
    if (*(_DWORD *)v512 == 2)
      WTF::StringImpl::destroy(v512, v514);
    else
      *(_DWORD *)v512 -= 2;
  }
  v520 = v943;
  v943 = 0;
  if (v520)
  {
    if (*(_DWORD *)v520 == 2)
      WTF::StringImpl::destroy(v520, v514);
    else
      *(_DWORD *)v520 -= 2;
  }
  this[442] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v521 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v522 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v524 = v948;
  v948 = 0;
  if (v524)
  {
    if (*(_DWORD *)v524 == 2)
      WTF::StringImpl::destroy(v524, v523);
    else
      *(_DWORD *)v524 -= 2;
  }
  *v522 = off_1E33948F0;
  if (v521)
    v525 = v521;
  else
    v525 = v22;
  *(_DWORD *)v525 += 2;
  v522[15] = v525;
  this[443] = (int32x2_t)v522;
  this[444].i32[0] = 0;
  this[444].i32[1] = *((_DWORD *)v525 + 1);
  this[445] = vmax_s32(v942, 0);
  v526 = v947;
  v947 = 0;
  if (v526)
  {
    if (*(_DWORD *)v526 == 2)
      WTF::StringImpl::destroy(v526, v523);
    else
      *(_DWORD *)v526 -= 2;
  }
  v527 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v527)
  {
    if (v527[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v527 + 8))(v527);
    else
      --v527[2];
  }
  v528 = v944[0];
  v944[0] = 0;
  if (v528)
  {
    if (*(_DWORD *)v528 == 2)
      WTF::StringImpl::destroy(v528, v523);
    else
      *(_DWORD *)v528 -= 2;
  }
  if (v521)
  {
    if (*(_DWORD *)v521 == 2)
      WTF::StringImpl::destroy(v521, v523);
    else
      *(_DWORD *)v521 -= 2;
  }
  v529 = v943;
  v943 = 0;
  if (v529)
  {
    if (*(_DWORD *)v529 == 2)
      WTF::StringImpl::destroy(v529, v523);
    else
      *(_DWORD *)v529 -= 2;
  }
  this[446] = 0;
  WebCore::ReadableStreamInternalsBuiltinsWrapper::ReadableStreamInternalsBuiltinsWrapper(this + 447, *(JSC::VM **)this);
  WebCore::StreamInternalsBuiltinsWrapper::StreamInternalsBuiltinsWrapper(this + 737, *(JSC::VM **)this);
  v530 = *this;
  this[847] = (int32x2_t)&off_1E33940E8;
  this[848] = v530;
  WTF::AtomStringImpl::addLiteral();
  this[849] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v531 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v532);
  v534 = v944[0];
  v535 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[850] = (int32x2_t)v534;
  if (v535)
    *(_DWORD *)v534 = v535;
  else
    WTF::StringImpl::destroy(v534, v533);
  if (*(_DWORD *)v531 == 2)
    WTF::StringImpl::destroy(v531, v533);
  else
    *(_DWORD *)v531 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[851] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v536 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v537);
  v539 = v944[0];
  v540 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[852] = (int32x2_t)v539;
  if (v540)
    *(_DWORD *)v539 = v540;
  else
    WTF::StringImpl::destroy(v539, v538);
  if (*(_DWORD *)v536 == 2)
    WTF::StringImpl::destroy(v536, v538);
  else
    *(_DWORD *)v536 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[853] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v541 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v542);
  v544 = v944[0];
  v545 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[854] = (int32x2_t)v544;
  if (v545)
    *(_DWORD *)v544 = v545;
  else
    WTF::StringImpl::destroy(v544, v543);
  if (*(_DWORD *)v541 == 2)
    WTF::StringImpl::destroy(v541, v543);
  else
    *(_DWORD *)v541 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[855] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v546 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v547);
  v549 = v944[0];
  v550 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[856] = (int32x2_t)v549;
  if (v550)
    *(_DWORD *)v549 = v550;
  else
    WTF::StringImpl::destroy(v549, v548);
  if (*(_DWORD *)v546 == 2)
    WTF::StringImpl::destroy(v546, v548);
  else
    *(_DWORD *)v546 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[857] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v551 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v552);
  v554 = v944[0];
  v555 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[858] = (int32x2_t)v554;
  if (v555)
    *(_DWORD *)v554 = v555;
  else
    WTF::StringImpl::destroy(v554, v553);
  if (*(_DWORD *)v551 == 2)
    WTF::StringImpl::destroy(v551, v553);
  else
    *(_DWORD *)v551 -= 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v556 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v557 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v559 = v948;
  v948 = 0;
  if (v559)
  {
    if (*(_DWORD *)v559 == 2)
      WTF::StringImpl::destroy(v559, v558);
    else
      *(_DWORD *)v559 -= 2;
  }
  *v557 = off_1E33948F0;
  if (v556)
    v560 = v556;
  else
    v560 = v22;
  *(_DWORD *)v560 += 2;
  v557[15] = v560;
  this[859] = (int32x2_t)v557;
  this[860].i32[0] = 0;
  this[860].i32[1] = *((_DWORD *)v560 + 1);
  this[861] = vmax_s32(v942, 0);
  v561 = v947;
  v947 = 0;
  if (v561)
  {
    if (*(_DWORD *)v561 == 2)
      WTF::StringImpl::destroy(v561, v558);
    else
      *(_DWORD *)v561 -= 2;
  }
  v562 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v562)
  {
    if (v562[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v562 + 8))(v562);
    else
      --v562[2];
  }
  v563 = v944[0];
  v944[0] = 0;
  if (v563)
  {
    if (*(_DWORD *)v563 == 2)
      WTF::StringImpl::destroy(v563, v558);
    else
      *(_DWORD *)v563 -= 2;
  }
  if (v556)
  {
    if (*(_DWORD *)v556 == 2)
      WTF::StringImpl::destroy(v556, v558);
    else
      *(_DWORD *)v556 -= 2;
  }
  v564 = v943;
  v943 = 0;
  if (v564)
  {
    if (*(_DWORD *)v564 == 2)
      WTF::StringImpl::destroy(v564, v558);
    else
      *(_DWORD *)v564 -= 2;
  }
  this[862] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v565 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v566 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v568 = v948;
  v948 = 0;
  if (v568)
  {
    if (*(_DWORD *)v568 == 2)
      WTF::StringImpl::destroy(v568, v567);
    else
      *(_DWORD *)v568 -= 2;
  }
  *v566 = off_1E33948F0;
  if (v565)
    v569 = v565;
  else
    v569 = v22;
  *(_DWORD *)v569 += 2;
  v566[15] = v569;
  this[863] = (int32x2_t)v566;
  this[864].i32[0] = 0;
  this[864].i32[1] = *((_DWORD *)v569 + 1);
  this[865] = vmax_s32(v942, 0);
  v570 = v947;
  v947 = 0;
  if (v570)
  {
    if (*(_DWORD *)v570 == 2)
      WTF::StringImpl::destroy(v570, v567);
    else
      *(_DWORD *)v570 -= 2;
  }
  v571 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v571)
  {
    if (v571[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v571 + 8))(v571);
    else
      --v571[2];
  }
  v572 = v944[0];
  v944[0] = 0;
  if (v572)
  {
    if (*(_DWORD *)v572 == 2)
      WTF::StringImpl::destroy(v572, v567);
    else
      *(_DWORD *)v572 -= 2;
  }
  if (v565)
  {
    if (*(_DWORD *)v565 == 2)
      WTF::StringImpl::destroy(v565, v567);
    else
      *(_DWORD *)v565 -= 2;
  }
  v573 = v943;
  v943 = 0;
  if (v573)
  {
    if (*(_DWORD *)v573 == 2)
      WTF::StringImpl::destroy(v573, v567);
    else
      *(_DWORD *)v573 -= 2;
  }
  this[866] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v574 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v575 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v577 = v948;
  v948 = 0;
  if (v577)
  {
    if (*(_DWORD *)v577 == 2)
      WTF::StringImpl::destroy(v577, v576);
    else
      *(_DWORD *)v577 -= 2;
  }
  *v575 = off_1E33948F0;
  if (v574)
    v578 = v574;
  else
    v578 = v22;
  *(_DWORD *)v578 += 2;
  v575[15] = v578;
  this[867] = (int32x2_t)v575;
  this[868].i32[0] = 0;
  this[868].i32[1] = *((_DWORD *)v578 + 1);
  this[869] = vmax_s32(v942, 0);
  v579 = v947;
  v947 = 0;
  if (v579)
  {
    if (*(_DWORD *)v579 == 2)
      WTF::StringImpl::destroy(v579, v576);
    else
      *(_DWORD *)v579 -= 2;
  }
  v580 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v580)
  {
    if (v580[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v580 + 8))(v580);
    else
      --v580[2];
  }
  v581 = v944[0];
  v944[0] = 0;
  if (v581)
  {
    if (*(_DWORD *)v581 == 2)
      WTF::StringImpl::destroy(v581, v576);
    else
      *(_DWORD *)v581 -= 2;
  }
  if (v574)
  {
    if (*(_DWORD *)v574 == 2)
      WTF::StringImpl::destroy(v574, v576);
    else
      *(_DWORD *)v574 -= 2;
  }
  v582 = v943;
  v943 = 0;
  if (v582)
  {
    if (*(_DWORD *)v582 == 2)
      WTF::StringImpl::destroy(v582, v576);
    else
      *(_DWORD *)v582 -= 2;
  }
  this[870] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v583 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v584 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v586 = v948;
  v948 = 0;
  if (v586)
  {
    if (*(_DWORD *)v586 == 2)
      WTF::StringImpl::destroy(v586, v585);
    else
      *(_DWORD *)v586 -= 2;
  }
  *v584 = off_1E33948F0;
  if (v583)
    v587 = v583;
  else
    v587 = v22;
  *(_DWORD *)v587 += 2;
  v584[15] = v587;
  this[871] = (int32x2_t)v584;
  this[872].i32[0] = 0;
  this[872].i32[1] = *((_DWORD *)v587 + 1);
  this[873] = vmax_s32(v942, 0);
  v588 = v947;
  v947 = 0;
  if (v588)
  {
    if (*(_DWORD *)v588 == 2)
      WTF::StringImpl::destroy(v588, v585);
    else
      *(_DWORD *)v588 -= 2;
  }
  v589 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v589)
  {
    if (v589[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v589 + 8))(v589);
    else
      --v589[2];
  }
  v590 = v944[0];
  v944[0] = 0;
  if (v590)
  {
    if (*(_DWORD *)v590 == 2)
      WTF::StringImpl::destroy(v590, v585);
    else
      *(_DWORD *)v590 -= 2;
  }
  if (v583)
  {
    if (*(_DWORD *)v583 == 2)
      WTF::StringImpl::destroy(v583, v585);
    else
      *(_DWORD *)v583 -= 2;
  }
  v591 = v943;
  v943 = 0;
  if (v591)
  {
    if (*(_DWORD *)v591 == 2)
      WTF::StringImpl::destroy(v591, v585);
    else
      *(_DWORD *)v591 -= 2;
  }
  this[874] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v592 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v593 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v595 = v948;
  v948 = 0;
  if (v595)
  {
    if (*(_DWORD *)v595 == 2)
      WTF::StringImpl::destroy(v595, v594);
    else
      *(_DWORD *)v595 -= 2;
  }
  *v593 = off_1E33948F0;
  if (v592)
    v596 = v592;
  else
    v596 = v22;
  *(_DWORD *)v596 += 2;
  v593[15] = v596;
  this[875] = (int32x2_t)v593;
  this[876].i32[0] = 0;
  this[876].i32[1] = *((_DWORD *)v596 + 1);
  this[877] = vmax_s32(v942, 0);
  v597 = v947;
  v947 = 0;
  if (v597)
  {
    if (*(_DWORD *)v597 == 2)
      WTF::StringImpl::destroy(v597, v594);
    else
      *(_DWORD *)v597 -= 2;
  }
  v598 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v598)
  {
    if (v598[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v598 + 8))(v598);
    else
      --v598[2];
  }
  v599 = v944[0];
  v944[0] = 0;
  if (v599)
  {
    if (*(_DWORD *)v599 == 2)
      WTF::StringImpl::destroy(v599, v594);
    else
      *(_DWORD *)v599 -= 2;
  }
  if (v592)
  {
    if (*(_DWORD *)v592 == 2)
      WTF::StringImpl::destroy(v592, v594);
    else
      *(_DWORD *)v592 -= 2;
  }
  v600 = v943;
  v943 = 0;
  if (v600)
  {
    if (*(_DWORD *)v600 == 2)
      WTF::StringImpl::destroy(v600, v594);
    else
      *(_DWORD *)v600 -= 2;
  }
  this[878] = 0;
  WebCore::TransformStreamInternalsBuiltinsWrapper::TransformStreamInternalsBuiltinsWrapper(this + 879, *(JSC::VM **)this);
  v601 = *this;
  this[995] = (int32x2_t)&off_1E3394148;
  this[996] = v601;
  WTF::AtomStringImpl::addLiteral();
  this[997] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v602 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v603);
  v605 = v944[0];
  v606 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[998] = (int32x2_t)v605;
  if (v606)
    *(_DWORD *)v605 = v606;
  else
    WTF::StringImpl::destroy(v605, v604);
  if (*(_DWORD *)v602 == 2)
    WTF::StringImpl::destroy(v602, v604);
  else
    *(_DWORD *)v602 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[999] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v607 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v608);
  v610 = v944[0];
  v611 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[1000] = (int32x2_t)v610;
  if (v611)
    *(_DWORD *)v610 = v611;
  else
    WTF::StringImpl::destroy(v610, v609);
  if (*(_DWORD *)v607 == 2)
    WTF::StringImpl::destroy(v607, v609);
  else
    *(_DWORD *)v607 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[1001] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v612 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v613);
  v615 = v944[0];
  v616 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[1002] = (int32x2_t)v615;
  if (v616)
    *(_DWORD *)v615 = v616;
  else
    WTF::StringImpl::destroy(v615, v614);
  if (*(_DWORD *)v612 == 2)
    WTF::StringImpl::destroy(v612, v614);
  else
    *(_DWORD *)v612 -= 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v617 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v618 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v620 = v948;
  v948 = 0;
  if (v620)
  {
    if (*(_DWORD *)v620 == 2)
      WTF::StringImpl::destroy(v620, v619);
    else
      *(_DWORD *)v620 -= 2;
  }
  *v618 = off_1E33948F0;
  if (v617)
    v621 = v617;
  else
    v621 = v22;
  *(_DWORD *)v621 += 2;
  v618[15] = v621;
  this[1003] = (int32x2_t)v618;
  this[1004].i32[0] = 0;
  this[1004].i32[1] = *((_DWORD *)v621 + 1);
  this[1005] = vmax_s32(v942, 0);
  v622 = v947;
  v947 = 0;
  if (v622)
  {
    if (*(_DWORD *)v622 == 2)
      WTF::StringImpl::destroy(v622, v619);
    else
      *(_DWORD *)v622 -= 2;
  }
  v623 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v623)
  {
    if (v623[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v623 + 8))(v623);
    else
      --v623[2];
  }
  v624 = v944[0];
  v944[0] = 0;
  if (v624)
  {
    if (*(_DWORD *)v624 == 2)
      WTF::StringImpl::destroy(v624, v619);
    else
      *(_DWORD *)v624 -= 2;
  }
  if (v617)
  {
    if (*(_DWORD *)v617 == 2)
      WTF::StringImpl::destroy(v617, v619);
    else
      *(_DWORD *)v617 -= 2;
  }
  v625 = v943;
  v943 = 0;
  if (v625)
  {
    if (*(_DWORD *)v625 == 2)
      WTF::StringImpl::destroy(v625, v619);
    else
      *(_DWORD *)v625 -= 2;
  }
  this[1006] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v626 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v627 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v629 = v948;
  v948 = 0;
  if (v629)
  {
    if (*(_DWORD *)v629 == 2)
      WTF::StringImpl::destroy(v629, v628);
    else
      *(_DWORD *)v629 -= 2;
  }
  *v627 = off_1E33948F0;
  if (v626)
    v630 = v626;
  else
    v630 = v22;
  *(_DWORD *)v630 += 2;
  v627[15] = v630;
  this[1007] = (int32x2_t)v627;
  this[1008].i32[0] = 0;
  this[1008].i32[1] = *((_DWORD *)v630 + 1);
  this[1009] = vmax_s32(v942, 0);
  v631 = v947;
  v947 = 0;
  if (v631)
  {
    if (*(_DWORD *)v631 == 2)
      WTF::StringImpl::destroy(v631, v628);
    else
      *(_DWORD *)v631 -= 2;
  }
  v632 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v632)
  {
    if (v632[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v632 + 8))(v632);
    else
      --v632[2];
  }
  v633 = v944[0];
  v944[0] = 0;
  if (v633)
  {
    if (*(_DWORD *)v633 == 2)
      WTF::StringImpl::destroy(v633, v628);
    else
      *(_DWORD *)v633 -= 2;
  }
  if (v626)
  {
    if (*(_DWORD *)v626 == 2)
      WTF::StringImpl::destroy(v626, v628);
    else
      *(_DWORD *)v626 -= 2;
  }
  v634 = v943;
  v943 = 0;
  if (v634)
  {
    if (*(_DWORD *)v634 == 2)
      WTF::StringImpl::destroy(v634, v628);
    else
      *(_DWORD *)v634 -= 2;
  }
  this[1010] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v635 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v636 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v638 = v948;
  v948 = 0;
  if (v638)
  {
    if (*(_DWORD *)v638 == 2)
      WTF::StringImpl::destroy(v638, v637);
    else
      *(_DWORD *)v638 -= 2;
  }
  *v636 = off_1E33948F0;
  if (v635)
    v639 = v635;
  else
    v639 = v22;
  *(_DWORD *)v639 += 2;
  v636[15] = v639;
  this[1011] = (int32x2_t)v636;
  this[1012].i32[0] = 0;
  this[1012].i32[1] = *((_DWORD *)v639 + 1);
  this[1013] = vmax_s32(v942, 0);
  v640 = v947;
  v947 = 0;
  if (v640)
  {
    if (*(_DWORD *)v640 == 2)
      WTF::StringImpl::destroy(v640, v637);
    else
      *(_DWORD *)v640 -= 2;
  }
  v641 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v641)
  {
    if (v641[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v641 + 8))(v641);
    else
      --v641[2];
  }
  v642 = v944[0];
  v944[0] = 0;
  if (v642)
  {
    if (*(_DWORD *)v642 == 2)
      WTF::StringImpl::destroy(v642, v637);
    else
      *(_DWORD *)v642 -= 2;
  }
  if (v635)
  {
    if (*(_DWORD *)v635 == 2)
      WTF::StringImpl::destroy(v635, v637);
    else
      *(_DWORD *)v635 -= 2;
  }
  v643 = v943;
  v943 = 0;
  if (v643)
  {
    if (*(_DWORD *)v643 == 2)
      WTF::StringImpl::destroy(v643, v637);
    else
      *(_DWORD *)v643 -= 2;
  }
  this[1014] = 0;
  v644 = *this;
  this[1015] = (int32x2_t)&off_1E3394178;
  this[1016] = v644;
  WTF::AtomStringImpl::addLiteral();
  this[1017] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v645 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v646);
  v648 = v944[0];
  v649 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[1018] = (int32x2_t)v648;
  if (v649)
    *(_DWORD *)v648 = v649;
  else
    WTF::StringImpl::destroy(v648, v647);
  if (*(_DWORD *)v645 == 2)
    WTF::StringImpl::destroy(v645, v647);
  else
    *(_DWORD *)v645 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[1019] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v650 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v651);
  v653 = v944[0];
  v654 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[1020] = (int32x2_t)v653;
  if (v654)
    *(_DWORD *)v653 = v654;
  else
    WTF::StringImpl::destroy(v653, v652);
  if (*(_DWORD *)v650 == 2)
    WTF::StringImpl::destroy(v650, v652);
  else
    *(_DWORD *)v650 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[1021] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v655 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v656);
  v658 = v944[0];
  v659 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[1022] = (int32x2_t)v658;
  if (v659)
    *(_DWORD *)v658 = v659;
  else
    WTF::StringImpl::destroy(v658, v657);
  if (*(_DWORD *)v655 == 2)
    WTF::StringImpl::destroy(v655, v657);
  else
    *(_DWORD *)v655 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[1023] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v660 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v661);
  v663 = v944[0];
  v664 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[1024] = (int32x2_t)v663;
  if (v664)
    *(_DWORD *)v663 = v664;
  else
    WTF::StringImpl::destroy(v663, v662);
  if (*(_DWORD *)v660 == 2)
    WTF::StringImpl::destroy(v660, v662);
  else
    *(_DWORD *)v660 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[1025] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v665 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v666);
  v668 = v944[0];
  v669 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[1026] = (int32x2_t)v668;
  if (v669)
    *(_DWORD *)v668 = v669;
  else
    WTF::StringImpl::destroy(v668, v667);
  if (*(_DWORD *)v665 == 2)
    WTF::StringImpl::destroy(v665, v667);
  else
    *(_DWORD *)v665 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[1027] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v670 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v671);
  v673 = v944[0];
  v674 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[1028] = (int32x2_t)v673;
  if (v674)
    *(_DWORD *)v673 = v674;
  else
    WTF::StringImpl::destroy(v673, v672);
  if (*(_DWORD *)v670 == 2)
    WTF::StringImpl::destroy(v670, v672);
  else
    *(_DWORD *)v670 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[1029] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v675 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v676);
  v678 = v944[0];
  v679 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[1030] = (int32x2_t)v678;
  if (v679)
    *(_DWORD *)v678 = v679;
  else
    WTF::StringImpl::destroy(v678, v677);
  if (*(_DWORD *)v675 == 2)
    WTF::StringImpl::destroy(v675, v677);
  else
    *(_DWORD *)v675 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[1031] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v680 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v681);
  v683 = v944[0];
  v684 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[1032] = (int32x2_t)v683;
  if (v684)
    *(_DWORD *)v683 = v684;
  else
    WTF::StringImpl::destroy(v683, v682);
  if (*(_DWORD *)v680 == 2)
    WTF::StringImpl::destroy(v680, v682);
  else
    *(_DWORD *)v680 -= 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v685 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v686 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v688 = v948;
  v948 = 0;
  if (v688)
  {
    if (*(_DWORD *)v688 == 2)
      WTF::StringImpl::destroy(v688, v687);
    else
      *(_DWORD *)v688 -= 2;
  }
  *v686 = off_1E33948F0;
  if (v685)
    v689 = v685;
  else
    v689 = v22;
  *(_DWORD *)v689 += 2;
  v686[15] = v689;
  this[1033] = (int32x2_t)v686;
  this[1034].i32[0] = 0;
  this[1034].i32[1] = *((_DWORD *)v689 + 1);
  this[1035] = vmax_s32(v942, 0);
  v690 = v947;
  v947 = 0;
  if (v690)
  {
    if (*(_DWORD *)v690 == 2)
      WTF::StringImpl::destroy(v690, v687);
    else
      *(_DWORD *)v690 -= 2;
  }
  v691 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v691)
  {
    if (v691[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v691 + 8))(v691);
    else
      --v691[2];
  }
  v692 = v944[0];
  v944[0] = 0;
  if (v692)
  {
    if (*(_DWORD *)v692 == 2)
      WTF::StringImpl::destroy(v692, v687);
    else
      *(_DWORD *)v692 -= 2;
  }
  if (v685)
  {
    if (*(_DWORD *)v685 == 2)
      WTF::StringImpl::destroy(v685, v687);
    else
      *(_DWORD *)v685 -= 2;
  }
  v693 = v943;
  v943 = 0;
  if (v693)
  {
    if (*(_DWORD *)v693 == 2)
      WTF::StringImpl::destroy(v693, v687);
    else
      *(_DWORD *)v693 -= 2;
  }
  this[1036] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v694 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v695 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v697 = v948;
  v948 = 0;
  if (v697)
  {
    if (*(_DWORD *)v697 == 2)
      WTF::StringImpl::destroy(v697, v696);
    else
      *(_DWORD *)v697 -= 2;
  }
  *v695 = off_1E33948F0;
  if (v694)
    v698 = v694;
  else
    v698 = v22;
  *(_DWORD *)v698 += 2;
  v695[15] = v698;
  this[1037] = (int32x2_t)v695;
  this[1038].i32[0] = 0;
  this[1038].i32[1] = *((_DWORD *)v698 + 1);
  this[1039] = vmax_s32(v942, 0);
  v699 = v947;
  v947 = 0;
  if (v699)
  {
    if (*(_DWORD *)v699 == 2)
      WTF::StringImpl::destroy(v699, v696);
    else
      *(_DWORD *)v699 -= 2;
  }
  v700 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v700)
  {
    if (v700[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v700 + 8))(v700);
    else
      --v700[2];
  }
  v701 = v944[0];
  v944[0] = 0;
  if (v701)
  {
    if (*(_DWORD *)v701 == 2)
      WTF::StringImpl::destroy(v701, v696);
    else
      *(_DWORD *)v701 -= 2;
  }
  if (v694)
  {
    if (*(_DWORD *)v694 == 2)
      WTF::StringImpl::destroy(v694, v696);
    else
      *(_DWORD *)v694 -= 2;
  }
  v702 = v943;
  v943 = 0;
  if (v702)
  {
    if (*(_DWORD *)v702 == 2)
      WTF::StringImpl::destroy(v702, v696);
    else
      *(_DWORD *)v702 -= 2;
  }
  this[1040] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v703 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v704 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v706 = v948;
  v948 = 0;
  if (v706)
  {
    if (*(_DWORD *)v706 == 2)
      WTF::StringImpl::destroy(v706, v705);
    else
      *(_DWORD *)v706 -= 2;
  }
  *v704 = off_1E33948F0;
  if (v703)
    v707 = v703;
  else
    v707 = v22;
  *(_DWORD *)v707 += 2;
  v704[15] = v707;
  this[1041] = (int32x2_t)v704;
  this[1042].i32[0] = 0;
  this[1042].i32[1] = *((_DWORD *)v707 + 1);
  this[1043] = vmax_s32(v942, 0);
  v708 = v947;
  v947 = 0;
  if (v708)
  {
    if (*(_DWORD *)v708 == 2)
      WTF::StringImpl::destroy(v708, v705);
    else
      *(_DWORD *)v708 -= 2;
  }
  v709 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v709)
  {
    if (v709[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v709 + 8))(v709);
    else
      --v709[2];
  }
  v710 = v944[0];
  v944[0] = 0;
  if (v710)
  {
    if (*(_DWORD *)v710 == 2)
      WTF::StringImpl::destroy(v710, v705);
    else
      *(_DWORD *)v710 -= 2;
  }
  if (v703)
  {
    if (*(_DWORD *)v703 == 2)
      WTF::StringImpl::destroy(v703, v705);
    else
      *(_DWORD *)v703 -= 2;
  }
  v711 = v943;
  v943 = 0;
  if (v711)
  {
    if (*(_DWORD *)v711 == 2)
      WTF::StringImpl::destroy(v711, v705);
    else
      *(_DWORD *)v711 -= 2;
  }
  this[1044] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v712 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v713 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v715 = v948;
  v948 = 0;
  if (v715)
  {
    if (*(_DWORD *)v715 == 2)
      WTF::StringImpl::destroy(v715, v714);
    else
      *(_DWORD *)v715 -= 2;
  }
  *v713 = off_1E33948F0;
  if (v712)
    v716 = v712;
  else
    v716 = v22;
  *(_DWORD *)v716 += 2;
  v713[15] = v716;
  this[1045] = (int32x2_t)v713;
  this[1046].i32[0] = 0;
  this[1046].i32[1] = *((_DWORD *)v716 + 1);
  this[1047] = vmax_s32(v942, 0);
  v717 = v947;
  v947 = 0;
  if (v717)
  {
    if (*(_DWORD *)v717 == 2)
      WTF::StringImpl::destroy(v717, v714);
    else
      *(_DWORD *)v717 -= 2;
  }
  v718 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v718)
  {
    if (v718[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v718 + 8))(v718);
    else
      --v718[2];
  }
  v719 = v944[0];
  v944[0] = 0;
  if (v719)
  {
    if (*(_DWORD *)v719 == 2)
      WTF::StringImpl::destroy(v719, v714);
    else
      *(_DWORD *)v719 -= 2;
  }
  if (v712)
  {
    if (*(_DWORD *)v712 == 2)
      WTF::StringImpl::destroy(v712, v714);
    else
      *(_DWORD *)v712 -= 2;
  }
  v720 = v943;
  v943 = 0;
  if (v720)
  {
    if (*(_DWORD *)v720 == 2)
      WTF::StringImpl::destroy(v720, v714);
    else
      *(_DWORD *)v720 -= 2;
  }
  this[1048] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v721 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v722 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v724 = v948;
  v948 = 0;
  if (v724)
  {
    if (*(_DWORD *)v724 == 2)
      WTF::StringImpl::destroy(v724, v723);
    else
      *(_DWORD *)v724 -= 2;
  }
  *v722 = off_1E33948F0;
  if (v721)
    v725 = v721;
  else
    v725 = v22;
  *(_DWORD *)v725 += 2;
  v722[15] = v725;
  this[1049] = (int32x2_t)v722;
  this[1050].i32[0] = 0;
  this[1050].i32[1] = *((_DWORD *)v725 + 1);
  this[1051] = vmax_s32(v942, 0);
  v726 = v947;
  v947 = 0;
  if (v726)
  {
    if (*(_DWORD *)v726 == 2)
      WTF::StringImpl::destroy(v726, v723);
    else
      *(_DWORD *)v726 -= 2;
  }
  v727 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v727)
  {
    if (v727[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v727 + 8))(v727);
    else
      --v727[2];
  }
  v728 = v944[0];
  v944[0] = 0;
  if (v728)
  {
    if (*(_DWORD *)v728 == 2)
      WTF::StringImpl::destroy(v728, v723);
    else
      *(_DWORD *)v728 -= 2;
  }
  if (v721)
  {
    if (*(_DWORD *)v721 == 2)
      WTF::StringImpl::destroy(v721, v723);
    else
      *(_DWORD *)v721 -= 2;
  }
  v729 = v943;
  v943 = 0;
  if (v729)
  {
    if (*(_DWORD *)v729 == 2)
      WTF::StringImpl::destroy(v729, v723);
    else
      *(_DWORD *)v729 -= 2;
  }
  this[1052] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v730 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v731 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v733 = v948;
  v948 = 0;
  if (v733)
  {
    if (*(_DWORD *)v733 == 2)
      WTF::StringImpl::destroy(v733, v732);
    else
      *(_DWORD *)v733 -= 2;
  }
  *v731 = off_1E33948F0;
  if (v730)
    v734 = v730;
  else
    v734 = v22;
  *(_DWORD *)v734 += 2;
  v731[15] = v734;
  this[1053] = (int32x2_t)v731;
  this[1054].i32[0] = 0;
  this[1054].i32[1] = *((_DWORD *)v734 + 1);
  this[1055] = vmax_s32(v942, 0);
  v735 = v947;
  v947 = 0;
  if (v735)
  {
    if (*(_DWORD *)v735 == 2)
      WTF::StringImpl::destroy(v735, v732);
    else
      *(_DWORD *)v735 -= 2;
  }
  v736 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v736)
  {
    if (v736[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v736 + 8))(v736);
    else
      --v736[2];
  }
  v737 = v944[0];
  v944[0] = 0;
  if (v737)
  {
    if (*(_DWORD *)v737 == 2)
      WTF::StringImpl::destroy(v737, v732);
    else
      *(_DWORD *)v737 -= 2;
  }
  if (v730)
  {
    if (*(_DWORD *)v730 == 2)
      WTF::StringImpl::destroy(v730, v732);
    else
      *(_DWORD *)v730 -= 2;
  }
  v738 = v943;
  v943 = 0;
  if (v738)
  {
    if (*(_DWORD *)v738 == 2)
      WTF::StringImpl::destroy(v738, v732);
    else
      *(_DWORD *)v738 -= 2;
  }
  this[1056] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v739 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v740 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v742 = v948;
  v948 = 0;
  if (v742)
  {
    if (*(_DWORD *)v742 == 2)
      WTF::StringImpl::destroy(v742, v741);
    else
      *(_DWORD *)v742 -= 2;
  }
  *v740 = off_1E33948F0;
  if (v739)
    v743 = v739;
  else
    v743 = v22;
  *(_DWORD *)v743 += 2;
  v740[15] = v743;
  this[1057] = (int32x2_t)v740;
  this[1058].i32[0] = 0;
  this[1058].i32[1] = *((_DWORD *)v743 + 1);
  this[1059] = vmax_s32(v942, 0);
  v744 = v947;
  v947 = 0;
  if (v744)
  {
    if (*(_DWORD *)v744 == 2)
      WTF::StringImpl::destroy(v744, v741);
    else
      *(_DWORD *)v744 -= 2;
  }
  v745 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v745)
  {
    if (v745[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v745 + 8))(v745);
    else
      --v745[2];
  }
  v746 = v944[0];
  v944[0] = 0;
  if (v746)
  {
    if (*(_DWORD *)v746 == 2)
      WTF::StringImpl::destroy(v746, v741);
    else
      *(_DWORD *)v746 -= 2;
  }
  if (v739)
  {
    if (*(_DWORD *)v739 == 2)
      WTF::StringImpl::destroy(v739, v741);
    else
      *(_DWORD *)v739 -= 2;
  }
  v747 = v943;
  v943 = 0;
  if (v747)
  {
    if (*(_DWORD *)v747 == 2)
      WTF::StringImpl::destroy(v747, v741);
    else
      *(_DWORD *)v747 -= 2;
  }
  this[1060] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v748 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v749 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v751 = v948;
  v948 = 0;
  if (v751)
  {
    if (*(_DWORD *)v751 == 2)
      WTF::StringImpl::destroy(v751, v750);
    else
      *(_DWORD *)v751 -= 2;
  }
  *v749 = off_1E33948F0;
  if (v748)
    v752 = v748;
  else
    v752 = v22;
  *(_DWORD *)v752 += 2;
  v749[15] = v752;
  this[1061] = (int32x2_t)v749;
  this[1062].i32[0] = 0;
  this[1062].i32[1] = *((_DWORD *)v752 + 1);
  this[1063] = vmax_s32(v942, 0);
  v753 = v947;
  v947 = 0;
  if (v753)
  {
    if (*(_DWORD *)v753 == 2)
      WTF::StringImpl::destroy(v753, v750);
    else
      *(_DWORD *)v753 -= 2;
  }
  v754 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v754)
  {
    if (v754[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v754 + 8))(v754);
    else
      --v754[2];
  }
  v755 = v944[0];
  v944[0] = 0;
  if (v755)
  {
    if (*(_DWORD *)v755 == 2)
      WTF::StringImpl::destroy(v755, v750);
    else
      *(_DWORD *)v755 -= 2;
  }
  if (v748)
  {
    if (*(_DWORD *)v748 == 2)
      WTF::StringImpl::destroy(v748, v750);
    else
      *(_DWORD *)v748 -= 2;
  }
  v756 = v943;
  v943 = 0;
  if (v756)
  {
    if (*(_DWORD *)v756 == 2)
      WTF::StringImpl::destroy(v756, v750);
    else
      *(_DWORD *)v756 -= 2;
  }
  this[1064] = 0;
  WebCore::WritableStreamInternalsBuiltinsWrapper::WritableStreamInternalsBuiltinsWrapper(this + 1065, *(JSC::VM **)this);
  v757 = *this;
  this[1361] = (int32x2_t)&off_1E33941D8;
  this[1362] = v757;
  WTF::AtomStringImpl::addLiteral();
  this[1363] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v758 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v759);
  v761 = v944[0];
  v762 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[1364] = (int32x2_t)v761;
  if (v762)
    *(_DWORD *)v761 = v762;
  else
    WTF::StringImpl::destroy(v761, v760);
  if (*(_DWORD *)v758 == 2)
    WTF::StringImpl::destroy(v758, v760);
  else
    *(_DWORD *)v758 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[1365] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v763 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v764);
  v766 = v944[0];
  v767 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[1366] = (int32x2_t)v766;
  if (v767)
    *(_DWORD *)v766 = v767;
  else
    WTF::StringImpl::destroy(v766, v765);
  if (*(_DWORD *)v763 == 2)
    WTF::StringImpl::destroy(v763, v765);
  else
    *(_DWORD *)v763 -= 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v768 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v769 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v771 = v948;
  v948 = 0;
  if (v771)
  {
    if (*(_DWORD *)v771 == 2)
      WTF::StringImpl::destroy(v771, v770);
    else
      *(_DWORD *)v771 -= 2;
  }
  *v769 = off_1E33948F0;
  if (v768)
    v772 = v768;
  else
    v772 = v22;
  *(_DWORD *)v772 += 2;
  v769[15] = v772;
  this[1367] = (int32x2_t)v769;
  this[1368].i32[0] = 0;
  this[1368].i32[1] = *((_DWORD *)v772 + 1);
  this[1369] = vmax_s32(v942, 0);
  v773 = v947;
  v947 = 0;
  if (v773)
  {
    if (*(_DWORD *)v773 == 2)
      WTF::StringImpl::destroy(v773, v770);
    else
      *(_DWORD *)v773 -= 2;
  }
  v774 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v774)
  {
    if (v774[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v774 + 8))(v774);
    else
      --v774[2];
  }
  v775 = v944[0];
  v944[0] = 0;
  if (v775)
  {
    if (*(_DWORD *)v775 == 2)
      WTF::StringImpl::destroy(v775, v770);
    else
      *(_DWORD *)v775 -= 2;
  }
  if (v768)
  {
    if (*(_DWORD *)v768 == 2)
      WTF::StringImpl::destroy(v768, v770);
    else
      *(_DWORD *)v768 -= 2;
  }
  v776 = v943;
  v943 = 0;
  if (v776)
  {
    if (*(_DWORD *)v776 == 2)
      WTF::StringImpl::destroy(v776, v770);
    else
      *(_DWORD *)v776 -= 2;
  }
  this[1370] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v777 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v778 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v780 = v948;
  v948 = 0;
  if (v780)
  {
    if (*(_DWORD *)v780 == 2)
      WTF::StringImpl::destroy(v780, v779);
    else
      *(_DWORD *)v780 -= 2;
  }
  *v778 = off_1E33948F0;
  if (v777)
    v781 = v777;
  else
    v781 = v22;
  *(_DWORD *)v781 += 2;
  v778[15] = v781;
  this[1371] = (int32x2_t)v778;
  this[1372].i32[0] = 0;
  this[1372].i32[1] = *((_DWORD *)v781 + 1);
  this[1373] = vmax_s32(v942, 0);
  v782 = v947;
  v947 = 0;
  if (v782)
  {
    if (*(_DWORD *)v782 == 2)
      WTF::StringImpl::destroy(v782, v779);
    else
      *(_DWORD *)v782 -= 2;
  }
  v783 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v783)
  {
    if (v783[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v783 + 8))(v783);
    else
      --v783[2];
  }
  v784 = v944[0];
  v944[0] = 0;
  if (v784)
  {
    if (*(_DWORD *)v784 == 2)
      WTF::StringImpl::destroy(v784, v779);
    else
      *(_DWORD *)v784 -= 2;
  }
  if (v777)
  {
    if (*(_DWORD *)v777 == 2)
      WTF::StringImpl::destroy(v777, v779);
    else
      *(_DWORD *)v777 -= 2;
  }
  v785 = v943;
  v943 = 0;
  if (v785)
  {
    if (*(_DWORD *)v785 == 2)
      WTF::StringImpl::destroy(v785, v779);
    else
      *(_DWORD *)v785 -= 2;
  }
  this[1374] = 0;
  v786 = *this;
  this[1375] = (int32x2_t)&off_1E3394208;
  this[1376] = v786;
  WTF::AtomStringImpl::addLiteral();
  this[1377] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v787 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v788);
  v790 = v944[0];
  v791 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[1378] = (int32x2_t)v790;
  if (v791)
    *(_DWORD *)v790 = v791;
  else
    WTF::StringImpl::destroy(v790, v789);
  if (*(_DWORD *)v787 == 2)
    WTF::StringImpl::destroy(v787, v789);
  else
    *(_DWORD *)v787 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[1379] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v792 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v793);
  v795 = v944[0];
  v796 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[1380] = (int32x2_t)v795;
  if (v796)
    *(_DWORD *)v795 = v796;
  else
    WTF::StringImpl::destroy(v795, v794);
  if (*(_DWORD *)v792 == 2)
    WTF::StringImpl::destroy(v792, v794);
  else
    *(_DWORD *)v792 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[1381] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v797 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v798);
  v800 = v944[0];
  v801 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[1382] = (int32x2_t)v800;
  if (v801)
    *(_DWORD *)v800 = v801;
  else
    WTF::StringImpl::destroy(v800, v799);
  if (*(_DWORD *)v797 == 2)
    WTF::StringImpl::destroy(v797, v799);
  else
    *(_DWORD *)v797 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[1383] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v802 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v803);
  v805 = v944[0];
  v806 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[1384] = (int32x2_t)v805;
  if (v806)
    *(_DWORD *)v805 = v806;
  else
    WTF::StringImpl::destroy(v805, v804);
  if (*(_DWORD *)v802 == 2)
    WTF::StringImpl::destroy(v802, v804);
  else
    *(_DWORD *)v802 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[1385] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v807 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v808);
  v810 = v944[0];
  v811 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[1386] = (int32x2_t)v810;
  if (v811)
    *(_DWORD *)v810 = v811;
  else
    WTF::StringImpl::destroy(v810, v809);
  if (*(_DWORD *)v807 == 2)
    WTF::StringImpl::destroy(v807, v809);
  else
    *(_DWORD *)v807 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[1387] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v812 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v813);
  v815 = v944[0];
  v816 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[1388] = (int32x2_t)v815;
  if (v816)
    *(_DWORD *)v815 = v816;
  else
    WTF::StringImpl::destroy(v815, v814);
  if (*(_DWORD *)v812 == 2)
    WTF::StringImpl::destroy(v812, v814);
  else
    *(_DWORD *)v812 -= 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v817 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v818 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v820 = v948;
  v948 = 0;
  if (v820)
  {
    if (*(_DWORD *)v820 == 2)
      WTF::StringImpl::destroy(v820, v819);
    else
      *(_DWORD *)v820 -= 2;
  }
  *v818 = off_1E33948F0;
  if (v817)
    v821 = v817;
  else
    v821 = v22;
  *(_DWORD *)v821 += 2;
  v818[15] = v821;
  this[1389] = (int32x2_t)v818;
  this[1390].i32[0] = 0;
  this[1390].i32[1] = *((_DWORD *)v821 + 1);
  this[1391] = vmax_s32(v942, 0);
  v822 = v947;
  v947 = 0;
  if (v822)
  {
    if (*(_DWORD *)v822 == 2)
      WTF::StringImpl::destroy(v822, v819);
    else
      *(_DWORD *)v822 -= 2;
  }
  v823 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v823)
  {
    if (v823[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v823 + 8))(v823);
    else
      --v823[2];
  }
  v824 = v944[0];
  v944[0] = 0;
  if (v824)
  {
    if (*(_DWORD *)v824 == 2)
      WTF::StringImpl::destroy(v824, v819);
    else
      *(_DWORD *)v824 -= 2;
  }
  if (v817)
  {
    if (*(_DWORD *)v817 == 2)
      WTF::StringImpl::destroy(v817, v819);
    else
      *(_DWORD *)v817 -= 2;
  }
  v825 = v943;
  v943 = 0;
  if (v825)
  {
    if (*(_DWORD *)v825 == 2)
      WTF::StringImpl::destroy(v825, v819);
    else
      *(_DWORD *)v825 -= 2;
  }
  this[1392] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v826 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v827 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v829 = v948;
  v948 = 0;
  if (v829)
  {
    if (*(_DWORD *)v829 == 2)
      WTF::StringImpl::destroy(v829, v828);
    else
      *(_DWORD *)v829 -= 2;
  }
  *v827 = off_1E33948F0;
  if (v826)
    v830 = v826;
  else
    v830 = v22;
  *(_DWORD *)v830 += 2;
  v827[15] = v830;
  this[1393] = (int32x2_t)v827;
  this[1394].i32[0] = 0;
  this[1394].i32[1] = *((_DWORD *)v830 + 1);
  this[1395] = vmax_s32(v942, 0);
  v831 = v947;
  v947 = 0;
  if (v831)
  {
    if (*(_DWORD *)v831 == 2)
      WTF::StringImpl::destroy(v831, v828);
    else
      *(_DWORD *)v831 -= 2;
  }
  v832 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v832)
  {
    if (v832[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v832 + 8))(v832);
    else
      --v832[2];
  }
  v833 = v944[0];
  v944[0] = 0;
  if (v833)
  {
    if (*(_DWORD *)v833 == 2)
      WTF::StringImpl::destroy(v833, v828);
    else
      *(_DWORD *)v833 -= 2;
  }
  if (v826)
  {
    if (*(_DWORD *)v826 == 2)
      WTF::StringImpl::destroy(v826, v828);
    else
      *(_DWORD *)v826 -= 2;
  }
  v834 = v943;
  v943 = 0;
  if (v834)
  {
    if (*(_DWORD *)v834 == 2)
      WTF::StringImpl::destroy(v834, v828);
    else
      *(_DWORD *)v834 -= 2;
  }
  this[1396] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v835 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v836 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v838 = v948;
  v948 = 0;
  if (v838)
  {
    if (*(_DWORD *)v838 == 2)
      WTF::StringImpl::destroy(v838, v837);
    else
      *(_DWORD *)v838 -= 2;
  }
  *v836 = off_1E33948F0;
  if (v835)
    v839 = v835;
  else
    v839 = v22;
  *(_DWORD *)v839 += 2;
  v836[15] = v839;
  this[1397] = (int32x2_t)v836;
  this[1398].i32[0] = 0;
  this[1398].i32[1] = *((_DWORD *)v839 + 1);
  this[1399] = vmax_s32(v942, 0);
  v840 = v947;
  v947 = 0;
  if (v840)
  {
    if (*(_DWORD *)v840 == 2)
      WTF::StringImpl::destroy(v840, v837);
    else
      *(_DWORD *)v840 -= 2;
  }
  v841 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v841)
  {
    if (v841[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v841 + 8))(v841);
    else
      --v841[2];
  }
  v842 = v944[0];
  v944[0] = 0;
  if (v842)
  {
    if (*(_DWORD *)v842 == 2)
      WTF::StringImpl::destroy(v842, v837);
    else
      *(_DWORD *)v842 -= 2;
  }
  if (v835)
  {
    if (*(_DWORD *)v835 == 2)
      WTF::StringImpl::destroy(v835, v837);
    else
      *(_DWORD *)v835 -= 2;
  }
  v843 = v943;
  v943 = 0;
  if (v843)
  {
    if (*(_DWORD *)v843 == 2)
      WTF::StringImpl::destroy(v843, v837);
    else
      *(_DWORD *)v843 -= 2;
  }
  this[1400] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v844 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v845 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v847 = v948;
  v948 = 0;
  if (v847)
  {
    if (*(_DWORD *)v847 == 2)
      WTF::StringImpl::destroy(v847, v846);
    else
      *(_DWORD *)v847 -= 2;
  }
  *v845 = off_1E33948F0;
  if (v844)
    v848 = v844;
  else
    v848 = v22;
  *(_DWORD *)v848 += 2;
  v845[15] = v848;
  this[1401] = (int32x2_t)v845;
  this[1402].i32[0] = 0;
  this[1402].i32[1] = *((_DWORD *)v848 + 1);
  this[1403] = vmax_s32(v942, 0);
  v849 = v947;
  v947 = 0;
  if (v849)
  {
    if (*(_DWORD *)v849 == 2)
      WTF::StringImpl::destroy(v849, v846);
    else
      *(_DWORD *)v849 -= 2;
  }
  v850 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v850)
  {
    if (v850[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v850 + 8))(v850);
    else
      --v850[2];
  }
  v851 = v944[0];
  v944[0] = 0;
  if (v851)
  {
    if (*(_DWORD *)v851 == 2)
      WTF::StringImpl::destroy(v851, v846);
    else
      *(_DWORD *)v851 -= 2;
  }
  if (v844)
  {
    if (*(_DWORD *)v844 == 2)
      WTF::StringImpl::destroy(v844, v846);
    else
      *(_DWORD *)v844 -= 2;
  }
  v852 = v943;
  v943 = 0;
  if (v852)
  {
    if (*(_DWORD *)v852 == 2)
      WTF::StringImpl::destroy(v852, v846);
    else
      *(_DWORD *)v852 -= 2;
  }
  this[1404] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v853 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v854 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v856 = v948;
  v948 = 0;
  if (v856)
  {
    if (*(_DWORD *)v856 == 2)
      WTF::StringImpl::destroy(v856, v855);
    else
      *(_DWORD *)v856 -= 2;
  }
  *v854 = off_1E33948F0;
  if (v853)
    v857 = v853;
  else
    v857 = v22;
  *(_DWORD *)v857 += 2;
  v854[15] = v857;
  this[1405] = (int32x2_t)v854;
  this[1406].i32[0] = 0;
  this[1406].i32[1] = *((_DWORD *)v857 + 1);
  this[1407] = vmax_s32(v942, 0);
  v858 = v947;
  v947 = 0;
  if (v858)
  {
    if (*(_DWORD *)v858 == 2)
      WTF::StringImpl::destroy(v858, v855);
    else
      *(_DWORD *)v858 -= 2;
  }
  v859 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v859)
  {
    if (v859[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v859 + 8))(v859);
    else
      --v859[2];
  }
  v860 = v944[0];
  v944[0] = 0;
  if (v860)
  {
    if (*(_DWORD *)v860 == 2)
      WTF::StringImpl::destroy(v860, v855);
    else
      *(_DWORD *)v860 -= 2;
  }
  if (v853)
  {
    if (*(_DWORD *)v853 == 2)
      WTF::StringImpl::destroy(v853, v855);
    else
      *(_DWORD *)v853 -= 2;
  }
  v861 = v943;
  v943 = 0;
  if (v861)
  {
    if (*(_DWORD *)v861 == 2)
      WTF::StringImpl::destroy(v861, v855);
    else
      *(_DWORD *)v861 -= 2;
  }
  this[1408] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v862 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v863 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v865 = v948;
  v948 = 0;
  if (v865)
  {
    if (*(_DWORD *)v865 == 2)
      WTF::StringImpl::destroy(v865, v864);
    else
      *(_DWORD *)v865 -= 2;
  }
  *v863 = off_1E33948F0;
  if (v862)
    v866 = v862;
  else
    v866 = v22;
  *(_DWORD *)v866 += 2;
  v863[15] = v866;
  this[1409] = (int32x2_t)v863;
  this[1410].i32[0] = 0;
  this[1410].i32[1] = *((_DWORD *)v866 + 1);
  this[1411] = vmax_s32(v942, 0);
  v867 = v947;
  v947 = 0;
  if (v867)
  {
    if (*(_DWORD *)v867 == 2)
      WTF::StringImpl::destroy(v867, v864);
    else
      *(_DWORD *)v867 -= 2;
  }
  v868 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v868)
  {
    if (v868[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v868 + 8))(v868);
    else
      --v868[2];
  }
  v869 = v944[0];
  v944[0] = 0;
  if (v869)
  {
    if (*(_DWORD *)v869 == 2)
      WTF::StringImpl::destroy(v869, v864);
    else
      *(_DWORD *)v869 -= 2;
  }
  if (v862)
  {
    if (*(_DWORD *)v862 == 2)
      WTF::StringImpl::destroy(v862, v864);
    else
      *(_DWORD *)v862 -= 2;
  }
  v870 = v943;
  v943 = 0;
  if (v870)
  {
    if (*(_DWORD *)v870 == 2)
      WTF::StringImpl::destroy(v870, v864);
    else
      *(_DWORD *)v870 -= 2;
  }
  this[1412] = 0;
  v871 = *this;
  this[1413] = (int32x2_t)&off_1E3394238;
  this[1414] = v871;
  WTF::AtomStringImpl::addLiteral();
  this[1415] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v872 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v873);
  v875 = v944[0];
  v876 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[1416] = (int32x2_t)v875;
  if (v876)
    *(_DWORD *)v875 = v876;
  else
    WTF::StringImpl::destroy(v875, v874);
  if (*(_DWORD *)v872 == 2)
    WTF::StringImpl::destroy(v872, v874);
  else
    *(_DWORD *)v872 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[1417] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v877 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v878);
  v880 = v944[0];
  v881 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[1418] = (int32x2_t)v880;
  if (v881)
    *(_DWORD *)v880 = v881;
  else
    WTF::StringImpl::destroy(v880, v879);
  if (*(_DWORD *)v877 == 2)
    WTF::StringImpl::destroy(v877, v879);
  else
    *(_DWORD *)v877 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[1419] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v882 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v883);
  v885 = v944[0];
  v886 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[1420] = (int32x2_t)v885;
  if (v886)
    *(_DWORD *)v885 = v886;
  else
    WTF::StringImpl::destroy(v885, v884);
  if (*(_DWORD *)v882 == 2)
    WTF::StringImpl::destroy(v882, v884);
  else
    *(_DWORD *)v882 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[1421] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v887 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v888);
  v890 = v944[0];
  v891 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[1422] = (int32x2_t)v890;
  if (v891)
    *(_DWORD *)v890 = v891;
  else
    WTF::StringImpl::destroy(v890, v889);
  if (*(_DWORD *)v887 == 2)
    WTF::StringImpl::destroy(v887, v889);
  else
    *(_DWORD *)v887 -= 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v892 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v893 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v895 = v948;
  v948 = 0;
  if (v895)
  {
    if (*(_DWORD *)v895 == 2)
      WTF::StringImpl::destroy(v895, v894);
    else
      *(_DWORD *)v895 -= 2;
  }
  *v893 = off_1E33948F0;
  if (v892)
    v896 = v892;
  else
    v896 = v22;
  *(_DWORD *)v896 += 2;
  v893[15] = v896;
  this[1423] = (int32x2_t)v893;
  this[1424].i32[0] = 0;
  this[1424].i32[1] = *((_DWORD *)v896 + 1);
  this[1425] = vmax_s32(v942, 0);
  v897 = v947;
  v947 = 0;
  if (v897)
  {
    if (*(_DWORD *)v897 == 2)
      WTF::StringImpl::destroy(v897, v894);
    else
      *(_DWORD *)v897 -= 2;
  }
  v898 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v898)
  {
    if (v898[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v898 + 8))(v898);
    else
      --v898[2];
  }
  v899 = v944[0];
  v944[0] = 0;
  if (v899)
  {
    if (*(_DWORD *)v899 == 2)
      WTF::StringImpl::destroy(v899, v894);
    else
      *(_DWORD *)v899 -= 2;
  }
  if (v892)
  {
    if (*(_DWORD *)v892 == 2)
      WTF::StringImpl::destroy(v892, v894);
    else
      *(_DWORD *)v892 -= 2;
  }
  v900 = v943;
  v943 = 0;
  if (v900)
  {
    if (*(_DWORD *)v900 == 2)
      WTF::StringImpl::destroy(v900, v894);
    else
      *(_DWORD *)v900 -= 2;
  }
  this[1426] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v901 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v902 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v904 = v948;
  v948 = 0;
  if (v904)
  {
    if (*(_DWORD *)v904 == 2)
      WTF::StringImpl::destroy(v904, v903);
    else
      *(_DWORD *)v904 -= 2;
  }
  *v902 = off_1E33948F0;
  if (v901)
    v905 = v901;
  else
    v905 = v22;
  *(_DWORD *)v905 += 2;
  v902[15] = v905;
  this[1427] = (int32x2_t)v902;
  this[1428].i32[0] = 0;
  this[1428].i32[1] = *((_DWORD *)v905 + 1);
  this[1429] = vmax_s32(v942, 0);
  v906 = v947;
  v947 = 0;
  if (v906)
  {
    if (*(_DWORD *)v906 == 2)
      WTF::StringImpl::destroy(v906, v903);
    else
      *(_DWORD *)v906 -= 2;
  }
  v907 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v907)
  {
    if (v907[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v907 + 8))(v907);
    else
      --v907[2];
  }
  v908 = v944[0];
  v944[0] = 0;
  if (v908)
  {
    if (*(_DWORD *)v908 == 2)
      WTF::StringImpl::destroy(v908, v903);
    else
      *(_DWORD *)v908 -= 2;
  }
  if (v901)
  {
    if (*(_DWORD *)v901 == 2)
      WTF::StringImpl::destroy(v901, v903);
    else
      *(_DWORD *)v901 -= 2;
  }
  v909 = v943;
  v943 = 0;
  if (v909)
  {
    if (*(_DWORD *)v909 == 2)
      WTF::StringImpl::destroy(v909, v903);
    else
      *(_DWORD *)v909 -= 2;
  }
  this[1430] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v910 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v911 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v913 = v948;
  v948 = 0;
  if (v913)
  {
    if (*(_DWORD *)v913 == 2)
      WTF::StringImpl::destroy(v913, v912);
    else
      *(_DWORD *)v913 -= 2;
  }
  *v911 = off_1E33948F0;
  if (v910)
    v914 = v910;
  else
    v914 = v22;
  *(_DWORD *)v914 += 2;
  v911[15] = v914;
  this[1431] = (int32x2_t)v911;
  this[1432].i32[0] = 0;
  this[1432].i32[1] = *((_DWORD *)v914 + 1);
  this[1433] = vmax_s32(v942, 0);
  v915 = v947;
  v947 = 0;
  if (v915)
  {
    if (*(_DWORD *)v915 == 2)
      WTF::StringImpl::destroy(v915, v912);
    else
      *(_DWORD *)v915 -= 2;
  }
  v916 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v916)
  {
    if (v916[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v916 + 8))(v916);
    else
      --v916[2];
  }
  v917 = v944[0];
  v944[0] = 0;
  if (v917)
  {
    if (*(_DWORD *)v917 == 2)
      WTF::StringImpl::destroy(v917, v912);
    else
      *(_DWORD *)v917 -= 2;
  }
  if (v910)
  {
    if (*(_DWORD *)v910 == 2)
      WTF::StringImpl::destroy(v910, v912);
    else
      *(_DWORD *)v910 -= 2;
  }
  v918 = v943;
  v943 = 0;
  if (v918)
  {
    if (*(_DWORD *)v918 == 2)
      WTF::StringImpl::destroy(v918, v912);
    else
      *(_DWORD *)v918 -= 2;
  }
  this[1434] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v919 = v943;
  v943 = 0;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v947 = 0;
  v942 = 0;
  v920 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v948 = 0;
  JSC::SourceProvider::SourceProvider();
  v922 = v948;
  v948 = 0;
  if (v922)
  {
    if (*(_DWORD *)v922 == 2)
      WTF::StringImpl::destroy(v922, v921);
    else
      *(_DWORD *)v922 -= 2;
  }
  *v920 = off_1E33948F0;
  if (v919)
    v923 = v919;
  else
    v923 = v22;
  *(_DWORD *)v923 += 2;
  v920[15] = v923;
  this[1435] = (int32x2_t)v920;
  this[1436].i32[0] = 0;
  this[1436].i32[1] = *((_DWORD *)v923 + 1);
  this[1437] = vmax_s32(v942, 0);
  v924 = v947;
  v947 = 0;
  if (v924)
  {
    if (*(_DWORD *)v924 == 2)
      WTF::StringImpl::destroy(v924, v921);
    else
      *(_DWORD *)v924 -= 2;
  }
  v925 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v925)
  {
    if (v925[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v925 + 8))(v925);
    else
      --v925[2];
  }
  v926 = v944[0];
  v944[0] = 0;
  if (v926)
  {
    if (*(_DWORD *)v926 == 2)
      WTF::StringImpl::destroy(v926, v921);
    else
      *(_DWORD *)v926 -= 2;
  }
  if (v919)
  {
    if (*(_DWORD *)v919 == 2)
      WTF::StringImpl::destroy(v919, v921);
    else
      *(_DWORD *)v919 -= 2;
  }
  v927 = v943;
  v943 = 0;
  if (v927)
  {
    if (*(_DWORD *)v927 == 2)
      WTF::StringImpl::destroy(v927, v921);
    else
      *(_DWORD *)v927 -= 2;
  }
  this[1438] = 0;
  v928 = *this;
  this[1439] = (int32x2_t)&off_1E3394268;
  this[1440] = v928;
  WTF::AtomStringImpl::addLiteral();
  this[1441] = (int32x2_t)v944[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v929 = v944[0];
  WTF::PrivateSymbolImpl::create(v944[0], v930);
  v932 = v944[0];
  v933 = *(_DWORD *)v944[0];
  *(_DWORD *)v944[0] += 2;
  this[1442] = (int32x2_t)v932;
  if (v933)
    *(_DWORD *)v932 = v933;
  else
    WTF::StringImpl::destroy(v932, v931);
  if (*(_DWORD *)v929 == 2)
    WTF::StringImpl::destroy(v929, v931);
  else
    *(_DWORD *)v929 -= 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v934 = v947;
  v947 = 0;
  v948 = v934;
  v945 = 0u;
  v946 = 0u;
  *(_OWORD *)v944 = 0u;
  WTF::URL::invalidate((WTF::URL *)v944);
  *((_QWORD *)&v946 + 1) = 0;
  v942 = 0;
  v943 = 0;
  JSC::makeSource((_DWORD **)&v948, &v943, &v942, this + 1443);
  v936 = v943;
  v943 = 0;
  if (v936)
  {
    if (*(_DWORD *)v936 == 2)
      WTF::StringImpl::destroy(v936, v935);
    else
      *(_DWORD *)v936 -= 2;
  }
  v937 = (_DWORD *)*((_QWORD *)&v946 + 1);
  *((_QWORD *)&v946 + 1) = 0;
  if (v937)
  {
    if (v937[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v937 + 8))(v937);
    else
      --v937[2];
  }
  v938 = v944[0];
  v944[0] = 0;
  if (v938)
  {
    if (*(_DWORD *)v938 == 2)
      WTF::StringImpl::destroy(v938, v935);
    else
      *(_DWORD *)v938 -= 2;
  }
  v939 = v948;
  v948 = 0;
  if (v939)
  {
    if (*(_DWORD *)v939 == 2)
      WTF::StringImpl::destroy(v939, v935);
    else
      *(_DWORD *)v939 -= 2;
  }
  v940 = v947;
  v947 = 0;
  if (v940)
  {
    if (*(_DWORD *)v940 == 2)
      WTF::StringImpl::destroy(v940, v935);
    else
      *(_DWORD *)v940 -= 2;
  }
  this[1446] = 0;
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  JSC::CommonIdentifiers::appendExternalName();
  return this;
}

uint64_t JSC::makeSource@<X0>(_DWORD **a1@<X0>, WTF::StringImpl **a2@<X3>, int32x2_t *a3@<X4>, int32x2_t *a4@<X8>)
{
  WTF::StringImpl *v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  __int32 v11;
  uint64_t result;
  WTF::StringImpl *v13;

  v7 = *a2;
  *a2 = 0;
  v13 = v7;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  JSC::SourceProvider::SourceProvider();
  *v8 = off_1E33948F0;
  v10 = *a1;
  if (!*a1)
    v10 = (_DWORD *)MEMORY[0x1E0CBEF70];
  *v10 += 2;
  v8[15] = v10;
  *a4 = (int32x2_t)v8;
  v11 = v10[1];
  a4[1].i32[0] = 0;
  a4[1].i32[1] = v11;
  a4[2] = vmax_s32(*a3, 0);
  result = (uint64_t)v13;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      return WTF::StringImpl::destroy(v13, v9);
    else
      *(_DWORD *)v13 -= 2;
  }
  return result;
}

int32x2_t *WebCore::ReadableByteStreamInternalsBuiltinsWrapper::ReadableByteStreamInternalsBuiltinsWrapper(int32x2_t *this, JSC::VM *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  int v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  int v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  int v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  int v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  int v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  int v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  int v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  int v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  int v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  int v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  int v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  int v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  int v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  int v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  int v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  int v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  int v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  int v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  int v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  int v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  int v172;
  WTF::StringImpl *v173;
  _QWORD *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  _DWORD *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  _QWORD *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  _DWORD *v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  _QWORD *v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  _DWORD *v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  _QWORD *v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  _DWORD *v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  _QWORD *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  _DWORD *v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218;
  WTF::StringImpl *v219;
  _QWORD *v220;
  WTF::StringImpl *v221;
  WTF::StringImpl *v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  _DWORD *v225;
  WTF::StringImpl *v226;
  WTF::StringImpl *v227;
  WTF::StringImpl *v228;
  _QWORD *v229;
  WTF::StringImpl *v230;
  WTF::StringImpl *v231;
  WTF::StringImpl *v232;
  WTF::StringImpl *v233;
  _DWORD *v234;
  WTF::StringImpl *v235;
  WTF::StringImpl *v236;
  WTF::StringImpl *v237;
  _QWORD *v238;
  WTF::StringImpl *v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  WTF::StringImpl *v242;
  _DWORD *v243;
  WTF::StringImpl *v244;
  WTF::StringImpl *v245;
  WTF::StringImpl *v246;
  _QWORD *v247;
  WTF::StringImpl *v248;
  WTF::StringImpl *v249;
  WTF::StringImpl *v250;
  WTF::StringImpl *v251;
  _DWORD *v252;
  WTF::StringImpl *v253;
  WTF::StringImpl *v254;
  WTF::StringImpl *v255;
  _QWORD *v256;
  WTF::StringImpl *v257;
  WTF::StringImpl *v258;
  WTF::StringImpl *v259;
  WTF::StringImpl *v260;
  _DWORD *v261;
  WTF::StringImpl *v262;
  WTF::StringImpl *v263;
  WTF::StringImpl *v264;
  _QWORD *v265;
  WTF::StringImpl *v266;
  WTF::StringImpl *v267;
  WTF::StringImpl *v268;
  WTF::StringImpl *v269;
  _DWORD *v270;
  WTF::StringImpl *v271;
  WTF::StringImpl *v272;
  WTF::StringImpl *v273;
  _QWORD *v274;
  WTF::StringImpl *v275;
  WTF::StringImpl *v276;
  WTF::StringImpl *v277;
  WTF::StringImpl *v278;
  _DWORD *v279;
  WTF::StringImpl *v280;
  WTF::StringImpl *v281;
  WTF::StringImpl *v282;
  _QWORD *v283;
  WTF::StringImpl *v284;
  WTF::StringImpl *v285;
  WTF::StringImpl *v286;
  WTF::StringImpl *v287;
  _DWORD *v288;
  WTF::StringImpl *v289;
  WTF::StringImpl *v290;
  WTF::StringImpl *v291;
  _QWORD *v292;
  WTF::StringImpl *v293;
  WTF::StringImpl *v294;
  WTF::StringImpl *v295;
  WTF::StringImpl *v296;
  _DWORD *v297;
  WTF::StringImpl *v298;
  WTF::StringImpl *v299;
  WTF::StringImpl *v300;
  _QWORD *v301;
  WTF::StringImpl *v302;
  WTF::StringImpl *v303;
  WTF::StringImpl *v304;
  WTF::StringImpl *v305;
  _DWORD *v306;
  WTF::StringImpl *v307;
  WTF::StringImpl *v308;
  WTF::StringImpl *v309;
  _QWORD *v310;
  WTF::StringImpl *v311;
  WTF::StringImpl *v312;
  WTF::StringImpl *v313;
  WTF::StringImpl *v314;
  _DWORD *v315;
  WTF::StringImpl *v316;
  WTF::StringImpl *v317;
  WTF::StringImpl *v318;
  _QWORD *v319;
  WTF::StringImpl *v320;
  WTF::StringImpl *v321;
  WTF::StringImpl *v322;
  WTF::StringImpl *v323;
  _DWORD *v324;
  WTF::StringImpl *v325;
  WTF::StringImpl *v326;
  WTF::StringImpl *v327;
  _QWORD *v328;
  WTF::StringImpl *v329;
  WTF::StringImpl *v330;
  WTF::StringImpl *v331;
  WTF::StringImpl *v332;
  _DWORD *v333;
  WTF::StringImpl *v334;
  WTF::StringImpl *v335;
  WTF::StringImpl *v336;
  _QWORD *v337;
  WTF::StringImpl *v338;
  WTF::StringImpl *v339;
  WTF::StringImpl *v340;
  WTF::StringImpl *v341;
  _DWORD *v342;
  WTF::StringImpl *v343;
  WTF::StringImpl *v344;
  WTF::StringImpl *v345;
  _QWORD *v346;
  WTF::StringImpl *v347;
  WTF::StringImpl *v348;
  WTF::StringImpl *v349;
  WTF::StringImpl *v350;
  _DWORD *v351;
  WTF::StringImpl *v352;
  WTF::StringImpl *v353;
  WTF::StringImpl *v354;
  _QWORD *v355;
  WTF::StringImpl *v356;
  WTF::StringImpl *v357;
  WTF::StringImpl *v358;
  WTF::StringImpl *v359;
  _DWORD *v360;
  WTF::StringImpl *v361;
  WTF::StringImpl *v362;
  WTF::StringImpl *v363;
  _QWORD *v364;
  WTF::StringImpl *v365;
  WTF::StringImpl *v366;
  WTF::StringImpl *v367;
  WTF::StringImpl *v368;
  _DWORD *v369;
  WTF::StringImpl *v370;
  WTF::StringImpl *v371;
  WTF::StringImpl *v372;
  _QWORD *v373;
  WTF::StringImpl *v374;
  WTF::StringImpl *v375;
  WTF::StringImpl *v376;
  WTF::StringImpl *v377;
  _DWORD *v378;
  WTF::StringImpl *v379;
  WTF::StringImpl *v380;
  WTF::StringImpl *v381;
  _QWORD *v382;
  WTF::StringImpl *v383;
  WTF::StringImpl *v384;
  WTF::StringImpl *v385;
  WTF::StringImpl *v386;
  _DWORD *v387;
  WTF::StringImpl *v388;
  WTF::StringImpl *v389;
  WTF::StringImpl *v390;
  _QWORD *v391;
  WTF::StringImpl *v392;
  WTF::StringImpl *v393;
  WTF::StringImpl *v394;
  WTF::StringImpl *v395;
  _DWORD *v396;
  WTF::StringImpl *v397;
  WTF::StringImpl *v398;
  WTF::StringImpl *v399;
  _QWORD *v400;
  WTF::StringImpl *v401;
  WTF::StringImpl *v402;
  WTF::StringImpl *v403;
  WTF::StringImpl *v404;
  _DWORD *v405;
  WTF::StringImpl *v406;
  WTF::StringImpl *v407;
  WTF::StringImpl *v408;
  _QWORD *v409;
  WTF::StringImpl *v410;
  WTF::StringImpl *v411;
  WTF::StringImpl *v412;
  WTF::StringImpl *v413;
  _DWORD *v414;
  WTF::StringImpl *v415;
  WTF::StringImpl *v416;
  WTF::StringImpl *v417;
  _QWORD *v418;
  WTF::StringImpl *v419;
  WTF::StringImpl *v420;
  WTF::StringImpl *v421;
  WTF::StringImpl *v422;
  _DWORD *v423;
  WTF::StringImpl *v424;
  WTF::StringImpl *v425;
  WTF::StringImpl *v426;
  _QWORD *v427;
  WTF::StringImpl *v428;
  WTF::StringImpl *v429;
  WTF::StringImpl *v430;
  WTF::StringImpl *v431;
  _DWORD *v432;
  WTF::StringImpl *v433;
  WTF::StringImpl *v434;
  WTF::StringImpl *v435;
  _QWORD *v436;
  WTF::StringImpl *v437;
  WTF::StringImpl *v438;
  WTF::StringImpl *v439;
  WTF::StringImpl *v440;
  _DWORD *v441;
  WTF::StringImpl *v442;
  WTF::StringImpl *v443;
  WTF::StringImpl *v444;
  _QWORD *v445;
  WTF::StringImpl *v446;
  WTF::StringImpl *v447;
  WTF::StringImpl *v448;
  WTF::StringImpl *v449;
  _DWORD *v450;
  WTF::StringImpl *v451;
  WTF::StringImpl *v452;
  WTF::StringImpl *v453;
  _QWORD *v454;
  WTF::StringImpl *v455;
  WTF::StringImpl *v456;
  WTF::StringImpl *v457;
  WTF::StringImpl *v458;
  _DWORD *v459;
  WTF::StringImpl *v460;
  WTF::StringImpl *v461;
  WTF::StringImpl *v462;
  _QWORD *v463;
  WTF::StringImpl *v464;
  WTF::StringImpl *v465;
  WTF::StringImpl *v466;
  WTF::StringImpl *v467;
  _DWORD *v468;
  WTF::StringImpl *v469;
  WTF::StringImpl *v470;
  WTF::StringImpl *v471;
  _QWORD *v472;
  WTF::StringImpl *v473;
  WTF::StringImpl *v474;
  WTF::StringImpl *v475;
  WTF::StringImpl *v476;
  _DWORD *v477;
  WTF::StringImpl *v478;
  WTF::StringImpl *v479;
  WTF::StringImpl *v481[2];
  __int128 v482;
  __int128 v483;
  WTF::StringImpl *v484;
  WTF::StringImpl *v485;
  WTF::StringImpl *v486;

  *this = (int32x2_t)&off_1E3393F98;
  this[1] = (int32x2_t)a2;
  WTF::AtomStringImpl::addLiteral();
  this[2] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v4);
  v6 = v481[0];
  v7 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[3] = (int32x2_t)v6;
  if (v7)
    *(_DWORD *)v6 = v7;
  else
    WTF::StringImpl::destroy(v6, v5);
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v5);
  else
    *(_DWORD *)v3 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[4] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v9);
  v11 = v481[0];
  v12 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[5] = (int32x2_t)v11;
  if (v12)
    *(_DWORD *)v11 = v12;
  else
    WTF::StringImpl::destroy(v11, v10);
  if (*(_DWORD *)v8 == 2)
    WTF::StringImpl::destroy(v8, v10);
  else
    *(_DWORD *)v8 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[6] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v14);
  v16 = v481[0];
  v17 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[7] = (int32x2_t)v16;
  if (v17)
    *(_DWORD *)v16 = v17;
  else
    WTF::StringImpl::destroy(v16, v15);
  if (*(_DWORD *)v13 == 2)
    WTF::StringImpl::destroy(v13, v15);
  else
    *(_DWORD *)v13 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[8] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v18 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v19);
  v21 = v481[0];
  v22 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[9] = (int32x2_t)v21;
  if (v22)
    *(_DWORD *)v21 = v22;
  else
    WTF::StringImpl::destroy(v21, v20);
  if (*(_DWORD *)v18 == 2)
    WTF::StringImpl::destroy(v18, v20);
  else
    *(_DWORD *)v18 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[10] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v23 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v24);
  v26 = v481[0];
  v27 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[11] = (int32x2_t)v26;
  if (v27)
    *(_DWORD *)v26 = v27;
  else
    WTF::StringImpl::destroy(v26, v25);
  if (*(_DWORD *)v23 == 2)
    WTF::StringImpl::destroy(v23, v25);
  else
    *(_DWORD *)v23 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[12] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v28 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v29);
  v31 = v481[0];
  v32 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[13] = (int32x2_t)v31;
  if (v32)
    *(_DWORD *)v31 = v32;
  else
    WTF::StringImpl::destroy(v31, v30);
  if (*(_DWORD *)v28 == 2)
    WTF::StringImpl::destroy(v28, v30);
  else
    *(_DWORD *)v28 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[14] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v33 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v34);
  v36 = v481[0];
  v37 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[15] = (int32x2_t)v36;
  if (v37)
    *(_DWORD *)v36 = v37;
  else
    WTF::StringImpl::destroy(v36, v35);
  if (*(_DWORD *)v33 == 2)
    WTF::StringImpl::destroy(v33, v35);
  else
    *(_DWORD *)v33 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[16] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v38 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v39);
  v41 = v481[0];
  v42 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[17] = (int32x2_t)v41;
  if (v42)
    *(_DWORD *)v41 = v42;
  else
    WTF::StringImpl::destroy(v41, v40);
  if (*(_DWORD *)v38 == 2)
    WTF::StringImpl::destroy(v38, v40);
  else
    *(_DWORD *)v38 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[18] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v43 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v44);
  v46 = v481[0];
  v47 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[19] = (int32x2_t)v46;
  if (v47)
    *(_DWORD *)v46 = v47;
  else
    WTF::StringImpl::destroy(v46, v45);
  if (*(_DWORD *)v43 == 2)
    WTF::StringImpl::destroy(v43, v45);
  else
    *(_DWORD *)v43 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[20] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v48 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v49);
  v51 = v481[0];
  v52 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[21] = (int32x2_t)v51;
  if (v52)
    *(_DWORD *)v51 = v52;
  else
    WTF::StringImpl::destroy(v51, v50);
  if (*(_DWORD *)v48 == 2)
    WTF::StringImpl::destroy(v48, v50);
  else
    *(_DWORD *)v48 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[22] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v53 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v54);
  v56 = v481[0];
  v57 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[23] = (int32x2_t)v56;
  if (v57)
    *(_DWORD *)v56 = v57;
  else
    WTF::StringImpl::destroy(v56, v55);
  if (*(_DWORD *)v53 == 2)
    WTF::StringImpl::destroy(v53, v55);
  else
    *(_DWORD *)v53 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[24] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v58 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v59);
  v61 = v481[0];
  v62 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[25] = (int32x2_t)v61;
  if (v62)
    *(_DWORD *)v61 = v62;
  else
    WTF::StringImpl::destroy(v61, v60);
  if (*(_DWORD *)v58 == 2)
    WTF::StringImpl::destroy(v58, v60);
  else
    *(_DWORD *)v58 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[26] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v63 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v64);
  v66 = v481[0];
  v67 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[27] = (int32x2_t)v66;
  if (v67)
    *(_DWORD *)v66 = v67;
  else
    WTF::StringImpl::destroy(v66, v65);
  if (*(_DWORD *)v63 == 2)
    WTF::StringImpl::destroy(v63, v65);
  else
    *(_DWORD *)v63 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[28] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v68 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v69);
  v71 = v481[0];
  v72 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[29] = (int32x2_t)v71;
  if (v72)
    *(_DWORD *)v71 = v72;
  else
    WTF::StringImpl::destroy(v71, v70);
  if (*(_DWORD *)v68 == 2)
    WTF::StringImpl::destroy(v68, v70);
  else
    *(_DWORD *)v68 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[30] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v73 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v74);
  v76 = v481[0];
  v77 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[31] = (int32x2_t)v76;
  if (v77)
    *(_DWORD *)v76 = v77;
  else
    WTF::StringImpl::destroy(v76, v75);
  if (*(_DWORD *)v73 == 2)
    WTF::StringImpl::destroy(v73, v75);
  else
    *(_DWORD *)v73 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[32] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v79);
  v81 = v481[0];
  v82 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[33] = (int32x2_t)v81;
  if (v82)
    *(_DWORD *)v81 = v82;
  else
    WTF::StringImpl::destroy(v81, v80);
  if (*(_DWORD *)v78 == 2)
    WTF::StringImpl::destroy(v78, v80);
  else
    *(_DWORD *)v78 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[34] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v83 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v84);
  v86 = v481[0];
  v87 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[35] = (int32x2_t)v86;
  if (v87)
    *(_DWORD *)v86 = v87;
  else
    WTF::StringImpl::destroy(v86, v85);
  if (*(_DWORD *)v83 == 2)
    WTF::StringImpl::destroy(v83, v85);
  else
    *(_DWORD *)v83 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[36] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v88 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v89);
  v91 = v481[0];
  v92 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[37] = (int32x2_t)v91;
  if (v92)
    *(_DWORD *)v91 = v92;
  else
    WTF::StringImpl::destroy(v91, v90);
  if (*(_DWORD *)v88 == 2)
    WTF::StringImpl::destroy(v88, v90);
  else
    *(_DWORD *)v88 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[38] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v94);
  v96 = v481[0];
  v97 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[39] = (int32x2_t)v96;
  if (v97)
    *(_DWORD *)v96 = v97;
  else
    WTF::StringImpl::destroy(v96, v95);
  if (*(_DWORD *)v93 == 2)
    WTF::StringImpl::destroy(v93, v95);
  else
    *(_DWORD *)v93 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[40] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v98 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v99);
  v101 = v481[0];
  v102 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[41] = (int32x2_t)v101;
  if (v102)
    *(_DWORD *)v101 = v102;
  else
    WTF::StringImpl::destroy(v101, v100);
  if (*(_DWORD *)v98 == 2)
    WTF::StringImpl::destroy(v98, v100);
  else
    *(_DWORD *)v98 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[42] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v103 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v104);
  v106 = v481[0];
  v107 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[43] = (int32x2_t)v106;
  if (v107)
    *(_DWORD *)v106 = v107;
  else
    WTF::StringImpl::destroy(v106, v105);
  if (*(_DWORD *)v103 == 2)
    WTF::StringImpl::destroy(v103, v105);
  else
    *(_DWORD *)v103 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[44] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v108 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v109);
  v111 = v481[0];
  v112 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[45] = (int32x2_t)v111;
  if (v112)
    *(_DWORD *)v111 = v112;
  else
    WTF::StringImpl::destroy(v111, v110);
  if (*(_DWORD *)v108 == 2)
    WTF::StringImpl::destroy(v108, v110);
  else
    *(_DWORD *)v108 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[46] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v113 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v114);
  v116 = v481[0];
  v117 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[47] = (int32x2_t)v116;
  if (v117)
    *(_DWORD *)v116 = v117;
  else
    WTF::StringImpl::destroy(v116, v115);
  if (*(_DWORD *)v113 == 2)
    WTF::StringImpl::destroy(v113, v115);
  else
    *(_DWORD *)v113 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[48] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v118 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v119);
  v121 = v481[0];
  v122 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[49] = (int32x2_t)v121;
  if (v122)
    *(_DWORD *)v121 = v122;
  else
    WTF::StringImpl::destroy(v121, v120);
  if (*(_DWORD *)v118 == 2)
    WTF::StringImpl::destroy(v118, v120);
  else
    *(_DWORD *)v118 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[50] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v123 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v124);
  v126 = v481[0];
  v127 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[51] = (int32x2_t)v126;
  if (v127)
    *(_DWORD *)v126 = v127;
  else
    WTF::StringImpl::destroy(v126, v125);
  if (*(_DWORD *)v123 == 2)
    WTF::StringImpl::destroy(v123, v125);
  else
    *(_DWORD *)v123 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[52] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v128 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v129);
  v131 = v481[0];
  v132 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[53] = (int32x2_t)v131;
  if (v132)
    *(_DWORD *)v131 = v132;
  else
    WTF::StringImpl::destroy(v131, v130);
  if (*(_DWORD *)v128 == 2)
    WTF::StringImpl::destroy(v128, v130);
  else
    *(_DWORD *)v128 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[54] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v133 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v134);
  v136 = v481[0];
  v137 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[55] = (int32x2_t)v136;
  if (v137)
    *(_DWORD *)v136 = v137;
  else
    WTF::StringImpl::destroy(v136, v135);
  if (*(_DWORD *)v133 == 2)
    WTF::StringImpl::destroy(v133, v135);
  else
    *(_DWORD *)v133 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[56] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v138 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v139);
  v141 = v481[0];
  v142 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[57] = (int32x2_t)v141;
  if (v142)
    *(_DWORD *)v141 = v142;
  else
    WTF::StringImpl::destroy(v141, v140);
  if (*(_DWORD *)v138 == 2)
    WTF::StringImpl::destroy(v138, v140);
  else
    *(_DWORD *)v138 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[58] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v143 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v144);
  v146 = v481[0];
  v147 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[59] = (int32x2_t)v146;
  if (v147)
    *(_DWORD *)v146 = v147;
  else
    WTF::StringImpl::destroy(v146, v145);
  if (*(_DWORD *)v143 == 2)
    WTF::StringImpl::destroy(v143, v145);
  else
    *(_DWORD *)v143 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[60] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v148 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v149);
  v151 = v481[0];
  v152 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[61] = (int32x2_t)v151;
  if (v152)
    *(_DWORD *)v151 = v152;
  else
    WTF::StringImpl::destroy(v151, v150);
  if (*(_DWORD *)v148 == 2)
    WTF::StringImpl::destroy(v148, v150);
  else
    *(_DWORD *)v148 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[62] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v153 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v154);
  v156 = v481[0];
  v157 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[63] = (int32x2_t)v156;
  if (v157)
    *(_DWORD *)v156 = v157;
  else
    WTF::StringImpl::destroy(v156, v155);
  if (*(_DWORD *)v153 == 2)
    WTF::StringImpl::destroy(v153, v155);
  else
    *(_DWORD *)v153 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[64] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v158 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v159);
  v161 = v481[0];
  v162 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[65] = (int32x2_t)v161;
  if (v162)
    *(_DWORD *)v161 = v162;
  else
    WTF::StringImpl::destroy(v161, v160);
  if (*(_DWORD *)v158 == 2)
    WTF::StringImpl::destroy(v158, v160);
  else
    *(_DWORD *)v158 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[66] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v163 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v164);
  v166 = v481[0];
  v167 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[67] = (int32x2_t)v166;
  if (v167)
    *(_DWORD *)v166 = v167;
  else
    WTF::StringImpl::destroy(v166, v165);
  if (*(_DWORD *)v163 == 2)
    WTF::StringImpl::destroy(v163, v165);
  else
    *(_DWORD *)v163 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[68] = (int32x2_t)v481[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v168 = v481[0];
  WTF::PrivateSymbolImpl::create(v481[0], v169);
  v171 = v481[0];
  v172 = *(_DWORD *)v481[0];
  *(_DWORD *)v481[0] += 2;
  this[69] = (int32x2_t)v171;
  if (v172)
    *(_DWORD *)v171 = v172;
  else
    WTF::StringImpl::destroy(v171, v170);
  if (*(_DWORD *)v168 == 2)
    WTF::StringImpl::destroy(v168, v170);
  else
    *(_DWORD *)v168 -= 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v173 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v174 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v176 = v486;
  v486 = 0;
  if (v176)
  {
    if (*(_DWORD *)v176 == 2)
      WTF::StringImpl::destroy(v176, v175);
    else
      *(_DWORD *)v176 -= 2;
  }
  *v174 = off_1E33948F0;
  v177 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  if (v173)
    v178 = v173;
  else
    v178 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *(_DWORD *)v178 += 2;
  v174[15] = v178;
  this[70] = (int32x2_t)v174;
  this[71].i32[0] = 0;
  this[71].i32[1] = *((_DWORD *)v178 + 1);
  this[72] = vmax_s32(0, 0);
  v179 = v485;
  v485 = 0;
  if (v179)
  {
    if (*(_DWORD *)v179 == 2)
      WTF::StringImpl::destroy(v179, v175);
    else
      *(_DWORD *)v179 -= 2;
  }
  v180 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v180)
  {
    if (v180[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v180 + 8))(v180);
    else
      --v180[2];
  }
  v181 = v481[0];
  v481[0] = 0;
  if (v181)
  {
    if (*(_DWORD *)v181 == 2)
      WTF::StringImpl::destroy(v181, v175);
    else
      *(_DWORD *)v181 -= 2;
  }
  if (v173)
  {
    if (*(_DWORD *)v173 == 2)
      WTF::StringImpl::destroy(v173, v175);
    else
      *(_DWORD *)v173 -= 2;
  }
  v182 = v484;
  v484 = 0;
  if (v182)
  {
    if (*(_DWORD *)v182 == 2)
      WTF::StringImpl::destroy(v182, v175);
    else
      *(_DWORD *)v182 -= 2;
  }
  this[73] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v183 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v184 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v186 = v486;
  v486 = 0;
  if (v186)
  {
    if (*(_DWORD *)v186 == 2)
      WTF::StringImpl::destroy(v186, v185);
    else
      *(_DWORD *)v186 -= 2;
  }
  *v184 = off_1E33948F0;
  if (v183)
    v187 = v183;
  else
    v187 = v177;
  *(_DWORD *)v187 += 2;
  v184[15] = v187;
  this[74] = (int32x2_t)v184;
  this[75].i32[0] = 0;
  this[75].i32[1] = *((_DWORD *)v187 + 1);
  this[76] = vmax_s32(0, 0);
  v188 = v485;
  v485 = 0;
  if (v188)
  {
    if (*(_DWORD *)v188 == 2)
      WTF::StringImpl::destroy(v188, v185);
    else
      *(_DWORD *)v188 -= 2;
  }
  v189 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v189)
  {
    if (v189[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v189 + 8))(v189);
    else
      --v189[2];
  }
  v190 = v481[0];
  v481[0] = 0;
  if (v190)
  {
    if (*(_DWORD *)v190 == 2)
      WTF::StringImpl::destroy(v190, v185);
    else
      *(_DWORD *)v190 -= 2;
  }
  if (v183)
  {
    if (*(_DWORD *)v183 == 2)
      WTF::StringImpl::destroy(v183, v185);
    else
      *(_DWORD *)v183 -= 2;
  }
  v191 = v484;
  v484 = 0;
  if (v191)
  {
    if (*(_DWORD *)v191 == 2)
      WTF::StringImpl::destroy(v191, v185);
    else
      *(_DWORD *)v191 -= 2;
  }
  this[77] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v192 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v193 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v195 = v486;
  v486 = 0;
  if (v195)
  {
    if (*(_DWORD *)v195 == 2)
      WTF::StringImpl::destroy(v195, v194);
    else
      *(_DWORD *)v195 -= 2;
  }
  *v193 = off_1E33948F0;
  if (v192)
    v196 = v192;
  else
    v196 = v177;
  *(_DWORD *)v196 += 2;
  v193[15] = v196;
  this[78] = (int32x2_t)v193;
  this[79].i32[0] = 0;
  this[79].i32[1] = *((_DWORD *)v196 + 1);
  this[80] = vmax_s32(0, 0);
  v197 = v485;
  v485 = 0;
  if (v197)
  {
    if (*(_DWORD *)v197 == 2)
      WTF::StringImpl::destroy(v197, v194);
    else
      *(_DWORD *)v197 -= 2;
  }
  v198 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v198)
  {
    if (v198[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v198 + 8))(v198);
    else
      --v198[2];
  }
  v199 = v481[0];
  v481[0] = 0;
  if (v199)
  {
    if (*(_DWORD *)v199 == 2)
      WTF::StringImpl::destroy(v199, v194);
    else
      *(_DWORD *)v199 -= 2;
  }
  if (v192)
  {
    if (*(_DWORD *)v192 == 2)
      WTF::StringImpl::destroy(v192, v194);
    else
      *(_DWORD *)v192 -= 2;
  }
  v200 = v484;
  v484 = 0;
  if (v200)
  {
    if (*(_DWORD *)v200 == 2)
      WTF::StringImpl::destroy(v200, v194);
    else
      *(_DWORD *)v200 -= 2;
  }
  this[81] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v201 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v202 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v204 = v486;
  v486 = 0;
  if (v204)
  {
    if (*(_DWORD *)v204 == 2)
      WTF::StringImpl::destroy(v204, v203);
    else
      *(_DWORD *)v204 -= 2;
  }
  *v202 = off_1E33948F0;
  if (v201)
    v205 = v201;
  else
    v205 = v177;
  *(_DWORD *)v205 += 2;
  v202[15] = v205;
  this[82] = (int32x2_t)v202;
  this[83].i32[0] = 0;
  this[83].i32[1] = *((_DWORD *)v205 + 1);
  this[84] = vmax_s32(0, 0);
  v206 = v485;
  v485 = 0;
  if (v206)
  {
    if (*(_DWORD *)v206 == 2)
      WTF::StringImpl::destroy(v206, v203);
    else
      *(_DWORD *)v206 -= 2;
  }
  v207 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v207)
  {
    if (v207[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v207 + 8))(v207);
    else
      --v207[2];
  }
  v208 = v481[0];
  v481[0] = 0;
  if (v208)
  {
    if (*(_DWORD *)v208 == 2)
      WTF::StringImpl::destroy(v208, v203);
    else
      *(_DWORD *)v208 -= 2;
  }
  if (v201)
  {
    if (*(_DWORD *)v201 == 2)
      WTF::StringImpl::destroy(v201, v203);
    else
      *(_DWORD *)v201 -= 2;
  }
  v209 = v484;
  v484 = 0;
  if (v209)
  {
    if (*(_DWORD *)v209 == 2)
      WTF::StringImpl::destroy(v209, v203);
    else
      *(_DWORD *)v209 -= 2;
  }
  this[85] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v210 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v211 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v213 = v486;
  v486 = 0;
  if (v213)
  {
    if (*(_DWORD *)v213 == 2)
      WTF::StringImpl::destroy(v213, v212);
    else
      *(_DWORD *)v213 -= 2;
  }
  *v211 = off_1E33948F0;
  if (v210)
    v214 = v210;
  else
    v214 = v177;
  *(_DWORD *)v214 += 2;
  v211[15] = v214;
  this[86] = (int32x2_t)v211;
  this[87].i32[0] = 0;
  this[87].i32[1] = *((_DWORD *)v214 + 1);
  this[88] = vmax_s32(0, 0);
  v215 = v485;
  v485 = 0;
  if (v215)
  {
    if (*(_DWORD *)v215 == 2)
      WTF::StringImpl::destroy(v215, v212);
    else
      *(_DWORD *)v215 -= 2;
  }
  v216 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v216)
  {
    if (v216[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v216 + 8))(v216);
    else
      --v216[2];
  }
  v217 = v481[0];
  v481[0] = 0;
  if (v217)
  {
    if (*(_DWORD *)v217 == 2)
      WTF::StringImpl::destroy(v217, v212);
    else
      *(_DWORD *)v217 -= 2;
  }
  if (v210)
  {
    if (*(_DWORD *)v210 == 2)
      WTF::StringImpl::destroy(v210, v212);
    else
      *(_DWORD *)v210 -= 2;
  }
  v218 = v484;
  v484 = 0;
  if (v218)
  {
    if (*(_DWORD *)v218 == 2)
      WTF::StringImpl::destroy(v218, v212);
    else
      *(_DWORD *)v218 -= 2;
  }
  this[89] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v219 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v220 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v222 = v486;
  v486 = 0;
  if (v222)
  {
    if (*(_DWORD *)v222 == 2)
      WTF::StringImpl::destroy(v222, v221);
    else
      *(_DWORD *)v222 -= 2;
  }
  *v220 = off_1E33948F0;
  if (v219)
    v223 = v219;
  else
    v223 = v177;
  *(_DWORD *)v223 += 2;
  v220[15] = v223;
  this[90] = (int32x2_t)v220;
  this[91].i32[0] = 0;
  this[91].i32[1] = *((_DWORD *)v223 + 1);
  this[92] = vmax_s32(0, 0);
  v224 = v485;
  v485 = 0;
  if (v224)
  {
    if (*(_DWORD *)v224 == 2)
      WTF::StringImpl::destroy(v224, v221);
    else
      *(_DWORD *)v224 -= 2;
  }
  v225 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v225)
  {
    if (v225[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v225 + 8))(v225);
    else
      --v225[2];
  }
  v226 = v481[0];
  v481[0] = 0;
  if (v226)
  {
    if (*(_DWORD *)v226 == 2)
      WTF::StringImpl::destroy(v226, v221);
    else
      *(_DWORD *)v226 -= 2;
  }
  if (v219)
  {
    if (*(_DWORD *)v219 == 2)
      WTF::StringImpl::destroy(v219, v221);
    else
      *(_DWORD *)v219 -= 2;
  }
  v227 = v484;
  v484 = 0;
  if (v227)
  {
    if (*(_DWORD *)v227 == 2)
      WTF::StringImpl::destroy(v227, v221);
    else
      *(_DWORD *)v227 -= 2;
  }
  this[93] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v228 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v229 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v231 = v486;
  v486 = 0;
  if (v231)
  {
    if (*(_DWORD *)v231 == 2)
      WTF::StringImpl::destroy(v231, v230);
    else
      *(_DWORD *)v231 -= 2;
  }
  *v229 = off_1E33948F0;
  if (v228)
    v232 = v228;
  else
    v232 = v177;
  *(_DWORD *)v232 += 2;
  v229[15] = v232;
  this[94] = (int32x2_t)v229;
  this[95].i32[0] = 0;
  this[95].i32[1] = *((_DWORD *)v232 + 1);
  this[96] = vmax_s32(0, 0);
  v233 = v485;
  v485 = 0;
  if (v233)
  {
    if (*(_DWORD *)v233 == 2)
      WTF::StringImpl::destroy(v233, v230);
    else
      *(_DWORD *)v233 -= 2;
  }
  v234 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v234)
  {
    if (v234[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v234 + 8))(v234);
    else
      --v234[2];
  }
  v235 = v481[0];
  v481[0] = 0;
  if (v235)
  {
    if (*(_DWORD *)v235 == 2)
      WTF::StringImpl::destroy(v235, v230);
    else
      *(_DWORD *)v235 -= 2;
  }
  if (v228)
  {
    if (*(_DWORD *)v228 == 2)
      WTF::StringImpl::destroy(v228, v230);
    else
      *(_DWORD *)v228 -= 2;
  }
  v236 = v484;
  v484 = 0;
  if (v236)
  {
    if (*(_DWORD *)v236 == 2)
      WTF::StringImpl::destroy(v236, v230);
    else
      *(_DWORD *)v236 -= 2;
  }
  this[97] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v237 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v238 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v240 = v486;
  v486 = 0;
  if (v240)
  {
    if (*(_DWORD *)v240 == 2)
      WTF::StringImpl::destroy(v240, v239);
    else
      *(_DWORD *)v240 -= 2;
  }
  *v238 = off_1E33948F0;
  if (v237)
    v241 = v237;
  else
    v241 = v177;
  *(_DWORD *)v241 += 2;
  v238[15] = v241;
  this[98] = (int32x2_t)v238;
  this[99].i32[0] = 0;
  this[99].i32[1] = *((_DWORD *)v241 + 1);
  this[100] = vmax_s32(0, 0);
  v242 = v485;
  v485 = 0;
  if (v242)
  {
    if (*(_DWORD *)v242 == 2)
      WTF::StringImpl::destroy(v242, v239);
    else
      *(_DWORD *)v242 -= 2;
  }
  v243 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v243)
  {
    if (v243[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v243 + 8))(v243);
    else
      --v243[2];
  }
  v244 = v481[0];
  v481[0] = 0;
  if (v244)
  {
    if (*(_DWORD *)v244 == 2)
      WTF::StringImpl::destroy(v244, v239);
    else
      *(_DWORD *)v244 -= 2;
  }
  if (v237)
  {
    if (*(_DWORD *)v237 == 2)
      WTF::StringImpl::destroy(v237, v239);
    else
      *(_DWORD *)v237 -= 2;
  }
  v245 = v484;
  v484 = 0;
  if (v245)
  {
    if (*(_DWORD *)v245 == 2)
      WTF::StringImpl::destroy(v245, v239);
    else
      *(_DWORD *)v245 -= 2;
  }
  this[101] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v246 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v247 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v249 = v486;
  v486 = 0;
  if (v249)
  {
    if (*(_DWORD *)v249 == 2)
      WTF::StringImpl::destroy(v249, v248);
    else
      *(_DWORD *)v249 -= 2;
  }
  *v247 = off_1E33948F0;
  if (v246)
    v250 = v246;
  else
    v250 = v177;
  *(_DWORD *)v250 += 2;
  v247[15] = v250;
  this[102] = (int32x2_t)v247;
  this[103].i32[0] = 0;
  this[103].i32[1] = *((_DWORD *)v250 + 1);
  this[104] = vmax_s32(0, 0);
  v251 = v485;
  v485 = 0;
  if (v251)
  {
    if (*(_DWORD *)v251 == 2)
      WTF::StringImpl::destroy(v251, v248);
    else
      *(_DWORD *)v251 -= 2;
  }
  v252 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v252)
  {
    if (v252[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v252 + 8))(v252);
    else
      --v252[2];
  }
  v253 = v481[0];
  v481[0] = 0;
  if (v253)
  {
    if (*(_DWORD *)v253 == 2)
      WTF::StringImpl::destroy(v253, v248);
    else
      *(_DWORD *)v253 -= 2;
  }
  if (v246)
  {
    if (*(_DWORD *)v246 == 2)
      WTF::StringImpl::destroy(v246, v248);
    else
      *(_DWORD *)v246 -= 2;
  }
  v254 = v484;
  v484 = 0;
  if (v254)
  {
    if (*(_DWORD *)v254 == 2)
      WTF::StringImpl::destroy(v254, v248);
    else
      *(_DWORD *)v254 -= 2;
  }
  this[105] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v255 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v256 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v258 = v486;
  v486 = 0;
  if (v258)
  {
    if (*(_DWORD *)v258 == 2)
      WTF::StringImpl::destroy(v258, v257);
    else
      *(_DWORD *)v258 -= 2;
  }
  *v256 = off_1E33948F0;
  if (v255)
    v259 = v255;
  else
    v259 = v177;
  *(_DWORD *)v259 += 2;
  v256[15] = v259;
  this[106] = (int32x2_t)v256;
  this[107].i32[0] = 0;
  this[107].i32[1] = *((_DWORD *)v259 + 1);
  this[108] = vmax_s32(0, 0);
  v260 = v485;
  v485 = 0;
  if (v260)
  {
    if (*(_DWORD *)v260 == 2)
      WTF::StringImpl::destroy(v260, v257);
    else
      *(_DWORD *)v260 -= 2;
  }
  v261 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v261)
  {
    if (v261[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v261 + 8))(v261);
    else
      --v261[2];
  }
  v262 = v481[0];
  v481[0] = 0;
  if (v262)
  {
    if (*(_DWORD *)v262 == 2)
      WTF::StringImpl::destroy(v262, v257);
    else
      *(_DWORD *)v262 -= 2;
  }
  if (v255)
  {
    if (*(_DWORD *)v255 == 2)
      WTF::StringImpl::destroy(v255, v257);
    else
      *(_DWORD *)v255 -= 2;
  }
  v263 = v484;
  v484 = 0;
  if (v263)
  {
    if (*(_DWORD *)v263 == 2)
      WTF::StringImpl::destroy(v263, v257);
    else
      *(_DWORD *)v263 -= 2;
  }
  this[109] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v264 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v265 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v267 = v486;
  v486 = 0;
  if (v267)
  {
    if (*(_DWORD *)v267 == 2)
      WTF::StringImpl::destroy(v267, v266);
    else
      *(_DWORD *)v267 -= 2;
  }
  *v265 = off_1E33948F0;
  if (v264)
    v268 = v264;
  else
    v268 = v177;
  *(_DWORD *)v268 += 2;
  v265[15] = v268;
  this[110] = (int32x2_t)v265;
  this[111].i32[0] = 0;
  this[111].i32[1] = *((_DWORD *)v268 + 1);
  this[112] = vmax_s32(0, 0);
  v269 = v485;
  v485 = 0;
  if (v269)
  {
    if (*(_DWORD *)v269 == 2)
      WTF::StringImpl::destroy(v269, v266);
    else
      *(_DWORD *)v269 -= 2;
  }
  v270 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v270)
  {
    if (v270[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v270 + 8))(v270);
    else
      --v270[2];
  }
  v271 = v481[0];
  v481[0] = 0;
  if (v271)
  {
    if (*(_DWORD *)v271 == 2)
      WTF::StringImpl::destroy(v271, v266);
    else
      *(_DWORD *)v271 -= 2;
  }
  if (v264)
  {
    if (*(_DWORD *)v264 == 2)
      WTF::StringImpl::destroy(v264, v266);
    else
      *(_DWORD *)v264 -= 2;
  }
  v272 = v484;
  v484 = 0;
  if (v272)
  {
    if (*(_DWORD *)v272 == 2)
      WTF::StringImpl::destroy(v272, v266);
    else
      *(_DWORD *)v272 -= 2;
  }
  this[113] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v273 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v274 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v276 = v486;
  v486 = 0;
  if (v276)
  {
    if (*(_DWORD *)v276 == 2)
      WTF::StringImpl::destroy(v276, v275);
    else
      *(_DWORD *)v276 -= 2;
  }
  *v274 = off_1E33948F0;
  if (v273)
    v277 = v273;
  else
    v277 = v177;
  *(_DWORD *)v277 += 2;
  v274[15] = v277;
  this[114] = (int32x2_t)v274;
  this[115].i32[0] = 0;
  this[115].i32[1] = *((_DWORD *)v277 + 1);
  this[116] = vmax_s32(0, 0);
  v278 = v485;
  v485 = 0;
  if (v278)
  {
    if (*(_DWORD *)v278 == 2)
      WTF::StringImpl::destroy(v278, v275);
    else
      *(_DWORD *)v278 -= 2;
  }
  v279 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v279)
  {
    if (v279[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v279 + 8))(v279);
    else
      --v279[2];
  }
  v280 = v481[0];
  v481[0] = 0;
  if (v280)
  {
    if (*(_DWORD *)v280 == 2)
      WTF::StringImpl::destroy(v280, v275);
    else
      *(_DWORD *)v280 -= 2;
  }
  if (v273)
  {
    if (*(_DWORD *)v273 == 2)
      WTF::StringImpl::destroy(v273, v275);
    else
      *(_DWORD *)v273 -= 2;
  }
  v281 = v484;
  v484 = 0;
  if (v281)
  {
    if (*(_DWORD *)v281 == 2)
      WTF::StringImpl::destroy(v281, v275);
    else
      *(_DWORD *)v281 -= 2;
  }
  this[117] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v282 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v283 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v285 = v486;
  v486 = 0;
  if (v285)
  {
    if (*(_DWORD *)v285 == 2)
      WTF::StringImpl::destroy(v285, v284);
    else
      *(_DWORD *)v285 -= 2;
  }
  *v283 = off_1E33948F0;
  if (v282)
    v286 = v282;
  else
    v286 = v177;
  *(_DWORD *)v286 += 2;
  v283[15] = v286;
  this[118] = (int32x2_t)v283;
  this[119].i32[0] = 0;
  this[119].i32[1] = *((_DWORD *)v286 + 1);
  this[120] = vmax_s32(0, 0);
  v287 = v485;
  v485 = 0;
  if (v287)
  {
    if (*(_DWORD *)v287 == 2)
      WTF::StringImpl::destroy(v287, v284);
    else
      *(_DWORD *)v287 -= 2;
  }
  v288 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v288)
  {
    if (v288[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v288 + 8))(v288);
    else
      --v288[2];
  }
  v289 = v481[0];
  v481[0] = 0;
  if (v289)
  {
    if (*(_DWORD *)v289 == 2)
      WTF::StringImpl::destroy(v289, v284);
    else
      *(_DWORD *)v289 -= 2;
  }
  if (v282)
  {
    if (*(_DWORD *)v282 == 2)
      WTF::StringImpl::destroy(v282, v284);
    else
      *(_DWORD *)v282 -= 2;
  }
  v290 = v484;
  v484 = 0;
  if (v290)
  {
    if (*(_DWORD *)v290 == 2)
      WTF::StringImpl::destroy(v290, v284);
    else
      *(_DWORD *)v290 -= 2;
  }
  this[121] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v291 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v292 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v294 = v486;
  v486 = 0;
  if (v294)
  {
    if (*(_DWORD *)v294 == 2)
      WTF::StringImpl::destroy(v294, v293);
    else
      *(_DWORD *)v294 -= 2;
  }
  *v292 = off_1E33948F0;
  if (v291)
    v295 = v291;
  else
    v295 = v177;
  *(_DWORD *)v295 += 2;
  v292[15] = v295;
  this[122] = (int32x2_t)v292;
  this[123].i32[0] = 0;
  this[123].i32[1] = *((_DWORD *)v295 + 1);
  this[124] = vmax_s32(0, 0);
  v296 = v485;
  v485 = 0;
  if (v296)
  {
    if (*(_DWORD *)v296 == 2)
      WTF::StringImpl::destroy(v296, v293);
    else
      *(_DWORD *)v296 -= 2;
  }
  v297 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v297)
  {
    if (v297[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v297 + 8))(v297);
    else
      --v297[2];
  }
  v298 = v481[0];
  v481[0] = 0;
  if (v298)
  {
    if (*(_DWORD *)v298 == 2)
      WTF::StringImpl::destroy(v298, v293);
    else
      *(_DWORD *)v298 -= 2;
  }
  if (v291)
  {
    if (*(_DWORD *)v291 == 2)
      WTF::StringImpl::destroy(v291, v293);
    else
      *(_DWORD *)v291 -= 2;
  }
  v299 = v484;
  v484 = 0;
  if (v299)
  {
    if (*(_DWORD *)v299 == 2)
      WTF::StringImpl::destroy(v299, v293);
    else
      *(_DWORD *)v299 -= 2;
  }
  this[125] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v300 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v301 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v303 = v486;
  v486 = 0;
  if (v303)
  {
    if (*(_DWORD *)v303 == 2)
      WTF::StringImpl::destroy(v303, v302);
    else
      *(_DWORD *)v303 -= 2;
  }
  *v301 = off_1E33948F0;
  if (v300)
    v304 = v300;
  else
    v304 = v177;
  *(_DWORD *)v304 += 2;
  v301[15] = v304;
  this[126] = (int32x2_t)v301;
  this[127].i32[0] = 0;
  this[127].i32[1] = *((_DWORD *)v304 + 1);
  this[128] = vmax_s32(0, 0);
  v305 = v485;
  v485 = 0;
  if (v305)
  {
    if (*(_DWORD *)v305 == 2)
      WTF::StringImpl::destroy(v305, v302);
    else
      *(_DWORD *)v305 -= 2;
  }
  v306 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v306)
  {
    if (v306[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v306 + 8))(v306);
    else
      --v306[2];
  }
  v307 = v481[0];
  v481[0] = 0;
  if (v307)
  {
    if (*(_DWORD *)v307 == 2)
      WTF::StringImpl::destroy(v307, v302);
    else
      *(_DWORD *)v307 -= 2;
  }
  if (v300)
  {
    if (*(_DWORD *)v300 == 2)
      WTF::StringImpl::destroy(v300, v302);
    else
      *(_DWORD *)v300 -= 2;
  }
  v308 = v484;
  v484 = 0;
  if (v308)
  {
    if (*(_DWORD *)v308 == 2)
      WTF::StringImpl::destroy(v308, v302);
    else
      *(_DWORD *)v308 -= 2;
  }
  this[129] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v309 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v310 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v312 = v486;
  v486 = 0;
  if (v312)
  {
    if (*(_DWORD *)v312 == 2)
      WTF::StringImpl::destroy(v312, v311);
    else
      *(_DWORD *)v312 -= 2;
  }
  *v310 = off_1E33948F0;
  if (v309)
    v313 = v309;
  else
    v313 = v177;
  *(_DWORD *)v313 += 2;
  v310[15] = v313;
  this[130] = (int32x2_t)v310;
  this[131].i32[0] = 0;
  this[131].i32[1] = *((_DWORD *)v313 + 1);
  this[132] = vmax_s32(0, 0);
  v314 = v485;
  v485 = 0;
  if (v314)
  {
    if (*(_DWORD *)v314 == 2)
      WTF::StringImpl::destroy(v314, v311);
    else
      *(_DWORD *)v314 -= 2;
  }
  v315 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v315)
  {
    if (v315[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v315 + 8))(v315);
    else
      --v315[2];
  }
  v316 = v481[0];
  v481[0] = 0;
  if (v316)
  {
    if (*(_DWORD *)v316 == 2)
      WTF::StringImpl::destroy(v316, v311);
    else
      *(_DWORD *)v316 -= 2;
  }
  if (v309)
  {
    if (*(_DWORD *)v309 == 2)
      WTF::StringImpl::destroy(v309, v311);
    else
      *(_DWORD *)v309 -= 2;
  }
  v317 = v484;
  v484 = 0;
  if (v317)
  {
    if (*(_DWORD *)v317 == 2)
      WTF::StringImpl::destroy(v317, v311);
    else
      *(_DWORD *)v317 -= 2;
  }
  this[133] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v318 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v319 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v321 = v486;
  v486 = 0;
  if (v321)
  {
    if (*(_DWORD *)v321 == 2)
      WTF::StringImpl::destroy(v321, v320);
    else
      *(_DWORD *)v321 -= 2;
  }
  *v319 = off_1E33948F0;
  if (v318)
    v322 = v318;
  else
    v322 = v177;
  *(_DWORD *)v322 += 2;
  v319[15] = v322;
  this[134] = (int32x2_t)v319;
  this[135].i32[0] = 0;
  this[135].i32[1] = *((_DWORD *)v322 + 1);
  this[136] = vmax_s32(0, 0);
  v323 = v485;
  v485 = 0;
  if (v323)
  {
    if (*(_DWORD *)v323 == 2)
      WTF::StringImpl::destroy(v323, v320);
    else
      *(_DWORD *)v323 -= 2;
  }
  v324 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v324)
  {
    if (v324[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v324 + 8))(v324);
    else
      --v324[2];
  }
  v325 = v481[0];
  v481[0] = 0;
  if (v325)
  {
    if (*(_DWORD *)v325 == 2)
      WTF::StringImpl::destroy(v325, v320);
    else
      *(_DWORD *)v325 -= 2;
  }
  if (v318)
  {
    if (*(_DWORD *)v318 == 2)
      WTF::StringImpl::destroy(v318, v320);
    else
      *(_DWORD *)v318 -= 2;
  }
  v326 = v484;
  v484 = 0;
  if (v326)
  {
    if (*(_DWORD *)v326 == 2)
      WTF::StringImpl::destroy(v326, v320);
    else
      *(_DWORD *)v326 -= 2;
  }
  this[137] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v327 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v328 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v330 = v486;
  v486 = 0;
  if (v330)
  {
    if (*(_DWORD *)v330 == 2)
      WTF::StringImpl::destroy(v330, v329);
    else
      *(_DWORD *)v330 -= 2;
  }
  *v328 = off_1E33948F0;
  if (v327)
    v331 = v327;
  else
    v331 = v177;
  *(_DWORD *)v331 += 2;
  v328[15] = v331;
  this[138] = (int32x2_t)v328;
  this[139].i32[0] = 0;
  this[139].i32[1] = *((_DWORD *)v331 + 1);
  this[140] = vmax_s32(0, 0);
  v332 = v485;
  v485 = 0;
  if (v332)
  {
    if (*(_DWORD *)v332 == 2)
      WTF::StringImpl::destroy(v332, v329);
    else
      *(_DWORD *)v332 -= 2;
  }
  v333 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v333)
  {
    if (v333[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v333 + 8))(v333);
    else
      --v333[2];
  }
  v334 = v481[0];
  v481[0] = 0;
  if (v334)
  {
    if (*(_DWORD *)v334 == 2)
      WTF::StringImpl::destroy(v334, v329);
    else
      *(_DWORD *)v334 -= 2;
  }
  if (v327)
  {
    if (*(_DWORD *)v327 == 2)
      WTF::StringImpl::destroy(v327, v329);
    else
      *(_DWORD *)v327 -= 2;
  }
  v335 = v484;
  v484 = 0;
  if (v335)
  {
    if (*(_DWORD *)v335 == 2)
      WTF::StringImpl::destroy(v335, v329);
    else
      *(_DWORD *)v335 -= 2;
  }
  this[141] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v336 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v337 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v339 = v486;
  v486 = 0;
  if (v339)
  {
    if (*(_DWORD *)v339 == 2)
      WTF::StringImpl::destroy(v339, v338);
    else
      *(_DWORD *)v339 -= 2;
  }
  *v337 = off_1E33948F0;
  if (v336)
    v340 = v336;
  else
    v340 = v177;
  *(_DWORD *)v340 += 2;
  v337[15] = v340;
  this[142] = (int32x2_t)v337;
  this[143].i32[0] = 0;
  this[143].i32[1] = *((_DWORD *)v340 + 1);
  this[144] = vmax_s32(0, 0);
  v341 = v485;
  v485 = 0;
  if (v341)
  {
    if (*(_DWORD *)v341 == 2)
      WTF::StringImpl::destroy(v341, v338);
    else
      *(_DWORD *)v341 -= 2;
  }
  v342 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v342)
  {
    if (v342[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v342 + 8))(v342);
    else
      --v342[2];
  }
  v343 = v481[0];
  v481[0] = 0;
  if (v343)
  {
    if (*(_DWORD *)v343 == 2)
      WTF::StringImpl::destroy(v343, v338);
    else
      *(_DWORD *)v343 -= 2;
  }
  if (v336)
  {
    if (*(_DWORD *)v336 == 2)
      WTF::StringImpl::destroy(v336, v338);
    else
      *(_DWORD *)v336 -= 2;
  }
  v344 = v484;
  v484 = 0;
  if (v344)
  {
    if (*(_DWORD *)v344 == 2)
      WTF::StringImpl::destroy(v344, v338);
    else
      *(_DWORD *)v344 -= 2;
  }
  this[145] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v345 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v346 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v348 = v486;
  v486 = 0;
  if (v348)
  {
    if (*(_DWORD *)v348 == 2)
      WTF::StringImpl::destroy(v348, v347);
    else
      *(_DWORD *)v348 -= 2;
  }
  *v346 = off_1E33948F0;
  if (v345)
    v349 = v345;
  else
    v349 = v177;
  *(_DWORD *)v349 += 2;
  v346[15] = v349;
  this[146] = (int32x2_t)v346;
  this[147].i32[0] = 0;
  this[147].i32[1] = *((_DWORD *)v349 + 1);
  this[148] = vmax_s32(0, 0);
  v350 = v485;
  v485 = 0;
  if (v350)
  {
    if (*(_DWORD *)v350 == 2)
      WTF::StringImpl::destroy(v350, v347);
    else
      *(_DWORD *)v350 -= 2;
  }
  v351 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v351)
  {
    if (v351[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v351 + 8))(v351);
    else
      --v351[2];
  }
  v352 = v481[0];
  v481[0] = 0;
  if (v352)
  {
    if (*(_DWORD *)v352 == 2)
      WTF::StringImpl::destroy(v352, v347);
    else
      *(_DWORD *)v352 -= 2;
  }
  if (v345)
  {
    if (*(_DWORD *)v345 == 2)
      WTF::StringImpl::destroy(v345, v347);
    else
      *(_DWORD *)v345 -= 2;
  }
  v353 = v484;
  v484 = 0;
  if (v353)
  {
    if (*(_DWORD *)v353 == 2)
      WTF::StringImpl::destroy(v353, v347);
    else
      *(_DWORD *)v353 -= 2;
  }
  this[149] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v354 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v355 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v357 = v486;
  v486 = 0;
  if (v357)
  {
    if (*(_DWORD *)v357 == 2)
      WTF::StringImpl::destroy(v357, v356);
    else
      *(_DWORD *)v357 -= 2;
  }
  *v355 = off_1E33948F0;
  if (v354)
    v358 = v354;
  else
    v358 = v177;
  *(_DWORD *)v358 += 2;
  v355[15] = v358;
  this[150] = (int32x2_t)v355;
  this[151].i32[0] = 0;
  this[151].i32[1] = *((_DWORD *)v358 + 1);
  this[152] = vmax_s32(0, 0);
  v359 = v485;
  v485 = 0;
  if (v359)
  {
    if (*(_DWORD *)v359 == 2)
      WTF::StringImpl::destroy(v359, v356);
    else
      *(_DWORD *)v359 -= 2;
  }
  v360 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v360)
  {
    if (v360[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v360 + 8))(v360);
    else
      --v360[2];
  }
  v361 = v481[0];
  v481[0] = 0;
  if (v361)
  {
    if (*(_DWORD *)v361 == 2)
      WTF::StringImpl::destroy(v361, v356);
    else
      *(_DWORD *)v361 -= 2;
  }
  if (v354)
  {
    if (*(_DWORD *)v354 == 2)
      WTF::StringImpl::destroy(v354, v356);
    else
      *(_DWORD *)v354 -= 2;
  }
  v362 = v484;
  v484 = 0;
  if (v362)
  {
    if (*(_DWORD *)v362 == 2)
      WTF::StringImpl::destroy(v362, v356);
    else
      *(_DWORD *)v362 -= 2;
  }
  this[153] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v363 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v364 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v366 = v486;
  v486 = 0;
  if (v366)
  {
    if (*(_DWORD *)v366 == 2)
      WTF::StringImpl::destroy(v366, v365);
    else
      *(_DWORD *)v366 -= 2;
  }
  *v364 = off_1E33948F0;
  if (v363)
    v367 = v363;
  else
    v367 = v177;
  *(_DWORD *)v367 += 2;
  v364[15] = v367;
  this[154] = (int32x2_t)v364;
  this[155].i32[0] = 0;
  this[155].i32[1] = *((_DWORD *)v367 + 1);
  this[156] = vmax_s32(0, 0);
  v368 = v485;
  v485 = 0;
  if (v368)
  {
    if (*(_DWORD *)v368 == 2)
      WTF::StringImpl::destroy(v368, v365);
    else
      *(_DWORD *)v368 -= 2;
  }
  v369 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v369)
  {
    if (v369[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v369 + 8))(v369);
    else
      --v369[2];
  }
  v370 = v481[0];
  v481[0] = 0;
  if (v370)
  {
    if (*(_DWORD *)v370 == 2)
      WTF::StringImpl::destroy(v370, v365);
    else
      *(_DWORD *)v370 -= 2;
  }
  if (v363)
  {
    if (*(_DWORD *)v363 == 2)
      WTF::StringImpl::destroy(v363, v365);
    else
      *(_DWORD *)v363 -= 2;
  }
  v371 = v484;
  v484 = 0;
  if (v371)
  {
    if (*(_DWORD *)v371 == 2)
      WTF::StringImpl::destroy(v371, v365);
    else
      *(_DWORD *)v371 -= 2;
  }
  this[157] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v372 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v373 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v375 = v486;
  v486 = 0;
  if (v375)
  {
    if (*(_DWORD *)v375 == 2)
      WTF::StringImpl::destroy(v375, v374);
    else
      *(_DWORD *)v375 -= 2;
  }
  *v373 = off_1E33948F0;
  if (v372)
    v376 = v372;
  else
    v376 = v177;
  *(_DWORD *)v376 += 2;
  v373[15] = v376;
  this[158] = (int32x2_t)v373;
  this[159].i32[0] = 0;
  this[159].i32[1] = *((_DWORD *)v376 + 1);
  this[160] = vmax_s32(0, 0);
  v377 = v485;
  v485 = 0;
  if (v377)
  {
    if (*(_DWORD *)v377 == 2)
      WTF::StringImpl::destroy(v377, v374);
    else
      *(_DWORD *)v377 -= 2;
  }
  v378 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v378)
  {
    if (v378[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v378 + 8))(v378);
    else
      --v378[2];
  }
  v379 = v481[0];
  v481[0] = 0;
  if (v379)
  {
    if (*(_DWORD *)v379 == 2)
      WTF::StringImpl::destroy(v379, v374);
    else
      *(_DWORD *)v379 -= 2;
  }
  if (v372)
  {
    if (*(_DWORD *)v372 == 2)
      WTF::StringImpl::destroy(v372, v374);
    else
      *(_DWORD *)v372 -= 2;
  }
  v380 = v484;
  v484 = 0;
  if (v380)
  {
    if (*(_DWORD *)v380 == 2)
      WTF::StringImpl::destroy(v380, v374);
    else
      *(_DWORD *)v380 -= 2;
  }
  this[161] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v381 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v382 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v384 = v486;
  v486 = 0;
  if (v384)
  {
    if (*(_DWORD *)v384 == 2)
      WTF::StringImpl::destroy(v384, v383);
    else
      *(_DWORD *)v384 -= 2;
  }
  *v382 = off_1E33948F0;
  if (v381)
    v385 = v381;
  else
    v385 = v177;
  *(_DWORD *)v385 += 2;
  v382[15] = v385;
  this[162] = (int32x2_t)v382;
  this[163].i32[0] = 0;
  this[163].i32[1] = *((_DWORD *)v385 + 1);
  this[164] = vmax_s32(0, 0);
  v386 = v485;
  v485 = 0;
  if (v386)
  {
    if (*(_DWORD *)v386 == 2)
      WTF::StringImpl::destroy(v386, v383);
    else
      *(_DWORD *)v386 -= 2;
  }
  v387 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v387)
  {
    if (v387[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v387 + 8))(v387);
    else
      --v387[2];
  }
  v388 = v481[0];
  v481[0] = 0;
  if (v388)
  {
    if (*(_DWORD *)v388 == 2)
      WTF::StringImpl::destroy(v388, v383);
    else
      *(_DWORD *)v388 -= 2;
  }
  if (v381)
  {
    if (*(_DWORD *)v381 == 2)
      WTF::StringImpl::destroy(v381, v383);
    else
      *(_DWORD *)v381 -= 2;
  }
  v389 = v484;
  v484 = 0;
  if (v389)
  {
    if (*(_DWORD *)v389 == 2)
      WTF::StringImpl::destroy(v389, v383);
    else
      *(_DWORD *)v389 -= 2;
  }
  this[165] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v390 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v391 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v393 = v486;
  v486 = 0;
  if (v393)
  {
    if (*(_DWORD *)v393 == 2)
      WTF::StringImpl::destroy(v393, v392);
    else
      *(_DWORD *)v393 -= 2;
  }
  *v391 = off_1E33948F0;
  if (v390)
    v394 = v390;
  else
    v394 = v177;
  *(_DWORD *)v394 += 2;
  v391[15] = v394;
  this[166] = (int32x2_t)v391;
  this[167].i32[0] = 0;
  this[167].i32[1] = *((_DWORD *)v394 + 1);
  this[168] = vmax_s32(0, 0);
  v395 = v485;
  v485 = 0;
  if (v395)
  {
    if (*(_DWORD *)v395 == 2)
      WTF::StringImpl::destroy(v395, v392);
    else
      *(_DWORD *)v395 -= 2;
  }
  v396 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v396)
  {
    if (v396[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v396 + 8))(v396);
    else
      --v396[2];
  }
  v397 = v481[0];
  v481[0] = 0;
  if (v397)
  {
    if (*(_DWORD *)v397 == 2)
      WTF::StringImpl::destroy(v397, v392);
    else
      *(_DWORD *)v397 -= 2;
  }
  if (v390)
  {
    if (*(_DWORD *)v390 == 2)
      WTF::StringImpl::destroy(v390, v392);
    else
      *(_DWORD *)v390 -= 2;
  }
  v398 = v484;
  v484 = 0;
  if (v398)
  {
    if (*(_DWORD *)v398 == 2)
      WTF::StringImpl::destroy(v398, v392);
    else
      *(_DWORD *)v398 -= 2;
  }
  this[169] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v399 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v400 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v402 = v486;
  v486 = 0;
  if (v402)
  {
    if (*(_DWORD *)v402 == 2)
      WTF::StringImpl::destroy(v402, v401);
    else
      *(_DWORD *)v402 -= 2;
  }
  *v400 = off_1E33948F0;
  if (v399)
    v403 = v399;
  else
    v403 = v177;
  *(_DWORD *)v403 += 2;
  v400[15] = v403;
  this[170] = (int32x2_t)v400;
  this[171].i32[0] = 0;
  this[171].i32[1] = *((_DWORD *)v403 + 1);
  this[172] = vmax_s32(0, 0);
  v404 = v485;
  v485 = 0;
  if (v404)
  {
    if (*(_DWORD *)v404 == 2)
      WTF::StringImpl::destroy(v404, v401);
    else
      *(_DWORD *)v404 -= 2;
  }
  v405 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v405)
  {
    if (v405[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v405 + 8))(v405);
    else
      --v405[2];
  }
  v406 = v481[0];
  v481[0] = 0;
  if (v406)
  {
    if (*(_DWORD *)v406 == 2)
      WTF::StringImpl::destroy(v406, v401);
    else
      *(_DWORD *)v406 -= 2;
  }
  if (v399)
  {
    if (*(_DWORD *)v399 == 2)
      WTF::StringImpl::destroy(v399, v401);
    else
      *(_DWORD *)v399 -= 2;
  }
  v407 = v484;
  v484 = 0;
  if (v407)
  {
    if (*(_DWORD *)v407 == 2)
      WTF::StringImpl::destroy(v407, v401);
    else
      *(_DWORD *)v407 -= 2;
  }
  this[173] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v408 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v409 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v411 = v486;
  v486 = 0;
  if (v411)
  {
    if (*(_DWORD *)v411 == 2)
      WTF::StringImpl::destroy(v411, v410);
    else
      *(_DWORD *)v411 -= 2;
  }
  *v409 = off_1E33948F0;
  if (v408)
    v412 = v408;
  else
    v412 = v177;
  *(_DWORD *)v412 += 2;
  v409[15] = v412;
  this[174] = (int32x2_t)v409;
  this[175].i32[0] = 0;
  this[175].i32[1] = *((_DWORD *)v412 + 1);
  this[176] = vmax_s32(0, 0);
  v413 = v485;
  v485 = 0;
  if (v413)
  {
    if (*(_DWORD *)v413 == 2)
      WTF::StringImpl::destroy(v413, v410);
    else
      *(_DWORD *)v413 -= 2;
  }
  v414 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v414)
  {
    if (v414[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v414 + 8))(v414);
    else
      --v414[2];
  }
  v415 = v481[0];
  v481[0] = 0;
  if (v415)
  {
    if (*(_DWORD *)v415 == 2)
      WTF::StringImpl::destroy(v415, v410);
    else
      *(_DWORD *)v415 -= 2;
  }
  if (v408)
  {
    if (*(_DWORD *)v408 == 2)
      WTF::StringImpl::destroy(v408, v410);
    else
      *(_DWORD *)v408 -= 2;
  }
  v416 = v484;
  v484 = 0;
  if (v416)
  {
    if (*(_DWORD *)v416 == 2)
      WTF::StringImpl::destroy(v416, v410);
    else
      *(_DWORD *)v416 -= 2;
  }
  this[177] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v417 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v418 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v420 = v486;
  v486 = 0;
  if (v420)
  {
    if (*(_DWORD *)v420 == 2)
      WTF::StringImpl::destroy(v420, v419);
    else
      *(_DWORD *)v420 -= 2;
  }
  *v418 = off_1E33948F0;
  if (v417)
    v421 = v417;
  else
    v421 = v177;
  *(_DWORD *)v421 += 2;
  v418[15] = v421;
  this[178] = (int32x2_t)v418;
  this[179].i32[0] = 0;
  this[179].i32[1] = *((_DWORD *)v421 + 1);
  this[180] = vmax_s32(0, 0);
  v422 = v485;
  v485 = 0;
  if (v422)
  {
    if (*(_DWORD *)v422 == 2)
      WTF::StringImpl::destroy(v422, v419);
    else
      *(_DWORD *)v422 -= 2;
  }
  v423 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v423)
  {
    if (v423[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v423 + 8))(v423);
    else
      --v423[2];
  }
  v424 = v481[0];
  v481[0] = 0;
  if (v424)
  {
    if (*(_DWORD *)v424 == 2)
      WTF::StringImpl::destroy(v424, v419);
    else
      *(_DWORD *)v424 -= 2;
  }
  if (v417)
  {
    if (*(_DWORD *)v417 == 2)
      WTF::StringImpl::destroy(v417, v419);
    else
      *(_DWORD *)v417 -= 2;
  }
  v425 = v484;
  v484 = 0;
  if (v425)
  {
    if (*(_DWORD *)v425 == 2)
      WTF::StringImpl::destroy(v425, v419);
    else
      *(_DWORD *)v425 -= 2;
  }
  this[181] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v426 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v427 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v429 = v486;
  v486 = 0;
  if (v429)
  {
    if (*(_DWORD *)v429 == 2)
      WTF::StringImpl::destroy(v429, v428);
    else
      *(_DWORD *)v429 -= 2;
  }
  *v427 = off_1E33948F0;
  if (v426)
    v430 = v426;
  else
    v430 = v177;
  *(_DWORD *)v430 += 2;
  v427[15] = v430;
  this[182] = (int32x2_t)v427;
  this[183].i32[0] = 0;
  this[183].i32[1] = *((_DWORD *)v430 + 1);
  this[184] = vmax_s32(0, 0);
  v431 = v485;
  v485 = 0;
  if (v431)
  {
    if (*(_DWORD *)v431 == 2)
      WTF::StringImpl::destroy(v431, v428);
    else
      *(_DWORD *)v431 -= 2;
  }
  v432 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v432)
  {
    if (v432[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v432 + 8))(v432);
    else
      --v432[2];
  }
  v433 = v481[0];
  v481[0] = 0;
  if (v433)
  {
    if (*(_DWORD *)v433 == 2)
      WTF::StringImpl::destroy(v433, v428);
    else
      *(_DWORD *)v433 -= 2;
  }
  if (v426)
  {
    if (*(_DWORD *)v426 == 2)
      WTF::StringImpl::destroy(v426, v428);
    else
      *(_DWORD *)v426 -= 2;
  }
  v434 = v484;
  v484 = 0;
  if (v434)
  {
    if (*(_DWORD *)v434 == 2)
      WTF::StringImpl::destroy(v434, v428);
    else
      *(_DWORD *)v434 -= 2;
  }
  this[185] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v435 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v436 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v438 = v486;
  v486 = 0;
  if (v438)
  {
    if (*(_DWORD *)v438 == 2)
      WTF::StringImpl::destroy(v438, v437);
    else
      *(_DWORD *)v438 -= 2;
  }
  *v436 = off_1E33948F0;
  if (v435)
    v439 = v435;
  else
    v439 = v177;
  *(_DWORD *)v439 += 2;
  v436[15] = v439;
  this[186] = (int32x2_t)v436;
  this[187].i32[0] = 0;
  this[187].i32[1] = *((_DWORD *)v439 + 1);
  this[188] = vmax_s32(0, 0);
  v440 = v485;
  v485 = 0;
  if (v440)
  {
    if (*(_DWORD *)v440 == 2)
      WTF::StringImpl::destroy(v440, v437);
    else
      *(_DWORD *)v440 -= 2;
  }
  v441 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v441)
  {
    if (v441[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v441 + 8))(v441);
    else
      --v441[2];
  }
  v442 = v481[0];
  v481[0] = 0;
  if (v442)
  {
    if (*(_DWORD *)v442 == 2)
      WTF::StringImpl::destroy(v442, v437);
    else
      *(_DWORD *)v442 -= 2;
  }
  if (v435)
  {
    if (*(_DWORD *)v435 == 2)
      WTF::StringImpl::destroy(v435, v437);
    else
      *(_DWORD *)v435 -= 2;
  }
  v443 = v484;
  v484 = 0;
  if (v443)
  {
    if (*(_DWORD *)v443 == 2)
      WTF::StringImpl::destroy(v443, v437);
    else
      *(_DWORD *)v443 -= 2;
  }
  this[189] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v444 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v445 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v447 = v486;
  v486 = 0;
  if (v447)
  {
    if (*(_DWORD *)v447 == 2)
      WTF::StringImpl::destroy(v447, v446);
    else
      *(_DWORD *)v447 -= 2;
  }
  *v445 = off_1E33948F0;
  if (v444)
    v448 = v444;
  else
    v448 = v177;
  *(_DWORD *)v448 += 2;
  v445[15] = v448;
  this[190] = (int32x2_t)v445;
  this[191].i32[0] = 0;
  this[191].i32[1] = *((_DWORD *)v448 + 1);
  this[192] = vmax_s32(0, 0);
  v449 = v485;
  v485 = 0;
  if (v449)
  {
    if (*(_DWORD *)v449 == 2)
      WTF::StringImpl::destroy(v449, v446);
    else
      *(_DWORD *)v449 -= 2;
  }
  v450 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v450)
  {
    if (v450[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v450 + 8))(v450);
    else
      --v450[2];
  }
  v451 = v481[0];
  v481[0] = 0;
  if (v451)
  {
    if (*(_DWORD *)v451 == 2)
      WTF::StringImpl::destroy(v451, v446);
    else
      *(_DWORD *)v451 -= 2;
  }
  if (v444)
  {
    if (*(_DWORD *)v444 == 2)
      WTF::StringImpl::destroy(v444, v446);
    else
      *(_DWORD *)v444 -= 2;
  }
  v452 = v484;
  v484 = 0;
  if (v452)
  {
    if (*(_DWORD *)v452 == 2)
      WTF::StringImpl::destroy(v452, v446);
    else
      *(_DWORD *)v452 -= 2;
  }
  this[193] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v453 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v454 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v456 = v486;
  v486 = 0;
  if (v456)
  {
    if (*(_DWORD *)v456 == 2)
      WTF::StringImpl::destroy(v456, v455);
    else
      *(_DWORD *)v456 -= 2;
  }
  *v454 = off_1E33948F0;
  if (v453)
    v457 = v453;
  else
    v457 = v177;
  *(_DWORD *)v457 += 2;
  v454[15] = v457;
  this[194] = (int32x2_t)v454;
  this[195].i32[0] = 0;
  this[195].i32[1] = *((_DWORD *)v457 + 1);
  this[196] = vmax_s32(0, 0);
  v458 = v485;
  v485 = 0;
  if (v458)
  {
    if (*(_DWORD *)v458 == 2)
      WTF::StringImpl::destroy(v458, v455);
    else
      *(_DWORD *)v458 -= 2;
  }
  v459 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v459)
  {
    if (v459[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v459 + 8))(v459);
    else
      --v459[2];
  }
  v460 = v481[0];
  v481[0] = 0;
  if (v460)
  {
    if (*(_DWORD *)v460 == 2)
      WTF::StringImpl::destroy(v460, v455);
    else
      *(_DWORD *)v460 -= 2;
  }
  if (v453)
  {
    if (*(_DWORD *)v453 == 2)
      WTF::StringImpl::destroy(v453, v455);
    else
      *(_DWORD *)v453 -= 2;
  }
  v461 = v484;
  v484 = 0;
  if (v461)
  {
    if (*(_DWORD *)v461 == 2)
      WTF::StringImpl::destroy(v461, v455);
    else
      *(_DWORD *)v461 -= 2;
  }
  this[197] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v462 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v463 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v465 = v486;
  v486 = 0;
  if (v465)
  {
    if (*(_DWORD *)v465 == 2)
      WTF::StringImpl::destroy(v465, v464);
    else
      *(_DWORD *)v465 -= 2;
  }
  *v463 = off_1E33948F0;
  if (v462)
    v466 = v462;
  else
    v466 = v177;
  *(_DWORD *)v466 += 2;
  v463[15] = v466;
  this[198] = (int32x2_t)v463;
  this[199].i32[0] = 0;
  this[199].i32[1] = *((_DWORD *)v466 + 1);
  this[200] = vmax_s32(0, 0);
  v467 = v485;
  v485 = 0;
  if (v467)
  {
    if (*(_DWORD *)v467 == 2)
      WTF::StringImpl::destroy(v467, v464);
    else
      *(_DWORD *)v467 -= 2;
  }
  v468 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v468)
  {
    if (v468[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v468 + 8))(v468);
    else
      --v468[2];
  }
  v469 = v481[0];
  v481[0] = 0;
  if (v469)
  {
    if (*(_DWORD *)v469 == 2)
      WTF::StringImpl::destroy(v469, v464);
    else
      *(_DWORD *)v469 -= 2;
  }
  if (v462)
  {
    if (*(_DWORD *)v462 == 2)
      WTF::StringImpl::destroy(v462, v464);
    else
      *(_DWORD *)v462 -= 2;
  }
  v470 = v484;
  v484 = 0;
  if (v470)
  {
    if (*(_DWORD *)v470 == 2)
      WTF::StringImpl::destroy(v470, v464);
    else
      *(_DWORD *)v470 -= 2;
  }
  this[201] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v471 = v484;
  v484 = 0;
  v482 = 0u;
  v483 = 0u;
  *(_OWORD *)v481 = 0u;
  WTF::URL::invalidate((WTF::URL *)v481);
  *((_QWORD *)&v483 + 1) = 0;
  v485 = 0;
  v472 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v486 = 0;
  JSC::SourceProvider::SourceProvider();
  v474 = v486;
  v486 = 0;
  if (v474)
  {
    if (*(_DWORD *)v474 == 2)
      WTF::StringImpl::destroy(v474, v473);
    else
      *(_DWORD *)v474 -= 2;
  }
  *v472 = off_1E33948F0;
  if (v471)
    v475 = v471;
  else
    v475 = v177;
  *(_DWORD *)v475 += 2;
  v472[15] = v475;
  this[202] = (int32x2_t)v472;
  this[203].i32[0] = 0;
  this[203].i32[1] = *((_DWORD *)v475 + 1);
  this[204] = vmax_s32(0, 0);
  v476 = v485;
  v485 = 0;
  if (v476)
  {
    if (*(_DWORD *)v476 == 2)
      WTF::StringImpl::destroy(v476, v473);
    else
      *(_DWORD *)v476 -= 2;
  }
  v477 = (_DWORD *)*((_QWORD *)&v483 + 1);
  *((_QWORD *)&v483 + 1) = 0;
  if (v477)
  {
    if (v477[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v477 + 8))(v477);
    else
      --v477[2];
  }
  v478 = v481[0];
  v481[0] = 0;
  if (v478)
  {
    if (*(_DWORD *)v478 == 2)
      WTF::StringImpl::destroy(v478, v473);
    else
      *(_DWORD *)v478 -= 2;
  }
  if (v471)
  {
    if (*(_DWORD *)v471 == 2)
      WTF::StringImpl::destroy(v471, v473);
    else
      *(_DWORD *)v471 -= 2;
  }
  v479 = v484;
  v484 = 0;
  if (v479)
  {
    if (*(_DWORD *)v479 == 2)
      WTF::StringImpl::destroy(v479, v473);
    else
      *(_DWORD *)v479 -= 2;
  }
  this[205] = 0;
  return this;
}

int32x2_t *WebCore::TransformStreamInternalsBuiltinsWrapper::TransformStreamInternalsBuiltinsWrapper(int32x2_t *this, JSC::VM *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  int v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  int v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  int v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  int v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  int v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  int v97;
  WTF::StringImpl *v98;
  _QWORD *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  _DWORD *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  _QWORD *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  _DWORD *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  _QWORD *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  _DWORD *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  _QWORD *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  _DWORD *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  _QWORD *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  _DWORD *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  _QWORD *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  _DWORD *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  _QWORD *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  _DWORD *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  _QWORD *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  _DWORD *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  _QWORD *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  _DWORD *v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  _QWORD *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  _DWORD *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  _QWORD *v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  _DWORD *v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  _QWORD *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  _DWORD *v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  WTF::StringImpl *v207;
  _QWORD *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  _DWORD *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  _QWORD *v217;
  WTF::StringImpl *v218;
  WTF::StringImpl *v219;
  WTF::StringImpl *v220;
  WTF::StringImpl *v221;
  _DWORD *v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  WTF::StringImpl *v225;
  _QWORD *v226;
  WTF::StringImpl *v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  WTF::StringImpl *v230;
  _DWORD *v231;
  WTF::StringImpl *v232;
  WTF::StringImpl *v233;
  WTF::StringImpl *v234;
  _QWORD *v235;
  WTF::StringImpl *v236;
  WTF::StringImpl *v237;
  WTF::StringImpl *v238;
  WTF::StringImpl *v239;
  _DWORD *v240;
  WTF::StringImpl *v241;
  WTF::StringImpl *v242;
  WTF::StringImpl *v243;
  _QWORD *v244;
  WTF::StringImpl *v245;
  WTF::StringImpl *v246;
  WTF::StringImpl *v247;
  WTF::StringImpl *v248;
  _DWORD *v249;
  WTF::StringImpl *v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  _QWORD *v253;
  WTF::StringImpl *v254;
  WTF::StringImpl *v255;
  WTF::StringImpl *v256;
  WTF::StringImpl *v257;
  _DWORD *v258;
  WTF::StringImpl *v259;
  WTF::StringImpl *v260;
  WTF::StringImpl *v261;
  _QWORD *v262;
  WTF::StringImpl *v263;
  WTF::StringImpl *v264;
  WTF::StringImpl *v265;
  WTF::StringImpl *v266;
  _DWORD *v267;
  WTF::StringImpl *v268;
  WTF::StringImpl *v269;
  WTF::StringImpl *v271[2];
  __int128 v272;
  __int128 v273;
  WTF::StringImpl *v274;
  WTF::StringImpl *v275;
  WTF::StringImpl *v276;

  *this = (int32x2_t)&off_1E3394118;
  this[1] = (int32x2_t)a2;
  WTF::AtomStringImpl::addLiteral();
  this[2] = (int32x2_t)v271[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = v271[0];
  WTF::PrivateSymbolImpl::create(v271[0], v4);
  v6 = v271[0];
  v7 = *(_DWORD *)v271[0];
  *(_DWORD *)v271[0] += 2;
  this[3] = (int32x2_t)v6;
  if (v7)
    *(_DWORD *)v6 = v7;
  else
    WTF::StringImpl::destroy(v6, v5);
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v5);
  else
    *(_DWORD *)v3 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[4] = (int32x2_t)v271[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = v271[0];
  WTF::PrivateSymbolImpl::create(v271[0], v9);
  v11 = v271[0];
  v12 = *(_DWORD *)v271[0];
  *(_DWORD *)v271[0] += 2;
  this[5] = (int32x2_t)v11;
  if (v12)
    *(_DWORD *)v11 = v12;
  else
    WTF::StringImpl::destroy(v11, v10);
  if (*(_DWORD *)v8 == 2)
    WTF::StringImpl::destroy(v8, v10);
  else
    *(_DWORD *)v8 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[6] = (int32x2_t)v271[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = v271[0];
  WTF::PrivateSymbolImpl::create(v271[0], v14);
  v16 = v271[0];
  v17 = *(_DWORD *)v271[0];
  *(_DWORD *)v271[0] += 2;
  this[7] = (int32x2_t)v16;
  if (v17)
    *(_DWORD *)v16 = v17;
  else
    WTF::StringImpl::destroy(v16, v15);
  if (*(_DWORD *)v13 == 2)
    WTF::StringImpl::destroy(v13, v15);
  else
    *(_DWORD *)v13 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[8] = (int32x2_t)v271[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v18 = v271[0];
  WTF::PrivateSymbolImpl::create(v271[0], v19);
  v21 = v271[0];
  v22 = *(_DWORD *)v271[0];
  *(_DWORD *)v271[0] += 2;
  this[9] = (int32x2_t)v21;
  if (v22)
    *(_DWORD *)v21 = v22;
  else
    WTF::StringImpl::destroy(v21, v20);
  if (*(_DWORD *)v18 == 2)
    WTF::StringImpl::destroy(v18, v20);
  else
    *(_DWORD *)v18 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[10] = (int32x2_t)v271[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v23 = v271[0];
  WTF::PrivateSymbolImpl::create(v271[0], v24);
  v26 = v271[0];
  v27 = *(_DWORD *)v271[0];
  *(_DWORD *)v271[0] += 2;
  this[11] = (int32x2_t)v26;
  if (v27)
    *(_DWORD *)v26 = v27;
  else
    WTF::StringImpl::destroy(v26, v25);
  if (*(_DWORD *)v23 == 2)
    WTF::StringImpl::destroy(v23, v25);
  else
    *(_DWORD *)v23 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[12] = (int32x2_t)v271[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v28 = v271[0];
  WTF::PrivateSymbolImpl::create(v271[0], v29);
  v31 = v271[0];
  v32 = *(_DWORD *)v271[0];
  *(_DWORD *)v271[0] += 2;
  this[13] = (int32x2_t)v31;
  if (v32)
    *(_DWORD *)v31 = v32;
  else
    WTF::StringImpl::destroy(v31, v30);
  if (*(_DWORD *)v28 == 2)
    WTF::StringImpl::destroy(v28, v30);
  else
    *(_DWORD *)v28 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[14] = (int32x2_t)v271[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v33 = v271[0];
  WTF::PrivateSymbolImpl::create(v271[0], v34);
  v36 = v271[0];
  v37 = *(_DWORD *)v271[0];
  *(_DWORD *)v271[0] += 2;
  this[15] = (int32x2_t)v36;
  if (v37)
    *(_DWORD *)v36 = v37;
  else
    WTF::StringImpl::destroy(v36, v35);
  if (*(_DWORD *)v33 == 2)
    WTF::StringImpl::destroy(v33, v35);
  else
    *(_DWORD *)v33 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[16] = (int32x2_t)v271[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v38 = v271[0];
  WTF::PrivateSymbolImpl::create(v271[0], v39);
  v41 = v271[0];
  v42 = *(_DWORD *)v271[0];
  *(_DWORD *)v271[0] += 2;
  this[17] = (int32x2_t)v41;
  if (v42)
    *(_DWORD *)v41 = v42;
  else
    WTF::StringImpl::destroy(v41, v40);
  if (*(_DWORD *)v38 == 2)
    WTF::StringImpl::destroy(v38, v40);
  else
    *(_DWORD *)v38 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[18] = (int32x2_t)v271[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v43 = v271[0];
  WTF::PrivateSymbolImpl::create(v271[0], v44);
  v46 = v271[0];
  v47 = *(_DWORD *)v271[0];
  *(_DWORD *)v271[0] += 2;
  this[19] = (int32x2_t)v46;
  if (v47)
    *(_DWORD *)v46 = v47;
  else
    WTF::StringImpl::destroy(v46, v45);
  if (*(_DWORD *)v43 == 2)
    WTF::StringImpl::destroy(v43, v45);
  else
    *(_DWORD *)v43 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[20] = (int32x2_t)v271[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v48 = v271[0];
  WTF::PrivateSymbolImpl::create(v271[0], v49);
  v51 = v271[0];
  v52 = *(_DWORD *)v271[0];
  *(_DWORD *)v271[0] += 2;
  this[21] = (int32x2_t)v51;
  if (v52)
    *(_DWORD *)v51 = v52;
  else
    WTF::StringImpl::destroy(v51, v50);
  if (*(_DWORD *)v48 == 2)
    WTF::StringImpl::destroy(v48, v50);
  else
    *(_DWORD *)v48 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[22] = (int32x2_t)v271[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v53 = v271[0];
  WTF::PrivateSymbolImpl::create(v271[0], v54);
  v56 = v271[0];
  v57 = *(_DWORD *)v271[0];
  *(_DWORD *)v271[0] += 2;
  this[23] = (int32x2_t)v56;
  if (v57)
    *(_DWORD *)v56 = v57;
  else
    WTF::StringImpl::destroy(v56, v55);
  if (*(_DWORD *)v53 == 2)
    WTF::StringImpl::destroy(v53, v55);
  else
    *(_DWORD *)v53 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[24] = (int32x2_t)v271[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v58 = v271[0];
  WTF::PrivateSymbolImpl::create(v271[0], v59);
  v61 = v271[0];
  v62 = *(_DWORD *)v271[0];
  *(_DWORD *)v271[0] += 2;
  this[25] = (int32x2_t)v61;
  if (v62)
    *(_DWORD *)v61 = v62;
  else
    WTF::StringImpl::destroy(v61, v60);
  if (*(_DWORD *)v58 == 2)
    WTF::StringImpl::destroy(v58, v60);
  else
    *(_DWORD *)v58 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[26] = (int32x2_t)v271[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v63 = v271[0];
  WTF::PrivateSymbolImpl::create(v271[0], v64);
  v66 = v271[0];
  v67 = *(_DWORD *)v271[0];
  *(_DWORD *)v271[0] += 2;
  this[27] = (int32x2_t)v66;
  if (v67)
    *(_DWORD *)v66 = v67;
  else
    WTF::StringImpl::destroy(v66, v65);
  if (*(_DWORD *)v63 == 2)
    WTF::StringImpl::destroy(v63, v65);
  else
    *(_DWORD *)v63 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[28] = (int32x2_t)v271[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v68 = v271[0];
  WTF::PrivateSymbolImpl::create(v271[0], v69);
  v71 = v271[0];
  v72 = *(_DWORD *)v271[0];
  *(_DWORD *)v271[0] += 2;
  this[29] = (int32x2_t)v71;
  if (v72)
    *(_DWORD *)v71 = v72;
  else
    WTF::StringImpl::destroy(v71, v70);
  if (*(_DWORD *)v68 == 2)
    WTF::StringImpl::destroy(v68, v70);
  else
    *(_DWORD *)v68 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[30] = (int32x2_t)v271[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v73 = v271[0];
  WTF::PrivateSymbolImpl::create(v271[0], v74);
  v76 = v271[0];
  v77 = *(_DWORD *)v271[0];
  *(_DWORD *)v271[0] += 2;
  this[31] = (int32x2_t)v76;
  if (v77)
    *(_DWORD *)v76 = v77;
  else
    WTF::StringImpl::destroy(v76, v75);
  if (*(_DWORD *)v73 == 2)
    WTF::StringImpl::destroy(v73, v75);
  else
    *(_DWORD *)v73 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[32] = (int32x2_t)v271[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v271[0];
  WTF::PrivateSymbolImpl::create(v271[0], v79);
  v81 = v271[0];
  v82 = *(_DWORD *)v271[0];
  *(_DWORD *)v271[0] += 2;
  this[33] = (int32x2_t)v81;
  if (v82)
    *(_DWORD *)v81 = v82;
  else
    WTF::StringImpl::destroy(v81, v80);
  if (*(_DWORD *)v78 == 2)
    WTF::StringImpl::destroy(v78, v80);
  else
    *(_DWORD *)v78 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[34] = (int32x2_t)v271[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v83 = v271[0];
  WTF::PrivateSymbolImpl::create(v271[0], v84);
  v86 = v271[0];
  v87 = *(_DWORD *)v271[0];
  *(_DWORD *)v271[0] += 2;
  this[35] = (int32x2_t)v86;
  if (v87)
    *(_DWORD *)v86 = v87;
  else
    WTF::StringImpl::destroy(v86, v85);
  if (*(_DWORD *)v83 == 2)
    WTF::StringImpl::destroy(v83, v85);
  else
    *(_DWORD *)v83 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[36] = (int32x2_t)v271[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v88 = v271[0];
  WTF::PrivateSymbolImpl::create(v271[0], v89);
  v91 = v271[0];
  v92 = *(_DWORD *)v271[0];
  *(_DWORD *)v271[0] += 2;
  this[37] = (int32x2_t)v91;
  if (v92)
    *(_DWORD *)v91 = v92;
  else
    WTF::StringImpl::destroy(v91, v90);
  if (*(_DWORD *)v88 == 2)
    WTF::StringImpl::destroy(v88, v90);
  else
    *(_DWORD *)v88 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[38] = (int32x2_t)v271[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = v271[0];
  WTF::PrivateSymbolImpl::create(v271[0], v94);
  v96 = v271[0];
  v97 = *(_DWORD *)v271[0];
  *(_DWORD *)v271[0] += 2;
  this[39] = (int32x2_t)v96;
  if (v97)
    *(_DWORD *)v96 = v97;
  else
    WTF::StringImpl::destroy(v96, v95);
  if (*(_DWORD *)v93 == 2)
    WTF::StringImpl::destroy(v93, v95);
  else
    *(_DWORD *)v93 -= 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v98 = v274;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  *(_OWORD *)v271 = 0u;
  WTF::URL::invalidate((WTF::URL *)v271);
  *((_QWORD *)&v273 + 1) = 0;
  v275 = 0;
  v99 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v276 = 0;
  JSC::SourceProvider::SourceProvider();
  v101 = v276;
  v276 = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
      WTF::StringImpl::destroy(v101, v100);
    else
      *(_DWORD *)v101 -= 2;
  }
  *v99 = off_1E33948F0;
  v102 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  if (v98)
    v103 = v98;
  else
    v103 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *(_DWORD *)v103 += 2;
  v99[15] = v103;
  this[40] = (int32x2_t)v99;
  this[41].i32[0] = 0;
  this[41].i32[1] = *((_DWORD *)v103 + 1);
  this[42] = vmax_s32(0, 0);
  v104 = v275;
  v275 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
      WTF::StringImpl::destroy(v104, v100);
    else
      *(_DWORD *)v104 -= 2;
  }
  v105 = (_DWORD *)*((_QWORD *)&v273 + 1);
  *((_QWORD *)&v273 + 1) = 0;
  if (v105)
  {
    if (v105[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v105 + 8))(v105);
    else
      --v105[2];
  }
  v106 = v271[0];
  v271[0] = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
      WTF::StringImpl::destroy(v106, v100);
    else
      *(_DWORD *)v106 -= 2;
  }
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
      WTF::StringImpl::destroy(v98, v100);
    else
      *(_DWORD *)v98 -= 2;
  }
  v107 = v274;
  v274 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
      WTF::StringImpl::destroy(v107, v100);
    else
      *(_DWORD *)v107 -= 2;
  }
  this[43] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v108 = v274;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  *(_OWORD *)v271 = 0u;
  WTF::URL::invalidate((WTF::URL *)v271);
  *((_QWORD *)&v273 + 1) = 0;
  v275 = 0;
  v109 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v276 = 0;
  JSC::SourceProvider::SourceProvider();
  v111 = v276;
  v276 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
      WTF::StringImpl::destroy(v111, v110);
    else
      *(_DWORD *)v111 -= 2;
  }
  *v109 = off_1E33948F0;
  if (v108)
    v112 = v108;
  else
    v112 = v102;
  *(_DWORD *)v112 += 2;
  v109[15] = v112;
  this[44] = (int32x2_t)v109;
  this[45].i32[0] = 0;
  this[45].i32[1] = *((_DWORD *)v112 + 1);
  this[46] = vmax_s32(0, 0);
  v113 = v275;
  v275 = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
      WTF::StringImpl::destroy(v113, v110);
    else
      *(_DWORD *)v113 -= 2;
  }
  v114 = (_DWORD *)*((_QWORD *)&v273 + 1);
  *((_QWORD *)&v273 + 1) = 0;
  if (v114)
  {
    if (v114[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v114 + 8))(v114);
    else
      --v114[2];
  }
  v115 = v271[0];
  v271[0] = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
      WTF::StringImpl::destroy(v115, v110);
    else
      *(_DWORD *)v115 -= 2;
  }
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
      WTF::StringImpl::destroy(v108, v110);
    else
      *(_DWORD *)v108 -= 2;
  }
  v116 = v274;
  v274 = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
      WTF::StringImpl::destroy(v116, v110);
    else
      *(_DWORD *)v116 -= 2;
  }
  this[47] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v117 = v274;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  *(_OWORD *)v271 = 0u;
  WTF::URL::invalidate((WTF::URL *)v271);
  *((_QWORD *)&v273 + 1) = 0;
  v275 = 0;
  v118 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v276 = 0;
  JSC::SourceProvider::SourceProvider();
  v120 = v276;
  v276 = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
      WTF::StringImpl::destroy(v120, v119);
    else
      *(_DWORD *)v120 -= 2;
  }
  *v118 = off_1E33948F0;
  if (v117)
    v121 = v117;
  else
    v121 = v102;
  *(_DWORD *)v121 += 2;
  v118[15] = v121;
  this[48] = (int32x2_t)v118;
  this[49].i32[0] = 0;
  this[49].i32[1] = *((_DWORD *)v121 + 1);
  this[50] = vmax_s32(0, 0);
  v122 = v275;
  v275 = 0;
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
      WTF::StringImpl::destroy(v122, v119);
    else
      *(_DWORD *)v122 -= 2;
  }
  v123 = (_DWORD *)*((_QWORD *)&v273 + 1);
  *((_QWORD *)&v273 + 1) = 0;
  if (v123)
  {
    if (v123[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v123 + 8))(v123);
    else
      --v123[2];
  }
  v124 = v271[0];
  v271[0] = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
      WTF::StringImpl::destroy(v124, v119);
    else
      *(_DWORD *)v124 -= 2;
  }
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
      WTF::StringImpl::destroy(v117, v119);
    else
      *(_DWORD *)v117 -= 2;
  }
  v125 = v274;
  v274 = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
      WTF::StringImpl::destroy(v125, v119);
    else
      *(_DWORD *)v125 -= 2;
  }
  this[51] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v126 = v274;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  *(_OWORD *)v271 = 0u;
  WTF::URL::invalidate((WTF::URL *)v271);
  *((_QWORD *)&v273 + 1) = 0;
  v275 = 0;
  v127 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v276 = 0;
  JSC::SourceProvider::SourceProvider();
  v129 = v276;
  v276 = 0;
  if (v129)
  {
    if (*(_DWORD *)v129 == 2)
      WTF::StringImpl::destroy(v129, v128);
    else
      *(_DWORD *)v129 -= 2;
  }
  *v127 = off_1E33948F0;
  if (v126)
    v130 = v126;
  else
    v130 = v102;
  *(_DWORD *)v130 += 2;
  v127[15] = v130;
  this[52] = (int32x2_t)v127;
  this[53].i32[0] = 0;
  this[53].i32[1] = *((_DWORD *)v130 + 1);
  this[54] = vmax_s32(0, 0);
  v131 = v275;
  v275 = 0;
  if (v131)
  {
    if (*(_DWORD *)v131 == 2)
      WTF::StringImpl::destroy(v131, v128);
    else
      *(_DWORD *)v131 -= 2;
  }
  v132 = (_DWORD *)*((_QWORD *)&v273 + 1);
  *((_QWORD *)&v273 + 1) = 0;
  if (v132)
  {
    if (v132[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v132 + 8))(v132);
    else
      --v132[2];
  }
  v133 = v271[0];
  v271[0] = 0;
  if (v133)
  {
    if (*(_DWORD *)v133 == 2)
      WTF::StringImpl::destroy(v133, v128);
    else
      *(_DWORD *)v133 -= 2;
  }
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
      WTF::StringImpl::destroy(v126, v128);
    else
      *(_DWORD *)v126 -= 2;
  }
  v134 = v274;
  v274 = 0;
  if (v134)
  {
    if (*(_DWORD *)v134 == 2)
      WTF::StringImpl::destroy(v134, v128);
    else
      *(_DWORD *)v134 -= 2;
  }
  this[55] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v135 = v274;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  *(_OWORD *)v271 = 0u;
  WTF::URL::invalidate((WTF::URL *)v271);
  *((_QWORD *)&v273 + 1) = 0;
  v275 = 0;
  v136 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v276 = 0;
  JSC::SourceProvider::SourceProvider();
  v138 = v276;
  v276 = 0;
  if (v138)
  {
    if (*(_DWORD *)v138 == 2)
      WTF::StringImpl::destroy(v138, v137);
    else
      *(_DWORD *)v138 -= 2;
  }
  *v136 = off_1E33948F0;
  if (v135)
    v139 = v135;
  else
    v139 = v102;
  *(_DWORD *)v139 += 2;
  v136[15] = v139;
  this[56] = (int32x2_t)v136;
  this[57].i32[0] = 0;
  this[57].i32[1] = *((_DWORD *)v139 + 1);
  this[58] = vmax_s32(0, 0);
  v140 = v275;
  v275 = 0;
  if (v140)
  {
    if (*(_DWORD *)v140 == 2)
      WTF::StringImpl::destroy(v140, v137);
    else
      *(_DWORD *)v140 -= 2;
  }
  v141 = (_DWORD *)*((_QWORD *)&v273 + 1);
  *((_QWORD *)&v273 + 1) = 0;
  if (v141)
  {
    if (v141[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v141 + 8))(v141);
    else
      --v141[2];
  }
  v142 = v271[0];
  v271[0] = 0;
  if (v142)
  {
    if (*(_DWORD *)v142 == 2)
      WTF::StringImpl::destroy(v142, v137);
    else
      *(_DWORD *)v142 -= 2;
  }
  if (v135)
  {
    if (*(_DWORD *)v135 == 2)
      WTF::StringImpl::destroy(v135, v137);
    else
      *(_DWORD *)v135 -= 2;
  }
  v143 = v274;
  v274 = 0;
  if (v143)
  {
    if (*(_DWORD *)v143 == 2)
      WTF::StringImpl::destroy(v143, v137);
    else
      *(_DWORD *)v143 -= 2;
  }
  this[59] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v144 = v274;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  *(_OWORD *)v271 = 0u;
  WTF::URL::invalidate((WTF::URL *)v271);
  *((_QWORD *)&v273 + 1) = 0;
  v275 = 0;
  v145 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v276 = 0;
  JSC::SourceProvider::SourceProvider();
  v147 = v276;
  v276 = 0;
  if (v147)
  {
    if (*(_DWORD *)v147 == 2)
      WTF::StringImpl::destroy(v147, v146);
    else
      *(_DWORD *)v147 -= 2;
  }
  *v145 = off_1E33948F0;
  if (v144)
    v148 = v144;
  else
    v148 = v102;
  *(_DWORD *)v148 += 2;
  v145[15] = v148;
  this[60] = (int32x2_t)v145;
  this[61].i32[0] = 0;
  this[61].i32[1] = *((_DWORD *)v148 + 1);
  this[62] = vmax_s32(0, 0);
  v149 = v275;
  v275 = 0;
  if (v149)
  {
    if (*(_DWORD *)v149 == 2)
      WTF::StringImpl::destroy(v149, v146);
    else
      *(_DWORD *)v149 -= 2;
  }
  v150 = (_DWORD *)*((_QWORD *)&v273 + 1);
  *((_QWORD *)&v273 + 1) = 0;
  if (v150)
  {
    if (v150[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v150 + 8))(v150);
    else
      --v150[2];
  }
  v151 = v271[0];
  v271[0] = 0;
  if (v151)
  {
    if (*(_DWORD *)v151 == 2)
      WTF::StringImpl::destroy(v151, v146);
    else
      *(_DWORD *)v151 -= 2;
  }
  if (v144)
  {
    if (*(_DWORD *)v144 == 2)
      WTF::StringImpl::destroy(v144, v146);
    else
      *(_DWORD *)v144 -= 2;
  }
  v152 = v274;
  v274 = 0;
  if (v152)
  {
    if (*(_DWORD *)v152 == 2)
      WTF::StringImpl::destroy(v152, v146);
    else
      *(_DWORD *)v152 -= 2;
  }
  this[63] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v153 = v274;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  *(_OWORD *)v271 = 0u;
  WTF::URL::invalidate((WTF::URL *)v271);
  *((_QWORD *)&v273 + 1) = 0;
  v275 = 0;
  v154 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v276 = 0;
  JSC::SourceProvider::SourceProvider();
  v156 = v276;
  v276 = 0;
  if (v156)
  {
    if (*(_DWORD *)v156 == 2)
      WTF::StringImpl::destroy(v156, v155);
    else
      *(_DWORD *)v156 -= 2;
  }
  *v154 = off_1E33948F0;
  if (v153)
    v157 = v153;
  else
    v157 = v102;
  *(_DWORD *)v157 += 2;
  v154[15] = v157;
  this[64] = (int32x2_t)v154;
  this[65].i32[0] = 0;
  this[65].i32[1] = *((_DWORD *)v157 + 1);
  this[66] = vmax_s32(0, 0);
  v158 = v275;
  v275 = 0;
  if (v158)
  {
    if (*(_DWORD *)v158 == 2)
      WTF::StringImpl::destroy(v158, v155);
    else
      *(_DWORD *)v158 -= 2;
  }
  v159 = (_DWORD *)*((_QWORD *)&v273 + 1);
  *((_QWORD *)&v273 + 1) = 0;
  if (v159)
  {
    if (v159[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v159 + 8))(v159);
    else
      --v159[2];
  }
  v160 = v271[0];
  v271[0] = 0;
  if (v160)
  {
    if (*(_DWORD *)v160 == 2)
      WTF::StringImpl::destroy(v160, v155);
    else
      *(_DWORD *)v160 -= 2;
  }
  if (v153)
  {
    if (*(_DWORD *)v153 == 2)
      WTF::StringImpl::destroy(v153, v155);
    else
      *(_DWORD *)v153 -= 2;
  }
  v161 = v274;
  v274 = 0;
  if (v161)
  {
    if (*(_DWORD *)v161 == 2)
      WTF::StringImpl::destroy(v161, v155);
    else
      *(_DWORD *)v161 -= 2;
  }
  this[67] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v162 = v274;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  *(_OWORD *)v271 = 0u;
  WTF::URL::invalidate((WTF::URL *)v271);
  *((_QWORD *)&v273 + 1) = 0;
  v275 = 0;
  v163 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v276 = 0;
  JSC::SourceProvider::SourceProvider();
  v165 = v276;
  v276 = 0;
  if (v165)
  {
    if (*(_DWORD *)v165 == 2)
      WTF::StringImpl::destroy(v165, v164);
    else
      *(_DWORD *)v165 -= 2;
  }
  *v163 = off_1E33948F0;
  if (v162)
    v166 = v162;
  else
    v166 = v102;
  *(_DWORD *)v166 += 2;
  v163[15] = v166;
  this[68] = (int32x2_t)v163;
  this[69].i32[0] = 0;
  this[69].i32[1] = *((_DWORD *)v166 + 1);
  this[70] = vmax_s32(0, 0);
  v167 = v275;
  v275 = 0;
  if (v167)
  {
    if (*(_DWORD *)v167 == 2)
      WTF::StringImpl::destroy(v167, v164);
    else
      *(_DWORD *)v167 -= 2;
  }
  v168 = (_DWORD *)*((_QWORD *)&v273 + 1);
  *((_QWORD *)&v273 + 1) = 0;
  if (v168)
  {
    if (v168[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v168 + 8))(v168);
    else
      --v168[2];
  }
  v169 = v271[0];
  v271[0] = 0;
  if (v169)
  {
    if (*(_DWORD *)v169 == 2)
      WTF::StringImpl::destroy(v169, v164);
    else
      *(_DWORD *)v169 -= 2;
  }
  if (v162)
  {
    if (*(_DWORD *)v162 == 2)
      WTF::StringImpl::destroy(v162, v164);
    else
      *(_DWORD *)v162 -= 2;
  }
  v170 = v274;
  v274 = 0;
  if (v170)
  {
    if (*(_DWORD *)v170 == 2)
      WTF::StringImpl::destroy(v170, v164);
    else
      *(_DWORD *)v170 -= 2;
  }
  this[71] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v171 = v274;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  *(_OWORD *)v271 = 0u;
  WTF::URL::invalidate((WTF::URL *)v271);
  *((_QWORD *)&v273 + 1) = 0;
  v275 = 0;
  v172 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v276 = 0;
  JSC::SourceProvider::SourceProvider();
  v174 = v276;
  v276 = 0;
  if (v174)
  {
    if (*(_DWORD *)v174 == 2)
      WTF::StringImpl::destroy(v174, v173);
    else
      *(_DWORD *)v174 -= 2;
  }
  *v172 = off_1E33948F0;
  if (v171)
    v175 = v171;
  else
    v175 = v102;
  *(_DWORD *)v175 += 2;
  v172[15] = v175;
  this[72] = (int32x2_t)v172;
  this[73].i32[0] = 0;
  this[73].i32[1] = *((_DWORD *)v175 + 1);
  this[74] = vmax_s32(0, 0);
  v176 = v275;
  v275 = 0;
  if (v176)
  {
    if (*(_DWORD *)v176 == 2)
      WTF::StringImpl::destroy(v176, v173);
    else
      *(_DWORD *)v176 -= 2;
  }
  v177 = (_DWORD *)*((_QWORD *)&v273 + 1);
  *((_QWORD *)&v273 + 1) = 0;
  if (v177)
  {
    if (v177[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v177 + 8))(v177);
    else
      --v177[2];
  }
  v178 = v271[0];
  v271[0] = 0;
  if (v178)
  {
    if (*(_DWORD *)v178 == 2)
      WTF::StringImpl::destroy(v178, v173);
    else
      *(_DWORD *)v178 -= 2;
  }
  if (v171)
  {
    if (*(_DWORD *)v171 == 2)
      WTF::StringImpl::destroy(v171, v173);
    else
      *(_DWORD *)v171 -= 2;
  }
  v179 = v274;
  v274 = 0;
  if (v179)
  {
    if (*(_DWORD *)v179 == 2)
      WTF::StringImpl::destroy(v179, v173);
    else
      *(_DWORD *)v179 -= 2;
  }
  this[75] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v180 = v274;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  *(_OWORD *)v271 = 0u;
  WTF::URL::invalidate((WTF::URL *)v271);
  *((_QWORD *)&v273 + 1) = 0;
  v275 = 0;
  v181 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v276 = 0;
  JSC::SourceProvider::SourceProvider();
  v183 = v276;
  v276 = 0;
  if (v183)
  {
    if (*(_DWORD *)v183 == 2)
      WTF::StringImpl::destroy(v183, v182);
    else
      *(_DWORD *)v183 -= 2;
  }
  *v181 = off_1E33948F0;
  if (v180)
    v184 = v180;
  else
    v184 = v102;
  *(_DWORD *)v184 += 2;
  v181[15] = v184;
  this[76] = (int32x2_t)v181;
  this[77].i32[0] = 0;
  this[77].i32[1] = *((_DWORD *)v184 + 1);
  this[78] = vmax_s32(0, 0);
  v185 = v275;
  v275 = 0;
  if (v185)
  {
    if (*(_DWORD *)v185 == 2)
      WTF::StringImpl::destroy(v185, v182);
    else
      *(_DWORD *)v185 -= 2;
  }
  v186 = (_DWORD *)*((_QWORD *)&v273 + 1);
  *((_QWORD *)&v273 + 1) = 0;
  if (v186)
  {
    if (v186[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v186 + 8))(v186);
    else
      --v186[2];
  }
  v187 = v271[0];
  v271[0] = 0;
  if (v187)
  {
    if (*(_DWORD *)v187 == 2)
      WTF::StringImpl::destroy(v187, v182);
    else
      *(_DWORD *)v187 -= 2;
  }
  if (v180)
  {
    if (*(_DWORD *)v180 == 2)
      WTF::StringImpl::destroy(v180, v182);
    else
      *(_DWORD *)v180 -= 2;
  }
  v188 = v274;
  v274 = 0;
  if (v188)
  {
    if (*(_DWORD *)v188 == 2)
      WTF::StringImpl::destroy(v188, v182);
    else
      *(_DWORD *)v188 -= 2;
  }
  this[79] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v189 = v274;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  *(_OWORD *)v271 = 0u;
  WTF::URL::invalidate((WTF::URL *)v271);
  *((_QWORD *)&v273 + 1) = 0;
  v275 = 0;
  v190 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v276 = 0;
  JSC::SourceProvider::SourceProvider();
  v192 = v276;
  v276 = 0;
  if (v192)
  {
    if (*(_DWORD *)v192 == 2)
      WTF::StringImpl::destroy(v192, v191);
    else
      *(_DWORD *)v192 -= 2;
  }
  *v190 = off_1E33948F0;
  if (v189)
    v193 = v189;
  else
    v193 = v102;
  *(_DWORD *)v193 += 2;
  v190[15] = v193;
  this[80] = (int32x2_t)v190;
  this[81].i32[0] = 0;
  this[81].i32[1] = *((_DWORD *)v193 + 1);
  this[82] = vmax_s32(0, 0);
  v194 = v275;
  v275 = 0;
  if (v194)
  {
    if (*(_DWORD *)v194 == 2)
      WTF::StringImpl::destroy(v194, v191);
    else
      *(_DWORD *)v194 -= 2;
  }
  v195 = (_DWORD *)*((_QWORD *)&v273 + 1);
  *((_QWORD *)&v273 + 1) = 0;
  if (v195)
  {
    if (v195[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v195 + 8))(v195);
    else
      --v195[2];
  }
  v196 = v271[0];
  v271[0] = 0;
  if (v196)
  {
    if (*(_DWORD *)v196 == 2)
      WTF::StringImpl::destroy(v196, v191);
    else
      *(_DWORD *)v196 -= 2;
  }
  if (v189)
  {
    if (*(_DWORD *)v189 == 2)
      WTF::StringImpl::destroy(v189, v191);
    else
      *(_DWORD *)v189 -= 2;
  }
  v197 = v274;
  v274 = 0;
  if (v197)
  {
    if (*(_DWORD *)v197 == 2)
      WTF::StringImpl::destroy(v197, v191);
    else
      *(_DWORD *)v197 -= 2;
  }
  this[83] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v198 = v274;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  *(_OWORD *)v271 = 0u;
  WTF::URL::invalidate((WTF::URL *)v271);
  *((_QWORD *)&v273 + 1) = 0;
  v275 = 0;
  v199 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v276 = 0;
  JSC::SourceProvider::SourceProvider();
  v201 = v276;
  v276 = 0;
  if (v201)
  {
    if (*(_DWORD *)v201 == 2)
      WTF::StringImpl::destroy(v201, v200);
    else
      *(_DWORD *)v201 -= 2;
  }
  *v199 = off_1E33948F0;
  if (v198)
    v202 = v198;
  else
    v202 = v102;
  *(_DWORD *)v202 += 2;
  v199[15] = v202;
  this[84] = (int32x2_t)v199;
  this[85].i32[0] = 0;
  this[85].i32[1] = *((_DWORD *)v202 + 1);
  this[86] = vmax_s32(0, 0);
  v203 = v275;
  v275 = 0;
  if (v203)
  {
    if (*(_DWORD *)v203 == 2)
      WTF::StringImpl::destroy(v203, v200);
    else
      *(_DWORD *)v203 -= 2;
  }
  v204 = (_DWORD *)*((_QWORD *)&v273 + 1);
  *((_QWORD *)&v273 + 1) = 0;
  if (v204)
  {
    if (v204[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v204 + 8))(v204);
    else
      --v204[2];
  }
  v205 = v271[0];
  v271[0] = 0;
  if (v205)
  {
    if (*(_DWORD *)v205 == 2)
      WTF::StringImpl::destroy(v205, v200);
    else
      *(_DWORD *)v205 -= 2;
  }
  if (v198)
  {
    if (*(_DWORD *)v198 == 2)
      WTF::StringImpl::destroy(v198, v200);
    else
      *(_DWORD *)v198 -= 2;
  }
  v206 = v274;
  v274 = 0;
  if (v206)
  {
    if (*(_DWORD *)v206 == 2)
      WTF::StringImpl::destroy(v206, v200);
    else
      *(_DWORD *)v206 -= 2;
  }
  this[87] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v207 = v274;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  *(_OWORD *)v271 = 0u;
  WTF::URL::invalidate((WTF::URL *)v271);
  *((_QWORD *)&v273 + 1) = 0;
  v275 = 0;
  v208 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v276 = 0;
  JSC::SourceProvider::SourceProvider();
  v210 = v276;
  v276 = 0;
  if (v210)
  {
    if (*(_DWORD *)v210 == 2)
      WTF::StringImpl::destroy(v210, v209);
    else
      *(_DWORD *)v210 -= 2;
  }
  *v208 = off_1E33948F0;
  if (v207)
    v211 = v207;
  else
    v211 = v102;
  *(_DWORD *)v211 += 2;
  v208[15] = v211;
  this[88] = (int32x2_t)v208;
  this[89].i32[0] = 0;
  this[89].i32[1] = *((_DWORD *)v211 + 1);
  this[90] = vmax_s32(0, 0);
  v212 = v275;
  v275 = 0;
  if (v212)
  {
    if (*(_DWORD *)v212 == 2)
      WTF::StringImpl::destroy(v212, v209);
    else
      *(_DWORD *)v212 -= 2;
  }
  v213 = (_DWORD *)*((_QWORD *)&v273 + 1);
  *((_QWORD *)&v273 + 1) = 0;
  if (v213)
  {
    if (v213[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v213 + 8))(v213);
    else
      --v213[2];
  }
  v214 = v271[0];
  v271[0] = 0;
  if (v214)
  {
    if (*(_DWORD *)v214 == 2)
      WTF::StringImpl::destroy(v214, v209);
    else
      *(_DWORD *)v214 -= 2;
  }
  if (v207)
  {
    if (*(_DWORD *)v207 == 2)
      WTF::StringImpl::destroy(v207, v209);
    else
      *(_DWORD *)v207 -= 2;
  }
  v215 = v274;
  v274 = 0;
  if (v215)
  {
    if (*(_DWORD *)v215 == 2)
      WTF::StringImpl::destroy(v215, v209);
    else
      *(_DWORD *)v215 -= 2;
  }
  this[91] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v216 = v274;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  *(_OWORD *)v271 = 0u;
  WTF::URL::invalidate((WTF::URL *)v271);
  *((_QWORD *)&v273 + 1) = 0;
  v275 = 0;
  v217 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v276 = 0;
  JSC::SourceProvider::SourceProvider();
  v219 = v276;
  v276 = 0;
  if (v219)
  {
    if (*(_DWORD *)v219 == 2)
      WTF::StringImpl::destroy(v219, v218);
    else
      *(_DWORD *)v219 -= 2;
  }
  *v217 = off_1E33948F0;
  if (v216)
    v220 = v216;
  else
    v220 = v102;
  *(_DWORD *)v220 += 2;
  v217[15] = v220;
  this[92] = (int32x2_t)v217;
  this[93].i32[0] = 0;
  this[93].i32[1] = *((_DWORD *)v220 + 1);
  this[94] = vmax_s32(0, 0);
  v221 = v275;
  v275 = 0;
  if (v221)
  {
    if (*(_DWORD *)v221 == 2)
      WTF::StringImpl::destroy(v221, v218);
    else
      *(_DWORD *)v221 -= 2;
  }
  v222 = (_DWORD *)*((_QWORD *)&v273 + 1);
  *((_QWORD *)&v273 + 1) = 0;
  if (v222)
  {
    if (v222[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v222 + 8))(v222);
    else
      --v222[2];
  }
  v223 = v271[0];
  v271[0] = 0;
  if (v223)
  {
    if (*(_DWORD *)v223 == 2)
      WTF::StringImpl::destroy(v223, v218);
    else
      *(_DWORD *)v223 -= 2;
  }
  if (v216)
  {
    if (*(_DWORD *)v216 == 2)
      WTF::StringImpl::destroy(v216, v218);
    else
      *(_DWORD *)v216 -= 2;
  }
  v224 = v274;
  v274 = 0;
  if (v224)
  {
    if (*(_DWORD *)v224 == 2)
      WTF::StringImpl::destroy(v224, v218);
    else
      *(_DWORD *)v224 -= 2;
  }
  this[95] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v225 = v274;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  *(_OWORD *)v271 = 0u;
  WTF::URL::invalidate((WTF::URL *)v271);
  *((_QWORD *)&v273 + 1) = 0;
  v275 = 0;
  v226 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v276 = 0;
  JSC::SourceProvider::SourceProvider();
  v228 = v276;
  v276 = 0;
  if (v228)
  {
    if (*(_DWORD *)v228 == 2)
      WTF::StringImpl::destroy(v228, v227);
    else
      *(_DWORD *)v228 -= 2;
  }
  *v226 = off_1E33948F0;
  if (v225)
    v229 = v225;
  else
    v229 = v102;
  *(_DWORD *)v229 += 2;
  v226[15] = v229;
  this[96] = (int32x2_t)v226;
  this[97].i32[0] = 0;
  this[97].i32[1] = *((_DWORD *)v229 + 1);
  this[98] = vmax_s32(0, 0);
  v230 = v275;
  v275 = 0;
  if (v230)
  {
    if (*(_DWORD *)v230 == 2)
      WTF::StringImpl::destroy(v230, v227);
    else
      *(_DWORD *)v230 -= 2;
  }
  v231 = (_DWORD *)*((_QWORD *)&v273 + 1);
  *((_QWORD *)&v273 + 1) = 0;
  if (v231)
  {
    if (v231[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v231 + 8))(v231);
    else
      --v231[2];
  }
  v232 = v271[0];
  v271[0] = 0;
  if (v232)
  {
    if (*(_DWORD *)v232 == 2)
      WTF::StringImpl::destroy(v232, v227);
    else
      *(_DWORD *)v232 -= 2;
  }
  if (v225)
  {
    if (*(_DWORD *)v225 == 2)
      WTF::StringImpl::destroy(v225, v227);
    else
      *(_DWORD *)v225 -= 2;
  }
  v233 = v274;
  v274 = 0;
  if (v233)
  {
    if (*(_DWORD *)v233 == 2)
      WTF::StringImpl::destroy(v233, v227);
    else
      *(_DWORD *)v233 -= 2;
  }
  this[99] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v234 = v274;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  *(_OWORD *)v271 = 0u;
  WTF::URL::invalidate((WTF::URL *)v271);
  *((_QWORD *)&v273 + 1) = 0;
  v275 = 0;
  v235 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v276 = 0;
  JSC::SourceProvider::SourceProvider();
  v237 = v276;
  v276 = 0;
  if (v237)
  {
    if (*(_DWORD *)v237 == 2)
      WTF::StringImpl::destroy(v237, v236);
    else
      *(_DWORD *)v237 -= 2;
  }
  *v235 = off_1E33948F0;
  if (v234)
    v238 = v234;
  else
    v238 = v102;
  *(_DWORD *)v238 += 2;
  v235[15] = v238;
  this[100] = (int32x2_t)v235;
  this[101].i32[0] = 0;
  this[101].i32[1] = *((_DWORD *)v238 + 1);
  this[102] = vmax_s32(0, 0);
  v239 = v275;
  v275 = 0;
  if (v239)
  {
    if (*(_DWORD *)v239 == 2)
      WTF::StringImpl::destroy(v239, v236);
    else
      *(_DWORD *)v239 -= 2;
  }
  v240 = (_DWORD *)*((_QWORD *)&v273 + 1);
  *((_QWORD *)&v273 + 1) = 0;
  if (v240)
  {
    if (v240[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v240 + 8))(v240);
    else
      --v240[2];
  }
  v241 = v271[0];
  v271[0] = 0;
  if (v241)
  {
    if (*(_DWORD *)v241 == 2)
      WTF::StringImpl::destroy(v241, v236);
    else
      *(_DWORD *)v241 -= 2;
  }
  if (v234)
  {
    if (*(_DWORD *)v234 == 2)
      WTF::StringImpl::destroy(v234, v236);
    else
      *(_DWORD *)v234 -= 2;
  }
  v242 = v274;
  v274 = 0;
  if (v242)
  {
    if (*(_DWORD *)v242 == 2)
      WTF::StringImpl::destroy(v242, v236);
    else
      *(_DWORD *)v242 -= 2;
  }
  this[103] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v243 = v274;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  *(_OWORD *)v271 = 0u;
  WTF::URL::invalidate((WTF::URL *)v271);
  *((_QWORD *)&v273 + 1) = 0;
  v275 = 0;
  v244 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v276 = 0;
  JSC::SourceProvider::SourceProvider();
  v246 = v276;
  v276 = 0;
  if (v246)
  {
    if (*(_DWORD *)v246 == 2)
      WTF::StringImpl::destroy(v246, v245);
    else
      *(_DWORD *)v246 -= 2;
  }
  *v244 = off_1E33948F0;
  if (v243)
    v247 = v243;
  else
    v247 = v102;
  *(_DWORD *)v247 += 2;
  v244[15] = v247;
  this[104] = (int32x2_t)v244;
  this[105].i32[0] = 0;
  this[105].i32[1] = *((_DWORD *)v247 + 1);
  this[106] = vmax_s32(0, 0);
  v248 = v275;
  v275 = 0;
  if (v248)
  {
    if (*(_DWORD *)v248 == 2)
      WTF::StringImpl::destroy(v248, v245);
    else
      *(_DWORD *)v248 -= 2;
  }
  v249 = (_DWORD *)*((_QWORD *)&v273 + 1);
  *((_QWORD *)&v273 + 1) = 0;
  if (v249)
  {
    if (v249[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v249 + 8))(v249);
    else
      --v249[2];
  }
  v250 = v271[0];
  v271[0] = 0;
  if (v250)
  {
    if (*(_DWORD *)v250 == 2)
      WTF::StringImpl::destroy(v250, v245);
    else
      *(_DWORD *)v250 -= 2;
  }
  if (v243)
  {
    if (*(_DWORD *)v243 == 2)
      WTF::StringImpl::destroy(v243, v245);
    else
      *(_DWORD *)v243 -= 2;
  }
  v251 = v274;
  v274 = 0;
  if (v251)
  {
    if (*(_DWORD *)v251 == 2)
      WTF::StringImpl::destroy(v251, v245);
    else
      *(_DWORD *)v251 -= 2;
  }
  this[107] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v252 = v274;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  *(_OWORD *)v271 = 0u;
  WTF::URL::invalidate((WTF::URL *)v271);
  *((_QWORD *)&v273 + 1) = 0;
  v275 = 0;
  v253 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v276 = 0;
  JSC::SourceProvider::SourceProvider();
  v255 = v276;
  v276 = 0;
  if (v255)
  {
    if (*(_DWORD *)v255 == 2)
      WTF::StringImpl::destroy(v255, v254);
    else
      *(_DWORD *)v255 -= 2;
  }
  *v253 = off_1E33948F0;
  if (v252)
    v256 = v252;
  else
    v256 = v102;
  *(_DWORD *)v256 += 2;
  v253[15] = v256;
  this[108] = (int32x2_t)v253;
  this[109].i32[0] = 0;
  this[109].i32[1] = *((_DWORD *)v256 + 1);
  this[110] = vmax_s32(0, 0);
  v257 = v275;
  v275 = 0;
  if (v257)
  {
    if (*(_DWORD *)v257 == 2)
      WTF::StringImpl::destroy(v257, v254);
    else
      *(_DWORD *)v257 -= 2;
  }
  v258 = (_DWORD *)*((_QWORD *)&v273 + 1);
  *((_QWORD *)&v273 + 1) = 0;
  if (v258)
  {
    if (v258[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v258 + 8))(v258);
    else
      --v258[2];
  }
  v259 = v271[0];
  v271[0] = 0;
  if (v259)
  {
    if (*(_DWORD *)v259 == 2)
      WTF::StringImpl::destroy(v259, v254);
    else
      *(_DWORD *)v259 -= 2;
  }
  if (v252)
  {
    if (*(_DWORD *)v252 == 2)
      WTF::StringImpl::destroy(v252, v254);
    else
      *(_DWORD *)v252 -= 2;
  }
  v260 = v274;
  v274 = 0;
  if (v260)
  {
    if (*(_DWORD *)v260 == 2)
      WTF::StringImpl::destroy(v260, v254);
    else
      *(_DWORD *)v260 -= 2;
  }
  this[111] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v261 = v274;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  *(_OWORD *)v271 = 0u;
  WTF::URL::invalidate((WTF::URL *)v271);
  *((_QWORD *)&v273 + 1) = 0;
  v275 = 0;
  v262 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v276 = 0;
  JSC::SourceProvider::SourceProvider();
  v264 = v276;
  v276 = 0;
  if (v264)
  {
    if (*(_DWORD *)v264 == 2)
      WTF::StringImpl::destroy(v264, v263);
    else
      *(_DWORD *)v264 -= 2;
  }
  *v262 = off_1E33948F0;
  if (v261)
    v265 = v261;
  else
    v265 = v102;
  *(_DWORD *)v265 += 2;
  v262[15] = v265;
  this[112] = (int32x2_t)v262;
  this[113].i32[0] = 0;
  this[113].i32[1] = *((_DWORD *)v265 + 1);
  this[114] = vmax_s32(0, 0);
  v266 = v275;
  v275 = 0;
  if (v266)
  {
    if (*(_DWORD *)v266 == 2)
      WTF::StringImpl::destroy(v266, v263);
    else
      *(_DWORD *)v266 -= 2;
  }
  v267 = (_DWORD *)*((_QWORD *)&v273 + 1);
  *((_QWORD *)&v273 + 1) = 0;
  if (v267)
  {
    if (v267[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v267 + 8))(v267);
    else
      --v267[2];
  }
  v268 = v271[0];
  v271[0] = 0;
  if (v268)
  {
    if (*(_DWORD *)v268 == 2)
      WTF::StringImpl::destroy(v268, v263);
    else
      *(_DWORD *)v268 -= 2;
  }
  if (v261)
  {
    if (*(_DWORD *)v261 == 2)
      WTF::StringImpl::destroy(v261, v263);
    else
      *(_DWORD *)v261 -= 2;
  }
  v269 = v274;
  v274 = 0;
  if (v269)
  {
    if (*(_DWORD *)v269 == 2)
      WTF::StringImpl::destroy(v269, v263);
    else
      *(_DWORD *)v269 -= 2;
  }
  this[115] = 0;
  return this;
}

int32x2_t *WebCore::WritableStreamInternalsBuiltinsWrapper::WritableStreamInternalsBuiltinsWrapper(int32x2_t *this, JSC::VM *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  int v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  int v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  int v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  int v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  int v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  int v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  int v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  int v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  int v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  int v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  int v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  int v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  int v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  int v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  int v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  int v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  int v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  int v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  int v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  int v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  int v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  int v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  int v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  int v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  int v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  int v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  int v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  int v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  int v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  int v217;
  WTF::StringImpl *v218;
  WTF::StringImpl *v219;
  WTF::StringImpl *v220;
  WTF::StringImpl *v221;
  int v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  WTF::StringImpl *v225;
  WTF::StringImpl *v226;
  int v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  WTF::StringImpl *v230;
  WTF::StringImpl *v231;
  int v232;
  WTF::StringImpl *v233;
  WTF::StringImpl *v234;
  WTF::StringImpl *v235;
  WTF::StringImpl *v236;
  int v237;
  WTF::StringImpl *v238;
  WTF::StringImpl *v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  int v242;
  WTF::StringImpl *v243;
  WTF::StringImpl *v244;
  WTF::StringImpl *v245;
  WTF::StringImpl *v246;
  int v247;
  WTF::StringImpl *v248;
  _QWORD *v249;
  WTF::StringImpl *v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  WTF::StringImpl *v253;
  WTF::StringImpl *v254;
  _DWORD *v255;
  WTF::StringImpl *v256;
  WTF::StringImpl *v257;
  WTF::StringImpl *v258;
  _QWORD *v259;
  WTF::StringImpl *v260;
  WTF::StringImpl *v261;
  WTF::StringImpl *v262;
  WTF::StringImpl *v263;
  _DWORD *v264;
  WTF::StringImpl *v265;
  WTF::StringImpl *v266;
  WTF::StringImpl *v267;
  _QWORD *v268;
  WTF::StringImpl *v269;
  WTF::StringImpl *v270;
  WTF::StringImpl *v271;
  WTF::StringImpl *v272;
  _DWORD *v273;
  WTF::StringImpl *v274;
  WTF::StringImpl *v275;
  WTF::StringImpl *v276;
  _QWORD *v277;
  WTF::StringImpl *v278;
  WTF::StringImpl *v279;
  WTF::StringImpl *v280;
  WTF::StringImpl *v281;
  _DWORD *v282;
  WTF::StringImpl *v283;
  WTF::StringImpl *v284;
  WTF::StringImpl *v285;
  _QWORD *v286;
  WTF::StringImpl *v287;
  WTF::StringImpl *v288;
  WTF::StringImpl *v289;
  WTF::StringImpl *v290;
  _DWORD *v291;
  WTF::StringImpl *v292;
  WTF::StringImpl *v293;
  WTF::StringImpl *v294;
  _QWORD *v295;
  WTF::StringImpl *v296;
  WTF::StringImpl *v297;
  WTF::StringImpl *v298;
  WTF::StringImpl *v299;
  _DWORD *v300;
  WTF::StringImpl *v301;
  WTF::StringImpl *v302;
  WTF::StringImpl *v303;
  _QWORD *v304;
  WTF::StringImpl *v305;
  WTF::StringImpl *v306;
  WTF::StringImpl *v307;
  WTF::StringImpl *v308;
  _DWORD *v309;
  WTF::StringImpl *v310;
  WTF::StringImpl *v311;
  WTF::StringImpl *v312;
  _QWORD *v313;
  WTF::StringImpl *v314;
  WTF::StringImpl *v315;
  WTF::StringImpl *v316;
  WTF::StringImpl *v317;
  _DWORD *v318;
  WTF::StringImpl *v319;
  WTF::StringImpl *v320;
  WTF::StringImpl *v321;
  _QWORD *v322;
  WTF::StringImpl *v323;
  WTF::StringImpl *v324;
  WTF::StringImpl *v325;
  WTF::StringImpl *v326;
  _DWORD *v327;
  WTF::StringImpl *v328;
  WTF::StringImpl *v329;
  WTF::StringImpl *v330;
  _QWORD *v331;
  WTF::StringImpl *v332;
  WTF::StringImpl *v333;
  WTF::StringImpl *v334;
  WTF::StringImpl *v335;
  _DWORD *v336;
  WTF::StringImpl *v337;
  WTF::StringImpl *v338;
  WTF::StringImpl *v339;
  _QWORD *v340;
  WTF::StringImpl *v341;
  WTF::StringImpl *v342;
  WTF::StringImpl *v343;
  WTF::StringImpl *v344;
  _DWORD *v345;
  WTF::StringImpl *v346;
  WTF::StringImpl *v347;
  WTF::StringImpl *v348;
  _QWORD *v349;
  WTF::StringImpl *v350;
  WTF::StringImpl *v351;
  WTF::StringImpl *v352;
  WTF::StringImpl *v353;
  _DWORD *v354;
  WTF::StringImpl *v355;
  WTF::StringImpl *v356;
  WTF::StringImpl *v357;
  _QWORD *v358;
  WTF::StringImpl *v359;
  WTF::StringImpl *v360;
  WTF::StringImpl *v361;
  WTF::StringImpl *v362;
  _DWORD *v363;
  WTF::StringImpl *v364;
  WTF::StringImpl *v365;
  WTF::StringImpl *v366;
  _QWORD *v367;
  WTF::StringImpl *v368;
  WTF::StringImpl *v369;
  WTF::StringImpl *v370;
  WTF::StringImpl *v371;
  _DWORD *v372;
  WTF::StringImpl *v373;
  WTF::StringImpl *v374;
  WTF::StringImpl *v375;
  _QWORD *v376;
  WTF::StringImpl *v377;
  WTF::StringImpl *v378;
  WTF::StringImpl *v379;
  WTF::StringImpl *v380;
  _DWORD *v381;
  WTF::StringImpl *v382;
  WTF::StringImpl *v383;
  WTF::StringImpl *v384;
  _QWORD *v385;
  WTF::StringImpl *v386;
  WTF::StringImpl *v387;
  WTF::StringImpl *v388;
  WTF::StringImpl *v389;
  _DWORD *v390;
  WTF::StringImpl *v391;
  WTF::StringImpl *v392;
  WTF::StringImpl *v393;
  _QWORD *v394;
  WTF::StringImpl *v395;
  WTF::StringImpl *v396;
  WTF::StringImpl *v397;
  WTF::StringImpl *v398;
  _DWORD *v399;
  WTF::StringImpl *v400;
  WTF::StringImpl *v401;
  WTF::StringImpl *v402;
  _QWORD *v403;
  WTF::StringImpl *v404;
  WTF::StringImpl *v405;
  WTF::StringImpl *v406;
  WTF::StringImpl *v407;
  _DWORD *v408;
  WTF::StringImpl *v409;
  WTF::StringImpl *v410;
  WTF::StringImpl *v411;
  _QWORD *v412;
  WTF::StringImpl *v413;
  WTF::StringImpl *v414;
  WTF::StringImpl *v415;
  WTF::StringImpl *v416;
  _DWORD *v417;
  WTF::StringImpl *v418;
  WTF::StringImpl *v419;
  WTF::StringImpl *v420;
  _QWORD *v421;
  WTF::StringImpl *v422;
  WTF::StringImpl *v423;
  WTF::StringImpl *v424;
  WTF::StringImpl *v425;
  _DWORD *v426;
  WTF::StringImpl *v427;
  WTF::StringImpl *v428;
  WTF::StringImpl *v429;
  _QWORD *v430;
  WTF::StringImpl *v431;
  WTF::StringImpl *v432;
  WTF::StringImpl *v433;
  WTF::StringImpl *v434;
  _DWORD *v435;
  WTF::StringImpl *v436;
  WTF::StringImpl *v437;
  WTF::StringImpl *v438;
  _QWORD *v439;
  WTF::StringImpl *v440;
  WTF::StringImpl *v441;
  WTF::StringImpl *v442;
  WTF::StringImpl *v443;
  _DWORD *v444;
  WTF::StringImpl *v445;
  WTF::StringImpl *v446;
  WTF::StringImpl *v447;
  _QWORD *v448;
  WTF::StringImpl *v449;
  WTF::StringImpl *v450;
  WTF::StringImpl *v451;
  WTF::StringImpl *v452;
  _DWORD *v453;
  WTF::StringImpl *v454;
  WTF::StringImpl *v455;
  WTF::StringImpl *v456;
  _QWORD *v457;
  WTF::StringImpl *v458;
  WTF::StringImpl *v459;
  WTF::StringImpl *v460;
  WTF::StringImpl *v461;
  _DWORD *v462;
  WTF::StringImpl *v463;
  WTF::StringImpl *v464;
  WTF::StringImpl *v465;
  _QWORD *v466;
  WTF::StringImpl *v467;
  WTF::StringImpl *v468;
  WTF::StringImpl *v469;
  WTF::StringImpl *v470;
  _DWORD *v471;
  WTF::StringImpl *v472;
  WTF::StringImpl *v473;
  WTF::StringImpl *v474;
  _QWORD *v475;
  WTF::StringImpl *v476;
  WTF::StringImpl *v477;
  WTF::StringImpl *v478;
  WTF::StringImpl *v479;
  _DWORD *v480;
  WTF::StringImpl *v481;
  WTF::StringImpl *v482;
  WTF::StringImpl *v483;
  _QWORD *v484;
  WTF::StringImpl *v485;
  WTF::StringImpl *v486;
  WTF::StringImpl *v487;
  WTF::StringImpl *v488;
  _DWORD *v489;
  WTF::StringImpl *v490;
  WTF::StringImpl *v491;
  WTF::StringImpl *v492;
  _QWORD *v493;
  WTF::StringImpl *v494;
  WTF::StringImpl *v495;
  WTF::StringImpl *v496;
  WTF::StringImpl *v497;
  _DWORD *v498;
  WTF::StringImpl *v499;
  WTF::StringImpl *v500;
  WTF::StringImpl *v501;
  _QWORD *v502;
  WTF::StringImpl *v503;
  WTF::StringImpl *v504;
  WTF::StringImpl *v505;
  WTF::StringImpl *v506;
  _DWORD *v507;
  WTF::StringImpl *v508;
  WTF::StringImpl *v509;
  WTF::StringImpl *v510;
  _QWORD *v511;
  WTF::StringImpl *v512;
  WTF::StringImpl *v513;
  WTF::StringImpl *v514;
  WTF::StringImpl *v515;
  _DWORD *v516;
  WTF::StringImpl *v517;
  WTF::StringImpl *v518;
  WTF::StringImpl *v519;
  _QWORD *v520;
  WTF::StringImpl *v521;
  WTF::StringImpl *v522;
  WTF::StringImpl *v523;
  WTF::StringImpl *v524;
  _DWORD *v525;
  WTF::StringImpl *v526;
  WTF::StringImpl *v527;
  WTF::StringImpl *v528;
  _QWORD *v529;
  WTF::StringImpl *v530;
  WTF::StringImpl *v531;
  WTF::StringImpl *v532;
  WTF::StringImpl *v533;
  _DWORD *v534;
  WTF::StringImpl *v535;
  WTF::StringImpl *v536;
  WTF::StringImpl *v537;
  _QWORD *v538;
  WTF::StringImpl *v539;
  WTF::StringImpl *v540;
  WTF::StringImpl *v541;
  WTF::StringImpl *v542;
  _DWORD *v543;
  WTF::StringImpl *v544;
  WTF::StringImpl *v545;
  WTF::StringImpl *v546;
  _QWORD *v547;
  WTF::StringImpl *v548;
  WTF::StringImpl *v549;
  WTF::StringImpl *v550;
  WTF::StringImpl *v551;
  _DWORD *v552;
  WTF::StringImpl *v553;
  WTF::StringImpl *v554;
  WTF::StringImpl *v555;
  _QWORD *v556;
  WTF::StringImpl *v557;
  WTF::StringImpl *v558;
  WTF::StringImpl *v559;
  WTF::StringImpl *v560;
  _DWORD *v561;
  WTF::StringImpl *v562;
  WTF::StringImpl *v563;
  WTF::StringImpl *v564;
  _QWORD *v565;
  WTF::StringImpl *v566;
  WTF::StringImpl *v567;
  WTF::StringImpl *v568;
  WTF::StringImpl *v569;
  _DWORD *v570;
  WTF::StringImpl *v571;
  WTF::StringImpl *v572;
  WTF::StringImpl *v573;
  _QWORD *v574;
  WTF::StringImpl *v575;
  WTF::StringImpl *v576;
  WTF::StringImpl *v577;
  WTF::StringImpl *v578;
  _DWORD *v579;
  WTF::StringImpl *v580;
  WTF::StringImpl *v581;
  WTF::StringImpl *v582;
  _QWORD *v583;
  WTF::StringImpl *v584;
  WTF::StringImpl *v585;
  WTF::StringImpl *v586;
  WTF::StringImpl *v587;
  _DWORD *v588;
  WTF::StringImpl *v589;
  WTF::StringImpl *v590;
  WTF::StringImpl *v591;
  _QWORD *v592;
  WTF::StringImpl *v593;
  WTF::StringImpl *v594;
  WTF::StringImpl *v595;
  WTF::StringImpl *v596;
  _DWORD *v597;
  WTF::StringImpl *v598;
  WTF::StringImpl *v599;
  WTF::StringImpl *v600;
  _QWORD *v601;
  WTF::StringImpl *v602;
  WTF::StringImpl *v603;
  WTF::StringImpl *v604;
  WTF::StringImpl *v605;
  _DWORD *v606;
  WTF::StringImpl *v607;
  WTF::StringImpl *v608;
  WTF::StringImpl *v609;
  _QWORD *v610;
  WTF::StringImpl *v611;
  WTF::StringImpl *v612;
  WTF::StringImpl *v613;
  WTF::StringImpl *v614;
  _DWORD *v615;
  WTF::StringImpl *v616;
  WTF::StringImpl *v617;
  WTF::StringImpl *v618;
  _QWORD *v619;
  WTF::StringImpl *v620;
  WTF::StringImpl *v621;
  WTF::StringImpl *v622;
  WTF::StringImpl *v623;
  _DWORD *v624;
  WTF::StringImpl *v625;
  WTF::StringImpl *v626;
  WTF::StringImpl *v627;
  _QWORD *v628;
  WTF::StringImpl *v629;
  WTF::StringImpl *v630;
  WTF::StringImpl *v631;
  WTF::StringImpl *v632;
  _DWORD *v633;
  WTF::StringImpl *v634;
  WTF::StringImpl *v635;
  WTF::StringImpl *v636;
  _QWORD *v637;
  WTF::StringImpl *v638;
  WTF::StringImpl *v639;
  WTF::StringImpl *v640;
  WTF::StringImpl *v641;
  _DWORD *v642;
  WTF::StringImpl *v643;
  WTF::StringImpl *v644;
  WTF::StringImpl *v645;
  _QWORD *v646;
  WTF::StringImpl *v647;
  WTF::StringImpl *v648;
  WTF::StringImpl *v649;
  WTF::StringImpl *v650;
  _DWORD *v651;
  WTF::StringImpl *v652;
  WTF::StringImpl *v653;
  WTF::StringImpl *v654;
  _QWORD *v655;
  WTF::StringImpl *v656;
  WTF::StringImpl *v657;
  WTF::StringImpl *v658;
  WTF::StringImpl *v659;
  _DWORD *v660;
  WTF::StringImpl *v661;
  WTF::StringImpl *v662;
  WTF::StringImpl *v663;
  _QWORD *v664;
  WTF::StringImpl *v665;
  WTF::StringImpl *v666;
  WTF::StringImpl *v667;
  WTF::StringImpl *v668;
  _DWORD *v669;
  WTF::StringImpl *v670;
  WTF::StringImpl *v671;
  WTF::StringImpl *v672;
  _QWORD *v673;
  WTF::StringImpl *v674;
  WTF::StringImpl *v675;
  WTF::StringImpl *v676;
  WTF::StringImpl *v677;
  _DWORD *v678;
  WTF::StringImpl *v679;
  WTF::StringImpl *v680;
  WTF::StringImpl *v681;
  _QWORD *v682;
  WTF::StringImpl *v683;
  WTF::StringImpl *v684;
  WTF::StringImpl *v685;
  WTF::StringImpl *v686;
  _DWORD *v687;
  WTF::StringImpl *v688;
  WTF::StringImpl *v689;
  WTF::StringImpl *v691[2];
  __int128 v692;
  __int128 v693;
  WTF::StringImpl *v694;
  WTF::StringImpl *v695;
  WTF::StringImpl *v696;

  *this = (int32x2_t)&off_1E33941A8;
  this[1] = (int32x2_t)a2;
  WTF::AtomStringImpl::addLiteral();
  this[2] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v4);
  v6 = v691[0];
  v7 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[3] = (int32x2_t)v6;
  if (v7)
    *(_DWORD *)v6 = v7;
  else
    WTF::StringImpl::destroy(v6, v5);
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v5);
  else
    *(_DWORD *)v3 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[4] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v9);
  v11 = v691[0];
  v12 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[5] = (int32x2_t)v11;
  if (v12)
    *(_DWORD *)v11 = v12;
  else
    WTF::StringImpl::destroy(v11, v10);
  if (*(_DWORD *)v8 == 2)
    WTF::StringImpl::destroy(v8, v10);
  else
    *(_DWORD *)v8 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[6] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v14);
  v16 = v691[0];
  v17 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[7] = (int32x2_t)v16;
  if (v17)
    *(_DWORD *)v16 = v17;
  else
    WTF::StringImpl::destroy(v16, v15);
  if (*(_DWORD *)v13 == 2)
    WTF::StringImpl::destroy(v13, v15);
  else
    *(_DWORD *)v13 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[8] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v18 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v19);
  v21 = v691[0];
  v22 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[9] = (int32x2_t)v21;
  if (v22)
    *(_DWORD *)v21 = v22;
  else
    WTF::StringImpl::destroy(v21, v20);
  if (*(_DWORD *)v18 == 2)
    WTF::StringImpl::destroy(v18, v20);
  else
    *(_DWORD *)v18 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[10] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v23 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v24);
  v26 = v691[0];
  v27 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[11] = (int32x2_t)v26;
  if (v27)
    *(_DWORD *)v26 = v27;
  else
    WTF::StringImpl::destroy(v26, v25);
  if (*(_DWORD *)v23 == 2)
    WTF::StringImpl::destroy(v23, v25);
  else
    *(_DWORD *)v23 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[12] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v28 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v29);
  v31 = v691[0];
  v32 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[13] = (int32x2_t)v31;
  if (v32)
    *(_DWORD *)v31 = v32;
  else
    WTF::StringImpl::destroy(v31, v30);
  if (*(_DWORD *)v28 == 2)
    WTF::StringImpl::destroy(v28, v30);
  else
    *(_DWORD *)v28 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[14] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v33 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v34);
  v36 = v691[0];
  v37 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[15] = (int32x2_t)v36;
  if (v37)
    *(_DWORD *)v36 = v37;
  else
    WTF::StringImpl::destroy(v36, v35);
  if (*(_DWORD *)v33 == 2)
    WTF::StringImpl::destroy(v33, v35);
  else
    *(_DWORD *)v33 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[16] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v38 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v39);
  v41 = v691[0];
  v42 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[17] = (int32x2_t)v41;
  if (v42)
    *(_DWORD *)v41 = v42;
  else
    WTF::StringImpl::destroy(v41, v40);
  if (*(_DWORD *)v38 == 2)
    WTF::StringImpl::destroy(v38, v40);
  else
    *(_DWORD *)v38 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[18] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v43 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v44);
  v46 = v691[0];
  v47 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[19] = (int32x2_t)v46;
  if (v47)
    *(_DWORD *)v46 = v47;
  else
    WTF::StringImpl::destroy(v46, v45);
  if (*(_DWORD *)v43 == 2)
    WTF::StringImpl::destroy(v43, v45);
  else
    *(_DWORD *)v43 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[20] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v48 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v49);
  v51 = v691[0];
  v52 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[21] = (int32x2_t)v51;
  if (v52)
    *(_DWORD *)v51 = v52;
  else
    WTF::StringImpl::destroy(v51, v50);
  if (*(_DWORD *)v48 == 2)
    WTF::StringImpl::destroy(v48, v50);
  else
    *(_DWORD *)v48 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[22] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v53 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v54);
  v56 = v691[0];
  v57 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[23] = (int32x2_t)v56;
  if (v57)
    *(_DWORD *)v56 = v57;
  else
    WTF::StringImpl::destroy(v56, v55);
  if (*(_DWORD *)v53 == 2)
    WTF::StringImpl::destroy(v53, v55);
  else
    *(_DWORD *)v53 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[24] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v58 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v59);
  v61 = v691[0];
  v62 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[25] = (int32x2_t)v61;
  if (v62)
    *(_DWORD *)v61 = v62;
  else
    WTF::StringImpl::destroy(v61, v60);
  if (*(_DWORD *)v58 == 2)
    WTF::StringImpl::destroy(v58, v60);
  else
    *(_DWORD *)v58 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[26] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v63 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v64);
  v66 = v691[0];
  v67 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[27] = (int32x2_t)v66;
  if (v67)
    *(_DWORD *)v66 = v67;
  else
    WTF::StringImpl::destroy(v66, v65);
  if (*(_DWORD *)v63 == 2)
    WTF::StringImpl::destroy(v63, v65);
  else
    *(_DWORD *)v63 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[28] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v68 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v69);
  v71 = v691[0];
  v72 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[29] = (int32x2_t)v71;
  if (v72)
    *(_DWORD *)v71 = v72;
  else
    WTF::StringImpl::destroy(v71, v70);
  if (*(_DWORD *)v68 == 2)
    WTF::StringImpl::destroy(v68, v70);
  else
    *(_DWORD *)v68 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[30] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v73 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v74);
  v76 = v691[0];
  v77 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[31] = (int32x2_t)v76;
  if (v77)
    *(_DWORD *)v76 = v77;
  else
    WTF::StringImpl::destroy(v76, v75);
  if (*(_DWORD *)v73 == 2)
    WTF::StringImpl::destroy(v73, v75);
  else
    *(_DWORD *)v73 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[32] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v79);
  v81 = v691[0];
  v82 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[33] = (int32x2_t)v81;
  if (v82)
    *(_DWORD *)v81 = v82;
  else
    WTF::StringImpl::destroy(v81, v80);
  if (*(_DWORD *)v78 == 2)
    WTF::StringImpl::destroy(v78, v80);
  else
    *(_DWORD *)v78 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[34] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v83 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v84);
  v86 = v691[0];
  v87 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[35] = (int32x2_t)v86;
  if (v87)
    *(_DWORD *)v86 = v87;
  else
    WTF::StringImpl::destroy(v86, v85);
  if (*(_DWORD *)v83 == 2)
    WTF::StringImpl::destroy(v83, v85);
  else
    *(_DWORD *)v83 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[36] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v88 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v89);
  v91 = v691[0];
  v92 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[37] = (int32x2_t)v91;
  if (v92)
    *(_DWORD *)v91 = v92;
  else
    WTF::StringImpl::destroy(v91, v90);
  if (*(_DWORD *)v88 == 2)
    WTF::StringImpl::destroy(v88, v90);
  else
    *(_DWORD *)v88 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[38] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v94);
  v96 = v691[0];
  v97 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[39] = (int32x2_t)v96;
  if (v97)
    *(_DWORD *)v96 = v97;
  else
    WTF::StringImpl::destroy(v96, v95);
  if (*(_DWORD *)v93 == 2)
    WTF::StringImpl::destroy(v93, v95);
  else
    *(_DWORD *)v93 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[40] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v98 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v99);
  v101 = v691[0];
  v102 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[41] = (int32x2_t)v101;
  if (v102)
    *(_DWORD *)v101 = v102;
  else
    WTF::StringImpl::destroy(v101, v100);
  if (*(_DWORD *)v98 == 2)
    WTF::StringImpl::destroy(v98, v100);
  else
    *(_DWORD *)v98 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[42] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v103 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v104);
  v106 = v691[0];
  v107 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[43] = (int32x2_t)v106;
  if (v107)
    *(_DWORD *)v106 = v107;
  else
    WTF::StringImpl::destroy(v106, v105);
  if (*(_DWORD *)v103 == 2)
    WTF::StringImpl::destroy(v103, v105);
  else
    *(_DWORD *)v103 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[44] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v108 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v109);
  v111 = v691[0];
  v112 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[45] = (int32x2_t)v111;
  if (v112)
    *(_DWORD *)v111 = v112;
  else
    WTF::StringImpl::destroy(v111, v110);
  if (*(_DWORD *)v108 == 2)
    WTF::StringImpl::destroy(v108, v110);
  else
    *(_DWORD *)v108 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[46] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v113 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v114);
  v116 = v691[0];
  v117 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[47] = (int32x2_t)v116;
  if (v117)
    *(_DWORD *)v116 = v117;
  else
    WTF::StringImpl::destroy(v116, v115);
  if (*(_DWORD *)v113 == 2)
    WTF::StringImpl::destroy(v113, v115);
  else
    *(_DWORD *)v113 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[48] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v118 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v119);
  v121 = v691[0];
  v122 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[49] = (int32x2_t)v121;
  if (v122)
    *(_DWORD *)v121 = v122;
  else
    WTF::StringImpl::destroy(v121, v120);
  if (*(_DWORD *)v118 == 2)
    WTF::StringImpl::destroy(v118, v120);
  else
    *(_DWORD *)v118 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[50] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v123 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v124);
  v126 = v691[0];
  v127 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[51] = (int32x2_t)v126;
  if (v127)
    *(_DWORD *)v126 = v127;
  else
    WTF::StringImpl::destroy(v126, v125);
  if (*(_DWORD *)v123 == 2)
    WTF::StringImpl::destroy(v123, v125);
  else
    *(_DWORD *)v123 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[52] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v128 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v129);
  v131 = v691[0];
  v132 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[53] = (int32x2_t)v131;
  if (v132)
    *(_DWORD *)v131 = v132;
  else
    WTF::StringImpl::destroy(v131, v130);
  if (*(_DWORD *)v128 == 2)
    WTF::StringImpl::destroy(v128, v130);
  else
    *(_DWORD *)v128 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[54] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v133 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v134);
  v136 = v691[0];
  v137 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[55] = (int32x2_t)v136;
  if (v137)
    *(_DWORD *)v136 = v137;
  else
    WTF::StringImpl::destroy(v136, v135);
  if (*(_DWORD *)v133 == 2)
    WTF::StringImpl::destroy(v133, v135);
  else
    *(_DWORD *)v133 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[56] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v138 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v139);
  v141 = v691[0];
  v142 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[57] = (int32x2_t)v141;
  if (v142)
    *(_DWORD *)v141 = v142;
  else
    WTF::StringImpl::destroy(v141, v140);
  if (*(_DWORD *)v138 == 2)
    WTF::StringImpl::destroy(v138, v140);
  else
    *(_DWORD *)v138 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[58] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v143 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v144);
  v146 = v691[0];
  v147 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[59] = (int32x2_t)v146;
  if (v147)
    *(_DWORD *)v146 = v147;
  else
    WTF::StringImpl::destroy(v146, v145);
  if (*(_DWORD *)v143 == 2)
    WTF::StringImpl::destroy(v143, v145);
  else
    *(_DWORD *)v143 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[60] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v148 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v149);
  v151 = v691[0];
  v152 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[61] = (int32x2_t)v151;
  if (v152)
    *(_DWORD *)v151 = v152;
  else
    WTF::StringImpl::destroy(v151, v150);
  if (*(_DWORD *)v148 == 2)
    WTF::StringImpl::destroy(v148, v150);
  else
    *(_DWORD *)v148 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[62] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v153 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v154);
  v156 = v691[0];
  v157 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[63] = (int32x2_t)v156;
  if (v157)
    *(_DWORD *)v156 = v157;
  else
    WTF::StringImpl::destroy(v156, v155);
  if (*(_DWORD *)v153 == 2)
    WTF::StringImpl::destroy(v153, v155);
  else
    *(_DWORD *)v153 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[64] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v158 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v159);
  v161 = v691[0];
  v162 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[65] = (int32x2_t)v161;
  if (v162)
    *(_DWORD *)v161 = v162;
  else
    WTF::StringImpl::destroy(v161, v160);
  if (*(_DWORD *)v158 == 2)
    WTF::StringImpl::destroy(v158, v160);
  else
    *(_DWORD *)v158 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[66] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v163 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v164);
  v166 = v691[0];
  v167 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[67] = (int32x2_t)v166;
  if (v167)
    *(_DWORD *)v166 = v167;
  else
    WTF::StringImpl::destroy(v166, v165);
  if (*(_DWORD *)v163 == 2)
    WTF::StringImpl::destroy(v163, v165);
  else
    *(_DWORD *)v163 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[68] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v168 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v169);
  v171 = v691[0];
  v172 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[69] = (int32x2_t)v171;
  if (v172)
    *(_DWORD *)v171 = v172;
  else
    WTF::StringImpl::destroy(v171, v170);
  if (*(_DWORD *)v168 == 2)
    WTF::StringImpl::destroy(v168, v170);
  else
    *(_DWORD *)v168 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[70] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v173 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v174);
  v176 = v691[0];
  v177 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[71] = (int32x2_t)v176;
  if (v177)
    *(_DWORD *)v176 = v177;
  else
    WTF::StringImpl::destroy(v176, v175);
  if (*(_DWORD *)v173 == 2)
    WTF::StringImpl::destroy(v173, v175);
  else
    *(_DWORD *)v173 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[72] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v178 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v179);
  v181 = v691[0];
  v182 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[73] = (int32x2_t)v181;
  if (v182)
    *(_DWORD *)v181 = v182;
  else
    WTF::StringImpl::destroy(v181, v180);
  if (*(_DWORD *)v178 == 2)
    WTF::StringImpl::destroy(v178, v180);
  else
    *(_DWORD *)v178 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[74] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v183 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v184);
  v186 = v691[0];
  v187 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[75] = (int32x2_t)v186;
  if (v187)
    *(_DWORD *)v186 = v187;
  else
    WTF::StringImpl::destroy(v186, v185);
  if (*(_DWORD *)v183 == 2)
    WTF::StringImpl::destroy(v183, v185);
  else
    *(_DWORD *)v183 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[76] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v188 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v189);
  v191 = v691[0];
  v192 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[77] = (int32x2_t)v191;
  if (v192)
    *(_DWORD *)v191 = v192;
  else
    WTF::StringImpl::destroy(v191, v190);
  if (*(_DWORD *)v188 == 2)
    WTF::StringImpl::destroy(v188, v190);
  else
    *(_DWORD *)v188 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[78] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v193 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v194);
  v196 = v691[0];
  v197 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[79] = (int32x2_t)v196;
  if (v197)
    *(_DWORD *)v196 = v197;
  else
    WTF::StringImpl::destroy(v196, v195);
  if (*(_DWORD *)v193 == 2)
    WTF::StringImpl::destroy(v193, v195);
  else
    *(_DWORD *)v193 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[80] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v198 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v199);
  v201 = v691[0];
  v202 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[81] = (int32x2_t)v201;
  if (v202)
    *(_DWORD *)v201 = v202;
  else
    WTF::StringImpl::destroy(v201, v200);
  if (*(_DWORD *)v198 == 2)
    WTF::StringImpl::destroy(v198, v200);
  else
    *(_DWORD *)v198 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[82] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v203 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v204);
  v206 = v691[0];
  v207 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[83] = (int32x2_t)v206;
  if (v207)
    *(_DWORD *)v206 = v207;
  else
    WTF::StringImpl::destroy(v206, v205);
  if (*(_DWORD *)v203 == 2)
    WTF::StringImpl::destroy(v203, v205);
  else
    *(_DWORD *)v203 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[84] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v208 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v209);
  v211 = v691[0];
  v212 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[85] = (int32x2_t)v211;
  if (v212)
    *(_DWORD *)v211 = v212;
  else
    WTF::StringImpl::destroy(v211, v210);
  if (*(_DWORD *)v208 == 2)
    WTF::StringImpl::destroy(v208, v210);
  else
    *(_DWORD *)v208 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[86] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v213 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v214);
  v216 = v691[0];
  v217 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[87] = (int32x2_t)v216;
  if (v217)
    *(_DWORD *)v216 = v217;
  else
    WTF::StringImpl::destroy(v216, v215);
  if (*(_DWORD *)v213 == 2)
    WTF::StringImpl::destroy(v213, v215);
  else
    *(_DWORD *)v213 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[88] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v218 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v219);
  v221 = v691[0];
  v222 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[89] = (int32x2_t)v221;
  if (v222)
    *(_DWORD *)v221 = v222;
  else
    WTF::StringImpl::destroy(v221, v220);
  if (*(_DWORD *)v218 == 2)
    WTF::StringImpl::destroy(v218, v220);
  else
    *(_DWORD *)v218 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[90] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v223 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v224);
  v226 = v691[0];
  v227 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[91] = (int32x2_t)v226;
  if (v227)
    *(_DWORD *)v226 = v227;
  else
    WTF::StringImpl::destroy(v226, v225);
  if (*(_DWORD *)v223 == 2)
    WTF::StringImpl::destroy(v223, v225);
  else
    *(_DWORD *)v223 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[92] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v228 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v229);
  v231 = v691[0];
  v232 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[93] = (int32x2_t)v231;
  if (v232)
    *(_DWORD *)v231 = v232;
  else
    WTF::StringImpl::destroy(v231, v230);
  if (*(_DWORD *)v228 == 2)
    WTF::StringImpl::destroy(v228, v230);
  else
    *(_DWORD *)v228 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[94] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v233 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v234);
  v236 = v691[0];
  v237 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[95] = (int32x2_t)v236;
  if (v237)
    *(_DWORD *)v236 = v237;
  else
    WTF::StringImpl::destroy(v236, v235);
  if (*(_DWORD *)v233 == 2)
    WTF::StringImpl::destroy(v233, v235);
  else
    *(_DWORD *)v233 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[96] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v238 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v239);
  v241 = v691[0];
  v242 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[97] = (int32x2_t)v241;
  if (v242)
    *(_DWORD *)v241 = v242;
  else
    WTF::StringImpl::destroy(v241, v240);
  if (*(_DWORD *)v238 == 2)
    WTF::StringImpl::destroy(v238, v240);
  else
    *(_DWORD *)v238 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[98] = (int32x2_t)v691[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v243 = v691[0];
  WTF::PrivateSymbolImpl::create(v691[0], v244);
  v246 = v691[0];
  v247 = *(_DWORD *)v691[0];
  *(_DWORD *)v691[0] += 2;
  this[99] = (int32x2_t)v246;
  if (v247)
    *(_DWORD *)v246 = v247;
  else
    WTF::StringImpl::destroy(v246, v245);
  if (*(_DWORD *)v243 == 2)
    WTF::StringImpl::destroy(v243, v245);
  else
    *(_DWORD *)v243 -= 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v248 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v249 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v251 = v696;
  v696 = 0;
  if (v251)
  {
    if (*(_DWORD *)v251 == 2)
      WTF::StringImpl::destroy(v251, v250);
    else
      *(_DWORD *)v251 -= 2;
  }
  *v249 = off_1E33948F0;
  v252 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  if (v248)
    v253 = v248;
  else
    v253 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *(_DWORD *)v253 += 2;
  v249[15] = v253;
  this[100] = (int32x2_t)v249;
  this[101].i32[0] = 0;
  this[101].i32[1] = *((_DWORD *)v253 + 1);
  this[102] = vmax_s32(0, 0);
  v254 = v695;
  v695 = 0;
  if (v254)
  {
    if (*(_DWORD *)v254 == 2)
      WTF::StringImpl::destroy(v254, v250);
    else
      *(_DWORD *)v254 -= 2;
  }
  v255 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v255)
  {
    if (v255[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v255 + 8))(v255);
    else
      --v255[2];
  }
  v256 = v691[0];
  v691[0] = 0;
  if (v256)
  {
    if (*(_DWORD *)v256 == 2)
      WTF::StringImpl::destroy(v256, v250);
    else
      *(_DWORD *)v256 -= 2;
  }
  if (v248)
  {
    if (*(_DWORD *)v248 == 2)
      WTF::StringImpl::destroy(v248, v250);
    else
      *(_DWORD *)v248 -= 2;
  }
  v257 = v694;
  v694 = 0;
  if (v257)
  {
    if (*(_DWORD *)v257 == 2)
      WTF::StringImpl::destroy(v257, v250);
    else
      *(_DWORD *)v257 -= 2;
  }
  this[103] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v258 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v259 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v261 = v696;
  v696 = 0;
  if (v261)
  {
    if (*(_DWORD *)v261 == 2)
      WTF::StringImpl::destroy(v261, v260);
    else
      *(_DWORD *)v261 -= 2;
  }
  *v259 = off_1E33948F0;
  if (v258)
    v262 = v258;
  else
    v262 = v252;
  *(_DWORD *)v262 += 2;
  v259[15] = v262;
  this[104] = (int32x2_t)v259;
  this[105].i32[0] = 0;
  this[105].i32[1] = *((_DWORD *)v262 + 1);
  this[106] = vmax_s32(0, 0);
  v263 = v695;
  v695 = 0;
  if (v263)
  {
    if (*(_DWORD *)v263 == 2)
      WTF::StringImpl::destroy(v263, v260);
    else
      *(_DWORD *)v263 -= 2;
  }
  v264 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v264)
  {
    if (v264[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v264 + 8))(v264);
    else
      --v264[2];
  }
  v265 = v691[0];
  v691[0] = 0;
  if (v265)
  {
    if (*(_DWORD *)v265 == 2)
      WTF::StringImpl::destroy(v265, v260);
    else
      *(_DWORD *)v265 -= 2;
  }
  if (v258)
  {
    if (*(_DWORD *)v258 == 2)
      WTF::StringImpl::destroy(v258, v260);
    else
      *(_DWORD *)v258 -= 2;
  }
  v266 = v694;
  v694 = 0;
  if (v266)
  {
    if (*(_DWORD *)v266 == 2)
      WTF::StringImpl::destroy(v266, v260);
    else
      *(_DWORD *)v266 -= 2;
  }
  this[107] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v267 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v268 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v270 = v696;
  v696 = 0;
  if (v270)
  {
    if (*(_DWORD *)v270 == 2)
      WTF::StringImpl::destroy(v270, v269);
    else
      *(_DWORD *)v270 -= 2;
  }
  *v268 = off_1E33948F0;
  if (v267)
    v271 = v267;
  else
    v271 = v252;
  *(_DWORD *)v271 += 2;
  v268[15] = v271;
  this[108] = (int32x2_t)v268;
  this[109].i32[0] = 0;
  this[109].i32[1] = *((_DWORD *)v271 + 1);
  this[110] = vmax_s32(0, 0);
  v272 = v695;
  v695 = 0;
  if (v272)
  {
    if (*(_DWORD *)v272 == 2)
      WTF::StringImpl::destroy(v272, v269);
    else
      *(_DWORD *)v272 -= 2;
  }
  v273 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v273)
  {
    if (v273[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v273 + 8))(v273);
    else
      --v273[2];
  }
  v274 = v691[0];
  v691[0] = 0;
  if (v274)
  {
    if (*(_DWORD *)v274 == 2)
      WTF::StringImpl::destroy(v274, v269);
    else
      *(_DWORD *)v274 -= 2;
  }
  if (v267)
  {
    if (*(_DWORD *)v267 == 2)
      WTF::StringImpl::destroy(v267, v269);
    else
      *(_DWORD *)v267 -= 2;
  }
  v275 = v694;
  v694 = 0;
  if (v275)
  {
    if (*(_DWORD *)v275 == 2)
      WTF::StringImpl::destroy(v275, v269);
    else
      *(_DWORD *)v275 -= 2;
  }
  this[111] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v276 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v277 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v279 = v696;
  v696 = 0;
  if (v279)
  {
    if (*(_DWORD *)v279 == 2)
      WTF::StringImpl::destroy(v279, v278);
    else
      *(_DWORD *)v279 -= 2;
  }
  *v277 = off_1E33948F0;
  if (v276)
    v280 = v276;
  else
    v280 = v252;
  *(_DWORD *)v280 += 2;
  v277[15] = v280;
  this[112] = (int32x2_t)v277;
  this[113].i32[0] = 0;
  this[113].i32[1] = *((_DWORD *)v280 + 1);
  this[114] = vmax_s32(0, 0);
  v281 = v695;
  v695 = 0;
  if (v281)
  {
    if (*(_DWORD *)v281 == 2)
      WTF::StringImpl::destroy(v281, v278);
    else
      *(_DWORD *)v281 -= 2;
  }
  v282 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v282)
  {
    if (v282[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v282 + 8))(v282);
    else
      --v282[2];
  }
  v283 = v691[0];
  v691[0] = 0;
  if (v283)
  {
    if (*(_DWORD *)v283 == 2)
      WTF::StringImpl::destroy(v283, v278);
    else
      *(_DWORD *)v283 -= 2;
  }
  if (v276)
  {
    if (*(_DWORD *)v276 == 2)
      WTF::StringImpl::destroy(v276, v278);
    else
      *(_DWORD *)v276 -= 2;
  }
  v284 = v694;
  v694 = 0;
  if (v284)
  {
    if (*(_DWORD *)v284 == 2)
      WTF::StringImpl::destroy(v284, v278);
    else
      *(_DWORD *)v284 -= 2;
  }
  this[115] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v285 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v286 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v288 = v696;
  v696 = 0;
  if (v288)
  {
    if (*(_DWORD *)v288 == 2)
      WTF::StringImpl::destroy(v288, v287);
    else
      *(_DWORD *)v288 -= 2;
  }
  *v286 = off_1E33948F0;
  if (v285)
    v289 = v285;
  else
    v289 = v252;
  *(_DWORD *)v289 += 2;
  v286[15] = v289;
  this[116] = (int32x2_t)v286;
  this[117].i32[0] = 0;
  this[117].i32[1] = *((_DWORD *)v289 + 1);
  this[118] = vmax_s32(0, 0);
  v290 = v695;
  v695 = 0;
  if (v290)
  {
    if (*(_DWORD *)v290 == 2)
      WTF::StringImpl::destroy(v290, v287);
    else
      *(_DWORD *)v290 -= 2;
  }
  v291 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v291)
  {
    if (v291[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v291 + 8))(v291);
    else
      --v291[2];
  }
  v292 = v691[0];
  v691[0] = 0;
  if (v292)
  {
    if (*(_DWORD *)v292 == 2)
      WTF::StringImpl::destroy(v292, v287);
    else
      *(_DWORD *)v292 -= 2;
  }
  if (v285)
  {
    if (*(_DWORD *)v285 == 2)
      WTF::StringImpl::destroy(v285, v287);
    else
      *(_DWORD *)v285 -= 2;
  }
  v293 = v694;
  v694 = 0;
  if (v293)
  {
    if (*(_DWORD *)v293 == 2)
      WTF::StringImpl::destroy(v293, v287);
    else
      *(_DWORD *)v293 -= 2;
  }
  this[119] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v294 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v295 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v297 = v696;
  v696 = 0;
  if (v297)
  {
    if (*(_DWORD *)v297 == 2)
      WTF::StringImpl::destroy(v297, v296);
    else
      *(_DWORD *)v297 -= 2;
  }
  *v295 = off_1E33948F0;
  if (v294)
    v298 = v294;
  else
    v298 = v252;
  *(_DWORD *)v298 += 2;
  v295[15] = v298;
  this[120] = (int32x2_t)v295;
  this[121].i32[0] = 0;
  this[121].i32[1] = *((_DWORD *)v298 + 1);
  this[122] = vmax_s32(0, 0);
  v299 = v695;
  v695 = 0;
  if (v299)
  {
    if (*(_DWORD *)v299 == 2)
      WTF::StringImpl::destroy(v299, v296);
    else
      *(_DWORD *)v299 -= 2;
  }
  v300 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v300)
  {
    if (v300[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v300 + 8))(v300);
    else
      --v300[2];
  }
  v301 = v691[0];
  v691[0] = 0;
  if (v301)
  {
    if (*(_DWORD *)v301 == 2)
      WTF::StringImpl::destroy(v301, v296);
    else
      *(_DWORD *)v301 -= 2;
  }
  if (v294)
  {
    if (*(_DWORD *)v294 == 2)
      WTF::StringImpl::destroy(v294, v296);
    else
      *(_DWORD *)v294 -= 2;
  }
  v302 = v694;
  v694 = 0;
  if (v302)
  {
    if (*(_DWORD *)v302 == 2)
      WTF::StringImpl::destroy(v302, v296);
    else
      *(_DWORD *)v302 -= 2;
  }
  this[123] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v303 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v304 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v306 = v696;
  v696 = 0;
  if (v306)
  {
    if (*(_DWORD *)v306 == 2)
      WTF::StringImpl::destroy(v306, v305);
    else
      *(_DWORD *)v306 -= 2;
  }
  *v304 = off_1E33948F0;
  if (v303)
    v307 = v303;
  else
    v307 = v252;
  *(_DWORD *)v307 += 2;
  v304[15] = v307;
  this[124] = (int32x2_t)v304;
  this[125].i32[0] = 0;
  this[125].i32[1] = *((_DWORD *)v307 + 1);
  this[126] = vmax_s32(0, 0);
  v308 = v695;
  v695 = 0;
  if (v308)
  {
    if (*(_DWORD *)v308 == 2)
      WTF::StringImpl::destroy(v308, v305);
    else
      *(_DWORD *)v308 -= 2;
  }
  v309 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v309)
  {
    if (v309[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v309 + 8))(v309);
    else
      --v309[2];
  }
  v310 = v691[0];
  v691[0] = 0;
  if (v310)
  {
    if (*(_DWORD *)v310 == 2)
      WTF::StringImpl::destroy(v310, v305);
    else
      *(_DWORD *)v310 -= 2;
  }
  if (v303)
  {
    if (*(_DWORD *)v303 == 2)
      WTF::StringImpl::destroy(v303, v305);
    else
      *(_DWORD *)v303 -= 2;
  }
  v311 = v694;
  v694 = 0;
  if (v311)
  {
    if (*(_DWORD *)v311 == 2)
      WTF::StringImpl::destroy(v311, v305);
    else
      *(_DWORD *)v311 -= 2;
  }
  this[127] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v312 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v313 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v315 = v696;
  v696 = 0;
  if (v315)
  {
    if (*(_DWORD *)v315 == 2)
      WTF::StringImpl::destroy(v315, v314);
    else
      *(_DWORD *)v315 -= 2;
  }
  *v313 = off_1E33948F0;
  if (v312)
    v316 = v312;
  else
    v316 = v252;
  *(_DWORD *)v316 += 2;
  v313[15] = v316;
  this[128] = (int32x2_t)v313;
  this[129].i32[0] = 0;
  this[129].i32[1] = *((_DWORD *)v316 + 1);
  this[130] = vmax_s32(0, 0);
  v317 = v695;
  v695 = 0;
  if (v317)
  {
    if (*(_DWORD *)v317 == 2)
      WTF::StringImpl::destroy(v317, v314);
    else
      *(_DWORD *)v317 -= 2;
  }
  v318 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v318)
  {
    if (v318[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v318 + 8))(v318);
    else
      --v318[2];
  }
  v319 = v691[0];
  v691[0] = 0;
  if (v319)
  {
    if (*(_DWORD *)v319 == 2)
      WTF::StringImpl::destroy(v319, v314);
    else
      *(_DWORD *)v319 -= 2;
  }
  if (v312)
  {
    if (*(_DWORD *)v312 == 2)
      WTF::StringImpl::destroy(v312, v314);
    else
      *(_DWORD *)v312 -= 2;
  }
  v320 = v694;
  v694 = 0;
  if (v320)
  {
    if (*(_DWORD *)v320 == 2)
      WTF::StringImpl::destroy(v320, v314);
    else
      *(_DWORD *)v320 -= 2;
  }
  this[131] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v321 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v322 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v324 = v696;
  v696 = 0;
  if (v324)
  {
    if (*(_DWORD *)v324 == 2)
      WTF::StringImpl::destroy(v324, v323);
    else
      *(_DWORD *)v324 -= 2;
  }
  *v322 = off_1E33948F0;
  if (v321)
    v325 = v321;
  else
    v325 = v252;
  *(_DWORD *)v325 += 2;
  v322[15] = v325;
  this[132] = (int32x2_t)v322;
  this[133].i32[0] = 0;
  this[133].i32[1] = *((_DWORD *)v325 + 1);
  this[134] = vmax_s32(0, 0);
  v326 = v695;
  v695 = 0;
  if (v326)
  {
    if (*(_DWORD *)v326 == 2)
      WTF::StringImpl::destroy(v326, v323);
    else
      *(_DWORD *)v326 -= 2;
  }
  v327 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v327)
  {
    if (v327[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v327 + 8))(v327);
    else
      --v327[2];
  }
  v328 = v691[0];
  v691[0] = 0;
  if (v328)
  {
    if (*(_DWORD *)v328 == 2)
      WTF::StringImpl::destroy(v328, v323);
    else
      *(_DWORD *)v328 -= 2;
  }
  if (v321)
  {
    if (*(_DWORD *)v321 == 2)
      WTF::StringImpl::destroy(v321, v323);
    else
      *(_DWORD *)v321 -= 2;
  }
  v329 = v694;
  v694 = 0;
  if (v329)
  {
    if (*(_DWORD *)v329 == 2)
      WTF::StringImpl::destroy(v329, v323);
    else
      *(_DWORD *)v329 -= 2;
  }
  this[135] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v330 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v331 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v333 = v696;
  v696 = 0;
  if (v333)
  {
    if (*(_DWORD *)v333 == 2)
      WTF::StringImpl::destroy(v333, v332);
    else
      *(_DWORD *)v333 -= 2;
  }
  *v331 = off_1E33948F0;
  if (v330)
    v334 = v330;
  else
    v334 = v252;
  *(_DWORD *)v334 += 2;
  v331[15] = v334;
  this[136] = (int32x2_t)v331;
  this[137].i32[0] = 0;
  this[137].i32[1] = *((_DWORD *)v334 + 1);
  this[138] = vmax_s32(0, 0);
  v335 = v695;
  v695 = 0;
  if (v335)
  {
    if (*(_DWORD *)v335 == 2)
      WTF::StringImpl::destroy(v335, v332);
    else
      *(_DWORD *)v335 -= 2;
  }
  v336 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v336)
  {
    if (v336[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v336 + 8))(v336);
    else
      --v336[2];
  }
  v337 = v691[0];
  v691[0] = 0;
  if (v337)
  {
    if (*(_DWORD *)v337 == 2)
      WTF::StringImpl::destroy(v337, v332);
    else
      *(_DWORD *)v337 -= 2;
  }
  if (v330)
  {
    if (*(_DWORD *)v330 == 2)
      WTF::StringImpl::destroy(v330, v332);
    else
      *(_DWORD *)v330 -= 2;
  }
  v338 = v694;
  v694 = 0;
  if (v338)
  {
    if (*(_DWORD *)v338 == 2)
      WTF::StringImpl::destroy(v338, v332);
    else
      *(_DWORD *)v338 -= 2;
  }
  this[139] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v339 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v340 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v342 = v696;
  v696 = 0;
  if (v342)
  {
    if (*(_DWORD *)v342 == 2)
      WTF::StringImpl::destroy(v342, v341);
    else
      *(_DWORD *)v342 -= 2;
  }
  *v340 = off_1E33948F0;
  if (v339)
    v343 = v339;
  else
    v343 = v252;
  *(_DWORD *)v343 += 2;
  v340[15] = v343;
  this[140] = (int32x2_t)v340;
  this[141].i32[0] = 0;
  this[141].i32[1] = *((_DWORD *)v343 + 1);
  this[142] = vmax_s32(0, 0);
  v344 = v695;
  v695 = 0;
  if (v344)
  {
    if (*(_DWORD *)v344 == 2)
      WTF::StringImpl::destroy(v344, v341);
    else
      *(_DWORD *)v344 -= 2;
  }
  v345 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v345)
  {
    if (v345[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v345 + 8))(v345);
    else
      --v345[2];
  }
  v346 = v691[0];
  v691[0] = 0;
  if (v346)
  {
    if (*(_DWORD *)v346 == 2)
      WTF::StringImpl::destroy(v346, v341);
    else
      *(_DWORD *)v346 -= 2;
  }
  if (v339)
  {
    if (*(_DWORD *)v339 == 2)
      WTF::StringImpl::destroy(v339, v341);
    else
      *(_DWORD *)v339 -= 2;
  }
  v347 = v694;
  v694 = 0;
  if (v347)
  {
    if (*(_DWORD *)v347 == 2)
      WTF::StringImpl::destroy(v347, v341);
    else
      *(_DWORD *)v347 -= 2;
  }
  this[143] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v348 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v349 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v351 = v696;
  v696 = 0;
  if (v351)
  {
    if (*(_DWORD *)v351 == 2)
      WTF::StringImpl::destroy(v351, v350);
    else
      *(_DWORD *)v351 -= 2;
  }
  *v349 = off_1E33948F0;
  if (v348)
    v352 = v348;
  else
    v352 = v252;
  *(_DWORD *)v352 += 2;
  v349[15] = v352;
  this[144] = (int32x2_t)v349;
  this[145].i32[0] = 0;
  this[145].i32[1] = *((_DWORD *)v352 + 1);
  this[146] = vmax_s32(0, 0);
  v353 = v695;
  v695 = 0;
  if (v353)
  {
    if (*(_DWORD *)v353 == 2)
      WTF::StringImpl::destroy(v353, v350);
    else
      *(_DWORD *)v353 -= 2;
  }
  v354 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v354)
  {
    if (v354[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v354 + 8))(v354);
    else
      --v354[2];
  }
  v355 = v691[0];
  v691[0] = 0;
  if (v355)
  {
    if (*(_DWORD *)v355 == 2)
      WTF::StringImpl::destroy(v355, v350);
    else
      *(_DWORD *)v355 -= 2;
  }
  if (v348)
  {
    if (*(_DWORD *)v348 == 2)
      WTF::StringImpl::destroy(v348, v350);
    else
      *(_DWORD *)v348 -= 2;
  }
  v356 = v694;
  v694 = 0;
  if (v356)
  {
    if (*(_DWORD *)v356 == 2)
      WTF::StringImpl::destroy(v356, v350);
    else
      *(_DWORD *)v356 -= 2;
  }
  this[147] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v357 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v358 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v360 = v696;
  v696 = 0;
  if (v360)
  {
    if (*(_DWORD *)v360 == 2)
      WTF::StringImpl::destroy(v360, v359);
    else
      *(_DWORD *)v360 -= 2;
  }
  *v358 = off_1E33948F0;
  if (v357)
    v361 = v357;
  else
    v361 = v252;
  *(_DWORD *)v361 += 2;
  v358[15] = v361;
  this[148] = (int32x2_t)v358;
  this[149].i32[0] = 0;
  this[149].i32[1] = *((_DWORD *)v361 + 1);
  this[150] = vmax_s32(0, 0);
  v362 = v695;
  v695 = 0;
  if (v362)
  {
    if (*(_DWORD *)v362 == 2)
      WTF::StringImpl::destroy(v362, v359);
    else
      *(_DWORD *)v362 -= 2;
  }
  v363 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v363)
  {
    if (v363[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v363 + 8))(v363);
    else
      --v363[2];
  }
  v364 = v691[0];
  v691[0] = 0;
  if (v364)
  {
    if (*(_DWORD *)v364 == 2)
      WTF::StringImpl::destroy(v364, v359);
    else
      *(_DWORD *)v364 -= 2;
  }
  if (v357)
  {
    if (*(_DWORD *)v357 == 2)
      WTF::StringImpl::destroy(v357, v359);
    else
      *(_DWORD *)v357 -= 2;
  }
  v365 = v694;
  v694 = 0;
  if (v365)
  {
    if (*(_DWORD *)v365 == 2)
      WTF::StringImpl::destroy(v365, v359);
    else
      *(_DWORD *)v365 -= 2;
  }
  this[151] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v366 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v367 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v369 = v696;
  v696 = 0;
  if (v369)
  {
    if (*(_DWORD *)v369 == 2)
      WTF::StringImpl::destroy(v369, v368);
    else
      *(_DWORD *)v369 -= 2;
  }
  *v367 = off_1E33948F0;
  if (v366)
    v370 = v366;
  else
    v370 = v252;
  *(_DWORD *)v370 += 2;
  v367[15] = v370;
  this[152] = (int32x2_t)v367;
  this[153].i32[0] = 0;
  this[153].i32[1] = *((_DWORD *)v370 + 1);
  this[154] = vmax_s32(0, 0);
  v371 = v695;
  v695 = 0;
  if (v371)
  {
    if (*(_DWORD *)v371 == 2)
      WTF::StringImpl::destroy(v371, v368);
    else
      *(_DWORD *)v371 -= 2;
  }
  v372 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v372)
  {
    if (v372[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v372 + 8))(v372);
    else
      --v372[2];
  }
  v373 = v691[0];
  v691[0] = 0;
  if (v373)
  {
    if (*(_DWORD *)v373 == 2)
      WTF::StringImpl::destroy(v373, v368);
    else
      *(_DWORD *)v373 -= 2;
  }
  if (v366)
  {
    if (*(_DWORD *)v366 == 2)
      WTF::StringImpl::destroy(v366, v368);
    else
      *(_DWORD *)v366 -= 2;
  }
  v374 = v694;
  v694 = 0;
  if (v374)
  {
    if (*(_DWORD *)v374 == 2)
      WTF::StringImpl::destroy(v374, v368);
    else
      *(_DWORD *)v374 -= 2;
  }
  this[155] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v375 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v376 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v378 = v696;
  v696 = 0;
  if (v378)
  {
    if (*(_DWORD *)v378 == 2)
      WTF::StringImpl::destroy(v378, v377);
    else
      *(_DWORD *)v378 -= 2;
  }
  *v376 = off_1E33948F0;
  if (v375)
    v379 = v375;
  else
    v379 = v252;
  *(_DWORD *)v379 += 2;
  v376[15] = v379;
  this[156] = (int32x2_t)v376;
  this[157].i32[0] = 0;
  this[157].i32[1] = *((_DWORD *)v379 + 1);
  this[158] = vmax_s32(0, 0);
  v380 = v695;
  v695 = 0;
  if (v380)
  {
    if (*(_DWORD *)v380 == 2)
      WTF::StringImpl::destroy(v380, v377);
    else
      *(_DWORD *)v380 -= 2;
  }
  v381 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v381)
  {
    if (v381[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v381 + 8))(v381);
    else
      --v381[2];
  }
  v382 = v691[0];
  v691[0] = 0;
  if (v382)
  {
    if (*(_DWORD *)v382 == 2)
      WTF::StringImpl::destroy(v382, v377);
    else
      *(_DWORD *)v382 -= 2;
  }
  if (v375)
  {
    if (*(_DWORD *)v375 == 2)
      WTF::StringImpl::destroy(v375, v377);
    else
      *(_DWORD *)v375 -= 2;
  }
  v383 = v694;
  v694 = 0;
  if (v383)
  {
    if (*(_DWORD *)v383 == 2)
      WTF::StringImpl::destroy(v383, v377);
    else
      *(_DWORD *)v383 -= 2;
  }
  this[159] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v384 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v385 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v387 = v696;
  v696 = 0;
  if (v387)
  {
    if (*(_DWORD *)v387 == 2)
      WTF::StringImpl::destroy(v387, v386);
    else
      *(_DWORD *)v387 -= 2;
  }
  *v385 = off_1E33948F0;
  if (v384)
    v388 = v384;
  else
    v388 = v252;
  *(_DWORD *)v388 += 2;
  v385[15] = v388;
  this[160] = (int32x2_t)v385;
  this[161].i32[0] = 0;
  this[161].i32[1] = *((_DWORD *)v388 + 1);
  this[162] = vmax_s32(0, 0);
  v389 = v695;
  v695 = 0;
  if (v389)
  {
    if (*(_DWORD *)v389 == 2)
      WTF::StringImpl::destroy(v389, v386);
    else
      *(_DWORD *)v389 -= 2;
  }
  v390 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v390)
  {
    if (v390[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v390 + 8))(v390);
    else
      --v390[2];
  }
  v391 = v691[0];
  v691[0] = 0;
  if (v391)
  {
    if (*(_DWORD *)v391 == 2)
      WTF::StringImpl::destroy(v391, v386);
    else
      *(_DWORD *)v391 -= 2;
  }
  if (v384)
  {
    if (*(_DWORD *)v384 == 2)
      WTF::StringImpl::destroy(v384, v386);
    else
      *(_DWORD *)v384 -= 2;
  }
  v392 = v694;
  v694 = 0;
  if (v392)
  {
    if (*(_DWORD *)v392 == 2)
      WTF::StringImpl::destroy(v392, v386);
    else
      *(_DWORD *)v392 -= 2;
  }
  this[163] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v393 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v394 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v396 = v696;
  v696 = 0;
  if (v396)
  {
    if (*(_DWORD *)v396 == 2)
      WTF::StringImpl::destroy(v396, v395);
    else
      *(_DWORD *)v396 -= 2;
  }
  *v394 = off_1E33948F0;
  if (v393)
    v397 = v393;
  else
    v397 = v252;
  *(_DWORD *)v397 += 2;
  v394[15] = v397;
  this[164] = (int32x2_t)v394;
  this[165].i32[0] = 0;
  this[165].i32[1] = *((_DWORD *)v397 + 1);
  this[166] = vmax_s32(0, 0);
  v398 = v695;
  v695 = 0;
  if (v398)
  {
    if (*(_DWORD *)v398 == 2)
      WTF::StringImpl::destroy(v398, v395);
    else
      *(_DWORD *)v398 -= 2;
  }
  v399 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v399)
  {
    if (v399[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v399 + 8))(v399);
    else
      --v399[2];
  }
  v400 = v691[0];
  v691[0] = 0;
  if (v400)
  {
    if (*(_DWORD *)v400 == 2)
      WTF::StringImpl::destroy(v400, v395);
    else
      *(_DWORD *)v400 -= 2;
  }
  if (v393)
  {
    if (*(_DWORD *)v393 == 2)
      WTF::StringImpl::destroy(v393, v395);
    else
      *(_DWORD *)v393 -= 2;
  }
  v401 = v694;
  v694 = 0;
  if (v401)
  {
    if (*(_DWORD *)v401 == 2)
      WTF::StringImpl::destroy(v401, v395);
    else
      *(_DWORD *)v401 -= 2;
  }
  this[167] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v402 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v403 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v405 = v696;
  v696 = 0;
  if (v405)
  {
    if (*(_DWORD *)v405 == 2)
      WTF::StringImpl::destroy(v405, v404);
    else
      *(_DWORD *)v405 -= 2;
  }
  *v403 = off_1E33948F0;
  if (v402)
    v406 = v402;
  else
    v406 = v252;
  *(_DWORD *)v406 += 2;
  v403[15] = v406;
  this[168] = (int32x2_t)v403;
  this[169].i32[0] = 0;
  this[169].i32[1] = *((_DWORD *)v406 + 1);
  this[170] = vmax_s32(0, 0);
  v407 = v695;
  v695 = 0;
  if (v407)
  {
    if (*(_DWORD *)v407 == 2)
      WTF::StringImpl::destroy(v407, v404);
    else
      *(_DWORD *)v407 -= 2;
  }
  v408 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v408)
  {
    if (v408[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v408 + 8))(v408);
    else
      --v408[2];
  }
  v409 = v691[0];
  v691[0] = 0;
  if (v409)
  {
    if (*(_DWORD *)v409 == 2)
      WTF::StringImpl::destroy(v409, v404);
    else
      *(_DWORD *)v409 -= 2;
  }
  if (v402)
  {
    if (*(_DWORD *)v402 == 2)
      WTF::StringImpl::destroy(v402, v404);
    else
      *(_DWORD *)v402 -= 2;
  }
  v410 = v694;
  v694 = 0;
  if (v410)
  {
    if (*(_DWORD *)v410 == 2)
      WTF::StringImpl::destroy(v410, v404);
    else
      *(_DWORD *)v410 -= 2;
  }
  this[171] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v411 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v412 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v414 = v696;
  v696 = 0;
  if (v414)
  {
    if (*(_DWORD *)v414 == 2)
      WTF::StringImpl::destroy(v414, v413);
    else
      *(_DWORD *)v414 -= 2;
  }
  *v412 = off_1E33948F0;
  if (v411)
    v415 = v411;
  else
    v415 = v252;
  *(_DWORD *)v415 += 2;
  v412[15] = v415;
  this[172] = (int32x2_t)v412;
  this[173].i32[0] = 0;
  this[173].i32[1] = *((_DWORD *)v415 + 1);
  this[174] = vmax_s32(0, 0);
  v416 = v695;
  v695 = 0;
  if (v416)
  {
    if (*(_DWORD *)v416 == 2)
      WTF::StringImpl::destroy(v416, v413);
    else
      *(_DWORD *)v416 -= 2;
  }
  v417 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v417)
  {
    if (v417[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v417 + 8))(v417);
    else
      --v417[2];
  }
  v418 = v691[0];
  v691[0] = 0;
  if (v418)
  {
    if (*(_DWORD *)v418 == 2)
      WTF::StringImpl::destroy(v418, v413);
    else
      *(_DWORD *)v418 -= 2;
  }
  if (v411)
  {
    if (*(_DWORD *)v411 == 2)
      WTF::StringImpl::destroy(v411, v413);
    else
      *(_DWORD *)v411 -= 2;
  }
  v419 = v694;
  v694 = 0;
  if (v419)
  {
    if (*(_DWORD *)v419 == 2)
      WTF::StringImpl::destroy(v419, v413);
    else
      *(_DWORD *)v419 -= 2;
  }
  this[175] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v420 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v421 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v423 = v696;
  v696 = 0;
  if (v423)
  {
    if (*(_DWORD *)v423 == 2)
      WTF::StringImpl::destroy(v423, v422);
    else
      *(_DWORD *)v423 -= 2;
  }
  *v421 = off_1E33948F0;
  if (v420)
    v424 = v420;
  else
    v424 = v252;
  *(_DWORD *)v424 += 2;
  v421[15] = v424;
  this[176] = (int32x2_t)v421;
  this[177].i32[0] = 0;
  this[177].i32[1] = *((_DWORD *)v424 + 1);
  this[178] = vmax_s32(0, 0);
  v425 = v695;
  v695 = 0;
  if (v425)
  {
    if (*(_DWORD *)v425 == 2)
      WTF::StringImpl::destroy(v425, v422);
    else
      *(_DWORD *)v425 -= 2;
  }
  v426 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v426)
  {
    if (v426[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v426 + 8))(v426);
    else
      --v426[2];
  }
  v427 = v691[0];
  v691[0] = 0;
  if (v427)
  {
    if (*(_DWORD *)v427 == 2)
      WTF::StringImpl::destroy(v427, v422);
    else
      *(_DWORD *)v427 -= 2;
  }
  if (v420)
  {
    if (*(_DWORD *)v420 == 2)
      WTF::StringImpl::destroy(v420, v422);
    else
      *(_DWORD *)v420 -= 2;
  }
  v428 = v694;
  v694 = 0;
  if (v428)
  {
    if (*(_DWORD *)v428 == 2)
      WTF::StringImpl::destroy(v428, v422);
    else
      *(_DWORD *)v428 -= 2;
  }
  this[179] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v429 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v430 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v432 = v696;
  v696 = 0;
  if (v432)
  {
    if (*(_DWORD *)v432 == 2)
      WTF::StringImpl::destroy(v432, v431);
    else
      *(_DWORD *)v432 -= 2;
  }
  *v430 = off_1E33948F0;
  if (v429)
    v433 = v429;
  else
    v433 = v252;
  *(_DWORD *)v433 += 2;
  v430[15] = v433;
  this[180] = (int32x2_t)v430;
  this[181].i32[0] = 0;
  this[181].i32[1] = *((_DWORD *)v433 + 1);
  this[182] = vmax_s32(0, 0);
  v434 = v695;
  v695 = 0;
  if (v434)
  {
    if (*(_DWORD *)v434 == 2)
      WTF::StringImpl::destroy(v434, v431);
    else
      *(_DWORD *)v434 -= 2;
  }
  v435 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v435)
  {
    if (v435[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v435 + 8))(v435);
    else
      --v435[2];
  }
  v436 = v691[0];
  v691[0] = 0;
  if (v436)
  {
    if (*(_DWORD *)v436 == 2)
      WTF::StringImpl::destroy(v436, v431);
    else
      *(_DWORD *)v436 -= 2;
  }
  if (v429)
  {
    if (*(_DWORD *)v429 == 2)
      WTF::StringImpl::destroy(v429, v431);
    else
      *(_DWORD *)v429 -= 2;
  }
  v437 = v694;
  v694 = 0;
  if (v437)
  {
    if (*(_DWORD *)v437 == 2)
      WTF::StringImpl::destroy(v437, v431);
    else
      *(_DWORD *)v437 -= 2;
  }
  this[183] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v438 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v439 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v441 = v696;
  v696 = 0;
  if (v441)
  {
    if (*(_DWORD *)v441 == 2)
      WTF::StringImpl::destroy(v441, v440);
    else
      *(_DWORD *)v441 -= 2;
  }
  *v439 = off_1E33948F0;
  if (v438)
    v442 = v438;
  else
    v442 = v252;
  *(_DWORD *)v442 += 2;
  v439[15] = v442;
  this[184] = (int32x2_t)v439;
  this[185].i32[0] = 0;
  this[185].i32[1] = *((_DWORD *)v442 + 1);
  this[186] = vmax_s32(0, 0);
  v443 = v695;
  v695 = 0;
  if (v443)
  {
    if (*(_DWORD *)v443 == 2)
      WTF::StringImpl::destroy(v443, v440);
    else
      *(_DWORD *)v443 -= 2;
  }
  v444 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v444)
  {
    if (v444[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v444 + 8))(v444);
    else
      --v444[2];
  }
  v445 = v691[0];
  v691[0] = 0;
  if (v445)
  {
    if (*(_DWORD *)v445 == 2)
      WTF::StringImpl::destroy(v445, v440);
    else
      *(_DWORD *)v445 -= 2;
  }
  if (v438)
  {
    if (*(_DWORD *)v438 == 2)
      WTF::StringImpl::destroy(v438, v440);
    else
      *(_DWORD *)v438 -= 2;
  }
  v446 = v694;
  v694 = 0;
  if (v446)
  {
    if (*(_DWORD *)v446 == 2)
      WTF::StringImpl::destroy(v446, v440);
    else
      *(_DWORD *)v446 -= 2;
  }
  this[187] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v447 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v448 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v450 = v696;
  v696 = 0;
  if (v450)
  {
    if (*(_DWORD *)v450 == 2)
      WTF::StringImpl::destroy(v450, v449);
    else
      *(_DWORD *)v450 -= 2;
  }
  *v448 = off_1E33948F0;
  if (v447)
    v451 = v447;
  else
    v451 = v252;
  *(_DWORD *)v451 += 2;
  v448[15] = v451;
  this[188] = (int32x2_t)v448;
  this[189].i32[0] = 0;
  this[189].i32[1] = *((_DWORD *)v451 + 1);
  this[190] = vmax_s32(0, 0);
  v452 = v695;
  v695 = 0;
  if (v452)
  {
    if (*(_DWORD *)v452 == 2)
      WTF::StringImpl::destroy(v452, v449);
    else
      *(_DWORD *)v452 -= 2;
  }
  v453 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v453)
  {
    if (v453[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v453 + 8))(v453);
    else
      --v453[2];
  }
  v454 = v691[0];
  v691[0] = 0;
  if (v454)
  {
    if (*(_DWORD *)v454 == 2)
      WTF::StringImpl::destroy(v454, v449);
    else
      *(_DWORD *)v454 -= 2;
  }
  if (v447)
  {
    if (*(_DWORD *)v447 == 2)
      WTF::StringImpl::destroy(v447, v449);
    else
      *(_DWORD *)v447 -= 2;
  }
  v455 = v694;
  v694 = 0;
  if (v455)
  {
    if (*(_DWORD *)v455 == 2)
      WTF::StringImpl::destroy(v455, v449);
    else
      *(_DWORD *)v455 -= 2;
  }
  this[191] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v456 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v457 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v459 = v696;
  v696 = 0;
  if (v459)
  {
    if (*(_DWORD *)v459 == 2)
      WTF::StringImpl::destroy(v459, v458);
    else
      *(_DWORD *)v459 -= 2;
  }
  *v457 = off_1E33948F0;
  if (v456)
    v460 = v456;
  else
    v460 = v252;
  *(_DWORD *)v460 += 2;
  v457[15] = v460;
  this[192] = (int32x2_t)v457;
  this[193].i32[0] = 0;
  this[193].i32[1] = *((_DWORD *)v460 + 1);
  this[194] = vmax_s32(0, 0);
  v461 = v695;
  v695 = 0;
  if (v461)
  {
    if (*(_DWORD *)v461 == 2)
      WTF::StringImpl::destroy(v461, v458);
    else
      *(_DWORD *)v461 -= 2;
  }
  v462 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v462)
  {
    if (v462[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v462 + 8))(v462);
    else
      --v462[2];
  }
  v463 = v691[0];
  v691[0] = 0;
  if (v463)
  {
    if (*(_DWORD *)v463 == 2)
      WTF::StringImpl::destroy(v463, v458);
    else
      *(_DWORD *)v463 -= 2;
  }
  if (v456)
  {
    if (*(_DWORD *)v456 == 2)
      WTF::StringImpl::destroy(v456, v458);
    else
      *(_DWORD *)v456 -= 2;
  }
  v464 = v694;
  v694 = 0;
  if (v464)
  {
    if (*(_DWORD *)v464 == 2)
      WTF::StringImpl::destroy(v464, v458);
    else
      *(_DWORD *)v464 -= 2;
  }
  this[195] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v465 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v466 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v468 = v696;
  v696 = 0;
  if (v468)
  {
    if (*(_DWORD *)v468 == 2)
      WTF::StringImpl::destroy(v468, v467);
    else
      *(_DWORD *)v468 -= 2;
  }
  *v466 = off_1E33948F0;
  if (v465)
    v469 = v465;
  else
    v469 = v252;
  *(_DWORD *)v469 += 2;
  v466[15] = v469;
  this[196] = (int32x2_t)v466;
  this[197].i32[0] = 0;
  this[197].i32[1] = *((_DWORD *)v469 + 1);
  this[198] = vmax_s32(0, 0);
  v470 = v695;
  v695 = 0;
  if (v470)
  {
    if (*(_DWORD *)v470 == 2)
      WTF::StringImpl::destroy(v470, v467);
    else
      *(_DWORD *)v470 -= 2;
  }
  v471 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v471)
  {
    if (v471[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v471 + 8))(v471);
    else
      --v471[2];
  }
  v472 = v691[0];
  v691[0] = 0;
  if (v472)
  {
    if (*(_DWORD *)v472 == 2)
      WTF::StringImpl::destroy(v472, v467);
    else
      *(_DWORD *)v472 -= 2;
  }
  if (v465)
  {
    if (*(_DWORD *)v465 == 2)
      WTF::StringImpl::destroy(v465, v467);
    else
      *(_DWORD *)v465 -= 2;
  }
  v473 = v694;
  v694 = 0;
  if (v473)
  {
    if (*(_DWORD *)v473 == 2)
      WTF::StringImpl::destroy(v473, v467);
    else
      *(_DWORD *)v473 -= 2;
  }
  this[199] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v474 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v475 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v477 = v696;
  v696 = 0;
  if (v477)
  {
    if (*(_DWORD *)v477 == 2)
      WTF::StringImpl::destroy(v477, v476);
    else
      *(_DWORD *)v477 -= 2;
  }
  *v475 = off_1E33948F0;
  if (v474)
    v478 = v474;
  else
    v478 = v252;
  *(_DWORD *)v478 += 2;
  v475[15] = v478;
  this[200] = (int32x2_t)v475;
  this[201].i32[0] = 0;
  this[201].i32[1] = *((_DWORD *)v478 + 1);
  this[202] = vmax_s32(0, 0);
  v479 = v695;
  v695 = 0;
  if (v479)
  {
    if (*(_DWORD *)v479 == 2)
      WTF::StringImpl::destroy(v479, v476);
    else
      *(_DWORD *)v479 -= 2;
  }
  v480 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v480)
  {
    if (v480[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v480 + 8))(v480);
    else
      --v480[2];
  }
  v481 = v691[0];
  v691[0] = 0;
  if (v481)
  {
    if (*(_DWORD *)v481 == 2)
      WTF::StringImpl::destroy(v481, v476);
    else
      *(_DWORD *)v481 -= 2;
  }
  if (v474)
  {
    if (*(_DWORD *)v474 == 2)
      WTF::StringImpl::destroy(v474, v476);
    else
      *(_DWORD *)v474 -= 2;
  }
  v482 = v694;
  v694 = 0;
  if (v482)
  {
    if (*(_DWORD *)v482 == 2)
      WTF::StringImpl::destroy(v482, v476);
    else
      *(_DWORD *)v482 -= 2;
  }
  this[203] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v483 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v484 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v486 = v696;
  v696 = 0;
  if (v486)
  {
    if (*(_DWORD *)v486 == 2)
      WTF::StringImpl::destroy(v486, v485);
    else
      *(_DWORD *)v486 -= 2;
  }
  *v484 = off_1E33948F0;
  if (v483)
    v487 = v483;
  else
    v487 = v252;
  *(_DWORD *)v487 += 2;
  v484[15] = v487;
  this[204] = (int32x2_t)v484;
  this[205].i32[0] = 0;
  this[205].i32[1] = *((_DWORD *)v487 + 1);
  this[206] = vmax_s32(0, 0);
  v488 = v695;
  v695 = 0;
  if (v488)
  {
    if (*(_DWORD *)v488 == 2)
      WTF::StringImpl::destroy(v488, v485);
    else
      *(_DWORD *)v488 -= 2;
  }
  v489 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v489)
  {
    if (v489[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v489 + 8))(v489);
    else
      --v489[2];
  }
  v490 = v691[0];
  v691[0] = 0;
  if (v490)
  {
    if (*(_DWORD *)v490 == 2)
      WTF::StringImpl::destroy(v490, v485);
    else
      *(_DWORD *)v490 -= 2;
  }
  if (v483)
  {
    if (*(_DWORD *)v483 == 2)
      WTF::StringImpl::destroy(v483, v485);
    else
      *(_DWORD *)v483 -= 2;
  }
  v491 = v694;
  v694 = 0;
  if (v491)
  {
    if (*(_DWORD *)v491 == 2)
      WTF::StringImpl::destroy(v491, v485);
    else
      *(_DWORD *)v491 -= 2;
  }
  this[207] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v492 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v493 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v495 = v696;
  v696 = 0;
  if (v495)
  {
    if (*(_DWORD *)v495 == 2)
      WTF::StringImpl::destroy(v495, v494);
    else
      *(_DWORD *)v495 -= 2;
  }
  *v493 = off_1E33948F0;
  if (v492)
    v496 = v492;
  else
    v496 = v252;
  *(_DWORD *)v496 += 2;
  v493[15] = v496;
  this[208] = (int32x2_t)v493;
  this[209].i32[0] = 0;
  this[209].i32[1] = *((_DWORD *)v496 + 1);
  this[210] = vmax_s32(0, 0);
  v497 = v695;
  v695 = 0;
  if (v497)
  {
    if (*(_DWORD *)v497 == 2)
      WTF::StringImpl::destroy(v497, v494);
    else
      *(_DWORD *)v497 -= 2;
  }
  v498 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v498)
  {
    if (v498[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v498 + 8))(v498);
    else
      --v498[2];
  }
  v499 = v691[0];
  v691[0] = 0;
  if (v499)
  {
    if (*(_DWORD *)v499 == 2)
      WTF::StringImpl::destroy(v499, v494);
    else
      *(_DWORD *)v499 -= 2;
  }
  if (v492)
  {
    if (*(_DWORD *)v492 == 2)
      WTF::StringImpl::destroy(v492, v494);
    else
      *(_DWORD *)v492 -= 2;
  }
  v500 = v694;
  v694 = 0;
  if (v500)
  {
    if (*(_DWORD *)v500 == 2)
      WTF::StringImpl::destroy(v500, v494);
    else
      *(_DWORD *)v500 -= 2;
  }
  this[211] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v501 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v502 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v504 = v696;
  v696 = 0;
  if (v504)
  {
    if (*(_DWORD *)v504 == 2)
      WTF::StringImpl::destroy(v504, v503);
    else
      *(_DWORD *)v504 -= 2;
  }
  *v502 = off_1E33948F0;
  if (v501)
    v505 = v501;
  else
    v505 = v252;
  *(_DWORD *)v505 += 2;
  v502[15] = v505;
  this[212] = (int32x2_t)v502;
  this[213].i32[0] = 0;
  this[213].i32[1] = *((_DWORD *)v505 + 1);
  this[214] = vmax_s32(0, 0);
  v506 = v695;
  v695 = 0;
  if (v506)
  {
    if (*(_DWORD *)v506 == 2)
      WTF::StringImpl::destroy(v506, v503);
    else
      *(_DWORD *)v506 -= 2;
  }
  v507 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v507)
  {
    if (v507[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v507 + 8))(v507);
    else
      --v507[2];
  }
  v508 = v691[0];
  v691[0] = 0;
  if (v508)
  {
    if (*(_DWORD *)v508 == 2)
      WTF::StringImpl::destroy(v508, v503);
    else
      *(_DWORD *)v508 -= 2;
  }
  if (v501)
  {
    if (*(_DWORD *)v501 == 2)
      WTF::StringImpl::destroy(v501, v503);
    else
      *(_DWORD *)v501 -= 2;
  }
  v509 = v694;
  v694 = 0;
  if (v509)
  {
    if (*(_DWORD *)v509 == 2)
      WTF::StringImpl::destroy(v509, v503);
    else
      *(_DWORD *)v509 -= 2;
  }
  this[215] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v510 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v511 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v513 = v696;
  v696 = 0;
  if (v513)
  {
    if (*(_DWORD *)v513 == 2)
      WTF::StringImpl::destroy(v513, v512);
    else
      *(_DWORD *)v513 -= 2;
  }
  *v511 = off_1E33948F0;
  if (v510)
    v514 = v510;
  else
    v514 = v252;
  *(_DWORD *)v514 += 2;
  v511[15] = v514;
  this[216] = (int32x2_t)v511;
  this[217].i32[0] = 0;
  this[217].i32[1] = *((_DWORD *)v514 + 1);
  this[218] = vmax_s32(0, 0);
  v515 = v695;
  v695 = 0;
  if (v515)
  {
    if (*(_DWORD *)v515 == 2)
      WTF::StringImpl::destroy(v515, v512);
    else
      *(_DWORD *)v515 -= 2;
  }
  v516 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v516)
  {
    if (v516[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v516 + 8))(v516);
    else
      --v516[2];
  }
  v517 = v691[0];
  v691[0] = 0;
  if (v517)
  {
    if (*(_DWORD *)v517 == 2)
      WTF::StringImpl::destroy(v517, v512);
    else
      *(_DWORD *)v517 -= 2;
  }
  if (v510)
  {
    if (*(_DWORD *)v510 == 2)
      WTF::StringImpl::destroy(v510, v512);
    else
      *(_DWORD *)v510 -= 2;
  }
  v518 = v694;
  v694 = 0;
  if (v518)
  {
    if (*(_DWORD *)v518 == 2)
      WTF::StringImpl::destroy(v518, v512);
    else
      *(_DWORD *)v518 -= 2;
  }
  this[219] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v519 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v520 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v522 = v696;
  v696 = 0;
  if (v522)
  {
    if (*(_DWORD *)v522 == 2)
      WTF::StringImpl::destroy(v522, v521);
    else
      *(_DWORD *)v522 -= 2;
  }
  *v520 = off_1E33948F0;
  if (v519)
    v523 = v519;
  else
    v523 = v252;
  *(_DWORD *)v523 += 2;
  v520[15] = v523;
  this[220] = (int32x2_t)v520;
  this[221].i32[0] = 0;
  this[221].i32[1] = *((_DWORD *)v523 + 1);
  this[222] = vmax_s32(0, 0);
  v524 = v695;
  v695 = 0;
  if (v524)
  {
    if (*(_DWORD *)v524 == 2)
      WTF::StringImpl::destroy(v524, v521);
    else
      *(_DWORD *)v524 -= 2;
  }
  v525 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v525)
  {
    if (v525[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v525 + 8))(v525);
    else
      --v525[2];
  }
  v526 = v691[0];
  v691[0] = 0;
  if (v526)
  {
    if (*(_DWORD *)v526 == 2)
      WTF::StringImpl::destroy(v526, v521);
    else
      *(_DWORD *)v526 -= 2;
  }
  if (v519)
  {
    if (*(_DWORD *)v519 == 2)
      WTF::StringImpl::destroy(v519, v521);
    else
      *(_DWORD *)v519 -= 2;
  }
  v527 = v694;
  v694 = 0;
  if (v527)
  {
    if (*(_DWORD *)v527 == 2)
      WTF::StringImpl::destroy(v527, v521);
    else
      *(_DWORD *)v527 -= 2;
  }
  this[223] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v528 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v529 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v531 = v696;
  v696 = 0;
  if (v531)
  {
    if (*(_DWORD *)v531 == 2)
      WTF::StringImpl::destroy(v531, v530);
    else
      *(_DWORD *)v531 -= 2;
  }
  *v529 = off_1E33948F0;
  if (v528)
    v532 = v528;
  else
    v532 = v252;
  *(_DWORD *)v532 += 2;
  v529[15] = v532;
  this[224] = (int32x2_t)v529;
  this[225].i32[0] = 0;
  this[225].i32[1] = *((_DWORD *)v532 + 1);
  this[226] = vmax_s32(0, 0);
  v533 = v695;
  v695 = 0;
  if (v533)
  {
    if (*(_DWORD *)v533 == 2)
      WTF::StringImpl::destroy(v533, v530);
    else
      *(_DWORD *)v533 -= 2;
  }
  v534 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v534)
  {
    if (v534[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v534 + 8))(v534);
    else
      --v534[2];
  }
  v535 = v691[0];
  v691[0] = 0;
  if (v535)
  {
    if (*(_DWORD *)v535 == 2)
      WTF::StringImpl::destroy(v535, v530);
    else
      *(_DWORD *)v535 -= 2;
  }
  if (v528)
  {
    if (*(_DWORD *)v528 == 2)
      WTF::StringImpl::destroy(v528, v530);
    else
      *(_DWORD *)v528 -= 2;
  }
  v536 = v694;
  v694 = 0;
  if (v536)
  {
    if (*(_DWORD *)v536 == 2)
      WTF::StringImpl::destroy(v536, v530);
    else
      *(_DWORD *)v536 -= 2;
  }
  this[227] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v537 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v538 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v540 = v696;
  v696 = 0;
  if (v540)
  {
    if (*(_DWORD *)v540 == 2)
      WTF::StringImpl::destroy(v540, v539);
    else
      *(_DWORD *)v540 -= 2;
  }
  *v538 = off_1E33948F0;
  if (v537)
    v541 = v537;
  else
    v541 = v252;
  *(_DWORD *)v541 += 2;
  v538[15] = v541;
  this[228] = (int32x2_t)v538;
  this[229].i32[0] = 0;
  this[229].i32[1] = *((_DWORD *)v541 + 1);
  this[230] = vmax_s32(0, 0);
  v542 = v695;
  v695 = 0;
  if (v542)
  {
    if (*(_DWORD *)v542 == 2)
      WTF::StringImpl::destroy(v542, v539);
    else
      *(_DWORD *)v542 -= 2;
  }
  v543 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v543)
  {
    if (v543[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v543 + 8))(v543);
    else
      --v543[2];
  }
  v544 = v691[0];
  v691[0] = 0;
  if (v544)
  {
    if (*(_DWORD *)v544 == 2)
      WTF::StringImpl::destroy(v544, v539);
    else
      *(_DWORD *)v544 -= 2;
  }
  if (v537)
  {
    if (*(_DWORD *)v537 == 2)
      WTF::StringImpl::destroy(v537, v539);
    else
      *(_DWORD *)v537 -= 2;
  }
  v545 = v694;
  v694 = 0;
  if (v545)
  {
    if (*(_DWORD *)v545 == 2)
      WTF::StringImpl::destroy(v545, v539);
    else
      *(_DWORD *)v545 -= 2;
  }
  this[231] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v546 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v547 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v549 = v696;
  v696 = 0;
  if (v549)
  {
    if (*(_DWORD *)v549 == 2)
      WTF::StringImpl::destroy(v549, v548);
    else
      *(_DWORD *)v549 -= 2;
  }
  *v547 = off_1E33948F0;
  if (v546)
    v550 = v546;
  else
    v550 = v252;
  *(_DWORD *)v550 += 2;
  v547[15] = v550;
  this[232] = (int32x2_t)v547;
  this[233].i32[0] = 0;
  this[233].i32[1] = *((_DWORD *)v550 + 1);
  this[234] = vmax_s32(0, 0);
  v551 = v695;
  v695 = 0;
  if (v551)
  {
    if (*(_DWORD *)v551 == 2)
      WTF::StringImpl::destroy(v551, v548);
    else
      *(_DWORD *)v551 -= 2;
  }
  v552 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v552)
  {
    if (v552[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v552 + 8))(v552);
    else
      --v552[2];
  }
  v553 = v691[0];
  v691[0] = 0;
  if (v553)
  {
    if (*(_DWORD *)v553 == 2)
      WTF::StringImpl::destroy(v553, v548);
    else
      *(_DWORD *)v553 -= 2;
  }
  if (v546)
  {
    if (*(_DWORD *)v546 == 2)
      WTF::StringImpl::destroy(v546, v548);
    else
      *(_DWORD *)v546 -= 2;
  }
  v554 = v694;
  v694 = 0;
  if (v554)
  {
    if (*(_DWORD *)v554 == 2)
      WTF::StringImpl::destroy(v554, v548);
    else
      *(_DWORD *)v554 -= 2;
  }
  this[235] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v555 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v556 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v558 = v696;
  v696 = 0;
  if (v558)
  {
    if (*(_DWORD *)v558 == 2)
      WTF::StringImpl::destroy(v558, v557);
    else
      *(_DWORD *)v558 -= 2;
  }
  *v556 = off_1E33948F0;
  if (v555)
    v559 = v555;
  else
    v559 = v252;
  *(_DWORD *)v559 += 2;
  v556[15] = v559;
  this[236] = (int32x2_t)v556;
  this[237].i32[0] = 0;
  this[237].i32[1] = *((_DWORD *)v559 + 1);
  this[238] = vmax_s32(0, 0);
  v560 = v695;
  v695 = 0;
  if (v560)
  {
    if (*(_DWORD *)v560 == 2)
      WTF::StringImpl::destroy(v560, v557);
    else
      *(_DWORD *)v560 -= 2;
  }
  v561 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v561)
  {
    if (v561[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v561 + 8))(v561);
    else
      --v561[2];
  }
  v562 = v691[0];
  v691[0] = 0;
  if (v562)
  {
    if (*(_DWORD *)v562 == 2)
      WTF::StringImpl::destroy(v562, v557);
    else
      *(_DWORD *)v562 -= 2;
  }
  if (v555)
  {
    if (*(_DWORD *)v555 == 2)
      WTF::StringImpl::destroy(v555, v557);
    else
      *(_DWORD *)v555 -= 2;
  }
  v563 = v694;
  v694 = 0;
  if (v563)
  {
    if (*(_DWORD *)v563 == 2)
      WTF::StringImpl::destroy(v563, v557);
    else
      *(_DWORD *)v563 -= 2;
  }
  this[239] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v564 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v565 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v567 = v696;
  v696 = 0;
  if (v567)
  {
    if (*(_DWORD *)v567 == 2)
      WTF::StringImpl::destroy(v567, v566);
    else
      *(_DWORD *)v567 -= 2;
  }
  *v565 = off_1E33948F0;
  if (v564)
    v568 = v564;
  else
    v568 = v252;
  *(_DWORD *)v568 += 2;
  v565[15] = v568;
  this[240] = (int32x2_t)v565;
  this[241].i32[0] = 0;
  this[241].i32[1] = *((_DWORD *)v568 + 1);
  this[242] = vmax_s32(0, 0);
  v569 = v695;
  v695 = 0;
  if (v569)
  {
    if (*(_DWORD *)v569 == 2)
      WTF::StringImpl::destroy(v569, v566);
    else
      *(_DWORD *)v569 -= 2;
  }
  v570 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v570)
  {
    if (v570[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v570 + 8))(v570);
    else
      --v570[2];
  }
  v571 = v691[0];
  v691[0] = 0;
  if (v571)
  {
    if (*(_DWORD *)v571 == 2)
      WTF::StringImpl::destroy(v571, v566);
    else
      *(_DWORD *)v571 -= 2;
  }
  if (v564)
  {
    if (*(_DWORD *)v564 == 2)
      WTF::StringImpl::destroy(v564, v566);
    else
      *(_DWORD *)v564 -= 2;
  }
  v572 = v694;
  v694 = 0;
  if (v572)
  {
    if (*(_DWORD *)v572 == 2)
      WTF::StringImpl::destroy(v572, v566);
    else
      *(_DWORD *)v572 -= 2;
  }
  this[243] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v573 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v574 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v576 = v696;
  v696 = 0;
  if (v576)
  {
    if (*(_DWORD *)v576 == 2)
      WTF::StringImpl::destroy(v576, v575);
    else
      *(_DWORD *)v576 -= 2;
  }
  *v574 = off_1E33948F0;
  if (v573)
    v577 = v573;
  else
    v577 = v252;
  *(_DWORD *)v577 += 2;
  v574[15] = v577;
  this[244] = (int32x2_t)v574;
  this[245].i32[0] = 0;
  this[245].i32[1] = *((_DWORD *)v577 + 1);
  this[246] = vmax_s32(0, 0);
  v578 = v695;
  v695 = 0;
  if (v578)
  {
    if (*(_DWORD *)v578 == 2)
      WTF::StringImpl::destroy(v578, v575);
    else
      *(_DWORD *)v578 -= 2;
  }
  v579 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v579)
  {
    if (v579[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v579 + 8))(v579);
    else
      --v579[2];
  }
  v580 = v691[0];
  v691[0] = 0;
  if (v580)
  {
    if (*(_DWORD *)v580 == 2)
      WTF::StringImpl::destroy(v580, v575);
    else
      *(_DWORD *)v580 -= 2;
  }
  if (v573)
  {
    if (*(_DWORD *)v573 == 2)
      WTF::StringImpl::destroy(v573, v575);
    else
      *(_DWORD *)v573 -= 2;
  }
  v581 = v694;
  v694 = 0;
  if (v581)
  {
    if (*(_DWORD *)v581 == 2)
      WTF::StringImpl::destroy(v581, v575);
    else
      *(_DWORD *)v581 -= 2;
  }
  this[247] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v582 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v583 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v585 = v696;
  v696 = 0;
  if (v585)
  {
    if (*(_DWORD *)v585 == 2)
      WTF::StringImpl::destroy(v585, v584);
    else
      *(_DWORD *)v585 -= 2;
  }
  *v583 = off_1E33948F0;
  if (v582)
    v586 = v582;
  else
    v586 = v252;
  *(_DWORD *)v586 += 2;
  v583[15] = v586;
  this[248] = (int32x2_t)v583;
  this[249].i32[0] = 0;
  this[249].i32[1] = *((_DWORD *)v586 + 1);
  this[250] = vmax_s32(0, 0);
  v587 = v695;
  v695 = 0;
  if (v587)
  {
    if (*(_DWORD *)v587 == 2)
      WTF::StringImpl::destroy(v587, v584);
    else
      *(_DWORD *)v587 -= 2;
  }
  v588 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v588)
  {
    if (v588[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v588 + 8))(v588);
    else
      --v588[2];
  }
  v589 = v691[0];
  v691[0] = 0;
  if (v589)
  {
    if (*(_DWORD *)v589 == 2)
      WTF::StringImpl::destroy(v589, v584);
    else
      *(_DWORD *)v589 -= 2;
  }
  if (v582)
  {
    if (*(_DWORD *)v582 == 2)
      WTF::StringImpl::destroy(v582, v584);
    else
      *(_DWORD *)v582 -= 2;
  }
  v590 = v694;
  v694 = 0;
  if (v590)
  {
    if (*(_DWORD *)v590 == 2)
      WTF::StringImpl::destroy(v590, v584);
    else
      *(_DWORD *)v590 -= 2;
  }
  this[251] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v591 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v592 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v594 = v696;
  v696 = 0;
  if (v594)
  {
    if (*(_DWORD *)v594 == 2)
      WTF::StringImpl::destroy(v594, v593);
    else
      *(_DWORD *)v594 -= 2;
  }
  *v592 = off_1E33948F0;
  if (v591)
    v595 = v591;
  else
    v595 = v252;
  *(_DWORD *)v595 += 2;
  v592[15] = v595;
  this[252] = (int32x2_t)v592;
  this[253].i32[0] = 0;
  this[253].i32[1] = *((_DWORD *)v595 + 1);
  this[254] = vmax_s32(0, 0);
  v596 = v695;
  v695 = 0;
  if (v596)
  {
    if (*(_DWORD *)v596 == 2)
      WTF::StringImpl::destroy(v596, v593);
    else
      *(_DWORD *)v596 -= 2;
  }
  v597 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v597)
  {
    if (v597[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v597 + 8))(v597);
    else
      --v597[2];
  }
  v598 = v691[0];
  v691[0] = 0;
  if (v598)
  {
    if (*(_DWORD *)v598 == 2)
      WTF::StringImpl::destroy(v598, v593);
    else
      *(_DWORD *)v598 -= 2;
  }
  if (v591)
  {
    if (*(_DWORD *)v591 == 2)
      WTF::StringImpl::destroy(v591, v593);
    else
      *(_DWORD *)v591 -= 2;
  }
  v599 = v694;
  v694 = 0;
  if (v599)
  {
    if (*(_DWORD *)v599 == 2)
      WTF::StringImpl::destroy(v599, v593);
    else
      *(_DWORD *)v599 -= 2;
  }
  this[255] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v600 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v601 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v603 = v696;
  v696 = 0;
  if (v603)
  {
    if (*(_DWORD *)v603 == 2)
      WTF::StringImpl::destroy(v603, v602);
    else
      *(_DWORD *)v603 -= 2;
  }
  *v601 = off_1E33948F0;
  if (v600)
    v604 = v600;
  else
    v604 = v252;
  *(_DWORD *)v604 += 2;
  v601[15] = v604;
  this[256] = (int32x2_t)v601;
  this[257].i32[0] = 0;
  this[257].i32[1] = *((_DWORD *)v604 + 1);
  this[258] = vmax_s32(0, 0);
  v605 = v695;
  v695 = 0;
  if (v605)
  {
    if (*(_DWORD *)v605 == 2)
      WTF::StringImpl::destroy(v605, v602);
    else
      *(_DWORD *)v605 -= 2;
  }
  v606 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v606)
  {
    if (v606[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v606 + 8))(v606);
    else
      --v606[2];
  }
  v607 = v691[0];
  v691[0] = 0;
  if (v607)
  {
    if (*(_DWORD *)v607 == 2)
      WTF::StringImpl::destroy(v607, v602);
    else
      *(_DWORD *)v607 -= 2;
  }
  if (v600)
  {
    if (*(_DWORD *)v600 == 2)
      WTF::StringImpl::destroy(v600, v602);
    else
      *(_DWORD *)v600 -= 2;
  }
  v608 = v694;
  v694 = 0;
  if (v608)
  {
    if (*(_DWORD *)v608 == 2)
      WTF::StringImpl::destroy(v608, v602);
    else
      *(_DWORD *)v608 -= 2;
  }
  this[259] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v609 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v610 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v612 = v696;
  v696 = 0;
  if (v612)
  {
    if (*(_DWORD *)v612 == 2)
      WTF::StringImpl::destroy(v612, v611);
    else
      *(_DWORD *)v612 -= 2;
  }
  *v610 = off_1E33948F0;
  if (v609)
    v613 = v609;
  else
    v613 = v252;
  *(_DWORD *)v613 += 2;
  v610[15] = v613;
  this[260] = (int32x2_t)v610;
  this[261].i32[0] = 0;
  this[261].i32[1] = *((_DWORD *)v613 + 1);
  this[262] = vmax_s32(0, 0);
  v614 = v695;
  v695 = 0;
  if (v614)
  {
    if (*(_DWORD *)v614 == 2)
      WTF::StringImpl::destroy(v614, v611);
    else
      *(_DWORD *)v614 -= 2;
  }
  v615 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v615)
  {
    if (v615[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v615 + 8))(v615);
    else
      --v615[2];
  }
  v616 = v691[0];
  v691[0] = 0;
  if (v616)
  {
    if (*(_DWORD *)v616 == 2)
      WTF::StringImpl::destroy(v616, v611);
    else
      *(_DWORD *)v616 -= 2;
  }
  if (v609)
  {
    if (*(_DWORD *)v609 == 2)
      WTF::StringImpl::destroy(v609, v611);
    else
      *(_DWORD *)v609 -= 2;
  }
  v617 = v694;
  v694 = 0;
  if (v617)
  {
    if (*(_DWORD *)v617 == 2)
      WTF::StringImpl::destroy(v617, v611);
    else
      *(_DWORD *)v617 -= 2;
  }
  this[263] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v618 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v619 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v621 = v696;
  v696 = 0;
  if (v621)
  {
    if (*(_DWORD *)v621 == 2)
      WTF::StringImpl::destroy(v621, v620);
    else
      *(_DWORD *)v621 -= 2;
  }
  *v619 = off_1E33948F0;
  if (v618)
    v622 = v618;
  else
    v622 = v252;
  *(_DWORD *)v622 += 2;
  v619[15] = v622;
  this[264] = (int32x2_t)v619;
  this[265].i32[0] = 0;
  this[265].i32[1] = *((_DWORD *)v622 + 1);
  this[266] = vmax_s32(0, 0);
  v623 = v695;
  v695 = 0;
  if (v623)
  {
    if (*(_DWORD *)v623 == 2)
      WTF::StringImpl::destroy(v623, v620);
    else
      *(_DWORD *)v623 -= 2;
  }
  v624 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v624)
  {
    if (v624[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v624 + 8))(v624);
    else
      --v624[2];
  }
  v625 = v691[0];
  v691[0] = 0;
  if (v625)
  {
    if (*(_DWORD *)v625 == 2)
      WTF::StringImpl::destroy(v625, v620);
    else
      *(_DWORD *)v625 -= 2;
  }
  if (v618)
  {
    if (*(_DWORD *)v618 == 2)
      WTF::StringImpl::destroy(v618, v620);
    else
      *(_DWORD *)v618 -= 2;
  }
  v626 = v694;
  v694 = 0;
  if (v626)
  {
    if (*(_DWORD *)v626 == 2)
      WTF::StringImpl::destroy(v626, v620);
    else
      *(_DWORD *)v626 -= 2;
  }
  this[267] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v627 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v628 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v630 = v696;
  v696 = 0;
  if (v630)
  {
    if (*(_DWORD *)v630 == 2)
      WTF::StringImpl::destroy(v630, v629);
    else
      *(_DWORD *)v630 -= 2;
  }
  *v628 = off_1E33948F0;
  if (v627)
    v631 = v627;
  else
    v631 = v252;
  *(_DWORD *)v631 += 2;
  v628[15] = v631;
  this[268] = (int32x2_t)v628;
  this[269].i32[0] = 0;
  this[269].i32[1] = *((_DWORD *)v631 + 1);
  this[270] = vmax_s32(0, 0);
  v632 = v695;
  v695 = 0;
  if (v632)
  {
    if (*(_DWORD *)v632 == 2)
      WTF::StringImpl::destroy(v632, v629);
    else
      *(_DWORD *)v632 -= 2;
  }
  v633 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v633)
  {
    if (v633[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v633 + 8))(v633);
    else
      --v633[2];
  }
  v634 = v691[0];
  v691[0] = 0;
  if (v634)
  {
    if (*(_DWORD *)v634 == 2)
      WTF::StringImpl::destroy(v634, v629);
    else
      *(_DWORD *)v634 -= 2;
  }
  if (v627)
  {
    if (*(_DWORD *)v627 == 2)
      WTF::StringImpl::destroy(v627, v629);
    else
      *(_DWORD *)v627 -= 2;
  }
  v635 = v694;
  v694 = 0;
  if (v635)
  {
    if (*(_DWORD *)v635 == 2)
      WTF::StringImpl::destroy(v635, v629);
    else
      *(_DWORD *)v635 -= 2;
  }
  this[271] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v636 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v637 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v639 = v696;
  v696 = 0;
  if (v639)
  {
    if (*(_DWORD *)v639 == 2)
      WTF::StringImpl::destroy(v639, v638);
    else
      *(_DWORD *)v639 -= 2;
  }
  *v637 = off_1E33948F0;
  if (v636)
    v640 = v636;
  else
    v640 = v252;
  *(_DWORD *)v640 += 2;
  v637[15] = v640;
  this[272] = (int32x2_t)v637;
  this[273].i32[0] = 0;
  this[273].i32[1] = *((_DWORD *)v640 + 1);
  this[274] = vmax_s32(0, 0);
  v641 = v695;
  v695 = 0;
  if (v641)
  {
    if (*(_DWORD *)v641 == 2)
      WTF::StringImpl::destroy(v641, v638);
    else
      *(_DWORD *)v641 -= 2;
  }
  v642 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v642)
  {
    if (v642[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v642 + 8))(v642);
    else
      --v642[2];
  }
  v643 = v691[0];
  v691[0] = 0;
  if (v643)
  {
    if (*(_DWORD *)v643 == 2)
      WTF::StringImpl::destroy(v643, v638);
    else
      *(_DWORD *)v643 -= 2;
  }
  if (v636)
  {
    if (*(_DWORD *)v636 == 2)
      WTF::StringImpl::destroy(v636, v638);
    else
      *(_DWORD *)v636 -= 2;
  }
  v644 = v694;
  v694 = 0;
  if (v644)
  {
    if (*(_DWORD *)v644 == 2)
      WTF::StringImpl::destroy(v644, v638);
    else
      *(_DWORD *)v644 -= 2;
  }
  this[275] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v645 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v646 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v648 = v696;
  v696 = 0;
  if (v648)
  {
    if (*(_DWORD *)v648 == 2)
      WTF::StringImpl::destroy(v648, v647);
    else
      *(_DWORD *)v648 -= 2;
  }
  *v646 = off_1E33948F0;
  if (v645)
    v649 = v645;
  else
    v649 = v252;
  *(_DWORD *)v649 += 2;
  v646[15] = v649;
  this[276] = (int32x2_t)v646;
  this[277].i32[0] = 0;
  this[277].i32[1] = *((_DWORD *)v649 + 1);
  this[278] = vmax_s32(0, 0);
  v650 = v695;
  v695 = 0;
  if (v650)
  {
    if (*(_DWORD *)v650 == 2)
      WTF::StringImpl::destroy(v650, v647);
    else
      *(_DWORD *)v650 -= 2;
  }
  v651 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v651)
  {
    if (v651[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v651 + 8))(v651);
    else
      --v651[2];
  }
  v652 = v691[0];
  v691[0] = 0;
  if (v652)
  {
    if (*(_DWORD *)v652 == 2)
      WTF::StringImpl::destroy(v652, v647);
    else
      *(_DWORD *)v652 -= 2;
  }
  if (v645)
  {
    if (*(_DWORD *)v645 == 2)
      WTF::StringImpl::destroy(v645, v647);
    else
      *(_DWORD *)v645 -= 2;
  }
  v653 = v694;
  v694 = 0;
  if (v653)
  {
    if (*(_DWORD *)v653 == 2)
      WTF::StringImpl::destroy(v653, v647);
    else
      *(_DWORD *)v653 -= 2;
  }
  this[279] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v654 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v655 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v657 = v696;
  v696 = 0;
  if (v657)
  {
    if (*(_DWORD *)v657 == 2)
      WTF::StringImpl::destroy(v657, v656);
    else
      *(_DWORD *)v657 -= 2;
  }
  *v655 = off_1E33948F0;
  if (v654)
    v658 = v654;
  else
    v658 = v252;
  *(_DWORD *)v658 += 2;
  v655[15] = v658;
  this[280] = (int32x2_t)v655;
  this[281].i32[0] = 0;
  this[281].i32[1] = *((_DWORD *)v658 + 1);
  this[282] = vmax_s32(0, 0);
  v659 = v695;
  v695 = 0;
  if (v659)
  {
    if (*(_DWORD *)v659 == 2)
      WTF::StringImpl::destroy(v659, v656);
    else
      *(_DWORD *)v659 -= 2;
  }
  v660 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v660)
  {
    if (v660[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v660 + 8))(v660);
    else
      --v660[2];
  }
  v661 = v691[0];
  v691[0] = 0;
  if (v661)
  {
    if (*(_DWORD *)v661 == 2)
      WTF::StringImpl::destroy(v661, v656);
    else
      *(_DWORD *)v661 -= 2;
  }
  if (v654)
  {
    if (*(_DWORD *)v654 == 2)
      WTF::StringImpl::destroy(v654, v656);
    else
      *(_DWORD *)v654 -= 2;
  }
  v662 = v694;
  v694 = 0;
  if (v662)
  {
    if (*(_DWORD *)v662 == 2)
      WTF::StringImpl::destroy(v662, v656);
    else
      *(_DWORD *)v662 -= 2;
  }
  this[283] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v663 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v664 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v666 = v696;
  v696 = 0;
  if (v666)
  {
    if (*(_DWORD *)v666 == 2)
      WTF::StringImpl::destroy(v666, v665);
    else
      *(_DWORD *)v666 -= 2;
  }
  *v664 = off_1E33948F0;
  if (v663)
    v667 = v663;
  else
    v667 = v252;
  *(_DWORD *)v667 += 2;
  v664[15] = v667;
  this[284] = (int32x2_t)v664;
  this[285].i32[0] = 0;
  this[285].i32[1] = *((_DWORD *)v667 + 1);
  this[286] = vmax_s32(0, 0);
  v668 = v695;
  v695 = 0;
  if (v668)
  {
    if (*(_DWORD *)v668 == 2)
      WTF::StringImpl::destroy(v668, v665);
    else
      *(_DWORD *)v668 -= 2;
  }
  v669 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v669)
  {
    if (v669[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v669 + 8))(v669);
    else
      --v669[2];
  }
  v670 = v691[0];
  v691[0] = 0;
  if (v670)
  {
    if (*(_DWORD *)v670 == 2)
      WTF::StringImpl::destroy(v670, v665);
    else
      *(_DWORD *)v670 -= 2;
  }
  if (v663)
  {
    if (*(_DWORD *)v663 == 2)
      WTF::StringImpl::destroy(v663, v665);
    else
      *(_DWORD *)v663 -= 2;
  }
  v671 = v694;
  v694 = 0;
  if (v671)
  {
    if (*(_DWORD *)v671 == 2)
      WTF::StringImpl::destroy(v671, v665);
    else
      *(_DWORD *)v671 -= 2;
  }
  this[287] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v672 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v673 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v675 = v696;
  v696 = 0;
  if (v675)
  {
    if (*(_DWORD *)v675 == 2)
      WTF::StringImpl::destroy(v675, v674);
    else
      *(_DWORD *)v675 -= 2;
  }
  *v673 = off_1E33948F0;
  if (v672)
    v676 = v672;
  else
    v676 = v252;
  *(_DWORD *)v676 += 2;
  v673[15] = v676;
  this[288] = (int32x2_t)v673;
  this[289].i32[0] = 0;
  this[289].i32[1] = *((_DWORD *)v676 + 1);
  this[290] = vmax_s32(0, 0);
  v677 = v695;
  v695 = 0;
  if (v677)
  {
    if (*(_DWORD *)v677 == 2)
      WTF::StringImpl::destroy(v677, v674);
    else
      *(_DWORD *)v677 -= 2;
  }
  v678 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v678)
  {
    if (v678[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v678 + 8))(v678);
    else
      --v678[2];
  }
  v679 = v691[0];
  v691[0] = 0;
  if (v679)
  {
    if (*(_DWORD *)v679 == 2)
      WTF::StringImpl::destroy(v679, v674);
    else
      *(_DWORD *)v679 -= 2;
  }
  if (v672)
  {
    if (*(_DWORD *)v672 == 2)
      WTF::StringImpl::destroy(v672, v674);
    else
      *(_DWORD *)v672 -= 2;
  }
  v680 = v694;
  v694 = 0;
  if (v680)
  {
    if (*(_DWORD *)v680 == 2)
      WTF::StringImpl::destroy(v680, v674);
    else
      *(_DWORD *)v680 -= 2;
  }
  this[291] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v681 = v694;
  v694 = 0;
  v692 = 0u;
  v693 = 0u;
  *(_OWORD *)v691 = 0u;
  WTF::URL::invalidate((WTF::URL *)v691);
  *((_QWORD *)&v693 + 1) = 0;
  v695 = 0;
  v682 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v696 = 0;
  JSC::SourceProvider::SourceProvider();
  v684 = v696;
  v696 = 0;
  if (v684)
  {
    if (*(_DWORD *)v684 == 2)
      WTF::StringImpl::destroy(v684, v683);
    else
      *(_DWORD *)v684 -= 2;
  }
  *v682 = off_1E33948F0;
  if (v681)
    v685 = v681;
  else
    v685 = v252;
  *(_DWORD *)v685 += 2;
  v682[15] = v685;
  this[292] = (int32x2_t)v682;
  this[293].i32[0] = 0;
  this[293].i32[1] = *((_DWORD *)v685 + 1);
  this[294] = vmax_s32(0, 0);
  v686 = v695;
  v695 = 0;
  if (v686)
  {
    if (*(_DWORD *)v686 == 2)
      WTF::StringImpl::destroy(v686, v683);
    else
      *(_DWORD *)v686 -= 2;
  }
  v687 = (_DWORD *)*((_QWORD *)&v693 + 1);
  *((_QWORD *)&v693 + 1) = 0;
  if (v687)
  {
    if (v687[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v687 + 8))(v687);
    else
      --v687[2];
  }
  v688 = v691[0];
  v691[0] = 0;
  if (v688)
  {
    if (*(_DWORD *)v688 == 2)
      WTF::StringImpl::destroy(v688, v683);
    else
      *(_DWORD *)v688 -= 2;
  }
  if (v681)
  {
    if (*(_DWORD *)v681 == 2)
      WTF::StringImpl::destroy(v681, v683);
    else
      *(_DWORD *)v681 -= 2;
  }
  v689 = v694;
  v694 = 0;
  if (v689)
  {
    if (*(_DWORD *)v689 == 2)
      WTF::StringImpl::destroy(v689, v683);
    else
      *(_DWORD *)v689 -= 2;
  }
  this[295] = 0;
  return this;
}

int32x2_t *WebCore::ReadableStreamInternalsBuiltinsWrapper::ReadableStreamInternalsBuiltinsWrapper(int32x2_t *this, JSC::VM *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  int v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  int v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  int v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  int v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  int v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  int v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  int v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  int v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  int v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  int v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  int v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  int v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  int v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  int v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  int v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  int v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  int v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  int v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  int v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  int v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  int v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  int v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  int v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  int v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  int v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  int v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  int v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  int v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  int v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  int v217;
  WTF::StringImpl *v218;
  WTF::StringImpl *v219;
  WTF::StringImpl *v220;
  WTF::StringImpl *v221;
  int v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  WTF::StringImpl *v225;
  WTF::StringImpl *v226;
  int v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  WTF::StringImpl *v230;
  WTF::StringImpl *v231;
  int v232;
  WTF::StringImpl *v233;
  WTF::StringImpl *v234;
  WTF::StringImpl *v235;
  WTF::StringImpl *v236;
  int v237;
  WTF::StringImpl *v238;
  WTF::StringImpl *v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  int v242;
  WTF::StringImpl *v243;
  _QWORD *v244;
  WTF::StringImpl *v245;
  WTF::StringImpl *v246;
  WTF::StringImpl *v247;
  WTF::StringImpl *v248;
  WTF::StringImpl *v249;
  _DWORD *v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  WTF::StringImpl *v253;
  _QWORD *v254;
  WTF::StringImpl *v255;
  WTF::StringImpl *v256;
  WTF::StringImpl *v257;
  WTF::StringImpl *v258;
  _DWORD *v259;
  WTF::StringImpl *v260;
  WTF::StringImpl *v261;
  WTF::StringImpl *v262;
  _QWORD *v263;
  WTF::StringImpl *v264;
  WTF::StringImpl *v265;
  WTF::StringImpl *v266;
  WTF::StringImpl *v267;
  _DWORD *v268;
  WTF::StringImpl *v269;
  WTF::StringImpl *v270;
  WTF::StringImpl *v271;
  _QWORD *v272;
  WTF::StringImpl *v273;
  WTF::StringImpl *v274;
  WTF::StringImpl *v275;
  WTF::StringImpl *v276;
  _DWORD *v277;
  WTF::StringImpl *v278;
  WTF::StringImpl *v279;
  WTF::StringImpl *v280;
  _QWORD *v281;
  WTF::StringImpl *v282;
  WTF::StringImpl *v283;
  WTF::StringImpl *v284;
  WTF::StringImpl *v285;
  _DWORD *v286;
  WTF::StringImpl *v287;
  WTF::StringImpl *v288;
  WTF::StringImpl *v289;
  _QWORD *v290;
  WTF::StringImpl *v291;
  WTF::StringImpl *v292;
  WTF::StringImpl *v293;
  WTF::StringImpl *v294;
  _DWORD *v295;
  WTF::StringImpl *v296;
  WTF::StringImpl *v297;
  WTF::StringImpl *v298;
  _QWORD *v299;
  WTF::StringImpl *v300;
  WTF::StringImpl *v301;
  WTF::StringImpl *v302;
  WTF::StringImpl *v303;
  _DWORD *v304;
  WTF::StringImpl *v305;
  WTF::StringImpl *v306;
  WTF::StringImpl *v307;
  _QWORD *v308;
  WTF::StringImpl *v309;
  WTF::StringImpl *v310;
  WTF::StringImpl *v311;
  WTF::StringImpl *v312;
  _DWORD *v313;
  WTF::StringImpl *v314;
  WTF::StringImpl *v315;
  WTF::StringImpl *v316;
  _QWORD *v317;
  WTF::StringImpl *v318;
  WTF::StringImpl *v319;
  WTF::StringImpl *v320;
  WTF::StringImpl *v321;
  _DWORD *v322;
  WTF::StringImpl *v323;
  WTF::StringImpl *v324;
  WTF::StringImpl *v325;
  _QWORD *v326;
  WTF::StringImpl *v327;
  WTF::StringImpl *v328;
  WTF::StringImpl *v329;
  WTF::StringImpl *v330;
  _DWORD *v331;
  WTF::StringImpl *v332;
  WTF::StringImpl *v333;
  WTF::StringImpl *v334;
  _QWORD *v335;
  WTF::StringImpl *v336;
  WTF::StringImpl *v337;
  WTF::StringImpl *v338;
  WTF::StringImpl *v339;
  _DWORD *v340;
  WTF::StringImpl *v341;
  WTF::StringImpl *v342;
  WTF::StringImpl *v343;
  _QWORD *v344;
  WTF::StringImpl *v345;
  WTF::StringImpl *v346;
  WTF::StringImpl *v347;
  WTF::StringImpl *v348;
  _DWORD *v349;
  WTF::StringImpl *v350;
  WTF::StringImpl *v351;
  WTF::StringImpl *v352;
  _QWORD *v353;
  WTF::StringImpl *v354;
  WTF::StringImpl *v355;
  WTF::StringImpl *v356;
  WTF::StringImpl *v357;
  _DWORD *v358;
  WTF::StringImpl *v359;
  WTF::StringImpl *v360;
  WTF::StringImpl *v361;
  _QWORD *v362;
  WTF::StringImpl *v363;
  WTF::StringImpl *v364;
  WTF::StringImpl *v365;
  WTF::StringImpl *v366;
  _DWORD *v367;
  WTF::StringImpl *v368;
  WTF::StringImpl *v369;
  WTF::StringImpl *v370;
  _QWORD *v371;
  WTF::StringImpl *v372;
  WTF::StringImpl *v373;
  WTF::StringImpl *v374;
  WTF::StringImpl *v375;
  _DWORD *v376;
  WTF::StringImpl *v377;
  WTF::StringImpl *v378;
  WTF::StringImpl *v379;
  _QWORD *v380;
  WTF::StringImpl *v381;
  WTF::StringImpl *v382;
  WTF::StringImpl *v383;
  WTF::StringImpl *v384;
  _DWORD *v385;
  WTF::StringImpl *v386;
  WTF::StringImpl *v387;
  WTF::StringImpl *v388;
  _QWORD *v389;
  WTF::StringImpl *v390;
  WTF::StringImpl *v391;
  WTF::StringImpl *v392;
  WTF::StringImpl *v393;
  _DWORD *v394;
  WTF::StringImpl *v395;
  WTF::StringImpl *v396;
  WTF::StringImpl *v397;
  _QWORD *v398;
  WTF::StringImpl *v399;
  WTF::StringImpl *v400;
  WTF::StringImpl *v401;
  WTF::StringImpl *v402;
  _DWORD *v403;
  WTF::StringImpl *v404;
  WTF::StringImpl *v405;
  WTF::StringImpl *v406;
  _QWORD *v407;
  WTF::StringImpl *v408;
  WTF::StringImpl *v409;
  WTF::StringImpl *v410;
  WTF::StringImpl *v411;
  _DWORD *v412;
  WTF::StringImpl *v413;
  WTF::StringImpl *v414;
  WTF::StringImpl *v415;
  _QWORD *v416;
  WTF::StringImpl *v417;
  WTF::StringImpl *v418;
  WTF::StringImpl *v419;
  WTF::StringImpl *v420;
  _DWORD *v421;
  WTF::StringImpl *v422;
  WTF::StringImpl *v423;
  WTF::StringImpl *v424;
  _QWORD *v425;
  WTF::StringImpl *v426;
  WTF::StringImpl *v427;
  WTF::StringImpl *v428;
  WTF::StringImpl *v429;
  _DWORD *v430;
  WTF::StringImpl *v431;
  WTF::StringImpl *v432;
  WTF::StringImpl *v433;
  _QWORD *v434;
  WTF::StringImpl *v435;
  WTF::StringImpl *v436;
  WTF::StringImpl *v437;
  WTF::StringImpl *v438;
  _DWORD *v439;
  WTF::StringImpl *v440;
  WTF::StringImpl *v441;
  WTF::StringImpl *v442;
  _QWORD *v443;
  WTF::StringImpl *v444;
  WTF::StringImpl *v445;
  WTF::StringImpl *v446;
  WTF::StringImpl *v447;
  _DWORD *v448;
  WTF::StringImpl *v449;
  WTF::StringImpl *v450;
  WTF::StringImpl *v451;
  _QWORD *v452;
  WTF::StringImpl *v453;
  WTF::StringImpl *v454;
  WTF::StringImpl *v455;
  WTF::StringImpl *v456;
  _DWORD *v457;
  WTF::StringImpl *v458;
  WTF::StringImpl *v459;
  WTF::StringImpl *v460;
  _QWORD *v461;
  WTF::StringImpl *v462;
  WTF::StringImpl *v463;
  WTF::StringImpl *v464;
  WTF::StringImpl *v465;
  _DWORD *v466;
  WTF::StringImpl *v467;
  WTF::StringImpl *v468;
  WTF::StringImpl *v469;
  _QWORD *v470;
  WTF::StringImpl *v471;
  WTF::StringImpl *v472;
  WTF::StringImpl *v473;
  WTF::StringImpl *v474;
  _DWORD *v475;
  WTF::StringImpl *v476;
  WTF::StringImpl *v477;
  WTF::StringImpl *v478;
  _QWORD *v479;
  WTF::StringImpl *v480;
  WTF::StringImpl *v481;
  WTF::StringImpl *v482;
  WTF::StringImpl *v483;
  _DWORD *v484;
  WTF::StringImpl *v485;
  WTF::StringImpl *v486;
  WTF::StringImpl *v487;
  _QWORD *v488;
  WTF::StringImpl *v489;
  WTF::StringImpl *v490;
  WTF::StringImpl *v491;
  WTF::StringImpl *v492;
  _DWORD *v493;
  WTF::StringImpl *v494;
  WTF::StringImpl *v495;
  WTF::StringImpl *v496;
  _QWORD *v497;
  WTF::StringImpl *v498;
  WTF::StringImpl *v499;
  WTF::StringImpl *v500;
  WTF::StringImpl *v501;
  _DWORD *v502;
  WTF::StringImpl *v503;
  WTF::StringImpl *v504;
  WTF::StringImpl *v505;
  _QWORD *v506;
  WTF::StringImpl *v507;
  WTF::StringImpl *v508;
  WTF::StringImpl *v509;
  WTF::StringImpl *v510;
  _DWORD *v511;
  WTF::StringImpl *v512;
  WTF::StringImpl *v513;
  WTF::StringImpl *v514;
  _QWORD *v515;
  WTF::StringImpl *v516;
  WTF::StringImpl *v517;
  WTF::StringImpl *v518;
  WTF::StringImpl *v519;
  _DWORD *v520;
  WTF::StringImpl *v521;
  WTF::StringImpl *v522;
  WTF::StringImpl *v523;
  _QWORD *v524;
  WTF::StringImpl *v525;
  WTF::StringImpl *v526;
  WTF::StringImpl *v527;
  WTF::StringImpl *v528;
  _DWORD *v529;
  WTF::StringImpl *v530;
  WTF::StringImpl *v531;
  WTF::StringImpl *v532;
  _QWORD *v533;
  WTF::StringImpl *v534;
  WTF::StringImpl *v535;
  WTF::StringImpl *v536;
  WTF::StringImpl *v537;
  _DWORD *v538;
  WTF::StringImpl *v539;
  WTF::StringImpl *v540;
  WTF::StringImpl *v541;
  _QWORD *v542;
  WTF::StringImpl *v543;
  WTF::StringImpl *v544;
  WTF::StringImpl *v545;
  WTF::StringImpl *v546;
  _DWORD *v547;
  WTF::StringImpl *v548;
  WTF::StringImpl *v549;
  WTF::StringImpl *v550;
  _QWORD *v551;
  WTF::StringImpl *v552;
  WTF::StringImpl *v553;
  WTF::StringImpl *v554;
  WTF::StringImpl *v555;
  _DWORD *v556;
  WTF::StringImpl *v557;
  WTF::StringImpl *v558;
  WTF::StringImpl *v559;
  _QWORD *v560;
  WTF::StringImpl *v561;
  WTF::StringImpl *v562;
  WTF::StringImpl *v563;
  WTF::StringImpl *v564;
  _DWORD *v565;
  WTF::StringImpl *v566;
  WTF::StringImpl *v567;
  WTF::StringImpl *v568;
  _QWORD *v569;
  WTF::StringImpl *v570;
  WTF::StringImpl *v571;
  WTF::StringImpl *v572;
  WTF::StringImpl *v573;
  _DWORD *v574;
  WTF::StringImpl *v575;
  WTF::StringImpl *v576;
  WTF::StringImpl *v577;
  _QWORD *v578;
  WTF::StringImpl *v579;
  WTF::StringImpl *v580;
  WTF::StringImpl *v581;
  WTF::StringImpl *v582;
  _DWORD *v583;
  WTF::StringImpl *v584;
  WTF::StringImpl *v585;
  WTF::StringImpl *v586;
  _QWORD *v587;
  WTF::StringImpl *v588;
  WTF::StringImpl *v589;
  WTF::StringImpl *v590;
  WTF::StringImpl *v591;
  _DWORD *v592;
  WTF::StringImpl *v593;
  WTF::StringImpl *v594;
  WTF::StringImpl *v595;
  _QWORD *v596;
  WTF::StringImpl *v597;
  WTF::StringImpl *v598;
  WTF::StringImpl *v599;
  WTF::StringImpl *v600;
  _DWORD *v601;
  WTF::StringImpl *v602;
  WTF::StringImpl *v603;
  WTF::StringImpl *v604;
  _QWORD *v605;
  WTF::StringImpl *v606;
  WTF::StringImpl *v607;
  WTF::StringImpl *v608;
  WTF::StringImpl *v609;
  _DWORD *v610;
  WTF::StringImpl *v611;
  WTF::StringImpl *v612;
  WTF::StringImpl *v613;
  _QWORD *v614;
  WTF::StringImpl *v615;
  WTF::StringImpl *v616;
  WTF::StringImpl *v617;
  WTF::StringImpl *v618;
  _DWORD *v619;
  WTF::StringImpl *v620;
  WTF::StringImpl *v621;
  WTF::StringImpl *v622;
  _QWORD *v623;
  WTF::StringImpl *v624;
  WTF::StringImpl *v625;
  WTF::StringImpl *v626;
  WTF::StringImpl *v627;
  _DWORD *v628;
  WTF::StringImpl *v629;
  WTF::StringImpl *v630;
  WTF::StringImpl *v631;
  _QWORD *v632;
  WTF::StringImpl *v633;
  WTF::StringImpl *v634;
  WTF::StringImpl *v635;
  WTF::StringImpl *v636;
  _DWORD *v637;
  WTF::StringImpl *v638;
  WTF::StringImpl *v639;
  WTF::StringImpl *v640;
  _QWORD *v641;
  WTF::StringImpl *v642;
  WTF::StringImpl *v643;
  WTF::StringImpl *v644;
  WTF::StringImpl *v645;
  _DWORD *v646;
  WTF::StringImpl *v647;
  WTF::StringImpl *v648;
  WTF::StringImpl *v649;
  _QWORD *v650;
  WTF::StringImpl *v651;
  WTF::StringImpl *v652;
  WTF::StringImpl *v653;
  WTF::StringImpl *v654;
  _DWORD *v655;
  WTF::StringImpl *v656;
  WTF::StringImpl *v657;
  WTF::StringImpl *v658;
  _QWORD *v659;
  WTF::StringImpl *v660;
  WTF::StringImpl *v661;
  WTF::StringImpl *v662;
  WTF::StringImpl *v663;
  _DWORD *v664;
  WTF::StringImpl *v665;
  WTF::StringImpl *v666;
  WTF::StringImpl *v667;
  _QWORD *v668;
  WTF::StringImpl *v669;
  WTF::StringImpl *v670;
  WTF::StringImpl *v671;
  WTF::StringImpl *v672;
  _DWORD *v673;
  WTF::StringImpl *v674;
  WTF::StringImpl *v675;
  WTF::StringImpl *v677[2];
  __int128 v678;
  __int128 v679;
  WTF::StringImpl *v680;
  WTF::StringImpl *v681;
  WTF::StringImpl *v682;

  *this = (int32x2_t)&off_1E3394088;
  this[1] = (int32x2_t)a2;
  WTF::AtomStringImpl::addLiteral();
  this[2] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v4);
  v6 = v677[0];
  v7 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[3] = (int32x2_t)v6;
  if (v7)
    *(_DWORD *)v6 = v7;
  else
    WTF::StringImpl::destroy(v6, v5);
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v5);
  else
    *(_DWORD *)v3 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[4] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v9);
  v11 = v677[0];
  v12 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[5] = (int32x2_t)v11;
  if (v12)
    *(_DWORD *)v11 = v12;
  else
    WTF::StringImpl::destroy(v11, v10);
  if (*(_DWORD *)v8 == 2)
    WTF::StringImpl::destroy(v8, v10);
  else
    *(_DWORD *)v8 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[6] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v14);
  v16 = v677[0];
  v17 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[7] = (int32x2_t)v16;
  if (v17)
    *(_DWORD *)v16 = v17;
  else
    WTF::StringImpl::destroy(v16, v15);
  if (*(_DWORD *)v13 == 2)
    WTF::StringImpl::destroy(v13, v15);
  else
    *(_DWORD *)v13 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[8] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v18 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v19);
  v21 = v677[0];
  v22 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[9] = (int32x2_t)v21;
  if (v22)
    *(_DWORD *)v21 = v22;
  else
    WTF::StringImpl::destroy(v21, v20);
  if (*(_DWORD *)v18 == 2)
    WTF::StringImpl::destroy(v18, v20);
  else
    *(_DWORD *)v18 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[10] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v23 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v24);
  v26 = v677[0];
  v27 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[11] = (int32x2_t)v26;
  if (v27)
    *(_DWORD *)v26 = v27;
  else
    WTF::StringImpl::destroy(v26, v25);
  if (*(_DWORD *)v23 == 2)
    WTF::StringImpl::destroy(v23, v25);
  else
    *(_DWORD *)v23 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[12] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v28 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v29);
  v31 = v677[0];
  v32 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[13] = (int32x2_t)v31;
  if (v32)
    *(_DWORD *)v31 = v32;
  else
    WTF::StringImpl::destroy(v31, v30);
  if (*(_DWORD *)v28 == 2)
    WTF::StringImpl::destroy(v28, v30);
  else
    *(_DWORD *)v28 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[14] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v33 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v34);
  v36 = v677[0];
  v37 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[15] = (int32x2_t)v36;
  if (v37)
    *(_DWORD *)v36 = v37;
  else
    WTF::StringImpl::destroy(v36, v35);
  if (*(_DWORD *)v33 == 2)
    WTF::StringImpl::destroy(v33, v35);
  else
    *(_DWORD *)v33 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[16] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v38 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v39);
  v41 = v677[0];
  v42 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[17] = (int32x2_t)v41;
  if (v42)
    *(_DWORD *)v41 = v42;
  else
    WTF::StringImpl::destroy(v41, v40);
  if (*(_DWORD *)v38 == 2)
    WTF::StringImpl::destroy(v38, v40);
  else
    *(_DWORD *)v38 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[18] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v43 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v44);
  v46 = v677[0];
  v47 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[19] = (int32x2_t)v46;
  if (v47)
    *(_DWORD *)v46 = v47;
  else
    WTF::StringImpl::destroy(v46, v45);
  if (*(_DWORD *)v43 == 2)
    WTF::StringImpl::destroy(v43, v45);
  else
    *(_DWORD *)v43 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[20] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v48 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v49);
  v51 = v677[0];
  v52 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[21] = (int32x2_t)v51;
  if (v52)
    *(_DWORD *)v51 = v52;
  else
    WTF::StringImpl::destroy(v51, v50);
  if (*(_DWORD *)v48 == 2)
    WTF::StringImpl::destroy(v48, v50);
  else
    *(_DWORD *)v48 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[22] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v53 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v54);
  v56 = v677[0];
  v57 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[23] = (int32x2_t)v56;
  if (v57)
    *(_DWORD *)v56 = v57;
  else
    WTF::StringImpl::destroy(v56, v55);
  if (*(_DWORD *)v53 == 2)
    WTF::StringImpl::destroy(v53, v55);
  else
    *(_DWORD *)v53 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[24] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v58 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v59);
  v61 = v677[0];
  v62 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[25] = (int32x2_t)v61;
  if (v62)
    *(_DWORD *)v61 = v62;
  else
    WTF::StringImpl::destroy(v61, v60);
  if (*(_DWORD *)v58 == 2)
    WTF::StringImpl::destroy(v58, v60);
  else
    *(_DWORD *)v58 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[26] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v63 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v64);
  v66 = v677[0];
  v67 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[27] = (int32x2_t)v66;
  if (v67)
    *(_DWORD *)v66 = v67;
  else
    WTF::StringImpl::destroy(v66, v65);
  if (*(_DWORD *)v63 == 2)
    WTF::StringImpl::destroy(v63, v65);
  else
    *(_DWORD *)v63 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[28] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v68 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v69);
  v71 = v677[0];
  v72 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[29] = (int32x2_t)v71;
  if (v72)
    *(_DWORD *)v71 = v72;
  else
    WTF::StringImpl::destroy(v71, v70);
  if (*(_DWORD *)v68 == 2)
    WTF::StringImpl::destroy(v68, v70);
  else
    *(_DWORD *)v68 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[30] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v73 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v74);
  v76 = v677[0];
  v77 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[31] = (int32x2_t)v76;
  if (v77)
    *(_DWORD *)v76 = v77;
  else
    WTF::StringImpl::destroy(v76, v75);
  if (*(_DWORD *)v73 == 2)
    WTF::StringImpl::destroy(v73, v75);
  else
    *(_DWORD *)v73 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[32] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v79);
  v81 = v677[0];
  v82 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[33] = (int32x2_t)v81;
  if (v82)
    *(_DWORD *)v81 = v82;
  else
    WTF::StringImpl::destroy(v81, v80);
  if (*(_DWORD *)v78 == 2)
    WTF::StringImpl::destroy(v78, v80);
  else
    *(_DWORD *)v78 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[34] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v83 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v84);
  v86 = v677[0];
  v87 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[35] = (int32x2_t)v86;
  if (v87)
    *(_DWORD *)v86 = v87;
  else
    WTF::StringImpl::destroy(v86, v85);
  if (*(_DWORD *)v83 == 2)
    WTF::StringImpl::destroy(v83, v85);
  else
    *(_DWORD *)v83 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[36] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v88 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v89);
  v91 = v677[0];
  v92 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[37] = (int32x2_t)v91;
  if (v92)
    *(_DWORD *)v91 = v92;
  else
    WTF::StringImpl::destroy(v91, v90);
  if (*(_DWORD *)v88 == 2)
    WTF::StringImpl::destroy(v88, v90);
  else
    *(_DWORD *)v88 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[38] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v94);
  v96 = v677[0];
  v97 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[39] = (int32x2_t)v96;
  if (v97)
    *(_DWORD *)v96 = v97;
  else
    WTF::StringImpl::destroy(v96, v95);
  if (*(_DWORD *)v93 == 2)
    WTF::StringImpl::destroy(v93, v95);
  else
    *(_DWORD *)v93 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[40] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v98 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v99);
  v101 = v677[0];
  v102 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[41] = (int32x2_t)v101;
  if (v102)
    *(_DWORD *)v101 = v102;
  else
    WTF::StringImpl::destroy(v101, v100);
  if (*(_DWORD *)v98 == 2)
    WTF::StringImpl::destroy(v98, v100);
  else
    *(_DWORD *)v98 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[42] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v103 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v104);
  v106 = v677[0];
  v107 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[43] = (int32x2_t)v106;
  if (v107)
    *(_DWORD *)v106 = v107;
  else
    WTF::StringImpl::destroy(v106, v105);
  if (*(_DWORD *)v103 == 2)
    WTF::StringImpl::destroy(v103, v105);
  else
    *(_DWORD *)v103 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[44] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v108 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v109);
  v111 = v677[0];
  v112 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[45] = (int32x2_t)v111;
  if (v112)
    *(_DWORD *)v111 = v112;
  else
    WTF::StringImpl::destroy(v111, v110);
  if (*(_DWORD *)v108 == 2)
    WTF::StringImpl::destroy(v108, v110);
  else
    *(_DWORD *)v108 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[46] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v113 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v114);
  v116 = v677[0];
  v117 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[47] = (int32x2_t)v116;
  if (v117)
    *(_DWORD *)v116 = v117;
  else
    WTF::StringImpl::destroy(v116, v115);
  if (*(_DWORD *)v113 == 2)
    WTF::StringImpl::destroy(v113, v115);
  else
    *(_DWORD *)v113 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[48] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v118 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v119);
  v121 = v677[0];
  v122 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[49] = (int32x2_t)v121;
  if (v122)
    *(_DWORD *)v121 = v122;
  else
    WTF::StringImpl::destroy(v121, v120);
  if (*(_DWORD *)v118 == 2)
    WTF::StringImpl::destroy(v118, v120);
  else
    *(_DWORD *)v118 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[50] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v123 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v124);
  v126 = v677[0];
  v127 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[51] = (int32x2_t)v126;
  if (v127)
    *(_DWORD *)v126 = v127;
  else
    WTF::StringImpl::destroy(v126, v125);
  if (*(_DWORD *)v123 == 2)
    WTF::StringImpl::destroy(v123, v125);
  else
    *(_DWORD *)v123 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[52] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v128 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v129);
  v131 = v677[0];
  v132 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[53] = (int32x2_t)v131;
  if (v132)
    *(_DWORD *)v131 = v132;
  else
    WTF::StringImpl::destroy(v131, v130);
  if (*(_DWORD *)v128 == 2)
    WTF::StringImpl::destroy(v128, v130);
  else
    *(_DWORD *)v128 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[54] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v133 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v134);
  v136 = v677[0];
  v137 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[55] = (int32x2_t)v136;
  if (v137)
    *(_DWORD *)v136 = v137;
  else
    WTF::StringImpl::destroy(v136, v135);
  if (*(_DWORD *)v133 == 2)
    WTF::StringImpl::destroy(v133, v135);
  else
    *(_DWORD *)v133 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[56] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v138 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v139);
  v141 = v677[0];
  v142 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[57] = (int32x2_t)v141;
  if (v142)
    *(_DWORD *)v141 = v142;
  else
    WTF::StringImpl::destroy(v141, v140);
  if (*(_DWORD *)v138 == 2)
    WTF::StringImpl::destroy(v138, v140);
  else
    *(_DWORD *)v138 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[58] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v143 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v144);
  v146 = v677[0];
  v147 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[59] = (int32x2_t)v146;
  if (v147)
    *(_DWORD *)v146 = v147;
  else
    WTF::StringImpl::destroy(v146, v145);
  if (*(_DWORD *)v143 == 2)
    WTF::StringImpl::destroy(v143, v145);
  else
    *(_DWORD *)v143 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[60] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v148 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v149);
  v151 = v677[0];
  v152 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[61] = (int32x2_t)v151;
  if (v152)
    *(_DWORD *)v151 = v152;
  else
    WTF::StringImpl::destroy(v151, v150);
  if (*(_DWORD *)v148 == 2)
    WTF::StringImpl::destroy(v148, v150);
  else
    *(_DWORD *)v148 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[62] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v153 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v154);
  v156 = v677[0];
  v157 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[63] = (int32x2_t)v156;
  if (v157)
    *(_DWORD *)v156 = v157;
  else
    WTF::StringImpl::destroy(v156, v155);
  if (*(_DWORD *)v153 == 2)
    WTF::StringImpl::destroy(v153, v155);
  else
    *(_DWORD *)v153 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[64] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v158 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v159);
  v161 = v677[0];
  v162 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[65] = (int32x2_t)v161;
  if (v162)
    *(_DWORD *)v161 = v162;
  else
    WTF::StringImpl::destroy(v161, v160);
  if (*(_DWORD *)v158 == 2)
    WTF::StringImpl::destroy(v158, v160);
  else
    *(_DWORD *)v158 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[66] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v163 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v164);
  v166 = v677[0];
  v167 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[67] = (int32x2_t)v166;
  if (v167)
    *(_DWORD *)v166 = v167;
  else
    WTF::StringImpl::destroy(v166, v165);
  if (*(_DWORD *)v163 == 2)
    WTF::StringImpl::destroy(v163, v165);
  else
    *(_DWORD *)v163 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[68] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v168 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v169);
  v171 = v677[0];
  v172 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[69] = (int32x2_t)v171;
  if (v172)
    *(_DWORD *)v171 = v172;
  else
    WTF::StringImpl::destroy(v171, v170);
  if (*(_DWORD *)v168 == 2)
    WTF::StringImpl::destroy(v168, v170);
  else
    *(_DWORD *)v168 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[70] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v173 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v174);
  v176 = v677[0];
  v177 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[71] = (int32x2_t)v176;
  if (v177)
    *(_DWORD *)v176 = v177;
  else
    WTF::StringImpl::destroy(v176, v175);
  if (*(_DWORD *)v173 == 2)
    WTF::StringImpl::destroy(v173, v175);
  else
    *(_DWORD *)v173 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[72] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v178 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v179);
  v181 = v677[0];
  v182 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[73] = (int32x2_t)v181;
  if (v182)
    *(_DWORD *)v181 = v182;
  else
    WTF::StringImpl::destroy(v181, v180);
  if (*(_DWORD *)v178 == 2)
    WTF::StringImpl::destroy(v178, v180);
  else
    *(_DWORD *)v178 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[74] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v183 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v184);
  v186 = v677[0];
  v187 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[75] = (int32x2_t)v186;
  if (v187)
    *(_DWORD *)v186 = v187;
  else
    WTF::StringImpl::destroy(v186, v185);
  if (*(_DWORD *)v183 == 2)
    WTF::StringImpl::destroy(v183, v185);
  else
    *(_DWORD *)v183 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[76] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v188 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v189);
  v191 = v677[0];
  v192 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[77] = (int32x2_t)v191;
  if (v192)
    *(_DWORD *)v191 = v192;
  else
    WTF::StringImpl::destroy(v191, v190);
  if (*(_DWORD *)v188 == 2)
    WTF::StringImpl::destroy(v188, v190);
  else
    *(_DWORD *)v188 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[78] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v193 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v194);
  v196 = v677[0];
  v197 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[79] = (int32x2_t)v196;
  if (v197)
    *(_DWORD *)v196 = v197;
  else
    WTF::StringImpl::destroy(v196, v195);
  if (*(_DWORD *)v193 == 2)
    WTF::StringImpl::destroy(v193, v195);
  else
    *(_DWORD *)v193 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[80] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v198 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v199);
  v201 = v677[0];
  v202 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[81] = (int32x2_t)v201;
  if (v202)
    *(_DWORD *)v201 = v202;
  else
    WTF::StringImpl::destroy(v201, v200);
  if (*(_DWORD *)v198 == 2)
    WTF::StringImpl::destroy(v198, v200);
  else
    *(_DWORD *)v198 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[82] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v203 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v204);
  v206 = v677[0];
  v207 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[83] = (int32x2_t)v206;
  if (v207)
    *(_DWORD *)v206 = v207;
  else
    WTF::StringImpl::destroy(v206, v205);
  if (*(_DWORD *)v203 == 2)
    WTF::StringImpl::destroy(v203, v205);
  else
    *(_DWORD *)v203 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[84] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v208 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v209);
  v211 = v677[0];
  v212 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[85] = (int32x2_t)v211;
  if (v212)
    *(_DWORD *)v211 = v212;
  else
    WTF::StringImpl::destroy(v211, v210);
  if (*(_DWORD *)v208 == 2)
    WTF::StringImpl::destroy(v208, v210);
  else
    *(_DWORD *)v208 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[86] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v213 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v214);
  v216 = v677[0];
  v217 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[87] = (int32x2_t)v216;
  if (v217)
    *(_DWORD *)v216 = v217;
  else
    WTF::StringImpl::destroy(v216, v215);
  if (*(_DWORD *)v213 == 2)
    WTF::StringImpl::destroy(v213, v215);
  else
    *(_DWORD *)v213 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[88] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v218 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v219);
  v221 = v677[0];
  v222 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[89] = (int32x2_t)v221;
  if (v222)
    *(_DWORD *)v221 = v222;
  else
    WTF::StringImpl::destroy(v221, v220);
  if (*(_DWORD *)v218 == 2)
    WTF::StringImpl::destroy(v218, v220);
  else
    *(_DWORD *)v218 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[90] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v223 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v224);
  v226 = v677[0];
  v227 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[91] = (int32x2_t)v226;
  if (v227)
    *(_DWORD *)v226 = v227;
  else
    WTF::StringImpl::destroy(v226, v225);
  if (*(_DWORD *)v223 == 2)
    WTF::StringImpl::destroy(v223, v225);
  else
    *(_DWORD *)v223 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[92] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v228 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v229);
  v231 = v677[0];
  v232 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[93] = (int32x2_t)v231;
  if (v232)
    *(_DWORD *)v231 = v232;
  else
    WTF::StringImpl::destroy(v231, v230);
  if (*(_DWORD *)v228 == 2)
    WTF::StringImpl::destroy(v228, v230);
  else
    *(_DWORD *)v228 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[94] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v233 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v234);
  v236 = v677[0];
  v237 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[95] = (int32x2_t)v236;
  if (v237)
    *(_DWORD *)v236 = v237;
  else
    WTF::StringImpl::destroy(v236, v235);
  if (*(_DWORD *)v233 == 2)
    WTF::StringImpl::destroy(v233, v235);
  else
    *(_DWORD *)v233 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[96] = (int32x2_t)v677[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v238 = v677[0];
  WTF::PrivateSymbolImpl::create(v677[0], v239);
  v241 = v677[0];
  v242 = *(_DWORD *)v677[0];
  *(_DWORD *)v677[0] += 2;
  this[97] = (int32x2_t)v241;
  if (v242)
    *(_DWORD *)v241 = v242;
  else
    WTF::StringImpl::destroy(v241, v240);
  if (*(_DWORD *)v238 == 2)
    WTF::StringImpl::destroy(v238, v240);
  else
    *(_DWORD *)v238 -= 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v243 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v244 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v246 = v682;
  v682 = 0;
  if (v246)
  {
    if (*(_DWORD *)v246 == 2)
      WTF::StringImpl::destroy(v246, v245);
    else
      *(_DWORD *)v246 -= 2;
  }
  *v244 = off_1E33948F0;
  v247 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  if (v243)
    v248 = v243;
  else
    v248 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *(_DWORD *)v248 += 2;
  v244[15] = v248;
  this[98] = (int32x2_t)v244;
  this[99].i32[0] = 0;
  this[99].i32[1] = *((_DWORD *)v248 + 1);
  this[100] = vmax_s32(0, 0);
  v249 = v681;
  v681 = 0;
  if (v249)
  {
    if (*(_DWORD *)v249 == 2)
      WTF::StringImpl::destroy(v249, v245);
    else
      *(_DWORD *)v249 -= 2;
  }
  v250 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v250)
  {
    if (v250[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v250 + 8))(v250);
    else
      --v250[2];
  }
  v251 = v677[0];
  v677[0] = 0;
  if (v251)
  {
    if (*(_DWORD *)v251 == 2)
      WTF::StringImpl::destroy(v251, v245);
    else
      *(_DWORD *)v251 -= 2;
  }
  if (v243)
  {
    if (*(_DWORD *)v243 == 2)
      WTF::StringImpl::destroy(v243, v245);
    else
      *(_DWORD *)v243 -= 2;
  }
  v252 = v680;
  v680 = 0;
  if (v252)
  {
    if (*(_DWORD *)v252 == 2)
      WTF::StringImpl::destroy(v252, v245);
    else
      *(_DWORD *)v252 -= 2;
  }
  this[101] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v253 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v254 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v256 = v682;
  v682 = 0;
  if (v256)
  {
    if (*(_DWORD *)v256 == 2)
      WTF::StringImpl::destroy(v256, v255);
    else
      *(_DWORD *)v256 -= 2;
  }
  *v254 = off_1E33948F0;
  if (v253)
    v257 = v253;
  else
    v257 = v247;
  *(_DWORD *)v257 += 2;
  v254[15] = v257;
  this[102] = (int32x2_t)v254;
  this[103].i32[0] = 0;
  this[103].i32[1] = *((_DWORD *)v257 + 1);
  this[104] = vmax_s32(0, 0);
  v258 = v681;
  v681 = 0;
  if (v258)
  {
    if (*(_DWORD *)v258 == 2)
      WTF::StringImpl::destroy(v258, v255);
    else
      *(_DWORD *)v258 -= 2;
  }
  v259 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v259)
  {
    if (v259[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v259 + 8))(v259);
    else
      --v259[2];
  }
  v260 = v677[0];
  v677[0] = 0;
  if (v260)
  {
    if (*(_DWORD *)v260 == 2)
      WTF::StringImpl::destroy(v260, v255);
    else
      *(_DWORD *)v260 -= 2;
  }
  if (v253)
  {
    if (*(_DWORD *)v253 == 2)
      WTF::StringImpl::destroy(v253, v255);
    else
      *(_DWORD *)v253 -= 2;
  }
  v261 = v680;
  v680 = 0;
  if (v261)
  {
    if (*(_DWORD *)v261 == 2)
      WTF::StringImpl::destroy(v261, v255);
    else
      *(_DWORD *)v261 -= 2;
  }
  this[105] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v262 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v263 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v265 = v682;
  v682 = 0;
  if (v265)
  {
    if (*(_DWORD *)v265 == 2)
      WTF::StringImpl::destroy(v265, v264);
    else
      *(_DWORD *)v265 -= 2;
  }
  *v263 = off_1E33948F0;
  if (v262)
    v266 = v262;
  else
    v266 = v247;
  *(_DWORD *)v266 += 2;
  v263[15] = v266;
  this[106] = (int32x2_t)v263;
  this[107].i32[0] = 0;
  this[107].i32[1] = *((_DWORD *)v266 + 1);
  this[108] = vmax_s32(0, 0);
  v267 = v681;
  v681 = 0;
  if (v267)
  {
    if (*(_DWORD *)v267 == 2)
      WTF::StringImpl::destroy(v267, v264);
    else
      *(_DWORD *)v267 -= 2;
  }
  v268 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v268)
  {
    if (v268[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v268 + 8))(v268);
    else
      --v268[2];
  }
  v269 = v677[0];
  v677[0] = 0;
  if (v269)
  {
    if (*(_DWORD *)v269 == 2)
      WTF::StringImpl::destroy(v269, v264);
    else
      *(_DWORD *)v269 -= 2;
  }
  if (v262)
  {
    if (*(_DWORD *)v262 == 2)
      WTF::StringImpl::destroy(v262, v264);
    else
      *(_DWORD *)v262 -= 2;
  }
  v270 = v680;
  v680 = 0;
  if (v270)
  {
    if (*(_DWORD *)v270 == 2)
      WTF::StringImpl::destroy(v270, v264);
    else
      *(_DWORD *)v270 -= 2;
  }
  this[109] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v271 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v272 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v274 = v682;
  v682 = 0;
  if (v274)
  {
    if (*(_DWORD *)v274 == 2)
      WTF::StringImpl::destroy(v274, v273);
    else
      *(_DWORD *)v274 -= 2;
  }
  *v272 = off_1E33948F0;
  if (v271)
    v275 = v271;
  else
    v275 = v247;
  *(_DWORD *)v275 += 2;
  v272[15] = v275;
  this[110] = (int32x2_t)v272;
  this[111].i32[0] = 0;
  this[111].i32[1] = *((_DWORD *)v275 + 1);
  this[112] = vmax_s32(0, 0);
  v276 = v681;
  v681 = 0;
  if (v276)
  {
    if (*(_DWORD *)v276 == 2)
      WTF::StringImpl::destroy(v276, v273);
    else
      *(_DWORD *)v276 -= 2;
  }
  v277 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v277)
  {
    if (v277[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v277 + 8))(v277);
    else
      --v277[2];
  }
  v278 = v677[0];
  v677[0] = 0;
  if (v278)
  {
    if (*(_DWORD *)v278 == 2)
      WTF::StringImpl::destroy(v278, v273);
    else
      *(_DWORD *)v278 -= 2;
  }
  if (v271)
  {
    if (*(_DWORD *)v271 == 2)
      WTF::StringImpl::destroy(v271, v273);
    else
      *(_DWORD *)v271 -= 2;
  }
  v279 = v680;
  v680 = 0;
  if (v279)
  {
    if (*(_DWORD *)v279 == 2)
      WTF::StringImpl::destroy(v279, v273);
    else
      *(_DWORD *)v279 -= 2;
  }
  this[113] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v280 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v281 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v283 = v682;
  v682 = 0;
  if (v283)
  {
    if (*(_DWORD *)v283 == 2)
      WTF::StringImpl::destroy(v283, v282);
    else
      *(_DWORD *)v283 -= 2;
  }
  *v281 = off_1E33948F0;
  if (v280)
    v284 = v280;
  else
    v284 = v247;
  *(_DWORD *)v284 += 2;
  v281[15] = v284;
  this[114] = (int32x2_t)v281;
  this[115].i32[0] = 0;
  this[115].i32[1] = *((_DWORD *)v284 + 1);
  this[116] = vmax_s32(0, 0);
  v285 = v681;
  v681 = 0;
  if (v285)
  {
    if (*(_DWORD *)v285 == 2)
      WTF::StringImpl::destroy(v285, v282);
    else
      *(_DWORD *)v285 -= 2;
  }
  v286 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v286)
  {
    if (v286[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v286 + 8))(v286);
    else
      --v286[2];
  }
  v287 = v677[0];
  v677[0] = 0;
  if (v287)
  {
    if (*(_DWORD *)v287 == 2)
      WTF::StringImpl::destroy(v287, v282);
    else
      *(_DWORD *)v287 -= 2;
  }
  if (v280)
  {
    if (*(_DWORD *)v280 == 2)
      WTF::StringImpl::destroy(v280, v282);
    else
      *(_DWORD *)v280 -= 2;
  }
  v288 = v680;
  v680 = 0;
  if (v288)
  {
    if (*(_DWORD *)v288 == 2)
      WTF::StringImpl::destroy(v288, v282);
    else
      *(_DWORD *)v288 -= 2;
  }
  this[117] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v289 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v290 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v292 = v682;
  v682 = 0;
  if (v292)
  {
    if (*(_DWORD *)v292 == 2)
      WTF::StringImpl::destroy(v292, v291);
    else
      *(_DWORD *)v292 -= 2;
  }
  *v290 = off_1E33948F0;
  if (v289)
    v293 = v289;
  else
    v293 = v247;
  *(_DWORD *)v293 += 2;
  v290[15] = v293;
  this[118] = (int32x2_t)v290;
  this[119].i32[0] = 0;
  this[119].i32[1] = *((_DWORD *)v293 + 1);
  this[120] = vmax_s32(0, 0);
  v294 = v681;
  v681 = 0;
  if (v294)
  {
    if (*(_DWORD *)v294 == 2)
      WTF::StringImpl::destroy(v294, v291);
    else
      *(_DWORD *)v294 -= 2;
  }
  v295 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v295)
  {
    if (v295[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v295 + 8))(v295);
    else
      --v295[2];
  }
  v296 = v677[0];
  v677[0] = 0;
  if (v296)
  {
    if (*(_DWORD *)v296 == 2)
      WTF::StringImpl::destroy(v296, v291);
    else
      *(_DWORD *)v296 -= 2;
  }
  if (v289)
  {
    if (*(_DWORD *)v289 == 2)
      WTF::StringImpl::destroy(v289, v291);
    else
      *(_DWORD *)v289 -= 2;
  }
  v297 = v680;
  v680 = 0;
  if (v297)
  {
    if (*(_DWORD *)v297 == 2)
      WTF::StringImpl::destroy(v297, v291);
    else
      *(_DWORD *)v297 -= 2;
  }
  this[121] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v298 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v299 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v301 = v682;
  v682 = 0;
  if (v301)
  {
    if (*(_DWORD *)v301 == 2)
      WTF::StringImpl::destroy(v301, v300);
    else
      *(_DWORD *)v301 -= 2;
  }
  *v299 = off_1E33948F0;
  if (v298)
    v302 = v298;
  else
    v302 = v247;
  *(_DWORD *)v302 += 2;
  v299[15] = v302;
  this[122] = (int32x2_t)v299;
  this[123].i32[0] = 0;
  this[123].i32[1] = *((_DWORD *)v302 + 1);
  this[124] = vmax_s32(0, 0);
  v303 = v681;
  v681 = 0;
  if (v303)
  {
    if (*(_DWORD *)v303 == 2)
      WTF::StringImpl::destroy(v303, v300);
    else
      *(_DWORD *)v303 -= 2;
  }
  v304 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v304)
  {
    if (v304[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v304 + 8))(v304);
    else
      --v304[2];
  }
  v305 = v677[0];
  v677[0] = 0;
  if (v305)
  {
    if (*(_DWORD *)v305 == 2)
      WTF::StringImpl::destroy(v305, v300);
    else
      *(_DWORD *)v305 -= 2;
  }
  if (v298)
  {
    if (*(_DWORD *)v298 == 2)
      WTF::StringImpl::destroy(v298, v300);
    else
      *(_DWORD *)v298 -= 2;
  }
  v306 = v680;
  v680 = 0;
  if (v306)
  {
    if (*(_DWORD *)v306 == 2)
      WTF::StringImpl::destroy(v306, v300);
    else
      *(_DWORD *)v306 -= 2;
  }
  this[125] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v307 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v308 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v310 = v682;
  v682 = 0;
  if (v310)
  {
    if (*(_DWORD *)v310 == 2)
      WTF::StringImpl::destroy(v310, v309);
    else
      *(_DWORD *)v310 -= 2;
  }
  *v308 = off_1E33948F0;
  if (v307)
    v311 = v307;
  else
    v311 = v247;
  *(_DWORD *)v311 += 2;
  v308[15] = v311;
  this[126] = (int32x2_t)v308;
  this[127].i32[0] = 0;
  this[127].i32[1] = *((_DWORD *)v311 + 1);
  this[128] = vmax_s32(0, 0);
  v312 = v681;
  v681 = 0;
  if (v312)
  {
    if (*(_DWORD *)v312 == 2)
      WTF::StringImpl::destroy(v312, v309);
    else
      *(_DWORD *)v312 -= 2;
  }
  v313 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v313)
  {
    if (v313[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v313 + 8))(v313);
    else
      --v313[2];
  }
  v314 = v677[0];
  v677[0] = 0;
  if (v314)
  {
    if (*(_DWORD *)v314 == 2)
      WTF::StringImpl::destroy(v314, v309);
    else
      *(_DWORD *)v314 -= 2;
  }
  if (v307)
  {
    if (*(_DWORD *)v307 == 2)
      WTF::StringImpl::destroy(v307, v309);
    else
      *(_DWORD *)v307 -= 2;
  }
  v315 = v680;
  v680 = 0;
  if (v315)
  {
    if (*(_DWORD *)v315 == 2)
      WTF::StringImpl::destroy(v315, v309);
    else
      *(_DWORD *)v315 -= 2;
  }
  this[129] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v316 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v317 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v319 = v682;
  v682 = 0;
  if (v319)
  {
    if (*(_DWORD *)v319 == 2)
      WTF::StringImpl::destroy(v319, v318);
    else
      *(_DWORD *)v319 -= 2;
  }
  *v317 = off_1E33948F0;
  if (v316)
    v320 = v316;
  else
    v320 = v247;
  *(_DWORD *)v320 += 2;
  v317[15] = v320;
  this[130] = (int32x2_t)v317;
  this[131].i32[0] = 0;
  this[131].i32[1] = *((_DWORD *)v320 + 1);
  this[132] = vmax_s32(0, 0);
  v321 = v681;
  v681 = 0;
  if (v321)
  {
    if (*(_DWORD *)v321 == 2)
      WTF::StringImpl::destroy(v321, v318);
    else
      *(_DWORD *)v321 -= 2;
  }
  v322 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v322)
  {
    if (v322[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v322 + 8))(v322);
    else
      --v322[2];
  }
  v323 = v677[0];
  v677[0] = 0;
  if (v323)
  {
    if (*(_DWORD *)v323 == 2)
      WTF::StringImpl::destroy(v323, v318);
    else
      *(_DWORD *)v323 -= 2;
  }
  if (v316)
  {
    if (*(_DWORD *)v316 == 2)
      WTF::StringImpl::destroy(v316, v318);
    else
      *(_DWORD *)v316 -= 2;
  }
  v324 = v680;
  v680 = 0;
  if (v324)
  {
    if (*(_DWORD *)v324 == 2)
      WTF::StringImpl::destroy(v324, v318);
    else
      *(_DWORD *)v324 -= 2;
  }
  this[133] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v325 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v326 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v328 = v682;
  v682 = 0;
  if (v328)
  {
    if (*(_DWORD *)v328 == 2)
      WTF::StringImpl::destroy(v328, v327);
    else
      *(_DWORD *)v328 -= 2;
  }
  *v326 = off_1E33948F0;
  if (v325)
    v329 = v325;
  else
    v329 = v247;
  *(_DWORD *)v329 += 2;
  v326[15] = v329;
  this[134] = (int32x2_t)v326;
  this[135].i32[0] = 0;
  this[135].i32[1] = *((_DWORD *)v329 + 1);
  this[136] = vmax_s32(0, 0);
  v330 = v681;
  v681 = 0;
  if (v330)
  {
    if (*(_DWORD *)v330 == 2)
      WTF::StringImpl::destroy(v330, v327);
    else
      *(_DWORD *)v330 -= 2;
  }
  v331 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v331)
  {
    if (v331[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v331 + 8))(v331);
    else
      --v331[2];
  }
  v332 = v677[0];
  v677[0] = 0;
  if (v332)
  {
    if (*(_DWORD *)v332 == 2)
      WTF::StringImpl::destroy(v332, v327);
    else
      *(_DWORD *)v332 -= 2;
  }
  if (v325)
  {
    if (*(_DWORD *)v325 == 2)
      WTF::StringImpl::destroy(v325, v327);
    else
      *(_DWORD *)v325 -= 2;
  }
  v333 = v680;
  v680 = 0;
  if (v333)
  {
    if (*(_DWORD *)v333 == 2)
      WTF::StringImpl::destroy(v333, v327);
    else
      *(_DWORD *)v333 -= 2;
  }
  this[137] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v334 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v335 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v337 = v682;
  v682 = 0;
  if (v337)
  {
    if (*(_DWORD *)v337 == 2)
      WTF::StringImpl::destroy(v337, v336);
    else
      *(_DWORD *)v337 -= 2;
  }
  *v335 = off_1E33948F0;
  if (v334)
    v338 = v334;
  else
    v338 = v247;
  *(_DWORD *)v338 += 2;
  v335[15] = v338;
  this[138] = (int32x2_t)v335;
  this[139].i32[0] = 0;
  this[139].i32[1] = *((_DWORD *)v338 + 1);
  this[140] = vmax_s32(0, 0);
  v339 = v681;
  v681 = 0;
  if (v339)
  {
    if (*(_DWORD *)v339 == 2)
      WTF::StringImpl::destroy(v339, v336);
    else
      *(_DWORD *)v339 -= 2;
  }
  v340 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v340)
  {
    if (v340[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v340 + 8))(v340);
    else
      --v340[2];
  }
  v341 = v677[0];
  v677[0] = 0;
  if (v341)
  {
    if (*(_DWORD *)v341 == 2)
      WTF::StringImpl::destroy(v341, v336);
    else
      *(_DWORD *)v341 -= 2;
  }
  if (v334)
  {
    if (*(_DWORD *)v334 == 2)
      WTF::StringImpl::destroy(v334, v336);
    else
      *(_DWORD *)v334 -= 2;
  }
  v342 = v680;
  v680 = 0;
  if (v342)
  {
    if (*(_DWORD *)v342 == 2)
      WTF::StringImpl::destroy(v342, v336);
    else
      *(_DWORD *)v342 -= 2;
  }
  this[141] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v343 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v344 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v346 = v682;
  v682 = 0;
  if (v346)
  {
    if (*(_DWORD *)v346 == 2)
      WTF::StringImpl::destroy(v346, v345);
    else
      *(_DWORD *)v346 -= 2;
  }
  *v344 = off_1E33948F0;
  if (v343)
    v347 = v343;
  else
    v347 = v247;
  *(_DWORD *)v347 += 2;
  v344[15] = v347;
  this[142] = (int32x2_t)v344;
  this[143].i32[0] = 0;
  this[143].i32[1] = *((_DWORD *)v347 + 1);
  this[144] = vmax_s32(0, 0);
  v348 = v681;
  v681 = 0;
  if (v348)
  {
    if (*(_DWORD *)v348 == 2)
      WTF::StringImpl::destroy(v348, v345);
    else
      *(_DWORD *)v348 -= 2;
  }
  v349 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v349)
  {
    if (v349[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v349 + 8))(v349);
    else
      --v349[2];
  }
  v350 = v677[0];
  v677[0] = 0;
  if (v350)
  {
    if (*(_DWORD *)v350 == 2)
      WTF::StringImpl::destroy(v350, v345);
    else
      *(_DWORD *)v350 -= 2;
  }
  if (v343)
  {
    if (*(_DWORD *)v343 == 2)
      WTF::StringImpl::destroy(v343, v345);
    else
      *(_DWORD *)v343 -= 2;
  }
  v351 = v680;
  v680 = 0;
  if (v351)
  {
    if (*(_DWORD *)v351 == 2)
      WTF::StringImpl::destroy(v351, v345);
    else
      *(_DWORD *)v351 -= 2;
  }
  this[145] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v352 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v353 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v355 = v682;
  v682 = 0;
  if (v355)
  {
    if (*(_DWORD *)v355 == 2)
      WTF::StringImpl::destroy(v355, v354);
    else
      *(_DWORD *)v355 -= 2;
  }
  *v353 = off_1E33948F0;
  if (v352)
    v356 = v352;
  else
    v356 = v247;
  *(_DWORD *)v356 += 2;
  v353[15] = v356;
  this[146] = (int32x2_t)v353;
  this[147].i32[0] = 0;
  this[147].i32[1] = *((_DWORD *)v356 + 1);
  this[148] = vmax_s32(0, 0);
  v357 = v681;
  v681 = 0;
  if (v357)
  {
    if (*(_DWORD *)v357 == 2)
      WTF::StringImpl::destroy(v357, v354);
    else
      *(_DWORD *)v357 -= 2;
  }
  v358 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v358)
  {
    if (v358[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v358 + 8))(v358);
    else
      --v358[2];
  }
  v359 = v677[0];
  v677[0] = 0;
  if (v359)
  {
    if (*(_DWORD *)v359 == 2)
      WTF::StringImpl::destroy(v359, v354);
    else
      *(_DWORD *)v359 -= 2;
  }
  if (v352)
  {
    if (*(_DWORD *)v352 == 2)
      WTF::StringImpl::destroy(v352, v354);
    else
      *(_DWORD *)v352 -= 2;
  }
  v360 = v680;
  v680 = 0;
  if (v360)
  {
    if (*(_DWORD *)v360 == 2)
      WTF::StringImpl::destroy(v360, v354);
    else
      *(_DWORD *)v360 -= 2;
  }
  this[149] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v361 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v362 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v364 = v682;
  v682 = 0;
  if (v364)
  {
    if (*(_DWORD *)v364 == 2)
      WTF::StringImpl::destroy(v364, v363);
    else
      *(_DWORD *)v364 -= 2;
  }
  *v362 = off_1E33948F0;
  if (v361)
    v365 = v361;
  else
    v365 = v247;
  *(_DWORD *)v365 += 2;
  v362[15] = v365;
  this[150] = (int32x2_t)v362;
  this[151].i32[0] = 0;
  this[151].i32[1] = *((_DWORD *)v365 + 1);
  this[152] = vmax_s32(0, 0);
  v366 = v681;
  v681 = 0;
  if (v366)
  {
    if (*(_DWORD *)v366 == 2)
      WTF::StringImpl::destroy(v366, v363);
    else
      *(_DWORD *)v366 -= 2;
  }
  v367 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v367)
  {
    if (v367[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v367 + 8))(v367);
    else
      --v367[2];
  }
  v368 = v677[0];
  v677[0] = 0;
  if (v368)
  {
    if (*(_DWORD *)v368 == 2)
      WTF::StringImpl::destroy(v368, v363);
    else
      *(_DWORD *)v368 -= 2;
  }
  if (v361)
  {
    if (*(_DWORD *)v361 == 2)
      WTF::StringImpl::destroy(v361, v363);
    else
      *(_DWORD *)v361 -= 2;
  }
  v369 = v680;
  v680 = 0;
  if (v369)
  {
    if (*(_DWORD *)v369 == 2)
      WTF::StringImpl::destroy(v369, v363);
    else
      *(_DWORD *)v369 -= 2;
  }
  this[153] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v370 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v371 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v373 = v682;
  v682 = 0;
  if (v373)
  {
    if (*(_DWORD *)v373 == 2)
      WTF::StringImpl::destroy(v373, v372);
    else
      *(_DWORD *)v373 -= 2;
  }
  *v371 = off_1E33948F0;
  if (v370)
    v374 = v370;
  else
    v374 = v247;
  *(_DWORD *)v374 += 2;
  v371[15] = v374;
  this[154] = (int32x2_t)v371;
  this[155].i32[0] = 0;
  this[155].i32[1] = *((_DWORD *)v374 + 1);
  this[156] = vmax_s32(0, 0);
  v375 = v681;
  v681 = 0;
  if (v375)
  {
    if (*(_DWORD *)v375 == 2)
      WTF::StringImpl::destroy(v375, v372);
    else
      *(_DWORD *)v375 -= 2;
  }
  v376 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v376)
  {
    if (v376[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v376 + 8))(v376);
    else
      --v376[2];
  }
  v377 = v677[0];
  v677[0] = 0;
  if (v377)
  {
    if (*(_DWORD *)v377 == 2)
      WTF::StringImpl::destroy(v377, v372);
    else
      *(_DWORD *)v377 -= 2;
  }
  if (v370)
  {
    if (*(_DWORD *)v370 == 2)
      WTF::StringImpl::destroy(v370, v372);
    else
      *(_DWORD *)v370 -= 2;
  }
  v378 = v680;
  v680 = 0;
  if (v378)
  {
    if (*(_DWORD *)v378 == 2)
      WTF::StringImpl::destroy(v378, v372);
    else
      *(_DWORD *)v378 -= 2;
  }
  this[157] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v379 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v380 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v382 = v682;
  v682 = 0;
  if (v382)
  {
    if (*(_DWORD *)v382 == 2)
      WTF::StringImpl::destroy(v382, v381);
    else
      *(_DWORD *)v382 -= 2;
  }
  *v380 = off_1E33948F0;
  if (v379)
    v383 = v379;
  else
    v383 = v247;
  *(_DWORD *)v383 += 2;
  v380[15] = v383;
  this[158] = (int32x2_t)v380;
  this[159].i32[0] = 0;
  this[159].i32[1] = *((_DWORD *)v383 + 1);
  this[160] = vmax_s32(0, 0);
  v384 = v681;
  v681 = 0;
  if (v384)
  {
    if (*(_DWORD *)v384 == 2)
      WTF::StringImpl::destroy(v384, v381);
    else
      *(_DWORD *)v384 -= 2;
  }
  v385 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v385)
  {
    if (v385[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v385 + 8))(v385);
    else
      --v385[2];
  }
  v386 = v677[0];
  v677[0] = 0;
  if (v386)
  {
    if (*(_DWORD *)v386 == 2)
      WTF::StringImpl::destroy(v386, v381);
    else
      *(_DWORD *)v386 -= 2;
  }
  if (v379)
  {
    if (*(_DWORD *)v379 == 2)
      WTF::StringImpl::destroy(v379, v381);
    else
      *(_DWORD *)v379 -= 2;
  }
  v387 = v680;
  v680 = 0;
  if (v387)
  {
    if (*(_DWORD *)v387 == 2)
      WTF::StringImpl::destroy(v387, v381);
    else
      *(_DWORD *)v387 -= 2;
  }
  this[161] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v388 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v389 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v391 = v682;
  v682 = 0;
  if (v391)
  {
    if (*(_DWORD *)v391 == 2)
      WTF::StringImpl::destroy(v391, v390);
    else
      *(_DWORD *)v391 -= 2;
  }
  *v389 = off_1E33948F0;
  if (v388)
    v392 = v388;
  else
    v392 = v247;
  *(_DWORD *)v392 += 2;
  v389[15] = v392;
  this[162] = (int32x2_t)v389;
  this[163].i32[0] = 0;
  this[163].i32[1] = *((_DWORD *)v392 + 1);
  this[164] = vmax_s32(0, 0);
  v393 = v681;
  v681 = 0;
  if (v393)
  {
    if (*(_DWORD *)v393 == 2)
      WTF::StringImpl::destroy(v393, v390);
    else
      *(_DWORD *)v393 -= 2;
  }
  v394 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v394)
  {
    if (v394[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v394 + 8))(v394);
    else
      --v394[2];
  }
  v395 = v677[0];
  v677[0] = 0;
  if (v395)
  {
    if (*(_DWORD *)v395 == 2)
      WTF::StringImpl::destroy(v395, v390);
    else
      *(_DWORD *)v395 -= 2;
  }
  if (v388)
  {
    if (*(_DWORD *)v388 == 2)
      WTF::StringImpl::destroy(v388, v390);
    else
      *(_DWORD *)v388 -= 2;
  }
  v396 = v680;
  v680 = 0;
  if (v396)
  {
    if (*(_DWORD *)v396 == 2)
      WTF::StringImpl::destroy(v396, v390);
    else
      *(_DWORD *)v396 -= 2;
  }
  this[165] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v397 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v398 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v400 = v682;
  v682 = 0;
  if (v400)
  {
    if (*(_DWORD *)v400 == 2)
      WTF::StringImpl::destroy(v400, v399);
    else
      *(_DWORD *)v400 -= 2;
  }
  *v398 = off_1E33948F0;
  if (v397)
    v401 = v397;
  else
    v401 = v247;
  *(_DWORD *)v401 += 2;
  v398[15] = v401;
  this[166] = (int32x2_t)v398;
  this[167].i32[0] = 0;
  this[167].i32[1] = *((_DWORD *)v401 + 1);
  this[168] = vmax_s32(0, 0);
  v402 = v681;
  v681 = 0;
  if (v402)
  {
    if (*(_DWORD *)v402 == 2)
      WTF::StringImpl::destroy(v402, v399);
    else
      *(_DWORD *)v402 -= 2;
  }
  v403 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v403)
  {
    if (v403[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v403 + 8))(v403);
    else
      --v403[2];
  }
  v404 = v677[0];
  v677[0] = 0;
  if (v404)
  {
    if (*(_DWORD *)v404 == 2)
      WTF::StringImpl::destroy(v404, v399);
    else
      *(_DWORD *)v404 -= 2;
  }
  if (v397)
  {
    if (*(_DWORD *)v397 == 2)
      WTF::StringImpl::destroy(v397, v399);
    else
      *(_DWORD *)v397 -= 2;
  }
  v405 = v680;
  v680 = 0;
  if (v405)
  {
    if (*(_DWORD *)v405 == 2)
      WTF::StringImpl::destroy(v405, v399);
    else
      *(_DWORD *)v405 -= 2;
  }
  this[169] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v406 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v407 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v409 = v682;
  v682 = 0;
  if (v409)
  {
    if (*(_DWORD *)v409 == 2)
      WTF::StringImpl::destroy(v409, v408);
    else
      *(_DWORD *)v409 -= 2;
  }
  *v407 = off_1E33948F0;
  if (v406)
    v410 = v406;
  else
    v410 = v247;
  *(_DWORD *)v410 += 2;
  v407[15] = v410;
  this[170] = (int32x2_t)v407;
  this[171].i32[0] = 0;
  this[171].i32[1] = *((_DWORD *)v410 + 1);
  this[172] = vmax_s32(0, 0);
  v411 = v681;
  v681 = 0;
  if (v411)
  {
    if (*(_DWORD *)v411 == 2)
      WTF::StringImpl::destroy(v411, v408);
    else
      *(_DWORD *)v411 -= 2;
  }
  v412 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v412)
  {
    if (v412[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v412 + 8))(v412);
    else
      --v412[2];
  }
  v413 = v677[0];
  v677[0] = 0;
  if (v413)
  {
    if (*(_DWORD *)v413 == 2)
      WTF::StringImpl::destroy(v413, v408);
    else
      *(_DWORD *)v413 -= 2;
  }
  if (v406)
  {
    if (*(_DWORD *)v406 == 2)
      WTF::StringImpl::destroy(v406, v408);
    else
      *(_DWORD *)v406 -= 2;
  }
  v414 = v680;
  v680 = 0;
  if (v414)
  {
    if (*(_DWORD *)v414 == 2)
      WTF::StringImpl::destroy(v414, v408);
    else
      *(_DWORD *)v414 -= 2;
  }
  this[173] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v415 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v416 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v418 = v682;
  v682 = 0;
  if (v418)
  {
    if (*(_DWORD *)v418 == 2)
      WTF::StringImpl::destroy(v418, v417);
    else
      *(_DWORD *)v418 -= 2;
  }
  *v416 = off_1E33948F0;
  if (v415)
    v419 = v415;
  else
    v419 = v247;
  *(_DWORD *)v419 += 2;
  v416[15] = v419;
  this[174] = (int32x2_t)v416;
  this[175].i32[0] = 0;
  this[175].i32[1] = *((_DWORD *)v419 + 1);
  this[176] = vmax_s32(0, 0);
  v420 = v681;
  v681 = 0;
  if (v420)
  {
    if (*(_DWORD *)v420 == 2)
      WTF::StringImpl::destroy(v420, v417);
    else
      *(_DWORD *)v420 -= 2;
  }
  v421 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v421)
  {
    if (v421[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v421 + 8))(v421);
    else
      --v421[2];
  }
  v422 = v677[0];
  v677[0] = 0;
  if (v422)
  {
    if (*(_DWORD *)v422 == 2)
      WTF::StringImpl::destroy(v422, v417);
    else
      *(_DWORD *)v422 -= 2;
  }
  if (v415)
  {
    if (*(_DWORD *)v415 == 2)
      WTF::StringImpl::destroy(v415, v417);
    else
      *(_DWORD *)v415 -= 2;
  }
  v423 = v680;
  v680 = 0;
  if (v423)
  {
    if (*(_DWORD *)v423 == 2)
      WTF::StringImpl::destroy(v423, v417);
    else
      *(_DWORD *)v423 -= 2;
  }
  this[177] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v424 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v425 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v427 = v682;
  v682 = 0;
  if (v427)
  {
    if (*(_DWORD *)v427 == 2)
      WTF::StringImpl::destroy(v427, v426);
    else
      *(_DWORD *)v427 -= 2;
  }
  *v425 = off_1E33948F0;
  if (v424)
    v428 = v424;
  else
    v428 = v247;
  *(_DWORD *)v428 += 2;
  v425[15] = v428;
  this[178] = (int32x2_t)v425;
  this[179].i32[0] = 0;
  this[179].i32[1] = *((_DWORD *)v428 + 1);
  this[180] = vmax_s32(0, 0);
  v429 = v681;
  v681 = 0;
  if (v429)
  {
    if (*(_DWORD *)v429 == 2)
      WTF::StringImpl::destroy(v429, v426);
    else
      *(_DWORD *)v429 -= 2;
  }
  v430 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v430)
  {
    if (v430[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v430 + 8))(v430);
    else
      --v430[2];
  }
  v431 = v677[0];
  v677[0] = 0;
  if (v431)
  {
    if (*(_DWORD *)v431 == 2)
      WTF::StringImpl::destroy(v431, v426);
    else
      *(_DWORD *)v431 -= 2;
  }
  if (v424)
  {
    if (*(_DWORD *)v424 == 2)
      WTF::StringImpl::destroy(v424, v426);
    else
      *(_DWORD *)v424 -= 2;
  }
  v432 = v680;
  v680 = 0;
  if (v432)
  {
    if (*(_DWORD *)v432 == 2)
      WTF::StringImpl::destroy(v432, v426);
    else
      *(_DWORD *)v432 -= 2;
  }
  this[181] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v433 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v434 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v436 = v682;
  v682 = 0;
  if (v436)
  {
    if (*(_DWORD *)v436 == 2)
      WTF::StringImpl::destroy(v436, v435);
    else
      *(_DWORD *)v436 -= 2;
  }
  *v434 = off_1E33948F0;
  if (v433)
    v437 = v433;
  else
    v437 = v247;
  *(_DWORD *)v437 += 2;
  v434[15] = v437;
  this[182] = (int32x2_t)v434;
  this[183].i32[0] = 0;
  this[183].i32[1] = *((_DWORD *)v437 + 1);
  this[184] = vmax_s32(0, 0);
  v438 = v681;
  v681 = 0;
  if (v438)
  {
    if (*(_DWORD *)v438 == 2)
      WTF::StringImpl::destroy(v438, v435);
    else
      *(_DWORD *)v438 -= 2;
  }
  v439 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v439)
  {
    if (v439[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v439 + 8))(v439);
    else
      --v439[2];
  }
  v440 = v677[0];
  v677[0] = 0;
  if (v440)
  {
    if (*(_DWORD *)v440 == 2)
      WTF::StringImpl::destroy(v440, v435);
    else
      *(_DWORD *)v440 -= 2;
  }
  if (v433)
  {
    if (*(_DWORD *)v433 == 2)
      WTF::StringImpl::destroy(v433, v435);
    else
      *(_DWORD *)v433 -= 2;
  }
  v441 = v680;
  v680 = 0;
  if (v441)
  {
    if (*(_DWORD *)v441 == 2)
      WTF::StringImpl::destroy(v441, v435);
    else
      *(_DWORD *)v441 -= 2;
  }
  this[185] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v442 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v443 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v445 = v682;
  v682 = 0;
  if (v445)
  {
    if (*(_DWORD *)v445 == 2)
      WTF::StringImpl::destroy(v445, v444);
    else
      *(_DWORD *)v445 -= 2;
  }
  *v443 = off_1E33948F0;
  if (v442)
    v446 = v442;
  else
    v446 = v247;
  *(_DWORD *)v446 += 2;
  v443[15] = v446;
  this[186] = (int32x2_t)v443;
  this[187].i32[0] = 0;
  this[187].i32[1] = *((_DWORD *)v446 + 1);
  this[188] = vmax_s32(0, 0);
  v447 = v681;
  v681 = 0;
  if (v447)
  {
    if (*(_DWORD *)v447 == 2)
      WTF::StringImpl::destroy(v447, v444);
    else
      *(_DWORD *)v447 -= 2;
  }
  v448 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v448)
  {
    if (v448[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v448 + 8))(v448);
    else
      --v448[2];
  }
  v449 = v677[0];
  v677[0] = 0;
  if (v449)
  {
    if (*(_DWORD *)v449 == 2)
      WTF::StringImpl::destroy(v449, v444);
    else
      *(_DWORD *)v449 -= 2;
  }
  if (v442)
  {
    if (*(_DWORD *)v442 == 2)
      WTF::StringImpl::destroy(v442, v444);
    else
      *(_DWORD *)v442 -= 2;
  }
  v450 = v680;
  v680 = 0;
  if (v450)
  {
    if (*(_DWORD *)v450 == 2)
      WTF::StringImpl::destroy(v450, v444);
    else
      *(_DWORD *)v450 -= 2;
  }
  this[189] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v451 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v452 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v454 = v682;
  v682 = 0;
  if (v454)
  {
    if (*(_DWORD *)v454 == 2)
      WTF::StringImpl::destroy(v454, v453);
    else
      *(_DWORD *)v454 -= 2;
  }
  *v452 = off_1E33948F0;
  if (v451)
    v455 = v451;
  else
    v455 = v247;
  *(_DWORD *)v455 += 2;
  v452[15] = v455;
  this[190] = (int32x2_t)v452;
  this[191].i32[0] = 0;
  this[191].i32[1] = *((_DWORD *)v455 + 1);
  this[192] = vmax_s32(0, 0);
  v456 = v681;
  v681 = 0;
  if (v456)
  {
    if (*(_DWORD *)v456 == 2)
      WTF::StringImpl::destroy(v456, v453);
    else
      *(_DWORD *)v456 -= 2;
  }
  v457 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v457)
  {
    if (v457[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v457 + 8))(v457);
    else
      --v457[2];
  }
  v458 = v677[0];
  v677[0] = 0;
  if (v458)
  {
    if (*(_DWORD *)v458 == 2)
      WTF::StringImpl::destroy(v458, v453);
    else
      *(_DWORD *)v458 -= 2;
  }
  if (v451)
  {
    if (*(_DWORD *)v451 == 2)
      WTF::StringImpl::destroy(v451, v453);
    else
      *(_DWORD *)v451 -= 2;
  }
  v459 = v680;
  v680 = 0;
  if (v459)
  {
    if (*(_DWORD *)v459 == 2)
      WTF::StringImpl::destroy(v459, v453);
    else
      *(_DWORD *)v459 -= 2;
  }
  this[193] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v460 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v461 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v463 = v682;
  v682 = 0;
  if (v463)
  {
    if (*(_DWORD *)v463 == 2)
      WTF::StringImpl::destroy(v463, v462);
    else
      *(_DWORD *)v463 -= 2;
  }
  *v461 = off_1E33948F0;
  if (v460)
    v464 = v460;
  else
    v464 = v247;
  *(_DWORD *)v464 += 2;
  v461[15] = v464;
  this[194] = (int32x2_t)v461;
  this[195].i32[0] = 0;
  this[195].i32[1] = *((_DWORD *)v464 + 1);
  this[196] = vmax_s32(0, 0);
  v465 = v681;
  v681 = 0;
  if (v465)
  {
    if (*(_DWORD *)v465 == 2)
      WTF::StringImpl::destroy(v465, v462);
    else
      *(_DWORD *)v465 -= 2;
  }
  v466 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v466)
  {
    if (v466[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v466 + 8))(v466);
    else
      --v466[2];
  }
  v467 = v677[0];
  v677[0] = 0;
  if (v467)
  {
    if (*(_DWORD *)v467 == 2)
      WTF::StringImpl::destroy(v467, v462);
    else
      *(_DWORD *)v467 -= 2;
  }
  if (v460)
  {
    if (*(_DWORD *)v460 == 2)
      WTF::StringImpl::destroy(v460, v462);
    else
      *(_DWORD *)v460 -= 2;
  }
  v468 = v680;
  v680 = 0;
  if (v468)
  {
    if (*(_DWORD *)v468 == 2)
      WTF::StringImpl::destroy(v468, v462);
    else
      *(_DWORD *)v468 -= 2;
  }
  this[197] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v469 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v470 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v472 = v682;
  v682 = 0;
  if (v472)
  {
    if (*(_DWORD *)v472 == 2)
      WTF::StringImpl::destroy(v472, v471);
    else
      *(_DWORD *)v472 -= 2;
  }
  *v470 = off_1E33948F0;
  if (v469)
    v473 = v469;
  else
    v473 = v247;
  *(_DWORD *)v473 += 2;
  v470[15] = v473;
  this[198] = (int32x2_t)v470;
  this[199].i32[0] = 0;
  this[199].i32[1] = *((_DWORD *)v473 + 1);
  this[200] = vmax_s32(0, 0);
  v474 = v681;
  v681 = 0;
  if (v474)
  {
    if (*(_DWORD *)v474 == 2)
      WTF::StringImpl::destroy(v474, v471);
    else
      *(_DWORD *)v474 -= 2;
  }
  v475 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v475)
  {
    if (v475[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v475 + 8))(v475);
    else
      --v475[2];
  }
  v476 = v677[0];
  v677[0] = 0;
  if (v476)
  {
    if (*(_DWORD *)v476 == 2)
      WTF::StringImpl::destroy(v476, v471);
    else
      *(_DWORD *)v476 -= 2;
  }
  if (v469)
  {
    if (*(_DWORD *)v469 == 2)
      WTF::StringImpl::destroy(v469, v471);
    else
      *(_DWORD *)v469 -= 2;
  }
  v477 = v680;
  v680 = 0;
  if (v477)
  {
    if (*(_DWORD *)v477 == 2)
      WTF::StringImpl::destroy(v477, v471);
    else
      *(_DWORD *)v477 -= 2;
  }
  this[201] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v478 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v479 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v481 = v682;
  v682 = 0;
  if (v481)
  {
    if (*(_DWORD *)v481 == 2)
      WTF::StringImpl::destroy(v481, v480);
    else
      *(_DWORD *)v481 -= 2;
  }
  *v479 = off_1E33948F0;
  if (v478)
    v482 = v478;
  else
    v482 = v247;
  *(_DWORD *)v482 += 2;
  v479[15] = v482;
  this[202] = (int32x2_t)v479;
  this[203].i32[0] = 0;
  this[203].i32[1] = *((_DWORD *)v482 + 1);
  this[204] = vmax_s32(0, 0);
  v483 = v681;
  v681 = 0;
  if (v483)
  {
    if (*(_DWORD *)v483 == 2)
      WTF::StringImpl::destroy(v483, v480);
    else
      *(_DWORD *)v483 -= 2;
  }
  v484 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v484)
  {
    if (v484[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v484 + 8))(v484);
    else
      --v484[2];
  }
  v485 = v677[0];
  v677[0] = 0;
  if (v485)
  {
    if (*(_DWORD *)v485 == 2)
      WTF::StringImpl::destroy(v485, v480);
    else
      *(_DWORD *)v485 -= 2;
  }
  if (v478)
  {
    if (*(_DWORD *)v478 == 2)
      WTF::StringImpl::destroy(v478, v480);
    else
      *(_DWORD *)v478 -= 2;
  }
  v486 = v680;
  v680 = 0;
  if (v486)
  {
    if (*(_DWORD *)v486 == 2)
      WTF::StringImpl::destroy(v486, v480);
    else
      *(_DWORD *)v486 -= 2;
  }
  this[205] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v487 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v488 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v490 = v682;
  v682 = 0;
  if (v490)
  {
    if (*(_DWORD *)v490 == 2)
      WTF::StringImpl::destroy(v490, v489);
    else
      *(_DWORD *)v490 -= 2;
  }
  *v488 = off_1E33948F0;
  if (v487)
    v491 = v487;
  else
    v491 = v247;
  *(_DWORD *)v491 += 2;
  v488[15] = v491;
  this[206] = (int32x2_t)v488;
  this[207].i32[0] = 0;
  this[207].i32[1] = *((_DWORD *)v491 + 1);
  this[208] = vmax_s32(0, 0);
  v492 = v681;
  v681 = 0;
  if (v492)
  {
    if (*(_DWORD *)v492 == 2)
      WTF::StringImpl::destroy(v492, v489);
    else
      *(_DWORD *)v492 -= 2;
  }
  v493 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v493)
  {
    if (v493[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v493 + 8))(v493);
    else
      --v493[2];
  }
  v494 = v677[0];
  v677[0] = 0;
  if (v494)
  {
    if (*(_DWORD *)v494 == 2)
      WTF::StringImpl::destroy(v494, v489);
    else
      *(_DWORD *)v494 -= 2;
  }
  if (v487)
  {
    if (*(_DWORD *)v487 == 2)
      WTF::StringImpl::destroy(v487, v489);
    else
      *(_DWORD *)v487 -= 2;
  }
  v495 = v680;
  v680 = 0;
  if (v495)
  {
    if (*(_DWORD *)v495 == 2)
      WTF::StringImpl::destroy(v495, v489);
    else
      *(_DWORD *)v495 -= 2;
  }
  this[209] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v496 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v497 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v499 = v682;
  v682 = 0;
  if (v499)
  {
    if (*(_DWORD *)v499 == 2)
      WTF::StringImpl::destroy(v499, v498);
    else
      *(_DWORD *)v499 -= 2;
  }
  *v497 = off_1E33948F0;
  if (v496)
    v500 = v496;
  else
    v500 = v247;
  *(_DWORD *)v500 += 2;
  v497[15] = v500;
  this[210] = (int32x2_t)v497;
  this[211].i32[0] = 0;
  this[211].i32[1] = *((_DWORD *)v500 + 1);
  this[212] = vmax_s32(0, 0);
  v501 = v681;
  v681 = 0;
  if (v501)
  {
    if (*(_DWORD *)v501 == 2)
      WTF::StringImpl::destroy(v501, v498);
    else
      *(_DWORD *)v501 -= 2;
  }
  v502 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v502)
  {
    if (v502[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v502 + 8))(v502);
    else
      --v502[2];
  }
  v503 = v677[0];
  v677[0] = 0;
  if (v503)
  {
    if (*(_DWORD *)v503 == 2)
      WTF::StringImpl::destroy(v503, v498);
    else
      *(_DWORD *)v503 -= 2;
  }
  if (v496)
  {
    if (*(_DWORD *)v496 == 2)
      WTF::StringImpl::destroy(v496, v498);
    else
      *(_DWORD *)v496 -= 2;
  }
  v504 = v680;
  v680 = 0;
  if (v504)
  {
    if (*(_DWORD *)v504 == 2)
      WTF::StringImpl::destroy(v504, v498);
    else
      *(_DWORD *)v504 -= 2;
  }
  this[213] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v505 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v506 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v508 = v682;
  v682 = 0;
  if (v508)
  {
    if (*(_DWORD *)v508 == 2)
      WTF::StringImpl::destroy(v508, v507);
    else
      *(_DWORD *)v508 -= 2;
  }
  *v506 = off_1E33948F0;
  if (v505)
    v509 = v505;
  else
    v509 = v247;
  *(_DWORD *)v509 += 2;
  v506[15] = v509;
  this[214] = (int32x2_t)v506;
  this[215].i32[0] = 0;
  this[215].i32[1] = *((_DWORD *)v509 + 1);
  this[216] = vmax_s32(0, 0);
  v510 = v681;
  v681 = 0;
  if (v510)
  {
    if (*(_DWORD *)v510 == 2)
      WTF::StringImpl::destroy(v510, v507);
    else
      *(_DWORD *)v510 -= 2;
  }
  v511 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v511)
  {
    if (v511[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v511 + 8))(v511);
    else
      --v511[2];
  }
  v512 = v677[0];
  v677[0] = 0;
  if (v512)
  {
    if (*(_DWORD *)v512 == 2)
      WTF::StringImpl::destroy(v512, v507);
    else
      *(_DWORD *)v512 -= 2;
  }
  if (v505)
  {
    if (*(_DWORD *)v505 == 2)
      WTF::StringImpl::destroy(v505, v507);
    else
      *(_DWORD *)v505 -= 2;
  }
  v513 = v680;
  v680 = 0;
  if (v513)
  {
    if (*(_DWORD *)v513 == 2)
      WTF::StringImpl::destroy(v513, v507);
    else
      *(_DWORD *)v513 -= 2;
  }
  this[217] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v514 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v515 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v517 = v682;
  v682 = 0;
  if (v517)
  {
    if (*(_DWORD *)v517 == 2)
      WTF::StringImpl::destroy(v517, v516);
    else
      *(_DWORD *)v517 -= 2;
  }
  *v515 = off_1E33948F0;
  if (v514)
    v518 = v514;
  else
    v518 = v247;
  *(_DWORD *)v518 += 2;
  v515[15] = v518;
  this[218] = (int32x2_t)v515;
  this[219].i32[0] = 0;
  this[219].i32[1] = *((_DWORD *)v518 + 1);
  this[220] = vmax_s32(0, 0);
  v519 = v681;
  v681 = 0;
  if (v519)
  {
    if (*(_DWORD *)v519 == 2)
      WTF::StringImpl::destroy(v519, v516);
    else
      *(_DWORD *)v519 -= 2;
  }
  v520 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v520)
  {
    if (v520[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v520 + 8))(v520);
    else
      --v520[2];
  }
  v521 = v677[0];
  v677[0] = 0;
  if (v521)
  {
    if (*(_DWORD *)v521 == 2)
      WTF::StringImpl::destroy(v521, v516);
    else
      *(_DWORD *)v521 -= 2;
  }
  if (v514)
  {
    if (*(_DWORD *)v514 == 2)
      WTF::StringImpl::destroy(v514, v516);
    else
      *(_DWORD *)v514 -= 2;
  }
  v522 = v680;
  v680 = 0;
  if (v522)
  {
    if (*(_DWORD *)v522 == 2)
      WTF::StringImpl::destroy(v522, v516);
    else
      *(_DWORD *)v522 -= 2;
  }
  this[221] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v523 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v524 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v526 = v682;
  v682 = 0;
  if (v526)
  {
    if (*(_DWORD *)v526 == 2)
      WTF::StringImpl::destroy(v526, v525);
    else
      *(_DWORD *)v526 -= 2;
  }
  *v524 = off_1E33948F0;
  if (v523)
    v527 = v523;
  else
    v527 = v247;
  *(_DWORD *)v527 += 2;
  v524[15] = v527;
  this[222] = (int32x2_t)v524;
  this[223].i32[0] = 0;
  this[223].i32[1] = *((_DWORD *)v527 + 1);
  this[224] = vmax_s32(0, 0);
  v528 = v681;
  v681 = 0;
  if (v528)
  {
    if (*(_DWORD *)v528 == 2)
      WTF::StringImpl::destroy(v528, v525);
    else
      *(_DWORD *)v528 -= 2;
  }
  v529 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v529)
  {
    if (v529[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v529 + 8))(v529);
    else
      --v529[2];
  }
  v530 = v677[0];
  v677[0] = 0;
  if (v530)
  {
    if (*(_DWORD *)v530 == 2)
      WTF::StringImpl::destroy(v530, v525);
    else
      *(_DWORD *)v530 -= 2;
  }
  if (v523)
  {
    if (*(_DWORD *)v523 == 2)
      WTF::StringImpl::destroy(v523, v525);
    else
      *(_DWORD *)v523 -= 2;
  }
  v531 = v680;
  v680 = 0;
  if (v531)
  {
    if (*(_DWORD *)v531 == 2)
      WTF::StringImpl::destroy(v531, v525);
    else
      *(_DWORD *)v531 -= 2;
  }
  this[225] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v532 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v533 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v535 = v682;
  v682 = 0;
  if (v535)
  {
    if (*(_DWORD *)v535 == 2)
      WTF::StringImpl::destroy(v535, v534);
    else
      *(_DWORD *)v535 -= 2;
  }
  *v533 = off_1E33948F0;
  if (v532)
    v536 = v532;
  else
    v536 = v247;
  *(_DWORD *)v536 += 2;
  v533[15] = v536;
  this[226] = (int32x2_t)v533;
  this[227].i32[0] = 0;
  this[227].i32[1] = *((_DWORD *)v536 + 1);
  this[228] = vmax_s32(0, 0);
  v537 = v681;
  v681 = 0;
  if (v537)
  {
    if (*(_DWORD *)v537 == 2)
      WTF::StringImpl::destroy(v537, v534);
    else
      *(_DWORD *)v537 -= 2;
  }
  v538 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v538)
  {
    if (v538[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v538 + 8))(v538);
    else
      --v538[2];
  }
  v539 = v677[0];
  v677[0] = 0;
  if (v539)
  {
    if (*(_DWORD *)v539 == 2)
      WTF::StringImpl::destroy(v539, v534);
    else
      *(_DWORD *)v539 -= 2;
  }
  if (v532)
  {
    if (*(_DWORD *)v532 == 2)
      WTF::StringImpl::destroy(v532, v534);
    else
      *(_DWORD *)v532 -= 2;
  }
  v540 = v680;
  v680 = 0;
  if (v540)
  {
    if (*(_DWORD *)v540 == 2)
      WTF::StringImpl::destroy(v540, v534);
    else
      *(_DWORD *)v540 -= 2;
  }
  this[229] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v541 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v542 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v544 = v682;
  v682 = 0;
  if (v544)
  {
    if (*(_DWORD *)v544 == 2)
      WTF::StringImpl::destroy(v544, v543);
    else
      *(_DWORD *)v544 -= 2;
  }
  *v542 = off_1E33948F0;
  if (v541)
    v545 = v541;
  else
    v545 = v247;
  *(_DWORD *)v545 += 2;
  v542[15] = v545;
  this[230] = (int32x2_t)v542;
  this[231].i32[0] = 0;
  this[231].i32[1] = *((_DWORD *)v545 + 1);
  this[232] = vmax_s32(0, 0);
  v546 = v681;
  v681 = 0;
  if (v546)
  {
    if (*(_DWORD *)v546 == 2)
      WTF::StringImpl::destroy(v546, v543);
    else
      *(_DWORD *)v546 -= 2;
  }
  v547 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v547)
  {
    if (v547[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v547 + 8))(v547);
    else
      --v547[2];
  }
  v548 = v677[0];
  v677[0] = 0;
  if (v548)
  {
    if (*(_DWORD *)v548 == 2)
      WTF::StringImpl::destroy(v548, v543);
    else
      *(_DWORD *)v548 -= 2;
  }
  if (v541)
  {
    if (*(_DWORD *)v541 == 2)
      WTF::StringImpl::destroy(v541, v543);
    else
      *(_DWORD *)v541 -= 2;
  }
  v549 = v680;
  v680 = 0;
  if (v549)
  {
    if (*(_DWORD *)v549 == 2)
      WTF::StringImpl::destroy(v549, v543);
    else
      *(_DWORD *)v549 -= 2;
  }
  this[233] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v550 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v551 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v553 = v682;
  v682 = 0;
  if (v553)
  {
    if (*(_DWORD *)v553 == 2)
      WTF::StringImpl::destroy(v553, v552);
    else
      *(_DWORD *)v553 -= 2;
  }
  *v551 = off_1E33948F0;
  if (v550)
    v554 = v550;
  else
    v554 = v247;
  *(_DWORD *)v554 += 2;
  v551[15] = v554;
  this[234] = (int32x2_t)v551;
  this[235].i32[0] = 0;
  this[235].i32[1] = *((_DWORD *)v554 + 1);
  this[236] = vmax_s32(0, 0);
  v555 = v681;
  v681 = 0;
  if (v555)
  {
    if (*(_DWORD *)v555 == 2)
      WTF::StringImpl::destroy(v555, v552);
    else
      *(_DWORD *)v555 -= 2;
  }
  v556 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v556)
  {
    if (v556[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v556 + 8))(v556);
    else
      --v556[2];
  }
  v557 = v677[0];
  v677[0] = 0;
  if (v557)
  {
    if (*(_DWORD *)v557 == 2)
      WTF::StringImpl::destroy(v557, v552);
    else
      *(_DWORD *)v557 -= 2;
  }
  if (v550)
  {
    if (*(_DWORD *)v550 == 2)
      WTF::StringImpl::destroy(v550, v552);
    else
      *(_DWORD *)v550 -= 2;
  }
  v558 = v680;
  v680 = 0;
  if (v558)
  {
    if (*(_DWORD *)v558 == 2)
      WTF::StringImpl::destroy(v558, v552);
    else
      *(_DWORD *)v558 -= 2;
  }
  this[237] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v559 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v560 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v562 = v682;
  v682 = 0;
  if (v562)
  {
    if (*(_DWORD *)v562 == 2)
      WTF::StringImpl::destroy(v562, v561);
    else
      *(_DWORD *)v562 -= 2;
  }
  *v560 = off_1E33948F0;
  if (v559)
    v563 = v559;
  else
    v563 = v247;
  *(_DWORD *)v563 += 2;
  v560[15] = v563;
  this[238] = (int32x2_t)v560;
  this[239].i32[0] = 0;
  this[239].i32[1] = *((_DWORD *)v563 + 1);
  this[240] = vmax_s32(0, 0);
  v564 = v681;
  v681 = 0;
  if (v564)
  {
    if (*(_DWORD *)v564 == 2)
      WTF::StringImpl::destroy(v564, v561);
    else
      *(_DWORD *)v564 -= 2;
  }
  v565 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v565)
  {
    if (v565[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v565 + 8))(v565);
    else
      --v565[2];
  }
  v566 = v677[0];
  v677[0] = 0;
  if (v566)
  {
    if (*(_DWORD *)v566 == 2)
      WTF::StringImpl::destroy(v566, v561);
    else
      *(_DWORD *)v566 -= 2;
  }
  if (v559)
  {
    if (*(_DWORD *)v559 == 2)
      WTF::StringImpl::destroy(v559, v561);
    else
      *(_DWORD *)v559 -= 2;
  }
  v567 = v680;
  v680 = 0;
  if (v567)
  {
    if (*(_DWORD *)v567 == 2)
      WTF::StringImpl::destroy(v567, v561);
    else
      *(_DWORD *)v567 -= 2;
  }
  this[241] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v568 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v569 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v571 = v682;
  v682 = 0;
  if (v571)
  {
    if (*(_DWORD *)v571 == 2)
      WTF::StringImpl::destroy(v571, v570);
    else
      *(_DWORD *)v571 -= 2;
  }
  *v569 = off_1E33948F0;
  if (v568)
    v572 = v568;
  else
    v572 = v247;
  *(_DWORD *)v572 += 2;
  v569[15] = v572;
  this[242] = (int32x2_t)v569;
  this[243].i32[0] = 0;
  this[243].i32[1] = *((_DWORD *)v572 + 1);
  this[244] = vmax_s32(0, 0);
  v573 = v681;
  v681 = 0;
  if (v573)
  {
    if (*(_DWORD *)v573 == 2)
      WTF::StringImpl::destroy(v573, v570);
    else
      *(_DWORD *)v573 -= 2;
  }
  v574 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v574)
  {
    if (v574[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v574 + 8))(v574);
    else
      --v574[2];
  }
  v575 = v677[0];
  v677[0] = 0;
  if (v575)
  {
    if (*(_DWORD *)v575 == 2)
      WTF::StringImpl::destroy(v575, v570);
    else
      *(_DWORD *)v575 -= 2;
  }
  if (v568)
  {
    if (*(_DWORD *)v568 == 2)
      WTF::StringImpl::destroy(v568, v570);
    else
      *(_DWORD *)v568 -= 2;
  }
  v576 = v680;
  v680 = 0;
  if (v576)
  {
    if (*(_DWORD *)v576 == 2)
      WTF::StringImpl::destroy(v576, v570);
    else
      *(_DWORD *)v576 -= 2;
  }
  this[245] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v577 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v578 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v580 = v682;
  v682 = 0;
  if (v580)
  {
    if (*(_DWORD *)v580 == 2)
      WTF::StringImpl::destroy(v580, v579);
    else
      *(_DWORD *)v580 -= 2;
  }
  *v578 = off_1E33948F0;
  if (v577)
    v581 = v577;
  else
    v581 = v247;
  *(_DWORD *)v581 += 2;
  v578[15] = v581;
  this[246] = (int32x2_t)v578;
  this[247].i32[0] = 0;
  this[247].i32[1] = *((_DWORD *)v581 + 1);
  this[248] = vmax_s32(0, 0);
  v582 = v681;
  v681 = 0;
  if (v582)
  {
    if (*(_DWORD *)v582 == 2)
      WTF::StringImpl::destroy(v582, v579);
    else
      *(_DWORD *)v582 -= 2;
  }
  v583 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v583)
  {
    if (v583[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v583 + 8))(v583);
    else
      --v583[2];
  }
  v584 = v677[0];
  v677[0] = 0;
  if (v584)
  {
    if (*(_DWORD *)v584 == 2)
      WTF::StringImpl::destroy(v584, v579);
    else
      *(_DWORD *)v584 -= 2;
  }
  if (v577)
  {
    if (*(_DWORD *)v577 == 2)
      WTF::StringImpl::destroy(v577, v579);
    else
      *(_DWORD *)v577 -= 2;
  }
  v585 = v680;
  v680 = 0;
  if (v585)
  {
    if (*(_DWORD *)v585 == 2)
      WTF::StringImpl::destroy(v585, v579);
    else
      *(_DWORD *)v585 -= 2;
  }
  this[249] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v586 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v587 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v589 = v682;
  v682 = 0;
  if (v589)
  {
    if (*(_DWORD *)v589 == 2)
      WTF::StringImpl::destroy(v589, v588);
    else
      *(_DWORD *)v589 -= 2;
  }
  *v587 = off_1E33948F0;
  if (v586)
    v590 = v586;
  else
    v590 = v247;
  *(_DWORD *)v590 += 2;
  v587[15] = v590;
  this[250] = (int32x2_t)v587;
  this[251].i32[0] = 0;
  this[251].i32[1] = *((_DWORD *)v590 + 1);
  this[252] = vmax_s32(0, 0);
  v591 = v681;
  v681 = 0;
  if (v591)
  {
    if (*(_DWORD *)v591 == 2)
      WTF::StringImpl::destroy(v591, v588);
    else
      *(_DWORD *)v591 -= 2;
  }
  v592 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v592)
  {
    if (v592[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v592 + 8))(v592);
    else
      --v592[2];
  }
  v593 = v677[0];
  v677[0] = 0;
  if (v593)
  {
    if (*(_DWORD *)v593 == 2)
      WTF::StringImpl::destroy(v593, v588);
    else
      *(_DWORD *)v593 -= 2;
  }
  if (v586)
  {
    if (*(_DWORD *)v586 == 2)
      WTF::StringImpl::destroy(v586, v588);
    else
      *(_DWORD *)v586 -= 2;
  }
  v594 = v680;
  v680 = 0;
  if (v594)
  {
    if (*(_DWORD *)v594 == 2)
      WTF::StringImpl::destroy(v594, v588);
    else
      *(_DWORD *)v594 -= 2;
  }
  this[253] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v595 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v596 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v598 = v682;
  v682 = 0;
  if (v598)
  {
    if (*(_DWORD *)v598 == 2)
      WTF::StringImpl::destroy(v598, v597);
    else
      *(_DWORD *)v598 -= 2;
  }
  *v596 = off_1E33948F0;
  if (v595)
    v599 = v595;
  else
    v599 = v247;
  *(_DWORD *)v599 += 2;
  v596[15] = v599;
  this[254] = (int32x2_t)v596;
  this[255].i32[0] = 0;
  this[255].i32[1] = *((_DWORD *)v599 + 1);
  this[256] = vmax_s32(0, 0);
  v600 = v681;
  v681 = 0;
  if (v600)
  {
    if (*(_DWORD *)v600 == 2)
      WTF::StringImpl::destroy(v600, v597);
    else
      *(_DWORD *)v600 -= 2;
  }
  v601 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v601)
  {
    if (v601[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v601 + 8))(v601);
    else
      --v601[2];
  }
  v602 = v677[0];
  v677[0] = 0;
  if (v602)
  {
    if (*(_DWORD *)v602 == 2)
      WTF::StringImpl::destroy(v602, v597);
    else
      *(_DWORD *)v602 -= 2;
  }
  if (v595)
  {
    if (*(_DWORD *)v595 == 2)
      WTF::StringImpl::destroy(v595, v597);
    else
      *(_DWORD *)v595 -= 2;
  }
  v603 = v680;
  v680 = 0;
  if (v603)
  {
    if (*(_DWORD *)v603 == 2)
      WTF::StringImpl::destroy(v603, v597);
    else
      *(_DWORD *)v603 -= 2;
  }
  this[257] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v604 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v605 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v607 = v682;
  v682 = 0;
  if (v607)
  {
    if (*(_DWORD *)v607 == 2)
      WTF::StringImpl::destroy(v607, v606);
    else
      *(_DWORD *)v607 -= 2;
  }
  *v605 = off_1E33948F0;
  if (v604)
    v608 = v604;
  else
    v608 = v247;
  *(_DWORD *)v608 += 2;
  v605[15] = v608;
  this[258] = (int32x2_t)v605;
  this[259].i32[0] = 0;
  this[259].i32[1] = *((_DWORD *)v608 + 1);
  this[260] = vmax_s32(0, 0);
  v609 = v681;
  v681 = 0;
  if (v609)
  {
    if (*(_DWORD *)v609 == 2)
      WTF::StringImpl::destroy(v609, v606);
    else
      *(_DWORD *)v609 -= 2;
  }
  v610 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v610)
  {
    if (v610[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v610 + 8))(v610);
    else
      --v610[2];
  }
  v611 = v677[0];
  v677[0] = 0;
  if (v611)
  {
    if (*(_DWORD *)v611 == 2)
      WTF::StringImpl::destroy(v611, v606);
    else
      *(_DWORD *)v611 -= 2;
  }
  if (v604)
  {
    if (*(_DWORD *)v604 == 2)
      WTF::StringImpl::destroy(v604, v606);
    else
      *(_DWORD *)v604 -= 2;
  }
  v612 = v680;
  v680 = 0;
  if (v612)
  {
    if (*(_DWORD *)v612 == 2)
      WTF::StringImpl::destroy(v612, v606);
    else
      *(_DWORD *)v612 -= 2;
  }
  this[261] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v613 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v614 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v616 = v682;
  v682 = 0;
  if (v616)
  {
    if (*(_DWORD *)v616 == 2)
      WTF::StringImpl::destroy(v616, v615);
    else
      *(_DWORD *)v616 -= 2;
  }
  *v614 = off_1E33948F0;
  if (v613)
    v617 = v613;
  else
    v617 = v247;
  *(_DWORD *)v617 += 2;
  v614[15] = v617;
  this[262] = (int32x2_t)v614;
  this[263].i32[0] = 0;
  this[263].i32[1] = *((_DWORD *)v617 + 1);
  this[264] = vmax_s32(0, 0);
  v618 = v681;
  v681 = 0;
  if (v618)
  {
    if (*(_DWORD *)v618 == 2)
      WTF::StringImpl::destroy(v618, v615);
    else
      *(_DWORD *)v618 -= 2;
  }
  v619 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v619)
  {
    if (v619[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v619 + 8))(v619);
    else
      --v619[2];
  }
  v620 = v677[0];
  v677[0] = 0;
  if (v620)
  {
    if (*(_DWORD *)v620 == 2)
      WTF::StringImpl::destroy(v620, v615);
    else
      *(_DWORD *)v620 -= 2;
  }
  if (v613)
  {
    if (*(_DWORD *)v613 == 2)
      WTF::StringImpl::destroy(v613, v615);
    else
      *(_DWORD *)v613 -= 2;
  }
  v621 = v680;
  v680 = 0;
  if (v621)
  {
    if (*(_DWORD *)v621 == 2)
      WTF::StringImpl::destroy(v621, v615);
    else
      *(_DWORD *)v621 -= 2;
  }
  this[265] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v622 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v623 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v625 = v682;
  v682 = 0;
  if (v625)
  {
    if (*(_DWORD *)v625 == 2)
      WTF::StringImpl::destroy(v625, v624);
    else
      *(_DWORD *)v625 -= 2;
  }
  *v623 = off_1E33948F0;
  if (v622)
    v626 = v622;
  else
    v626 = v247;
  *(_DWORD *)v626 += 2;
  v623[15] = v626;
  this[266] = (int32x2_t)v623;
  this[267].i32[0] = 0;
  this[267].i32[1] = *((_DWORD *)v626 + 1);
  this[268] = vmax_s32(0, 0);
  v627 = v681;
  v681 = 0;
  if (v627)
  {
    if (*(_DWORD *)v627 == 2)
      WTF::StringImpl::destroy(v627, v624);
    else
      *(_DWORD *)v627 -= 2;
  }
  v628 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v628)
  {
    if (v628[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v628 + 8))(v628);
    else
      --v628[2];
  }
  v629 = v677[0];
  v677[0] = 0;
  if (v629)
  {
    if (*(_DWORD *)v629 == 2)
      WTF::StringImpl::destroy(v629, v624);
    else
      *(_DWORD *)v629 -= 2;
  }
  if (v622)
  {
    if (*(_DWORD *)v622 == 2)
      WTF::StringImpl::destroy(v622, v624);
    else
      *(_DWORD *)v622 -= 2;
  }
  v630 = v680;
  v680 = 0;
  if (v630)
  {
    if (*(_DWORD *)v630 == 2)
      WTF::StringImpl::destroy(v630, v624);
    else
      *(_DWORD *)v630 -= 2;
  }
  this[269] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v631 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v632 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v634 = v682;
  v682 = 0;
  if (v634)
  {
    if (*(_DWORD *)v634 == 2)
      WTF::StringImpl::destroy(v634, v633);
    else
      *(_DWORD *)v634 -= 2;
  }
  *v632 = off_1E33948F0;
  if (v631)
    v635 = v631;
  else
    v635 = v247;
  *(_DWORD *)v635 += 2;
  v632[15] = v635;
  this[270] = (int32x2_t)v632;
  this[271].i32[0] = 0;
  this[271].i32[1] = *((_DWORD *)v635 + 1);
  this[272] = vmax_s32(0, 0);
  v636 = v681;
  v681 = 0;
  if (v636)
  {
    if (*(_DWORD *)v636 == 2)
      WTF::StringImpl::destroy(v636, v633);
    else
      *(_DWORD *)v636 -= 2;
  }
  v637 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v637)
  {
    if (v637[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v637 + 8))(v637);
    else
      --v637[2];
  }
  v638 = v677[0];
  v677[0] = 0;
  if (v638)
  {
    if (*(_DWORD *)v638 == 2)
      WTF::StringImpl::destroy(v638, v633);
    else
      *(_DWORD *)v638 -= 2;
  }
  if (v631)
  {
    if (*(_DWORD *)v631 == 2)
      WTF::StringImpl::destroy(v631, v633);
    else
      *(_DWORD *)v631 -= 2;
  }
  v639 = v680;
  v680 = 0;
  if (v639)
  {
    if (*(_DWORD *)v639 == 2)
      WTF::StringImpl::destroy(v639, v633);
    else
      *(_DWORD *)v639 -= 2;
  }
  this[273] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v640 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v641 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v643 = v682;
  v682 = 0;
  if (v643)
  {
    if (*(_DWORD *)v643 == 2)
      WTF::StringImpl::destroy(v643, v642);
    else
      *(_DWORD *)v643 -= 2;
  }
  *v641 = off_1E33948F0;
  if (v640)
    v644 = v640;
  else
    v644 = v247;
  *(_DWORD *)v644 += 2;
  v641[15] = v644;
  this[274] = (int32x2_t)v641;
  this[275].i32[0] = 0;
  this[275].i32[1] = *((_DWORD *)v644 + 1);
  this[276] = vmax_s32(0, 0);
  v645 = v681;
  v681 = 0;
  if (v645)
  {
    if (*(_DWORD *)v645 == 2)
      WTF::StringImpl::destroy(v645, v642);
    else
      *(_DWORD *)v645 -= 2;
  }
  v646 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v646)
  {
    if (v646[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v646 + 8))(v646);
    else
      --v646[2];
  }
  v647 = v677[0];
  v677[0] = 0;
  if (v647)
  {
    if (*(_DWORD *)v647 == 2)
      WTF::StringImpl::destroy(v647, v642);
    else
      *(_DWORD *)v647 -= 2;
  }
  if (v640)
  {
    if (*(_DWORD *)v640 == 2)
      WTF::StringImpl::destroy(v640, v642);
    else
      *(_DWORD *)v640 -= 2;
  }
  v648 = v680;
  v680 = 0;
  if (v648)
  {
    if (*(_DWORD *)v648 == 2)
      WTF::StringImpl::destroy(v648, v642);
    else
      *(_DWORD *)v648 -= 2;
  }
  this[277] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v649 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v650 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v652 = v682;
  v682 = 0;
  if (v652)
  {
    if (*(_DWORD *)v652 == 2)
      WTF::StringImpl::destroy(v652, v651);
    else
      *(_DWORD *)v652 -= 2;
  }
  *v650 = off_1E33948F0;
  if (v649)
    v653 = v649;
  else
    v653 = v247;
  *(_DWORD *)v653 += 2;
  v650[15] = v653;
  this[278] = (int32x2_t)v650;
  this[279].i32[0] = 0;
  this[279].i32[1] = *((_DWORD *)v653 + 1);
  this[280] = vmax_s32(0, 0);
  v654 = v681;
  v681 = 0;
  if (v654)
  {
    if (*(_DWORD *)v654 == 2)
      WTF::StringImpl::destroy(v654, v651);
    else
      *(_DWORD *)v654 -= 2;
  }
  v655 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v655)
  {
    if (v655[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v655 + 8))(v655);
    else
      --v655[2];
  }
  v656 = v677[0];
  v677[0] = 0;
  if (v656)
  {
    if (*(_DWORD *)v656 == 2)
      WTF::StringImpl::destroy(v656, v651);
    else
      *(_DWORD *)v656 -= 2;
  }
  if (v649)
  {
    if (*(_DWORD *)v649 == 2)
      WTF::StringImpl::destroy(v649, v651);
    else
      *(_DWORD *)v649 -= 2;
  }
  v657 = v680;
  v680 = 0;
  if (v657)
  {
    if (*(_DWORD *)v657 == 2)
      WTF::StringImpl::destroy(v657, v651);
    else
      *(_DWORD *)v657 -= 2;
  }
  this[281] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v658 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v659 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v661 = v682;
  v682 = 0;
  if (v661)
  {
    if (*(_DWORD *)v661 == 2)
      WTF::StringImpl::destroy(v661, v660);
    else
      *(_DWORD *)v661 -= 2;
  }
  *v659 = off_1E33948F0;
  if (v658)
    v662 = v658;
  else
    v662 = v247;
  *(_DWORD *)v662 += 2;
  v659[15] = v662;
  this[282] = (int32x2_t)v659;
  this[283].i32[0] = 0;
  this[283].i32[1] = *((_DWORD *)v662 + 1);
  this[284] = vmax_s32(0, 0);
  v663 = v681;
  v681 = 0;
  if (v663)
  {
    if (*(_DWORD *)v663 == 2)
      WTF::StringImpl::destroy(v663, v660);
    else
      *(_DWORD *)v663 -= 2;
  }
  v664 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v664)
  {
    if (v664[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v664 + 8))(v664);
    else
      --v664[2];
  }
  v665 = v677[0];
  v677[0] = 0;
  if (v665)
  {
    if (*(_DWORD *)v665 == 2)
      WTF::StringImpl::destroy(v665, v660);
    else
      *(_DWORD *)v665 -= 2;
  }
  if (v658)
  {
    if (*(_DWORD *)v658 == 2)
      WTF::StringImpl::destroy(v658, v660);
    else
      *(_DWORD *)v658 -= 2;
  }
  v666 = v680;
  v680 = 0;
  if (v666)
  {
    if (*(_DWORD *)v666 == 2)
      WTF::StringImpl::destroy(v666, v660);
    else
      *(_DWORD *)v666 -= 2;
  }
  this[285] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v667 = v680;
  v680 = 0;
  v678 = 0u;
  v679 = 0u;
  *(_OWORD *)v677 = 0u;
  WTF::URL::invalidate((WTF::URL *)v677);
  *((_QWORD *)&v679 + 1) = 0;
  v681 = 0;
  v668 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v682 = 0;
  JSC::SourceProvider::SourceProvider();
  v670 = v682;
  v682 = 0;
  if (v670)
  {
    if (*(_DWORD *)v670 == 2)
      WTF::StringImpl::destroy(v670, v669);
    else
      *(_DWORD *)v670 -= 2;
  }
  *v668 = off_1E33948F0;
  if (v667)
    v671 = v667;
  else
    v671 = v247;
  *(_DWORD *)v671 += 2;
  v668[15] = v671;
  this[286] = (int32x2_t)v668;
  this[287].i32[0] = 0;
  this[287].i32[1] = *((_DWORD *)v671 + 1);
  this[288] = vmax_s32(0, 0);
  v672 = v681;
  v681 = 0;
  if (v672)
  {
    if (*(_DWORD *)v672 == 2)
      WTF::StringImpl::destroy(v672, v669);
    else
      *(_DWORD *)v672 -= 2;
  }
  v673 = (_DWORD *)*((_QWORD *)&v679 + 1);
  *((_QWORD *)&v679 + 1) = 0;
  if (v673)
  {
    if (v673[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v673 + 8))(v673);
    else
      --v673[2];
  }
  v674 = v677[0];
  v677[0] = 0;
  if (v674)
  {
    if (*(_DWORD *)v674 == 2)
      WTF::StringImpl::destroy(v674, v669);
    else
      *(_DWORD *)v674 -= 2;
  }
  if (v667)
  {
    if (*(_DWORD *)v667 == 2)
      WTF::StringImpl::destroy(v667, v669);
    else
      *(_DWORD *)v667 -= 2;
  }
  v675 = v680;
  v680 = 0;
  if (v675)
  {
    if (*(_DWORD *)v675 == 2)
      WTF::StringImpl::destroy(v675, v669);
    else
      *(_DWORD *)v675 -= 2;
  }
  this[289] = 0;
  return this;
}

int32x2_t *WebCore::StreamInternalsBuiltinsWrapper::StreamInternalsBuiltinsWrapper(int32x2_t *this, JSC::VM *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  int v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  int v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  int v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  int v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  int v92;
  WTF::StringImpl *v93;
  _QWORD *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  _DWORD *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  _QWORD *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  _DWORD *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  _QWORD *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  _DWORD *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  _QWORD *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  _DWORD *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  _QWORD *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  _DWORD *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  _QWORD *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  _DWORD *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  _QWORD *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  _DWORD *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  _QWORD *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  _DWORD *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  _QWORD *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  _DWORD *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  _QWORD *v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  _DWORD *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  _QWORD *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  _DWORD *v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  _QWORD *v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  _DWORD *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  WTF::StringImpl *v202;
  _QWORD *v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  WTF::StringImpl *v207;
  _DWORD *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  _QWORD *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  _DWORD *v217;
  WTF::StringImpl *v218;
  WTF::StringImpl *v219;
  WTF::StringImpl *v220;
  _QWORD *v221;
  WTF::StringImpl *v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  WTF::StringImpl *v225;
  _DWORD *v226;
  WTF::StringImpl *v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  _QWORD *v230;
  WTF::StringImpl *v231;
  WTF::StringImpl *v232;
  WTF::StringImpl *v233;
  WTF::StringImpl *v234;
  _DWORD *v235;
  WTF::StringImpl *v236;
  WTF::StringImpl *v237;
  WTF::StringImpl *v238;
  _QWORD *v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  WTF::StringImpl *v242;
  WTF::StringImpl *v243;
  _DWORD *v244;
  WTF::StringImpl *v245;
  WTF::StringImpl *v246;
  WTF::StringImpl *v247;
  _QWORD *v248;
  WTF::StringImpl *v249;
  WTF::StringImpl *v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  _DWORD *v253;
  WTF::StringImpl *v254;
  WTF::StringImpl *v255;
  WTF::StringImpl *v257[2];
  __int128 v258;
  __int128 v259;
  WTF::StringImpl *v260;
  WTF::StringImpl *v261;
  WTF::StringImpl *v262;

  *this = (int32x2_t)&off_1E33940B8;
  this[1] = (int32x2_t)a2;
  WTF::AtomStringImpl::addLiteral();
  this[2] = (int32x2_t)v257[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = v257[0];
  WTF::PrivateSymbolImpl::create(v257[0], v4);
  v6 = v257[0];
  v7 = *(_DWORD *)v257[0];
  *(_DWORD *)v257[0] += 2;
  this[3] = (int32x2_t)v6;
  if (v7)
    *(_DWORD *)v6 = v7;
  else
    WTF::StringImpl::destroy(v6, v5);
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v5);
  else
    *(_DWORD *)v3 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[4] = (int32x2_t)v257[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = v257[0];
  WTF::PrivateSymbolImpl::create(v257[0], v9);
  v11 = v257[0];
  v12 = *(_DWORD *)v257[0];
  *(_DWORD *)v257[0] += 2;
  this[5] = (int32x2_t)v11;
  if (v12)
    *(_DWORD *)v11 = v12;
  else
    WTF::StringImpl::destroy(v11, v10);
  if (*(_DWORD *)v8 == 2)
    WTF::StringImpl::destroy(v8, v10);
  else
    *(_DWORD *)v8 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[6] = (int32x2_t)v257[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = v257[0];
  WTF::PrivateSymbolImpl::create(v257[0], v14);
  v16 = v257[0];
  v17 = *(_DWORD *)v257[0];
  *(_DWORD *)v257[0] += 2;
  this[7] = (int32x2_t)v16;
  if (v17)
    *(_DWORD *)v16 = v17;
  else
    WTF::StringImpl::destroy(v16, v15);
  if (*(_DWORD *)v13 == 2)
    WTF::StringImpl::destroy(v13, v15);
  else
    *(_DWORD *)v13 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[8] = (int32x2_t)v257[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v18 = v257[0];
  WTF::PrivateSymbolImpl::create(v257[0], v19);
  v21 = v257[0];
  v22 = *(_DWORD *)v257[0];
  *(_DWORD *)v257[0] += 2;
  this[9] = (int32x2_t)v21;
  if (v22)
    *(_DWORD *)v21 = v22;
  else
    WTF::StringImpl::destroy(v21, v20);
  if (*(_DWORD *)v18 == 2)
    WTF::StringImpl::destroy(v18, v20);
  else
    *(_DWORD *)v18 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[10] = (int32x2_t)v257[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v23 = v257[0];
  WTF::PrivateSymbolImpl::create(v257[0], v24);
  v26 = v257[0];
  v27 = *(_DWORD *)v257[0];
  *(_DWORD *)v257[0] += 2;
  this[11] = (int32x2_t)v26;
  if (v27)
    *(_DWORD *)v26 = v27;
  else
    WTF::StringImpl::destroy(v26, v25);
  if (*(_DWORD *)v23 == 2)
    WTF::StringImpl::destroy(v23, v25);
  else
    *(_DWORD *)v23 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[12] = (int32x2_t)v257[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v28 = v257[0];
  WTF::PrivateSymbolImpl::create(v257[0], v29);
  v31 = v257[0];
  v32 = *(_DWORD *)v257[0];
  *(_DWORD *)v257[0] += 2;
  this[13] = (int32x2_t)v31;
  if (v32)
    *(_DWORD *)v31 = v32;
  else
    WTF::StringImpl::destroy(v31, v30);
  if (*(_DWORD *)v28 == 2)
    WTF::StringImpl::destroy(v28, v30);
  else
    *(_DWORD *)v28 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[14] = (int32x2_t)v257[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v33 = v257[0];
  WTF::PrivateSymbolImpl::create(v257[0], v34);
  v36 = v257[0];
  v37 = *(_DWORD *)v257[0];
  *(_DWORD *)v257[0] += 2;
  this[15] = (int32x2_t)v36;
  if (v37)
    *(_DWORD *)v36 = v37;
  else
    WTF::StringImpl::destroy(v36, v35);
  if (*(_DWORD *)v33 == 2)
    WTF::StringImpl::destroy(v33, v35);
  else
    *(_DWORD *)v33 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[16] = (int32x2_t)v257[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v38 = v257[0];
  WTF::PrivateSymbolImpl::create(v257[0], v39);
  v41 = v257[0];
  v42 = *(_DWORD *)v257[0];
  *(_DWORD *)v257[0] += 2;
  this[17] = (int32x2_t)v41;
  if (v42)
    *(_DWORD *)v41 = v42;
  else
    WTF::StringImpl::destroy(v41, v40);
  if (*(_DWORD *)v38 == 2)
    WTF::StringImpl::destroy(v38, v40);
  else
    *(_DWORD *)v38 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[18] = (int32x2_t)v257[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v43 = v257[0];
  WTF::PrivateSymbolImpl::create(v257[0], v44);
  v46 = v257[0];
  v47 = *(_DWORD *)v257[0];
  *(_DWORD *)v257[0] += 2;
  this[19] = (int32x2_t)v46;
  if (v47)
    *(_DWORD *)v46 = v47;
  else
    WTF::StringImpl::destroy(v46, v45);
  if (*(_DWORD *)v43 == 2)
    WTF::StringImpl::destroy(v43, v45);
  else
    *(_DWORD *)v43 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[20] = (int32x2_t)v257[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v48 = v257[0];
  WTF::PrivateSymbolImpl::create(v257[0], v49);
  v51 = v257[0];
  v52 = *(_DWORD *)v257[0];
  *(_DWORD *)v257[0] += 2;
  this[21] = (int32x2_t)v51;
  if (v52)
    *(_DWORD *)v51 = v52;
  else
    WTF::StringImpl::destroy(v51, v50);
  if (*(_DWORD *)v48 == 2)
    WTF::StringImpl::destroy(v48, v50);
  else
    *(_DWORD *)v48 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[22] = (int32x2_t)v257[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v53 = v257[0];
  WTF::PrivateSymbolImpl::create(v257[0], v54);
  v56 = v257[0];
  v57 = *(_DWORD *)v257[0];
  *(_DWORD *)v257[0] += 2;
  this[23] = (int32x2_t)v56;
  if (v57)
    *(_DWORD *)v56 = v57;
  else
    WTF::StringImpl::destroy(v56, v55);
  if (*(_DWORD *)v53 == 2)
    WTF::StringImpl::destroy(v53, v55);
  else
    *(_DWORD *)v53 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[24] = (int32x2_t)v257[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v58 = v257[0];
  WTF::PrivateSymbolImpl::create(v257[0], v59);
  v61 = v257[0];
  v62 = *(_DWORD *)v257[0];
  *(_DWORD *)v257[0] += 2;
  this[25] = (int32x2_t)v61;
  if (v62)
    *(_DWORD *)v61 = v62;
  else
    WTF::StringImpl::destroy(v61, v60);
  if (*(_DWORD *)v58 == 2)
    WTF::StringImpl::destroy(v58, v60);
  else
    *(_DWORD *)v58 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[26] = (int32x2_t)v257[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v63 = v257[0];
  WTF::PrivateSymbolImpl::create(v257[0], v64);
  v66 = v257[0];
  v67 = *(_DWORD *)v257[0];
  *(_DWORD *)v257[0] += 2;
  this[27] = (int32x2_t)v66;
  if (v67)
    *(_DWORD *)v66 = v67;
  else
    WTF::StringImpl::destroy(v66, v65);
  if (*(_DWORD *)v63 == 2)
    WTF::StringImpl::destroy(v63, v65);
  else
    *(_DWORD *)v63 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[28] = (int32x2_t)v257[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v68 = v257[0];
  WTF::PrivateSymbolImpl::create(v257[0], v69);
  v71 = v257[0];
  v72 = *(_DWORD *)v257[0];
  *(_DWORD *)v257[0] += 2;
  this[29] = (int32x2_t)v71;
  if (v72)
    *(_DWORD *)v71 = v72;
  else
    WTF::StringImpl::destroy(v71, v70);
  if (*(_DWORD *)v68 == 2)
    WTF::StringImpl::destroy(v68, v70);
  else
    *(_DWORD *)v68 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[30] = (int32x2_t)v257[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v73 = v257[0];
  WTF::PrivateSymbolImpl::create(v257[0], v74);
  v76 = v257[0];
  v77 = *(_DWORD *)v257[0];
  *(_DWORD *)v257[0] += 2;
  this[31] = (int32x2_t)v76;
  if (v77)
    *(_DWORD *)v76 = v77;
  else
    WTF::StringImpl::destroy(v76, v75);
  if (*(_DWORD *)v73 == 2)
    WTF::StringImpl::destroy(v73, v75);
  else
    *(_DWORD *)v73 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[32] = (int32x2_t)v257[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = v257[0];
  WTF::PrivateSymbolImpl::create(v257[0], v79);
  v81 = v257[0];
  v82 = *(_DWORD *)v257[0];
  *(_DWORD *)v257[0] += 2;
  this[33] = (int32x2_t)v81;
  if (v82)
    *(_DWORD *)v81 = v82;
  else
    WTF::StringImpl::destroy(v81, v80);
  if (*(_DWORD *)v78 == 2)
    WTF::StringImpl::destroy(v78, v80);
  else
    *(_DWORD *)v78 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[34] = (int32x2_t)v257[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v83 = v257[0];
  WTF::PrivateSymbolImpl::create(v257[0], v84);
  v86 = v257[0];
  v87 = *(_DWORD *)v257[0];
  *(_DWORD *)v257[0] += 2;
  this[35] = (int32x2_t)v86;
  if (v87)
    *(_DWORD *)v86 = v87;
  else
    WTF::StringImpl::destroy(v86, v85);
  if (*(_DWORD *)v83 == 2)
    WTF::StringImpl::destroy(v83, v85);
  else
    *(_DWORD *)v83 -= 2;
  WTF::AtomStringImpl::addLiteral();
  this[36] = (int32x2_t)v257[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v88 = v257[0];
  WTF::PrivateSymbolImpl::create(v257[0], v89);
  v91 = v257[0];
  v92 = *(_DWORD *)v257[0];
  *(_DWORD *)v257[0] += 2;
  this[37] = (int32x2_t)v91;
  if (v92)
    *(_DWORD *)v91 = v92;
  else
    WTF::StringImpl::destroy(v91, v90);
  if (*(_DWORD *)v88 == 2)
    WTF::StringImpl::destroy(v88, v90);
  else
    *(_DWORD *)v88 -= 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = v260;
  v260 = 0;
  v258 = 0u;
  v259 = 0u;
  *(_OWORD *)v257 = 0u;
  WTF::URL::invalidate((WTF::URL *)v257);
  *((_QWORD *)&v259 + 1) = 0;
  v261 = 0;
  v94 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v262 = 0;
  JSC::SourceProvider::SourceProvider();
  v96 = v262;
  v262 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
      WTF::StringImpl::destroy(v96, v95);
    else
      *(_DWORD *)v96 -= 2;
  }
  *v94 = off_1E33948F0;
  v97 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  if (v93)
    v98 = v93;
  else
    v98 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *(_DWORD *)v98 += 2;
  v94[15] = v98;
  this[38] = (int32x2_t)v94;
  this[39].i32[0] = 0;
  this[39].i32[1] = *((_DWORD *)v98 + 1);
  this[40] = vmax_s32(0, 0);
  v99 = v261;
  v261 = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
      WTF::StringImpl::destroy(v99, v95);
    else
      *(_DWORD *)v99 -= 2;
  }
  v100 = (_DWORD *)*((_QWORD *)&v259 + 1);
  *((_QWORD *)&v259 + 1) = 0;
  if (v100)
  {
    if (v100[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v100 + 8))(v100);
    else
      --v100[2];
  }
  v101 = v257[0];
  v257[0] = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
      WTF::StringImpl::destroy(v101, v95);
    else
      *(_DWORD *)v101 -= 2;
  }
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
      WTF::StringImpl::destroy(v93, v95);
    else
      *(_DWORD *)v93 -= 2;
  }
  v102 = v260;
  v260 = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
      WTF::StringImpl::destroy(v102, v95);
    else
      *(_DWORD *)v102 -= 2;
  }
  this[41] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v103 = v260;
  v260 = 0;
  v258 = 0u;
  v259 = 0u;
  *(_OWORD *)v257 = 0u;
  WTF::URL::invalidate((WTF::URL *)v257);
  *((_QWORD *)&v259 + 1) = 0;
  v261 = 0;
  v104 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v262 = 0;
  JSC::SourceProvider::SourceProvider();
  v106 = v262;
  v262 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
      WTF::StringImpl::destroy(v106, v105);
    else
      *(_DWORD *)v106 -= 2;
  }
  *v104 = off_1E33948F0;
  if (v103)
    v107 = v103;
  else
    v107 = v97;
  *(_DWORD *)v107 += 2;
  v104[15] = v107;
  this[42] = (int32x2_t)v104;
  this[43].i32[0] = 0;
  this[43].i32[1] = *((_DWORD *)v107 + 1);
  this[44] = vmax_s32(0, 0);
  v108 = v261;
  v261 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
      WTF::StringImpl::destroy(v108, v105);
    else
      *(_DWORD *)v108 -= 2;
  }
  v109 = (_DWORD *)*((_QWORD *)&v259 + 1);
  *((_QWORD *)&v259 + 1) = 0;
  if (v109)
  {
    if (v109[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v109 + 8))(v109);
    else
      --v109[2];
  }
  v110 = v257[0];
  v257[0] = 0;
  if (v110)
  {
    if (*(_DWORD *)v110 == 2)
      WTF::StringImpl::destroy(v110, v105);
    else
      *(_DWORD *)v110 -= 2;
  }
  if (v103)
  {
    if (*(_DWORD *)v103 == 2)
      WTF::StringImpl::destroy(v103, v105);
    else
      *(_DWORD *)v103 -= 2;
  }
  v111 = v260;
  v260 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
      WTF::StringImpl::destroy(v111, v105);
    else
      *(_DWORD *)v111 -= 2;
  }
  this[45] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v112 = v260;
  v260 = 0;
  v258 = 0u;
  v259 = 0u;
  *(_OWORD *)v257 = 0u;
  WTF::URL::invalidate((WTF::URL *)v257);
  *((_QWORD *)&v259 + 1) = 0;
  v261 = 0;
  v113 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v262 = 0;
  JSC::SourceProvider::SourceProvider();
  v115 = v262;
  v262 = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
      WTF::StringImpl::destroy(v115, v114);
    else
      *(_DWORD *)v115 -= 2;
  }
  *v113 = off_1E33948F0;
  if (v112)
    v116 = v112;
  else
    v116 = v97;
  *(_DWORD *)v116 += 2;
  v113[15] = v116;
  this[46] = (int32x2_t)v113;
  this[47].i32[0] = 0;
  this[47].i32[1] = *((_DWORD *)v116 + 1);
  this[48] = vmax_s32(0, 0);
  v117 = v261;
  v261 = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
      WTF::StringImpl::destroy(v117, v114);
    else
      *(_DWORD *)v117 -= 2;
  }
  v118 = (_DWORD *)*((_QWORD *)&v259 + 1);
  *((_QWORD *)&v259 + 1) = 0;
  if (v118)
  {
    if (v118[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v118 + 8))(v118);
    else
      --v118[2];
  }
  v119 = v257[0];
  v257[0] = 0;
  if (v119)
  {
    if (*(_DWORD *)v119 == 2)
      WTF::StringImpl::destroy(v119, v114);
    else
      *(_DWORD *)v119 -= 2;
  }
  if (v112)
  {
    if (*(_DWORD *)v112 == 2)
      WTF::StringImpl::destroy(v112, v114);
    else
      *(_DWORD *)v112 -= 2;
  }
  v120 = v260;
  v260 = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
      WTF::StringImpl::destroy(v120, v114);
    else
      *(_DWORD *)v120 -= 2;
  }
  this[49] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v121 = v260;
  v260 = 0;
  v258 = 0u;
  v259 = 0u;
  *(_OWORD *)v257 = 0u;
  WTF::URL::invalidate((WTF::URL *)v257);
  *((_QWORD *)&v259 + 1) = 0;
  v261 = 0;
  v122 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v262 = 0;
  JSC::SourceProvider::SourceProvider();
  v124 = v262;
  v262 = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
      WTF::StringImpl::destroy(v124, v123);
    else
      *(_DWORD *)v124 -= 2;
  }
  *v122 = off_1E33948F0;
  if (v121)
    v125 = v121;
  else
    v125 = v97;
  *(_DWORD *)v125 += 2;
  v122[15] = v125;
  this[50] = (int32x2_t)v122;
  this[51].i32[0] = 0;
  this[51].i32[1] = *((_DWORD *)v125 + 1);
  this[52] = vmax_s32(0, 0);
  v126 = v261;
  v261 = 0;
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
      WTF::StringImpl::destroy(v126, v123);
    else
      *(_DWORD *)v126 -= 2;
  }
  v127 = (_DWORD *)*((_QWORD *)&v259 + 1);
  *((_QWORD *)&v259 + 1) = 0;
  if (v127)
  {
    if (v127[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v127 + 8))(v127);
    else
      --v127[2];
  }
  v128 = v257[0];
  v257[0] = 0;
  if (v128)
  {
    if (*(_DWORD *)v128 == 2)
      WTF::StringImpl::destroy(v128, v123);
    else
      *(_DWORD *)v128 -= 2;
  }
  if (v121)
  {
    if (*(_DWORD *)v121 == 2)
      WTF::StringImpl::destroy(v121, v123);
    else
      *(_DWORD *)v121 -= 2;
  }
  v129 = v260;
  v260 = 0;
  if (v129)
  {
    if (*(_DWORD *)v129 == 2)
      WTF::StringImpl::destroy(v129, v123);
    else
      *(_DWORD *)v129 -= 2;
  }
  this[53] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v130 = v260;
  v260 = 0;
  v258 = 0u;
  v259 = 0u;
  *(_OWORD *)v257 = 0u;
  WTF::URL::invalidate((WTF::URL *)v257);
  *((_QWORD *)&v259 + 1) = 0;
  v261 = 0;
  v131 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v262 = 0;
  JSC::SourceProvider::SourceProvider();
  v133 = v262;
  v262 = 0;
  if (v133)
  {
    if (*(_DWORD *)v133 == 2)
      WTF::StringImpl::destroy(v133, v132);
    else
      *(_DWORD *)v133 -= 2;
  }
  *v131 = off_1E33948F0;
  if (v130)
    v134 = v130;
  else
    v134 = v97;
  *(_DWORD *)v134 += 2;
  v131[15] = v134;
  this[54] = (int32x2_t)v131;
  this[55].i32[0] = 0;
  this[55].i32[1] = *((_DWORD *)v134 + 1);
  this[56] = vmax_s32(0, 0);
  v135 = v261;
  v261 = 0;
  if (v135)
  {
    if (*(_DWORD *)v135 == 2)
      WTF::StringImpl::destroy(v135, v132);
    else
      *(_DWORD *)v135 -= 2;
  }
  v136 = (_DWORD *)*((_QWORD *)&v259 + 1);
  *((_QWORD *)&v259 + 1) = 0;
  if (v136)
  {
    if (v136[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v136 + 8))(v136);
    else
      --v136[2];
  }
  v137 = v257[0];
  v257[0] = 0;
  if (v137)
  {
    if (*(_DWORD *)v137 == 2)
      WTF::StringImpl::destroy(v137, v132);
    else
      *(_DWORD *)v137 -= 2;
  }
  if (v130)
  {
    if (*(_DWORD *)v130 == 2)
      WTF::StringImpl::destroy(v130, v132);
    else
      *(_DWORD *)v130 -= 2;
  }
  v138 = v260;
  v260 = 0;
  if (v138)
  {
    if (*(_DWORD *)v138 == 2)
      WTF::StringImpl::destroy(v138, v132);
    else
      *(_DWORD *)v138 -= 2;
  }
  this[57] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v139 = v260;
  v260 = 0;
  v258 = 0u;
  v259 = 0u;
  *(_OWORD *)v257 = 0u;
  WTF::URL::invalidate((WTF::URL *)v257);
  *((_QWORD *)&v259 + 1) = 0;
  v261 = 0;
  v140 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v262 = 0;
  JSC::SourceProvider::SourceProvider();
  v142 = v262;
  v262 = 0;
  if (v142)
  {
    if (*(_DWORD *)v142 == 2)
      WTF::StringImpl::destroy(v142, v141);
    else
      *(_DWORD *)v142 -= 2;
  }
  *v140 = off_1E33948F0;
  if (v139)
    v143 = v139;
  else
    v143 = v97;
  *(_DWORD *)v143 += 2;
  v140[15] = v143;
  this[58] = (int32x2_t)v140;
  this[59].i32[0] = 0;
  this[59].i32[1] = *((_DWORD *)v143 + 1);
  this[60] = vmax_s32(0, 0);
  v144 = v261;
  v261 = 0;
  if (v144)
  {
    if (*(_DWORD *)v144 == 2)
      WTF::StringImpl::destroy(v144, v141);
    else
      *(_DWORD *)v144 -= 2;
  }
  v145 = (_DWORD *)*((_QWORD *)&v259 + 1);
  *((_QWORD *)&v259 + 1) = 0;
  if (v145)
  {
    if (v145[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v145 + 8))(v145);
    else
      --v145[2];
  }
  v146 = v257[0];
  v257[0] = 0;
  if (v146)
  {
    if (*(_DWORD *)v146 == 2)
      WTF::StringImpl::destroy(v146, v141);
    else
      *(_DWORD *)v146 -= 2;
  }
  if (v139)
  {
    if (*(_DWORD *)v139 == 2)
      WTF::StringImpl::destroy(v139, v141);
    else
      *(_DWORD *)v139 -= 2;
  }
  v147 = v260;
  v260 = 0;
  if (v147)
  {
    if (*(_DWORD *)v147 == 2)
      WTF::StringImpl::destroy(v147, v141);
    else
      *(_DWORD *)v147 -= 2;
  }
  this[61] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v148 = v260;
  v260 = 0;
  v258 = 0u;
  v259 = 0u;
  *(_OWORD *)v257 = 0u;
  WTF::URL::invalidate((WTF::URL *)v257);
  *((_QWORD *)&v259 + 1) = 0;
  v261 = 0;
  v149 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v262 = 0;
  JSC::SourceProvider::SourceProvider();
  v151 = v262;
  v262 = 0;
  if (v151)
  {
    if (*(_DWORD *)v151 == 2)
      WTF::StringImpl::destroy(v151, v150);
    else
      *(_DWORD *)v151 -= 2;
  }
  *v149 = off_1E33948F0;
  if (v148)
    v152 = v148;
  else
    v152 = v97;
  *(_DWORD *)v152 += 2;
  v149[15] = v152;
  this[62] = (int32x2_t)v149;
  this[63].i32[0] = 0;
  this[63].i32[1] = *((_DWORD *)v152 + 1);
  this[64] = vmax_s32(0, 0);
  v153 = v261;
  v261 = 0;
  if (v153)
  {
    if (*(_DWORD *)v153 == 2)
      WTF::StringImpl::destroy(v153, v150);
    else
      *(_DWORD *)v153 -= 2;
  }
  v154 = (_DWORD *)*((_QWORD *)&v259 + 1);
  *((_QWORD *)&v259 + 1) = 0;
  if (v154)
  {
    if (v154[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v154 + 8))(v154);
    else
      --v154[2];
  }
  v155 = v257[0];
  v257[0] = 0;
  if (v155)
  {
    if (*(_DWORD *)v155 == 2)
      WTF::StringImpl::destroy(v155, v150);
    else
      *(_DWORD *)v155 -= 2;
  }
  if (v148)
  {
    if (*(_DWORD *)v148 == 2)
      WTF::StringImpl::destroy(v148, v150);
    else
      *(_DWORD *)v148 -= 2;
  }
  v156 = v260;
  v260 = 0;
  if (v156)
  {
    if (*(_DWORD *)v156 == 2)
      WTF::StringImpl::destroy(v156, v150);
    else
      *(_DWORD *)v156 -= 2;
  }
  this[65] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v157 = v260;
  v260 = 0;
  v258 = 0u;
  v259 = 0u;
  *(_OWORD *)v257 = 0u;
  WTF::URL::invalidate((WTF::URL *)v257);
  *((_QWORD *)&v259 + 1) = 0;
  v261 = 0;
  v158 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v262 = 0;
  JSC::SourceProvider::SourceProvider();
  v160 = v262;
  v262 = 0;
  if (v160)
  {
    if (*(_DWORD *)v160 == 2)
      WTF::StringImpl::destroy(v160, v159);
    else
      *(_DWORD *)v160 -= 2;
  }
  *v158 = off_1E33948F0;
  if (v157)
    v161 = v157;
  else
    v161 = v97;
  *(_DWORD *)v161 += 2;
  v158[15] = v161;
  this[66] = (int32x2_t)v158;
  this[67].i32[0] = 0;
  this[67].i32[1] = *((_DWORD *)v161 + 1);
  this[68] = vmax_s32(0, 0);
  v162 = v261;
  v261 = 0;
  if (v162)
  {
    if (*(_DWORD *)v162 == 2)
      WTF::StringImpl::destroy(v162, v159);
    else
      *(_DWORD *)v162 -= 2;
  }
  v163 = (_DWORD *)*((_QWORD *)&v259 + 1);
  *((_QWORD *)&v259 + 1) = 0;
  if (v163)
  {
    if (v163[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v163 + 8))(v163);
    else
      --v163[2];
  }
  v164 = v257[0];
  v257[0] = 0;
  if (v164)
  {
    if (*(_DWORD *)v164 == 2)
      WTF::StringImpl::destroy(v164, v159);
    else
      *(_DWORD *)v164 -= 2;
  }
  if (v157)
  {
    if (*(_DWORD *)v157 == 2)
      WTF::StringImpl::destroy(v157, v159);
    else
      *(_DWORD *)v157 -= 2;
  }
  v165 = v260;
  v260 = 0;
  if (v165)
  {
    if (*(_DWORD *)v165 == 2)
      WTF::StringImpl::destroy(v165, v159);
    else
      *(_DWORD *)v165 -= 2;
  }
  this[69] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v166 = v260;
  v260 = 0;
  v258 = 0u;
  v259 = 0u;
  *(_OWORD *)v257 = 0u;
  WTF::URL::invalidate((WTF::URL *)v257);
  *((_QWORD *)&v259 + 1) = 0;
  v261 = 0;
  v167 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v262 = 0;
  JSC::SourceProvider::SourceProvider();
  v169 = v262;
  v262 = 0;
  if (v169)
  {
    if (*(_DWORD *)v169 == 2)
      WTF::StringImpl::destroy(v169, v168);
    else
      *(_DWORD *)v169 -= 2;
  }
  *v167 = off_1E33948F0;
  if (v166)
    v170 = v166;
  else
    v170 = v97;
  *(_DWORD *)v170 += 2;
  v167[15] = v170;
  this[70] = (int32x2_t)v167;
  this[71].i32[0] = 0;
  this[71].i32[1] = *((_DWORD *)v170 + 1);
  this[72] = vmax_s32(0, 0);
  v171 = v261;
  v261 = 0;
  if (v171)
  {
    if (*(_DWORD *)v171 == 2)
      WTF::StringImpl::destroy(v171, v168);
    else
      *(_DWORD *)v171 -= 2;
  }
  v172 = (_DWORD *)*((_QWORD *)&v259 + 1);
  *((_QWORD *)&v259 + 1) = 0;
  if (v172)
  {
    if (v172[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v172 + 8))(v172);
    else
      --v172[2];
  }
  v173 = v257[0];
  v257[0] = 0;
  if (v173)
  {
    if (*(_DWORD *)v173 == 2)
      WTF::StringImpl::destroy(v173, v168);
    else
      *(_DWORD *)v173 -= 2;
  }
  if (v166)
  {
    if (*(_DWORD *)v166 == 2)
      WTF::StringImpl::destroy(v166, v168);
    else
      *(_DWORD *)v166 -= 2;
  }
  v174 = v260;
  v260 = 0;
  if (v174)
  {
    if (*(_DWORD *)v174 == 2)
      WTF::StringImpl::destroy(v174, v168);
    else
      *(_DWORD *)v174 -= 2;
  }
  this[73] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v175 = v260;
  v260 = 0;
  v258 = 0u;
  v259 = 0u;
  *(_OWORD *)v257 = 0u;
  WTF::URL::invalidate((WTF::URL *)v257);
  *((_QWORD *)&v259 + 1) = 0;
  v261 = 0;
  v176 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v262 = 0;
  JSC::SourceProvider::SourceProvider();
  v178 = v262;
  v262 = 0;
  if (v178)
  {
    if (*(_DWORD *)v178 == 2)
      WTF::StringImpl::destroy(v178, v177);
    else
      *(_DWORD *)v178 -= 2;
  }
  *v176 = off_1E33948F0;
  if (v175)
    v179 = v175;
  else
    v179 = v97;
  *(_DWORD *)v179 += 2;
  v176[15] = v179;
  this[74] = (int32x2_t)v176;
  this[75].i32[0] = 0;
  this[75].i32[1] = *((_DWORD *)v179 + 1);
  this[76] = vmax_s32(0, 0);
  v180 = v261;
  v261 = 0;
  if (v180)
  {
    if (*(_DWORD *)v180 == 2)
      WTF::StringImpl::destroy(v180, v177);
    else
      *(_DWORD *)v180 -= 2;
  }
  v181 = (_DWORD *)*((_QWORD *)&v259 + 1);
  *((_QWORD *)&v259 + 1) = 0;
  if (v181)
  {
    if (v181[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v181 + 8))(v181);
    else
      --v181[2];
  }
  v182 = v257[0];
  v257[0] = 0;
  if (v182)
  {
    if (*(_DWORD *)v182 == 2)
      WTF::StringImpl::destroy(v182, v177);
    else
      *(_DWORD *)v182 -= 2;
  }
  if (v175)
  {
    if (*(_DWORD *)v175 == 2)
      WTF::StringImpl::destroy(v175, v177);
    else
      *(_DWORD *)v175 -= 2;
  }
  v183 = v260;
  v260 = 0;
  if (v183)
  {
    if (*(_DWORD *)v183 == 2)
      WTF::StringImpl::destroy(v183, v177);
    else
      *(_DWORD *)v183 -= 2;
  }
  this[77] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v184 = v260;
  v260 = 0;
  v258 = 0u;
  v259 = 0u;
  *(_OWORD *)v257 = 0u;
  WTF::URL::invalidate((WTF::URL *)v257);
  *((_QWORD *)&v259 + 1) = 0;
  v261 = 0;
  v185 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v262 = 0;
  JSC::SourceProvider::SourceProvider();
  v187 = v262;
  v262 = 0;
  if (v187)
  {
    if (*(_DWORD *)v187 == 2)
      WTF::StringImpl::destroy(v187, v186);
    else
      *(_DWORD *)v187 -= 2;
  }
  *v185 = off_1E33948F0;
  if (v184)
    v188 = v184;
  else
    v188 = v97;
  *(_DWORD *)v188 += 2;
  v185[15] = v188;
  this[78] = (int32x2_t)v185;
  this[79].i32[0] = 0;
  this[79].i32[1] = *((_DWORD *)v188 + 1);
  this[80] = vmax_s32(0, 0);
  v189 = v261;
  v261 = 0;
  if (v189)
  {
    if (*(_DWORD *)v189 == 2)
      WTF::StringImpl::destroy(v189, v186);
    else
      *(_DWORD *)v189 -= 2;
  }
  v190 = (_DWORD *)*((_QWORD *)&v259 + 1);
  *((_QWORD *)&v259 + 1) = 0;
  if (v190)
  {
    if (v190[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v190 + 8))(v190);
    else
      --v190[2];
  }
  v191 = v257[0];
  v257[0] = 0;
  if (v191)
  {
    if (*(_DWORD *)v191 == 2)
      WTF::StringImpl::destroy(v191, v186);
    else
      *(_DWORD *)v191 -= 2;
  }
  if (v184)
  {
    if (*(_DWORD *)v184 == 2)
      WTF::StringImpl::destroy(v184, v186);
    else
      *(_DWORD *)v184 -= 2;
  }
  v192 = v260;
  v260 = 0;
  if (v192)
  {
    if (*(_DWORD *)v192 == 2)
      WTF::StringImpl::destroy(v192, v186);
    else
      *(_DWORD *)v192 -= 2;
  }
  this[81] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v193 = v260;
  v260 = 0;
  v258 = 0u;
  v259 = 0u;
  *(_OWORD *)v257 = 0u;
  WTF::URL::invalidate((WTF::URL *)v257);
  *((_QWORD *)&v259 + 1) = 0;
  v261 = 0;
  v194 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v262 = 0;
  JSC::SourceProvider::SourceProvider();
  v196 = v262;
  v262 = 0;
  if (v196)
  {
    if (*(_DWORD *)v196 == 2)
      WTF::StringImpl::destroy(v196, v195);
    else
      *(_DWORD *)v196 -= 2;
  }
  *v194 = off_1E33948F0;
  if (v193)
    v197 = v193;
  else
    v197 = v97;
  *(_DWORD *)v197 += 2;
  v194[15] = v197;
  this[82] = (int32x2_t)v194;
  this[83].i32[0] = 0;
  this[83].i32[1] = *((_DWORD *)v197 + 1);
  this[84] = vmax_s32(0, 0);
  v198 = v261;
  v261 = 0;
  if (v198)
  {
    if (*(_DWORD *)v198 == 2)
      WTF::StringImpl::destroy(v198, v195);
    else
      *(_DWORD *)v198 -= 2;
  }
  v199 = (_DWORD *)*((_QWORD *)&v259 + 1);
  *((_QWORD *)&v259 + 1) = 0;
  if (v199)
  {
    if (v199[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v199 + 8))(v199);
    else
      --v199[2];
  }
  v200 = v257[0];
  v257[0] = 0;
  if (v200)
  {
    if (*(_DWORD *)v200 == 2)
      WTF::StringImpl::destroy(v200, v195);
    else
      *(_DWORD *)v200 -= 2;
  }
  if (v193)
  {
    if (*(_DWORD *)v193 == 2)
      WTF::StringImpl::destroy(v193, v195);
    else
      *(_DWORD *)v193 -= 2;
  }
  v201 = v260;
  v260 = 0;
  if (v201)
  {
    if (*(_DWORD *)v201 == 2)
      WTF::StringImpl::destroy(v201, v195);
    else
      *(_DWORD *)v201 -= 2;
  }
  this[85] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v202 = v260;
  v260 = 0;
  v258 = 0u;
  v259 = 0u;
  *(_OWORD *)v257 = 0u;
  WTF::URL::invalidate((WTF::URL *)v257);
  *((_QWORD *)&v259 + 1) = 0;
  v261 = 0;
  v203 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v262 = 0;
  JSC::SourceProvider::SourceProvider();
  v205 = v262;
  v262 = 0;
  if (v205)
  {
    if (*(_DWORD *)v205 == 2)
      WTF::StringImpl::destroy(v205, v204);
    else
      *(_DWORD *)v205 -= 2;
  }
  *v203 = off_1E33948F0;
  if (v202)
    v206 = v202;
  else
    v206 = v97;
  *(_DWORD *)v206 += 2;
  v203[15] = v206;
  this[86] = (int32x2_t)v203;
  this[87].i32[0] = 0;
  this[87].i32[1] = *((_DWORD *)v206 + 1);
  this[88] = vmax_s32(0, 0);
  v207 = v261;
  v261 = 0;
  if (v207)
  {
    if (*(_DWORD *)v207 == 2)
      WTF::StringImpl::destroy(v207, v204);
    else
      *(_DWORD *)v207 -= 2;
  }
  v208 = (_DWORD *)*((_QWORD *)&v259 + 1);
  *((_QWORD *)&v259 + 1) = 0;
  if (v208)
  {
    if (v208[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v208 + 8))(v208);
    else
      --v208[2];
  }
  v209 = v257[0];
  v257[0] = 0;
  if (v209)
  {
    if (*(_DWORD *)v209 == 2)
      WTF::StringImpl::destroy(v209, v204);
    else
      *(_DWORD *)v209 -= 2;
  }
  if (v202)
  {
    if (*(_DWORD *)v202 == 2)
      WTF::StringImpl::destroy(v202, v204);
    else
      *(_DWORD *)v202 -= 2;
  }
  v210 = v260;
  v260 = 0;
  if (v210)
  {
    if (*(_DWORD *)v210 == 2)
      WTF::StringImpl::destroy(v210, v204);
    else
      *(_DWORD *)v210 -= 2;
  }
  this[89] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v211 = v260;
  v260 = 0;
  v258 = 0u;
  v259 = 0u;
  *(_OWORD *)v257 = 0u;
  WTF::URL::invalidate((WTF::URL *)v257);
  *((_QWORD *)&v259 + 1) = 0;
  v261 = 0;
  v212 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v262 = 0;
  JSC::SourceProvider::SourceProvider();
  v214 = v262;
  v262 = 0;
  if (v214)
  {
    if (*(_DWORD *)v214 == 2)
      WTF::StringImpl::destroy(v214, v213);
    else
      *(_DWORD *)v214 -= 2;
  }
  *v212 = off_1E33948F0;
  if (v211)
    v215 = v211;
  else
    v215 = v97;
  *(_DWORD *)v215 += 2;
  v212[15] = v215;
  this[90] = (int32x2_t)v212;
  this[91].i32[0] = 0;
  this[91].i32[1] = *((_DWORD *)v215 + 1);
  this[92] = vmax_s32(0, 0);
  v216 = v261;
  v261 = 0;
  if (v216)
  {
    if (*(_DWORD *)v216 == 2)
      WTF::StringImpl::destroy(v216, v213);
    else
      *(_DWORD *)v216 -= 2;
  }
  v217 = (_DWORD *)*((_QWORD *)&v259 + 1);
  *((_QWORD *)&v259 + 1) = 0;
  if (v217)
  {
    if (v217[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v217 + 8))(v217);
    else
      --v217[2];
  }
  v218 = v257[0];
  v257[0] = 0;
  if (v218)
  {
    if (*(_DWORD *)v218 == 2)
      WTF::StringImpl::destroy(v218, v213);
    else
      *(_DWORD *)v218 -= 2;
  }
  if (v211)
  {
    if (*(_DWORD *)v211 == 2)
      WTF::StringImpl::destroy(v211, v213);
    else
      *(_DWORD *)v211 -= 2;
  }
  v219 = v260;
  v260 = 0;
  if (v219)
  {
    if (*(_DWORD *)v219 == 2)
      WTF::StringImpl::destroy(v219, v213);
    else
      *(_DWORD *)v219 -= 2;
  }
  this[93] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v220 = v260;
  v260 = 0;
  v258 = 0u;
  v259 = 0u;
  *(_OWORD *)v257 = 0u;
  WTF::URL::invalidate((WTF::URL *)v257);
  *((_QWORD *)&v259 + 1) = 0;
  v261 = 0;
  v221 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v262 = 0;
  JSC::SourceProvider::SourceProvider();
  v223 = v262;
  v262 = 0;
  if (v223)
  {
    if (*(_DWORD *)v223 == 2)
      WTF::StringImpl::destroy(v223, v222);
    else
      *(_DWORD *)v223 -= 2;
  }
  *v221 = off_1E33948F0;
  if (v220)
    v224 = v220;
  else
    v224 = v97;
  *(_DWORD *)v224 += 2;
  v221[15] = v224;
  this[94] = (int32x2_t)v221;
  this[95].i32[0] = 0;
  this[95].i32[1] = *((_DWORD *)v224 + 1);
  this[96] = vmax_s32(0, 0);
  v225 = v261;
  v261 = 0;
  if (v225)
  {
    if (*(_DWORD *)v225 == 2)
      WTF::StringImpl::destroy(v225, v222);
    else
      *(_DWORD *)v225 -= 2;
  }
  v226 = (_DWORD *)*((_QWORD *)&v259 + 1);
  *((_QWORD *)&v259 + 1) = 0;
  if (v226)
  {
    if (v226[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v226 + 8))(v226);
    else
      --v226[2];
  }
  v227 = v257[0];
  v257[0] = 0;
  if (v227)
  {
    if (*(_DWORD *)v227 == 2)
      WTF::StringImpl::destroy(v227, v222);
    else
      *(_DWORD *)v227 -= 2;
  }
  if (v220)
  {
    if (*(_DWORD *)v220 == 2)
      WTF::StringImpl::destroy(v220, v222);
    else
      *(_DWORD *)v220 -= 2;
  }
  v228 = v260;
  v260 = 0;
  if (v228)
  {
    if (*(_DWORD *)v228 == 2)
      WTF::StringImpl::destroy(v228, v222);
    else
      *(_DWORD *)v228 -= 2;
  }
  this[97] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v229 = v260;
  v260 = 0;
  v258 = 0u;
  v259 = 0u;
  *(_OWORD *)v257 = 0u;
  WTF::URL::invalidate((WTF::URL *)v257);
  *((_QWORD *)&v259 + 1) = 0;
  v261 = 0;
  v230 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v262 = 0;
  JSC::SourceProvider::SourceProvider();
  v232 = v262;
  v262 = 0;
  if (v232)
  {
    if (*(_DWORD *)v232 == 2)
      WTF::StringImpl::destroy(v232, v231);
    else
      *(_DWORD *)v232 -= 2;
  }
  *v230 = off_1E33948F0;
  if (v229)
    v233 = v229;
  else
    v233 = v97;
  *(_DWORD *)v233 += 2;
  v230[15] = v233;
  this[98] = (int32x2_t)v230;
  this[99].i32[0] = 0;
  this[99].i32[1] = *((_DWORD *)v233 + 1);
  this[100] = vmax_s32(0, 0);
  v234 = v261;
  v261 = 0;
  if (v234)
  {
    if (*(_DWORD *)v234 == 2)
      WTF::StringImpl::destroy(v234, v231);
    else
      *(_DWORD *)v234 -= 2;
  }
  v235 = (_DWORD *)*((_QWORD *)&v259 + 1);
  *((_QWORD *)&v259 + 1) = 0;
  if (v235)
  {
    if (v235[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v235 + 8))(v235);
    else
      --v235[2];
  }
  v236 = v257[0];
  v257[0] = 0;
  if (v236)
  {
    if (*(_DWORD *)v236 == 2)
      WTF::StringImpl::destroy(v236, v231);
    else
      *(_DWORD *)v236 -= 2;
  }
  if (v229)
  {
    if (*(_DWORD *)v229 == 2)
      WTF::StringImpl::destroy(v229, v231);
    else
      *(_DWORD *)v229 -= 2;
  }
  v237 = v260;
  v260 = 0;
  if (v237)
  {
    if (*(_DWORD *)v237 == 2)
      WTF::StringImpl::destroy(v237, v231);
    else
      *(_DWORD *)v237 -= 2;
  }
  this[101] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v238 = v260;
  v260 = 0;
  v258 = 0u;
  v259 = 0u;
  *(_OWORD *)v257 = 0u;
  WTF::URL::invalidate((WTF::URL *)v257);
  *((_QWORD *)&v259 + 1) = 0;
  v261 = 0;
  v239 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v262 = 0;
  JSC::SourceProvider::SourceProvider();
  v241 = v262;
  v262 = 0;
  if (v241)
  {
    if (*(_DWORD *)v241 == 2)
      WTF::StringImpl::destroy(v241, v240);
    else
      *(_DWORD *)v241 -= 2;
  }
  *v239 = off_1E33948F0;
  if (v238)
    v242 = v238;
  else
    v242 = v97;
  *(_DWORD *)v242 += 2;
  v239[15] = v242;
  this[102] = (int32x2_t)v239;
  this[103].i32[0] = 0;
  this[103].i32[1] = *((_DWORD *)v242 + 1);
  this[104] = vmax_s32(0, 0);
  v243 = v261;
  v261 = 0;
  if (v243)
  {
    if (*(_DWORD *)v243 == 2)
      WTF::StringImpl::destroy(v243, v240);
    else
      *(_DWORD *)v243 -= 2;
  }
  v244 = (_DWORD *)*((_QWORD *)&v259 + 1);
  *((_QWORD *)&v259 + 1) = 0;
  if (v244)
  {
    if (v244[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v244 + 8))(v244);
    else
      --v244[2];
  }
  v245 = v257[0];
  v257[0] = 0;
  if (v245)
  {
    if (*(_DWORD *)v245 == 2)
      WTF::StringImpl::destroy(v245, v240);
    else
      *(_DWORD *)v245 -= 2;
  }
  if (v238)
  {
    if (*(_DWORD *)v238 == 2)
      WTF::StringImpl::destroy(v238, v240);
    else
      *(_DWORD *)v238 -= 2;
  }
  v246 = v260;
  v260 = 0;
  if (v246)
  {
    if (*(_DWORD *)v246 == 2)
      WTF::StringImpl::destroy(v246, v240);
    else
      *(_DWORD *)v246 -= 2;
  }
  this[105] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v247 = v260;
  v260 = 0;
  v258 = 0u;
  v259 = 0u;
  *(_OWORD *)v257 = 0u;
  WTF::URL::invalidate((WTF::URL *)v257);
  *((_QWORD *)&v259 + 1) = 0;
  v261 = 0;
  v248 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  v262 = 0;
  JSC::SourceProvider::SourceProvider();
  v250 = v262;
  v262 = 0;
  if (v250)
  {
    if (*(_DWORD *)v250 == 2)
      WTF::StringImpl::destroy(v250, v249);
    else
      *(_DWORD *)v250 -= 2;
  }
  *v248 = off_1E33948F0;
  if (v247)
    v251 = v247;
  else
    v251 = v97;
  *(_DWORD *)v251 += 2;
  v248[15] = v251;
  this[106] = (int32x2_t)v248;
  this[107].i32[0] = 0;
  this[107].i32[1] = *((_DWORD *)v251 + 1);
  this[108] = vmax_s32(0, 0);
  v252 = v261;
  v261 = 0;
  if (v252)
  {
    if (*(_DWORD *)v252 == 2)
      WTF::StringImpl::destroy(v252, v249);
    else
      *(_DWORD *)v252 -= 2;
  }
  v253 = (_DWORD *)*((_QWORD *)&v259 + 1);
  *((_QWORD *)&v259 + 1) = 0;
  if (v253)
  {
    if (v253[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v253 + 8))(v253);
    else
      --v253[2];
  }
  v254 = v257[0];
  v257[0] = 0;
  if (v254)
  {
    if (*(_DWORD *)v254 == 2)
      WTF::StringImpl::destroy(v254, v249);
    else
      *(_DWORD *)v254 -= 2;
  }
  if (v247)
  {
    if (*(_DWORD *)v247 == 2)
      WTF::StringImpl::destroy(v247, v249);
    else
      *(_DWORD *)v247 -= 2;
  }
  v255 = v260;
  v260 = 0;
  if (v255)
  {
    if (*(_DWORD *)v255 == 2)
      WTF::StringImpl::destroy(v255, v249);
    else
      *(_DWORD *)v255 -= 2;
  }
  this[109] = 0;
  return this;
}

uint64_t WebCore::Quirks::shouldDisablePointerEventsQuirk(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = v20;
  v6 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v6 = *(_QWORD *)(v6 + 8);
  if (*(_BYTE *)(v6 + 3362) || *(_BYTE *)(v6 + 3405))
  {
    while (1)
    {
      v16 = *(_QWORD *)(v6 + 528);
      if (!v16)
        break;
      v17 = *(_QWORD *)(v16 + 8);
      if (!v17)
        break;
      v18 = *(_QWORD *)(v17 + 120);
      if (!v18)
        break;
      v19 = *(_QWORD *)(v18 + 8);
      if (!v19)
        break;
      v6 = *(_QWORD *)(*(_QWORD *)(v19 + 40) + 8);
    }
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 528);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8);
        if (v9)
          v10 = *(_BYTE *)(v9 + 144) == 0;
        else
          v10 = 0;
        if (v10)
        {
          v11 = *(_QWORD *)(v9 + 296);
          if (v11)
            v6 = v11;
        }
      }
    }
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v20, (const WTF::URL *)(v6 + 736));
  v4 = WTF::equal(v20, v5, v12);
  v14 = v20;
  v20 = 0;
  if (!v14)
    goto LABEL_23;
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
LABEL_23:
    if (!v5)
      return v4;
    goto LABEL_24;
  }
  WTF::StringImpl::destroy(v14, v13);
  if (!v5)
    return v4;
LABEL_24:
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, v13);
  else
    *(_DWORD *)v5 -= 2;
  return v4;
}

void WebCore::ComputedStyleExtractor::propertyValue(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  const WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  WTF::StringImpl *v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  WTF *v56;
  void *v57;
  WTF *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF *v73;
  WTF *v74;
  WebCore::RenderStyle *v75;
  uint64_t v76;
  int v77;
  WTF::StringImpl *v78;
  char v79;

  v6 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1
    || !(_DWORD)a2
    || (v11 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8), (a2 - 304) <= 0x1E)
    && ((1 << (a2 - 48)) & 0x7C010001) != 0
    || (v12 = *(_QWORD *)(v11 + 680),
        (WebCore::isExposedNotInvalidAndNotInternal(a2, *(_QWORD *)(v12 + 664), *(_QWORD *)(v12 + 672), *(_QWORD *)(v12 + 680), *(_QWORD *)(v12 + 688), *(_QWORD *)(v12 + 696), *(_QWORD *)(v12 + 704), *(_QWORD *)(v12 + 712)) & 1) == 0))
  {
    *a5 = 0;
    return;
  }
  v75 = 0;
  if ((a3 & 1) == 0)
  {
    v34 = (_BYTE *)(a1 + 8);
    v33 = v6;
LABEL_39:
    if (*(_BYTE *)(a1 + 24))
    {
      v76 = v33;
      v77 = *(_DWORD *)(a1 + 8);
      v69 = *(WTF::StringImpl **)(a1 + 16);
      if (v69)
        *(_DWORD *)v69 += 2;
      v78 = v69;
      v79 = 1;
      v36 = WebCore::Styleable::renderer((WebCore::Styleable *)&v76);
      WebCore::Styleable::~Styleable((WebCore::Styleable *)&v76, v70);
    }
    else
    {
      if ((*(_QWORD *)(v33 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v53 = *(_QWORD *)((*(_QWORD *)(v33 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
        if (v53)
        {
          if ((*(_QWORD *)(v53 + 16) & 0x1FLL) == 0x12)
            goto LABEL_145;
        }
      }
      v35 = *(_QWORD *)(v33 + 64);
      v36 = v35 & 0xFFFFFFFFFFFFLL;
      if ((v35 & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((v35 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19453B1B8);
        }
LABEL_43:
        v37 = *(WTF **)(v36 + 8);
        if (!v37)
        {
          v37 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v37 = 1;
          *((_QWORD *)v37 + 1) = v36;
          v58 = *(WTF **)(v36 + 8);
          *(_QWORD *)(v36 + 8) = v37;
          if (v58)
          {
            if (*(_DWORD *)v58 == 1)
            {
              WTF::fastFree(v58, v57);
              v37 = *(WTF **)(v36 + 8);
              if (!v37)
              {
LABEL_45:
                v73 = v37;
                v19 = WebCore::computeRenderStyleForProperty((_QWORD *)v6, v34, a2, &v75, &v73);
                v38 = v73;
                v73 = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 1)
                    WTF::fastFree(v38, v24);
                  else
                    --*(_DWORD *)v38;
                }
                goto LABEL_48;
              }
            }
            else
            {
              --*(_DWORD *)v58;
            }
          }
        }
        ++*(_DWORD *)v37;
        goto LABEL_45;
      }
    }
    if (v36)
      goto LABEL_43;
LABEL_145:
    v37 = 0;
    goto LABEL_45;
  }
  *(_DWORD *)(v11 + 24) += 2;
  WebCore::ComputedStyleExtractor::updateStyleIfNeededForProperty(v6, a2, v13);
  if ((_DWORD)a2 != 7)
    goto LABEL_8;
  v48 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v76 = *(_QWORD *)a1;
      v77 = *(_DWORD *)(a1 + 8);
      v71 = *(WTF::StringImpl **)(a1 + 16);
      if (v71)
        *(_DWORD *)v71 += 2;
      v78 = v71;
      v79 = 1;
      v49 = WebCore::Styleable::renderer((WebCore::Styleable *)&v76);
      WebCore::Styleable::~Styleable((WebCore::Styleable *)&v76, v72);
    }
    else
    {
      if ((*(_QWORD *)(v48 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v54 = *(_QWORD *)((*(_QWORD *)(v48 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
        if (v54)
        {
          if ((*(_QWORD *)(v54 + 16) & 0x1FLL) == 0x12)
            goto LABEL_150;
        }
      }
      v49 = *(_QWORD *)(v48 + 64) & 0xFFFFFFFFFFFFLL;
      if (v49)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v48 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19453AF10);
        }
        goto LABEL_8;
      }
    }
    if (v49)
      goto LABEL_8;
  }
LABEL_150:
  if ((*(_WORD *)(v6 + 28) & 0x20) != 0 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1232))(v6) & 1) == 0)
  {
    v19 = 0;
    v32 = 0;
    *a5 = 0;
    goto LABEL_104;
  }
LABEL_8:
  v14 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_127;
  if (*(_BYTE *)(a1 + 24))
  {
    v76 = *(_QWORD *)a1;
    v77 = *(_DWORD *)(a1 + 8);
    v62 = *(WTF::StringImpl **)(a1 + 16);
    if (v62)
      *(_DWORD *)v62 += 2;
    v78 = v62;
    v79 = 1;
    v16 = WebCore::Styleable::renderer((WebCore::Styleable *)&v76);
    WebCore::Styleable::~Styleable((WebCore::Styleable *)&v76, v63);
    goto LABEL_126;
  }
  if ((*(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v50 = *(_QWORD *)((*(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
    if (v50)
    {
      if ((*(_QWORD *)(v50 + 16) & 0x1FLL) == 0x12)
        goto LABEL_127;
    }
  }
  v15 = *(_QWORD *)(v14 + 64);
  v16 = v15 & 0xFFFFFFFFFFFFLL;
  if ((v15 & 0xFFFFFFFFFFFFLL) == 0)
  {
LABEL_126:
    if (v16)
      goto LABEL_13;
LABEL_127:
    v17 = 0;
    goto LABEL_15;
  }
  if ((*(_BYTE *)((v15 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19453B120);
  }
LABEL_13:
  v17 = *(WTF **)(v16 + 8);
  if (v17)
    goto LABEL_14;
  v17 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v17 = 1;
  *((_QWORD *)v17 + 1) = v16;
  v56 = *(WTF **)(v16 + 8);
  *(_QWORD *)(v16 + 8) = v17;
  if (!v56)
    goto LABEL_14;
  if (*(_DWORD *)v56 != 1)
  {
    --*(_DWORD *)v56;
LABEL_14:
    ++*(_DWORD *)v17;
    goto LABEL_15;
  }
  WTF::fastFree(v56, v55);
  v17 = *(WTF **)(v16 + 8);
  if (v17)
    goto LABEL_14;
LABEL_15:
  v74 = v17;
  v19 = WebCore::computeRenderStyleForProperty((_QWORD *)v6, (_BYTE *)(a1 + 8), a2, &v75, &v74);
  v20 = v74;
  v74 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1)
      WTF::fastFree(v20, v18);
    else
      --*(_DWORD *)v20;
  }
  v21 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_72;
  if (*(_BYTE *)(a1 + 24))
  {
    v76 = *(_QWORD *)a1;
    v77 = *(_DWORD *)(a1 + 8);
    v64 = *(WTF::StringImpl **)(a1 + 16);
    if (v64)
      *(_DWORD *)v64 += 2;
    v78 = v64;
    v79 = 1;
    v23 = WebCore::Styleable::renderer((WebCore::Styleable *)&v76);
    if (v79)
    {
      v66 = v78;
      v78 = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
          WTF::StringImpl::destroy(v66, v65);
        else
          *(_DWORD *)v66 -= 2;
      }
    }
  }
  else
  {
    if ((*(_QWORD *)(v21 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v51 = *(_QWORD *)((*(_QWORD *)(v21 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
      if (v51)
      {
        if ((*(_QWORD *)(v51 + 16) & 0x1FLL) == 0x12)
        {
LABEL_72:
          v23 = 0;
          goto LABEL_23;
        }
      }
    }
    v22 = *(_QWORD *)(v21 + 64);
    v23 = v22 & 0xFFFFFFFFFFFFLL;
    if ((v22 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v22 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19453B140);
    }
  }
LABEL_23:
  if ((WebCore::isLayoutDependent(a2, (uint64_t)v19, v23) & 1) != 0 || (*(_BYTE *)(v6 + 22) & 0x10) != 0)
    goto LABEL_31;
  v25 = *(_QWORD *)(v11 + 528);
  if (v25)
  {
    v26 = *(_QWORD *)(v25 + 8);
    if (v26)
    {
      v27 = *(_QWORD *)(v26 + 120);
      if (v27)
      {
        v28 = *(_QWORD *)(v27 + 8);
        if (v28)
        {
          v29 = *(_QWORD **)(*(_QWORD *)(v11 + 1328) + 32);
          if (v29)
          {
            v30 = v29[4];
            if (!*(_BYTE *)(v30 + 801))
            {
              v59 = v29[7];
              if (!v59 || !*(_BYTE *)(v59 + 801))
              {
                v60 = v29[5];
                if ((!v60 || !*(_BYTE *)(v60 + 801))
                  && !*(_DWORD *)(v30 + 748)
                  && (!v59 || !*(_DWORD *)(v59 + 748))
                  && (!v60 || !*(_DWORD *)(v60 + 748)))
                {
                  if (*(_BYTE *)(v11 + 3407))
                  {
                    *(_DWORD *)(v28 + 24) += 2;
                    v61 = *(_QWORD *)(*(_QWORD *)(v28 + 40) + 8);
                    *(_DWORD *)(v61 + 24) += 2;
                    WebCore::Document::updateLayout(v61, 0, 0);
                    if (*(_DWORD *)(v61 + 24) == 2)
                    {
                      if ((*(_WORD *)(v61 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v61);
                    }
                    else
                    {
                      *(_DWORD *)(v61 + 24) -= 2;
                    }
                    if (*(_DWORD *)(v28 + 24) != 2)
                    {
                      v31 = 0;
                      *(_DWORD *)(v28 + 24) -= 2;
                      goto LABEL_33;
                    }
                    if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v28);
LABEL_32:
                    v31 = 0;
LABEL_33:
                    v32 = 1;
                    goto LABEL_34;
                  }
                  goto LABEL_103;
                }
              }
            }
LABEL_31:
            WebCore::Document::updateLayout(v11, 6u, *(_QWORD *)a1);
            goto LABEL_32;
          }
        }
      }
    }
  }
LABEL_103:
  v32 = 1;
LABEL_104:
  v31 = 1;
LABEL_34:
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (!v32)
    goto LABEL_57;
  if ((v31 & 1) == 0)
  {
    v34 = (_BYTE *)(a1 + 8);
    v33 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_145;
    goto LABEL_39;
  }
LABEL_48:
  if (v19)
  {
    if (a4)
    {
      v41 = a1;
      v42 = v19;
      v43 = a2;
      v44 = 0;
      v45 = 1;
      goto LABEL_56;
    }
    v39 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_75;
    if (*(_BYTE *)(a1 + 24))
    {
      v76 = *(_QWORD *)a1;
      v77 = *(_DWORD *)(a1 + 8);
      v67 = *(WTF::StringImpl **)(a1 + 16);
      if (v67)
        *(_DWORD *)v67 += 2;
      v78 = v67;
      v79 = 1;
      v40 = WebCore::Styleable::renderer((WebCore::Styleable *)&v76);
      WebCore::Styleable::~Styleable((WebCore::Styleable *)&v76, v68);
      goto LABEL_55;
    }
    if ((*(_QWORD *)(v39 + 72) & 0xFFFFFFFFFFFFLL) != 0
      && (v52 = *(_QWORD *)((*(_QWORD *)(v39 + 72) & 0xFFFFFFFFFFFFLL) + 0x38)) != 0
      && (*(_QWORD *)(v52 + 16) & 0x1FLL) == 0x12)
    {
LABEL_75:
      v40 = 0;
    }
    else
    {
      v40 = *(_QWORD *)(v39 + 64) & 0xFFFFFFFFFFFFLL;
      if (v40 && (*(_BYTE *)((*(_QWORD *)(v39 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19453B198);
      }
    }
LABEL_55:
    v41 = a1;
    v42 = v19;
    v43 = a2;
    v44 = v40;
    v45 = 0;
LABEL_56:
    WebCore::ComputedStyleExtractor::valueForPropertyInStyle(v41, v42, v43, v44, v45);
    goto LABEL_57;
  }
  *a5 = 0;
LABEL_57:
  if (v75)
  {
    WebCore::RenderStyle::~RenderStyle(v75, v24);
    if (*(_DWORD *)v46)
    {
      *((_OWORD *)v46 + 2) = 0u;
      *((_OWORD *)v46 + 3) = 0u;
      *(_OWORD *)v46 = 0u;
      *((_OWORD *)v46 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v46, v47);
    }
  }
}

#error "19453B3B4: too big function (funcsize=0)"

uint64_t WebCore::isLayoutDependent(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  char isLayoutDependent;
  char v22;
  char v23;
  int v24;
  WebCore::RenderObject *v25;
  int v26;
  char v27;
  char v28;

  while (1)
  {
    result = 0;
    v7 = a1;
    v8 = 1;
    if (v7 > 495)
    {
      switch(v7)
      {
        case 496:
        case 500:
          return a3 && *(_BYTE *)(a3 + 46) == 12;
        case 497:
        case 498:
        case 499:
        case 501:
        case 502:
        case 503:
        case 504:
          return result;
        case 505:
          isLayoutDependent = WebCore::isLayoutDependent(506, a2, a3);
          a1 = 507;
          if ((isLayoutDependent & 1) != 0)
            goto LABEL_122;
          continue;
        case 506:
          v22 = WebCore::isLayoutDependent(401, a2, a3);
          a1 = 400;
          if ((v22 & 1) != 0)
            goto LABEL_122;
          continue;
        case 507:
          v23 = WebCore::isLayoutDependent(404, a2, a3);
          a1 = 403;
          if ((v23 & 1) == 0)
            continue;
LABEL_122:
          v8 = 1;
          break;
        default:
          switch(v7)
          {
            case 516:
              v11 = WebCore::isLayoutDependent(517, a2, a3);
              a1 = 518;
              if ((v11 & 1) != 0)
                goto LABEL_122;
              continue;
            case 517:
              v27 = WebCore::isLayoutDependent(424, a2, a3);
              a1 = 423;
              if ((v27 & 1) != 0)
                goto LABEL_122;
              continue;
            case 518:
              v28 = WebCore::isLayoutDependent(427, a2, a3);
              a1 = 426;
              if ((v28 & 1) != 0)
                goto LABEL_122;
              continue;
            case 519:
            case 520:
            case 521:
              return result;
            case 522:
              return v8;
            default:
              if (v7 == 537)
                return v8;
              return result;
          }
      }
      return v8;
    }
    if (v7 <= 350)
      break;
    switch(v7)
    {
      case 387:
      case 395:
      case 396:
      case 397:
      case 398:
      case 399:
      case 431:
      case 449:
        result = 0;
        if (!a2 || !a3)
          return result;
        v17 = *(unsigned __int8 *)(a3 + 45);
        return (v17 >> 2) & 1;
      case 388:
      case 389:
      case 390:
      case 391:
      case 392:
      case 408:
      case 409:
      case 410:
      case 411:
      case 412:
      case 413:
      case 414:
      case 415:
      case 416:
      case 417:
      case 418:
      case 419:
      case 420:
      case 421:
      case 422:
      case 432:
      case 433:
      case 434:
      case 435:
      case 436:
      case 437:
      case 438:
      case 439:
      case 440:
      case 441:
      case 442:
      case 443:
      case 444:
      case 445:
      case 446:
      case 447:
      case 448:
        return result;
      case 393:
      case 394:
      case 450:
        goto LABEL_80;
      case 400:
        if (!a3 || (*(_BYTE *)(a3 + 45) & 4) == 0)
          return 0;
        v24 = 2;
        goto LABEL_141;
      case 401:
        if (!a3 || (*(_BYTE *)(a3 + 45) & 4) == 0)
          return 0;
        v24 = 0;
        goto LABEL_141;
      case 402:
        if (a2 && a3)
        {
          v12 = *(_BYTE *)(a3 + 45);
          if ((v12 & 4) != 0 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 60) != 4)
            return 1;
        }
        else
        {
          if (!a3)
            return 0;
          v12 = *(_BYTE *)(a3 + 45);
        }
        if ((v12 & 4) == 0)
          return 0;
        v13 = *(_QWORD *)(a3 + 32);
        if (v13)
        {
          v19 = *(_QWORD *)(v13 + 8);
          if (v19)
          {
            if (*(char *)(v19 + 45) < 0 && (*(_BYTE *)(a3 + 21) & 4) == 0
              || *(_BYTE *)(v19 + 46) == 12 && (*(_BYTE *)(a3 + 21) & 4) == 0)
            {
              return (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v19 + 88) + 40) + 461) >> 1) & 1;
            }
          }
        }
        goto LABEL_89;
      case 403:
        if (!a3 || (*(_BYTE *)(a3 + 45) & 4) == 0)
          return 0;
        v24 = 1;
        goto LABEL_141;
      case 404:
        if (!a3 || (*(_BYTE *)(a3 + 45) & 4) == 0)
          return 0;
        v24 = 3;
LABEL_141:
        v25 = (WebCore::RenderObject *)a3;
        v26 = 1;
        goto LABEL_149;
      case 405:
        if (a2 && a3)
        {
          v12 = *(_BYTE *)(a3 + 45);
          if ((v12 & 4) != 0 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 68) != 4)
            return 1;
        }
        else
        {
          if (!a3)
            return 0;
          v12 = *(_BYTE *)(a3 + 45);
        }
        if ((v12 & 4) == 0)
          return 0;
        v13 = *(_QWORD *)(a3 + 32);
        if (!v13)
          goto LABEL_89;
        v14 = *(_QWORD *)(v13 + 8);
        if (!v14)
          goto LABEL_89;
        if (((*(char *)(v14 + 45) & 0x80000000) == 0 || (*(_BYTE *)(a3 + 21) & 4) != 0)
          && (*(_BYTE *)(v14 + 46) != 12 || (*(_BYTE *)(a3 + 21) & 4) != 0))
        {
          goto LABEL_89;
        }
        v17 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 40) + 461);
        return (v17 >> 2) & 1;
      case 406:
        if (a2 && a3)
        {
          v12 = *(_BYTE *)(a3 + 45);
          if ((v12 & 4) != 0 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 52) != 4)
            return 1;
        }
        else
        {
          if (!a3)
            return 0;
          v12 = *(_BYTE *)(a3 + 45);
        }
        if ((v12 & 4) == 0)
          return 0;
        v13 = *(_QWORD *)(a3 + 32);
        if (v13)
        {
          v15 = *(_QWORD *)(v13 + 8);
          if (v15)
          {
            if (*(char *)(v15 + 45) < 0 && (*(_BYTE *)(a3 + 21) & 4) == 0
              || *(_BYTE *)(v15 + 46) == 12 && (*(_BYTE *)(a3 + 21) & 4) == 0)
            {
              return (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v15 + 88) + 40) + 461) >> 3) & 1;
            }
          }
        }
        goto LABEL_89;
      case 407:
        if (a2 && a3)
        {
          v12 = *(_BYTE *)(a3 + 45);
          if ((v12 & 4) != 0 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 44) != 4)
            return 1;
        }
        else
        {
          if (!a3)
            return 0;
          v12 = *(_BYTE *)(a3 + 45);
        }
        if ((v12 & 4) == 0)
          return 0;
        v13 = *(_QWORD *)(a3 + 32);
        if (v13)
        {
          v16 = *(_QWORD *)(v13 + 8);
          if (v16)
          {
            if (*(char *)(v16 + 45) < 0 && (*(_BYTE *)(a3 + 21) & 4) == 0
              || *(_BYTE *)(v16 + 46) == 12 && (*(_BYTE *)(a3 + 21) & 4) == 0)
            {
              return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 88) + 40) + 461) & 1;
            }
          }
        }
LABEL_89:
        v20 = a3;
        if ((v12 & 2) != 0)
          v20 = *(_QWORD *)(v13 + 8);
        result = 0;
        if ((*(_DWORD *)(v20 + 96) & 0x1Fu) <= 0x17 && ((1 << (*(_DWORD *)(v20 + 96) & 0x1F)) & 0xA94016) != 0)
        {
          result = (uint64_t)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a3);
          if (result)
            return (*(_BYTE *)(result + 21) & 0x10) == 0;
        }
        return result;
      case 423:
        if (!a3 || (*(_BYTE *)(a3 + 45) & 4) == 0)
          return 0;
        v24 = 2;
        goto LABEL_148;
      case 424:
        if (!a3 || (*(_BYTE *)(a3 + 45) & 4) == 0)
          return 0;
        v24 = 0;
        goto LABEL_148;
      case 425:
        result = 0;
        if (!a2 || !a3)
          return result;
        if ((*(_BYTE *)(a3 + 45) & 4) == 0)
          return 0;
        v10 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 92);
        return v10 != 4;
      case 426:
        if (!a3 || (*(_BYTE *)(a3 + 45) & 4) == 0)
          return 0;
        v24 = 1;
        goto LABEL_148;
      case 427:
        if (!a3 || (*(_BYTE *)(a3 + 45) & 4) == 0)
          return 0;
        v24 = 3;
LABEL_148:
        v25 = (WebCore::RenderObject *)a3;
        v26 = 0;
LABEL_149:
        a1 = WebCore::toPaddingOrMarginPropertyID(v24, v25, v26);
        break;
      case 428:
        result = 0;
        if (!a2 || !a3)
          return result;
        if ((*(_BYTE *)(a3 + 45) & 4) == 0)
          return 0;
        v10 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 100);
        return v10 != 4;
      case 429:
        result = 0;
        if (!a2 || !a3)
          return result;
        if ((*(_BYTE *)(a3 + 45) & 4) == 0)
          return 0;
        v10 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 84);
        return v10 != 4;
      case 430:
        result = 0;
        if (!a2 || !a3)
          return result;
        if ((*(_BYTE *)(a3 + 45) & 4) == 0)
          return 0;
        v10 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 76);
        return v10 != 4;
      case 451:
        return v8;
      default:
        if (v7 == 351)
          return v8;
        if (v7 != 354)
          return result;
LABEL_80:
        if (!a3 || (*(_BYTE *)(a3 + 52) & 7) == 4)
          return 0;
        v18 = *(_DWORD *)(a3 + 20);
        if ((v18 & 1) != 0)
          return 1;
        else
          return (v18 >> 1) & 1;
    }
  }
  if ((v7 - 137) < 2)
  {
    return a3 && *(_BYTE *)(a3 + 46) == 12;
  }
  else if (v7 == 117 || v7 == 273)
  {
    return v8;
  }
  return result;
}

uint64_t WebCore::JSCSSStyleDeclarationPrototype::finishCreation(WebCore::JSCSSStyleDeclarationPrototype *this, JSC::VM *a2)
{
  int *v4;
  char *v5;
  char **v6;
  uint64_t v7;
  char *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  int v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  int v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  int v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  int v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  int v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  int v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  int v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  int v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  int v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  int v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  int v101;
  WTF::StringImpl *v102;
  uint64_t v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  int v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  int v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  int v116;
  WTF::StringImpl *v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  int v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  int v126;
  WTF::StringImpl *v127;
  uint64_t v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  int v131;
  WTF::StringImpl *v132;
  uint64_t v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  int v136;
  WTF::StringImpl *v137;
  uint64_t v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  int v141;
  WTF::StringImpl *v142;
  uint64_t v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  int v146;
  WTF::StringImpl *v147;
  uint64_t v148;
  uint64_t v149;
  WTF::StringImpl *v150;
  int v151;
  WTF::StringImpl *v152;
  uint64_t v153;
  uint64_t v154;
  WTF::StringImpl *v155;
  int v156;
  WTF::StringImpl *v157;
  uint64_t v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  int v161;
  WTF::StringImpl *v162;
  uint64_t v163;
  uint64_t v164;
  WTF::StringImpl *v165;
  int v166;
  WTF::StringImpl *v167;
  uint64_t v168;
  uint64_t v169;
  WTF::StringImpl *v170;
  int v171;
  WTF::StringImpl *v172;
  uint64_t v173;
  uint64_t v174;
  WTF::StringImpl *v175;
  int v176;
  WTF::StringImpl *v177;
  uint64_t v178;
  uint64_t v179;
  WTF::StringImpl *v180;
  int v181;
  WTF::StringImpl *v182;
  uint64_t v183;
  uint64_t v184;
  WTF::StringImpl *v185;
  int v186;
  WTF::StringImpl *v187;
  uint64_t v188;
  uint64_t v189;
  WTF::StringImpl *v190;
  int v191;
  WTF::StringImpl *v192;
  uint64_t v193;
  uint64_t v194;
  WTF::StringImpl *v195;
  int v196;
  WTF::StringImpl *v197;
  uint64_t v198;
  uint64_t v199;
  WTF::StringImpl *v200;
  int v201;
  WTF::StringImpl *v202;
  uint64_t v203;
  uint64_t v204;
  WTF::StringImpl *v205;
  int v206;
  WTF::StringImpl *v207;
  uint64_t v208;
  uint64_t v209;
  WTF::StringImpl *v210;
  int v211;
  WTF::StringImpl *v212;
  uint64_t v213;
  uint64_t v214;
  WTF::StringImpl *v215;
  int v216;
  WTF::StringImpl *v217;
  uint64_t v218;
  uint64_t v219;
  WTF::StringImpl *v220;
  int v221;
  WTF::StringImpl *v222;
  uint64_t v223;
  uint64_t v224;
  WTF::StringImpl *v225;
  int v226;
  WTF::StringImpl *v227;
  uint64_t v228;
  uint64_t v229;
  WTF::StringImpl *v230;
  int v231;
  WTF::StringImpl *v232;
  uint64_t v233;
  uint64_t v234;
  WTF::StringImpl *v235;
  int v236;
  WTF::StringImpl *v237;
  uint64_t v238;
  uint64_t v239;
  WTF::StringImpl *v240;
  int v241;
  WTF::StringImpl *v242;
  uint64_t v243;
  uint64_t v244;
  WTF::StringImpl *v245;
  int v246;
  WTF::StringImpl *v247;
  uint64_t v248;
  uint64_t v249;
  WTF::StringImpl *v250;
  int v251;
  WTF::StringImpl *v252;
  uint64_t v253;
  uint64_t v254;
  WTF::StringImpl *v255;
  int v256;
  WTF::StringImpl *v257;
  uint64_t v258;
  uint64_t v259;
  WTF::StringImpl *v260;
  int v261;
  WTF::StringImpl *v262;
  uint64_t v263;
  uint64_t v264;
  WTF::StringImpl *v265;
  int v266;
  WTF::StringImpl *v267;
  uint64_t v268;
  uint64_t v269;
  WTF::StringImpl *v270;
  int v271;
  WTF::StringImpl *v272;
  uint64_t v273;
  uint64_t v274;
  WTF::StringImpl *v275;
  int v276;
  WTF::StringImpl *v277;
  uint64_t v278;
  uint64_t v279;
  WTF::StringImpl *v280;
  int v281;
  WTF::StringImpl *v282;
  uint64_t v283;
  uint64_t v284;
  WTF::StringImpl *v285;
  int v286;
  WTF::StringImpl *v287;
  uint64_t v288;
  uint64_t v289;
  WTF::StringImpl *v290;
  int v291;
  WTF::StringImpl *v292;
  uint64_t v293;
  uint64_t v294;
  WTF::StringImpl *v295;
  int v296;
  WTF::StringImpl *v297;
  uint64_t v298;
  uint64_t v299;
  WTF::StringImpl *v300;
  int v301;
  WTF::StringImpl *v302;
  uint64_t v303;
  uint64_t v304;
  WTF::StringImpl *v305;
  int v306;
  WTF::StringImpl *v307;
  uint64_t v308;
  uint64_t v309;
  WTF::StringImpl *v310;
  int v311;
  WTF::StringImpl *v312;
  uint64_t v313;
  uint64_t v314;
  WTF::StringImpl *v315;
  int v316;
  WTF::StringImpl *v317;
  uint64_t v318;
  uint64_t v319;
  WTF::StringImpl *v320;
  int v321;
  WTF::StringImpl *v322;
  uint64_t v323;
  uint64_t v324;
  WTF::StringImpl *v325;
  int v326;
  WTF::StringImpl *v327;
  uint64_t v328;
  uint64_t v329;
  WTF::StringImpl *v330;
  int v331;
  WTF::StringImpl *v332;
  uint64_t v333;
  uint64_t v334;
  WTF::StringImpl *v335;
  int v336;
  WTF::StringImpl *v337;
  uint64_t v338;
  uint64_t v339;
  WTF::StringImpl *v340;
  int v341;
  WTF::StringImpl *v342;
  uint64_t v343;
  uint64_t v344;
  WTF::StringImpl *v345;
  int v346;
  WTF::StringImpl *v347;
  uint64_t v348;
  uint64_t v349;
  WTF::StringImpl *v350;
  int v351;
  WTF::StringImpl *v352;
  uint64_t v353;
  uint64_t v354;
  WTF::StringImpl *v355;
  int v356;
  WTF::StringImpl *v357;
  uint64_t v358;
  uint64_t v359;
  WTF::StringImpl *v360;
  int v361;
  WTF::StringImpl *v362;
  uint64_t v363;
  uint64_t v364;
  WTF::StringImpl *v365;
  int v366;
  WTF::StringImpl *v367;
  uint64_t v368;
  uint64_t v369;
  WTF::StringImpl *v370;
  int v371;
  WTF::StringImpl *v372;
  uint64_t v373;
  uint64_t v374;
  WTF::StringImpl *v375;
  int v376;
  WTF::StringImpl *v377;
  uint64_t v378;
  uint64_t v379;
  WTF::StringImpl *v380;
  int v381;
  WTF::StringImpl *v382;
  uint64_t v383;
  uint64_t v384;
  WTF::StringImpl *v385;
  int v386;
  WTF::StringImpl *v387;
  uint64_t v388;
  uint64_t v389;
  WTF::StringImpl *v390;
  int v391;
  WTF::StringImpl *v392;
  uint64_t v393;
  uint64_t v394;
  WTF::StringImpl *v395;
  int v396;
  WTF::StringImpl *v397;
  uint64_t v398;
  uint64_t v399;
  WTF::StringImpl *v400;
  int v401;
  WTF::StringImpl *v402;
  uint64_t v403;
  uint64_t v404;
  WTF::StringImpl *v405;
  int v406;
  WTF::StringImpl *v407;
  uint64_t v408;
  uint64_t v409;
  WTF::StringImpl *v410;
  int v411;
  WTF::StringImpl *v412;
  uint64_t v413;
  uint64_t v414;
  WTF::StringImpl *v415;
  int v416;
  WTF::StringImpl *v417;
  uint64_t v418;
  uint64_t v419;
  WTF::StringImpl *v420;
  int v421;
  WTF::StringImpl *v422;
  uint64_t v423;
  uint64_t v424;
  WTF::StringImpl *v425;
  int v426;
  WTF::StringImpl *v427;
  uint64_t v428;
  uint64_t v429;
  WTF::StringImpl *v430;
  int v431;
  WTF::StringImpl *v432;
  uint64_t v433;
  uint64_t v434;
  WTF::StringImpl *v435;
  int v436;
  WTF::StringImpl *v437;
  uint64_t v438;
  uint64_t v439;
  WTF::StringImpl *v440;
  int v441;
  WTF::StringImpl *v442;
  uint64_t v443;
  uint64_t v444;
  WTF::StringImpl *v445;
  int v446;
  WTF::StringImpl *v447;
  uint64_t v448;
  uint64_t v449;
  WTF::StringImpl *v450;
  int v451;
  WTF::StringImpl *v452;
  uint64_t v453;
  uint64_t v454;
  WTF::StringImpl *v455;
  int v456;
  WTF::StringImpl *v457;
  uint64_t v458;
  uint64_t v459;
  WTF::StringImpl *v460;
  int v461;
  WTF::StringImpl *v462;
  uint64_t v463;
  uint64_t v464;
  WTF::StringImpl *v465;
  int v466;
  WTF::StringImpl *v467;
  uint64_t v468;
  uint64_t v469;
  WTF::StringImpl *v470;
  int v471;
  WTF::StringImpl *v472;
  uint64_t v473;
  uint64_t v474;
  WTF::StringImpl *v475;
  int v476;
  WTF::StringImpl *v477;
  uint64_t v478;
  uint64_t v479;
  WTF::StringImpl *v480;
  int v481;
  WTF::StringImpl *v482;
  uint64_t v483;
  uint64_t v484;
  WTF::StringImpl *v485;
  int v486;
  WTF::StringImpl *v487;
  uint64_t v488;
  uint64_t v489;
  WTF::StringImpl *v490;
  int v491;
  WTF::StringImpl *v492;
  uint64_t v493;
  uint64_t v494;
  WTF::StringImpl *v495;
  int v496;
  WTF::StringImpl *v497;
  uint64_t v498;
  uint64_t v499;
  WTF::StringImpl *v500;
  int v501;
  WTF::StringImpl *v502;
  uint64_t v503;
  uint64_t v504;
  WTF::StringImpl *v505;
  int v506;
  WTF::StringImpl *v507;
  uint64_t v508;
  uint64_t v509;
  WTF::StringImpl *v510;
  int v511;
  WTF::StringImpl *v512;
  uint64_t v513;
  uint64_t v514;
  WTF::StringImpl *v515;
  int v516;
  WTF::StringImpl *v517;
  uint64_t v518;
  uint64_t v519;
  WTF::StringImpl *v520;
  int v521;
  WTF::StringImpl *v522;
  uint64_t v523;
  uint64_t v524;
  WTF::StringImpl *v525;
  int v526;
  WTF::StringImpl *v527;
  uint64_t v528;
  uint64_t v529;
  WTF::StringImpl *v530;
  int v531;
  WTF::StringImpl *v532;
  uint64_t v533;
  uint64_t v534;
  WTF::StringImpl *v535;
  int v536;
  WTF::StringImpl *v537;
  uint64_t v538;
  uint64_t v539;
  WTF::StringImpl *v540;
  int v541;
  WTF::StringImpl *v542;
  uint64_t v543;
  uint64_t v544;
  WTF::StringImpl *v545;
  int v546;
  WTF::StringImpl *v547;
  uint64_t v548;
  uint64_t v549;
  WTF::StringImpl *v550;
  int v551;
  WTF::StringImpl *v552;
  unint64_t v553;
  uint64_t v554;
  _DWORD *v555;
  uint64_t Direct;
  WTF::StringImpl *v557;
  unint64_t v558;
  WTF::StringImpl *v559;
  uint64_t v560;
  WTF::StringImpl *v561;
  JSC::Structure *v562;
  int v563;
  uint64_t result;
  WTF::StringImpl *v565;
  WebCore::JSCSSStyleDeclarationPrototype *v566;
  uint64_t v567;
  int *v568;
  JSC::Structure **v569;
  int *v570;
  int v571;
  int v572;
  JSC::Structure *v573;
  int v574;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v4 = (int *)((char *)a2 + 93124);
  v5 = (char *)a2 + 41952;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary(this, a2);
  v6 = &WebCore::JSCSSStyleDeclarationPrototypeTableValues;
  v7 = 1482;
  do
  {
    v8 = v6[1];
    if (v8)
    {
      if (v8 == (char *)2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)a2 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v9 = v565;
      JSC::reifyStaticProperty(a2, (uint64_t)&WebCore::JSCSSStyleDeclaration::s_info, (unint64_t *)&v565, (uint64_t)v6, (unsigned __int8 *)this);
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v10);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
    v6 += 5;
    --v7;
  }
  while (v7);
  v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v11 && *(_BYTE *)(v11 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553878);
  }
  v12 = v11 - 192;
  if (!v11)
    v12 = 0;
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 680) + 664);
  v14 = (v13 & 0x40000000000000) == 0;
  if ((v13 & 0x40000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v15 = v565;
    v16 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v16;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v17);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  v18 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v18 && *(_BYTE *)(v18 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553898);
  }
  v19 = v18 - 192;
  if (!v18)
    v19 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v19 + 680) + 712) & 0x4000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v20 = v565;
    v21 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v21;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v22);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  v23 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v23 && *(_BYTE *)(v23 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945538B8);
  }
  v24 = v23 - 192;
  if (!v23)
    v24 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v24 + 680) + 712) & 0x100000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v25 = v565;
    v26 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v26;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v27);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  v28 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v28 && *(_BYTE *)(v28 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945538D8);
  }
  v29 = v28 - 192;
  if (!v28)
    v29 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v29 + 680) + 664) & 0x80) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v30 = v565;
    v31 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v31;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v32);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  v33 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v33 && *(_BYTE *)(v33 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945538F8);
  }
  v34 = v33 - 192;
  if (!v33)
    v34 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v34 + 680) + 672) & 0x200) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v35 = v565;
    v36 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v36;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v37);
      else
        *(_DWORD *)v35 -= 2;
    }
  }
  v38 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v38 && *(_BYTE *)(v38 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553918);
  }
  v39 = v38 - 192;
  if (!v38)
    v39 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v39 + 680) + 672) & 0x20) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v40 = v565;
    v41 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v41;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v42);
      else
        *(_DWORD *)v40 -= 2;
    }
  }
  v43 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v43 && *(_BYTE *)(v43 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553938);
  }
  v44 = v43 - 192;
  if (!v43)
    v44 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v44 + 680) + 688) & 0x80000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v45 = v565;
    v46 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v46;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v47);
      else
        *(_DWORD *)v45 -= 2;
    }
  }
  v48 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v48 && *(_BYTE *)(v48 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553958);
  }
  v49 = v48 - 192;
  if (!v48)
    v49 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v49 + 680) + 672) & 0x1000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v50 = v565;
    v51 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v51;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v52);
      else
        *(_DWORD *)v50 -= 2;
    }
  }
  v53 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v53 && *(_BYTE *)(v53 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553978);
  }
  v54 = v53 - 192;
  if (!v53)
    v54 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v54 + 680) + 672) & 0x100000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v55 = v565;
    v56 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v56;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, v57);
      else
        *(_DWORD *)v55 -= 2;
    }
  }
  v58 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v58 && *(_BYTE *)(v58 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553998);
  }
  v59 = v58 - 192;
  if (!v58)
    v59 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v59 + 680) + 672) & 0x100000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v60 = v565;
    v61 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v61;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v62);
      else
        *(_DWORD *)v60 -= 2;
    }
  }
  v63 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v63 && *(_BYTE *)(v63 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945539B8);
  }
  v64 = v63 - 192;
  if (!v63)
    v64 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v64 + 680) + 672) & 0x80) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v65 = v565;
    v66 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v66;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
        WTF::StringImpl::destroy(v65, v67);
      else
        *(_DWORD *)v65 -= 2;
    }
  }
  v68 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v68 && *(_BYTE *)(v68 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945539D8);
  }
  v69 = v68 - 192;
  if (!v68)
    v69 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v69 + 680) + 672) & 0x400) == 0)
  {
    JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)a2 + 41968));
    v70 = v565;
    v71 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v71;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, v72);
      else
        *(_DWORD *)v70 -= 2;
    }
  }
  v73 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v73 && *(_BYTE *)(v73 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945539F8);
  }
  v74 = v73 - 192;
  if (!v73)
    v74 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v74 + 680) + 672) & 0x200) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v75 = v565;
    v76 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v76;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
        WTF::StringImpl::destroy(v75, v77);
      else
        *(_DWORD *)v75 -= 2;
    }
  }
  v78 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v78 && *(_BYTE *)(v78 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553A18);
  }
  v79 = v78 - 192;
  if (!v78)
    v79 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v79 + 680) + 672) & 0x800) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v80 = v565;
    v81 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v81;
    if (v80)
    {
      if (*(_DWORD *)v80 == 2)
        WTF::StringImpl::destroy(v80, v82);
      else
        *(_DWORD *)v80 -= 2;
    }
  }
  v83 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v83 && *(_BYTE *)(v83 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553A38);
  }
  v84 = v83 - 192;
  if (!v83)
    v84 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v84 + 680) + 672) & 0x2000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v85 = v565;
    v86 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v86;
    if (v85)
    {
      if (*(_DWORD *)v85 == 2)
        WTF::StringImpl::destroy(v85, v87);
      else
        *(_DWORD *)v85 -= 2;
    }
  }
  v88 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v88 && *(_BYTE *)(v88 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553A58);
  }
  v89 = v88 - 192;
  if (!v88)
    v89 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v89 + 680) + 672) & 0x4000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v90 = v565;
    v91 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v91;
    if (v90)
    {
      if (*(_DWORD *)v90 == 2)
        WTF::StringImpl::destroy(v90, v92);
      else
        *(_DWORD *)v90 -= 2;
    }
  }
  v93 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v93 && *(_BYTE *)(v93 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553A78);
  }
  v94 = v93 - 192;
  if (!v93)
    v94 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v94 + 680) + 672) & 0x10000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v95 = v565;
    v96 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v96;
    if (v95)
    {
      if (*(_DWORD *)v95 == 2)
        WTF::StringImpl::destroy(v95, v97);
      else
        *(_DWORD *)v95 -= 2;
    }
  }
  v98 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v98 && *(_BYTE *)(v98 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553A98);
  }
  v99 = v98 - 192;
  if (!v98)
    v99 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v99 + 680) + 688) & 0x10) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v100 = v565;
    v101 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v101;
    if (v100)
    {
      if (*(_DWORD *)v100 == 2)
        WTF::StringImpl::destroy(v100, v102);
      else
        *(_DWORD *)v100 -= 2;
    }
  }
  v103 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v103 && *(_BYTE *)(v103 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553AB8);
  }
  v104 = v103 - 192;
  if (!v103)
    v104 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v104 + 680) + 672) & 0x200) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v105 = v565;
    v106 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v106;
    if (v105)
    {
      if (*(_DWORD *)v105 == 2)
        WTF::StringImpl::destroy(v105, v107);
      else
        *(_DWORD *)v105 -= 2;
    }
  }
  v108 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v108 && *(_BYTE *)(v108 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553AD8);
  }
  v109 = v108 - 192;
  if (!v108)
    v109 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v109 + 680) + 672) & 0x20000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v110 = v565;
    v111 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v111;
    if (v110)
    {
      if (*(_DWORD *)v110 == 2)
        WTF::StringImpl::destroy(v110, v112);
      else
        *(_DWORD *)v110 -= 2;
    }
  }
  v113 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v113 && *(_BYTE *)(v113 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553AF8);
  }
  v114 = v113 - 192;
  if (!v113)
    v114 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v114 + 680) + 672) & 0x20000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v115 = v565;
    v116 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v116;
    if (v115)
    {
      if (*(_DWORD *)v115 == 2)
        WTF::StringImpl::destroy(v115, v117);
      else
        *(_DWORD *)v115 -= 2;
    }
  }
  v118 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v118 && *(_BYTE *)(v118 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553B18);
  }
  v119 = v118 - 192;
  if (!v118)
    v119 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v119 + 680) + 672) & 0x20000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v120 = v565;
    v121 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v121;
    if (v120)
    {
      if (*(_DWORD *)v120 == 2)
        WTF::StringImpl::destroy(v120, v122);
      else
        *(_DWORD *)v120 -= 2;
    }
  }
  v123 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v123 && *(_BYTE *)(v123 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553B38);
  }
  v124 = v123 - 192;
  if (!v123)
    v124 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v124 + 680) + 672) & 0x20000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v125 = v565;
    v126 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v126;
    if (v125)
    {
      if (*(_DWORD *)v125 == 2)
        WTF::StringImpl::destroy(v125, v127);
      else
        *(_DWORD *)v125 -= 2;
    }
  }
  v128 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v128 && *(_BYTE *)(v128 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553B58);
  }
  v129 = v128 - 192;
  if (!v128)
    v129 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v129 + 680) + 672) & 0x20000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v130 = v565;
    v131 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v131;
    if (v130)
    {
      if (*(_DWORD *)v130 == 2)
        WTF::StringImpl::destroy(v130, v132);
      else
        *(_DWORD *)v130 -= 2;
    }
  }
  v133 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v133 && *(_BYTE *)(v133 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553B78);
  }
  v134 = v133 - 192;
  if (!v133)
    v134 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v134 + 680) + 672) & 0x20000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v135 = v565;
    v136 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v136;
    if (v135)
    {
      if (*(_DWORD *)v135 == 2)
        WTF::StringImpl::destroy(v135, v137);
      else
        *(_DWORD *)v135 -= 2;
    }
  }
  v138 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v138 && *(_BYTE *)(v138 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553B98);
  }
  v139 = v138 - 192;
  if (!v138)
    v139 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v139 + 680) + 672) & 0x400000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v140 = v565;
    v141 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v141;
    if (v140)
    {
      if (*(_DWORD *)v140 == 2)
        WTF::StringImpl::destroy(v140, v142);
      else
        *(_DWORD *)v140 -= 2;
    }
  }
  v143 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v143 && *(_BYTE *)(v143 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553BB8);
  }
  v144 = v143 - 192;
  if (!v143)
    v144 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v144 + 680) + 688) & 0x800000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v145 = v565;
    v146 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v146;
    if (v145)
    {
      if (*(_DWORD *)v145 == 2)
        WTF::StringImpl::destroy(v145, v147);
      else
        *(_DWORD *)v145 -= 2;
    }
  }
  v148 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v148 && *(_BYTE *)(v148 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553BD8);
  }
  v149 = v148 - 192;
  if (!v148)
    v149 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v149 + 680) + 688) & 0x800000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v150 = v565;
    v151 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v151;
    if (v150)
    {
      if (*(_DWORD *)v150 == 2)
        WTF::StringImpl::destroy(v150, v152);
      else
        *(_DWORD *)v150 -= 2;
    }
  }
  v153 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v153 && *(_BYTE *)(v153 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553BF8);
  }
  v154 = v153 - 192;
  if (!v153)
    v154 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v154 + 680) + 688) & 0x800000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v155 = v565;
    v156 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v156;
    if (v155)
    {
      if (*(_DWORD *)v155 == 2)
        WTF::StringImpl::destroy(v155, v157);
      else
        *(_DWORD *)v155 -= 2;
    }
  }
  v158 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v158 && *(_BYTE *)(v158 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553C18);
  }
  v159 = v158 - 192;
  if (!v158)
    v159 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v159 + 680) + 688) & 0x800000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v160 = v565;
    v161 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v161;
    if (v160)
    {
      if (*(_DWORD *)v160 == 2)
        WTF::StringImpl::destroy(v160, v162);
      else
        *(_DWORD *)v160 -= 2;
    }
  }
  v163 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v163 && *(_BYTE *)(v163 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553C38);
  }
  v164 = v163 - 192;
  if (!v163)
    v164 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v164 + 680) + 688) & 0x800000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v165 = v565;
    v166 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v166;
    if (v165)
    {
      if (*(_DWORD *)v165 == 2)
        WTF::StringImpl::destroy(v165, v167);
      else
        *(_DWORD *)v165 -= 2;
    }
  }
  v168 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v168 && *(_BYTE *)(v168 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553C58);
  }
  v169 = v168 - 192;
  if (!v168)
    v169 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v169 + 680) + 672) & 0x200) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v170 = v565;
    v171 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v171;
    if (v170)
    {
      if (*(_DWORD *)v170 == 2)
        WTF::StringImpl::destroy(v170, v172);
      else
        *(_DWORD *)v170 -= 2;
    }
  }
  v173 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v173 && *(_BYTE *)(v173 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553C78);
  }
  v174 = v173 - 192;
  if (!v173)
    v174 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v174 + 680) + 672) & 0x20) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v175 = v565;
    v176 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v176;
    if (v175)
    {
      if (*(_DWORD *)v175 == 2)
        WTF::StringImpl::destroy(v175, v177);
      else
        *(_DWORD *)v175 -= 2;
    }
  }
  v178 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v178 && *(_BYTE *)(v178 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553C98);
  }
  v179 = v178 - 192;
  if (!v178)
    v179 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v179 + 680) + 672) & 0x200) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v180 = v565;
    v181 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v181;
    if (v180)
    {
      if (*(_DWORD *)v180 == 2)
        WTF::StringImpl::destroy(v180, v182);
      else
        *(_DWORD *)v180 -= 2;
    }
  }
  v183 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v183 && *(_BYTE *)(v183 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553CB8);
  }
  v184 = v183 - 192;
  if (!v183)
    v184 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v184 + 680) + 672) & 0x200) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v185 = v565;
    v186 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v186;
    if (v185)
    {
      if (*(_DWORD *)v185 == 2)
        WTF::StringImpl::destroy(v185, v187);
      else
        *(_DWORD *)v185 -= 2;
    }
  }
  v188 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v188 && *(_BYTE *)(v188 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553CD8);
  }
  v189 = v188 - 192;
  if (!v188)
    v189 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v189 + 680) + 664) & 2) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v190 = v565;
    v191 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v191;
    if (v190)
    {
      if (*(_DWORD *)v190 == 2)
        WTF::StringImpl::destroy(v190, v192);
      else
        *(_DWORD *)v190 -= 2;
    }
  }
  v193 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v193 && *(_BYTE *)(v193 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553CF8);
  }
  v194 = v193 - 192;
  if (!v193)
    v194 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v194 + 680) + 688) & 0x80000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v195 = v565;
    v196 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v196;
    if (v195)
    {
      if (*(_DWORD *)v195 == 2)
        WTF::StringImpl::destroy(v195, v197);
      else
        *(_DWORD *)v195 -= 2;
    }
  }
  v198 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v198 && *(_BYTE *)(v198 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553D18);
  }
  v199 = v198 - 192;
  if (!v198)
    v199 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v199 + 680) + 688) & 0x80000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v200 = v565;
    v201 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v201;
    if (v200)
    {
      if (*(_DWORD *)v200 == 2)
        WTF::StringImpl::destroy(v200, v202);
      else
        *(_DWORD *)v200 -= 2;
    }
  }
  v203 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v203 && *(_BYTE *)(v203 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553D38);
  }
  v204 = v203 - 192;
  if (!v203)
    v204 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v204 + 680) + 688) & 0x80000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v205 = v565;
    v206 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v206;
    if (v205)
    {
      if (*(_DWORD *)v205 == 2)
        WTF::StringImpl::destroy(v205, v207);
      else
        *(_DWORD *)v205 -= 2;
    }
  }
  v208 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v208 && *(_BYTE *)(v208 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553D58);
  }
  v209 = v208 - 192;
  if (!v208)
    v209 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v209 + 680) + 672) & 0x800000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v210 = v565;
    v211 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v211;
    if (v210)
    {
      if (*(_DWORD *)v210 == 2)
        WTF::StringImpl::destroy(v210, v212);
      else
        *(_DWORD *)v210 -= 2;
    }
  }
  v213 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v213 && *(_BYTE *)(v213 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553D78);
  }
  v214 = v213 - 192;
  if (!v213)
    v214 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v214 + 680) + 672) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v215 = v565;
    v216 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v216;
    if (v215)
    {
      if (*(_DWORD *)v215 == 2)
        WTF::StringImpl::destroy(v215, v217);
      else
        *(_DWORD *)v215 -= 2;
    }
  }
  v218 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v218 && *(_BYTE *)(v218 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553D98);
  }
  v219 = v218 - 192;
  if (!v218)
    v219 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v219 + 680) + 672) & 0x2000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v220 = v565;
    v221 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v221;
    if (v220)
    {
      if (*(_DWORD *)v220 == 2)
        WTF::StringImpl::destroy(v220, v222);
      else
        *(_DWORD *)v220 -= 2;
    }
  }
  v223 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v223 && *(_BYTE *)(v223 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553DB8);
  }
  v224 = v223 - 192;
  if (!v223)
    v224 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v224 + 680) + 672) & 0x1000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v225 = v565;
    v226 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v226;
    if (v225)
    {
      if (*(_DWORD *)v225 == 2)
        WTF::StringImpl::destroy(v225, v227);
      else
        *(_DWORD *)v225 -= 2;
    }
  }
  v228 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v228 && *(_BYTE *)(v228 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553DD8);
  }
  v229 = v228 - 192;
  if (!v228)
    v229 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v229 + 680) + 672) & 0x200) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v230 = v565;
    v231 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v231;
    if (v230)
    {
      if (*(_DWORD *)v230 == 2)
        WTF::StringImpl::destroy(v230, v232);
      else
        *(_DWORD *)v230 -= 2;
    }
  }
  v233 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v233 && *(_BYTE *)(v233 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553DF8);
  }
  v234 = v233 - 192;
  if (!v233)
    v234 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v234 + 680) + 672) & 0x200) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v235 = v565;
    v236 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v236;
    if (v235)
    {
      if (*(_DWORD *)v235 == 2)
        WTF::StringImpl::destroy(v235, v237);
      else
        *(_DWORD *)v235 -= 2;
    }
  }
  v238 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v238 && *(_BYTE *)(v238 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553E18);
  }
  v239 = v238 - 192;
  if (!v238)
    v239 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v239 + 680) + 672) & 0x200) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v240 = v565;
    v241 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v241;
    if (v240)
    {
      if (*(_DWORD *)v240 == 2)
        WTF::StringImpl::destroy(v240, v242);
      else
        *(_DWORD *)v240 -= 2;
    }
  }
  v243 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v243 && *(_BYTE *)(v243 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553E38);
  }
  v244 = v243 - 192;
  if (!v243)
    v244 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v244 + 680) + 672) & 0x80000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v245 = v565;
    v246 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v246;
    if (v245)
    {
      if (*(_DWORD *)v245 == 2)
        WTF::StringImpl::destroy(v245, v247);
      else
        *(_DWORD *)v245 -= 2;
    }
  }
  v248 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v248 && *(_BYTE *)(v248 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553E58);
  }
  v249 = v248 - 192;
  if (!v248)
    v249 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v249 + 680) + 672) & 0x10000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v250 = v565;
    v251 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v251;
    if (v250)
    {
      if (*(_DWORD *)v250 == 2)
        WTF::StringImpl::destroy(v250, v252);
      else
        *(_DWORD *)v250 -= 2;
    }
  }
  v253 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v253 && *(_BYTE *)(v253 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553E78);
  }
  v254 = v253 - 192;
  if (!v253)
    v254 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v254 + 680) + 672) & 0x10000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v255 = v565;
    v256 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v256;
    if (v255)
    {
      if (*(_DWORD *)v255 == 2)
        WTF::StringImpl::destroy(v255, v257);
      else
        *(_DWORD *)v255 -= 2;
    }
  }
  v258 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v258 && *(_BYTE *)(v258 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553E98);
  }
  v259 = v258 - 192;
  if (!v258)
    v259 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v259 + 680) + 672) & 0x20000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v260 = v565;
    v261 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v261;
    if (v260)
    {
      if (*(_DWORD *)v260 == 2)
        WTF::StringImpl::destroy(v260, v262);
      else
        *(_DWORD *)v260 -= 2;
    }
  }
  v263 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v263 && *(_BYTE *)(v263 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553EB8);
  }
  v264 = v263 - 192;
  if (!v263)
    v264 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v264 + 680) + 672) & 0x40000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v265 = v565;
    v266 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v266;
    if (v265)
    {
      if (*(_DWORD *)v265 == 2)
        WTF::StringImpl::destroy(v265, v267);
      else
        *(_DWORD *)v265 -= 2;
    }
  }
  v268 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v268 && *(_BYTE *)(v268 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553ED8);
  }
  v269 = v268 - 192;
  if (!v268)
    v269 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v269 + 680) + 672) & 0x80000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v270 = v565;
    v271 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v271;
    if (v270)
    {
      if (*(_DWORD *)v270 == 2)
        WTF::StringImpl::destroy(v270, v272);
      else
        *(_DWORD *)v270 -= 2;
    }
  }
  v273 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v273 && *(_BYTE *)(v273 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553EF8);
  }
  v274 = v273 - 192;
  if (!v273)
    v274 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v274 + 680) + 672) & 0x400000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v275 = v565;
    v276 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v276;
    if (v275)
    {
      if (*(_DWORD *)v275 == 2)
        WTF::StringImpl::destroy(v275, v277);
      else
        *(_DWORD *)v275 -= 2;
    }
  }
  v278 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v278 && *(_BYTE *)(v278 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553F18);
  }
  v279 = v278 - 192;
  if (!v278)
    v279 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v279 + 680) + 688) & 0x80000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v280 = v565;
    v281 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v281;
    if (v280)
    {
      if (*(_DWORD *)v280 == 2)
        WTF::StringImpl::destroy(v280, v282);
      else
        *(_DWORD *)v280 -= 2;
    }
  }
  v283 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v283 && *(_BYTE *)(v283 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553F38);
  }
  v284 = v283 - 192;
  if (!v283)
    v284 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v284 + 680) + 688) & 0x80000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v285 = v565;
    v286 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v286;
    if (v285)
    {
      if (*(_DWORD *)v285 == 2)
        WTF::StringImpl::destroy(v285, v287);
      else
        *(_DWORD *)v285 -= 2;
    }
  }
  v288 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v288 && *(_BYTE *)(v288 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553F58);
  }
  v289 = v288 - 192;
  if (!v288)
    v289 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v289 + 680) + 688) & 0x80000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v290 = v565;
    v291 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v291;
    if (v290)
    {
      if (*(_DWORD *)v290 == 2)
        WTF::StringImpl::destroy(v290, v292);
      else
        *(_DWORD *)v290 -= 2;
    }
  }
  v293 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v293 && *(_BYTE *)(v293 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553F78);
  }
  v294 = v293 - 192;
  if (!v293)
    v294 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v294 + 680) + 688) & 0x80000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v295 = v565;
    v296 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v296;
    if (v295)
    {
      if (*(_DWORD *)v295 == 2)
        WTF::StringImpl::destroy(v295, v297);
      else
        *(_DWORD *)v295 -= 2;
    }
  }
  v298 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v298 && *(_BYTE *)(v298 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553F98);
  }
  v299 = v298 - 192;
  if (!v298)
    v299 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v299 + 680) + 704) & 0x400) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v300 = v565;
    v301 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v301;
    if (v300)
    {
      if (*(_DWORD *)v300 == 2)
        WTF::StringImpl::destroy(v300, v302);
      else
        *(_DWORD *)v300 -= 2;
    }
  }
  v303 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v303 && *(_BYTE *)(v303 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553FB8);
  }
  v304 = v303 - 192;
  if (!v303)
    v304 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v304 + 680) + 712) & 0x4000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v305 = v565;
    v306 = *v4;
    v14 = 1;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v306;
    if (v305)
    {
      if (*(_DWORD *)v305 == 2)
        WTF::StringImpl::destroy(v305, v307);
      else
        *(_DWORD *)v305 -= 2;
    }
  }
  v308 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v308 && *(_BYTE *)(v308 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553FD8);
  }
  v309 = v308 - 192;
  if (!v308)
    v309 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v309 + 680) + 712) & 0x100000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v310 = v565;
    v311 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v311;
    if (v310)
    {
      if (*(_DWORD *)v310 == 2)
        WTF::StringImpl::destroy(v310, v312);
      else
        *(_DWORD *)v310 -= 2;
    }
    v14 = 1;
  }
  v313 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v313 && *(_BYTE *)(v313 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194553FF8);
  }
  v314 = v313 - 192;
  if (!v313)
    v314 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v314 + 680) + 664) & 0x40000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v315 = v565;
    v316 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v316;
    if (v315)
    {
      if (*(_DWORD *)v315 == 2)
        WTF::StringImpl::destroy(v315, v317);
      else
        *(_DWORD *)v315 -= 2;
    }
    v14 = 1;
  }
  v318 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v318 && *(_BYTE *)(v318 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554018);
  }
  v319 = v318 - 192;
  if (!v318)
    v319 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v319 + 680) + 712) & 0x4000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v320 = v565;
    v321 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v321;
    if (v320)
    {
      if (*(_DWORD *)v320 == 2)
        WTF::StringImpl::destroy(v320, v322);
      else
        *(_DWORD *)v320 -= 2;
    }
    v14 = 1;
  }
  v323 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v323 && *(_BYTE *)(v323 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554038);
  }
  v324 = v323 - 192;
  if (!v323)
    v324 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v324 + 680) + 712) & 0x100000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v325 = v565;
    v326 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v326;
    if (v325)
    {
      if (*(_DWORD *)v325 == 2)
        WTF::StringImpl::destroy(v325, v327);
      else
        *(_DWORD *)v325 -= 2;
    }
    v14 = 1;
  }
  v328 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v328 && *(_BYTE *)(v328 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554058);
  }
  v329 = v328 - 192;
  if (!v328)
    v329 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v329 + 680) + 664) & 0x80) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v330 = v565;
    v331 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v331;
    if (v330)
    {
      if (*(_DWORD *)v330 == 2)
        WTF::StringImpl::destroy(v330, v332);
      else
        *(_DWORD *)v330 -= 2;
    }
    v14 = 1;
  }
  v333 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v333 && *(_BYTE *)(v333 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554078);
  }
  v334 = v333 - 192;
  if (!v333)
    v334 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v334 + 680) + 672) & 0x200) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v335 = v565;
    v336 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v336;
    if (v335)
    {
      if (*(_DWORD *)v335 == 2)
        WTF::StringImpl::destroy(v335, v337);
      else
        *(_DWORD *)v335 -= 2;
    }
    v14 = 1;
  }
  v338 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v338 && *(_BYTE *)(v338 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554098);
  }
  v339 = v338 - 192;
  if (!v338)
    v339 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v339 + 680) + 672) & 0x20) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v340 = v565;
    v341 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v341;
    if (v340)
    {
      if (*(_DWORD *)v340 == 2)
        WTF::StringImpl::destroy(v340, v342);
      else
        *(_DWORD *)v340 -= 2;
    }
    v14 = 1;
  }
  v343 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v343 && *(_BYTE *)(v343 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945540B8);
  }
  v344 = v343 - 192;
  if (!v343)
    v344 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v344 + 680) + 688) & 0x80000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v345 = v565;
    v346 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v346;
    if (v345)
    {
      if (*(_DWORD *)v345 == 2)
        WTF::StringImpl::destroy(v345, v347);
      else
        *(_DWORD *)v345 -= 2;
    }
    v14 = 1;
  }
  v348 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v348 && *(_BYTE *)(v348 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945540D8);
  }
  v349 = v348 - 192;
  if (!v348)
    v349 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v349 + 680) + 672) & 0x1000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v350 = v565;
    v351 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v351;
    if (v350)
    {
      if (*(_DWORD *)v350 == 2)
        WTF::StringImpl::destroy(v350, v352);
      else
        *(_DWORD *)v350 -= 2;
    }
    v14 = 1;
  }
  v353 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v353 && *(_BYTE *)(v353 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945540F8);
  }
  v354 = v353 - 192;
  if (!v353)
    v354 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v354 + 680) + 672) & 0x100000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v355 = v565;
    v356 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v356;
    if (v355)
    {
      if (*(_DWORD *)v355 == 2)
        WTF::StringImpl::destroy(v355, v357);
      else
        *(_DWORD *)v355 -= 2;
    }
    v14 = 1;
  }
  v358 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v358 && *(_BYTE *)(v358 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554118);
  }
  v359 = v358 - 192;
  if (!v358)
    v359 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v359 + 680) + 672) & 0x100000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v360 = v565;
    v361 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v361;
    if (v360)
    {
      if (*(_DWORD *)v360 == 2)
        WTF::StringImpl::destroy(v360, v362);
      else
        *(_DWORD *)v360 -= 2;
    }
    v14 = 1;
  }
  v363 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v363 && *(_BYTE *)(v363 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554138);
  }
  v364 = v363 - 192;
  if (!v363)
    v364 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v364 + 680) + 672) & 0x80) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v365 = v565;
    v366 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v366;
    if (v365)
    {
      if (*(_DWORD *)v365 == 2)
        WTF::StringImpl::destroy(v365, v367);
      else
        *(_DWORD *)v365 -= 2;
    }
    v14 = 1;
  }
  v368 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v368 && *(_BYTE *)(v368 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554158);
  }
  v369 = v368 - 192;
  if (!v368)
    v369 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v369 + 680) + 672) & 0x800) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v370 = v565;
    v371 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v371;
    if (v370)
    {
      if (*(_DWORD *)v370 == 2)
        WTF::StringImpl::destroy(v370, v372);
      else
        *(_DWORD *)v370 -= 2;
    }
    v14 = 1;
  }
  v373 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v373 && *(_BYTE *)(v373 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554178);
  }
  v374 = v373 - 192;
  if (!v373)
    v374 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v374 + 680) + 672) & 0x2000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v375 = v565;
    v376 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v376;
    if (v375)
    {
      if (*(_DWORD *)v375 == 2)
        WTF::StringImpl::destroy(v375, v377);
      else
        *(_DWORD *)v375 -= 2;
    }
    v14 = 1;
  }
  v378 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v378 && *(_BYTE *)(v378 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554198);
  }
  v379 = v378 - 192;
  if (!v378)
    v379 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v379 + 680) + 672) & 0x4000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v380 = v565;
    v381 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v381;
    if (v380)
    {
      if (*(_DWORD *)v380 == 2)
        WTF::StringImpl::destroy(v380, v382);
      else
        *(_DWORD *)v380 -= 2;
    }
    v14 = 1;
  }
  v383 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v383 && *(_BYTE *)(v383 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945541B8);
  }
  v384 = v383 - 192;
  if (!v383)
    v384 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v384 + 680) + 672) & 0x10000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v385 = v565;
    v386 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v386;
    if (v385)
    {
      if (*(_DWORD *)v385 == 2)
        WTF::StringImpl::destroy(v385, v387);
      else
        *(_DWORD *)v385 -= 2;
    }
    v14 = 1;
  }
  v388 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v388 && *(_BYTE *)(v388 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945541D8);
  }
  v389 = v388 - 192;
  if (!v388)
    v389 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v389 + 680) + 688) & 0x10) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v390 = v565;
    v391 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v391;
    if (v390)
    {
      if (*(_DWORD *)v390 == 2)
        WTF::StringImpl::destroy(v390, v392);
      else
        *(_DWORD *)v390 -= 2;
    }
    v14 = 1;
  }
  v393 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v393 && *(_BYTE *)(v393 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945541F8);
  }
  v394 = v393 - 192;
  if (!v393)
    v394 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v394 + 680) + 672) & 0x20000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v395 = v565;
    v396 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v396;
    if (v395)
    {
      if (*(_DWORD *)v395 == 2)
        WTF::StringImpl::destroy(v395, v397);
      else
        *(_DWORD *)v395 -= 2;
    }
    v14 = 1;
  }
  v398 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v398 && *(_BYTE *)(v398 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554218);
  }
  v399 = v398 - 192;
  if (!v398)
    v399 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v399 + 680) + 672) & 0x20000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v400 = v565;
    v401 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v401;
    if (v400)
    {
      if (*(_DWORD *)v400 == 2)
        WTF::StringImpl::destroy(v400, v402);
      else
        *(_DWORD *)v400 -= 2;
    }
    v14 = 1;
  }
  v403 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v403 && *(_BYTE *)(v403 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554238);
  }
  v404 = v403 - 192;
  if (!v403)
    v404 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v404 + 680) + 672) & 0x20000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v405 = v565;
    v406 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v406;
    if (v405)
    {
      if (*(_DWORD *)v405 == 2)
        WTF::StringImpl::destroy(v405, v407);
      else
        *(_DWORD *)v405 -= 2;
    }
    v14 = 1;
  }
  v408 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v408 && *(_BYTE *)(v408 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554258);
  }
  v409 = v408 - 192;
  if (!v408)
    v409 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v409 + 680) + 672) & 0x20000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v410 = v565;
    v411 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v411;
    if (v410)
    {
      if (*(_DWORD *)v410 == 2)
        WTF::StringImpl::destroy(v410, v412);
      else
        *(_DWORD *)v410 -= 2;
    }
    v14 = 1;
  }
  v413 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v413 && *(_BYTE *)(v413 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554278);
  }
  v414 = v413 - 192;
  if (!v413)
    v414 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v414 + 680) + 672) & 0x20000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v415 = v565;
    v416 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v416;
    if (v415)
    {
      if (*(_DWORD *)v415 == 2)
        WTF::StringImpl::destroy(v415, v417);
      else
        *(_DWORD *)v415 -= 2;
    }
    v14 = 1;
  }
  v418 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v418 && *(_BYTE *)(v418 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554298);
  }
  v419 = v418 - 192;
  if (!v418)
    v419 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v419 + 680) + 672) & 0x400000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v420 = v565;
    v421 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v421;
    if (v420)
    {
      if (*(_DWORD *)v420 == 2)
        WTF::StringImpl::destroy(v420, v422);
      else
        *(_DWORD *)v420 -= 2;
    }
    v14 = 1;
  }
  v423 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v423 && *(_BYTE *)(v423 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945542B8);
  }
  v424 = v423 - 192;
  if (!v423)
    v424 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v424 + 680) + 688) & 0x800000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v425 = v565;
    v426 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v426;
    if (v425)
    {
      if (*(_DWORD *)v425 == 2)
        WTF::StringImpl::destroy(v425, v427);
      else
        *(_DWORD *)v425 -= 2;
    }
    v14 = 1;
  }
  v428 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v428 && *(_BYTE *)(v428 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945542D8);
  }
  v429 = v428 - 192;
  if (!v428)
    v429 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v429 + 680) + 688) & 0x800000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v430 = v565;
    v431 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v431;
    if (v430)
    {
      if (*(_DWORD *)v430 == 2)
        WTF::StringImpl::destroy(v430, v432);
      else
        *(_DWORD *)v430 -= 2;
    }
    v14 = 1;
  }
  v433 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v433 && *(_BYTE *)(v433 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945542F8);
  }
  v434 = v433 - 192;
  if (!v433)
    v434 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v434 + 680) + 688) & 0x800000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v435 = v565;
    v436 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v436;
    if (v435)
    {
      if (*(_DWORD *)v435 == 2)
        WTF::StringImpl::destroy(v435, v437);
      else
        *(_DWORD *)v435 -= 2;
    }
    v14 = 1;
  }
  v438 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v438 && *(_BYTE *)(v438 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554318);
  }
  v439 = v438 - 192;
  if (!v438)
    v439 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v439 + 680) + 688) & 0x800000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v440 = v565;
    v441 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v441;
    if (v440)
    {
      if (*(_DWORD *)v440 == 2)
        WTF::StringImpl::destroy(v440, v442);
      else
        *(_DWORD *)v440 -= 2;
    }
    v14 = 1;
  }
  v443 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v443 && *(_BYTE *)(v443 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554338);
  }
  v444 = v443 - 192;
  if (!v443)
    v444 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v444 + 680) + 688) & 0x800000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v445 = v565;
    v446 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v446;
    if (v445)
    {
      if (*(_DWORD *)v445 == 2)
        WTF::StringImpl::destroy(v445, v447);
      else
        *(_DWORD *)v445 -= 2;
    }
    v14 = 1;
  }
  v448 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v448 && *(_BYTE *)(v448 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554358);
  }
  v449 = v448 - 192;
  if (!v448)
    v449 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v449 + 680) + 672) & 0x20) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v450 = v565;
    v451 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v451;
    if (v450)
    {
      if (*(_DWORD *)v450 == 2)
        WTF::StringImpl::destroy(v450, v452);
      else
        *(_DWORD *)v450 -= 2;
    }
    v14 = 1;
  }
  v453 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v453 && *(_BYTE *)(v453 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554378);
  }
  v454 = v453 - 192;
  if (!v453)
    v454 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v454 + 680) + 664) & 2) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v455 = v565;
    v456 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v456;
    if (v455)
    {
      if (*(_DWORD *)v455 == 2)
        WTF::StringImpl::destroy(v455, v457);
      else
        *(_DWORD *)v455 -= 2;
    }
    v14 = 1;
  }
  v458 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v458 && *(_BYTE *)(v458 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554398);
  }
  v459 = v458 - 192;
  if (!v458)
    v459 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v459 + 680) + 688) & 0x80000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v460 = v565;
    v461 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v461;
    if (v460)
    {
      if (*(_DWORD *)v460 == 2)
        WTF::StringImpl::destroy(v460, v462);
      else
        *(_DWORD *)v460 -= 2;
    }
    v14 = 1;
  }
  v463 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v463 && *(_BYTE *)(v463 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945543B8);
  }
  v464 = v463 - 192;
  if (!v463)
    v464 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v464 + 680) + 688) & 0x80000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v465 = v565;
    v466 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v466;
    if (v465)
    {
      if (*(_DWORD *)v465 == 2)
        WTF::StringImpl::destroy(v465, v467);
      else
        *(_DWORD *)v465 -= 2;
    }
    v14 = 1;
  }
  v468 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v468 && *(_BYTE *)(v468 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945543D8);
  }
  v469 = v468 - 192;
  if (!v468)
    v469 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v469 + 680) + 688) & 0x80000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v470 = v565;
    v471 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v471;
    if (v470)
    {
      if (*(_DWORD *)v470 == 2)
        WTF::StringImpl::destroy(v470, v472);
      else
        *(_DWORD *)v470 -= 2;
    }
    v14 = 1;
  }
  v473 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v473 && *(_BYTE *)(v473 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945543F8);
  }
  v474 = v473 - 192;
  if (!v473)
    v474 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v474 + 680) + 672) & 0x800000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v475 = v565;
    v476 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v476;
    if (v475)
    {
      if (*(_DWORD *)v475 == 2)
        WTF::StringImpl::destroy(v475, v477);
      else
        *(_DWORD *)v475 -= 2;
    }
    v14 = 1;
  }
  v478 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v478 && *(_BYTE *)(v478 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554418);
  }
  v479 = v478 - 192;
  if (!v478)
    v479 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v479 + 680) + 672) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v480 = v565;
    v481 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v481;
    if (v480)
    {
      if (*(_DWORD *)v480 == 2)
        WTF::StringImpl::destroy(v480, v482);
      else
        *(_DWORD *)v480 -= 2;
    }
    v14 = 1;
  }
  v483 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v483 && *(_BYTE *)(v483 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554438);
  }
  v484 = v483 - 192;
  if (!v483)
    v484 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v484 + 680) + 672) & 0x2000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v485 = v565;
    v486 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v486;
    if (v485)
    {
      if (*(_DWORD *)v485 == 2)
        WTF::StringImpl::destroy(v485, v487);
      else
        *(_DWORD *)v485 -= 2;
    }
    v14 = 1;
  }
  v488 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v488 && *(_BYTE *)(v488 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554458);
  }
  v489 = v488 - 192;
  if (!v488)
    v489 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v489 + 680) + 672) & 0x1000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v490 = v565;
    v491 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v491;
    if (v490)
    {
      if (*(_DWORD *)v490 == 2)
        WTF::StringImpl::destroy(v490, v492);
      else
        *(_DWORD *)v490 -= 2;
    }
    v14 = 1;
  }
  v493 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v493 && *(_BYTE *)(v493 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554478);
  }
  v494 = v493 - 192;
  if (!v493)
    v494 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v494 + 680) + 672) & 0x80000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v495 = v565;
    v496 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v496;
    if (v495)
    {
      if (*(_DWORD *)v495 == 2)
        WTF::StringImpl::destroy(v495, v497);
      else
        *(_DWORD *)v495 -= 2;
    }
    v14 = 1;
  }
  v498 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v498 && *(_BYTE *)(v498 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554498);
  }
  v499 = v498 - 192;
  if (!v498)
    v499 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v499 + 680) + 672) & 0x10000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v500 = v565;
    v501 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v501;
    if (v500)
    {
      if (*(_DWORD *)v500 == 2)
        WTF::StringImpl::destroy(v500, v502);
      else
        *(_DWORD *)v500 -= 2;
    }
    v14 = 1;
  }
  v503 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v503 && *(_BYTE *)(v503 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945544B8);
  }
  v504 = v503 - 192;
  if (!v503)
    v504 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v504 + 680) + 672) & 0x10000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v505 = v565;
    v506 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v506;
    if (v505)
    {
      if (*(_DWORD *)v505 == 2)
        WTF::StringImpl::destroy(v505, v507);
      else
        *(_DWORD *)v505 -= 2;
    }
    v14 = 1;
  }
  v508 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v508 && *(_BYTE *)(v508 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945544D8);
  }
  v509 = v508 - 192;
  if (!v508)
    v509 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v509 + 680) + 672) & 0x20000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v510 = v565;
    v511 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v511;
    if (v510)
    {
      if (*(_DWORD *)v510 == 2)
        WTF::StringImpl::destroy(v510, v512);
      else
        *(_DWORD *)v510 -= 2;
    }
    v14 = 1;
  }
  v513 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v513 && *(_BYTE *)(v513 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945544F8);
  }
  v514 = v513 - 192;
  if (!v513)
    v514 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v514 + 680) + 672) & 0x40000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v515 = v565;
    v516 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v516;
    if (v515)
    {
      if (*(_DWORD *)v515 == 2)
        WTF::StringImpl::destroy(v515, v517);
      else
        *(_DWORD *)v515 -= 2;
    }
    v14 = 1;
  }
  v518 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v518 && *(_BYTE *)(v518 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554518);
  }
  v519 = v518 - 192;
  if (!v518)
    v519 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v519 + 680) + 672) & 0x80000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v520 = v565;
    v521 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v521;
    if (v520)
    {
      if (*(_DWORD *)v520 == 2)
        WTF::StringImpl::destroy(v520, v522);
      else
        *(_DWORD *)v520 -= 2;
    }
    v14 = 1;
  }
  v523 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v523 && *(_BYTE *)(v523 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554538);
  }
  v524 = v523 - 192;
  if (!v523)
    v524 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v524 + 680) + 672) & 0x400000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v525 = v565;
    v526 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v526;
    if (v525)
    {
      if (*(_DWORD *)v525 == 2)
        WTF::StringImpl::destroy(v525, v527);
      else
        *(_DWORD *)v525 -= 2;
    }
    v14 = 1;
  }
  v528 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v528 && *(_BYTE *)(v528 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554558);
  }
  v529 = v528 - 192;
  if (!v528)
    v529 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v529 + 680) + 688) & 0x80000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v530 = v565;
    v531 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v531;
    if (v530)
    {
      if (*(_DWORD *)v530 == 2)
        WTF::StringImpl::destroy(v530, v532);
      else
        *(_DWORD *)v530 -= 2;
    }
    v14 = 1;
  }
  v533 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v533 && *(_BYTE *)(v533 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554578);
  }
  v534 = v533 - 192;
  if (!v533)
    v534 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v534 + 680) + 688) & 0x80000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v535 = v565;
    v536 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v536;
    if (v535)
    {
      if (*(_DWORD *)v535 == 2)
        WTF::StringImpl::destroy(v535, v537);
      else
        *(_DWORD *)v535 -= 2;
    }
    v14 = 1;
  }
  v538 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v538 && *(_BYTE *)(v538 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194554598);
  }
  v539 = v538 - 192;
  if (!v538)
    v539 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v539 + 680) + 688) & 0x80000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v540 = v565;
    v541 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v541;
    if (v540)
    {
      if (*(_DWORD *)v540 == 2)
        WTF::StringImpl::destroy(v540, v542);
      else
        *(_DWORD *)v540 -= 2;
    }
    v14 = 1;
  }
  v543 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v543 && *(_BYTE *)(v543 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945545B8);
  }
  v544 = v543 - 192;
  if (!v543)
    v544 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v544 + 680) + 688) & 0x80000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v545 = v565;
    v546 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v546;
    if (v545)
    {
      if (*(_DWORD *)v545 == 2)
        WTF::StringImpl::destroy(v545, v547);
      else
        *(_DWORD *)v545 -= 2;
    }
    v14 = 1;
  }
  v548 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v548 && *(_BYTE *)(v548 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945545D8);
  }
  v549 = v548 - 192;
  if (!v548)
    v549 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v549 + 680) + 704) & 0x400) != 0)
  {
    if (!v14)
      goto LABEL_931;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral();
    v550 = v565;
    v551 = *v4;
    *v4 = 1;
    LODWORD(v565) = -1;
    WORD2(v565) = 1;
    JSC::JSObject::deleteProperty();
    *v4 = v551;
    if (v550)
    {
      if (*(_DWORD *)v550 == 2)
        WTF::StringImpl::destroy(v550, v552);
      else
        *(_DWORD *)v550 -= 2;
    }
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)), a2, this);
LABEL_931:
  v553 = *(_QWORD *)(*(_QWORD *)v5 + 2712);
  v554 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 672);
  v555 = (_DWORD *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  Direct = JSC::JSObject::getDirect(v554, a2, (unint64_t)v555);
  v565 = 0;
  v566 = this;
  v567 = 0x1000000FFFFFFFFLL;
  v568 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)this, a2, v553, Direct, 4, (uint64_t)&v565);
  if (*v555 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v557);
  else
    *v555 -= 2;
  v558 = *(_QWORD *)(*(_QWORD *)v5 + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v560 = JSC::JSString::create((uint64_t)a2, &v565);
  v561 = v565;
  v565 = 0;
  if (v561)
  {
    if (*(_DWORD *)v561 == 2)
      WTF::StringImpl::destroy(v561, v559);
    else
      *(_DWORD *)v561 -= 2;
  }
  v562 = (JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE));
  v574 = *(_DWORD *)this;
  v573 = v562;
  v563 = JSC::Structure::outOfLineCapacity(v562);
  v571 = 0;
  v572 = v563;
  v565 = (WTF::StringImpl *)&v572;
  v566 = this;
  v567 = (uint64_t)a2;
  v568 = &v574;
  v569 = &v573;
  v570 = &v571;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v562, a2, v558, 6, (uint64_t)&v565);
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  result = JSC::JSObject::putDirectOffset((uint64_t)this, (uint64_t)a2, v571, v560);
  *((_DWORD *)v562 + 4) |= 0x10u;
  return result;
}

uint64_t JSC::JSObject::getDirect(uint64_t a1, JSC::VM *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int i;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  int j;
  uint64_t v26;

  if (!(a3 >> 4))
    return 0;
  v4 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v4 + 0x20)) != 0)
    return 0;
  result = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!result)
  {
    v17 = *(_QWORD *)(v4 + 64);
    if (!v17 || *(_BYTE *)(v17 + 5) != 1 && *(_DWORD *)(v17 + 80) < 2u)
      return 0;
    result = JSC::Structure::materializePropertyTable((JSC::Structure *)v4, a2);
    if (!result)
      return result;
  }
  if (!*(_DWORD *)(result + 24))
    return 0;
  v7 = *(_QWORD *)(result + 16);
  v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
  v9 = *(unsigned int *)(result + 8);
  v10 = *(_DWORD *)(a3 + 16);
  if ((v7 & 1) != 0)
  {
    if ((v10 & 0x20) != 0)
      v10 = *(_DWORD *)(a3 + 32);
    v11 = *(_DWORD *)(result + 12);
    v12 = (v10 >> 8) & *(_QWORD *)&v11;
    v13 = *(unsigned __int8 *)(v8 + v12);
    if (!*(_BYTE *)(v8 + v12))
      return 0;
    v14 = v8 + v9;
    for (i = 1; ; ++i)
    {
      v16 = *(_QWORD *)(v14 + 8 * (v13 - 1));
      if (a3 == (v16 & 0xFFFFFFFFFFFFLL))
        break;
      result = 0;
      v12 = ((_DWORD)v12 + i) & v11;
      v13 = *(unsigned __int8 *)(v8 + v12);
      if (!*(_BYTE *)(v8 + v12))
        return result;
    }
    v18 = HIBYTE(v16);
  }
  else
  {
    if ((v10 & 0x20) != 0)
      v10 = *(_DWORD *)(a3 + 32);
    v21 = *(_DWORD *)(result + 12);
    v22 = v21 & (v10 >> 8);
    v23 = *(_DWORD *)(v8 + 4 * v22);
    if (!v23)
      return 0;
    v24 = v8 + 4 * v9;
    for (j = 1; ; ++j)
    {
      v26 = (v23 - 1);
      if (*(_QWORD *)(v24 + 16 * v26) == a3)
        break;
      result = 0;
      v22 = (v22 + j) & v21;
      v23 = *(_DWORD *)(v8 + 4 * v22);
      if (!v23)
        return result;
    }
    v18 = *(unsigned int *)(v24 + 16 * v26 + 8);
  }
  if ((_DWORD)v18 == -1)
    return 0;
  if ((int)v18 > 63)
  {
    v19 = *(_QWORD *)(a1 + 8) - 8;
    v20 = 0x3F00000000 - (v18 << 32);
  }
  else
  {
    v19 = a1 + 16;
    v20 = v18 << 32;
  }
  return *(_QWORD *)(v19 + (v20 >> 29));
}

uint64_t WebCore::JSVMClientData::initNormalWorld(JSC::VM *a1, int a2)
{
  WebCore::JSVMClientData **v4;
  WebCore::JSVMClientData *v5;
  WebCore::JSVMClientData *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  WTF::StringImpl *v12;
  WebCore::DOMWrapperWorld *v13;
  JSC::TypedArrayController *v14;
  BOOL v15;
  uint64_t result;
  _DWORD *v17;
  WTF *v18;
  void *v19;
  _QWORD *v20;
  _BYTE v21[24];
  uint64_t v22;

  v4 = (WebCore::JSVMClientData **)((char *)a1 + 41456);
  v5 = (WebCore::JSVMClientData *)WTF::fastMalloc((WTF *)0x5C08);
  v6 = WebCore::JSVMClientData::JSVMClientData(v5, a1);
  *v4 = v6;
  v7 = *((_QWORD *)v6 + 2831);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x40);
  v20 = WebCore::DOMGCOutputConstraint::DOMGCOutputConstraint(v8, (uint64_t)a1, v7);
  JSC::Heap::addMarkingConstraint();
  if (v20)
    (*(void (**)(_QWORD *))(*v20 + 8))(v20);
  v9 = (uint64_t *)((char *)a1 + 93024);
  v10 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v10 = 1;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 46) = 0;
  v11 = (uint64_t *)((char *)*v4 + 8);
  v22 = v10;
  WTF::HashTable<WebCore::DOMWrapperWorld *,WebCore::DOMWrapperWorld *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::DOMWrapperWorld *>,WTF::HashTraits<WebCore::DOMWrapperWorld *>,WTF::HashTraits<WebCore::DOMWrapperWorld *>>::add(v11, &v22, (uint64_t)v21);
  v13 = (WebCore::DOMWrapperWorld *)*((_QWORD *)v5 + 2);
  *((_QWORD *)v5 + 2) = v10;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
    {
      WebCore::DOMWrapperWorld::~DOMWrapperWorld(v13, v12);
      WTF::fastFree(v18, v19);
    }
    else
    {
      --*(_DWORD *)v13;
    }
  }
  v14 = (JSC::TypedArrayController *)WTF::fastMalloc((WTF *)0x20);
  v15 = a2 == 2 || a2 == 1;
  result = JSC::TypedArrayController::TypedArrayController(v14);
  *(_QWORD *)result = off_1E3393B20;
  *(_QWORD *)(result + 16) = &off_1E3393BB8;
  *(_BYTE *)(result + 24) = v15;
  v17 = (_DWORD *)*v9;
  *v9 = result;
  if (v17)
  {
    if (v17[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  return result;
}

_QWORD *WebCore::DOMGCOutputConstraint::DOMGCOutputConstraint(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  WTF *v7;
  WTF *v8;
  WTF *v10;
  WTF *v11;

  WTF::CString::CString((WTF::CString *)&v11, "Domo");
  WTF::CString::CString((WTF::CString *)&v10, "DOM Output");
  JSC::MarkingConstraint::MarkingConstraint();
  v7 = v10;
  v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, v6);
    else
      --*(_DWORD *)v7;
  }
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::fastFree(v8, v6);
    else
      --*(_DWORD *)v8;
  }
  *a1 = off_1E3392198;
  a1[5] = a2;
  a1[6] = a3;
  a1[7] = *(_QWORD *)(a2 + 1200);
  return a1;
}

#error "1945549D0: too big function (funcsize=0)"

WebCore::JSHeapData *WebCore::JSHeapData::JSHeapData(WebCore::JSHeapData *this, JSC::Heap *a2)
{
  char *v4;
  void *v5;
  uint64_t v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  void *v35;
  WTF *v37;
  WTF *v38;
  WTF *v39;
  WTF *v40;
  WTF *v41;
  WTF *v42;
  WTF *v43;
  WTF *v44;
  WTF *v45;
  uint64_t v46;
  WTF *v47;

  *(_BYTE *)this = 0;
  v4 = (char *)this + 8;
  JSC::IsoHeapCellType::IsoHeapCellType();
  JSC::IsoHeapCellType::IsoHeapCellType();
  JSC::IsoHeapCellType::IsoHeapCellType();
  JSC::IsoHeapCellType::IsoHeapCellType();
  JSC::IsoHeapCellType::IsoHeapCellType();
  JSC::IsoHeapCellType::IsoHeapCellType();
  JSC::IsoHeapCellType::IsoHeapCellType();
  JSC::IsoHeapCellType::IsoHeapCellType();
  JSC::IsoHeapCellType::IsoHeapCellType();
  JSC::IsoHeapCellType::IsoHeapCellType();
  JSC::IsoHeapCellType::IsoHeapCellType();
  JSC::IsoHeapCellType::IsoHeapCellType();
  JSC::IsoHeapCellType::IsoHeapCellType();
  JSC::IsoHeapCellType::IsoHeapCellType();
  WTF::CString::CString((WTF::CString *)&v47, "IsoSpace JSDOMBuiltinConstructorBase");
  v46 = 0;
  MEMORY[0x19AEA3204]((char *)this + 344, &v47, a2, (char *)a2 + 1160, 56, 8, &v46);
  v6 = v46;
  v46 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = v47;
  v47 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, v5);
    else
      --*(_DWORD *)v7;
  }
  WTF::CString::CString((WTF::CString *)&v45, "IsoSpace JSDOMConstructorBase");
  v46 = 0;
  MEMORY[0x19AEA3204]((char *)this + 592, &v45, a2, (char *)a2 + 1160, 48, 8, &v46);
  v9 = v46;
  v46 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = v45;
  v45 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      WTF::fastFree(v10, v8);
    else
      --*(_DWORD *)v10;
  }
  WTF::CString::CString((WTF::CString *)&v44, "IsoSpace JSDOMObject");
  v46 = 0;
  MEMORY[0x19AEA3204]((char *)this + 840, &v44, a2, (char *)a2 + 1160, 24, 8, &v46);
  v12 = v46;
  v46 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v44;
  v44 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
      WTF::fastFree(v13, v11);
    else
      --*(_DWORD *)v13;
  }
  WTF::CString::CString((WTF::CString *)&v43, "IsoSpace JSDOMWindowProperties");
  v46 = 0;
  MEMORY[0x19AEA3204]((char *)this + 1088, &v43, a2, (char *)a2 + 1160, 24, 8, &v46);
  v15 = v46;
  v46 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v43;
  v43 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
      WTF::fastFree(v16, v14);
    else
      --*(_DWORD *)v16;
  }
  WTF::CString::CString((WTF::CString *)&v42, "IsoSpace RuntimeArray");
  v46 = 0;
  MEMORY[0x19AEA3204]((char *)this + 1336, &v42, a2, v4, 24, 8, &v46);
  v18 = v46;
  v46 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = v42;
  v42 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
      WTF::fastFree(v19, v17);
    else
      --*(_DWORD *)v19;
  }
  WTF::CString::CString((WTF::CString *)&v41, "IsoSpace JSObservableArray");
  v46 = 0;
  MEMORY[0x19AEA3204]((char *)this + 1584, &v41, a2, (char *)this + 32, 24, 8, &v46);
  v21 = v46;
  v46 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = v41;
  v41 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
      WTF::fastFree(v22, v20);
    else
      --*(_DWORD *)v22;
  }
  WTF::CString::CString((WTF::CString *)&v40, "IsoSpace RuntimeMethod");
  v46 = 0;
  MEMORY[0x19AEA3204]((char *)this + 1832, &v40, a2, (char *)a2 + 1160, 56, 8, &v46);
  v24 = v46;
  v46 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = v40;
  v40 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
      WTF::fastFree(v25, v23);
    else
      --*(_DWORD *)v25;
  }
  WTF::CString::CString((WTF::CString *)&v39, "IsoSpace JSC::Bindings::RuntimeObject");
  v46 = 0;
  MEMORY[0x19AEA3204]((char *)this + 2080, &v39, a2, (char *)this + 56, 24, 8, &v46);
  v27 = v46;
  v46 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = v39;
  v39 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::fastFree(v28, v26);
    else
      --*(_DWORD *)v28;
  }
  WTF::CString::CString((WTF::CString *)&v38, "IsoSpace JSWindowProxy");
  v46 = 0;
  MEMORY[0x19AEA3204]((char *)this + 2328, &v38, a2, (char *)this + 80, 32, 8, &v46);
  v30 = v46;
  v46 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = v38;
  v38 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 1)
      WTF::fastFree(v31, v29);
    else
      --*(_DWORD *)v31;
  }
  WTF::CString::CString((WTF::CString *)&v37, "IsoSpace JSIDBSerializationGlobalObject");
  v46 = 0;
  MEMORY[0x19AEA3204]((char *)this + 2576, &v37, a2, (char *)this + 320, 3408, 8, &v46);
  v33 = v46;
  v46 = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = v37;
  v37 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 1)
      WTF::fastFree(v34, v32);
    else
      --*(_DWORD *)v34;
  }
  v35 = (void *)WTF::fastMalloc((WTF *)0x1D68);
  bzero(v35, 0x1D68uLL);
  *((_QWORD *)this + 353) = v35;
  *((_OWORD *)this + 177) = 0u;
  return this;
}

uint64_t WebCore::HTMLBodyElement::eventNameForWindowEventHandlerAttribute(WebCore::QualifiedName const&)::$_0::operator()(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  *a1 = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E33B7390;
  v2[1] = a1;
  v4 = v2;
  WebCore::JSHTMLBodyElement::forEachWindowEventHandlerContentAttribute((WebCore *)&v4);
  result = (uint64_t)v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::scrollingNodeID(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 33) + 296);
  if (v1 && (v2 = *(_QWORD *)(v1 + 1944)) != 0 && (v3 = *(_QWORD *)(*(_QWORD *)(v2 + 144) + 256)) != 0)
    return *(_QWORD *)(v3 + 224);
  else
    return 0;
}

WebCore::Page *`non-virtual thunk to'WebCore::LocalFrameView::requestScrollToPosition(uint64_t a1, int32x2_t *a2, uint64_t a3)
{
  return WebCore::LocalFrameView::requestScrollToPosition((WebCore::ScrollView *)(a1 - 64), a2, a3);
}

WTF *`non-virtual thunk to'WebCore::XMLHttpRequest::didSendData(WebCore::XMLHttpRequest *this, uint64_t a2, uint64_t a3)
{
  return WebCore::XMLHttpRequest::didSendData((WebCore::XMLHttpRequest *)((char *)this - 32), a2, a3);
}

uint64_t `non-virtual thunk to'WebCore::LinkPreloadDefaultResourceClient::shouldMarkAsReferenced(WebCore::LinkPreloadDefaultResourceClient *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::LinkPreloadRawResourceClient::shouldMarkAsReferenced(WebCore::LinkPreloadRawResourceClient *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::DocumentThreadableLoader::dataSent(WebCore::DocumentThreadableLoader *this, WebCore::CachedResource *a2, uint64_t a3, uint64_t a4)
{
  return (***((uint64_t (****)(_QWORD, uint64_t, uint64_t))this + 3))(*((_QWORD *)this + 3), a3, a4);
}

uint64_t `non-virtual thunk to'WebCore::HTMLTextAreaElement::supportsReadOnly(WebCore::HTMLTextAreaElement *this)
{
  return 1;
}

BOOL `non-virtual thunk to'WebCore::HTMLInputElement::shouldAutocomplete(WebCore::HTMLInputElement *this)
{
  uint64_t v1;
  WebCore::HTMLFormElement *v3;

  if (*((_WORD *)this + 59) >> 6)
    return *((_WORD *)this + 59) >> 6 == 1;
  v1 = *((_QWORD *)this + 1);
  return !v1 || (v3 = *(WebCore::HTMLFormElement **)(v1 + 8)) == 0 || WebCore::HTMLFormElement::shouldAutocomplete(v3);
}

uint64_t `non-virtual thunk to'WebCore::HTMLInputElement::supportsReadOnly(WebCore::HTMLInputElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 728))(*((_QWORD *)this + 16));
}

uint64_t std::optional<WTF::String>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WebCore::RenderBox::absoluteQuads(int *a1, _DWORD *a2, uint64_t a3)
{
  int32x2_t *v4;
  float32x2_t v5;
  uint64_t result;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v14;
  __int32 v15;
  int v16;
  float32x2_t v17;
  int v18;
  __int32 v19;
  _OWORD v20[2];

  v4 = (int32x2_t *)a1;
  if ((*((_BYTE *)a1 + 23) & 0x10) == 0
    || (v11 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 648))(), v4 = (int32x2_t *)a1, !v11)
    || (result = WebCore::RenderFragmentedFlow::absoluteQuadsForBox(v11, a2, a3, a1),
        v4 = (int32x2_t *)a1,
        (result & 1) == 0))
  {
    v14 = 0;
    v16 = 0;
    v5 = vadd_f32(vmul_f32(vcvt_f32_s32(v4[20]), (float32x2_t)vdup_n_s32(0x3C800000u)), 0);
    v15 = v5.i32[0];
    v17 = v5;
    v18 = 0;
    v19 = v5.i32[1];
    result = (uint64_t)WebCore::RenderObject::localToContainerQuad((uint64_t)v4, (float *)&v14, 0, 2u, v20);
    v7 = a2[3];
    if ((_DWORD)v7 == a2[2])
    {
      result = WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v7 + 1, (unint64_t)v20);
      v8 = (_OWORD *)(*(_QWORD *)a2 + 32 * a2[3]);
      v9 = *(_OWORD *)result;
      v10 = *(_OWORD *)(result + 16);
    }
    else
    {
      v8 = (_OWORD *)(*(_QWORD *)a2 + 32 * v7);
      v9 = v20[0];
      v10 = v20[1];
    }
    *v8 = v9;
    v8[1] = v10;
    ++a2[3];
  }
  return result;
}

uint64_t WebCore::RenderBox::offsetHeight(WebCore::RenderBox *this)
{
  return *((unsigned int *)this + 41);
}

void WebCore::InputType::sanitizeValue(const WTF::String *a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v3;

  v3 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    *v3 += 2;
  *a2 = v3;
}

BOOL WebCore::InputType::rangeOverflow(WebCore::InputType *this, const WTF::String *a2)
{
  _BOOL8 result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _BYTE v8[24];
  __int128 v9;
  uint64_t v10;
  char v11;
  __int128 v12;

  if ((*((_DWORD *)this + 3) & 0x142618) == 0)
    return 0;
  *(_QWORD *)v8 = 0;
  *(_WORD *)&v8[8] = 0;
  *(_QWORD *)&v8[12] = 2;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)this + 856))(&v12);
  result = 0;
  if ((HIDWORD(v12) & 0xFFFFFFFD) != 0)
  {
    (*(void (**)(_BYTE *__return_ptr, WebCore::InputType *, _QWORD))(*(_QWORD *)this + 208))(v8, this, 0);
    if (v11 && (v6 = *(_OWORD *)v8, v7 = *(_QWORD *)&v8[16], v4 = v9, v5 = v10, WebCore::Decimal::operator<(&v6, &v4)))
    {
      v6 = *(_OWORD *)v8;
      v7 = *(_QWORD *)&v8[16];
      result = WebCore::Decimal::operator>(&v12, &v6);
      if ((_DWORD)result)
      {
        v4 = v9;
        v5 = v10;
        return WebCore::Decimal::operator<(&v12, &v4);
      }
    }
    else
    {
      v6 = *(_OWORD *)v8;
      v7 = *(_QWORD *)&v8[16];
      return WebCore::Decimal::operator>(&v12, &v6);
    }
  }
  return result;
}

void WebCore::InputType::fallbackValue(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *WebCore::InputType::visibleValue@<X0>(WebCore::InputType *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  _DWORD *result;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 3);
  if (v3)
    v4 = *(_QWORD **)(v3 + 8);
  else
    v4 = 0;
  result = (_DWORD *)v4[30];
  if (result[3] == 64)
    return (_DWORD *)WebCore::FileInputType::firstElementPathForInputValue((uint64_t)result, a2);
  v6 = (_DWORD *)v4[27];
  if (v6)
  {
    *v6 += 2;
    *a2 = v6;
  }
  else
  {
    v7 = v4[13];
    if (v7
      && ((v8 = *(_DWORD *)(v7 + 4), (v8 & 1) != 0)
        ? (v9 = *(_QWORD *)(v7 + 40), LODWORD(v10) = *(_DWORD *)(v7 + 52))
        : (v9 = v7 + 32, LODWORD(v10) = v8 >> 5),
          (_DWORD)v10))
    {
      v10 = v10;
      v11 = (_QWORD *)(v9 + 8);
      while (1)
      {
        v12 = *(v11 - 1);
        if (v12 == WebCore::HTMLNames::valueAttr
          || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
          && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
        {
          break;
        }
        v11 += 2;
        if (!--v10)
        {
          v11 = (_QWORD *)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    }
    if (!*v11)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 64))(result);
    result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 296))(result);
    if (!*a2)
    {
      *a2 = 0;
      result = (_DWORD *)v4[30];
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 64))(result);
    }
  }
  return result;
}

uint64_t WebCore::FrameTree::descendantCount(WebCore::FrameTree *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  LODWORD(v2) = 0;
  do
  {
    v2 = v2 + WebCore::FrameTree::descendantCount((WebCore::FrameTree *)(v1 + 48)) + 1;
    v1 = *(_QWORD *)(v1 + 72);
  }
  while (v1);
  return v2;
}

BOOL WebCore::FrameTree::isDescendantOf(WebCore::FrameTree *this, const WebCore::Frame *a2)
{
  const WebCore::Frame *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v7;

  if (a2)
  {
    v2 = *(const WebCore::Frame **)(*(_QWORD *)this + 8);
    v3 = *((_QWORD *)v2 + 3);
    if (v3)
      v3 = *(_QWORD *)(v3 + 8);
    v4 = *((_QWORD *)a2 + 3);
    if (v4)
      v4 = *(_QWORD *)(v4 + 8);
    if (v3 == v4)
    {
      if (v2 == a2)
        return 1;
      while (1)
      {
        v7 = *((_QWORD *)v2 + 7);
        if (!v7)
          break;
        v2 = *(const WebCore::Frame **)(v7 + 8);
        result = v2 != 0;
        if (v2 == a2 || v2 == 0)
          return result;
      }
    }
  }
  return 0;
}

uint64_t WebCore::DOMWindow::eventTargetInterface(WebCore::DOMWindow *this)
{
  return 54;
}

uint64_t WebCore::Document::nodeName(WebCore::Document *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

BOOL WebCore::IntRect::contains(WebCore::IntRect *this, const WebCore::IntRect *a2)
{
  int v2;
  int v3;

  if (*(_DWORD *)this > *(_DWORD *)a2)
    return 0;
  if (*((_DWORD *)this + 2) + *(_DWORD *)this < *((_DWORD *)a2 + 2) + *(_DWORD *)a2)
    return 0;
  v2 = *((_DWORD *)this + 1);
  v3 = *((_DWORD *)a2 + 1);
  return v2 <= v3 && *((_DWORD *)this + 3) + v2 >= *((_DWORD *)a2 + 3) + v3;
}

uint64_t WebCore::Element::getAttributeForBindings@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, WTF::String *a4@<X3>, WTF::StringImpl **a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v7;
  WebCore::Element *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  char v22;
  WTF::StringImpl *v23;

  v7 = *(_QWORD *)(result + 104);
  if (!v7)
    goto LABEL_13;
  v10 = (WebCore::Element *)result;
  if (*(_QWORD *)a2 == WebCore::HTMLNames::styleAttr && (*(_BYTE *)(v7 + 4) & 8) != 0)
  {
    result = (uint64_t)WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)result, a2, a6, a3, a4);
  }
  else if ((*(_WORD *)(result + 28) & 0x20) != 0)
  {
    result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, unsigned __int8 *))(**(_QWORD **)(result + 160) + 48))(&v21, *(_QWORD *)(result + 160), a2);
    if (v22)
    {
      WTF::AtomString::AtomString((WTF::AtomString *)&v23, &v21);
      WebCore::Element::setSynchronizedLazyAttribute(v10, (const WebCore::QualifiedName *)a2, (const WTF::AtomString *)&v23);
      result = (uint64_t)v23;
      v23 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v20);
        else
          *(_DWORD *)result -= 2;
      }
      if (v22)
      {
        result = (uint64_t)v21;
        v21 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v20);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  v11 = *((_QWORD *)v10 + 13);
  v12 = *(_DWORD *)(v11 + 4);
  if (v11 && (v12 & 1) != 0)
  {
    v13 = *(uint64_t **)(v11 + 40);
    LODWORD(v14) = *(_DWORD *)(v11 + 52);
  }
  else
  {
    v13 = (uint64_t *)(v11 + 32);
    LODWORD(v14) = v12 >> 5;
  }
  if (!(_DWORD)v14)
  {
LABEL_13:
    v17 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (!*MEMORY[0x1E0CBF2F8])
    {
LABEL_15:
      *a5 = v17;
      return result;
    }
LABEL_14:
    *(_DWORD *)v17 += 2;
    goto LABEL_15;
  }
  v15 = *(_QWORD *)a2;
  v14 = v14;
  while (1)
  {
    v16 = *v13;
    if (*v13 == v15 || *(_QWORD *)(v16 + 24) == *(_QWORD *)(v15 + 24) && *(_QWORD *)(v16 + 32) == *(_QWORD *)(v15 + 32))
      break;
    v13 += 2;
    if (!--v14)
      goto LABEL_13;
  }
  result = (*(uint64_t (**)(WebCore::Element *, uint64_t *))(*(_QWORD *)v10 + 608))(v10, v13);
  if ((result & 1) == 0 || (a3 - 1) > 2)
  {
    v17 = (WTF::StringImpl *)v13[1];
    if (!v17)
      goto LABEL_15;
    goto LABEL_14;
  }
  v21 = 0;
  WTF::URL::invalidate((WTF::URL *)&v21);
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Element *, WTF::StringImpl **, uint64_t *, uint64_t))(*(_QWORD *)v10 + 616))(&v23, v10, &v21, v13, a3);
  WTF::AtomString::AtomString(a5, &v23);
  v19 = v23;
  v23 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = (uint64_t)v21;
  v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WebCore::Element::attributes(WebCore::Element *this)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned int *v5;
  void *v6;
  unsigned int v7;
  bmalloc::api *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  bmalloc::api *v12;
  unsigned int *v13;
  uint64_t v14;
  WTF *v15;

  v2 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (!v2)
  {
    WebCore::Node::materializeRareData(this);
    v2 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  }
  v3 = *(_QWORD **)(v2 + 120);
  if (!v3)
  {
    v3 = (_QWORD *)bmalloc::api::isoAllocate();
    *v3 = 0;
    v5 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    do
      v7 = __ldaxr(v5);
    while (__stlxr(v7 + 1, v5));
    v3[1] = v5;
    v8 = *(bmalloc::api **)(v2 + 120);
    *(_QWORD *)(v2 + 120) = v3;
    if (v8)
    {
      v9 = (unsigned int *)*((_QWORD *)v8 + 1);
      *((_QWORD *)v8 + 1) = 0;
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          v12 = v8;
          atomic_store(1u, v9);
          v13 = v9;
          v14 = v9[7];
          if ((_DWORD)v14)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v13 + 2), (WTF::StringImpl *)(*((_QWORD *)v13 + 2) + 32 * v14));
          v15 = (WTF *)*((_QWORD *)v13 + 2);
          if (v15)
          {
            *((_QWORD *)v13 + 2) = 0;
            v13[6] = 0;
            WTF::fastFree(v15, v6);
          }
          WTF::fastFree((WTF *)v13, v6);
          v8 = v12;
        }
      }
      if (*(_QWORD *)v8)
      {
        *(_QWORD *)(*(_QWORD *)v8 + 8) = 3;
        *(_QWORD *)v8 = 0;
      }
      bmalloc::api::isoDeallocate(v8, v6);
      return *(_QWORD **)(v2 + 120);
    }
  }
  return v3;
}

WTF::StringImpl *WebCore::Quirks::triggerOptionalStorageAccessIframeQuirk(uint64_t a1, const WTF::URL *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *result;
  int v14;
  uint64_t v15;
  BOOL v16;
  WebCore::Document *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  WTF::StringImpl *v23;

  if (!*(_QWORD *)a1 || (v4 = *(_QWORD *)(*(_QWORD *)a1 + 8)) == 0)
  {
LABEL_16:
    v15 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  *(_DWORD *)(v4 + 24) += 2;
  v7 = *(_QWORD *)(v4 + 528);
  if (v7
    && (v8 = *(_QWORD *)(v7 + 8)) != 0
    && (v9 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8), v9 != v8)
    && (v9 ? (v16 = *(_BYTE *)(v9 + 144) == 0) : (v16 = 0), v16 && (v17 = *(WebCore::Document **)(v9 + 296)) != 0))
  {
    v18 = *((_QWORD *)v17 + 86);
    if (!v18)
      v18 = WebCore::Document::ensureQuirks(v17);
    result = (WTF::StringImpl *)WebCore::Quirks::triggerOptionalStorageAccessIframeQuirk(v18, a2, a3);
  }
  else
  {
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v23, a2);
    if (*(_DWORD *)(a1 + 92))
    {
      v19 = 0;
      do
      {
        v12 = WTF::equal(*(WTF **)(*(_QWORD *)(a1 + 80) + 8 * v19), v23, v11);
        if ((v12 & 1) != 0)
          break;
        ++v19;
      }
      while (v19 < *(unsigned int *)(a1 + 92));
    }
    else
    {
      v12 = 0;
    }
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
    if (!v12)
    {
      v14 = 1;
      goto LABEL_13;
    }
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v23, a2);
    v20 = *a3;
    *a3 = 0;
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v21 = &off_1E3401E50;
    v21[1] = v20;
    v22 = v21;
    WebCore::DocumentStorageAccess::requestStorageAccessForNonDocumentQuirk((WebCore::DocumentStorageAccess *)v4, (WebCore::Document *)&v23, (uint64_t *)&v22);
    if (v22)
      (*(void (**)(_QWORD *))(*v22 + 8))(v22);
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  v14 = 0;
LABEL_13:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v4, v10);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  if (v14)
    goto LABEL_16;
  return result;
}

uint64_t WebCore::Quirks::shouldEnableLegacyGetUserMediaQuirk(WebCore::Quirks *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  __int16 i;
  WebCore::Image *v11;
  char v12;
  char *v13;

  if (!*(_QWORD *)this)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v2)
    return 0;
  v4 = *(_QWORD *)(v2 + 680);
  if (!*(_BYTE *)(v4 + 243))
  {
    if ((*(_QWORD *)(v4 + 688) & 0x80000) != 0)
      goto LABEL_5;
    return 0;
  }
  if (!*(_BYTE *)(v4 + 242))
    return 0;
LABEL_5:
  if (!*((_BYTE *)this + 40))
  {
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v2 + 192), a2);
    v6 = *(unsigned int *)(v5 + 32);
    if ((_DWORD)v6 == -1)
    {
      v11 = (WebCore::Image *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::Image::sourceURL(v11);
    }
    v13 = &v12;
    v7 = *(WTF::StringImpl **)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0[v6])(&v13, v5 + 8);
    if (v7)
      *(_DWORD *)v7 += 2;
    if ((MEMORY[0x19AEA53F4](v7, "www.baidu.com", 13) & 1) != 0)
      goto LABEL_18;
    for (i = MEMORY[0x19AEA53F4](v7, "www.warbyparker.com", 19); ; i = 1)
    {
      *(_WORD *)((char *)this + 39) = i | 0x100;
      if (!v7)
        break;
      if (*(_DWORD *)v7 != 2)
      {
        *(_DWORD *)v7 -= 2;
        return *((_BYTE *)this + 39) != 0;
      }
      WTF::StringImpl::destroy(v7, v8);
      if (*((_BYTE *)this + 40))
        return *((_BYTE *)this + 39) != 0;
      std::__throw_bad_optional_access[abi:sn180100]();
LABEL_18:
      ;
    }
  }
  return *((_BYTE *)this + 39) != 0;
}

uint64_t WebCore::Image::sourceURL@<X0>(WebCore::Image *this@<X0>, WTF::URL *a2@<X8>)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t result;
  int v5;
  int v6;

  v2 = *((_QWORD *)this + 4);
  if (v2 && (v3 = *(_DWORD **)(v2 + 8)) != 0)
  {
    v3[2] += 2;
    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    v5 = v3[2] - 1;
    if (v3[2] == 1)
    {
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      v5 = v3[2];
    }
    else
    {
      v3[2] = v5;
    }
    v6 = v5 - 1;
    if (v6)
      v3[2] = v6;
    else
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    return WTF::URL::invalidate(a2);
  }
  return result;
}

BOOL WebCore::JSIntersectionObserverCallback::hasCallback(WebCore::JSIntersectionObserverCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

uint64_t WebCore::ImageBufferIOSurfaceBackend::volatilityState(WebCore::ImageBufferIOSurfaceBackend *this)
{
  return *((unsigned __int8 *)this + 69);
}

uint64_t WebCore::DecodedDataDocumentParser::wellFormed(WebCore::DecodedDataDocumentParser *this)
{
  return 1;
}

uint64_t WebCore::RotateTransformOperation::operator==(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  BOOL v5;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 12);
  if (v2 != *(unsigned __int8 *)(a2 + 12))
    return 0;
  v3 = v2 >= 0x12;
  v5 = v2 == 18;
  v4 = (1 << v2) & 0x601C0;
  v5 = !v5 && v3 || v4 == 0;
  if (!v5)
  {
    if (*(double *)(a1 + 40) == *(double *)(a2 + 40)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(double *)(a1 + 24) == *(double *)(a2 + 24))
    {
      return *(double *)(a1 + 32) == *(double *)(a2 + 32);
    }
    return 0;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::HTMLFormControlElement::isFormControlElement(WebCore::HTMLFormControlElement *this)
{
  return 1;
}

void WebCore::NetworkStorageSession::setHTTPCookiesForURL(uint64_t a1, uint64_t a2, void *a3, void *a4, _BYTE *a5)
{
  int v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  const void *v16;
  const void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const __CFString *v25;
  const __CFString *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v10 = objc_msgSend(MEMORY[0x1E0C92C08], "instancesRespondToSelector:", sel__setCookies_forURL_mainDocumentURL_policyProperties_);
  v11 = v10;
  if (a1)
  {
    if (v10)
    {
      v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C92C08]), "_initWithCFHTTPCookieStorage:", a1);
      if (_MergedGlobals_136 == 1)
      {
        v13 = qword_1ECE81EE0;
      }
      else
      {
        v13 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initWithString:", &stru_1E3487BC0);
        qword_1ECE81EE0 = v13;
        _MergedGlobals_136 = 1;
      }
      if (*a5)
        v14 = (uint64_t)a3;
      else
        v14 = v13;
      v26 = CFSTR("_kCFHTTPCookiePolicyPropertyIsTopLevelNavigation");
      v27 = v14;
      v25 = CFSTR("_kCFHTTPCookiePolicyPropertySiteForCookies");
      v28 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a5[1]);
      v15 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v27, &v25, 2);
      v16 = v15;
      if (v15)
        CFRetain(v15);
      objc_msgSend(v12, "_setCookies:forURL:mainDocumentURL:policyProperties:", a2, a3, a4, v16);
      if (v16)
        CFRelease(v16);
      if (v12)
      {
        v17 = v12;
LABEL_24:
        CFRelease(v17);
      }
    }
    else
    {
      v24 = (const void *)objc_msgSend(MEMORY[0x1E0C92C00], "_ns2cfCookies:", a2);
      objc_msgSend(a3, "_cfurl");
      objc_msgSend(a4, "_cfurl");
      CFHTTPCookieStorageSetCookies();
      if (v24)
        CFRelease(v24);
    }
  }
  else
  {
    v18 = (void *)objc_msgSend(MEMORY[0x1E0C92C08], "sharedHTTPCookieStorage");
    v19 = v18;
    if (!v11)
    {
      objc_msgSend(v18, "setCookies:forURL:mainDocumentURL:", a2, a3, a4);
      return;
    }
    if (_MergedGlobals_136 == 1)
    {
      v20 = qword_1ECE81EE0;
    }
    else
    {
      v20 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initWithString:", &stru_1E3487BC0);
      qword_1ECE81EE0 = v20;
      _MergedGlobals_136 = 1;
    }
    if (*a5)
      v21 = (uint64_t)a3;
    else
      v21 = v20;
    v26 = CFSTR("_kCFHTTPCookiePolicyPropertyIsTopLevelNavigation");
    v27 = v21;
    v25 = CFSTR("_kCFHTTPCookiePolicyPropertySiteForCookies");
    v28 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a5[1]);
    v22 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v27, &v25, 2);
    v23 = v22;
    if (v22)
      CFRetain(v22);
    objc_msgSend(v19, "_setCookies:forURL:mainDocumentURL:policyProperties:", a2, a3, a4, v23);
    if (v23)
    {
      v17 = v23;
      goto LABEL_24;
    }
  }
}

void sub_1945727E4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::TransformationMatrix::mapRect(float64x2_t *this, const WebCore::FloatRect *a2)
{
  double v2;
  float v3;
  float v4;
  float v5;
  float v6;
  int v8;
  int v9;
  int v10;
  int v11;
  float v12;
  float v13;
  _DWORD v14[8];

  if (this[1].f64[0] != 0.0
    || this[1].f64[1] != 0.0
    || this[3].f64[0] != 0.0
    || this[3].f64[1] != 0.0
    || this[5].f64[1] != 0.0
    || this[4].f64[0] != 0.0
    || this[4].f64[1] != 0.0
    || this[5].f64[0] != 1.0
    || this[7].f64[1] != 1.0
    || ((v2 = this->f64[1], v2 != 0.0) || this[2].f64[0] != 0.0 || this->f64[0] != 1.0 || this[2].f64[1] != 1.0)
    && this[7].f64[0] != 0.0)
  {
    v4 = *((float *)a2 + 1);
    v5 = *(float *)a2 + *((float *)a2 + 2);
    v6 = v4 + *((float *)a2 + 3);
    v12 = *(float *)a2;
    v3 = v12;
    v13 = v4;
    v14[0] = WebCore::TransformationMatrix::internalMapPoint(this, (const WebCore::FloatPoint *)&v12).u32[0];
    v14[1] = v8;
    v12 = v5;
    v13 = v4;
    v14[2] = WebCore::TransformationMatrix::internalMapPoint(this, (const WebCore::FloatPoint *)&v12).u32[0];
    v14[3] = v9;
    v12 = v5;
    v13 = v6;
    v14[4] = WebCore::TransformationMatrix::internalMapPoint(this, (const WebCore::FloatPoint *)&v12).u32[0];
    v14[5] = v10;
    v12 = v3;
    v13 = v6;
    v14[6] = WebCore::TransformationMatrix::internalMapPoint(this, (const WebCore::FloatPoint *)&v12).u32[0];
    v14[7] = v11;
    WebCore::FloatQuad::boundingBox((WebCore::FloatQuad *)v14);
  }
}

uint64_t WebCore::HTMLFrameElementBase::canLoadURL(WebCore::HTMLFrameElementBase *this, const WTF::URL *a2)
{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::ScriptController *v14;
  void *v15;
  unsigned int v16;

  if (!WTF::URL::protocolIsJavaScript(a2))
    goto LABEL_2;
  v10 = *((_QWORD *)this + 14);
  if (!v10)
    goto LABEL_2;
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    goto LABEL_2;
  if (*(_BYTE *)(v11 + 144))
    goto LABEL_2;
  v12 = *(_QWORD *)(v11 + 296);
  if (!v12)
    goto LABEL_2;
  *(_DWORD *)(v12 + 24) += 2;
  v13 = *(_QWORD *)(v12 + 528);
  v14 = v13 ? *(WebCore::ScriptController **)(v13 + 8) : 0;
  result = WebCore::ScriptController::canAccessFromCurrentOrigin(v14, *(WebCore::LocalFrame **)(*((_QWORD *)this + 5) + 8), v3);
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
    {
      v16 = result;
      WebCore::Node::removedLastRef((WebCore::Node *)v12, v15);
      result = v16;
    }
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  if ((_DWORD)result)
  {
LABEL_2:
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (!v4)
      return 1;
    v5 = *(_QWORD *)(v4 + 8);
    if (!v5)
      return 1;
    v7 = 0;
    do
    {
      if (!*(_BYTE *)(v5 + 144))
      {
        v8 = WTF::equalIgnoringFragmentIdentifier();
        if ((v8 & v7 & 1) != 0)
          return 0;
        v7 |= v8;
      }
      v9 = *(_QWORD *)(v5 + 56);
      if (!v9)
        return 1;
      v5 = *(_QWORD *)(v9 + 8);
      result = 1;
    }
    while (v5);
  }
  return result;
}

uint64_t WebCore::StyleGeneratedImage::hasClient(WebCore::StyleGeneratedImage *this, WebCore::RenderElement *a2)
{
  return WTF::WeakHashCountedSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>::contains((uint64_t *)this + 5, *((_QWORD *)a2 + 1));
}

WebCore::ResourceRequest *WebCore::ResourceRequestBase::updateResourceRequest(WebCore::ResourceRequest *this, int a2)
{
  WebCore::ResourceRequest *v3;
  char v4;

  v3 = this;
  v4 = *((_BYTE *)this + 184);
  if ((v4 & 1) == 0)
  {
    this = (WebCore::ResourceRequest *)WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v4 = *((_BYTE *)v3 + 184) | 1;
    *((_BYTE *)v3 + 184) = v4;
  }
  if ((v4 & 4) == 0 && a2 == 1)
  {
    this = (WebCore::ResourceRequest *)WebCore::ResourceRequest::doUpdateResourceHTTPBody(v3);
    *((_BYTE *)v3 + 184) |= 4u;
  }
  return this;
}

void WebCore::KeyframeEffectStack::applyPendingAcceleratedActions(WebCore::KeyframeEffectStack *this)
{
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::KeyframeEffect *v9;
  WTF::StringImpl *v10;
  WebCore::KeyframeEffect *v11;
  WebCore::KeyframeEffect *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;

  v2 = WTF::Vector<WTF::WeakPtr<WebCore::KeyframeEffect,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::containsIf<WebCore::KeyframeEffectStack::applyPendingAcceleratedActions(void)::$_0>((uint64_t *)this);
  v3 = *((unsigned int *)this + 3);
  if (!(_DWORD)v3)
    return;
  v4 = v2;
  v5 = 0;
  v6 = *(_QWORD *)this;
  v7 = 8 * v3;
  do
  {
    v8 = *(_QWORD *)v6;
    if (v4)
    {
      if (v8)
        v9 = *(WebCore::KeyframeEffect **)(v8 + 8);
      else
        v9 = 0;
      WebCore::KeyframeEffect::applyPendingAcceleratedActionsOrUpdateTimingProperties(v9);
    }
    else
    {
      if (v8)
        v12 = *(WebCore::KeyframeEffect **)(v8 + 8);
      else
        v12 = 0;
      WebCore::KeyframeEffect::applyPendingAcceleratedActions(v12);
    }
    if (!v5)
    {
      if (*(_QWORD *)v6)
      {
        v11 = *(WebCore::KeyframeEffect **)(*(_QWORD *)v6 + 8);
        if (*((_BYTE *)v11 + 310) != 2)
          goto LABEL_10;
      }
      else if (MEMORY[0x136] != 2)
      {
        v11 = 0;
LABEL_10:
        v5 = WebCore::KeyframeEffect::preventsAcceleration(v11, v10);
        goto LABEL_11;
      }
    }
    v5 = 1;
LABEL_11:
    v6 += 8;
    v7 -= 8;
  }
  while (v7);
  if (v5)
  {
    v13 = *((unsigned int *)this + 3);
    if ((_DWORD)v13)
    {
      v14 = *(_QWORD *)this;
      v15 = 8 * v13;
      do
      {
        if (*(_QWORD *)v14)
          v16 = *(unsigned int **)(*(_QWORD *)v14 + 8);
        else
          v16 = 0;
        WebCore::KeyframeEffect::effectStackNoLongerAllowsAccelerationDuringAcceleratedActionApplication(v16);
        v14 += 8;
        v15 -= 8;
      }
      while (v15);
    }
  }
}

uint64_t WebCore::KeyframeEffectStack::allowsAcceleration(uint64_t **this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  WebCore::KeyframeEffect *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  int v29;
  void *v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33[3];

  v32 = 0;
  v2 = *((unsigned int *)this + 3);
  if ((_DWORD)v2)
  {
    v3 = *this;
    v4 = &(*this)[v2];
    v5 = (uint64_t)&v31;
LABEL_3:
    if (*v3)
    {
      v6 = *(WebCore::KeyframeEffect **)(*v3 + 8);
      goto LABEL_5;
    }
    while (1)
    {
      v6 = 0;
LABEL_5:
      if (WebCore::KeyframeEffect::preventsAcceleration(v6, a2))
      {
LABEL_64:
        v21 = 0;
        goto LABEL_46;
      }
      v7 = *v3;
      if (*v3)
        v7 = *(_QWORD *)(v7 + 8);
      v8 = (uint64_t *)(v7 + 216);
      if (v32 && *((_DWORD *)v32 - 3))
      {
        WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::intersectionWith<WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>>(v33, &v32, v8);
        if (!v33[0] || !*(_DWORD *)(v33[0] - 12))
          goto LABEL_59;
        v27 = *v3;
        if (*v3)
          v27 = *(_QWORD *)(v27 + 8);
        WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::intersectionWith<WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>>(&v31, (unsigned __int16 **)(v27 + 224), v33);
        if (!v31)
        {
          WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::~HashSet(&v31, v28);
LABEL_59:
          WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::~HashSet(v33, v26);
          goto LABEL_10;
        }
        v29 = *(_DWORD *)(v31 - 12);
        WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::~HashSet(&v31, v28);
        WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::~HashSet(v33, v30);
        if (v29)
          goto LABEL_64;
      }
LABEL_10:
      v9 = *v8;
      if (*v8)
      {
        v10 = *(unsigned int *)(v9 - 4);
        v11 = v9 + 16 * v10;
        if (*(_DWORD *)(v9 - 12))
        {
          if ((_DWORD)v10)
          {
            v12 = 16 * v10;
            while (1)
            {
              v13 = *(unsigned int *)(v9 + 8);
              if ((_DWORD)v13 || *(_WORD *)v9 != 0)
              {
                if ((_DWORD)v13 == -1)
                  goto LABEL_66;
                v33[0] = v5;
                if (!((unsigned int (*)(uint64_t *, uint64_t))off_1E3391998[v13])(v33, v9))
                  break;
              }
              v9 += 16;
              v12 -= 16;
              if (!v12)
              {
                v9 = v11;
                break;
              }
            }
            v15 = v9;
            v9 = *v8;
          }
          else
          {
            v15 = *v8;
          }
          goto LABEL_24;
        }
        v15 = v9 + 16 * v10;
      }
      else
      {
        v15 = 0;
        v10 = 0;
      }
      v11 = v9 + 16 * v10;
LABEL_24:
      if (v9)
        v16 = v9 + 16 * *(unsigned int *)(v9 - 4);
      else
        v16 = 0;
      while (v15 != v16)
      {
        WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::add((uint64_t *)&v32, v15, (uint64_t)v33);
        v17 = v15 + 16;
        v15 = v11;
        if (v17 != v11)
        {
          v15 = v17;
          while (1)
          {
            v18 = *(unsigned int *)(v15 + 8);
            if ((_DWORD)v18 || *(_WORD *)v15 != 0)
            {
              if ((_DWORD)v18 == -1)
                goto LABEL_66;
              v33[0] = v5;
              if (!((unsigned int (*)(uint64_t *, uint64_t))off_1E3391998[v18])(v33, v15))
                break;
            }
            v15 += 16;
            if (v15 == v11)
            {
              v15 = v11;
              break;
            }
          }
        }
      }
      if (++v3 != v4)
        goto LABEL_3;
      v21 = 1;
LABEL_46:
      v22 = v32;
      if (!v32)
        return v21;
      v3 = (uint64_t *)*((unsigned int *)v32 - 1);
      if (!(_DWORD)v3)
      {
LABEL_55:
        WTF::fastFree((WTF *)(v22 - 8), a2);
        return v21;
      }
      v4 = &v31;
      v5 = 0xFFFFFFFFLL;
      v23 = v32;
      while (1)
      {
        v24 = *((unsigned int *)v23 + 2);
        if ((_DWORD)v24 == -1)
          break;
        v33[0] = (uint64_t)&v31;
        if ((((uint64_t (*)(uint64_t *, unsigned __int16 *))off_1E3391998[v24])(v33, v23) & 1) == 0)
        {
          v25 = *((unsigned int *)v23 + 2);
          if ((_DWORD)v25 != -1)
            ((void (*)(uint64_t *, unsigned __int16 *))off_1E33919E8[v25])(v33, v23);
          *((_DWORD *)v23 + 2) = -1;
        }
        v23 += 8;
        v3 = (uint64_t *)((char *)v3 - 1);
        if (!v3)
          goto LABEL_55;
      }
LABEL_66:
      std::__throw_bad_variant_access[abi:sn180100]();
    }
  }
  return 1;
}

uint64_t WebCore::TextFieldInputType::supportsReadOnly(WebCore::TextFieldInputType *this)
{
  return 1;
}

uint64_t WebCore::TextFieldInputType::innerTextElement@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 136);
  if (v2)
    *(_DWORD *)(v2 + 24) += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::StyleGradientImage::isPending(WebCore::StyleGradientImage *this)
{
  return 0;
}

uint64_t WebCore::SecurityOriginData::securityOrigin@<X0>(WebCore::SecurityOriginData *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t result;
  char v7;
  _QWORD v8[3];
  int v9;
  _QWORD v10[3];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned int *)this + 6);
  if ((_DWORD)v3 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v8[0] = &v7;
  ((void (*)(_QWORD *__return_ptr, _QWORD *, WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyERKSJ_EUlRT_E_EEJRKNS0_6__implIJSB_SI_EEEEEEDcOSN_DpOT0____fmatrix[v3])(v10, v8, this);
  LOBYTE(v8[0]) = 0;
  v9 = -1;
  v4 = v11;
  if (v11 != -1)
  {
    ((void (*)(char *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v11])(&v7, v8, v10);
    v9 = v4;
    if (v11 != -1)
      ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v11])(&v7, v10);
  }
  v5 = WTF::fastMalloc((WTF *)0x40);
  result = WebCore::SecurityOrigin::SecurityOrigin(v5, (uint64_t)v8);
  *a2 = result;
  if (v9 != -1)
    return ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v9])(v10, v8);
  return result;
}

uint64_t WebCore::RenderTableSection::canHaveChildren(WebCore::RenderTableSection *this)
{
  return 1;
}

BOOL WebCore::MessagePortChannel::hasAnyMessagesPendingOrInFlight(WebCore::MessagePortChannel *this)
{
  return *((_QWORD *)this + 21) || *((_DWORD *)this + 29) || *((_DWORD *)this + 33) != 0;
}

BOOL WebCore::JSMutationCallback::hasCallback(WebCore::JSMutationCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

uint64_t *WebCore::LayoutIntegration::InlineContent::nonRootInlineBoxIndexesForLayoutBox(WebCore::LayoutIntegration::InlineContent *this, const WebCore::Layout::Box *a2)
{
  uint64_t *v3;
  uint64_t **v4;
  int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int j;
  const WebCore::Layout::Box **v13;
  const WebCore::Layout::Box *v14;
  const WebCore::Layout::Box **v16;
  uint64_t *result;
  _QWORD *v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int i;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;

  v4 = (uint64_t **)((char *)this + 72);
  v3 = (uint64_t *)*((_QWORD *)this + 9);
  if (v3)
    goto LABEL_2;
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v19 = 0;
  v60 = 0;
  std::unique_ptr<WTF::HashMap<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>::reset[abi:sn180100]((uint64_t)v4, v19);
  std::unique_ptr<WTF::HashMap<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>::reset[abi:sn180100]((uint64_t)&v60, 0);
  v60 = 0;
  if (!*((_DWORD *)this + 15))
    goto LABEL_53;
  v21 = 0;
  do
  {
    v22 = *((_QWORD *)this + 6);
    if ((*(_WORD *)(v22 + 80 * v21 + 50) & 0xF) != 6)
      goto LABEL_18;
    v23 = *v4;
    v24 = *(_QWORD *)(v22 + 80 * v21);
    ++*(_DWORD *)(v24 + 8);
    v25 = *v23;
    if (*v23
      || (WTF::HashTable<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashMap<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>>::rehash(v23, 8u, 0), (v25 = *v23) != 0))
    {
      v26 = *(_DWORD *)(v25 - 8);
    }
    else
    {
      v26 = 0;
    }
    v27 = 0;
    v28 = (~(v24 << 32) + v24) ^ ((unint64_t)(~(v24 << 32) + v24) >> 22);
    v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
    v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
    v31 = (v30 >> 31) ^ v30;
    for (i = 1; ; ++i)
    {
      v33 = v31 & v26;
      v34 = (uint64_t *)(v25 + 24 * (v31 & v26));
      v35 = *v34;
      if (*v34 == -1)
      {
        v27 = (uint64_t *)(v25 + 24 * v33);
        goto LABEL_29;
      }
      if (!v35)
        break;
      if (v35 == v24)
      {
        v27 = (uint64_t *)(v25 + 24 * v33);
        goto LABEL_44;
      }
LABEL_29:
      v31 = i + v33;
    }
    if (v27)
    {
      *v27 = 0;
      v27[1] = 0;
      v27[2] = 0;
      --*(_DWORD *)(*v23 - 16);
      *v27 = v24;
    }
    else
    {
      *v34 = v24;
      v27 = v34;
    }
    v36 = (WTF *)v27[1];
    if (v36)
    {
      v27[1] = 0;
      *((_DWORD *)v27 + 4) = 0;
      WTF::fastFree(v36, v20);
    }
    v27[1] = 0;
    v27[2] = 0;
    v37 = *v23;
    if (*v23)
      v38 = *(_DWORD *)(v37 - 12) + 1;
    else
      v38 = 1;
    *(_DWORD *)(v37 - 12) = v38;
    v39 = *v23;
    if (*v23)
      v40 = *(_DWORD *)(v39 - 12);
    else
      v40 = 0;
    v41 = (*(_DWORD *)(v39 - 16) + v40);
    v42 = *(unsigned int *)(v39 - 4);
    if (v42 > 0x400)
    {
      if (v42 <= 2 * v41)
        goto LABEL_81;
    }
    else if (3 * v42 <= 4 * v41)
    {
      if (!(_DWORD)v42)
      {
        v43 = 8;
        goto LABEL_42;
      }
LABEL_81:
      v43 = (_DWORD)v42 << (6 * *(_DWORD *)(v39 - 12) >= (2 * v42));
LABEL_42:
      v27 = WTF::HashTable<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashMap<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>>::rehash(v23, v43, v27);
    }
    v24 = 0;
LABEL_44:
    v44 = v27 + 1;
    v45 = *((unsigned int *)v27 + 5);
    if ((_DWORD)v45 == *((_DWORD *)v27 + 4))
    {
      v46 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v45 + 1, (unint64_t)&v60);
      v45 = *((unsigned int *)v27 + 5);
      *(_QWORD *)(v27[1] + 8 * v45) = *v46;
    }
    else
    {
      *(_QWORD *)(*v44 + 8 * v45) = v60;
    }
    *((_DWORD *)v27 + 5) = v45 + 1;
    if (v24)
    {
      v47 = *(_DWORD *)(v24 + 8);
      if (!v47)
      {
        __break(0xC471u);
        JUMPOUT(0x19457366CLL);
      }
      *(_DWORD *)(v24 + 8) = v47 - 1;
    }
LABEL_18:
    v21 = v60 + 1;
    v60 = v21;
  }
  while (v21 < *((unsigned int *)this + 15));
LABEL_53:
  v3 = *v4;
  v48 = **v4;
  if (!v48)
  {
    v51 = 0;
    LODWORD(v49) = 0;
LABEL_79:
    v50 = v48 + 24 * v49;
    goto LABEL_60;
  }
  v49 = *(unsigned int *)(v48 - 4);
  v50 = v48 + 24 * v49;
  if (!*(_DWORD *)(v48 - 12))
  {
    v51 = v48 + 24 * v49;
    goto LABEL_79;
  }
  v51 = **v4;
  if ((_DWORD)v49)
  {
    v52 = 24 * v49;
    v51 = **v4;
    while ((unint64_t)(*(_QWORD *)v51 + 1) <= 1)
    {
      v51 += 24;
      v52 -= 24;
      if (!v52)
      {
        v51 = v50;
        break;
      }
    }
  }
LABEL_60:
  if (v48)
    v53 = v48 + 24 * *(unsigned int *)(v48 - 4);
  else
    v53 = 0;
  if (v53 != v51)
  {
    do
    {
      v54 = *(_QWORD *)v51;
      v55 = *(_DWORD *)(*(_QWORD *)v51 + 8) + 1;
      *(_DWORD *)(*(_QWORD *)v51 + 8) = v55;
      v56 = *(unsigned int *)(v51 + 20);
      if ((_DWORD)v56)
      {
        if (v56 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1945736D4);
        }
        v57 = (void *)WTF::fastMalloc((WTF *)(8 * v56));
        memcpy(v57, *(const void **)(v51 + 8), 8 * *(unsigned int *)(v51 + 20));
        WTF::fastFree((WTF *)v57, v58);
        v55 = *(_DWORD *)(v54 + 8);
      }
      if (!v55)
      {
        __break(0xC471u);
        JUMPOUT(0x19457364CLL);
      }
      *(_DWORD *)(v54 + 8) = v55 - 1;
      v59 = v51 + 24;
      v51 = v50;
      if (v59 != v50)
      {
        v51 = v59;
        while ((unint64_t)(*(_QWORD *)v51 + 1) <= 1)
        {
          v51 += 24;
          if (v51 == v50)
          {
            v51 = v50;
            break;
          }
        }
      }
    }
    while (v51 != v53);
    v3 = *v4;
  }
LABEL_2:
  v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v5 + 1;
  v6 = *v3;
  if (*v3)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    for (j = 1; ; ++j)
    {
      v13 = (const WebCore::Layout::Box **)(v6 + 24 * v11);
      v14 = *v13;
      if (!*v13)
        break;
      if (v14 != (const WebCore::Layout::Box *)-1 && v14 == a2)
        goto LABEL_10;
      v11 = (v11 + j) & v7;
    }
    v13 = (const WebCore::Layout::Box **)(v6 + 24 * *(unsigned int *)(v6 - 4));
  }
  else
  {
    v13 = 0;
  }
LABEL_10:
  if (v5 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x19457362CLL);
  }
  *((_DWORD *)a2 + 2) = v5;
  v16 = (const WebCore::Layout::Box **)*v3;
  if (v16)
    v16 += 3 * *((unsigned int *)v16 - 1);
  if (v13 != v16)
    return (uint64_t *)(v13 + 1);
  if ((_MergedGlobals_202 & 1) != 0)
    return &qword_1ECE83748;
  qword_1ECE83750 = 0;
  qword_1ECE83748 = 0;
  result = &qword_1ECE83748;
  _MergedGlobals_202 = 1;
  return result;
}

unint64_t WebCore::LayoutIntegration::LineLayout::visualOverflowBoundingBoxRectFor(WebCore::LayoutIntegration::LineLayout *this, const WebCore::RenderInline *a2)
{
  uint64_t v2;
  const WebCore::Layout::Box *v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  double v15;
  int v16;
  int v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  double v22;
  unsigned int v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  int v32;
  signed int v33;
  signed int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;

  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    v3 = (const WebCore::Layout::Box *)*((_QWORD *)a2 + 7);
    if (v3 && (*((_WORD *)v3 + 6) & 0x40) == 0)
    {
LABEL_58:
      __break(0xC471u);
      JUMPOUT(0x1945738D0);
    }
    v4 = WebCore::LayoutIntegration::InlineContent::nonRootInlineBoxIndexesForLayoutBox(*((WebCore::LayoutIntegration::InlineContent **)this + 10), v3);
    v5 = *((unsigned int *)v4 + 3);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = (uint64_t *)*v4;
      v10 = 8 * v5;
      while (1)
      {
        v11 = *v9;
        if (*v9 >= (unint64_t)*(unsigned int *)(v2 + 60))
          goto LABEL_58;
        v12 = *(_QWORD *)(v2 + 48);
        v13 = v12 + 80 * v11;
        v14 = *(float *)(v13 + 28);
        v15 = *(float *)(v13 + 24) * 64.0;
        v16 = (int)v15;
        if (v15 <= -2147483650.0)
          v16 = 0x80000000;
        if (v15 < 2147483650.0)
          v17 = v16;
        else
          v17 = 0x7FFFFFFF;
        v18 = v14 * 64.0;
        LODWORD(v19) = (int)v18;
        if (v18 <= -2147483650.0)
          LODWORD(v19) = 0x80000000;
        if (v18 < 2147483650.0)
          v19 = v19;
        else
          v19 = 0x7FFFFFFFLL;
        v20 = v12 + 80 * v11;
        v21 = *(float *)(v20 + 36);
        v22 = *(float *)(v20 + 32) * 64.0;
        v23 = (int)v22;
        if (v22 <= -2147483650.0)
          v23 = 0x80000000;
        v24 = v22 < 2147483650.0 ? v23 : 0x7FFFFFFFLL;
        v25 = v21 * 64.0;
        if (v25 >= 2147483650.0)
          break;
        if (v25 > -2147483650.0)
        {
          v26 = (int)v25;
LABEL_25:
          if ((int)v24 >= 1 && (int)v26 >= 1)
          {
            if ((int)v8 < 1 || (v27 = HIDWORD(v8), SHIDWORD(v8) < 1))
            {
              v6 = v17;
              v7 = v19;
              v8 = v24 | (v26 << 32);
            }
            else
            {
              if (v17 >= (int)v6)
                v28 = v6;
              else
                v28 = v17;
              if ((int)v19 >= (int)v7)
                v29 = v7;
              else
                v29 = v19;
              v30 = __OFADD__(v6, (_DWORD)v8);
              v31 = v6 + v8;
              if (v30)
                v31 = (v6 >> 31) + 0x7FFFFFFF;
              v32 = v17 + v24;
              if (__OFADD__(v17, (_DWORD)v24))
                v32 = (v17 >> 31) + 0x7FFFFFFF;
              if (v31 > v32)
                v32 = v31;
              v33 = v7 + v27;
              if (__OFADD__((_DWORD)v7, (_DWORD)v27))
                v33 = (v7 >> 31) + 0x7FFFFFFF;
              v34 = v19 + v26;
              if (__OFADD__((_DWORD)v19, (_DWORD)v26))
                v34 = (v19 >> 31) + 0x7FFFFFFF;
              if (v33 <= v34)
                v35 = v34;
              else
                v35 = v33;
              v36 = v32 - v28;
              if (__OFSUB__(v32, v28))
                v36 = (v32 >> 31) + 0x7FFFFFFF;
              v37 = v35 - v29;
              if (__OFSUB__(v35, (_DWORD)v29))
                v37 = (v35 >> 31) + 0x7FFFFFFF;
              v8 = v36 | (unint64_t)(v37 << 32);
              v6 = v28;
              v7 = v29;
            }
          }
        }
        ++v9;
        v10 -= 8;
        if (!v10)
          return v6 | (unint64_t)(v7 << 32);
      }
      v26 = 0x7FFFFFFFLL;
      goto LABEL_25;
    }
  }
  return 0;
}

uint64_t WebCore::LayoutIntegration::LineLayout::enclosingBorderBoxRectFor(WebCore::LayoutIntegration::LineLayout *this, const WebCore::RenderInline *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;

  v2 = *((_QWORD *)this + 10);
  if (!v2 || *(_DWORD *)(v2 + 60) < 2u)
    return 0;
  v4 = *((_QWORD *)this + 3);
  if (v4)
    v4 = *(_QWORD *)(v4 + 8);
  v5 = *((_QWORD *)a2 + 7);
  if (v5 && (*(_WORD *)(v5 + 12) & 0x40) == 0)
    goto LABEL_19;
  if (*(_DWORD *)(v4 + 8))
  {
    v9 = *(_QWORD *)(v4 + 40);
    v10 = *(_DWORD *)(v9 - 8);
    v11 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*((_QWORD *)a2 + 7)) & v10;
    if (*(_QWORD *)(v9 + 16 * v11) != v5)
    {
      v12 = 1;
      do
        v11 = ((_DWORD)v11 + v12++) & v10;
      while (*(_QWORD *)(v9 + 16 * v11) != v5);
    }
    v6 = (uint64_t *)(v9 + 16 * v11 + 8);
  }
  else
  {
    v6 = (uint64_t *)(v5 + 104);
  }
  result = WebCore::Layout::BoxGeometry::borderBoxRect(*v6);
  v8 = *((_QWORD *)this + 2);
  if ((*(_BYTE *)(v8 + 52) & 7) != 1)
  {
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x1945739E8);
  }
  if (((*(_DWORD *)(v8 + 124) >> 13) & 6u) - 2 <= 3)
    return __ROR8__(result, 32);
  return result;
}

WebCore::Node *WebCore::HTMLSelectElement::recalcListItems(uint64_t a1, void *a2, unsigned __int8 a3)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Node *v9;
  WebCore::Node *result;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t i;
  _QWORD v24[5];
  WebCore::Node *v25;
  WebCore::Node *v26;
  unsigned __int8 v27;
  char v28;

  v28 = (char)a2;
  v27 = a3;
  v4 = (unsigned int *)(a1 + 184);
  if (*(_DWORD *)(a1 + 192))
  {
    if (*(_DWORD *)(a1 + 196))
      WTF::Vector<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1 + 184, a2);
    v13 = *(WTF **)v4;
    if (*(_QWORD *)v4)
    {
      *(_QWORD *)(a1 + 184) = 0;
      *(_DWORD *)(a1 + 192) = 0;
      WTF::fastFree(v13, a2);
    }
  }
  *(_BYTE *)(a1 + 300) = 0;
  v25 = 0;
  v26 = 0;
  v24[0] = a1;
  v24[1] = &v28;
  v24[2] = &v25;
  v24[3] = &v26;
  v24[4] = &v27;
  v5 = *(_QWORD *)(a1 + 80);
  if (!v5)
    goto LABEL_5;
  while ((*(_WORD *)(v5 + 28) & 0x10) == 0)
  {
    v5 = *(_QWORD *)(v5 + 56);
    if (!v5)
      goto LABEL_5;
  }
LABEL_9:
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24);
  if (v6 == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24))
  {
    v22 = (unsigned int *)v5;
    v11 = *(unsigned int *)(a1 + 196);
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 192))
    {
      WTF::Vector<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTMLElement*>(v4, &v22);
    }
    else
    {
      v14 = *(WTF **)v4;
      v15 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v5);
      if (v15)
      {
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
      }
      *((_QWORD *)v14 + v11) = v15;
      ++*(_DWORD *)(a1 + 196);
    }
    v22 = (unsigned int *)WebCore::ElementChildRange<WebCore::HTMLOptionElement>::begin(v5);
    for (i = v17; i; v17 = i)
    {
      *(_DWORD *)(v17 + 24) += 2;
      v21 = v17;
      WebCore::HTMLSelectElement::recalcListItems(BOOL,WebCore::AllowStyleInvalidation)const::$_0::operator()((unsigned int *)v24, v17);
      WTF::Ref<WebCore::HTMLProgressElement,WTF::RawPtrTraits<WebCore::HTMLProgressElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLProgressElement>>::~Ref(&v21);
      WebCore::ElementChildIterator<WebCore::HTMLOptionElement>::operator++((uint64_t)&v22);
    }
  }
  else
  {
    v7 = *(_QWORD *)(WebCore::HTMLNames::optionTag + 24);
    if (v6 == v7)
      v8 = v5;
    else
      v8 = 0;
    if (v8)
      *(_DWORD *)(v8 + 24) += 2;
    if (v6 == v7)
    {
      WebCore::HTMLSelectElement::recalcListItems(BOOL,WebCore::AllowStyleInvalidation)const::$_0::operator()((unsigned int *)v24, v5);
    }
    else if (v6 == *(_QWORD *)(WebCore::HTMLNames::hrTag + 24))
    {
      v22 = (unsigned int *)v5;
      v12 = *(unsigned int *)(a1 + 196);
      if ((_DWORD)v12 == *(_DWORD *)(a1 + 192))
      {
        WTF::Vector<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTMLElement*>(v4, &v22);
      }
      else
      {
        v18 = *(WTF **)v4;
        v19 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v5);
        if (v19)
        {
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 + 1, v19));
        }
        *((_QWORD *)v18 + v12) = v19;
        ++*(_DWORD *)(a1 + 196);
      }
    }
    if (v8)
    {
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v8);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
  }
  while (1)
  {
    v5 = *(_QWORD *)(v5 + 56);
    if (!v5)
      break;
    if ((*(_WORD *)(v5 + 28) & 0x10) != 0)
      goto LABEL_9;
  }
  if (!v26)
  {
LABEL_5:
    if (*(_DWORD *)(a1 + 280) <= 1u)
    {
      if (!v25)
        goto LABEL_29;
      if ((WebCore::HTMLOptionElement::selected(v25, 1) & 1) == 0)
        WebCore::HTMLOptionElement::setSelectedState((uint64_t)v25, (void *)1, v27);
    }
  }
  v9 = v25;
  v25 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
LABEL_29:
  result = v26;
  v26 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::HTMLIFrameElement::referrerPolicy(WebCore::HTMLIFrameElement *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unint64_t v10;

  v1 = *((_QWORD *)this + 20);
  if (v1)
  {
    LOBYTE(v1) = *(_BYTE *)(v1 + 16);
  }
  else
  {
    v2 = *((_QWORD *)this + 13);
    if (v2
      && ((v3 = *(_DWORD *)(v2 + 4), (v3 & 1) != 0)
        ? (v4 = *(_QWORD *)(v2 + 40), LODWORD(v5) = *(_DWORD *)(v2 + 52))
        : (v4 = v2 + 32, LODWORD(v5) = v3 >> 5),
          (_DWORD)v5))
    {
      v5 = v5;
      v6 = (uint64_t *)(v4 + 8);
      while (1)
      {
        v7 = *(v6 - 1);
        if (v7 == WebCore::HTMLNames::referrerpolicyAttr
          || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::referrerpolicyAttr + 24)
          && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::referrerpolicyAttr + 32))
        {
          break;
        }
        v6 += 2;
        if (!--v5)
        {
          v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    }
    v8 = *v6;
    if (v8)
    {
      v9 = *(unsigned __int16 **)(v8 + 8);
      v10 = *(unsigned int *)(v8 + 4) | ((unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v9 = 0;
      v10 = 0x100000000;
    }
    LODWORD(v1) = (unsigned __int16)WebCore::parseReferrerPolicy(v9, v10, 2);
    if (v1 <= 0x100)
      LOBYTE(v1) = 0;
  }
  return v1;
}

uint64_t WebCore::FullscreenManager::fullscreenElement(WebCore::FullscreenManager *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  v2 = *(_QWORD **)(v1 + 3096);
  if (!v2)
    return 0;
  v4 = 0;
  v5 = (_QWORD *)(v1 + 3104);
  do
  {
    if (v4)
      v6 = v4 + 1;
    else
      v6 = v5;
    v4 = (_QWORD *)*v6;
    result = *v4;
    if ((*(_BYTE *)(*v4 + 54) & 0x40) != 0)
      break;
    result = 0;
  }
  while (v4 != v2);
  return result;
}

WTF::StringImpl **WebCore::CheckboxInputType::formControlType(WebCore::CheckboxInputType *this)
{
  _QWORD v2[2];

  {
    v2[0] = "checkbox";
    v2[1] = 9;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::checkbox(void)::name, (uint64_t)v2);
  }
  return &WebCore::InputTypeNames::checkbox(void)::name;
}

void WebCore::CSSPrimitiveValue::convertToLength<25>(uint64_t a1, WebCore::CSSCalcValue **this, const WebCore::CSSToLengthConversionData *a3)
{
  void *v6;
  BOOL v7;
  WTF *v8;
  WTF *v9;
  __n128 v10;
  float v11;
  void *v12;
  WTF *v13[2];
  WTF *v14[2];
  __int16 v15;

  v15 = 0;
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)v14 = 0u;
  WebCore::CSSValue::collectComputedStyleDependencies((uint64_t)this, (WebCore::ComputedStyleDependencies *)v13);
  v7 = (!HIDWORD(v14[1]) || *((_QWORD *)a3 + 1))
    && (!HIDWORD(v13[1]) || *(_QWORD *)a3)
    && (!(_BYTE)v15 || *((_QWORD *)a3 + 4))
    && (!HIBYTE(v15) || *((_QWORD *)a3 + 3));
  v8 = v14[0];
  if (v14[0])
  {
    v14[0] = 0;
    LODWORD(v14[1]) = 0;
    WTF::fastFree(v8, v6);
  }
  v9 = v13[0];
  if (v13[0])
  {
    v13[0] = 0;
    LODWORD(v13[1]) = 0;
    WTF::fastFree(v9, v6);
  }
  if (!v7)
    goto LABEL_19;
  if (WebCore::CSSPrimitiveValue::isLength((WebCore::CSSPrimitiveValue *)this))
  {
    WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>((uint64_t)this, (uint64_t)a3, a1, v10);
    return;
  }
  if (WebCore::CSSPrimitiveValue::primitiveType((WebCore::CSSPrimitiveValue *)this) == 3)
  {
    v11 = WebCore::CSSPrimitiveValue::doubleValue((WebCore::CSSPrimitiveValue *)this);
    *(float *)a1 = v11;
    *(_WORD *)(a1 + 4) = 3;
    *(_BYTE *)(a1 + 6) = 1;
    return;
  }
  if ((*((_WORD *)this + 2) & 0x7F) == 0x49)
  {
    WebCore::CSSCalcValue::createCalculationValue(this[1], a3, v13);
    WebCore::Length::Length(a1, v13);
    WTF::Ref<WebCore::CalculationValue,WTF::RawPtrTraits<WebCore::CalculationValue>,WTF::DefaultRefDerefTraits<WebCore::CalculationValue>>::~Ref(v13, v12);
  }
  else
  {
LABEL_19:
    *(_DWORD *)a1 = 0;
    *(_WORD *)(a1 + 4) = 13;
    *(_BYTE *)(a1 + 6) = 0;
  }
}

void WebCore::BackgroundPainter::backgroundRoundedRectAdjustedForBleedAvoidance(WebCore::BackgroundPainter *a1, const WebCore::LayoutRect *a2, WebCore::LayoutRect *a3, int a4, WebCore::InlineIterator::BoxIterator *a5, const WebCore::LayoutSize *a6, int a7)
{
  uint64_t v13;
  float v14;
  uint64_t v15;
  _BOOL8 v16;
  _BOOL8 v17;
  int v18;
  WebCore::RenderStyle *v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;
  __int128 v23;
  _QWORD v24[2];
  int v25;
  char v26;

  if (a4 == 1)
  {
    v13 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 80);
    v14 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24)
                                                                                             + 8)
                                                                                 + 40)
                                                                     + 8));
    v21[0] = WebCore::shrinkRectByOneDevicePixel(v13, *(_QWORD *)a3, v14);
    v21[1] = v15;
    WebCore::BackgroundPainter::backgroundRoundedRect(a1, a2, (const WebCore::InlineIterator::InlineBoxIterator *)v21, a5, a6, a7);
  }
  else if (a4 == 3)
  {
    WebCore::RenderStyle::getRoundedInnerBorderFor((WebCore::RenderStyle *)(*(_QWORD *)a2 + 80), a3, (int)a6, a7, (uint64_t)a1);
  }
  else
  {
    WebCore::RenderStyle::getRoundedBorderFor((WebCore::RenderStyle *)(*(_QWORD *)a2 + 80), a3, a6, a7, (uint64_t)a1);
    if ((WebCore::InlineIterator::BoxIterator::atEnd(a5) & 1) == 0)
    {
      v16 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)a5);
      WebCore::InlineIterator::InlineBox::nextInlineBox((WebCore::InlineIterator::InlineBox *)v16, (uint64_t)v21);
      if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v21))
      {
        v17 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)a5);
        WebCore::InlineIterator::InlineBox::previousInlineBox((WebCore::InlineIterator::InlineBox *)v17, (uint64_t)v24);
        v18 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v24) ^ 1;
        if (v25 != -1)
          ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v25])(&v26, v24);
      }
      else
      {
        v18 = 1;
      }
      if ((_DWORD)v22 != -1)
        ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v22])(v24, v21);
      if (v18)
      {
        v19 = (WebCore::RenderStyle *)(*(_QWORD *)a2 + 80);
        v24[0] = 0;
        v24[1] = *((_QWORD *)a3 + 1);
        WebCore::RenderStyle::getRoundedBorderFor(v19, (const WebCore::LayoutRect *)v24, a6, a7, (uint64_t)v21);
        v20 = v23;
        *((_OWORD *)a1 + 1) = v22;
        *((_OWORD *)a1 + 2) = v20;
      }
    }
  }
}

BOOL WebCore::ActiveDOMCallback::canInvokeCallback(WebCore::ActiveDOMCallback *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BOOL8 v5;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v4 = *(unsigned __int8 *)(v3 + 178);
  if (*(_BYTE *)(v3 + 178))
  {
    if (v4 == 1 || v4 == 2)
      ++*(_DWORD *)(v3 + 216);
  }
  else
  {
    *(_DWORD *)(v3 - 264) += 2;
  }
  if (*(_BYTE *)(v3 + 179))
    v5 = 0;
  else
    v5 = *(_BYTE *)(v3 + 180) == 0;
  if (v4)
  {
    if (v4 == 1)
    {
      if (*(_DWORD *)(v3 + 216) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 96) + 40))(v3 - 96);
      else
        --*(_DWORD *)(v3 + 216);
    }
    else if (v4 == 2)
    {
      WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 216));
    }
  }
  else if (*(_DWORD *)(v3 - 264) == 2)
  {
    if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), a2);
  }
  else
  {
    *(_DWORD *)(v3 - 264) -= 2;
  }
  return v5;
}

uint64_t WebCore::SelectorDataList::matches(unsigned int ***this, WebCore::Element *a2, __n128 a3)
{
  uint64_t v3;
  unsigned int **v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Element *v8;
  unint64_t matched;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  int v15;
  __n128 v18;
  char v19[4];
  int v20;
  WTF::StringImpl *v21;
  char v22;
  char v23;
  WebCore::Element *v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  _BYTE v30[128];
  unsigned int v31;
  char v32;
  _BYTE v33[2];
  unsigned int v34;
  unsigned int *v35[2];
  char v36;
  unsigned int *v37;
  char v38;
  WTF::StringImpl *v39;
  char v40;
  uint64_t v41;

  v3 = *((unsigned int *)this + 3);
  if (!(_DWORD)v3)
    return 0;
  v5 = *this;
  v6 = 32 * v3 - 32;
  a3.n128_u64[0] = 16777473;
  v18 = a3;
  do
  {
    v7 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
    v33[0] = *(_BYTE *)(v7 + 3384) != 2;
    v33[1] = *(_BYTE *)(v7 + 3358) & 1;
    v19[0] = 3;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = (WTF *)v30;
    v29 = 8;
    v31 = 0;
    v32 = 0;
    if ((*((_WORD *)a2 + 14) & 0xF000) == 0x9000)
      v8 = 0;
    else
      v8 = a2;
    v24 = v8;
    v35[0] = *v5;
    v35[1] = (unsigned int *)a2;
    v36 = 0;
    v37 = v35[0];
    v38 = 0;
    v40 = 0;
    v41 = v18.n128_u32[0];
    v34 = 0;
    matched = WebCore::SelectorChecker::matchRecursively((WebCore::SelectorChecker *)v33, v19, v35, &v34, v18);
    v11 = 0;
    if (!(_DWORD)matched)
    {
      if (v20)
      {
        v11 = (v34 >> v20) & 1;
      }
      else if (v34)
      {
        if ((v34 & 0x1FFFE) != 0 && !v19[0])
          v31 = v34 & 0x1FFFE;
        v11 = HIDWORD(matched) == 1 || v19[0] == 2;
      }
      else
      {
        v11 = 1;
      }
    }
    if (v40)
    {
      v12 = v39;
      v39 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v10);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    v13 = v28;
    if (v30 != (_BYTE *)v28 && v28)
    {
      v28 = 0;
      LODWORD(v29) = 0;
      WTF::fastFree(v13, v10);
    }
    v14 = v21;
    v21 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v10);
      else
        *(_DWORD *)v14 -= 2;
    }
    v5 += 4;
    if (v6)
      v15 = v11;
    else
      v15 = 1;
    v6 -= 32;
  }
  while (v15 != 1);
  return v11;
}

uint64_t WebCore::HTMLUListElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v4;

  if (*(_QWORD *)a2 == WebCore::HTMLNames::typeAttr)
    return 1;
  v2 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  result = 1;
  if (v2 > 0x1F8)
  {
    if (v2 == 949 || v2 == 505 || v2 == 947)
      return result;
    return 0;
  }
  v4 = v2 - 411 > 0x20 || ((1 << (v2 + 101)) & 0x100200001) == 0;
  if (v4 && v2 != 286)
    return 0;
  return result;
}

_DWORD *WebCore::HTMLInputElement::value@<X0>(WebCore::HTMLInputElement *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *result;
  _DWORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  result = (_DWORD *)*((_QWORD *)this + 30);
  if (result[3] == 64)
    return (_DWORD *)WebCore::FileInputType::firstElementPathForInputValue((uint64_t)result, a2);
  v5 = (_DWORD *)*((_QWORD *)this + 27);
  if (v5)
  {
    *v5 += 2;
    *a2 = v5;
    return result;
  }
  v6 = *((_QWORD *)this + 13);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 4);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if ((_DWORD)v9)
      {
LABEL_6:
        v9 = v9;
        v10 = (_QWORD *)(v8 + 8);
        while (1)
        {
          v11 = *(v10 - 1);
          if (v11 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_11;
          }
          v10 += 2;
          if (!--v9)
          {
            v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_11;
          }
        }
      }
    }
    else
    {
      v8 = v6 + 32;
      LODWORD(v9) = v7 >> 5;
      if ((_DWORD)v9)
        goto LABEL_6;
    }
  }
  v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_11:
  if (!*v10)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 64))(result);
  result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 296))(result);
  if (!*a2)
  {
    *a2 = 0;
    result = (_DWORD *)*((_QWORD *)this + 30);
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 64))(result);
  }
  return result;
}

uint64_t WebCore::SecurityContext::securityOriginPolicy(WebCore::SecurityContext *this)
{
  uint64_t result;
  WTF::StringImpl *v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;

  result = *((_QWORD *)this + 1);
  if (!result)
  {
    if (*((_BYTE *)this + 88))
    {
      WebCore::SecurityOrigin::createOpaque(&v6);
      result = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)result = 1;
      *(_QWORD *)(result + 8) = v6;
      v4 = (uint64_t *)*((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = result;
      if (v4)
      {
        if (*(_DWORD *)v4 == 1)
        {
          WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v4 + 1, v3);
          WTF::fastFree((WTF *)v4, v5);
          return *((_QWORD *)this + 1);
        }
        else
        {
          --*(_DWORD *)v4;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::HiddenInputType::formControlType(WebCore::HiddenInputType *this)
{
  _QWORD v2[2];

  {
    v2[0] = "hidden";
    v2[1] = 7;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::hidden(void)::name, (uint64_t)v2);
  }
  return &WebCore::InputTypeNames::hidden(void)::name;
}

uint64_t WebCore::RenderTableRow::section(WebCore::RenderTableRow *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  result = *(_QWORD *)(v1 + 8);
  if (result)
  {
    if (*(_BYTE *)(result + 46) != 40)
    {
      result = 105;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::RenderTableRow::nextRow(WebCore::RenderTableRow *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(unsigned int *)((char *)this + 47);
  if (!(v1 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32)))
    return 0;
  result = *(_QWORD *)((v1 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32)) + 8);
  if (result)
  {
    if (*(_BYTE *)(result + 46) != 39)
    {
      result = 105;
      __break(0xC471u);
    }
  }
  return result;
}

unint64_t WebCore::RenderTableRow::clippedOverflowRect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  int v14;
  unint64_t v15;
  signed int v16;
  unsigned int v17;
  signed int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  char v32;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 656))(&v27, a1, 0);
  if (v28 < 1 || v29 < 1)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 472))(&v30, a1, &v27, a2, a3);
    if (!v32)
    {
      __break(0xC471u);
      JUMPOUT(0x194574AB4);
    }
    v7 = v30;
    v8 = v31;
  }
  v9 = *(unsigned int *)(a1 + 64);
  if (v9 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
  {
    v10 = *(_BYTE **)((v9 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
    if (v10)
    {
      if (v10[46] != 37)
      {
        __break(0xC471u);
        JUMPOUT(0x194574AD4);
      }
      v11 = HIDWORD(v7);
      v12 = HIDWORD(v8);
      while (1)
      {
        (*(void (**)(uint64_t *__return_ptr, _BYTE *, _QWORD))(*(_QWORD *)v10 + 656))(&v27, v10, 0);
        if (v28 >= 1 && v29 > 0)
        {
          (*(void (**)(unint64_t *__return_ptr, _BYTE *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v10 + 472))(&v30, v10, &v27, a2, a3);
          if (!v32)
          {
            __break(0xC471u);
            JUMPOUT(0x194574A94);
          }
          if ((_DWORD)v31 || HIDWORD(v31))
          {
            if ((_DWORD)v8 || (_DWORD)v12)
            {
              if ((int)v30 >= (int)v7)
                v14 = v7;
              else
                v14 = v30;
              if (SHIDWORD(v30) >= (int)v11)
                v15 = v11;
              else
                v15 = HIDWORD(v30);
              v16 = v7 + v8;
              if (__OFADD__((_DWORD)v7, (_DWORD)v8))
                v16 = (v7 >> 31) + 0x7FFFFFFF;
              v17 = (v30 >> 31) + 0x7FFFFFFF;
              if (!__OFADD__((_DWORD)v30, (_DWORD)v31))
                v17 = v30 + v31;
              if (v16 > (int)v17)
                v17 = v16;
              v18 = v11 + v12;
              if (__OFADD__((_DWORD)v11, (_DWORD)v12))
                v18 = (v11 >> 31) + 0x7FFFFFFF;
              v19 = (HIDWORD(v30) >> 31) + 0x7FFFFFFF;
              if (!__OFADD__(HIDWORD(v30), HIDWORD(v31)))
                v19 = HIDWORD(v30) + HIDWORD(v31);
              if (v18 > v19)
                v19 = v18;
              v20 = __OFSUB__(v17, v14);
              v21 = v17 - v14;
              v22 = (v17 >> 31) + 0x7FFFFFFF;
              if (v20)
                LODWORD(v8) = v22;
              else
                LODWORD(v8) = v21;
              v20 = __OFSUB__(v19, (_DWORD)v15);
              v23 = v19 - v15;
              v24 = (v19 >> 31) + 0x7FFFFFFF;
              if (v20)
                LODWORD(v12) = v24;
              else
                LODWORD(v12) = v23;
              LODWORD(v7) = v14;
              v11 = v15;
            }
            else
            {
              v12 = HIDWORD(v31);
              LODWORD(v7) = v30;
              v11 = HIDWORD(v30);
              LODWORD(v8) = v31;
            }
          }
        }
        v25 = *(unsigned int *)(v10 + 47);
        if (!(v25 | ((unint64_t)v10[51] << 32)))
          break;
        v10 = *(_BYTE **)((v25 | ((unint64_t)v10[51] << 32)) + 8);
        if (!v10)
          break;
        if (v10[46] != 37)
        {
          __break(0xC471u);
          JUMPOUT(0x194574A34);
        }
      }
      return v7 | (v11 << 32);
    }
  }
  return v7;
}

uint64_t WebCore::RadioInputType::valueMissing(WebCore::RadioInputType *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  const WTF::StringImpl **v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  WebCore::Node *v10;
  uint64_t v11;
  WebCore::RadioButtonGroups *v12;
  uint64_t v13;
  WebCore::Node *v14;
  __int16 v15;
  WebCore::Node *v16;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = 0;
      *(_DWORD *)(v3 + 24) += 2;
      goto LABEL_4;
    }
  }
  else
  {
    v3 = 0;
  }
  v4 = 1;
LABEL_4:
  if (*(_QWORD *)(v3 + 208))
    v5 = (const WTF::StringImpl **)(v3 + 208);
  else
    v5 = (const WTF::StringImpl **)MEMORY[0x1E0CBF3B8];
  if (*(_DWORD *)(*(_QWORD *)(v3 + 240) + 12) != 4096)
  {
    if (!*v5 || !*((_DWORD *)*v5 + 1))
      goto LABEL_9;
LABEL_8:
    v15 = 0;
    if ((*(_BYTE *)(v3 + 22) & 0x18) != 0)
    {
      v9 = **(_QWORD **)(v3 + 40);
    }
    else
    {
      v8 = v3;
      do
      {
        v9 = v8;
        v8 = *(_QWORD *)(v8 + 32);
      }
      while (v8);
    }
    v10 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v10 = off_1E33D85B8;
    *((_QWORD *)v10 + 1) = &v15;
    *((_QWORD *)v10 + 2) = (char *)&v15 + 1;
    v16 = v10;
    WebCore::RadioInputType::forEachButtonInDetachedGroup(v9, v5, (const WTF::StringImpl *)&v16);
    (*(void (**)(WebCore::Node *))(*(_QWORD *)v10 + 8))(v10);
    if (HIBYTE(v15))
      v6 = (_BYTE)v15 == 0;
    else
LABEL_9:
      v6 = 0;
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(v3 + 120);
  if (v11 && (v13 = *(_QWORD *)(v11 + 8)) != 0)
  {
    v12 = (WebCore::RadioButtonGroups *)(v13 + 160);
  }
  else
  {
    if ((*(_BYTE *)(v3 + 22) & 0x18) == 0)
      goto LABEL_8;
    v12 = (WebCore::RadioButtonGroups *)WebCore::TreeScope::radioButtonGroups(*(WebCore::TreeScope **)(v3 + 40));
  }
  WebCore::RadioButtonGroups::checkedButtonForGroup(v12, v5, &v16);
  v14 = v16;
  if (v16)
  {
    v6 = 0;
    v16 = 0;
  }
  else
  {
    v6 = WebCore::RadioButtonGroups::isInRequiredGroup(v12, (WebCore::HTMLInputElement *)v3);
    v14 = v16;
    v16 = 0;
    if (!v14)
      goto LABEL_10;
  }
  if (*((_DWORD *)v14 + 6) == 2)
  {
    if ((*((_WORD *)v14 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v14, a2);
  }
  else
  {
    *((_DWORD *)v14 + 6) -= 2;
  }
LABEL_10:
  if ((v4 & 1) == 0)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return v6;
}

uint64_t WebCore::LocalDOMWindow::frame(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (!*(_BYTE *)(v2 + 178))
  {
    v3 = *(_QWORD *)(v2 + 240);
    if (v3)
      return *(_QWORD *)(v3 + 8);
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

void WebCore::LocalDOMWindow::getComputedStyle(WebCore::Element *a1@<X1>, unsigned int **a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  const WebCore::Document *v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  const WebCore::Document *v12;
  _DWORD *v13[2];
  _BYTE v14[8];
  uint64_t v15;

  if (*a2 && (WTF::StringImpl::startsWith() & 1) != 0)
  {
    v8 = *(const WebCore::Document **)(*((_QWORD *)a1 + 5) + 8);
    *((_DWORD *)v8 + 6) += 2;
    v12 = v8;
    WebCore::CSSSelectorParserContext::CSSSelectorParserContext((uint64_t)v13, v8);
    WebCore::CSSSelectorParser::parsePseudoElement(a2, (const WTF::String *)v13, (uint64_t)v14);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v12);
    if (v14[0])
      WebCore::CSSComputedStyleDeclaration::create((uint64_t)a1, (uint64_t)&v15, (uint64_t *)v13);
    else
      WebCore::CSSComputedStyleDeclaration::createEmpty(a1, v13);
    v10 = v13[0];
    v13[0] = 0;
    WTF::Ref<WebCore::CSSComputedStyleDeclaration,WTF::RawPtrTraits<WebCore::CSSComputedStyleDeclaration>,WTF::DefaultRefDerefTraits<WebCore::CSSComputedStyleDeclaration>>::~Ref(v13, v9);
    *a3 = (uint64_t)v10;
    WebCore::Styleable::~Styleable((WebCore::Styleable *)v14, v11);
  }
  else
  {
    v7 = bmalloc::api::isoAllocate();
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_DWORD *)(v7 + 24) = 1;
    *(_QWORD *)v7 = off_1E3397498;
    *((_DWORD *)a1 + 6) += 2;
    *(_QWORD *)(v7 + 32) = a1;
    *(_BYTE *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 56) = 0;
    *(_WORD *)(v7 + 64) = 0;
    *a3 = v7;
  }
}

WebCore::Animation **WebCore::KeyframeEffect::backingAnimationForCompositedRenderer(WebCore::KeyframeEffect *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Animation *v7;
  int v8;
  char v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  WebCore::Animation *v25;

  v4 = *(_QWORD *)(a2 + 96);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v6 = WTF::fastMalloc((WTF *)0x78);
  v7 = WebCore::Animation::Animation((WebCore::Animation *)v6);
  v25 = v7;
  *((_QWORD *)v7 + 8) = *(_QWORD *)(a2 + 72);
  v8 = *((_DWORD *)v7 + 28);
  v9 = *((_BYTE *)v7 + 116);
  *((_DWORD *)v7 + 28) = v8 | 0x800;
  *((_QWORD *)v7 + 7) = *(_QWORD *)(a2 + 56);
  *((_BYTE *)v7 + 116) = v9;
  *((_DWORD *)v7 + 28) = v8 | 0xA00;
  *((_QWORD *)v7 + 6) = *(_QWORD *)(a2 + 48);
  *((_BYTE *)v7 + 116) = v9;
  *((_DWORD *)v7 + 28) = v8 | 0x2A00;
  (***(void (****)(_DWORD **__return_ptr))(a2 + 24))(&v24);
  v10 = v24;
  v24 = 0;
  v11 = *(_DWORD **)(v6 + 96);
  *(_QWORD *)(v6 + 96) = v10;
  if (!v11)
    goto LABEL_6;
  if (v11[2] != 1)
  {
    --v11[2];
LABEL_6:
    *(_DWORD *)(v6 + 112) |= 0x40000u;
    goto LABEL_7;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
  v21 = v24;
  *(_DWORD *)(v6 + 112) |= 0x40000u;
  v24 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
    else
      --v21[2];
  }
LABEL_7:
  v12 = *(unsigned int *)(v6 + 112);
  *(double *)(v6 + 72) = *(double *)(v5 + 120) + 0.0;
  v13 = v12 & 0xFFFFFFFFFFF7FF3FLL | ((unint64_t)*(unsigned __int8 *)(v6 + 116) << 32) | ((unint64_t)(*(_BYTE *)(a2 + 307) & 3) << 6);
  v14 = v13 | 0x80000;
  *(_DWORD *)(v6 + 112) = v13 | 0x80000;
  switch(*(_BYTE *)(a2 + 32))
  {
    case 0:
    case 4:
      v14 = v13 & 0xFFFFFFFFFFF7EFF3 | 0x81000;
      goto LABEL_10;
    case 1:
      v15 = v13 & 0xFFFFFFFFFFF7FFF7 | 0x80000;
      v16 = 4100;
      goto LABEL_9;
    case 2:
      v15 = v13 & 0xFFFFFFFFFFF7FFF3 | 0x80000;
      v16 = 4104;
LABEL_9:
      v14 = v15 | v16;
      goto LABEL_10;
    case 3:
      v14 = v13 | 0x8100C;
LABEL_10:
      *(_DWORD *)(v6 + 112) = v14;
      *(_BYTE *)(v6 + 116) = BYTE4(v14);
      break;
    default:
      break;
  }
  switch(*(_BYTE *)(a2 + 33))
  {
    case 0:
      v17 = v14 & 0xFFFFFFFFFFFFFBFCLL | 0x400;
      goto LABEL_13;
    case 1:
      v14 &= 0xFFFFFFFFFFFFFFFCLL;
      v20 = 1026;
      goto LABEL_21;
    case 2:
      v14 &= ~2uLL;
      v20 = 1025;
      goto LABEL_21;
    case 3:
      v20 = 1027;
LABEL_21:
      v17 = v14 | v20;
LABEL_13:
      *(_DWORD *)(v6 + 112) = v17;
      *(_BYTE *)(v6 + 116) = BYTE4(v17);
      break;
    default:
      break;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 112))(v5))
  {
    v22 = *(_QWORD *)(*(_QWORD *)(v5 + 216) + 96);
    if (v22)
      ++*(_DWORD *)(v22 + 8);
    v23 = *(_DWORD **)(v6 + 104);
    *(_QWORD *)(v6 + 104) = v22;
    if (v23)
    {
      if (v23[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
      else
        --v23[2];
    }
  }
  v25 = 0;
  *(_QWORD *)this = v6;
  return WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>::~Ref(&v25, v18);
}

uint64_t WebCore::KeyframeEffect::threadedAnimationResolutionEnabled(WebCore::KeyframeEffect *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *((_QWORD *)this + 15);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      return (*(_QWORD *)(*(_QWORD *)(v2 + 680) + 712) >> 47) & 1;
  }
  v4 = *((_QWORD *)this + 33);
  if (v4 && (v2 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8)) != 0)
    return (*(_QWORD *)(*(_QWORD *)(v2 + 680) + 712) >> 47) & 1;
  else
    return 0;
}

uint64_t WebCore::ImageDecoderCG::isAllDataReceived(WebCore::ImageDecoderCG *this)
{
  return *((unsigned __int8 *)this + 12);
}

uint64_t *WebCore::TextInputType::formControlType(WebCore::TextInputType *this)
{
  return &WebCore::textAtomData;
}

WTF::StringImpl *WebCore::ScriptElement::scriptContent@<X0>(WebCore::ScriptElement *this@<X0>, const WebCore::ContainerNode *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t v3;
  WTF::StringImpl *result;

  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  result = WebCore::TextNodeTraversal::childTextContent((WebCore::TextNodeTraversal *)v3, a2, a3);
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::RenderElement::transformReferenceBoxRect(WebCore::RenderElement *this, const WebCore::RenderStyle *a2)
{
  char v2;

  if (a2 >= 5u)
    v2 = 2;
  else
    v2 = 0x705020406uLL >> (8 * a2);
  return (*(uint64_t (**)(WebCore::RenderElement *, _QWORD))(*(_QWORD *)this + 752))(this, v2 & 7);
}

uint64_t WebCore::CSSTransition::isCSSTransition(WebCore::CSSTransition *this)
{
  return 1;
}

uint64_t WebCore::WebAnimation::isCSSAnimation(WebCore::WebAnimation *this)
{
  return 0;
}

unint64_t WebCore::RenderInline::linesVisualOverflowBoundingBox(WebCore::LegacyInlineBox **this, WebCore::RenderObject *a2)
{
  WebCore::LayoutIntegration::LineLayout *v3;
  WebCore::LegacyInlineBox *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  WebCore::LegacyInlineBox *v9;
  WebCore::LegacyInlineBox *v10;
  signed int v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  float v16;
  double v17;
  int v18;
  double v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  WebCore::LegacyInlineBox *v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;

  v3 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing((WebCore::LayoutIntegration::LineLayout *)this, a2);
  if (v3)
  {
    v4 = this[7];
    if (v4)
    {
      if ((*((_WORD *)v4 + 6) & 0x40) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x194575254);
      }
      v5 = WebCore::LayoutIntegration::LineLayout::visualOverflowBoundingBoxRectFor(v3, (const WebCore::RenderInline *)this);
      LODWORD(v6) = v5;
      v7 = HIDWORD(v5);
      return v6 | (v7 << 32);
    }
LABEL_43:
    v7 = 0;
    LODWORD(v6) = 0;
    return v6 | (v7 << 32);
  }
  v9 = this[19];
  if (!v9 || !this[20])
    goto LABEL_43;
  v10 = this[19];
  LODWORD(v6) = 0x7FFFFFFF;
  v11 = 0x80000000;
  do
  {
    v12 = *((_QWORD *)v10 + 8);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 20);
      if ((*((_WORD *)v10 + 26) & 0x800) != 0)
      {
        if ((int)v6 >= (int)v13)
          v6 = v13;
        else
          v6 = v6;
        v14 = *(_DWORD *)(v12 + 28);
      }
      else
      {
        v13 >>= 32;
        if ((int)v6 >= (int)v13)
          v6 = v13;
        else
          v6 = v6;
        v14 = *(_DWORD *)(v12 + 32);
      }
      v21 = __OFADD__((_DWORD)v13, v14);
      v20 = v13 + v14;
      v22 = (v13 >> 31) + 0x7FFFFFFF;
      if (v21)
        v20 = v22;
    }
    else
    {
      if ((*((_WORD *)v10 + 26) & 0x800) != 0)
        v15 = 44;
      else
        v15 = 48;
      v16 = *(float *)((char *)v10 + v15);
      v17 = v16 * 64.0;
      v18 = (int)v17;
      if (v17 <= -2147483650.0)
        v18 = 0x80000000;
      if (v17 >= 2147483650.0)
        v18 = 0x7FFFFFFF;
      if (v18 >= (int)v6)
        v6 = v6;
      else
        v6 = v18;
      v19 = ceilf(v16 + *((float *)v10 + 10)) * 64.0;
      if (v19 >= 2147483650.0)
      {
        v20 = 0x7FFFFFFF;
      }
      else if (v19 <= -2147483650.0)
      {
        v20 = 0x80000000;
      }
      else
      {
        v20 = (int)v19;
      }
    }
    if (v11 <= v20)
      v11 = v20;
    v10 = (WebCore::LegacyInlineBox *)*((_QWORD *)v10 + 12);
  }
  while (v10);
  v23 = WebCore::LegacyInlineBox::root(v9);
  WebCore::LegacyInlineBox::root(this[20]);
  v24 = this[19];
  v25 = *((_QWORD *)v24 + 8);
  if (v25)
  {
    v27 = v25 + 20;
    LODWORD(v25) = *(_DWORD *)(v25 + 20);
    v26 = *(_DWORD *)(v27 + 4);
    if ((*((_WORD *)v24 + 26) & 0x800) != 0)
      v25 = v26;
    else
      v25 = v25;
  }
  else
  {
    v25 = *(unsigned int *)(v23 + 116);
  }
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    v7 = v6;
    LODWORD(v6) = v25;
  }
  else
  {
    v7 = v25;
  }
  return v6 | (v7 << 32);
}

WebCore::RenderObject *WebCore::RenderInline::clippedOverflowRect(WebCore::RenderInline *this, WebCore::RenderObject *a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::RenderObject *v9;
  unint64_t v10;
  WebCore::RenderInline *v11;
  WebCore::RenderInline *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  float v16;
  float v17;
  double v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  char v26;
  WebCore::RenderObject *v27;
  BOOL v29;
  float v30;
  float v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  WebCore::RenderObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  BOOL v55;
  unsigned int v56;
  int v57;
  _QWORD v58[2];
  WebCore::RenderInline *v59;
  __int128 v60;
  __int128 v61;
  int v62;
  WebCore::RenderObject *v63[2];
  _OWORD v64[2];
  int v65;
  char v66;

  if (!*((_QWORD *)this + 19))
  {
    if ((*(_WORD *)((_BYTE *)this + 69) & 0x10) == 0)
      goto LABEL_89;
    ++dword_1ECE91378;
    v32 = *((_QWORD *)this + 1);
    v33 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
    v34 = (~(v32 << 32) + v32) ^ ((unint64_t)(~(v32 << 32) + v32) >> 22);
    v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
    v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
    v37 = v33 & ((v36 >> 31) ^ v36);
    v38 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v37);
    if (v38 == -1 || v38 != v32)
    {
      v42 = 1;
      do
      {
        v37 = ((_DWORD)v37 + v42) & v33;
        v43 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v37);
        ++v42;
      }
      while (v43 == -1 || v43 != v32);
    }
    v40 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v37 + 8) + 16);
    if (!v40 || (v41 = *v40) == 0 || !*(_QWORD *)(v41 + 8))
    {
LABEL_89:
      if (!WebCore::LayoutIntegration::LineLayout::containing(this, a2))
      {
        v27 = 0;
        v63[0] = 0;
        v63[1] = 0;
        return v27;
      }
    }
  }
  v6 = WebCore::RenderInline::linesVisualOverflowBoundingBox((WebCore::LegacyInlineBox **)this, a2);
  v8 = v7;
  v9 = WebCore::RenderObject::containingBlock(this);
  v10 = HIDWORD(v6);
  v11 = this;
  while (1)
  {
    if ((*((_BYTE *)v11 + 45) & 0x20) != 0)
      v12 = v11;
    else
      v12 = 0;
    if ((*((_BYTE *)v11 + 45) & 0x20) == 0 || v11 == v9)
    {
LABEL_12:
      v14 = 0;
      goto LABEL_13;
    }
    if (v11 == a2)
      break;
    if ((*((_QWORD *)v11 + 12) & 0x280000) == 0x80000 && (*((_BYTE *)v11 + 21) & 0x80) != 0)
    {
      v52 = *((_QWORD *)v12 + 18);
      v54 = *(_DWORD *)(v52 + 148);
      v53 = *(_DWORD *)(v52 + 152);
      v55 = __OFADD__((_DWORD)v6, v54);
      v56 = v6 + v54;
      LODWORD(v6) = v55 ? (v6 >> 31) + 0x7FFFFFFF : v56;
      v55 = __OFADD__((_DWORD)v10, v53);
      v57 = v10 + v53;
      LODWORD(v10) = (v10 >> 31) + 0x7FFFFFFF;
      if (!v55)
        LODWORD(v10) = v57;
    }
    v13 = *((_QWORD *)v11 + 4);
    if (v13)
    {
      v11 = *(WebCore::RenderInline **)(v13 + 8);
      if (v11)
        continue;
    }
    goto LABEL_12;
  }
  v14 = 1;
LABEL_13:
  v15 = *(_QWORD *)(*((_QWORD *)this + 11) + 16);
  if ((*(_BYTE *)(v15 + 52) & 0xF) != 0)
  {
    v17 = *(float *)(v15 + 48);
    v16 = *(float *)(v15 + 56);
    if ((*(_BYTE *)(v15 + 52) & 0x10) == 0)
      goto LABEL_15;
    v29 = v17 < 3.0;
    v30 = v17 + -3.0;
    if (v17 < 3.0)
      v17 = 3.0;
    v31 = 0.0;
    if (!v29)
      v31 = v30;
LABEL_50:
    if (v31 < 0.0)
      v31 = 0.0;
    v16 = v16 + v31;
    goto LABEL_15;
  }
  v16 = *(float *)(v15 + 56);
  v17 = 0.0;
  if ((*(_BYTE *)(v15 + 52) & 0x10) != 0)
  {
    v31 = -3.0;
    goto LABEL_50;
  }
LABEL_15:
  v18 = fmaxf(v17 + v16, 0.0) * 64.0;
  if (v18 >= 2147483650.0)
  {
    v19 = 0x7FFFFFFF;
  }
  else if (v18 <= -2147483650.0)
  {
    v19 = 0x80000000;
  }
  else
  {
    v19 = (int)v18;
  }
  v20 = v6 - v19;
  if (__OFSUB__((_DWORD)v6, v19))
    v20 = (v6 >> 31) + 0x7FFFFFFF;
  LODWORD(v63[0]) = v20;
  v21 = v8 + v19;
  if (__OFADD__((_DWORD)v8, v19))
    v21 = (v8 >> 31) + 0x7FFFFFFF;
  v22 = v21 + v19;
  if (__OFADD__(v21, v19))
    v22 = (v21 >> 31) + 0x7FFFFFFF;
  LODWORD(v63[1]) = v22;
  v23 = v10 - v19;
  if (__OFSUB__((_DWORD)v10, v19))
    v23 = (v10 >> 31) + 0x7FFFFFFF;
  HIDWORD(v63[0]) = v23;
  v24 = HIDWORD(v8) + v19;
  if (__OFADD__(HIDWORD(v8), v19))
    v24 = (HIDWORD(v8) >> 31) + 0x7FFFFFFF;
  v25 = v24 + v19;
  if (__OFADD__(v24, v19))
    v25 = (v24 >> 31) + 0x7FFFFFFF;
  HIDWORD(v63[1]) = v25;
  if (v9)
    v26 = v14;
  else
    v26 = 1;
  v27 = v63[0];
  if ((v26 & 1) == 0)
  {
    v60 = *(_OWORD *)v63;
    LOBYTE(v61) = 0;
    LOBYTE(v62) = 0;
    if ((*((_BYTE *)v9 + 22) & 1) != 0)
    {
      v45 = v9;
      WebCore::RenderBox::applyCachedClipAndScrollPosition((uint64_t)v9, (uint64_t)&v60, (uint64_t)a2, a3);
      v9 = v45;
    }
    (*(void (**)(_OWORD *__return_ptr, WebCore::RenderObject *, __int128 *, WebCore::RenderObject *, unint64_t))(*(_QWORD *)v9 + 472))(v64, v9, &v60, a2, a3);
    if (!v66)
    {
      __break(0xC471u);
      JUMPOUT(0x19457575CLL);
    }
    v60 = v64[0];
    v61 = v64[1];
    v62 = v65;
    *(_OWORD *)v63 = v64[0];
    if (v19)
    {
      v59 = this;
      *(_QWORD *)&v64[0] = WebCore::RenderChildConstIteratorAdapter<WebCore::RenderElement>::begin((uint64_t *)&v59);
      *((_QWORD *)&v64[0] + 1) = v46;
      if (v46)
      {
        v47 = v46;
        do
        {
          v58[0] = (*(uint64_t (**)(uint64_t, WebCore::RenderObject *, _QWORD))(*(_QWORD *)v47 + 448))(v47, a2, v19);
          v58[1] = v48;
          WebCore::LayoutRect::unite((WebCore::LayoutRect *)v63, (const WebCore::LayoutRect *)v58);
          WebCore::RenderChildConstIterator<WebCore::RenderElement>::operator++((uint64_t)v64);
          v47 = *((_QWORD *)&v64[0] + 1);
        }
        while (*((_QWORD *)&v64[0] + 1));
      }
      v49 = WebCore::RenderBoxModelObject::continuation(this);
      if (v49)
      {
        if ((*(_BYTE *)(v49 + 20) & 1) != 0)
        {
          v50 = *(_QWORD *)(v49 + 32);
          if (v50)
          {
            if (*(_QWORD *)(v50 + 8))
            {
              *(_QWORD *)&v64[0] = (*(uint64_t (**)(uint64_t, WebCore::RenderObject *, _QWORD))(*(_QWORD *)v49 + 448))(v49, a2, v19);
              *((_QWORD *)&v64[0] + 1) = v51;
              WebCore::LayoutRect::unite((WebCore::LayoutRect *)v63, (const WebCore::LayoutRect *)v64);
            }
          }
        }
      }
    }
    return v63[0];
  }
  return v27;
}

WebCore::LegacyInlineBox *WebCore::RenderInline::linesBoundingBox(WebCore::LegacyInlineBox **this, WebCore::RenderObject *a2)
{
  WebCore::LayoutIntegration::LineLayout *v3;
  WTF::StringImpl *v4;
  WebCore::LegacyInlineBox *v5;
  WebCore::LayoutIntegration::LineLayout *v6;
  uint64_t v7;
  WebCore::LegacyInlineBox *result;
  WebCore::LegacyInlineBox *v9;
  float v10;
  WebCore::LegacyInlineBox *v11;
  float v12;
  int v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  BOOL v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  unint64_t v29;
  float v30;

  v3 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing((WebCore::LayoutIntegration::LineLayout *)this, a2);
  if (v3)
  {
    v5 = this[7];
    if (v5)
    {
      if ((*((_WORD *)v5 + 6) & 0x40) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x194575BE4);
      }
      v6 = v3;
      if (WebCore::LayoutIntegration::LineLayout::contains(v3, (const WebCore::RenderElement *)this))
      {
        v7 = WebCore::LayoutIntegration::LineLayout::enclosingBorderBoxRectFor(v6, (const WebCore::RenderInline *)this);
        return (WebCore::LegacyInlineBox *)(((int)v7 >> 6) | (unint64_t)(v7 >> 38 << 32));
      }
    }
    return 0;
  }
  v9 = this[19];
  if (!v9)
    return 0;
  result = this[20];
  if (!result)
    return result;
  v10 = 0.0;
  v11 = this[19];
  v12 = 0.0;
  do
  {
    if (v11 == v9)
    {
      v13 = *((_WORD *)v9 + 26) & 0x800;
      if ((*((_WORD *)v9 + 26) & 0x800) != 0)
        v17 = 44;
      else
        v17 = 48;
      v12 = *(float *)((char *)v9 + v17);
      v16 = *((float *)v9 + 10);
LABEL_21:
      if (v13)
        v18 = 44;
      else
        v18 = 48;
      v10 = v16 + *(float *)((char *)v11 + v18);
      goto LABEL_25;
    }
    v13 = *((_WORD *)v11 + 26) & 0x800;
    if ((*((_WORD *)v11 + 26) & 0x800) != 0)
      v14 = 44;
    else
      v14 = 48;
    v15 = *(float *)((char *)v11 + v14);
    if (v15 < v12)
      v12 = *(float *)((char *)v11 + v14);
    v16 = *((float *)v11 + 10);
    if ((float)(v15 + v16) > v10)
      goto LABEL_21;
LABEL_25:
    v11 = (WebCore::LegacyInlineBox *)*((_QWORD *)v11 + 12);
  }
  while (v11);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    v30 = *((float *)v9 + 11);
    WebCore::LegacyInlineBox::logicalHeight(result, v4);
    v20 = v30;
  }
  else
  {
    v19 = *((float *)v9 + 12);
    WebCore::LegacyInlineBox::logicalHeight(result, v4);
    v20 = v12;
    v12 = v19;
  }
  v21 = floorf(v20);
  v22 = 2147500000.0;
  if (v21 < 2147500000.0)
  {
    v22 = -2147500000.0;
    v23 = v21 <= -2147500000.0;
    v24 = (float)(int)v21;
    if (!v23)
      v22 = v24;
  }
  v25 = floorf(v12);
  v26 = -2147500000.0;
  if (v25 > -2147500000.0)
    v26 = (float)(int)v25;
  if (v25 < 2147500000.0)
    v27 = v26;
  else
    v27 = 2147500000.0;
  if (v22 >= 2147500000.0)
  {
    v28 = 0x7FFFFFFFLL;
  }
  else if (v22 <= -2147500000.0)
  {
    v28 = 0x80000000;
  }
  else
  {
    v28 = (int)v22;
  }
  if (v27 >= 2147500000.0)
  {
    v29 = 0x7FFFFFFF00000000;
  }
  else if (v27 <= -2147500000.0)
  {
    v29 = 0x8000000000000000;
  }
  else
  {
    v29 = (unint64_t)(int)v27 << 32;
  }
  return (WebCore::LegacyInlineBox *)(v29 | v28);
}

uint64_t WebCore::RenderInline::offsetWidth(WebCore::LegacyInlineBox **this, WebCore::RenderObject *a2)
{
  int v2;
  unsigned int v3;

  WebCore::RenderInline::linesBoundingBox(this, a2);
  v3 = v2 << 6;
  if (v2 < -33554432)
    v3 = 0x80000000;
  if (v2 <= 0x1FFFFFF)
    return v3;
  else
    return 0x7FFFFFFFLL;
}

WTF::StringImpl *WebCore::ChromeClient::applyLinkDecorationFiltering@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5[6];

  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)a1 + 1480))(v5);
  WTF::URL::URL(a2, (uint64_t *)v5);
  result = v5[0];
  v5[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::RenderTable::outerBorderStart(WebCore::RenderTable *this, void *a2)
{
  unsigned int v2;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  float v34;

  v2 = *((_DWORD *)this + 31);
  if ((v2 & 4) == 0)
    return 0;
  v4 = ((v2 >> 13) & 6) - 2;
  v5 = *((_DWORD *)this + 30);
  v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v7 = v6 + 176;
  if ((v5 & 0x4000000) == 0)
    v7 = v6 + 152;
  v8 = v6 + 128;
  v9 = v6 + 104;
  if ((v5 & 0x4000000) != 0)
    v10 = v8;
  else
    v10 = v9;
  if (v4 >= 4)
    v11 = v10;
  else
    v11 = v7;
  if ((*(_BYTE *)(v11 + 20) & 0xF) != 0)
  {
    if ((*(_BYTE *)(v11 + 20) & 0xF) != 1)
    {
      v33 = *(float *)(v11 + 16);
      v34 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)
                                                                                               + 8)
                                                                                   + 40)
                                                                       + 8));
      return WebCore::CollapsedBorderValue::adjustedCollapsedBorderWidth((WebCore::CollapsedBorderValue *)((*((_DWORD *)this + 30) >> 26) & 1), v33, v34);
    }
    return 0;
  }
  v12 = *((_QWORD *)this + 34);
  if (!v12 || (v16 = *(_QWORD *)(v12 + 8)) == 0)
  {
    v13 = *((_QWORD *)this + 36);
    if (!v13 || (v16 = *(_QWORD *)(v13 + 8)) == 0)
    {
      v14 = *((_QWORD *)this + 35);
      if (!v14)
        return 0;
      v16 = *(_QWORD *)(v14 + 8);
      if (!v16)
        return 0;
    }
  }
  v17 = 0;
  v18 = 1;
  while (1)
  {
    v19 = *(_DWORD *)(v16 + 240);
    if (v17 <= v19)
      v20 = *(_DWORD *)(v16 + 240);
    else
      v20 = v17;
    v21 = v19 < 0;
    if (v19 >= 0)
      v17 = v20;
    if ((*((_BYTE *)this + 328) & 8) != 0)
      WebCore::RenderTable::recalcSections(this, a2);
    v22 = *((_QWORD *)this + 35);
    v23 = v22 ? *(_QWORD *)(v22 + 8) : 0;
    v18 &= v21;
    if (v23 == v16)
      break;
    v24 = *((_QWORD *)this + 34);
    if (v24)
      v25 = *(_QWORD *)(v24 + 8);
    else
      v25 = 0;
    if (v25 == v16)
    {
      v26 = *((unsigned __int8 *)this + 68);
      v27 = *((unsigned int *)this + 16);
    }
    else
    {
      v26 = *(unsigned __int8 *)(v16 + 51);
      v27 = *(unsigned int *)(v16 + 47);
    }
    v28 = v27 | (v26 << 32);
    if (v28 && (v16 = *(_QWORD *)(v28 + 8)) != 0)
    {
      if (v24)
      {
        if (v22)
        {
          while (*(_BYTE *)(v16 + 46) != 40 || *(_QWORD *)(v24 + 8) == v16 || *(_QWORD *)(v22 + 8) == v16)
          {
            v32 = *(unsigned int *)(v16 + 47);
            if (v32 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32))
            {
              v16 = *(_QWORD *)((v32 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32)) + 8);
              if (v16)
                continue;
            }
            goto LABEL_33;
          }
        }
        else
        {
          while (*(_BYTE *)(v16 + 46) != 40 || *(_QWORD *)(v24 + 8) == v16)
          {
            v30 = *(unsigned int *)(v16 + 47);
            if (v30 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32))
            {
              v16 = *(_QWORD *)((v30 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32)) + 8);
              if (v16)
                continue;
            }
            goto LABEL_33;
          }
        }
      }
      else if (v22)
      {
        while (*(_BYTE *)(v16 + 46) != 40 || *(_QWORD *)(v22 + 8) == v16)
        {
          v31 = *(unsigned int *)(v16 + 47);
          if (v31 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32))
          {
            v16 = *(_QWORD *)((v31 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32)) + 8);
            if (v16)
              continue;
          }
          goto LABEL_33;
        }
      }
      else
      {
        while (*(_BYTE *)(v16 + 46) != 40)
        {
          v29 = *(unsigned int *)(v16 + 47);
          if (v29 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32))
          {
            v16 = *(_QWORD *)((v29 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32)) + 8);
            if (v16)
              continue;
          }
          goto LABEL_33;
        }
      }
    }
    else
    {
LABEL_33:
      if (!v22)
        break;
      v16 = *(_QWORD *)(v22 + 8);
      if (!v16)
        break;
    }
  }
  if (v18)
    return 0;
  else
    return v17;
}

uint64_t WebCore::RenderTable::outerBorderEnd(WebCore::RenderTable *this, void *a2)
{
  unsigned int v2;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  float v34;

  v2 = *((_DWORD *)this + 31);
  if ((v2 & 4) == 0)
    return 0;
  v4 = ((v2 >> 13) & 6) - 2;
  v5 = *((_DWORD *)this + 30);
  v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v7 = v6 + 152;
  if ((v5 & 0x4000000) == 0)
    v7 = v6 + 176;
  v8 = v6 + 104;
  v9 = v6 + 128;
  if ((v5 & 0x4000000) != 0)
    v10 = v8;
  else
    v10 = v9;
  if (v4 >= 4)
    v11 = v10;
  else
    v11 = v7;
  if ((*(_BYTE *)(v11 + 20) & 0xF) != 0)
  {
    if ((*(_BYTE *)(v11 + 20) & 0xF) != 1)
    {
      v33 = *(float *)(v11 + 16);
      v34 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)
                                                                                               + 8)
                                                                                   + 40)
                                                                       + 8));
      return WebCore::CollapsedBorderValue::adjustedCollapsedBorderWidth((WebCore::CollapsedBorderValue *)((*((_DWORD *)this + 30) & 0x4000000) == 0), v33, v34);
    }
    return 0;
  }
  v12 = *((_QWORD *)this + 34);
  if (!v12 || (v16 = *(_QWORD *)(v12 + 8)) == 0)
  {
    v13 = *((_QWORD *)this + 36);
    if (!v13 || (v16 = *(_QWORD *)(v13 + 8)) == 0)
    {
      v14 = *((_QWORD *)this + 35);
      if (!v14)
        return 0;
      v16 = *(_QWORD *)(v14 + 8);
      if (!v16)
        return 0;
    }
  }
  v17 = 0;
  v18 = 1;
  while (1)
  {
    v19 = *(_DWORD *)(v16 + 244);
    if (v17 <= v19)
      v20 = *(_DWORD *)(v16 + 244);
    else
      v20 = v17;
    v21 = v19 < 0;
    if (v19 >= 0)
      v17 = v20;
    if ((*((_BYTE *)this + 328) & 8) != 0)
      WebCore::RenderTable::recalcSections(this, a2);
    v22 = *((_QWORD *)this + 35);
    v23 = v22 ? *(_QWORD *)(v22 + 8) : 0;
    v18 &= v21;
    if (v23 == v16)
      break;
    v24 = *((_QWORD *)this + 34);
    if (v24)
      v25 = *(_QWORD *)(v24 + 8);
    else
      v25 = 0;
    if (v25 == v16)
    {
      v26 = *((unsigned __int8 *)this + 68);
      v27 = *((unsigned int *)this + 16);
    }
    else
    {
      v26 = *(unsigned __int8 *)(v16 + 51);
      v27 = *(unsigned int *)(v16 + 47);
    }
    v28 = v27 | (v26 << 32);
    if (v28 && (v16 = *(_QWORD *)(v28 + 8)) != 0)
    {
      if (v24)
      {
        if (v22)
        {
          while (*(_BYTE *)(v16 + 46) != 40 || *(_QWORD *)(v24 + 8) == v16 || *(_QWORD *)(v22 + 8) == v16)
          {
            v32 = *(unsigned int *)(v16 + 47);
            if (v32 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32))
            {
              v16 = *(_QWORD *)((v32 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32)) + 8);
              if (v16)
                continue;
            }
            goto LABEL_33;
          }
        }
        else
        {
          while (*(_BYTE *)(v16 + 46) != 40 || *(_QWORD *)(v24 + 8) == v16)
          {
            v30 = *(unsigned int *)(v16 + 47);
            if (v30 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32))
            {
              v16 = *(_QWORD *)((v30 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32)) + 8);
              if (v16)
                continue;
            }
            goto LABEL_33;
          }
        }
      }
      else if (v22)
      {
        while (*(_BYTE *)(v16 + 46) != 40 || *(_QWORD *)(v22 + 8) == v16)
        {
          v31 = *(unsigned int *)(v16 + 47);
          if (v31 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32))
          {
            v16 = *(_QWORD *)((v31 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32)) + 8);
            if (v16)
              continue;
          }
          goto LABEL_33;
        }
      }
      else
      {
        while (*(_BYTE *)(v16 + 46) != 40)
        {
          v29 = *(unsigned int *)(v16 + 47);
          if (v29 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32))
          {
            v16 = *(_QWORD *)((v29 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32)) + 8);
            if (v16)
              continue;
          }
          goto LABEL_33;
        }
      }
    }
    else
    {
LABEL_33:
      if (!v22)
        break;
      v16 = *(_QWORD *)(v22 + 8);
      if (!v16)
        break;
    }
  }
  if (v18)
    return 0;
  else
    return v17;
}

BOOL WebCore::RenderImage::canHaveChildren(WebCore::RenderImage *this)
{
  return *((_BYTE *)this + 234) || *((_BYTE *)this + 235) != 0;
}

uint64_t WebCore::ImageBuffer::volatilityState(WebCore::ImageBuffer *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)this + 160))(this);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
  return result;
}

WTF *WebCore::StorageMap::getItem@<X0>(WebCore::StorageMap *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  WTF *result;
  _DWORD *v6;

  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>>,WTF::String>((uint64_t *)(*(_QWORD *)this + 8), a2, a3);
  if (result)
  {
    v6 = (_DWORD *)*((_QWORD *)result + 1);
    if (v6)
      *v6 += 2;
  }
  else
  {
    v6 = 0;
  }
  *a4 = v6;
  return result;
}

uint64_t WebCore::ShadowRoot::childTypeAllowed(uint64_t a1, unsigned int a2)
{
  return (a2 < 9) & (0x19Au >> a2);
}

uint64_t WebCore::ScrollView::platformUnobscuredContentRect(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  double v6;
  CGFloat v7;
  CGRect v9;
  CGRect v10;

  objc_msgSend(*(id *)(a1 + 40), "unobscuredContentRect");
  height = v9.size.height;
  width = v9.size.width;
  y = v9.origin.y;
  v7 = v6;
  *(float *)&v6 = v6;
  LODWORD(v1) = vcvtms_s32_f32(*(float *)&v6);
  *(float *)&v6 = v9.origin.y;
  LODWORD(v2) = vcvtms_s32_f32(*(float *)&v6);
  v9.origin.x = v7;
  CGRectGetMaxX(v9);
  v10.origin.x = v7;
  v10.origin.y = y;
  v10.size.width = width;
  v10.size.height = height;
  CGRectGetMaxY(v10);
  return v1 | (v2 << 32);
}

uint64_t WebCore::ScrollView::platformScrollbarModes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 40), "scrollingModes:vertical:", a2, a3);
}

BOOL WebCore::ScrollView::platformIsOffscreen(id *this)
{
  return objc_msgSend(this[5], "window") == 0;
}

unint64_t WebCore::ScrollView::layoutSize(WebCore::ScrollView *this)
{
  if (*((int *)this + 62) >= 1 && *((int *)this + 63) >= 1 && *((_BYTE *)this + 321))
    return *((_QWORD *)this + 31);
  else
    return WebCore::ScrollView::sizeForUnobscuredContent((id *)this, 0);
}

uint64_t WebCore::LocalFrame::preventsParentFromBeingComplete(WebCore::LocalFrame *this)
{
  uint64_t v1;
  int v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 35);
  v2 = *(_DWORD *)v1 + 1;
  *(_DWORD *)v1 = v2;
  if (*(_BYTE *)(v1 + 216))
  {
    result = 0;
  }
  else
  {
    v4 = *((_QWORD *)this + 15);
    if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
    {
      result = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 1280))(v5) ^ 1;
      v2 = *(_DWORD *)v1;
    }
    else
    {
      result = 1;
    }
  }
  if (!v2)
  {
    __break(0xC471u);
    JUMPOUT(0x194576504);
  }
  *(_DWORD *)v1 = v2 - 1;
  return result;
}

_DWORD *WTF::HashTable<std::array<char,4ul>,WTF::KeyValuePair<std::array<char,4ul>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::array<char,4ul>,int>>,WebCore::FourCharacterTagHash,WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FourCharacterTagHashTraits>::begin(_DWORD *result)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  if (!result)
    return 0;
  v2 = *(result - 1);
  v3 = &result[2 * v2];
  if (!*(result - 3))
    return &result[2 * v2];
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    while ((*result + 1) <= 1)
    {
      result += 2;
      v4 -= 8;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t WTF::WeakHashCountedSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>::contains(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;

  ++*((_DWORD *)a1 + 2);
  if (!a2)
    return 0;
  if (!*(_QWORD *)(a2 + 8))
    return 0;
  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; ++i)
  {
    v9 = *(_QWORD *)(v2 + 16 * v7);
    if (v9 != -1)
    {
      if (!v9)
        return 0;
      if (v9 == a2)
        break;
    }
    v7 = (v7 + i) & v3;
  }
  return 1;
}

uint64_t WTF::WeakHashSet<WebCore::CachedImageClient,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebCore::CachedImageClient>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;

  ++*((_DWORD *)a1 + 2);
  v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v3 = *a1;
      if (*a1)
      {
        v4 = *(_DWORD *)(v3 - 8);
        v5 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
        v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
        v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
        v8 = v4 & ((v7 >> 31) ^ v7);
        for (i = 1; ; ++i)
        {
          v10 = *(_QWORD *)(v3 + 8 * v8);
          if (!v10)
            break;
          if (v10 != -1 && v10 == v2)
            return 1;
          v8 = (v8 + i) & v4;
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::timingFunctionIsCubicTimingFunctionWithYValueOutOfRange(uint64_t result)
{
  uint64_t v1;
  double v2;
  double v4;

  if (result)
  {
    v1 = result;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 24))(result) == 1)
    {
      v2 = *(double *)(v1 + 24);
      if (v2 >= 0.0 && v2 <= 1.0)
      {
        v4 = *(double *)(v1 + 40);
        return v4 > 1.0 || v4 < 0.0;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_BYTE *WebCore::jsElementPrototypeFunction_webkitMatchesSelector(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int16x8_t a4)
{
  WTF::StringImpl *v4;
  uint64_t v6;
  uint64_t v7;
  WebCore::Element *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __n128 v12;
  int v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  JSValue v24;
  WTF::StringImpl *v25;
  int hasExceptionsAfterHandlingTraps;
  JSValue v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  int v37;
  char v38;

  v6 = *((_QWORD *)this + 7);
  v28 = v6;
  v7 = *((_QWORD *)a2 + 5);
  if ((v7 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v7 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "Element", "webkitMatchesSelector");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v6, this, v24);
  }
  v8 = *(WebCore::Element **)(v7 + 24);
  v9 = *((_QWORD *)a2 + 6);
  v35 = v9;
  if ((v9 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v9 + 5) == 2)
  {
    v10 = *(WTF::StringImpl **)(v9 + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v9, this);
      if (!v10)
        goto LABEL_9;
    }
    else if (!v10)
    {
LABEL_9:
      v30 = v10;
      goto LABEL_10;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_9;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v35, this);
LABEL_10:
  if (*(_DWORD *)(v6 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
    v11 = v30;
    if (hasExceptionsAfterHandlingTraps)
    {
      v34 = 1;
      v30 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v25);
        else
          *(_DWORD *)v11 -= 2;
      }
      v18 = 0;
      v21 = 1;
      goto LABEL_23;
    }
  }
  else
  {
    v11 = v30;
  }
  v34 = 0;
  v33 = 0;
  v29 = v11;
  WebCore::Document::selectorQueryForString(*(WebCore::Document **)(*((_QWORD *)v8 + 5) + 8), &v29, (uint64_t)&v35, a4);
  v13 = v37;
  if (v37)
  {
    if (v37 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_46;
    }
    v14 = v35;
    v4 = v36;
    v36 = 0;
    LOBYTE(v30) = v35;
    v31 = v4;
    v15 = 1;
    v32 = 1;
  }
  else
  {
    v14 = WebCore::SelectorDataList::matches((unsigned int ***)(v35 + 8), v8, v12);
    LOBYTE(v30) = v14;
    v32 = 0;
    v15 = v37;
    if (v37 == -1)
      goto LABEL_15;
  }
  ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore13SelectorQueryENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v15])(&v38, &v35);
  if (!v13)
  {
LABEL_15:
    v17 = 0;
    if ((_DWORD)v14)
      v18 = 7;
    else
      v18 = 6;
    goto LABEL_18;
  }
  LOBYTE(v35) = v14;
  v31 = 0;
  v36 = v4;
  if (!*(_QWORD *)(v6 + 16))
  {
    v27.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v14, (JSC::JSGlobalObject *)&v36);
    JSC::VM::throwException((JSC::VM *)v6, this, v27);
    v4 = v36;
  }
  v36 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 != 2)
    {
      *(_DWORD *)v4 -= 2;
      goto LABEL_42;
    }
LABEL_46:
    WTF::StringImpl::destroy(v4, v16);
    v18 = 0;
    v17 = v32;
    if (v32 == -1)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_42:
  v18 = 0;
  v17 = 1;
LABEL_18:
  off_1E3273A08[v17](&v35, &v30);
LABEL_19:
  v32 = -1;
  v20 = v29;
  v29 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = 0;
LABEL_23:
  ((void (*)(uint64_t *, uint64_t *))off_1E3272138[v21])(&v35, &v33);
  return (_BYTE *)v18;
}

_BYTE *WebCore::jsDocumentPrototypeFunction_getElementsByTagName(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  WebCore::ContainerNode *v6;
  int v7;
  JSC::VM *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  JSValue v16;
  JSC::VM *v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  int v21;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v17 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 249)
    return WebCore::throwThisTypeError((int)this, (int)&v17, "Document", "getElementsByTagName");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v16.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v16);
  }
  v6 = *(WebCore::ContainerNode **)(v5 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v20);
  v7 = v21;
  if (v21)
  {
    v11 = 0;
  }
  else
  {
    v8 = *(JSC::VM **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
    v9 = v20;
    v20 = 0;
    v18 = v9;
    WebCore::ContainerNode::getElementsByTagName(v6, (const WTF::AtomString *)&v18, (uint64_t *)&v19);
    v11 = WebCore::wrap<WebCore::HTMLCollection>((int)this, v8, (uint64_t)v19);
    v12 = v19;
    v19 = 0;
    if (v12)
    {
      if (v12[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
      else
        --v12[4];
    }
    v13 = v18;
    v18 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v10);
      else
        *(_DWORD *)v13 -= 2;
    }
    v7 = v21;
  }
  if (v7 != -1)
    ((void (*)(_DWORD **, WTF::StringImpl **))off_1E325A6F0[v7])(&v19, &v20);
  return (_BYTE *)v11;
}

uint64_t WebCore::jsMessagePortPrototypeFunction_postMessage2Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSMessagePort *a4)
{
  JSC::VM *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  WTF *v23;
  WTF::StringImpl *v24;
  int v25;
  JSC::VM *v26;
  char v27[8];
  WTF::StringImpl *v28;
  char v29;
  WTF *v30;
  WTF::StringImpl *v31;

  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v6;
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
    v7 = 10;
  else
    v7 = *((_QWORD *)a2 + 7);
  v8 = *((_QWORD *)a2 + 6);
  WebCore::convertDictionary<WebCore::StructuredSerializeOptions>((JSC::JSCell *)v7, this, (uint64_t)&v23);
  v9 = v25;
  if (!v25)
  {
    v30 = v23;
    v10 = v24;
    v23 = 0;
    v24 = 0;
    v31 = v10;
    WebCore::MessagePort::postMessage((uint64_t)a3 - 24, this, v8, (uint64_t)&v30, (WTF *)v27);
    v12 = v30;
    if (HIDWORD(v31))
    {
      v17 = 8 * HIDWORD(v31);
      do
      {
        v18 = *(_QWORD *)v12;
        if (*(_QWORD *)v12)
        {
          v19 = (uint64_t *)(v18 - 16);
          v20 = *(_QWORD *)(((v18 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v21 = *(uint64_t **)(v18 - 8);
          if (v21)
          {
            v22 = *v19;
            *v21 = *v19;
            *(_QWORD *)(v22 + 8) = v21;
            *v19 = 0;
            v19[1] = 0;
          }
          *v19 = *(_QWORD *)(v20 + 40);
          *(_QWORD *)(v20 + 40) = v19;
          *(_QWORD *)v12 = 0;
        }
        v12 = (WTF *)((char *)v12 + 8);
        v17 -= 8;
      }
      while (v17);
      v12 = v30;
    }
    if (v12)
    {
      v30 = 0;
      LODWORD(v31) = 0;
      WTF::fastFree(v12, v11);
    }
    if (!v29)
    {
      v13 = 10;
LABEL_9:
      v9 = v25;
      goto LABEL_10;
    }
    LOBYTE(v30) = v27[0];
    v15 = v28;
    v28 = 0;
    v31 = v15;
    if (!*((_QWORD *)v6 + 2))
    {
      WebCore::propagateExceptionSlowPath(this, &v26, (unsigned __int8 *)&v30);
      v15 = v31;
    }
    v31 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (v29)
    {
      v16 = v28;
      v28 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 != 2)
        {
          v13 = 0;
          *(_DWORD *)v16 -= 2;
          goto LABEL_9;
        }
        WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v11);
      }
    }
    v13 = 0;
    goto LABEL_9;
  }
  v13 = 0;
LABEL_10:
  if (v9 != -1)
    ((void (*)(char *, WTF **))off_1E32BEE68[v9])(v27, &v23);
  return v13;
}

_BYTE *WebCore::jsElementPrototypeFunction_getAttributeNames(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WTF::String *a4, __n128 a5)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF *v10;
  WTF *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF *v16;
  int v17;
  unsigned int v18;

  v6 = *((_QWORD *)a2 + 5);
  v15 = *((_QWORD *)this + 7);
  if ((v6 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v6 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v15, "Element", "getAttributeNames");
  v7 = *(_QWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x28);
  WebCore::Element::getAttributeNames(*(WebCore::SVGElement **)(v6 + 24), (unsigned __int8 *)a2, (uint64_t)a3, a4, (uint64_t)&v16, a5);
  v9 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert<WTF::String,0ul>((uint64_t)this, v7, (uint64_t)&v16);
  if (v18)
  {
    v12 = v16;
    v13 = 8 * v18;
    do
    {
      v14 = *(WTF::StringImpl **)v12;
      *(_QWORD *)v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v8);
        else
          *(_DWORD *)v14 -= 2;
      }
      v12 = (WTF *)((char *)v12 + 8);
      v13 -= 8;
    }
    while (v13);
  }
  v10 = v16;
  if (v16)
  {
    v16 = 0;
    v17 = 0;
    WTF::fastFree(v10, v8);
  }
  return (_BYTE *)v9;
}

_BYTE *WebCore::jsElementPrototypeFunction_querySelectorAll(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::ContainerNode *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t Wrapper;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  JSValue v19;
  WTF::StringImpl *v20;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v22;
  WebCore *v23;
  JSC::JSGlobalObject *v24;
  JSC::CallFrame *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  uint64_t v31;
  int v32;
  JSC::VM *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;

  v4 = *((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "Element", "querySelectorAll");
  v33 = (JSC::VM *)v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v19);
  }
  v6 = *(WebCore::ContainerNode **)(v5 + 24);
  v7 = *((_QWORD *)a2 + 6);
  v28 = v7;
  if ((v7 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v7 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v28, this);
  }
  else
  {
    v8 = *(_QWORD *)(v7 + 8);
    if ((v8 & 1) != 0)
      v8 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v7, this);
    if (v8)
      *(_DWORD *)v8 += 2;
    v34 = (WTF::StringImpl *)v8;
  }
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v9 = v34;
    if (hasExceptionsAfterHandlingTraps)
    {
      v32 = 1;
      v34 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v20);
        else
          *(_DWORD *)v9 -= 2;
      }
      Wrapper = 0;
      v16 = 1;
      goto LABEL_23;
    }
  }
  else
  {
    v9 = v34;
  }
  v32 = 0;
  v10 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v31 = 0;
  v27 = v9;
  WebCore::ContainerNode::querySelectorAll(v6, &v27, (uint64_t)&v28);
  if (!v30)
  {
    v12 = v28;
    v28 = 0;
    v34 = (WTF::StringImpl *)v12;
    Wrapper = WebCore::createWrapper(v10, (uint64_t *)&v34);
    v14 = v34;
    v34 = 0;
    if (v14)
    {
      if (*((_DWORD *)v14 + 4) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v14 + 8))(v14);
      else
        --*((_DWORD *)v14 + 4);
    }
LABEL_17:
    if (v30 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3271328[v30])(&v34, &v28);
    v30 = -1;
    v15 = v27;
    v27 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = 0;
LABEL_23:
    ((void (*)(uint64_t *, uint64_t *))off_1E3272138[v16])(&v28, &v31);
    return (_BYTE *)Wrapper;
  }
  if (v30 == 1)
  {
    LOBYTE(v34) = v28;
    v22 = v29;
    v29 = 0;
    v35 = v22;
    if (!*(_QWORD *)(v4 + 16))
    {
      WebCore::propagateExceptionSlowPath(this, &v33, (unsigned __int8 *)&v34);
      v22 = v35;
    }
    v35 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v11);
      else
        *(_DWORD *)v22 -= 2;
    }
    Wrapper = 0;
    goto LABEL_17;
  }
  v23 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsDocumentPrototypeFunction_querySelector(v23, v24, v25);
}

_BYTE *WebCore::jsDocumentPrototypeFunction_querySelector(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int16x8_t a4)
{
  uint64_t v5;
  uint64_t v6;
  WebCore::ContainerNode *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  JSC::JSGlobalObject *v11;
  WTF::StringImpl *v12;
  WebCore::Element *v13;
  unint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  JSValue v21;
  WTF::StringImpl *v22;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v24;
  WebCore *v25;
  JSC::JSGlobalObject *v26;
  JSC::CallFrame *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WebCore::JSDOMGlobalObject *v30;
  WTF::StringImpl *v31;
  int v32;
  uint64_t v33;
  int v34;
  JSC::VM *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;

  v5 = *((_QWORD *)this + 7);
  v28 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v6 + 5) != 249)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "Document", "querySelector");
  v35 = (JSC::VM *)v5;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v5, this, v21);
  }
  v7 = *(WebCore::ContainerNode **)(v6 + 24);
  v8 = *((_QWORD *)a2 + 6);
  v30 = (WebCore::JSDOMGlobalObject *)v8;
  if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v30, this);
  }
  else
  {
    v9 = *(WTF::StringImpl **)(v8 + 8);
    if ((v9 & 1) != 0)
      v9 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, this);
    if (v9)
      *(_DWORD *)v9 += 2;
    v36 = v9;
  }
  if (*(_DWORD *)(v5 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5);
    v10 = v36;
    if (hasExceptionsAfterHandlingTraps)
    {
      v34 = 1;
      v36 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v22);
        else
          *(_DWORD *)v10 -= 2;
      }
      v14 = 0;
      v18 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    v10 = v36;
  }
  v34 = 0;
  v11 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x28);
  v33 = 0;
  v29 = v10;
  WebCore::ContainerNode::querySelector(v7, &v29, (uint64_t)&v30, a4);
  if (!v32)
  {
    if (v30)
    {
      v14 = WebCore::toJS(this, v11, v30, v13);
      v15 = 0;
    }
    else
    {
      v15 = 0;
      v14 = 2;
    }
LABEL_16:
    ((void (*)(WTF::StringImpl **, WebCore::JSDOMGlobalObject **))off_1E32695A0[v15])(&v36, &v30);
    v32 = -1;
    v17 = v29;
    v29 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = 0;
LABEL_20:
    ((void (*)(WebCore::JSDOMGlobalObject **, uint64_t *))off_1E325A258[v18])(&v30, &v33);
    return (_BYTE *)v14;
  }
  if (v32 == 1)
  {
    LOBYTE(v36) = (_BYTE)v30;
    v24 = v31;
    v31 = 0;
    v37 = v24;
    if (!*(_QWORD *)(v5 + 16))
    {
      WebCore::propagateExceptionSlowPath(this, &v35, (unsigned __int8 *)&v36);
      v24 = v37;
    }
    v37 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v12);
      else
        *(_DWORD *)v24 -= 2;
    }
    v14 = 0;
    v15 = 1;
    goto LABEL_16;
  }
  v25 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsStoragePrototypeFunction_getItem(v25, v26, v27);
}

_BYTE *WebCore::jsStoragePrototypeFunction_getItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v5;
  JSC::JSGlobalObject *v6;
  JSC::VM *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unsigned int v22;
  JSValue v24;
  WTF::StringImpl *v25;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v27;
  uint64_t v28;
  int v29;
  WTF::StringImpl *v30;
  uint64_t v31;

  v27 = *((_QWORD *)this + 7);
  v5 = JSC::jsDynamicCast<WebCore::JSStorage *>(*((_QWORD *)a2 + 5));
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "Storage", "getItem");
  v7 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v6);
    return (_BYTE *)JSC::VM::throwException(v7, this, v24);
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *((_QWORD *)a2 + 6);
  v31 = v9;
  if ((v9 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v9 + 5) == 2)
  {
    v10 = *(WTF::StringImpl **)(v9 + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v9, this);
      if (!v10)
        goto LABEL_8;
    }
    else if (!v10)
    {
LABEL_8:
      v30 = v10;
      goto LABEL_9;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_8;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v31, this);
LABEL_9:
  if (*((_DWORD *)v7 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v7);
    v11 = v30;
    if (hasExceptionsAfterHandlingTraps)
    {
      v29 = 1;
      v30 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v25);
        else
          *(_DWORD *)v11 -= 2;
      }
      v16 = 0;
      v20 = 1;
      goto LABEL_33;
    }
  }
  else
  {
    v11 = v30;
  }
  v29 = 0;
  v28 = 0;
  v30 = v11;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(v8 + 24) + 32))(&v31, *(_QWORD *)(v8 + 24), &v30);
  v12 = (WTF::StringImpl *)v31;
  if (v31)
  {
    v13 = *((_QWORD *)this + 7);
    v14 = (uint64_t *)(v13 + 41968);
    v15 = *(_DWORD *)(v31 + 4);
    if (v15)
    {
      if (v15 != 1)
      {
LABEL_14:
        v16 = *(_QWORD *)(v13 + 64760);
        if (!v16 || v31 != *(_QWORD *)(v16 + 8))
        {
          v16 = JSC::jsStringWithCacheSlowCase();
          v12 = (WTF::StringImpl *)v31;
          v31 = 0;
          if (!v12)
            goto LABEL_29;
LABEL_27:
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v12);
          else
            *(_DWORD *)v12 -= 2;
          goto LABEL_29;
        }
LABEL_26:
        v31 = 0;
        goto LABEL_27;
      }
      v17 = *(unsigned __int8 **)(v31 + 8);
      if ((*(_BYTE *)(v31 + 16) & 4) != 0)
      {
        v18 = *v17;
      }
      else
      {
        v22 = *(unsigned __int16 *)v17;
        if (v22 > 0xFF)
          goto LABEL_14;
        v18 = v22;
      }
      v14 = (uint64_t *)(v13 + 8 * v18 + 42216);
    }
    v16 = *v14;
    goto LABEL_26;
  }
  v31 = 0;
  v16 = 2;
LABEL_29:
  v19 = v30;
  v30 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v12);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = 0;
LABEL_33:
  ((void (*)(uint64_t *, uint64_t *))off_1E33088B8[v20])(&v31, &v28);
  return (_BYTE *)v16;
}

_BYTE *WebCore::jsElementPrototypeFunction_matches(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int16x8_t a4)
{
  WTF::StringImpl *v4;
  uint64_t v6;
  uint64_t v7;
  WebCore::Element *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __n128 v12;
  int v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  JSValue v24;
  WTF::StringImpl *v25;
  int hasExceptionsAfterHandlingTraps;
  JSValue v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  int v37;
  char v38;

  v6 = *((_QWORD *)this + 7);
  v28 = v6;
  v7 = *((_QWORD *)a2 + 5);
  if ((v7 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v7 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "Element", "matches");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v6, this, v24);
  }
  v8 = *(WebCore::Element **)(v7 + 24);
  v9 = *((_QWORD *)a2 + 6);
  v35 = v9;
  if ((v9 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v9 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v35, this);
  }
  else
  {
    v10 = *(WTF::StringImpl **)(v9 + 8);
    if ((v10 & 1) != 0)
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v9, this);
    if (v10)
      *(_DWORD *)v10 += 2;
    v30 = v10;
  }
  if (*(_DWORD *)(v6 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
    v11 = v30;
    if (hasExceptionsAfterHandlingTraps)
    {
      v34 = 1;
      v30 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v25);
        else
          *(_DWORD *)v11 -= 2;
      }
      v18 = 0;
      v21 = 1;
      goto LABEL_24;
    }
  }
  else
  {
    v11 = v30;
  }
  v34 = 0;
  v33 = 0;
  v29 = v11;
  WebCore::Document::selectorQueryForString(*(WebCore::Document **)(*((_QWORD *)v8 + 5) + 8), &v29, (uint64_t)&v35, a4);
  v13 = v37;
  if (v37)
  {
    if (v37 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_45;
    }
    v14 = v35;
    v4 = v36;
    v36 = 0;
    LOBYTE(v30) = v35;
    v31 = v4;
    v15 = 1;
    v32 = 1;
  }
  else
  {
    v14 = WebCore::SelectorDataList::matches((unsigned int ***)(v35 + 8), v8, v12);
    LOBYTE(v30) = v14;
    v32 = 0;
    v15 = v37;
    if (v37 == -1)
      goto LABEL_16;
  }
  ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore13SelectorQueryENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v15])(&v38, &v35);
  if (!v13)
  {
LABEL_16:
    v17 = 0;
    if ((_DWORD)v14)
      v18 = 7;
    else
      v18 = 6;
    goto LABEL_19;
  }
  LOBYTE(v35) = v14;
  v31 = 0;
  v36 = v4;
  if (!*(_QWORD *)(v6 + 16))
  {
    v27.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v14, (JSC::JSGlobalObject *)&v36);
    JSC::VM::throwException((JSC::VM *)v6, this, v27);
    v4 = v36;
  }
  v36 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 != 2)
    {
      *(_DWORD *)v4 -= 2;
      goto LABEL_41;
    }
LABEL_45:
    WTF::StringImpl::destroy(v4, v16);
    v18 = 0;
    v17 = v32;
    if (v32 == -1)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_41:
  v18 = 0;
  v17 = 1;
LABEL_19:
  off_1E3273A08[v17](&v35, &v30);
LABEL_20:
  v32 = -1;
  v20 = v29;
  v29 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = 0;
LABEL_24:
  ((void (*)(uint64_t *, uint64_t *))off_1E3272138[v21])(&v35, &v33);
  return (_BYTE *)v18;
}

_BYTE *WebCore::jsNodePrototypeFunction_cloneNode(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  int v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Document *v13;
  unint64_t v14;
  uint64_t v15;
  WTF *v16;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  BOOL v23;
  _BOOL4 v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  WTF *v28;
  uint64_t v29;
  _BYTE v30[40];
  uint64_t v31;
  JSC::JSGlobalObject *v32;
  JSC::VM *v33;
  uint64_t v34;
  WTF::StringImpl *v35;

  v4 = *((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) <= 0xEFu)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "Node", "cloneNode");
  v33 = (JSC::VM *)v4;
  v28 = (WTF *)v30;
  v29 = 4;
  v30[32] = 0;
  v31 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v32 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v28;
  v6 = *(_QWORD *)(v5 + 24);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v7 = 10;
LABEL_7:
    v9 = v7 == 7;
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 6);
  if (v7 >= 0xFFFE000000000000)
  {
    v9 = v7 != 0;
  }
  else
  {
    *(_QWORD *)&v8 = v7 - 0x2000000000000;
    if (v7 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v23 = v8 <= 0.0;
      v24 = v8 < 0.0;
      v9 = !v23 || v24;
      goto LABEL_8;
    }
    if ((v7 & 0xFFFE000000000002) != 0)
      goto LABEL_7;
    v9 = JSC::JSCell::toBoolean(*((_QWORD *)a2 + 6), (uint64_t)this);
  }
LABEL_8:
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
  {
    v14 = 0;
  }
  else
  {
    if ((*(_WORD *)(v6 + 28) & 0x80) != 0)
    {
      LOBYTE(v26[0]) = 6;
      v26[1] = 0;
      v27 = 1;
      LOBYTE(v34) = 6;
      v35 = 0;
      if (*(_QWORD *)(v4 + 16))
      {
        v22 = 0;
      }
      else
      {
        WebCore::propagateExceptionSlowPath(this, &v33, (unsigned __int8 *)&v34);
        v22 = v35;
      }
      v35 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, a2);
        else
          *(_DWORD *)v22 -= 2;
      }
      v14 = 0;
    }
    else
    {
      v10 = *(JSC::VM **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
      if (v9)
        v11 = 2;
      else
        v11 = 0;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 136))(v26, v6, *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8), v11);
      v27 = 0;
      v12 = v26[0];
      v26[0] = 0;
      v34 = v12;
      v14 = WebCore::toJSNewlyCreated((WebCore::DOMWrapperWorld **)this, v10, (WebCore::JSDOMGlobalObject *)&v34, v13);
      v15 = v34;
      v34 = 0;
      if (v15)
      {
        if (*(_DWORD *)(v15 + 24) == 2)
        {
          if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v15, a2);
        }
        else
        {
          *(_DWORD *)(v15 + 24) -= 2;
        }
      }
    }
    if (v27 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E32C16A8[v27])(&v34, v26);
  }
  if (HIDWORD(v29))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v28, v32);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v31;
    if (HIDWORD(v29))
    {
      v19 = v28;
      v20 = 8 * HIDWORD(v29);
      do
      {
        v21 = *(_QWORD *)v19;
        *(_QWORD *)v19 = 0;
        if (v21)
        {
          if (*(_DWORD *)(v21 + 24) == 2)
          {
            if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v21, a2);
          }
          else
          {
            *(_DWORD *)(v21 + 24) -= 2;
          }
        }
        v19 = (WTF *)((char *)v19 + 8);
        v20 -= 8;
      }
      while (v20);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v31;
  }
  v16 = v28;
  if (v30 != (_BYTE *)v28 && v28 != 0)
  {
    v28 = 0;
    LODWORD(v29) = 0;
    WTF::fastFree(v16, a2);
  }
  return (_BYTE *)v14;
}

void WebCore::createImageSourceThumbnailOptions(WebCore *this)
{
  __CFDictionary *v2;
  const void *v3;

  WebCore::createImageSourceOptions(this);
  v2 = *(__CFDictionary **)this;
  v3 = (const void *)*MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(v2, (const void *)*MEMORY[0x1E0CBD250], (const void *)*MEMORY[0x1E0C9AE50]);
  CFDictionarySetValue(v2, (const void *)*MEMORY[0x1E0CBD178], v3);
}

uint64_t WebCore::animationHasStepsTimingFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t i;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 96);
  if (v4 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4) == 2)
    return 1;
  v5 = *(_QWORD *)(a2 + 104);
  if (v5)
    v6 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) == 2;
  else
    v6 = 0;
  v7 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v7)
  {
    for (i = 0; i < v7; ++i)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8 * i) + 16);
      if (v9)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9) == 2)
          return 1;
        v7 = *(unsigned int *)(a1 + 12);
      }
      else if (v6)
      {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t WebCore::jsCSSStyleDeclaration_cssFloat(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 144))(&v7, *(_QWORD *)(a2 + 24), 123);
  v4 = WebCore::toJS<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>,WTF::AtomString>(*(_QWORD *)(a1 + 56), (uint64_t)v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v4;
}

BOOL WebCore::setJSHTMLInputElement_checked(uint64_t a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  unsigned __int8 *v9;
  double v10;
  int v11;
  uint64_t v12;
  JSC::VM *v15;

  v4 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSHTMLInputElement::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSHTMLInputElement::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(unsigned __int8 **)(a2 + 24);
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = a3 != 0;
  }
  else
  {
    *(_QWORD *)&v10 = a3 - 0x2000000000000;
    if (a3 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v11 = v10 > 0.0 || v10 < 0.0;
    }
    else if ((a3 & 0xFFFE000000000002) != 0)
    {
      v11 = a3 == 7;
    }
    else
    {
      v15 = v4;
      v11 = JSC::JSCell::toBoolean(a3, a1);
      v4 = v15;
    }
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  v12 = 1;
  WebCore::HTMLInputElement::setChecked(v9, v11);
  return v12;
}

unint64_t WebCore::jsPerformanceNavigation_type(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  int v10;
  unint64_t v11;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  if (!v2)
    return 0xFFFE000000000000;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0xFFFE000000000000;
  v4 = *(_QWORD *)(v3 + 72);
  if (!v4)
    return 0xFFFE000000000000;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0xFFFE000000000000;
  if (*(_BYTE *)(v5 + 178))
  {
    result = 105;
    __break(0xC471u);
    return result;
  }
  v6 = *(_QWORD *)(v5 + 240);
  if (!v6)
    return 0xFFFE000000000000;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return 0xFFFE000000000000;
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 280) + 88);
  result = 0xFFFE000000000000;
  if (v8)
  {
    v10 = *(unsigned __int8 *)(v8 + 2500);
    v11 = 0xFFFE000000000002;
    if (v10 != 2)
      v11 = 0xFFFE000000000000;
    if (v10 == 3)
      return 0xFFFE000000000001;
    else
      return v11;
  }
  return result;
}

uint64_t WebCore::jsHTMLOptionElement_selected(uint64_t a1, uint64_t a2)
{
  if (WebCore::HTMLOptionElement::selected(*(_QWORD *)(a2 + 24), 1u))
    return 7;
  else
    return 6;
}

void WebCore::imageSourceThumbnailOptions(_QWORD *a1, int a2, int *a3)
{
  CFMutableDictionaryRef v6;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v8;

  std::call_once[abi:sn180100]<WebCore::imageSourceThumbnailOptions(WebCore::SubsamplingLevel,WebCore::IntSize const&)::$_0>((uint64_t)&v8);
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)WebCore::imageSourceThumbnailOptions(WebCore::SubsamplingLevel,WebCore::IntSize const&)::options);
  WebCore::appendImageSourceOptions(&v8, &MutableCopy, a2, a3);
  v6 = MutableCopy;
  *a1 = v8;
  if (v6)
    CFRelease(v6);
}

unint64_t WebCore::jsHTMLElement_offsetHeight(uint64_t a1, uint64_t a2)
{
  return WebCore::Element::offsetHeight(*(WebCore::Element **)(a2 + 24)) | 0xFFFE000000000000;
}

uint64_t WebCore::animationCanBeAccelerated(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;

  if (*(double *)(a2 + 72) != 1.0)
    return 0;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 2) != 0)
    return 0;
  v3 = (v2 & 0xC00) == 0 && (*(_QWORD *)&v2 & 0x5F200) == 0;
  v4 = *(_QWORD *)&v2 & 0x3A0000;
  v5 = v3 && v4 == 0;
  if (v5 || *(double *)(a2 + 64) == 0.0 && *(double *)(a2 + 56) <= 0.0 || *(_DWORD *)(a1 + 12) < 2u)
    return 0;
  else
    return WebCore::animationHasStepsTimingFunction(a1, a2) ^ 1;
}

unint64_t WebCore::jsPerformance_navigation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF *v3;

  v2 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v3 = (WTF *)WebCore::Performance::navigation((WebCore::Performance *)(*(_QWORD *)(a2 + 24) - 24));
  if (v3)
    return WebCore::wrap<WebCore::PerformanceNavigation>(v2, v3);
  else
    return 2;
}

uint64_t WebCore::jsHTMLInputElement_value(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v16;
  unsigned int v17;
  WTF::StringImpl *v18;

  v3 = *(_QWORD **)(a2 + 24);
  v4 = (_DWORD *)v3[30];
  if (v4[3] != 64)
  {
    v5 = (WTF::StringImpl *)v3[27];
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      v18 = v5;
    }
    else
    {
      v6 = v3[13];
      if (v6
        && ((v7 = *(_DWORD *)(v6 + 4), (v7 & 1) != 0)
          ? (v8 = *(_QWORD *)(v6 + 40), LODWORD(v9) = *(_DWORD *)(v6 + 52))
          : (v8 = v6 + 32, LODWORD(v9) = v7 >> 5),
            (_DWORD)v9))
      {
        v9 = v9;
        v10 = (_QWORD *)(v8 + 8);
        while (1)
        {
          v11 = *(v10 - 1);
          if (v11 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            break;
          }
          v10 += 2;
          if (!--v9)
          {
            v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      }
      if (!*v10)
        goto LABEL_13;
      (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v4 + 296))(&v18);
      v5 = v18;
      if (!v18)
      {
        v18 = 0;
        v4 = (_DWORD *)v3[30];
LABEL_13:
        (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v4 + 64))(&v18);
        goto LABEL_14;
      }
    }
    v12 = *(_QWORD *)(a1 + 56);
    goto LABEL_15;
  }
  WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v4, &v18);
LABEL_14:
  v5 = v18;
  v12 = *(_QWORD *)(a1 + 56);
  if (!v18)
  {
LABEL_31:
    v14 = *(_QWORD *)(v12 + 41968);
LABEL_20:
    v18 = 0;
    if (!v5)
      return v14;
    goto LABEL_21;
  }
LABEL_15:
  v13 = *((_DWORD *)v5 + 1);
  if (!v13)
    goto LABEL_31;
  if (v13 == 1)
  {
    v16 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
    if ((*((_BYTE *)v5 + 16) & 4) != 0)
    {
      v17 = *v16;
    }
    else
    {
      v17 = *(unsigned __int16 *)v16;
      if (v17 > 0xFF)
        goto LABEL_17;
      v17 = v17;
    }
    v14 = *(_QWORD *)(v12 + 8 * v17 + 42216);
    goto LABEL_35;
  }
LABEL_17:
  v14 = *(_QWORD *)(v12 + 64760);
  if (!v14 || v5 != *(WTF::StringImpl **)(v14 + 8))
  {
    v14 = JSC::jsStringWithCacheSlowCase();
    v5 = v18;
    goto LABEL_20;
  }
LABEL_35:
  v18 = 0;
LABEL_21:
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, v5);
  else
    *(_DWORD *)v5 -= 2;
  return v14;
}

uint64_t WebCore::jsDocument_activeElement(WebCore *a1, uint64_t a2)
{
  uint64_t v3;
  JSC::JSGlobalObject *v4;
  uint64_t v5;
  WebCore::Element *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v5 = WebCore::TreeScope::focusedElementInScope(*(WebCore::TreeScope **)(v3 + 40));
  if (v5)
    return WebCore::toJS(a1, v4, (WebCore::JSDOMGlobalObject *)v5, v6);
  v8 = *(_QWORD *)(v3 + 1272);
  if (v8)
  {
    if ((*(_WORD *)(v8 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      v5 = *(_QWORD *)(v8 + 80);
      if (v5)
      {
        while ((*(_WORD *)(v5 + 28) & 0x10) == 0)
        {
          v5 = *(_QWORD *)(v5 + 56);
          if (!v5)
            return 2;
        }
        v9 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
        v10 = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24);
        if (v10 == v9)
          return WebCore::toJS(a1, v4, (WebCore::JSDOMGlobalObject *)v5, v6);
LABEL_11:
        if (v10 == *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
          return WebCore::toJS(a1, v4, (WebCore::JSDOMGlobalObject *)v5, v6);
        while (1)
        {
          v5 = *(_QWORD *)(v5 + 56);
          if (!v5)
            break;
          if ((*(_WORD *)(v5 + 28) & 0x10) != 0)
          {
            v10 = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24);
            if (v10 != v9)
              goto LABEL_11;
            return WebCore::toJS(a1, v4, (WebCore::JSDOMGlobalObject *)v5, v6);
          }
        }
      }
    }
  }
  return 2;
}

unint64_t WebCore::jsDOMRectReadOnly_height(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 40);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

void WebCore::appendImageSourceOptions(CFMutableDictionaryRef *a1, CFMutableDictionaryRef *a2, int a3, int *a4)
{
  CFMutableDictionaryRef v7;
  CFMutableDictionaryRef v8;
  CFMutableDictionaryRef v9;
  CFMutableDictionaryRef v10;

  if (a3)
  {
    WebCore::appendImageSourceOption(&v10, a2, a3);
    v9 = *a2;
    *a2 = v10;
    if (v9)
      CFRelease(v9);
  }
  WebCore::appendImageSourceOption(&v10, a2, *a4, a4[1]);
  v7 = v10;
  v8 = *a2;
  *a2 = v10;
  if (v8)
  {
    CFRelease(v8);
    v7 = *a2;
  }
  *a2 = 0;
  *a1 = v7;
}

uint64_t WebCore::jsMutationRecord_target(WebCore::DOMWrapperWorld **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::Document *v5;
  _BYTE *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  unint64_t Wrapper;
  WebCore::Node *v18;
  WebCore::Node *v19;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24));
  if (!v4)
    return 2;
  if (*(_BYTE *)(v3 + 3328))
  {
    v7 = *(_BYTE **)(v4 + 8);
    if (v7)
    {
LABEL_6:
      if ((v7[8] & 3) == 0 && *(_QWORD *)v7)
        return *(_QWORD *)v7;
    }
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 + 3320) + 32);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 - 8);
      v10 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v8 + 16 * v13);
      if (v14 == v4)
      {
LABEL_14:
        v7 = *(_BYTE **)(v8 + 16 * v13 + 8);
        if (v7)
          goto LABEL_6;
      }
      else
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v8 + 16 * v13);
          ++v15;
          if (v14 == v4)
            goto LABEL_14;
        }
      }
    }
  }
  *(_DWORD *)(v4 + 24) += 2;
  v19 = (WebCore::Node *)v4;
  Wrapper = WebCore::createWrapper(a1, (JSC::VM *)v3, (WebCore::JSDOMGlobalObject *)&v19, v5);
  v18 = v19;
  v19 = 0;
  if (v18)
  {
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v18, v16);
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
  }
  return Wrapper;
}

unint64_t WebCore::jsHTMLCollection_length(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24));
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsDOMRectReadOnly_width(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 32);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

void WebCore::appendImageSourceOption(CFMutableDictionaryRef *a1, CFMutableDictionaryRef *a2, int a3, int a4)
{
  int v6;
  CFNumberRef v7;
  CFMutableDictionaryRef v8;
  int valuePtr;

  if (a3 <= a4)
    v6 = a4;
  else
    v6 = a3;
  valuePtr = v6;
  v7 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(*a2, (const void *)*MEMORY[0x1E0CBD2A0], v7);
  v8 = *a2;
  *a2 = 0;
  *a1 = v8;
  if (v7)
    CFRelease(v7);
}

BOOL WebCore::setJSElement_className(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  _BOOL8 v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  WTF::StringImpl *v28;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) != 241)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(WTF::StringImpl **)(a2 + 24);
  v23 = (WTF *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v5 = v22;
  v6 = v22 == 0;
  if (!v22)
  {
    v7 = v21;
    v21 = 0;
    v28 = v7;
    v8 = *((_QWORD *)v3 + 13);
    if (v8
      && ((v9 = *(_DWORD *)(v8 + 4), (v9 & 1) != 0)
        ? (v10 = *(uint64_t **)(v8 + 40), v11 = *(_DWORD *)(v8 + 52))
        : (v10 = (uint64_t *)(v8 + 32), v11 = v9 >> 5),
          v11))
    {
      v12 = 0;
      while (1)
      {
        v13 = *v10;
        if (*v10 == WebCore::HTMLNames::classAttr
          || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
          && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
        {
          break;
        }
        ++v12;
        v10 += 2;
        if (v11 == v12)
          goto LABEL_12;
      }
    }
    else
    {
LABEL_12:
      v12 = 0xFFFFFFFFLL;
    }
    WebCore::Element::setAttributeInternal(v3, v12, (WebCore::TreeScope *)&WebCore::HTMLNames::classAttr, &v28, 0);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v5 = v22;
  }
  if (v5 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v5])(&v28, &v21);
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v18 = v23;
      v19 = 8 * HIDWORD(v24);
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20, v4);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v15 = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v15, v4);
  }
  return v6;
}

uint64_t WebCore::jsNavigator_standalone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 64);
  if (!v2)
    return 6;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 6;
  v4 = *(_QWORD *)(v3 + 72);
  if (!v4)
    return 6;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 6;
  if (*(_BYTE *)(v5 + 178))
  {
    result = 105;
    __break(0xC471u);
    return result;
  }
  v6 = *(_QWORD *)(v5 + 240);
  if (!v6)
    return 6;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return 6;
  if ((*(_QWORD *)(*(_QWORD *)(v7 + 136) + 696) & 0x80000000000) != 0)
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsNavigator_languages(JSC *a1, _DWORD *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF *v10;
  WTF *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(16 * (*a2 & 0xFFFFFFFE) + 0x28);
  WTF::defaultLanguage();
  v4 = (WTF *)WTF::fastMalloc((WTF *)8);
  v16 = 1;
  v15 = v4;
  v6 = v18;
  if (v18)
    *(_DWORD *)v18 += 2;
  *(_QWORD *)v4 = v6;
  v17 = 1;
  v7 = v18;
  v18 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v9 = WebCore::JSConverter<WebCore::IDLFrozenArray<WebCore::IDLDOMString>>::convert<WTF::String,0ul>(a1, v3, (uint64_t)&v15);
  if (v17)
  {
    v12 = v15;
    v13 = 8 * v17;
    do
    {
      v14 = *(WTF::StringImpl **)v12;
      *(_QWORD *)v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v8);
        else
          *(_DWORD *)v14 -= 2;
      }
      v12 = (WTF *)((char *)v12 + 8);
      v13 -= 8;
    }
    while (v13);
  }
  v10 = v15;
  if (v15)
  {
    v15 = 0;
    v16 = 0;
    WTF::fastFree(v10, v8);
  }
  return v9;
}

uint64_t WebCore::jsNavigator_clipboard(int a1, uint64_t a2)
{
  uint64_t v3;
  JSC::VM *v4;
  const char **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  bmalloc::api *v12;
  void *v13;
  unsigned __int8 *v14[2];

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v14[0] = "NavigatorClipboard";
  v14[1] = (unsigned __int8 *)19;
  v5 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)(v3 + 72), v14);
  if (!v5 || (v6 = (uint64_t)v5[2]) == 0)
  {
    v6 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v6 = off_1E3352E48;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = v3;
    v14[0] = (unsigned __int8 *)v6;
    WebCore::Supplement<WebCore::Navigator>::provideTo((uint64_t *)(v3 + 72), "NavigatorClipboard", (unsigned __int8 *)0x13, (const char **)v14);
    v7 = v14[0];
    v14[0] = 0;
    if (v7)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v7 + 8))(v7);
  }
  WebCore::NavigatorClipboard::clipboard(v6, (uint64_t *)v14);
  v8 = v14[0];
  if (!v14[0])
    return 2;
  v10 = WebCore::wrap<WebCore::Clipboard>(a1, v4, (uint64_t)v14[0]);
  if (*((_DWORD *)v8 + 6) == 1)
  {
    WebCore::Clipboard::~Clipboard((WebCore::Clipboard *)v8, v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v8 + 6);
  }
  return v10;
}

uint64_t WebCore::jsMutationRecord_type(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;

  v3 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24));
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *v3;
  if (!*v3)
    return *(_QWORD *)(v4 + 41968);
  v6 = *(_DWORD *)(v5 + 4);
  if (!v6)
    return *(_QWORD *)(v4 + 41968);
  if (v6 == 1)
  {
    v9 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v10 = *(unsigned __int16 *)v9;
      if (v10 > 0xFF)
        goto LABEL_4;
      v10 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v10 + 42216);
  }
LABEL_4:
  v7 = *(_QWORD *)(v4 + 64760);
  if (!v7 || v5 != *(_QWORD *)(v7 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v7;
}

uint64_t WebCore::jsDocument_compatMode(uint64_t a1)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v10;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = *(_QWORD *)(a1 + 56);
  if (!v10)
    return *(_QWORD *)(v3 + 41968);
  v4 = *((_DWORD *)v10 + 1);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v5 = *(_QWORD *)(v3 + 64760);
      if (!v5 || v10 != *(WTF::StringImpl **)(v5 + 8))
        v5 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_7;
    }
    v7 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
    if ((*((_BYTE *)v10 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    v5 = *(_QWORD *)(v3 + 8 * v8 + 42216);
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 41968);
  }
LABEL_7:
  if (*(_DWORD *)v10 == 2)
    WTF::StringImpl::destroy(v10, v2);
  else
    *(_DWORD *)v10 -= 2;
  return v5;
}

unint64_t WebCore::jsPerformance_timing(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF *v3;

  v2 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v3 = (WTF *)WebCore::Performance::timing((WebCore::Performance *)(*(_QWORD *)(a2 + 24) - 24));
  if (v3)
    return WebCore::wrap<WebCore::PerformanceTiming>(v2, v3);
  else
    return 2;
}

uint64_t WebCore::jsNavigator_language(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v10;

  WTF::defaultLanguage();
  v2 = *(_QWORD *)(a1 + 56);
  v3 = v10;
  if (!v10 || (v4 = *((_DWORD *)v10 + 1)) == 0)
  {
    v5 = *(_QWORD *)(v2 + 41968);
LABEL_7:
    if (!v3)
      return v5;
    goto LABEL_15;
  }
  if (v4 != 1)
    goto LABEL_4;
  v6 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
  if ((*((_BYTE *)v10 + 16) & 4) != 0)
  {
    v7 = *v6;
LABEL_14:
    v5 = *(_QWORD *)(v2 + 8 * v7 + 42216);
    goto LABEL_15;
  }
  v8 = *(unsigned __int16 *)v6;
  if (v8 <= 0xFF)
  {
    v7 = v8;
    goto LABEL_14;
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v10 != *(WTF::StringImpl **)(v5 + 8))
  {
    v5 = JSC::jsStringWithCacheSlowCase();
    v3 = v10;
    goto LABEL_7;
  }
LABEL_15:
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v3);
  else
    *(_DWORD *)v3 -= 2;
  return v5;
}

unint64_t WebCore::jsElement_attributes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = WebCore::Element::attributes(*(WebCore::Element **)(a2 + 24));
  return WebCore::wrap<WebCore::NamedNodeMap>(a1, v3, v4);
}

uint64_t WebCore::jsElement_outerHTML(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WebCore::TrustedHTML *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::Element::outerHTML(*(WebCore::Element **)(a2 + 24), &v9);
  v6 = WebCore::toJS<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedHTML>,WebCore::IDLLegacyNullToEmptyStringAdaptor<WebCore::IDLDOMString>>,WTF::String>(a1, v3, (uint64_t *)&v9, v4);
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v6;
}

uint64_t WebCore::jsElement_innerHTML(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WebCore::TrustedHTML *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WebCore *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  _BYTE v14[40];
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD v18[5];

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::Element::innerHTML(*(WebCore::Element **)(a2 + 24), &v11);
  v4 = v11;
  v11 = 0;
  v12 = v4;
  v13 = 1;
  v17 = 1;
  LOBYTE(v15) = 0;
  v16 = 0;
  v18[0] = &v17;
  v18[1] = &v15;
  v18[2] = a1;
  v18[3] = v3;
  v18[4] = &v12;
  _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_11TrustedHTMLEEENS_33IDLLegacyNullToEmptyStringAdaptorINS_12IDLDOMStringEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrIS5_NSJ_12RawPtrTraitsIS5_EENSJ_21DefaultRefDerefTraitsIS5_EEEENSJ_6StringEEEEEUlTyvE_JNSH_17integral_constantIlLl0EEENSV_IlLl1EEEEEET_SY_((uint64_t)v18, v5, (uint64_t)v14);
  if (v16)
  {
    v7 = v15;
    if (v13 != -1)
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E3273B28[v13])(v18, &v12);
    v8 = v11;
    v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    return v7;
  }
  else
  {
    v10 = (WebCore *)std::__throw_bad_optional_access[abi:sn180100]();
    return WebCore::dummyPDFPluginNames(v10);
  }
}

void WebCore::dummyPDFPluginNames(WebCore *this)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = v7;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = v7;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11 = v7;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = v7;
    WTF::NeverDestroyed<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::AnyThreadsAccessTraits>::NeverDestroyed<std::initializer_list<WTF::String>>((uint64_t)&v8, 5uLL);
    v2 = v12;
    v12 = 0;
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, v1);
      else
        *(_DWORD *)v2 -= 2;
    }
    v3 = v11;
    v11 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, v1);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = v10;
    v10 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v1);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = v9;
    v9 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v1);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = v8;
    v8 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v1);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
}

uint64_t WebCore::jsNode_textContent(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, WTF::StringBuilder *a6)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;

  WebCore::Node::textContent(*(WebCore::Node **)(a2 + 24), 0, a6, &v17, a3);
  v8 = v17;
  if (!v17)
    return 2;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = (uint64_t *)(v9 + 41968);
  v11 = *((_DWORD *)v17 + 1);
  if (v11)
  {
    if (v11 != 1)
    {
LABEL_4:
      v12 = *(_QWORD *)(v9 + 64760);
      if (!v12 || v17 != *(WTF::StringImpl **)(v12 + 8))
        v12 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_7;
    }
    v14 = (unsigned __int8 *)*((_QWORD *)v17 + 1);
    if ((*((_BYTE *)v17 + 16) & 4) != 0)
    {
      v15 = *v14;
    }
    else
    {
      v16 = *(unsigned __int16 *)v14;
      if (v16 > 0xFF)
        goto LABEL_4;
      v15 = v16;
    }
    v10 = (uint64_t *)(v9 + 8 * v15 + 42216);
  }
  v12 = *v10;
LABEL_7:
  if (*(_DWORD *)v8 == 2)
    WTF::StringImpl::destroy(v8, v7);
  else
    *(_DWORD *)v8 -= 2;
  return v12;
}

uint64_t WebCore::jsNode_lastChild(WebCore::DOMWrapperWorld **a1, uint64_t a2, WebCore::Document *a3)
{
  WebCore::Document *v3;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  JSC::VM *v8;
  uint64_t v9;
  unint64_t Wrapper;
  uint64_t OutOfLineCachedWrapper;
  void *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;

  v3 = a3;
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) <= 0xEFu)
    return JSC::throwDOMAttributeGetterTypeError();
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
    v6 = (*(_WORD *)(v5 + 28) & 4) == 0;
  else
    v6 = 1;
  if (v6)
    return 2;
  v7 = *(_QWORD *)(v5 + 88);
  if (!v7)
    return 2;
  v8 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  if (*((_BYTE *)v8 + 3328))
  {
    v9 = *(_QWORD *)(v7 + 8);
    if (v9)
    {
      if ((*(_BYTE *)(v9 + 8) & 3) == 0)
      {
        Wrapper = *(_QWORD *)v9;
        if (*(_QWORD *)v9)
          return Wrapper;
      }
    }
    goto LABEL_17;
  }
  OutOfLineCachedWrapper = WebCore::getOutOfLineCachedWrapper(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v7);
  if (OutOfLineCachedWrapper)
    return OutOfLineCachedWrapper;
LABEL_17:
  *(_DWORD *)(v7 + 24) += 2;
  v15 = (WebCore::Node *)v7;
  Wrapper = WebCore::createWrapper(a1, v8, (WebCore::JSDOMGlobalObject *)&v15, v3);
  v14 = v15;
  v15 = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 6) == 2)
    {
      if ((*((_WORD *)v14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v14, v13);
    }
    else
    {
      *((_DWORD *)v14 + 6) -= 2;
    }
  }
  return Wrapper;
}

float WebCore::findSizeValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _BYTE *a6)
{
  float result;
  BOOL v8;
  int v9;
  int v10;

  if (a6)
    *a6 = 1;
  if ((_DWORD)a4 == 12)
  {
    if ((a4 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)a3 & 0xDF) != 0x44
        || (*(_BYTE *)(a3 + 1) & 0xDF) != 0x45
        || (*(_BYTE *)(a3 + 2) & 0xDF) != 0x56
        || (*(_BYTE *)(a3 + 3) & 0xDF) != 0x49
        || (*(_BYTE *)(a3 + 4) & 0xDF) != 0x43
        || (*(_BYTE *)(a3 + 5) & 0xDF) != 0x45
        || (*(_BYTE *)(a3 + 6) & 0xDF) != 0xD
        || (*(_BYTE *)(a3 + 7) & 0xDF) != 0x57
        || (*(_BYTE *)(a3 + 8) & 0xDF) != 0x49
        || (*(_BYTE *)(a3 + 9) & 0xDF) != 0x44
        || (*(_BYTE *)(a3 + 10) & 0xDF) != 0x54)
      {
        goto LABEL_5;
      }
      v9 = *(unsigned __int8 *)(a3 + 11);
    }
    else
    {
      if ((*(_WORD *)a3 & 0xFFDF) != 0x44
        || (*(_WORD *)(a3 + 2) & 0xFFDF) != 0x45
        || (*(_WORD *)(a3 + 4) & 0xFFDF) != 0x56
        || (*(_WORD *)(a3 + 6) & 0xFFDF) != 0x49
        || (*(_WORD *)(a3 + 8) & 0xFFDF) != 0x43
        || (*(_WORD *)(a3 + 10) & 0xFFDF) != 0x45
        || (*(_WORD *)(a3 + 12) & 0xFFDF) != 0xD
        || (*(_WORD *)(a3 + 14) & 0xFFDF) != 0x57
        || (*(_WORD *)(a3 + 16) & 0xFFDF) != 0x49
        || (*(_WORD *)(a3 + 18) & 0xFFDF) != 0x44
        || (*(_WORD *)(a3 + 20) & 0xFFDF) != 0x54)
      {
        goto LABEL_5;
      }
      v9 = *(unsigned __int16 *)(a3 + 22);
    }
    result = -2.0;
    if ((v9 & 0xFFFFFFDF) == 0x48)
      return result;
    goto LABEL_5;
  }
  if ((_DWORD)a4 == 13)
  {
    if ((a4 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)a3 & 0xDF) != 0x44
        || (*(_BYTE *)(a3 + 1) & 0xDF) != 0x45
        || (*(_BYTE *)(a3 + 2) & 0xDF) != 0x56
        || (*(_BYTE *)(a3 + 3) & 0xDF) != 0x49
        || (*(_BYTE *)(a3 + 4) & 0xDF) != 0x43
        || (*(_BYTE *)(a3 + 5) & 0xDF) != 0x45
        || (*(_BYTE *)(a3 + 6) & 0xDF) != 0xD
        || (*(_BYTE *)(a3 + 7) & 0xDF) != 0x48
        || (*(_BYTE *)(a3 + 8) & 0xDF) != 0x45
        || (*(_BYTE *)(a3 + 9) & 0xDF) != 0x49
        || (*(_BYTE *)(a3 + 10) & 0xDF) != 0x47
        || (*(_BYTE *)(a3 + 11) & 0xDF) != 0x48)
      {
        goto LABEL_5;
      }
      v10 = *(unsigned __int8 *)(a3 + 12);
    }
    else
    {
      if ((*(_WORD *)a3 & 0xFFDF) != 0x44
        || (*(_WORD *)(a3 + 2) & 0xFFDF) != 0x45
        || (*(_WORD *)(a3 + 4) & 0xFFDF) != 0x56
        || (*(_WORD *)(a3 + 6) & 0xFFDF) != 0x49
        || (*(_WORD *)(a3 + 8) & 0xFFDF) != 0x43
        || (*(_WORD *)(a3 + 10) & 0xFFDF) != 0x45
        || (*(_WORD *)(a3 + 12) & 0xFFDF) != 0xD
        || (*(_WORD *)(a3 + 14) & 0xFFDF) != 0x48
        || (*(_WORD *)(a3 + 16) & 0xFFDF) != 0x45
        || (*(_WORD *)(a3 + 18) & 0xFFDF) != 0x49
        || (*(_WORD *)(a3 + 20) & 0xFFDF) != 0x47
        || (*(_WORD *)(a3 + 22) & 0xFFDF) != 0x48)
      {
        goto LABEL_5;
      }
      v10 = *(unsigned __int16 *)(a3 + 24);
    }
    result = -3.0;
    if ((v10 & 0xFFFFFFDF) == 0x54)
      return result;
  }
LABEL_5:
  result = WebCore::numericPrefix(a1, a2, a3, a4, a5);
  v8 = result < 0.0;
  if (result < 0.0)
    result = -1.0;
  if (a6)
  {
    if (v8)
    {
      *a6 = 0;
      return -1.0;
    }
  }
  return result;
}

uint64_t WebCore::jsAttr_value(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, WTF::String *a5)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl *v18;

  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(v6 + 80);
  if (v7 && (v13 = *(_QWORD *)(v7 + 8)) != 0)
  {
    *(_DWORD *)(v13 + 24) += 2;
    WebCore::Element::getAttributeForBindings(v13, (unsigned __int8 *)(v6 + 88), 1, a5, &v18, a3);
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13, v14);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
    v8 = v18;
  }
  else
  {
    v8 = *(WTF::StringImpl **)(v6 + 96);
    if (v8)
      *(_DWORD *)v8 += 2;
    v18 = v8;
  }
  v9 = *(_QWORD *)(a1 + 56);
  if (!v8 || (v10 = *((_DWORD *)v8 + 1)) == 0)
  {
    v11 = *(_QWORD *)(v9 + 41968);
LABEL_11:
    v18 = 0;
    if (!v8)
      return v11;
    goto LABEL_12;
  }
  if (v10 != 1)
    goto LABEL_8;
  v15 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
  if ((*((_BYTE *)v8 + 16) & 4) != 0)
  {
    v16 = *v15;
LABEL_23:
    v11 = *(_QWORD *)(v9 + 8 * v16 + 42216);
    goto LABEL_24;
  }
  v17 = *(unsigned __int16 *)v15;
  if (v17 <= 0xFF)
  {
    v16 = v17;
    goto LABEL_23;
  }
LABEL_8:
  v11 = *(_QWORD *)(v9 + 64760);
  if (!v11 || v8 != *(WTF::StringImpl **)(v11 + 8))
  {
    v11 = JSC::jsStringWithCacheSlowCase();
    v8 = v18;
    goto LABEL_11;
  }
LABEL_24:
  v18 = 0;
LABEL_12:
  if (*(_DWORD *)v8 == 2)
    WTF::StringImpl::destroy(v8, v8);
  else
    *(_DWORD *)v8 -= 2;
  return v11;
}

uint64_t WebCore::TreeScope::focusedElementInScope(WebCore::TreeScope *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  WebCore::TreeScope *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *((_QWORD *)this + 1);
  v2 = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v2 + 2;
  v3 = *(_QWORD *)(v1 + 1248);
  if (!v3)
  {
    v11 = *(_QWORD *)(v1 + 528);
    if (!v11
      || (v12 = *(_QWORD *)(v11 + 8)) == 0
      || (v13 = *(_QWORD *)(v12 + 24)) == 0
      || (v14 = *(_QWORD *)(v13 + 8)) == 0
      || (v15 = *(_QWORD *)(*(_QWORD *)(v14 + 72) + 16)) == 0
      || (v16 = *(_QWORD *)(v15 + 8)) == 0)
    {
      v5 = 0;
LABEL_15:
      if (v2)
      {
        *(_DWORD *)(v1 + 24) = v2;
      }
      else if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v1);
      }
      return v5;
    }
    while (1)
    {
      v17 = *(_QWORD *)(v16 + 56);
      if (!v17)
        goto LABEL_37;
      v18 = *(_QWORD *)(v17 + 8);
      if (v18 == v12)
        break;
      v5 = 0;
      v16 = v18;
      if (!v18)
        goto LABEL_13;
    }
    v19 = *(_QWORD *)(v16 + 120);
    if (!v19 || (v3 = *(_QWORD *)(v19 + 8)) == 0)
    {
LABEL_37:
      v5 = 0;
      goto LABEL_13;
    }
  }
  v4 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v4 + 2;
  v5 = v3;
  do
  {
    v6 = *(WebCore::TreeScope **)(v5 + 40);
    if (v6 == this)
      break;
    if ((*(_BYTE *)(v5 + 22) & 0x10) == 0
      || ((v7 = *(_QWORD *)v6) != 0 ? (v8 = (*(_WORD *)(v7 + 28) & 0x80) == 0) : (v8 = 1),
          v8 || (v9 = *(_QWORD *)(v7 + 200)) == 0))
    {
      v5 = 0;
      break;
    }
    v5 = *(_QWORD *)(v9 + 8);
  }
  while (v5);
  if (v4)
  {
    *(_DWORD *)(v3 + 24) = v4;
  }
  else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
LABEL_13:
  if (v1)
  {
    v2 = *(_DWORD *)(v1 + 24) - 2;
    goto LABEL_15;
  }
  return v5;
}

uint64_t WebCore::JSStorage::legacyPlatformObjectGetOwnProperty(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  JSC::VM *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  char v42;

  v9 = *(JSC::VM **)(a2 + 56);
  if ((a5 & 1) == 0)
  {
    _ZN7WebCoreL26accessVisibleNamedPropertyILNS_22LegacyOverrideBuiltInsE0ENS_9JSStorageERZNS_L39visibleNamedPropertyItemAccessorFunctorINS_12IDLDOMStringES2_ZNS2_34legacyPlatformObjectGetOwnPropertyEPN3JSC8JSObjectEPNS5_14JSGlobalObjectENS5_12PropertyNameERNS5_12PropertySlotEbE3__0EEDcOT1_EUlRS2_SA_E_EEDTclfp2_fp0_fp1_EERS8_RT0_SA_SG_((unint64_t)&v41, a2, a1, a3);
    if (v42)
    {
      v29 = WebCore::toJS<WebCore::IDLNullable<WebCore::IDLDOMString>,WTF::AtomString>(*(_QWORD *)(a2 + 56), v41);
      if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
      {
        v19 = 0;
      }
      else
      {
        *(_QWORD *)a4 = v29;
        *(_DWORD *)(a4 + 16) = 0;
        *(_QWORD *)(a4 + 32) = a1;
        v19 = 1;
        *(_BYTE *)(a4 + 49) = 1;
      }
      std::optional<WTF::String>::~optional((uint64_t)&v41, v28);
      return v19;
    }
    std::optional<WTF::String>::~optional((uint64_t)&v41, v10);
    v9 = *(JSC::VM **)(a2 + 56);
  }
  if ((a3 >> 4))
  {
    v11 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
    if (((a3 >> 4) & ~*(_DWORD *)(v11 + 0x20)) == 0)
    {
      v12 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v9);
      if (v12)
      {
        v41 = a3;
        v13 = JSC::PropertyTable::get(v12, (uint64_t *)&v41);
        if ((_DWORD)v13 != -1)
        {
          if ((int)v13 > 63)
          {
            v25 = *(_QWORD *)(a1 + 8) - 8;
            v26 = 0x3F00000000 - (v13 << 32);
          }
          else
          {
            v25 = a1 + 16;
            v26 = v13 << 32;
          }
          v27 = *(_QWORD *)(v25 + (v26 >> 29));
          if ((v27 & 0xFFFE000000000002) == 0)
          {
            v30 = *(unsigned __int8 *)(v27 + 5);
            if (v30 == 6)
            {
              v32 = *(_DWORD *)(v11 + 16) & 3;
              v34 = *(_QWORD *)(v27 + 8);
              v33 = *(_QWORD *)(v27 + 16);
              if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C))
              {
                v36 = *(_QWORD *)(v27 + 24);
                v35 = *(_QWORD *)(v27 + 32);
                *(_QWORD *)a4 = v34;
                *(_QWORD *)(a4 + 8) = v33;
                *(_DWORD *)(a4 + 16) = HIDWORD(v13);
                *(_QWORD *)(a4 + 32) = a1;
                *(_BYTE *)(a4 + 49) = 3;
                v19 = 1;
                if (v32 != 2)
                  *(_BYTE *)(a4 + 48) = 1;
                *(_BYTE *)(a4 + 51) = 1;
                *(_QWORD *)(a4 + 72) = v36;
                *(_QWORD *)(a4 + 80) = v35;
              }
              else
              {
                *(_QWORD *)a4 = v34;
                *(_QWORD *)(a4 + 8) = v33;
                *(_DWORD *)(a4 + 16) = HIDWORD(v13);
                *(_QWORD *)(a4 + 32) = a1;
                v19 = 1;
                *(_BYTE *)(a4 + 49) = 3;
                if (v32 != 2)
                  *(_BYTE *)(a4 + 48) = 1;
              }
              return v19;
            }
            if (v30 == 5)
            {
              JSC::JSObject::fillGetterPropertySlot();
              return 1;
            }
          }
          *(_QWORD *)a4 = v27;
          *(_QWORD *)(a4 + 32) = a1;
          *(_DWORD *)(a4 + 16) = HIDWORD(v13);
          *(_DWORD *)(a4 + 20) = v13;
          v19 = 1;
          *(_WORD *)(a4 + 48) = 257;
          return v19;
        }
      }
    }
  }
  if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
    return 1;
  if (!a3)
    return 0;
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return 0;
  v15 = *(_BYTE **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) != 0)
  {
    if ((_DWORD)v16)
    {
      v37 = *v15 - 48;
      if (v37 > 9 || v16 >= 2 && *v15 == 48)
      {
LABEL_56:
        v18 = 0;
      }
      else
      {
        v38 = v15 + 1;
        v39 = v16 - 1;
        while (v39)
        {
          if (v37 > 0x19999999)
            goto LABEL_56;
          v40 = *v38 - 48;
          if (v40 > 9)
            goto LABEL_56;
          v18 = 0;
          v24 = __CFADD__(v40, 10 * v37);
          v37 = v40 + 10 * v37;
          ++v38;
          --v39;
          if (v24)
            goto LABEL_15;
        }
        v18 = 0x100000000;
        if (v37 == -1)
          v18 = 0;
      }
    }
    else
    {
      v18 = 0;
    }
  }
  else if ((_DWORD)v16)
  {
    v17 = *(unsigned __int16 *)v15 - 48;
    if (v17 > 9 || v16 >= 2 && *(_WORD *)v15 == 48)
    {
LABEL_14:
      v18 = 0;
    }
    else
    {
      v21 = (unsigned __int16 *)(v15 + 2);
      v22 = v16 - 1;
      while (v22)
      {
        if (v17 <= 0x19999999)
        {
          v23 = *v21 - 48;
          if (v23 <= 9)
          {
            v24 = __CFADD__(v23, 10 * v17);
            v17 = v23 + 10 * v17;
            ++v21;
            --v22;
            if (!v24)
              continue;
          }
        }
        goto LABEL_14;
      }
      v31 = v17 == -1;
      v18 = 0x100000000;
      if (v31)
        v18 = 0;
    }
  }
  else
  {
    v18 = 0;
  }
LABEL_15:
  if ((v18 & 0x100000000) != 0)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  else
    return 0;
}

unint64_t WebCore::JSStorage::createPrototype(WebCore::JSStorage *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSStoragePrototype::create(this, v4, v5, v6);
}

uint64_t WebCore::JSElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unsigned int *WebCore::FrameTree::appendChild(WebCore::FrameTree *this, unsigned int **a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *result;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;

  v4 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
      goto LABEL_48;
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = v4;
    v29 = *(unsigned int **)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v5;
    if (!v29)
      goto LABEL_48;
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, a2);
    }
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
LABEL_48:
      do
        v27 = __ldaxr((unsigned int *)v5);
      while (__stlxr(v27 + 1, (unsigned int *)v5));
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = a2[7];
  a2[7] = (unsigned int *)v5;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = *((_QWORD *)this + 6);
  if (v9)
  {
    do
      v10 = __ldaxr((unsigned int *)v9);
    while (__stlxr(v10 + 1, (unsigned int *)v9));
  }
  result = a2[2];
  if (result)
    goto LABEL_49;
  result = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
  *result = 1;
  *((_QWORD *)result + 1) = a2;
  v24 = a2[2];
  a2[2] = result;
  if (!v24)
    goto LABEL_49;
  do
  {
    v25 = __ldaxr(v24);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v24));
  if (!v26)
  {
    atomic_store(1u, v24);
    WTF::fastFree((WTF *)v24, a2);
  }
  result = a2[2];
  if (result)
  {
LABEL_49:
    do
      v12 = __ldaxr(result);
    while (__stlxr(v12 + 1, result));
  }
  v13 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = result;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      result = (unsigned int *)WTF::fastFree((WTF *)v13, a2);
    }
  }
  if (v9 && *(_QWORD *)(v9 + 8))
  {
    WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator=(a2 + 10, (unsigned int *)v9);
    result = (unsigned int *)WTF::RefPtr<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::operator=((uint64_t *)(*(_QWORD *)(v9 + 8) + 72), (uint64_t)a2);
    *((_DWORD *)this + 14) = -1;
    do
    {
LABEL_24:
      v22 = __ldaxr((unsigned int *)v9);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)v9));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)v9);
      return (unsigned int *)WTF::fastFree((WTF *)v9, a2);
    }
    return result;
  }
  v16 = (unsigned int *)(a2 + 1);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  v18 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = a2;
  if (v18)
  {
    v19 = (unsigned int *)(v18 + 8);
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v28 = off_1E31FE290;
      v28[1] = v19;
      v32 = (uint64_t)v28;
      WTF::ensureOnMainThread();
      result = (unsigned int *)v32;
      if (v32)
        result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    }
  }
  *((_DWORD *)this + 14) = -1;
  if (v9)
    goto LABEL_24;
  return result;
}

uint64_t WebCore::DOMWindow::location(WebCore::DOMWindow *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  void *v5;
  unsigned int v6;
  _DWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  _DWORD *v15;

  result = *((_QWORD *)this + 6);
  if (!result)
  {
    v3 = bmalloc::api::isoAllocate();
    *(_QWORD *)v3 = 0;
    *(_DWORD *)(v3 + 8) = 1;
    v4 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v4)
    {
      do
        v6 = __ldaxr(v4);
      while (__stlxr(v6 + 1, v4));
    }
    *(_QWORD *)(v3 + 16) = v4;
    v15 = 0;
    v7 = (_DWORD *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v3;
    if (v7)
    {
      if (v7[2] == 1)
      {
        v8 = (unsigned int *)*((_QWORD *)v7 + 2);
        *((_QWORD *)v7 + 2) = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            v11 = v7;
            atomic_store(1u, v8);
            v14 = (WTF *)v8;
            v12 = v8[7];
            if ((_DWORD)v12)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v14 + 2), (WTF::StringImpl *)(*((_QWORD *)v14 + 2) + 32 * v12));
            v13 = (WTF *)*((_QWORD *)v14 + 2);
            if (v13)
            {
              *((_QWORD *)v14 + 2) = 0;
              *((_DWORD *)v14 + 6) = 0;
              WTF::fastFree(v13, v5);
            }
            WTF::fastFree(v14, v5);
            v7 = v11;
          }
        }
        if (*(_QWORD *)v7)
        {
          *(_QWORD *)(*(_QWORD *)v7 + 8) = 3;
          *(_QWORD *)v7 = 0;
        }
        bmalloc::api::isoDeallocate((bmalloc::api *)v7, v5);
      }
      else
      {
        --v7[2];
      }
    }
    WTF::Ref<WebCore::BarProp,WTF::RawPtrTraits<WebCore::BarProp>,WTF::DefaultRefDerefTraits<WebCore::BarProp>>::~Ref(&v15, v5);
    return *((_QWORD *)this + 6);
  }
  return result;
}

WebCore::Animation *WebCore::Animation::Animation(WebCore::Animation *this)
{
  _DWORD *v2;
  uint64_t v3;
  char v4;

  *(_DWORD *)this = 1;
  *((_BYTE *)this + 8) = 0;
  *((_WORD *)this + 8) = 0;
  *((_DWORD *)this + 6) = 0;
  {
    v2 = (_DWORD *)WebCore::Animation::initialName(void)::initialValue;
    if (WebCore::Animation::initialName(void)::initialValue)
LABEL_3:
      *v2 += 2;
  }
  else
  {
    v2 = (_DWORD *)WebCore::noneAtomData;
    if (WebCore::noneAtomData)
      *(_DWORD *)WebCore::noneAtomData += 2;
    WebCore::Animation::initialName(void)::initialValue = (uint64_t)v2;
    word_1ECE90D78 = 256;
    if (v2)
      goto LABEL_3;
  }
  *((_QWORD *)this + 4) = v2;
  *((_WORD *)this + 20) = word_1ECE90D78;
  *((_QWORD *)this + 6) = 0x3FF0000000000000;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0x3FF0000000000000;
  *((_BYTE *)this + 80) = 1;
  *((_DWORD *)this + 22) = 0;
  v3 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v3 + 8) = 1;
  *(_QWORD *)v3 = &off_1E3347E18;
  *(_OWORD *)(v3 + 16) = xmmword_1968C1FC0;
  *(_OWORD *)(v3 + 32) = xmmword_1968C1FD0;
  *(_BYTE *)(v3 + 48) = 0;
  *((_QWORD *)this + 12) = v3;
  *((_QWORD *)this + 13) = 0;
  v4 = *((_BYTE *)this + 116);
  *((_DWORD *)this + 28) = 0;
  *((_BYTE *)this + 116) = v4 & 0xFE;
  return this;
}

{
  _DWORD *v2;
  uint64_t v3;
  char v4;

  *(_DWORD *)this = 1;
  *((_BYTE *)this + 8) = 0;
  *((_WORD *)this + 8) = 0;
  *((_DWORD *)this + 6) = 0;
  {
    v2 = (_DWORD *)WebCore::Animation::initialName(void)::initialValue;
  }
  else
  {
    v2 = (_DWORD *)WebCore::noneAtomData;
    if (WebCore::noneAtomData)
      *(_DWORD *)WebCore::noneAtomData += 2;
    WebCore::Animation::initialName(void)::initialValue = (uint64_t)v2;
    word_1ECE90D78 = 256;
  }
  if (v2)
    *v2 += 2;
  *((_QWORD *)this + 4) = v2;
  *((_WORD *)this + 20) = word_1ECE90D78;
  *((_QWORD *)this + 6) = 0x3FF0000000000000;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0x3FF0000000000000;
  *((_BYTE *)this + 80) = 1;
  *((_DWORD *)this + 22) = 0;
  v3 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v3 + 8) = 1;
  *(_QWORD *)v3 = &off_1E3347E18;
  *(_OWORD *)(v3 + 16) = xmmword_1968C1FC0;
  *(_OWORD *)(v3 + 32) = xmmword_1968C1FD0;
  *(_BYTE *)(v3 + 48) = 0;
  *((_QWORD *)this + 12) = v3;
  *((_QWORD *)this + 13) = 0;
  v4 = *((_BYTE *)this + 116);
  *((_DWORD *)this + 28) = 0;
  *((_BYTE *)this + 116) = v4 & 0xFE;
  return this;
}

void WebCore::TileGrid::~TileGrid(WebCore::TileGrid *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  _BOOL4 v9;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  _BOOL4 v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  WTF *v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;

  *(_QWORD *)this = &off_1E34117F8;
  v3 = *((_QWORD *)this + 4);
  if (!v3)
  {
    v6 = 0;
    LODWORD(v4) = 0;
LABEL_62:
    v5 = v3 + 24 * v4;
    goto LABEL_17;
  }
  v4 = *(unsigned int *)(v3 - 4);
  v5 = v3 + 24 * v4;
  if (!*(_DWORD *)(v3 - 12))
  {
    v6 = v3 + 24 * v4;
    goto LABEL_62;
  }
  v6 = *((_QWORD *)this + 4);
  if ((_DWORD)v4)
  {
    v7 = 24 * v4;
    v6 = *((_QWORD *)this + 4);
    while (1)
    {
      v8 = !*(_DWORD *)v6 && *(_DWORD *)(v6 + 4) == 0x80000000;
      v9 = v8;
      if (*(_DWORD *)v6 != 0x80000000 && !v9)
        break;
      v6 += 24;
      v7 -= 24;
      if (!v7)
      {
        v6 = v5;
        break;
      }
    }
  }
LABEL_17:
  if (v3)
    v11 = v3 + 24 * *(unsigned int *)(v3 - 4);
  else
    v11 = 0;
  while (v6 != v11)
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 8) + 48))(*(_QWORD *)(v6 + 8), 0);
    v12 = v6 + 24;
    v6 = v5;
    if (v12 != v5)
    {
      v6 = v12;
      while (1)
      {
        v13 = !*(_DWORD *)v6 && *(_DWORD *)(v6 + 4) == 0x80000000;
        v14 = v13;
        if (*(_DWORD *)v6 != 0x80000000 && !v14)
          break;
        v6 += 24;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  v16 = *((_QWORD *)this + 20);
  if (v16)
    WTF::fastFree((WTF *)(v16 - 16), a2);
  *((_QWORD *)this + 13) = off_1E31F7378;
  v17 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  WebCore::TimerBase::~TimerBase((WebCore::TileGrid *)((char *)this + 104));
  v19 = (WTF *)*((_QWORD *)this + 11);
  if (v19)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v19, v18);
  }
  v20 = (WTF *)*((_QWORD *)this + 7);
  if (v20)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v20, v18);
  }
  v21 = *((_QWORD *)this + 4);
  if (v21)
  {
    v22 = *(unsigned int *)(v21 - 4);
    if ((_DWORD)v22)
    {
      for (i = 0; i != v22; ++i)
      {
        if (*(_DWORD *)(v21 + 24 * i) != 0x80000000)
        {
          v24 = v21 + 24 * i;
          v25 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v25)
          {
            v26 = (unsigned int *)(v25 + 8);
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              atomic_store(1u, v26);
              v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v34 = off_1E334ED68;
              v34[1] = v26;
              v36 = v34;
              WTF::ensureOnMainThread();
              if (v36)
                (*(void (**)(_QWORD *))(*v36 + 8))(v36);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v21 - 16), v18);
  }
  v29 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v29)
  {
    v30 = (unsigned int *)(v29 + 8);
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v33 = off_1E334ED68;
      v33[1] = v30;
      v35 = v33;
      WTF::ensureOnMainThread();
      if (v35)
        (*(void (**)(_QWORD *))(*v35 + 8))(v35);
    }
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::TileGrid::~TileGrid(this, a2);
  WTF::fastFree(v2, v3);
}

unint64_t WebCore::JSWorker::createPrototype(WebCore::JSWorker *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  int v3;
  JSC::JSCell *v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v3 = (int)a2;
  v5 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, v3, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSWorkerPrototype::create(this, v6, v7, v8);
}

uint64_t WebCore::Document::invalidateEventRegionsForFrame(uint64_t this, WebCore::HTMLFrameOwnerElement *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Document *v13;
  WebCore::Document *v14;

  v2 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    v3 = *(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D);
    if ((v3 & 2) != 0)
    {
      __break(0xC471u);
      goto LABEL_28;
    }
    v4 = this;
    ++*(_DWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
    v5 = v2;
    if ((v3 & 0x10) != 0)
    {
LABEL_12:
      if ((*(_BYTE *)(v5 + 21) & 0x80) != 0)
      {
        this = *(_QWORD *)(v5 + 144);
        if (this)
        {
          this = WebCore::RenderLayer::invalidateEventRegion(this, 3);
          if ((this & 1) != 0)
          {
LABEL_15:
            v8 = *(_DWORD *)(v2 + 16);
            if (v8)
            {
              *(_DWORD *)(v2 + 16) = v8 - 1;
              return this;
            }
            __break(0xC471u);
LABEL_28:
            JUMPOUT(0x19457A9E4);
          }
        }
      }
      else
      {
        while (1)
        {
          v7 = *(_QWORD *)(v5 + 32);
          if (!v7)
            break;
          v5 = *(_QWORD *)(v7 + 8);
          if (!v5)
            break;
          if ((*(_BYTE *)(v5 + 45) & 0x10) != 0)
            goto LABEL_12;
        }
      }
    }
    else
    {
      for (i = *(_QWORD *)(v2 + 32); i; i = *(_QWORD *)(v5 + 32))
      {
        v5 = *(_QWORD *)(i + 8);
        if (!v5)
          break;
        if ((*(_BYTE *)(v5 + 45) & 0x10) != 0)
          goto LABEL_12;
      }
    }
    v9 = *(_QWORD *)(v4 + 528);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 120);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
          {
            *(_DWORD *)(v12 + 24) += 2;
            v13 = *(WebCore::Document **)(*(_QWORD *)(v12 + 40) + 8);
            *((_DWORD *)v13 + 6) += 2;
            v14 = v13;
            WebCore::Document::invalidateEventRegionsForFrame(v13, (WebCore::HTMLFrameOwnerElement *)v12);
            this = (uint64_t)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v14);
            if (*(_DWORD *)(v12 + 24) == 2)
            {
              if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
                this = WebCore::Node::removedLastRef((WebCore::Node *)v12);
            }
            else
            {
              *(_DWORD *)(v12 + 24) -= 2;
            }
          }
        }
      }
    }
    goto LABEL_15;
  }
  return this;
}

WTF::StringImpl *WebCore::Document::invalidateEventListenerRegions(WTF::StringImpl *this, uint64_t a2, const WebCore::Document *a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  void *v6;
  int v7;

  v3 = *((_QWORD *)this + 243);
  if (v3)
  {
    v4 = this;
    if (*((_QWORD *)this + 159))
    {
      ++*(_DWORD *)(v3 + 16);
      if (WebCore::Style::Adjuster::adjustEventListenerRegionTypesForRootStyle((WebCore::EventNames **)(v3 + 80), this, a3))
      {
        this = WebCore::Document::scheduleFullStyleRebuild(v4);
      }
      else
      {
        v5 = *((_QWORD *)v4 + 159);
        if (v5)
        {
          *(_DWORD *)(v5 + 24) += 2;
          this = WebCore::Element::invalidateStyleInternal((WTF::MonotonicTime *)v5);
          if (*(_DWORD *)(v5 + 24) == 2)
          {
            if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
              this = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
          }
          else
          {
            *(_DWORD *)(v5 + 24) -= 2;
          }
        }
        else
        {
          this = WebCore::Element::invalidateStyleInternal(0);
        }
      }
      v7 = *(_DWORD *)(v3 + 16);
      if (!v7)
      {
        __break(0xC471u);
        JUMPOUT(0x19457AAC8);
      }
      *(_DWORD *)(v3 + 16) = v7 - 1;
    }
  }
  return this;
}

uint64_t WebCore::Document::ensureFullscreenManager(WebCore::Document *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  void *v5;
  WebCore::FullscreenManager *v6;
  uint64_t v7;
  void *v8;

  v2 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  v3 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = v3;
  *(_BYTE *)(v2 + 40) = 0;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_DWORD *)(v2 + 127) = 0;
  *(_QWORD *)(v2 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
  v6 = (WebCore::FullscreenManager *)*((_QWORD *)this + 249);
  *((_QWORD *)this + 249) = v2;
  if (v6)
  {
    WebCore::FullscreenManager::~FullscreenManager(v6, v5);
    if (*(_DWORD *)(v7 + 8))
    {
      *(_OWORD *)(v7 + 112) = 0u;
      *(_OWORD *)(v7 + 128) = 0u;
      *(_OWORD *)(v7 + 80) = 0u;
      *(_OWORD *)(v7 + 96) = 0u;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_OWORD *)(v7 + 64) = 0u;
      *(_OWORD *)(v7 + 16) = 0u;
      *(_OWORD *)(v7 + 32) = 0u;
      *(_OWORD *)v7 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v7, v8);
    }
  }
  return *((_QWORD *)this + 249);
}

uint64_t WebCore::Document::dispatchWindowLoadEvent(uint64_t this)
{
  WebCore::LocalDOMWindow *v1;
  uint64_t v2;
  void *v3;
  WebCore::CachedResourceLoader *v4;
  void *v5;
  WTF *v6;
  void *v7;

  v1 = *(WebCore::LocalDOMWindow **)(this + 696);
  if (v1)
  {
    v2 = this;
    ++*((_DWORD *)v1 + 6);
    WebCore::LocalDOMWindow::dispatchLoadEvent(v1);
    if (*((_DWORD *)v1 + 6) == 1)
      (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v1 + 72))(v1);
    else
      --*((_DWORD *)v1 + 6);
    *(_BYTE *)(v2 + 3387) = 1;
    v4 = *(WebCore::CachedResourceLoader **)(v2 + 720);
    if (!v4)
      v4 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader((WebCore::Document *)v2, v3);
    ++*(_DWORD *)v4;
    this = WebCore::CachedResourceLoader::documentDidFinishLoadEvent((uint64_t)v4, (WTF::StringImpl *)v3);
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::CachedResourceLoader::~CachedResourceLoader(v4, v5);
      return WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return this;
}

uint64_t WebCore::Document::nodeWillBeRemoved(WebCore::Document *this, WebCore::Node *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  const WebCore::Position *v22;
  WebCore::Node *v23;
  uint64_t (*v24)();
  unsigned int v25;
  unsigned int v26;
  __int16 v27;
  WebCore::Document *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WebCore::Node *v35;
  WebCore::NodeIterator *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  WebCore::DragCaretController *v41;
  WebCore::NodeIterator *v42;
  WebCore::Node *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  result = WebCore::Document::adjustFocusedNodeOnNodeRemoval((uint64_t)this, (uint64_t)a2, 0);
  v5 = *((_QWORD *)this + 151);
  if (!v5)
    goto LABEL_2;
  if ((WebCore::Node *)v5 != a2)
  {
    v27 = *((_WORD *)a2 + 14);
    if ((v27 & 0xF000) == 0x9000)
    {
      if (**(WebCore::Node ***)(v5 + 40) != a2
        || (*(_WORD *)(v5 + 28) & 0xF000) == 0x9000
        || (*(_BYTE *)(v5 + 22) & 8) == 0)
      {
        goto LABEL_2;
      }
    }
    else
    {
      if ((v27 & 4) == 0
        || !*((_QWORD *)a2 + 10)
        || ((*(unsigned __int8 *)(v5 + 22) ^ *((unsigned __int8 *)a2 + 22)) & 8) != 0)
      {
        goto LABEL_2;
      }
      do
        v5 = *(_QWORD *)(v5 + 32);
      while ((WebCore::Node *)v5 != a2 && v5 != 0);
      if (!v5)
        goto LABEL_2;
    }
  }
  v29 = (WebCore::Document *)*((_QWORD *)a2 + 4);
  if ((*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFLL) != 0)
    v29 = (WebCore::Document *)(*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFLL);
  if (v29 == this)
    v30 = 0;
  else
    v30 = (uint64_t)v29;
  result = (uint64_t)WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)this + 151, v30);
  *((_BYTE *)this + 3381) = 1;
LABEL_2:
  v6 = *((_QWORD *)this + 163);
  if (!v6)
  {
    v7 = 0;
    v8 = 0;
LABEL_4:
    v9 = v6 + 8 * v8;
    goto LABEL_5;
  }
  v8 = *(unsigned int *)(v6 - 4);
  v9 = v6 + 8 * v8;
  if (!*(_DWORD *)(v6 - 12))
  {
    v7 = v6 + 8 * v8;
    goto LABEL_4;
  }
  v7 = *((_QWORD *)this + 163);
  if ((_DWORD)v8)
  {
    v31 = 8 * v8;
    v7 = *((_QWORD *)this + 163);
    while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
    {
      v7 += 8;
      v31 -= 8;
      if (!v31)
      {
        v7 = v9;
        break;
      }
    }
  }
LABEL_5:
  v43 = (WebCore::Document *)((char *)this + 1304);
  v44 = v7;
  v45 = v9;
  if (v6)
  {
    v11 = *(unsigned int *)(v6 - 4);
    v10 = v6 + 8 * v11;
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v46 = v10;
  v47 = v6 + 8 * v11;
  if (v7 != v10)
  {
    v37 = v7;
    while (!*(_QWORD *)(*(_QWORD *)v37 + 8))
    {
      v40 = v37 + 8;
      v44 = v40;
      v37 = v9;
      if (v40 != v9)
      {
        v37 = v40;
        while ((unint64_t)(*(_QWORD *)v37 + 1) <= 1)
        {
          v37 += 8;
          v44 = v37;
          if (v37 == v9)
          {
            v37 = v9;
            break;
          }
        }
      }
      v7 = v10;
      if (v37 == v10)
        goto LABEL_8;
    }
    v7 = v37;
  }
LABEL_8:
  if (v6)
    v12 = v6 + 8 * *(unsigned int *)(v6 - 4);
  else
    v12 = 0;
  while (v7 != v12)
  {
    v36 = *(WebCore::NodeIterator **)(*(_QWORD *)v7 + 8);
    ++*((_DWORD *)v36 + 2);
    v42 = v36;
    WebCore::NodeIterator::nodeWillBeRemoved(v36, a2);
    WTF::Ref<WebCore::NodeIterator,WTF::RawPtrTraits<WebCore::NodeIterator>,WTF::DefaultRefDerefTraits<WebCore::NodeIterator>>::~Ref(&v42);
    result = (uint64_t)WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v43);
    v7 = v44;
  }
  v13 = *((_QWORD *)this + 165);
  if (!v13)
  {
    v14 = 0;
    v15 = 0;
LABEL_13:
    v16 = v13 + 8 * v15;
    goto LABEL_14;
  }
  v15 = *(unsigned int *)(v13 - 4);
  v16 = v13 + 8 * v15;
  if (!*(_DWORD *)(v13 - 12))
  {
    v14 = v13 + 8 * v15;
    goto LABEL_13;
  }
  v14 = *((_QWORD *)this + 165);
  if ((_DWORD)v15)
  {
    v34 = 8 * v15;
    v14 = *((_QWORD *)this + 165);
    while ((unint64_t)(*(_QWORD *)v14 + 1) <= 1)
    {
      v14 += 8;
      v34 -= 8;
      if (!v34)
      {
        v14 = v16;
        break;
      }
    }
  }
LABEL_14:
  if (v13)
    v17 = v13 + 8 * *(unsigned int *)(v13 - 4);
  else
    v17 = 0;
  while (v14 != v17)
  {
    v32 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    ++*(_DWORD *)(v32 + 8);
    WebCore::boundaryNodeWillBeRemoved((WebCore::RangeBoundaryPoint *)(v32 + 32), (uint64_t)a2);
    result = WebCore::boundaryNodeWillBeRemoved((WebCore::RangeBoundaryPoint *)(v32 + 56), (uint64_t)a2);
    *(_BYTE *)(v32 + 81) = 1;
    if (*(_DWORD *)(v32 + 8) == 1)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    else
      --*(_DWORD *)(v32 + 8);
    v33 = v14 + 8;
    v14 = v16;
    if (v33 != v16)
    {
      v14 = v33;
      while ((unint64_t)(*(_QWORD *)v14 + 1) <= 1)
      {
        v14 += 8;
        if (v14 == v16)
        {
          v14 = v16;
          break;
        }
      }
    }
  }
  v18 = *((_QWORD *)this + 66);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 8);
    if (v19)
    {
      v20 = (unsigned int *)(v19 + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
      WebCore::EventHandler::nodeWillBeRemoved(*(WebCore::EventHandler **)(v19 + 640), a2);
      result = (uint64_t)WebCore::FrameSelection::nodeWillBeRemoved(*(uint64_t **)(*(_QWORD *)(v19 + 296) + 3064), a2);
      v23 = *(WebCore::Node **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 24) + 8) + 56) + 24);
      v24 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      if (!v23)
        v24 = 0;
      if (v24 && (*((_BYTE *)a2 + 22) & 8) != 0)
      {
        v41 = *(WebCore::DragCaretController **)(*(_QWORD *)(*(_QWORD *)(v19 + 24) + 8) + 56);
        if (v23)
          *((_DWORD *)v23 + 6) += 2;
        v43 = v23;
        LODWORD(v44) = *((_DWORD *)v41 + 8);
        BYTE4(v44) = *((_BYTE *)v41 + 36);
        v38 = WebCore::removingNodeRemovesPosition(a2, v23, v22);
        result = (uint64_t)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v43);
        if (v38)
        {
          v39 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 1944);
          if (v39)
            WebCore::RenderSelection::clear((WebCore::RenderSelection *)(v39 + 288));
          result = WebCore::DragCaretController::clearCaretPositionWithoutUpdatingStyle((uint64_t)v41);
        }
      }
      do
      {
        v25 = __ldaxr(v20);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v20));
      if (!v26)
      {
        atomic_store(1u, v20);
        v35 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v35 = off_1E31FE290;
        *((_QWORD *)v35 + 1) = v20;
        v43 = v35;
        WTF::ensureOnMainThread();
        result = (uint64_t)v43;
        v43 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  if ((*((_WORD *)a2 + 14) & 2) != 0)
  {
    result = *((_QWORD *)this + 187);
    if (result)
      return WebCore::DocumentMarkerController::removeMarkers(result, (uint64_t)a2);
  }
  return result;
}

uint64_t WebCore::Document::processViewport(uint64_t result, uint64_t *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  if (*(unsigned __int8 *)(result + 2192) <= a3)
  {
    v3 = result;
    *(_BYTE *)(result + 2192) = a3;
    __asm { FMOV            V0.4S, #-1.0 }
    *(_OWORD *)(result + 2196) = _Q0;
    *(_OWORD *)(result + 2212) = _Q0;
    *(_OWORD *)(result + 2228) = _Q0;
    *(_WORD *)(result + 2244) = 0;
    v9 = *a2;
    if (*a2)
    {
      v10 = *(_QWORD *)(v9 + 8);
      v11 = *(unsigned int *)(v9 + 4);
      v12 = (unint64_t)((*(_DWORD *)(v9 + 16) >> 2) & 1) << 32;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = 0x100000000;
    }
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = off_1E33A36D8;
    v13[1] = v3;
    v15 = v13;
    WebCore::processFeaturesString(v10, (const char *)(v12 | v11), 1, &v15);
    v14 = v15;
    v15 = 0;
    if (v14)
      (*(void (**)(_QWORD *))(*v14 + 8))(v14);
    return WebCore::Document::updateViewportArguments(v3);
  }
  return result;
}

uint64_t WebCore::Document::setCSSTarget(uint64_t this, WebCore::Element *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::Element *v5;
  unsigned __int8 *v6;
  unsigned int v7;
  void *v8;
  void *v9;
  void *v10;
  __int16 v11;
  unsigned __int8 *v12[4];
  char v13;
  _BYTE v14[32];
  char v15;
  unsigned __int8 *v16[2];

  v3 = this;
  v4 = *(_QWORD *)(this + 1568);
  if (!v4)
  {
    if (!a2)
      return this;
    v14[0] = 0;
    v15 = 0;
    LOBYTE(v12[0]) = 0;
    v13 = 0;
    goto LABEL_10;
  }
  v5 = *(WebCore::Element **)(v4 + 8);
  if (v5 != a2)
  {
    v14[0] = 0;
    v15 = 0;
    if (v5)
    {
      LOWORD(v16[0]) = 75;
      v12[0] = (unsigned __int8 *)v16;
      v12[1] = (unsigned __int8 *)1;
      std::optional<WebCore::Style::PseudoClassChangeInvalidation>::emplace[abi:sn180100]<WebCore::Element &,std::initializer_list<std::pair<WebCore::CSSSelectorPseudoClass,BOOL>> &,void>((uint64_t)v14, v5, v12);
    }
    LOBYTE(v12[0]) = 0;
    v13 = 0;
    if (!a2)
    {
      v6 = 0;
LABEL_12:
      v16[0] = v6;
      WTF::WeakPtr<WebCore::HTMLMetaElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::operator=((uint64_t *)(v3 + 1568), (uint64_t *)v16);
      WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr((uint64_t *)v16, v8);
      std::optional<WebCore::Style::PseudoClassChangeInvalidation>::~optional((uint64_t)v12, v9);
      return std::optional<WebCore::Style::PseudoClassChangeInvalidation>::~optional((uint64_t)v14, v10);
    }
LABEL_10:
    v11 = 331;
    v16[0] = (unsigned __int8 *)&v11;
    v16[1] = (unsigned __int8 *)1;
    std::optional<WebCore::Style::PseudoClassChangeInvalidation>::emplace[abi:sn180100]<WebCore::Element &,std::initializer_list<std::pair<WebCore::CSSSelectorPseudoClass,BOOL>> &,void>((uint64_t)v12, a2, v16);
    v6 = (unsigned __int8 *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
    if (v6)
    {
      do
        v7 = __ldaxr((unsigned int *)v6);
      while (__stlxr(v7 + 1, (unsigned int *)v6));
    }
    goto LABEL_12;
  }
  return this;
}

void WebCore::DOMTimer::~DOMTimer(WebCore::DOMTimer *this, void *a2)
{
  WTF *v3;
  WebCore::UserGestureToken *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  void *v16;
  WTF *v17;

  v3 = (WTF *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v11 = *((_QWORD *)v3 + 1);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
          --*(_QWORD *)(v12 + 24);
        *((_QWORD *)v3 + 1) = 0;
        do
        {
          v13 = __ldaxr((unsigned int *)v11);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, (unsigned int *)v11));
        if (!v14)
        {
          atomic_store(1u, (unsigned int *)v11);
          v17 = v3;
          WTF::fastFree((WTF *)v11, a2);
          v3 = v17;
        }
      }
      else
      {
        *((_QWORD *)v3 + 1) = 0;
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WebCore::UserGestureToken *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v4, a2);
      WTF::fastFree(v15, v16);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  WebCore::EventLoopTimerHandle::~EventLoopTimerHandle((WebCore::DOMTimer *)((char *)this + 48), a2);
  v7 = *((_QWORD *)this + 4);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v6);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v6);
}

{
  WTF *v2;
  void *v3;

  WebCore::DOMTimer::~DOMTimer(this, a2);
  WTF::fastFree(v2, v3);
}

WebCore::DOMTimer *WebCore::DOMTimer::removeById(WebCore::DOMTimer *this, WebCore::ScriptExecutionContext *a2)
{
  WebCore::DOMTimer *v2;
  WebCore::DOMTimer *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  const WebCore::DOMTimer *v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  WTF *v32;
  void *v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  WebCore::DOMTimer *v38[7];

  if ((int)a2 >= 1)
  {
    v38[5] = v2;
    v38[6] = v3;
    v5 = (uint64_t)this;
    if (*((_BYTE *)this + 274))
      v6 = 0;
    else
      v6 = (uint64_t *)((char *)this - 192);
    if (!*((_BYTE *)this + 274))
    {
      *((_DWORD *)this - 42) += 2;
      v7 = *((_QWORD *)this + 17);
      if (v7)
      {
        v8 = *(_DWORD *)(v7 - 8);
        v9 = 9 * ((~((_DWORD)a2 << 15) + (_DWORD)a2) ^ ((~((_DWORD)a2 << 15) + (_DWORD)a2) >> 10));
        v10 = (v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11);
        v11 = v8 & (v10 ^ HIWORD(v10));
        v12 = *(_DWORD *)(v7 + 16 * v11);
        if (v12 == (_DWORD)a2)
        {
LABEL_11:
          v14 = *(const WebCore::DOMTimer **)(v7 + 16 * v11 + 8);
          if (v14)
          {
            ++*((_DWORD *)v14 + 6);
            v15 = WebCore::Document::contentChangeObserver((WebCore::Document *)v6);
            WebCore::ContentChangeObserver::didRemoveDOMTimer(v15, v14);
            v16 = v6[378];
            if (v16)
            {
              if ((*(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL) != 0
                && *(double *)((*(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
              {
                v37 = v6[378];
                WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v16 + 16));
                v16 = v37;
              }
              WTF::WeakHashSet<WebCore::DOMTimer const,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::DOMTimer>(v16, v14);
            }
            if (*((_DWORD *)v14 + 6) == 1)
            {
              WebCore::DOMTimer::~DOMTimer(v14, a2);
              WTF::fastFree(v34, v35);
            }
            else
            {
              --*((_DWORD *)v14 + 6);
            }
          }
        }
        else
        {
          v13 = 1;
          while (v12)
          {
            v11 = ((_DWORD)v11 + v13) & v8;
            v12 = *(_DWORD *)(v7 + 16 * v11);
            ++v13;
            if (v12 == (_DWORD)a2)
              goto LABEL_11;
          }
        }
      }
      if (*(_DWORD *)(v5 - 168) == 2)
      {
        if ((*((_WORD *)v6 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
      }
      else
      {
        *(_DWORD *)(v5 - 168) -= 2;
      }
      if (!*(_BYTE *)(v5 + 274))
      {
        if ((byte_1ECE83858 & 1) == 0)
        {
          qword_1ECE83850 = 0;
          byte_1ECE83858 = 1;
        }
        if (_MergedGlobals_209 == 1)
          WTF::HashMap<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::remove((int)a2);
      }
    }
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v36 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)v5, a2);
      if (v36)
        WebCore::InspectorInstrumentation::didRemoveTimerImpl(v36, a2, v5);
    }
    WTF::HashMap<int,WTF::RefPtr<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::take(v38, (uint64_t *)(v5 + 136), (int)a2);
    this = v38[0];
    if (v38[0])
    {
      v19 = (WTF *)*((_QWORD *)v38[0] + 12);
      *((_QWORD *)v38[0] + 12) = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
        {
          v23 = *((_QWORD *)v19 + 1);
          if (v23)
          {
            v24 = *(_QWORD *)(v23 + 8);
            if (v24)
              --*(_QWORD *)(v24 + 24);
            *((_QWORD *)v19 + 1) = 0;
            do
            {
              v25 = __ldaxr((unsigned int *)v23);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, (unsigned int *)v23));
            if (!v26)
            {
              atomic_store(1u, (unsigned int *)v23);
              WTF::fastFree((WTF *)v23, v18);
            }
          }
          else
          {
            *((_QWORD *)v19 + 1) = 0;
          }
          WTF::fastFree(v19, v18);
          this = v38[0];
        }
        else
        {
          --*(_DWORD *)v19;
        }
      }
      v20 = *((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = 0;
      if (!v20)
        goto LABEL_32;
      if (*(_DWORD *)(v20 + 48) != 1)
      {
        --*(_DWORD *)(v20 + 48);
LABEL_32:
        if (*((_DWORD *)this + 6) == 1)
        {
          WebCore::DOMTimer::~DOMTimer(this, v18);
          return (WebCore::DOMTimer *)WTF::fastFree(v21, v22);
        }
        else
        {
          --*((_DWORD *)this + 6);
        }
        return this;
      }
      v27 = *(_QWORD *)(v20 + 64);
      *(_QWORD *)(v20 + 64) = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      v28 = *(_QWORD *)(v20 + 56);
      if (v28)
      {
        *(_QWORD *)(v28 + 8) = 0;
        v29 = *(unsigned int **)(v20 + 56);
        *(_QWORD *)(v20 + 56) = 0;
        if (v29)
        {
          do
          {
            v30 = __ldaxr(v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v29));
          if (!v31)
          {
            atomic_store(1u, v29);
            WTF::fastFree((WTF *)v29, v18);
          }
        }
      }
      else
      {
        *(_QWORD *)(v20 + 56) = 0;
      }
      WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)v20);
      WTF::fastFree(v32, v33);
      this = v38[0];
      if (v38[0])
        goto LABEL_32;
    }
  }
  return this;
}

unint64_t WebCore::JSEvent::createPrototype(WebCore::JSEvent *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t Structure;
  JSC::Structure *v6;

  Structure = WebCore::JSEventPrototype::createStructure((uint64_t *)this, (uint64_t)a2, a2[82]);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSEventPrototype::create(this, (JSC::VM *)a2, Structure, v6);
}

uint64_t WebCore::Element::invalidateStyleAndRenderersForSubtree(WebCore::Element *this)
{
  return WebCore::Node::invalidateStyle((uint64_t)this, 4u, 2);
}

void WebCore::Element::cloneAttributesFromElement(WebCore::Element *this, const WebCore::Element *a2, uint64_t a3, WebCore::TreeScope *a4, __n128 a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  WTF::AtomString *v11;
  WTF::StringImpl **v12;
  unsigned int v13;
  const WTF::AtomString *v14;
  uint64_t v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  unsigned int v19;
  _DWORD *v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  int v28;
  _QWORD *v29;
  _DWORD **v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _DWORD **v55;
  _DWORD *v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  void *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl **v71;
  WTF::StringImpl *v72;
  WTF::StringImpl **v73;
  WTF::StringImpl **v74;
  WTF *v75;
  void *v76;
  WTF::StringImpl **v77;
  WTF *v78;
  unsigned int *v80;
  WTF::StringImpl *v81;
  WTF *v82;
  uint64_t v83;
  int v84;
  unint64_t v85;
  WTF::StringImpl **v86;
  WTF::StringImpl *v87;
  WTF::StringImpl **v88;
  WTF::StringImpl **v89;
  WTF *v90;
  void *v91;
  WTF::StringImpl **v92;
  WTF::StringImpl *v93;
  WTF *v94;
  uint64_t v95;
  uint64_t v96;
  _DWORD **v97;
  _DWORD *v98;
  unint64_t v99;
  unint64_t v100;
  unsigned int *v101;
  unsigned int *v102;
  _DWORD *v103;
  uint64_t v104;
  uint64_t v105;
  _DWORD **v106;
  _DWORD *v107;
  WTF *v108;
  uint64_t v110;
  WTF *v111;
  _DWORD *v112;
  WTF::StringImpl *v113;
  WTF *v114;
  WTF *v115;
  unsigned int *v116;

  if ((*((_BYTE *)this + 22) & 0x80) != 0)
    WebCore::Element::detachAllAttrNodesFromElement((uint64_t)this, a2, a3, a4);
  v7 = *((_QWORD *)a2 + 13);
  if (!v7)
    goto LABEL_47;
  if ((*(_BYTE *)(v7 + 4) & 8) != 0)
    WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(a2, (unsigned __int8 *)a2, a5, a3, a4);
  if ((*((_WORD *)a2 + 14) & 0x20) != 0)
    WebCore::SVGElement::synchronizeAllAttributes(a2);
  v8 = *((_QWORD *)a2 + 13);
  if (!v8)
  {
LABEL_47:
    v34 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v34)
      WebCore::ElementData::deref(v34, a2);
    if ((*((_WORD *)this + 14) & 0x10) != 0
      && *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      ++*((_DWORD *)this + 41);
      WebCore::HTMLInputElement::initializeInputTypeAfterParsingOrCloning(this);
      WebCore::ValidatedFormListedElement::endDelayingUpdateValidity((uint64_t)this + 112);
    }
    return;
  }
  v10 = (char *)this + 104;
  v9 = *((_QWORD *)this + 13);
  if (v9 && *(_QWORD *)(v9 + 24))
  {
    v40 = *(_DWORD *)(v9 + 4);
    if ((v40 & 1) != 0)
    {
      v41 = *(uint64_t **)(v9 + 40);
      LODWORD(v42) = *(_DWORD *)(v9 + 52);
    }
    else
    {
      v41 = (uint64_t *)(v9 + 32);
      LODWORD(v42) = v40 >> 5;
    }
    if ((_DWORD)v42)
    {
      v42 = v42;
      while (1)
      {
        v43 = *v41;
        if (*v41 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v43 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v43 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v41 += 2;
        if (!--v42)
          goto LABEL_75;
      }
    }
    else
    {
LABEL_75:
      v41 = 0;
    }
    v11 = (WTF::AtomString *)(v41 + 1);
  }
  else
  {
    v11 = (WTF::AtomString *)MEMORY[0x1E0CBF2F8];
  }
  if (*(_QWORD *)(v8 + 24))
  {
    v36 = *(_DWORD *)(v8 + 4);
    if ((v36 & 1) != 0)
    {
      v37 = *(_QWORD **)(v8 + 40);
      LODWORD(v38) = *(_DWORD *)(v8 + 52);
    }
    else
    {
      v37 = (_QWORD *)(v8 + 32);
      LODWORD(v38) = v36 >> 5;
    }
    if ((_DWORD)v38)
    {
      v38 = v38;
      while (1)
      {
        v39 = *v37;
        if (*v37 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v39 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v39 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v37 += 2;
        if (!--v38)
          goto LABEL_66;
      }
    }
    else
    {
LABEL_66:
      v37 = 0;
    }
    v12 = (WTF::StringImpl **)(v37 + 1);
  }
  else
  {
    v12 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  }
  if (*(_QWORD *)v11 || *v12)
  {
    WebCore::Element::updateId(this, v11, v12, 0);
    v9 = *((_QWORD *)this + 13);
  }
  if (v9 && (v13 = *(_DWORD *)(v9 + 4), (v13 & 2) != 0))
  {
    if ((v13 & 1) != 0)
    {
      v62 = *(uint64_t **)(v9 + 40);
      LODWORD(v63) = *(_DWORD *)(v9 + 52);
    }
    else
    {
      v62 = (uint64_t *)(v9 + 32);
      LODWORD(v63) = v13 >> 5;
    }
    if ((_DWORD)v63)
    {
      v63 = v63;
      while (1)
      {
        v64 = *v62;
        if (*v62 == WebCore::HTMLNames::nameAttr
          || *(_QWORD *)(v64 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
          && *(_QWORD *)(v64 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
        {
          break;
        }
        v62 += 2;
        if (!--v63)
          goto LABEL_123;
      }
    }
    else
    {
LABEL_123:
      v62 = 0;
    }
    v14 = (const WTF::AtomString *)(v62 + 1);
  }
  else
  {
    v14 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
  }
  v15 = *((_QWORD *)a2 + 13);
  if (v15 && (v16 = *(_DWORD *)(v15 + 4), (v16 & 2) != 0))
  {
    if ((v16 & 1) != 0)
    {
      v65 = *(_QWORD **)(v15 + 40);
      LODWORD(v66) = *(_DWORD *)(v15 + 52);
    }
    else
    {
      v65 = (_QWORD *)(v15 + 32);
      LODWORD(v66) = v16 >> 5;
    }
    if ((_DWORD)v66)
    {
      v66 = v66;
      while (1)
      {
        v67 = *v65;
        if (*v65 == WebCore::HTMLNames::nameAttr
          || *(_QWORD *)(v67 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
          && *(_QWORD *)(v67 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
        {
          break;
        }
        v65 += 2;
        if (!--v66)
          goto LABEL_132;
      }
    }
    else
    {
LABEL_132:
      v65 = 0;
    }
    v17 = (WTF::StringImpl **)(v65 + 1);
  }
  else
  {
    v17 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  }
  if ((*(_QWORD *)v14 || *v17) && (*((_BYTE *)this + 22) & 0x18) != 0 && *(WTF::StringImpl **)v14 != *v17)
  {
    WebCore::Element::updateNameForTreeScope(this, *((WebCore::TreeScope **)this + 5), v14, v17);
    if ((*((_QWORD *)this + 2) & 0x18000000000000) == 0x8000000000000)
    {
      a4 = (WebCore::TreeScope *)v17;
      v59 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
      if (v59 && (*(_WORD *)(v59 + 3358) & 1) != 0)
      {
        *(_DWORD *)(v59 + 24) += 2;
        WebCore::Element::updateNameForDocument(this, (WebCore::HTMLDocument *)v59, v14, (WTF::StringImpl **)a4);
        if (*(_DWORD *)(v59 + 24) == 2)
        {
          if ((*(_WORD *)(v59 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v59, v61);
        }
        else
        {
          *(_DWORD *)(v59 + 24) -= 2;
        }
      }
    }
  }
  v18 = *((_QWORD *)a2 + 13);
  v19 = *(_DWORD *)(v18 + 4);
  if (!v18
    || (v19 & 1) == 0
    || *(_QWORD *)(v18 + 32)
    || (v44 = *(_QWORD *)(v18 + 8)) != 0 && (*(_BYTE *)(v44 + 4) & 8) != 0 && *(_QWORD *)(v44 + 8))
  {
    v20 = (_DWORD *)*((_QWORD *)a2 + 13);
    goto LABEL_27;
  }
  v45 = WTF::fastMalloc((WTF *)(16 * *(unsigned int *)(v18 + 52) + 32));
  v20 = (_DWORD *)v45;
  *(_DWORD *)v45 = 1;
  v46 = *(_DWORD *)(v18 + 4);
  if ((v46 & 1) != 0)
    v47 = *(_DWORD *)(v18 + 52);
  else
    v47 = v46 >> 5;
  v19 = *(_DWORD *)(v18 + 4) & 0x1E | (32 * v47);
  *(_DWORD *)(v45 + 4) = v19;
  *(_QWORD *)(v45 + 8) = 0;
  v48 = (uint64_t *)(v45 + 8);
  v49 = *(_QWORD *)(v18 + 16);
  if (v49)
    ++*(_DWORD *)(v49 + 8);
  *(_QWORD *)(v45 + 16) = v49;
  v50 = *(_DWORD **)(v18 + 24);
  if (v50)
    *v50 += 2;
  *(_QWORD *)(v45 + 24) = v50;
  v51 = *(_QWORD *)(v18 + 8);
  if (v51)
  {
    v112 = v20;
    WebCore::StyleProperties::immutableCopyIfNeeded(v51, &v116);
    WTF::RefPtr<WebCore::StyleProperties,WTF::RawPtrTraits<WebCore::StyleProperties>,WTF::DefaultRefDerefTraits<WebCore::StyleProperties>>::operator=<WebCore::ImmutableStyleProperties>(v48, (WTF::StringImpl *)&v116);
    WTF::Ref<WebCore::ImmutableStyleProperties,WTF::RawPtrTraits<WebCore::ImmutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::ImmutableStyleProperties>>::~Ref(&v116, v113);
    v20 = v112;
    v19 = v112[1];
  }
  if (v19 < 0x20)
  {
LABEL_96:
    v58 = *((_QWORD *)a2 + 13);
    *((_QWORD *)a2 + 13) = v20;
    if (!v58)
      goto LABEL_27;
    if (*(_DWORD *)v58 != 1)
    {
      --*(_DWORD *)v58;
      goto LABEL_27;
    }
    v68 = *(unsigned int *)(v58 + 4);
    if ((v68 & 1) != 0)
    {
      v69 = *(unsigned int *)(v58 + 52);
      if ((_DWORD)v69)
      {
        v70 = 16 * v69;
        v71 = (WTF::StringImpl **)(*(_QWORD *)(v58 + 40) + 8);
        do
        {
          v72 = *v71;
          *v71 = 0;
          if (v72)
          {
            if (*(_DWORD *)v72 == 2)
            {
              v77 = v71;
              WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v20);
              v71 = v77;
            }
            else
            {
              *(_DWORD *)v72 -= 2;
            }
          }
          v73 = (WTF::StringImpl **)*(v71 - 1);
          *(v71 - 1) = 0;
          if (v73)
          {
            if (*(_DWORD *)v73 == 1)
            {
              v74 = v71;
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v73);
              WTF::fastFree(v75, v76);
              v71 = v74;
            }
            else
            {
              --*(_DWORD *)v73;
            }
          }
          v71 += 2;
          v70 -= 16;
        }
        while (v70);
      }
      v78 = *(WTF **)(v58 + 40);
      if ((WTF *)(v58 + 56) != v78 && v78 != 0)
      {
        *(_QWORD *)(v58 + 40) = 0;
        *(_DWORD *)(v58 + 48) = 0;
        WTF::fastFree(v78, v20);
      }
      v80 = *(unsigned int **)(v58 + 32);
      *(_QWORD *)(v58 + 32) = 0;
      if (v80)
      {
        if (*v80 == 1)
        {
          v99 = v80[1];
          if (v99 >= 0x10)
          {
            v100 = 0;
            v101 = (unsigned int *)((char *)v80 + ((v99 >> 3) & 0x1FFFFFFE) + 8);
            v115 = (WTF *)v80;
            do
            {
              v102 = v101;
              v103 = (_DWORD *)(*v101 | ((unint64_t)*((unsigned __int8 *)v101 + 4) << 32));
              if (*v103 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v103, (WTF::StringImpl *)v20);
              else
                *v103 -= 2;
              ++v100;
              v80 = (unsigned int *)v115;
              v101 = (unsigned int *)((char *)v102 + 5);
            }
            while (v100 < (unint64_t)*((unsigned int *)v115 + 1) >> 4);
          }
          WTF::fastFree((WTF *)v80, v20);
        }
        else
        {
          --*v80;
        }
      }
      v81 = *(WTF::StringImpl **)(v58 + 24);
      *(_QWORD *)(v58 + 24) = 0;
      if (v81)
      {
        if (*(_DWORD *)v81 == 2)
          WTF::StringImpl::destroy(v81, (WTF::StringImpl *)v20);
        else
          *(_DWORD *)v81 -= 2;
      }
      v82 = *(WTF **)(v58 + 16);
      *(_QWORD *)(v58 + 16) = 0;
      if (v82)
      {
        if (*((_DWORD *)v82 + 2) == 1)
          WebCore::SpaceSplitStringData::destroy(v82, (WTF::StringImpl *)v20);
        else
          --*((_DWORD *)v82 + 2);
      }
      v83 = *(_QWORD *)(v58 + 8);
      *(_QWORD *)(v58 + 8) = 0;
      if (!v83)
        goto LABEL_166;
      v84 = *(_DWORD *)v83 - 1;
      if (*(_DWORD *)v83 != 1)
        goto LABEL_165;
      v114 = (WTF *)v83;
      if ((*(_BYTE *)(v83 + 4) & 8) != 0)
      {
        v104 = *(unsigned int *)(v83 + 28);
        if ((_DWORD)v104)
        {
          v105 = 16 * v104;
          v106 = (_DWORD **)(*((_QWORD *)v114 + 2) + 8);
          do
          {
            v107 = *v106;
            *v106 = 0;
            if (v107)
            {
              if (*v107 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v107, (WTF::StringImpl *)v20);
              else
                *v107 -= 2;
            }
            v106 += 2;
            v105 -= 16;
          }
          while (v105);
        }
LABEL_214:
        v108 = (WTF *)*((_QWORD *)v114 + 2);
        if ((WTF *)((char *)v114 + 32) != v108 && v108 != 0)
        {
          *((_QWORD *)v114 + 2) = 0;
          *((_DWORD *)v114 + 6) = 0;
          WTF::fastFree(v108, v20);
        }
        v110 = *((_QWORD *)v114 + 1);
        *((_QWORD *)v114 + 1) = 0;
        if (v110)
          (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
        v111 = v114;
        goto LABEL_222;
      }
    }
    else
    {
      if (v68 >= 0x20)
      {
        v85 = v68 >> 5;
        v86 = (WTF::StringImpl **)(v58 + 40);
        do
        {
          v87 = *v86;
          *v86 = 0;
          if (v87)
          {
            if (*(_DWORD *)v87 == 2)
            {
              v92 = v86;
              WTF::StringImpl::destroy(v87, (WTF::StringImpl *)v20);
              v86 = v92;
            }
            else
            {
              *(_DWORD *)v87 -= 2;
            }
          }
          v88 = (WTF::StringImpl **)*(v86 - 1);
          *(v86 - 1) = 0;
          if (v88)
          {
            if (*(_DWORD *)v88 == 1)
            {
              v89 = v86;
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v88);
              WTF::fastFree(v90, v91);
              v86 = v89;
            }
            else
            {
              --*(_DWORD *)v88;
            }
          }
          v86 += 2;
          --v85;
        }
        while (v85);
      }
      v93 = *(WTF::StringImpl **)(v58 + 24);
      *(_QWORD *)(v58 + 24) = 0;
      if (v93)
      {
        if (*(_DWORD *)v93 == 2)
          WTF::StringImpl::destroy(v93, (WTF::StringImpl *)v20);
        else
          *(_DWORD *)v93 -= 2;
      }
      v94 = *(WTF **)(v58 + 16);
      *(_QWORD *)(v58 + 16) = 0;
      if (v94)
      {
        if (*((_DWORD *)v94 + 2) == 1)
          WebCore::SpaceSplitStringData::destroy(v94, (WTF::StringImpl *)v20);
        else
          --*((_DWORD *)v94 + 2);
      }
      v83 = *(_QWORD *)(v58 + 8);
      *(_QWORD *)(v58 + 8) = 0;
      if (!v83)
        goto LABEL_166;
      v84 = *(_DWORD *)v83 - 1;
      if (*(_DWORD *)v83 != 1)
      {
LABEL_165:
        *(_DWORD *)v83 = v84;
LABEL_166:
        WTF::fastFree((WTF *)v58, v20);
        v20 = (_DWORD *)*((_QWORD *)a2 + 13);
        v19 = v20[1];
LABEL_27:
        if ((v19 & 1) != 0)
        {
          WebCore::ElementData::makeUniqueCopy((WebCore::ElementData *)&v116, (const WebCore::UniqueElementData *)v20);
          WTF::RefPtr<WebCore::ElementData,WTF::RawPtrTraits<WebCore::ElementData>,WTF::DefaultRefDerefTraits<WebCore::ElementData>>::operator=<WebCore::UniqueElementData>((uint64_t *)this + 13, (WTF::StringImpl *)&v116);
          v21 = v116;
          v116 = 0;
          if (!v21)
          {
LABEL_30:
            if ((*((_WORD *)this + 14) & 0x10) != 0
              && *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
            {
              ++*((_DWORD *)this + 41);
              WebCore::HTMLInputElement::initializeInputTypeAfterParsingOrCloning(this);
              WebCore::ValidatedFormListedElement::endDelayingUpdateValidity((uint64_t)this + 112);
            }
            v22 = *(_QWORD *)v10;
            v23 = *(_DWORD *)(*(_QWORD *)v10 + 4);
            if ((v23 & 1) != 0)
            {
              v24 = *(_QWORD *)(v22 + 40);
              v25 = *(_DWORD *)(v22 + 52);
            }
            else
            {
              v24 = v22 + 32;
              v25 = v23 >> 5;
            }
            if (v25)
            {
              v26 = 0;
              v27 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
              do
              {
                WebCore::Element::notifyAttributeChanged(this, (WTF::StringImpl ***)(v24 + 16 * v26), v27, (WTF::StringImpl **)(v24 + 16 * v26 + 8));
                v28 = v26 + 1;
                v26 = (v26 + 1);
              }
              while (v25 != v28);
            }
            v29 = (_QWORD *)MEMORY[0x1E0CBF3B8];
            v30 = (_DWORD **)MEMORY[0x1E0CBF3B8];
            if ((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) != 0)
            {
              if (WebCore::Element::isNonceable(a2, (unsigned __int8 *)v20, (uint64_t)v12, a4, a5))
                v30 = (_DWORD **)((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 216);
              else
                v30 = (_DWORD **)MEMORY[0x1E0CBF3B8];
            }
            v31 = *v30;
            v32 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
            if (*v30 != (_DWORD *)*v29 || v32 != 0)
            {
              if (!v32)
              {
                WebCore::Node::materializeRareData(this);
                v32 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
                v31 = *v30;
              }
              if (v31)
                *v31 += 2;
              v35 = *(WTF::StringImpl **)(v32 + 216);
              *(_QWORD *)(v32 + 216) = v31;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v20);
                else
                  *(_DWORD *)v35 -= 2;
              }
            }
            return;
          }
        }
        else
        {
          ++*v20;
          v21 = *(unsigned int **)v10;
          *(_QWORD *)v10 = v20;
          if (!v21)
            goto LABEL_30;
        }
        WebCore::ElementData::deref((uint64_t)v21, (WTF::StringImpl *)v20);
        goto LABEL_30;
      }
      v114 = (WTF *)v83;
      if ((*(_BYTE *)(v83 + 4) & 8) != 0)
      {
        v95 = *(unsigned int *)(v83 + 28);
        if ((_DWORD)v95)
        {
          v96 = 16 * v95;
          v97 = (_DWORD **)(*((_QWORD *)v114 + 2) + 8);
          do
          {
            v98 = *v97;
            *v97 = 0;
            if (v98)
            {
              if (*v98 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v98, (WTF::StringImpl *)v20);
              else
                *v98 -= 2;
            }
            v97 += 2;
            v96 -= 16;
          }
          while (v96);
        }
        goto LABEL_214;
      }
    }
    WebCore::ImmutableStyleProperties::~ImmutableStyleProperties(v114, (WTF::StringImpl *)v20);
LABEL_222:
    WTF::fastFree(v111, v20);
    goto LABEL_166;
  }
  v52 = v19 >> 5;
  v53 = *(unsigned int *)(v18 + 52);
  v54 = v20 + 10;
  v55 = (_DWORD **)(*(_QWORD *)(v18 + 40) + 8);
  while (v53)
  {
    v56 = *(v55 - 1);
    if (v56)
      ++*v56;
    *(v54 - 1) = v56;
    v57 = *v55;
    if (*v55)
      *v57 += 2;
    *v54 = v57;
    v54 += 2;
    v55 += 2;
    --v53;
    if (!--v52)
      goto LABEL_96;
  }
  __break(0xC471u);
}

uint64_t WebCore::Element::ensureUserAgentShadowRoot(WebCore::Element *this)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::Style::Scope *v4;
  uint64_t v5;
  WebCore::Node *v6;
  int v8;
  WebCore::Node *v9;

  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v3 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v3)
    {
      v8 = *(_DWORD *)(v3 + 24);
      *(_DWORD *)(v3 + 24) = v8 + 2;
      if (v8)
      {
        *(_DWORD *)(v3 + 24) = v8;
        return v3;
      }
      if ((*(_WORD *)(v3 + 30) & 0x400) != 0)
        return v3;
      v6 = (WebCore::Node *)v3;
LABEL_12:
      WebCore::Node::removedLastRef(v6);
      return v3;
    }
  }
  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v3 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v3 + 8) = xmmword_1968BC9D0;
  *(_DWORD *)(v3 + 24) = 2;
  *(_WORD *)(v3 + 28) = -20348;
  *(_OWORD *)(v3 + 30) = 0u;
  *(_OWORD *)(v3 + 46) = 0u;
  *(_OWORD *)(v3 + 62) = 0u;
  *(_WORD *)(v3 + 78) = 0;
  ++*(_DWORD *)(v2 + 3324);
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = v3;
  *(_QWORD *)(v3 + 104) = v2;
  *(_QWORD *)(v3 + 112) = v2 + 96;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 40) = v3 + 96;
  *(_QWORD *)v3 = off_1E33A7A70;
  *(_BYTE *)(v3 + 192) &= 0x80u;
  *(_WORD *)(v3 + 193) = 256;
  *(_QWORD *)(v3 + 200) = 0;
  *(_QWORD *)(v3 + 208) = 0;
  v4 = (WebCore::Style::Scope *)WTF::fastMalloc((WTF *)0x140);
  *(_QWORD *)(v3 + 216) = WebCore::Style::Scope::Scope(v4, (WebCore::ShadowRoot *)v3);
  *(_QWORD *)(v3 + 224) = 0;
  *(_BYTE *)(v3 + 232) = 0;
  *(_BYTE *)(v3 + 240) = 0;
  v5 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v5 | 0x10000000000000;
  if (!*(_BYTE *)(v3 + 193))
    *(_QWORD *)(v3 + 16) = v5 | 0x30000000000000;
  v9 = (WebCore::Node *)v3;
  WebCore::Element::addShadowRoot(this, (uint64_t *)&v9);
  v6 = v9;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) != 0)
        return v3;
      goto LABEL_12;
    }
    *((_DWORD *)v9 + 6) -= 2;
  }
  return v3;
}

uint64_t WebCore::Element::cloneShadowTreeIfPossible(uint64_t this, WebCore::Element *a2)
{
  uint64_t v2;
  int v3;
  WebCore::Node *v5;
  void *v6;
  WebCore::Node *v7;

  if ((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v2 = *(_QWORD *)((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v2)
    {
      v3 = *(_DWORD *)(v2 + 24);
      *(_DWORD *)(v2 + 24) = v3 + 2;
      if ((*(_BYTE *)(v2 + 192) & 4) != 0)
      {
        WebCore::ShadowRoot::cloneNodeInternal((_BYTE *)v2, *(_QWORD *)(*((_QWORD *)a2 + 5) + 8), 1, (uint64_t *)&v7);
        v5 = v7;
        if ((*((_WORD *)v7 + 14) & 0x80) == 0)
        {
          this = 316;
          __break(0xC471u);
          return this;
        }
        *((_DWORD *)v7 + 6) += 2;
        v7 = v5;
        WebCore::Element::addShadowRoot(a2, (uint64_t *)&v7);
        if (v7)
        {
          if (*((_DWORD *)v7 + 6) == 2)
          {
            if ((*((_WORD *)v7 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v7, v6);
          }
          else
          {
            *((_DWORD *)v7 + 6) -= 2;
          }
        }
        this = (uint64_t)WebCore::ContainerNode::cloneChildNodes((WebCore::ContainerNode *)v2, v5);
        if (*((_DWORD *)v5 + 6) == 2)
        {
          if ((*((_WORD *)v5 + 15) & 0x400) == 0)
            this = (uint64_t)WebCore::Node::removedLastRef(v5, a2);
        }
        else
        {
          *((_DWORD *)v5 + 6) -= 2;
        }
        v3 = *(_DWORD *)(v2 + 24) - 2;
      }
      if (v3)
      {
        *(_DWORD *)(v2 + 24) = v3;
      }
      else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      {
        return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
      }
    }
  }
  return this;
}

uint64_t WebCore::Element::cloneNodeInternal@<X0>(const WebCore::Element *a1@<X0>, unsigned int a2@<W2>, WebCore::Element **a3@<X8>)
{
  WebCore::Element *v5;
  uint64_t v6;
  WebCore::TreeScope *v7;
  __n128 v8;
  uint64_t result;
  WebCore::Element *v10;
  uint64_t v11;
  WebCore::TreeScope *v12;
  __n128 v13;
  WebCore::Element *v14;

  if (a2 > 1)
  {
    (*(void (**)(WebCore::Element **__return_ptr, const WebCore::Element *))(*(_QWORD *)a1 + 1112))(&v14, a1);
    v10 = v14;
    WebCore::Element::cloneAttributesFromElement(v14, a1, v11, v12, v13);
    (*(void (**)(WebCore::Element *, const WebCore::Element *))(*(_QWORD *)v10 + 496))(v10, a1);
    WebCore::Element::cloneShadowTreeIfPossible((uint64_t)a1, v14);
    result = (uint64_t)WebCore::ContainerNode::cloneChildNodes(a1, v14);
  }
  else
  {
    (*(void (**)(WebCore::Element **__return_ptr, const WebCore::Element *))(*(_QWORD *)a1 + 1112))(&v14, a1);
    v5 = v14;
    WebCore::Element::cloneAttributesFromElement(v14, a1, v6, v7, v8);
    (*(void (**)(WebCore::Element *, const WebCore::Element *))(*(_QWORD *)v5 + 496))(v5, a1);
    result = WebCore::Element::cloneShadowTreeIfPossible((uint64_t)a1, v14);
  }
  *a3 = v14;
  return result;
}

unsigned int WebCore::Element::offsetHeight(WebCore::Element *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unsigned int result;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  double v11;
  double v12;
  int v13;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  WebCore::Document::updateLayoutIfDimensionsOutOfDate(v2, (uint64_t)this, 2);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  v4 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (!v4 || (*(_BYTE *)(v4 + 45) & 8) == 0)
    return 0;
  ++*(_DWORD *)(v4 + 16);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 904))(v4);
  v8 = ((int)(v6 - (v7 & 0xFFFFFFC0) + 32) >> 6) + v6 / 64;
  v9 = v8 << 6;
  if (v8 < -33554432)
    v9 = 0x80000000;
  if (v8 <= 0x1FFFFFF)
    v10 = v9;
  else
    v10 = 0x7FFFFFFF;
  v11 = (float)((float)((float)v10 * 0.015625) / *(float *)(*(_QWORD *)(v4 + 104) + 184)) * 64.0;
  if (v11 >= 2147483650.0)
  {
    v12 = 33554432.0;
  }
  else if (v11 <= -2147483650.0)
  {
    v12 = -33554432.0;
  }
  else
  {
    v12 = (double)(int)v11 * 0.015625;
  }
  v13 = *(_DWORD *)(v4 + 16);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x19457C6C8);
  }
  result = llround(v12);
  *(_DWORD *)(v4 + 16) = v13 - 1;
  return result;
}

uint64_t WebCore::Element::clientWidth(WebCore::Element *this)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  double v19;
  double v20;
  int v21;
  unint64_t v22;
  int v23;
  const WebCore::RenderElement *v24;

  v3 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  WebCore::Document::updateLayoutIfDimensionsOutOfDate(v3, (uint64_t)this, 1);
  v5 = *(_QWORD *)(v3 + 1944);
  if (!v5 || *(_BYTE *)(v3 + 3405))
  {
    v1 = 0;
    goto LABEL_10;
  }
  ++*(_DWORD *)(v5 + 16);
  if (*(_BYTE *)(v3 + 3384) == 2)
  {
    if ((*((_WORD *)this + 14) & 0x10) == 0
      || (WebCore::Element *)WebCore::Document::bodyOrFrameset((WebCore::Document *)v3) != this)
    {
LABEL_5:
      v6 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
      if (v6 && (*(_BYTE *)(v6 + 45) & 4) != 0)
      {
        ++*(_DWORD *)(v6 + 16);
        v9 = WebCore::RenderBox::clientWidth((WebCore::RenderBox *)v6);
        v11 = ((int)(v9 - (v10 & 0xFFFFFFC0) + 32) >> 6) + v9 / 64;
        v12 = v11 << 6;
        if (v11 < -33554432)
          v12 = 0x80000000;
        if (v11 <= 0x1FFFFFF)
          v13 = v12;
        else
          v13 = 0x7FFFFFFF;
        v14 = *(unsigned __int8 *)(v6 + 46);
        if (v14 == 63 || v14 == 35)
        {
          v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1016))(v6);
          v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1024))(v6);
          v16 = v1 + v15;
          if (__OFADD__((_DWORD)v1, v15))
            v16 = (v1 >> 31) + 0x7FFFFFFF;
          v17 = __OFADD__(v13, v16);
          v18 = v13 + v16;
          if (v17)
            v13 = (v13 >> 31) + 0x7FFFFFFF;
          else
            v13 = v18;
        }
        v19 = (float)((float)((float)v13 * 0.015625) / *(float *)(*(_QWORD *)(v6 + 104) + 184)) * 64.0;
        if (v19 >= 2147483650.0)
        {
          v20 = 33554432.0;
        }
        else if (v19 <= -2147483650.0)
        {
          v20 = -33554432.0;
        }
        else
        {
          v20 = (double)(int)v19 * 0.015625;
        }
        v21 = *(_DWORD *)(v6 + 16);
        if (!v21)
        {
          __break(0xC471u);
          JUMPOUT(0x19457C91CLL);
        }
        LODWORD(v1) = llround(v20);
        *(_DWORD *)(v6 + 16) = v21 - 1;
      }
      else
      {
        v1 = 0;
      }
      goto LABEL_8;
    }
  }
  else if (*(WebCore::Element **)(v3 + 1272) != this)
  {
    goto LABEL_5;
  }
  v22 = WebCore::ScrollView::layoutSize(*(WebCore::ScrollView **)(v5 + 248));
  v1 = WebCore::adjustForAbsoluteZoom(v22, v23, v24, *(float *)(*(_QWORD *)(v5 + 104) + 184));
LABEL_8:
  v7 = *(_DWORD *)(v5 + 16);
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x19457C8FCLL);
  }
  *(_DWORD *)(v5 + 16) = v7 - 1;
LABEL_10:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v1;
}

unsigned int *WebCore::Element::ensureAttr@<X0>(WebCore::TreeScope **this@<X0>, const WebCore::QualifiedName *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::TreeScope *v13;
  unsigned int v14;
  _DWORD *v15;
  WebCore::TreeScope *v16;
  WebCore::Node *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  result = (unsigned int *)WebCore::ensureAttrNodeListForElement((WebCore *)this, a2);
  v7 = (uint64_t)result;
  v8 = result[3];
  if ((_DWORD)v8)
  {
    v22 = *(uint64_t **)result;
    v23 = *(_QWORD *)a2;
    v24 = 8 * v8;
    while (1)
    {
      v10 = *v22;
      v25 = *(_QWORD *)(*v22 + 88);
      if (v25 == v23
        || *(_QWORD *)(v25 + 24) == *(_QWORD *)(v23 + 24) && *(_QWORD *)(v25 + 32) == *(_QWORD *)(v23 + 32))
      {
        break;
      }
      ++v22;
      v24 -= 8;
      if (!v24)
        goto LABEL_2;
    }
    *(_DWORD *)(v10 + 24) += 2;
  }
  else
  {
LABEL_2:
    v9 = bmalloc::api::isoAllocate();
    v10 = v9;
    v11 = *((_QWORD *)this[5] + 1);
    *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v9 + 24) = 0x200000000002;
    *(_QWORD *)(v9 + 32) = 0;
    v12 = v11 + 96;
    if (!v11)
      v12 = 0;
    *(_QWORD *)(v9 + 40) = v12;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    ++*(_DWORD *)(v11 + 3324);
    *(_QWORD *)v9 = off_1E33A0600;
    result = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (result)
    {
      do
        v14 = __ldaxr(result);
      while (__stlxr(v14 + 1, result));
    }
    *(_QWORD *)(v10 + 80) = result;
    v15 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      ++*v15;
    *(_QWORD *)(v10 + 96) = 0;
    *(_QWORD *)(v10 + 104) = 0;
    *(_QWORD *)(v10 + 88) = v15;
    v27 = v10;
    v16 = this[5];
    v17 = *(WebCore::Node **)(v10 + 40);
    if (v17 != v16)
      result = (unsigned int *)WebCore::Node::moveTreeToNewScope(v10, v17, v16, v13);
    v18 = *(unsigned int *)(v7 + 12);
    if ((_DWORD)v18 == *(_DWORD *)(v7 + 8))
    {
      result = (unsigned int *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v18 + 1, (unint64_t)&v27);
      v19 = *(unsigned int *)(v7 + 12);
      v20 = *(_QWORD *)v7;
      v21 = *(uint64_t **)result;
      if (*(_QWORD *)result)
        *((_DWORD *)v21 + 6) += 2;
      *(_QWORD *)(v20 + 8 * v19) = v21;
      *(_DWORD *)(v7 + 12) = v19 + 1;
      v10 = v27;
    }
    else
    {
      v26 = *(_QWORD *)v7;
      *(_DWORD *)(v10 + 24) += 2;
      *(_QWORD *)(v26 + 8 * v18) = v10;
      *(_DWORD *)(v7 + 12) = v18 + 1;
    }
  }
  *a3 = v10;
  return result;
}

uint64_t WebCore::JSText::subspaceForImpl(WebCore::JSText *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3928);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v21 = *(_QWORD *)(v9 + 3928);
  if (!v21)
  {
    v14 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v14, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v16 = v22;
    v22 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v23;
    v23 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v15);
      else
        --*(_DWORD *)v17;
    }
    v21 = v14;
    v18 = *(_QWORD *)(v9 + 3928);
    *(_QWORD *)(v9 + 3928) = v14;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v19 == *(_DWORD *)(v7 + 2840))
    {
      v20 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 2832, v19 + 1, (unint64_t)&v21);
      v19 = *(unsigned int *)(v7 + 2844);
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = *v20;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = v14;
    }
    *(_DWORD *)(v7 + 2844) = v19 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 3928);
  *(_QWORD *)(v3 + 3928) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSAttr::subspaceForImpl(WebCore::JSAttr *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3392);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v21 = *(_QWORD *)(v9 + 3392);
  if (!v21)
  {
    v14 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v14, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v16 = v22;
    v22 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v23;
    v23 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v15);
      else
        --*(_DWORD *)v17;
    }
    v21 = v14;
    v18 = *(_QWORD *)(v9 + 3392);
    *(_QWORD *)(v9 + 3392) = v14;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v19 == *(_DWORD *)(v7 + 2840))
    {
      v20 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 2832, v19 + 1, (unint64_t)&v21);
      v19 = *(unsigned int *)(v7 + 2844);
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = *v20;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = v14;
    }
    *(_DWORD *)(v7 + 2844) = v19 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 3392);
  *(_QWORD *)(v3 + 3392) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

void WebCore::Timer::~Timer(WebCore::Timer *this)
{
  uint64_t v2;
  WTF *v3;
  void *v4;

  *(_QWORD *)this = off_1E31F7378;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WebCore::TimerBase::~TimerBase(this);
  WTF::fastFree(v3, v4);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E31F7378;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WebCore::TimerBase::~TimerBase(this);
}

uint64_t WebCore::Timer::Timer<WebCore::Geolocation,WebCore::Geolocation>(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;

  *(_QWORD *)a1 = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = *(unsigned int **)(StatusReg + 736);
  if (!v5)
    v5 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = off_1E31F7378;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E33570E8;
  v7[1] = WebCore::Geolocation::resumeTimerFired;
  v7[2] = 0;
  v7[3] = a2;
  *(_QWORD *)(a1 + 48) = v7;
  return a1;
}

uint64_t WebCore::Timer::Timer<WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>,WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t StatusReg;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;

  *(_QWORD *)a1 = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = *(unsigned int **)(StatusReg + 736);
  if (!v9)
    v9 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)a1 = off_1E31F7378;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = off_1E33CDA08;
  v11[1] = a3;
  v11[2] = a4;
  v11[3] = a2;
  *(_QWORD *)(a1 + 48) = v11;
  return a1;
}

uint64_t WebCore::Timer::Timer<WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>,WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t StatusReg;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;

  *(_QWORD *)a1 = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = *(unsigned int **)(StatusReg + 736);
  if (!v9)
    v9 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)a1 = off_1E31F7378;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = off_1E33C4B90;
  v11[1] = a3;
  v11[2] = a4;
  v11[3] = a2;
  *(_QWORD *)(a1 + 48) = v11;
  return a1;
}

uint64_t WebCore::Timer::Timer<WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>,WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t StatusReg;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;

  *(_QWORD *)a1 = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = *(unsigned int **)(StatusReg + 736);
  if (!v9)
    v9 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)a1 = off_1E31F7378;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = off_1E33F61D8;
  v11[1] = a3;
  v11[2] = a4;
  v11[3] = a2;
  *(_QWORD *)(a1 + 48) = v11;
  return a1;
}

void WebCore::Style::applyFontStyle(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  int v7;
  int v8;
  WTF *v9;
  int v10;
  WTF::StringImpl *v11;
  unsigned int *v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  _BYTE v17[148];
  __int16 v18;
  char v19;
  __int16 v20;
  unsigned __int8 v21;
  WTF *v22;
  int v23;
  __int16 v24;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
  v7 = *(_DWORD *)(v6 + 196);
  v8 = v7 & 0xFF0000;
  if ((*(_QWORD *)&a2 & 0xFF0000) != 0 && v8)
  {
    if ((float)((float)(__int16)v7 * 0.25) != (float)((float)(__int16)a2 * 0.25))
      goto LABEL_7;
LABEL_6:
    if (*(unsigned __int16 *)(v6 + 212) >> 15 == a3)
      return;
    goto LABEL_7;
  }
  if (((*(_QWORD *)&a2 & 0xFF0000) != 0) == (v8 != 0))
    goto LABEL_6;
LABEL_7:
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v17, (const WebCore::FontDescription *)(v6 + 48));
  v9 = *(WTF **)(v6 + 216);
  ++*(_DWORD *)v9;
  v22 = v9;
  v23 = *(_DWORD *)(v6 + 224);
  v24 = *(_WORD *)(v6 + 228);
  v19 = BYTE2(a2);
  v18 = a2;
  v10 = v20 & 0x7FFF | (v21 << 16);
  v20 = v20 & 0x7FFF | ((a3 == 1) << 15);
  v21 = BYTE2(v10);
  *(_BYTE *)(a1 + 316) |= WebCore::RenderStyle::setFontDescription(*(_QWORD *)(a1 + 16), (uint64_t)v17);
  v12 = (unsigned int *)v22;
  v22 = 0;
  if (v12)
  {
    if (*v12 == 1)
    {
      v13 = v12[1];
      if ((_DWORD)v13)
      {
        v14 = (WTF::StringImpl **)(v12 + 2);
        v15 = 8 * v13;
        do
        {
          v16 = *v14;
          *v14 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v11);
            else
              *(_DWORD *)v16 -= 2;
          }
          ++v14;
          v15 -= 8;
        }
        while (v15);
      }
      WTF::fastFree((WTF *)v12, v11);
    }
    else
    {
      --*v12;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v17, v11);
}

BOOL WebCore::Style::Adjuster::adjustEventListenerRegionTypesForRootStyle(WebCore::EventNames **this, WebCore::RenderStyle *a2, const WebCore::Document *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WebCore::EventNames *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WebCore::StyleRareInheritedData *v15;
  WTF *v16;
  void *v17;

  v5 = WebCore::Style::Adjuster::computeEventListenerRegionTypes(this, (uint64_t)a2, (uint64_t)a2, 0);
  v7 = v5;
  v8 = *((_QWORD *)a2 + 87);
  if (v8)
    v7 = WebCore::Style::Adjuster::computeEventListenerRegionTypes((WebCore::EventNames **)v5, v6, v8, 0) | v5;
  v9 = (uint64_t)this[3];
  v10 = *(unsigned __int8 *)(v9 + 241);
  if (v10 != v7)
  {
    if (*(_DWORD *)v9 == 1)
    {
      v12 = this[3];
    }
    else
    {
      v13 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v13, v9);
      v15 = this[3];
      this[3] = v12;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v15, v14);
          WTF::fastFree(v16, v17);
          v12 = this[3];
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
    }
    *((_BYTE *)v12 + 241) = v7;
  }
  return v10 != v7;
}

void WebCore::Style::Builder::applyPropertiesImpl<(WebCore::Style::Builder::CustomPropertyCycleTracking)0>(unint64_t a1, signed int a2, signed int a3)
{
  unsigned int v3;
  unint64_t v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int16 v30;
  __int16 v31;
  unint64_t v32;
  unsigned __int16 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  __int16 v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;

  v3 = a2;
  if (a3 == 350)
  {
    v11 = (unint64_t)a2 >> 6;
    if (v11 != 6)
    {
      if (a2 >= 0x180)
      {
LABEL_46:
        __break(1u);
        return;
      }
      v44 = a1 + 14736;
      v45 = (unint64_t)a2 >> 6;
      v12 = *(_QWORD *)(a1 + 14736 + 8 * v11) & (-1 << a2);
      if (v12)
      {
        v47 = a2 & 0xFFC0;
        v49 = a1 + 48;
        v13 = a1 + 15624;
        do
        {
          v14 = __clz(__rbit64(v12));
          if ((unsigned __int16)(v14 | v47) >= 0x1CBu)
            goto LABEL_46;
          v15 = (unsigned __int16)(v14 | v47);
          if (v15 >= 0x240)
            goto LABEL_46;
          v16 = (unsigned __int16 *)(v49 + 32 * v15);
          v17 = 1 << v14;
          v18 = v15 >> 6;
          *(_QWORD *)(v13 + 8 * (v15 >> 6)) |= 1 << v14;
          v19 = *(_QWORD *)(a1 + 15768);
          *(_QWORD *)(a1 + 15768) = v16;
          v20 = *((_QWORD *)v16 + 1);
          if (v20)
          {
            v21 = *(_DWORD *)(a1 + 15776);
            *(_DWORD *)(a1 + 15776) = 0;
            WebCore::Style::Builder::applyProperty(a1, (WTF::StringImpl *)*v16, v20, 0);
            *(_DWORD *)(a1 + 15776) = v21;
          }
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 15480) + 45) & 0xC) != 0)
          {
            v23 = v49 + 32 * v15;
            v24 = *(_QWORD *)(v23 + 16);
            if (v24)
            {
              *(_DWORD *)(a1 + 15776) = 1;
              WebCore::Style::Builder::applyProperty(a1, (WTF::StringImpl *)*v16, v24, 1u);
            }
            v25 = *(_QWORD *)(v23 + 24);
            if (v25)
            {
              *(_DWORD *)(a1 + 15776) = 2;
              WebCore::Style::Builder::applyProperty(a1, (WTF::StringImpl *)*v16, v25, 2u);
            }
            *(_DWORD *)(a1 + 15776) = 0;
          }
          v22 = *(_QWORD *)(v13 + 8 * v18);
          *(_QWORD *)(a1 + 15768) = v19;
          *(_QWORD *)(v13 + 8 * v18) = v22 & ~v17;
          v12 &= v12 - 1;
        }
        while (v12);
      }
      v26 = v45;
      if (v3 <= 0x13F)
      {
        v50 = a1 + 48;
        v27 = a1 + 15624;
        v28 = 4;
        if (v45 > 4)
          v28 = v45;
        v43 = v28;
        while (1)
        {
          v46 = v26;
          v48 = v26 + 1;
          v29 = *(_QWORD *)(v44 + 8 * (v26 + 1));
          if (v29)
            break;
LABEL_44:
          v26 = v48;
          if (v46 == v43)
            return;
        }
        v30 = (_WORD)v48 << 6;
        while (1)
        {
          v31 = __clz(__rbit64(v29));
          if ((unsigned __int16)(v31 | v30) >= 0x1CBu)
            goto LABEL_46;
          v32 = (unsigned __int16)(v31 | v30);
          if (v32 >= 0x240)
            goto LABEL_46;
          v33 = (unsigned __int16 *)(v50 + 32 * v32);
          v34 = 1 << v31;
          v35 = 8 * (v32 >> 6);
          *(_QWORD *)(v27 + v35) |= 1 << v31;
          v36 = *(_QWORD *)(a1 + 15768);
          *(_QWORD *)(a1 + 15768) = v33;
          v37 = *((_QWORD *)v33 + 1);
          if (v37)
          {
            v38 = *(_DWORD *)(a1 + 15776);
            *(_DWORD *)(a1 + 15776) = 0;
            WebCore::Style::Builder::applyProperty(a1, (WTF::StringImpl *)*v33, v37, 0);
            *(_DWORD *)(a1 + 15776) = v38;
          }
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 15480) + 45) & 0xC) != 0)
          {
            v40 = v50 + 32 * v32;
            v41 = *(_QWORD *)(v40 + 16);
            if (v41)
            {
              *(_DWORD *)(a1 + 15776) = 1;
              WebCore::Style::Builder::applyProperty(a1, (WTF::StringImpl *)*v33, v41, 1u);
            }
            v42 = *(_QWORD *)(v40 + 24);
            if (v42)
            {
              *(_DWORD *)(a1 + 15776) = 2;
              WebCore::Style::Builder::applyProperty(a1, (WTF::StringImpl *)*v33, v42, 2u);
            }
            *(_DWORD *)(a1 + 15776) = 0;
          }
          v39 = *(_QWORD *)(v27 + v35);
          *(_QWORD *)(a1 + 15768) = v36;
          *(_QWORD *)(v27 + v35) = v39 & ~v34;
          v29 &= v29 - 1;
          if (!v29)
            goto LABEL_44;
        }
      }
    }
  }
  else if (a2 <= a3)
  {
    v5 = a1 + 15624;
    v6 = a3 + 1;
    v7 = (unsigned __int16)a2;
    v8 = (_QWORD *)(a1 + 32 * (unsigned __int16)a2 + 48);
    while ((unsigned __int16)v3 < 0x180u)
    {
      v9 = v7 >> 6;
      v10 = 1 << v7;
      if ((*(_QWORD *)(a1 + 14736 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
      {
        *(_QWORD *)(v5 + 8 * v9) |= v10;
        WebCore::Style::Builder::applyCascadeProperty(a1, v8);
        *(_QWORD *)(v5 + 8 * v9) &= ~v10;
      }
      ++v3;
      v8 += 4;
      ++v7;
      if (v6 == v3)
        return;
    }
    goto LABEL_46;
  }
}

void WebCore::Style::AttributeChangeInvalidation::invalidateStyleWithRuleSets(WebCore::Style::AttributeChangeInvalidation *this)
{
  uint64_t v2;
  _QWORD *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  void *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  _BYTE v19[40];

  v2 = *((_QWORD *)this + 1);
  v3 = *(_QWORD **)(v2 + 40);
  if (*v3)
    v4 = (*(_WORD *)(*v3 + 28) & 0x80) == 0;
  else
    v4 = 1;
  if (v4)
    v16 = v3[1] + 1328;
  else
    v16 = *v3 + 216;
  v5 = *(_QWORD *)v16;
  if (!*(_QWORD *)(*(_QWORD *)v16 + 32))
  {
    if (*(_QWORD *)(v5 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v5);
    else
      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v5);
    v18 = *(_QWORD *)(v5 + 32);
    if (*(_DWORD *)(v18 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v18 + 32), v17);
    if (*(_BYTE *)(v18 + 242)
      || *(_BYTE *)(v18 + 243)
      || *(_BYTE *)(v18 + 244)
      || *(_BYTE *)(v18 + 245)
      || *(_BYTE *)(v18 + 246)
      || *(_BYTE *)(v18 + 247)
      || *(_BYTE *)(v18 + 248))
    {
      *(_BYTE *)(v5 + 236) = 1;
    }
  }
  v6 = *(_QWORD *)(v5 + 32);
  v7 = *(_BYTE *)(v6 + 350);
  *(_BYTE *)(v6 + 350) = 1;
  v8 = (unsigned __int8 *)*((_QWORD *)this + 2);
  if (!v8)
  {
    v9 = 0;
    v10 = 0;
LABEL_10:
    v11 = &v8[32 * v10];
    goto LABEL_11;
  }
  v10 = *((unsigned int *)v8 - 1);
  v11 = &v8[32 * v10];
  if (!*((_DWORD *)v8 - 3))
  {
    v9 = &v8[32 * v10];
    goto LABEL_10;
  }
  v9 = v8;
  if ((_DWORD)v10)
  {
    v13 = 32 * v10;
    v9 = v8;
    while (*v9 >= 0xFEu)
    {
      v9 += 32;
      v13 -= 32;
      if (!v13)
      {
        v9 = v11;
        break;
      }
    }
  }
LABEL_11:
  if (v8)
    v12 = &v8[32 * *((unsigned int *)v8 - 1)];
  else
    v12 = 0;
  while (v9 != v12)
  {
    WebCore::Style::Invalidator::Invalidator((uint64_t)v19, (uint64_t)(v9 + 8));
    v14 = v9 + 32;
    WebCore::Style::Invalidator::invalidateStyleWithMatchElement((uint64_t)v19, v2);
    WebCore::Style::Invalidator::~Invalidator((WebCore::Style::Invalidator *)v19, v15);
    v9 = v11;
    if (v14 != v11)
    {
      v9 = v14;
      while (*v9 >= 0xFEu)
      {
        v9 += 32;
        if (v9 == v11)
        {
          v9 = v11;
          break;
        }
      }
    }
  }
  *(_BYTE *)(v6 + 350) = v7;
}

WTF::StringImpl *WebCore::Style::AttributeChangeInvalidation::invalidateStyle(WTF::StringImpl *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, const WTF::AtomString *a4)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  int i;
  unsigned int v18;
  WTF::StringImpl *v19;
  uint64_t v21;
  int v22;
  int j;
  unsigned int v24;
  WTF::StringImpl *v25;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33;
  BOOL v34;
  WebCore::Element *v35;
  WTF::StringImpl **v36;
  _QWORD *v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  _QWORD *v44;
  unsigned int v45;
  int jj;
  unsigned int v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF *v51;
  BOOL hasMatchingUserOrAuthorStyle;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  _BOOL4 v65;
  uint64_t v66;
  int v67;
  int k;
  unsigned int v69;
  WTF::StringImpl *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WebCore::Node *v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  void *v79;
  WTF *v80;
  WTF *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (***v84)();
  uint64_t v85;
  int v86;
  uint64_t (**v87)();
  uint64_t v88;
  int v89;
  int n;
  unsigned int v91;
  WTF::StringImpl *v92;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int ii;
  unsigned int v98;
  WTF::StringImpl *v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int m;
  unsigned int v107;
  WTF::StringImpl *v108;
  WebCore::Style::Scope **v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  unsigned int kk;
  uint64_t v116;
  WTF::StringImpl *v117;
  WTF *v119;
  _BOOL4 v120;
  uint64_t v121;
  uint64_t *v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unint64_t v135;
  int mm;
  unsigned int v137;
  unsigned __int8 *v138;
  int v139;
  int v140;
  uint64_t v142;
  WTF::StringImpl *v143;
  WTF *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  __int16 v150;
  __int16 v151;
  WebCore::Style::RuleSet *v152;
  WTF *v153;
  int v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  WTF *v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  WebCore::Style::RuleSet **v172;
  uint64_t v173;
  uint64_t v174;
  unsigned __int8 *v175;
  uint64_t v176;
  int v177;
  void *v179;
  uint64_t v180;
  unsigned int v181;
  __int16 v182;
  uint64_t v183;
  __int128 v184;
  int v185;
  void *v187;
  WTF *v188;
  void *v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  unsigned int **v196;
  uint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  unsigned int v200;
  BOOL v201;
  int v202;
  uint64_t v204;
  WebCore::HTMLDocument *v205;
  __int16 v206;
  uint64_t v207;
  _QWORD *v208;
  WTF *v209;
  int v210;
  uint64_t v211;
  WebCore::HTMLDocument *v212;
  __int16 v213;
  uint64_t v214;
  _QWORD *v215;
  WTF *v216;
  uint64_t v217;
  WebCore::HTMLDocument *v218;
  __int16 v219;
  uint64_t v220;
  _QWORD *v221;
  WTF *v222;
  int v223;
  char v224;
  WTF::StringImpl *v225;
  const WTF::StringImpl *v226;
  WTF::StringImpl *v227;
  char v228;
  int isCaseSensitiveAttribute;
  WTF::StringImpl *v230;
  const WTF::StringImpl *v231;
  WTF::StringImpl *v232;
  int v233;
  WTF::StringImpl *v234;
  const WTF::StringImpl *v235;
  WTF::StringImpl *v236;
  int v237;
  WebCore::Style::DynamicMediaQueryEvaluationChanges **v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  int v242;
  unsigned int v243;
  unsigned int v244;
  uint64_t v245;
  WebCore::Style::DynamicMediaQueryEvaluationChanges *v246;
  int v247;
  WebCore::Style::RuleSet *v248;
  WebCore::Style::DynamicMediaQueryEvaluationChanges *v249;
  uint64_t v250;
  int v251;
  int v252;
  WebCore::Style::DynamicMediaQueryEvaluationChanges *v253;
  int v254;
  WebCore::Style::DynamicMediaQueryEvaluationChanges *v255;
  int v256;
  WTF *v257;
  uint64_t v258;
  unint64_t v259;
  int v260;
  int v261;
  unsigned int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  WebCore::Style::DynamicMediaQueryEvaluationChanges *v266;
  _DWORD *v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unsigned __int8 *v272;
  void *v273;
  void *v274;
  uint64_t v275;
  uint64_t v276;
  const WebCore::CSSSelector *v277;
  const WTF::AtomString *v278;
  WTF::StringImpl *v279;
  const WebCore::QualifiedName *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int **v285;
  uint64_t nn;
  unsigned int *v287;
  unsigned int v288;
  unsigned int v289;
  int v290;
  uint64_t v292;
  WebCore::HTMLDocument *v293;
  __int16 v294;
  uint64_t v295;
  _QWORD *v296;
  WTF *v297;
  int v298;
  uint64_t v299;
  WebCore::HTMLDocument *v300;
  __int16 v301;
  uint64_t v302;
  _QWORD *v303;
  WTF *v304;
  uint64_t v305;
  WebCore::HTMLDocument *v306;
  __int16 v307;
  uint64_t v308;
  _QWORD *v309;
  WTF *v310;
  int v311;
  char v312;
  WTF::StringImpl *v313;
  const WTF::StringImpl *v314;
  char v315;
  int v316;
  WTF::StringImpl *v317;
  const WTF::StringImpl *v318;
  int v319;
  WTF::StringImpl *v320;
  const WTF::StringImpl *v321;
  int v322;
  WTF *v323;
  void *v324;
  WTF *v325;
  void *v326;
  WTF *v327;
  void *v328;
  WTF *v329;
  void *v330;
  WTF *v331;
  void *v332;
  WTF *v333;
  void *v334;
  int v335;
  uint64_t v336;
  void *v337;
  const WTF::StringImpl *v338;
  const WTF::StringImpl *v339;
  const WTF::StringImpl *v340;
  const WTF::StringImpl *v341;
  const WTF::StringImpl *v342;
  const WTF::StringImpl *v343;
  char v344;
  char v345;
  char __src;
  char __srca;
  uint64_t *v348;
  uint64_t v349;
  const WTF::AtomString *v350;
  WebCore::Style::Scope *v351;
  WebCore::Style::Scope *v352;
  WebCore::Style::Scope *v353;
  WTF::StringImpl *v354;
  const WTF::AtomString *v355;
  const WebCore::QualifiedName *v356;
  WTF::StringImpl *v357;
  unsigned __int8 *v358;
  WTF *v359;
  uint64_t v360;
  _BYTE v361[16];

  if (*(_QWORD *)a4 == *(_QWORD *)a3)
    return this;
  v5 = this;
  v6 = *((_QWORD *)this + 1);
  if ((*(_WORD *)(v6 + 28) & 0x10) != 0)
    v7 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 3358) & 1;
  else
    v7 = 0;
  v8 = *(WTF::StringImpl **)(*(_QWORD *)a2 + 40);
  if (v8)
    *(_DWORD *)v8 += 2;
  v357 = v8;
  v9 = *(_QWORD **)(v6 + 40);
  if (*v9)
    v10 = (*(_WORD *)(*v9 + 28) & 0x80) == 0;
  else
    v10 = 1;
  if (v10)
    v102 = v9[1] + 1328;
  else
    v102 = *v9 + 216;
  v11 = *(_QWORD *)v102;
  v12 = &unk_1ECE91000;
  v355 = a3;
  v356 = a2;
  v354 = this;
  if (!*(_QWORD *)(*(_QWORD *)v102 + 32))
  {
    if (*(_QWORD *)(v11 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v11);
    else
      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v11);
    v111 = *(_QWORD *)(v11 + 32);
    a3 = v355;
    a2 = v356;
    v5 = v354;
    if (*(_DWORD *)(v111 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
    {
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v111 + 32));
      v5 = v354;
      a3 = v355;
      a2 = v356;
    }
    if (*(_BYTE *)(v111 + 242)
      || *(_BYTE *)(v111 + 243)
      || *(_BYTE *)(v111 + 244)
      || *(_BYTE *)(v111 + 245)
      || *(_BYTE *)(v111 + 246)
      || *(_BYTE *)(v111 + 247)
      || *(_BYTE *)(v111 + 248))
    {
      *(_BYTE *)(v11 + 236) = 1;
    }
  }
  v13 = *(_QWORD *)(v11 + 32);
  if (*(_DWORD *)(v13 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
  {
    WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v13 + 32));
    v5 = v354;
    a3 = v355;
    a2 = v356;
  }
  v350 = a4;
  if ((*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v50 = *(_QWORD *)((*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v50)
    {
      if ((*(_WORD *)(v50 + 28) & 0x80) != 0 && !*(_BYTE *)(v50 + 193))
      {
        v51 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v51 = off_1E344FCC8;
        v359 = v51;
        hasMatchingUserOrAuthorStyle = WebCore::Style::ScopeRuleSets::hasMatchingUserOrAuthorStyle((_QWORD *)(v13 + 32), &v359);
        (*(void (**)(WTF *))(*(_QWORD *)v51 + 8))(v51);
        if (!hasMatchingUserOrAuthorStyle)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 824))(v6))
            goto LABEL_192;
          v119 = (WTF *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v119 = off_1E344FCF0;
          v359 = v119;
          v120 = WebCore::Style::ScopeRuleSets::hasMatchingUserOrAuthorStyle((_QWORD *)(v13 + 32), &v359);
          (*(void (**)(WTF *))(*(_QWORD *)v119 + 8))(v119);
          if (!v120)
            goto LABEL_192;
        }
        v53 = (uint64_t *)(v13 + 96);
        if (v7)
          v53 = (uint64_t *)(v13 + 88);
        v54 = *v53;
        if (!v54)
        {
LABEL_192:
          v14 = 1;
          a3 = v355;
          a2 = v356;
          v5 = v354;
          goto LABEL_17;
        }
        v55 = 0;
        a3 = v355;
        a2 = v356;
        v56 = *(_QWORD *)(*(_QWORD *)v356 + 24);
        v57 = *(_DWORD *)(v56 + 16) >> 8;
        v5 = v354;
        while (1)
        {
          v58 = v57 & *(_DWORD *)(v54 - 8);
          v59 = *(_QWORD *)(v54 + 8 * v58);
          if (!v59)
            break;
          if (v59 != -1 && v59 == v56)
          {
            v14 = 0;
            goto LABEL_17;
          }
          v57 = ++v55 + v58;
        }
      }
    }
  }
  v14 = 1;
LABEL_17:
  v15 = *(_QWORD *)(v13 + 208);
  if (v15)
  {
    v16 = 0;
    for (i = *((_DWORD *)v8 + 4) >> 8; ; i = v16 + v18)
    {
      v18 = i & *(_DWORD *)(v15 - 8);
      v19 = *(WTF::StringImpl **)(v15 + 8 * v18);
      if (!v19)
        break;
      if (v19 != (WTF::StringImpl *)-1 && v19 == v8)
      {
LABEL_69:
        v27 = 1;
        goto LABEL_34;
      }
      ++v16;
    }
  }
  v21 = *(_QWORD *)(v13 + 104);
  if (v21)
  {
    v22 = 0;
    for (j = *((_DWORD *)v8 + 4) >> 8; ; j = v22 + v24)
    {
      v24 = j & *(_DWORD *)(v21 - 8);
      v25 = *(WTF::StringImpl **)(v21 + 8 * v24);
      if (!v25)
        break;
      if (v25 != (WTF::StringImpl *)-1 && v25 == v8)
        goto LABEL_69;
      ++v22;
    }
  }
  v27 = 0;
LABEL_34:
  if ((*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v61 = *(_QWORD *)((*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v61)
    {
      v62 = *(_QWORD *)(v61 + 216);
      if (!*(_QWORD *)(v62 + 32))
      {
        if (*(_QWORD *)(v62 + 24))
          WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v62);
        else
          WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v62);
        v121 = *(_QWORD *)(v62 + 32);
        if (*(_DWORD *)(v121 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
          WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v121 + 32));
        if (*(_BYTE *)(v121 + 242)
          || *(_BYTE *)(v121 + 243)
          || *(_BYTE *)(v121 + 244)
          || *(_BYTE *)(v121 + 245)
          || *(_BYTE *)(v121 + 246)
          || *(_BYTE *)(v121 + 247)
          || *(_BYTE *)(v121 + 248))
        {
          *(_BYTE *)(v62 + 236) = 1;
        }
      }
      v63 = *(_QWORD *)(v62 + 32);
      v64 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v64 = off_1E344FD18;
      v359 = v64;
      v65 = WebCore::Style::ScopeRuleSets::hasMatchingUserOrAuthorStyle((_QWORD *)(v63 + 32), &v359);
      (*(void (**)(WTF *))(*(_QWORD *)v64 + 8))(v64);
      if (v65)
      {
        a3 = v355;
        a2 = v356;
        v5 = v354;
        if (*(_DWORD *)(v63 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
        {
          WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v63 + 32));
          v5 = v354;
          a3 = v355;
          a2 = v356;
        }
        v66 = *(_QWORD *)(v63 + 208);
        if (v66)
        {
          v67 = 0;
          for (k = *((_DWORD *)v8 + 4) >> 8; ; k = v67 + v69)
          {
            v69 = k & *(_DWORD *)(v66 - 8);
            v70 = *(WTF::StringImpl **)(v66 + 8 * v69);
            if (!v70)
              break;
            if (v70 != (WTF::StringImpl *)-1 && v70 == v8)
            {
LABEL_151:
              v27 = 1;
              goto LABEL_35;
            }
            ++v67;
          }
        }
        v104 = *(_QWORD *)(v63 + 104);
        if (v104)
        {
          v105 = 0;
          for (m = *((_DWORD *)v8 + 4) >> 8; ; m = v105 + v107)
          {
            v107 = m & *(_DWORD *)(v104 - 8);
            v108 = *(WTF::StringImpl **)(v104 + 8 * v107);
            if (!v108)
              break;
            if (v108 != (WTF::StringImpl *)-1 && v108 == v8)
              goto LABEL_151;
            ++v105;
          }
        }
      }
      else
      {
        a3 = v355;
        a2 = v356;
        v5 = v354;
      }
    }
  }
LABEL_35:
  v359 = 0;
  v360 = 0;
  v28 = *(_QWORD *)(v6 + 32);
  if (v28)
  {
    if ((*(_WORD *)(v28 + 28) & 8) != 0)
    {
      v29 = *(_QWORD *)(v28 + 72) & 0xFFFFFFFFFFFFLL;
      if (v29)
      {
        v72 = *(_QWORD *)(v29 + 88);
        if (v72)
        {
          v73 = *(_QWORD *)(v72 + 224);
          if (v73)
          {
            v74 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v73 + 16))(v73, v6);
            if (v74)
            {
              v75 = (WebCore::Node *)v74;
              do
              {
                if ((*(_WORD *)(**((_QWORD **)v75 + 5) + 28) & 0x80) != 0)
                  v76 = **((_QWORD **)v75 + 5);
                else
                  v76 = 0;
                v77 = HIDWORD(v360);
                if (HIDWORD(v360) == (_DWORD)v360)
                {
                  WTF::Vector<WTF::Ref<WebCore::ShadowRoot,WTF::RawPtrTraits<WebCore::ShadowRoot>,WTF::DefaultRefDerefTraits<WebCore::ShadowRoot>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShadowRoot&>((uint64_t)&v359, v76);
                }
                else
                {
                  v78 = v359;
                  *(_DWORD *)(v76 + 24) += 2;
                  *((_QWORD *)v78 + v77) = v76;
                  HIDWORD(v360) = v77 + 1;
                }
                v75 = (WebCore::Node *)WebCore::Node::assignedSlot(v75);
              }
              while (v75);
              v80 = v359;
              if (HIDWORD(v360))
              {
                v81 = (WTF *)((char *)v359 + 8 * HIDWORD(v360));
                do
                {
                  v82 = *(_QWORD *)(*(_QWORD *)v80 + 216);
                  if (!*(_QWORD *)(v82 + 32))
                  {
                    if (*(_QWORD *)(v82 + 24))
                      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver(*(unsigned int **)(*(_QWORD *)v80 + 216));
                    else
                      WebCore::Style::Scope::createDocumentResolver(*(WebCore::Style::Scope **)(*(_QWORD *)v80 + 216));
                    v190 = *(_QWORD *)(v82 + 32);
                    if (*(_DWORD *)(v190 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
                      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v190 + 32));
                    if (*(_BYTE *)(v190 + 242)
                      || *(_BYTE *)(v190 + 243)
                      || *(_BYTE *)(v190 + 244)
                      || *(_BYTE *)(v190 + 245)
                      || *(_BYTE *)(v190 + 246)
                      || *(_BYTE *)(v190 + 247)
                      || *(_BYTE *)(v190 + 248))
                    {
                      *(_BYTE *)(v82 + 236) = 1;
                    }
                  }
                  v83 = *(_QWORD *)(v82 + 32);
                  v84 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
                  v85 = *(_QWORD *)(v83 + 32);
                  *v84 = off_1E344FD40;
                  if (v85)
                  {
                    v86 = *(_DWORD *)(v85 + 228);
                    v87 = off_1E344FD40;
                    if (v86)
                      goto LABEL_113;
                  }
                  v87 = off_1E344FD40;
                  v94 = v83 + 32;
                  if (*(_BYTE *)(v83 + 348))
                  {
                    v94 = v83 + 32;
                    do
                    {
                      v351 = *(WebCore::Style::Scope **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v94 + 32) + 16) + 8)
                                                       + 1328);
                      if (!*((_QWORD *)v351 + 4))
                      {
                        if (*((_QWORD *)v351 + 3))
                          WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v351);
                        else
                          WebCore::Style::Scope::createDocumentResolver(v351);
                        v349 = *((_QWORD *)v351 + 4);
                        if (*(_DWORD *)(v349 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
                          WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v349 + 32));
                        if (*(_BYTE *)(v349 + 242)
                          || *(_BYTE *)(v349 + 243)
                          || *(_BYTE *)(v349 + 244)
                          || *(_BYTE *)(v349 + 245)
                          || *(_BYTE *)(v349 + 246)
                          || *(_BYTE *)(v349 + 247)
                          || *(_BYTE *)(v349 + 248))
                        {
                          *((_BYTE *)v351 + 236) = 1;
                        }
                      }
                      v101 = *((_QWORD *)v351 + 4);
                      v94 = v101 + 32;
                    }
                    while (*(_BYTE *)(v101 + 348));
                    v87 = *v84;
                  }
                  if (*(_QWORD *)(v94 + 24)
                    && (v191 = ((uint64_t (*)(uint64_t (***)()))v87[2])(v84),
                        v87 = *v84,
                        (v191 & 1) != 0))
                  {
LABEL_113:
                    ((void (*)(uint64_t (***)()))v87[1])(v84);
                    if (*(_DWORD *)(v83 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
                      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v83 + 32));
                    v88 = *(_QWORD *)(v83 + 208);
                    if (v88)
                    {
                      v89 = 0;
                      for (n = *((_DWORD *)v8 + 4) >> 8; ; n = v89 + v91)
                      {
                        v91 = n & *(_DWORD *)(v88 - 8);
                        v92 = *(WTF::StringImpl **)(v88 + 8 * v91);
                        if (!v92)
                          break;
                        if (v92 != (WTF::StringImpl *)-1 && v92 == v8)
                        {
LABEL_136:
                          v27 = 1;
                          goto LABEL_126;
                        }
                        ++v89;
                      }
                    }
                    v95 = *(_QWORD *)(v83 + 104);
                    if (v95)
                    {
                      v96 = 0;
                      for (ii = *((_DWORD *)v8 + 4) >> 8; ; ii = v96 + v98)
                      {
                        v98 = ii & *(_DWORD *)(v95 - 8);
                        v99 = *(WTF::StringImpl **)(v95 + 8 * v98);
                        if (!v99)
                          break;
                        if (v99 != (WTF::StringImpl *)-1 && v99 == v8)
                          goto LABEL_136;
                        ++v96;
                      }
                    }
                  }
                  else
                  {
                    ((void (*)(uint64_t (***)()))v87[1])(v84);
                  }
LABEL_126:
                  v80 = (WTF *)((char *)v80 + 8);
                }
                while (v80 != v81);
                v80 = v359;
                if (HIDWORD(v360))
                {
                  v192 = 8 * HIDWORD(v360);
                  do
                  {
                    v193 = *(_QWORD *)v80;
                    *(_QWORD *)v80 = 0;
                    if (v193)
                    {
                      if (*(_DWORD *)(v193 + 24) == 2)
                      {
                        if ((*(_WORD *)(v193 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v193);
                      }
                      else
                      {
                        *(_DWORD *)(v193 + 24) -= 2;
                      }
                    }
                    v80 = (WTF *)((char *)v80 + 8);
                    v192 -= 8;
                  }
                  while (v192);
                  v80 = v359;
                }
              }
              if (v80)
              {
                v359 = 0;
                LODWORD(v360) = 0;
                WTF::fastFree(v80, v79);
              }
            }
            a3 = v355;
            a2 = v356;
            v5 = v354;
            v12 = (_DWORD *)&unk_1ECE91000;
          }
        }
      }
    }
  }
  if ((*(_BYTE *)(v6 + 22) & 0x10) != 0)
  {
    v30 = **(_QWORD **)(v6 + 40);
    if (v30 && (*(_WORD *)(v30 + 28) & 0x80) != 0)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(v30 + 200) + 8);
      if ((*(_BYTE *)(v32 + 22) & 8) != 0)
      {
        v33 = *(_QWORD **)(v32 + 40);
        if (*v33)
          v34 = (*(_WORD *)(*v33 + 28) & 0x80) == 0;
        else
          v34 = 1;
        if (v34)
          v110 = (WebCore::Style::Scope **)(v33[1] + 1328);
        else
          v110 = (WebCore::Style::Scope **)(*v33 + 216);
        WebCore::Style::Scope::resolver(*v110);
        a3 = v355;
        a2 = v356;
        v5 = v354;
      }
    }
  }
  v35 = (WebCore::Element *)*((_QWORD *)v5 + 1);
  if ((v14 & 1) == 0)
  {
    WebCore::Element::invalidateStyleForSubtree(v35);
    v5 = v354;
    a3 = v355;
    a2 = v356;
    v35 = (WebCore::Element *)*((_QWORD *)v354 + 1);
  }
  v36 = (WTF::StringImpl **)v350;
  if (v27)
  {
    WebCore::Element::invalidateStyle(v35);
    v5 = v354;
    a3 = v355;
    a2 = v356;
    v35 = (WebCore::Element *)*((_QWORD *)v354 + 1);
  }
  v37 = (_QWORD *)*((_QWORD *)v35 + 5);
  if (*v37)
    v38 = (*(_WORD *)(*v37 + 28) & 0x80) == 0;
  else
    v38 = 1;
  if (v38)
    v103 = v37[1] + 1328;
  else
    v103 = *v37 + 216;
  v39 = *(_QWORD *)v103;
  if (!*(_QWORD *)(*(_QWORD *)v103 + 32))
  {
    if (*(_QWORD *)(v39 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v39);
    else
      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v39);
    v112 = *(_QWORD *)(v39 + 32);
    a3 = v355;
    a2 = v356;
    v5 = v354;
    if (*(_DWORD *)(v112 + 340) < v12[272])
    {
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v112 + 32));
      v5 = v354;
      a3 = v355;
      a2 = v356;
    }
    if (*(_BYTE *)(v112 + 242)
      || *(_BYTE *)(v112 + 243)
      || *(_BYTE *)(v112 + 244)
      || *(_BYTE *)(v112 + 245)
      || *(_BYTE *)(v112 + 246)
      || *(_BYTE *)(v112 + 247)
      || *(_BYTE *)(v112 + 248))
    {
      *(_BYTE *)(v39 + 236) = 1;
    }
  }
  v40 = *(_QWORD *)(v39 + 32);
  v41 = (uint64_t *)(v40 + 296);
  v42 = *(_QWORD *)(v40 + 296);
  if (v42
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)(v40 + 296), 8u, 0), v5 = v354, a3 = v355, a2 = v356, (v42 = *v41) != 0))
  {
    v43 = *(_DWORD *)(v42 - 8);
  }
  else
  {
    v43 = 0;
  }
  v44 = 0;
  v45 = *((_DWORD *)v8 + 4) >> 8;
  for (jj = 1; ; ++jj)
  {
    v47 = v45 & v43;
    v48 = v42 + 16 * v47;
    v49 = *(WTF::StringImpl **)v48;
    if (!*(_QWORD *)v48)
    {
      if (v44)
      {
        *v44 = 0;
        v44[1] = 0;
        --*(_DWORD *)(*v41 - 16);
        v48 = (uint64_t)v44;
      }
      if (v8)
        *(_DWORD *)v8 += 2;
      *(_QWORD *)v48 = v8;
      v113 = *(_QWORD *)(v40 + 160);
      if (!v113)
        goto LABEL_255;
      v114 = 0;
      for (kk = *((_DWORD *)v357 + 4) >> 8; ; kk = ++v114 + v116)
      {
        v116 = kk & *(_DWORD *)(v113 - 8);
        v117 = *(WTF::StringImpl **)(v113 + 16 * v116);
        if (!v117)
          goto LABEL_255;
        if (v117 != (WTF::StringImpl *)-1 && v117 == v357)
          break;
      }
      v122 = *(uint64_t **)(v113 + 16 * v116 + 8);
      if (!v122)
      {
LABEL_255:
        v159 = 0;
        goto LABEL_256;
      }
      v358 = 0;
      v123 = *((_DWORD *)v122 + 3);
      if (!v123)
        goto LABEL_296;
      v124 = *v122;
      v125 = *v122 + 24 * v123;
      while (1)
      {
        v126 = *(unsigned __int8 *)(v124 + 12);
        v127 = *(unsigned __int8 *)(v124 + 13);
        v128 = (uint64_t)v358;
        if (v358
          || (WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::rehash((uint64_t *)&v358, 8u, 0), (v128 = (uint64_t)v358) != 0))
        {
          v129 = *(_DWORD *)(v128 - 8);
        }
        else
        {
          v129 = 0;
        }
        v130 = 0;
        v131 = 9 * ((~(v126 << 15) + v126) ^ ((~(v126 << 15) + v126) >> 10));
        v132 = (v131 ^ (v131 >> 6)) + ~((v131 ^ (v131 >> 6)) << 11);
        v133 = 9 * ((~(v127 << 15) + v127) ^ ((~(v127 << 15) + v127) >> 10));
        v134 = (v133 ^ (v133 >> 6)) + ~((v133 ^ (v133 >> 6)) << 11);
        v135 = (0xD7862706ELL
              * (unint64_t)(277951225 * (v132 ^ HIWORD(v132))
                                 + 95187966
                                 * ((0xD7862706ELL
                                                 * (unint64_t)(277951225 * (v134 ^ HIWORD(v134)) + 425104576)) >> 4))) >> 4;
        for (mm = 1; ; ++mm)
        {
          v137 = v135 & v129;
          v138 = (unsigned __int8 *)(v128 + 40 * v137);
          v139 = *v138;
          v140 = v138[1];
          if (!(v139 | v140) && !v138[2])
            break;
          if (v139 == v126 && v140 == v127 && v138[2] != 0)
            goto LABEL_221;
          if (v139 == 255)
            v130 = v128 + 40 * v137;
          LODWORD(v135) = mm + v137;
        }
        if (v130)
        {
          *(_BYTE *)(v130 + 2) = 0;
          *(_WORD *)v130 = 0;
          *(_OWORD *)(v130 + 8) = 0u;
          *(_OWORD *)(v130 + 24) = 0u;
          --*((_DWORD *)v358 - 4);
          v138 = (unsigned __int8 *)v130;
        }
        *v138 = v126;
        v138[1] = v127;
        v138[2] = 1;
        v148 = WTF::fastMalloc((WTF *)0x328);
        *(_DWORD *)v148 = 1;
        *(_OWORD *)(v148 + 8) = 0u;
        *(_OWORD *)(v148 + 24) = 0u;
        *(_OWORD *)(v148 + 40) = 0u;
        *(_OWORD *)(v148 + 56) = 0u;
        *(_QWORD *)(v148 + 72) = v148 + 88;
        *(_QWORD *)(v148 + 80) = 1;
        *(_QWORD *)(v148 + 120) = v148 + 136;
        *(_QWORD *)(v148 + 128) = 1;
        *(_QWORD *)(v148 + 168) = v148 + 184;
        *(_QWORD *)(v148 + 176) = 1;
        *(_QWORD *)(v148 + 216) = v148 + 232;
        *(_QWORD *)(v148 + 224) = 1;
        *(_QWORD *)(v148 + 264) = v148 + 280;
        *(_QWORD *)(v148 + 272) = 1;
        *(_QWORD *)(v148 + 312) = v148 + 328;
        *(_QWORD *)(v148 + 320) = 1;
        *(_QWORD *)(v148 + 360) = v148 + 376;
        *(_QWORD *)(v148 + 368) = 1;
        *(_QWORD *)(v148 + 408) = v148 + 424;
        *(_QWORD *)(v148 + 416) = 1;
        *(_QWORD *)(v148 + 645) = 0;
        *(_OWORD *)(v148 + 616) = 0u;
        *(_OWORD *)(v148 + 632) = 0u;
        *(_OWORD *)(v148 + 584) = 0u;
        *(_OWORD *)(v148 + 600) = 0u;
        *(_OWORD *)(v148 + 552) = 0u;
        *(_OWORD *)(v148 + 568) = 0u;
        *(_OWORD *)(v148 + 520) = 0u;
        *(_OWORD *)(v148 + 536) = 0u;
        *(_OWORD *)(v148 + 488) = 0u;
        *(_OWORD *)(v148 + 504) = 0u;
        *(_OWORD *)(v148 + 456) = 0u;
        *(_OWORD *)(v148 + 472) = 0u;
        *(_QWORD *)(v148 + 672) = 0;
        *(_DWORD *)(v148 + 680) = 0;
        *(_OWORD *)(v148 + 656) = 0u;
        *(_OWORD *)(v148 + 688) = 0u;
        *(_OWORD *)(v148 + 704) = 0u;
        *(_OWORD *)(v148 + 720) = 0u;
        *(_OWORD *)(v148 + 736) = 0u;
        *(_OWORD *)(v148 + 752) = 0u;
        *(_OWORD *)(v148 + 768) = 0u;
        *(_OWORD *)(v148 + 784) = 0u;
        *(_WORD *)(v148 + 800) = 0;
        v150 = *(unsigned __int8 *)(v124 + 12);
        v151 = *(unsigned __int8 *)(v124 + 13);
        v152 = (WebCore::Style::RuleSet *)*((_QWORD *)v138 + 1);
        *((_QWORD *)v138 + 1) = v148;
        if (v152)
        {
          if (*(_DWORD *)v152 == 1)
          {
            WebCore::Style::RuleSet::~RuleSet(v152, v149);
            WTF::fastFree(v188, v189);
          }
          else
          {
            --*(_DWORD *)v152;
          }
        }
        v153 = (WTF *)*((_QWORD *)v138 + 2);
        if (v153)
        {
          *((_QWORD *)v138 + 2) = 0;
          *((_DWORD *)v138 + 6) = 0;
          WTF::fastFree(v153, v149);
        }
        *((_QWORD *)v138 + 2) = 0;
        *((_QWORD *)v138 + 3) = 0;
        *((_WORD *)v138 + 16) = v150 | (v151 << 8);
        if (v358)
          v154 = *((_DWORD *)v358 - 3) + 1;
        else
          v154 = 1;
        *((_DWORD *)v358 - 3) = v154;
        if (v358)
          v155 = *((_DWORD *)v358 - 3);
        else
          v155 = 0;
        v156 = (*((_DWORD *)v358 - 4) + v155);
        v157 = *((unsigned int *)v358 - 1);
        if (v157 > 0x400)
        {
          if (v157 <= 2 * v156)
LABEL_254:
            v138 = WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::expand((uint64_t *)&v358, v138);
        }
        else if (3 * v157 <= 4 * v156)
        {
          goto LABEL_254;
        }
LABEL_221:
        v142 = *((_QWORD *)v138 + 1);
        WebCore::Style::RuleData::RuleData(&v359, *(const WebCore::CSSSelector **)v124, *(_WORD *)(v124 + 8), *(unsigned __int16 *)(v124 + 10), *(_DWORD *)(v142 + 680), 0);
        WebCore::Style::RuleSet::addRule(v142, &v359, 0, 0, 0);
        v144 = v359;
        v359 = 0;
        if (v144)
        {
          if (*(_DWORD *)v144 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v144, v143);
          else
            --*(_DWORD *)v144;
        }
        v145 = *(_QWORD *)(v124 + 16);
        if (v145)
        {
          v146 = v138 + 16;
          v147 = *((unsigned int *)v138 + 7);
          if ((_DWORD)v147 == *((_DWORD *)v138 + 6))
          {
            v158 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v146, v147 + 1, v124 + 16);
            v147 = *((unsigned int *)v138 + 7);
            *(_QWORD *)(*((_QWORD *)v138 + 2) + 8 * v147) = *v158;
          }
          else
          {
            *(_QWORD *)(*v146 + 8 * v147) = v145;
          }
          *((_DWORD *)v138 + 7) = v147 + 1;
        }
        v124 += 24;
        if (v124 == v125)
        {
          v172 = (WebCore::Style::RuleSet **)v358;
          if (v358)
          {
            v173 = *((unsigned int *)v358 - 3);
            if ((_DWORD)v173)
            {
              v174 = *((unsigned int *)v358 - 1);
              v175 = &v358[40 * v174];
              if ((_DWORD)v174)
              {
                v176 = 40 * v174;
                while (1)
                {
                  v177 = *(unsigned __int8 *)v172;
                  if (v177 != 255 && (v177 | *((unsigned __int8 *)v172 + 1) | *((unsigned __int8 *)v172 + 2)) != 0)
                    break;
                  v172 += 5;
                  v176 -= 40;
                  if (!v176)
                  {
                    v172 = (WebCore::Style::RuleSet **)v175;
                    break;
                  }
                }
              }
              if (v173 >> 27)
              {
                __break(0xC471u);
                JUMPOUT(0x19457EA30);
              }
              v180 = WTF::fastMalloc((WTF *)(32 * v173));
              if (v175 != (unsigned __int8 *)v172)
              {
                v181 = 0;
LABEL_284:
                WebCore::Style::RuleSet::shrinkToFit(v172[1], v179);
                v182 = *((_WORD *)v172 + 16);
                v183 = v180 + 32 * v181;
                v184 = *(_OWORD *)(v172 + 1);
                v172[1] = 0;
                v172[2] = 0;
                *(_OWORD *)v183 = v184;
                *(_QWORD *)&v184 = v172[3];
                v172[3] = 0;
                *(_QWORD *)(v183 + 16) = v184;
                *(_WORD *)(v183 + 24) = v182;
                ++v181;
                while (1)
                {
                  v172 += 5;
                  if (v172 == (WebCore::Style::RuleSet **)v175)
                    break;
                  v185 = *(unsigned __int8 *)v172;
                  if (v185 != 255 && (v185 | *((unsigned __int8 *)v172 + 1) | *((unsigned __int8 *)v172 + 2)) != 0)
                  {
                    if (v172 != (WebCore::Style::RuleSet **)v175)
                      goto LABEL_284;
                    break;
                  }
                }
LABEL_298:
                v36 = (WTF::StringImpl **)v350;
                v159 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v159 = v180;
                *(_DWORD *)(v159 + 8) = v173;
                *(_DWORD *)(v159 + 12) = v181;
                WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::~HashTable((uint64_t *)&v358, v187);
LABEL_256:
                v160 = *(WTF **)(v48 + 8);
                *(_QWORD *)(v48 + 8) = v159;
                if (v160)
                  std::default_delete<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100](v48 + 8, v160);
                v161 = *v41;
                if (*v41)
                  v162 = *(_DWORD *)(v161 - 12) + 1;
                else
                  v162 = 1;
                a3 = v355;
                a2 = v356;
                v5 = v354;
                *(_DWORD *)(v161 - 12) = v162;
                v163 = *v41;
                if (*v41)
                  v164 = *(_DWORD *)(v163 - 12);
                else
                  v164 = 0;
                v165 = (*(_DWORD *)(v163 - 16) + v164);
                v166 = *(unsigned int *)(v163 - 4);
                if (v166 > 0x400)
                {
                  if (v166 > 2 * v165)
                    goto LABEL_264;
                }
                else
                {
                  if (3 * v166 > 4 * v165)
                    goto LABEL_264;
                  if (!(_DWORD)v166)
                  {
                    v171 = 8;
                    goto LABEL_295;
                  }
                }
                v171 = (_DWORD)v166 << (6 * *(_DWORD *)(v163 - 12) >= (2 * v166));
LABEL_295:
                v48 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v41, v171, (WTF::StringImpl **)v48);
                a3 = v355;
                a2 = v356;
                v5 = v354;
                goto LABEL_264;
              }
            }
            else
            {
              v180 = 0;
            }
LABEL_297:
            v181 = 0;
            goto LABEL_298;
          }
LABEL_296:
          v180 = 0;
          LODWORD(v173) = 0;
          goto LABEL_297;
        }
      }
    }
    if (v49 != (WTF::StringImpl *)-1)
      break;
    v44 = (_QWORD *)(v42 + 16 * v47);
LABEL_68:
    v45 = jj + v47;
  }
  if (v49 != v8)
    goto LABEL_68;
LABEL_264:
  v167 = *(uint64_t **)(v48 + 8);
  if (!v167)
    goto LABEL_475;
  v168 = *((unsigned int *)v167 + 3);
  if (!(_DWORD)v168)
    goto LABEL_475;
  v169 = *v167;
  v170 = *v167 + 32 * v168;
  v348 = (uint64_t *)((char *)v5 + 16);
  v352 = (WebCore::Style::Scope *)v170;
  while (2)
  {
    v195 = *(unsigned int *)(v169 + 20);
    if (!(_DWORD)v195)
      goto LABEL_346;
    v196 = *(unsigned int ***)(v169 + 8);
    v197 = 8 * v195;
    while (2)
    {
      v198 = *v196;
      v199 = **v196;
      v200 = (v199 >> 4) & 0x1F;
      v201 = v200 > 0xC;
      v202 = (1 << v200) & 0x1CF0;
      if (v201 || v202 == 0)
        goto LABEL_350;
      if (*(_QWORD *)a3)
      {
        v204 = *((_QWORD *)v5 + 1);
        v205 = (WebCore::HTMLDocument *)(*((_QWORD *)v198 + 1) + 32);
        v206 = *(_WORD *)(v204 + 28);
        if ((v206 & 0x10) != 0 && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v204 + 40) + 8) + 3358) & 1) != 0)
        {
          v207 = *(_QWORD *)v205;
          v208 = (_QWORD *)(*(_QWORD *)v205 + 40);
        }
        else
        {
          v207 = *(_QWORD *)v205;
          v208 = (_QWORD *)(*(_QWORD *)v205 + 24);
        }
        v209 = *(WTF **)a2;
        if (*v208 == *(_QWORD *)(*(_QWORD *)a2 + 24))
        {
          if (*(_QWORD *)(v207 + 16) == WebCore::starAtomData || *(_QWORD *)(v207 + 32) == *((_QWORD *)v209 + 4))
          {
            isCaseSensitiveAttribute = (v199 & 0x800000) == 0;
            if ((v199 & 0x800000) == 0
              && (v206 & 0x10) != 0
              && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v204 + 40) + 8) + 3358) & 1) != 0
              && (isCaseSensitiveAttribute = WebCore::HTMLDocument::isCaseSensitiveAttribute(v205, a2),
                  (v209 = *(WTF **)v356) == 0))
            {
              v344 = 1;
            }
            else
            {
              v344 = 0;
              ++*(_DWORD *)v209;
            }
            v359 = v209;
            v230 = *(WTF::StringImpl **)v355;
            if (*(_QWORD *)v355)
            {
              *(_DWORD *)v230 += 2;
              v360 = (uint64_t)v230;
              if ((*v198 & 0x100000) != 0)
                v231 = (const WTF::StringImpl *)(*((_QWORD *)v198 + 1) + 8);
              else
                v231 = (const WTF::StringImpl *)(v198 + 2);
              v210 = WebCore::attributeValueMatches((uint64_t)&v359, (*v198 >> 4) & 0x1F, v231, isCaseSensitiveAttribute);
              if (*(_DWORD *)v230 == 2)
                WTF::StringImpl::destroy(v230, v232);
              else
                *(_DWORD *)v230 -= 2;
            }
            else
            {
              v360 = 0;
              if ((*v198 & 0x100000) != 0)
                v338 = (const WTF::StringImpl *)(*((_QWORD *)v198 + 1) + 8);
              else
                v338 = (const WTF::StringImpl *)(v198 + 2);
              v210 = WebCore::attributeValueMatches((uint64_t)&v359, (*v198 >> 4) & 0x1F, v338, isCaseSensitiveAttribute);
            }
            v36 = (WTF::StringImpl **)v350;
            v170 = (uint64_t)v352;
            a3 = v355;
            a2 = v356;
            v5 = v354;
            if ((v344 & 1) == 0)
            {
              if (*(_DWORD *)v209 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v209);
                WTF::fastFree(v323, v324);
                v170 = (uint64_t)v352;
                v5 = v354;
                a3 = v355;
                a2 = v356;
              }
              else
              {
                --*(_DWORD *)v209;
              }
            }
          }
          else
          {
            v210 = 0;
            a3 = v355;
            a2 = v356;
            v170 = (uint64_t)v352;
            v5 = v354;
          }
        }
        else
        {
          v210 = 0;
        }
        if (*v36
          && ((v211 = *((_QWORD *)v5 + 1),
               v212 = (WebCore::HTMLDocument *)(*((_QWORD *)v198 + 1) + 32),
               v213 = *(_WORD *)(v211 + 28),
               (v213 & 0x10) != 0)
           && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v211 + 40) + 8) + 3358) & 1) != 0
            ? (v214 = *(_QWORD *)v212, v215 = (_QWORD *)(*(_QWORD *)v212 + 40))
            : (v214 = *(_QWORD *)v212, v215 = (_QWORD *)(*(_QWORD *)v212 + 24)),
              (v216 = *(WTF **)a2, *v215 == *(_QWORD *)(*(_QWORD *)a2 + 24))
           && (*(_QWORD *)(v214 + 16) == WebCore::starAtomData || *(_QWORD *)(v214 + 32) == *((_QWORD *)v216 + 4))))
        {
          v233 = (*v198 & 0x800000) == 0;
          if ((*v198 & 0x800000) == 0
            && (v213 & 0x10) != 0
            && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v211 + 40) + 8) + 3358) & 1) != 0
            && (v233 = WebCore::HTMLDocument::isCaseSensitiveAttribute(v212, a2), (v216 = *(WTF **)v356) == 0))
          {
            v345 = 1;
          }
          else
          {
            v345 = 0;
            ++*(_DWORD *)v216;
          }
          v359 = v216;
          v234 = *v36;
          if (v234)
          {
            *(_DWORD *)v234 += 2;
            v360 = (uint64_t)v234;
            if ((*v198 & 0x100000) != 0)
              v235 = (const WTF::StringImpl *)(*((_QWORD *)v198 + 1) + 8);
            else
              v235 = (const WTF::StringImpl *)(v198 + 2);
            v237 = WebCore::attributeValueMatches((uint64_t)&v359, (*v198 >> 4) & 0x1F, v235, v233);
            if (*(_DWORD *)v234 == 2)
              WTF::StringImpl::destroy(v234, v236);
            else
              *(_DWORD *)v234 -= 2;
          }
          else
          {
            v360 = 0;
            if ((*v198 & 0x100000) != 0)
              v339 = (const WTF::StringImpl *)(*((_QWORD *)v198 + 1) + 8);
            else
              v339 = (const WTF::StringImpl *)(v198 + 2);
            v237 = WebCore::attributeValueMatches((uint64_t)&v359, (*v198 >> 4) & 0x1F, v339, v233);
          }
          v36 = (WTF::StringImpl **)v350;
          v170 = (uint64_t)v352;
          a3 = v355;
          a2 = v356;
          v5 = v354;
          if ((v345 & 1) == 0)
          {
            if (*(_DWORD *)v216 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v216);
              WTF::fastFree(v325, v326);
              v170 = (uint64_t)v352;
              v5 = v354;
              a3 = v355;
              a2 = v356;
            }
            else
            {
              --*(_DWORD *)v216;
            }
          }
          if (v210 != v237)
            break;
        }
        else if ((v210 & 1) != 0)
        {
          break;
        }
        goto LABEL_350;
      }
      if (!*v36)
        goto LABEL_350;
      v217 = *((_QWORD *)v5 + 1);
      v218 = (WebCore::HTMLDocument *)(*((_QWORD *)v198 + 1) + 32);
      v219 = *(_WORD *)(v217 + 28);
      if ((v219 & 0x10) != 0 && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v217 + 40) + 8) + 3358) & 1) != 0)
      {
        v220 = *(_QWORD *)v218;
        v221 = (_QWORD *)(*(_QWORD *)v218 + 40);
      }
      else
      {
        v220 = *(_QWORD *)v218;
        v221 = (_QWORD *)(*(_QWORD *)v218 + 24);
      }
      v222 = *(WTF **)a2;
      if (*v221 != *(_QWORD *)(*(_QWORD *)a2 + 24)
        || *(_QWORD *)(v220 + 16) != WebCore::starAtomData && *(_QWORD *)(v220 + 32) != *((_QWORD *)v222 + 4))
      {
        goto LABEL_350;
      }
      v223 = (v199 & 0x800000) == 0;
      if ((v199 & 0x800000) == 0
        && (v219 & 0x10) != 0
        && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v217 + 40) + 8) + 3358) & 1) != 0
        && (v223 = WebCore::HTMLDocument::isCaseSensitiveAttribute(v218, a2), (v222 = *(WTF **)v356) == 0))
      {
        v224 = 1;
      }
      else
      {
        v224 = 0;
        ++*(_DWORD *)v222;
      }
      v359 = v222;
      v225 = *v36;
      if (v225)
      {
        *(_DWORD *)v225 += 2;
        v360 = (uint64_t)v225;
        if ((*v198 & 0x100000) != 0)
          v226 = (const WTF::StringImpl *)(*((_QWORD *)v198 + 1) + 8);
        else
          v226 = (const WTF::StringImpl *)(v198 + 2);
        v228 = WebCore::attributeValueMatches((uint64_t)&v359, (*v198 >> 4) & 0x1F, v226, v223);
        if (*(_DWORD *)v225 == 2)
          WTF::StringImpl::destroy(v225, v227);
        else
          *(_DWORD *)v225 -= 2;
      }
      else
      {
        v360 = 0;
        if ((*v198 & 0x100000) != 0)
          v340 = (const WTF::StringImpl *)(*((_QWORD *)v198 + 1) + 8);
        else
          v340 = (const WTF::StringImpl *)(v198 + 2);
        v228 = WebCore::attributeValueMatches((uint64_t)&v359, (*v198 >> 4) & 0x1F, v340, v223);
      }
      v36 = (WTF::StringImpl **)v350;
      v170 = (uint64_t)v352;
      a3 = v355;
      a2 = v356;
      v5 = v354;
      if ((v224 & 1) == 0)
      {
        if (*(_DWORD *)v222 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v222);
          WTF::fastFree(v327, v328);
          v170 = (uint64_t)v352;
          v5 = v354;
          a3 = v355;
          a2 = v356;
        }
        else
        {
          --*(_DWORD *)v222;
        }
      }
      if ((v228 & 1) == 0)
      {
LABEL_350:
        ++v196;
        v197 -= 8;
        if (!v197)
          goto LABEL_346;
        continue;
      }
      break;
    }
    v238 = (WebCore::Style::DynamicMediaQueryEvaluationChanges **)v348;
    v239 = *v348;
    if (*v348)
      goto LABEL_425;
    v240 = WTF::fastMalloc((WTF *)0x110);
    v170 = (uint64_t)v352;
    v5 = v354;
    a3 = v355;
    a2 = v356;
    *(_BYTE *)(v240 + 16) = -1;
    v240 += 16;
    *(_QWORD *)(v240 + 8) = v240 + 24;
    *(_QWORD *)(v240 + 16) = 1;
    *(_BYTE *)(v240 + 32) = -1;
    *(_QWORD *)(v240 + 40) = v240 + 56;
    *(_QWORD *)(v240 + 48) = 1;
    *(_BYTE *)(v240 + 64) = -1;
    *(_QWORD *)(v240 + 72) = v240 + 88;
    *(_QWORD *)(v240 + 80) = 1;
    *(_BYTE *)(v240 + 96) = -1;
    *(_QWORD *)(v240 + 104) = v240 + 120;
    *(_QWORD *)(v240 + 112) = 1;
    *(_BYTE *)(v240 + 128) = -1;
    *(_QWORD *)(v240 + 136) = v240 + 152;
    *(_QWORD *)(v240 + 144) = 1;
    *(_BYTE *)(v240 + 160) = -1;
    *(_QWORD *)(v240 + 168) = v240 + 184;
    *(_QWORD *)(v240 + 176) = 1;
    *(_BYTE *)(v240 + 192) = -1;
    *(_QWORD *)(v240 + 200) = v240 + 216;
    *(_QWORD *)(v240 + 208) = 1;
    *(_BYTE *)(v240 + 224) = -1;
    *(_QWORD *)(v240 + 232) = v240 + 248;
    *(_QWORD *)(v240 + 240) = 1;
    *v348 = v240;
    *(_DWORD *)(v240 - 4) = 8;
    *(_DWORD *)(*v348 - 8) = 7;
    *(_DWORD *)(*v348 - 16) = 0;
    *(_DWORD *)(*v348 - 12) = 0;
    v239 = *v348;
    if (*v348)
LABEL_425:
      v241 = *(_DWORD *)(v239 - 8);
    else
      v241 = 0;
    v242 = *(unsigned __int8 *)(v169 + 24);
    v243 = 9 * ((~(v242 << 15) + v242) ^ ((~(v242 << 15) + v242) >> 10));
    v244 = (v243 ^ (v243 >> 6)) + ~((v243 ^ (v243 >> 6)) << 11);
    v245 = (v244 ^ HIWORD(v244)) & v241;
    v246 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)(v239 + 32 * v245);
    v247 = *(unsigned __int8 *)v246;
    if (v247 == 255)
    {
LABEL_427:
      v248 = (WebCore::Style::RuleSet *)*((_QWORD *)v246 + 1);
      v249 = v246;
LABEL_428:
      *(_BYTE *)v249 = v242;
      v359 = (WTF *)v361;
      v360 = 1;
      v250 = *((unsigned int *)v249 + 5);
      if ((_DWORD)v250)
      {
        WTF::VectorTypeOperations<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>::destruct(v248, (char *)v248 + 8 * v250);
        v248 = (WebCore::Style::RuleSet *)*((_QWORD *)v249 + 1);
      }
      if (v248 != (WebCore::Style::DynamicMediaQueryEvaluationChanges *)((char *)v249 + 24))
      {
        if (v248)
        {
          *((_QWORD *)v249 + 1) = 0;
          *((_DWORD *)v249 + 4) = 0;
          WTF::fastFree(v248, v361);
        }
        *((_QWORD *)v249 + 1) = (char *)v249 + 24;
        v238 = (WebCore::Style::DynamicMediaQueryEvaluationChanges **)v348;
        v36 = (WTF::StringImpl **)v350;
      }
      if (v359 == (WTF *)v361)
      {
        v251 = HIDWORD(v360);
        memcpy((char *)v249 + 24, v361, 8 * HIDWORD(v360));
        v252 = v360;
      }
      else
      {
        *((_QWORD *)v249 + 1) = v359;
        v252 = v360;
        v251 = HIDWORD(v360);
      }
      *((_DWORD *)v249 + 4) = v252;
      *((_DWORD *)v249 + 5) = v251;
      v253 = *v238;
      v170 = (uint64_t)v352;
      if (*v238)
        v254 = *((_DWORD *)v253 - 3) + 1;
      else
        v254 = 1;
      a3 = v355;
      a2 = v356;
      v5 = v354;
      *((_DWORD *)v253 - 3) = v254;
      v255 = *v238;
      if (*v238)
        v256 = *((_DWORD *)v255 - 3);
      else
        v256 = 0;
      v257 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)((char *)v255 - 16);
      v258 = (*((_DWORD *)v255 - 4) + v256);
      v259 = *((unsigned int *)v255 - 1);
      if (v259 > 0x400)
      {
        if (v259 <= 2 * v258)
          goto LABEL_472;
LABEL_439:
        v246 = v249;
      }
      else
      {
        if (3 * v259 > 4 * v258)
          goto LABEL_439;
        if (!(_DWORD)v259)
        {
          v261 = *((_DWORD *)v255 - 3);
          v262 = 8;
          goto LABEL_449;
        }
LABEL_472:
        v261 = *((_DWORD *)v255 - 3);
        v262 = (_DWORD)v259 << (6 * v261 >= (2 * v259));
LABEL_449:
        v263 = v262;
        v264 = WTF::fastMalloc((WTF *)((32 * v262) | 0x10));
        if (v262)
        {
          v265 = v264 + 40;
          do
          {
            *(_BYTE *)(v265 - 24) = -1;
            *(_QWORD *)(v265 - 16) = v265;
            *(_QWORD *)(v265 - 8) = 1;
            v265 += 32;
            --v263;
          }
          while (v263);
        }
        *v348 = v264 + 16;
        *(_DWORD *)(v264 + 12) = v262;
        *(_DWORD *)(*v348 - 8) = v262 - 1;
        *(_DWORD *)(*v348 - 16) = 0;
        *(_DWORD *)(*v348 - 12) = v261;
        a3 = v355;
        a2 = v356;
        v170 = (uint64_t)v352;
        v5 = v354;
        v266 = 0;
        if ((_DWORD)v259)
        {
          do
          {
            v335 = *(unsigned __int8 *)v255;
            if (v335 != 254)
            {
              if (v335 == 255)
              {
                WebCore::Style::DynamicMediaQueryEvaluationChanges::~DynamicMediaQueryEvaluationChanges(v255, a2);
              }
              else
              {
                v336 = WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::reinsert(v348, (uint64_t)v255);
                WebCore::Style::DynamicMediaQueryEvaluationChanges::~DynamicMediaQueryEvaluationChanges(v255, v337);
                if (v255 == v249)
                  v266 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)v336;
              }
            }
            v255 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)((char *)v255 + 32);
            --v259;
            v36 = (WTF::StringImpl **)v350;
          }
          while (v259);
        }
        else
        {
          v246 = 0;
          v36 = (WTF::StringImpl **)v350;
          if (!v255)
            goto LABEL_454;
        }
        WTF::fastFree(v257, a2);
        v170 = (uint64_t)v352;
        v5 = v354;
        a3 = v355;
        a2 = v356;
        v246 = v266;
      }
    }
    else
    {
      v249 = 0;
      v260 = 1;
      while (v247 != v242)
      {
        if (v247 == 254)
          v249 = v246;
        v245 = ((_DWORD)v245 + v260) & v241;
        v246 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)(v239 + 32 * v245);
        v247 = *(unsigned __int8 *)v246;
        ++v260;
        if (v247 == 255)
        {
          if (!v249)
            goto LABEL_427;
          *(_BYTE *)v249 = -1;
          v248 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)((char *)v249 + 24);
          *((_QWORD *)v249 + 1) = (char *)v249 + 24;
          *((_QWORD *)v249 + 2) = 1;
          --*(_DWORD *)(*v348 - 16);
          LOBYTE(v242) = *(_BYTE *)(v169 + 24);
          goto LABEL_428;
        }
      }
    }
LABEL_454:
    v267 = *(_DWORD **)v169;
    if (*(_QWORD *)v169)
      ++*v267;
    v268 = *((unsigned int *)v246 + 5);
    if ((_DWORD)v268 == *((_DWORD *)v246 + 4))
    {
      v269 = v268 + (v268 >> 2);
      if (v269 >= 0x10)
        v270 = v269 + 1;
      else
        v270 = 16;
      if (v270 <= v268 + 1)
        v271 = v268 + 1;
      else
        v271 = v270;
      v272 = (unsigned __int8 *)*((_QWORD *)v246 + 1);
      if (v271 < 2)
      {
        v273 = (char *)v246 + 24;
        *((_QWORD *)v246 + 1) = (char *)v246 + 24;
        *((_DWORD *)v246 + 4) = 1;
      }
      else
      {
        if (v271 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19457F868);
        }
        v273 = (void *)WTF::fastMalloc((WTF *)(8 * v271));
        *((_DWORD *)v246 + 4) = v271;
        *((_QWORD *)v246 + 1) = v273;
      }
      memcpy(v273, v272, 8 * v268);
      if ((unsigned __int8 *)((char *)v246 + 24) != v272 && v272)
      {
        if (*((unsigned __int8 **)v246 + 1) == v272)
        {
          *((_QWORD *)v246 + 1) = 0;
          *((_DWORD *)v246 + 4) = 0;
        }
        WTF::fastFree((WTF *)v272, v274);
      }
      v268 = *((unsigned int *)v246 + 5);
      v194 = (_QWORD *)(*((_QWORD *)v246 + 1) + 8 * v268);
      a3 = v355;
      a2 = v356;
      v170 = (uint64_t)v352;
      v5 = v354;
    }
    else
    {
      v194 = (_QWORD *)(*((_QWORD *)v246 + 1) + 8 * v268);
    }
    *v194 = v267;
    *((_DWORD *)v246 + 5) = v268 + 1;
LABEL_346:
    v169 += 32;
    if (v169 != v170)
      continue;
    break;
  }
LABEL_475:
  if ((*(_QWORD *)(*((_QWORD *)v5 + 1) + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v275 = *(_QWORD *)((*(_QWORD *)(*((_QWORD *)v5 + 1) + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v275)
    {
      v276 = WebCore::Style::Scope::resolver(*(WebCore::Style::Scope **)(v275 + 216));
      v277 = WebCore::Style::ScopeRuleSets::attributeInvalidationRuleSets((WebCore::Style::ScopeRuleSets *)(v276 + 32), &v357);
      v279 = v354;
      v278 = v355;
      v280 = v356;
      if (v277)
      {
        v281 = *((unsigned int *)v277 + 3);
        if ((_DWORD)v281)
        {
          v282 = *(_QWORD *)v277;
          v283 = *(_QWORD *)v277 + 32 * v281;
          v353 = (WebCore::Style::Scope *)v283;
          do
          {
            if (*(_BYTE *)(v282 + 24) == 17)
            {
              v284 = *(unsigned int *)(v282 + 20);
              if ((_DWORD)v284)
              {
                v285 = *(unsigned int ***)(v282 + 8);
                for (nn = 8 * v284; nn; nn -= 8)
                {
                  v287 = *v285;
                  v288 = **v285;
                  v289 = (v288 >> 4) & 0x1F;
                  v201 = v289 > 0xC;
                  v290 = (1 << v289) & 0x1CF0;
                  if (!v201 && v290 != 0)
                  {
                    if (*(_QWORD *)v278)
                    {
                      v292 = *((_QWORD *)v279 + 1);
                      v293 = (WebCore::HTMLDocument *)(*((_QWORD *)v287 + 1) + 32);
                      v294 = *(_WORD *)(v292 + 28);
                      if ((v294 & 0x10) != 0
                        && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v292 + 40) + 8) + 3358) & 1) != 0)
                      {
                        v295 = *(_QWORD *)v293;
                        v296 = (_QWORD *)(*(_QWORD *)v293 + 40);
                      }
                      else
                      {
                        v295 = *(_QWORD *)v293;
                        v296 = (_QWORD *)(*(_QWORD *)v293 + 24);
                      }
                      v297 = *(WTF **)v280;
                      if (*v296 == *(_QWORD *)(*(_QWORD *)v280 + 24))
                      {
                        if (*(_QWORD *)(v295 + 16) == WebCore::starAtomData
                          || *(_QWORD *)(v295 + 32) == *((_QWORD *)v297 + 4))
                        {
                          v316 = (v288 & 0x800000) == 0;
                          if ((v288 & 0x800000) == 0
                            && (v294 & 0x10) != 0
                            && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v292 + 40) + 8) + 3358) & 1) != 0
                            && (v316 = WebCore::HTMLDocument::isCaseSensitiveAttribute(v293, a2),
                                (v297 = *(WTF **)v356) == 0))
                          {
                            __src = 1;
                          }
                          else
                          {
                            __src = 0;
                            ++*(_DWORD *)v297;
                          }
                          v359 = v297;
                          v317 = *(WTF::StringImpl **)v355;
                          if (*(_QWORD *)v355)
                          {
                            *(_DWORD *)v317 += 2;
                            v360 = (uint64_t)v317;
                            if ((*v287 & 0x100000) != 0)
                              v318 = (const WTF::StringImpl *)(*((_QWORD *)v287 + 1) + 8);
                            else
                              v318 = (const WTF::StringImpl *)(v287 + 2);
                            v298 = WebCore::attributeValueMatches((uint64_t)&v359, (*v287 >> 4) & 0x1F, v318, v316);
                            if (*(_DWORD *)v317 == 2)
                              WTF::StringImpl::destroy(v317, a2);
                            else
                              *(_DWORD *)v317 -= 2;
                          }
                          else
                          {
                            v360 = 0;
                            if ((*v287 & 0x100000) != 0)
                              v341 = (const WTF::StringImpl *)(*((_QWORD *)v287 + 1) + 8);
                            else
                              v341 = (const WTF::StringImpl *)(v287 + 2);
                            v298 = WebCore::attributeValueMatches((uint64_t)&v359, (*v287 >> 4) & 0x1F, v341, v316);
                          }
                          v36 = (WTF::StringImpl **)v350;
                          v283 = (uint64_t)v353;
                          v278 = v355;
                          v280 = v356;
                          v279 = v354;
                          if ((__src & 1) == 0)
                          {
                            if (*(_DWORD *)v297 == 1)
                            {
                              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v297);
                              WTF::fastFree(v329, v330);
                              v283 = (uint64_t)v353;
                              v279 = v354;
                              v278 = v355;
                              v280 = v356;
                            }
                            else
                            {
                              --*(_DWORD *)v297;
                            }
                          }
                        }
                        else
                        {
                          v298 = 0;
                          v278 = v355;
                          v280 = v356;
                          v279 = v354;
                        }
                      }
                      else
                      {
                        v298 = 0;
                      }
                      if (*v36
                        && ((v299 = *((_QWORD *)v279 + 1),
                             v300 = (WebCore::HTMLDocument *)(*((_QWORD *)v287 + 1) + 32),
                             v301 = *(_WORD *)(v299 + 28),
                             (v301 & 0x10) != 0)
                         && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v299 + 40) + 8) + 3358) & 1) != 0
                          ? (v302 = *(_QWORD *)v300, v303 = (_QWORD *)(*(_QWORD *)v300 + 40))
                          : (v302 = *(_QWORD *)v300, v303 = (_QWORD *)(*(_QWORD *)v300 + 24)),
                            (v304 = *(WTF **)v280, *v303 == *(_QWORD *)(*(_QWORD *)v280 + 24))
                         && (*(_QWORD *)(v302 + 16) == WebCore::starAtomData
                          || *(_QWORD *)(v302 + 32) == *((_QWORD *)v304 + 4))))
                      {
                        v319 = (*v287 & 0x800000) == 0;
                        if ((*v287 & 0x800000) == 0
                          && (v301 & 0x10) != 0
                          && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v299 + 40) + 8) + 3358) & 1) != 0
                          && (v319 = WebCore::HTMLDocument::isCaseSensitiveAttribute(v300, a2),
                              (v304 = *(WTF **)v356) == 0))
                        {
                          __srca = 1;
                        }
                        else
                        {
                          __srca = 0;
                          ++*(_DWORD *)v304;
                        }
                        v359 = v304;
                        v320 = *v36;
                        if (v320)
                        {
                          *(_DWORD *)v320 += 2;
                          v360 = (uint64_t)v320;
                          if ((*v287 & 0x100000) != 0)
                            v321 = (const WTF::StringImpl *)(*((_QWORD *)v287 + 1) + 8);
                          else
                            v321 = (const WTF::StringImpl *)(v287 + 2);
                          v322 = WebCore::attributeValueMatches((uint64_t)&v359, (*v287 >> 4) & 0x1F, v321, v319);
                          if (*(_DWORD *)v320 == 2)
                            WTF::StringImpl::destroy(v320, a2);
                          else
                            *(_DWORD *)v320 -= 2;
                        }
                        else
                        {
                          v360 = 0;
                          if ((*v287 & 0x100000) != 0)
                            v342 = (const WTF::StringImpl *)(*((_QWORD *)v287 + 1) + 8);
                          else
                            v342 = (const WTF::StringImpl *)(v287 + 2);
                          v322 = WebCore::attributeValueMatches((uint64_t)&v359, (*v287 >> 4) & 0x1F, v342, v319);
                        }
                        v36 = (WTF::StringImpl **)v350;
                        v283 = (uint64_t)v353;
                        v278 = v355;
                        v280 = v356;
                        v279 = v354;
                        if ((__srca & 1) == 0)
                        {
                          if (*(_DWORD *)v304 == 1)
                          {
                            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v304);
                            WTF::fastFree(v331, v332);
                            v283 = (uint64_t)v353;
                            v279 = v354;
                            v278 = v355;
                            v280 = v356;
                          }
                          else
                          {
                            --*(_DWORD *)v304;
                          }
                        }
                        if (v298 != v322)
                          goto LABEL_561;
                      }
                      else if ((v298 & 1) != 0)
                      {
                        goto LABEL_561;
                      }
                    }
                    else if (*v36)
                    {
                      v305 = *((_QWORD *)v279 + 1);
                      v306 = (WebCore::HTMLDocument *)(*((_QWORD *)v287 + 1) + 32);
                      v307 = *(_WORD *)(v305 + 28);
                      if ((v307 & 0x10) != 0
                        && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v305 + 40) + 8) + 3358) & 1) != 0)
                      {
                        v308 = *(_QWORD *)v306;
                        v309 = (_QWORD *)(*(_QWORD *)v306 + 40);
                      }
                      else
                      {
                        v308 = *(_QWORD *)v306;
                        v309 = (_QWORD *)(*(_QWORD *)v306 + 24);
                      }
                      v310 = *(WTF **)v280;
                      if (*v309 == *(_QWORD *)(*(_QWORD *)v280 + 24)
                        && (*(_QWORD *)(v308 + 16) == WebCore::starAtomData
                         || *(_QWORD *)(v308 + 32) == *((_QWORD *)v310 + 4)))
                      {
                        v311 = (v288 & 0x800000) == 0;
                        if ((v288 & 0x800000) == 0
                          && (v307 & 0x10) != 0
                          && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v305 + 40) + 8) + 3358) & 1) != 0
                          && (v311 = WebCore::HTMLDocument::isCaseSensitiveAttribute(v306, a2),
                              (v310 = *(WTF **)v356) == 0))
                        {
                          v312 = 1;
                        }
                        else
                        {
                          v312 = 0;
                          ++*(_DWORD *)v310;
                        }
                        v359 = v310;
                        v313 = *v36;
                        if (v313)
                        {
                          *(_DWORD *)v313 += 2;
                          v360 = (uint64_t)v313;
                          if ((*v287 & 0x100000) != 0)
                            v314 = (const WTF::StringImpl *)(*((_QWORD *)v287 + 1) + 8);
                          else
                            v314 = (const WTF::StringImpl *)(v287 + 2);
                          v315 = WebCore::attributeValueMatches((uint64_t)&v359, (*v287 >> 4) & 0x1F, v314, v311);
                          if (*(_DWORD *)v313 == 2)
                            WTF::StringImpl::destroy(v313, a2);
                          else
                            *(_DWORD *)v313 -= 2;
                        }
                        else
                        {
                          v360 = 0;
                          if ((*v287 & 0x100000) != 0)
                            v343 = (const WTF::StringImpl *)(*((_QWORD *)v287 + 1) + 8);
                          else
                            v343 = (const WTF::StringImpl *)(v287 + 2);
                          v315 = WebCore::attributeValueMatches((uint64_t)&v359, (*v287 >> 4) & 0x1F, v343, v311);
                        }
                        v36 = (WTF::StringImpl **)v350;
                        v283 = (uint64_t)v353;
                        v278 = v355;
                        v280 = v356;
                        v279 = v354;
                        if ((v312 & 1) == 0)
                        {
                          if (*(_DWORD *)v310 == 1)
                          {
                            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v310);
                            WTF::fastFree(v333, v334);
                            v283 = (uint64_t)v353;
                            v279 = v354;
                            v278 = v355;
                            v280 = v356;
                          }
                          else
                          {
                            --*(_DWORD *)v310;
                          }
                        }
                        if ((v315 & 1) != 0)
                        {
LABEL_561:
                          WebCore::Style::Invalidator::addToMatchElementRuleSets((uint64_t *)v354 + 2, (unsigned __int8 *)v282);
                          v283 = (uint64_t)v353;
                          v279 = v354;
                          v278 = v355;
                          v280 = v356;
                          break;
                        }
                      }
                    }
                  }
                  ++v285;
                }
              }
            }
            v282 += 32;
          }
          while (v282 != v283);
        }
      }
    }
  }
  this = v357;
  if (v357)
  {
    if (*(_DWORD *)v357 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v357, a2);
    else
      *(_DWORD *)v357 -= 2;
  }
  return this;
}

void WebCore::Style::BuilderFunctions::applyInitialFontVariantPosition(WebCore::Style::BuilderFunctions *this, WebCore::Style::BuilderState *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _BYTE v11[160];
  int v12;
  WTF *v13;
  int v14;
  __int16 v15;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v11, (const WebCore::FontDescription *)(v3 + 48));
  v4 = *(WTF **)(v3 + 216);
  ++*(_DWORD *)v4;
  v13 = v4;
  v14 = *(_DWORD *)(v3 + 224);
  v15 = *(_WORD *)(v3 + 228);
  v12 &= 0xFCFFFFFF;
  *((_BYTE *)this + 316) |= WebCore::RenderStyle::setFontDescription(*((_QWORD *)this + 2), (uint64_t)v11);
  v6 = (unsigned int *)v13;
  v13 = 0;
  if (v6)
  {
    if (*v6 == 1)
    {
      v7 = v6[1];
      if ((_DWORD)v7)
      {
        v8 = (WTF::StringImpl **)(v6 + 2);
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v5);
            else
              *(_DWORD *)v10 -= 2;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      WTF::fastFree((WTF *)v6, v5);
    }
    else
    {
      --*v6;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v11, v5);
}

void WebCore::Style::BuilderFunctions::applyInitialFontOpticalSizing(WebCore::Style::BuilderFunctions *this, WebCore::Style::BuilderState *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _BYTE v11[164];
  __int16 v12;
  unsigned __int8 v13;
  WTF *v14;
  int v15;
  __int16 v16;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v11, (const WebCore::FontDescription *)(v3 + 48));
  v4 = *(WTF **)(v3 + 216);
  ++*(_DWORD *)v4;
  v14 = v4;
  v15 = *(_DWORD *)(v3 + 224);
  v16 = *(_WORD *)(v3 + 228);
  LODWORD(v4) = v12 & 0xBFFF | (v13 << 16);
  v12 &= ~0x4000u;
  v13 = BYTE2(v4);
  *((_BYTE *)this + 316) |= WebCore::RenderStyle::setFontDescription(*((_QWORD *)this + 2), (uint64_t)v11);
  v6 = (unsigned int *)v14;
  v14 = 0;
  if (v6)
  {
    if (*v6 == 1)
    {
      v7 = v6[1];
      if ((_DWORD)v7)
      {
        v8 = (WTF::StringImpl **)(v6 + 2);
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v5);
            else
              *(_DWORD *)v10 -= 2;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      WTF::fastFree((WTF *)v6, v5);
    }
    else
    {
      --*v6;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v11, v5);
}

void WebCore::Style::BuilderFunctions::applyInitialFontVariantEmoji(WebCore::Style::BuilderFunctions *this, WebCore::Style::BuilderState *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _BYTE v11[164];
  __int16 v12;
  unsigned __int8 v13;
  WTF *v14;
  int v15;
  __int16 v16;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v11, (const WebCore::FontDescription *)(v3 + 48));
  v4 = *(WTF **)(v3 + 216);
  ++*(_DWORD *)v4;
  v14 = v4;
  v15 = *(_DWORD *)(v3 + 224);
  v16 = *(_WORD *)(v3 + 228);
  LODWORD(v4) = v12 & 0xCFFF | (v13 << 16);
  v12 &= 0xCFFFu;
  v13 = BYTE2(v4);
  *((_BYTE *)this + 316) |= WebCore::RenderStyle::setFontDescription(*((_QWORD *)this + 2), (uint64_t)v11);
  v6 = (unsigned int *)v14;
  v14 = 0;
  if (v6)
  {
    if (*v6 == 1)
    {
      v7 = v6[1];
      if ((_DWORD)v7)
      {
        v8 = (WTF::StringImpl **)(v6 + 2);
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v5);
            else
              *(_DWORD *)v10 -= 2;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      WTF::fastFree((WTF *)v6, v5);
    }
    else
    {
      --*v6;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v11, v5);
}

void WebCore::Style::BuilderFunctions::applyInitialFontVariantCaps(WebCore::Style::BuilderFunctions *this, WebCore::Style::BuilderState *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _BYTE v11[160];
  int v12;
  WTF *v13;
  int v14;
  __int16 v15;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v11, (const WebCore::FontDescription *)(v3 + 48));
  v4 = *(WTF **)(v3 + 216);
  ++*(_DWORD *)v4;
  v13 = v4;
  v14 = *(_DWORD *)(v3 + 224);
  v15 = *(_WORD *)(v3 + 228);
  v12 &= 0xE3FFFFFF;
  *((_BYTE *)this + 316) |= WebCore::RenderStyle::setFontDescription(*((_QWORD *)this + 2), (uint64_t)v11);
  v6 = (unsigned int *)v13;
  v13 = 0;
  if (v6)
  {
    if (*v6 == 1)
    {
      v7 = v6[1];
      if ((_DWORD)v7)
      {
        v8 = (WTF::StringImpl **)(v6 + 2);
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v5);
            else
              *(_DWORD *)v10 -= 2;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      WTF::fastFree((WTF *)v6, v5);
    }
    else
    {
      --*v6;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v11, v5);
}

void WebCore::Style::BuilderFunctions::applyInitialFontKerning(WebCore::Style::BuilderFunctions *this, WebCore::Style::BuilderState *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _BYTE v11[168];
  WTF *v12;
  int v13;
  __int16 v14;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v11, (const WebCore::FontDescription *)(v3 + 48));
  v4 = *(WTF **)(v3 + 216);
  ++*(_DWORD *)v4;
  v12 = v4;
  v14 = *(_WORD *)(v3 + 228);
  v13 = *(_DWORD *)(v3 + 224);
  v14 &= 0xFFF9u;
  *((_BYTE *)this + 316) |= WebCore::RenderStyle::setFontDescription(*((_QWORD *)this + 2), (uint64_t)v11);
  v6 = (unsigned int *)v12;
  v12 = 0;
  if (v6)
  {
    if (*v6 == 1)
    {
      v7 = v6[1];
      if ((_DWORD)v7)
      {
        v8 = (WTF::StringImpl **)(v6 + 2);
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v5);
            else
              *(_DWORD *)v10 -= 2;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      WTF::fastFree((WTF *)v6, v5);
    }
    else
    {
      --*v6;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v11, v5);
}

uint64_t **WebCore::Style::commitRelations(uint64_t **result, WebCore::Style::Update *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  const WebCore::Element *v7;
  int v8;
  BOOL v9;
  int v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *result;
  if (*result)
  {
    v3 = *((unsigned int *)v2 + 3);
    if ((_DWORD)v3)
    {
      v5 = *v2;
      v6 = *v2 + 16 * v3;
      do
      {
        v7 = *(const WebCore::Element **)v5;
        switch(*(_DWORD *)(v5 + 8))
        {
          case 0:
            v11 = *((_QWORD *)v7 + 8) | 0x800000000000000;
            goto LABEL_16;
          case 1:
            v11 = *((_QWORD *)v7 + 8) | 0x200000000000000;
            goto LABEL_16;
          case 2:
            v11 = *((_QWORD *)v7 + 8) | 0x400000000000000;
            goto LABEL_16;
          case 3:
            v8 = *(_DWORD *)(v5 + 12);
            if (v8)
              v9 = v7 == 0;
            else
              v9 = 1;
            if (v9)
              goto LABEL_17;
            v10 = 0;
            break;
          case 4:
            v11 = *((_QWORD *)v7 + 8) | 0x1000000000000000;
            goto LABEL_16;
          case 5:
            v11 = *((_QWORD *)v7 + 8) | 0x2000000000000000;
            goto LABEL_16;
          case 6:
            v11 = *((_QWORD *)v7 + 8) | 0x4000000000000000;
            goto LABEL_16;
          case 7:
            v11 = *((_QWORD *)v7 + 8) | 0x8000000000000000;
            goto LABEL_16;
          case 8:
            v11 = *((_QWORD *)v7 + 8) | 0x40000000000000;
            goto LABEL_16;
          case 9:
            v11 = *((_QWORD *)v7 + 8) | 0x80000000000000;
            goto LABEL_16;
          case 0xA:
            result = (uint64_t **)WebCore::Style::Update::elementStyle(this, *(const WebCore::Element **)v5);
            if (!result)
              goto LABEL_17;
            v14 = (unint64_t)result[2] | 0x10080000000;
            goto LABEL_29;
          case 0xB:
            result = (uint64_t **)WebCore::Style::Update::elementStyle(this, *(const WebCore::Element **)v5);
            if (!result)
              goto LABEL_17;
            v14 = (unint64_t)result[2] | 0x20080000000;
            goto LABEL_29;
          case 0xC:
            result = (uint64_t **)WebCore::Style::Update::elementStyle(this, *(const WebCore::Element **)v5);
            if (result)
              result[2] = (uint64_t *)((unint64_t)result[2] | 0x80000000);
            v12 = *(_DWORD *)(v5 + 12);
            v13 = *((_QWORD *)v7 + 9) & 0xFFFFFFFFFFFFLL;
            if (!v13)
            {
              result = (uint64_t **)WebCore::Node::materializeRareData(v7);
              v13 = *((_QWORD *)v7 + 9) & 0xFFFFFFFFFFFFLL;
            }
            *(_WORD *)(v13 + 26) = v12;
            goto LABEL_17;
          case 0xD:
            result = (uint64_t **)WebCore::Style::Update::elementStyle(this, *(const WebCore::Element **)v5);
            if (!result)
              goto LABEL_17;
            v14 = (unint64_t)result[2] | 0x80000000;
LABEL_29:
            result[2] = (uint64_t *)v14;
            goto LABEL_17;
          case 0xE:
            v11 = *((_QWORD *)v7 + 8) | 0x20000000000000;
LABEL_16:
            *((_QWORD *)v7 + 8) = v11;
            goto LABEL_17;
          default:
            goto LABEL_17;
        }
LABEL_10:
        *((_QWORD *)v7 + 8) |= 0x100000000000000uLL;
        ++v10;
        while (1)
        {
          v7 = (const WebCore::Element *)*((_QWORD *)v7 + 7);
          if (!v7)
            break;
          if ((*((_WORD *)v7 + 14) & 8) != 0)
          {
            if (v10 != v8)
              goto LABEL_10;
            break;
          }
        }
LABEL_17:
        v5 += 16;
      }
      while (v5 != v6);
    }
  }
  return result;
}

void WebCore::Style::BuilderCustom::applyInitialFontVariantLigatures(WebCore::Style::BuilderCustom *this, WebCore::Style::BuilderState *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _BYTE v11[160];
  int v12;
  WTF *v13;
  int v14;
  __int16 v15;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v11, (const WebCore::FontDescription *)(v3 + 48));
  v4 = *(WTF **)(v3 + 216);
  ++*(_DWORD *)v4;
  v13 = v4;
  v14 = *(_DWORD *)(v3 + 224);
  v15 = *(_WORD *)(v3 + 228);
  v12 &= 0xFF00FFFF;
  *((_BYTE *)this + 316) |= WebCore::RenderStyle::setFontDescription(*((_QWORD *)this + 2), (uint64_t)v11);
  v6 = (unsigned int *)v13;
  v13 = 0;
  if (v6)
  {
    if (*v6 == 1)
    {
      v7 = v6[1];
      if ((_DWORD)v7)
      {
        v8 = (WTF::StringImpl **)(v6 + 2);
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v5);
            else
              *(_DWORD *)v10 -= 2;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      WTF::fastFree((WTF *)v6, v5);
    }
    else
    {
      --*v6;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v11, v5);
}

void WebCore::Style::BuilderCustom::applyInitialFontVariantEastAsian(WebCore::Style::BuilderCustom *this, WebCore::Style::BuilderState *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _BYTE v11[164];
  __int16 v12;
  unsigned __int8 v13;
  WTF *v14;
  int v15;
  __int16 v16;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v11, (const WebCore::FontDescription *)(v3 + 48));
  v4 = *(WTF **)(v3 + 216);
  ++*(_DWORD *)v4;
  v14 = v4;
  v15 = *(_DWORD *)(v3 + 224);
  v16 = *(_WORD *)(v3 + 228);
  LODWORD(v4) = v12 & 0xF03F | (v13 << 16);
  v12 &= 0xF03Fu;
  v13 = BYTE2(v4);
  *((_BYTE *)this + 316) |= WebCore::RenderStyle::setFontDescription(*((_QWORD *)this + 2), (uint64_t)v11);
  v6 = (unsigned int *)v14;
  v14 = 0;
  if (v6)
  {
    if (*v6 == 1)
    {
      v7 = v6[1];
      if ((_DWORD)v7)
      {
        v8 = (WTF::StringImpl **)(v6 + 2);
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v5);
            else
              *(_DWORD *)v10 -= 2;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      WTF::fastFree((WTF *)v6, v5);
    }
    else
    {
      --*v6;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v11, v5);
}

void WebCore::Style::BuilderCustom::applyInitialFontVariantNumeric(WebCore::Style::BuilderCustom *this, WebCore::Style::BuilderState *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _BYTE v11[160];
  int v12;
  __int16 v13;
  WTF *v14;
  int v15;
  __int16 v16;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v11, (const WebCore::FontDescription *)(v3 + 48));
  v4 = *(WTF **)(v3 + 216);
  ++*(_DWORD *)v4;
  v14 = v4;
  v15 = *(_DWORD *)(v3 + 224);
  v16 = *(_WORD *)(v3 + 228);
  v12 &= 0x9FFFFFFF;
  v13 &= 0xFFC0u;
  *((_BYTE *)this + 316) |= WebCore::RenderStyle::setFontDescription(*((_QWORD *)this + 2), (uint64_t)v11);
  v6 = (unsigned int *)v14;
  v14 = 0;
  if (v6)
  {
    if (*v6 == 1)
    {
      v7 = v6[1];
      if ((_DWORD)v7)
      {
        v8 = (WTF::StringImpl **)(v6 + 2);
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v5);
            else
              *(_DWORD *)v10 -= 2;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      WTF::fastFree((WTF *)v6, v5);
    }
    else
    {
      --*v6;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v11, v5);
}

double WebCore::Image::startAnimationAsynchronously(WebCore::Image *this)
{
  uint64_t v1;
  double v2;
  double result;
  WebCore::Image *v4;
  unint64_t StatusReg;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v1 = *((_QWORD *)this + 7);
  if (!v1)
  {
    v4 = this;
    v1 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v1 = off_1E3407128;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(_OWORD *)(v1 + 8) = 0u;
    *(_OWORD *)(v1 + 24) = 0u;
    v6 = *(unsigned int **)(StatusReg + 736);
    if (!v6)
      v6 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    *(_QWORD *)(v1 + 40) = v6;
    *(_QWORD *)v1 = off_1E31F7378;
    v8 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v8 = off_1E340D5A0;
    *(_OWORD *)(v8 + 8) = xmmword_1969F7C50;
    *(_QWORD *)(v8 + 24) = v4;
    *(_QWORD *)(v1 + 48) = v8;
    this = (WebCore::Image *)*((_QWORD *)v4 + 7);
    *((_QWORD *)v4 + 7) = v1;
    if (this)
    {
      this = (WebCore::Image *)(*(uint64_t (**)(WebCore::Image *))(*(_QWORD *)this + 8))(this);
      v1 = *((_QWORD *)v4 + 7);
    }
  }
  if ((*(_QWORD *)(v1 + 32) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*(_QWORD *)(v1 + 32) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    *(_QWORD *)(v1 + 24) = 0;
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::setNextFireTime(v1, v2 + 0.0);
  }
  return result;
}

unint64_t WebCore::wrap<WebCore::Clipboard>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSEventTarget *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *Allocator;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  WTF *v62;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v51 = *(_QWORD *)(v5 + 32);
    if (!v51)
      goto LABEL_5;
    v52 = *(_DWORD *)(v51 - 8);
    v53 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
    v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
    v56 = v52 & ((v55 >> 31) ^ v55);
    v57 = *(_QWORD *)(v51 + 16 * v56);
    if (v57 != a3)
    {
      v58 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v58) & v52;
        v57 = *(_QWORD *)(v51 + 16 * v56);
        ++v58;
        if (v57 == a3)
          goto LABEL_66;
      }
      goto LABEL_5;
    }
LABEL_66:
    v6 = *(_QWORD *)(v51 + 16 * v56 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::Clipboard *__hidden))a3 != off_1E3352D18)
  {
    __break(0xC471u);
    JUMPOUT(0x194580998);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSClipboard::s_info + ~((_QWORD)&WebCore::JSClipboard::s_info << 32)) ^ (((unint64_t)&WebCore::JSClipboard::s_info + ~((_QWORD)&WebCore::JSClipboard::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSClipboard::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSClipboard::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v17, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSClipboardPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSClipboardPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSClipboard::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSClipboard::s_info);
LABEL_13:
  v24 = *((_QWORD *)a2 + 7);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 472);
  if (v27)
    goto LABEL_36;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_18:
  v30 = *(_QWORD *)(v28 + 2824);
  v60 = *(_QWORD *)(v30 + 472);
  if (!v60)
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v62, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v62, v24 + 192, v24 + 1872, 32, 8, &v61);
    v33 = (uint64_t)v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v62;
    v62 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v60 = v31;
    v35 = *(_QWORD *)(v30 + 472);
    *(_QWORD *)(v30 + 472) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *(unsigned int *)(v28 + 2844);
    if ((_DWORD)v36 == *(_DWORD *)(v28 + 2840))
    {
      v37 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28 + 2832, v36 + 1, (unint64_t)&v60);
      v36 = *(unsigned int *)(v28 + 2844);
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = *v37;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = v31;
    }
    *(_DWORD *)(v28 + 2844) = v36 + 1;
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v38 = *(_QWORD *)(v26 + 472);
  *(_QWORD *)(v26 + 472) = v27;
  if (v38)
  {
    v39 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v39, v40);
  }
  v41 = __ldxr((unsigned __int8 *)v28);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_36:
  SlowCase = v27[3];
  if (SlowCase < v27[4])
  {
LABEL_37:
    v27[3] = SlowCase + 32;
    goto LABEL_38;
  }
  SlowCase = v27[5];
  if ((SlowCase & 1) == 0)
  {
    v59 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v59);
    v27[5] = SlowCase + (int)v59;
    goto LABEL_37;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v42 = *((_QWORD *)a2 + 415);
  if ((byte_1EE334F68 & 1) == 0)
  {
    qword_1EE334F60 = (uint64_t)&off_1E324F700;
    byte_1EE334F68 = 1;
  }
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v43 = (SlowCase - 112) | 1;
    else
      v43 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE334F60;
    Allocator[2] = v42;
    v46 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = Allocator;
    if (!v46)
      return SlowCase;
LABEL_60:
    *(_QWORD *)(v46 + 8) = 3;
    return SlowCase;
  }
  v62 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  v50 = *(_QWORD **)(v49 + 16);
  if (!v50)
    v50 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *v50;
  *v50 = SlowCase;
  v50[1] = &qword_1EE334F60;
  v50[2] = v42;
  v61 = v50;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v62, (uint64_t *)&v61);
  v46 = (uint64_t)v61;
  if (v61)
    goto LABEL_60;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::WakeLock>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 4);
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E33668A0)
  {
    __break(0xC471u);
    JUMPOUT(0x194580E28);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWakeLock::s_info + ~((_QWORD)&WebCore::JSWakeLock::s_info << 32)) ^ (((unint64_t)&WebCore::JSWakeLock::s_info + ~((_QWORD)&WebCore::JSWakeLock::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWakeLock::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWakeLock::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSWakeLockPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWakeLockPrototype::create((WebCore::JSWakeLockPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSWakeLock::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWakeLock::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 1616);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 1616))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 1616);
    *(_QWORD *)(v36 + 1616) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 1616);
  *(_QWORD *)(v32 + 1616) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336EF0 & 1) == 0)
  {
    qword_1EE336EE8 = (uint64_t)&off_1E3320450;
    byte_1EE336EF0 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336EE8;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::Location>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v27;
  JSC::Structure *v28;
  JSC::JSCell *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *Allocator;
  unint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  _QWORD *v52;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v9 = *(_QWORD *)(v5 + 32);
    if (!v9)
      goto LABEL_12;
    v10 = *(_DWORD *)(v9 - 8);
    v11 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(_QWORD *)(v9 + 16 * v14);
    if (v15 != a3)
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(_QWORD *)(v9 + 16 * v14);
        ++v16;
        if (v15 == a3)
          goto LABEL_11;
      }
LABEL_12:
      ++*(_DWORD *)(a3 + 8);
      v46 = (_DWORD *)a3;
      v17 = *(_QWORD *)(a2 + 3296);
      if (v17)
      {
        v18 = *(_DWORD *)(v17 - 8);
        v19 = ((unint64_t)&WebCore::JSLocation::s_info + ~((_QWORD)&WebCore::JSLocation::s_info << 32)) ^ (((unint64_t)&WebCore::JSLocation::s_info + ~((_QWORD)&WebCore::JSLocation::s_info << 32)) >> 22);
        v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
        v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
        v22 = v18 & ((v21 >> 31) ^ v21);
        v23 = *(char ***)(v17 + 16 * v22);
        if (v23 == &WebCore::JSLocation::s_info)
        {
LABEL_14:
          v24 = *(_QWORD *)(v17 + 16 * v22 + 8);
          if (v24)
            goto LABEL_16;
        }
        else
        {
          v41 = 1;
          while (v23)
          {
            v22 = ((_DWORD)v22 + v41) & v18;
            v23 = *(char ***)(v17 + 16 * v22);
            ++v41;
            if (v23 == &WebCore::JSLocation::s_info)
              goto LABEL_14;
          }
        }
      }
      v25 = *(uint64_t **)(a2 + 56);
      Structure = WebCore::JSLocationPrototype::createStructure(v25, a2, *(JSC::JSCell **)(a2 + 656));
      *(_DWORD *)(Structure + 16) |= 0x80000u;
      v29 = (JSC::JSCell *)WebCore::JSLocationPrototype::create((WebCore::JSLocationPrototype *)v25, Structure, v27, v28);
      v30 = WebCore::JSLocation::createStructure(v25, a2, v29);
      v24 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSLocation::s_info);
LABEL_16:
      v31 = *(_QWORD *)(a2 + 56);
      v32 = (_QWORD *)WebCore::JSLocation::subspaceForImpl((WebCore::JSLocation *)v31, (JSC::VM *)a2);
      SlowCase = v32[3];
      if (SlowCase >= v32[4])
      {
        SlowCase = v32[5];
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_18:
          *(_DWORD *)SlowCase = 0;
          WebCore::JSDOMObject::JSDOMObject(SlowCase, v24);
          v46 = 0;
          *(_QWORD *)(SlowCase + 24) = a3;
          *(_QWORD *)(SlowCase + 32) = 0;
          if (*(_BYTE *)(v31 + 755))
            __dmb(0xAu);
          v33 = *(_QWORD *)(*(_QWORD *)(v31 + 41952) + 2616);
          v34 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28) + 552);
          v47 = 0;
          v48 = SlowCase;
          v49 = -1;
          v50 = 0x1000000;
          v51 = 0;
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)v31, v33, v34, 14, (uint64_t)&v47);
          v35 = *(_QWORD *)(*(_QWORD *)(v31 + 41952) + 2768);
          v47 = 0;
          v48 = SlowCase;
          v49 = -1;
          v50 = 0x1000000;
          v51 = 0;
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, (JSC::VM *)v31, v35, 10, 14, (uint64_t)&v47);
          v36 = *(_QWORD *)(a2 + 3320);
          if ((byte_1EE335F40 & 1) == 0)
          {
            qword_1EE335F38 = (uint64_t)&off_1E32B3380;
            byte_1EE335F40 = 1;
          }
          if (*(_DWORD *)(v36 + 48))
          {
            v47 = a3;
            if ((SlowCase & 8) != 0)
              v42 = (SlowCase - 112) | 1;
            else
              v42 = SlowCase & 0xFFFFFFFFFFFFC000;
            if ((v42 & 1) != 0)
              v43 = v42 + 47;
            else
              v43 = *(_QWORD *)v42 + 32;
            Allocator = *(_QWORD **)(v43 + 16);
            if (!Allocator)
              Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
            *(_QWORD *)(v43 + 16) = *Allocator;
            *Allocator = SlowCase;
            Allocator[1] = &qword_1EE335F38;
            Allocator[2] = v36;
            v52 = Allocator;
            JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v36 + 32), &v47, (uint64_t *)&v52);
            v40 = (uint64_t)v52;
            if (!v52)
              goto LABEL_31;
          }
          else
          {
            if ((SlowCase & 8) != 0)
              v37 = (SlowCase - 112) | 1;
            else
              v37 = SlowCase & 0xFFFFFFFFFFFFC000;
            if ((v37 & 1) != 0)
              v38 = v37 + 47;
            else
              v38 = *(_QWORD *)v37 + 32;
            v39 = *(_QWORD **)(v38 + 16);
            if (!v39)
              v39 = (_QWORD *)JSC::WeakSet::findAllocator();
            *(_QWORD *)(v38 + 16) = *v39;
            *v39 = SlowCase;
            v39[1] = &qword_1EE335F38;
            v39[2] = v36;
            v40 = *(_QWORD *)a3;
            *(_QWORD *)a3 = v39;
            if (!v40)
              goto LABEL_31;
          }
          *(_QWORD *)(v40 + 8) = 3;
LABEL_31:
          WTF::Ref<WebCore::BarProp,WTF::RawPtrTraits<WebCore::BarProp>,WTF::DefaultRefDerefTraits<WebCore::BarProp>>::~Ref(&v46, (void *)v37);
          return SlowCase;
        }
        v45 = *(_QWORD *)(SlowCase + 8) ^ v32[6];
        v32[4] = SlowCase + HIDWORD(v45);
        v32[5] = SlowCase + (int)v45;
      }
      v32[3] = SlowCase + 48;
      goto LABEL_18;
    }
LABEL_11:
    v6 = *(_QWORD *)(v9 + 16 * v14 + 8);
    if (!v6)
      goto LABEL_12;
  }
  else
  {
    v6 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_12;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) != 0)
    goto LABEL_12;
  SlowCase = *(_QWORD *)v6;
  if (!*(_QWORD *)v6)
    goto LABEL_12;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::Storage>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::Storage *v7;

  v4 = WebCore::getCachedWrapper<WebCore::DOMImplementation>(*(_QWORD *)(a1 + 3320), (_QWORD *)a2);
  if (v4)
    return v4;
  ++*(_DWORD *)(a2 + 8);
  v7 = (WebCore::Storage *)a2;
  v5 = WebCore::createWrapper<WebCore::Storage,WebCore::Storage>(a1, (uint64_t *)&v7);
  WTF::Ref<WebCore::Storage,WTF::RawPtrTraits<WebCore::Storage>,WTF::DefaultRefDerefTraits<WebCore::Storage>>::~Ref(&v7);
  return v5;
}

uint64_t WebCore::wrap<WebCore::Attr>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WebCore::Node *v7;
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  WebCore::Node *v17;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v9 = *(_QWORD *)(v3 + 32);
    if (!v9)
      goto LABEL_5;
    v10 = *(_DWORD *)(v9 - 8);
    v11 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(_QWORD *)(v9 + 16 * v14);
    if (v15 != a3)
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(_QWORD *)(v9 + 16 * v14);
        ++v16;
        if (v15 == a3)
          goto LABEL_15;
      }
      goto LABEL_5;
    }
LABEL_15:
    v4 = *(_QWORD *)(v9 + 16 * v14 + 8);
    if (!v4)
      goto LABEL_5;
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (!v4)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v4 + 8) & 3) == 0)
  {
    v5 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
      return v5;
  }
LABEL_5:
  *(_DWORD *)(a3 + 24) += 2;
  v17 = (WebCore::Node *)a3;
  if (*(uint64_t (***)(WebCore::Node *__hidden))a3 == off_1E33A0600)
  {
    v5 = WebCore::createWrapper<WebCore::Attr,WebCore::Attr>((WebCore::JSAttr **)a2, (uint64_t *)&v17, (WebCore::JSDOMGlobalObject *)a3);
    v7 = v17;
    v17 = 0;
    if (v7)
    {
      if (*((_DWORD *)v7 + 6) == 2)
      {
        if ((*((_WORD *)v7 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v7, v6);
      }
      else
      {
        *((_DWORD *)v7 + 6) -= 2;
      }
    }
    return v5;
  }
  result = 380;
  __break(0xC471u);
  return result;
}

unint64_t WebCore::wrap<WebCore::PerformanceNavigation>(uint64_t a1, WTF *a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  unint64_t SlowCase;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  int v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *Allocator;
  unint64_t v51;
  _QWORD *v52;
  WTF *v53;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WTF **)(v4 + 16 * v9);
    if (v10 == a2)
    {
LABEL_6:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v12;
          if (*(_QWORD *)v12)
            return SlowCase;
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WTF **)(v4 + 16 * v9);
        ++v11;
        if (v10 == a2)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a2;
  v14 = *(_QWORD *)(a1 + 3296);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 - 8);
    v16 = ((unint64_t)&WebCore::JSPerformanceNavigation::s_info
         + ~((_QWORD)&WebCore::JSPerformanceNavigation::s_info << 32)) ^ (((unint64_t)&WebCore::JSPerformanceNavigation::s_info
                                                                         + ~((_QWORD)&WebCore::JSPerformanceNavigation::s_info << 32)) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = *(char ***)(v14 + 16 * v19);
    if (v20 == &WebCore::JSPerformanceNavigation::s_info)
    {
LABEL_14:
      v22 = *(_QWORD *)(v14 + 16 * v19 + 8);
      if (v22)
        goto LABEL_16;
    }
    else
    {
      v21 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v21) & v15;
        v20 = *(char ***)(v14 + 16 * v19);
        ++v21;
        if (v20 == &WebCore::JSPerformanceNavigation::s_info)
          goto LABEL_14;
      }
    }
  }
  v23 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSPerformanceNavigationPrototype::createStructure(v23, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSPerformanceNavigationPrototype::create((WebCore::JSPerformanceNavigationPrototype *)v23, Structure, v25, v26);
  v28 = WebCore::JSPerformanceNavigation::createStructure(v23, a1, v27);
  v22 = WebCore::cacheDOMStructure((JSCell *)a1, v28, (uint64_t)&WebCore::JSPerformanceNavigation::s_info);
LABEL_16:
  v29 = *(_QWORD *)(a1 + 56);
  v30 = *(_QWORD *)(v29 + 41456);
  v31 = *(_QWORD *)(v30 + 23536);
  v32 = *(_QWORD **)(v31 + 5928);
  if (v32)
    goto LABEL_36;
  v33 = *(_QWORD *)(v30 + 22648);
  if (__ldaxr((unsigned __int8 *)v33))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v33))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v33);
LABEL_21:
  v35 = *(_QWORD *)(v33 + 2824);
  if (!*(_QWORD *)(v35 + 5928))
  {
    v36 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v53, "IsoSpace T");
    v52 = 0;
    MEMORY[0x19AEA3204](v36, &v53, v29 + 192, v29 + 1872, 32, 8, &v52);
    v38 = (uint64_t)v52;
    v52 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = v53;
    v53 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
        WTF::fastFree(v39, v37);
      else
        --*(_DWORD *)v39;
    }
    v40 = *(_QWORD *)(v35 + 5928);
    *(_QWORD *)(v35 + 5928) = v36;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v42 = *(_QWORD *)(v31 + 5928);
  *(_QWORD *)(v31 + 5928) = v32;
  if (v42)
  {
    v43 = (WTF *)MEMORY[0x19AEA3528](v42, v41);
    WTF::fastFree(v43, v44);
  }
  v45 = __ldxr((unsigned __int8 *)v33);
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v33))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
LABEL_36:
  SlowCase = v32[3];
  if (SlowCase >= v32[4])
  {
    SlowCase = v32[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v51 = *(_QWORD *)(SlowCase + 8) ^ v32[6];
    v32[4] = SlowCase + HIDWORD(v51);
    v32[5] = SlowCase + (int)v51;
  }
  v32[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v22);
  *(_QWORD *)(SlowCase + 24) = a2;
  if (*(_BYTE *)(v29 + 755))
    __dmb(0xAu);
  v46 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE3363B8 & 1) == 0)
  {
    qword_1EE3363B0 = (uint64_t)&off_1E32C9220;
    byte_1EE3363B8 = 1;
  }
  v53 = a2;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  Allocator = *(_QWORD **)(v48 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE3363B0;
  Allocator[2] = v46;
  v52 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v46 + 32), (uint64_t *)&v53, (uint64_t *)&v52);
  if (v52)
    v52[1] = 3;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::PerformanceTiming>(uint64_t a1, WTF *a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  unint64_t SlowCase;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  int v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *Allocator;
  unint64_t v51;
  _QWORD *v52;
  WTF *v53;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WTF **)(v4 + 16 * v9);
    if (v10 == a2)
    {
LABEL_6:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v12;
          if (*(_QWORD *)v12)
            return SlowCase;
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WTF **)(v4 + 16 * v9);
        ++v11;
        if (v10 == a2)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a2;
  v14 = *(_QWORD *)(a1 + 3296);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 - 8);
    v16 = ((unint64_t)&WebCore::JSPerformanceTiming::s_info
         + ~((_QWORD)&WebCore::JSPerformanceTiming::s_info << 32)) ^ (((unint64_t)&WebCore::JSPerformanceTiming::s_info
                                                                     + ~((_QWORD)&WebCore::JSPerformanceTiming::s_info << 32)) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = *(char ***)(v14 + 16 * v19);
    if (v20 == &WebCore::JSPerformanceTiming::s_info)
    {
LABEL_14:
      v22 = *(_QWORD *)(v14 + 16 * v19 + 8);
      if (v22)
        goto LABEL_16;
    }
    else
    {
      v21 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v21) & v15;
        v20 = *(char ***)(v14 + 16 * v19);
        ++v21;
        if (v20 == &WebCore::JSPerformanceTiming::s_info)
          goto LABEL_14;
      }
    }
  }
  v23 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSPerformanceTimingPrototype::createStructure(v23, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSPerformanceTimingPrototype::create((WebCore::JSPerformanceTimingPrototype *)v23, Structure, v25, v26);
  v28 = WebCore::JSPerformanceTiming::createStructure(v23, a1, v27);
  v22 = WebCore::cacheDOMStructure((JSCell *)a1, v28, (uint64_t)&WebCore::JSPerformanceTiming::s_info);
LABEL_16:
  v29 = *(_QWORD *)(a1 + 56);
  v30 = *(_QWORD *)(v29 + 41456);
  v31 = *(_QWORD *)(v30 + 23536);
  v32 = *(_QWORD **)(v31 + 5984);
  if (v32)
    goto LABEL_36;
  v33 = *(_QWORD *)(v30 + 22648);
  if (__ldaxr((unsigned __int8 *)v33))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v33))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v33);
LABEL_21:
  v35 = *(_QWORD *)(v33 + 2824);
  if (!*(_QWORD *)(v35 + 5984))
  {
    v36 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v53, "IsoSpace T");
    v52 = 0;
    MEMORY[0x19AEA3204](v36, &v53, v29 + 192, v29 + 1872, 32, 8, &v52);
    v38 = (uint64_t)v52;
    v52 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = v53;
    v53 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
        WTF::fastFree(v39, v37);
      else
        --*(_DWORD *)v39;
    }
    v40 = *(_QWORD *)(v35 + 5984);
    *(_QWORD *)(v35 + 5984) = v36;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v42 = *(_QWORD *)(v31 + 5984);
  *(_QWORD *)(v31 + 5984) = v32;
  if (v42)
  {
    v43 = (WTF *)MEMORY[0x19AEA3528](v42, v41);
    WTF::fastFree(v43, v44);
  }
  v45 = __ldxr((unsigned __int8 *)v33);
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v33))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
LABEL_36:
  SlowCase = v32[3];
  if (SlowCase >= v32[4])
  {
    SlowCase = v32[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v51 = *(_QWORD *)(SlowCase + 8) ^ v32[6];
    v32[4] = SlowCase + HIDWORD(v51);
    v32[5] = SlowCase + (int)v51;
  }
  v32[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v22);
  *(_QWORD *)(SlowCase + 24) = a2;
  if (*(_BYTE *)(v29 + 755))
    __dmb(0xAu);
  v46 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE3363F8 & 1) == 0)
  {
    qword_1EE3363F0 = (uint64_t)&off_1E32C92B0;
    byte_1EE3363F8 = 1;
  }
  v53 = a2;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  Allocator = *(_QWORD **)(v48 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE3363F0;
  Allocator[2] = v46;
  v52 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v46 + 32), (uint64_t *)&v53, (uint64_t *)&v52);
  if (v52)
    v52[1] = 3;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::DOMPluginArray>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v3 + 48))
  {
    v7 = *(_QWORD *)(v3 + 32);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 - 8);
      v9 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v8 & ((v11 >> 31) ^ v11);
      v13 = *(_QWORD *)(v7 + 16 * v12);
      if (v13 == a3)
      {
LABEL_11:
        v4 = *(_QWORD *)(v7 + 16 * v12 + 8);
        if (v4)
          goto LABEL_3;
      }
      else
      {
        v14 = 1;
        while (v13)
        {
          v12 = ((_DWORD)v12 + v14) & v8;
          v13 = *(_QWORD *)(v7 + 16 * v12);
          ++v14;
          if (v13 == a3)
            goto LABEL_11;
        }
      }
    }
  }
  else
  {
    v4 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
LABEL_3:
      if ((*(_BYTE *)(v4 + 8) & 3) == 0)
      {
        v5 = *(_QWORD *)v4;
        if (*(_QWORD *)v4)
          return v5;
      }
    }
  }
  ++*(_DWORD *)(a3 + 8);
  v15 = a3;
  v5 = WebCore::createWrapper<WebCore::DOMPluginArray,WebCore::DOMPluginArray>(a2, &v15);
  if (v15)
    WTF::RefCounted<WebCore::DOMPluginArray>::deref((_DWORD *)(v15 + 8));
  return v5;
}

unint64_t WebCore::wrap<WebCore::NamedNodeMap>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *Allocator;
  uint64_t v30;
  int v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  void *v39;
  int v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  int v56;
  unint64_t v57;
  _QWORD *v58;
  WTF *v59;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v49 = *(_QWORD *)(v5 + 32);
    if (!v49)
      goto LABEL_5;
    v50 = *(_DWORD *)(v49 - 8);
    v51 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
    v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
    v54 = v50 & ((v53 >> 31) ^ v53);
    v55 = *(uint64_t **)(v49 + 16 * v54);
    if (v55 != a3)
    {
      v56 = 1;
      while (v55)
      {
        v54 = ((_DWORD)v54 + v56) & v50;
        v55 = *(uint64_t **)(v49 + 16 * v54);
        ++v56;
        if (v55 == a3)
          goto LABEL_65;
      }
      goto LABEL_5;
    }
LABEL_65:
    v6 = *(_QWORD *)(v49 + 16 * v54 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *a3;
    if (!*a3)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  *(_DWORD *)(*(_QWORD *)(a3[1] + 8) + 24) += 2;
  v8 = *(_QWORD *)(a2 + 3296);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSNamedNodeMap::s_info + ~((_QWORD)&WebCore::JSNamedNodeMap::s_info << 32)) ^ (((unint64_t)&WebCore::JSNamedNodeMap::s_info + ~((_QWORD)&WebCore::JSNamedNodeMap::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSNamedNodeMap::s_info)
    {
LABEL_7:
      v15 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v15)
        goto LABEL_9;
    }
    else
    {
      v32 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v32) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v32;
        if (v14 == &WebCore::JSNamedNodeMap::s_info)
          goto LABEL_7;
      }
    }
  }
  v16 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSNamedNodeMapPrototype::createStructure(v16, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSNamedNodeMapPrototype::create((WebCore::JSNamedNodeMapPrototype *)v16, Structure, v18, v19);
  v21 = WebCore::JSNamedNodeMap::createStructure(v16, a2, v20);
  v15 = WebCore::cacheDOMStructure((JSCell *)a2, v21, (uint64_t)&WebCore::JSNamedNodeMap::s_info);
LABEL_9:
  v22 = *(_QWORD *)(a2 + 56);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 3800);
  if (v25)
    goto LABEL_10;
  v33 = *(_QWORD *)(v23 + 22648);
  if (__ldaxr((unsigned __int8 *)v33))
  {
    __clrex();
LABEL_32:
    MEMORY[0x19AEA534C](v33);
    goto LABEL_33;
  }
  if (__stxr(1u, (unsigned __int8 *)v33))
    goto LABEL_32;
LABEL_33:
  v35 = *(_QWORD *)(v33 + 2824);
  if (!*(_QWORD *)(v35 + 3800))
  {
    v41 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v58 = 0;
    MEMORY[0x19AEA3204](v41, &v59, v22 + 192, v22 + 1872, 32, 8, &v58);
    v43 = (uint64_t)v58;
    v58 = 0;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    v44 = v59;
    v59 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 1)
        WTF::fastFree(v44, v42);
      else
        --*(_DWORD *)v44;
    }
    v45 = *(_QWORD *)(v35 + 3800);
    *(_QWORD *)(v35 + 3800) = v41;
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v37 = *(_QWORD *)(v24 + 3800);
  *(_QWORD *)(v24 + 3800) = v25;
  if (v37)
  {
    v38 = (WTF *)MEMORY[0x19AEA3528](v37, v36);
    WTF::fastFree(v38, v39);
  }
  v40 = __ldxr((unsigned __int8 *)v33);
  if (v40 != 1)
  {
    __clrex();
    goto LABEL_40;
  }
  if (__stlxr(0, (unsigned __int8 *)v33))
LABEL_40:
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
LABEL_10:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_11:
    v25[3] = SlowCase + 32;
    goto LABEL_12;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v57 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v57);
    v25[5] = SlowCase + (int)v57;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v15);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v26 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336198 & 1) == 0)
  {
    qword_1EE336190 = (uint64_t)&off_1E32BE5F8;
    byte_1EE336198 = 1;
  }
  if (!*(_DWORD *)(v26 + 48))
  {
    if ((SlowCase & 8) != 0)
      v27 = (SlowCase - 112) | 1;
    else
      v27 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v27 & 1) != 0)
      v28 = v27 + 47;
    else
      v28 = *(_QWORD *)v27 + 32;
    Allocator = *(_QWORD **)(v28 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v28 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336190;
    Allocator[2] = v26;
    v30 = *a3;
    *a3 = (uint64_t)Allocator;
    if (!v30)
      return SlowCase;
LABEL_58:
    *(_QWORD *)(v30 + 8) = 3;
    return SlowCase;
  }
  v59 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &qword_1EE336190;
  v48[2] = v26;
  v58 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v26 + 32), (uint64_t *)&v59, (uint64_t *)&v58);
  v30 = (uint64_t)v58;
  if (v58)
    goto LABEL_58;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::MediaSession>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  WebCore::JSMediaSession *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *Allocator;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E335CED0)
  {
    __break(0xC471u);
    JUMPOUT(0x1945825ACLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSMediaSession::s_info + ~((_QWORD)&WebCore::JSMediaSession::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaSession::s_info + ~((_QWORD)&WebCore::JSMediaSession::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSMediaSession::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSMediaSession::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSMediaSessionPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSMediaSessionPrototype::create((WebCore::JSMediaSessionPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSMediaSession::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSMediaSession::s_info);
LABEL_17:
  v30 = *(WebCore::JSMediaSession **)(a2 + 56);
  v31 = (_QWORD *)WebCore::JSMediaSession::subspaceForImpl(v30, (JSC::VM *)a2);
  SlowCase = v31[3];
  if (SlowCase >= v31[4])
  {
    SlowCase = v31[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_19;
    }
    v37 = *(_QWORD *)(SlowCase + 8) ^ v31[6];
    v31[4] = SlowCase + HIDWORD(v37);
    v31[5] = SlowCase + (int)v37;
  }
  v31[3] = SlowCase + 32;
LABEL_19:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*((_BYTE *)v30 + 755))
    __dmb(0xAu);
  v32 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336010 & 1) == 0)
  {
    qword_1EE336008 = (uint64_t)&off_1E32B3620;
    byte_1EE336010 = 1;
  }
  v39 = a3;
  if ((SlowCase & 8) != 0)
    v33 = (SlowCase - 112) | 1;
  else
    v33 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v33 & 1) != 0)
    v34 = v33 + 47;
  else
    v34 = *(_QWORD *)v33 + 32;
  Allocator = *(_QWORD **)(v34 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v34 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336008;
  Allocator[2] = v32;
  v38 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v32 + 32), &v39, (uint64_t *)&v38);
  if (v38)
    v38[1] = 3;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::Permissions>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSPermissions::s_info + ~((_QWORD)&WebCore::JSPermissions::s_info << 32)) ^ (((unint64_t)&WebCore::JSPermissions::s_info + ~((_QWORD)&WebCore::JSPermissions::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSPermissions::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSPermissions::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSPermissionsPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSPermissionsPrototype::create((WebCore::JSPermissionsPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSPermissions::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSPermissions::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 1488);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 1488))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 1488);
    *(_QWORD *)(v36 + 1488) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 1488);
  *(_QWORD *)(v32 + 1488) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336428 & 1) == 0)
  {
    qword_1EE336420 = (uint64_t)&off_1E32C9340;
    byte_1EE336428 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336420;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::toJS<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>,WTF::AtomString>(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned __int8 *v5;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return *(_QWORD *)(a1 + 41968);
  v2 = *(_DWORD *)(a2 + 4);
  if (!v2)
    return *(_QWORD *)(a1 + 41968);
  if (v2 == 1)
  {
    v5 = *(unsigned __int8 **)(a2 + 8);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v6 = *v5;
    }
    else
    {
      v7 = *(unsigned __int16 *)v5;
      if (v7 > 0xFF)
        goto LABEL_4;
      v6 = v7;
    }
    return *(_QWORD *)(a1 + 8 * v6 + 42216);
  }
LABEL_4:
  v3 = *(_QWORD *)(a1 + 64760);
  if (!v3 || *(_QWORD *)(v3 + 8) != a2)
    return JSC::jsStringWithCacheSlowCase();
  return v3;
}

uint64_t WebCore::Page::invalidateStylesForAllLinks(WebCore::Page *this)
{
  uint64_t v2;
  uint64_t v4;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E3400E80;
  v4 = v2;
  WebCore::Page::forEachDocument((uint64_t)this, &v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebCore::Page::addRelevantUnpaintedObject(WebCore::Page *this, const WebCore::RenderObject *a2, const WebCore::LayoutRect *a3)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;
  int v22;
  void *v23;
  __int128 v24;
  uint64_t v25;

  if (*((_BYTE *)this + 768) && (*((_WORD *)this + 330) & 4) != 0)
  {
    WebCore::RenderView::viewRect(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8)
                                                                                  + 40)
                                                                      + 8)
                                                          + 1944));
    v7 = ((unint64_t)((v6 << 6) + 0x3FFFC2C000) >> 7) & 0x7FFFFFFF;
    if ((int)v6 <= 62720)
      LODWORD(v7) = 0;
    v8 = (((v7 & 0x20) + 32) >> 6) + (v7 >> 6);
    if (v8 >> 25)
      v9 = 0x7FFFFFFF;
    else
      v9 = v8 << 6;
    LODWORD(v24) = v9;
    *(_QWORD *)((char *)&v24 + 4) = 0xF50000000000;
    HIDWORD(v24) = 83200;
    if (WebCore::LayoutRect::intersects(a3, (const WebCore::LayoutRect *)&v24))
    {
      WTF::WeakHashSet<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderObject>((uint64_t)&v24, (_DWORD *)this + 170, (uint64_t)a2);
      v10 = HIDWORD(*(_QWORD *)a3);
      v11 = *(_QWORD *)a3 + 63;
      if ((int)*(_QWORD *)a3 >= 0)
        v11 = *(_QWORD *)a3;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)a3 - (v11 & 0xFFFFFFC0);
      v14 = (int)v10 / 64;
      v15 = v10 - (v11 & 0xFFFFFFC0);
      v17 = *((_DWORD *)a3 + 2);
      v16 = *((_DWORD *)a3 + 3);
      v18 = __OFADD__(v13, v17);
      v19 = v13 + v17;
      if (v18)
        v19 = (v13 >> 31) + 0x7FFFFFFF;
      v18 = __OFADD__(v15, v16);
      v20 = v15 + v16;
      if (v18)
        v20 = (v15 >> 31) + 0x7FFFFFFF;
      v21 = v15 + 32;
      v22 = v13 + 32;
      *(_QWORD *)&v24 = (v12 + (v22 >> 6)) | ((unint64_t)(v14 + (v21 >> 6)) << 32);
      *((_QWORD *)&v24 + 1) = (v19 / 64 - (v22 >> 6) + ((int)(v19 - (v14 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(v20 / 64 - (v21 >> 6) + ((int)(v20 - (v14 & 0xFFFFFFC0) + 32) >> 6)) << 32);
      v25 = 0;
      WebCore::Region::unite((WebCore::Page *)((char *)this + 744), (const WebCore::Region *)&v24);
      WebCore::Region::~Region((WebCore::Region *)&v24, v23);
    }
  }
}

uint64_t WebCore::Page::unmarkAllTextMatches(WebCore::Page *this)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34007A0;
  v11 = (uint64_t)v2;
  v3 = *((_QWORD *)this + 20);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  WebCore::Page::forEachDocumentFromMainFrame(v3, &v11);
  do
  {
    v6 = __ldaxr(v4);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v4));
  if (!v7)
  {
    atomic_store(1u, v4);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = off_1E31FE290;
    v9[1] = v4;
    v12 = v9;
    WTF::ensureOnMainThread();
    v10 = v12;
    v12 = 0;
    if (v10)
      (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  }
  result = v11;
  if (v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

uint64_t WebCore::Page::pluginData(WebCore::Page *this)
{
  uint64_t result;
  WebCore::PluginData *v3;
  WTF::StringImpl *v4;
  WebCore::PluginData *v5;
  WebCore::PluginData *v6;

  result = *((_QWORD *)this + 28);
  if (!result)
  {
    v3 = (WebCore::PluginData *)WTF::fastMalloc((WTF *)0xB8);
    WebCore::PluginData::PluginData(v3, this);
    v6 = 0;
    v5 = (WebCore::PluginData *)*((_QWORD *)this + 28);
    *((_QWORD *)this + 28) = v3;
    if (v5)
      WTF::RefCounted<WebCore::PluginData>::deref(v5, v4);
    WTF::Ref<WebCore::PluginData,WTF::RawPtrTraits<WebCore::PluginData>,WTF::DefaultRefDerefTraits<WebCore::PluginData>>::~Ref(&v6, v4);
    return *((_QWORD *)this + 28);
  }
  return result;
}

WebCore::Node *WebCore::Node::notifyMutationObserversNodeWillDetach(WebCore::Node *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3364))
  {
    v1 = *((_QWORD *)this + 4);
    if (v1)
    {
      while (1)
      {
        if ((*(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFLL) != 0)
        {
          v2 = *(_QWORD *)((*(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFLL) + 8);
          if (v2)
          {
            v3 = *(unsigned int *)(v2 + 12);
            if (!(_DWORD)v3)
              break;
            v21 = v1;
            v22 = this;
            v15 = *(uint64_t **)v2;
            v16 = 8 * v3;
            do
            {
              v17 = *v15++;
              WebCore::MutationObserverRegistration::observedSubtreeNodeWillDetach(v17, v22);
              v16 -= 8;
            }
            while (v16);
            v1 = v21;
            this = v22;
            if ((*(_QWORD *)(v21 + 72) & 0xFFFFFFFFFFFFLL) != 0)
            {
              v2 = *(_QWORD *)((*(_QWORD *)(v21 + 72) & 0xFFFFFFFFFFFFLL) + 8);
              if (v2)
                break;
            }
          }
        }
LABEL_6:
        v1 = *(_QWORD *)(v1 + 32);
        if (!v1)
          return this;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v4 = (_QWORD *)(v2 + 16);
      v5 = v6;
      if (v6)
      {
        v8 = *(unsigned int *)(v5 - 4);
        v9 = v5 + 8 * v8;
        if (*(_DWORD *)(v5 - 12))
        {
          v7 = v5;
          if ((_DWORD)v8)
          {
            v13 = 8 * v8;
            v7 = v5;
            while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
            {
              v7 += 8;
              v13 -= 8;
              if (!v13)
              {
                v7 = v9;
                goto LABEL_12;
              }
            }
          }
          goto LABEL_12;
        }
        v7 = v5 + 8 * v8;
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
      v9 = v5 + 8 * v8;
LABEL_12:
      v24 = v4;
      v25 = v7;
      v26 = v9;
      if (v5)
      {
        v11 = *(unsigned int *)(v5 - 4);
        v10 = v5 + 8 * v11;
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
      v27 = v10;
      v28 = v5 + 8 * v11;
      if (v7 != v10)
      {
        v14 = v7;
        while (!*(_QWORD *)(*(_QWORD *)v14 + 8))
        {
          v20 = v14 + 8;
          v25 = v20;
          v14 = v9;
          if (v20 != v9)
          {
            v14 = v20;
            while ((unint64_t)(*(_QWORD *)v14 + 1) <= 1)
            {
              v14 += 8;
              v25 = v14;
              if (v14 == v9)
              {
                v14 = v9;
                break;
              }
            }
          }
          v7 = v10;
          if (v14 == v10)
            goto LABEL_15;
        }
        v7 = v14;
      }
LABEL_15:
      v12 = *v4;
      if (v12)
        v12 += 8 * *(unsigned int *)(v12 - 4);
      if (v7 != v12)
      {
        do
        {
          v23 = this;
          v18 = v1;
          v19 = v12;
          WebCore::MutationObserverRegistration::observedSubtreeNodeWillDetach(*(_QWORD *)(*(_QWORD *)v7 + 8), this);
          WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v24);
          v12 = v19;
          v1 = v18;
          this = v23;
          v7 = v25;
        }
        while (v25 != v19);
      }
      goto LABEL_6;
    }
  }
  return this;
}

void WebCore::Font::DerivedFonts::~DerivedFonts(WebCore::Font::DerivedFonts *this)
{
  WebCore::Font *v2;
  WebCore::Font *v3;
  WebCore::Font *v4;
  WebCore::Font *v5;
  WebCore::Font *v6;
  WebCore::Font *v7;
  WebCore::Font *v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  void *v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  void *v16;
  WTF *v17;
  void *v18;
  WTF *v19;
  void *v20;
  WTF *v21;
  void *v22;

  v2 = (WebCore::Font *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      WebCore::Font::~Font(v2);
      WTF::fastFree(v9, v10);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  v3 = (WebCore::Font *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::Font::~Font(v3);
      WTF::fastFree(v11, v12);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WebCore::Font *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::Font::~Font(v4);
      WTF::fastFree(v13, v14);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (WebCore::Font *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::Font::~Font(v5);
      WTF::fastFree(v15, v16);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  v6 = (WebCore::Font *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::Font::~Font(v6);
      WTF::fastFree(v17, v18);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  v7 = (WebCore::Font *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::Font::~Font(v7);
      WTF::fastFree(v19, v20);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  v8 = *(WebCore::Font **)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::Font::~Font(v8);
      WTF::fastFree(v21, v22);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
}

unint64_t WebCore::JSUserMessageHandlersNamespacePrototype::create(WebCore::JSUserMessageHandlersNamespacePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSUserMessageHandlersNamespace::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSUserMessageHandlersNamespacePrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::JSUserMessageHandlersNamespacePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets(WebCore::WidgetHierarchyUpdatesSuspensionScope *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::Widget **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  WTF *v9;
  WebCore::Widget **v10;
  WebCore::Widget *v11;
  uint64_t v12;
  WebCore::LocalFrameView *v13;
  WebCore::Widget *v14;
  WebCore::LocalFrameView *v15;
  char v16;
  int v17;

  if (_MergedGlobals_253 == 1)
  {
    while (1)
    {
      v2 = qword_1ECE84258;
      if (!qword_1ECE84258 || !*(_DWORD *)(qword_1ECE84258 - 12))
        goto LABEL_48;
      qword_1ECE84258 = 0;
      v3 = *(unsigned int *)(v2 - 4);
      v4 = (WebCore::Widget **)v2;
      if ((_DWORD)v3)
      {
        v5 = 16 * v3;
        v4 = (WebCore::Widget **)v2;
        while ((unint64_t)*v4 + 1 <= 1)
        {
          v4 += 2;
          v5 -= 16;
          if (!v5)
            goto LABEL_8;
        }
      }
      v10 = (WebCore::Widget **)(v2 + 16 * v3);
      if (v10 != v4)
        break;
LABEL_8:
      v6 = *(unsigned int *)(v2 - 4);
      if ((_DWORD)v6)
      {
        v7 = v2;
        do
        {
          v8 = *(_DWORD **)v7;
          if (*(_QWORD *)v7 != -1)
          {
            v9 = *(WTF **)(v7 + 8);
            *(_QWORD *)(v7 + 8) = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 1)
              {
                WTF::fastFree(v9, a2);
                v8 = *(_DWORD **)v7;
              }
              else
              {
                --*(_DWORD *)v9;
              }
            }
            *(_QWORD *)v7 = 0;
            if (v8)
            {
              if (v8[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
              else
                --v8[2];
            }
          }
          v7 += 16;
          --v6;
        }
        while (v6);
      }
      WTF::fastFree((WTF *)(v2 - 16), a2);
      if ((_MergedGlobals_253 & 1) == 0)
        goto LABEL_47;
    }
    v11 = *v4;
LABEL_25:
    v12 = *((_QWORD *)v11 + 4);
    if (v12)
      v13 = *(WebCore::LocalFrameView **)(v12 + 8);
    else
      v13 = 0;
    v14 = v4[1];
    if (v14)
    {
      v15 = (WebCore::LocalFrameView *)*((_QWORD *)v14 + 1);
      if (v15)
      {
        v16 = 0;
        ++*((_DWORD *)v15 + 34);
        goto LABEL_30;
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
LABEL_30:
    if (v15 != v13)
    {
      if (v13)
        (*(void (**)(WebCore::LocalFrameView *, WebCore::Widget *))(*(_QWORD *)v13 + 336))(v13, v11);
      if (v15)
        WebCore::LocalFrameView::addChild(v15, v11);
    }
    if ((v16 & 1) == 0)
    {
      v17 = *((_DWORD *)v15 + 34);
      if (!v17)
      {
        __break(0xC471u);
        JUMPOUT(0x194583698);
      }
      *((_DWORD *)v15 + 34) = v17 - 1;
    }
    while (1)
    {
      v4 += 2;
      if (v4 == v10)
        goto LABEL_8;
      v11 = *v4;
      if ((unint64_t)*v4 + 1 > 1)
      {
        if (v4 != v10)
          goto LABEL_25;
        goto LABEL_8;
      }
    }
  }
LABEL_47:
  qword_1ECE84258 = 0;
  _MergedGlobals_253 = 1;
LABEL_48:
  WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove = 0;
}

unint64_t WebCore::JSIntersectionObserverEntryPrototype::create(WebCore::JSIntersectionObserverEntryPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSIntersectionObserverEntryPrototype::finishCreation((WebCore::JSIntersectionObserverEntryPrototype *)v6, this);
  return v6;
}

WTF::StringImpl *WebCore::JSIntersectionObserverEntryPrototype::finishCreation(WebCore::JSIntersectionObserverEntryPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(a2, (uint64_t)&WebCore::JSIntersectionObserverEntry::s_info, (uint64_t)&WebCore::JSIntersectionObserverEntryPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WebCore::LinkPreloadDefaultResourceClient::LinkPreloadDefaultResourceClient(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::CachedResourceClient *v10;
  WebCore::CachedResource *v11;
  void *v14;
  WTF *v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;

  *a1 = off_1E33F61B0;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
    goto LABEL_2;
  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = a2;
  v15 = *(WTF **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  if (!v15)
    goto LABEL_2;
  if (*(_DWORD *)v15 != 1)
  {
    --*(_DWORD *)v15;
LABEL_2:
    ++*(_DWORD *)v5;
    goto LABEL_3;
  }
  WTF::fastFree(v15, v14);
  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
    goto LABEL_2;
LABEL_3:
  a1[1] = v5;
  v6 = *(_QWORD *)(a3 + 8);
  if (v6)
    goto LABEL_30;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = a3;
  v17 = *(unsigned int **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v6;
  if (!v17)
    goto LABEL_30;
  do
  {
    v18 = __ldaxr(v17);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v17));
  if (!v19)
  {
    atomic_store(1u, v17);
    WTF::fastFree((WTF *)v17, v16);
  }
  v6 = *(_QWORD *)(a3 + 8);
  if (v6)
  {
LABEL_30:
    do
      v7 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v7 + 1, (unsigned int *)v6));
    a1[2] = v6;
    v8 = *(_QWORD *)(v6 + 8);
    if (v8)
    {
      v21 = a1 + 2;
      ++*(_DWORD *)(v8 + 548);
      v9 = *(_QWORD *)(v8 + 488);
      if (v9 && *(_QWORD *)(v9 + 8))
      {
        WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v8 + 464), (uint64_t *)&v21, (uint64_t)&v20);
        v6 = a1[2];
        a1[3] = &unk_1E33F6318;
        v10 = (WebCore::CachedResourceClient *)(a1 + 3);
        a1[4] = 0;
        *a1 = off_1E33F62E0;
        if (!v6)
        {
          v11 = 0;
          goto LABEL_10;
        }
      }
      else
      {
        a1[3] = &unk_1E33F6318;
        v10 = (WebCore::CachedResourceClient *)(a1 + 3);
        a1[4] = 0;
        *a1 = off_1E33F62E0;
      }
      v11 = *(WebCore::CachedResource **)(v6 + 8);
      goto LABEL_10;
    }
    v11 = 0;
  }
  else
  {
    v11 = 0;
    a1[2] = 0;
  }
  a1[3] = &unk_1E33F6318;
  v10 = (WebCore::CachedResourceClient *)(a1 + 3);
  a1[4] = 0;
  *a1 = off_1E33F62E0;
LABEL_10:
  if (WebCore::CachedResource::addClientToSet(v11, v10))
    (*(void (**)(WebCore::CachedResource *, WebCore::CachedResourceClient *))(*(_QWORD *)v11 + 88))(v11, v10);
  return a1;
}

uint64_t *WebCore::CrossOriginPreflightResultCache::singleton(WebCore::CrossOriginPreflightResultCache *this)
{
  {
    WebCore::CrossOriginPreflightResultCache::singleton(void)::cache = 0;
  }
  return &WebCore::CrossOriginPreflightResultCache::singleton(void)::cache;
}

uint64_t WebCore::CrossOriginPreflightResultCache::canSkipPreflight(WTF::MonotonicTime *a1, WTF::StringImpl *a2, WTF::StringImpl **a3, WTF::StringImpl **a4, int a5, WTF::StringImpl **a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int i;
  const WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  char v26;
  const WTF::StringImpl *v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  const WTF::StringImpl *v33;
  double v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int k;
  int v44;
  WTF *v45;
  int j;
  int v47;
  WTF *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF *v54;
  uint64_t v55;
  WTF::StringImpl **v56;
  uint64_t v57;
  int v58;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v64;
  WTF::StringImpl **v65;
  WTF::StringImpl *v66;
  uint64_t *v68;
  WTF::StringImpl *v71;
  uint64_t v72;

  v7 = a7;
  v9 = (uint64_t *)a1;
  v10 = *a3;
  if (*a3)
    *(_DWORD *)v10 += 2;
  v11 = *a4;
  if (*a4)
    *(_DWORD *)v11 += 2;
  v12 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v13 = *(_DWORD *)(v12 - 8);
    v14 = *((_DWORD *)v10 + 4);
    if (v14 < 0x100)
      v15 = WTF::StringImpl::hashSlowCase(v10);
    else
      v15 = v14 >> 8;
    v17 = *((_DWORD *)v11 + 4);
    v68 = v9;
    if (v17 < 0x100)
      v18 = WTF::StringImpl::hashSlowCase(v11);
    else
      v18 = v17 >> 8;
    v19 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = v13 & ((0xD7862706ELL
                * (unint64_t)(277951225 * ((v21 >> 31) ^ v21)
                                   + 95187966
                                   * ((0xD7862706ELL
                                                   * (unint64_t)(277951225 * v15 + 95187966 * v18)) >> 4))) >> 4);
    for (i = 1; ; ++i)
    {
      v16 = v12 + ((unint64_t)v22 << 6);
      v71 = 0;
      a1 = (WTF::MonotonicTime *)WTF::URL::invalidate((WTF::URL *)&v71);
      v25 = v71;
      if (*(_QWORD *)v16 || (a1 = (WTF::MonotonicTime *)WTF::equal(*(WTF **)(v16 + 8), 0, v24), !(_DWORD)a1))
      {
        v26 = 0;
      }
      else
      {
        a1 = (WTF::MonotonicTime *)WTF::equal(*(WTF **)(v16 + 16), v25, v24);
        v26 = (char)a1;
      }
      if (!v25)
        goto LABEL_21;
      if (*(_DWORD *)v25 != 2)
        break;
      a1 = (WTF::MonotonicTime *)WTF::StringImpl::destroy(v25, a2);
      if ((v26 & 1) != 0)
      {
LABEL_31:
        v7 = a7;
        v9 = v68;
        v29 = a6;
        if (*v68)
          v16 = *v68 + ((unint64_t)*(unsigned int *)(*v68 - 4) << 6);
        else
          v16 = 0;
        goto LABEL_36;
      }
LABEL_22:
      if (*(_QWORD *)v16 != -1 && *(_QWORD *)v16 == (_QWORD)a2)
      {
        if (WTF::equal(*(WTF **)(v16 + 8), v10, v24))
        {
          a1 = (WTF::MonotonicTime *)WTF::equal(*(WTF **)(v16 + 16), v11, v28);
          if ((a1 & 1) != 0)
          {
            v7 = a7;
            v9 = v68;
            goto LABEL_35;
          }
        }
      }
      v22 = (v22 + i) & v13;
    }
    *(_DWORD *)v25 -= 2;
LABEL_21:
    if ((v26 & 1) != 0)
      goto LABEL_31;
    goto LABEL_22;
  }
  v16 = 0;
LABEL_35:
  v29 = a6;
LABEL_36:
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      a1 = (WTF::MonotonicTime *)WTF::StringImpl::destroy(v11, a2);
      if (!v10)
        goto LABEL_42;
      goto LABEL_40;
    }
    *(_DWORD *)v11 -= 2;
  }
  if (!v10)
    goto LABEL_42;
LABEL_40:
  if (*(_DWORD *)v10 == 2)
    a1 = (WTF::MonotonicTime *)WTF::StringImpl::destroy(v10, a2);
  else
    *(_DWORD *)v10 -= 2;
LABEL_42:
  v30 = *v9;
  if (*v9)
    v30 += (unint64_t)*(unsigned int *)(v30 - 4) << 6;
  if (v30 == v16)
    return 0;
  v31 = *(_QWORD *)(v16 + 56);
  WTF::MonotonicTime::now(a1);
  if (*(double *)v31 >= v34)
  {
    if (a5 == 1)
    {
      if (!*(_BYTE *)(v31 + 8))
        goto LABEL_83;
      v35 = *(_QWORD *)(v31 + 16);
      if (v35)
      {
        v36 = *(_DWORD *)(v35 - 8);
        v37 = *((_DWORD *)*v29 + 4);
        v38 = v37 < 0x100 ? WTF::StringImpl::hashSlowCase(*v29) : v37 >> 8;
        for (j = 0; ; v38 = j + v47)
        {
          v47 = v38 & v36;
          v48 = *(WTF **)(v35 + 8 * (v38 & v36));
          if (!v48)
            break;
          if (v48 != (WTF *)-1 && (WTF::equal(v48, *v29, v33) & 1) != 0)
            goto LABEL_79;
          ++j;
        }
        v50 = *(_QWORD *)(v31 + 16);
      }
      else
      {
        v50 = 0;
      }
      v71 = (WTF::StringImpl *)"*";
      v72 = 2;
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::contains<WTF::HashSetTranslatorAdapter<WTF::HashTranslatorASCIILiteral>,WTF::ASCIILiteral>(v50, (uint64_t *)&v71);
      if ((MEMORY[0x19AEA53F4](*v29, "GET", 3) & 1) == 0
        && !MEMORY[0x19AEA53F4](*v29, "HEAD", 4)
        && !MEMORY[0x19AEA53F4](*v29, "POST", 4))
      {
        goto LABEL_83;
      }
    }
    else
    {
      v39 = *(_QWORD *)(v31 + 16);
      if (v39)
      {
        v40 = *(_DWORD *)(v39 - 8);
        v41 = *((_DWORD *)*v29 + 4);
        if (v41 < 0x100)
          v42 = WTF::StringImpl::hashSlowCase(*v29);
        else
          v42 = v41 >> 8;
        for (k = 0; ; v42 = k + v44)
        {
          v44 = v42 & v40;
          v45 = *(WTF **)(v39 + 8 * (v42 & v40));
          if (!v45)
            break;
          if (v45 != (WTF *)-1 && (WTF::equal(v45, *v29, v33) & 1) != 0)
            goto LABEL_79;
          ++k;
        }
        v49 = *(_QWORD *)(v31 + 16);
      }
      else
      {
        v49 = 0;
      }
      v71 = (WTF::StringImpl *)"*";
      v72 = 2;
      if (!WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::contains<WTF::HashSetTranslatorAdapter<WTF::HashTranslatorASCIILiteral>,WTF::ASCIILiteral>(v49, (uint64_t *)&v71)&& (MEMORY[0x19AEA53F4](*a6, "GET", 3) & 1) == 0&& !MEMORY[0x19AEA53F4](*a6, "HEAD", 4)&& (MEMORY[0x19AEA53F4](*a6, "POST", 4) & 1) == 0)
      {
        goto LABEL_83;
      }
    }
LABEL_79:
    WebCore::CrossOriginPreflightResultCacheItem::validateCrossOriginHeaders((uint64_t)&v71, v31, v7, a5);
    if (!(_BYTE)v72)
      return 1;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
        WTF::StringImpl::destroy(v71, v32);
      else
        *(_DWORD *)v71 -= 2;
    }
  }
LABEL_83:
  if (*v9)
  {
    v51 = *v9 + ((unint64_t)*(unsigned int *)(*v9 - 4) << 6);
    if (v51 == v16)
      return 0;
LABEL_88:
    if (v51 != v16)
    {
      v52 = *(WTF::StringImpl **)(v16 + 16);
      *(_QWORD *)(v16 + 16) = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, v32);
        else
          *(_DWORD *)v52 -= 2;
      }
      v53 = *(WTF::StringImpl **)(v16 + 8);
      *(_QWORD *)(v16 + 8) = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
          WTF::StringImpl::destroy(v53, v32);
        else
          *(_DWORD *)v53 -= 2;
      }
      *(_QWORD *)v16 = -1;
      v54 = *(WTF **)(v16 + 56);
      *(_QWORD *)(v16 + 56) = 0;
      if (v54)
      {
        v55 = *((_QWORD *)v54 + 3);
        if (v55)
        {
          v64 = *(unsigned int *)(v55 - 4);
          if ((_DWORD)v64)
          {
            v65 = (WTF::StringImpl **)*((_QWORD *)v54 + 3);
            do
            {
              v66 = *v65;
              if (*v65 != (WTF::StringImpl *)-1)
              {
                *v65 = 0;
                if (v66)
                {
                  if (*(_DWORD *)v66 == 2)
                    WTF::StringImpl::destroy(v66, v32);
                  else
                    *(_DWORD *)v66 -= 2;
                }
              }
              ++v65;
              --v64;
            }
            while (v64);
          }
          WTF::fastFree((WTF *)(v55 - 16), v32);
        }
        v56 = (WTF::StringImpl **)*((_QWORD *)v54 + 2);
        if (v56)
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v56, v32);
        WTF::fastFree(v54, v32);
      }
      ++*(_DWORD *)(*v9 - 16);
      v57 = *v9;
      if (*v9)
        v58 = *(_DWORD *)(v57 - 12) - 1;
      else
        v58 = -1;
      *(_DWORD *)(v57 - 12) = v58;
      v60 = *v9;
      if (*v9)
      {
        v61 = 6 * *(_DWORD *)(v60 - 12);
        v62 = *(_DWORD *)(v60 - 4);
        if (v61 < v62 && v62 >= 9)
          WTF::HashTable<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,WTF::KeyValuePair<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>>>,WTF::DefaultHash<std::tuple<PAL::SessionID,WTF::String,WTF::URL>>,WTF::HashMap<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>,WTF::DefaultHash<std::tuple<PAL::SessionID,WTF::String,WTF::URL>>,WTF::HashTraits<std::tuple<PAL::SessionID,WTF::String,WTF::URL>>,WTF::HashTraits<std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<PAL::SessionID,WTF::String,WTF::URL>>>::rehash(v9, v62 >> 1, 0);
      }
    }
    return 0;
  }
  if (v16)
  {
    v51 = 0;
    goto LABEL_88;
  }
  return 0;
}

uint64_t WebCore::JSUserMessageHandlersNamespace::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSIntersectionObserverCallback::visitJSFunction(uint64_t a1, uint64_t a2)
{
  return WebCore::JSCallbackData::visitJSFunction<JSC::SlotVisitor>(*(_QWORD *)(a1 + 24), a2);
}

{
  uint64_t *v3;
  uint64_t v4;

  v3 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 16);
  if (!v3 || (v3[1] & 3) != 0)
    v4 = 0;
  else
    v4 = *v3;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v4);
}

unint64_t WebCore::JSHTMLTextAreaElementPrototype::create(WebCore::JSHTMLTextAreaElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  int *v9;
  uint64_t i;
  char *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  JSC::Structure *v20;
  int v21;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  WTF::StringImpl *v27[6];
  int v28;
  int v29;
  JSC::Structure *v30;
  int v31;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v26 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v26);
    *((_QWORD *)this + 4865) = SlowCase + (int)v26;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v9 = (int *)((char *)this + 93124);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  for (i = 0; i != 155; i += 5)
  {
    v11 = (&WebCore::JSHTMLTextAreaElementPrototypeTableValues)[i + 1];
    if (v11)
    {
      if (v11 == (char *)2)
        JSC::SmallStrings::singleCharacterStringRep((WebCore::JSHTMLTextAreaElementPrototype *)((char *)this + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v12 = v27[0];
      JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSHTMLTextAreaElement::s_info, (unint64_t *)v27, (uint64_t)&(&WebCore::JSHTMLTextAreaElementPrototypeTableValues)[i], (unsigned __int8 *)SlowCase);
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v13);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
  }
  v14 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v14 && *(_BYTE *)(v14 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458447CLL);
  }
  v15 = v14 - 192;
  if (!v14)
    v15 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v15 + 680) + 680) & 0x20000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v23 = v27[0];
    v24 = *v9;
    *v9 = 1;
    LODWORD(v27[0]) = -1;
    WORD2(v27[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v24;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v25);
      else
        *(_DWORD *)v23 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v16 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v18 = JSC::JSString::create((uint64_t)this, v27);
  v19 = v27[0];
  v27[0] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v31 = *(_DWORD *)SlowCase;
  v30 = v20;
  v21 = JSC::Structure::outOfLineCapacity(v20);
  v28 = 0;
  v29 = v21;
  v27[0] = (WTF::StringImpl *)&v29;
  v27[1] = (WTF::StringImpl *)SlowCase;
  v27[2] = this;
  v27[3] = (WTF::StringImpl *)&v31;
  v27[4] = (WTF::StringImpl *)&v30;
  v27[5] = (WTF::StringImpl *)&v28;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v20, this, v16, 6, (uint64_t)v27);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v28, v18);
  *((_DWORD *)v20 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::JSHTMLTextAreaElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void WebCore::ParentalControlsContentFilter::~ParentalControlsContentFilter(WebCore::ParentalControlsContentFilter *this, void *a2)
{
  const void *v3;
  const void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree(this, a2);
}

{
  const void *v3;
  const void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

_QWORD *WebCore::ParentalControlsContentFilter::create@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  result[1] = 0;
  result[2] = 0;
  *((_DWORD *)result + 4) = 1;
  *result = off_1E3340028;
  result[3] = 0;
  result[4] = 0;
  *a1 = result;
  return result;
}

void WebCore::NetworkExtensionContentFilter::~NetworkExtensionContentFilter(WebCore::NetworkExtensionContentFilter *this, void *a2)
{
  const void *v3;
  const void *v4;
  void *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (void *)*((_QWORD *)this + 3);
  if (v5)

  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree(this, a2);
}

{
  const void *v3;
  const void *v4;
  void *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (void *)*((_QWORD *)this + 3);
  if (v5)

  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

_QWORD *WebCore::NetworkExtensionContentFilter::create@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  result[2] = 0;
  result[3] = 0;
  *((_DWORD *)result + 4) = 1;
  *result = off_1E333FFD0;
  result[1] = 0;
  result[4] = 0;
  result[5] = 0;
  *a1 = result;
  return result;
}

void WebCore::NetworkExtensionContentFilter::willSendRequest(WebCore::NetworkExtensionContentFilter *this, WebCore::ResourceRequest *a2, const WebCore::ResourceResponse *a3)
{
  const WTF::URL *v6;
  void *v7;
  CFTypeRef v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  const void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  _QWORD v16[7];
  const void *v17;
  __int16 v18;
  char v19;

  if ((*((_BYTE *)a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  if ((*((_BYTE *)a2 + 8) & 2) != 0 && (objc_msgSend(MEMORY[0x1E0CD0800], "filterRequired") & 1) != 0)
  {
    WebCore::NetworkExtensionContentFilter::initialize(this, v6);
    if ((*((_BYTE *)a3 + 138) & 1) != 0
      || (WebCore::NetworkExtensionContentFilter::responseReceived(this, a3), *((_DWORD *)this + 4) == 1))
    {
      v18 = 0;
      v19 = 0;
      v17 = 0;
      v7 = (void *)*((_QWORD *)this + 5);
      v8 = WebCore::ResourceRequest::nsURLRequest(a2, 0);
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3321888768;
      v16[2] = ___ZN7WebCore29NetworkExtensionContentFilter15willSendRequestERNS_15ResourceRequestERKNS_16ResourceResponseE_block_invoke;
      v16[3] = &__block_descriptor_56_e8_32c115_ZTSKZN7WebCore29NetworkExtensionContentFilter15willSendRequestERNS_15ResourceRequestERKNS_16ResourceResponseEE3__0_e25_v24__0q8__NSDictionary_16l;
      v16[4] = this;
      v16[5] = &v17;
      v16[6] = &v18;
      objc_msgSend(v7, "willSendRequest:decisionHandler:", v8, v16);
      v14 = (WTF::StringImpl *)0x7FF0000000000000;
      v15 = 0;
      WTF::BinarySemaphore::waitUntil();
      if (v17)
      {
        MEMORY[0x19AEA5508](&v13);
        MEMORY[0x19AEA52D4](&v14, &v13, 0);
        v10 = v13;
        v13 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v9);
          else
            *(_DWORD *)v10 -= 2;
        }
        if ((v15 & 1) != 0)
          WebCore::ResourceRequestBase::setURL(a2, (const WTF::URL *)&v14, 0);
        v11 = v14;
        v14 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v9);
          else
            *(_DWORD *)v11 -= 2;
        }
        v12 = v17;
        v17 = 0;
        if (v12)
          CFRelease(v12);
      }
    }
  }
  else
  {
    *((_DWORD *)this + 4) = 2;
  }
}

void sub_19458494C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  uint64_t v11;
  const void *v13;

  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  v13 = *(const void **)(v11 - 48);
  *(_QWORD *)(v11 - 48) = 0;
  if (v13)
    CFRelease(v13);
  _Unwind_Resume(exception_object);
}

WebCore::MutationObserver **WebCore::MutationObserverInterestGroup::createIfNeeded@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  void *v7;
  WebCore::MutationObserver **result;
  uint64_t v9;
  WebCore::MutationObserver **v10;
  WebCore::MutationObserver **v11;

  WebCore::Node::registeredMutationObservers(a1, a2, a4, &v11);
  result = v11;
  if (!v11)
  {
    *a5 = 0;
    return result;
  }
  if (!*((_DWORD *)v11 - 3))
  {
    *a5 = 0;
    return (WebCore::MutationObserver **)WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable(result, v7);
  }
  v9 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0;
  v10 = v11;
  v11 = 0;
  *(_QWORD *)v9 = v10;
  *(_BYTE *)(v9 + 8) = a3;
  result = v11;
  *a5 = v9;
  if (result)
    return (WebCore::MutationObserver **)WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable(result, v7);
  return result;
}

unint64_t WebCore::JSSVGGraphicsElementPrototype::create(WebCore::JSSVGGraphicsElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<11u>(this, (uint64_t)&WebCore::JSSVGGraphicsElement::s_info, (uint64_t)&WebCore::JSSVGGraphicsElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::JSSVGGraphicsElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSPerformanceTimingPrototype::create(WebCore::JSPerformanceTimingPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<23u>(this, (uint64_t)&WebCore::JSPerformanceTiming::s_info, (uint64_t)&WebCore::JSPerformanceTimingPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::JSPerformanceTimingPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSHTMLScriptElementPrototype::create(WebCore::JSHTMLScriptElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  WTF::StringImpl *v22[6];
  int v23;
  int v24;
  JSC::Structure *v25;
  int v26;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v21 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v21);
    *((_QWORD *)this + 4865) = SlowCase + (int)v21;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<16u>(this, (uint64_t)&WebCore::JSHTMLScriptElement::s_info, (uint64_t)&WebCore::JSHTMLScriptElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (v9 && *(_BYTE *)(v9 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194585300);
  }
  v10 = v9 - 192;
  if (!v9)
    v10 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v10 + 680) + 672) & 0x8000000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v18 = v22[0];
    v19 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v22[0]) = -1;
    WORD2(v22[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v19;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v20);
      else
        *(_DWORD *)v18 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v22);
  v14 = v22[0];
  v22[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v26 = *(_DWORD *)SlowCase;
  v25 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v23 = 0;
  v24 = v16;
  v22[0] = (WTF::StringImpl *)&v24;
  v22[1] = (WTF::StringImpl *)SlowCase;
  v22[2] = this;
  v22[3] = (WTF::StringImpl *)&v26;
  v22[4] = (WTF::StringImpl *)&v25;
  v22[5] = (WTF::StringImpl *)&v23;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v22);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v23, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::JSHTMLIFrameElementPrototype::create(WebCore::JSHTMLIFrameElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  WTF::StringImpl *v22[6];
  int v23;
  int v24;
  JSC::Structure *v25;
  int v26;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v21 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v21);
    *((_QWORD *)this + 4865) = SlowCase + (int)v21;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<20u>(this, (uint64_t)&WebCore::JSHTMLIFrameElement::s_info, (uint64_t)&WebCore::JSHTMLIFrameElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (v9 && *(_BYTE *)(v9 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1945855FCLL);
  }
  v10 = v9 - 192;
  if (!v9)
    v10 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v10 + 680) + 680) & 0x1000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v18 = v22[0];
    v19 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v22[0]) = -1;
    WORD2(v22[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v19;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v20);
      else
        *(_DWORD *)v18 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v22);
  v14 = v22[0];
  v22[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v26 = *(_DWORD *)SlowCase;
  v25 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v23 = 0;
  v24 = v16;
  v22[0] = (WTF::StringImpl *)&v24;
  v22[1] = (WTF::StringImpl *)SlowCase;
  v22[2] = this;
  v22[3] = (WTF::StringImpl *)&v26;
  v22[4] = (WTF::StringImpl *)&v25;
  v22[5] = (WTF::StringImpl *)&v23;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v22);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v23, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::JSHTMLIFrameElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

WTF::StringImpl *WebCore::ChildListMutationAccumulator::enqueueMutationRecord(WebCore::ChildListMutationAccumulator *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *result;
  uint64_t v16;
  WTF *v17;
  WTF::StringImpl *v18;

  v2 = *((_QWORD *)this + 2);
  *(_DWORD *)(v2 + 24) += 2;
  v3 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v3 + 16) = 1;
  *(_QWORD *)v3 = &unk_1E33A84B8;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)(v3 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = 0;
  *(_DWORD *)(v3 + 32) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = 0;
  *(_DWORD *)(v3 + 36) = v4;
  v5 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v5 + 16) = 1;
  *(_QWORD *)v5 = &unk_1E33A84B8;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)(v5 + 24) = v6;
  LODWORD(v6) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = 0;
  *(_DWORD *)(v5 + 32) = v6;
  LODWORD(v6) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = 0;
  *(_DWORD *)(v5 + 36) = v6;
  v7 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v7 + 8) = 1;
  *(_QWORD *)v7 = off_1E33A5F58;
  v8 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v8 + 2;
  *(_QWORD *)(v7 + 16) = v2;
  *(_QWORD *)(v7 + 24) = v3;
  *(_QWORD *)(v7 + 32) = v5;
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)(v7 + 40) = v9;
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  *(_QWORD *)(v7 + 48) = v10;
  v18 = (WTF::StringImpl *)v7;
  if (v8)
  {
    *(_DWORD *)(v2 + 24) = v8;
  }
  else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  WebCore::MutationObserverInterestGroup::enqueueMutationRecord(*((uint64_t **)this + 10), &v18);
  v12 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v12);
      v16 = *(unsigned int *)(v12 + 28);
      if ((_DWORD)v16)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v16));
      v17 = *(WTF **)(v12 + 16);
      if (v17)
      {
        *(_QWORD *)(v12 + 16) = 0;
        *(_DWORD *)(v12 + 24) = 0;
        WTF::fastFree(v17, v11);
      }
      WTF::fastFree((WTF *)v12, v11);
    }
  }
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  return result;
}

uint64_t WebCore::ChildListMutationAccumulator::childAdded(WebCore::ChildListMutationAccumulator *this, WebCore::Node *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t result;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;

  *((_DWORD *)a2 + 6) += 2;
  v4 = *((_DWORD *)this + 9);
  if (!v4 && !*((_DWORD *)this + 13))
    goto LABEL_10;
  v5 = *((_QWORD *)this + 9);
  if (v5)
    v5 = *(_QWORD *)(v5 + 8);
  if (v5 != (*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFLL) || *((_QWORD *)this + 8) != *((_QWORD *)a2 + 7))
  {
    WebCore::ChildListMutationAccumulator::enqueueMutationRecord(this);
    v4 = *((_DWORD *)this + 9);
  }
  if (!v4 && !*((_DWORD *)this + 13))
  {
LABEL_10:
    v6 = *((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFLL;
    if (v6)
      *(_DWORD *)((*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
    v7 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v6;
    if (v7)
    {
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
    v8 = *((_QWORD *)a2 + 7);
    if (v8)
      *(_DWORD *)(v8 + 24) += 2;
    v9 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v8;
    if (v9)
    {
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
    }
  }
  v10 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
  v12 = v10;
  if (v10)
  {
    do
      v13 = __ldaxr(v10);
    while (__stlxr(v13 + 1, v10));
  }
  result = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v12;
  if (result)
  {
    do
    {
      v15 = __ldaxr((unsigned int *)result);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)result));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)result);
      v26 = *(unsigned int *)(result + 28);
      if ((_DWORD)v26)
      {
        v29 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v26));
        result = v29;
      }
      v27 = *(WTF **)(result + 16);
      if (v27)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v28 = result;
        WTF::fastFree(v27, v11);
        result = v28;
      }
      result = WTF::fastFree((WTF *)result, v11);
    }
  }
  v17 = *((unsigned int *)this + 13);
  if ((_DWORD)v17 == *((_DWORD *)this + 12))
  {
    v18 = v17 + (v17 >> 2);
    if (v18 >= 0x10)
      v19 = v18 + 1;
    else
      v19 = 16;
    if (v19 <= v17 + 1)
      v20 = v17 + 1;
    else
      v20 = v19;
    if (v20 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x194585B94);
    }
    v21 = (void *)*((_QWORD *)this + 5);
    v22 = (void *)WTF::fastMalloc((WTF *)(8 * v20));
    *((_DWORD *)this + 12) = v20;
    *((_QWORD *)this + 5) = v22;
    result = (uint64_t)memcpy(v22, v21, 8 * v17);
    if (v21)
    {
      if (*((void **)this + 5) == v21)
      {
        *((_QWORD *)this + 5) = 0;
        *((_DWORD *)this + 12) = 0;
      }
      result = WTF::fastFree((WTF *)v21, v23);
    }
    v17 = *((unsigned int *)this + 13);
    v24 = (_QWORD *)(*((_QWORD *)this + 5) + 8 * v17);
  }
  else
  {
    v24 = (_QWORD *)(*((_QWORD *)this + 5) + 8 * v17);
  }
  v25 = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v25 + 2;
  *v24 = a2;
  *((_DWORD *)this + 13) = v17 + 1;
  if (v25)
  {
    *((_DWORD *)a2 + 6) = v25;
  }
  else if ((*((_WORD *)a2 + 15) & 0x400) == 0)
  {
    return WebCore::Node::removedLastRef(a2);
  }
  return result;
}

void WebCore::createPrivateStorageSession(__int16 a1@<W1>, int a2@<W2>, uint64_t *a3@<X8>)
{
  void *v6;
  CFDictionaryRef v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  const void *v11;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  v6 = (void *)*MEMORY[0x1E0C93098];
  values = (void *)*MEMORY[0x1E0C9AE50];
  keys[0] = v6;
  v7 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = _CFURLStorageSessionCreate();
  if (v8)
  {
    if (a2)
    {
      _CFURLStorageSessionDisableCache();
    }
    else
    {
      v9 = (const void *)_CFURLStorageSessionCopyCache();
      if (!v9)
        goto LABEL_11;
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C92C50], "sharedURLCache"), "memoryCapacity");
      CFURLCacheSetMemoryCapacity();
      CFRelease(v9);
    }
    v10 = _CFURLStorageSessionCopyCookieStorage();
    if (v10)
    {
      if ((a1 & 0xFF00) == 0)
        objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C92C08], "sharedHTTPCookieStorage"), "cookieAcceptPolicy");
      CFHTTPCookieStorageSetCookieAcceptPolicy();
      *a3 = v8;
      v11 = (const void *)v10;
LABEL_14:
      CFRelease(v11);
      if (!v7)
        return;
      goto LABEL_15;
    }
LABEL_11:
    *a3 = 0;
    v11 = (const void *)v8;
    goto LABEL_14;
  }
  *a3 = 0;
  if (!v7)
    return;
LABEL_15:
  CFRelease(v7);
}

void sub_194585D5C(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t *WebCore::TileControllerMemoryHandler::removeTileController(uint64_t *this, WebCore::TileController *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int i;
  WebCore::TileController **v10;
  int j;
  WTF *v12;

  v2 = *this;
  if (*this)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = 1;
    for (i = v7; ; i = (i + v8++) & v3)
    {
      v10 = *(WebCore::TileController ***)(v2 + 8 * i);
      if (v10 != (WebCore::TileController **)-1)
      {
        if (!v10)
          return this;
        if (*v10 == a2)
          break;
      }
    }
    for (j = 1; ; ++j)
    {
      v12 = *(WTF **)(v2 + 8 * v7);
      if (v12 != (WTF *)-1)
      {
        if (!v12)
          return (uint64_t *)WTF::ListHashSet<WTF::CheckedPtr<WebCore::TileController,WTF::RawPtrTraits<WebCore::TileController>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::TileController,WTF::RawPtrTraits<WebCore::TileController>>>>::remove(this, this, v12);
        if (*(WebCore::TileController **)v12 == a2)
          break;
      }
      v7 = (v7 + j) & v3;
    }
    if (v7 == *(_DWORD *)(v2 - 4))
      v12 = 0;
    return (uint64_t *)WTF::ListHashSet<WTF::CheckedPtr<WebCore::TileController,WTF::RawPtrTraits<WebCore::TileController>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::TileController,WTF::RawPtrTraits<WebCore::TileController>>>>::remove(this, this, v12);
  }
  return this;
}

WTF::StringImpl *WebCore::TextControlInnerTextElement::updateInnerTextElementEditabilityImpl(WebCore::TextControlInnerTextElement *this, int a2, int a3)
{
  uint64_t *v4;
  WebCore::QualifiedName::QualifiedNameImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF *v10;
  void *v11;
  WebCore::QualifiedName::QualifiedNameImpl *v12;
  WTF::StringImpl *v13;

  if (a2)
    v4 = &WebCore::plaintextOnlyAtomData;
  else
    v4 = &WebCore::falseAtomData;
  if (!a3)
    return WebCore::Element::setAttributeWithoutSynchronization(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::contenteditableAttr, (WTF::StringImpl **)v4);
  v5 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::contenteditableAttr;
  if (WebCore::HTMLNames::contenteditableAttr)
    ++*(_DWORD *)WebCore::HTMLNames::contenteditableAttr;
  v12 = v5;
  v6 = (WTF::StringImpl *)*v4;
  if (*v4)
    *(_DWORD *)v6 += 2;
  v13 = v6;
  WebCore::Element::parserSetAttributes((uint64_t)this, (WTF::StringImpl *)&v12, 1);
  v8 = v13;
  v13 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
      return (WTF::StringImpl *)WTF::fastFree(v10, v11);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::ScrollingStateScrollingNode::setRequestedScrollData(uint64_t result, __int128 *a2, int a3)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  v3 = *(_QWORD *)(result + 40);
  if ((v3 & 0x80) != 0 && a3)
    return WebCore::RequestedScrollData::merge(result + 452, (unsigned __int8 *)a2);
  v4 = *a2;
  *(_DWORD *)(result + 467) = *(_DWORD *)((char *)a2 + 15);
  *(_OWORD *)(result + 452) = v4;
  if (*(unsigned __int8 *)(result + 492) == *((unsigned __int8 *)a2 + 40))
  {
    if (*(_BYTE *)(result + 492))
    {
      *(_BYTE *)(result + 472) = *((_BYTE *)a2 + 20);
      v5 = *((_QWORD *)a2 + 3);
      *(_DWORD *)(result + 484) = *((_DWORD *)a2 + 8);
      *(_QWORD *)(result + 476) = v5;
      *(_WORD *)(result + 488) = *((_WORD *)a2 + 18);
    }
  }
  else if (*(_BYTE *)(result + 492))
  {
    *(_BYTE *)(result + 492) = 0;
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 20);
    *(_DWORD *)(result + 488) = *((_DWORD *)a2 + 9);
    *(_OWORD *)(result + 472) = v6;
    *(_BYTE *)(result + 492) = 1;
  }
  if ((v3 & 0x80) == 0)
  {
    *(_QWORD *)(result + 40) = v3 | 0x80;
    return WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(result + 48), 1);
  }
  return result;
}

WTF *WebCore::LocalFrameViewLayoutContext::convertSubtreeLayoutToFullLayout(WebCore::LocalFrameViewLayoutContext *this)
{
  uint64_t v2;
  WebCore::RenderObject *v3;
  uint64_t v4;
  WebCore::RenderElement *v5;
  void *v6;

  v2 = *((_QWORD *)this + 16);
  if (v2)
    v3 = *(WebCore::RenderObject **)(v2 + 8);
  else
    v3 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 328) + 296);
  if (v4)
    v5 = *(WebCore::RenderElement **)(v4 + 1944);
  else
    v5 = 0;
  WebCore::RenderObject::markContainingBlocksForLayout(v3, v5);
  return WebCore::LocalFrameViewLayoutContext::clearSubtreeLayoutRoot(this, v6);
}

WTF *WebCore::LocalFrameViewLayoutContext::clearSubtreeLayoutRoot(WebCore::LocalFrameViewLayoutContext *this, void *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

unint64_t WebCore::JSIntersectionObserverEntry::createPrototype(WebCore::JSIntersectionObserverEntry *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSIntersectionObserverEntryPrototype::create(this, v4, v5, v6);
}

uint64_t WebCore::JSIntersectionObserverEntry::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSIntersectionObserverEntry::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

unint64_t WebCore::JSHTMLTableElementPrototype::create(WebCore::JSHTMLTableElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSHTMLTableElementPrototype::finishCreation((WebCore::JSHTMLTableElementPrototype *)v6, this);
  return v6;
}

WTF::StringImpl *WebCore::JSHTMLTableElementPrototype::finishCreation(WebCore::JSHTMLTableElementPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<24u>(a2, (uint64_t)&WebCore::JSHTMLTableElement::s_info, (uint64_t)&WebCore::JSHTMLTableElementPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::JSHTMLOListElementPrototype::create(WebCore::JSHTMLOListElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSHTMLOListElement::s_info, &WebCore::JSHTMLOListElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::JSHTMLMediaElementPrototype::create(WebCore::JSHTMLMediaElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSHTMLMediaElementPrototype::finishCreation((WebCore::JSHTMLMediaElementPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::JSHTMLAudioElementPrototype::create(WebCore::JSHTMLAudioElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSHTMLAudioElement::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSHTMLAudioElementPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::JSHTMLAudioElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void WebCore::ImageBufferIOSurfaceBackend::prepareForExternalWrite(WebCore::ImageBufferIOSurfaceBackend *this)
{
  int v2;
  CGContext *v3;
  uint64_t v4;
  char v5;
  CGContext *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  PAL *v10;
  CGRect v11;

  v2 = *((unsigned __int8 *)this + 68);
  if (*((_BYTE *)this + 68))
  {
    v3 = (CGContext *)*((_QWORD *)this + 7);
    if (!v3)
    {
      WebCore::IOSurface::createPlatformContext(*((IOSurfaceRef **)this + 6), &v10);
      v3 = v10;
      v8 = (const void *)*((_QWORD *)this + 7);
      *((_QWORD *)this + 7) = v10;
      if (v8)
      {
        CFRelease(v8);
        v3 = (CGContext *)*((_QWORD *)this + 7);
      }
      if (!v3)
      {
        __break(0xC471u);
        JUMPOUT(0x194586948);
      }
    }
    v11.origin.x = 0.0;
    v11.origin.y = 0.0;
    v11.size.width = 0.0;
    v11.size.height = 0.0;
    CGContextFillRect(v3, v11);
    *((_BYTE *)this + 68) = 0;
  }
  v4 = *((_QWORD *)this + 5);
  if (v4 && (v5 = *(_BYTE *)(v4 + 744), *(_BYTE *)(v4 + 744) = v5 & 0xF7, (v5 & 8) != 0) || *((_BYTE *)this + 80))
  {
    *((_BYTE *)this + 80) = 0;
    v6 = (CGContext *)*((_QWORD *)this + 7);
    if (!v6)
    {
      WebCore::IOSurface::createPlatformContext(*((IOSurfaceRef **)this + 6), &v10);
      v6 = v10;
      v7 = (const void *)*((_QWORD *)this + 7);
      *((_QWORD *)this + 7) = v10;
      if (v7)
      {
        CFRelease(v7);
        v6 = (CGContext *)*((_QWORD *)this + 7);
      }
      if (!v6)
      {
        __break(0xC471u);
        JUMPOUT(0x1945868F8);
      }
    }
    goto LABEL_9;
  }
  if (v2)
  {
    v6 = (CGContext *)*((_QWORD *)this + 7);
    if (!v6)
    {
      WebCore::IOSurface::createPlatformContext(*((IOSurfaceRef **)this + 6), &v10);
      v6 = v10;
      v9 = (const void *)*((_QWORD *)this + 7);
      *((_QWORD *)this + 7) = v10;
      if (v9)
      {
        CFRelease(v9);
        v6 = (CGContext *)*((_QWORD *)this + 7);
      }
      if (!v6)
      {
        __break(0xC471u);
        JUMPOUT(0x194586998);
      }
    }
LABEL_9:
    CGContextFlush(v6);
  }
}

uint64_t WebCore::ValidatedFormListedElement::removedFromAncestor(uint64_t a1, char a2, uint64_t a3)
{
  const WebCore::HTMLElement *v6;
  _BOOL4 v7;
  WTF *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const WebCore::Style::RuleSet *v20;
  __int16 v21;
  char v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int16 v27;
  WebCore::Style::Scope *v28;
  _BOOL4 v29;
  _BOOL4 v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  _BOOL4 v38;
  void *v39;
  const WebCore::Style::RuleSet *v40;
  _BOOL4 v41;
  int v42;
  int v43;
  uint64_t *v44;
  unsigned int *Ref;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  int v64;
  uint64_t result;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  WebCore::ChildListMutationAccumulator *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF *v83;
  const WebCore::HTMLElement *v84;
  const WebCore::HTMLElement *v85;
  const WebCore::HTMLElement *v86;
  const WebCore::HTMLElement *v87;
  void *v88;
  WTF::StringImpl *v89;
  WebCore::HTMLFieldSetElement *v90;
  WTF *v91;
  void *v92;
  int v93;
  _BOOL4 IsDisabledByFieldsetAncestor;
  uint64_t v95;
  void *v96;
  WTF::StringImpl *v97;
  unsigned int *v98;
  uint64_t v99;
  WTF *v100;
  uint64_t v101;
  WTF *v102;
  uint64_t v103;
  _QWORD *v104;
  WebCore::Node *v105;
  WebCore::Event *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  _BOOL4 v109;
  uint64_t v110;
  unsigned int *v111;
  uint64_t v112;
  _BOOL4 v113;
  uint64_t v114;
  const WebCore::HTMLElement *v115;
  WebCore::Style::Scope *v116[2];
  BOOL v117;
  BOOL v118;
  BOOL v119;
  WTF::StringImpl *v120[2];
  __int128 v121;
  uint64_t v122;
  Inspector::InspectorDebuggerAgent *v123;

  v6 = (const WebCore::HTMLElement *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1))
    v7 = (*(_BYTE *)(a1 + 48) & 1) == 0;
  else
    v7 = 0;
  v8 = *(WTF **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (!v8)
    goto LABEL_119;
  v9 = *(WTF::StringImpl **)(*((_QWORD *)v8 + 1) + 8);
  v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 5) + 8) + 528);
  if (!v10
    || (v11 = *(_QWORD *)(v10 + 8)) == 0
    || (v12 = *(_QWORD *)(v11 + 24)) == 0
    || (v13 = *(_QWORD *)(v12 + 8)) == 0
    || (v14 = *(_QWORD *)(v13 + 232)) == 0)
  {
    v15 = *((_QWORD *)v8 + 4);
    if (!v15)
    {
LABEL_92:
      v50 = (WTF::StringImpl *)*((_QWORD *)v8 + 2);
      *((_QWORD *)v8 + 2) = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy(v50, v9);
        else
          *(_DWORD *)v50 -= 2;
      }
      goto LABEL_95;
    }
    v115 = v6;
    *(_DWORD *)(v15 + 24) += 2;
    if ((*((_QWORD *)v9 + 9) & 0xFFFFFFFFFFFFLL) != 0)
      v16 = *(_QWORD *)((*((_QWORD *)v9 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
    else
      v16 = 0;
    *(_DWORD *)(v16 + 24) += 2;
    v17 = *((_QWORD *)v8 + 5);
    *((_QWORD *)v8 + 5) = 0;
    if (v17)
    {
      if (*(_DWORD *)(v17 + 24) == 2)
      {
        if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v17, v9);
      }
      else
      {
        *(_DWORD *)(v17 + 24) -= 2;
      }
    }
    v18 = *((_QWORD *)v8 + 6);
    *((_QWORD *)v8 + 6) = 0;
    if (v18)
    {
      if (*(_DWORD *)(v18 + 24) == 2)
      {
        if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v18, v9);
      }
      else
      {
        *(_DWORD *)(v18 + 24) -= 2;
      }
    }
    v113 = v7;
    v114 = a3;
    *(_DWORD *)(v16 + 24) += 2;
    v19 = *(_DWORD *)(v15 + 24);
    *(_DWORD *)(v15 + 24) = v19 + 2;
    if (*(_QWORD *)(v15 + 32) != v16)
    {
LABEL_81:
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v15, v9);
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
      a3 = v114;
      v7 = v113;
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v16, v9);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
      v49 = *((_QWORD *)v8 + 4);
      *((_QWORD *)v8 + 4) = 0;
      if (v49)
      {
        if (*(_DWORD *)(v49 + 24) == 2)
        {
          if ((*(_WORD *)(v49 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v49, v9);
        }
        else
        {
          *(_DWORD *)(v49 + 24) -= 2;
        }
      }
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v16, v9);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        v6 = v115;
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v15, v9);
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
        v6 = v115;
      }
      goto LABEL_92;
    }
    *(_DWORD *)(v15 + 24) = v19 + 4;
    v123 = (Inspector::InspectorDebuggerAgent *)v15;
    ++WebCore::ScriptDisallowedScope::s_count;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 8) + 3364) & 1) != 0)
    {
      WebCore::ChildListMutationAccumulator::getOrCreate((WebCore::ChildListMutationAccumulator *)v16, (uint64_t *)v120);
      v79 = v120[0];
      if (v120[0])
      {
        if (*((_QWORD *)v120[0] + 10))
          WebCore::ChildListMutationAccumulator::willRemoveChild(v120[0], (WebCore::Node *)v15);
        if (*(_DWORD *)v79 == 1)
        {
          WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v79, v78);
          WTF::fastFree(v91, v92);
        }
        else
        {
          --*(_DWORD *)v79;
        }
      }
    }
    --WebCore::ScriptDisallowedScope::s_count;
    WebCore::Node::notifyMutationObserversNodeWillDetach((WebCore::Node *)v15);
    WebCore::dispatchChildRemovalEvents(&v123);
    if (*(_QWORD *)(v15 + 32) == v16)
    {
      v21 = *(_WORD *)(v15 + 28);
      if ((v21 & 4) == 0 || (*(_WORD *)(v15 + 78) & 0x3FF) == 0)
      {
LABEL_24:
        *(_OWORD *)v120 = 0u;
        v121 = 0u;
        if ((v21 & 2) != 0)
          v22 = 3;
        else
          v22 = 6;
        if ((v21 & 8) != 0)
          v22 = 1;
        LOBYTE(v120[0]) = v22;
        if ((v21 & 8) != 0)
          v23 = (WTF::StringImpl *)v15;
        else
          v23 = 0;
        v122 = 0;
        v120[1] = v23;
        v24 = v15;
        do
          v24 = *(_QWORD *)(v24 + 48) & 0xFFFFFFFFFFFFLL;
        while (v24 && (*(_WORD *)(v24 + 28) & 8) == 0);
        *(_QWORD *)&v121 = v24;
        v25 = v15;
        do
          v25 = *(_QWORD *)(v25 + 56);
        while (v25 && (*(_WORD *)(v25 + 28) & 8) == 0);
        *((_QWORD *)&v121 + 1) = v25;
        LOBYTE(v122) = 1;
        if ((v21 & 8) != 0)
          v26 = 2;
        else
          v26 = 1;
        BYTE1(v122) = v26;
        ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
        ++WebCore::ScriptDisallowedScope::s_count;
        v27 = *(_WORD *)(v16 + 28);
        if ((v27 & 8) != 0)
          v28 = (WebCore::Style::Scope *)v16;
        else
          v28 = 0;
        v116[0] = v28;
        v116[1] = (WebCore::Style::Scope *)v120;
        if ((v27 & 8) != 0)
        {
          v109 = WebCore::Element::needsStyleInvalidation((WebCore::Element *)v16);
          v117 = v109;
          if (v109)
          {
            v30 = *(_BYTE *)(WebCore::Style::Scope::forNode(v116[0], v9) + 236) != 0;
            v29 = v117;
          }
          else
          {
            v29 = 0;
            v30 = 0;
          }
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v117 = 0;
        }
        v118 = v30;
        v119 = *(_QWORD *)(v16 + 80) == 0;
        if (v29 && v30)
          WebCore::Style::ChildChangeInvalidation::invalidateForHasBeforeMutation(v116, (uint64_t)v9, v20);
        if ((*(_WORD *)(v16 + 28) & 0x80) != 0 || (*(_BYTE *)(v16 + 22) & 0x10) != 0)
        {
          v31 = *(_QWORD **)(v16 + 40);
          v80 = *v31;
          if ((*(_WORD *)(*v31 + 28) & 0x80) == 0)
            v80 = 0;
          v81 = *(_QWORD *)(v80 + 224);
          if (v81)
          {
            ++*(_DWORD *)(v81 + 12);
            *(_BYTE *)(v81 + 9) = 0;
          }
        }
        else
        {
          v31 = *(_QWORD **)(v16 + 40);
        }
        v32 = v31[1];
        *(_DWORD *)(v32 + 24) += 2;
        WebCore::Document::nodeWillBeRemoved((WebCore::Document *)v32, (WebCore::Node *)v15);
        if (*(_DWORD *)(v32 + 24) == 2)
        {
          if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v32, v33);
        }
        else
        {
          *(_DWORD *)(v32 + 24) -= 2;
        }
        v34 = *(_QWORD *)(v15 + 48);
        v35 = v34 & 0xFFFFFFFFFFFFLL;
        if ((v34 & 0xFFFFFFFFFFFFLL) != 0)
          *(_DWORD *)((v34 & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
        v36 = *(_QWORD *)(v15 + 56);
        if (v36)
          *(_DWORD *)(v36 + 24) += 2;
        WebCore::ContainerNode::removeBetween((WebCore::ContainerNode *)v16, (WebCore::Node *)v35, (WebCore::Node *)v36, (WebCore::Node *)v15);
        v37 = (*(_BYTE *)(v16 + 22) & 0x18) == 0;
        if ((*(_BYTE *)(v15 + 22) & 8) != 0)
          v38 = WebCore::notifyNodeRemovedFromDocument(v16, v37, v15);
        else
          v38 = WebCore::notifyNodeRemovedFromTree(v16, v37, v15);
        v41 = v38;
        if (v36)
        {
          if (*(_DWORD *)(v36 + 24) == 2)
          {
            if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v36, v39);
          }
          else
          {
            *(_DWORD *)(v36 + 24) -= 2;
          }
        }
        if (v35)
        {
          if (*(_DWORD *)(v35 + 24) == 2)
          {
            if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v35, v39);
          }
          else
          {
            *(_DWORD *)(v35 + 24) -= 2;
          }
        }
        if (v117)
        {
          if (v118)
            WebCore::Style::ChildChangeInvalidation::invalidateForHasAfterMutation(v116, (uint64_t)v39, v40);
          WebCore::Style::ChildChangeInvalidation::invalidateAfterChange((uint64_t)v116);
        }
        --WebCore::ScriptDisallowedScope::s_count;
        v42 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
        if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
          && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
        {
          WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v116, v39);
          v42 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
        }
        WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v42 - 1;
        if (v41)
        {
          v77 = *(_QWORD *)(v15 + 8);
          if ((!v77 || (*(_BYTE *)(v77 + 8) & 3) != 0 || !*(_QWORD *)v77)
            && (*(_WORD *)(v15 + 28) & 4) != 0
            && *(_QWORD *)(v15 + 80))
          {
            WebCore::willCreatePossiblyOrphanedTreeByRemovalSlowCase((WebCore::Node *)v15, (WebCore::Node *)v39);
          }
        }
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v16 + 376))(v16, v120);
        v43 = 1;
        goto LABEL_72;
      }
      WebCore::disconnectSubframes((WebCore::Node *)v15, 0);
      if (*(_QWORD *)(v15 + 32) == v16)
      {
        v21 = *(_WORD *)(v15 + 28);
        goto LABEL_24;
      }
    }
    v43 = 0;
LABEL_72:
    if (*(_DWORD *)(v15 + 24) == 2)
    {
      if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v15, v9);
    }
    else
    {
      *(_DWORD *)(v15 + 24) -= 2;
    }
    if (v43)
    {
      v44 = *(uint64_t **)(v16 + 40);
      Ref = (unsigned int *)v44[1];
      v46 = Ref[6];
      Ref[6] = v46 + 2;
      v47 = *((_QWORD *)Ref + 226);
      if (v47)
      {
        v72 = *v44;
        if (!v72
          || (*(_WORD *)(v72 + 28) & 0x80) == 0
          || (v73 = *(_QWORD *)(v72 + 200)) == 0
          || (v74 = *(_QWORD *)(v73 + 8)) == 0
          || (*(_WORD *)(v74 + 28) & 0x20) == 0
          || *(_QWORD *)(*(_QWORD *)(v74 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::useTag + 24))
        {
          v75 = *(WTF **)(v47 + 56);
          v76 = *(unsigned int *)(v47 + 68);
          ++*(_DWORD *)v47;
          *(_QWORD *)(v47 + 56) = 0;
          *(_QWORD *)(v47 + 64) = 0;
          if ((_DWORD)v76)
          {
            v98 = Ref;
            v99 = 8 * v76;
            v112 = 8 * v76;
            v100 = v75;
            do
            {
              v101 = *(_QWORD *)v100;
              v100 = (WTF *)((char *)v100 + 8);
              (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v101 + 1240))(v101, &WebCore::SVGNames::hrefAttr);
              v112 -= 8;
            }
            while (v112);
            v102 = v75;
            do
            {
              v103 = *(_QWORD *)v102;
              *(_QWORD *)v102 = 0;
              if (v103)
              {
                if (*(_DWORD *)(v103 + 24) == 2)
                {
                  if ((*(_WORD *)(v103 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v103, v9);
                }
                else
                {
                  *(_DWORD *)(v103 + 24) -= 2;
                }
              }
              v102 = (WTF *)((char *)v102 + 8);
              v99 -= 8;
              Ref = v98;
            }
            while (v99);
          }
          if (v75)
          {
            v111 = Ref;
            WTF::fastFree(v75, v9);
            Ref = v111;
          }
          if (!*(_DWORD *)v47)
          {
            __break(0xC471u);
            JUMPOUT(0x1945873F0);
          }
          --*(_DWORD *)v47;
          v46 = Ref[6] - 2;
        }
      }
      if (v46)
      {
        Ref[6] = v46;
      }
      else if ((*((_WORD *)Ref + 15) & 0x400) == 0)
      {
        Ref = WebCore::Node::removedLastRef((WebCore::Node *)Ref, v9);
      }
      if ((*(_BYTE *)(v16 + 22) & 0x10) == 0)
      {
        v48 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 8);
        if (!*(_BYTE *)(v48 + 3268) && (*(_WORD *)(v48 + 3292) & 1) != 0)
        {
          v104 = (_QWORD *)(WebCore::eventNames((WebCore *)Ref) + 56);
          if (*(_QWORD *)(v16 + 32)
            || (v110 = *(_QWORD *)(v16 + 16), (v110 & 0x1000000000000) != 0)
            && WebCore::EventListenerMap::find((v110 & 0xFFFFFFFFFFFFLL) + 16, v104))
          {
            v120[0] = 0;
            v116[0] = 0;
            v105 = (WebCore::Node *)WebCore::MutationEvent::operator new(112);
            WebCore::MutationEvent::MutationEvent((uint64_t)v105, v104, 1, 0, 0, (_DWORD **)v120, (_DWORD **)v116);
            WebCore::EventDispatcher::dispatchScopedEvent((WebCore::EventDispatcher *)v16, v105, v106);
            if (*((_DWORD *)v105 + 4) == 1)
              (*(void (**)(WebCore::Node *))(*(_QWORD *)v105 + 8))(v105);
            else
              --*((_DWORD *)v105 + 4);
            v107 = v116[0];
            v116[0] = 0;
            if (v107)
            {
              if (*(_DWORD *)v107 == 2)
                WTF::StringImpl::destroy(v107, v9);
              else
                *(_DWORD *)v107 -= 2;
            }
            v108 = v120[0];
            v120[0] = 0;
            if (v108)
            {
              if (*(_DWORD *)v108 == 2)
                WTF::StringImpl::destroy(v108, v9);
              else
                *(_DWORD *)v108 -= 2;
            }
          }
        }
      }
    }
    goto LABEL_81;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
LABEL_95:
  v51 = *((_QWORD *)v8 + 6);
  *((_QWORD *)v8 + 6) = 0;
  if (v51)
  {
    if (*(_DWORD *)(v51 + 24) == 2)
    {
      if ((*(_WORD *)(v51 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v51, v9);
    }
    else
    {
      *(_DWORD *)(v51 + 24) -= 2;
    }
  }
  v52 = *((_QWORD *)v8 + 5);
  *((_QWORD *)v8 + 5) = 0;
  if (v52)
  {
    if (*(_DWORD *)(v52 + 24) == 2)
    {
      if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v52, v9);
    }
    else
    {
      *(_DWORD *)(v52 + 24) -= 2;
    }
  }
  v53 = *((_QWORD *)v8 + 4);
  *((_QWORD *)v8 + 4) = 0;
  if (v53)
  {
    if (*(_DWORD *)(v53 + 24) == 2)
    {
      if ((*(_WORD *)(v53 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v53, v9);
    }
    else
    {
      *(_DWORD *)(v53 + 24) -= 2;
    }
  }
  v54 = *((_QWORD *)v8 + 3);
  *((_QWORD *)v8 + 3) = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = (WTF::StringImpl *)*((_QWORD *)v8 + 2);
  *((_QWORD *)v8 + 2) = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v9);
    else
      *(_DWORD *)v55 -= 2;
  }
  v56 = *((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = 0;
  if (v56)
  {
    do
    {
      v57 = __ldaxr((unsigned int *)v56);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, (unsigned int *)v56));
    if (!v58)
    {
      atomic_store(1u, (unsigned int *)v56);
      v82 = *(unsigned int *)(v56 + 28);
      if ((_DWORD)v82)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v56 + 16), (WTF::StringImpl *)(*(_QWORD *)(v56 + 16) + 32 * v82));
      v83 = *(WTF **)(v56 + 16);
      if (v83)
      {
        *(_QWORD *)(v56 + 16) = 0;
        *(_DWORD *)(v56 + 24) = 0;
        WTF::fastFree(v83, v9);
      }
      WTF::fastFree((WTF *)v56, v9);
    }
  }
  if (*(_QWORD *)v8)
  {
    *(_QWORD *)(*(_QWORD *)v8 + 8) = 0;
    v59 = *(unsigned int **)v8;
    *(_QWORD *)v8 = 0;
    if (v59)
    {
      do
      {
        v60 = __ldaxr(v59);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, v59));
      if (!v61)
      {
        atomic_store(1u, v59);
        WTF::fastFree((WTF *)v59, v9);
      }
    }
  }
  else
  {
    *(_QWORD *)v8 = 0;
  }
  WTF::fastFree(v8, v9);
LABEL_119:
  v62 = *(unsigned __int8 *)(a1 + 48);
  if ((v62 & 0x10) != 0)
  {
    v93 = (v62 >> 3) & 1;
    IsDisabledByFieldsetAncestor = WebCore::ValidatedFormListedElement::computeIsDisabledByFieldsetAncestor((WebCore::ValidatedFormListedElement *)a1);
    WebCore::ValidatedFormListedElement::setDisabledInternal((_BYTE *)a1, v93, IsDisabledByFieldsetAncestor);
  }
  v63 = *(_BYTE *)(a1 + 50);
  v64 = v63 & 3;
  if (v64 == 1)
    *(_BYTE *)(a1 + 50) = v63 & 0xFC | 2;
  result = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v66 = *(_QWORD *)(a1 + 8);
  if (v66)
  {
    v84 = *(const WebCore::HTMLElement **)(v66 + 8);
    if (v84)
    {
      v85 = v6;
      do
      {
        v86 = v85;
        v85 = (const WebCore::HTMLElement *)*((_QWORD *)v85 + 4);
      }
      while (v85);
      do
      {
        v87 = v84;
        v84 = (const WebCore::HTMLElement *)*((_QWORD *)v84 + 4);
      }
      while (v84);
      if (v86 != v87)
      {
        v120[0] = 0;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a1 + 80))(a1, v120);
        v89 = v120[0];
        v120[0] = 0;
        if (v89)
        {
          if (*((_DWORD *)v89 + 6) == 2)
          {
            if ((*((_WORD *)v89 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v89, v88);
          }
          else
          {
            *((_DWORD *)v89 + 6) -= 2;
          }
        }
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
      }
    }
  }
  if ((a2 & 1) != 0)
  {
    v67 = *((_QWORD *)v6 + 13);
    if (v67)
    {
      v68 = *(_DWORD *)(v67 + 4);
      if ((v68 & 1) != 0)
      {
        v69 = *(uint64_t **)(v67 + 40);
        LODWORD(v70) = *(_DWORD *)(v67 + 52);
        if (!(_DWORD)v70)
          goto LABEL_134;
      }
      else
      {
        v69 = (uint64_t *)(v67 + 32);
        LODWORD(v70) = v68 >> 5;
        if (!(_DWORD)v70)
          goto LABEL_134;
      }
      v70 = v70;
      while (1)
      {
        v71 = *v69;
        if (*v69 == WebCore::HTMLNames::formAttr
          || *(_QWORD *)(v71 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
          && *(_QWORD *)(v71 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
        {
          break;
        }
        v69 += 2;
        if (!--v70)
          goto LABEL_134;
      }
      v120[0] = 0;
      v95 = *(_QWORD *)(a1 + 8);
      if (v95)
      {
        if (*(_QWORD *)(v95 + 8))
        {
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a1 + 80))(a1, v120);
          v97 = v120[0];
          v120[0] = 0;
          if (v97)
          {
            if (*((_DWORD *)v97 + 6) == 2)
            {
              if ((*((_WORD *)v97 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v97, v96);
            }
            else
            {
              *((_DWORD *)v97 + 6) -= 2;
            }
          }
        }
      }
      result = (uint64_t)WebCore::FormListedElement::resetFormOwner((WebCore::FormListedElement *)a1);
    }
  }
LABEL_134:
  if (v7 && (*(_WORD *)(a3 + 28) & 8) != 0)
  {
    result = WebCore::lineageOfType<WebCore::HTMLFieldSetElement>(a3);
    if (result)
    {
      v90 = (WebCore::HTMLFieldSetElement *)result;
      do
      {
        WebCore::HTMLFieldSetElement::removeInvalidDescendant(v90, v6);
        result = WebCore::findElementAncestorOfType<WebCore::HTMLFieldSetElement>((uint64_t)v90);
        v90 = (WebCore::HTMLFieldSetElement *)result;
      }
      while (result);
    }
  }
  if (v64 == 1)
    return WebCore::ValidatedFormListedElement::updateWillValidateAndValidity((WebCore::ValidatedFormListedElement *)a1);
  return result;
}

void WebCore::ScrollingTreeScrollingNode::~ScrollingTreeScrollingNode(WebCore::ScrollingTreeScrollingNode *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  const void *v13;
  const void *v14;

  *(_QWORD *)this = off_1E3404708;
  if (*((_DWORD *)this + 84) == 2)
  {
    v13 = (const void *)*((_QWORD *)this + 39);
    if (v13)
      CFRelease(v13);
  }
  v3 = (_DWORD *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  if (*((_DWORD *)this + 74) == 2)
  {
    v14 = (const void *)*((_QWORD *)this + 34);
    if (v14)
      CFRelease(v14);
  }
  v4 = (_DWORD *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
  }
  WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>::~ScrollSnapOffsetsInfo((uint64_t)this + 160, a2);
  v6 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_QWORD *)this = off_1E34043F8;
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (!v7)
    goto LABEL_24;
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_16:
  v9 = *(_QWORD *)(v7 + 16) - 1;
  *(_QWORD *)(v7 + 16) = v9;
  if (v9)
  {
    v12 = __ldxr((unsigned __int8 *)v7);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v7))
        goto LABEL_24;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    goto LABEL_24;
  }
  v10 = *(_QWORD *)(v7 + 8);
  v11 = __ldxr((unsigned __int8 *)v7);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
    {
      if (!v10)
        goto LABEL_23;
      goto LABEL_24;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (!v10)
LABEL_23:
    WTF::fastFree((WTF *)v7, v5);
LABEL_24:
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, v5);
}

{
  WTF *v2;
  void *v3;

  WebCore::ScrollingTreeScrollingNode::~ScrollingTreeScrollingNode(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t *WebCore::MessagePortChannelRegistry::existingChannelContainingPort(uint64_t a1, unint64_t *a2)
{
  uint64_t *result;
  uint64_t v3;

  result = WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>(*(_QWORD *)(a1 + 16), *a2, a2[1]);
  if (result)
  {
    v3 = result[2];
    if (v3)
      return *(uint64_t **)(v3 + 8);
    else
      return 0;
  }
  return result;
}

uint64_t *WebCore::MessagePortChannelRegistry::didDisentangleMessagePort(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t *result;
  uint64_t v5;
  WebCore::MessagePortChannel *v6;
  int v7;
  _BOOL8 v9;
  _QWORD *v10;
  _BYTE *v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  WebCore::MessagePortChannel **v22;
  WebCore::MessagePortChannel *v23;
  WebCore::MessagePortChannel **v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  _QWORD *v33;
  WebCore::MessagePortChannel *v34;

  v3 = *a2;
  result = WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>(*(_QWORD *)(a1 + 16), *a2, a2[1]);
  if (!result)
    return result;
  v5 = result[2];
  if (!v5)
    return result;
  v6 = *(WebCore::MessagePortChannel **)(v5 + 8);
  if (!v6)
    return result;
  v7 = (*(_DWORD *)v6)++;
  v9 = v3 != *((_QWORD *)v6 + 2) || a2[1] != *((_QWORD *)v6 + 3);
  v10 = (_QWORD *)((char *)v6 + 16 * v9);
  v12 = *((unsigned __int8 *)v10 + 64);
  v11 = v10 + 8;
  if (v12)
    *v11 = 0;
  v13 = (_QWORD *)((char *)v6 + 8 * v9);
  v16 = v13[17];
  v15 = v13 + 17;
  v14 = v16;
  *(_DWORD *)v6 = v7 + 2;
  if (v16
    || (WTF::HashTable<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>,WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>>::rehash(v15, 8u), (v14 = *v15) != 0))
  {
    v17 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    v17 = 0;
  }
  v18 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
  v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
  v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
  v21 = v17 & ((v20 >> 31) ^ v20);
  v22 = (WebCore::MessagePortChannel **)(v14 + 8 * v21);
  v23 = *v22;
  if (*v22)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (v23 == v6)
      {
        WTF::RefCounted<WebCore::MessagePortChannel>::deref(v6);
        goto LABEL_39;
      }
      if (v23 == (WebCore::MessagePortChannel *)-1)
        v24 = v22;
      v21 = (v21 + v25) & v17;
      v22 = (WebCore::MessagePortChannel **)(v14 + 8 * v21);
      v23 = *v22;
      ++v25;
    }
    while (*v22);
    if (v24)
    {
      *v24 = 0;
      --*(_DWORD *)(*v15 - 16);
      v22 = v24;
    }
  }
  *v22 = v6;
  v26 = *v15;
  if (*v15)
    v27 = *(_DWORD *)(v26 - 12) + 1;
  else
    v27 = 1;
  *(_DWORD *)(v26 - 12) = v27;
  v28 = *v15;
  if (*v15)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30)
      goto LABEL_37;
  }
  else if (3 * v31 <= 4 * v30)
  {
    if (!(_DWORD)v31)
    {
      v32 = 8;
LABEL_38:
      WTF::HashTable<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>,WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>>::rehash(v15, v32);
      goto LABEL_39;
    }
LABEL_37:
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
    goto LABEL_38;
  }
LABEL_39:
  v33 = (_QWORD *)((char *)v6 + 8 * v9);
  v34 = (WebCore::MessagePortChannel *)v33[11];
  v33[11] = 0;
  if (v34)
    WTF::RefCounted<WebCore::MessagePortChannel>::deref(v34);
  return (uint64_t *)WTF::RefCounted<WebCore::MessagePortChannel>::deref(v6);
}

unint64_t WebCore::JSWebKitNamespacePrototype::create(WebCore::JSWebKitNamespacePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSWebKitNamespace::s_info, (uint64_t)&WebCore::JSWebKitNamespacePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::JSWebKitNamespacePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unsigned int *WebCore::HTMLTextFormControlElement::setInnerTextValue(WebCore::HTMLTextFormControlElement *a1, WTF **a2)
{
  unsigned int *result;
  WTF::StringImpl *v5;
  const WTF::StringImpl *v6;
  int v7;
  void *v8;
  char v9;
  char v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  WebCore::ContainerNode *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WebCore::Node *v18;
  _BYTE v19[24];
  uint64_t v20;
  WTF::StringImpl *v21;
  char v22;
  WTF::StringImpl *v23;
  WebCore::ContainerNode *v24;

  result = (unsigned int *)(*(_QWORD *(**)(WebCore::ContainerNode **__return_ptr))(*(_QWORD *)a1 + 1416))(&v24);
  if (!v24)
    return result;
  WebCore::innerTextValueFrom((WebCore *)&v23, (unint64_t)v24);
  v5 = v23;
  v7 = WTF::equal(*a2, v23, v6);
  v9 = v7;
  if (!v7 || !*((_QWORD *)v24 + 10))
  {
    if ((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v12 = *(_QWORD *)((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
      if (v12)
      {
        v13 = *(_DWORD *)(v12 + 24);
        *(_DWORD *)(v12 + 24) = v13 + 2;
        if (v13)
        {
          *(_DWORD *)(v12 + 24) = v13;
        }
        else if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v12, v8);
        }
      }
    }
    if (!*a2)
      goto LABEL_33;
    if ((WTF::StringImpl::endsWith() & 1) != 0)
    {
      WebCore::HTMLElement::setInnerText(v24, (WTF *)a2, &v20);
      WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v20, v14);
LABEL_38:
      v15 = v24;
      WebCore::HTMLBRElement::create(*(WebCore::HTMLBRElement **)(*((_QWORD *)a1 + 5) + 8), &v18);
      WebCore::ContainerNode::appendChild((uint64_t)v15, v18, (uint64_t)v19);
      WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v19, v16);
      WTF::Ref<WebCore::HTMLProgressElement,WTF::RawPtrTraits<WebCore::HTMLProgressElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLProgressElement>>::~Ref(&v18);
LABEL_13:
      if ((v9 & 1) == 0 && (*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x194587F68);
        }
        if (WebCore::Document::hasEverCreatedAnAXObjectCache)
        {
          v17 = WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*((_QWORD *)a1 + 5) + 8));
          if (v17)
          {
            WebCore::AXObjectCache::deferTextReplacementNotificationForTextControl(v17, a1, (const WTF::String *)&v23);
            v5 = v23;
          }
        }
      }
      goto LABEL_17;
    }
    if (*a2)
      v10 = WTF::StringImpl::endsWith();
    else
LABEL_33:
      v10 = 0;
    WebCore::HTMLElement::setInnerText(v24, (WTF *)a2, &v20);
    if (v22)
    {
      v11 = v21;
      v21 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v8);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    if ((v10 & 1) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_17:
  *((_BYTE *)a1 + 168) |= 2u;
  v23 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = (unsigned int *)v24;
  v24 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v8);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

_QWORD *WebCore::LinkPreloadResourceClient::LinkPreloadResourceClient(_QWORD *a1, uint64_t a2, WebCore::CachedResource *a3)
{
  uint64_t v5;
  void *v8;
  WTF *v9;

  *a1 = off_1E33F61B0;
  v5 = *(_QWORD *)(a2 + 8);
  if (!v5)
  {
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = a2;
    v9 = *(WTF **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v5;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        WTF::fastFree(v9, v8);
        v5 = *(_QWORD *)(a2 + 8);
        if (!v5)
          goto LABEL_3;
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
  }
  ++*(_DWORD *)v5;
LABEL_3:
  a1[1] = v5;
  WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)(a1 + 2), a3);
  return a1;
}

unint64_t WebCore::JSDOMPluginArrayPrototype::create(WebCore::JSDOMPluginArrayPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSDOMPluginArrayPrototype::finishCreation((WebCore::JSDOMPluginArrayPrototype *)v6, this);
  return v6;
}

WTF::StringImpl *WebCore::JSDOMPluginArrayPrototype::finishCreation(WebCore::JSDOMPluginArrayPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t Direct;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(a2, (uint64_t)&WebCore::JSDOMPluginArray::s_info, &WebCore::JSDOMPluginArrayPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2712);
  v5 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 672);
  v6 = (_DWORD *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  Direct = JSC::JSObject::getDirect(v5, a2, (unint64_t)v6);
  JSC::JSObject::putDirect((unsigned __int8 *)this, a2, v4, Direct, 4);
  if (*v6 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v8);
  else
    *v6 -= 2;
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = JSC::jsNontrivialString((uint64_t)a2, &v13);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v9, v10, 6);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::applyScrollPositionUpdate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore *v15;
  _QWORD *v16;
  uint64_t v17;
  WTF *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  const WebCore::FloatPoint *v24;
  _BYTE v25[12];
  int v26;
  int v27;

  v4 = result;
  if (*(_BYTE *)(a2 + 36))
  {
    switch(*(_BYTE *)(a2 + 36))
    {
      case 1:
        v20 = *(_QWORD **)a2;
        v21 = *(_QWORD *)(a2 + 8);
        goto LABEL_25;
      case 2:
        result = WebCore::AsyncScrollingCoordinator::animatedScrollDidEndForNode(result, *(_QWORD **)a2, *(_QWORD *)(a2 + 8));
        break;
      case 3:
        v20 = *(_QWORD **)a2;
        v21 = *(_QWORD *)(a2 + 8);
LABEL_25:
        result = WebCore::AsyncScrollingCoordinator::animatedScrollWillStartForNode(result, v20, v21);
        break;
      case 4:
        result = WebCore::AsyncScrollingCoordinator::wheelEventScrollDidEndForNode(result, *(_QWORD **)a2, *(_QWORD *)(a2 + 8));
        break;
      default:
        return result;
    }
  }
  else
  {
    v5 = *(_QWORD *)(result + 24);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v8 = *(_QWORD **)a2;
        v9 = *(_QWORD *)(a2 + 8);
        v10 = *(_QWORD *)(a2 + 24);
        v11 = *(_DWORD *)(a2 + 32);
        v12 = *(unsigned __int8 *)(a2 + 37);
        ++*(_DWORD *)v6;
        result = WebCore::AsyncScrollingCoordinator::frameViewForScrollingNode(result, v8, v9);
        if (result)
        {
          v13 = result;
          ++*(_DWORD *)(result + 8);
          v14 = *(_QWORD *)(result + 328);
          if (!(_DWORD)v12 && *(_QWORD *)(*(_QWORD *)(v14 + 128) + 8) != v14)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 152) + 512))(*(_QWORD *)(v6 + 152));
            v14 = *(_QWORD *)(v13 + 328);
          }
          v15 = (WebCore *)(a2 + 16);
          v16 = *(_QWORD **)(v14 + 296);
          if (v16 && (v16 = (_QWORD *)v16[243]) != 0)
          {
            v17 = *(_QWORD *)(v16[18] + 256);
            if (v17)
            {
              v16 = *(_QWORD **)(v17 + 224);
              v17 = *(_QWORD *)(v17 + 232);
            }
            else
            {
              v16 = 0;
            }
          }
          else
          {
            v17 = 0;
          }
          if (v8 == v16 && v9 == v17)
          {
            *(_QWORD *)&v25[4] = v10;
            v26 = v11;
            v27 = 0;
            result = (*(uint64_t (**)(uint64_t, uint64_t, WebCore *, _BYTE *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 72))(v4, v13, v15, v25, a3, 0, v12);
          }
          else
          {
            result = (uint64_t)WebCore::LocalFrameView::scrollableAreaForScrollingNodeID(v13, (uint64_t)v8, v9);
            if (result)
            {
              v22 = result;
              (*(void (**)(uint64_t))(*(_QWORD *)result + 16))(result);
              v23 = *(_BYTE *)(v22 + 44);
              *(_BYTE *)(v22 + 44) = a3;
              *(_QWORD *)v25 = WebCore::roundedIntPoint(v15, v24);
              WebCore::ScrollableArea::notifyScrollPositionChanged((float32x2_t **)v22, (const WebCore::IntPoint *)v25);
              *(_BYTE *)(v22 + 44) = v23;
              if (!(_DWORD)v12)
                (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 152) + 504))(*(_QWORD *)(v6 + 152));
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
            }
          }
          if (*(_DWORD *)(v13 + 8) == 1)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
          else
            --*(_DWORD *)(v13 + 8);
        }
        if (*(_DWORD *)v6 == 1)
        {
          WebCore::Page::~Page(v6);
          return WTF::fastFree(v18, v19);
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::AsyncScrollingCoordinator::requestScrollToPosition(const WebCore::ScrollableArea *a1, _BYTE *a2, int32x2_t *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  uint64_t v25;
  _OWORD *v26;
  void *v27;
  WTF *v28;
  uint64_t v29;
  _BYTE v30[24];
  char v31;
  char v32;
  __int16 v33;
  char v34;
  uint64_t v35;
  WTF *v36;
  int v37;
  unsigned int v38;

  v8 = (_QWORD *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 296))(a2);
  if (!v8)
    return 0;
  v12 = v8;
  v13 = v9;
  v14 = WebCore::AsyncScrollingCoordinator::frameViewForScrollingNode((uint64_t)a1, v8, v9);
  if (!v14)
    return 0;
  v15 = v14;
  ++*(_DWORD *)(v14 + 8);
  if (!(*(unsigned int (**)(const WebCore::ScrollableArea *, uint64_t))(*(_QWORD *)a1 + 40))(a1, v14))
  {
LABEL_31:
    v10 = 0;
    goto LABEL_27;
  }
  (*(void (**)(const WebCore::ScrollableArea *, _QWORD *, uint64_t, _BYTE *))(*(_QWORD *)a1 + 312))(a1, v12, v13, a2);
  v16 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 1680);
  if (*(_BYTE *)(a4 + 2))
    v17 = 1;
  else
    v17 = a2[44] == 0;
  if (!v17 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 328) + 296) + 3362))
  {
    *(_QWORD *)v30 = v12;
    *(_QWORD *)&v30[8] = v13;
    *(float32x2_t *)&v30[16] = vcvt_f32_s32(*a3);
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v18 = *((_QWORD *)a1 + 8);
    if (v18)
    {
      WebCore::ScrollingTree::takePendingScrollUpdates(v18, &v36);
      v28 = v36;
      if (v38)
      {
        v29 = 40 * v38;
        do
        {
          WebCore::AsyncScrollingCoordinator::applyScrollPositionUpdate((uint64_t)a1, (uint64_t)v28, 0);
          v28 = (WTF *)((char *)v28 + 40);
          v29 -= 40;
        }
        while (v29);
        v28 = v36;
      }
      if (v28)
      {
        v36 = 0;
        v37 = 0;
        WTF::fastFree(v28, v27);
      }
    }
    WebCore::AsyncScrollingCoordinator::applyScrollPositionUpdate((uint64_t)a1, (uint64_t)v30, 1);
  }
  if (!v16)
  {
    WebCore::AsyncScrollingCoordinator::stateNodeForScrollableArea((WebCore::AsyncScrollingCoordinator *)&v35, a1, (uint64_t)a2);
    v20 = v35;
    if (v35)
    {
      v21 = *(unsigned __int8 *)(v35 + 16);
      v22 = v21 > 5;
      v23 = (1 << v21) & 0x2B;
      if (v22 || v23 == 0)
      {
        v10 = 0;
      }
      else
      {
        if (*(_BYTE *)(a4 + 12))
        {
          v30[0] = 1;
          *(_QWORD *)&v30[4] = *(_QWORD *)(a4 + 4);
          *(_DWORD *)&v30[12] = 1;
          v30[16] = *(_BYTE *)a4;
          *(_WORD *)&v30[17] = *(_WORD *)(a4 + 1);
          v30[20] = 0;
          v34 = 0;
          WebCore::ScrollingStateScrollingNode::setRequestedScrollData(v35, (__int128 *)v30, 1);
        }
        else
        {
          v30[0] = 0;
          *(float32x2_t *)&v30[4] = vcvt_f32_s32(*a3);
          *(_DWORD *)&v30[12] = 0;
          v30[16] = *(_BYTE *)a4;
          *(_WORD *)&v30[17] = *(_WORD *)(a4 + 1);
          v30[20] = 0;
          v34 = 0;
          v25 = *(_QWORD *)(v35 + 40);
          v26 = (_OWORD *)(v35 + 452);
          if ((v25 & 0x80) != 0)
          {
            WebCore::RequestedScrollData::merge((uint64_t)v26, v30);
          }
          else
          {
            *v26 = *(_OWORD *)v30;
            *(_DWORD *)(v20 + 467) = *(_DWORD *)&v30[15];
            if (*(_BYTE *)(v20 + 492))
              *(_BYTE *)(v20 + 492) = 0;
            *(_QWORD *)(v20 + 40) = v25 | 0x80;
            WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v20 + 48), 1);
          }
        }
        (*(void (**)(const WebCore::ScrollableArea *))(*(_QWORD *)a1 + 176))(a1);
        v10 = 1;
      }
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v20 + 8), v19);
      goto LABEL_27;
    }
    goto LABEL_31;
  }
  v10 = 1;
LABEL_27:
  if (*(_DWORD *)(v15 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  else
    --*(_DWORD *)(v15 + 8);
  return v10;
}

uint64_t WebCore::lexicalFrameFromCommonVM(WebCore *this)
{
  JSC::VM *v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v1 = (JSC::VM *)WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    goto LABEL_2;
  WTF::RunLoop::webIfExists(this);
  JSC::VM::create();
  v1 = (JSC::VM *)v10;
  WebCore::g_commonVMOrNull = v10;
  if (__ldaxr((unsigned int *)(v10 + 1096)))
  {
    __clrex();
  }
  else if (!__stlxr(4u, (unsigned int *)(v10 + 1096)))
  {
    goto LABEL_24;
  }
  JSC::Heap::acquireAccessSlow((JSC::Heap *)(v10 + 192));
LABEL_24:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v10 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v10 + 584));
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v10, 0);
LABEL_2:
  result = *((_QWORD *)v1 + 5);
  if (result)
  {
    v3 = *(_QWORD *)(result + 24);
    result = (v3 & 0xFFFE000000000007) == 3
           ? JSC::CallFrame::lexicalGlobalObjectFromNativeCallee((JSC::CallFrame *)result, v1)
           : *(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28);
    if (result)
    {
      v4 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
      v5 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
      v6 = (char **)(16 * v4);
      if ((_DWORD)v4)
        v7 = v6 == &WebCore::JSDOMWindow::s_info;
      else
        v7 = 1;
      if (!v7)
      {
        do
        {
          v6 = (char **)v6[2];
          v5 = v6 != 0;
        }
        while (v6 != &WebCore::JSDOMWindow::s_info && v6 != 0);
      }
      if (v5)
      {
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 3408) + 104))(*(_QWORD *)(result + 3408));
        if (result)
        {
          if (*(_BYTE *)(result + 144))
            return 0;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t WebCore::StorageNamespaceProvider::transientLocalStorageNamespace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _BOOL4 v26;
  BOOL v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t result;
  uint64_t *v40;
  uint64_t *v41;
  int v42;
  unsigned int v43;
  WebCore::ScriptableDocumentParser *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned __int16 v47;
  char v48;
  unsigned int *v49;
  uint64_t *v50;

  v6 = (uint64_t *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  if (v7
    || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash((uint64_t *)(a1 + 24), 8u, 0), (v7 = *v6) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v47 = 0;
  v48 = 0;
  v9 = *(unsigned int *)(a2 + 32);
  v49 = &v46;
  if ((_DWORD)v9 == -1)
    v10 = -1;
  else
    v10 = v9;
  v11 = (v10 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v10 - 1640531527) << 16) ^ ((unsigned __int16)v10
                                                                                             - 1640531527);
  v12 = (v10 >> 37) & 0x7FFF800 ^ ((v11 + WORD2(v10) + (v11 >> 11)) << 16) ^ (v11 + WORD2(v10) + (v11 >> 11));
  v46 = v12 + (v12 >> 11);
  if ((_DWORD)v9 == -1)
  {
LABEL_69:
    v44 = (WebCore::ScriptableDocumentParser *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::ScriptableDocumentParser::scriptsWaitingForStylesheetsExecutionTimerFired(v44);
  }
  v45 = a1;
  v13 = (uint64_t *)(a2 + 8);
  v50 = (uint64_t *)&v49;
  ((void (*)(uint64_t **, uint64_t))off_1E344FC58[v9])(&v50, a2 + 8);
  v14 = v46;
  if (v48)
  {
    v43 = (v46 + v47) ^ ((v46 + v47) << 11);
    v14 = v43 + (v43 >> 17);
  }
  v15 = (v14 ^ (8 * v14)) + ((v14 ^ (8 * v14)) >> 5);
  v16 = (v15 ^ (4 * v15)) + ((v15 ^ (4 * v15)) >> 15);
  v17 = v16 ^ (v16 << 10);
  if (!v17)
    v17 = 0x800000;
  v18 = v17 & v8;
  v19 = (uint64_t *)(v7 + 40 * (v17 & v8));
  if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v19) & 1) == 0)
  {
    v20 = 0;
    v21 = 1;
    while (1)
    {
      v22 = *((unsigned int *)v19 + 6);
      if ((_DWORD)v22 == -1)
        goto LABEL_69;
      v50 = (uint64_t *)&v49;
      if ((((uint64_t (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v22])(&v50, v19) & 1) != 0)
      {
        v20 = v19;
      }
      else
      {
        if (v19 == v13)
        {
          v19 = (uint64_t *)(a2 + 8);
          goto LABEL_56;
        }
        v23 = *((unsigned int *)v19 + 6);
        v24 = *(_DWORD *)(a2 + 32);
        v26 = v24 == (_DWORD)v23 && v24 != -1;
        if ((_DWORD)v23 == -1 || !v26)
        {
          v27 = v24 == -1;
          if ((_DWORD)v23 == -1)
            v28 = v27;
          else
            v28 = v26;
          if ((v28 & 1) != 0)
            goto LABEL_56;
        }
        else
        {
          v50 = (uint64_t *)&v49;
          if ((((uint64_t (*)(uint64_t **, uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v23])(&v50, v19, v13) & 1) != 0)goto LABEL_56;
        }
      }
      v18 = (v18 + v21) & v8;
      v19 = (uint64_t *)(v7 + 40 * v18);
      ++v21;
      if (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v19))
      {
        if (v20)
        {
          v20[4] = 0;
          *(_OWORD *)v20 = 0u;
          *((_OWORD *)v20 + 1) = 0u;
          --*(_DWORD *)(*v6 - 16);
          v19 = v20;
        }
        break;
      }
    }
  }
  v29 = *((unsigned int *)v19 + 6);
  v30 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v29 == -1)
  {
    if ((_DWORD)v30 == -1)
      goto LABEL_40;
  }
  else if ((_DWORD)v30 == -1)
  {
    ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_17[v29])(&v50, v19);
    *((_DWORD *)v19 + 6) = -1;
    goto LABEL_40;
  }
  v50 = v19;
  ((void (*)(uint64_t **, uint64_t *, uint64_t *))off_1E344FC88[v30])(&v50, v19, v13);
LABEL_40:
  v31 = (_DWORD *)v19[4];
  v19[4] = 0;
  if (v31)
  {
    if (v31[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
    else
      --v31[2];
  }
  v32 = *v6;
  if (*v6)
    v33 = *(_DWORD *)(v32 - 12) + 1;
  else
    v33 = 1;
  *(_DWORD *)(v32 - 12) = v33;
  v34 = *v6;
  if (*v6)
    v35 = *(_DWORD *)(v34 - 12);
  else
    v35 = 0;
  v36 = (*(_DWORD *)(v34 - 16) + v35);
  v37 = *(unsigned int *)(v34 - 4);
  if (v37 <= 0x400)
  {
    if (3 * v37 > 4 * v36)
      goto LABEL_56;
    if (!(_DWORD)v37)
    {
      v38 = 8;
      goto LABEL_55;
    }
LABEL_52:
    v38 = (_DWORD)v37 << (6 * *(_DWORD *)(v34 - 12) >= (2 * v37));
LABEL_55:
    v19 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v6, v38, (uint64_t)v19);
    goto LABEL_56;
  }
  if (v37 <= 2 * v36)
    goto LABEL_52;
LABEL_56:
  result = v19[4];
  if (result)
    return result;
  (*(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v45 + 40))(&v50, v45, a2, 5242880, a3);
  v40 = v50;
  v50 = 0;
  v41 = (uint64_t *)v19[4];
  v19[4] = (uint64_t)v40;
  if (v41)
  {
    v42 = *((_DWORD *)v41 + 2) - 1;
    if (*((_DWORD *)v41 + 2) == 1)
    {
      (*(void (**)(uint64_t *))(*v41 + 8))(v41);
      v41 = v50;
      v50 = 0;
      if (!v41)
        return v19[4];
      v42 = *((_DWORD *)v41 + 2) - 1;
      if (*((_DWORD *)v41 + 2) == 1)
      {
        (*(void (**)(uint64_t *))(*v41 + 8))(v41);
        return v19[4];
      }
    }
    *((_DWORD *)v41 + 2) = v42;
  }
  return v19[4];
}

uint64_t WebCore::ScriptableDocumentParser::scriptsWaitingForStylesheetsExecutionTimerFired(WebCore::ScriptableDocumentParser *this)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;
  void *v6;

  ++*((_DWORD *)this + 2);
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = 0;
      *(_DWORD *)(v3 + 24) += 2;
      goto LABEL_4;
    }
  }
  else
  {
    v3 = 0;
  }
  v4 = 1;
LABEL_4:
  result = WebCore::Style::Scope::hasPendingSheets(*(WebCore::Style::Scope **)(v3 + 1328));
  if ((result & 1) == 0)
    result = (*(uint64_t (**)(WebCore::ScriptableDocumentParser *))(*(_QWORD *)this + 192))(this);
  if (*((_BYTE *)this + 12) != 3)
    result = WebCore::Document::checkCompleted(v3);
  if ((v4 & 1) == 0)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v3, v6);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  if (*((_DWORD *)this + 2) == 1)
    return (*(uint64_t (**)(WebCore::ScriptableDocumentParser *))(*(_QWORD *)this + 8))(this);
  --*((_DWORD *)this + 2);
  return result;
}

void WebCore::PositionedDescendantsMap::removeDescendant(WebCore::PositionedDescendantsMap *this, const WebCore::RenderBox *a2)
{
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  WTF *v15;
  _QWORD *v17;
  WTF *v18;
  WTF **v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  WTF *v35;
  WTF *v36;
  WTF *v37;
  WTF *v38;
  char v39[8];
  uint64_t v40;

  v4 = (uint64_t *)((char *)this + 16);
  v5 = *((_DWORD *)this + 6);
  v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 6) = v5 + 1;
  if (v5 > v6)
    WTF::WeakHashMap<WebCore::RenderBox const,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((uint64_t)this + 16, a2);
  v7 = (WTF *)*((_QWORD *)a2 + 1);
  if (v7)
  {
    if (*((_QWORD *)v7 + 1))
    {
      v8 = *v4;
      if (*v4)
      {
        v9 = *(_DWORD *)(v8 - 8);
        v10 = ((unint64_t)v7 + ~((_QWORD)v7 << 32)) ^ (((unint64_t)v7 + ~((_QWORD)v7 << 32)) >> 22);
        v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
        v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
        v13 = v9 & ((v12 >> 31) ^ v12);
        for (i = 1; ; ++i)
        {
          v15 = *(WTF **)(v8 + 16 * v13);
          if (!v15)
            return;
          if (v15 != (WTF *)-1 && v15 == v7)
            break;
          v13 = (v13 + i) & v9;
        }
        if (v13 != *(_DWORD *)(v8 - 4))
        {
          v17 = (_QWORD *)(v8 + 16 * v13);
          v19 = (WTF **)(v17 + 1);
          v18 = (WTF *)v17[1];
          v17[1] = 0;
          v20 = (_QWORD *)*v4;
          if (!*v4 || (v20 += 2 * *((unsigned int *)v20 - 1), v20 != v17))
          {
            if (v20 != v17)
            {
              *v17 = 0;
              if (*(_DWORD *)v7 == 1)
              {
                WTF::fastFree(v7, a2);
                v37 = *v19;
                *v17 = -1;
                *v19 = 0;
                if (v37)
                {
                  if (*(_DWORD *)v37 == 1)
                    WTF::fastFree(v37, a2);
                  else
                    --*(_DWORD *)v37;
                }
              }
              else
              {
                --*(_DWORD *)v7;
                *v17 = -1;
                *v19 = 0;
              }
              ++*(_DWORD *)(*v4 - 16);
              v21 = *v4;
              if (*v4)
                v22 = *(_DWORD *)(v21 - 12) - 1;
              else
                v22 = -1;
              *(_DWORD *)(v21 - 12) = v22;
              v23 = *v4;
              if (*v4)
              {
                v24 = 6 * *(_DWORD *)(v23 - 12);
                v25 = *(_DWORD *)(v23 - 4);
                if (v24 < v25 && v25 >= 9)
                  WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v4, v25 >> 1);
              }
            }
          }
          if (v18)
          {
            v27 = *((_QWORD *)v18 + 1);
            if (v27)
            {
              WTF::WeakHashMap<WebCore::RenderBlock const,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::SingleThreadWeakPtrImpl>::find((uint64_t)v39, (uint64_t *)this, *(_QWORD *)(v27 + 8));
              v28 = *(_QWORD *)this;
              if (*(_QWORD *)this)
                v28 += 16 * *(unsigned int *)(v28 - 4);
              v29 = v40;
              if (v40 != v28)
              {
                WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderBox>(*(_QWORD *)(v40 + 8), (uint64_t)a2);
                v30 = *(_QWORD **)(v29 + 8);
                v31 = *v30;
                if (*v30 && *(_DWORD *)(v31 - 12))
                {
                  v32 = v30 + 1;
                  if (v30[1])
                  {
                    v33 = (_QWORD *)v30[1];
                    while (!*(_QWORD *)(*v33 + 8))
                    {
                      v33 = (_QWORD *)v33[2];
                      if (!v33)
                      {
                        v38 = (WTF *)v30[1];
                        v34 = *(_QWORD **)(v29 + 8);
                        do
                        {
                          v35 = v38;
                          v38 = (WTF *)*((_QWORD *)v38 + 2);
                          v36 = *(WTF **)v35;
                          *(_QWORD *)v35 = 0;
                          if (v36)
                          {
                            if (*(_DWORD *)v36 == 1)
                              WTF::fastFree(v36, a2);
                            else
                              --*(_DWORD *)v36;
                          }
                          WTF::fastFree(v35, a2);
                        }
                        while (v38);
                        v31 = *v34;
                        if (!*v34)
                        {
                          *v32 = 0;
                          v32[1] = 0;
                          *((_DWORD *)v32 + 4) = 0;
                          v30 = v34;
                          goto LABEL_38;
                        }
                        v30 = v34;
                        goto LABEL_35;
                      }
                    }
                    goto LABEL_40;
                  }
LABEL_35:
                  *v30 = 0;
                  WTF::fastFree((WTF *)(v31 - 16), a2);
                  v31 = *v30;
                  *v32 = 0;
                  v32[1] = 0;
                  *((_DWORD *)v32 + 4) = 0;
                  if (v31)
                  {
                    LODWORD(v31) = *(_DWORD *)(v31 - 12);
                    if (v31 > 0x7FFFFFFE)
                      LODWORD(v31) = 0x7FFFFFFF;
                  }
LABEL_38:
                  *((_DWORD *)v30 + 7) = 2 * v31;
                }
                WTF::WeakHashMap<WebCore::RenderBlock const,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::SingleThreadWeakPtrImpl>::remove((WTF **)this, (WTF **)v29);
              }
            }
LABEL_40:
            if (*(_DWORD *)v18 == 1)
              WTF::fastFree(v18, a2);
            else
              --*(_DWORD *)v18;
          }
        }
      }
    }
  }
}

unint64_t WebCore::JSSVGSVGElementPrototype::create(WebCore::JSSVGSVGElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<38u>(this, (uint64_t)&WebCore::JSSVGSVGElement::s_info, (uint64_t)&WebCore::JSSVGSVGElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::JSSVGSVGElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

WebCore::InspectorInstrumentation *WebCore::InspectorInstrumentation::willFireObserverCallback(WebCore::InspectorInstrumentation *this, WebCore::ScriptExecutionContext *a2, const WTF::String *a3)
{
  uint64_t v5;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v5 = (uint64_t)this;
    this = (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::instrumentingAgents(this, a2);
    if (this)
      return WebCore::InspectorInstrumentation::willFireObserverCallbackImpl(this, a2, v5);
  }
  return this;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeTouchAction@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  char *v16;
  uint64_t v17;
  int v18;
  char *v19;
  int v20;
  unint64_t v21;
  __int128 *v22;
  __int128 *v23;
  char v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  WTF *v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  int *v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  WTF *v38;
  void *v39;
  uint64_t result;
  WTF *v42;
  WTF *v43;
  uint64_t v44;
  _DWORD *v45;
  WTF *v46;
  WTF *v48;
  uint64_t v49;
  _DWORD *v50;
  WTF *v51;
  int v53;
  unint64_t v54;
  __int128 *v55;
  __int128 *v56;
  char v57;
  unsigned int v58;
  int *v59;
  int v60;
  WTF *v61;
  int v62;
  unsigned int v63;
  _BYTE v64[32];
  int *v65;
  WTF *v66;
  uint64_t v67;
  _BYTE v68[32];
  char *v69;
  uint64_t i;
  uint64_t v71;

  v6 = *this;
  v5 = this[1];
  if (*this >= v5)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v6 & 0x3F) != 0)
    goto LABEL_5;
  v7 = *this;
  if (*this >= v5)
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
    goto LABEL_5;
  v53 = *((_DWORD *)v7 + 4);
  if (v53 < 0)
  {
    v53 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
    *((_DWORD *)v7 + 4) = v53;
  }
  if ((unsigned __int16)v53 == 6 || (unsigned __int16)v53 == 925 || (unsigned __int16)v53 == 394)
  {
    v55 = *this;
    v54 = (unint64_t)this[1];
    if (*this == (__int128 *)v54)
    {
      v57 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
      v56 = *this;
      v55 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v56 = (__int128 *)((char *)v55 + 24);
      *this = (__int128 *)((char *)v55 + 24);
    }
    while (1)
    {
      if ((unint64_t)v56 < v54 || (v57 & 1) != 0)
      {
        if ((unint64_t)v56 >= v54)
          v56 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v58 = *(_DWORD *)v56;
      }
      else
      {
        v58 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v58;
        v57 = 1;
      }
      if ((v58 & 0x3F) != 0x10)
        break;
      v56 = (__int128 *)((char *)*this + 24);
      *this = v56;
    }
    if ((*(_DWORD *)v55 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v55 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v55 + 1), *((unsigned int *)v55 + 1) | ((unint64_t)((*(_DWORD *)v55 >> 22) & 1) << 32));
        *((_DWORD *)v55 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x194589B30);
      }
    }
    v59 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v59 += 2;
    *a3 = v59;
  }
  else
  {
LABEL_5:
    v69 = (char *)&v71;
    for (i = 3; ; HIDWORD(i) = v15 + 1)
    {
      v9 = *this;
      v8 = this[1];
      if (*this >= v8)
      {
        v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_BYTE *)v9 & 0x3F) != 0)
        goto LABEL_10;
      v10 = *this;
      if (*this >= v8)
      {
        v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v10 & 0x3F) != 0)
        goto LABEL_10;
      v20 = *((_DWORD *)v10 + 4);
      if (v20 < 0)
      {
        v20 = WebCore::cssValueKeywordID(*((_QWORD *)v10 + 1), *((unsigned int *)v10 + 1) | ((unint64_t)((*(_DWORD *)v10 >> 22) & 1) << 32));
        *((_DWORD *)v10 + 4) = v20;
      }
      if ((unsigned __int16)v20 - 926 > 2)
      {
LABEL_10:
        v11 = 0;
        v12 = 0;
        v13 = 0;
      }
      else
      {
        v22 = *this;
        v21 = (unint64_t)this[1];
        if (*this == (__int128 *)v21)
        {
          v24 = 1;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          }
          v23 = *this;
          v22 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v23 = (__int128 *)((char *)v22 + 24);
          *this = (__int128 *)((char *)v22 + 24);
        }
        while (1)
        {
          if ((unint64_t)v23 < v21 || (v24 & 1) != 0)
          {
            if ((unint64_t)v23 >= v21)
              v23 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v25 = *(_DWORD *)v23;
          }
          else
          {
            v25 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v25;
            v24 = 1;
          }
          if ((v25 & 0x3F) != 0x10)
            break;
          v23 = (__int128 *)((char *)*this + 24);
          *this = v23;
        }
        if ((*(_DWORD *)v22 & 0x3F) != 0)
        {
          LOWORD(v26) = 0;
        }
        else
        {
          v26 = *((_DWORD *)v22 + 4);
          if (v26 < 0)
          {
            v26 = WebCore::cssValueKeywordID(*((_QWORD *)v22 + 1), *((unsigned int *)v22 + 1) | ((unint64_t)((*(_DWORD *)v22 >> 22) & 1) << 32));
            *((_DWORD *)v22 + 4) = v26;
          }
        }
        v13 = v26 & 0xFF00;
        v11 = v26;
        v12 = 0x10000;
      }
      v14 = v12 | v11 | v13;
      LODWORD(v66) = v14;
      if (v14 < 0x10000)
        break;
      v15 = HIDWORD(i);
      if (HIDWORD(i))
      {
        v16 = v69;
        v17 = HIDWORD(i);
        do
        {
          v18 = *(unsigned __int16 *)v16;
          v16 += 2;
          if (v18 == (unsigned __int16)v14)
            goto LABEL_69;
        }
        while (--v17);
      }
      if (HIDWORD(i) == (_DWORD)i)
      {
        v19 = WTF::Vector<WebCore::CSSValueID,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v69, HIDWORD(i) + 1, (unint64_t)&v66);
        v15 = HIDWORD(i);
        *(_WORD *)&v69[2 * HIDWORD(i)] = *(_WORD *)v19;
      }
      else
      {
        *(_WORD *)&v69[2 * HIDWORD(i)] = v14;
      }
    }
    if (!HIDWORD(i))
    {
LABEL_69:
      *a3 = 0;
      goto LABEL_70;
    }
    v27 = 0;
    v28 = (WTF *)v68;
    v66 = (WTF *)v68;
    v67 = 4;
    v29 = 2 * HIDWORD(i);
    v30 = v69;
    do
    {
      v31 = *(unsigned __int16 *)v30;
      if (v31 >= 0x48E)
      {
        __break(0xC471u);
        JUMPOUT(0x194589B50);
      }
      v32 = &WebCore::staticCSSValuePool[4 * v31];
      v32[3088] += 2;
      v33 = v27;
      if (v27 == (_DWORD)v67)
      {
        v35 = v27 + ((unint64_t)v27 >> 2);
        if (v35 >= 0x10)
          v36 = v35 + 1;
        else
          v36 = 16;
        if (v36 <= (unint64_t)v27 + 1)
          v37 = v27 + 1;
        else
          v37 = v36;
        if (v37 < 5)
        {
          v38 = (WTF *)v68;
          v66 = (WTF *)v68;
          LODWORD(v67) = 4;
        }
        else
        {
          if (v37 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x194589BA0);
          }
          v38 = (WTF *)WTF::fastMalloc((WTF *)(8 * v37));
          LODWORD(v67) = v37;
          v66 = v38;
        }
        memcpy(v38, v28, 8 * v33);
        if (v68 != (_BYTE *)v28)
        {
          if (v66 == v28)
          {
            v66 = 0;
            LODWORD(v67) = 0;
          }
          WTF::fastFree(v28, v39);
        }
        v27 = HIDWORD(v67);
        v28 = v66;
        v34 = (_QWORD *)((char *)v66 + 8 * HIDWORD(v67));
      }
      else
      {
        v34 = (_QWORD *)((char *)v28 + 8 * v27);
      }
      *v34 = v32 + 3088;
      HIDWORD(v67) = ++v27;
      v30 += 2;
      v29 -= 2;
    }
    while (v29);
    v42 = v66;
    v61 = (WTF *)v64;
    v62 = 4;
    if (v66 == (WTF *)v68)
    {
      memcpy(v64, v68, 8 * v27);
    }
    else
    {
      v66 = (WTF *)v68;
      v61 = v42;
      v60 = v67;
      LODWORD(v67) = 4;
      v62 = v60;
    }
    HIDWORD(v67) = 0;
    v63 = v27;
    WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v61, (uint64_t *)&v65);
    *a3 = v65;
    if (v63)
    {
      v43 = v61;
      v44 = 8 * v63;
      do
      {
        v45 = *(_DWORD **)v43;
        *(_QWORD *)v43 = 0;
        if (v45)
        {
          if (*v45 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v45, a2);
          else
            *v45 -= 2;
        }
        v43 = (WTF *)((char *)v43 + 8);
        v44 -= 8;
      }
      while (v44);
    }
    v46 = v61;
    if (v64 != (_BYTE *)v61 && v61 != 0)
    {
      v61 = 0;
      v62 = 0;
      WTF::fastFree(v46, a2);
    }
    if (HIDWORD(v67))
    {
      v48 = v66;
      v49 = 8 * HIDWORD(v67);
      do
      {
        v50 = *(_DWORD **)v48;
        *(_QWORD *)v48 = 0;
        if (v50)
        {
          if (*v50 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v50, a2);
          else
            *v50 -= 2;
        }
        v48 = (WTF *)((char *)v48 + 8);
        v49 -= 8;
      }
      while (v49);
    }
    v51 = v66;
    if (v68 != (_BYTE *)v66 && v66 != 0)
    {
      v66 = 0;
      LODWORD(v67) = 0;
      WTF::fastFree(v51, a2);
    }
LABEL_70:
    result = (uint64_t)v69;
    if (&v71 != (uint64_t *)v69 && v69 != 0)
    {
      v69 = 0;
      LODWORD(i) = 0;
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebCore::SubframeLoadingDisabler::canLoadFrame(WebCore::SubframeLoadingDisabler *this, WebCore::HTMLFrameOwnerElement *a2)
{
  WebCore::SubframeLoadingDisabler *v2;
  char v3;
  WebCore::SubframeLoadingDisabler *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  WebCore::SubframeLoadingDisabler *v10;
  int v11;
  WebCore::SubframeLoadingDisabler **v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v17;

  v2 = this;
  *((_DWORD *)this + 6) += 2;
  while (1)
  {
    v4 = v2;
    if ((v3 & 1) == 0)
    {
      WebCore::SubframeLoadingDisabler::disabledSubtreeRoots(void)::nodes = 0;
      v3 = 1;
      goto LABEL_9;
    }
    if (!WebCore::SubframeLoadingDisabler::disabledSubtreeRoots(void)::nodes)
      goto LABEL_9;
    v5 = *(_DWORD *)(WebCore::SubframeLoadingDisabler::disabledSubtreeRoots(void)::nodes - 8);
    v6 = ((unint64_t)v2 + ~((_QWORD)v2 << 32)) ^ (((unint64_t)v2 + ~((_QWORD)v2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WebCore::SubframeLoadingDisabler **)(WebCore::SubframeLoadingDisabler::disabledSubtreeRoots(void)::nodes
                                               + 16 * v9);
    if (v10 == v2)
      break;
    v11 = 1;
    while (v10)
    {
      v9 = (v9 + v11) & v5;
      v10 = *(WebCore::SubframeLoadingDisabler **)(WebCore::SubframeLoadingDisabler::disabledSubtreeRoots(void)::nodes
                                                 + 16 * v9);
      ++v11;
      if (v10 == v2)
        goto LABEL_17;
    }
LABEL_9:
    if ((*((_WORD *)v2 + 14) & 0x80) == 0)
    {
      v12 = (WebCore::SubframeLoadingDisabler **)((char *)v2 + 32);
      goto LABEL_11;
    }
    v17 = *((_QWORD *)v2 + 25);
    if (v17)
    {
      v12 = (WebCore::SubframeLoadingDisabler **)(v17 + 8);
LABEL_11:
      v2 = *v12;
      if (*v12)
        *((_DWORD *)v2 + 6) += 2;
      goto LABEL_13;
    }
    v2 = 0;
LABEL_13:
    if (*((_DWORD *)v4 + 6) == 2)
    {
      if ((*((_WORD *)v4 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v4, a2);
      }
    }
    else
    {
      *((_DWORD *)v4 + 6) -= 2;
    }
    if (!v2)
      return 1;
  }
LABEL_17:
  v14 = *((_DWORD *)v2 + 6);
  v15 = v14 - 2;
  if (v14 == 2)
  {
    if ((*((_WORD *)v2 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v2, a2);
    return 0;
  }
  else
  {
    v13 = 0;
    *((_DWORD *)v2 + 6) = v15;
  }
  return v13;
}

unint64_t WebCore::JSMediaSessionPrototype::create(WebCore::JSMediaSessionPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<9u>(this, (uint64_t)&WebCore::JSMediaSession::s_info, (uint64_t)&WebCore::JSMediaSessionPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::JSMediaSessionPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::CachedRawResourceClient::responseReceived(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  if (*a4)
  {
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

BOOL WebCore::isBlankTargetFrameName(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;

  if ((_DWORD)a2 == 6)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      v2 = MEMORY[0x1E0CBF868];
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a1) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[3]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
      {
        v3 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[5]);
        return v3 == *(unsigned __int8 *)(v2 + 107);
      }
    }
    else
    {
      v2 = MEMORY[0x1E0CBF868];
      if ((*(unsigned __int16 *)a1 | (32 * (*(unsigned __int16 *)a1 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
        && (*((unsigned __int16 *)a1 + 1) | (32 * (*((unsigned __int16 *)a1 + 1) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
        && (*((unsigned __int16 *)a1 + 2) | (32 * (*((unsigned __int16 *)a1 + 2) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
        && (*((unsigned __int16 *)a1 + 3) | (32 * (*((unsigned __int16 *)a1 + 3) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
        && (*((unsigned __int16 *)a1 + 4) | (32 * (*((unsigned __int16 *)a1 + 4) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
      {
        v3 = *((unsigned __int16 *)a1 + 5) | (32 * (*((unsigned __int16 *)a1 + 5) - 65 < 0x1A));
        return v3 == *(unsigned __int8 *)(v2 + 107);
      }
    }
  }
  return 0;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::VisibilityState>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  unsigned int v9;
  WTF::StringImpl *v10;

  v3 = (uint64_t *)(a1 + 41968);
  WebCore::convertEnumerationToString(a2, &v10);
  v5 = v10;
  if (!v10)
    return *v3;
  v6 = *((_DWORD *)v10 + 1);
  if (v6)
  {
    if (v6 == 1 && (v9 = WTF::StringImpl::operator[]((uint64_t)v10, 0), v9 <= 0xFF))
    {
      v7 = *(_QWORD *)(a1 + 8 * v9 + 42216);
    }
    else
    {
      v7 = v3[2849];
      if (!v7 || v5 != *(WTF::StringImpl **)(v7 + 8))
        v7 = JSC::jsStringWithCacheSlowCase();
    }
  }
  else
  {
    v7 = *v3;
  }
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, v4);
  else
    *(_DWORD *)v5 -= 2;
  return v7;
}

uint64_t *WebCore::ScriptExecutionContext::destroyedMessagePort(WebCore::ScriptExecutionContext *this, WebCore::MessagePort *a2)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WebCore::MessagePort *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v17;

  v4 = *((_QWORD *)this + 14);
  result = (uint64_t *)((char *)this + 112);
  v3 = v4;
  if (v4)
  {
    v5 = *(_DWORD *)(v3 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WebCore::MessagePort **)(v3 + 8 * v9);
    if (v10 != a2)
    {
      v17 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v17) & v5;
        v10 = *(WebCore::MessagePort **)(v3 + 8 * v9);
        ++v17;
        if (v10 == a2)
          goto LABEL_3;
      }
      v9 = *(unsigned int *)(v3 - 4);
    }
LABEL_3:
    if (v9 != *(_DWORD *)(v3 - 4))
    {
      *(_QWORD *)(v3 + 8 * v9) = -1;
      ++*(_DWORD *)(*result - 16);
      v11 = *result;
      v12 = *result ? *(_DWORD *)(v11 - 12) - 1 : -1;
      *(_DWORD *)(v11 - 12) = v12;
      v13 = *result;
      if (*result)
      {
        v14 = 6 * *(_DWORD *)(v13 - 12);
        v15 = *(_DWORD *)(v13 - 4);
        if (v14 < v15 && v15 >= 9)
          return WTF::HashTable<WebCore::MessagePort *,WebCore::MessagePort *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePort *>,WTF::HashTraits<WebCore::MessagePort *>,WTF::HashTraits<WebCore::MessagePort *>>::rehash(result, v15 >> 1, 0);
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerModelObject::startAnimation(WebCore::RenderLayerModelObject *this, double a2, const WebCore::Animation *a3, const WebCore::BlendingKeyframes *a4)
{
  uint64_t v4;
  WebCore::RenderLayerBacking *v5;

  v4 = *((_QWORD *)this + 18);
  if (v4 && (v5 = *(WebCore::RenderLayerBacking **)(v4 + 256)) != 0)
    return WebCore::RenderLayerBacking::startAnimation(v5, a2, a3, a4);
  else
    return 0;
}

double WebCore::MutableStyleProperties::create@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  double result;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
  *v3 = 0x900000001;
  v3[1] = 0;
  v3[2] = v3 + 4;
  *(_QWORD *)&result = 4;
  v3[3] = 4;
  *a1 = v3;
  return result;
}

BOOL WebCore::MutableStyleProperties::setProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, BOOL *a6)
{
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  _QWORD *v17;
  _DWORD *v18;
  _BOOL8 v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v24;
  _WORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29[3];

  if ((WebCore::isExposed(a2, (unsigned int *)(a5 + 54)) & 1) == 0 && !WebCore::isInternal(a2))
    return 0;
  if (*(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4))
  {
    *(_BYTE *)(a5 + 48) = *(_BYTE *)(a1 + 4) & 7;
    v20 = WebCore::CSSParser::parseValue(a1, a2);
    if (a6)
      *a6 = v20 == 2;
    return v20 == 0;
  }
  else
  {
    if ((a2 - 2) <= 0x1C8)
    {
      v12 = *(_QWORD *)(a1 + 16);
      v13 = *(_DWORD *)(a1 + 28);
      v14 = v13 - 1;
      while ((v14 & 0x80000000) == 0)
      {
        v15 = v14;
        v16 = *(_WORD *)(v12 + 16 * v14--) & 0x3FF;
        if (v16 == (_DWORD)a2)
        {
          v17 = (_QWORD *)(v12 + 16 * v15);
          v18 = (_DWORD *)v17[1];
          v17[1] = 0;
          if (v18)
          {
            if (*v18 == 2)
            {
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v11);
              v13 = *(_DWORD *)(a1 + 28);
            }
            else
            {
              *v18 -= 2;
            }
          }
          memmove(v17, v17 + 2, *(_QWORD *)(a1 + 16) + 16 * v13 - (_QWORD)(v17 + 2));
          --*(_DWORD *)(a1 + 28);
          return 1;
        }
      }
      return 0;
    }
    v21 = WebCore::shorthandForProperty(a2);
    if (!*(_DWORD *)(a1 + 28))
      return 0;
    v24 = a1 + 16;
    v28 = 0;
    if (v22)
    {
      v25 = (_WORD *)v21;
      v26 = 2 * v22;
      do
      {
        WTF::HashTable<WebCore::CSSPropertyID,WebCore::CSSPropertyID,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>>::add(&v28, v25++, (uint64_t)v29);
        v26 -= 2;
      }
      while (v26);
    }
    v29[0] = &v28;
    v19 = WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<WebCore::MutableStyleProperties::removeProperties(std::span<WebCore::CSSPropertyID const,18446744073709551615ul>)::$_0>(v24, v29) != 0;
    if (v28)
      WTF::fastFree((WTF *)(v28 - 16), v27);
  }
  return v19;
}

unint64_t WebCore::JSPerformancePrototype::create(WebCore::JSPerformancePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  int *v9;
  uint64_t v10;
  BOOL v11;
  char **v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  char **v16;
  BOOL v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  JSC::Structure *v22;
  int v23;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  WTF::StringImpl *v34[6];
  int v35;
  int v36;
  JSC::Structure *v37;
  int v38;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v33);
    *((_QWORD *)this + 4865) = SlowCase + (int)v33;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v9 = (int *)((char *)this + 93124);
  JSC::reifyStaticProperties<16u>(this, (uint64_t)&WebCore::JSPerformance::s_info, (uint64_t)&WebCore::JSPerformancePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v10 = *(unsigned int *)(16 * (**(_DWORD **)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28) & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (**(_DWORD **)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28) & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSDOMWindowBase::s_info;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
    while (v12 != &WebCore::JSDOMWindowBase::s_info && v12 != 0);
  }
  if (!v11)
  {
    WTF::AtomStringImpl::addLiteral();
    v27 = v34[0];
    v28 = *v9;
    *v9 = 1;
    LODWORD(v34[0]) = -1;
    WORD2(v34[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v28;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v29);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
  v14 = *(unsigned int *)(16 * (**(_DWORD **)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28) & 0xFFFFFFFE) + 0x4C);
  v15 = *(_DWORD *)(16 * (**(_DWORD **)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28) & 0xFFFFFFFE) + 0x4C) != 0;
  v16 = (char **)(16 * v14);
  if ((_DWORD)v14)
    v17 = v16 == &WebCore::JSDOMWindowBase::s_info;
  else
    v17 = 1;
  if (!v17)
  {
    do
    {
      v16 = (char **)v16[2];
      v15 = v16 != 0;
    }
    while (v16 != &WebCore::JSDOMWindowBase::s_info && v16 != 0);
  }
  if (v15)
  {
    if (v11)
      goto LABEL_18;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral();
    v30 = v34[0];
    v31 = *v9;
    *v9 = 1;
    LODWORD(v34[0]) = -1;
    WORD2(v34[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v31;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v32);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
LABEL_18:
  v18 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v20 = JSC::JSString::create((uint64_t)this, v34);
  v21 = v34[0];
  v34[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v19);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v38 = *(_DWORD *)SlowCase;
  v37 = v22;
  v23 = JSC::Structure::outOfLineCapacity(v22);
  v35 = 0;
  v36 = v23;
  v34[0] = (WTF::StringImpl *)&v36;
  v34[1] = (WTF::StringImpl *)SlowCase;
  v34[2] = this;
  v34[3] = (WTF::StringImpl *)&v38;
  v34[4] = (WTF::StringImpl *)&v37;
  v34[5] = (WTF::StringImpl *)&v35;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v22, this, v18, 6, (uint64_t)v34);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v35, v20);
  *((_DWORD *)v22 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::JSPerformancePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *WebCore::JSIntersectionObserver::visitAdditionalChildren<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 24);
  result = *(_QWORD **)(v4 + 80);
  if (result)
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 32))(result, a2);
    v4 = *(_QWORD *)(a1 + 24);
  }
  v6 = *(_QWORD *)(v4 + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      if ((*(_BYTE *)(v7 + 22) & 8) == 0)
      {
        while (1)
        {
          v8 = v7;
          if ((*(_WORD *)(v7 + 28) & 0x80) != 0)
          {
            v10 = *(_QWORD *)(v7 + 200);
            if (!v10)
              goto LABEL_14;
            v9 = (uint64_t *)(v10 + 8);
          }
          else
          {
            v9 = (uint64_t *)(v7 + 32);
          }
          v7 = *v9;
          if (!v7)
            goto LABEL_14;
        }
      }
      v8 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
LABEL_14:
      if (v8 && !*(_BYTE *)(a2 + 130))
      {
        result = *(_QWORD **)(a2 + 120);
        v11 = result[6];
        v12 = *(_DWORD *)(v11 + 4);
        v13 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
        v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
        v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        v16 = v12 & ((v15 >> 31) ^ v15);
        v17 = v16;
        while (1)
        {
          v18 = *(_QWORD *)(v11 + 8 * v17 + 16);
          if (!v18)
            break;
          if (v8 == v18)
            return result;
          v17 = (v17 + 1) & v12;
          if (v17 == v16)
          {
            __break(0xC471u);
            JUMPOUT(0x19458ABE4);
          }
        }
        result = (_QWORD *)WTF::ConcurrentPtrHashSet::addSlow();
        if ((_DWORD)result)
        {
          if (*(_BYTE *)(a2 + 131))
            result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v8);
          ++*(_QWORD *)(a2 + 72);
        }
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSIntersectionObserver::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSIntersectionObserver::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
}

unint64_t WebCore::JSHTMLElementPrototype::create(WebCore::JSHTMLElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  int *v9;
  char **v10;
  uint64_t v11;
  char *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  int v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  int v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  int v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  int v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  int v70;
  WTF::StringImpl *v71;
  unint64_t v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  JSC::Structure *v76;
  int v77;
  unint64_t v79;
  WTF::StringImpl *v80[6];
  int v81;
  int v82;
  JSC::Structure *v83;
  int v84;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v79 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v79);
    *((_QWORD *)this + 4865) = SlowCase + (int)v79;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v9 = (int *)((char *)this + 93124);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  v10 = &WebCore::JSHTMLElementPrototypeTableValues;
  v11 = 147;
  do
  {
    v12 = v10[1];
    if (v12)
    {
      if (v12 == (char *)2)
        JSC::SmallStrings::singleCharacterStringRep((WebCore::JSHTMLElementPrototype *)((char *)this + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v13 = v80[0];
      JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSHTMLElement::s_info, (unint64_t *)v80, (uint64_t)v10, (unsigned __int8 *)SlowCase);
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v14);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    v10 += 5;
    --v11;
  }
  while (v11);
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v15 && *(_BYTE *)(v15 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458B674);
  }
  v16 = v15 - 192;
  if (!v15)
    v16 = 0;
  v17 = *(_QWORD *)(*(_QWORD *)(v16 + 680) + 688);
  v18 = (v17 & 0x20000000) == 0;
  if ((v17 & 0x20000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v19 = v80[0];
    v20 = *v9;
    *v9 = 1;
    LODWORD(v80[0]) = -1;
    WORD2(v80[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v20;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v21);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  v22 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v22 && *(_BYTE *)(v22 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458B694);
  }
  v23 = v22 - 192;
  if (!v22)
    v23 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v23 + 680) + 688) & 0x20000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v24 = v80[0];
    v25 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v80[0]) = -1;
    WORD2(v80[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v25;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v26);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  v27 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v27 && *(_BYTE *)(v27 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458B6B4);
  }
  v28 = v27 - 192;
  if (!v27)
    v28 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v28 + 680) + 688) & 0x20000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v29 = v80[0];
    v30 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v80[0]) = -1;
    WORD2(v80[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v30;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v31);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  v32 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v32 && *(_BYTE *)(v32 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458B6D4);
  }
  v33 = v32 - 192;
  if (!v32)
    v33 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v33 + 680) + 688) & 0x20000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v34 = v80[0];
    v35 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v80[0]) = -1;
    WORD2(v80[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v35;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v36);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  v37 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v37 && *(_BYTE *)(v37 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458B6F4);
  }
  v38 = v37 - 192;
  if (!v37)
    v38 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v38 + 680) + 672) & 0x2000000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v39 = v80[0];
    v40 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v80[0]) = -1;
    WORD2(v80[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v40;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v41);
      else
        *(_DWORD *)v39 -= 2;
    }
  }
  v42 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v42 && *(_BYTE *)(v42 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458B714);
  }
  v43 = v42 - 192;
  if (!v42)
    v43 = 0;
  if ((*(_DWORD *)(*(_QWORD *)(v43 + 680) + 696) & 1) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v44 = v80[0];
    v45 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v80[0]) = -1;
    WORD2(v80[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v45;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v46);
      else
        *(_DWORD *)v44 -= 2;
    }
  }
  v47 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v47 && *(_BYTE *)(v47 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458B734);
  }
  v48 = v47 - 192;
  if (!v47)
    v48 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v48 + 680) + 712) & 0x4000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v49 = v80[0];
    v50 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v80[0]) = -1;
    WORD2(v80[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v50;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, v51);
      else
        *(_DWORD *)v49 -= 2;
    }
  }
  v52 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v52 && *(_BYTE *)(v52 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458B754);
  }
  v53 = v52 - 192;
  if (!v52)
    v53 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v53 + 680) + 712) & 0x4000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v54 = v80[0];
    v55 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v80[0]) = -1;
    WORD2(v80[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v55;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v56);
      else
        *(_DWORD *)v54 -= 2;
    }
  }
  v57 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v57 && *(_BYTE *)(v57 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458B774);
  }
  v58 = v57 - 192;
  if (!v57)
    v58 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v58 + 680) + 712) & 0x4000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v59 = v80[0];
    v60 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v80[0]) = -1;
    WORD2(v80[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v60;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, v61);
      else
        *(_DWORD *)v59 -= 2;
    }
  }
  v62 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v62 && *(_BYTE *)(v62 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458B794);
  }
  v63 = v62 - 192;
  if (!v62)
    v63 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v63 + 680) + 712) & 0x4000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v64 = v80[0];
    v65 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v80[0]) = -1;
    WORD2(v80[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v65;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
        WTF::StringImpl::destroy(v64, v66);
      else
        *(_DWORD *)v64 -= 2;
    }
  }
  v67 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v67 && *(_BYTE *)(v67 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458B7B4);
  }
  v68 = v67 - 192;
  if (!v67)
    v68 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v68 + 680) + 712) & 0x4000000000000) != 0)
  {
    if (!v18)
      goto LABEL_107;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral();
    v69 = v80[0];
    v70 = *v9;
    *v9 = 1;
    LODWORD(v80[0]) = -1;
    WORD2(v80[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v70;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2)
        WTF::StringImpl::destroy(v69, v71);
      else
        *(_DWORD *)v69 -= 2;
    }
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
LABEL_107:
  v72 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v74 = JSC::JSString::create((uint64_t)this, v80);
  v75 = v80[0];
  v80[0] = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, v73);
    else
      *(_DWORD *)v75 -= 2;
  }
  v76 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v84 = *(_DWORD *)SlowCase;
  v83 = v76;
  v77 = JSC::Structure::outOfLineCapacity(v76);
  v81 = 0;
  v82 = v77;
  v80[0] = (WTF::StringImpl *)&v82;
  v80[1] = (WTF::StringImpl *)SlowCase;
  v80[2] = this;
  v80[3] = (WTF::StringImpl *)&v84;
  v80[4] = (WTF::StringImpl *)&v83;
  v80[5] = (WTF::StringImpl *)&v81;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v76, this, v72, 6, (uint64_t)v80);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v81, v74);
  *((_DWORD *)v76 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::JSHTMLElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGeolocationPrototype::create(WebCore::JSGeolocationPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSGeolocationPrototype::finishCreation((WebCore::JSGeolocationPrototype *)v6, this);
  return v6;
}

WTF::StringImpl *WebCore::JSGeolocationPrototype::finishCreation(WebCore::JSGeolocationPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(a2, (uint64_t)&WebCore::JSGeolocation::s_info, &WebCore::JSGeolocationPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WebCore::HTMLFormControlElement::didRecalcStyle(unsigned int *result)
{
  unsigned int *v1;
  unsigned int *v2;
  void *v3;
  uint64_t v4;
  unsigned int **v5;
  unsigned int **v6;
  __int16 v7;
  __int16 v8;
  unsigned int *v9;

  if ((*((_QWORD *)result + 8) & 0xFFFFFFFFFFFFLL) == 0)
    return result;
  if ((*(_BYTE *)((*((_QWORD *)result + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19458BBC8);
  }
  v1 = result;
  result[6] += 4;
  v2 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = &off_1E33BC658;
  *((_QWORD *)v2 + 1) = v1;
  v9 = v2;
  {
    v4 = dword_1EE2F96B4;
    if (dword_1EE2F96B4 != dword_1EE2F96B0)
    {
      v6 = (unsigned int **)(WebCore::Style::postResolutionCallbackQueue(void)::vector
                           + 8 * dword_1EE2F96B4);
      v5 = &v9;
      goto LABEL_6;
    }
  }
  else
  {
    v4 = 0;
    WebCore::Style::postResolutionCallbackQueue(void)::vector = 0;
    *(_QWORD *)&dword_1EE2F96B0 = 0;
  }
  v5 = (unsigned int **)WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&WebCore::Style::postResolutionCallbackQueue(void)::vector, v4 + 1, (unint64_t)&v9);
  LODWORD(v4) = dword_1EE2F96B4;
  v6 = (unsigned int **)(WebCore::Style::postResolutionCallbackQueue(void)::vector + 8 * dword_1EE2F96B4);
  v2 = *v5;
LABEL_6:
  *v5 = 0;
  *v6 = v2;
  dword_1EE2F96B4 = v4 + 1;
  result = v9;
  v9 = 0;
  if (result)
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  if (v1[6] == 2)
  {
    v7 = *((_WORD *)v1 + 15);
    if ((v7 & 0x400) == 0)
    {
      v8 = *((_WORD *)v1 + 14);
      if ((v8 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)v1, v3);
      }
      else
      {
        if ((v8 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)v1 + 20) + 16))(*((_QWORD *)v1 + 20));
          v7 = *((_WORD *)v1 + 15);
        }
        *((_WORD *)v1 + 15) = v7 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v1 + 72))(v1);
      }
    }
  }
  else
  {
    v1[6] -= 2;
  }
  return result;
}

void WebCore::FontCascadeDescription::~FontCascadeDescription(WebCore::FontCascadeDescription *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v3 = (unsigned int *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v3)
  {
    if (*v3 == 1)
    {
      v4 = v3[1];
      if ((_DWORD)v4)
      {
        v5 = (WTF::StringImpl **)(v3 + 2);
        v6 = 8 * v4;
        do
        {
          v7 = *v5;
          *v5 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
          ++v5;
          v6 -= 8;
        }
        while (v6);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*v3;
    }
  }
  WebCore::FontDescription::~FontDescription(this, a2);
}

BOOL WebCore::DocumentNameCollection::elementMatchesIfIdAttributeMatch(WebCore::DocumentNameCollection *this, const WebCore::Element *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *NameAttribute;

  if ((*((_WORD *)this + 14) & 0x10) != 0)
  {
    v2 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
    if (v2 == *(_QWORD *)(WebCore::HTMLNames::objectTag + 24) && *((_BYTE *)this + 288))
      return 1;
    if (v2 == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
    {
      v4 = *((_QWORD *)this + 13);
      if (v4)
      {
        if ((*(_BYTE *)(v4 + 4) & 2) != 0)
        {
          NameAttribute = WebCore::Element::getNameAttribute(this);
          if (*NameAttribute)
            return *(_DWORD *)(*NameAttribute + 4) != 0;
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::ContentfulPaintChecker::qualifiesForContentfulPaint(WebCore::ContentfulPaintChecker *this, WebCore::LocalFrameView *a2)
{
  int v3;
  char v4;
  uint64_t v5;
  WebCore::RenderLayer **v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  WTF *v10;
  _QWORD v12[2];
  void (**v13)(WebCore::NullGraphicsContext *__hidden);
  _BYTE v14[344];
  WTF *v15;
  uint64_t v16;
  _DWORD v17[87];
  unsigned __int8 v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 287);
  v4 = *((_BYTE *)this + 322);
  *((_DWORD *)this + 287) = 512;
  *((_BYTE *)this + 322) = 1;
  LODWORD(v12[0]) = 0;
  v13 = (void (**)(WebCore::NullGraphicsContext *__hidden))off_1E340BA10;
  WebCore::GraphicsContextState::GraphicsContextState((uint64_t)v14, v12, 0);
  v16 = 1;
  v17[86] = 0;
  v18 &= 0xFCu;
  v15 = (WTF *)v17;
  v13 = off_1E33FFA58;
  v19 = 3;
  v5 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v5)
    v6 = *(WebCore::RenderLayer ***)(v5 + 1944);
  else
    v6 = 0;
  v12[0] = WebCore::RenderView::documentRect(v6);
  v12[1] = v7;
  WebCore::ScrollView::paint((uint64_t)this, (WebCore::GraphicsContext *)&v13, (int *)v12, 0, 0);
  *((_BYTE *)this + 322) = v4;
  *((_DWORD *)this + 287) = v3;
  v9 = v18;
  v13 = (void (**)(WebCore::NullGraphicsContext *__hidden))off_1E340BA10;
  if (HIDWORD(v16))
    WTF::VectorTypeOperations<WebCore::GraphicsContextState>::destruct((unsigned int *)v15, (unsigned int *)v15 + 86 * HIDWORD(v16));
  v10 = v15;
  if (v17 != (_DWORD *)v15 && v15)
  {
    v15 = 0;
    LODWORD(v16) = 0;
    WTF::fastFree(v10, v8);
  }
  WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v14, v8);
  return (v9 >> 1) & 1;
}

const __CFString *WebCore::toCAValueFunctionType(int a1)
{
  const __CFString **v1;
  const __CFString *result;

  switch(a1)
  {
    case 1:
      v1 = (const __CFString **)MEMORY[0x1E0CD31B0];
      goto LABEL_14;
    case 2:
      v1 = (const __CFString **)MEMORY[0x1E0CD31B8];
      goto LABEL_14;
    case 3:
      v1 = (const __CFString **)MEMORY[0x1E0CD31C0];
      goto LABEL_14;
    case 4:
      v1 = (const __CFString **)MEMORY[0x1E0CD31D0];
      goto LABEL_14;
    case 5:
      v1 = (const __CFString **)MEMORY[0x1E0CD31D8];
      goto LABEL_14;
    case 6:
      v1 = (const __CFString **)MEMORY[0x1E0CD31E0];
      goto LABEL_14;
    case 7:
      v1 = (const __CFString **)MEMORY[0x1E0CD31C8];
      goto LABEL_14;
    case 8:
      v1 = (const __CFString **)MEMORY[0x1E0CD31F0];
      goto LABEL_14;
    case 9:
      v1 = (const __CFString **)MEMORY[0x1E0CD31F8];
      goto LABEL_14;
    case 10:
      v1 = (const __CFString **)MEMORY[0x1E0CD3200];
      goto LABEL_14;
    case 11:
      v1 = (const __CFString **)MEMORY[0x1E0CD31E8];
LABEL_14:
      result = *v1;
      break;
    default:
      result = &stru_1E3487BC0;
      break;
  }
  return result;
}

uint64_t WebCore::adjustForAbsoluteZoom(uint64_t this, int a2, const WebCore::RenderElement *a3, float a4)
{
  int v4;
  double v5;
  BOOL v6;
  BOOL v7;

  if (a4 != 1.0)
  {
    v4 = this - 1;
    if ((int)this >= 0)
      v4 = this + 1;
    if (a4 <= 1.0)
      v4 = this;
    v5 = (double)v4 / a4 + dbl_1968DE9C0[(double)v4 / a4 < 0.0];
    if (v5 >= -2147483650.0)
    {
      v6 = v5 == 2147483650.0;
      v7 = v5 < 2147483650.0;
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    if (v7 || v6)
      return (int)v5;
    else
      return 0;
  }
  return this;
}

BOOL WebCore::ViewportConfiguration::updateDefaultConfiguration(WebCore::ViewportConfiguration *this)
{
  _BOOL8 result;
  double v3;
  float v4;
  int v6;
  BOOL v7;

  result = WebCore::ViewportConfiguration::canOverrideConfigurationParameters(this);
  if (result)
  {
    v3 = 0.25;
    if (*((_BYTE *)this + 232)
      || (v4 = *((float *)this + 35), v4 == -1.0)
      && *((float *)this + 36) == -1.0
      && *((float *)this + 37) == -1.0
      && *((float *)this + 38) == -1.0
      && *((float *)this + 39) == -1.0
      && *((float *)this + 40) == -1.0
      && *((float *)this + 41) == -1.0
      && *((float *)this + 42) == -1.0
      && *((float *)this + 43) == -1.0
      && *((float *)this + 44) == -1.0
      && *((float *)this + 45) == -1.0
      && *((float *)this + 46) == -1.0
      && !*((_BYTE *)this + 188)
      && !*((_BYTE *)this + 189)
      || (v4 != -2.0 ? (_ZF = *((float *)this + 41) == 1.0) : (_ZF = 1), !_ZF))
    {
      v6 = 1;
      v7 = 1;
    }
    else
    {
      if (*((_BYTE *)this + 234))
        v6 = 1;
      else
        v6 = 65537;
      v7 = *((_BYTE *)this + 234) != 0;
      if (!*((_BYTE *)this + 234))
        v3 = 1.0;
    }
    *((_QWORD *)this + 7) = 0xC000000000000000;
    *((_QWORD *)this + 8) = 0;
    __asm { FMOV            V1.2D, #1.0 }
    *(_OWORD *)((char *)this + 72) = _Q1;
    *((double *)this + 11) = v3;
    *((_QWORD *)this + 12) = 0x4014000000000000;
    *((_BYTE *)this + 104) = 1;
    *((_BYTE *)this + 105) = v7;
    *((_BYTE *)this + 106) = 1;
    *(_DWORD *)((char *)this + 107) = v6;
  }
  return result;
}

uint64_t WebCore::SVGDocumentExtensions::dispatchLoadEventToOutermostSVGElements(WebCore::SVGDocumentExtensions *this)
{
  uint64_t result;
  void *v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  result = (uint64_t)WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::SVGSVGElement,WTF::RawPtrTraits<WebCore::SVGSVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGSVGElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::SVGSVGElement,WTF::RawPtrTraits<WebCore::SVGSVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGSVGElement>>,WTF::WeakHashSet<WebCore::SVGSVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::SVGSVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::SVGSVGElement,WTF::RawPtrTraits<WebCore::SVGSVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGSVGElement>>&&)#1},WTF::Vector<WTF::Ref<WebCore::SVGSVGElement,WTF::RawPtrTraits<WebCore::SVGSVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGSVGElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::SVGSVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t *)&v12, (_DWORD *)this + 4);
  v3 = v12;
  if (!HIDWORD(v13))
    goto LABEL_14;
  v4 = 8 * HIDWORD(v13);
  do
  {
    result = *(_QWORD *)v3;
    if (*(_QWORD *)v3 && *(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
      v5 = *(_QWORD *)(result + 32);
      if (!v5)
        goto LABEL_12;
      v6 = *(_WORD *)(v5 + 28);
      if ((v6 & 0x20) != 0
        && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::foreignObjectTag + 24))
      {
        goto LABEL_12;
      }
      if ((*(_BYTE *)(result + 22) & 0x10) == 0
        || ((v7 = **(_QWORD **)(result + 40)) != 0 ? (v8 = (*(_WORD *)(v7 + 28) & 0x80) == 0) : (v8 = 1),
            v8
         || (v9 = *(_QWORD *)(v7 + 200)) == 0
         || (v10 = *(_QWORD *)(v9 + 8)) == 0
         || (*(_WORD *)(v10 + 28) & 0x20) == 0))
      {
        if ((v6 & 0x20) != 0)
          goto LABEL_5;
LABEL_12:
        result = WebCore::SVGElement::sendLoadEventIfPossible(result);
        goto LABEL_5;
      }
      if ((v6 & 0x20) == 0 && *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::useTag + 24))
        goto LABEL_12;
    }
LABEL_5:
    v3 = (WTF *)((char *)v3 + 8);
    v4 -= 8;
  }
  while (v4);
  v3 = v12;
  if (HIDWORD(v13))
  {
    v11 = 8 * HIDWORD(v13);
    do
    {
      result = *(_QWORD *)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
      v3 = (WTF *)((char *)v3 + 8);
      v11 -= 8;
    }
    while (v11);
    v3 = v12;
  }
LABEL_14:
  if (v3)
  {
    v12 = 0;
    LODWORD(v13) = 0;
    return WTF::fastFree(v3, v2);
  }
  return result;
}

uint64_t WebCore::ResourceLoaderOptions::ResourceLoaderOptions(uint64_t result, char a2, int a3, char a4, char a5, int a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13)
{
  int v13;
  unsigned int v14;
  int v15;

  *(_BYTE *)result = 0;
  *(_DWORD *)(result + 2) = 0;
  *(_BYTE *)(result + 6) = 0;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_DWORD *)(result + 72) = 0;
  *(_BYTE *)(result + 76) = 1;
  *(_BYTE *)(result + 80) = 0;
  *(_BYTE *)(result + 104) = 0;
  *(_WORD *)(result + 112) = 20;
  if (a3)
    v13 = 2;
  else
    v13 = 0;
  v14 = v13 & 0xFFFFFFFE | a2 & 1;
  if (a6)
    v15 = 0x80000;
  else
    v15 = 0;
  *(_DWORD *)(result + 114) = ((v14 & 0xFFFFFF07 | (8 * (a4 & 1)) & 0xF | v15 & 0xFFFFFF0F | (16 * (a5 & 3)) & 0x3F | ((a8 & 1) << 6) & 0x7F | ((a10 & 1) << 7))
                             + ((a11 & 1) << 8)
                             + ((a12 & 1) << 9)
                             + ((a13 & 1) << 10)
                             + (*(_DWORD *)(result + 114) & 0xF0000000)) | 0xC000800;
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_BYTE *)(result + 2) = a7;
  *(_BYTE *)(result + 1) = a9;
  return result;
}

void WebCore::NetworkStorageSession::startListeningForCookieChangeNotifications(WebCore::NetworkStorageSession *this, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  void *v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  WTF *v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  WebCore::NetworkStorageSession *v38;
  WTF::StringImpl *v39;
  char *v40;
  uint64_t v41;
  WTF *v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  WTF::StringImpl **v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  WTF::StringImpl *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  void *v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  void *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  void *v83;
  const __CFString *v84;
  id v85;
  const void *v86;
  void *v87;
  const __CFString *v88;
  CFTypeRef v89;
  unsigned int v90;
  int v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  uint64_t v99;
  uint64_t k;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t i;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t j;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  WebCore::NetworkStorageSession *v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  WTF **v121;
  CFTypeRef cf[3];
  WTF *v123;

  if (!*((_BYTE *)this + 41))
  {
    *((_BYTE *)this + 41) = 1;
    WebCore::NetworkStorageSession::nsCookieStorage(this, cf);
    v5 = (void *)cf[0];
    v6 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      goto LABEL_164;
    v6 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = this;
    v8 = *(unsigned int **)this;
    *(_QWORD *)this = v6;
    if (!v8)
      goto LABEL_164;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v7);
    }
    v6 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
LABEL_164:
      do
        v11 = __ldaxr((unsigned int *)v6);
      while (__stlxr(v11 + 1, (unsigned int *)v6));
    }
    v12 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    v13 = MEMORY[0x1E0C809A0];
    *v12 = MEMORY[0x1E0C809A0];
    v12[1] = 50331650;
    v12[2] = WTF::BlockPtr<void ()(NSArray<NSHTTPCookie *> *,NSString *)>::fromCallable<WebCore::NetworkStorageSession::registerCookieChangeListenersIfNecessary(void)::$_0>(WebCore::NetworkStorageSession::registerCookieChangeListenersIfNecessary(void)::$_0)::{lambda(void *,NSArray<NSHTTPCookie *> *,NSString *)#1}::__invoke;
    v12[3] = &WTF::BlockPtr<void ()(NSArray<NSHTTPCookie *> *,NSString *)>::fromCallable<WebCore::NetworkStorageSession::registerCookieChangeListenersIfNecessary(void)::$_0>(WebCore::NetworkStorageSession::registerCookieChangeListenersIfNecessary(void)::$_0)::descriptor;
    v12[4] = this;
    v12[5] = v6;
    objc_msgSend(v5, "_setCookiesChangedHandler:onQueue:", v12, MEMORY[0x1E0C80D38]);
    _Block_release(v12);
    if (cf[0])
      CFRelease(cf[0]);
    WebCore::NetworkStorageSession::nsCookieStorage(this, cf);
    v14 = (void *)cf[0];
    v15 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      goto LABEL_165;
    v15 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v15 = 1;
    *(_QWORD *)(v15 + 8) = this;
    v17 = *(unsigned int **)this;
    *(_QWORD *)this = v15;
    if (!v17)
      goto LABEL_165;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v16);
    }
    v15 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
LABEL_165:
      do
        v20 = __ldaxr((unsigned int *)v15);
      while (__stlxr(v20 + 1, (unsigned int *)v15));
    }
    v21 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v21 = v13;
    v21[1] = 50331650;
    v21[2] = WTF::BlockPtr<void ()(NSArray<NSHTTPCookie *> *,NSString *,BOOL)>::fromCallable<WebCore::NetworkStorageSession::registerCookieChangeListenersIfNecessary(void)::$_1>(WebCore::NetworkStorageSession::registerCookieChangeListenersIfNecessary(void)::$_1)::{lambda(void *,NSArray<NSHTTPCookie *> *,NSString *,BOOL)#1}::__invoke;
    v21[3] = &WTF::BlockPtr<void ()(NSArray<NSHTTPCookie *> *,NSString *,BOOL)>::fromCallable<WebCore::NetworkStorageSession::registerCookieChangeListenersIfNecessary(void)::$_1>(WebCore::NetworkStorageSession::registerCookieChangeListenersIfNecessary(void)::$_1)::descriptor;
    v21[4] = this;
    v21[5] = v15;
    objc_msgSend(v14, "_setCookiesRemovedHandler:onQueue:", v21, MEMORY[0x1E0C80D38]);
    _Block_release(v21);
    if (cf[0])
      CFRelease(cf[0]);
  }
  v121 = (WTF **)((char *)this + 56);
  v23 = *((unsigned int *)this + 16);
  v22 = *((unsigned int *)this + 17);
  if (10 * v22 >= (unint64_t)(9 * v23)
    || (v23 <= 2 * (int)v22 ? (v24 = *((_BYTE *)this + 76) == 0) : (v24 = 1), !v24))
  {
    if ((_DWORD)v23)
      v25 = 2 * v23;
    else
      v25 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(v121, v25);
    LODWORD(v23) = *((_DWORD *)this + 16);
  }
  v26 = v23 - 1;
  v116 = a2;
  v117 = this;
  v27 = *((_DWORD *)this + 18);
  v28 = *((_DWORD *)*a3 + 4);
  if (v28 < 0x100)
    v29 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v29 = v28 >> 8;
  v30 = (v29 ^ v27) & v26;
  v31 = *v121;
  v32 = (uint64_t)*v121 + 24 * v30;
  v33 = *(WTF **)v32;
  if (*(_QWORD *)v32)
  {
    v34 = 0;
    do
    {
      v35 = *((_DWORD *)v33 + 4);
      if (v35 < 0x100)
        v36 = WTF::StringImpl::hashSlowCase(v33);
      else
        v36 = v35 >> 8;
      v37 = (v30 + v23 - ((v36 ^ v27) & v26)) & v26;
      if (v34 > v37)
      {
        if (v34 >= 0x80)
          *((_BYTE *)v117 + 76) = 1;
        v42 = *(WTF **)v32;
        *(_QWORD *)v32 = 0;
        v43 = (char *)v31 + 24 * v30;
        v45 = *((_QWORD *)v43 + 1);
        v44 = (uint64_t *)(v43 + 8);
        v118 = v45;
        v119 = v42;
        *v44 = 0;
        v46 = v44 + 1;
        v47 = v44[1];
        v48 = *(WTF::StringImpl **)v32;
        *(_QWORD *)v32 = 0;
        if (v48)
        {
          if (*(_DWORD *)v48 == 2)
            WTF::StringImpl::destroy(v48, a2);
          else
            *(_DWORD *)v48 -= 2;
        }
        v115 = v47;
        *(_QWORD *)v32 = 0;
        *(_QWORD *)(v32 + 8) = 0;
        *(_QWORD *)(v32 + 16) = 0;
        v49 = *a3;
        if (*a3)
          *(_DWORD *)v49 += 2;
        *(_QWORD *)v32 = v49;
        v50 = *v44;
        *v44 = 0;
        if (v50)
        {
          v104 = *(unsigned int *)(v50 - 4);
          if ((_DWORD)v104)
          {
            for (i = 0; i != v104; ++i)
            {
              v106 = *(unsigned int **)(v50 + 8 * i);
              if (v106 != (unsigned int *)-1)
              {
                *(_QWORD *)(v50 + 8 * i) = 0;
                if (v106)
                {
                  do
                  {
                    v107 = __ldaxr(v106);
                    v108 = v107 - 1;
                  }
                  while (__stlxr(v108, v106));
                  if (!v108)
                  {
                    atomic_store(1u, v106);
                    WTF::fastFree((WTF *)v106, a2);
                  }
                }
              }
            }
          }
          WTF::fastFree((WTF *)(v50 - 16), a2);
        }
        *v46 = 0;
        v51 = ((_DWORD)v30 + 1) & v26;
        v52 = *v121;
        v53 = (WTF::StringImpl **)((char *)*v121 + 24 * v51);
        v54 = *v53;
        if (*v53)
        {
          v55 = v115;
          do
          {
            v56 = *((_DWORD *)v54 + 4);
            if (v56 < 0x100)
              v57 = WTF::StringImpl::hashSlowCase(v54);
            else
              v57 = v56 >> 8;
            if (++v37 > (((_DWORD)v51 + (_DWORD)v23 - ((v57 ^ v27) & v26)) & v26))
            {
              v58 = *v53;
              *v53 = 0;
              v59 = (char *)v52 + 24 * v51;
              v60 = *((_QWORD *)v59 + 1);
              v61 = *((_QWORD *)v59 + 2);
              *v53 = v119;
              *((_QWORD *)v59 + 1) = v118;
              *((_QWORD *)v59 + 2) = v55;
              v55 = v61;
              v118 = v60;
              v119 = v58;
              v37 = (v51 + v23 - ((v57 ^ v27) & v26)) & v26;
            }
            v51 = ((_DWORD)v51 + 1) & v26;
            v52 = *v121;
            v53 = (WTF::StringImpl **)((char *)*v121 + 24 * v51);
            v54 = *v53;
          }
          while (*v53);
        }
        else
        {
          v55 = v115;
        }
        *v53 = v119;
        v62 = (char *)v52 + 24 * v51;
        v63 = *((_QWORD *)v62 + 1);
        *((_QWORD *)v62 + 1) = v118;
        if (v63)
        {
          v109 = *(unsigned int *)(v63 - 4);
          v38 = v117;
          if ((_DWORD)v109)
          {
            v110 = v55;
            for (j = 0; j != v109; ++j)
            {
              v112 = *(unsigned int **)(v63 + 8 * j);
              if (v112 != (unsigned int *)-1)
              {
                *(_QWORD *)(v63 + 8 * j) = 0;
                if (v112)
                {
                  do
                  {
                    v113 = __ldaxr(v112);
                    v114 = v113 - 1;
                  }
                  while (__stlxr(v114, v112));
                  if (!v114)
                  {
                    atomic_store(1u, v112);
                    WTF::fastFree((WTF *)v112, a2);
                  }
                }
              }
            }
            WTF::fastFree((WTF *)(v63 - 16), a2);
            *((_QWORD *)v52 + 3 * v51 + 2) = v110;
          }
          else
          {
            WTF::fastFree((WTF *)(v63 - 16), a2);
            *((_QWORD *)v52 + 3 * v51 + 2) = v55;
          }
        }
        else
        {
          *((_QWORD *)v52 + 3 * v51 + 2) = v55;
          v38 = v117;
        }
        goto LABEL_68;
      }
      if (v36 == v29 && (WTF::equal(*(WTF **)v32, *a3, (const WTF::StringImpl *)a3) & 1) != 0)
        goto LABEL_69;
      v31 = *v121;
      v30 = ((_DWORD)v30 + 1) & v26;
      ++v34;
      v32 = (uint64_t)*v121 + 24 * v30;
      v33 = *(WTF **)v32;
    }
    while (*(_QWORD *)v32);
    if (v34 < 0x80)
      goto LABEL_43;
    v38 = v117;
    *((_BYTE *)v117 + 76) = 1;
  }
  else
  {
LABEL_43:
    v38 = v117;
  }
  v39 = *a3;
  if (*a3)
    *(_DWORD *)v39 += 2;
  *(_QWORD *)v32 = v39;
  v40 = (char *)v31 + 24 * v30;
  v41 = *((_QWORD *)v40 + 1);
  *((_QWORD *)v40 + 1) = 0;
  if (v41)
  {
    v99 = *(unsigned int *)(v41 - 4);
    if ((_DWORD)v99)
    {
      for (k = 0; k != v99; ++k)
      {
        v101 = *(unsigned int **)(v41 + 8 * k);
        if (v101 != (unsigned int *)-1)
        {
          *(_QWORD *)(v41 + 8 * k) = 0;
          if (v101)
          {
            do
            {
              v102 = __ldaxr(v101);
              v103 = v102 - 1;
            }
            while (__stlxr(v103, v101));
            if (!v103)
            {
              atomic_store(1u, v101);
              WTF::fastFree((WTF *)v101, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v41 - 16), a2);
  }
  *((_QWORD *)v31 + 3 * v30 + 2) = 0;
LABEL_68:
  ++*((_DWORD *)v38 + 17);
LABEL_69:
  v64 = (uint64_t *)(v32 + 8);
  v65 = *(_DWORD *)(v32 + 20);
  v66 = *(_DWORD *)(v32 + 16) + 1;
  *(_DWORD *)(v32 + 16) = v66;
  if (v66 > v65)
  {
    v67 = *v64;
    if (!*v64)
    {
LABEL_71:
      v68 = 0;
      *(_DWORD *)(v32 + 16) = 0;
LABEL_72:
      v69 = v68;
LABEL_73:
      *(_DWORD *)(v32 + 20) = 2 * v69;
      goto LABEL_74;
    }
    v90 = *(_DWORD *)(v67 - 4);
    if (!v90)
      goto LABEL_124;
    v91 = 0;
    do
    {
      while (1)
      {
        v92 = *(_QWORD *)(v67 + 8 * --v90);
        if ((unint64_t)(v92 + 1) >= 2 && !*(_QWORD *)(v92 + 8))
          break;
        if (!v90)
          goto LABEL_114;
      }
      *(_QWORD *)(v67 + 8 * v90) = 0;
      do
      {
        v93 = __ldaxr((unsigned int *)v92);
        v94 = v93 - 1;
      }
      while (__stlxr(v94, (unsigned int *)v92));
      if (!v94)
      {
        atomic_store(1u, (unsigned int *)v92);
        WTF::fastFree((WTF *)v92, a2);
      }
      *(_QWORD *)(v67 + 8 * v90) = -1;
      ++v91;
    }
    while (v90);
LABEL_114:
    v67 = *v64;
    if (v91)
    {
      *(_DWORD *)(v67 - 16) += v91;
      v95 = *v64;
      if (*v64)
        v96 = *(_DWORD *)(v95 - 12);
      else
        v96 = 0;
      *(_DWORD *)(v95 - 12) = v96 - v91;
      v67 = *v64;
    }
    if (!v67)
      goto LABEL_71;
    v97 = *(_DWORD *)(v67 - 4);
    if (v97 < 9 || 6 * *(_DWORD *)(v67 - 12) >= v97)
    {
LABEL_124:
      *(_DWORD *)(v32 + 16) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(v32 + 8));
      v67 = *(_QWORD *)(v32 + 8);
      *(_DWORD *)(v32 + 16) = 0;
      if (!v67)
      {
        v68 = 0;
        goto LABEL_72;
      }
    }
    v68 = *(_DWORD *)(v67 - 12);
    v69 = 0x7FFFFFFF;
    if (v68 >= 0x7FFFFFFF)
      goto LABEL_73;
    goto LABEL_72;
  }
LABEL_74:
  v70 = *((_QWORD *)v116 + 1);
  if (!v70)
  {
    v70 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v70 = 1;
    *(_QWORD *)(v70 + 8) = v116;
    v72 = (unsigned int *)*((_QWORD *)v116 + 1);
    *((_QWORD *)v116 + 1) = v70;
    if (v72)
    {
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
      {
        atomic_store(1u, v72);
        WTF::fastFree((WTF *)v72, v71);
      }
      v70 = *((_QWORD *)v116 + 1);
    }
  }
  do
    v75 = __ldaxr((unsigned int *)v70);
  while (__stlxr(v75 + 1, (unsigned int *)v70));
  do
    v76 = __ldaxr((unsigned int *)v70);
  while (__stlxr(v76 + 1, (unsigned int *)v70));
  v123 = (WTF *)v70;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)(v32 + 8), &v123, (uint64_t)cf);
  v78 = (unsigned int *)v123;
  v123 = 0;
  if (!v78)
    goto LABEL_85;
  do
  {
    v79 = __ldaxr(v78);
    v80 = v79 - 1;
  }
  while (__stlxr(v80, v78));
  if (!v80)
  {
    atomic_store(1u, v78);
    WTF::fastFree((WTF *)v78, v77);
    if (!v70)
      goto LABEL_89;
  }
  else
  {
LABEL_85:
    if (!v70)
      goto LABEL_89;
  }
  do
  {
    v81 = __ldaxr((unsigned int *)v70);
    v82 = v81 - 1;
  }
  while (__stlxr(v82, (unsigned int *)v70));
  if (!v82)
  {
    atomic_store(1u, (unsigned int *)v70);
    WTF::fastFree((WTF *)v70, v77);
  }
LABEL_89:
  v83 = (void *)*((_QWORD *)v117 + 6);
  if (!v83)
  {
    v85 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    v86 = (const void *)*((_QWORD *)v117 + 6);
    *((_QWORD *)v117 + 6) = v85;
    if (v86)
      CFRelease(v86);
    goto LABEL_96;
  }
  if (*a3)
    v84 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v84 = &stru_1E3487BC0;
  if ((objc_msgSend(v83, "containsObject:", v84) & 1) == 0)
  {
LABEL_96:
    v87 = (void *)*((_QWORD *)v117 + 6);
    if (*a3)
      v88 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v88 = &stru_1E3487BC0;
    objc_msgSend(v87, "addObject:", v88);
    WebCore::NetworkStorageSession::nsCookieStorage(v117, cf);
    v89 = cf[0];
    objc_msgSend((id)cf[0], "_setSubscribedDomainsForCookieChanges:", *((_QWORD *)v117 + 6));
    if (v89)
      CFRelease(v89);
  }
}

void sub_19458CC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, CFTypeRef cf, uint64_t a18, uint64_t a19, WTF *a20)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::NetworkStorageSession::domCookiesForHost@<X0>(WebCore::NetworkStorageSession *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  const __CFString *v6;
  void *v7;
  uint64_t v8;
  void *v10;

  WebCore::NetworkStorageSession::nsCookieStorage(this, &v10);
  v5 = v10;
  if (*(_QWORD *)a2)
    v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v6 = &stru_1E3487BC0;
  v7 = (void *)objc_msgSend(v5, "_getCookiesForDomain:", v6);
  if (v5)
    CFRelease(v5);
  v8 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v8 = off_1E335AAB0;
  v10 = (void *)v8;
  WebCore::nsCookiesToCookieVector(a3, v7, &v10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_19458CEB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unint64_t WebCore::JSSVGElementPrototype::create(WebCore::JSSVGElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  int *v9;
  char **v10;
  uint64_t v11;
  char *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  int v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  JSC::Structure *v51;
  int v52;
  unint64_t v54;
  WTF::StringImpl *v55[6];
  int v56;
  int v57;
  JSC::Structure *v58;
  int v59;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v54 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v54);
    *((_QWORD *)this + 4865) = SlowCase + (int)v54;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v9 = (int *)((char *)this + 93124);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  v10 = &WebCore::JSSVGElementPrototypeTableValues;
  v11 = 117;
  do
  {
    v12 = v10[1];
    if (v12)
    {
      if (v12 == (char *)2)
        JSC::SmallStrings::singleCharacterStringRep((WebCore::JSSVGElementPrototype *)((char *)this + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v13 = v55[0];
      JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSSVGElement::s_info, (unint64_t *)v55, (uint64_t)v10, (unsigned __int8 *)SlowCase);
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v14);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    v10 += 5;
    --v11;
  }
  while (v11);
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v15 && *(_BYTE *)(v15 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458D5A8);
  }
  v16 = v15 - 192;
  if (!v15)
    v16 = 0;
  v17 = *(_QWORD *)(*(_QWORD *)(v16 + 680) + 696) & 1;
  v18 = v17 == 0;
  if ((v17 & 1) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v19 = v55[0];
    v20 = *v9;
    *v9 = 1;
    LODWORD(v55[0]) = -1;
    WORD2(v55[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v20;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v21);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  v22 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v22 && *(_BYTE *)(v22 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458D5C8);
  }
  v23 = v22 - 192;
  if (!v22)
    v23 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v23 + 680) + 712) & 0x4000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v24 = v55[0];
    v25 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v55[0]) = -1;
    WORD2(v55[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v25;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v26);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  v27 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v27 && *(_BYTE *)(v27 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458D5E8);
  }
  v28 = v27 - 192;
  if (!v27)
    v28 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v28 + 680) + 712) & 0x4000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v29 = v55[0];
    v30 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v55[0]) = -1;
    WORD2(v55[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v30;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v31);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  v32 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v32 && *(_BYTE *)(v32 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458D608);
  }
  v33 = v32 - 192;
  if (!v32)
    v33 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v33 + 680) + 712) & 0x4000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v34 = v55[0];
    v35 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v55[0]) = -1;
    WORD2(v55[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v35;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v36);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  v37 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v37 && *(_BYTE *)(v37 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458D628);
  }
  v38 = v37 - 192;
  if (!v37)
    v38 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v38 + 680) + 712) & 0x4000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v39 = v55[0];
    v40 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v55[0]) = -1;
    WORD2(v55[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v40;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v41);
      else
        *(_DWORD *)v39 -= 2;
    }
  }
  v42 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v42 && *(_BYTE *)(v42 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458D648);
  }
  v43 = v42 - 192;
  if (!v42)
    v43 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v43 + 680) + 712) & 0x4000000000000) != 0)
  {
    if (!v18)
      goto LABEL_67;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral();
    v44 = v55[0];
    v45 = *v9;
    *v9 = 1;
    LODWORD(v55[0]) = -1;
    WORD2(v55[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v45;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v46);
      else
        *(_DWORD *)v44 -= 2;
    }
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
LABEL_67:
  v47 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v49 = JSC::JSString::create((uint64_t)this, v55);
  v50 = v55[0];
  v55[0] = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v48);
    else
      *(_DWORD *)v50 -= 2;
  }
  v51 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v59 = *(_DWORD *)SlowCase;
  v58 = v51;
  v52 = JSC::Structure::outOfLineCapacity(v51);
  v56 = 0;
  v57 = v52;
  v55[0] = (WTF::StringImpl *)&v57;
  v55[1] = (WTF::StringImpl *)SlowCase;
  v55[2] = this;
  v55[3] = (WTF::StringImpl *)&v59;
  v55[4] = (WTF::StringImpl *)&v58;
  v55[5] = (WTF::StringImpl *)&v56;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v51, this, v47, 6, (uint64_t)v55);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v56, v49);
  *((_DWORD *)v51 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::JSSVGElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

WebCore::HTMLMetaCharsetParser *WebCore::HTMLMetaCharsetParser::HTMLMetaCharsetParser(WebCore::HTMLMetaCharsetParser *this, const char *a2)
{
  __int16 v4;
  const char *v5[2];

  *(_DWORD *)this = 0;
  *((_WORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = (char *)this + 24;
  *((_QWORD *)this + 2) = 256;
  *((_WORD *)this + 268) = 0;
  *((_BYTE *)this + 538) = 0;
  *((_QWORD *)this + 68) = (char *)this + 560;
  *((_QWORD *)this + 69) = 10;
  *((_QWORD *)this + 351) = 0;
  *((_WORD *)this + 1408) = 0;
  *((_QWORD *)this + 353) = this;
  *((_WORD *)this + 1416) = 0;
  *((_BYTE *)this + 2834) = 0;
  *((_QWORD *)this + 355) = (char *)this + 2856;
  *((_QWORD *)this + 356) = 32;
  *((_QWORD *)this + 365) = (char *)this + 2936;
  *((_QWORD *)this + 366) = 32;
  *((_QWORD *)this + 371) = (char *)this + 2984;
  *((_QWORD *)this + 372) = 32;
  *((_QWORD *)this + 377) = 0x20000000000;
  {
    PAL::Latin1Encoding(void)::globalLatin1Encoding = (uint64_t)&off_1E31F4A18;
    qword_1EE2E6DC0 = PAL::atomCanonicalTextEncodingName((PAL *)"latin1", a2);
    qword_1EE2E6DC8 = (uint64_t)a2;
    v5[0] = (const char *)qword_1EE2E6DC0;
    v5[1] = a2;
    if (a2 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
    {
      if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v5))
      {
        v4 = 165;
      }
      else
      {
        v4 = 92;
      }
    }
    else
    {
      v4 = 92;
    }
    word_1EE2E6DD0 = v4;
  }
  PAL::newTextCodec((PAL *)&PAL::Latin1Encoding(void)::globalLatin1Encoding, (const PAL::TextEncoding *)a2, (_QWORD *)this + 378);
  *((_QWORD *)this + 381) = 0;
  *(_OWORD *)((char *)this + 3032) = 0u;
  *((_WORD *)this + 1528) = 257;
  *(_OWORD *)((char *)this + 3064) = 0u;
  *(_OWORD *)((char *)this + 3080) = 0u;
  *((_BYTE *)this + 3096) = 0;
  *(_QWORD *)((char *)this + 3098) = 0;
  *(_QWORD *)((char *)this + 3105) = 0;
  *((_QWORD *)this + 390) = WebCore::SegmentedString::advanceEmpty;
  *((_QWORD *)this + 391) = 0;
  *((_QWORD *)this + 392) = WebCore::SegmentedString::advanceEmpty;
  *((_QWORD *)this + 393) = 0;
  *((_WORD *)this + 1576) = 1;
  *((_QWORD *)this + 395) = &off_1E31F4A18;
  *((_QWORD *)this + 397) = 0;
  *((_QWORD *)this + 396) = 0;
  return this;
}

uint64_t WebCore::HTMLFrameOwnerElement::setSandboxFlags(uint64_t this, int a2)
{
  *(_DWORD *)(this + 120) = a2;
  return this;
}

unsigned int *WebCore::HTMLFrameOwnerElement::setContentFrame(WebCore::HTMLFrameOwnerElement *this, WebCore::Frame *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int *result;
  WebCore::HTMLFrameOwnerElement **v11;
  uint64_t v12;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v3 = *((_QWORD *)a2 + 2);
  if (v3)
    goto LABEL_32;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a2;
  v14 = (unsigned int *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  if (!v14)
    goto LABEL_32;
  do
  {
    v15 = __ldaxr(v14);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v14));
  if (!v16)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, a2);
  }
  v3 = *((_QWORD *)a2 + 2);
  if (v3)
  {
LABEL_32:
    do
      v4 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v4 + 1, (unsigned int *)v3));
  }
  v5 = (unsigned int *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = v3;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  *((_DWORD *)this + 6) += 2;
  do
  {
    v8 = *((_QWORD *)this + 9);
    v9 = (HIWORD(v8) + 1) & 0x3FF;
    if ((HIWORD(v8) & 0x3FF) + 1 != v9)
    {
      __break(0xC471u);
      JUMPOUT(0x19458DAA4);
    }
    result = (unsigned int *)this;
    *((_QWORD *)this + 9) = v8 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)(v9 | HIWORD(v8) & 0xFC00) << 48);
    if ((*((_WORD *)this + 14) & 0x80) != 0)
    {
      v12 = *((_QWORD *)this + 25);
      if (!v12)
      {
        this = 0;
        goto LABEL_13;
      }
      v11 = (WebCore::HTMLFrameOwnerElement **)(v12 + 8);
    }
    else
    {
      v11 = (WebCore::HTMLFrameOwnerElement **)((char *)this + 32);
    }
    this = *v11;
    if (*v11)
      *((_DWORD *)this + 6) += 2;
LABEL_13:
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  while (this);
  return result;
}

WTF::StringImpl *WebCore::ContentSecurityPolicy::copyStateFrom(WTF::StringImpl *result, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v11;
  WTF::StringImpl *v12;

  if (!*((_BYTE *)result + 183))
  {
    v5 = (uint64_t)result;
    v6 = *(unsigned int *)(a2 + 148);
    if ((_DWORD)v6)
    {
      v8 = *(_QWORD *)(a2 + 136);
      v9 = 8 * v6;
      do
      {
        v10 = (WTF::StringImpl *)(*(_QWORD *)v8 + 8);
        v11 = *(_BYTE *)(*(_QWORD *)v8 + 16);
        v12 = 0;
        WebCore::ContentSecurityPolicy::didReceiveHeader(v5, v10, v11, 3, (uint64_t *)&v12, 0);
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v12 -= 2;
        }
        v8 += 8;
        v9 -= 8;
      }
      while (v9);
    }
    if ((a3 & 1) != 0)
    {
      WTF::String::isolatedCopy();
      result = v12;
    }
    else
    {
      result = *(WTF::StringImpl **)(a2 + 168);
      if (result)
        *(_DWORD *)result += 2;
      v12 = result;
    }
    if (result)
      *(_DWORD *)result += 2;
    v7 = *(WTF::StringImpl **)(v5 + 168);
    *(_QWORD *)(v5 + 168) = result;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
      {
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
        result = v12;
      }
      else
      {
        *(_DWORD *)v7 -= 2;
      }
    }
    v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_DWORD *)(v5 + 184) = *(_DWORD *)(a2 + 184);
  }
  return result;
}

uint64_t WebCore::JSSVGGraphicsElement::prototype(WebCore::JSSVGGraphicsElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  JSC::JSCell *v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  int v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_4;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGGraphicsElement::s_info
      + ~((_QWORD)&WebCore::JSSVGGraphicsElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGGraphicsElement::s_info
                                                                   + ~((_QWORD)&WebCore::JSSVGGraphicsElement::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGGraphicsElement::s_info)
  {
    v19 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v19) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v19;
      if (v11 == &WebCore::JSSVGGraphicsElement::s_info)
        goto LABEL_3;
    }
    goto LABEL_4;
  }
LABEL_3:
  v12 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v12)
  {
LABEL_4:
    v13 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(this, a2, a3);
    Structure = WebCore::JSSVGGraphicsElementPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v13);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSSVGGraphicsElementPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSSVGGraphicsElement::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v12 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSSVGGraphicsElement::s_info);
  }
  return *(_QWORD *)(v12 + 48);
}

unint64_t WebCore::JSNavigatorPrototype::create(WebCore::JSNavigatorPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  int *v9;
  uint64_t i;
  char *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  int v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  int v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WebCore::Document *v49;
  WebCore::Quirks *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WebCore::Document *v58;
  WebCore::Quirks *v59;
  WTF::StringImpl *v60;
  int v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  int v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WebCore::Document *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  int v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WebCore::JSDOMGlobalObject *v101;
  uint64_t v102;
  _BOOL4 v103;
  uint64_t v104;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  int v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  int v118;
  WTF::StringImpl *v119;
  uint64_t v120;
  uint64_t v121;
  WebCore::JSDOMGlobalObject *v122;
  uint64_t v123;
  _BOOL4 v124;
  uint64_t v125;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  int v137;
  WTF::StringImpl *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  WTF::StringImpl *v154;
  uint64_t v155;
  WTF::StringImpl *v156;
  JSC::Structure *v157;
  int v158;
  WTF::StringImpl *v160;
  int v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  int v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  int v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  int v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  int v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  int v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  int v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  int v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  int v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  int v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  int v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  int v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  int v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  int v200;
  WTF::StringImpl *v201;
  WebCore::ScriptExecutionContext *v202;
  WTF::StringImpl *v203;
  int v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  int v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  int v210;
  WTF::StringImpl *v211;
  unint64_t v212;
  WTF::StringImpl *v213[6];
  int v214;
  int v215;
  JSC::Structure *v216;
  int v217;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v212 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v212);
    *((_QWORD *)this + 4865) = SlowCase + (int)v212;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v9 = (int *)((char *)this + 93124);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  for (i = 0; i != 270; i += 5)
  {
    v11 = (&WebCore::JSNavigatorPrototypeTableValues)[i + 1];
    if (v11)
    {
      if (v11 == (char *)2)
        JSC::SmallStrings::singleCharacterStringRep((WebCore::JSNavigatorPrototype *)((char *)this + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v12 = v213[0];
      JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSNavigator::s_info, (unint64_t *)v213, (uint64_t)&(&WebCore::JSNavigatorPrototypeTableValues)[i], (unsigned __int8 *)SlowCase);
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v13);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
  }
  v14 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
    goto LABEL_23;
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v15 && *(_BYTE *)(v15 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458F8A4);
  }
  v16 = v15 - 192;
  if (!v15)
    v16 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v16 + 680) + 664) & 0x10000000000000) != 0)
  {
    v19 = 0;
  }
  else
  {
LABEL_23:
    WTF::AtomStringImpl::addLiteral();
    v17 = v213[0];
    v18 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v18;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v20);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
  v21 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
    goto LABEL_32;
  v22 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v22 && *(_BYTE *)(v22 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458F8C4);
  }
  v23 = v22 - 192;
  if (!v22)
    v23 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v23 + 680) + 664) & 0x10000000000000) == 0)
  {
LABEL_32:
    WTF::AtomStringImpl::addLiteral();
    v24 = v213[0];
    v25 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v25;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v26);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  v27 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27))
    goto LABEL_41;
  v28 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v28 && *(_BYTE *)(v28 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458F8E4);
  }
  v29 = v28 - 192;
  if (!v28)
    v29 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v29 + 680) + 664) & 0x8000000) == 0)
  {
LABEL_41:
    WTF::AtomStringImpl::addLiteral();
    v30 = v213[0];
    v31 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v31;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v32);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  v33 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33))
    goto LABEL_50;
  v34 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v34 && *(_BYTE *)(v34 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458F904);
  }
  v35 = v34 - 192;
  if (!v34)
    v35 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v35 + 680) + 664) & 0x8000000) == 0)
  {
LABEL_50:
    WTF::AtomStringImpl::addLiteral();
    v36 = v213[0];
    v37 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v37;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v38);
      else
        *(_DWORD *)v36 -= 2;
    }
  }
  v39 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v39 && *(_BYTE *)(v39 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458F824);
  }
  v40 = v39 - 192;
  if (!v39)
    v40 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v40 + 680) + 664) & 0x10000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v190 = v213[0];
    v191 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v191;
    if (v190)
    {
      if (*(_DWORD *)v190 == 2)
        WTF::StringImpl::destroy(v190, v192);
      else
        *(_DWORD *)v190 -= 2;
    }
  }
  v41 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v41 && *(_BYTE *)(v41 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458F844);
  }
  v42 = v41 - 192;
  if (!v41)
    v42 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v42 + 680) + 664) & 0x400000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v43 = v213[0];
    v44 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v44;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v45);
      else
        *(_DWORD *)v43 -= 2;
    }
  }
  v46 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v46 && *(_BYTE *)(v46 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458F864);
  }
  v47 = v46 - 192;
  if (!v46)
    v47 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v47 + 680) + 704) & 0x20000000000000) == 0)
    goto LABEL_285;
  v48 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v48 && *(_BYTE *)(v48 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458F924);
  }
  v49 = (WebCore::Document *)(v48 - 192);
  if (!v48)
    v49 = 0;
  v50 = (WebCore::Quirks *)*((_QWORD *)v49 + 86);
  if (!v50)
    v50 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v49);
  if (WebCore::Quirks::hasBrokenEncryptedMediaAPISupportQuirk(v50))
  {
LABEL_285:
    WTF::AtomStringImpl::addLiteral();
    v160 = v213[0];
    v161 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v161;
    if (v160)
    {
      if (*(_DWORD *)v160 == 2)
        WTF::StringImpl::destroy(v160, v162);
      else
        *(_DWORD *)v160 -= 2;
    }
  }
  v51 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v51 && *(_BYTE *)(v51 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458F884);
  }
  v52 = v51 - 192;
  if (!v51)
    v52 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v52 + 680) + 704) & 0x800000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v193 = v213[0];
    v194 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v194;
    if (v193)
    {
      if (*(_DWORD *)v193 == 2)
        WTF::StringImpl::destroy(v193, v195);
      else
        *(_DWORD *)v193 -= 2;
    }
  }
  v53 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53))
    goto LABEL_96;
  v54 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v54 && *(_BYTE *)(v54 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458F964);
  }
  v55 = v54 - 192;
  if (!v54)
    v55 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v55 + 680) + 712) & 0x800000) == 0)
    goto LABEL_96;
  v56 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v56 && *(_BYTE *)(v56 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458FAC4);
  }
  v58 = (WebCore::Document *)(v56 - 192);
  if (!v56)
    v58 = 0;
  v59 = (WebCore::Quirks *)*((_QWORD *)v58 + 86);
  if (!v59)
    v59 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v58);
  if ((WebCore::Quirks::shouldEnableLegacyGetUserMediaQuirk(v59, v57) & 1) == 0)
  {
LABEL_96:
    WTF::AtomStringImpl::addLiteral();
    v60 = v213[0];
    v61 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v61;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v62);
      else
        *(_DWORD *)v60 -= 2;
    }
  }
  v63 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v63 + 24))(v63))
    goto LABEL_105;
  v64 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v64 && *(_BYTE *)(v64 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458F9A4);
  }
  v65 = v64 - 192;
  if (!v64)
    v65 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v65 + 680) + 688) & 2) == 0)
  {
LABEL_105:
    WTF::AtomStringImpl::addLiteral();
    v66 = v213[0];
    v67 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v67;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
        WTF::StringImpl::destroy(v66, v68);
      else
        *(_DWORD *)v66 -= 2;
    }
  }
  v69 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v69 + 24))(v69))
    goto LABEL_114;
  v70 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v70 && *(_BYTE *)(v70 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458F9C4);
  }
  v71 = v70 - 192;
  if (!v70)
    v71 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v71 + 680) + 688) & 2) == 0)
  {
LABEL_114:
    WTF::AtomStringImpl::addLiteral();
    v72 = v213[0];
    v73 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v73;
    if (v72)
    {
      if (*(_DWORD *)v72 == 2)
        WTF::StringImpl::destroy(v72, v74);
      else
        *(_DWORD *)v72 -= 2;
    }
  }
  v75 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v75 + 24))(v75))
    goto LABEL_123;
  v76 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v76 && *(_BYTE *)(v76 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458F9E4);
  }
  v77 = v76 - 192;
  if (!v76)
    v77 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v77 + 680) + 688) & 2) == 0)
  {
LABEL_123:
    WTF::AtomStringImpl::addLiteral();
    v78 = v213[0];
    v79 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v79;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, v80);
      else
        *(_DWORD *)v78 -= 2;
    }
  }
  v81 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v81 + 24))(v81))
    goto LABEL_288;
  v82 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v82 && *(_BYTE *)(v82 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458FA04);
  }
  v83 = v82 - 192;
  if (!v82)
    v83 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v83 + 680) + 704) & 0x40000000) == 0)
  {
LABEL_288:
    WTF::AtomStringImpl::addLiteral();
    v163 = v213[0];
    v164 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v164;
    if (v163)
    {
      if (*(_DWORD *)v163 == 2)
        WTF::StringImpl::destroy(v163, v165);
      else
        *(_DWORD *)v163 -= 2;
    }
  }
  v84 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v84 + 24))(v84))
    goto LABEL_291;
  v85 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v85 && *(_BYTE *)(v85 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458FA44);
  }
  v86 = v85 - 192;
  if (!v85)
    v86 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v86 + 680) + 704) & 0x40000000) == 0)
  {
LABEL_291:
    WTF::AtomStringImpl::addLiteral();
    v166 = v213[0];
    v167 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v167;
    if (v166)
    {
      if (*(_DWORD *)v166 == 2)
        WTF::StringImpl::destroy(v166, v168);
      else
        *(_DWORD *)v166 -= 2;
    }
  }
  v87 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v87 && *(_BYTE *)(v87 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458F944);
  }
  if (v87)
    v88 = (WebCore::Document *)(v87 - 192);
  else
    v88 = 0;
  if (!*((_QWORD *)v88 + 86))
    WebCore::Document::ensureQuirks(v88);
  v89 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v89 + 24))(v89))
    goto LABEL_151;
  v90 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v90 && *(_BYTE *)(v90 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458FA64);
  }
  v91 = v90 - 192;
  if (!v90)
    v91 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v91 + 680) + 704) & 0x1000000) == 0)
  {
LABEL_151:
    WTF::AtomStringImpl::addLiteral();
    v92 = v213[0];
    v93 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v93;
    if (v92)
    {
      if (*(_DWORD *)v92 == 2)
        WTF::StringImpl::destroy(v92, v94);
      else
        *(_DWORD *)v92 -= 2;
    }
  }
  v95 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v95 + 24))(v95))
    goto LABEL_294;
  v96 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v96 && *(_BYTE *)(v96 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458FAA4);
  }
  v97 = v96 - 192;
  if (!v96)
    v97 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v97 + 680) + 664) & 0x20000000) == 0)
  {
LABEL_294:
    WTF::AtomStringImpl::addLiteral();
    v169 = v213[0];
    v170 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v170;
    if (v169)
    {
      if (*(_DWORD *)v169 == 2)
        WTF::StringImpl::destroy(v169, v171);
      else
        *(_DWORD *)v169 -= 2;
    }
  }
  v98 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v98 && *(_BYTE *)(v98 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458F984);
  }
  v99 = v98 - 192;
  if (!v98)
    v99 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v99 + 680) + 704) & 0x8000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v196 = v213[0];
    v197 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v197;
    if (v196)
    {
      if (*(_DWORD *)v196 == 2)
        WTF::StringImpl::destroy(v196, v198);
      else
        *(_DWORD *)v196 -= 2;
    }
  }
  v100 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v100 + 24))(v100))
    goto LABEL_179;
  v101 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28);
  v102 = *(unsigned int *)(16 * (*(_DWORD *)v101 & 0xFFFFFFFE) + 0x4C);
  v103 = *(_DWORD *)(16 * (*(_DWORD *)v101 & 0xFFFFFFFE) + 0x4C) != 0;
  if ((_DWORD)v102)
  {
    v104 = 16 * v102;
    if ((char **)v104 != &WebCore::JSDOMWindowBase::s_info)
    {
      do
      {
        v104 = *(_QWORD *)(v104 + 16);
        v103 = v104 != 0;
      }
      while ((char **)v104 != &WebCore::JSDOMWindowBase::s_info && v104 != 0);
    }
  }
  if (!v103)
    goto LABEL_179;
  v106 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v101);
  if (v106 && *(_BYTE *)(v106 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458FBB4);
  }
  v107 = v106 - 192;
  if (!v106)
    v107 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v107 + 680) + 664) & 0x100000000000000) == 0)
  {
LABEL_179:
    WTF::AtomStringImpl::addLiteral();
    v108 = v213[0];
    v109 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v109;
    if (v108)
    {
      if (*(_DWORD *)v108 == 2)
        WTF::StringImpl::destroy(v108, v110);
      else
        *(_DWORD *)v108 -= 2;
    }
  }
  v111 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v111 + 24))(v111))
    goto LABEL_297;
  v112 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v112 && *(_BYTE *)(v112 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458FB24);
  }
  v113 = v112 - 192;
  if (!v112)
    v113 = 0;
  if ((*(_DWORD *)(*(_QWORD *)(v113 + 680) + 720) & 0x40) == 0)
  {
LABEL_297:
    WTF::AtomStringImpl::addLiteral();
    v172 = v213[0];
    v173 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v173;
    if (v172)
    {
      if (*(_DWORD *)v172 == 2)
        WTF::StringImpl::destroy(v172, v174);
      else
        *(_DWORD *)v172 -= 2;
    }
  }
  v114 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v114 + 24))(v114))
    goto LABEL_194;
  v115 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v115 && *(_BYTE *)(v115 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458FB44);
  }
  v116 = v115 - 192;
  if (!v115)
    v116 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v116 + 680) + 672) & 0x1000000000000) == 0)
  {
LABEL_194:
    WTF::AtomStringImpl::addLiteral();
    v117 = v213[0];
    v118 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v118;
    if (v117)
    {
      if (*(_DWORD *)v117 == 2)
        WTF::StringImpl::destroy(v117, v119);
      else
        *(_DWORD *)v117 -= 2;
    }
  }
  v120 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v120 && *(_BYTE *)(v120 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458FA24);
  }
  v121 = v120 - 192;
  if (!v120)
    v121 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v121 + 680) + 688) & 0x20) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v199 = v213[0];
    v200 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v200;
    if (v199)
    {
      if (*(_DWORD *)v199 == 2)
        WTF::StringImpl::destroy(v199, v201);
      else
        *(_DWORD *)v199 -= 2;
    }
  }
  v122 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28);
  v123 = *(unsigned int *)(16 * (*(_DWORD *)v122 & 0xFFFFFFFE) + 0x4C);
  v124 = *(_DWORD *)(16 * (*(_DWORD *)v122 & 0xFFFFFFFE) + 0x4C) != 0;
  if ((_DWORD)v123)
  {
    v125 = 16 * v123;
    if ((char **)v125 != &WebCore::JSDOMWindowBase::s_info)
    {
      do
      {
        v125 = *(_QWORD *)(v125 + 16);
        v124 = v125 != 0;
      }
      while ((char **)v125 != &WebCore::JSDOMWindowBase::s_info && v125 != 0);
    }
  }
  if (!v124)
    goto LABEL_300;
  v127 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v122);
  if (v127 && *(_BYTE *)(v127 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458FB84);
  }
  v128 = v127 - 192;
  if (!v127)
    v128 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v128 + 680) + 712) & 0x1000) == 0)
  {
LABEL_300:
    WTF::AtomStringImpl::addLiteral();
    v175 = v213[0];
    v176 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v176;
    if (v175)
    {
      if (*(_DWORD *)v175 == 2)
        WTF::StringImpl::destroy(v175, v177);
      else
        *(_DWORD *)v175 -= 2;
    }
  }
  v129 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v129 + 24))(v129) & 1) == 0)
  {
    v202 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28));
    if (!WebCore::ScriptExecutionContext::allowsMediaDevices(v202))
      goto LABEL_330;
  }
  v130 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v130 && *(_BYTE *)(v130 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458FB04);
  }
  v131 = v130 - 192;
  if (!v130)
    v131 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v131 + 680) + 712) & 0x800000) == 0)
  {
LABEL_330:
    WTF::AtomStringImpl::addLiteral();
    v203 = v213[0];
    v204 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v204;
    if (v203)
    {
      if (*(_DWORD *)v203 == 2)
        WTF::StringImpl::destroy(v203, v205);
      else
        *(_DWORD *)v203 -= 2;
    }
  }
  v132 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v132 && *(_BYTE *)(v132 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458FA84);
  }
  v133 = v132 - 192;
  if (!v132)
    v133 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v133 + 680) + 688) & 0x10000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v206 = v213[0];
    v207 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v207;
    if (v206)
    {
      if (*(_DWORD *)v206 == 2)
        WTF::StringImpl::destroy(v206, v208);
      else
        *(_DWORD *)v206 -= 2;
    }
  }
  v134 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v134 && *(_BYTE *)(v134 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458FAE4);
  }
  v135 = v134 - 192;
  if (!v134)
    v135 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v135 + 680) + 704) & 0x1000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v136 = v213[0];
    v137 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v137;
    if (v136)
    {
      if (*(_DWORD *)v136 == 2)
        WTF::StringImpl::destroy(v136, v138);
      else
        *(_DWORD *)v136 -= 2;
    }
  }
  v139 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v139 + 24))(v139))
    goto LABEL_303;
  v140 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v140 && *(_BYTE *)(v140 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458FBD4);
  }
  v141 = v140 - 192;
  if (!v140)
    v141 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v141 + 680) + 688) & 0x8000000000000) == 0)
  {
LABEL_303:
    WTF::AtomStringImpl::addLiteral();
    v178 = v213[0];
    v179 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v179;
    if (v178)
    {
      if (*(_DWORD *)v178 == 2)
        WTF::StringImpl::destroy(v178, v180);
      else
        *(_DWORD *)v178 -= 2;
    }
  }
  v142 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v142 + 24))(v142))
    goto LABEL_306;
  v143 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v143 && *(_BYTE *)(v143 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458FBF4);
  }
  v144 = v143 - 192;
  if (!v143)
    v144 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v144 + 680) + 704) & 0x4000000) == 0)
  {
LABEL_306:
    WTF::AtomStringImpl::addLiteral();
    v181 = v213[0];
    v182 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v182;
    if (v181)
    {
      if (*(_DWORD *)v181 == 2)
        WTF::StringImpl::destroy(v181, v183);
      else
        *(_DWORD *)v181 -= 2;
    }
  }
  v145 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v145 && *(_BYTE *)(v145 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458FB64);
  }
  v146 = v145 - 192;
  if (!v145)
    v146 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v146 + 680) + 704) & 8) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v209 = v213[0];
    v210 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v210;
    if (v209)
    {
      if (*(_DWORD *)v209 == 2)
        WTF::StringImpl::destroy(v209, v211);
      else
        *(_DWORD *)v209 -= 2;
    }
  }
  v147 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v147 + 24))(v147))
    goto LABEL_309;
  v148 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v148 && *(_BYTE *)(v148 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458FC14);
  }
  v149 = v148 - 192;
  if (!v148)
    v149 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v149 + 680) + 696) & 0x80) == 0)
  {
LABEL_309:
    WTF::AtomStringImpl::addLiteral();
    v184 = v213[0];
    v185 = *v9;
    v19 = 1;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v185;
    if (v184)
    {
      if (*(_DWORD *)v184 == 2)
        WTF::StringImpl::destroy(v184, v186);
      else
        *(_DWORD *)v184 -= 2;
    }
  }
  v150 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v150 + 24))(v150))
    goto LABEL_312;
  v151 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                           * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                           + 0x28));
  if (v151 && *(_BYTE *)(v151 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19458FC34);
  }
  v152 = v151 - 192;
  if (!v151)
    v152 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v152 + 680) + 696) & 0x100000000000) != 0)
  {
    if (!v19)
      goto LABEL_266;
  }
  else
  {
LABEL_312:
    WTF::AtomStringImpl::addLiteral();
    v187 = v213[0];
    v188 = *v9;
    *v9 = 1;
    LODWORD(v213[0]) = -1;
    WORD2(v213[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v188;
    if (v187)
    {
      if (*(_DWORD *)v187 == 2)
        WTF::StringImpl::destroy(v187, v189);
      else
        *(_DWORD *)v187 -= 2;
    }
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
LABEL_266:
  v153 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v155 = JSC::JSString::create((uint64_t)this, v213);
  v156 = v213[0];
  v213[0] = 0;
  if (v156)
  {
    if (*(_DWORD *)v156 == 2)
      WTF::StringImpl::destroy(v156, v154);
    else
      *(_DWORD *)v156 -= 2;
  }
  v157 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v217 = *(_DWORD *)SlowCase;
  v216 = v157;
  v158 = JSC::Structure::outOfLineCapacity(v157);
  v214 = 0;
  v215 = v158;
  v213[0] = (WTF::StringImpl *)&v215;
  v213[1] = (WTF::StringImpl *)SlowCase;
  v213[2] = this;
  v213[3] = (WTF::StringImpl *)&v217;
  v213[4] = (WTF::StringImpl *)&v216;
  v213[5] = (WTF::StringImpl *)&v214;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v157, this, v153, 6, (uint64_t)v213);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v214, v155);
  *((_DWORD *)v157 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::JSNavigatorPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSClipboardPrototype::create(WebCore::JSClipboardPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSClipboard::s_info, &WebCore::JSClipboardPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::JSClipboardPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

WTF::StringImpl *WebCore::IntersectionObserver::notify(WTF::StringImpl *this)
{
  unsigned int v1;
  uint64_t v2;
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WebCore::ScriptExecutionContext *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WebCore::ScriptExecutionContext *v12;
  WTF::StringImpl *v14;
  int v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  bmalloc::api *v20;
  void *v21;
  uint64_t v22;
  WTF *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::JSONImpl::Object *v27;
  WTF *v28;
  int v29;
  unsigned int v30;
  WTF *v31;
  uint64_t v32;
  WTF::StringImpl *v33;

  v1 = *((_DWORD *)this + 33);
  if (v1)
  {
    v2 = (uint64_t)this;
    v3 = (WTF *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = 0;
    v28 = v3;
    LODWORD(v3) = *((_DWORD *)this + 32);
    *((_QWORD *)this + 16) = 0;
    v29 = (int)v3;
    v30 = v1;
    v4 = (WTF *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    v31 = v4;
    v5 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = 0;
    v32 = v5;
    v6 = (WTF *)*((_QWORD *)this + 17);
    v7 = *((unsigned int *)this + 37);
    *((_QWORD *)this + 17) = 0;
    *((_QWORD *)this + 18) = 0;
    this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 40))(*((_QWORD *)this + 10));
    if ((_DWORD)this)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + 8);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v11 = *(unsigned __int8 *)(v10 + 178);
          if (*(_BYTE *)(v10 + 178))
          {
            if (v11 == 1 || v11 == 2)
              ++*(_DWORD *)(v10 + 216);
          }
          else
          {
            *(_DWORD *)(v10 - 264) += 2;
          }
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            v27 = (WTF::JSONImpl::Object *)WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v10 - 96), v12);
            if (v27)
              WebCore::InspectorInstrumentation::willFireObserverCallbackImpl(v27, (WebCore::TimelineRecordFactory *)&v33, v10 - 96);
          }
          v14 = v33;
          v33 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v12);
            else
              *(_DWORD *)v14 -= 2;
          }
          this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, WTF **, uint64_t))(**(_QWORD **)(v2 + 80)
                                                                                                + 48))(*(_QWORD *)(v2 + 80), v2, &v28, v2);
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            this = (WTF::StringImpl *)WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v10 - 96), v8);
            if (this)
              this = (WTF::StringImpl *)WebCore::InspectorInstrumentation::didFireObserverCallbackImpl((uint64_t)this);
          }
          v16 = *(unsigned __int8 *)(v10 + 178);
          if (*(_BYTE *)(v10 + 178))
          {
            if (v16 == 1)
            {
              if (*(_DWORD *)(v10 + 216) == 1)
                this = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v10 - 96) + 40))(v10 - 96);
              else
                --*(_DWORD *)(v10 + 216);
            }
            else if (v16 == 2)
            {
              this = (WTF::StringImpl *)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v10 + 216));
            }
          }
          else if (*(_DWORD *)(v10 - 264) == 2)
          {
            if ((*(_WORD *)(v10 - 258) & 0x400) == 0)
              this = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)(v10 - 288), v8);
          }
          else
          {
            *(_DWORD *)(v10 - 264) -= 2;
          }
        }
      }
    }
    if ((_DWORD)v7)
    {
      v22 = 8 * v7;
      v23 = v6;
      do
      {
        v24 = *(WTF::StringImpl **)v23;
        if (*(_QWORD *)v23)
        {
          {
            WebCore::GCReachableRefMap::map(void)::map = 0;
          }
          v33 = v24;
          if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v33))*((_QWORD *)v24 + 2) &= ~0x4000000000000uLL;
          this = *(WTF::StringImpl **)v23;
          *(_QWORD *)v23 = 0;
          if (this)
          {
            if (*((_DWORD *)this + 6) == 2)
            {
              if ((*((_WORD *)this + 15) & 0x400) == 0)
                this = (WTF::StringImpl *)WebCore::Node::removedLastRef(this, v8);
            }
            else
            {
              *((_DWORD *)this + 6) -= 2;
            }
          }
        }
        else
        {
          *(_QWORD *)v23 = 0;
        }
        v23 = (WTF *)((char *)v23 + 8);
        v22 -= 8;
      }
      while (v22);
    }
    if (v6)
      this = (WTF::StringImpl *)WTF::fastFree(v6, v8);
    v17 = v31;
    if (HIDWORD(v32))
    {
      v25 = 8 * HIDWORD(v32);
      do
      {
        v26 = *(WTF::StringImpl **)v17;
        if (*(_QWORD *)v17)
        {
          {
            WebCore::GCReachableRefMap::map(void)::map = 0;
          }
          v33 = v26;
          if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v33))*((_QWORD *)v26 + 2) &= ~0x4000000000000uLL;
          this = *(WTF::StringImpl **)v17;
          *(_QWORD *)v17 = 0;
          if (this)
          {
            if (*((_DWORD *)this + 6) == 2)
            {
              if ((*((_WORD *)this + 15) & 0x400) == 0)
                this = (WTF::StringImpl *)WebCore::Node::removedLastRef(this, v8);
            }
            else
            {
              *((_DWORD *)this + 6) -= 2;
            }
          }
        }
        else
        {
          *(_QWORD *)v17 = 0;
        }
        v17 = (WTF *)((char *)v17 + 8);
        v25 -= 8;
      }
      while (v25);
      v17 = v31;
    }
    if (v17)
    {
      v31 = 0;
      LODWORD(v32) = 0;
      this = (WTF::StringImpl *)WTF::fastFree(v17, v8);
    }
    v18 = v28;
    if (v30)
    {
      v19 = 8 * v30;
      do
      {
        this = *(WTF::StringImpl **)v18;
        *(_QWORD *)v18 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 1)
          {
            WebCore::IntersectionObserverEntry::~IntersectionObserverEntry(this, v8);
            this = (WTF::StringImpl *)bmalloc::api::isoDeallocate(v20, v21);
          }
          else
          {
            --*(_DWORD *)this;
          }
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
      v18 = v28;
    }
    if (v18)
    {
      v28 = 0;
      v29 = 0;
      return (WTF::StringImpl *)WTF::fastFree(v18, v8);
    }
  }
  return this;
}

void WebCore::HTMLTableCellElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  uint64_t v9;
  int v10;

  WebCore::HTMLElement::attributeChanged(a1, a2, a3, a4, a5, a6);
  if (*(_QWORD *)a2 == WebCore::HTMLNames::rowspanAttr || *(_QWORD *)a2 == WebCore::HTMLNames::colspanAttr)
  {
    v9 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
    if (v9)
    {
      if ((*(_BYTE *)(v9 + 45) & 2) != 0)
        goto LABEL_11;
      if (*(_BYTE *)(v9 + 46) == 37)
      {
        ++*(_DWORD *)(v9 + 16);
        WebCore::RenderTableCell::colSpanOrRowSpanChanged((WebCore::RenderTableCell *)v9);
        v10 = *(_DWORD *)(v9 + 16);
        if (v10)
        {
          *(_DWORD *)(v9 + 16) = v10 - 1;
          return;
        }
LABEL_11:
        __break(0xC471u);
        JUMPOUT(0x194590584);
      }
    }
  }
}

WTF::StringImpl *WebCore::HTMLFrameElementBase::openURL(WTF::StringImpl *result, char a2, char a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WebCore::Document *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int canLoadURL;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *IdAttribute;
  uint64_t v37;
  WTF::StringImpl *v38;
  __int128 v39;
  __int16 v40;
  __int128 v41;
  _BYTE v42[32];
  WTF::StringImpl *v43;
  __int128 v44;
  __int128 v45;
  WTF::StringImpl *v46;

  v5 = result;
  v7 = (WTF::StringImpl **)((char *)result + 128);
  v6 = *((_QWORD *)result + 16);
  if (!v6 || !*(_DWORD *)(v6 + 4))
    goto LABEL_2;
  WebCore::Document::completeURL(*(WebCore::Document **)(*((_QWORD *)result + 5) + 8), v7, *(_QWORD *)(*((_QWORD *)result + 5) + 8) + 848, 0, (WTF::URL *)&v38);
  canLoadURL = WebCore::HTMLFrameElementBase::canLoadURL(v5, (const WTF::URL *)&v38);
  result = v38;
  v38 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v31);
    else
      *(_DWORD *)result -= 2;
  }
  if (!canLoadURL)
    return result;
  if (!*v7 || !*((_DWORD *)*v7 + 1))
  {
LABEL_2:
    result = *(WTF::StringImpl **)WTF::aboutBlankURL(result);
    if (result)
    {
      if ((*((_BYTE *)result + 16) & 0x10) != 0)
      {
        *(_DWORD *)result += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(result, v8);
        result = v38;
      }
    }
    v9 = *v7;
    *v7 = result;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 5) + 8) + 528);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      v12 = (unsigned int *)(v11 + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      v14 = *((_QWORD *)v5 + 13);
      if (v14 && (v15 = *(_DWORD *)(v14 + 4), (v15 & 2) != 0))
      {
        if ((v15 & 1) != 0)
        {
          v33 = *(_QWORD **)(v14 + 40);
          LODWORD(v34) = *(_DWORD *)(v14 + 52);
        }
        else
        {
          v33 = (_QWORD *)(v14 + 32);
          LODWORD(v34) = v15 >> 5;
        }
        if ((_DWORD)v34)
        {
          v34 = v34;
          while (1)
          {
            v35 = *v33;
            if (*v33 == WebCore::HTMLNames::nameAttr
              || *(_QWORD *)(v35 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
              && *(_QWORD *)(v35 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
            {
              break;
            }
            v33 += 2;
            if (!--v34)
              goto LABEL_54;
          }
        }
        else
        {
LABEL_54:
          v33 = 0;
        }
        v16 = (WTF::StringImpl **)(v33 + 1);
      }
      else
      {
        v16 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      }
      v17 = *v16;
      if (v17)
      {
        *(_DWORD *)v17 += 2;
        v46 = v17;
      }
      else
      {
        v46 = 0;
        if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 5) + 8) + 680) + 688) & 0x20000) != 0)
        {
          IdAttribute = WebCore::Element::getIdAttribute(v5);
          WTF::AtomString::operator=(&v46, (WTF::StringImpl *)IdAttribute);
        }
      }
      WebCore::Document::completeURL(*(WebCore::Document **)(*((_QWORD *)v5 + 5) + 8), v7, *(_QWORD *)(*((_QWORD *)v5 + 5) + 8) + 848, 0, (WTF::URL *)&v43);
      v38 = v5;
      v18 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v5);
      v19 = v18;
      if (v18)
      {
        do
          v20 = __ldaxr(v18);
        while (__stlxr(v20 + 1, v18));
      }
      v21 = v46;
      if (v46)
        *(_DWORD *)v46 += 2;
      LOBYTE(v40) = a2;
      HIBYTE(v40) = a3;
      v22 = v43;
      if (v43)
        *(_DWORD *)v43 += 2;
      *(_OWORD *)v42 = v44;
      *(_OWORD *)&v42[16] = v45;
      v23 = *(WebCore::Document **)(*((_QWORD *)v5 + 5) + 8);
      v24 = *((_QWORD *)v23 + 86);
      if (!v24)
        v24 = WebCore::Document::ensureQuirks(v23);
      v25 = WTF::fastMalloc((WTF *)0x58);
      *(_QWORD *)v25 = off_1E33BEAB0;
      *(_QWORD *)(v25 + 8) = v38;
      *(_QWORD *)(v25 + 16) = v19;
      v39 = 0u;
      *(_QWORD *)(v25 + 24) = v21;
      *(_WORD *)(v25 + 32) = v40;
      *(_QWORD *)(v25 + 40) = v11;
      *(_QWORD *)(v25 + 48) = v22;
      v41 = 0u;
      v26 = *(_DWORD *)v42;
      *(_DWORD *)(v25 + 56) = *(_DWORD *)v42;
      *(_OWORD *)(v25 + 60) = *(_OWORD *)&v42[4];
      *(_QWORD *)(v25 + 76) = *(_QWORD *)&v42[20];
      *(_DWORD *)(v25 + 84) = *(_DWORD *)&v42[28];
      *(_DWORD *)v42 = v26 & 0xFFFFFFFE;
      v37 = v25;
      WebCore::Quirks::triggerOptionalStorageAccessIframeQuirk(v24, (const WTF::URL *)&v43, &v37);
      v28 = v37;
      v37 = 0;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      WebCore::HTMLFrameElementBase::openURL(WebCore::LockHistory,WebCore::LockBackForwardList)::$_0::~$_0(&v38, v27);
      v30 = v43;
      v43 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v29);
        else
          *(_DWORD *)v30 -= 2;
      }
      result = v46;
      v46 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

_QWORD *WebCore::HTMLFrameElementBase::didFinishInsertingNode(_QWORD *this, WebCore::HTMLFrameOwnerElement *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  WTF *v13;
  _QWORD *v14;

  if ((*((_BYTE *)this + 22) & 8) == 0)
    return this;
  v2 = (uint64_t)this;
  v3 = *(_QWORD *)(*(_QWORD *)(this[5] + 8) + 528);
  if (!v3)
    return this;
  if (!*(_QWORD *)(v3 + 8))
    return this;
  this = (_QWORD *)WebCore::SubframeLoadingDisabler::canLoadFrame((WebCore::SubframeLoadingDisabler *)this, a2);
  if (!(_DWORD)this)
    return this;
  if ((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x194590AE8);
    }
  }
  else
  {
    WebCore::Element::invalidateStyleAndRenderersForSubtree((WebCore::Element *)v2);
  }
  this = (_QWORD *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v2);
  v5 = (uint64_t)this;
  if (this)
  {
    do
      v6 = __ldaxr((unsigned int *)this);
    while (__stlxr(v6 + 1, (unsigned int *)this));
    if (!*(_BYTE *)(v2 + 136))
    {
      if (this[1])
      {
        v7 = *(_DWORD *)(v2 + 24);
        *(_DWORD *)(v2 + 24) = v7 + 2;
        *(_BYTE *)(v2 + 136) = 1;
        if ((*(_BYTE *)(v2 + 22) & 8) != 0)
        {
          this = WebCore::HTMLFrameElementBase::openURL((WTF::StringImpl *)v2, 1, 1);
          v7 = *(_DWORD *)(v2 + 24) - 2;
        }
        *(_BYTE *)(v2 + 136) = 0;
        if (v7)
        {
          *(_DWORD *)(v2 + 24) = v7;
        }
        else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        {
          this = WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
        }
      }
      do
      {
        v8 = __ldaxr((unsigned int *)v5);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, (unsigned int *)v5));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)v5);
        v12 = *(unsigned int *)(v5 + 28);
        if ((_DWORD)v12)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v12));
        v13 = *(WTF **)(v5 + 16);
        if (v13)
        {
          *(_QWORD *)(v5 + 16) = 0;
          *(_DWORD *)(v5 + 24) = 0;
          WTF::fastFree(v13, v4);
        }
        return (_QWORD *)WTF::fastFree((WTF *)v5, v4);
      }
      return this;
    }
  }
  else if (!*(_BYTE *)(v2 + 136))
  {
    return this;
  }
  v10 = WebCore::Document::eventLoop(*(WebCore::Document **)(*(_QWORD *)(v2 + 40) + 8), (WTF::StringImpl *)v4);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v11 = &off_1E33BEAD8;
  v11[1] = v2;
  v11[2] = v5;
  v14 = v11;
  WebCore::EventLoopTaskGroup::queueTask(v10, 0, (uint64_t *)&v14);
  this = v14;
  v14 = 0;
  if (this)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  return this;
}

uint64_t WebCore::HTMLFrameElementBase::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  char v3;

  v3 = a2;
  WebCore::HTMLElement::insertedIntoAncestor(a1, a2, a3);
  return v3 & 1;
}

unsigned int *WebCore::HTMLFrameElementBase::didAttachRenderers(unsigned int *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;

  v1 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v1)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x194590C34);
    }
    v2 = (*(unsigned __int8 *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
      v2 = 0;
    if (v2 == 1)
    {
      v3 = *((_QWORD *)this + 14);
      if (v3)
      {
        this = *(unsigned int **)(v3 + 8);
        if (this)
        {
          v4 = this + 2;
          do
            v5 = __ldaxr(v4);
          while (__stlxr(v5 + 1, v4));
          v6 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 56))(this);
          if (v6)
            ++*(_DWORD *)(v6 + 8);
          v10 = (unsigned int *)v6;
          WebCore::RenderWidget::setWidget(v1, (uint64_t *)&v10);
          this = v10;
          v10 = 0;
          if (this)
          {
            if (this[2] == 1)
              this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
            else
              --this[2];
          }
          do
          {
            v7 = __ldaxr(v4);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v4));
          if (!v8)
          {
            atomic_store(1u, v4);
            v9 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v9 = off_1E31FE290;
            *((_QWORD *)v9 + 1) = v4;
            v10 = v9;
            WTF::ensureOnMainThread();
            this = v10;
            v10 = 0;
            if (this)
              return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::HTMLFrameElementBase::setLocation(WTF **this, const WTF::String *a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;

  if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[5] + 1) + 680) + 688) & 0x8000) == 0
    || (result = WTF::equal(this[16], *(const WTF::StringImpl **)a2, a3), (result & 1) == 0))
  {
    result = WebCore::SubframeLoadingDisabler::canLoadFrame((WebCore::SubframeLoadingDisabler *)this, a2);
    if ((_DWORD)result)
    {
      result = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        if ((*(_BYTE *)(result + 16) & 0x10) != 0)
        {
          *(_DWORD *)result += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((WTF::AtomStringImpl *)result, v6);
          result = v8;
        }
      }
      v7 = this[16];
      this[16] = (WTF *)result;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          result = WTF::StringImpl::destroy(v7, v6);
        else
          *(_DWORD *)v7 -= 2;
      }
      if ((*((_BYTE *)this + 22) & 8) != 0)
        return (uint64_t)WebCore::HTMLFrameElementBase::openURL((WTF::StringImpl *)this, 0, 0);
    }
  }
  return result;
}

void WebCore::ComputedEffectTiming::~ComputedEffectTiming(WebCore::ComputedEffectTiming *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  char v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((unsigned int *)this + 2);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, WebCore::ComputedEffectTiming *))off_1E33919C8[v4])(&v5, this);
  *((_DWORD *)this + 2) = -1;
}

uint64_t WebCore::CollectionIndexCache<WebCore::HTMLTagCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::traverseForwardTo(uint64_t *a1, WebCore::HTMLTagCollection *this, const WTF::StringImpl *a3)
{
  unsigned int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23[6];
  WebCore::HTMLTagCollection *v24;

  v3 = a3;
  if ((a1[5] & 1) == 0)
  {
    if ((a1[5] & 2) == 0 && !a1[1])
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8);
      v7 = v6 + 4 * (((unint64_t)*(unsigned __int16 *)((char *)this + 21) >> 5) & 0xF);
      ++*(_DWORD *)(v7 + 1768);
      if ((*((_BYTE *)this + 22) & 2) != 0)
      {
        v24 = this;
        WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v6 + 1760), (uint64_t *)&v24, (uint64_t)v23);
      }
    }
    goto LABEL_34;
  }
  if (*((_DWORD *)a1 + 5) - (int)a3 >= ((_DWORD)a3 - *((_DWORD *)a1 + 4)))
  {
LABEL_34:
    v23[0] = 0;
    WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::HTMLTagCollection>((WTF **)this, a1, (const WTF::StringImpl *)(v3 - *((_DWORD *)a1 + 4)), v23);
    v21 = v23[0] + *((_DWORD *)a1 + 4);
    *((_DWORD *)a1 + 4) = v21;
    result = a1[1];
    if (!result)
    {
      *((_DWORD *)a1 + 5) = v21 + 1;
      *((_BYTE *)a1 + 40) |= 1u;
    }
    return result;
  }
  if ((*(_WORD *)((_BYTE *)this + 21) & 0x200) != 0
    && (v22 = *((_QWORD *)this + 3), (*(_BYTE *)(v22 + 22) & 0x18) != 0))
  {
    v8 = *(uint64_t **)(v22 + 40);
  }
  else
  {
    v8 = (uint64_t *)((char *)this + 24);
  }
  v10 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::HTMLTagCollection>((WTF **)this, *v8, a3);
  result = v11;
  *a1 = v10;
  a1[1] = v11;
  v13 = *((_DWORD *)a1 + 5);
  if (v13 - 1 > v3)
  {
    v14 = v13 + ~v3;
    if (v14)
    {
      while (1)
      {
        v15 = *a1;
        v16 = a1[1];
        v17 = *(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL;
        if (!v17)
          break;
        if ((*(_WORD *)((*(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          do
          {
            v20 = *(_QWORD *)(v17 + 88);
            if (!v20)
              break;
            v17 = *(_QWORD *)(v17 + 88);
          }
          while ((*(_WORD *)(v20 + 28) & 4) != 0);
        }
LABEL_16:
        while ((*(_WORD *)(v17 + 28) & 8) == 0)
        {
          if ((*(_QWORD *)(v17 + 48) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_WORD *)((*(_QWORD *)(v17 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
            {
              v17 = *(_QWORD *)(v17 + 48) & 0xFFFFFFFFFFFFLL;
              do
              {
                v19 = *(_QWORD *)(v17 + 88);
                if (!v19)
                  break;
                v17 = *(_QWORD *)(v17 + 88);
              }
              while ((*(_WORD *)(v19 + 28) & 4) != 0);
            }
            else
            {
              v17 = *(_QWORD *)(v17 + 48) & 0xFFFFFFFFFFFFLL;
            }
          }
          else
          {
            v17 = *(_QWORD *)(v17 + 32);
            if (v17 == v15)
              goto LABEL_36;
          }
          if (!v17)
            goto LABEL_36;
        }
        a1[1] = v17;
        if (WebCore::HTMLTagCollection::elementMatches((WTF **)this, (WebCore::Element *)v17, v9))
        {
          if (!--v14)
          {
            result = a1[1];
            goto LABEL_37;
          }
        }
      }
      v17 = *(_QWORD *)(v16 + 32);
      if (v17 != v15 && v17 != 0)
        goto LABEL_16;
LABEL_36:
      result = 0;
      a1[1] = 0;
    }
  }
LABEL_37:
  *((_DWORD *)a1 + 4) = v3;
  return result;
}

WTF::StringImpl *WebCore::CachedResourceLoader::updateCachedResourceWithCurrentRequest(WTF *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  BOOL v9;
  unsigned int v10;
  BOOL v11;
  WTF::StringImpl *result;
  _BYTE *v13;
  uint64_t *v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  __int128 v20;
  WTF::StringImpl *v21;
  WebCore::CachedResource::ResponseData *v22;
  WTF::StringImpl *v23;
  const void *updated;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  __int128 v29;
  __int128 v30;
  WTF::StringImpl *v31;
  int v32;
  __int16 v33;
  CFTypeRef cf;
  char v35;
  WTF::StringImpl *v36;
  char v37;
  char v38;
  WTF::StringImpl **v39;

  if ((*(_WORD *)(a3 + 557) & 0xE0) != 0x40
    || (*(_BYTE *)(a4 + 212) ? (v9 = *(_BYTE *)(a3 + 536) == 0) : (v9 = 1),
        !v9 || ((v10 = *(_BYTE *)(a3 + 556) & 0x1F, v10 <= 0xB) ? (v11 = ((1 << v10) & 0xD40) == 0) : (v11 = 1), !v11)))
  {
    *(_DWORD *)(a4 + 322) |= 0x400u;
    return WebCore::CachedResourceLoader::loadResource(a1, a2, *(_BYTE *)(a3 + 556) & 0x1F, a5, a4, a6, a7, 1);
  }
  WebCore::createResource((uint64_t *)a1, *(_BYTE *)(a3 + 556) & 0x1F, a4, a5, a6, a7);
  if (*(_QWORD *)a1)
    v13 = *(_BYTE **)(*(_QWORD *)a1 + 8);
  else
    v13 = 0;
  if ((*(_WORD *)(v13 + 557) & 3) == 0 || v13[17] != 3)
    goto LABEL_42;
  v14 = *(uint64_t **)(a3 + 400);
  if (!v14)
  {
    v15 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v15 != -1)
    {
      v27 = (WTF::StringImpl *)&v38;
      v39 = &v27;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v39, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v14 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  v16 = (WTF::StringImpl *)((v13[130] >> 4) & 3);
  v17 = (WTF::StringImpl *)*((_QWORD *)v13 + 64);
  {
    WebCore::CrossOriginAccessControlCheckDisabler::singleton(void)::disabler = (uint64_t)&off_1E33F3298;
    unk_1ECE90770 = 1;
  }
  WebCore::passesAccessControlCheck((uint64_t)v14, v16, v17, (uint64_t)&WebCore::CrossOriginAccessControlCheckDisabler::singleton(void)::disabler, &v36);
  if (!v37)
  {
LABEL_42:
    result = (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v13 + 192))(v13, a3);
    *(_WORD *)(v13 + 557) = *(_WORD *)(v13 + 557) & 0xFB1F | 0x40;
    return result;
  }
  v18 = (WTF::StringImpl **)(v13 + 160);
  if ((v13[344] & 1) != 0
    || (updated = (const void *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v13 + 160)),
        v13[344] |= 1u,
        v37))
  {
    v27 = 0;
    v19 = *v18;
    if (*v18)
      *(_DWORD *)v19 += 2;
    v28 = v19;
    v20 = *(_OWORD *)(v13 + 184);
    v29 = *(_OWORD *)(v13 + 168);
    v30 = v20;
    v21 = v36;
    if (v36)
      *(_DWORD *)v36 += 2;
    v31 = v21;
    v32 = 0;
    v33 = 2;
    cf = 0;
    v35 = 1;
    v22 = WebCore::CachedResource::mutableResponseData((WebCore::CachedResource *)v13);
    WebCore::ResourceError::operator=((uint64_t)v22 + 320, (uint64_t)&v27);
    updated = cf;
    cf = 0;
    if (!updated)
      goto LABEL_29;
  }
  else
  {
    __break(1u);
  }
  CFRelease(updated);
LABEL_29:
  v25 = v31;
  v31 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v28;
  v28 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v23);
    else
      *(_DWORD *)v26 -= 2;
  }
  result = v27;
  v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
    else
      *(_DWORD *)result -= 2;
  }
  if (v37)
  {
    result = v36;
    v36 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::StyleGeneratedImage::addClient(WebCore::StyleGeneratedImage *this, WTF **a2)
{
  uint64_t *v4;
  void *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  int v9;
  BOOL v10;
  int v11;
  void *v12;
  WTF *v13;
  _DWORD *v14;
  uint64_t v15;
  WTF *v17;
  int v18;
  WTF *v19;
  _DWORD *v20;
  _DWORD *v21;

  v4 = (uint64_t *)((char *)this + 40);
  if (WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::isEmptyIgnoringNullReferences((uint64_t)this + 40, a2))++*((_DWORD *)this + 2);
  v18 = 0;
  v6 = *((_DWORD *)this + 12);
  v7 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 12) = v6 + 1;
  if (v6 > v7)
    WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((uint64_t)v4, v5);
  v8 = a2[1];
  if (!v8)
  {
    v8 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *((_QWORD *)v8 + 1) = a2;
    v17 = a2[1];
    a2[1] = v8;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
      {
        WTF::fastFree(v17, v5);
        v8 = a2[1];
      }
      else
      {
        --*(_DWORD *)v17;
      }
    }
  }
  v9 = *(_DWORD *)v8;
  *(_DWORD *)v8 += 2;
  v19 = v8;
  v10 = __CFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    WTF::fastFree(v8, v5);
  else
    *(_DWORD *)v8 = v11;
  WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(v4, &v19, &v18, (uint64_t)&v20);
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
      WTF::fastFree(v13, v12);
    else
      --*(_DWORD *)v13;
  }
  v14 = v20;
  v15 = *v4;
  if (*v4)
    v15 += 16 * *(unsigned int *)(v15 - 4);
  if ((_DWORD *)v15 != v20 && !*(_QWORD *)(*(_QWORD *)v20 + 8))
  {
    while (1)
    {
      v14 += 4;
      if (v14 == v21)
      {
        v14 = v21;
LABEL_24:
        if (v14 == (_DWORD *)v15)
        {
          v14 = (_DWORD *)v15;
          break;
        }
        if (*(_QWORD *)(*(_QWORD *)v14 + 8))
          break;
      }
      else if ((unint64_t)(*(_QWORD *)v14 + 1) > 1)
      {
        goto LABEL_24;
      }
    }
  }
  ++v14[2];
  return (*(uint64_t (**)(WebCore::StyleGeneratedImage *, WTF **))(*(_QWORD *)this + 232))(this, a2);
}

uint64_t WebCore::StyleGeneratedImage::removeClient(uint64_t this, WebCore::RenderElement *a2)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  WTF *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v28;
  unsigned int v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = (_DWORD *)this;
  v4 = (uint64_t *)(this + 40);
  v5 = *((_QWORD *)a2 + 1);
  ++*(_DWORD *)(this + 48);
  if (!v5 || !*(_QWORD *)(v5 + 8))
  {
    this = WTF::WeakHashMap<WebCore::Node,std::unique_ptr<WebCore::QuerySelectorAllResults>,WebCore::WeakPtrImplWithEventTargetData>::end((uint64_t)&v32, v4);
    v6 = *v4;
    goto LABEL_13;
  }
  v6 = *v4;
  if (!*v4)
  {
    v15 = 0;
    v17 = 0;
    v18 = 0;
    v33 = 0;
    v34 = 0;
    goto LABEL_11;
  }
  v7 = *(_DWORD *)(v6 - 8);
  v8 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  for (i = 1; ; ++i)
  {
    v13 = v11;
    v14 = *(_QWORD *)(v6 + 16 * v11);
    if (v14 == -1)
      goto LABEL_8;
    if (!v14)
      break;
    if (v14 == v5)
    {
      v15 = v6 + 16 * v13;
      v16 = *(unsigned int *)(v6 - 4);
      v17 = v6 + 16 * v16;
      goto LABEL_10;
    }
LABEL_8:
    v11 = (v13 + i) & v7;
  }
  v16 = *(unsigned int *)(v6 - 4);
  v15 = v6 + 16 * v16;
  v17 = v15;
LABEL_10:
  v33 = v15;
  v18 = v6 + 16 * v16;
LABEL_11:
  while (v15 != v18 && !*(_QWORD *)(*(_QWORD *)v15 + 8))
  {
    v31 = v15 + 16;
    v33 = v31;
    v15 = v17;
    if (v31 != v17)
    {
      v15 = v31;
      while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
      {
        v15 += 16;
        v33 = v15;
        if (v15 == v17)
        {
          v15 = v17;
          goto LABEL_11;
        }
      }
    }
  }
LABEL_13:
  if (v6)
    v19 = v6 + 16 * *(unsigned int *)(v6 - 4);
  else
    v19 = 0;
  v20 = (_QWORD *)v33;
  if (v33 != v19)
  {
    if (*(_DWORD *)(v33 + 8) == 1)
    {
      if (!v6 || (v6 += 16 * *(unsigned int *)(v6 - 4), v6 != v33))
      {
        if (v6 != v33)
        {
          v21 = *(WTF **)v33;
          *(_QWORD *)v33 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
              WTF::fastFree(v21, a2);
            else
              --*(_DWORD *)v21;
          }
          *v20 = -1;
          ++*(_DWORD *)(*v4 - 16);
          v22 = *v4;
          if (*v4)
            v23 = *(_DWORD *)(v22 - 12) - 1;
          else
            v23 = -1;
          *(_DWORD *)(v22 - 12) = v23;
          v24 = *v4;
          if (*v4)
          {
            v25 = 6 * *(_DWORD *)(v24 - 12);
            v26 = *(_DWORD *)(v24 - 4);
            if (v25 < v26 && v26 >= 9)
              WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v4, v26 >> 1, 0);
          }
        }
      }
      v28 = v3[12];
      v29 = v3[13];
      v3[12] = v28 + 1;
      if (v28 > v29)
        WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((uint64_t)v4, a2);
      (*(void (**)(_DWORD *, WebCore::RenderElement *))(*(_QWORD *)v3 + 240))(v3, a2);
      this = WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::isEmptyIgnoringNullReferences((uint64_t)v4, v30);
      if ((_DWORD)this)
      {
        if (v3[2] == 1)
          return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
    }
    else
    {
      --*(_DWORD *)(v33 + 8);
    }
  }
  return this;
}

WTF::StringImpl *WebCore::ResourceRequestBase::setDomainForCachePartition(WebCore::ResourceRequestBase *this, const WTF::String *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  WebCore::ResourceRequestBase::partitionName((uint64_t *)a2, (char **)&v5);
  WebCore::ResourceRequestBase::setCachePartition(this, (const WTF::String *)&v5);
  result = v5;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return result;
}

uint64_t *WebCore::ResourceRequestBase::partitionName@<X0>(uint64_t *this@<X0>, char **a2@<X8>)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char v10;
  char **v11;
  char *v12;

  if (!*this)
    goto LABEL_9;
  v4 = this;
  v5 = atomic_load(&WebCore::PublicSuffixStore::singleton(void)::flag);
  if (v5 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WebCore::PublicSuffixStore::singleton(void)::flag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PublicSuffixStore::singleton(void)::$_0 &&>>);
  }
  v6 = *v4;
  if (*v4)
  {
    v7 = *(_QWORD *)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  this = WebCore::PublicSuffixStore::topPrivatelyControlledDomain((uint64_t *)&WebCore::PublicSuffixStore::singleton(void)::store, v7, v8, (uint64_t *)&v12);
  v9 = v12;
  if (!v12)
  {
LABEL_9:
    v9 = (char *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v9 += 2;
  }
  *a2 = v9;
  return this;
}

unint64_t WebCore::JSWakeLockPrototype::create(WebCore::JSWakeLockPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSWakeLock::s_info, (uint64_t)&WebCore::JSWakeLockPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::JSWakeLockPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSNodeListPrototype::create(WebCore::JSNodeListPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  JSC::JSObject *v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  JSC::Structure *v21;
  int v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  uint64_t v29;
  int *v30;
  JSC::Structure **v31;
  int *v32;
  int v33;
  int v34;
  JSC::Structure *v35;
  int v36;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v24 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v24);
    *((_QWORD *)this + 4865) = SlowCase + (int)v24;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSNodeList::s_info, &WebCore::JSNodeListPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2712);
  v10 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28) + 672);
  v11 = (WTF::StringImpl *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  if (((unint64_t)v11 >> 4)
    && (((unint64_t)v11 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x20)) == 0
    && (v12 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)), this)) != 0&& (v27 = v11, v13 = JSC::PropertyTable::get(v12, (uint64_t *)&v27), (_DWORD)v13 != -1))
  {
    if ((int)v13 > 63)
    {
      v25 = *(_QWORD *)(v10 + 8) - 8;
      v26 = 0x3F00000000 - (v13 << 32);
    }
    else
    {
      v25 = v10 + 16;
      v26 = v13 << 32;
    }
    v14 = *(_QWORD *)(v25 + (v26 >> 29));
  }
  else
  {
    v14 = 0;
  }
  v27 = 0;
  v28 = SlowCase;
  v29 = 0x1000000FFFFFFFFLL;
  v30 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v9, v14, 4, (uint64_t)&v27);
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v15);
  else
    *(_DWORD *)v11 -= 2;
  WebCore::addValueIterableMethods(*(WebCore **)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28), (JSC::JSGlobalObject *)SlowCase, v16);
  v17 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v19 = JSC::JSString::create((uint64_t)this, &v27);
  v20 = v27;
  v27 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v36 = *(_DWORD *)SlowCase;
  v35 = v21;
  v22 = JSC::Structure::outOfLineCapacity(v21);
  v33 = 0;
  v34 = v22;
  v27 = (WTF::StringImpl *)&v34;
  v28 = SlowCase;
  v29 = (uint64_t)this;
  v30 = &v36;
  v31 = &v35;
  v32 = &v33;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v21, this, v17, 6, (uint64_t)&v27);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v33, v19);
  *((_DWORD *)v21 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::JSNodeListPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSLocationPrototype::create(WebCore::JSLocationPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSLocation::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSLocationPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::JSHTMLSelectElement::subspaceForImpl(WebCore::JSHTMLSelectElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4624);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v20 = *(_QWORD *)(v9 + 4624);
  if (!v20)
  {
    v14 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v14, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v16 = v21;
    v21 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v22;
    v22 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v15);
      else
        --*(_DWORD *)v17;
    }
    v20 = v14;
    v18 = *(_QWORD *)(v9 + 4624);
    *(_QWORD *)(v9 + 4624) = v14;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v19 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = v14;
      *(_DWORD *)(v7 + 2844) = v19 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 4624);
  *(_QWORD *)(v3 + 4624) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSHTMLIFrameElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unsigned int *WebCore::HTMLTextAreaElement::didAddUserAgentShadowRoot(WebCore::HTMLTextAreaElement *this, WebCore::ShadowRoot *a2)
{
  uint64_t v3;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *result;
  WTF::StringImpl *v10;
  _BYTE v11[8];
  WTF::StringImpl *v12;
  char v13;

  v3 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if ((*((_BYTE *)this + 160) & 0x18) != 0)
  {
    v5 = 0;
  }
  else if ((*(unsigned int (**)(char *))(*((_QWORD *)this + 14) + 288))((char *)this + 112))
  {
    v5 = (*((_BYTE *)this + 160) & 0x20) == 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = bmalloc::api::isoAllocate();
  v7 = v6;
  *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v6 + 24) = 0x141C00000002;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = v3 + 96;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  ++*(_DWORD *)(v3 + 3324);
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  v8 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v6 + 96) = v8;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)v6 = off_1E33E8A98;
  WebCore::TextControlInnerTextElement::updateInnerTextElementEditabilityImpl((WebCore::TextControlInnerTextElement *)v6, v5, 1);
  result = (unsigned int *)WebCore::ContainerNode::appendChild((uint64_t)a2, (WebCore::Node *)v7, (uint64_t)v11);
  if (v13)
  {
    result = (unsigned int *)v12;
    v12 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
      else
        *result -= 2;
    }
  }
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v7, v10);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  return result;
}

const char *WebCore::CachedCSSStyleSheet::setEncoding(WebCore::CachedCSSStyleSheet *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const char *result;
  char *v7;
  const char *v8;
  char *v9;
  __int16 v10;
  WTF *v11;
  WebCore::HTMLMetaCharsetParser *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  const char *v16[2];

  v2 = *((_QWORD *)this + 82);
  ++*(_DWORD *)v2;
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  result = (const char *)PAL::atomCanonicalTextEncodingName(v4, (const char *)v5);
  v8 = result;
  v9 = v7;
  v16[0] = result;
  v16[1] = v7;
  if (v7 && (result = (const char *)PAL::nonBackslashEncodings) != 0 && *(_QWORD *)PAL::nonBackslashEncodings)
  {
    result = (const char *)WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v16);
    if (result)
      v10 = 165;
    else
      v10 = 92;
  }
  else
  {
    v10 = 92;
  }
  if (v9 && !*(_BYTE *)(v2 + 94))
  {
    *(_QWORD *)(v2 + 16) = v8;
    *(_QWORD *)(v2 + 24) = v9;
    *(_WORD *)(v2 + 32) = v10;
    result = *(const char **)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (result)
      result = (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)result + 8))(result);
    *(_DWORD *)(v2 + 56) = 5;
  }
  if (*(_DWORD *)v2 == 1)
  {
    v11 = *(WTF **)(v2 + 72);
    if (v11)
    {
      *(_QWORD *)(v2 + 72) = 0;
      *(_DWORD *)(v2 + 80) = 0;
      WTF::fastFree(v11, v7);
    }
    v12 = *(WebCore::HTMLMetaCharsetParser **)(v2 + 48);
    *(_QWORD *)(v2 + 48) = 0;
    if (v12)
    {
      WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v12, (WTF::StringImpl *)v7);
      WTF::fastFree(v13, v14);
    }
    v15 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    return (const char *)WTF::fastFree((WTF *)v2, v7);
  }
  else
  {
    --*(_DWORD *)v2;
  }
  return result;
}

uint64_t WebCore::createDOMException(JSC *this, JSC::JSGlobalObject *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  const WTF::String *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t RangeError;
  WTF::StringImpl *v13;

  v4 = *((_QWORD *)this + 7);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5 && *(_QWORD *)(v4 + 24) == v5)
    return 10;
  v6 = 10;
  switch((int)a2)
  {
    case ' ':
      if (*(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4))
      {
        RangeError = JSC::createRangeError(this, a3, a3);
        goto LABEL_20;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = JSC::createRangeError(this, (JSC::JSGlobalObject *)&v13, v9);
      v11 = v13;
      v13 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
      return v6;
    case '!':
      if (*(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4))
        RangeError = JSC::createTypeError(this, a3, a3);
      else
        RangeError = JSC::createTypeError(this, a2);
      goto LABEL_20;
    case '"':
      if (*(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4))
        RangeError = JSC::createSyntaxError(this, a3, a3);
      else
        RangeError = JSC::createSyntaxError(this, a2);
      goto LABEL_20;
    case '#':
      RangeError = JSC::createStackOverflowError(this, a2);
      goto LABEL_20;
    case '$':
      RangeError = JSC::createOutOfMemoryError(this, a2);
LABEL_20:
      v6 = RangeError;
      break;
    case '%':
      return v6;
    default:
      WebCore::DOMException::create(a2, (WTF::StringImpl **)a3, (uint64_t *)&v13);
      v6 = WebCore::wrap<WebCore::DOMException>((uint64_t)this, (uint64_t)this, v13);
      v7 = v13;
      v13 = 0;
      if (v7)
      {
        if (*((_DWORD *)v7 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v7 + 8))(v7);
        else
          --*((_DWORD *)v7 + 2);
      }
      JSC::addErrorInfo();
      break;
  }
  return v6;
}

_QWORD *WebCore::TextFieldInputType::attributeChanged(_QWORD *this, const WebCore::QualifiedName *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WebCore::HTMLTextFormControlElement *v9;
  WTF::StringImpl *v10;

  if (*(_QWORD *)a2 == WebCore::HTMLNames::valueAttr || *(_QWORD *)a2 == WebCore::HTMLNames::placeholderAttr)
  {
    v3 = this;
    v4 = this[3];
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        if ((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) != 0
          && *(_QWORD *)((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)
          && (*(_BYTE *)(v5 + 168) & 2) == 0)
        {
          (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD *))(*this + 272))(&v10, this);
          WebCore::HTMLTextFormControlElement::setInnerTextValue((WebCore::HTMLTextFormControlElement *)v5, &v10);
          v7 = v10;
          v10 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, v6);
            else
              *(_DWORD *)v7 -= 2;
          }
          v8 = v3[3];
          if (v8)
            v9 = *(WebCore::HTMLTextFormControlElement **)(v8 + 8);
          else
            v9 = 0;
          return (_QWORD *)WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(v9);
        }
      }
    }
  }
  return this;
}

void WebCore::RenderTableSection::~RenderTableSection(WebCore::RenderTableSection *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  WTF *v15;
  uint64_t v16;
  WTF **v17;
  WTF *v18;
  WTF *v19;

  v3 = *((_QWORD *)this + 34);
  if (v3)
    WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 32);
  if (v4)
  {
    v16 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v16)
    {
      v17 = (WTF **)*((_QWORD *)this + 32);
      do
      {
        v18 = *v17;
        if (*v17 != (WTF *)-1)
        {
          *v17 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 1)
              WTF::fastFree(v18, a2);
            else
              --*(_DWORD *)v18;
          }
        }
        ++v17;
        --v16;
      }
      while (v16);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 27);
  if (v5)
  {
    *((_QWORD *)this + 27) = 0;
    *((_DWORD *)this + 56) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *((_DWORD *)this + 53);
  v7 = *((_QWORD *)this + 25);
  if (v6)
  {
    v8 = v7 + 40 * v6;
    do
    {
      if (*(_BYTE *)(v7 + 32) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v7 + 28));
      }
      v9 = *(unsigned int *)(v7 + 12);
      v10 = *(WTF **)v7;
      if ((_DWORD)v9)
      {
        v11 = 32 * v9;
        v12 = (WTF *)((char *)v10 + 16);
        do
        {
          v13 = (WTF *)*((_QWORD *)v12 - 2);
          if (v12 != v13 && v13 != 0)
          {
            *((_QWORD *)v12 - 2) = 0;
            *((_DWORD *)v12 - 2) = 0;
            v19 = v12;
            WTF::fastFree(v13, a2);
            v12 = v19;
          }
          v12 = (WTF *)((char *)v12 + 32);
          v11 -= 32;
        }
        while (v11);
        v10 = *(WTF **)v7;
      }
      if (v10)
      {
        *(_QWORD *)v7 = 0;
        *(_DWORD *)(v7 + 8) = 0;
        WTF::fastFree(v10, a2);
      }
      v7 += 40;
    }
    while (v7 != v8);
    v7 = *((_QWORD *)this + 25);
  }
  if (v7)
  {
    *((_QWORD *)this + 25) = 0;
    *((_DWORD *)this + 52) = 0;
    WTF::fastFree((WTF *)v7, a2);
  }
  *(_QWORD *)this = off_1E34201A0;
  v15 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
      WTF::fastFree(v15, a2);
    else
      --*(_DWORD *)v15;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::RenderTableSection::~RenderTableSection(this, a2);
  if (*((_DWORD *)v2 + 4))
  {
    *((_OWORD *)v2 + 16) = 0u;
    *((_OWORD *)v2 + 17) = 0u;
    *((_OWORD *)v2 + 14) = 0u;
    *((_OWORD *)v2 + 15) = 0u;
    *((_OWORD *)v2 + 12) = 0u;
    *((_OWORD *)v2 + 13) = 0u;
    *((_OWORD *)v2 + 10) = 0u;
    *((_OWORD *)v2 + 11) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(v2, v3);
  }
}

void WebCore::RenderTableSection::recalcCells(WebCore::RenderTableSection *this)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  WebCore::RenderElement *v33;
  uint64_t v34;
  int v35;

  *((_BYTE *)this + 282) = 0;
  *((_QWORD *)this + 29) = 0;
  v2 = (unsigned int *)((char *)this + 200);
  WTF::Vector<WebCore::RenderTableSection::RowStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 50, 0);
  v3 = *((unsigned int *)this + 16);
  if (v3 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
  {
    v4 = *(_QWORD *)((v3 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    if (v4)
    {
      if (*(_BYTE *)(v4 + 46) != 39)
      {
        __break(0xC471u);
        JUMPOUT(0x194592F9CLL);
      }
      while (1)
      {
        v5 = *((_DWORD *)this + 59);
        v6 = v5 + 1;
        *((_DWORD *)this + 58) = 0;
        *((_DWORD *)this + 59) = v6;
        v7 = *((unsigned int *)this + 53);
        LODWORD(v8) = v7;
        if (v7 < v6)
        {
          WTF::Vector<WebCore::RenderTableSection::RowStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)v2, v6);
          v27 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
          v28 = *(unsigned __int8 *)(v27 + 46);
          if (v28 != 35 && v28 != 63)
          {
            __break(0xC471u);
            JUMPOUT(0x194593028);
          }
          LODWORD(v8) = *((_DWORD *)this + 53);
          if (v8 > v7)
          {
            v29 = *(_DWORD *)(v27 + 228);
            if (v29 <= 1)
              v30 = 1;
            else
              v30 = v29;
            v31 = 40 * v7;
            do
            {
              WTF::Vector<WebCore::RenderTableSection::CellStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resizeToFit(*((_QWORD *)this + 25) + v31, v30);
              ++v7;
              v8 = *((unsigned int *)this + 53);
              v31 += 40;
            }
            while (v7 < v8);
          }
        }
        if (v8 <= v5)
        {
          __break(0xC471u);
          JUMPOUT(0x194593030);
        }
        *(_QWORD *)(*(_QWORD *)v2 + 40 * v5 + 16) = v4;
        if (v5 >= 0x7FFFFFFF)
        {
LABEL_58:
          __break(0xC471u);
          JUMPOUT(0x194592F5CLL);
        }
        *(_DWORD *)(v4 + 200) = *(_DWORD *)(v4 + 200) & 0x80000000 | v5;
        if (*((_DWORD *)this + 53) <= v5)
        {
          __break(0xC471u);
          JUMPOUT(0x194593038);
        }
        v9 = *(_QWORD *)v2;
        v10 = *(_QWORD *)(*(_QWORD *)v2 + 40 * v5 + 16);
        v11 = ((*(_DWORD *)(v10 + 124) >> 13) & 6) - 2;
        v12 = *(_QWORD *)(*(_QWORD *)(v10 + 88) + 8);
        v13 = v11 >= 4;
        v14 = v12 + 4;
        v15 = v12 + 12;
        if (v13)
          v16 = v15;
        else
          v16 = v14;
        v17 = (int *)(v9 + 40 * v5 + 28);
        if (v17 != (int *)v16)
        {
          v18 = v9 + 40 * v5;
          v20 = *(unsigned __int8 *)(v18 + 32);
          v19 = (_BYTE *)(v18 + 32);
          if (v20 == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v17);
            v17 = (int *)(v9 + 40 * v5 + 28);
          }
          v21 = *(unsigned __int8 *)(v16 + 4);
          *v19 = v21;
          *(_BYTE *)(v9 + 40 * v5 + 33) = *(_BYTE *)(v16 + 5);
          if (v21 <= 0xD)
          {
            v22 = 1 << v21;
            if ((v22 & 0x7FC) != 0)
            {
              *(_BYTE *)(v9 + 40 * v5 + 34) = *(_BYTE *)(v16 + 6);
              *v17 = *(_DWORD *)v16;
            }
            else if ((v22 & 0x3003) != 0)
            {
              *v17 = 0;
            }
            else
            {
              *v17 = *(_DWORD *)v16;
              WebCore::Length::ref(v17);
            }
          }
        }
        v23 = *(unsigned int *)(v4 + 64);
        if (v23 | ((unint64_t)*(unsigned __int8 *)(v4 + 68) << 32))
        {
          v24 = *(_QWORD *)((v23 | ((unint64_t)*(unsigned __int8 *)(v4 + 68) << 32)) + 8);
          if (v24)
          {
            if (*(_BYTE *)(v24 + 46) != 37)
            {
              __break(0xC471u);
              JUMPOUT(0x194592F7CLL);
            }
            while (1)
            {
              WebCore::RenderTableSection::addCell(this, (WebCore::RenderTableCell *)v24, (WebCore::RenderTableRow *)v4);
              v25 = *(unsigned int *)(v24 + 47);
              if (!(v25 | ((unint64_t)*(unsigned __int8 *)(v24 + 51) << 32)))
                break;
              v24 = *(_QWORD *)((v25 | ((unint64_t)*(unsigned __int8 *)(v24 + 51) << 32)) + 8);
              if (!v24)
                break;
              if (*(_BYTE *)(v24 + 46) != 37)
                goto LABEL_58;
            }
          }
        }
        v26 = *(unsigned int *)(v4 + 47);
        if (!(v26 | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32)))
          break;
        v4 = *(_QWORD *)((v26 | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32)) + 8);
        if (!v4)
          break;
        if (*(_BYTE *)(v4 + 46) != 39)
        {
          __break(0xC471u);
          JUMPOUT(0x194592FBCLL);
        }
      }
    }
  }
  WTF::Vector<WebCore::RenderTableSection::RowStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v2, *((unsigned int *)this + 53));
  v32 = *((_DWORD *)this + 5);
  if ((v32 & 8) == 0)
  {
    *((_DWORD *)this + 5) = v32 | 8;
    v33 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
    WebCore::RenderObject::scheduleLayout(this, v33);
    if ((*((_BYTE *)this + 21) & 0x80) != 0)
    {
      if ((*((_BYTE *)this + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x194592FDCLL);
      }
      v34 = *((_QWORD *)this + 18);
      if (v34)
      {
        v35 = *(_DWORD *)(v34 + 8) + 1;
        *(_DWORD *)(v34 + 8) = v35;
      }
      else
      {
        v35 = MEMORY[8];
      }
      *(_QWORD *)(v34 + 24) = *(_QWORD *)(v34 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
      if (!v35)
      {
        __break(0xC471u);
        JUMPOUT(0x194593008);
      }
      *(_DWORD *)(v34 + 8) = v35 - 1;
    }
  }
}

WTF::MonotonicTime *WebCore::NetworkLoadMetrics::updateFromFinalMetrics(WebCore::NetworkLoadMetrics *this, const WebCore::NetworkLoadMetrics *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  __int128 v18;
  _DWORD *v19;
  WTF::MonotonicTime *result;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v9 = *((_QWORD *)this + 4);
  v8 = *((_QWORD *)this + 5);
  v10 = *((_QWORD *)this + 6);
  v11 = *((double *)this + 9);
  v23 = *((_QWORD *)this + 7);
  v24 = *((_QWORD *)this + 8);
  v25 = *((_QWORD *)this + 10);
  v12 = *((_OWORD *)a2 + 1);
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = v12;
  v14 = *((_OWORD *)a2 + 3);
  v13 = *((_OWORD *)a2 + 4);
  v15 = *((_OWORD *)a2 + 2);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_OWORD *)this + 3) = v14;
  *((_OWORD *)this + 4) = v13;
  *((_OWORD *)this + 2) = v15;
  v16 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v16)
    *v16 += 2;
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = v16;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *((_OWORD *)a2 + 6);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_OWORD *)this + 6) = v18;
  v19 = (_DWORD *)*((_QWORD *)a2 + 15);
  if (v19)
    ++*v19;
  result = (WTF::MonotonicTime *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = v19;
  if (result)
    result = (WTF::MonotonicTime *)WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(result, a2);
  if (*(double *)this == 0.0)
    *(_QWORD *)this = v5;
  if (*((double *)this + 1) == 0.0)
    *((_QWORD *)this + 1) = v4;
  if (*((double *)this + 2) == 0.0)
    *((_QWORD *)this + 2) = v6;
  if (*((double *)this + 3) == 0.0)
    *((_QWORD *)this + 3) = v7;
  if (*((double *)this + 4) == 0.0)
    *((_QWORD *)this + 4) = v9;
  if (*((double *)this + 5) == 0.0)
    *((_QWORD *)this + 5) = v8;
  if (*((double *)this + 6) == 0.0)
    *((_QWORD *)this + 6) = v10;
  if (*((double *)this + 7) == 0.0)
    *((_QWORD *)this + 7) = v23;
  if (*((double *)this + 8) == 0.0)
    *((_QWORD *)this + 8) = v24;
  v21 = *((double *)this + 9);
  if (v21 == 0.0)
  {
    *((double *)this + 9) = v11;
    v21 = v11;
  }
  if (*((double *)this + 10) == 0.0)
    *((_QWORD *)this + 10) = v25;
  if (v21 == 0.0)
  {
    result = (WTF::MonotonicTime *)WTF::MonotonicTime::now(result);
    *((_QWORD *)this + 9) = v22;
  }
  *((_BYTE *)this + 98) |= 1u;
  return result;
}

uint64_t WebCore::NavigatorClipboard::clipboard@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int v8;
  bmalloc::api *v9;
  void *v10;

  v3 = *(_QWORD *)(this + 8);
  if (!v3)
  {
    v4 = this;
    v5 = *(_QWORD *)(this + 16);
    v3 = bmalloc::api::isoAllocate();
    *(_DWORD *)(v3 + 24) = 1;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)v3 = off_1E3352D18;
    *(_BYTE *)(v3 + 32) = 0;
    *(_BYTE *)(v3 + 64) = 0;
    WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 24), v5);
    v7 = *(unsigned int **)(v5 + 24);
    if (v7)
    {
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
    *(_QWORD *)(v3 + 72) = v7;
    *(_QWORD *)(v3 + 80) = 0;
    *(_QWORD *)(v3 + 88) = 0;
    *(_QWORD *)(v3 + 96) = 0;
    this = *(_QWORD *)(v4 + 8);
    *(_QWORD *)(v4 + 8) = v3;
    if (this)
    {
      if (*(_DWORD *)(this + 24) == 1)
      {
        WebCore::Clipboard::~Clipboard((WebCore::Clipboard *)this, v6);
        this = bmalloc::api::isoDeallocate(v9, v10);
        v3 = *(_QWORD *)(v4 + 8);
        if (!v3)
          goto LABEL_8;
      }
      else
      {
        --*(_DWORD *)(this + 24);
      }
    }
  }
  ++*(_DWORD *)(v3 + 24);
LABEL_8:
  *a2 = v3;
  return this;
}

unint64_t WebCore::JSStoragePrototype::create(WebCore::JSStoragePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSStoragePrototype::finishCreation((WebCore::JSStoragePrototype *)v6, this);
  return v6;
}

WTF::StringImpl *WebCore::JSStoragePrototype::finishCreation(WebCore::JSStoragePrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(a2, (uint64_t)&WebCore::JSStorage::s_info, &WebCore::JSStoragePrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::JSHTMLTableElement::createPrototype(WebCore::JSHTMLTableElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  int v3;
  JSC::JSCell *v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v3 = (int)a2;
  v5 = (JSC::JSCell *)WebCore::JSHTMLElement::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, v3, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSHTMLTableElementPrototype::create(this, v6, v7, v8);
}

uint64_t WebCore::JSHTMLOListElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSHTMLMediaElement::createPrototype(WebCore::JSHTMLMediaElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  int v3;
  JSC::JSCell *v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v3 = (int)a2;
  v5 = (JSC::JSCell *)WebCore::JSHTMLElement::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, v3, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSHTMLMediaElementPrototype::create(this, v6, v7, v8);
}

uint64_t WebCore::JSHTMLAudioElement::prototype(WebCore::JSHTMLAudioElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t Structure;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSHTMLAudioElement::s_info + ~((_QWORD)&WebCore::JSHTMLAudioElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSHTMLAudioElement::s_info + ~((_QWORD)&WebCore::JSHTMLAudioElement::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSHTMLAudioElement::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSHTMLAudioElement::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = WebCore::getDOMStructure<WebCore::JSHTMLMediaElement>(this, a2);
    Structure = WebCore::JSHTMLAudioElementPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v14 + 48));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSHTMLAudioElementPrototype::create(this, a2, Structure, v16);
    v18 = WebCore::JSHTMLAudioElement::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSHTMLAudioElement::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSHTMLAudioElement::subspaceForImpl(WebCore::JSHTMLAudioElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4192);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 4192);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 4192);
    *(_QWORD *)(v8 + 4192) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 4192);
  *(_QWORD *)(v3 + 4192) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSHTMLAudioElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void WebCore::HTMLPreloadScanner::~HTMLPreloadScanner(WebCore::HTMLPreloadScanner *this, void *a2)
{
  WTF *v3;
  WTF *v5;
  WTF *v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v16;
  WTF *v17;

  v3 = (WTF *)*((_QWORD *)this + 409);
  if ((WebCore::HTMLPreloadScanner *)((char *)this + 3288) != v3 && v3 != 0)
  {
    *((_QWORD *)this + 409) = 0;
    *((_DWORD *)this + 820) = 0;
    WTF::fastFree(v3, a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 403);
  if ((WebCore::HTMLPreloadScanner *)((char *)this + 3240) != v5 && v5 != 0)
  {
    *((_QWORD *)this + 403) = 0;
    *((_DWORD *)this + 808) = 0;
    WTF::fastFree(v5, a2);
  }
  v7 = (WTF *)*((_QWORD *)this + 393);
  if ((WebCore::HTMLPreloadScanner *)((char *)this + 3160) != v7 && v7 != 0)
  {
    *((_QWORD *)this + 393) = 0;
    *((_DWORD *)this + 788) = 0;
    WTF::fastFree(v7, a2);
  }
  WebCore::HTMLToken::~HTMLToken((WebCore::HTMLPreloadScanner *)((char *)this + 312), a2);
  WTF::Deque<WebCore::SegmentedString::Substring,0ul>::~Deque((unint64_t *)this + 27, v9);
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF *)*((_QWORD *)this + 20);
  if (v12)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v12, v10);
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v10);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF *)*((_QWORD *)this + 5);
  if (v15)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v15, v10);
  }
  v16 = (WTF *)*((_QWORD *)this + 3);
  if (v16)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v16, v10);
  }
  v17 = (WTF *)*((_QWORD *)this + 1);
  if (v17)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v17, v10);
  }
}

void WebCore::HTMLFastPathParser<unsigned char>::parseAttributes(uint64_t a1, WTF::StringImpl *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t StatusReg;
  WebCore::QualifiedName::QualifiedNameImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  BOOL v26;
  unint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  unint64_t v54;
  uint8x16_t v55;
  unsigned __int8 *v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl **v75;
  WTF::StringImpl **v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  WTF::StringImpl **v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  int v87;
  WTF::StringImpl **v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WebCore::QualifiedName::QualifiedNameImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  int v111;
  unsigned int *v112;
  _QWORD *v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int *v120;
  _QWORD *v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int v127;
  char v128;
  int v129;
  char v130;
  uint64_t v131;
  int v132;
  BOOL v133;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  char v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int v145;
  unsigned __int8 *v146;
  WTF::StringImpl *v147;
  int v148;
  uint64_t v149;
  unsigned __int8 *v150;
  int v151;
  uint64_t v152;
  unsigned __int16 *v153;
  unsigned int v154;
  int v155;
  unsigned int v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  uint64_t v159;
  uint64_t *v160;
  WTF *v161;
  WTF *v162;
  WTF *v163;
  void *v164;
  uint64_t v165;
  unsigned __int8 *v166;
  unsigned __int8 *v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  BOOL v176;
  BOOL v177;
  uint64_t v178;
  uint64_t v179;
  BOOL v180;
  int8x16_t v182;
  int8x16_t v183;
  int8x16_t v184;
  int8x16_t v185;
  BOOL i;
  unsigned int v187;
  uint64_t v188;
  uint64_t v190;
  uint64_t v191;
  char v192;
  unint64_t v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  WTF::StringImpl **v197;

  v191 = (uint64_t)a2;
  v4 = a1;
  v190 = a1 + 104;
  v5 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = (uint64_t *)(*(_QWORD *)(a1 + 104) + 8);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      a1 = *v7;
      *v7 = 0;
      if (a1)
      {
        if (*(_DWORD *)a1 == 2)
          a1 = WTF::StringImpl::destroy((WTF::StringImpl *)a1, a2);
        else
          *(_DWORD *)a1 -= 2;
      }
      v9 = (WebCore::QualifiedName::QualifiedNameImpl *)*(v7 - 1);
      *(v7 - 1) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          v10 = *(_QWORD *)(StatusReg + 736);
          if (!v10 || (v11 = *(_QWORD *)(v10 + 96)) == 0)
            v11 = WebCore::threadGlobalDataSlow((WebCore *)a1);
          v12 = *(uint64_t **)(v11 + 56);
          if (!v12)
          {
            WebCore::ThreadGlobalData::initializeQualifiedNameCache((WTF **)v11);
            v12 = *(uint64_t **)(v11 + 56);
          }
          WebCore::QualifiedNameCache::remove(v12, v9);
          v14 = (WTF::StringImpl *)*((_QWORD *)v9 + 6);
          *((_QWORD *)v9 + 6) = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v13);
            else
              *(_DWORD *)v14 -= 2;
          }
          v15 = (WTF::StringImpl *)*((_QWORD *)v9 + 5);
          *((_QWORD *)v9 + 5) = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v13);
            else
              *(_DWORD *)v15 -= 2;
          }
          v16 = (WTF::StringImpl *)*((_QWORD *)v9 + 4);
          *((_QWORD *)v9 + 4) = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v13);
            else
              *(_DWORD *)v16 -= 2;
          }
          v17 = (WTF::StringImpl *)*((_QWORD *)v9 + 3);
          *((_QWORD *)v9 + 3) = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v13);
            else
              *(_DWORD *)v17 -= 2;
          }
          v18 = (WTF::StringImpl *)*((_QWORD *)v9 + 2);
          *((_QWORD *)v9 + 2) = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v13);
            else
              *(_DWORD *)v18 -= 2;
          }
          a1 = WTF::fastFree(v9, v13);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      v7 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  v192 = 0;
  *(_DWORD *)(v4 + 116) = 0;
  *(_DWORD *)(v4 + 292) = 0;
  v193 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    do
    {
      while (1)
      {
        v19 = *(_QWORD *)(v4 + 24);
        if (!v19)
        {
LABEL_377:
          v171 = WebCore::nullName;
          if (WebCore::nullName)
            ++*(_DWORD *)WebCore::nullName;
          if (!*(_BYTE *)(v4 + 32))
            *(_BYTE *)(v4 + 32) = 14;
LABEL_371:
          v197 = (WTF::StringImpl **)v171;
          goto LABEL_67;
        }
        v20 = *(WTF::StringImpl **)(v4 + 16);
        v21 = 1;
        while (1)
        {
          v22 = (uint64_t)v20 + v21;
          v23 = *((unsigned __int8 *)v20 + v21 - 1);
          if ((v23 - 97) > 0x19)
            break;
          ++v21;
          --v19;
          *(_QWORD *)(v4 + 16) = v22;
          *(_QWORD *)(v4 + 24) = v19;
          if (!v19)
            goto LABEL_377;
        }
        if ((_DWORD)v23 == 61
          || ((v24 = (v23 | 0x20) - 97, (_DWORD)v23 != 45)
            ? (v25 = (v23 - 48) >= 0xA)
            : (v25 = 0),
              v25 ? (v26 = v24 > 0x19) : (v26 = 0),
              v26))
        {
          v27 = v21 - 1;
        }
        else
        {
          v42 = v22 - 1;
          v40 = v22 - 1 + v19 - (_QWORD)v20;
          if (v40 < 0)
            goto LABEL_429;
          *(_QWORD *)(v4 + 16) = v20;
          *(_QWORD *)(v4 + 24) = v40;
          *(_DWORD *)(v4 + 52) = 0;
          LOBYTE(v194) = 0;
          if (!v40)
            goto LABEL_429;
          while (1)
          {
            v129 = *(unsigned __int8 *)v20;
            v128 = *(_BYTE *)v20;
            *(_QWORD *)(v4 + 16) = (char *)v20 + 1;
            *(_QWORD *)(v4 + 24) = v40 - 1;
            v130 = v129 | 0x20;
            if ((v129 - 65) > 0x19)
              v130 = v128;
            LOBYTE(v194) = v130;
            v131 = *(unsigned int *)(v4 + 52);
            if ((_DWORD)v131 == *(_DWORD *)(v4 + 48))
            {
              a1 = WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned char &>(v4 + 40, (unint64_t)&v194);
            }
            else
            {
              *(_BYTE *)(*(_QWORD *)(v4 + 40) + v131) = v130;
              ++*(_DWORD *)(v4 + 52);
            }
            v40 = *(_QWORD *)(v4 + 24);
            if (!v40)
              break;
            v20 = *(WTF::StringImpl **)(v4 + 16);
            v132 = *(unsigned __int8 *)v20;
            if (v132 == 61)
              break;
            v133 = v132 != 45 && (v132 - 48) >= 0xA;
            if (v133 && (v132 | 0x20u) - 97 >= 0x1A)
              break;
            LOBYTE(v194) = 0;
          }
          v20 = *(WTF::StringImpl **)(v4 + 40);
          v27 = *(unsigned int *)(v4 + 52);
        }
        if (!v27)
        {
          v33 = (WTF::StringImpl **)WebCore::nullName;
          if (!WebCore::nullName)
            goto LABEL_66;
          goto LABEL_65;
        }
        if (v27 <= 2)
        {
          v28 = *(unsigned __int8 *)v20;
        }
        else
        {
          if (*(_WORD *)v20 == 28271)
          {
            v171 = WebCore::nullName;
            if (WebCore::nullName)
              ++*(_DWORD *)WebCore::nullName;
            goto LABEL_371;
          }
          if (v27 >= 0x25)
          {
            WTF::AtomStringImpl::add();
            WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v197, MEMORY[0x1E0CBF2F8], &v194, MEMORY[0x1E0CBF2F8]);
            a1 = (uint64_t)v194;
            v194 = 0;
            if (a1)
            {
              if (*(_DWORD *)a1 == 2)
                a1 = WTF::StringImpl::destroy((WTF::StringImpl *)a1, a2);
              else
                *(_DWORD *)a1 -= 2;
            }
            goto LABEL_67;
          }
          v28 = *(_WORD *)v20;
        }
        v29 = *((unsigned __int8 *)v20 + v27 - 1);
        {
          bzero(WebCore::HTMLNameCache::qualifiedNameCache(void)::cache, 0x1000uLL);
        }
        v30 = (((v28 << 6) | (v29 << 14)) ^ v28) + (v29 & 0xC0003FFF | ((unsigned __int16)v27 << 14));
        v31 = ((_WORD)v30 + (unsigned __int16)((v30 ^ (v30 << 14)) >> 6)) & 0x1FF;
        v32 = WebCore::HTMLNameCache::qualifiedNameCache(void)::cache[v31];
        if (v32)
        {
          a1 = MEMORY[0x19AEA53F4](*(_QWORD *)(v32 + 24), v20, v27);
          if ((a1 & 1) != 0)
          {
            v33 = (WTF::StringImpl **)WebCore::HTMLNameCache::qualifiedNameCache(void)::cache[v31];
LABEL_65:
            ++*(_DWORD *)v33;
LABEL_66:
            v197 = v33;
            goto LABEL_67;
          }
        }
        WTF::AtomStringImpl::add();
        WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v197, MEMORY[0x1E0CBF2F8], &v194, MEMORY[0x1E0CBF2F8]);
        v158 = v194;
        v194 = 0;
        if (v158)
        {
          if (*(_DWORD *)v158 == 2)
            WTF::StringImpl::destroy(v158, a2);
          else
            *(_DWORD *)v158 -= 2;
        }
        v159 = (uint64_t)v197;
        if (v197)
          ++*(_DWORD *)v197;
        a1 = WebCore::HTMLNameCache::qualifiedNameCache(void)::cache[v31];
        WebCore::HTMLNameCache::qualifiedNameCache(void)::cache[v31] = v159;
        if (a1)
        {
          if (*(_DWORD *)a1 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)a1);
            a1 = WTF::fastFree(v163, v164);
          }
          else
          {
            --*(_DWORD *)a1;
          }
        }
LABEL_67:
        v34 = *(_QWORD *)(v4 + 24);
        if (v197 != (WTF::StringImpl **)WebCore::nullName)
        {
          if (v34)
          {
            v35 = *(unsigned __int8 **)(v4 + 16);
            v36 = v35 + 1;
            do
            {
              v37 = *v35;
              v26 = v37 > 0x20;
              v38 = (1 << v37) & 0x100003600;
              if (v26 || v38 == 0)
                break;
              ++v35;
              --v34;
              *(_QWORD *)(v4 + 16) = v36;
              *(_QWORD *)(v4 + 24) = v34;
              ++v36;
            }
            while (v34);
          }
          v20 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
          if (*MEMORY[0x1E0CBF3B8])
            *(_DWORD *)v20 += 2;
          if (!v34)
            goto LABEL_125;
          v40 = *(_QWORD *)(v4 + 16);
          if (*(_BYTE *)v40 != 61)
            goto LABEL_125;
          a1 = v34 - 1;
          *(_QWORD *)(v4 + 16) = v40 + 1;
          *(_QWORD *)(v4 + 24) = v34 - 1;
          if (v34 != 1)
          {
            v41 = 0;
            v42 = 0;
            v2 = v34 - 2;
            v43 = v40 + 17;
            v22 = -2;
            v3 = v34 - 2;
            while (1)
            {
              v44 = v40 + v42;
              v45 = *(unsigned __int8 *)(v40 + v42 + 1);
              if (v45 > 0x27)
                goto LABEL_392;
              a2 = (WTF::StringImpl *)(1 << v45);
              if (((1 << v45) & 0x100003600) == 0)
                break;
              v46 = v40 + v42++ + 2;
              *(_QWORD *)(v4 + 16) = v46;
              *(_QWORD *)(v4 + 24) = v34 + v22--;
              --v3;
              ++v43;
              --v41;
              if (a1 == v42)
                goto LABEL_84;
            }
            if (v45 == 34)
            {
              v24 = v40 + v42;
              v23 = v40 + v42 + 2;
              *(_QWORD *)(v4 + 16) = v23;
              *(_QWORD *)(v4 + 24) = v34 + v22;
              a1 = ~v42 + v34;
              if (a1 <= 0)
                goto LABEL_429;
              v24 += a1 + 1;
              if ((unint64_t)(v34 - v42 - 18) <= 0xFFFFFFFFFFFFFFEFLL)
              {
                do
                {
                  v50 = *(int8x16_t *)(v43 - 15);
                  v51.i64[0] = 0xF0F0F0F0F0F0F0FLL;
                  v51.i64[1] = 0xF0F0F0F0F0F0F0FLL;
                  v52 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C70, vandq_s8(v50, v51));
                  v53 = vceqq_s8(v52, v50);
                  v52.i8[0] = vmaxvq_u8((uint8x16_t)v53);
                  if (v52.i32[0])
                  {
                    v54 = v43 - 15;
                    goto LABEL_101;
                  }
                  v43 += 16;
                }
                while (v43 < v24);
                if (v43 - 15 < v24)
                {
                  v54 = v24 - 16;
                  v142 = *(int8x16_t *)(v24 - 16);
                  v143.i64[0] = 0xF0F0F0F0F0F0F0FLL;
                  v143.i64[1] = 0xF0F0F0F0F0F0F0FLL;
                  v144 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C70, vandq_s8(v142, v143));
                  goto LABEL_287;
                }
                goto LABEL_288;
              }
              if (v2 == v42)
                goto LABEL_288;
              v172 = 0;
              v56 = (unsigned __int8 *)(v40 + v42 + 2);
              while (1)
              {
                v173 = *v56;
                v26 = v173 > 0x26;
                v174 = (1 << v173) & 0x4400002001;
                if (!v26 && v174 != 0)
                  break;
                ++v56;
                if (v3 == ++v172)
                  goto LABEL_288;
              }
              LODWORD(v45) = 34;
LABEL_102:
              if (v56 == (unsigned __int8 *)v24)
                goto LABEL_288;
              v2 = *v56;
              if ((_DWORD)v2 == (_DWORD)v45)
              {
                v40 = (uint64_t)(v56 + 1);
                v42 = v24 - (_QWORD)(v56 + 1);
                if (v42 < 0)
                  goto LABEL_429;
                v57 = (unint64_t)&v56[-v23];
                *(_QWORD *)(v4 + 16) = v40;
                *(_QWORD *)(v4 + 24) = v42;
                v58 = v23;
LABEL_106:
                if (v57)
                {
                  if (v57 >= 0x25)
                  {
                    a1 = WTF::AtomStringImpl::add();
                  }
                  else
                  {
                    v59 = *(unsigned __int8 *)v23;
                    v60 = *(unsigned __int8 *)(v57 + v23 - 1);
                    {
                      bzero(WebCore::HTMLNameCache::atomStringCache(void)::cache, 0x1000uLL);
                    }
                    v61 = (((v59 << 6) | (v60 << 14)) ^ v59) + (v60 & 0xC0003FFF | ((unsigned __int16)v57 << 14));
                    v62 = (v61 + ((v61 ^ (v61 << 14)) >> 6)) & 0x1FF;
                    a1 = MEMORY[0x19AEA53F4](WebCore::HTMLNameCache::atomStringCache(void)::cache[v62], v58, v57);
                    if ((a1 & 1) != 0)
                      goto LABEL_111;
                    WTF::AtomStringImpl::add();
                    v110 = v194;
                    v196 = v194;
                    if (v194)
                      *(_DWORD *)v194 += 2;
                    a1 = WebCore::HTMLNameCache::atomStringCache(void)::cache[v62];
                    WebCore::HTMLNameCache::atomStringCache(void)::cache[v62] = (uint64_t)v110;
                    if (a1)
                    {
                      v111 = *(_DWORD *)a1 - 2;
                      if (*(_DWORD *)a1 != 2)
                        goto LABEL_202;
LABEL_315:
                      a1 = WTF::StringImpl::destroy((WTF::StringImpl *)a1, a2);
                    }
                  }
                  goto LABEL_114;
                }
                if (v20)
                  *(_DWORD *)v20 += 2;
LABEL_88:
                v196 = v20;
                goto LABEL_114;
              }
              if ((_DWORD)v2 != 38 && (_DWORD)v2 != 13)
                goto LABEL_288;
              v23 = ~v40 + v24;
              if (v23 - v42 < 0)
                goto LABEL_429;
              *(_QWORD *)(v4 + 16) = v40 + v42 + 1;
              *(_QWORD *)(v4 + 24) = v23 - v42;
              if (v23 == v42)
              {
LABEL_275:
                *(_DWORD *)(v4 + 100) = 0;
              }
              else
              {
                v135 = v24 - v40;
                v136 = v24 - v40 - 1;
                while (1)
                {
                  v137 = v40 + v42;
                  v138 = *(unsigned __int8 *)(v40 + v42 + 1);
                  v26 = v138 > 0x20;
                  v139 = (1 << v138) & 0x100003600;
                  if (v26 || v139 == 0)
                    break;
                  *(_QWORD *)(v4 + 16) = v137 + 2;
                  *(_QWORD *)(v4 + 24) = v135 + v22;
                  ++v42;
                  --v22;
                  if (v136 == v42)
                    goto LABEL_275;
                }
                *(_DWORD *)(v4 + 100) = 0;
                v145 = *(unsigned __int8 *)(v137 + 1);
                if (v145 == 34 || v145 == 39)
                {
                  v22 += v135;
                  v146 = (unsigned __int8 *)(v40 + v42 + 2);
                  *(_QWORD *)(v4 + 16) = v146;
                  *(_QWORD *)(v4 + 24) = v22;
                  if (v135 - 2 == v42)
                  {
LABEL_297:
                    v147 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
                    if (*MEMORY[0x1E0CBF3B8])
                      *(_DWORD *)v147 += 2;
                    if (!*(_BYTE *)(v4 + 32))
                      *(_BYTE *)(v4 + 32) = 11;
                    v196 = v147;
                    goto LABEL_114;
                  }
                  v148 = *v146;
                  if (v148 == v145)
                  {
LABEL_303:
                    v149 = *(_QWORD *)(v4 + 24);
LABEL_304:
                    if (!v149)
                      goto LABEL_297;
                    v150 = *(unsigned __int8 **)(v4 + 16);
                    v151 = *v150;
                    *(_QWORD *)(v4 + 16) = v150 + 1;
                    *(_QWORD *)(v4 + 24) = v149 - 1;
                    if (v151 != v145)
                      goto LABEL_297;
                    v152 = *(unsigned int *)(v4 + 100);
                    if (!(_DWORD)v152)
                    {
                      v63 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
                      if (*MEMORY[0x1E0CBF3B8])
LABEL_112:
                        *(_DWORD *)v63 += 2;
LABEL_113:
                      v196 = v63;
                      goto LABEL_114;
                    }
                    v153 = *(unsigned __int16 **)(v4 + 88);
                    if (v152 >= 0x25)
                    {
                      a1 = WTF::AtomStringImpl::add();
                    }
                    else
                    {
                      v154 = *v153;
                      v155 = v153[v152 - 1];
                      {
                        bzero(WebCore::HTMLNameCache::atomStringCache(void)::cache, 0x1000uLL);
                      }
                      v156 = ((v154 << 6) ^ (v155 << 14) ^ v154)
                           + ((unsigned __int16)v152 << 14)
                           + (((v154 << 6) ^ (v155 << 14) ^ v154) >> 14);
                      v62 = (v156 + ((v156 ^ (v156 << 14)) >> 6)) & 0x1FF;
                      a1 = MEMORY[0x19AEA53E8](WebCore::HTMLNameCache::atomStringCache(void)::cache[v62], v153, v152);
                      if ((a1 & 1) != 0)
                      {
LABEL_111:
                        v63 = (WTF::StringImpl *)WebCore::HTMLNameCache::atomStringCache(void)::cache[v62];
                        if (v63)
                          goto LABEL_112;
                        goto LABEL_113;
                      }
                      WTF::AtomStringImpl::add();
                      v157 = v194;
                      v196 = v194;
                      if (v194)
                        *(_DWORD *)v194 += 2;
                      a1 = WebCore::HTMLNameCache::atomStringCache(void)::cache[v62];
                      WebCore::HTMLNameCache::atomStringCache(void)::cache[v62] = (uint64_t)v157;
                      if (a1)
                      {
                        v111 = *(_DWORD *)a1 - 2;
                        if (*(_DWORD *)a1 == 2)
                          goto LABEL_315;
LABEL_202:
                        *(_DWORD *)a1 = v111;
                      }
                    }
LABEL_114:
                    v64 = v196;
                    v196 = 0;
                    if (v20)
                    {
                      if (*(_DWORD *)v20 == 2)
                      {
                        WTF::StringImpl::destroy(v20, a2);
                        a1 = (uint64_t)v196;
                        v196 = 0;
                        if (a1)
                        {
                          if (*(_DWORD *)a1 == 2)
                            a1 = WTF::StringImpl::destroy((WTF::StringImpl *)a1, a2);
                          else
                            *(_DWORD *)a1 -= 2;
                        }
                      }
                      else
                      {
                        *(_DWORD *)v20 -= 2;
                      }
                    }
                    v65 = *(_QWORD *)(v4 + 24);
                    if (v65)
                    {
                      v66 = *(unsigned __int8 **)(v4 + 16);
                      v67 = v66 + 1;
                      v68 = v65 - 1;
                      do
                      {
                        v69 = *v66;
                        v26 = v69 > 0x20;
                        v70 = (1 << v69) & 0x100003600;
                        if (v26 || v70 == 0)
                          break;
                        ++v66;
                        *(_QWORD *)(v4 + 16) = v67;
                        *(_QWORD *)(v4 + 24) = v68;
                        ++v67;
                        --v68;
                      }
                      while (v68 != -1);
                    }
                    v20 = v64;
LABEL_125:
                    v72 = v197[3];
                    v194 = v72;
                    v73 = *(_QWORD *)(v4 + 280);
                    v74 = *(unsigned int *)(v4 + 292);
                    v75 = (WTF::StringImpl **)(v73 + 8 * v74);
                    if ((_DWORD)v74)
                    {
                      v76 = *(WTF::StringImpl ***)(v4 + 280);
                      v77 = *(unsigned int *)(v4 + 292);
                      do
                      {
                        v78 = v77 >> 1;
                        v79 = (unint64_t *)&v76[v77 >> 1];
                        v81 = *v79;
                        v80 = (WTF::StringImpl **)(v79 + 1);
                        v2 = ~(v77 >> 1);
                        v77 += v2;
                        if (v81 < (unint64_t)v72)
                          v76 = v80;
                        else
                          v77 = v78;
                      }
                      while (v77);
                      if (v76 != v75)
                      {
                        v75 = v76;
                        if (*v76 == v72)
                        {
                          v49 = 2;
                          v192 = 1;
LABEL_147:
                          if (v20)
                          {
                            if (*(_DWORD *)v20 == 2)
                              a1 = WTF::StringImpl::destroy(v20, a2);
                            else
                              *(_DWORD *)v20 -= 2;
                          }
                          goto LABEL_150;
                        }
                      }
                    }
                    if ((_DWORD)v74 == *(_DWORD *)(v4 + 288))
                    {
                      v82 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4 + 280, v74 + 1, (unint64_t)&v194);
                      v74 = *(unsigned int *)(v4 + 292);
                    }
                    else
                    {
                      v82 = &v194;
                    }
                    v83 = *(_QWORD *)(v4 + 280);
                    v84 = (_QWORD *)(v83 + 8 * (((uint64_t)v75 - v73) >> 3));
                    memmove(v84 + 1, v84, v83 + 8 * v74 - (_QWORD)v84);
                    *v84 = *v82;
                    ++*(_DWORD *)(v4 + 292);
                    v85 = (WTF::StringImpl *)v197;
                    if (v197)
                      ++*(_DWORD *)v197;
                    v194 = v85;
                    if (v20)
                      *(_DWORD *)v20 += 2;
                    v195 = v20;
                    v86 = *(unsigned int *)(v4 + 116);
                    if ((_DWORD)v86 == *(_DWORD *)(v4 + 112))
                    {
                      WTF::Vector<WebCore::Attribute,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Attribute>(v190, (unint64_t)&v194);
                    }
                    else
                    {
                      v87 = v86 + 1;
                      v88 = (WTF::StringImpl **)(*(_QWORD *)(v4 + 104) + 16 * v86);
                      v194 = 0;
                      *v88 = v85;
                      v89 = v195;
                      v195 = 0;
                      v88[1] = v89;
                      *(_DWORD *)(v4 + 116) = v87;
                    }
                    a1 = (uint64_t)v195;
                    v195 = 0;
                    if (a1)
                    {
                      if (*(_DWORD *)a1 == 2)
                        a1 = WTF::StringImpl::destroy((WTF::StringImpl *)a1, a2);
                      else
                        *(_DWORD *)a1 -= 2;
                    }
                    v90 = v194;
                    v194 = 0;
                    if (!v90)
                    {
LABEL_146:
                      v49 = 0;
                      goto LABEL_147;
                    }
                    if (*(_DWORD *)v90 != 1)
                    {
                      --*(_DWORD *)v90;
                      goto LABEL_146;
                    }
                    v101 = *(_QWORD *)(v193 + 736);
                    if (v101)
                    {
                      v102 = *(_QWORD *)(v101 + 96);
                      if (v102)
                      {
LABEL_178:
                        v103 = *(uint64_t **)(v102 + 56);
                        if (!v103)
                        {
                          WebCore::ThreadGlobalData::initializeQualifiedNameCache((WTF **)v102);
                          v103 = *(uint64_t **)(v102 + 56);
                        }
                        WebCore::QualifiedNameCache::remove(v103, v90);
                        v105 = (WTF::StringImpl *)*((_QWORD *)v90 + 6);
                        *((_QWORD *)v90 + 6) = 0;
                        if (v105)
                        {
                          if (*(_DWORD *)v105 == 2)
                            WTF::StringImpl::destroy(v105, v104);
                          else
                            *(_DWORD *)v105 -= 2;
                        }
                        v106 = (WTF::StringImpl *)*((_QWORD *)v90 + 5);
                        *((_QWORD *)v90 + 5) = 0;
                        if (v106)
                        {
                          if (*(_DWORD *)v106 == 2)
                            WTF::StringImpl::destroy(v106, v104);
                          else
                            *(_DWORD *)v106 -= 2;
                        }
                        v107 = (WTF::StringImpl *)*((_QWORD *)v90 + 4);
                        *((_QWORD *)v90 + 4) = 0;
                        if (v107)
                        {
                          if (*(_DWORD *)v107 == 2)
                            WTF::StringImpl::destroy(v107, v104);
                          else
                            *(_DWORD *)v107 -= 2;
                        }
                        v108 = (WTF::StringImpl *)*((_QWORD *)v90 + 3);
                        *((_QWORD *)v90 + 3) = 0;
                        if (v108)
                        {
                          if (*(_DWORD *)v108 == 2)
                            WTF::StringImpl::destroy(v108, v104);
                          else
                            *(_DWORD *)v108 -= 2;
                        }
                        v109 = (WTF::StringImpl *)*((_QWORD *)v90 + 2);
                        *((_QWORD *)v90 + 2) = 0;
                        if (v109)
                        {
                          if (*(_DWORD *)v109 == 2)
                            WTF::StringImpl::destroy(v109, v104);
                          else
                            *(_DWORD *)v109 -= 2;
                        }
                        a1 = WTF::fastFree(v90, v104);
                        goto LABEL_146;
                      }
                    }
                    else
                    {
                      v101 = WTF::Thread::initializeCurrentTLS((WTF::Thread *)a1);
                      v102 = *(_QWORD *)(v101 + 96);
                      if (v102)
                        goto LABEL_178;
                    }
                    v102 = WTF::fastMalloc((WTF *)0x60);
                    *(_DWORD *)(v102 + 8) = 1;
                    v120 = (unsigned int *)(v102 + 8);
                    *(_QWORD *)v102 = off_1E31F4A70;
                    v121 = (_QWORD *)WTF::fastMalloc((WTF *)8);
                    *v121 = 0;
                    *(_QWORD *)(v102 + 16) = v121;
                    *(_QWORD *)v102 = off_1E3407108;
                    *(_BYTE *)(v102 + 24) = 0;
                    *(_QWORD *)(v102 + 32) = 0;
                    *(_QWORD *)(v102 + 40) = 0;
                    v122 = WTF::fastMalloc((WTF *)0x28);
                    *(_DWORD *)(v122 + 28) = 0;
                    *(_QWORD *)(v122 + 32) = 0;
                    *(_QWORD *)(v122 + 8) = 0;
                    *(_QWORD *)(v122 + 16) = 0;
                    *(_QWORD *)v122 = 0;
                    *(_WORD *)(v122 + 24) = 0;
                    if (WTF::isUIThread((WTF *)v122))
                    {
                      {
                        WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
                        qword_1ECE90CE8 = 0;
                      }
                      WebCore::ThreadTimers::setSharedTimer((uint64_t **)v122, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
                    }
                    *(_QWORD *)(v102 + 48) = v122;
                    *(_OWORD *)(v102 + 56) = 0u;
                    *(_OWORD *)(v102 + 72) = 0u;
                    *(_BYTE *)(v102 + 88) = 0;
                    if (pthread_main_np())
                    {
                      WebCore::sharedMainThreadStaticData = v102;
                      do
                        v123 = __ldaxr(v120);
                      while (__stlxr(v123 + 1, v120));
                    }
                    v124 = *(unsigned int **)(v101 + 96);
                    *(_QWORD *)(v101 + 96) = v102;
                    if (v124)
                    {
                      v125 = v124 + 2;
                      do
                      {
                        v126 = __ldaxr(v125);
                        v127 = v126 - 1;
                      }
                      while (__stlxr(v127, v125));
                      if (!v127)
                      {
                        atomic_store(1u, v124 + 2);
                        (*(void (**)(unsigned int *))(*(_QWORD *)v124 + 8))(v124);
                      }
                    }
                    goto LABEL_178;
                  }
                  if (*(_BYTE *)(v4 + 32))
                  {
                    if (v20)
                      *(_DWORD *)v20 += 2;
                    v196 = v20;
                    goto LABEL_114;
                  }
                  v160 = (uint64_t *)(v4 + 88);
                  if (v148 == 13)
                  {
                    *(_QWORD *)(v4 + 16) = v40 + v42 + 3;
                    *(_QWORD *)(v4 + 24) = v135 - v42 - 3;
                    if (v135 - 3 != v42 && *(_BYTE *)(v40 + v42 + 3) == 10)
                    {
                      *(_QWORD *)(v4 + 16) = v40 + v42 + 4;
                      *(_QWORD *)(v4 + 24) = v135 - v42 - 4;
                    }
                    v161 = *(WTF **)(v4 + 88);
                    if (*(_DWORD *)(v4 + 96))
                    {
                      *(_WORD *)v161 = 10;
                      *(_DWORD *)(v4 + 100) = 1;
                    }
                    else
                    {
                      a1 = WTF::fastMalloc((WTF *)0x20);
                      *(_DWORD *)(v4 + 96) = 16;
                      *(_QWORD *)(v4 + 88) = a1;
                      if (v161)
                      {
                        if ((WTF *)a1 == v161)
                        {
                          *(_QWORD *)(v4 + 88) = 0;
                          *(_DWORD *)(v4 + 96) = 0;
                        }
                        WTF::fastFree(v161, a2);
                        a1 = *v160;
                      }
                      v165 = *(unsigned int *)(v4 + 100);
                      *(_WORD *)(a1 + 2 * v165) = 10;
                      *(_DWORD *)(v4 + 100) = v165 + 1;
                    }
                    goto LABEL_303;
                  }
                  if (v148 == 38)
                  {
                    a1 = WebCore::HTMLFastPathParser<unsigned char>::scanHTMLCharacterReference(v4, v4 + 88);
                    goto LABEL_303;
                  }
                  v162 = *(WTF **)(v4 + 88);
                  if (*(_DWORD *)(v4 + 96))
                  {
                    *(_WORD *)v162 = v148;
                    *(_DWORD *)(v4 + 100) = 1;
LABEL_339:
                    v149 = v22 - 1;
                    *(_QWORD *)(v4 + 16) = v146 + 1;
                    *(_QWORD *)(v4 + 24) = v22 - 1;
                    goto LABEL_304;
                  }
                  a1 = WTF::fastMalloc((WTF *)0x20);
                  *(_DWORD *)(v4 + 96) = 16;
                  *(_QWORD *)(v4 + 88) = a1;
                  if (v162)
                  {
                    if ((WTF *)a1 == v162)
                    {
                      *(_QWORD *)(v4 + 88) = 0;
                      *(_DWORD *)(v4 + 96) = 0;
                    }
                    WTF::fastFree(v162, a2);
                    a1 = *v160;
                  }
                  v40 = *(unsigned int *)(v4 + 100);
                  v42 = (v40 + 1);
                  *(_WORD *)(a1 + 2 * v40) = v148;
                  v22 = *(_QWORD *)(v4 + 24);
                  *(_DWORD *)(v4 + 100) = v42;
                  if (v22)
                  {
                    v146 = *(unsigned __int8 **)(v4 + 16);
                    goto LABEL_339;
                  }
LABEL_429:
                  __break(1u);
LABEL_430:
                  v56 = (unsigned __int8 *)v23;
                  for (i = v2 == v42; !i; i = v3 == 0)
                  {
                    v187 = *v56;
                    v26 = v187 > 0x27;
                    v188 = (1 << v187) & 0xC000002001;
                    if (!v26 && v188 != 0)
                    {
                      LODWORD(v45) = 39;
                      goto LABEL_102;
                    }
                    ++v56;
                    --v3;
                  }
                  goto LABEL_288;
                }
              }
              if (v20)
                *(_DWORD *)v20 += 2;
              if (*(_BYTE *)(v4 + 32))
                goto LABEL_88;
              v141 = 12;
LABEL_292:
              *(_BYTE *)(v4 + 32) = v141;
              goto LABEL_88;
            }
            if (v45 == 39)
            {
              v24 = v40 + v42;
              v23 = v40 + v42 + 2;
              *(_QWORD *)(v4 + 16) = v23;
              *(_QWORD *)(v4 + 24) = v34 + v22;
              a1 = ~v42 + v34;
              if (a1 <= 0)
                goto LABEL_429;
              v24 += a1 + 1;
              if ((unint64_t)(v34 - v42 - 18) > 0xFFFFFFFFFFFFFFEFLL)
                goto LABEL_430;
              do
              {
                v182 = *(int8x16_t *)(v43 - 15);
                v183.i64[0] = 0xF0F0F0F0F0F0F0FLL;
                v183.i64[1] = 0xF0F0F0F0F0F0F0FLL;
                v184 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C60, vandq_s8(v182, v183));
                v53 = vceqq_s8(v184, v182);
                v184.i8[0] = vmaxvq_u8((uint8x16_t)v53);
                if (v184.i32[0])
                {
                  v54 = v43 - 15;
                  goto LABEL_101;
                }
                v43 += 16;
              }
              while (v43 < v24);
              if (v43 - 15 >= v24)
                goto LABEL_288;
              v54 = v24 - 16;
              v142 = *(int8x16_t *)(v24 - 16);
              v185.i64[0] = 0xF0F0F0F0F0F0F0FLL;
              v185.i64[1] = 0xF0F0F0F0F0F0F0FLL;
              v144 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C60, vandq_s8(v142, v185));
LABEL_287:
              v53 = vceqq_s8(v144, v142);
              v144.i8[0] = vmaxvq_u8((uint8x16_t)v53);
              if (v144.i32[0])
              {
LABEL_101:
                v55 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_1969F1C50, v53);
                v55.i8[0] = vminvq_u8(v55);
                v56 = (unsigned __int8 *)(v54 + v55.u32[0]);
                goto LABEL_102;
              }
LABEL_288:
              if (v20)
                *(_DWORD *)v20 += 2;
              if (*(_BYTE *)(v4 + 32))
                goto LABEL_88;
              v141 = 9;
              goto LABEL_292;
            }
LABEL_392:
            if ((_DWORD)v45 != 45
              && ((_DWORD)v45 != 95 ? (v176 = (v45 - 48) >= 0xA) : (v176 = 0),
                  v176 ? (v177 = (v45 | 0x20) - 97 > 0x19) : (v177 = 0),
                  v177))
            {
              v58 = v40 + v42 + 1;
              v178 = v58;
LABEL_402:
              if (v45 <= 0x3E && ((1 << v45) & 0x4000000100003600) != 0)
              {
                v23 = v44 + 1;
                v57 = v178 - v58;
                goto LABEL_106;
              }
            }
            else
            {
              v179 = v42;
              while (1)
              {
                v3 = v40 + v179 + 2;
                *(_QWORD *)(v4 + 16) = v3;
                *(_QWORD *)(v4 + 24) = v2 + v41;
                if (v2 == v179)
                  break;
                LODWORD(v45) = *(unsigned __int8 *)(v40 + 2 + v179++);
                --v41;
                if ((_DWORD)v45 != 45)
                {
                  v3 = (v45 - 48);
                  v180 = (_DWORD)v45 != 95 && v3 >= 0xA;
                  if (v180 && (v45 | 0x20) - 97 > 0x19)
                  {
                    v58 = v40 + v42 + 1;
                    v178 = v40 + v179 + 1;
                    goto LABEL_402;
                  }
                }
              }
            }
          }
LABEL_84:
          if (v20)
            *(_DWORD *)v20 += 2;
          if (!*(_BYTE *)(v4 + 32))
            *(_BYTE *)(v4 + 32) = 10;
          goto LABEL_88;
        }
        if (!v34)
          goto LABEL_441;
        v47 = *(unsigned __int8 **)(v4 + 16);
        v48 = *v47;
        if (v48 == 62)
        {
          *(_QWORD *)(v4 + 16) = v47 + 1;
          *(_QWORD *)(v4 + 24) = v34 - 1;
          v49 = 3;
          goto LABEL_150;
        }
        if (v48 == 47)
        {
          v166 = v47 + 1;
          *(_QWORD *)(v4 + 16) = v47 + 1;
          *(_QWORD *)(v4 + 24) = v34 - 1;
          if (v34 == 1)
            goto LABEL_442;
          v167 = v47 + 2;
          v168 = v34 - 2;
          while (1)
          {
            v169 = *v166;
            if (v169 > 0x20 || ((1 << v169) & 0x100003600) == 0)
              break;
            ++v166;
            *(_QWORD *)(v4 + 16) = v167;
            *(_QWORD *)(v4 + 24) = v168;
            ++v167;
            if (--v168 == -1)
              goto LABEL_363;
          }
          *(_QWORD *)(v4 + 16) = v167;
          *(_QWORD *)(v4 + 24) = v168;
          if (v169 != 62)
          {
LABEL_442:
          {
LABEL_363:
            if (!*(_BYTE *)(v4 + 32))
              *(_BYTE *)(v4 + 32) = 15;
          }
            v49 = 1;
          }
          else
          {
            v49 = 3;
          }
        }
        else
        {
LABEL_441:
          if (!*(_BYTE *)(v4 + 32))
            *(_BYTE *)(v4 + 32) = 15;
          v49 = 1;
        }
LABEL_150:
        v91 = (WebCore::QualifiedName::QualifiedNameImpl *)v197;
        v197 = 0;
        if (v91)
          break;
LABEL_153:
        if (v49)
          goto LABEL_39;
      }
      if (*(_DWORD *)v91 != 1)
      {
        --*(_DWORD *)v91;
        goto LABEL_153;
      }
      v92 = *(_QWORD *)(v193 + 736);
      if (v92)
      {
        v93 = *(_QWORD *)(v92 + 96);
        if (v93)
          goto LABEL_157;
      }
      else
      {
        v92 = WTF::Thread::initializeCurrentTLS((WTF::Thread *)a1);
        v93 = *(_QWORD *)(v92 + 96);
        if (v93)
          goto LABEL_157;
      }
      v93 = WTF::fastMalloc((WTF *)0x60);
      *(_DWORD *)(v93 + 8) = 1;
      v112 = (unsigned int *)(v93 + 8);
      *(_QWORD *)v93 = off_1E31F4A70;
      v113 = (_QWORD *)WTF::fastMalloc((WTF *)8);
      *v113 = 0;
      *(_QWORD *)(v93 + 16) = v113;
      *(_QWORD *)v93 = off_1E3407108;
      *(_BYTE *)(v93 + 24) = 0;
      *(_QWORD *)(v93 + 32) = 0;
      *(_QWORD *)(v93 + 40) = 0;
      v114 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v114 + 28) = 0;
      *(_QWORD *)(v114 + 32) = 0;
      *(_QWORD *)(v114 + 8) = 0;
      *(_QWORD *)(v114 + 16) = 0;
      *(_QWORD *)v114 = 0;
      *(_WORD *)(v114 + 24) = 0;
      if (WTF::isUIThread((WTF *)v114))
      {
        {
          WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
          qword_1ECE90CE8 = 0;
        }
        WebCore::ThreadTimers::setSharedTimer((uint64_t **)v114, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
      }
      *(_QWORD *)(v93 + 48) = v114;
      *(_OWORD *)(v93 + 56) = 0u;
      *(_OWORD *)(v93 + 72) = 0u;
      *(_BYTE *)(v93 + 88) = 0;
      if (pthread_main_np())
      {
        WebCore::sharedMainThreadStaticData = v93;
        do
          v115 = __ldaxr(v112);
        while (__stlxr(v115 + 1, v112));
      }
      v116 = *(unsigned int **)(v92 + 96);
      *(_QWORD *)(v92 + 96) = v93;
      if (v116)
      {
        v117 = v116 + 2;
        do
        {
          v118 = __ldaxr(v117);
          v119 = v118 - 1;
        }
        while (__stlxr(v119, v117));
        if (!v119)
        {
          atomic_store(1u, v116 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v116 + 8))(v116);
        }
      }
LABEL_157:
      v94 = *(uint64_t **)(v93 + 56);
      if (!v94)
      {
        WebCore::ThreadGlobalData::initializeQualifiedNameCache((WTF **)v93);
        v94 = *(uint64_t **)(v93 + 56);
      }
      WebCore::QualifiedNameCache::remove(v94, v91);
      v96 = (WTF::StringImpl *)*((_QWORD *)v91 + 6);
      *((_QWORD *)v91 + 6) = 0;
      if (v96)
      {
        if (*(_DWORD *)v96 == 2)
          WTF::StringImpl::destroy(v96, v95);
        else
          *(_DWORD *)v96 -= 2;
      }
      v97 = (WTF::StringImpl *)*((_QWORD *)v91 + 5);
      *((_QWORD *)v91 + 5) = 0;
      if (v97)
      {
        if (*(_DWORD *)v97 == 2)
          WTF::StringImpl::destroy(v97, v95);
        else
          *(_DWORD *)v97 -= 2;
      }
      v98 = (WTF::StringImpl *)*((_QWORD *)v91 + 4);
      *((_QWORD *)v91 + 4) = 0;
      if (v98)
      {
        if (*(_DWORD *)v98 == 2)
          WTF::StringImpl::destroy(v98, v95);
        else
          *(_DWORD *)v98 -= 2;
      }
      v99 = (WTF::StringImpl *)*((_QWORD *)v91 + 3);
      *((_QWORD *)v91 + 3) = 0;
      if (v99)
      {
        if (*(_DWORD *)v99 == 2)
          WTF::StringImpl::destroy(v99, v95);
        else
          *(_DWORD *)v99 -= 2;
      }
      v100 = (WTF::StringImpl *)*((_QWORD *)v91 + 2);
      *((_QWORD *)v91 + 2) = 0;
      if (v100)
      {
        if (*(_DWORD *)v100 == 2)
          WTF::StringImpl::destroy(v100, v95);
        else
          *(_DWORD *)v100 -= 2;
      }
      a1 = WTF::fastFree(v91, v95);
    }
    while (!v49);
LABEL_39:
    ;
  }
  while (v49 == 2);
  if (v49 == 3)
  {
    WebCore::Element::parserSetAttributes(v191, *(WTF::StringImpl **)(v4 + 104), *(unsigned int *)(v4 + 116));
    if ((v192 & 1) != 0)
      *(_QWORD *)(v191 + 16) |= 0x100000000000000uLL;
  }
}

