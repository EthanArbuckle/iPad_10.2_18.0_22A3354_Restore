void WebCore::WebContentReader::~WebContentReader(WebCore::WebContentReader *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;

  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  *(_QWORD *)this = off_1E327FAD8;
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E327FB48;
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
}

{
  WebCore::WebContentReader::~WebContentReader(this, a2);
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::PagePasteboardContext::isPagePasteboardContext(WebCore::PagePasteboardContext *this)
{
  return 1;
}

uint64_t WTF::RefCounted<WebCore::FontCreationContextRareData>::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  BOOL v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = *(_DWORD **)(this + 56);
    *(_QWORD *)(v2 + 56) = 0;
    if (v3)
    {
      if (v3[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      else
        --v3[2];
    }
    v4 = *(unsigned int *)(v2 + 52);
    v5 = *(WTF **)(v2 + 40);
    if ((_DWORD)v4)
    {
      v6 = (WTF *)((char *)v5 + 16 * v4);
      do
      {
        v7 = *((_QWORD *)v5 + 1);
        if ((v7 & 0x8000000000000) != 0)
        {
          v12 = v6;
          v13 = v5;
          v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
          do
          {
            v9 = __ldaxr(v8);
            v10 = --v9 == 0;
          }
          while (__stlxr(v9, v8));
          v6 = v12;
          if (v10)
          {
            atomic_store(1u, v8);
            WTF::fastFree((WTF *)v8, a2);
            v6 = v12;
            v5 = v13;
          }
        }
        v5 = (WTF *)((char *)v5 + 16);
      }
      while (v5 != v6);
      v5 = *(WTF **)(v2 + 40);
    }
    if (v5)
    {
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 48) = 0;
      WTF::fastFree(v5, a2);
    }
    v11 = *(WTF **)(v2 + 8);
    if (v11)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v11, a2);
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t initNSTextListMarkerDisc(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE33573B == 1)
  {
    v0 = (void *)qword_1EE335760;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194B5AC78);
    }
    qword_1EE335760 = (uint64_t)v0;
    byte_1EE33573B = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSTextListMarkerDisc");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE335758 = result;
  off_1ECE77BD8[0] = NSTextListMarkerDiscFunction;
  return result;
}

uint64_t NSTextListMarkerDiscFunction(void)
{
  return qword_1EE335758;
}

uint64_t initNSTextListMarkerCircle(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE33573B == 1)
  {
    v0 = (void *)qword_1EE335760;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194B5AD44);
    }
    qword_1EE335760 = (uint64_t)v0;
    byte_1EE33573B = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSTextListMarkerCircle");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE335768 = result;
  off_1ECE77BE0[0] = NSTextListMarkerCircleFunction;
  return result;
}

uint64_t NSTextListMarkerCircleFunction(void)
{
  return qword_1EE335768;
}

uint64_t initNSTextListMarkerSquare(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE33573B == 1)
  {
    v0 = (void *)qword_1EE335760;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194B5AE10);
    }
    qword_1EE335760 = (uint64_t)v0;
    byte_1EE33573B = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSTextListMarkerSquare");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE335770 = result;
  off_1ECE77BE8[0] = NSTextListMarkerSquareFunction;
  return result;
}

uint64_t NSTextListMarkerSquareFunction(void)
{
  return qword_1EE335770;
}

uint64_t initNSTextListMarkerDecimal(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE33573B == 1)
  {
    v0 = (void *)qword_1EE335760;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194B5AEDCLL);
    }
    qword_1EE335760 = (uint64_t)v0;
    byte_1EE33573B = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSTextListMarkerDecimal");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE335778 = result;
  off_1ECE77BF0[0] = NSTextListMarkerDecimalFunction;
  return result;
}

uint64_t NSTextListMarkerDecimalFunction(void)
{
  return qword_1EE335778;
}

uint64_t initNSTextListMarkerOctal(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE33573B == 1)
  {
    v0 = (void *)qword_1EE335760;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194B5AFA8);
    }
    qword_1EE335760 = (uint64_t)v0;
    byte_1EE33573B = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSTextListMarkerOctal");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE335780 = result;
  off_1ECE77BF8[0] = NSTextListMarkerOctalFunction;
  return result;
}

uint64_t NSTextListMarkerOctalFunction(void)
{
  return qword_1EE335780;
}

uint64_t initNSTextListMarkerLowercaseRoman(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE33573B == 1)
  {
    v0 = (void *)qword_1EE335760;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194B5B074);
    }
    qword_1EE335760 = (uint64_t)v0;
    byte_1EE33573B = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSTextListMarkerLowercaseRoman");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE335788 = result;
  off_1ECE77C00[0] = NSTextListMarkerLowercaseRomanFunction;
  return result;
}

uint64_t NSTextListMarkerLowercaseRomanFunction(void)
{
  return qword_1EE335788;
}

uint64_t initNSTextListMarkerUppercaseRoman(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE33573B == 1)
  {
    v0 = (void *)qword_1EE335760;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194B5B140);
    }
    qword_1EE335760 = (uint64_t)v0;
    byte_1EE33573B = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSTextListMarkerUppercaseRoman");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE335790 = result;
  off_1ECE77C08[0] = NSTextListMarkerUppercaseRomanFunction;
  return result;
}

uint64_t NSTextListMarkerUppercaseRomanFunction(void)
{
  return qword_1EE335790;
}

uint64_t initNSTextListMarkerLowercaseAlpha(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE33573B == 1)
  {
    v0 = (void *)qword_1EE335760;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194B5B20CLL);
    }
    qword_1EE335760 = (uint64_t)v0;
    byte_1EE33573B = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSTextListMarkerLowercaseAlpha");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE335798 = result;
  off_1ECE77C10[0] = NSTextListMarkerLowercaseAlphaFunction;
  return result;
}

uint64_t NSTextListMarkerLowercaseAlphaFunction(void)
{
  return qword_1EE335798;
}

uint64_t initNSTextListMarkerUppercaseAlpha(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE33573B == 1)
  {
    v0 = (void *)qword_1EE335760;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194B5B2D8);
    }
    qword_1EE335760 = (uint64_t)v0;
    byte_1EE33573B = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSTextListMarkerUppercaseAlpha");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE3357A0 = result;
  off_1ECE77C18[0] = NSTextListMarkerUppercaseAlphaFunction;
  return result;
}

uint64_t NSTextListMarkerUppercaseAlphaFunction(void)
{
  return qword_1EE3357A0;
}

uint64_t initNSTextListMarkerLowercaseLatin(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE33573B == 1)
  {
    v0 = (void *)qword_1EE335760;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194B5B3A4);
    }
    qword_1EE335760 = (uint64_t)v0;
    byte_1EE33573B = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSTextListMarkerLowercaseLatin");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE3357A8 = result;
  off_1ECE77C20[0] = NSTextListMarkerLowercaseLatinFunction;
  return result;
}

uint64_t NSTextListMarkerLowercaseLatinFunction(void)
{
  return qword_1EE3357A8;
}

uint64_t initNSTextListMarkerUppercaseLatin(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE33573B == 1)
  {
    v0 = (void *)qword_1EE335760;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194B5B470);
    }
    qword_1EE335760 = (uint64_t)v0;
    byte_1EE33573B = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSTextListMarkerUppercaseLatin");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE3357B0 = result;
  off_1ECE77C28[0] = NSTextListMarkerUppercaseLatinFunction;
  return result;
}

uint64_t NSTextListMarkerUppercaseLatinFunction(void)
{
  return qword_1EE3357B0;
}

uint64_t initNSTextListMarkerLowercaseHexadecimal(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE33573B == 1)
  {
    v0 = (void *)qword_1EE335760;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194B5B53CLL);
    }
    qword_1EE335760 = (uint64_t)v0;
    byte_1EE33573B = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSTextListMarkerLowercaseHexadecimal");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE3357B8 = result;
  off_1ECE77C30[0] = NSTextListMarkerLowercaseHexadecimalFunction;
  return result;
}

uint64_t NSTextListMarkerLowercaseHexadecimalFunction(void)
{
  return qword_1EE3357B8;
}

uint64_t initNSTextListMarkerUppercaseHexadecimal(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE33573B == 1)
  {
    v0 = (void *)qword_1EE335760;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194B5B608);
    }
    qword_1EE335760 = (uint64_t)v0;
    byte_1EE33573B = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSTextListMarkerUppercaseHexadecimal");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE3357C0 = result;
  off_1ECE77C38 = NSTextListMarkerUppercaseHexadecimalFunction;
  return result;
}

uint64_t NSTextListMarkerUppercaseHexadecimalFunction(void)
{
  return qword_1EE3357C0;
}

_QWORD *WTF::HashTable<WTF::RetainPtr<BETextAlternatives>,WTF::KeyValuePair<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::RetainPtr<BETextAlternatives>>,WTF::HashMap<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::RetainPtr<BETextAlternatives>>,WTF::HashTraits<WTF::RetainPtr<BETextAlternatives>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<BETextAlternatives>>>::rehash(uint64_t *a1, unsigned int a2, const void **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  const void **v13;
  const void *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  const void *v25;
  const void *v26;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (const void **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (const void *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (_QWORD *)(v15 + 16 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v24[1] = *(_QWORD *)(v6 + 16 * v11 + 8);
          v26 = *v13;
          *v13 = 0;
          if (v26)
            CFRelease(v26);
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::Vector<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  char v12;

  v3 = *(_DWORD *)(a1 + 12);
  v4 = *(WTF **)a1;
  if (v3)
  {
    v5 = (WTF *)((char *)v4 + 24 * v3);
    do
    {
      v6 = *((_QWORD *)v4 + 2);
      if (v6)
      {
        v7 = *(unsigned int *)(v6 - 4);
        if ((_DWORD)v7)
        {
          v8 = *((_QWORD *)v4 + 2);
          do
          {
            v9 = *(WTF::StringImpl **)v8;
            if (*(_QWORD *)v8 != -1)
            {
              v10 = *(unsigned int *)(v8 + 48);
              if ((_DWORD)v10 != -1)
              {
                ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v10])(&v12, v8 + 8);
                v9 = *(WTF::StringImpl **)v8;
              }
              *(_DWORD *)(v8 + 48) = -1;
              *(_QWORD *)v8 = 0;
              if (v9)
              {
                if (*(_DWORD *)v9 == 2)
                  WTF::StringImpl::destroy(v9, a2);
                else
                  *(_DWORD *)v9 -= 2;
              }
            }
            v8 += 56;
            --v7;
          }
          while (v7);
        }
        WTF::fastFree((WTF *)(v6 - 16), a2);
      }
      v4 = (WTF *)((char *)v4 + 24);
    }
    while (v4 != v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  char v15;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 24 * a2;
      result = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = v3;
        do
        {
          *(_OWORD *)v7 = *(_OWORD *)v8;
          *(_QWORD *)(v7 + 16) = 0;
          v9 = *((_QWORD *)v8 + 2);
          *((_QWORD *)v8 + 2) = 0;
          *(_QWORD *)(v7 + 16) = v9;
          v10 = *((_QWORD *)v8 + 2);
          if (v10)
          {
            v11 = *(unsigned int *)(v10 - 4);
            if ((_DWORD)v11)
            {
              v12 = *((_QWORD *)v8 + 2);
              do
              {
                v13 = *(WTF::StringImpl **)v12;
                if (*(_QWORD *)v12 != -1)
                {
                  v14 = *(unsigned int *)(v12 + 48);
                  if ((_DWORD)v14 != -1)
                  {
                    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v14])(&v15, v12 + 8);
                    v13 = *(WTF::StringImpl **)v12;
                  }
                  *(_DWORD *)(v12 + 48) = -1;
                  *(_QWORD *)v12 = 0;
                  if (v13)
                  {
                    if (*(_DWORD *)v13 == 2)
                      WTF::StringImpl::destroy(v13, v6);
                    else
                      *(_DWORD *)v13 -= 2;
                  }
                }
                v12 += 56;
                --v11;
              }
              while (v11);
            }
            result = WTF::fastFree((WTF *)(v10 - 16), v6);
          }
          v7 += 24;
          v8 = (WTF *)((char *)v8 + 24);
        }
        while (v8 != (WTF *)((char *)v3 + 24 * v4));
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DataDetection::detectContentInFrame(WebCore::LocalFrame *,WTF::OptionSet<WebCore::DataDetectorType>,std::optional<double>,WTF::CompletionHandler<void ()(NSArray *)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E327FA10;
  WebCore::DataDetection::detectContentInFrame(WebCore::LocalFrame *,WTF::OptionSet<WebCore::DataDetectorType>,std::optional<double>,WTF::CompletionHandler<void ()(NSArray *)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DataDetection::detectContentInFrame(WebCore::LocalFrame *,WTF::OptionSet<WebCore::DataDetectorType>,std::optional<double>,WTF::CompletionHandler<void ()(NSArray *)> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E327FA10;
  WebCore::DataDetection::detectContentInFrame(WebCore::LocalFrame *,WTF::OptionSet<WebCore::DataDetectorType>,std::optional<double>,WTF::CompletionHandler<void ()(NSArray *)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DataDetection::detectContentInFrame(WebCore::LocalFrame *,WTF::OptionSet<WebCore::DataDetectorType>,std::optional<double>,WTF::CompletionHandler<void ()(NSArray *)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  _QWORD *v16;

  if (PAL::softLinkDataDetectorsCoreDDScannerScanQuery(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 40)))
  {
    v2 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    v3 = *(_BYTE *)(a1 + 16);
    *(_QWORD *)((char *)&v15 + 7) = *(_QWORD *)(a1 + 24);
    HIBYTE(v15) = *(_BYTE *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    v6 = *(_QWORD *)(a1 + 56);
    v8 = *(_DWORD *)(a1 + 64);
    v7 = *(_DWORD *)(a1 + 68);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    v9 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    v10 = WTF::fastMalloc((WTF *)0x50);
    *(_QWORD *)v10 = off_1E327FA60;
    *(_QWORD *)(v10 + 8) = v2;
    *(_BYTE *)(v10 + 16) = v3;
    *(_OWORD *)(v10 + 17) = v15;
    *(_QWORD *)(v10 + 40) = v4;
    *(_QWORD *)(v10 + 48) = v5;
    *(_QWORD *)(v10 + 56) = v6;
    *(_DWORD *)(v10 + 64) = v8;
    *(_DWORD *)(v10 + 68) = v7;
    *(_QWORD *)(v10 + 72) = v9;
    v14 = v10;
    WTF::callOnMainRunLoop();
    result = v14;
    if (!v14)
      return result;
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = &off_1E327FA38;
    v13[1] = v12;
    v16 = v13;
    WTF::callOnMainRunLoop();
    result = (uint64_t)v16;
    if (!v16)
      return result;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
}

void sub_194B5C254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DataDetection::detectContentInFrame(WebCore::LocalFrame *,WTF::OptionSet<WebCore::DataDetectorType>,std::optional<double>,WTF::CompletionHandler<void ()(NSArray *)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E327FA38;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DataDetection::detectContentInFrame(WebCore::LocalFrame *,WTF::OptionSet<WebCore::DataDetectorType>,std::optional<double>,WTF::CompletionHandler<void ()(NSArray *)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E327FA38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DataDetection::detectContentInFrame(WebCore::LocalFrame *,WTF::OptionSet<WebCore::DataDetectorType>,std::optional<double>,WTF::CompletionHandler<void ()(NSArray *)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_194B5C40C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DataDetection::detectContentInFrame(WebCore::LocalFrame *,WTF::OptionSet<WebCore::DataDetectorType>,std::optional<double>,WTF::CompletionHandler<void ()(NSArray *)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E327FA60;
  WebCore::DataDetection::detectContentInFrame(WebCore::LocalFrame *,WTF::OptionSet<WebCore::DataDetectorType>,std::optional<double>,WTF::CompletionHandler<void ()(NSArray *)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DataDetection::detectContentInFrame(WebCore::LocalFrame *,WTF::OptionSet<WebCore::DataDetectorType>,std::optional<double>,WTF::CompletionHandler<void ()(NSArray *)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E327FA60;
  WebCore::DataDetection::detectContentInFrame(WebCore::LocalFrame *,WTF::OptionSet<WebCore::DataDetectorType>,std::optional<double>,WTF::CompletionHandler<void ()(NSArray *)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::DataDetection::detectContentInFrame(WebCore::LocalFrame *,WTF::OptionSet<WebCore::DataDetectorType>,std::optional<double>,WTF::CompletionHandler<void ()(NSArray *)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::call(uint64_t a1)
{
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WebCore::Node *v9;
  unsigned int *result;
  WebCore::Node *v11;
  int v12;
  WebCore::Node *v13;
  int v14;

  v2 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v2 + 24) += 4;
  v3 = *(_WORD *)(v2 + 28);
  if ((v3 & 1) != 0)
  {
    v5 = *(_QWORD *)(v2 + 80);
    if (v5)
      LODWORD(v5) = *(_DWORD *)(v5 + 4);
  }
  else if ((v3 & 4) != 0 && (v4 = *(_QWORD *)(v2 + 80)) != 0)
  {
    LODWORD(v5) = 0;
    do
    {
      LODWORD(v5) = v5 + 1;
      v4 = *(_QWORD *)(v4 + 56);
    }
    while (v4);
  }
  else
  {
    LODWORD(v5) = 0;
  }
  v11 = (WebCore::Node *)v2;
  v12 = 0;
  v13 = (WebCore::Node *)v2;
  v14 = v5;
  v6 = WebCore::processDataDetectorScannerResults(*(PAL **)(a1 + 8), *(_BYTE *)(a1 + 16), *(WebCore::Node **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), &v11, (uint64_t *)(a1 + 56));
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9, v8);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  result = (unsigned int *)v11;
  v11 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v8);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

void sub_194B5C5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9, uint64_t a10, WebCore::Node *a11)
{
  uint64_t v11;
  void *v13;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a11)
  {
    if (*((_DWORD *)a11 + 6) == 2)
    {
      if ((*((_WORD *)a11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a11, v13);
    }
    else
    {
      *((_DWORD *)a11 + 6) -= 2;
    }
  }
  if (a9)
  {
    if (*((_DWORD *)a9 + 6) == 2)
    {
      if ((*((_WORD *)a9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a9, v13);
    }
    else
    {
      *((_DWORD *)a9 + 6) -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorTypeOperations<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>>::destruct(*(unsigned int **)a1, (void *)(*(_QWORD *)a1 + 8 * v3));
  v4 = *(unsigned int **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

void sub_194B5C674(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::VectorTypeOperations<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>>::destruct(unsigned int *result, void *a2)
{
  unsigned int **v3;

  if (result != a2)
  {
    v3 = (unsigned int **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        }
        else
        {
          result[6] -= 2;
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_3RefIN7WebCore12SharedBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_3RefIN7WebCore12SharedBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(a2, a2);
}

void WebCore::selectionAsAttributedString(WebCore *this, const WebCore::Document *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WebCore::Node *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  CFTypeRef v28;
  CFTypeRef v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  uint64_t v41;
  int v42;
  char v43;
  __int16 v44;
  char v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  char v49;
  CFTypeRef cf;
  _QWORD v51[2];
  WebCore::Node *v52[2];
  WebCore::Node *v53;
  char v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, void *, uint64_t, uint64_t, _BYTE *);
  void *v59;
  uint64_t *v60;

  v3 = *((_QWORD *)a2 + 7);
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  v30 = v3;
  LODWORD(v31) = *((_DWORD *)a2 + 16);
  BYTE4(v31) = *((_BYTE *)a2 + 68);
  v4 = *((_QWORD *)a2 + 9);
  if (v4)
    *(_DWORD *)(v4 + 24) += 2;
  v32 = v4;
  LODWORD(v33) = *((_DWORD *)a2 + 20);
  BYTE4(v33) = *((_BYTE *)a2 + 84);
  v5 = *((_QWORD *)a2 + 11);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  v34 = v5;
  LODWORD(v35) = *((_DWORD *)a2 + 24);
  BYTE4(v35) = *((_BYTE *)a2 + 100);
  v6 = *((_QWORD *)a2 + 13);
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  v36 = v6;
  LODWORD(v37) = *((_DWORD *)a2 + 28);
  BYTE4(v37) = *((_BYTE *)a2 + 116);
  v7 = *((_QWORD *)a2 + 15);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  v38 = v7;
  v39 = *((_DWORD *)a2 + 32);
  v40 = *((_BYTE *)a2 + 132);
  v8 = *((_QWORD *)a2 + 17);
  if (v8)
    *(_DWORD *)(v8 + 24) += 2;
  v41 = v8;
  v42 = *((_DWORD *)a2 + 36);
  v43 = *((_BYTE *)a2 + 148);
  v44 = *((_WORD *)a2 + 76);
  v45 = *((_BYTE *)a2 + 154);
  if (WebCore::ImageOverlay::isInsideOverlay((WebCore::ImageOverlay *)&v30, a2))
  {
    WebCore::VisibleSelection::document((uint64_t)&v30, v52);
    v10 = v52[0];
    v11 = *((_QWORD *)v52[0] + 66);
    if (v11 && (v12 = *(_QWORD *)(v11 + 8)) != 0 && (v13 = *(_QWORD *)(v12 + 24)) != 0)
      v14 = *(_QWORD *)(v13 + 8);
    else
      v14 = 0;
    v52[0] = 0;
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, v9);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
    if (v14)
    {
      v17 = v38;
      if ((v40 & 7u) - 1 <= 1)
        goto LABEL_72;
      while (1)
      {
        v18 = **(_QWORD **)(v17 + 40);
        if (!v18)
          goto LABEL_30;
        if ((*(_WORD *)(v18 + 28) & 0x80) == 0)
          goto LABEL_30;
        v19 = *(_QWORD *)(v18 + 200);
        if (!v19)
          goto LABEL_30;
        v20 = *(_QWORD *)(v19 + 8);
        if (!v20 || (*(_WORD *)(v20 + 28) & 0x10) == 0)
          goto LABEL_30;
        *(_DWORD *)(v20 + 24) += 2;
        WTF::WeakHashMap<WebCore::HTMLElement,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>,WebCore::WeakPtrImplWithEventTargetData>::find((uint64_t *)(v14 + 1792), v20, (uint64_t)&v56);
        v23 = *(_QWORD *)(v14 + 1792);
        if (v23)
          v23 += 80 * *(unsigned int *)(v23 - 4);
        if (v57 == v23)
          break;
        std::__optional_destruct_base<WebCore::TextRecognitionResult,false>::__optional_destruct_base[abi:sn180100]<WebCore::TextRecognitionResult&>((uint64_t)v52, v57 + 8);
        if (!v55)
          break;
        WebCore::ImageOverlay::characterRange((WebCore::ImageOverlay *)&v30, (uint64_t)&v56);
        if ((_BYTE)v58)
          v24 = v56;
        else
          v24 = 0;
        if ((_BYTE)v58)
          v25 = v57;
        else
          v25 = 0;
        v51[0] = v24;
        v51[1] = v25;
        if (!v25)
        {
          *(_QWORD *)this = 0;
          goto LABEL_65;
        }
        v17 = v55;
        if (v55)
        {
          WebCore::stringForRange((uint64_t)v52, v51, &cf);
          v46 = 0;
          v47 = &v46;
          v48 = 0x2020000000;
          v49 = 0;
          v26 = (void *)cf;
          v27 = objc_msgSend((id)cf, "length", v30, v31, v32, v33, v34, v35, v36, v37);
          v56 = MEMORY[0x1E0C809B0];
          v57 = 3221225472;
          v58 = ___ZN7WebCoreL41selectionInImageOverlayAsAttributedStringERKNS_16VisibleSelectionE_block_invoke;
          v59 = &unk_1E327FA80;
          v60 = &v46;
          objc_msgSend(v26, "enumerateAttributesInRange:options:usingBlock:", 0, v27, 0, &v56);
          if (*((_BYTE *)v47 + 24))
          {
            v28 = cf;
            cf = 0;
          }
          else
          {
            v28 = 0;
          }
          *(_QWORD *)this = v28;
          _Block_object_dispose(&v46, 8);
          v29 = cf;
          cf = 0;
          if (v29)
            CFRelease(v29);
LABEL_65:
          if (v55)
            WebCore::TextRecognitionResult::~TextRecognitionResult((WebCore::TextRecognitionResult *)v52, v16);
LABEL_67:
          if (*(_DWORD *)(v20 + 24) != 2)
          {
            *(_DWORD *)(v20 + 24) -= 2;
            goto LABEL_39;
          }
          if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
          {
            v22 = (WebCore::Node *)v20;
            goto LABEL_60;
          }
          goto LABEL_39;
        }
        __break(1u);
LABEL_72:
        v17 = *(_QWORD *)(v17 + 32);
      }
      *(_QWORD *)this = 0;
      goto LABEL_67;
    }
LABEL_30:
    *(_QWORD *)this = 0;
  }
  else
  {
    WebCore::VisibleSelection::firstRange((WebCore::Node *)&v30, v52);
    if (v54)
    {
      WebCore::attributedString((WebCore *)v52, (uint64_t)&v56);
      WebCore::AttributedString::nsAttributedString((WebCore::AttributedString *)&v56, (uint64_t *)this);
      WebCore::AttributedString::~AttributedString((WebCore::AttributedString *)&v56, v15);
    }
    else
    {
      *(_QWORD *)this = objc_alloc_init(MEMORY[0x1E0CB3498]);
    }
    if (v54)
    {
      v21 = v53;
      v53 = 0;
      if (v21)
      {
        if (*((_DWORD *)v21 + 6) == 2)
        {
          if ((*((_WORD *)v21 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v21, v16);
        }
        else
        {
          *((_DWORD *)v21 + 6) -= 2;
        }
      }
      v22 = v52[0];
      v52[0] = 0;
      if (v22)
      {
        if (*((_DWORD *)v22 + 6) == 2)
        {
          if ((*((_WORD *)v22 + 15) & 0x400) == 0)
LABEL_60:
            WebCore::Node::removedLastRef(v22, v16);
        }
        else
        {
          *((_DWORD *)v22 + 6) -= 2;
        }
      }
    }
  }
LABEL_39:
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v30);
}

void sub_194B5CB4C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,CFTypeRef cf,uint64_t a27,uint64_t a28,WebCore::Node *a29,uint64_t a30,WebCore::Node *a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  if (a36)
    WebCore::TextRecognitionResult::~TextRecognitionResult((WebCore::TextRecognitionResult *)&a29, a2);
  if (*(_DWORD *)(v36 + 24) == 2)
  {
    if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v36, a2);
  }
  else
  {
    *(_DWORD *)(v36 + 24) -= 2;
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *WebCore::archivedDataForAttributedString(WebCore *this, NSAttributedString *a2)
{
  uint64_t *result;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;

  result = -[NSAttributedString length](a2, "length");
  if (result)
  {
    WebCore::FragmentedSharedBuffer::create((WebCore::FragmentedSharedBuffer *)objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", a2, 1, 0), &v8);
    v5 = WTF::fastMalloc((WTF *)0x38);
    WebCore::SharedBuffer::SharedBuffer(v5, &v8);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v8, v6);
    v8 = 0;
    *(_QWORD *)this = v5;
    return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v8, v7);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return result;
}

void sub_194B5CCC4(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

uint64_t ___ZN7WebCoreL41selectionInImageOverlayAsAttributedStringERKNS_16VisibleSelectionE_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t result;

  result = objc_msgSend(a2, "count");
  if (result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a5 = 1;
  }
  return result;
}

void WebCore::TextRecognitionResult::~TextRecognitionResult(WebCore::TextRecognitionResult *this, WTF::StringImpl *a2)
{
  const void *v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  const void *v13;
  WTF *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF *v22;

  v3 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((unsigned int *)this + 11);
  if ((_DWORD)v4)
  {
    v5 = (WTF::StringImpl **)*((_QWORD *)this + 4);
    v6 = 40 * v4;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v8 = (WTF *)*((_QWORD *)this + 4);
  if (v8)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((unsigned int *)this + 7);
  if ((_DWORD)v9)
  {
    v10 = 24 * v9;
    v11 = *((_QWORD *)this + 2) + 8;
    do
    {
      v12 = *(WTF **)v11;
      if (*(_QWORD *)v11)
      {
        *(_QWORD *)v11 = 0;
        *(_DWORD *)(v11 + 8) = 0;
        WTF::fastFree(v12, a2);
      }
      v13 = *(const void **)(v11 - 8);
      *(_QWORD *)(v11 - 8) = 0;
      if (v13)
        CFRelease(v13);
      v11 += 24;
      v10 -= 24;
    }
    while (v10);
  }
  v14 = (WTF *)*((_QWORD *)this + 2);
  if (v14)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v14, a2);
  }
  v15 = *((_DWORD *)this + 3);
  v16 = *(_QWORD *)this;
  if (v15)
  {
    v17 = v16 + 56 * v15;
    do
    {
      v18 = *(unsigned int *)(v16 + 44);
      if ((_DWORD)v18)
      {
        v19 = *(WTF::StringImpl ***)(v16 + 32);
        v20 = 48 * v18;
        do
        {
          v21 = *v19;
          *v19 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, a2);
            else
              *(_DWORD *)v21 -= 2;
          }
          v19 += 6;
          v20 -= 48;
        }
        while (v20);
      }
      v22 = *(WTF **)(v16 + 32);
      if (v22)
      {
        *(_QWORD *)(v16 + 32) = 0;
        *(_DWORD *)(v16 + 40) = 0;
        WTF::fastFree(v22, a2);
      }
      v16 += 56;
    }
    while (v16 != v17);
    v16 = *(_QWORD *)this;
  }
  if (v16)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree((WTF *)v16, a2);
  }
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int8x16_t *a4@<X3>, unsigned int a5@<W4>, _QWORD *a6@<X8>)
{
  int v9;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  uint64_t v15;
  unsigned __int128 *v16;
  unsigned __int128 *v17;
  unsigned __int128 v18;
  char v19;
  uint64_t v20;

  v9 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v11 = v20;
        if (v20)
        {
          v12 = (_BYTE *)(v20 + 20);
          *(_DWORD *)v20 = 2;
          *(_DWORD *)(v20 + 4) = v9;
          *(_QWORD *)(v20 + 8) = v20 + 20;
          *(_DWORD *)(v20 + 16) = 4;
          if (a3)
          {
            v13 = *(_BYTE **)(a3 + 8);
            v14 = *(unsigned int *)(a3 + 4);
            if ((*(_BYTE *)(a3 + 16) & 4) != 0)
            {
              if ((_DWORD)v14)
              {
                if ((_DWORD)v14 == 1)
                  *v12 = *v13;
                else
                  result = (uint64_t)memcpy((void *)(v20 + 20), v13, v14);
              }
            }
            else
            {
              if (v14 < 0x10)
              {
                v16 = (unsigned __int128 *)(v20 + 20);
              }
              else
              {
                v16 = (unsigned __int128 *)&v12[v14 & 0xFFFFFFF0];
                v17 = (unsigned __int128 *)(v20 + 20);
                do
                {
                  v18 = (unsigned __int128)vld2q_s8(v13);
                  v13 += 32;
                  *v17++ = v18;
                }
                while (v17 != v16);
              }
              while (v16 != (unsigned __int128 *)&v12[v14])
              {
                v19 = *v13;
                v13 += 2;
                *(_BYTE *)v16 = v19;
                v16 = (unsigned __int128 *)((char *)v16 + 1);
              }
            }
            v15 = *(unsigned int *)(a3 + 4);
          }
          else
          {
            v15 = 0;
          }
          if (a5)
          {
            result = (uint64_t)&v12[v15];
            if (a5 == 1)
              *(_BYTE *)result = a4->i8[0];
            else
              result = (uint64_t)memcpy((void *)result, a4, a5);
          }
        }
        goto LABEL_14;
      }
LABEL_23:
      v11 = 0;
      goto LABEL_14;
    }
LABEL_22:
    v11 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_14;
  }
  if (!(_DWORD)result)
    goto LABEL_22;
  if (result > 0x7FFFFFEF)
    goto LABEL_23;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v11 = v20;
  if (v20)
  {
    *(_DWORD *)v20 = 2;
    *(_DWORD *)(v20 + 4) = v9;
    *(_QWORD *)(v20 + 8) = v20 + 20;
    *(_DWORD *)(v20 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((_WORD *)(v20 + 20), a3, a4, a5);
  }
LABEL_14:
  *a6 = v11;
  return result;
}

void sub_194B5D058(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

_WORD *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(_WORD *__dst, uint64_t a2, int8x16_t *a3, int a4)
{
  _WORD *v6;
  int8x16_t *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  char *v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int16 v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  int8x16x2_t v33;
  int8x16x2_t v34;
  int8x16x2_t v35;
  int8x16x2_t v36;
  int8x16x2_t v37;
  int8x16x2_t v38;

  v6 = __dst;
  if (a2)
  {
    v8 = *(int8x16_t **)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v10 = (char *)&__dst[v9];
      if (v9 >= 0x40)
      {
        v11 = (char *)&__dst[v9 & 0xFFFFFFC0];
        v13 = 0uLL;
        v14 = (char *)__dst;
        do
        {
          v33.val[0] = *v8;
          v15 = v8[1];
          v35.val[0] = v8[2];
          v16 = v8[3];
          v8 += 4;
          v17 = v16;
          v35.val[1] = 0uLL;
          v37.val[0] = v15;
          v33.val[1] = 0uLL;
          v18 = v14;
          vst2q_s8(v18, v33);
          v18 += 32;
          v37.val[1] = 0uLL;
          vst2q_s8(v18, v37);
          v19 = v14 + 64;
          vst2q_s8(v19, v35);
          v20 = v14 + 96;
          vst2q_s8(v20, *(int8x16x2_t *)(&v13 - 1));
          v14 += 128;
        }
        while (v14 != v11);
      }
      else
      {
        v11 = (char *)__dst;
      }
      while (v11 != v10)
      {
        v21 = v8->u8[0];
        v8 = (int8x16_t *)((char *)v8 + 1);
        *(_WORD *)v11 = v21;
        v11 += 2;
      }
    }
    else if ((_DWORD)v9 == 1)
    {
      *__dst = v8->i16[0];
    }
    else if ((_DWORD)v9)
    {
      __dst = memcpy(__dst, v8, 2 * v9);
    }
    v12 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v12 = 0;
  }
  v22 = (char *)&v6[v12];
  v23 = &v22[2 * a4];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v24 = &v22[2 * (a4 & 0xFFFFFFC0)];
    v25 = 0uLL;
    do
    {
      v34.val[0] = *a3;
      v26 = a3[1];
      v36.val[0] = a3[2];
      v27 = a3[3];
      a3 += 4;
      v28 = v27;
      v36.val[1] = 0uLL;
      v38.val[0] = v26;
      v34.val[1] = 0uLL;
      v29 = v22;
      vst2q_s8(v29, v34);
      v29 += 32;
      v38.val[1] = 0uLL;
      vst2q_s8(v29, v38);
      v30 = v22 + 64;
      vst2q_s8(v30, v36);
      v31 = v22 + 96;
      vst2q_s8(v31, *(int8x16x2_t *)(&v25 - 1));
      v22 += 128;
    }
    while (v22 != v24);
    v22 = v24;
  }
  while (v22 != v23)
  {
    v32 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v22 = v32;
    v22 += 2;
  }
  return __dst;
}

uint64_t WebCore::convertDictionary<WebCore::GPUComputePassTimestampWrites>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  JSC::VM *v28;
  WTF::StringImpl *v29;

  v28 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_24:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v28, "querySet", 9, "GPUComputePassTimestampWrites", 30, "GPUQuerySet", 12);
    goto LABEL_25;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
LABEL_36:
    result = JSC::throwTypeError();
    goto LABEL_25;
  }
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v29);
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v7);
    else
      *(_DWORD *)v29 -= 2;
  }
  if (*((_DWORD *)v28 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v28);
    if ((result & 1) != 0)
      goto LABEL_25;
  }
  if (v8 == 10)
  {
    v9 = -1;
  }
  else
  {
    result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v8, &v29);
    if ((unint64_t)v29 >> 32)
      goto LABEL_25;
    v9 = (unint64_t)v29 | 0xFFFFFFFF00000000;
  }
  WTF::AtomStringImpl::addLiteral();
  v11 = v29;
  v13 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v29);
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (*((_DWORD *)v28 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v28);
    if ((result & 1) != 0)
      goto LABEL_25;
  }
  if (v13 != 10)
  {
    result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v13, &v29);
    if (!((unint64_t)v29 >> 32))
    {
      v9 = v9 | ((unint64_t)v29 << 32);
      goto LABEL_19;
    }
LABEL_25:
    v17 = 1;
    goto LABEL_26;
  }
LABEL_19:
  WTF::AtomStringImpl::addLiteral();
  v14 = v29;
  v16 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v29);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (*((_DWORD *)v28 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v28);
    if ((result & 1) != 0)
      goto LABEL_25;
  }
  if (v16 == 10)
    goto LABEL_24;
  v29 = a2[7];
  if ((v16 & 0xFFFE000000000002) != 0)
    goto LABEL_36;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C) != 0;
  if ((_DWORD)v18)
  {
    v20 = 16 * v18;
    if ((char **)v20 != &WebCore::JSGPUQuerySet::s_info)
    {
      do
      {
        v20 = *(_QWORD *)(v20 + 16);
        v19 = v20 != 0;
      }
      while ((char **)v20 != &WebCore::JSGPUQuerySet::s_info && v20 != 0);
    }
  }
  if (!v19)
    goto LABEL_36;
  v22 = *(_QWORD *)(v16 + 24);
  if (!v22)
    goto LABEL_36;
  result = *(_QWORD *)(v22 + 8);
  if (result)
    goto LABEL_58;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = v22;
  v24 = *(unsigned int **)(v22 + 8);
  *(_QWORD *)(v22 + 8) = result;
  if (!v24)
    goto LABEL_58;
  do
  {
    v25 = __ldaxr(v24);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v24));
  if (!v26)
  {
    atomic_store(1u, v24);
    WTF::fastFree((WTF *)v24, v23);
  }
  result = *(_QWORD *)(v22 + 8);
  if (result)
  {
LABEL_58:
    do
      v27 = __ldaxr((unsigned int *)result);
    while (__stlxr(v27 + 1, (unsigned int *)result));
  }
  v17 = 0;
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v9;
LABEL_26:
  *(_DWORD *)(a3 + 16) = v17;
  return result;
}

uint64_t WebCore::JSGPUComputePipeline::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
        else
          --v3[2];
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGPUComputePipeline::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUComputePipelinePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUComputePipelinePrototype::create(WebCore::JSGPUComputePipelinePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v5;
  unint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  JSC::Structure *v22;
  int v23;
  unint64_t v25;
  JSC::VM *v26;
  uint64_t SlowCase;
  WTF::StringImpl *v28[6];
  int v29;
  int v30;
  JSC::Structure *v31;
  int v32;

  v5 = (_QWORD *)((char *)this + 38904);
  v6 = *((_QWORD *)this + 4863);
  if (v6 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v6 = *((_QWORD *)this + 4865);
  if ((v6 & 1) == 0)
  {
    v25 = *(_QWORD *)(v6 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v6 + HIDWORD(v25);
    *((_QWORD *)this + 4865) = v6 + (int)v25;
LABEL_2:
    *v5 = v6 + 16;
    goto LABEL_3;
  }
  v26 = (JSC::VM *)a2;
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
  a2 = (unint64_t)v26;
  v6 = SlowCase;
LABEL_3:
  v7 = (int *)((char *)this + 93124);
  *(_DWORD *)v6 = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v8;
  *(_QWORD *)(v6 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSGPUComputePipeline::s_info, &WebCore::JSGPUComputePipelinePrototypeTableValues, (JSC::JSObject *)v6);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                         + 0x28));
  v10 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 472);
  if ((v10 & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v11 = v28[0];
    v12 = *v7;
    *v7 = 1;
    LODWORD(v28[0]) = -1;
    WORD2(v28[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v12;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v13);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  v14 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 136))(v14) + 472) & 0x1000000) != 0)
  {
    if ((v10 & 0x1000000) != 0)
      goto LABEL_16;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral();
    v15 = v28[0];
    v16 = *v7;
    *v7 = 1;
    LODWORD(v28[0]) = -1;
    WORD2(v28[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v16;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v17);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE)), this, (JSC::JSObject *)v6);
LABEL_16:
  v18 = *(_QWORD *)(v5[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v20 = JSC::JSString::create((uint64_t)this, v28);
  v21 = v28[0];
  v28[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v19);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (JSC::Structure *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE));
  v32 = *(_DWORD *)v6;
  v31 = v22;
  v23 = JSC::Structure::outOfLineCapacity(v22);
  v29 = 0;
  v30 = v23;
  v28[0] = (WTF::StringImpl *)&v30;
  v28[1] = (WTF::StringImpl *)v6;
  v28[2] = this;
  v28[3] = (WTF::StringImpl *)&v32;
  v28[4] = (WTF::StringImpl *)&v31;
  v28[5] = (WTF::StringImpl *)&v29;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v22, this, v18, 6, (uint64_t)v28);
  if ((*(_BYTE *)((16 * *(unsigned int *)v6) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v6, (uint64_t)this, v29, v20);
  *((_DWORD *)v22 + 4) |= 0x10u;
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUComputePipeline>,(WebCore::DOMConstructorID)21>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 168);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUComputePipeline>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUComputePipeline::s_info
         + ~((_QWORD)&WebCore::JSGPUComputePipeline::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUComputePipeline::s_info
                                                                      + ~((_QWORD)&WebCore::JSGPUComputePipeline::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUComputePipeline::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUComputePipeline::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUComputePipelinePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUComputePipelinePrototype::create((WebCore::JSGPUComputePipelinePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUComputePipeline::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUComputePipeline::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 168) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUComputePipelineConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUComputePipelinePrototype::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUComputePipeline>,(WebCore::DOMConstructorID)21>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUComputePipeline_label(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 16);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

BOOL WebCore::setJSGPUComputePipeline_label(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  int v17;
  char v18;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSGPUComputePipeline::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSGPUComputePipeline::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v16);
  v10 = v17;
  v11 = v17 == 0;
  if (!v17)
  {
    v12 = v16;
    v16 = 0;
    v13 = *(_QWORD **)(v8 + 8);
    v14 = (WTF::StringImpl *)v13[2];
    v13[2] = v12;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    (*(void (**)(_QWORD *, _QWORD *))(*v13 + 24))(v13, v13 + 2);
    v10 = v17;
  }
  if (v10 != -1)
    ((void (*)(char *, uint64_t *))off_1E3282908[v10])(&v18, &v16);
  return v11;
}

uint64_t WebCore::JSGPUComputePipelineOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPUComputePipelineOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::GPUComputePipeline>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSGPUComputePipeline::s_info
         + ~((_QWORD)&WebCore::JSGPUComputePipeline::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUComputePipeline::s_info
                                                                      + ~((_QWORD)&WebCore::JSGPUComputePipeline::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSGPUComputePipeline::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSGPUComputePipeline::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSGPUComputePipelinePrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUComputePipelinePrototype::create((WebCore::JSGPUComputePipelinePrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSGPUComputePipeline::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUComputePipeline::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 168);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 168))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 168);
    *(_QWORD *)(v36 + 168) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 168);
  *(_QWORD *)(v32 + 168) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335810 & 1) == 0)
  {
    qword_1EE335808 = (uint64_t)&off_1E3282690;
    byte_1EE335810 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335808;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

void WebCore::convertDictionary<WebCore::GPUComputePipelineDescriptor>(uint64_t a1, JSC::JSGlobalObject *a2, JSC::JSCell *this)
{
  unint64_t v5;
  JSC::Structure *Object;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  _DWORD *v22;
  int v23;
  WTF::StringImpl *v24;
  unsigned __int16 v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  unsigned int v29;
  WTF *v30;
  WTF::StringImpl *v31;
  int v32;
  uint64_t v33;
  JSC::Structure *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  unsigned __int8 *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  int v44;
  WTF *v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  WTF::StringImpl *v48;
  WTF *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF *v52;
  WTF::StringImpl *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  WTF::StringImpl *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v77;
  unsigned int v78;
  int v79;
  WTF *v80;
  WTF::StringImpl *v81;
  int v82;
  WTF *v83;
  unint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  char v87;
  WTF *v88;
  unint64_t v89;
  int v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  JSC::VM *v99;
  JSC::VM *v100;
  char v101;
  _DWORD *v102;
  int v103;
  int v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v99 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v5 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
    goto LABEL_5;
  }
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::Structure *)JSC::JSCell::getObject(this);
    if (Object)
    {
LABEL_5:
      v91 = 0;
      v92 = 0;
      v93 = 0;
      v94 = 0;
      LOBYTE(v95) = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      if (v5 == 2)
        goto LABEL_22;
      WTF::AtomStringImpl::addLiteral();
      v8 = JSC::JSObject::get(Object, a2, (unint64_t)v85);
      if (v85)
      {
        if (*(_DWORD *)v85 == 2)
          WTF::StringImpl::destroy(v85, v7);
        else
          *(_DWORD *)v85 -= 2;
      }
      if (*((_DWORD *)v99 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v99))
        goto LABEL_23;
      if (v8 == 10)
        goto LABEL_17;
      WebCore::valueToUSVString(a2, v8, (uint64_t)&v85);
      v10 = (int)v86;
      if ((_DWORD)v86)
      {
        *(_DWORD *)(a1 + 64) = 1;
        v13 = v10;
      }
      else
      {
        v11 = v85;
        v85 = 0;
        v12 = v91;
        v91 = v11;
        if (!v12)
        {
          v13 = 0;
          goto LABEL_15;
        }
        if (*(_DWORD *)v12 != 2)
        {
          v13 = 0;
          *(_DWORD *)v12 -= 2;
          goto LABEL_15;
        }
        WTF::StringImpl::destroy(v12, v9);
        v13 = (int)v86;
      }
      if (v13 == -1)
      {
LABEL_16:
        if (v10)
        {
LABEL_24:
          WebCore::GPUComputePipelineDescriptor::~GPUComputePipelineDescriptor((WebCore::GPUComputePipelineDescriptor *)&v91, v9);
          return;
        }
LABEL_17:
        WTF::AtomStringImpl::addLiteral();
        v14 = v85;
        v16 = JSC::JSObject::get(Object, a2, (unint64_t)v85);
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v15);
          else
            *(_DWORD *)v14 -= 2;
        }
        if (*((_DWORD *)v99 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v99))
          goto LABEL_23;
        if (v16 == 10)
        {
LABEL_22:
          WebCore::throwRequiredMemberTypeError((int)a2, (int)&v99, "layout", 7, "GPUComputePipelineDescriptor", 29, "(GPUPipelineLayout or GPUAutoLayoutMode)", 41);
LABEL_23:
          *(_DWORD *)(a1 + 64) = 1;
          goto LABEL_24;
        }
        if ((v16 & 0xFFFE000000000002) == 0)
        {
          v17 = *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C);
          v18 = *(_DWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C) != 0;
          v19 = (char **)(16 * v17);
          if ((_DWORD)v17)
            v20 = v19 == &WebCore::JSGPUPipelineLayout::s_info;
          else
            v20 = 1;
          if (!v20)
          {
            do
            {
              v19 = (char **)v19[2];
              v18 = v19 != 0;
            }
            while (v19 != &WebCore::JSGPUPipelineLayout::s_info && v19 != 0);
          }
          if (v18)
          {
            v22 = *(_DWORD **)(v16 + 24);
            if (v22)
            {
              v23 = 0;
              ++*v22;
              v102 = v22;
              v103 = 0;
              goto LABEL_41;
            }
          }
        }
        v85 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
        v24 = v85;
        v25 = WebCore::parseEnumeration<WebCore::GPUAutoLayoutMode>(a2, v16);
        if (!*((_DWORD *)v24 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v24) & 1) == 0)
        {
          if (v25 > 0xFFu)
          {
            LOBYTE(v102) = v25;
            v23 = 1;
            v103 = 1;
LABEL_41:
            v104 = 0;
            LOBYTE(v85) = 0;
            LODWORD(v86) = -1;
            ((void (*)(WTF **, WTF::StringImpl **, _DWORD **))off_1E3282928[v23])(&v80, &v85, &v102);
            LODWORD(v86) = v23;
            v80 = (WTF *)&v92;
            ((void (*)(WTF **, uint64_t *, WTF::StringImpl **))off_1E3282938[v23])(&v80, &v92, &v85);
            if ((_DWORD)v86 != -1)
              ((void (*)(WTF **, WTF::StringImpl **))off_1E3282918[v86])(&v80, &v85);
            WTF::AtomStringImpl::addLiteral();
            v26 = v85;
            v28 = JSC::JSObject::get(Object, a2, (unint64_t)v85);
            if (v26)
            {
              if (*(_DWORD *)v26 == 2)
                WTF::StringImpl::destroy(v26, v27);
              else
                *(_DWORD *)v26 -= 2;
            }
            if (*((_DWORD *)v99 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v99))
              goto LABEL_49;
            if (v28 == 10)
            {
              WebCore::throwRequiredMemberTypeError((int)a2, (int)&v99, "compute", 8, "GPUComputePipelineDescriptor", 29, "GPUProgrammableStage", 21);
LABEL_49:
              *(_DWORD *)(a1 + 64) = 1;
              goto LABEL_122;
            }
            v100 = (JSC::VM *)*((_QWORD *)a2 + 7);
            if ((v28 & 0xFFFFFFFFFFFFFFF7) == 2)
            {
              v29 = 0;
              v30 = 0;
              v31 = 0;
              v32 = 0;
LABEL_78:
              WebCore::throwRequiredMemberTypeError((int)a2, (int)&v100, "module", 7, "GPUProgrammableStage", 21, "GPUShaderModule", 16);
LABEL_79:
              v90 = 1;
              goto LABEL_80;
            }
            if ((v28 & 0xFFFE000000000002) != 0 || (v33 = JSC::JSCell::getObject((JSC::JSCell *)v28)) == 0)
            {
              JSC::throwTypeError();
LABEL_160:
              v90 = 1;
LABEL_94:
              v44 = v90;
              if (v90)
              {
                *(_DWORD *)(a1 + 64) = 1;
              }
              else
              {
                v45 = v85;
                v85 = 0;
                v80 = v45;
                LOBYTE(v81) = 0;
                LOBYTE(v82) = 0;
                if (v87)
                {
                  v46 = v86;
                  v86 = 0;
                  v81 = v46;
                  LOBYTE(v82) = 1;
                }
                v83 = v88;
                v47 = v89;
                v88 = 0;
                v89 = 0;
                v84 = v47;
                WebCore::GPUProgrammableStage::operator=((uint64_t)&v94, (uint64_t *)&v80);
                if (HIDWORD(v84))
                {
                  v49 = v83;
                  v50 = 16 * HIDWORD(v84);
                  do
                  {
                    v51 = *(WTF::StringImpl **)v49;
                    *(_QWORD *)v49 = 0;
                    if (v51)
                    {
                      if (*(_DWORD *)v51 == 2)
                        WTF::StringImpl::destroy(v51, v48);
                      else
                        *(_DWORD *)v51 -= 2;
                    }
                    v49 = (WTF *)((char *)v49 + 16);
                    v50 -= 16;
                  }
                  while (v50);
                }
                v52 = v83;
                if (v83)
                {
                  v83 = 0;
                  LODWORD(v84) = 0;
                  WTF::fastFree(v52, v48);
                }
                if ((_BYTE)v82)
                {
                  v53 = v81;
                  v81 = 0;
                  if (v53)
                  {
                    if (*(_DWORD *)v53 == 2)
                      WTF::StringImpl::destroy(v53, v48);
                    else
                      *(_DWORD *)v53 -= 2;
                  }
                }
                v54 = (unsigned int *)v80;
                v80 = 0;
                if (v54)
                {
                  do
                  {
                    v55 = __ldaxr(v54);
                    v56 = v55 - 1;
                  }
                  while (__stlxr(v56, v54));
                  if (!v56)
                  {
                    atomic_store(1u, v54);
                    WTF::fastFree((WTF *)v54, v48);
                  }
                }
                v57 = v91;
                v91 = 0;
                *(_QWORD *)a1 = v57;
                *(_BYTE *)(a1 + 8) = 0;
                v9 = (WTF::StringImpl *)(a1 + 8);
                *(_DWORD *)(a1 + 16) = -1;
                v58 = v93;
                if (v93 != -1)
                {
                  ((void (*)(WTF **, WTF::StringImpl *, uint64_t *))off_1E3282928[v93])(&v80, v9, &v92);
                  *(_DWORD *)(a1 + 16) = v58;
                }
                v59 = v94;
                v94 = 0;
                *(_QWORD *)(a1 + 24) = v59;
                *(_BYTE *)(a1 + 32) = 0;
                *(_BYTE *)(a1 + 40) = 0;
                if (v96)
                {
                  v60 = v95;
                  v95 = 0;
                  *(_QWORD *)(a1 + 32) = v60;
                  *(_BYTE *)(a1 + 40) = 1;
                }
                *(_QWORD *)(a1 + 48) = v97;
                v61 = v98;
                v97 = 0;
                v98 = 0;
                *(_QWORD *)(a1 + 56) = v61;
                *(_DWORD *)(a1 + 64) = 0;
                v44 = v90;
              }
              if (v44 != -1)
                ((void (*)(WTF **, WTF::StringImpl **))off_1E3282948[v44])(&v80, &v85);
LABEL_122:
              v62 = v104;
              if (v104 == -1)
                goto LABEL_24;
LABEL_123:
              ((void (*)(WTF::StringImpl **, _DWORD **))off_1E3282958[v62])(&v85, &v102);
              goto LABEL_24;
            }
            v34 = (JSC::Structure *)v33;
            WTF::AtomStringImpl::addLiteral();
            v35 = v85;
            v37 = (unsigned __int8 *)JSC::JSObject::get(v34, a2, (unint64_t)v85);
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v36);
              else
                *(_DWORD *)v35 -= 2;
            }
            if (*((_DWORD *)v100 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v100))
              goto LABEL_160;
            if (v37 == (unsigned __int8 *)10)
            {
              v29 = 0;
              v78 = 0;
              v30 = 0;
            }
            else
            {
              WebCore::Converter<WebCore::IDLRecord<WebCore::IDLUSVString,WebCore::IDLDouble>>::convertRecord<>((uint64_t)a2, v37, (uint64_t)&v80);
              if (v82)
              {
                v90 = 1;
                if (v82 != -1)
                  ((void (*)(char *, WTF **))off_1E3283040[v82])(&v101, &v80);
                goto LABEL_94;
              }
              v30 = v80;
              v29 = HIDWORD(v81);
              v78 = v81;
            }
            WTF::AtomStringImpl::addLiteral();
            v38 = v85;
            v9 = (WTF::StringImpl *)JSC::JSObject::get(v34, a2, (unint64_t)v85);
            if (v38)
            {
              if (*(_DWORD *)v38 == 2)
              {
                v73 = v38;
                v74 = v9;
                WTF::StringImpl::destroy(v73, v9);
                v9 = v74;
              }
              else
              {
                *(_DWORD *)v38 -= 2;
              }
            }
            if (*((_DWORD *)v100 + 20))
            {
              v75 = v9;
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v100);
              v9 = v75;
              if (hasExceptionsAfterHandlingTraps)
              {
                v31 = 0;
                v32 = 0;
                goto LABEL_79;
              }
            }
            v77 = v9;
            if (v9 == (WTF::StringImpl *)10)
            {
              v31 = 0;
              v79 = 0;
            }
            else
            {
              WebCore::valueToUSVString(a2, (uint64_t)v9, (uint64_t)&v80);
              if ((_DWORD)v81)
              {
                v90 = 1;
                if ((_DWORD)v81 != -1)
                  ((void (*)(char *, WTF **))off_1E3282908[v81])(&v101, &v80);
                v31 = 0;
                v32 = 0;
                goto LABEL_80;
              }
              v31 = v80;
              v79 = 1;
            }
            WTF::AtomStringImpl::addLiteral();
            v39 = v85;
            v40 = JSC::JSObject::get(v34, a2, (unint64_t)v85);
            if (v39)
            {
              if (*(_DWORD *)v39 == 2)
                WTF::StringImpl::destroy(v39, v9);
              else
                *(_DWORD *)v39 -= 2;
            }
            if (*((_DWORD *)v100 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v100))
            {
              v90 = 1;
            }
            else
            {
              if (v40 == 10)
              {
                v32 = v79;
                goto LABEL_78;
              }
              v85 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
              if ((v40 & 0xFFFE000000000002) == 0)
              {
                v63 = *(unsigned int *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x4C);
                v64 = *(_DWORD *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x4C) != 0;
                if ((_DWORD)v63)
                {
                  v65 = 16 * v63;
                  if ((char **)v65 != &WebCore::JSGPUShaderModule::s_info)
                  {
                    do
                    {
                      v65 = *(_QWORD *)(v65 + 16);
                      v64 = v65 != 0;
                    }
                    while ((char **)v65 != &WebCore::JSGPUShaderModule::s_info && v65 != 0);
                  }
                }
                if (v64)
                {
                  v67 = *(_QWORD *)(v40 + 24);
                  if (v67)
                  {
                    v68 = *(_QWORD *)(v67 + 8);
                    if (v68)
                      goto LABEL_185;
                    v68 = WTF::fastCompactMalloc((WTF *)0x10);
                    *(_DWORD *)v68 = 1;
                    *(_QWORD *)(v68 + 8) = v67;
                    v69 = *(unsigned int **)(v67 + 8);
                    *(_QWORD *)(v67 + 8) = v68;
                    if (!v69)
                      goto LABEL_185;
                    do
                    {
                      v70 = __ldaxr(v69);
                      v71 = v70 - 1;
                    }
                    while (__stlxr(v71, v69));
                    if (!v71)
                    {
                      atomic_store(1u, v69);
                      WTF::fastFree((WTF *)v69, v9);
                    }
                    v68 = *(_QWORD *)(v67 + 8);
                    if (v68)
                    {
LABEL_185:
                      do
                        v72 = __ldaxr((unsigned int *)v68);
                      while (__stlxr(v72 + 1, (unsigned int *)v68));
                    }
                    v85 = (WTF::StringImpl *)v68;
                    LOBYTE(v86) = 0;
                    v87 = 0;
                    if (v77 != (WTF::StringImpl *)10)
                    {
                      v86 = v31;
                      v87 = 1;
                      v31 = 0;
                    }
                    v88 = v30;
                    v89 = __PAIR64__(v29, v78);
                    v90 = 0;
                    if (!v79)
                      goto LABEL_94;
LABEL_91:
                    if (v31)
                    {
                      if (*(_DWORD *)v31 == 2)
                        WTF::StringImpl::destroy(v31, v9);
                      else
                        *(_DWORD *)v31 -= 2;
                    }
                    goto LABEL_94;
                  }
                }
              }
              JSC::throwTypeError();
              v90 = 1;
            }
            v32 = v79;
LABEL_80:
            if (v29)
            {
              v41 = 16 * v29;
              v42 = (WTF::StringImpl **)v30;
              do
              {
                v43 = *v42;
                *v42 = 0;
                if (v43)
                {
                  if (*(_DWORD *)v43 == 2)
                    WTF::StringImpl::destroy(v43, v9);
                  else
                    *(_DWORD *)v43 -= 2;
                }
                v42 += 2;
                v41 -= 16;
              }
              while (v41);
            }
            if (v30)
              WTF::fastFree(v30, v9);
            if (!v32)
              goto LABEL_94;
            goto LABEL_91;
          }
          JSC::throwTypeError();
        }
        v62 = 1;
        v104 = 1;
        *(_DWORD *)(a1 + 64) = 1;
        goto LABEL_123;
      }
LABEL_15:
      ((void (*)(WTF **, WTF::StringImpl **))off_1E3282908[v13])(&v80, &v85);
      goto LABEL_16;
    }
  }
  JSC::throwTypeError();
  *(_DWORD *)(a1 + 64) = 1;
}

uint64_t WebCore::GPUProgrammableStage::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF *v16;
  uint64_t v17;

  v4 = *a2;
  *a2 = 0;
  v5 = *(unsigned int **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  if (*(unsigned __int8 *)(a1 + 16) == *((unsigned __int8 *)a2 + 16))
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v8 = a2[1];
      a2[1] = 0;
      v9 = *(WTF::StringImpl **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v8;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 16))
  {
    v10 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v10 -= 2;
    }
    *(_BYTE *)(a1 + 16) = 0;
  }
  else
  {
    v11 = a2[1];
    a2[1] = 0;
    *(_QWORD *)(a1 + 8) = v11;
    *(_BYTE *)(a1 + 16) = 1;
  }
  v12 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v12)
  {
    v13 = *(WTF::StringImpl ***)(a1 + 24);
    v14 = 16 * v12;
    do
    {
      v15 = *v13;
      *v13 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v15 -= 2;
      }
      v13 += 2;
      v14 -= 16;
    }
    while (v14);
  }
  v16 = *(WTF **)(a1 + 24);
  if (v16)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v16, a2);
  }
  v17 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 24) = v17;
  LODWORD(v17) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = v17;
  LODWORD(v17) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = 0;
  *(_DWORD *)(a1 + 36) = v17;
  return a1;
}

uint64_t WebCore::convertDictionary<WebCore::GPUDepthStencilState>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t result;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  float v14;
  JSC::VM *v15;
  double v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  float v20;
  JSC::VM *v21;
  double v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  __int16 v26;
  WTF::StringImpl *v27;
  unsigned __int16 v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  __int16 v32;
  JSC::VM *v33;
  double v34;
  __int16 v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  unsigned __int16 v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  JSC::JSCell *v43;
  unsigned __int8 v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  JSC::JSCell *v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  int v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  unint64_t v58;
  int v59;
  double v60;
  double v61;
  JSC::VM *v62;
  JSC::VM *v63;
  JSC::VM *v64;
  double v65;
  BOOL v66;
  int v67;
  uint64_t v68;
  int *v69;
  int v70;
  double v71;
  char v72;
  __int16 v73;
  __int16 v74;
  int v75;
  uint64_t v76;
  __int16 v77;
  __int16 v78;
  char v79;
  __int16 v80;
  char v81;
  __int16 v82;
  char v83;
  JSC::VM *v84;
  unint64_t v85;
  WTF::StringImpl *v86;

  v84 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_65:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v84, "format", 7, "GPUDepthStencilState", 21, "GPUTextureFormat", 17);
LABEL_66:
    *(_DWORD *)(a3 + 44) = 1;
    return result;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
LABEL_112:
    result = JSC::throwTypeError();
    goto LABEL_66;
  }
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = (WTF::StringImpl *)JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v86);
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
      WTF::StringImpl::destroy(v86, v7);
    else
      *(_DWORD *)v86 -= 2;
  }
  result = (uint64_t)v84;
  if (*((_DWORD *)v84 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v84);
    if ((_DWORD)result)
      goto LABEL_66;
  }
  if (v8 == (WTF::StringImpl *)10)
  {
    v10 = 0;
  }
  else
  {
    v86 = v8;
    if ((unint64_t)v8 < 0xFFFE000000000000)
    {
      v64 = a2[7];
      if ((unint64_t)v8 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v86, (JSC::JSGlobalObject *)a2);
        v65 = v71;
      }
      else
      {
        *(_QWORD *)&v65 = (char *)v8 - 0x2000000000000;
      }
      if (*((_DWORD *)v64 + 20) && (result = JSC::VM::hasExceptionsAfterHandlingTraps(v64), (_DWORD)result))
        HIDWORD(v85) = 1;
      else
        result = (uint64_t)WebCore::enforceRange<WebCore::IDLLong>((WTF::StringImpl *)&v85, (uint64_t)a2, v65);
    }
    else
    {
      v85 = v8;
    }
    v10 = v85;
    if (HIDWORD(v85))
      goto LABEL_66;
  }
  WTF::AtomStringImpl::addLiteral();
  v11 = v86;
  v13 = (WTF::StringImpl *)JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v86);
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (*((_DWORD *)v84 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v84);
    if ((_DWORD)result)
      goto LABEL_66;
  }
  v14 = 0.0;
  if (v13 != (WTF::StringImpl *)10)
  {
    v15 = a2[7];
    v85 = (unint64_t)v15;
    v86 = v13;
    if ((unint64_t)v13 >= 0xFFFE000000000000)
    {
      v16 = (double)(int)v13;
    }
    else if ((unint64_t)v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v62 = v15;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v86, (JSC::JSGlobalObject *)a2);
      v15 = v62;
    }
    else
    {
      *(_QWORD *)&v16 = (char *)v13 - 0x2000000000000;
    }
    if (*((_DWORD *)v15 + 20))
    {
      v60 = v16;
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v15);
      v16 = v60;
      if ((result & 1) != 0)
        goto LABEL_66;
    }
    if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v16 < -3.40282347e38 || v16 > 3.40282347e38)
      goto LABEL_117;
    v14 = v16;
  }
  WTF::AtomStringImpl::addLiteral();
  v17 = v86;
  v19 = (WTF::StringImpl *)JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v86);
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v18);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (*((_DWORD *)v84 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v84);
    if ((_DWORD)result)
      goto LABEL_66;
  }
  v20 = 0.0;
  if (v19 != (WTF::StringImpl *)10)
  {
    v21 = a2[7];
    v85 = (unint64_t)v21;
    v86 = v19;
    if ((unint64_t)v19 >= 0xFFFE000000000000)
    {
      v22 = (double)(int)v19;
    }
    else if ((unint64_t)v19 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v63 = v21;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v86, (JSC::JSGlobalObject *)a2);
      v21 = v63;
    }
    else
    {
      *(_QWORD *)&v22 = (char *)v19 - 0x2000000000000;
    }
    if (*((_DWORD *)v21 + 20))
    {
      v61 = v22;
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v21);
      v22 = v61;
      if ((result & 1) != 0)
        goto LABEL_66;
    }
    if ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && v22 >= -3.40282347e38
      && v22 <= 3.40282347e38)
    {
      v20 = v22;
      goto LABEL_39;
    }
LABEL_117:
    result = JSC::throwTypeError();
    goto LABEL_66;
  }
LABEL_39:
  WTF::AtomStringImpl::addLiteral();
  v23 = v86;
  v25 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v86);
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v24);
    else
      *(_DWORD *)v23 -= 2;
  }
  if (*((_DWORD *)v84 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v84);
    if ((_DWORD)result)
      goto LABEL_66;
  }
  if (v25 == 10)
  {
    v26 = 0;
  }
  else
  {
    v86 = a2[7];
    v27 = v86;
    v28 = WebCore::parseEnumeration<WebCore::GPUCompareFunction>((JSC::JSGlobalObject *)a2, v25);
    if (*((_DWORD *)v27 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v27);
      if ((result & 1) != 0)
        goto LABEL_66;
    }
    if (v28 <= 0xFFu)
      goto LABEL_112;
    v26 = v28 | 0x100;
  }
  WTF::AtomStringImpl::addLiteral();
  v29 = v86;
  v31 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v86);
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v30);
    else
      *(_DWORD *)v29 -= 2;
  }
  if (*((_DWORD *)v84 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v84);
    if ((_DWORD)result)
      goto LABEL_66;
  }
  if (v31 == 10)
  {
    v32 = 0;
    goto LABEL_60;
  }
  v33 = a2[7];
  if (v31 >= 0xFFFE000000000000)
  {
    v66 = (_DWORD)v31 == 0;
    goto LABEL_162;
  }
  *(_QWORD *)&v34 = v31 - 0x2000000000000;
  if (v31 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v34 <= 0.0)
    {
      v35 = v34 < 0.0;
      goto LABEL_58;
    }
  }
  else
  {
    if ((v31 & 0xFFFE000000000002) != 0)
    {
      v35 = v31 == 7;
      goto LABEL_58;
    }
    v67 = *(unsigned __int8 *)(v31 + 5);
    if (v67 == 3)
    {
      v70 = *(_DWORD *)(v31 + 8);
LABEL_161:
      v66 = v70 == 0;
      goto LABEL_162;
    }
    if (v67 == 2)
    {
      v68 = *(_QWORD *)(v31 + 8);
      if ((v68 & 1) != 0)
        v69 = (int *)(v31 + 16);
      else
        v69 = (int *)(v68 + 4);
      v70 = *v69;
      goto LABEL_161;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0xA) & 1) != 0)
    {
      v66 = *(_QWORD *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_162:
      v35 = !v66;
      goto LABEL_58;
    }
  }
  v35 = 1;
LABEL_58:
  if (*((_DWORD *)v33 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v33);
    if ((_DWORD)result)
      goto LABEL_66;
  }
  v32 = v35 | 0x100;
LABEL_60:
  WTF::AtomStringImpl::addLiteral();
  v36 = v86;
  v38 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v86);
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v37);
    else
      *(_DWORD *)v36 -= 2;
  }
  if (*((_DWORD *)v84 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v84);
    if ((_DWORD)result)
      goto LABEL_66;
  }
  if (v38 == 10)
    goto LABEL_65;
  v86 = a2[7];
  v39 = v86;
  v40 = WebCore::parseEnumeration<WebCore::GPUTextureFormat>((JSC::JSGlobalObject *)a2, v38);
  if (*((_DWORD *)v39 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v39);
    if ((result & 1) != 0)
      goto LABEL_66;
  }
  if (v40 <= 0xFFu)
    goto LABEL_112;
  WTF::AtomStringImpl::addLiteral();
  v41 = v86;
  v43 = (JSC::JSCell *)JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v86);
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v42);
    else
      *(_DWORD *)v41 -= 2;
  }
  if (*((_DWORD *)v84 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v84);
    if ((_DWORD)result)
      goto LABEL_66;
  }
  if (v43 == (JSC::JSCell *)10)
  {
    v77 = 0;
    v76 = 0;
    v44 = 7;
  }
  else
  {
    result = WebCore::convertDictionary<WebCore::GPUStencilFaceState>(v43, (unint64_t)a2, (int *)&v86);
    if (HIDWORD(v86))
      goto LABEL_66;
    v44 = v86;
    LODWORD(v76) = v86 & 0xFFFF0000;
    HIDWORD(v76) = v86 & 0xFF000000;
    v77 = (unsigned __int16)v86 & 0xFF00;
  }
  WTF::AtomStringImpl::addLiteral();
  v45 = v86;
  v47 = (JSC::JSCell *)JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v86);
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v46);
    else
      *(_DWORD *)v45 -= 2;
  }
  if (*((_DWORD *)v84 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v84);
    if ((_DWORD)result)
      goto LABEL_66;
  }
  v75 = v10;
  v73 = v32;
  v74 = v26;
  v72 = v40;
  if (v47 == (JSC::JSCell *)10)
  {
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 7;
  }
  else
  {
    result = WebCore::convertDictionary<WebCore::GPUStencilFaceState>(v47, (unint64_t)a2, (int *)&v86);
    if (HIDWORD(v86))
      goto LABEL_66;
    v50 = v86 & 0xFF000000;
    v49 = v86 & 0xFF0000;
    v48 = (unsigned __int16)v86 & 0xFF00;
    v51 = v86;
  }
  WTF::AtomStringImpl::addLiteral();
  v52 = v86;
  v54 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v86);
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, v53);
    else
      *(_DWORD *)v52 -= 2;
  }
  if (*((_DWORD *)v84 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v84);
    if ((_DWORD)result)
      goto LABEL_66;
  }
  if (v54 == 10)
  {
    v55 = -1;
  }
  else
  {
    result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v54, &v86);
    v55 = (int)v86;
    if ((unint64_t)v86 >> 32)
      goto LABEL_66;
  }
  WTF::AtomStringImpl::addLiteral();
  v56 = v86;
  v58 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v86);
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, v57);
    else
      *(_DWORD *)v56 -= 2;
  }
  result = (uint64_t)v84;
  if (*((_DWORD *)v84 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v84);
    if ((_DWORD)result)
      goto LABEL_66;
  }
  if (v58 == 10)
  {
    v59 = -1;
  }
  else
  {
    result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v58, &v86);
    v59 = (int)v86;
    if ((unint64_t)v86 >> 32)
      goto LABEL_66;
  }
  *(_BYTE *)a3 = v72;
  *(_WORD *)(a3 + 1) = v73;
  *(_WORD *)(a3 + 3) = v74;
  *(_DWORD *)(a3 + 5) = v48 | v51 | v49 | v50;
  *(_DWORD *)(a3 + 9) = v77 & 0xFF00 | v44 | v76 & 0xFF0000 | HIDWORD(v76);
  *(_WORD *)(a3 + 13) = v82;
  *(_BYTE *)(a3 + 15) = v83;
  *(_DWORD *)(a3 + 16) = v55;
  *(_BYTE *)(a3 + 20) = 1;
  *(_WORD *)(a3 + 21) = v80;
  *(_BYTE *)(a3 + 23) = v81;
  *(_DWORD *)(a3 + 24) = v59;
  *(_BYTE *)(a3 + 28) = 1;
  *(_BYTE *)(a3 + 31) = v79;
  *(_WORD *)(a3 + 29) = v78;
  *(_DWORD *)(a3 + 32) = v75;
  *(float *)(a3 + 36) = v20;
  *(float *)(a3 + 40) = v14;
  *(_DWORD *)(a3 + 44) = 0;
  return result;
}

uint64_t WebCore::JSGPUDevice::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 32);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUDevicePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUDevicePrototype::create(WebCore::JSGPUDevicePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  JSC::Structure *v17;
  int v18;
  unint64_t v20;
  WTF::StringImpl *v21[6];
  int v22;
  int v23;
  JSC::Structure *v24;
  int v25;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v20);
    *((_QWORD *)this + 4865) = SlowCase + (int)v20;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<24u>(this, (uint64_t)&WebCore::JSGPUDevice::s_info, (uint64_t)&WebCore::JSGPUDevicePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v10 = v21[0];
    v11 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v21[0]) = -1;
    WORD2(v21[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v11;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v12);
      else
        *(_DWORD *)v10 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v13 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = JSC::JSString::create((uint64_t)this, v21);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v25 = *(_DWORD *)SlowCase;
  v24 = v17;
  v18 = JSC::Structure::outOfLineCapacity(v17);
  v22 = 0;
  v23 = v18;
  v21[0] = (WTF::StringImpl *)&v23;
  v21[1] = (WTF::StringImpl *)SlowCase;
  v21[2] = this;
  v21[3] = (WTF::StringImpl *)&v25;
  v21[4] = (WTF::StringImpl *)&v24;
  v21[5] = (WTF::StringImpl *)&v22;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v17, this, v13, 6, (uint64_t)v21);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v22, v15);
  *((_DWORD *)v17 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUDevice>,(WebCore::DOMConstructorID)22>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 176);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUDevice>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSGPUDevice::s_info + ~((_QWORD)&WebCore::JSGPUDevice::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUDevice::s_info + ~((_QWORD)&WebCore::JSGPUDevice::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSGPUDevice::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSGPUDevice::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSGPUDevicePrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSGPUDevicePrototype::create((WebCore::JSGPUDevicePrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSGPUDevice::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSGPUDevice::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 176) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUDeviceConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUDevicePrototype::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUDevice>,(WebCore::DOMConstructorID)22>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsGPUDevice_features(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  WTF *v5;
  unint64_t v6;
  WTF::StringImpl *v7;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 40);
  ++*v4;
  v5 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *((_QWORD *)v5 + 1) = v4;
  v6 = WebCore::toJS(a1, v3, v5);
  WTF::RefCounted<WebCore::GPUSupportedFeatures>::deref(v5, v7);
  return v6;
}

unint64_t WebCore::jsGPUDevice_limits(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  WTF *v5;
  void *v6;
  unint64_t v7;
  WTF *v9;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 48);
  ++*v4;
  v5 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *((_QWORD *)v5 + 1) = v4;
  v7 = WebCore::wrap<WebCore::GPUSupportedLimits>(a1, v3, v5);
  if (*(_DWORD *)v5 == 1)
  {
    v9 = (WTF *)*((_QWORD *)v5 + 1);
    *((_QWORD *)v5 + 1) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
        WTF::fastFree(v9, v6);
      else
        --*(_DWORD *)v9;
    }
    WTF::fastFree(v5, v6);
  }
  else
  {
    --*(_DWORD *)v5;
  }
  return v7;
}

unint64_t WebCore::jsGPUDevice_queue(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  WTF *v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  _DWORD *v52;
  unint64_t v53;
  _QWORD *v54;
  WTF *v55;

  v2 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v3 = *(WTF **)(a2[3] + 40);
  v4 = (*(_DWORD *)v3)++;
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == v3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            goto LABEL_52;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == v3)
          goto LABEL_6;
      }
    }
  }
  *(_DWORD *)v3 = v4 + 2;
  v15 = *(_QWORD *)(v2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSGPUQueue::s_info + ~((_QWORD)&WebCore::JSGPUQueue::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUQueue::s_info + ~((_QWORD)&WebCore::JSGPUQueue::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSGPUQueue::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSGPUQueue::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(v2 + 56);
  Structure = WebCore::JSGPUQueuePrototype::createStructure(v24, v2, *(JSC::JSCell **)(v2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUQueuePrototype::create((WebCore::JSGPUQueuePrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSGPUQueue::createStructure(v24, v2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)v2, v29, (uint64_t)&WebCore::JSGPUQueue::s_info);
LABEL_16:
  v30 = *(_QWORD *)(v2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 248);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 248))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v55, "IsoSpace T");
    v54 = 0;
    MEMORY[0x19AEA3204](v37, &v55, v30 + 192, v30 + 1872, 32, 8, &v54);
    v39 = (uint64_t)v54;
    v54 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v55;
    v55 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 248);
    *(_QWORD *)(v36 + 248) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 248);
  *(_QWORD *)(v32 + 248) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v53 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v53);
    v33[5] = SlowCase + (int)v53;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = v3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(v2 + 3320);
  if ((byte_1EE335890 & 1) == 0)
  {
    qword_1EE335888 = (uint64_t)&off_1E3282810;
    byte_1EE335890 = 1;
  }
  v55 = v3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335888;
  Allocator[2] = v47;
  v54 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v55, (uint64_t *)&v54);
  if (v54)
    v54[1] = 3;
  v4 = *(_DWORD *)v3 - 1;
LABEL_52:
  if (v4)
  {
    *(_DWORD *)v3 = v4;
  }
  else
  {
    v52 = (_DWORD *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v52)
    {
      if (v52[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
      else
        --v52[2];
    }
    WTF::fastFree(v3, a2);
  }
  return SlowCase;
}

uint64_t WebCore::jsGPUDevice_lost(JSC::JSGlobalObject *a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  JSC::Structure *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  JSC::VM *v24;
  unint64_t v25;
  uint64_t v26;
  WebCore::DOMGuardedObject *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  int v39;
  char v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v47;
  WTF::StringImpl *v48;
  objc_class *v49;

  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v5 = (char **)(16 * v3);
    if ((_DWORD)v3)
      v6 = v5 == &WebCore::JSGPUDevice::s_info;
    else
      v6 = 1;
    if (!v6)
    {
      do
      {
        v5 = (char **)v5[2];
        v4 = v5 != 0;
      }
      while (v5 != &WebCore::JSGPUDevice::s_info && v5 != 0);
    }
    if (v4)
    {
      v8 = *(_QWORD *)(a2 + 24);
      v9 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
      if (!*(_BYTE *)(v8 + 88))
      {
        *(_BYTE *)(v8 + 88) = 1;
        v10 = *(_QWORD *)(v8 + 32);
        v11 = (unsigned int *)WTF::WeakPtr<WebCore::GPUDevice,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::GPUDevice>(v8 - 32);
        v12 = v11;
        if (v11)
        {
          do
            v13 = __ldaxr(v11);
          while (__stlxr(v13 + 1, v11));
        }
        v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v14 = &off_1E334DED8;
        v14[1] = v12;
        v47 = v14;
        (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v10 + 176))(v10, &v47);
        v15 = v47;
        v47 = 0;
        if (v15)
          (*(void (**)(_QWORD *))(*v15 + 8))(v15);
      }
      v16 = *(char **)(v8 + 24);
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v18 = off_1E32839B0;
      v18[1] = v16;
      v19 = *((unsigned int *)v16 + 11);
      if ((_DWORD)v19)
      {
        v20 = *((_QWORD *)v16 + 4);
        v21 = 8 * v19;
        while (1)
        {
          v22 = *(_QWORD *)(*(_QWORD *)v20 + 32);
          if (v22)
          {
            if ((*(_BYTE *)(v22 + 8) & 3) == 0 && *(_QWORD *)v22 == v9)
              break;
          }
          v20 += 8;
          v21 -= 8;
          if (!v21)
            goto LABEL_23;
        }
        v35 = *(_QWORD *)(*(_QWORD *)v20 + 24);
        if (v35 && (v36 = *(_QWORD *)v35) != 0 && (*(_BYTE *)(v35 + 8) & 3) == 0)
        {
          if ((v36 & 0xFFFE000000000002) != 0)
          {
            v37 = 0;
          }
          else if (*(_BYTE *)(v36 + 5) == 68)
          {
            v37 = *(_QWORD *)v35;
          }
          else
          {
            v37 = 0;
          }
        }
        else
        {
          v37 = 10;
        }
        goto LABEL_66;
      }
LABEL_23:
      v23 = *(_DWORD *)(v9 + 1164);
      if (v23)
        v24 = (JSC::VM *)(16 * (v23 & 0xFFFFFFFE));
      else
        v24 = 0;
      v25 = JSC::JSPromise::create(*(JSC::JSPromise **)(v9 + 56), v24, v17);
      v26 = WTF::fastMalloc((WTF *)0x30);
      v27 = WebCore::DOMGuardedObject::DOMGuardedObject((WebCore::DOMGuardedObject *)v26, v9, v25);
      *(_QWORD *)v27 = &off_1E3226868;
      *((_DWORD *)v27 + 10) = 1;
      *((_BYTE *)v27 + 44) = 0;
      v28 = *((unsigned int *)v16 + 11);
      if ((_DWORD)v28 == *((_DWORD *)v16 + 10))
      {
        v29 = v28 + (v28 >> 2);
        if (v29 >= 0x10)
          v30 = v29 + 1;
        else
          v30 = 16;
        if (v30 <= v28 + 1)
          v31 = v28 + 1;
        else
          v31 = v30;
        v32 = (char *)*((_QWORD *)v16 + 4);
        if (v31 < 2)
        {
          v33 = v16 + 48;
          *((_QWORD *)v16 + 4) = v16 + 48;
          *((_DWORD *)v16 + 10) = 1;
        }
        else
        {
          if (v31 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x194B61160);
          }
          v33 = (void *)WTF::fastMalloc((WTF *)(8 * v31));
          *((_DWORD *)v16 + 10) = v31;
          *((_QWORD *)v16 + 4) = v33;
        }
        memcpy(v33, v32, 8 * v28);
        if (v16 + 48 != v32 && v32)
        {
          if (*((char **)v16 + 4) == v32)
          {
            *((_QWORD *)v16 + 4) = 0;
            *((_DWORD *)v16 + 10) = 0;
          }
          WTF::fastFree((WTF *)v32, v38);
        }
        v28 = *((unsigned int *)v16 + 11);
        v34 = (uint64_t *)(*((_QWORD *)v16 + 4) + 8 * v28);
      }
      else
      {
        v34 = (uint64_t *)(*((_QWORD *)v16 + 4) + 8 * v28);
      }
      ++*(_DWORD *)(v26 + 16);
      *v34 = v26;
      *((_DWORD *)v16 + 11) = v28 + 1;
      if (!v16[24])
        goto LABEL_56;
      v39 = *((_DWORD *)v16 + 4);
      if (!v39)
      {
        (*(void (**)(_QWORD *, uint64_t))(*v18 + 16))(v18, v26);
        goto LABEL_56;
      }
      if (v39 != 1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_81;
      }
      v40 = *v16;
      v41 = (WTF::StringImpl *)*((_QWORD *)v16 + 1);
      if (v41)
        *(_DWORD *)v41 += 4;
      v48 = v41;
      v49 = 0;
      LOBYTE(v47) = v40;
      WebCore::DeferredPromise::reject(v26, (unsigned __int8 *)&v47, 0, &v49);
      v43 = v48;
      v48 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
        {
          WTF::StringImpl::destroy(v43, v42);
          if (v41)
          {
LABEL_53:
            if (*(_DWORD *)v41 == 2)
              WTF::StringImpl::destroy(v41, v42);
            else
              *(_DWORD *)v41 -= 2;
          }
LABEL_56:
          v44 = *(_QWORD *)(v26 + 24);
          if (!v44 || (v45 = *(_QWORD *)v44) == 0 || (*(_BYTE *)(v44 + 8) & 3) != 0)
          {
            v37 = 10;
            goto LABEL_64;
          }
          if ((v45 & 0xFFFE000000000002) == 0)
          {
            if (*(_BYTE *)(v45 + 5) == 68)
              v37 = *(_QWORD *)v44;
            else
              v37 = 0;
            goto LABEL_64;
          }
LABEL_81:
          v37 = 0;
LABEL_64:
          if (*(_DWORD *)(v26 + 16) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
          else
            --*(_DWORD *)(v26 + 16);
LABEL_66:
          (*(void (**)(_QWORD *))(*v18 + 8))(v18);
          return v37;
        }
        *(_DWORD *)v43 -= 2;
      }
      if (v41)
        goto LABEL_53;
      goto LABEL_56;
    }
  }
  return WebCore::rejectPromiseWithGetterTypeError(a1, (JSC **)&WebCore::JSGPUDevice::s_info, a3);
}

uint64_t WebCore::jsGPUDevice_label(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 32) + 24);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

BOOL WebCore::setJSGPUDevice_label(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  int v17;
  char v18;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSGPUDevice::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSGPUDevice::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v16);
  v10 = v17;
  v11 = v17 == 0;
  if (!v17)
  {
    v12 = v16;
    v16 = 0;
    v13 = *(_QWORD **)(v8 + 32);
    v14 = (WTF::StringImpl *)v13[3];
    v13[3] = v12;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    (*(void (**)(_QWORD *, _QWORD *))(*v13 + 184))(v13, v13 + 3);
    v10 = v17;
  }
  if (v10 != -1)
    ((void (*)(char *, uint64_t *))off_1E3282908[v10])(&v18, &v16);
  return v11;
}

uint64_t WebCore::JSGPUDeviceOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 24);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 16)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 32) + 64))(v5 - 32), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::JSGPUDeviceOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  result = v3 - 32;
  v5 = *(_DWORD *)(v3 - 8);
  *(_DWORD *)(v3 - 8) = v5 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v9 = *(_QWORD *)(a3 + 32);
    v7 = (uint64_t *)(a3 + 32);
    v8 = v9;
    if (v9)
    {
      v10 = *(_DWORD *)(v8 - 8);
      v11 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(_QWORD *)(v8 + 16 * v14);
      if (v15 != result)
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(_QWORD *)(v8 + 16 * v14);
          ++v16;
          if (v15 == result)
            goto LABEL_12;
        }
        v14 = *(unsigned int *)(v8 - 4);
      }
LABEL_12:
      if (v14 != *(_DWORD *)(v8 - 4))
      {
        v17 = (_QWORD *)(v8 + 16 * v14);
        *v17 = -1;
        v20 = v17[1];
        v19 = v17 + 1;
        v18 = v20;
        if (v20)
        {
          *(_QWORD *)(v18 + 8) = 3;
          *v19 = 0;
        }
        ++*(_DWORD *)(*v7 - 16);
        v21 = *v7;
        if (*v7)
          v22 = *(_DWORD *)(v21 - 12) - 1;
        else
          v22 = -1;
        *(_DWORD *)(v21 - 12) = v22;
        v23 = *v7;
        if (*v7)
        {
          v24 = 6 * *(_DWORD *)(v23 - 12);
          v25 = *(_DWORD *)(v23 - 4);
          if (v24 < v25 && v25 >= 9)
          {
            v27 = v3;
            v28 = v3 - 32;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v7, v25 >> 1, 0);
            v3 = v27;
            result = v28;
          }
        }
      }
    }
    v5 = *(_DWORD *)(v3 - 8) - 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  if (!v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  *(_DWORD *)(v3 - 8) = v5;
  return result;
}

unint64_t WebCore::wrap<WebCore::GPUDevice>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSEventTarget *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *Allocator;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  WTF *v62;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v51 = *(_QWORD *)(v5 + 32);
    if (!v51)
      goto LABEL_5;
    v52 = *(_DWORD *)(v51 - 8);
    v53 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
    v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
    v56 = v52 & ((v55 >> 31) ^ v55);
    v57 = *(_QWORD *)(v51 + 16 * v56);
    if (v57 != a3)
    {
      v58 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v58) & v52;
        v57 = *(_QWORD *)(v51 + 16 * v56);
        ++v58;
        if (v57 == a3)
          goto LABEL_66;
      }
      goto LABEL_5;
    }
LABEL_66:
    v6 = *(_QWORD *)(v51 + 16 * v56 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 40);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E334E070)
  {
    __break(0xC471u);
    JUMPOUT(0x194B61A54);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSGPUDevice::s_info + ~((_QWORD)&WebCore::JSGPUDevice::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUDevice::s_info + ~((_QWORD)&WebCore::JSGPUDevice::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSGPUDevice::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSGPUDevice::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v17, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSGPUDevicePrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSGPUDevicePrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSGPUDevice::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSGPUDevice::s_info);
LABEL_13:
  v24 = *((_QWORD *)a2 + 7);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 176);
  if (v27)
    goto LABEL_36;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_18:
  v30 = *(_QWORD *)(v28 + 2824);
  v60 = *(_QWORD *)(v30 + 176);
  if (!v60)
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v62, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v62, v24 + 192, v24 + 1872, 32, 8, &v61);
    v33 = (uint64_t)v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v62;
    v62 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v60 = v31;
    v35 = *(_QWORD *)(v30 + 176);
    *(_QWORD *)(v30 + 176) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *(unsigned int *)(v28 + 2844);
    if ((_DWORD)v36 == *(_DWORD *)(v28 + 2840))
    {
      v37 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28 + 2832, v36 + 1, (unint64_t)&v60);
      v36 = *(unsigned int *)(v28 + 2844);
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = *v37;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = v31;
    }
    *(_DWORD *)(v28 + 2844) = v36 + 1;
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v38 = *(_QWORD *)(v26 + 176);
  *(_QWORD *)(v26 + 176) = v27;
  if (v38)
  {
    v39 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v39, v40);
  }
  v41 = __ldxr((unsigned __int8 *)v28);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_36:
  SlowCase = v27[3];
  if (SlowCase < v27[4])
  {
LABEL_37:
    v27[3] = SlowCase + 32;
    goto LABEL_38;
  }
  SlowCase = v27[5];
  if ((SlowCase & 1) == 0)
  {
    v59 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v59);
    v27[5] = SlowCase + (int)v59;
    goto LABEL_37;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3 + 32;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v42 = *((_QWORD *)a2 + 415);
  if ((byte_1EE335820 & 1) == 0)
  {
    qword_1EE335818 = (uint64_t)&off_1E32826C0;
    byte_1EE335820 = 1;
  }
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v43 = (SlowCase - 112) | 1;
    else
      v43 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE335818;
    Allocator[2] = v42;
    v46 = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 40) = Allocator;
    if (!v46)
      return SlowCase;
LABEL_60:
    *(_QWORD *)(v46 + 8) = 3;
    return SlowCase;
  }
  v62 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  v50 = *(_QWORD **)(v49 + 16);
  if (!v50)
    v50 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *v50;
  *v50 = SlowCase;
  v50[1] = &qword_1EE335818;
  v50[2] = v42;
  v61 = v50;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v62, (uint64_t *)&v61);
  v46 = (uint64_t)v61;
  if (v61)
    goto LABEL_60;
  return SlowCase;
}

WTF::StringImpl *WebCore::convertDictionary<WebCore::GPUDeviceDescriptor>@<X0>(JSC::JSCell *this@<X1>, WTF::StringImpl *result@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  uint64_t v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  WTF::StringImpl *v11;
  uint64_t Object;
  JSC::Structure *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  JSC::JSCell *v19;
  JSC::Structure *v20;
  WTF::StringImpl *v21;
  JSC::VM *v22;
  uint64_t v23;
  JSC::Structure *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  JSValue v33;
  unsigned int v34;
  unsigned int i;
  unsigned int v36;
  unint64_t IndexQuickly;
  JSC::VM *v38;
  unsigned __int16 v39;
  char *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  unint64_t v50;
  JSC::VM *v51;
  unsigned __int16 v52;
  int v53;
  char *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  int v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  int v66;
  uint64_t *v67;
  _QWORD *v68;
  uint64_t v69;
  WTF::StringImpl **v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  WTF *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  WTF *v79;
  uint64_t v80;
  WTF::StringImpl **v81;
  uint64_t v82;
  WTF::StringImpl **v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF *v86;
  uint64_t v88;
  unint64_t v89;
  int v90;
  void *v91;
  int v92;
  int v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  JSC::Structure *v101;
  JSC::VM *v102;
  uint64_t v103;
  WTF *v104;
  uint64_t v105;
  int v106;
  JSC::VM *v107;
  uint64_t v108;
  int v109;
  JSC::VM *v110;
  WTF::StringImpl *v111[2];
  WTF::StringImpl *v112;
  int v113;
  WTF::StringImpl *v114;
  uint64_t v115;
  unint64_t v116;
  WTF::StringImpl *v117;
  uint64_t v118;
  uint64_t v119;
  __int16 v120;
  __int16 v121;
  char v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  JSC::VM *v129;
  __int16 v130;
  WTF *v131;
  uint64_t v132;
  JSC::VM *v133;

  v4 = (JSC::VM *)*((_QWORD *)result + 7);
  v110 = v4;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    LODWORD(v5) = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v107 = 0;
    v108 = 0;
    v109 = 0;
LABEL_99:
    v57 = 0;
    goto LABEL_100;
  }
  v11 = result;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = (WTF::StringImpl *)JSC::throwTypeError();
LABEL_205:
    *(_DWORD *)(a3 + 48) = 1;
    return result;
  }
  v13 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v15 = JSC::JSObject::get(v13, v11, (unint64_t)v114);
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
      WTF::StringImpl::destroy(v114, v14);
    else
      *(_DWORD *)v114 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = (WTF::StringImpl *)JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_205;
  }
  if (v15 == 10)
  {
    v8 = 0;
  }
  else
  {
    result = (WTF::StringImpl *)WebCore::valueToUSVString(v11, v15, (uint64_t)&v114);
    v16 = v115;
    if ((_DWORD)v115)
    {
      *(_DWORD *)(a3 + 48) = 1;
      if ((_DWORD)v16 != -1)
        return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, WTF::StringImpl **))off_1E3282908[v16])(&v127, &v114);
      return result;
    }
    v8 = v114;
    v114 = 0;
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)&v127, (WTF::StringImpl *)&v114);
  }
  WTF::AtomStringImpl::addLiteral();
  v17 = v114;
  result = (WTF::StringImpl *)JSC::JSObject::get(v13, v11, (unint64_t)v114);
  v19 = result;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v17, v18);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = (WTF::StringImpl *)JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
    {
      *(_DWORD *)(a3 + 48) = 1;
      goto LABEL_108;
    }
  }
  if (v19 == (JSC::JSCell *)10)
  {
    v9 = 0;
    goto LABEL_32;
  }
  v20 = v13;
  v21 = v8;
  v22 = (JSC::VM *)*((_QWORD *)v11 + 7);
  v107 = v22;
  if (((unint64_t)v19 & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_27;
  if (((unint64_t)v19 & 0xFFFE000000000002) != 0 || (v23 = JSC::JSCell::getObject(v19)) == 0)
  {
    JSC::throwTypeError();
LABEL_211:
    LODWORD(v128) = 1;
LABEL_212:
    v90 = 1;
    *(_DWORD *)(a3 + 48) = 1;
    v8 = v21;
LABEL_213:
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1E3282F28[v90])(&v114, &v127);
    goto LABEL_108;
  }
  v24 = (JSC::Structure *)v23;
  WTF::AtomStringImpl::addLiteral();
  v25 = v114;
  result = (WTF::StringImpl *)JSC::JSObject::get(v24, v11, (unint64_t)v114);
  v27 = result;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v25, v26);
    else
      *(_DWORD *)v25 -= 2;
  }
  if (*((_DWORD *)v22 + 20))
  {
    result = (WTF::StringImpl *)JSC::VM::hasExceptionsAfterHandlingTraps(v22);
    if ((_DWORD)result)
      goto LABEL_211;
  }
  if (v27 == (WTF::StringImpl *)10)
  {
LABEL_27:
    v28 = 0;
    v8 = v21;
LABEL_30:
    v127 = (uint64_t)v28;
    LODWORD(v128) = 0;
    v13 = v20;
    goto LABEL_31;
  }
  result = (WTF::StringImpl *)WebCore::valueToUSVString(v11, (uint64_t)v27, (uint64_t)&v114);
  if (!(_DWORD)v115)
  {
    v8 = v21;
    v28 = v114;
    goto LABEL_30;
  }
  LODWORD(v128) = 1;
  if ((_DWORD)v115 == -1)
    goto LABEL_212;
  result = (WTF::StringImpl *)((uint64_t (*)(WTF **, WTF::StringImpl **))off_1E3282908[v115])(&v104, &v114);
  v90 = v128;
  v8 = v21;
  v13 = v20;
  if ((_DWORD)v128)
  {
    *(_DWORD *)(a3 + 48) = 1;
    if (v90 == -1)
      goto LABEL_108;
    goto LABEL_213;
  }
LABEL_31:
  v9 = (WTF::StringImpl *)v127;
  v127 = 0;
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18GPUQueueDescriptorENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_((uint64_t)result, (WTF::StringImpl *)&v127);
LABEL_32:
  WTF::AtomStringImpl::addLiteral();
  v29 = v114;
  v31 = JSC::JSObject::get(v13, v11, (unint64_t)v114);
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v30);
    else
      *(_DWORD *)v29 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = (WTF::StringImpl *)JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
    {
      v7 = 0;
      *(_DWORD *)(a3 + 48) = 1;
      if (v9)
        goto LABEL_104;
      goto LABEL_106;
    }
  }
  if (v31 != 10)
  {
    v99 = v9;
    v32 = *((_QWORD *)v11 + 7);
    v104 = (WTF *)v32;
    if ((v31 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v31 + 5) <= 0x16u)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSC::throwTypeError();
      v42 = v114;
      v114 = 0;
      v9 = v99;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v41);
        else
          *(_DWORD *)v42 -= 2;
      }
      v109 = 1;
      goto LABEL_66;
    }
    v114 = 0;
    v115 = 0;
    v101 = v13;
    if (JSC::getIterationMode() == 2)
    {
      v94 = v8;
      v7 = 0;
      v34 = 0;
      for (i = 1; ; ++i)
      {
        if ((*(_BYTE *)(v31 + 4) & 0xE) != 0)
          v36 = *(_DWORD *)(*(_QWORD *)(v31 + 8) - 8);
        else
          v36 = 0;
        if (i - 1 >= v36)
          goto LABEL_88;
        IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v31, i - 1, 0);
        if (!IndexQuickly)
          IndexQuickly = JSC::JSObject::get((JSC::JSObject *)v31, v11, i - 1);
        if (*(_DWORD *)(v32 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v32) & 1) != 0)
        {
LABEL_88:
          LODWORD(v5) = v34;
          v8 = v94;
          goto LABEL_89;
        }
        v127 = *((_QWORD *)v11 + 7);
        v38 = (JSC::VM *)v127;
        v39 = WebCore::parseEnumeration<WebCore::GPUFeatureName>(v11, IndexQuickly);
        if (!*((_DWORD *)v38 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v38) & 1) == 0)
        {
          if (v39 <= 0xFFu)
          {
            JSC::throwTypeError();
          }
          else
          {
            LOBYTE(v127) = v39;
            if (v34 == (_DWORD)v115)
            {
              v40 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v114, (WTF *)(v34 + 1), (unint64_t)&v127);
              v34 = HIDWORD(v115);
              v7 = v114;
              *((_BYTE *)v114 + HIDWORD(v115)) = *v40;
            }
            else
            {
              *((_BYTE *)v7 + v34) = v39;
            }
            HIDWORD(v115) = ++v34;
          }
        }
        if (*(_QWORD *)(v32 + 16))
          break;
      }
      v88 = JSC::JSArrayIterator::create();
      if ((i & 0x80000000) != 0)
        v89 = COERCE__INT64((double)i) + 0x2000000000000;
      else
        v89 = i | 0xFFFE000000000000;
      *(_QWORD *)(v88 + 16) = v89;
      v13 = v101;
LABEL_209:
      JSC::iteratorClose();
      LODWORD(v5) = v34;
      v8 = v94;
      goto LABEL_90;
    }
    v44 = JSC::iteratorForIterable(v11, (JSC::JSGlobalObject *)v31, v33);
    v46 = v45;
    if (*(_DWORD *)(v32 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v32) & 1) != 0)
    {
      v7 = 0;
      LODWORD(v5) = 0;
LABEL_90:
      if (!*(_DWORD *)(v32 + 80))
      {
        v7 = v114;
LABEL_92:
        v6 = v115;
        v109 = 0;
        v107 = 0;
        v108 = 0;
        v9 = v99;
        goto LABEL_93;
      }
      if (!JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v32))
        goto LABEL_92;
      v109 = 1;
      if (v7)
      {
        v114 = 0;
        LODWORD(v115) = 0;
        WTF::fastFree(v7, v91);
      }
      v9 = v99;
LABEL_66:
      v7 = 0;
      v43 = 1;
      *(_DWORD *)(a3 + 48) = 1;
      goto LABEL_102;
    }
    v7 = 0;
    v5 = 0;
    while (1)
    {
      v47 = JSC::iteratorStep();
      if (*(_QWORD *)(v32 + 16))
        v48 = 1;
      else
        v48 = v47 == 6;
      if (v48)
        goto LABEL_90;
      v96 = v46;
      v98 = v44;
      v49 = v5;
      v50 = JSC::iteratorValue();
      if (*(_DWORD *)(v32 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v32) & 1) != 0)
      {
LABEL_89:
        v13 = v101;
        goto LABEL_90;
      }
      v127 = *((_QWORD *)v11 + 7);
      v51 = (JSC::VM *)v127;
      v52 = WebCore::parseEnumeration<WebCore::GPUFeatureName>(v11, v50);
      if (!*((_DWORD *)v51 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v51) & 1) == 0)
      {
        if (v52 > 0xFFu)
        {
          LOBYTE(v127) = v52;
          v53 = v49;
          if ((_DWORD)v49 == (_DWORD)v115)
          {
            v54 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v114, (WTF *)(v49 + 1), (unint64_t)&v127);
            v53 = HIDWORD(v115);
            v7 = v114;
            *((_BYTE *)v114 + HIDWORD(v115)) = *v54;
          }
          else
          {
            *((_BYTE *)v7 + v49) = v52;
          }
          v13 = v101;
          v46 = v96;
          v44 = v98;
          v5 = (v53 + 1);
          HIDWORD(v115) = v5;
          goto LABEL_80;
        }
        JSC::throwTypeError();
      }
      v5 = v49;
      v13 = v101;
      v46 = v96;
      v44 = v98;
LABEL_80:
      if (*(_QWORD *)(v32 + 16))
      {
        v94 = v8;
        v34 = v5;
        goto LABEL_209;
      }
    }
  }
  LODWORD(v5) = 0;
  v6 = 0;
  v7 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
LABEL_93:
  WTF::AtomStringImpl::addLiteral();
  v55 = v114;
  result = (WTF::StringImpl *)JSC::JSObject::get(v13, v11, (unint64_t)v114);
  v56 = result;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v55, this);
    else
      *(_DWORD *)v55 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = (WTF::StringImpl *)JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
    {
      *(_DWORD *)(a3 + 48) = 1;
      goto LABEL_101;
    }
  }
  if (v56 == (WTF::StringImpl *)10)
  {
    v10 = 0;
    goto LABEL_99;
  }
  v102 = (JSC::VM *)*((_QWORD *)v11 + 7);
  v133 = v102;
  if (((unint64_t)v56 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v104 = 0;
    v105 = 0;
    v106 = 0;
    goto LABEL_188;
  }
  if (((unint64_t)v56 & 0xFFFE000000000002) != 0 || *((unsigned __int8 *)v56 + 5) <= 0x16u)
  {
    JSC::throwTypeError();
    v74 = 1;
    v106 = 1;
    *(_DWORD *)(a3 + 48) = 1;
    goto LABEL_164;
  }
  v131 = 0;
  v132 = 0;
  v58 = WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)v58 = 1;
  *(_QWORD *)(v58 + 8) = v58 + 24;
  *(_QWORD *)(v58 + 16) = 20;
  v127 = v58;
  v128 = 0;
  v129 = v102;
  v130 = 259;
  result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *, uint64_t *, _QWORD))(16 * *(unsigned int *)(16 * (*(_DWORD *)v56 & 0xFFFFFFFE) + 0x4C) + 0x78))(v56, v11, &v127, 0);
  if (*((_DWORD *)v102 + 20))
  {
    result = (WTF::StringImpl *)JSC::VM::hasExceptionsAfterHandlingTraps(v102);
    if ((_DWORD)result)
    {
      v106 = 1;
      goto LABEL_172;
    }
  }
  v59 = *(unsigned int *)(v127 + 20);
  if (!(_DWORD)v59)
  {
    v75 = 0;
    v76 = 0;
LABEL_171:
    v131 = 0;
    v104 = v75;
    HIDWORD(v132) = 0;
    v105 = v76;
    v106 = 0;
    goto LABEL_172;
  }
  v93 = v5;
  v95 = v8;
  v60 = *(unint64_t **)(v127 + 8);
  v100 = v9;
  v61 = 8 * v59;
  v97 = v6;
  while (1)
  {
    v116 = 0xFFFFFFFF00000000;
    v117 = v56;
    v118 = 0;
    v119 = 0;
    v120 = 0;
    v121 = 2;
    v122 = 0;
    LOBYTE(v123) = 0;
    v124 = 0;
    v125 = 0;
    v126 = 0;
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v56 & 0xFFFFFFFE) + 0x4C) + 0x68))(v56, v11, *v60, &v114);
    v62 = (int)result;
    if (*((_DWORD *)v102 + 20))
    {
      result = (WTF::StringImpl *)JSC::VM::hasExceptionsAfterHandlingTraps(v102);
      if ((_DWORD)result)
        break;
    }
    if (!v62 || (v116 & 4) != 0)
      goto LABEL_142;
    v63 = (WTF::StringImpl *)*v60;
    if (*v60)
    {
      if ((*((_BYTE *)v63 + 16) & 0x20) != 0)
      {
        v112 = (WTF::StringImpl *)*((_QWORD *)v11 + 7);
        JSC::throwTypeError();
        v63 = 0;
      }
      else
      {
        *(_DWORD *)v63 += 2;
      }
    }
    if (*((_DWORD *)v102 + 20))
    {
      result = (WTF::StringImpl *)JSC::VM::hasExceptionsAfterHandlingTraps(v102);
      if ((_DWORD)result)
      {
        v71 = 1;
        v106 = 1;
        goto LABEL_138;
      }
    }
    if (v122)
    {
      v73 = JSC::JSObject::get(v56, v11, *v60);
    }
    else
    {
      if (HIBYTE(v120) == 1)
      {
        v64 = v114;
        goto LABEL_129;
      }
      if (HIBYTE(v120) == 2)
        v73 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v114, v11);
      else
        v73 = JSC::PropertySlot::customGetter();
    }
    v64 = (WTF::StringImpl *)v73;
LABEL_129:
    if (*((_DWORD *)v102 + 20)
      && (result = (WTF::StringImpl *)JSC::VM::hasExceptionsAfterHandlingTraps(v102), (_DWORD)result)
      || (result = WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(v11, (unint64_t)v64, (uint64_t)&v112), v113))
    {
      v71 = 1;
      v106 = 1;
      v6 = v97;
    }
    else
    {
      v65 = v112;
      v111[0] = v63;
      v111[1] = v112;
      v66 = HIDWORD(v132);
      v6 = v97;
      if (HIDWORD(v132) == (_DWORD)v132)
      {
        v67 = (uint64_t *)WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v131, HIDWORD(v132) + 1, (unint64_t)v111);
        v66 = HIDWORD(v132);
        v68 = (_QWORD *)((char *)v131 + 16 * HIDWORD(v132));
        v69 = *v67;
        *v67 = 0;
        *v68 = v69;
        v68[1] = v67[1];
      }
      else
      {
        v111[0] = 0;
        v70 = (WTF::StringImpl **)((char *)v131 + 16 * HIDWORD(v132));
        *v70 = v63;
        v70[1] = v65;
      }
      HIDWORD(v132) = v66 + 1;
      result = v111[0];
      v111[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, this);
        else
          *(_DWORD *)result -= 2;
      }
      v63 = 0;
      v71 = 0;
    }
LABEL_138:
    if (v63)
    {
      if (*(_DWORD *)v63 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v63, this);
      else
        *(_DWORD *)v63 -= 2;
    }
    v9 = v100;
    if (v71)
      goto LABEL_240;
LABEL_142:
    if (v124)
    {
      v72 = *(_DWORD *)(v123 + 4);
      if (!v72)
      {
        __break(0xC471u);
        JUMPOUT(0x194B627D0);
      }
      *(_DWORD *)(v123 + 4) = v72 - 1;
    }
    ++v60;
    v61 -= 8;
    if (!v61)
    {
      v75 = v131;
      v76 = v132;
      LODWORD(v5) = v93;
      v8 = v95;
      goto LABEL_171;
    }
  }
  v106 = 1;
LABEL_240:
  LODWORD(v5) = v93;
  v8 = v95;
  if (v124)
  {
    v92 = *(_DWORD *)(v123 + 4);
    if (!v92)
    {
      __break(0xC471u);
      JUMPOUT(0x194B6292CLL);
    }
    *(_DWORD *)(v123 + 4) = v92 - 1;
  }
LABEL_172:
  if (v128)
    result = (WTF::StringImpl *)WTF::fastFree((WTF *)(v128 - 16), this);
  v77 = v8;
  v78 = v127;
  v127 = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 1)
    {
      v82 = *(unsigned int *)(v78 + 20);
      if ((_DWORD)v82)
      {
        v83 = *(WTF::StringImpl ***)(v78 + 8);
        v84 = 8 * v82;
        do
        {
          v85 = *v83;
          *v83 = 0;
          if (v85)
          {
            if (*(_DWORD *)v85 == 2)
              WTF::StringImpl::destroy(v85, this);
            else
              *(_DWORD *)v85 -= 2;
          }
          ++v83;
          v84 -= 8;
        }
        while (v84);
      }
      v86 = *(WTF **)(v78 + 8);
      if ((WTF *)(v78 + 24) != v86 && v86 != 0)
      {
        *(_QWORD *)(v78 + 8) = 0;
        *(_DWORD *)(v78 + 16) = 0;
        WTF::fastFree(v86, this);
      }
      result = (WTF::StringImpl *)WTF::fastFree((WTF *)v78, this);
    }
    else
    {
      --*(_DWORD *)v78;
    }
  }
  v79 = v131;
  if (HIDWORD(v132))
  {
    v80 = 16 * HIDWORD(v132);
    v81 = (WTF::StringImpl **)v131;
    do
    {
      result = *v81;
      *v81 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, this);
        else
          *(_DWORD *)result -= 2;
      }
      v81 += 2;
      v80 -= 16;
    }
    while (v80);
  }
  if (v79)
    result = (WTF::StringImpl *)WTF::fastFree(v79, this);
  v74 = v106;
  v8 = v77;
  if (v106)
  {
    *(_DWORD *)(a3 + 48) = 1;
    if (v74 == -1)
      goto LABEL_101;
LABEL_164:
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF **))off_1E3282F38[v74])(&v114, &v104);
    goto LABEL_101;
  }
LABEL_188:
  v10 = v104;
  v103 = v105;
  v104 = 0;
  v105 = 0;
  result = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_12KeyValuePairINS8_6StringEyEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSF_SH_EEEEEEDcSL_DpT0_((uint64_t)result, (WTF::StringImpl *)&v104);
  v57 = v103;
LABEL_100:
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v7;
  *(_DWORD *)(a3 + 16) = v6;
  *(_DWORD *)(a3 + 20) = v5;
  *(_QWORD *)(a3 + 24) = v10;
  *(_QWORD *)(a3 + 32) = v57;
  *(_QWORD *)(a3 + 40) = v9;
  *(_DWORD *)(a3 + 48) = 0;
  v9 = 0;
  v7 = 0;
  v8 = 0;
LABEL_101:
  v43 = v109;
  if (v109 != -1)
LABEL_102:
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, JSC::VM **))off_1E3282F48[v43])(&v114, &v107);
  if (v9)
  {
LABEL_104:
    if (*(_DWORD *)v9 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v9, this);
    else
      *(_DWORD *)v9 -= 2;
  }
LABEL_106:
  if (v7)
    result = (WTF::StringImpl *)WTF::fastFree(v7, this);
LABEL_108:
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v8, this);
    else
      *(_DWORD *)v8 -= 2;
  }
  return result;
}

uint64_t WebCore::JSGPUDeviceLostInfo::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  WTF *v3;
  WTF::StringImpl *v4;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (WTF *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 1)
        {
          v4 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
          *((_QWORD *)v3 + 1) = 0;
          if (v4)
          {
            if (*(_DWORD *)v4 == 2)
              WTF::StringImpl::destroy(v4, a2);
            else
              *(_DWORD *)v4 -= 2;
          }
          WTF::fastFree(v3, a2);
        }
        else
        {
          --*(_DWORD *)v3;
        }
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGPUDeviceLostInfo::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUDeviceLostInfoPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUDeviceLostInfoPrototype::create(WebCore::JSGPUDeviceLostInfoPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSGPUDeviceLostInfo::s_info, &WebCore::JSGPUDeviceLostInfoPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUDeviceLostInfo>,(WebCore::DOMConstructorID)23>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 184);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUDeviceLostInfo>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUDeviceLostInfo::s_info
         + ~((_QWORD)&WebCore::JSGPUDeviceLostInfo::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUDeviceLostInfo::s_info
                                                                     + ~((_QWORD)&WebCore::JSGPUDeviceLostInfo::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUDeviceLostInfo::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUDeviceLostInfo::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUDeviceLostInfoPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUDeviceLostInfoPrototype::create((WebCore::JSGPUDeviceLostInfoPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUDeviceLostInfo::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUDeviceLostInfo::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 184) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUDeviceLostInfoConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUDeviceLostInfoPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUDeviceLostInfo>,(WebCore::DOMConstructorID)23>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUDeviceLostInfo_reason(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 4) == 1)
  {
    v2 = 0;
LABEL_5:
    v3 = *(_QWORD *)(a1 + 56);
    v4 = (uint64_t *)(v3 + 41968);
    if ((_MergedGlobals_289[0] & 1) == 0)
    {
      qword_1EE3358B8 = (uint64_t)&_MergedGlobals_17;
      _MergedGlobals_17 += 2;
      dword_1ECE77C60 += 2;
      qword_1EE3358C0 = (uint64_t)&dword_1ECE77C60;
      _MergedGlobals_289[0] = 1;
    }
    v5 = *(_QWORD *)&_MergedGlobals_289[8 * v2 + 184];
    if (!v5)
      return *v4;
    v6 = *(_DWORD *)v5;
    v7 = *(_DWORD *)(v5 + 4);
    *(_DWORD *)v5 += 2;
    if (v7)
    {
      if (v7 != 1)
      {
LABEL_10:
        v8 = *(_QWORD *)(v3 + 64760);
        if (!v8 || v5 != *(_QWORD *)(v8 + 8))
        {
          v8 = JSC::jsStringWithCacheSlowCase();
          v6 = *(_DWORD *)v5 - 2;
        }
        goto LABEL_13;
      }
      v10 = *(unsigned __int8 **)(v5 + 8);
      if ((*(_BYTE *)(v5 + 16) & 4) != 0)
      {
        v11 = *v10;
      }
      else
      {
        v12 = *(unsigned __int16 *)v10;
        if (v12 > 0xFF)
          goto LABEL_10;
        v11 = v12;
      }
      v8 = *(_QWORD *)(v3 + 8 * v11 + 42216);
    }
    else
    {
      v8 = *v4;
    }
LABEL_13:
    if (v6)
      *(_DWORD *)v5 = v6;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
    return v8;
  }
  if (!*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 4))
  {
    v2 = 1;
    goto LABEL_5;
  }
  result = 39;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::jsGPUDeviceLostInfo_message(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 8);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::JSGPUDeviceLostInfoOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPUDeviceLostInfoOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  WTF::StringImpl *v25;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (WTF *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
      {
        v25 = (WTF::StringImpl *)*((_QWORD *)v24 + 1);
        *((_QWORD *)v24 + 1) = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, a2);
          else
            *(_DWORD *)v25 -= 2;
        }
        WTF::fastFree(v24, a2);
      }
      else
      {
        --*(_DWORD *)v24;
      }
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::GPUDeviceLostInfo>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSGPUDeviceLostInfo::s_info
         + ~((_QWORD)&WebCore::JSGPUDeviceLostInfo::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUDeviceLostInfo::s_info
                                                                     + ~((_QWORD)&WebCore::JSGPUDeviceLostInfo::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSGPUDeviceLostInfo::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSGPUDeviceLostInfo::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSGPUDeviceLostInfoPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUDeviceLostInfoPrototype::create((WebCore::JSGPUDeviceLostInfoPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSGPUDeviceLostInfo::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUDeviceLostInfo::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 184);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 184))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 184);
    *(_QWORD *)(v36 + 184) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 184);
  *(_QWORD *)(v32 + 184) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335830 & 1) == 0)
  {
    qword_1EE335828 = (uint64_t)&off_1E32826F0;
    byte_1EE335830 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335828;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::convertDictionary<WebCore::GPUExtent3DDict>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, _DWORD *a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  int v9;
  uint64_t result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  unint64_t v18;
  JSC::VM *v19;
  WTF::StringImpl *v20;

  v19 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_23:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v19, "width", 6, "GPUExtent3DDict", 16, "unsigned long", 14);
    goto LABEL_24;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    goto LABEL_24;
  }
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v20);
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v7);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (*((_DWORD *)v19 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v19);
    if ((result & 1) != 0)
      goto LABEL_24;
  }
  if (v8 == 10)
  {
    v9 = 1;
  }
  else
  {
    result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v8, &v20);
    v9 = (int)v20;
    if ((unint64_t)v20 >> 32)
      goto LABEL_24;
  }
  WTF::AtomStringImpl::addLiteral();
  v11 = v20;
  v13 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v20);
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (*((_DWORD *)v19 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v19);
    if ((result & 1) != 0)
      goto LABEL_24;
  }
  if (v13 == 10)
  {
    v14 = 1;
  }
  else
  {
    result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v13, &v20);
    v14 = (int)v20;
    if ((unint64_t)v20 >> 32)
      goto LABEL_24;
  }
  WTF::AtomStringImpl::addLiteral();
  v15 = v20;
  v17 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v20);
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v16);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (*((_DWORD *)v19 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v19);
    if ((result & 1) != 0)
      goto LABEL_24;
  }
  if (v17 == 10)
    goto LABEL_23;
  result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v17, &v20);
  v18 = (unint64_t)v20 >> 32;
  if (!((unint64_t)v20 >> 32))
  {
    *a3 = (_DWORD)v20;
    a3[1] = v14;
    a3[2] = v9;
    goto LABEL_27;
  }
LABEL_24:
  LODWORD(v18) = 1;
LABEL_27:
  a3[3] = v18;
  return result;
}

uint64_t WebCore::JSGPUExternalTexture::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
        else
          --v3[2];
      }
      v4 = *((_QWORD *)v2 + 1);
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 0;
        v5 = (unsigned int *)*((_QWORD *)v2 + 1);
        *((_QWORD *)v2 + 1) = 0;
        if (v5)
        {
          do
          {
            v6 = __ldaxr(v5);
            v7 = v6 - 1;
          }
          while (__stlxr(v7, v5));
          if (!v7)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
      else
      {
        *((_QWORD *)v2 + 1) = 0;
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGPUExternalTexture::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUExternalTexturePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUExternalTexturePrototype::create(WebCore::JSGPUExternalTexturePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  JSC::Structure *v17;
  int v18;
  unint64_t v20;
  WTF::StringImpl *v21[6];
  int v22;
  int v23;
  JSC::Structure *v24;
  int v25;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v20);
    *((_QWORD *)this + 4865) = SlowCase + (int)v20;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSGPUExternalTexture::s_info, (uint64_t)&WebCore::JSGPUExternalTexturePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v10 = v21[0];
    v11 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v21[0]) = -1;
    WORD2(v21[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v11;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v12);
      else
        *(_DWORD *)v10 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v13 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = JSC::JSString::create((uint64_t)this, v21);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v25 = *(_DWORD *)SlowCase;
  v24 = v17;
  v18 = JSC::Structure::outOfLineCapacity(v17);
  v22 = 0;
  v23 = v18;
  v21[0] = (WTF::StringImpl *)&v23;
  v21[1] = (WTF::StringImpl *)SlowCase;
  v21[2] = this;
  v21[3] = (WTF::StringImpl *)&v25;
  v21[4] = (WTF::StringImpl *)&v24;
  v21[5] = (WTF::StringImpl *)&v22;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v17, this, v13, 6, (uint64_t)v21);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v22, v15);
  *((_DWORD *)v17 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUExternalTexture>,(WebCore::DOMConstructorID)24>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 192);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUExternalTexture>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUExternalTexture::s_info
         + ~((_QWORD)&WebCore::JSGPUExternalTexture::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUExternalTexture::s_info
                                                                      + ~((_QWORD)&WebCore::JSGPUExternalTexture::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUExternalTexture::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUExternalTexture::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUExternalTexturePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUExternalTexturePrototype::create((WebCore::JSGPUExternalTexturePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUExternalTexture::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUExternalTexture::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 192) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUExternalTextureConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUExternalTexturePrototype::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUExternalTexture>,(WebCore::DOMConstructorID)24>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUExternalTexture_label(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 16) + 16);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

BOOL WebCore::setJSGPUExternalTexture_label(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  int v17;
  char v18;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSGPUExternalTexture::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSGPUExternalTexture::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v16);
  v10 = v17;
  v11 = v17 == 0;
  if (!v17)
  {
    v12 = v16;
    v16 = 0;
    v13 = *(_QWORD **)(v8 + 16);
    v14 = (WTF::StringImpl *)v13[2];
    v13[2] = v12;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    (*(void (**)(_QWORD *, _QWORD *))(*v13 + 32))(v13, v13 + 2);
    v10 = v17;
  }
  if (v10 != -1)
    ((void (*)(char *, uint64_t *))off_1E3282908[v10])(&v18, &v16);
  return v11;
}

uint64_t WebCore::JSGPUExternalTextureOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPUExternalTextureOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    v25 = *((_QWORD *)v3 + 1);
    if (v25)
    {
      *(_QWORD *)(v25 + 8) = 0;
      v26 = (unsigned int *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v26)
      {
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v26);
          WTF::fastFree((WTF *)v26, a2);
        }
      }
    }
    else
    {
      *((_QWORD *)v3 + 1) = 0;
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unsigned __int8 **WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::GPUFeatureName> [11]>::tryGet<WTF::String>(unsigned __int8 ***a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 **v10;

  v3 = *a2;
  if (*a2)
  {
    v4 = *(unsigned __int8 **)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  v6 = *a1;
  if ((WTF::operator==(v4, v5, **a1, (uint64_t)(*a1)[1]) & 1) != 0)
  {
    v7 = v6;
  }
  else
  {
    v7 = v6 + 3;
    if ((WTF::operator==(v4, v5, v6[3], (uint64_t)v6[4]) & 1) == 0)
    {
      v7 = v6 + 6;
      if ((WTF::operator==(v4, v5, v6[6], (uint64_t)v6[7]) & 1) == 0)
      {
        v7 = v6 + 9;
        if ((WTF::operator==(v4, v5, v6[9], (uint64_t)v6[10]) & 1) == 0)
        {
          v7 = v6 + 12;
          if ((WTF::operator==(v4, v5, v6[12], (uint64_t)v6[13]) & 1) == 0)
          {
            v7 = v6 + 15;
            if ((WTF::operator==(v4, v5, v6[15], (uint64_t)v6[16]) & 1) == 0)
            {
              v7 = v6 + 18;
              if ((WTF::operator==(v4, v5, v6[18], (uint64_t)v6[19]) & 1) == 0)
              {
                v7 = v6 + 21;
                if ((WTF::operator==(v4, v5, v6[21], (uint64_t)v6[22]) & 1) == 0)
                {
                  v7 = v6 + 24;
                  if ((WTF::operator==(v4, v5, v6[24], (uint64_t)v6[25]) & 1) == 0)
                  {
                    v7 = v6 + 27;
                    if ((WTF::operator==(v4, v5, v6[27], (uint64_t)v6[28]) & 1) == 0)
                    {
                      v7 = v6 + 33;
                      v8 = v6[30];
                      v9 = (uint64_t)v6[31];
                      v10 = v6 + 30;
                      if (WTF::operator==(v4, v5, v8, v9))
                        v7 = v10;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v7 == *a1 + 33)
    return 0;
  else
    return v7 + 2;
}

uint64_t WebCore::parseEnumeration<WebCore::GPUFeatureName>(JSC::JSGlobalObject *a1, unint64_t this)
{
  WTF::StringImpl *v2;
  unsigned __int8 **v3;
  WTF::StringImpl *v4;
  int v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  unint64_t v10;

  v10 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v2 = *(WTF::StringImpl **)(this + 8);
    if ((v2 & 1) != 0)
    {
      v2 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v2)
        goto LABEL_6;
    }
    else if (!v2)
    {
LABEL_6:
      v9 = v2;
      goto LABEL_7;
    }
    *(_DWORD *)v2 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v10, a1);
LABEL_7:
  v3 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WebCore::GPUFeatureName> [11]>::tryGet<WTF::String>((unsigned __int8 ***)WebCore::parseEnumerationFromString<WebCore::GPUFeatureName>(WTF::String const&)::enumerationMapping, (uint64_t *)&v9);
  if (v3)
  {
    v5 = *(unsigned __int8 *)v3;
    v6 = 1;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v5 | (v6 << 8);
}

uint64_t WebCore::parseEnumeration<WebCore::GPUFilterMode>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  int v9;
  int v10;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v20;
  unint64_t v21;

  v3 = a1;
  v21 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
LABEL_34:
        v10 = 0;
        v9 = 0;
        return v10 | (v9 << 8);
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v21, a1);
  v4 = v20;
  if (!v20)
    goto LABEL_34;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "linear" && v7 == 6)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 108 || *(_DWORD *)(v6 + 1) != 1634037353 || *(_DWORD *)(v6 + 2) != 1918985582)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 108)
        goto LABEL_16;
      v14 = *(_QWORD *)(v6 + 2);
      v15 = *(_QWORD *)(v6 + 4);
      if (v14 != 0x610065006E0069 || v15 != 0x7200610065006ELL)
        goto LABEL_16;
    }
LABEL_41:
    v13 = &WebCore::parseEnumerationFromString<WebCore::GPUMipmapFilterMode>(WTF::String const&)::mappings;
    goto LABEL_42;
  }
  if (v6 == "linear" && v7 == 6)
    goto LABEL_41;
  if (v6 == "nearest" || v7 != 7)
  {
    if (v7 != 7 || v6 != "nearest")
      goto LABEL_16;
    goto LABEL_30;
  }
  if ((v5 & 4) == 0)
  {
    if (*(_WORD *)v6 != 110)
      goto LABEL_16;
    if (*(_QWORD *)(v6 + 6) != 0x74007300650072 || *(_QWORD *)(v6 + 2) != 0x65007200610065)
      goto LABEL_16;
    goto LABEL_30;
  }
  if (*v6 != 110 || *(_DWORD *)(v6 + 1) != 1701994853 || *(_DWORD *)(v6 + 3) != 1953719666)
  {
LABEL_16:
    v9 = 0;
    v10 = 0;
    goto LABEL_43;
  }
LABEL_30:
  v13 = &off_1E3281028;
LABEL_42:
  v10 = *((unsigned __int8 *)v13 + 16);
  v9 = 1;
LABEL_43:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v10 | (v9 << 8);
}

WTF::StringImpl *WebCore::convertDictionary<WebCore::GPUFragmentState>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  unsigned int v5;
  WTF *v6;
  int v7;
  WTF::StringImpl *v8;
  uint64_t Object;
  JSC::Structure *v10;
  WTF::StringImpl *v11;
  unsigned __int8 *v12;
  int v13;
  WTF::StringImpl *result;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl **v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v33;
  void *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  JSC::VM *v42;
  JSValue v43;
  unsigned int v44;
  unsigned int i;
  unsigned int v46;
  unint64_t IndexQuickly;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  WTF *v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  JSC::VM *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  WTF *v69;
  int v70;
  void *v71;
  int hasExceptionsAfterHandlingTraps;
  WTF *v73;
  JSC::VM *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  WTF::StringImpl *v79[2];
  unsigned int v80;
  JSC::VM *v81[2];
  WTF *v82;
  uint64_t v83;

  v81[0] = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
LABEL_26:
    result = (WTF::StringImpl *)WebCore::throwRequiredMemberTypeError((int)a2, (int)v81, "module", 7, "GPUFragmentState", 17, "GPUShaderModule", 16);
LABEL_27:
    v24 = 0;
LABEL_28:
    *(_DWORD *)(a3 + 56) = 1;
    goto LABEL_29;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = (WTF::StringImpl *)JSC::throwTypeError();
LABEL_130:
    *(_DWORD *)(a3 + 56) = 1;
    return result;
  }
  v10 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v12 = (unsigned __int8 *)JSC::JSObject::get(v10, (JSC::JSGlobalObject *)a2, (unint64_t)v79[0]);
  if (v79[0])
  {
    if (*(_DWORD *)v79[0] == 2)
      WTF::StringImpl::destroy(v79[0], v11);
    else
      *(_DWORD *)v79[0] -= 2;
  }
  if (*((_DWORD *)v81[0] + 20))
  {
    result = (WTF::StringImpl *)JSC::VM::hasExceptionsAfterHandlingTraps(v81[0]);
    if ((_DWORD)result)
      goto LABEL_130;
  }
  if (v12 == (unsigned __int8 *)10)
  {
    v5 = 0;
    v13 = 0;
    v6 = 0;
LABEL_13:
    WTF::AtomStringImpl::addLiteral();
    v16 = v79[0];
    v18 = JSC::JSObject::get(v10, (JSC::JSGlobalObject *)a2, (unint64_t)v79[0]);
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v17);
      else
        *(_DWORD *)v16 -= 2;
    }
    if (*((_DWORD *)v81[0] + 20))
    {
      result = (WTF::StringImpl *)JSC::VM::hasExceptionsAfterHandlingTraps(v81[0]);
      if ((_DWORD)result)
      {
        v7 = 0;
        v8 = 0;
        goto LABEL_27;
      }
    }
    v77 = v13;
    v76 = v18;
    if (v18 == 10)
    {
      v7 = 0;
      v8 = 0;
    }
    else
    {
      result = (WTF::StringImpl *)WebCore::valueToUSVString((JSC::JSGlobalObject *)a2, v18, (uint64_t)v79);
      v20 = LODWORD(v79[1]);
      if (LODWORD(v79[1]))
      {
        *(_DWORD *)(a3 + 56) = 1;
        if ((_DWORD)v20 != -1)
          result = (WTF::StringImpl *)((uint64_t (*)(WTF **, WTF::StringImpl **))off_1E3282908[v20])(&v82, v79);
        v7 = 0;
        v8 = 0;
        v24 = 0;
LABEL_29:
        if (v5)
        {
          v25 = 16 * v5;
          v26 = (WTF::StringImpl **)v6;
          do
          {
            result = *v26;
            *v26 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
              else
                *(_DWORD *)result -= 2;
            }
            v26 += 2;
            v25 -= 16;
          }
          while (v25);
        }
        if (v6)
          result = (WTF::StringImpl *)WTF::fastFree(v6, v19);
        if (v7 && v8)
        {
          if (*(_DWORD *)v8 == 2)
          {
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v19);
            if (!v24)
              return result;
            goto LABEL_44;
          }
          *(_DWORD *)v8 -= 2;
        }
        if (!v24)
          return result;
        do
        {
LABEL_44:
          v27 = __ldaxr((unsigned int *)v24);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, (unsigned int *)v24));
        if (!v28)
        {
          atomic_store(1u, (unsigned int *)v24);
          return (WTF::StringImpl *)WTF::fastFree((WTF *)v24, v19);
        }
        return result;
      }
      v8 = v79[0];
      v79[0] = 0;
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)&v82, (WTF::StringImpl *)v79);
      v7 = 1;
    }
    WTF::AtomStringImpl::addLiteral();
    v21 = v79[0];
    v23 = JSC::JSObject::get(v10, (JSC::JSGlobalObject *)a2, (unint64_t)v79[0]);
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v22);
      else
        *(_DWORD *)v21 -= 2;
    }
    if (*((_DWORD *)v81[0] + 20))
    {
      result = (WTF::StringImpl *)JSC::VM::hasExceptionsAfterHandlingTraps(v81[0]);
      if ((_DWORD)result)
        goto LABEL_27;
    }
    if (v23 == 10)
      goto LABEL_26;
    v75 = a3;
    v79[0] = a2[7];
    if ((v23 & 0xFFFE000000000002) != 0)
      goto LABEL_57;
    v29 = *(unsigned int *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x4C);
    v30 = *(_DWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x4C) != 0;
    if ((_DWORD)v29)
    {
      v31 = 16 * v29;
      if ((char **)v31 != &WebCore::JSGPUShaderModule::s_info)
      {
        do
        {
          v31 = *(_QWORD *)(v31 + 16);
          v30 = v31 != 0;
        }
        while ((char **)v31 != &WebCore::JSGPUShaderModule::s_info && v31 != 0);
      }
    }
    if (!v30 || (v33 = *(_QWORD *)(v23 + 24)) == 0)
    {
LABEL_57:
      result = (WTF::StringImpl *)JSC::throwTypeError();
      v24 = 0;
      *(_DWORD *)(v75 + 56) = 1;
      goto LABEL_29;
    }
    v24 = *(_QWORD *)(v33 + 8);
    v78 = v7;
    if (v24)
      goto LABEL_165;
    v24 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v24 = 1;
    *(_QWORD *)(v24 + 8) = v33;
    v35 = *(unsigned int **)(v33 + 8);
    *(_QWORD *)(v33 + 8) = v24;
    if (!v35)
      goto LABEL_165;
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v35);
      WTF::fastFree((WTF *)v35, v34);
    }
    v24 = *(_QWORD *)(v33 + 8);
    if (v24)
    {
LABEL_165:
      do
        v38 = __ldaxr((unsigned int *)v24);
      while (__stlxr(v38 + 1, (unsigned int *)v24));
    }
    a3 = v75;
    WTF::AtomStringImpl::addLiteral();
    v39 = v79[0];
    v41 = JSC::JSObject::get(v10, (JSC::JSGlobalObject *)a2, (unint64_t)v79[0]);
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v40);
      else
        *(_DWORD *)v39 -= 2;
    }
    if (*((_DWORD *)v81[0] + 20))
    {
      result = (WTF::StringImpl *)JSC::VM::hasExceptionsAfterHandlingTraps(v81[0]);
      if ((_DWORD)result)
      {
        *(_DWORD *)(v75 + 56) = 1;
        v7 = v78;
        goto LABEL_29;
      }
    }
    v7 = v78;
    if (v41 == 10)
    {
      result = (WTF::StringImpl *)WebCore::throwRequiredMemberTypeError((int)a2, (int)v81, "targets", 8, "GPUFragmentState", 17, "sequence", 9);
      goto LABEL_28;
    }
    v74 = a2[7];
    v81[1] = v74;
    if ((v41 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v41 + 5) <= 0x16u)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSC::throwTypeError();
      v54 = v79[0];
      v79[0] = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v53);
        else
          *(_DWORD *)v54 -= 2;
      }
      v80 = 1;
      goto LABEL_100;
    }
    v82 = 0;
    v83 = 0;
    v42 = v74;
    if (JSC::getIterationMode() == 2)
    {
      v73 = 0;
      v44 = 0;
      for (i = 1; ; ++i)
      {
        if ((*(_BYTE *)(v41 + 4) & 0xE) != 0)
          v46 = *(_DWORD *)(*(_QWORD *)(v41 + 8) - 8);
        else
          v46 = 0;
        if (i - 1 >= v46)
          goto LABEL_126;
        IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v41, i - 1, 0);
        if (!IndexQuickly)
          IndexQuickly = JSC::JSObject::get((JSC::JSObject *)v41, (JSC::JSGlobalObject *)a2, i - 1);
        v42 = v74;
        if (*((_DWORD *)v74 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v74) & 1) != 0)
          goto LABEL_150;
        if ((IndexQuickly & 0xFFFFFFFFFFFFFFF7) == 2)
        {
          v48 = 0;
          v49 = 0;
          v50 = 0;
        }
        else
        {
          WebCore::convertDictionary<WebCore::GPUColorTargetState>((JSC::JSCell *)IndexQuickly, a2, (uint64_t)v79);
          if (HIDWORD(v79[1]))
          {
            v7 = v78;
            goto LABEL_91;
          }
          v48 = v79[0];
          v49 = LODWORD(v79[1]);
          v50 = 0x100000000;
        }
        v7 = v78;
        v79[0] = v48;
        v79[1] = (WTF::StringImpl *)(v50 | v49);
        if (v44 == (_DWORD)v83)
        {
          v51 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v82, v44 + 1, (unint64_t)v79);
          v52 = HIDWORD(v83);
          v73 = v82;
          *((_OWORD *)v82 + HIDWORD(v83)) = *(_OWORD *)v51;
        }
        else
        {
          *((_OWORD *)v73 + v44) = *(_OWORD *)v79;
          v52 = HIDWORD(v83);
        }
        v44 = v52 + 1;
        HIDWORD(v83) = v52 + 1;
LABEL_91:
        if (*((_QWORD *)v74 + 2))
        {
          v67 = JSC::JSArrayIterator::create();
          if ((i & 0x80000000) != 0)
            v68 = COERCE__INT64((double)i) + 0x2000000000000;
          else
            v68 = i | 0xFFFE000000000000;
          *(_QWORD *)(v67 + 16) = v68;
          goto LABEL_140;
        }
      }
    }
    JSC::iteratorForIterable((JSC *)a2, (JSC::JSGlobalObject *)v41, v43);
    if (*((_DWORD *)v74 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v74) & 1) != 0)
    {
      v44 = 0;
LABEL_150:
      v7 = v78;
LABEL_151:
      if (!*((_DWORD *)v42 + 20))
      {
        v69 = v82;
LABEL_153:
        v70 = v83;
        v80 = 0;
        v79[0] = 0;
        v79[1] = 0;
        *(_QWORD *)v75 = v24;
        *(_BYTE *)(v75 + 8) = 0;
        *(_BYTE *)(v75 + 16) = 0;
        if (v76 != 10)
        {
          *(_QWORD *)(v75 + 8) = v8;
          *(_BYTE *)(v75 + 16) = 1;
          v8 = 0;
        }
        v55 = 0;
        v24 = 0;
        *(_QWORD *)(v75 + 24) = v6;
        *(_DWORD *)(v75 + 32) = v77;
        *(_DWORD *)(v75 + 36) = v5;
        *(_QWORD *)(v75 + 40) = v69;
        *(_DWORD *)(v75 + 48) = v70;
        *(_DWORD *)(v75 + 52) = v44;
        v5 = 0;
        v6 = 0;
        a3 = v75;
        goto LABEL_156;
      }
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v42);
      v69 = v82;
      if (!hasExceptionsAfterHandlingTraps)
      {
        v7 = v78;
        goto LABEL_153;
      }
      v80 = 1;
      if (v82)
        WTF::fastFree(v82, v71);
      a3 = v75;
      v7 = v78;
LABEL_100:
      v55 = 1;
LABEL_156:
      *(_DWORD *)(a3 + 56) = v55;
      result = (WTF::StringImpl *)((uint64_t (*)(WTF **, WTF::StringImpl **))off_1E3283050[v55])(&v82, v79);
      goto LABEL_29;
    }
    v56 = 0;
    v44 = 0;
    while (1)
    {
      v57 = JSC::iteratorStep();
      if (*((_QWORD *)v42 + 2))
        v58 = 1;
      else
        v58 = v57 == 6;
      if (v58)
        goto LABEL_150;
      v59 = JSC::iteratorValue();
      v60 = v42;
      v61 = v59;
      if (*((_DWORD *)v60 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v74) & 1) != 0)
      {
        v7 = v78;
LABEL_126:
        v42 = v74;
        goto LABEL_151;
      }
      if ((v61 & 0xFFFFFFFFFFFFFFF7) == 2)
        break;
      WebCore::convertDictionary<WebCore::GPUColorTargetState>((JSC::JSCell *)v61, a2, (uint64_t)v79);
      if (!HIDWORD(v79[1]))
      {
        v62 = v79[0];
        v63 = LODWORD(v79[1]);
        v64 = 0x100000000;
        goto LABEL_118;
      }
      v42 = v74;
LABEL_122:
      if (*((_QWORD *)v42 + 2))
      {
        v7 = v78;
LABEL_140:
        JSC::iteratorClose();
        goto LABEL_151;
      }
    }
    v62 = 0;
    v63 = 0;
    v64 = 0;
LABEL_118:
    v42 = v74;
    v79[0] = v62;
    v79[1] = (WTF::StringImpl *)(v64 | v63);
    if (v44 == (_DWORD)v83)
    {
      v65 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v82, v44 + 1, (unint64_t)v79);
      v66 = HIDWORD(v83);
      v56 = v82;
      *((_OWORD *)v82 + HIDWORD(v83)) = *(_OWORD *)v65;
    }
    else
    {
      *((_OWORD *)v56 + v44) = *(_OWORD *)v79;
      v66 = HIDWORD(v83);
    }
    v44 = v66 + 1;
    HIDWORD(v83) = v66 + 1;
    goto LABEL_122;
  }
  result = (WTF::StringImpl *)WebCore::Converter<WebCore::IDLRecord<WebCore::IDLUSVString,WebCore::IDLDouble>>::convertRecord<>((uint64_t)a2, v12, (uint64_t)v79);
  v15 = v80;
  if (!v80)
  {
    v6 = v79[0];
    v13 = (int)v79[1];
    v5 = HIDWORD(v79[1]);
    v79[0] = 0;
    v79[1] = 0;
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_12KeyValuePairINS8_6StringEdEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSF_SH_EEEEEEDcSL_DpT0_((uint64_t)&v82, (WTF::StringImpl *)v79);
    goto LABEL_13;
  }
  *(_DWORD *)(a3 + 56) = 1;
  if ((_DWORD)v15 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF **, WTF::StringImpl **))off_1E3283040[v15])(&v82, v79);
  return result;
}

uint64_t WebCore::convertDictionary<WebCore::GPUImageCopyBuffer>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  char v9;
  unsigned __int8 v10;
  unsigned int v11;
  uint64_t result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v29;
  void *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  int v37;
  __int16 v38;
  char v39;
  __int16 v40;
  char v41;
  JSC::VM *v42;
  WTF::StringImpl *v43;

  v42 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v36 = 0;
    v37 = 0;
LABEL_34:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v42, "buffer", 7, "GPUImageCopyBuffer", 19, "GPUBuffer", 10);
    goto LABEL_35;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
LABEL_46:
    result = JSC::throwTypeError();
    goto LABEL_35;
  }
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v36);
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v7);
    else
      *(_DWORD *)v36 -= 2;
  }
  if (*((_DWORD *)v42 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v42);
    if ((_DWORD)result)
      goto LABEL_35;
  }
  if (v8 == 10)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
  else
  {
    result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v8, &v36);
    v10 = v36;
    if ((unint64_t)v36 >> 32)
      goto LABEL_35;
    v11 = v36 & 0xFFFFFF00;
    v9 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v13 = v36;
  v15 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v36);
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v14);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (*((_DWORD *)v42 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v42);
    if ((_DWORD)result)
      goto LABEL_35;
  }
  if (v15 == 10)
  {
    v16 = 0;
    v36 = 0;
    v37 = 0;
  }
  else
  {
    result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>((WTF::StringImpl *)a2, v15, (uint64_t)&v36);
    if (v37)
      goto LABEL_35;
    v16 = v36;
  }
  WTF::AtomStringImpl::addLiteral();
  v17 = v43;
  v19 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v43);
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v18);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (*((_DWORD *)v42 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v42);
    if ((result & 1) != 0)
      goto LABEL_35;
  }
  if (v19 == 10)
  {
    v35 = 0;
    v20 = 0;
    goto LABEL_29;
  }
  result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v19, &v43);
  if ((unint64_t)v43 >> 32)
  {
LABEL_35:
    v24 = 1;
    goto LABEL_36;
  }
  v20 = v43;
  LODWORD(v35) = v43 & 0xFFFFFF00;
  BYTE4(v35) = 1;
LABEL_29:
  WTF::AtomStringImpl::addLiteral();
  v21 = v43;
  v23 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v43);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v22);
    else
      *(_DWORD *)v21 -= 2;
  }
  if (*((_DWORD *)v42 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v42);
    if ((result & 1) != 0)
      goto LABEL_35;
  }
  if (v23 == 10)
    goto LABEL_34;
  v43 = a2[7];
  if ((v23 & 0xFFFE000000000002) != 0)
    goto LABEL_46;
  v25 = *(unsigned int *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x4C);
  v26 = *(_DWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x4C) != 0;
  if ((_DWORD)v25)
  {
    v27 = 16 * v25;
    if ((char **)v27 != &WebCore::JSGPUBuffer::s_info)
    {
      do
      {
        v27 = *(_QWORD *)(v27 + 16);
        v26 = v27 != 0;
      }
      while ((char **)v27 != &WebCore::JSGPUBuffer::s_info && v27 != 0);
    }
  }
  if (!v26)
    goto LABEL_46;
  v29 = *(_QWORD *)(v23 + 24);
  if (!v29)
    goto LABEL_46;
  result = *(_QWORD *)(v29 + 8);
  if (result)
    goto LABEL_71;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = v29;
  v31 = *(unsigned int **)(v29 + 8);
  *(_QWORD *)(v29 + 8) = result;
  if (!v31)
    goto LABEL_71;
  do
  {
    v32 = __ldaxr(v31);
    v33 = v32 - 1;
  }
  while (__stlxr(v33, v31));
  if (!v33)
  {
    atomic_store(1u, v31);
    WTF::fastFree((WTF *)v31, v30);
  }
  result = *(_QWORD *)(v29 + 8);
  if (result)
  {
LABEL_71:
    do
      v34 = __ldaxr((unsigned int *)result);
    while (__stlxr(v34 + 1, (unsigned int *)result));
  }
  v24 = 0;
  *(_QWORD *)a3 = v16;
  *(_DWORD *)(a3 + 8) = v11 | v10;
  *(_BYTE *)(a3 + 12) = v9;
  *(_WORD *)(a3 + 13) = v40;
  *(_BYTE *)(a3 + 15) = v41;
  *(_DWORD *)(a3 + 16) = v35 | v20;
  *(_BYTE *)(a3 + 20) = BYTE4(v35);
  *(_WORD *)(a3 + 21) = v38;
  *(_BYTE *)(a3 + 23) = v39;
  *(_QWORD *)(a3 + 24) = result;
LABEL_36:
  *(_DWORD *)(a3 + 32) = v24;
  return result;
}

unsigned int *WebCore::convertDictionary<WebCore::GPUImageCopyTexture>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  unsigned __int16 v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t (*v19)();
  int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  unsigned int *result;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  WTF *v40;
  int v41;
  _BYTE v42[16];
  int v43;
  WTF *v44;
  int v45;
  _BYTE v46[16];
  int v47;
  char v48;
  char v49;
  JSC::VM *v50;
  _BYTE *v51;
  WTF::StringImpl *v52;
  _BYTE v53[16];
  unsigned int v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v50 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v44 = 0;
    v46[0] = 0;
    v48 = 0;
    v49 = 0;
    v45 = 0;
LABEL_49:
    WebCore::throwRequiredMemberTypeError((int)a2, (int)&v50, "texture", 8, "GPUImageCopyTexture", 20, "GPUTexture", 11);
    goto LABEL_50;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = (unsigned int *)JSC::throwTypeError();
    *(_DWORD *)(a3 + 56) = 1;
    return result;
  }
  v6 = (JSC::Structure *)Object;
  v44 = 0;
  v45 = 0;
  v46[0] = 0;
  v48 = 0;
  v49 = 0;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v52);
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, v7);
    else
      *(_DWORD *)v52 -= 2;
  }
  if (*((_DWORD *)v50 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v50) & 1) != 0)
    goto LABEL_50;
  if (v8 == 10)
  {
    LOBYTE(v9) = 0;
  }
  else
  {
    v52 = a2[7];
    v9 = WebCore::parseEnumeration<WebCore::GPUTextureAspect>((JSC::JSGlobalObject *)a2, v8);
    if (*((_DWORD *)v52 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v52) & 1) != 0)
      goto LABEL_50;
    if (v9 <= 0xFFu)
      goto LABEL_70;
  }
  v49 = v9;
  WTF::AtomStringImpl::addLiteral();
  v11 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v52);
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, v10);
    else
      *(_DWORD *)v52 -= 2;
  }
  if (*((_DWORD *)v50 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v50) & 1) != 0)
    goto LABEL_50;
  if (v11 == 10)
  {
    v12 = 0;
    goto LABEL_20;
  }
  WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v11, &v52);
  v12 = (int)v52;
  if (!((unint64_t)v52 >> 32))
  {
LABEL_20:
    v45 = v12;
    WTF::AtomStringImpl::addLiteral();
    v14 = v52;
    v16 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v52);
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v15);
      else
        *(_DWORD *)v14 -= 2;
    }
    if (*((_DWORD *)v50 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v50) & 1) != 0)
      goto LABEL_50;
    if (v16 == 10)
      goto LABEL_44;
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLSequence<WebCore::IDLEnforceRangeAdaptor<WebCore::IDLUnsignedLong>>,WebCore::IDLDictionary<WebCore::GPUOrigin3DDict>>>::convert((uint64_t)&v52, (JSC *)a2, v16);
    v17 = v55;
    if (v55)
    {
      *(_DWORD *)(a3 + 56) = 1;
      v20 = v17;
LABEL_41:
      if (v20 != -1)
        ((void (*)(_BYTE *, _BYTE *))off_1E3283188[v20])(v42, v53);
      if (v17)
        goto LABEL_52;
LABEL_44:
      WTF::AtomStringImpl::addLiteral();
      v21 = v52;
      v22 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v52);
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v13);
        else
          *(_DWORD *)v21 -= 2;
      }
      if (*((_DWORD *)v50 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v50) & 1) != 0)
        goto LABEL_50;
      if (v22 == 10)
        goto LABEL_49;
      v52 = a2[7];
      if ((v22 & 0xFFFE000000000002) == 0)
      {
        v27 = *(unsigned int *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C);
        v28 = *(_DWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C) != 0;
        if ((_DWORD)v27)
        {
          v29 = 16 * v27;
          if ((char **)v29 != &WebCore::JSGPUTexture::s_info)
          {
            do
            {
              v29 = *(_QWORD *)(v29 + 16);
              v28 = v29 != 0;
            }
            while ((char **)v29 != &WebCore::JSGPUTexture::s_info && v29 != 0);
          }
        }
        if (v28)
        {
          v31 = *(_QWORD *)(v22 + 24);
          if (v31)
          {
            v32 = *(_QWORD *)(v31 + 16);
            if (v32)
              goto LABEL_103;
            v32 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v32 = 1;
            *(_QWORD *)(v32 + 8) = v31;
            v33 = *(unsigned int **)(v31 + 16);
            *(_QWORD *)(v31 + 16) = v32;
            if (!v33)
              goto LABEL_103;
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              atomic_store(1u, v33);
              WTF::fastFree((WTF *)v33, v13);
            }
            v32 = *(_QWORD *)(v31 + 16);
            if (v32)
            {
LABEL_103:
              do
                v36 = __ldaxr((unsigned int *)v32);
              while (__stlxr(v36 + 1, (unsigned int *)v32));
            }
            v37 = (unsigned int *)v44;
            v44 = (WTF *)v32;
            if (v37)
            {
              do
              {
                v38 = __ldaxr(v37);
                v39 = v38 - 1;
              }
              while (__stlxr(v39, v37));
              if (!v39)
              {
                atomic_store(1u, v37);
                WTF::fastFree((WTF *)v37, v13);
              }
            }
            v40 = v44;
            v44 = 0;
            *(_QWORD *)a3 = v40;
            *(_DWORD *)(a3 + 8) = v45;
            *(_BYTE *)(a3 + 16) = 0;
            v13 = (WTF::StringImpl *)(a3 + 16);
            *(_BYTE *)(a3 + 40) = 0;
            if (v48)
            {
              *(_DWORD *)(a3 + 32) = -1;
              v41 = v47;
              if (v47 != -1)
              {
                ((void (*)(WTF::StringImpl **, WTF::StringImpl *, _BYTE *))off_1E3283168[v47])(&v52, v13, v46);
                *(_DWORD *)(a3 + 32) = v41;
              }
              *(_BYTE *)(a3 + 40) = 1;
            }
            v23 = 0;
            *(_BYTE *)(a3 + 48) = v49;
            goto LABEL_51;
          }
        }
      }
LABEL_70:
      JSC::throwTypeError();
      goto LABEL_50;
    }
    v42[0] = 0;
    v43 = -1;
    v18 = v54;
    if (v54 == -1)
    {
      if (v48)
      {
        if (v47 == -1)
        {
LABEL_40:
          v20 = v55;
          goto LABEL_41;
        }
        ((void (*)(_BYTE **, _BYTE *))off_1E3283158[v47])(&v51, v46);
        v47 = -1;
LABEL_38:
        if (v43 != -1)
          ((void (*)(_BYTE **, _BYTE *))off_1E3283158[v43])(&v51, v42);
        goto LABEL_40;
      }
      v46[0] = 0;
      v47 = -1;
    }
    else
    {
      v19 = off_1E3283168[v54];
      ((void (*)(_BYTE **, _BYTE *, _BYTE *))v19)(&v51, v42, v53);
      v43 = v18;
      if (v48)
      {
        v51 = v46;
        ((void (*)(_BYTE **, _BYTE *, _BYTE *))off_1E3283178[v18])(&v51, v46, v42);
        goto LABEL_38;
      }
      v46[0] = 0;
      v47 = -1;
      ((void (*)(_BYTE **, _BYTE *, _BYTE *))v19)(&v51, v46, v42);
      v47 = v18;
    }
    v48 = 1;
    goto LABEL_38;
  }
LABEL_50:
  v23 = 1;
LABEL_51:
  *(_DWORD *)(a3 + 56) = v23;
LABEL_52:
  if (v48)
  {
    if (v47 != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E3283158[v47])(&v52, v46);
    v47 = -1;
  }
  result = (unsigned int *)v44;
  v44 = 0;
  if (result)
  {
    do
    {
      v25 = __ldaxr(result);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, result));
    if (!v26)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v13);
    }
  }
  return result;
}

uint64_t WebCore::parseEnumeration<WebCore::GPUIndexFormat>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  char **v12;
  int v13;
  int v14;
  uint64_t v18;
  unint64_t v19;

  v3 = a1;
  v19 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v19, a1);
    v4 = v18;
    if (v18)
      goto LABEL_7;
LABEL_36:
    v13 = 0;
    v14 = 0;
    return v13 | (v14 << 8);
  }
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 1) == 0)
  {
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
  if (v4)
LABEL_5:
    *(_DWORD *)v4 += 2;
LABEL_6:
  if (!v4)
    goto LABEL_36;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  v8 = v7 != 6;
  if (v6 != "uint16" && v7 == 6)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 117 || *(_DWORD *)(v6 + 1) != 829714025 || *(_DWORD *)(v6 + 2) != 909210734)
      {
LABEL_13:
        v9 = 6;
        goto LABEL_18;
      }
    }
    else
    {
      if (*(_WORD *)v6 != 117)
        goto LABEL_13;
      if (*(_QWORD *)(v6 + 2) != 0x310074006E0069 || *(_QWORD *)(v6 + 4) != 0x3600310074006ELL)
        goto LABEL_13;
    }
LABEL_43:
    v12 = &WebCore::parseEnumerationFromString<WebCore::GPUIndexFormat>(WTF::String const&)::mappings;
    goto LABEL_44;
  }
  v10 = v6 == "uint16" && v7 == 6;
  v9 = *(_DWORD *)(v4 + 4);
  if (v10)
    goto LABEL_43;
LABEL_18:
  if (v6 == "uint32")
    v8 = 1;
  if (v8)
  {
    if (v7 != 6 || v6 != "uint32")
      goto LABEL_50;
    goto LABEL_32;
  }
  if (!v9)
    goto LABEL_32;
  if ((v5 & 4) == 0)
  {
    if (*(_WORD *)v6 != 117)
      goto LABEL_50;
    if (*(_QWORD *)(v6 + 4) != 0x3200330074006ELL || *(_QWORD *)(v6 + 2) != 0x330074006E0069)
      goto LABEL_50;
    goto LABEL_32;
  }
  if (*v6 == 117 && *(_DWORD *)(v6 + 1) == 863268457 && *(_DWORD *)(v6 + 2) == 842232942)
  {
LABEL_32:
    v12 = &off_1E32809C8;
LABEL_44:
    v13 = *((unsigned __int8 *)v12 + 16);
    v14 = 1;
    goto LABEL_51;
  }
LABEL_50:
  v14 = 0;
  v13 = 0;
LABEL_51:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v13 | (v14 << 8);
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSGPUInternalError>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  WTF::StringImpl *v10;
  JSCell *v11;
  JSC::JSCell *v12;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v14;
  JSC::JSGlobalObject *v15;
  JSC::VM *v16;
  JSC::Structure *v17;
  uint64_t FunctionRealm;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char **v25;
  int v26;
  JSC::JSObject *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  unint64_t SubclassStructure;
  WTF *v34;
  uint64_t v35;
  JSValue v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  int v40;
  WTF::StringImpl *v41;
  WTF *v42;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v37.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v37);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 48);
  v42 = (WTF *)v6;
  if ((v6 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v6 + 5) == 2)
  {
    v7 = *(WTF::StringImpl **)(v6 + 8);
    if ((v7 & 1) != 0)
    {
      v7 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v6, a1);
      if (!v7)
        goto LABEL_7;
    }
    else if (!v7)
    {
LABEL_7:
      v41 = v7;
      goto LABEL_8;
    }
    *(_DWORD *)v7 += 2;
    goto LABEL_7;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v42, a1);
LABEL_8:
  if (*((_DWORD *)v3 + 20))
  {
    v8 = v41;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v3))
    {
      v40 = 1;
      v41 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v38);
        else
          *(_DWORD *)v8 -= 2;
      }
      v11 = 0;
      v35 = 1;
      goto LABEL_27;
    }
  }
  else
  {
    v8 = v41;
  }
  v40 = 0;
  v39 = 0;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v9 = 1;
  *((_QWORD *)v9 + 1) = v8;
  *((_QWORD *)v9 + 2) = 0;
  v42 = v9;
  v11 = (JSCell *)WebCore::createWrapper<WebCore::GPUInternalError,WebCore::GPUInternalError>(*(_QWORD *)(v5 + 40), &v42);
  v12 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v12 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v12);
    if (Object)
    {
      v15 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v16 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = JSC::getFunctionRealm(a1, Object, v14);
        if (!*((_DWORD *)v16 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) == 0)
        {
          v19 = *(_QWORD *)(FunctionRealm + 3296);
          if (v19)
          {
            v20 = *(_DWORD *)(v19 - 8);
            v21 = ((unint64_t)&WebCore::JSGPUInternalError::s_info
                 + ~((_QWORD)&WebCore::JSGPUInternalError::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUInternalError::s_info
                                                                            + ~((_QWORD)&WebCore::JSGPUInternalError::s_info << 32)) >> 22);
            v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
            v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
            v24 = v20 & ((v23 >> 31) ^ v23);
            v25 = *(char ***)(v19 + 16 * v24);
            if (v25 == &WebCore::JSGPUInternalError::s_info)
            {
LABEL_19:
              v27 = *(JSC::JSObject **)(v19 + 16 * v24 + 8);
              if (v27)
              {
LABEL_21:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v15, v27, v17);
                if (!*((_DWORD *)v16 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) == 0)
                  JSC::JSObject::setStructure(v11, v16, SubclassStructure);
                goto LABEL_23;
              }
            }
            else
            {
              v26 = 1;
              while (v25)
              {
                v24 = ((_DWORD)v24 + v26) & v20;
                v25 = *(char ***)(v19 + 16 * v24);
                ++v26;
                if (v25 == &WebCore::JSGPUInternalError::s_info)
                  goto LABEL_19;
              }
            }
          }
          Structure = WebCore::JSGPUInternalErrorPrototype::createStructure((uint64_t *)v16, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v31 = (JSC::JSCell *)WebCore::JSGPUInternalErrorPrototype::create(v16, Structure, v29, v30);
          v32 = WebCore::JSGPUInternalError::createStructure((uint64_t *)v16, FunctionRealm, v31);
          v27 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v32, (uint64_t)&WebCore::JSGPUInternalError::s_info);
          goto LABEL_21;
        }
      }
    }
  }
LABEL_23:
  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
    v11 = 0;
  v34 = v42;
  v42 = 0;
  if (v34)
    WTF::RefCounted<WebCore::GPUInternalError>::deref(v34, v10);
  v35 = 0;
LABEL_27:
  ((void (*)(WTF **, uint64_t *))off_1E3282908[v35])(&v42, &v39);
  return v11;
}

WTF *WebCore::JSGPUInternalError::destroy(WebCore::JSGPUInternalError *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
    return WTF::RefCounted<WebCore::GPUInternalError>::deref(result, a2);
  return result;
}

uint64_t WebCore::JSGPUInternalError::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUInternalErrorPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUInternalErrorPrototype::create(WebCore::JSGPUInternalErrorPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSGPUInternalError::s_info, &WebCore::JSGPUInternalErrorPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSGPUInternalError>,(WebCore::DOMConstructorID)25>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 200);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSGPUInternalError>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000001, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUInternalError::s_info + ~((_QWORD)&WebCore::JSGPUInternalError::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUInternalError::s_info + ~((_QWORD)&WebCore::JSGPUInternalError::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUInternalError::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUInternalError::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUInternalErrorPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUInternalErrorPrototype::create((WebCore::JSGPUInternalErrorPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUInternalError::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUInternalError::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 200) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUInternalErrorConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUInternalErrorPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSGPUInternalError>,(WebCore::DOMConstructorID)25>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUInternalError_message(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v2)
    v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(v2 + 8);
  if (!v4)
    return *(_QWORD *)(v3 + 41968);
  v5 = *(_DWORD *)(v4 + 4);
  if (!v5)
    return *(_QWORD *)(v3 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    return *(_QWORD *)(v3 + 8 * v9 + 42216);
  }
LABEL_6:
  v6 = *(_QWORD *)(v3 + 64760);
  if (!v6 || v4 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

uint64_t WebCore::jsGPUInternalError_stack(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v10;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = *(_QWORD *)(a1 + 56);
  v3 = v10;
  if (!v10 || (v4 = *((_DWORD *)v10 + 1)) == 0)
  {
    v5 = *(_QWORD *)(v2 + 41968);
LABEL_7:
    if (!v3)
      return v5;
    goto LABEL_15;
  }
  if (v4 != 1)
    goto LABEL_4;
  v6 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
  if ((*((_BYTE *)v10 + 16) & 4) != 0)
  {
    v7 = *v6;
LABEL_14:
    v5 = *(_QWORD *)(v2 + 8 * v7 + 42216);
    goto LABEL_15;
  }
  v8 = *(unsigned __int16 *)v6;
  if (v8 <= 0xFF)
  {
    v7 = v8;
    goto LABEL_14;
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v10 != *(WTF::StringImpl **)(v5 + 8))
  {
    v5 = JSC::jsStringWithCacheSlowCase();
    v3 = v10;
    goto LABEL_7;
  }
LABEL_15:
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v3);
  else
    *(_DWORD *)v3 -= 2;
  return v5;
}

uint64_t WebCore::JSGPUInternalErrorOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

WTF *WebCore::JSGPUInternalErrorOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  return WTF::RefCounted<WebCore::GPUInternalError>::deref(v3, a2);
}

unint64_t WebCore::createWrapper<WebCore::GPUInternalError,WebCore::GPUInternalError>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSGPUInternalError::s_info + ~((_QWORD)&WebCore::JSGPUInternalError::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUInternalError::s_info + ~((_QWORD)&WebCore::JSGPUInternalError::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSGPUInternalError::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSGPUInternalError::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSGPUInternalErrorPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSGPUInternalErrorPrototype::create((WebCore::JSGPUInternalErrorPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSGPUInternalError::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSGPUInternalError::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 200);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 200))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 200);
    *(_QWORD *)(v26 + 200) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 200);
  *(_QWORD *)(v22 + 200) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE335850 & 1) == 0)
  {
    qword_1EE335848 = (uint64_t)&off_1E3282750;
    byte_1EE335850 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335848;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

uint64_t WebCore::parseEnumeration<WebCore::GPULoadOp>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  int v9;
  int v10;
  char **v13;
  uint64_t v17;
  unint64_t v18;

  v3 = a1;
  v18 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
LABEL_34:
        v10 = 0;
        v9 = 0;
        return v10 | (v9 << 8);
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v18, a1);
  v4 = v17;
  if (!v17)
    goto LABEL_34;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "clear" && v7 == 5)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 99 || *(_WORD *)(v6 + 1) != 25964 || *(_WORD *)(v6 + 3) != 29281)
        goto LABEL_16;
    }
    else if (*(_WORD *)v6 != 99 || *(_QWORD *)(v6 + 2) != 0x7200610065006CLL)
    {
      goto LABEL_16;
    }
LABEL_37:
    v13 = &WebCore::parseEnumerationFromString<WebCore::GPULoadOp>(WTF::String const&)::mappings;
    goto LABEL_38;
  }
  if (v6 == "clear" && v7 == 5)
    goto LABEL_37;
  if (v6 == "load" || v7 != 4)
  {
    if (v7 != 4 || v6 != "load")
      goto LABEL_16;
    goto LABEL_30;
  }
  if ((v5 & 4) == 0)
  {
    if (*(_WORD *)v6 != 108)
      goto LABEL_16;
    if (*((_DWORD *)v6 + 1) != 6553697 || *(_DWORD *)(v6 + 2) != 6357103)
      goto LABEL_16;
    goto LABEL_30;
  }
  if (*v6 != 108 || *(_WORD *)(v6 + 1) != 24943 || *((_WORD *)v6 + 1) != 25697)
  {
LABEL_16:
    v9 = 0;
    v10 = 0;
    goto LABEL_39;
  }
LABEL_30:
  v13 = &off_1E3280CF8;
LABEL_38:
  v10 = *((unsigned __int8 *)v13 + 16);
  v9 = 1;
LABEL_39:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v10 | (v9 << 8);
}

WTF *WebCore::JSGPUMapMode::destroy(WebCore::JSGPUMapMode *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSGPUMapMode::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUMapMode>,(WebCore::DOMConstructorID)26>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  JSC::Heap *v8;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  int v24;
  uint64_t v25;
  JSC::JSCell *v26;
  JSC::JSObject *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  uint64_t v49;
  int *v50;
  JSC::Structure **v51;
  int *v52;
  int v53;
  int v54;
  JSC::Structure *v55;
  int v56;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 208);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v47) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  v8 = (JSC::Heap *)(a1 + 192);
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v42 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v42);
    v5[2] = SlowCase + (int)v42;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v47, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUMapMode>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v43 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v43);
    v10[2848] = v2 + (int)v43;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v47 = 0;
  v48 = v2;
  v49 = 0x1000000FFFFFFFFLL;
  v50 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v47);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v47);
  v14 = v47;
  v47 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v47 = 0;
  v48 = v2;
  v49 = 0x1000000FFFFFFFFLL;
  v50 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v47);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(a2 + 3296);
  if (!v17)
    goto LABEL_21;
  v18 = *(_DWORD *)(v17 - 8);
  v19 = ((unint64_t)&WebCore::JSGPUMapMode::s_info + ~((_QWORD)&WebCore::JSGPUMapMode::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUMapMode::s_info + ~((_QWORD)&WebCore::JSGPUMapMode::s_info << 32)) >> 22);
  v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
  v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
  v22 = v18 & ((v21 >> 31) ^ v21);
  v23 = *(char ***)(v17 + 16 * v22);
  if (v23 != &WebCore::JSGPUMapMode::s_info)
  {
    v24 = 1;
    while (v23)
    {
      v22 = ((_DWORD)v22 + v24) & v18;
      v23 = *(char ***)(v17 + 16 * v22);
      ++v24;
      if (v23 == &WebCore::JSGPUMapMode::s_info)
        goto LABEL_20;
    }
LABEL_21:
    v26 = *(JSC::JSCell **)(a2 + 656);
    LODWORD(v47) = 23;
    if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
    {
      v27 = (JSC::JSObject *)JSC::JSCell::getObject(v26);
      if (v27)
        JSC::JSObject::didBecomePrototype(v27, (JSC::VM *)a1);
    }
    v28 = (uint64_t *)(a1 + 38904);
    v29 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v29 = v5[2];
      if ((v29 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v29 = JSC::LocalAllocator::allocateSlowCase();
LABEL_26:
        *(_DWORD *)v29 = 0;
        MEMORY[0x19AEA4278](v29, a1, a2, v26, &v47, &WebCore::JSGPUMapModePrototype::s_info, 0, 0);
        if (*(_BYTE *)(a1 + 755))
          __dmb(0xAu);
        *(_DWORD *)(v29 + 16) |= 0x80000u;
        v30 = *v28;
        if (*(_QWORD *)(a1 + 38904) >= *(_QWORD *)(a1 + 38912))
        {
          v30 = *(_QWORD *)(a1 + 38920);
          if ((v30 & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
            *(_DWORD *)v30 = 0;
            v31 = *(_DWORD *)(v29 + 8);
            *(_DWORD *)v30 = v29 >> 4;
            *(_DWORD *)(v30 + 4) = v31;
            *(_QWORD *)(v30 + 8) = 0;
            if (*(_BYTE *)(a1 + 755))
              __dmb(0xAu);
            JSC::reifyStaticProperties<3u>((JSC::VM *)a1, (uint64_t)&WebCore::JSGPUMapMode::s_info, &WebCore::JSGPUMapModePrototypeTableValues, (JSC::JSObject *)v30);
            v32 = *(_QWORD *)(v5[227] + 2776);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v34 = JSC::JSString::create(a1, &v47);
            v35 = v47;
            v47 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v33);
              else
                *(_DWORD *)v35 -= 2;
            }
            v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
            v56 = *(_DWORD *)v30;
            v55 = v36;
            v37 = JSC::Structure::outOfLineCapacity(v36);
            v53 = 0;
            v54 = v37;
            v47 = (WTF::StringImpl *)&v54;
            v48 = v30;
            v49 = a1;
            v50 = &v56;
            v51 = &v55;
            v52 = &v53;
            JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)a1, v32, 6, (uint64_t)&v47);
            if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
              JSC::VM::invalidateStructureChainIntegrity();
            JSC::JSObject::putDirectOffset(v30, a1, v53, v34);
            *((_DWORD *)v36 + 4) |= 0x10u;
            LODWORD(v47) = 23;
            if ((v30 & 0xFFFE000000000002) == 0)
            {
              v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
              if (v38)
                JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)a1);
            }
            v39 = *v5;
            v8 = (JSC::Heap *)(a1 + 192);
            if (*v5 >= (unint64_t)v5[1])
            {
              v39 = v5[2];
              if ((v39 & 1) != 0)
              {
                JSC::sanitizeStackForVM();
                v39 = JSC::LocalAllocator::allocateSlowCase();
                goto LABEL_40;
              }
              v46 = *(_QWORD *)(v39 + 8) ^ v5[3];
              v5[1] = v39 + HIDWORD(v46);
              v5[2] = v39 + (int)v46;
            }
            *v5 = v39 + 128;
LABEL_40:
            *(_DWORD *)v39 = 0;
            MEMORY[0x19AEA4278](v39, a1, a2, v30, &v47, &WebCore::JSGPUMapMode::s_info, 0, 0);
            if (*(_BYTE *)(a1 + 755))
              __dmb(0xAu);
            v25 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSGPUMapMode::s_info);
            goto LABEL_43;
          }
          v45 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(a1 + 38928);
          *(_QWORD *)(a1 + 38912) = v30 + HIDWORD(v45);
          *(_QWORD *)(a1 + 38920) = v30 + (int)v45;
        }
        *v28 = v30 + 16;
        goto LABEL_30;
      }
      v44 = *(_QWORD *)(v29 + 8) ^ v5[3];
      v5[1] = v29 + HIDWORD(v44);
      v5[2] = v29 + (int)v44;
    }
    *v5 = v29 + 128;
    goto LABEL_26;
  }
LABEL_20:
  v25 = *(_QWORD *)(v17 + 16 * v22 + 8);
  if (!v25)
    goto LABEL_21;
LABEL_43:
  v40 = *(_QWORD *)(v25 + 48);
  v47 = 0;
  v48 = v2;
  v49 = 0x1000000FFFFFFFFLL;
  v50 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v40, 14, (uint64_t)&v47);
  JSC::reifyStaticProperties<2u>((JSC::VM *)a1, (uint64_t)&WebCore::JSGPUMapMode::s_info, (uint64_t)&WebCore::JSGPUMapModeConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 208) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath(v8, (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUMapModeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUMapModePrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUMapMode>,(WebCore::DOMConstructorID)26>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::convertDictionary<WebCore::GPUMultisampleState>@<X0>(JSC::JSCell *this@<X1>, unint64_t result@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  BOOL v5;
  int v6;
  JSC::JSGlobalObject *v7;
  uint64_t Object;
  JSC::Structure *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  JSC::VM *v12;
  double v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  int *v24;
  int v25;
  __int16 v26;
  char v27;
  WTF::StringImpl *v28;

  v4 = *(JSC::VM **)(result + 56);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    v7 = (JSC::JSGlobalObject *)result;
    if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
    {
      result = JSC::throwTypeError();
      goto LABEL_36;
    }
    v9 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v11 = JSC::JSObject::get(v9, v7, (unint64_t)v28);
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v10);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (*((_DWORD *)v4 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
      if ((result & 1) != 0)
        goto LABEL_36;
    }
    if (v11 == 10)
    {
      v5 = 0;
      goto LABEL_16;
    }
    v12 = (JSC::VM *)*((_QWORD *)v7 + 7);
    if (v11 >= 0xFFFE000000000000)
    {
      v21 = (_DWORD)v11 == 0;
    }
    else
    {
      *(_QWORD *)&v13 = v11 - 0x2000000000000;
      if (v11 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v5 = v13 > 0.0 || v13 < 0.0;
LABEL_15:
        if (*((_DWORD *)v12 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v12);
          if ((result & 1) != 0)
            goto LABEL_36;
        }
LABEL_16:
        WTF::AtomStringImpl::addLiteral();
        v15 = JSC::JSObject::get(v9, v7, (unint64_t)v28);
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v14);
          else
            *(_DWORD *)v28 -= 2;
        }
        if (*((_DWORD *)v4 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
          if ((result & 1) != 0)
            goto LABEL_36;
        }
        if (v15 == 10)
        {
          v6 = 1;
        }
        else
        {
          result = (unint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(v7, v15, &v28);
          v6 = (int)v28;
          if ((unint64_t)v28 >> 32)
            goto LABEL_36;
        }
        WTF::AtomStringImpl::addLiteral();
        v16 = v28;
        result = JSC::JSObject::get(v9, v7, (unint64_t)v28);
        v18 = result;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            result = WTF::StringImpl::destroy(v16, v17);
          else
            *(_DWORD *)v16 -= 2;
        }
        if (!*((_DWORD *)v4 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v4), (result & 1) == 0))
        {
          if (v18 == 10)
            goto LABEL_28;
          result = (unint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(v7, v18, &v28);
          v19 = (int)v28;
          if (!((unint64_t)v28 >> 32))
            goto LABEL_30;
        }
LABEL_36:
        v20 = 1;
        goto LABEL_31;
      }
      if ((v11 & 0xFFFE000000000002) != 0)
      {
        v5 = v11 == 7;
        goto LABEL_15;
      }
      v22 = *(unsigned __int8 *)(v11 + 5);
      if (v22 == 3)
      {
        v25 = *(_DWORD *)(v11 + 8);
      }
      else
      {
        if (v22 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v5 = 1;
            goto LABEL_15;
          }
          v21 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28) == (_QWORD)v7;
          goto LABEL_60;
        }
        v23 = *(_QWORD *)(v11 + 8);
        if ((v23 & 1) != 0)
          v24 = (int *)(v11 + 16);
        else
          v24 = (int *)(v23 + 4);
        v25 = *v24;
      }
      v21 = v25 == 0;
    }
LABEL_60:
    v5 = !v21;
    goto LABEL_15;
  }
  v5 = 0;
  v6 = 1;
LABEL_28:
  v19 = -1;
LABEL_30:
  v20 = 0;
  *(_DWORD *)a3 = v6;
  *(_DWORD *)(a3 + 4) = v19;
  *(_BYTE *)(a3 + 8) = v5;
  *(_WORD *)(a3 + 9) = v26;
  *(_BYTE *)(a3 + 11) = v27;
LABEL_31:
  *(_DWORD *)(a3 + 12) = v20;
  return result;
}

uint64_t WebCore::convertDictionary<WebCore::GPUOrigin2DDict>(uint64_t result, JSC::JSGlobalObject *a2, JSC::JSCell *this)
{
  uint64_t v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  uint64_t Object;
  JSC::Structure *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  int v15;
  WTF::StringImpl *v16;

  v3 = result;
  v4 = (_DWORD *)*((_QWORD *)a2 + 7);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
    {
      result = JSC::throwTypeError();
      goto LABEL_24;
    }
    v9 = (JSC::Structure *)Object;
    JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v4 + 10492));
    v11 = JSC::JSObject::get(v9, a2, (unint64_t)v16);
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v10);
      else
        *(_DWORD *)v16 -= 2;
    }
    if (v4[20])
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
      if ((result & 1) != 0)
        goto LABEL_24;
    }
    if (v11 == 10)
    {
      v6 = 0;
    }
    else
    {
      result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a2, v11, &v16);
      v6 = v16;
      if ((unint64_t)v16 >> 32)
        goto LABEL_24;
    }
    JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v4 + 10492));
    v12 = v16;
    result = JSC::JSObject::get(v9, a2, (unint64_t)v16);
    v14 = result;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        result = WTF::StringImpl::destroy(v12, v13);
      else
        *(_DWORD *)v12 -= 2;
    }
    if (!v4[20] || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4), (result & 1) == 0))
    {
      if (v14 == 10)
      {
        v5 = 0;
        goto LABEL_19;
      }
      result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a2, v14, &v16);
      v5 = v16;
      if (!((unint64_t)v16 >> 32))
        goto LABEL_19;
    }
LABEL_24:
    v15 = 1;
    goto LABEL_20;
  }
  v5 = 0;
  v6 = 0;
LABEL_19:
  v15 = 0;
  *(_QWORD *)v3 = v6 | ((_QWORD)v5 << 32);
LABEL_20:
  *(_DWORD *)(v3 + 8) = v15;
  return result;
}

unint64_t WebCore::convertDictionary<WebCore::GPUOrigin3DDict>(unint64_t result, JSC::JSGlobalObject *a2, JSC::JSCell *this)
{
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  int v6;
  int v7;
  uint64_t Object;
  JSC::Structure *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  int v19;
  WTF::StringImpl *v20;

  v3 = (_DWORD *)result;
  v4 = (_DWORD *)*((_QWORD *)a2 + 7);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
    {
      result = JSC::throwTypeError();
      goto LABEL_32;
    }
    v10 = (JSC::Structure *)Object;
    JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v4 + 10492));
    v12 = JSC::JSObject::get(v10, a2, (unint64_t)v20);
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v11);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (v4[20])
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
      if ((result & 1) != 0)
        goto LABEL_32;
    }
    if (v12 == 10)
    {
      v6 = 0;
    }
    else
    {
      result = (unint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a2, v12, &v20);
      v6 = (int)v20;
      if ((unint64_t)v20 >> 32)
        goto LABEL_32;
    }
    JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v4 + 10492));
    v13 = v20;
    v15 = JSC::JSObject::get(v10, a2, (unint64_t)v20);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v14);
      else
        *(_DWORD *)v13 -= 2;
    }
    if (v4[20])
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
      if ((result & 1) != 0)
        goto LABEL_32;
    }
    if (v15 == 10)
    {
      v7 = 0;
    }
    else
    {
      result = (unint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a2, v15, &v20);
      v7 = (int)v20;
      if ((unint64_t)v20 >> 32)
        goto LABEL_32;
    }
    JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v4 + 10492));
    v16 = v20;
    result = JSC::JSObject::get(v10, a2, (unint64_t)v20);
    v18 = result;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        result = WTF::StringImpl::destroy(v16, v17);
      else
        *(_DWORD *)v16 -= 2;
    }
    if (!v4[20] || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4), (result & 1) == 0))
    {
      if (v18 == 10)
      {
        v5 = 0;
        goto LABEL_26;
      }
      result = (unint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a2, v18, &v20);
      v5 = (int)v20;
      if (!((unint64_t)v20 >> 32))
        goto LABEL_26;
    }
LABEL_32:
    v19 = 1;
    goto LABEL_27;
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
LABEL_26:
  v19 = 0;
  *v3 = v6;
  v3[1] = v7;
  v3[2] = v5;
LABEL_27:
  v3[3] = v19;
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSGPUOutOfMemoryError>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  void *v10;
  JSCell *v11;
  JSC::JSCell *v12;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v14;
  JSC::JSGlobalObject *v15;
  JSC::VM *v16;
  JSC::Structure *v17;
  uint64_t FunctionRealm;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char **v25;
  int v26;
  JSC::JSObject *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  unint64_t SubclassStructure;
  WTF *v34;
  uint64_t v35;
  WTF *v37;
  WTF::StringImpl *v38;
  JSValue v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  int v42;
  WTF::StringImpl *v43;
  WTF *v44;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v39.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v39);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 48);
  v44 = (WTF *)v6;
  if ((v6 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v6 + 5) == 2)
  {
    v7 = *(WTF::StringImpl **)(v6 + 8);
    if ((v7 & 1) != 0)
    {
      v7 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v6, a1);
      if (!v7)
        goto LABEL_7;
    }
    else if (!v7)
    {
LABEL_7:
      v43 = v7;
      goto LABEL_8;
    }
    *(_DWORD *)v7 += 2;
    goto LABEL_7;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v44, a1);
LABEL_8:
  if (*((_DWORD *)v3 + 20))
  {
    v8 = v43;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v3))
    {
      v42 = 1;
      v43 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v40);
        else
          *(_DWORD *)v8 -= 2;
      }
      v11 = 0;
      v35 = 1;
      goto LABEL_28;
    }
  }
  else
  {
    v8 = v43;
  }
  v42 = 0;
  v41 = 0;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v9 = 1;
  *((_QWORD *)v9 + 1) = v8;
  *((_QWORD *)v9 + 2) = 0;
  v44 = v9;
  v11 = (JSCell *)WebCore::createWrapper<WebCore::GPUOutOfMemoryError,WebCore::GPUOutOfMemoryError>(*(_QWORD *)(v5 + 40), &v44);
  v12 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v12 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v12);
    if (Object)
    {
      v15 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v16 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = JSC::getFunctionRealm(a1, Object, v14);
        if (!*((_DWORD *)v16 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) == 0)
        {
          v19 = *(_QWORD *)(FunctionRealm + 3296);
          if (v19)
          {
            v20 = *(_DWORD *)(v19 - 8);
            v21 = ((unint64_t)&WebCore::JSGPUOutOfMemoryError::s_info
                 + ~((_QWORD)&WebCore::JSGPUOutOfMemoryError::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUOutOfMemoryError::s_info
                                                                               + ~((_QWORD)&WebCore::JSGPUOutOfMemoryError::s_info << 32)) >> 22);
            v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
            v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
            v24 = v20 & ((v23 >> 31) ^ v23);
            v25 = *(char ***)(v19 + 16 * v24);
            if (v25 == &WebCore::JSGPUOutOfMemoryError::s_info)
            {
LABEL_19:
              v27 = *(JSC::JSObject **)(v19 + 16 * v24 + 8);
              if (v27)
              {
LABEL_21:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v15, v27, v17);
                if (!*((_DWORD *)v16 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) == 0)
                  JSC::JSObject::setStructure(v11, v16, SubclassStructure);
                goto LABEL_23;
              }
            }
            else
            {
              v26 = 1;
              while (v25)
              {
                v24 = ((_DWORD)v24 + v26) & v20;
                v25 = *(char ***)(v19 + 16 * v24);
                ++v26;
                if (v25 == &WebCore::JSGPUOutOfMemoryError::s_info)
                  goto LABEL_19;
              }
            }
          }
          Structure = WebCore::JSGPUOutOfMemoryErrorPrototype::createStructure((uint64_t *)v16, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v31 = (JSC::JSCell *)WebCore::JSGPUOutOfMemoryErrorPrototype::create(v16, Structure, v29, v30);
          v32 = WebCore::JSGPUOutOfMemoryError::createStructure((uint64_t *)v16, FunctionRealm, v31);
          v27 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v32, (uint64_t)&WebCore::JSGPUOutOfMemoryError::s_info);
          goto LABEL_21;
        }
      }
    }
  }
LABEL_23:
  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
    v11 = 0;
  v34 = v44;
  if (v44)
  {
    if (*(_DWORD *)v44 == 1)
    {
      v37 = (WTF *)*((_QWORD *)v44 + 2);
      *((_QWORD *)v44 + 2) = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 1)
          WTF::fastFree(v37, v10);
        else
          --*(_DWORD *)v37;
      }
      v38 = (WTF::StringImpl *)*((_QWORD *)v34 + 1);
      *((_QWORD *)v34 + 1) = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v10);
        else
          *(_DWORD *)v38 -= 2;
      }
      WTF::fastFree(v34, v10);
    }
    else
    {
      --*(_DWORD *)v44;
    }
  }
  v35 = 0;
LABEL_28:
  ((void (*)(WTF **, uint64_t *))off_1E3282908[v35])(&v44, &v41);
  return v11;
}

uint64_t WebCore::JSGPUOutOfMemoryError::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  WTF *v3;
  WTF::StringImpl *v4;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (WTF *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 1)
          WTF::fastFree(v3, a2);
        else
          --*(_DWORD *)v3;
      }
      v4 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGPUOutOfMemoryError::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUOutOfMemoryErrorPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUOutOfMemoryErrorPrototype::create(WebCore::JSGPUOutOfMemoryErrorPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSGPUOutOfMemoryError::s_info, (uint64_t)&WebCore::JSGPUOutOfMemoryErrorPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSGPUOutOfMemoryError>,(WebCore::DOMConstructorID)27>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 216);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSGPUOutOfMemoryError>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000001, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUOutOfMemoryError::s_info
         + ~((_QWORD)&WebCore::JSGPUOutOfMemoryError::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUOutOfMemoryError::s_info
                                                                       + ~((_QWORD)&WebCore::JSGPUOutOfMemoryError::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUOutOfMemoryError::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUOutOfMemoryError::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUOutOfMemoryErrorPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUOutOfMemoryErrorPrototype::create((WebCore::JSGPUOutOfMemoryErrorPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUOutOfMemoryError::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUOutOfMemoryError::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 216) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUOutOfMemoryErrorConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUOutOfMemoryErrorPrototype::s_info != (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSGPUOutOfMemoryError>,(WebCore::DOMConstructorID)27>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUOutOfMemoryError_message(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::JSGPUOutOfMemoryErrorOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPUOutOfMemoryErrorOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  WTF::StringImpl *v25;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (WTF *)*((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        WTF::fastFree(v24, a2);
      else
        --*(_DWORD *)v24;
    }
    v25 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v25 -= 2;
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::createWrapper<WebCore::GPUOutOfMemoryError,WebCore::GPUOutOfMemoryError>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSGPUOutOfMemoryError::s_info
        + ~((_QWORD)&WebCore::JSGPUOutOfMemoryError::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUOutOfMemoryError::s_info
                                                                      + ~((_QWORD)&WebCore::JSGPUOutOfMemoryError::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSGPUOutOfMemoryError::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSGPUOutOfMemoryError::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSGPUOutOfMemoryErrorPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSGPUOutOfMemoryErrorPrototype::create((WebCore::JSGPUOutOfMemoryErrorPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSGPUOutOfMemoryError::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSGPUOutOfMemoryError::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 216);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 216))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 216);
    *(_QWORD *)(v26 + 216) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 216);
  *(_QWORD *)(v22 + 216) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE335860 & 1) == 0)
  {
    qword_1EE335858 = (uint64_t)&off_1E3282780;
    byte_1EE335860 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335858;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::GPUOutOfMemoryError>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  WTF *v14;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF *v18;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WTF **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WTF **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v18 = a3;
  v12 = WebCore::createWrapper<WebCore::GPUOutOfMemoryError,WebCore::GPUOutOfMemoryError>(a2, &v18);
  v14 = v18;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
    {
      v16 = (WTF *)*((_QWORD *)v18 + 2);
      *((_QWORD *)v18 + 2) = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
          WTF::fastFree(v16, v13);
        else
          --*(_DWORD *)v16;
      }
      v17 = (WTF::StringImpl *)*((_QWORD *)v14 + 1);
      *((_QWORD *)v14 + 1) = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v13);
        else
          *(_DWORD *)v17 -= 2;
      }
      WTF::fastFree(v14, v13);
    }
    else
    {
      --*(_DWORD *)v18;
    }
  }
  return v12;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSGPUPipelineError>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  JSC::VM *v8;
  WTF::StringImpl *v9;
  JSC::JSCell *v10;
  uint64_t Object;
  JSC::Structure *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  JSCell *v16;
  uint64_t v17;
  JSC::VM *v19;
  const char **v20;
  int v21;
  const char *v22;
  int v23;
  uint64_t v24;
  char **v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WebCore::JSDOMGlobalObject *v28;
  WTF::StringImpl *v29;
  JSC::JSCell *v30;
  JSC::JSGlobalObject *v31;
  JSC::JSObject *v32;
  JSC::JSGlobalObject *v33;
  JSC::VM *v34;
  JSC::JSObject *v35;
  JSC::Structure *v36;
  JSC::VM *FunctionRealm;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char **v44;
  int v45;
  uint64_t v46;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v48;
  JSC::Structure *v49;
  JSC::JSCell *v50;
  uint64_t v51;
  unint64_t SubclassStructure;
  JSValue v53;
  uint16x8_t v54;
  uint16x8_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v58;
  int v59;
  JSC::VM *v60[2];
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v53.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v53);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 48);
  if (v6 == 10)
  {
    v7 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v7 += 2;
    v58 = v7;
    v59 = 0;
    v8 = v3;
    goto LABEL_15;
  }
  v62 = *(WTF::StringImpl **)(a2 + 48);
  if ((v6 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v6 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v62, a1);
    goto LABEL_12;
  }
  v9 = *(WTF::StringImpl **)(v6 + 8);
  if ((v9 & 1) != 0)
  {
    v9 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v6, a1);
    if (!v9)
      goto LABEL_11;
    goto LABEL_10;
  }
  if (v9)
LABEL_10:
    *(_DWORD *)v9 += 2;
LABEL_11:
  v61 = v9;
LABEL_12:
  if (*((_DWORD *)v3 + 20))
  {
    v7 = v61;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v3))
    {
      v59 = 1;
      v61 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v56);
        else
          *(_DWORD *)v7 -= 2;
      }
      v16 = 0;
      v17 = 1;
      goto LABEL_26;
    }
  }
  else
  {
    v7 = v61;
  }
  v58 = v7;
  v59 = 0;
  v8 = (JSC::VM *)*((_QWORD *)a1 + 7);
LABEL_15:
  v10 = *(JSC::JSCell **)(a2 + 56);
  v60[0] = v8;
  if (((unint64_t)v10 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)v10 & 0xFFFE000000000002) != 0)
      goto LABEL_96;
    Object = JSC::JSCell::getObject(v10);
    if (!Object)
      goto LABEL_96;
    v12 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v13 = v62;
    v15 = JSC::JSObject::get(v12, a1, (unint64_t)v62);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v14);
      else
        *(_DWORD *)v13 -= 2;
    }
    if (*((_DWORD *)v60[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v60[0]) & 1) != 0)
      goto LABEL_24;
    if (v15 == 10)
      goto LABEL_23;
    v19 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v60[1] = v19;
    v62 = (WTF::StringImpl *)v15;
    if ((v15 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v15 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v62, a1);
      v20 = (const char **)v61;
      if (v61)
        goto LABEL_34;
      goto LABEL_95;
    }
    v20 = *(const char ***)(v15 + 8);
    if ((v20 & 1) != 0)
    {
      v20 = *(const char ***)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v15, a1);
      if (!v20)
      {
LABEL_33:
        v61 = (WTF::StringImpl *)v20;
        if (v20)
        {
LABEL_34:
          v21 = *((_DWORD *)v20 + 4);
          v22 = v20[1];
          v23 = *((_DWORD *)v20 + 1);
          if (v22 == "internal" || v23 != 8)
          {
            if (v22 != "internal" || v23 != 8)
            {
              if (v22 == "validation" || v23 != 10)
              {
                if (v23 != 10 || v22 != "validation")
                  goto LABEL_40;
              }
              else if ((v21 & 4) != 0)
              {
                if (*v22 != 118
                  || *(_QWORD *)(v22 + 1) != 0x6F69746164696C61
                  || *(_QWORD *)(v22 + 2) != 0x6E6F69746164696CLL)
                {
                  goto LABEL_40;
                }
              }
              else
              {
                if (*(_WORD *)v22 != 118)
                  goto LABEL_40;
                v54 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v22 + 2), (int16x8_t)xmmword_1968BFC60);
                v54.i16[0] = vminvq_u16(v54);
                if (!v54.i32[0])
                  goto LABEL_40;
                v55 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v22 + 4), (int16x8_t)xmmword_1968BFC70);
                v55.i16[0] = vminvq_u16(v55);
                if (!v55.i32[0])
                  goto LABEL_40;
              }
              v25 = &off_1E3281658;
LABEL_44:
              v24 = *((unsigned int *)v25 + 4) | 0x100000000;
LABEL_45:
              v61 = 0;
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v20, v14);
              else
                *(_DWORD *)v20 -= 2;
LABEL_47:
              if (*((_DWORD *)v19 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) != 0)
                goto LABEL_24;
              if ((v24 & 0x100000000) != 0)
              {
                v58 = 0;
                v26 = WTF::fastMalloc((WTF *)0x28);
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                *(_DWORD *)(v26 + 8) = 1;
                *(_QWORD *)v26 = off_1E334F098;
                *(_BYTE *)(v26 + 12) = 0;
                v29 = v62;
                if (v62)
                  *(_DWORD *)v62 += 2;
                *(_QWORD *)(v26 + 16) = v29;
                if (v7)
                  *(_DWORD *)v7 += 2;
                *(_QWORD *)(v26 + 24) = v7;
                v62 = 0;
                if (v29)
                {
                  if (*(_DWORD *)v29 == 2)
                    WTF::StringImpl::destroy(v29, v27);
                  else
                    *(_DWORD *)v29 -= 2;
                }
                *(_QWORD *)v26 = off_1E334EEB0;
                *(_DWORD *)(v26 + 32) = v24;
                v62 = (WTF::StringImpl *)v26;
                if (v7)
                {
                  if (*(_DWORD *)v7 == 2)
                  {
                    WTF::StringImpl::destroy(v7, v27);
                    if (*(void (***)(WebCore::GPUPipelineError *__hidden))v26 != off_1E334EEB0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x194B6A5F0);
                    }
                  }
                  else
                  {
                    *(_DWORD *)v7 -= 2;
                  }
                }
                v16 = (JSCell *)WebCore::createWrapper<WebCore::GPUPipelineError,WebCore::GPUPipelineError>(*(JSC::VM **)(v5 + 40), &v62, v28);
                v30 = *(JSC::JSCell **)(a2 + 40);
                if (((unint64_t)v30 & 0xFFFE000000000002) != 0)
                  goto LABEL_72;
                v31 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v30);
                if (!v31)
                  goto LABEL_72;
                v33 = v31;
                if (v31 == *(JSC::JSGlobalObject **)(a2 + 24))
                  goto LABEL_72;
                v34 = (JSC::VM *)*((_QWORD *)a1 + 7);
                FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v31, v32);
                if (*((_DWORD *)v34 + 20))
                {
                  if ((JSC::VM::hasExceptionsAfterHandlingTraps(v34) & 1) != 0)
                    goto LABEL_72;
                }
                v38 = *((_QWORD *)FunctionRealm + 412);
                if (v38)
                {
                  v39 = *(_DWORD *)(v38 - 8);
                  v40 = ((unint64_t)&WebCore::JSGPUPipelineError::s_info
                       + ~((_QWORD)&WebCore::JSGPUPipelineError::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUPipelineError::s_info
                                                                                  + ~((_QWORD)&WebCore::JSGPUPipelineError::s_info << 32)) >> 22);
                  v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
                  v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
                  v43 = v39 & ((v42 >> 31) ^ v42);
                  v44 = *(char ***)(v38 + 16 * v43);
                  if (v44 == &WebCore::JSGPUPipelineError::s_info)
                  {
LABEL_68:
                    v35 = *(JSC::JSObject **)(v38 + 16 * v43 + 8);
                    if (v35)
                    {
LABEL_70:
                      SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v33, v35, v36);
                      if (!*((_DWORD *)v34 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v34) & 1) == 0)
                        JSC::JSObject::setStructure(v16, v34, SubclassStructure);
LABEL_72:
                      if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
                        v16 = 0;
                      if (v62)
                      {
                        if (*((_DWORD *)v62 + 2) == 1)
                          (*(void (**)(void))(*(_QWORD *)v62 + 8))();
                        else
                          --*((_DWORD *)v62 + 2);
                      }
                      goto LABEL_25;
                    }
                  }
                  else
                  {
                    v45 = 1;
                    while (v44)
                    {
                      v43 = ((_DWORD)v43 + v45) & v39;
                      v44 = *(char ***)(v38 + 16 * v43);
                      ++v45;
                      if (v44 == &WebCore::JSGPUPipelineError::s_info)
                        goto LABEL_68;
                    }
                  }
                }
                v46 = WebCore::getDOMStructure<WebCore::JSDOMException>(v34, FunctionRealm, v35);
                Structure = WebCore::JSGPUPipelineErrorPrototype::createStructure((uint64_t *)v34, (uint64_t)FunctionRealm, *(JSC::JSCell **)(v46 + 48));
                *(_DWORD *)(Structure + 16) |= 0x80000u;
                v50 = (JSC::JSCell *)WebCore::JSGPUPipelineErrorPrototype::create(v34, Structure, v48, v49);
                v51 = WebCore::JSGPUPipelineError::createStructure((uint64_t *)v34, (uint64_t)FunctionRealm, v50);
                v35 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v51, (uint64_t)&WebCore::JSGPUPipelineError::s_info);
                goto LABEL_70;
              }
LABEL_96:
              JSC::throwTypeError();
              goto LABEL_24;
            }
          }
          else if ((v21 & 4) != 0)
          {
            if (*v22 != 105 || *(_DWORD *)(v22 + 1) != 1919251566 || *((_DWORD *)v22 + 1) != 1818324594)
              goto LABEL_40;
          }
          else
          {
            if (*(_WORD *)v22 != 105)
            {
LABEL_40:
              v24 = 0;
              goto LABEL_45;
            }
            v24 = 0;
            if (*(_QWORD *)(v22 + 2) != 0x7200650074006ELL || *((_QWORD *)v22 + 1) != 0x6C0061006E0072)
              goto LABEL_45;
          }
          v25 = &WebCore::parseEnumerationFromString<WebCore::GPUPipelineErrorReason>(WTF::String const&)::mappings;
          goto LABEL_44;
        }
LABEL_95:
        v24 = 0;
        goto LABEL_47;
      }
    }
    else if (!v20)
    {
      goto LABEL_33;
    }
    *(_DWORD *)v20 += 2;
    goto LABEL_33;
  }
LABEL_23:
  WebCore::throwRequiredMemberTypeError((int)a1, (int)v60, "reason", 7, "GPUPipelineErrorInit", 21, "GPUPipelineErrorReason", 23);
LABEL_24:
  v16 = 0;
LABEL_25:
  v17 = 0;
LABEL_26:
  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3282908[v17])(&v62, &v58);
  return v16;
}

uint64_t WebCore::JSGPUPipelineError::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSDOMException::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSDOMException::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSDOMException::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUPipelineErrorPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUPipelineErrorPrototype::create(WebCore::JSGPUPipelineErrorPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSGPUPipelineError::s_info, &WebCore::JSGPUPipelineErrorPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSGPUPipelineError>,(WebCore::DOMConstructorID)28>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 224);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDOMException>,(WebCore::DOMConstructorID)426>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructor<WebCore::JSGPUPipelineError>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSGPUPipelineError::s_info + ~((_QWORD)&WebCore::JSGPUPipelineError::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUPipelineError::s_info + ~((_QWORD)&WebCore::JSGPUPipelineError::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSGPUPipelineError::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSGPUPipelineError::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = WebCore::getDOMStructure<WebCore::JSDOMException>((WebCore::JSDOMException *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSGPUPipelineErrorPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(v27 + 48));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSGPUPipelineErrorPrototype::create((WebCore::JSGPUPipelineErrorPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSGPUPipelineError::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSGPUPipelineError::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 224) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUPipelineErrorConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUPipelineErrorPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSGPUPipelineError>,(WebCore::DOMConstructorID)28>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUPipelineError_reason(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(int *)(*((_QWORD *)a2 + 3) + 32);
  if ((byte_1EE335801 & 1) == 0)
  {
    unk_1EE3358C8 = &dword_1ECE77C80;
    dword_1ECE77C80 += 2;
    dword_1ECE77CA0 += 2;
    unk_1EE3358D0 = &dword_1ECE77CA0;
    byte_1EE335801 = 1;
  }
  v5 = *(_QWORD *)&_MergedGlobals_289[8 * v4 + 200];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsGPUPipelineError_stack(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v10;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = *(_QWORD *)(a1 + 56);
  v3 = v10;
  if (!v10 || (v4 = *((_DWORD *)v10 + 1)) == 0)
  {
    v5 = *(_QWORD *)(v2 + 41968);
LABEL_7:
    if (!v3)
      return v5;
    goto LABEL_15;
  }
  if (v4 != 1)
    goto LABEL_4;
  v6 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
  if ((*((_BYTE *)v10 + 16) & 4) != 0)
  {
    v7 = *v6;
LABEL_14:
    v5 = *(_QWORD *)(v2 + 8 * v7 + 42216);
    goto LABEL_15;
  }
  v8 = *(unsigned __int16 *)v6;
  if (v8 <= 0xFF)
  {
    v7 = v8;
    goto LABEL_14;
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v10 != *(WTF::StringImpl **)(v5 + 8))
  {
    v5 = JSC::jsStringWithCacheSlowCase();
    v3 = v10;
    goto LABEL_7;
  }
LABEL_15:
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v3);
  else
    *(_DWORD *)v3 -= 2;
  return v5;
}

unint64_t WebCore::createWrapper<WebCore::GPUPipelineError,WebCore::GPUPipelineError>(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSDOMException *v15;
  uint64_t v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  WTF *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  unint64_t v45;
  _QWORD *v46;
  WTF *v47;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSGPUPipelineError::s_info + ~((_QWORD)&WebCore::JSGPUPipelineError::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUPipelineError::s_info + ~((_QWORD)&WebCore::JSGPUPipelineError::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSGPUPipelineError::s_info)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSGPUPipelineError::s_info)
          goto LABEL_6;
      }
    }
  }
  v15 = (WebCore::JSDOMException *)*((_QWORD *)a1 + 7);
  v16 = WebCore::getDOMStructure<WebCore::JSDOMException>(v15, a1, a3);
  Structure = WebCore::JSGPUPipelineErrorPrototype::createStructure((uint64_t *)v15, (uint64_t)a1, *(JSC::JSCell **)(v16 + 48));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSGPUPipelineErrorPrototype::create(v15, Structure, v18, v19);
  v21 = WebCore::JSGPUPipelineError::createStructure((uint64_t *)v15, (uint64_t)a1, v20);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, v21, (uint64_t)&WebCore::JSGPUPipelineError::s_info);
LABEL_8:
  v22 = *((_QWORD *)a1 + 7);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 224);
  if (v25)
    goto LABEL_28;
  v26 = *(_QWORD *)(v23 + 22648);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_13:
  v28 = *(_QWORD *)(v26 + 2824);
  if (!*(_QWORD *)(v28 + 224))
  {
    v29 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v47, "IsoSpace T");
    v46 = 0;
    MEMORY[0x19AEA3204](v29, &v47, v22 + 192, v22 + 1872, 32, 8, &v46);
    v31 = (uint64_t)v46;
    v46 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v47;
    v47 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::fastFree(v32, v30);
      else
        --*(_DWORD *)v32;
    }
    v33 = *(_QWORD *)(v28 + 224);
    *(_QWORD *)(v28 + 224) = v29;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v24 + 224);
  *(_QWORD *)(v24 + 224) = v25;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v26);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_28:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_29:
    v25[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v45 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v45);
    v25[5] = SlowCase + (int)v45;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  v39 = *a2;
  *a2 = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  *(_QWORD *)(SlowCase + 24) = v39;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v40 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::DOMException *)::owner = (uint64_t)&off_1E326AD60;
  }
  v47 = v5;
  if ((SlowCase & 8) != 0)
    v41 = (SlowCase - 112) | 1;
  else
    v41 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v41 & 1) != 0)
    v42 = v41 + 47;
  else
    v42 = *(_QWORD *)v41 + 32;
  Allocator = *(_QWORD **)(v42 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v42 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::DOMException *)::owner;
  Allocator[2] = v40;
  v46 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v47, (uint64_t *)&v46);
  if (v46)
    v46[1] = 3;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::GPUPipelineError>(int a1, JSC::VM *a2, WTF *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  WTF *v14;

  v3 = *(_QWORD *)(*((_QWORD *)a2 + 415) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WTF **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WTF **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  v14 = a3;
  if (*(void (***)(WebCore::GPUPipelineError *__hidden))a3 == off_1E334EEB0)
  {
    v12 = WebCore::createWrapper<WebCore::GPUPipelineError,WebCore::GPUPipelineError>(a2, &v14, a3);
    if (v14)
    {
      if (*((_DWORD *)v14 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v14 + 8))();
      else
        --*((_DWORD *)v14 + 2);
    }
    return v12;
  }
  result = 265;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUPipelineLayout::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
        else
          --v3[2];
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGPUPipelineLayout::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUPipelineLayoutPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUPipelineLayoutPrototype::create(WebCore::JSGPUPipelineLayoutPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  JSC::Structure *v17;
  int v18;
  unint64_t v20;
  WTF::StringImpl *v21[6];
  int v22;
  int v23;
  JSC::Structure *v24;
  int v25;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v20);
    *((_QWORD *)this + 4865) = SlowCase + (int)v20;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSGPUPipelineLayout::s_info, (uint64_t)&WebCore::JSGPUPipelineLayoutPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v10 = v21[0];
    v11 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v21[0]) = -1;
    WORD2(v21[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v11;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v12);
      else
        *(_DWORD *)v10 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v13 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = JSC::JSString::create((uint64_t)this, v21);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v25 = *(_DWORD *)SlowCase;
  v24 = v17;
  v18 = JSC::Structure::outOfLineCapacity(v17);
  v22 = 0;
  v23 = v18;
  v21[0] = (WTF::StringImpl *)&v23;
  v21[1] = (WTF::StringImpl *)SlowCase;
  v21[2] = this;
  v21[3] = (WTF::StringImpl *)&v25;
  v21[4] = (WTF::StringImpl *)&v24;
  v21[5] = (WTF::StringImpl *)&v22;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v17, this, v13, 6, (uint64_t)v21);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v22, v15);
  *((_DWORD *)v17 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUPipelineLayout>,(WebCore::DOMConstructorID)29>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 232);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUPipelineLayout>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUPipelineLayout::s_info
         + ~((_QWORD)&WebCore::JSGPUPipelineLayout::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUPipelineLayout::s_info
                                                                     + ~((_QWORD)&WebCore::JSGPUPipelineLayout::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUPipelineLayout::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUPipelineLayout::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUPipelineLayoutPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUPipelineLayoutPrototype::create((WebCore::JSGPUPipelineLayoutPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUPipelineLayout::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUPipelineLayout::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 232) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUPipelineLayoutConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUPipelineLayoutPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUPipelineLayout>,(WebCore::DOMConstructorID)29>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUPipelineLayout_label(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 24);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

BOOL WebCore::setJSGPUPipelineLayout_label(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  int v17;
  char v18;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSGPUPipelineLayout::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSGPUPipelineLayout::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v16);
  v10 = v17;
  v11 = v17 == 0;
  if (!v17)
  {
    v12 = v16;
    v16 = 0;
    v13 = *(_QWORD **)(v8 + 8);
    v14 = (WTF::StringImpl *)v13[3];
    v13[3] = v12;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    (*(void (**)(_QWORD *, _QWORD *))(*v13 + 16))(v13, v13 + 3);
    v10 = v17;
  }
  if (v10 != -1)
    ((void (*)(char *, uint64_t *))off_1E3282908[v10])(&v18, &v16);
  return v11;
}

uint64_t WebCore::JSGPUPipelineLayoutOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPUPipelineLayoutOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

uint64_t WebCore::parseEnumeration<WebCore::GPUPowerPreference>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  int v9;
  int v10;
  char **v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v17;
  uint64_t v19;
  unint64_t v20;

  v3 = a1;
  v20 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
LABEL_34:
        v10 = 0;
        v9 = 0;
        return v10 | (v9 << 8);
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v20, a1);
  v4 = v19;
  if (!v19)
    goto LABEL_34;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "high-performance" && v7 == 16)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 104 || *(_QWORD *)(v6 + 1) != 0x667265702D686769 || *((_QWORD *)v6 + 1) != 0x65636E616D726F66)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 104)
        goto LABEL_16;
      v14 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968BFC80);
      v14.i16[0] = vminvq_u16(v14);
      if (!v14.i32[0])
        goto LABEL_16;
      v15 = (uint16x8_t)vceqq_s16(*((int16x8_t *)v6 + 1), (int16x8_t)xmmword_1968BFC90);
      v15.i16[0] = vminvq_u16(v15);
      if (!v15.i32[0])
        goto LABEL_16;
    }
LABEL_38:
    v13 = &WebCore::parseEnumerationFromString<WebCore::GPUPowerPreference>(WTF::String const&)::mappings;
    goto LABEL_39;
  }
  if (v6 == "high-performance" && v7 == 16)
    goto LABEL_38;
  if (v6 == "low-power" || v7 != 9)
  {
    if (v7 != 9 || v6 != "low-power")
      goto LABEL_16;
    goto LABEL_30;
  }
  if ((v5 & 4) == 0)
  {
    if (*(_WORD *)v6 == 108)
    {
      v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968BFCA0);
      v17.i16[0] = vminvq_u16(v17);
      if (v17.i32[0])
        goto LABEL_30;
    }
LABEL_16:
    v9 = 0;
    v10 = 0;
    goto LABEL_40;
  }
  if (*v6 != 108 || *(_DWORD *)(v6 + 1) != 1882027887 || *(_DWORD *)(v6 + 5) != 1919252335)
    goto LABEL_16;
LABEL_30:
  v13 = &off_1E3281988;
LABEL_39:
  v10 = *((unsigned __int8 *)v13 + 16);
  v9 = 1;
LABEL_40:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v10 | (v9 << 8);
}

uint64_t WebCore::parseEnumeration<WebCore::GPUPredefinedColorSpace>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  int v9;
  int v10;
  char **v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint64_t v19;
  unint64_t v20;

  v3 = a1;
  v20 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
LABEL_34:
        v10 = 0;
        v9 = 0;
        return v10 | (v9 << 8);
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v20, a1);
  v4 = v19;
  if (!v19)
    goto LABEL_34;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "display-p3" && v7 == 10)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 100 || *(_QWORD *)(v6 + 1) != 0x702D79616C707369 || *(_QWORD *)(v6 + 2) != 0x33702D79616C7073)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 100)
        goto LABEL_16;
      v14 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968BFCB0);
      v14.i16[0] = vminvq_u16(v14);
      if (!v14.i32[0])
        goto LABEL_16;
      v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 4), (int16x8_t)xmmword_1968BFCC0);
      v15.i16[0] = vminvq_u16(v15);
      if (!v15.i32[0])
        goto LABEL_16;
    }
LABEL_38:
    v13 = &WebCore::parseEnumerationFromString<WebCore::GPUPredefinedColorSpace>(WTF::String const&)::mappings;
    goto LABEL_39;
  }
  if (v6 == "display-p3" && v7 == 10)
    goto LABEL_38;
  if (v6 == "srgb" || v7 != 4)
  {
    if (v7 != 4 || v6 != "srgb")
      goto LABEL_16;
    goto LABEL_30;
  }
  if ((v5 & 4) == 0)
  {
    if (*(_WORD *)v6 != 115)
      goto LABEL_16;
    if (*((_DWORD *)v6 + 1) != 6422631 || *(_DWORD *)(v6 + 2) != 6750322)
      goto LABEL_16;
    goto LABEL_30;
  }
  if (*v6 != 115 || *(_WORD *)(v6 + 1) != 26482 || *((_WORD *)v6 + 1) != 25191)
  {
LABEL_16:
    v9 = 0;
    v10 = 0;
    goto LABEL_40;
  }
LABEL_30:
  v13 = &off_1E32819B8;
LABEL_39:
  v10 = *((unsigned __int8 *)v13 + 16);
  v9 = 1;
LABEL_40:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v10 | (v9 << 8);
}

unint64_t WebCore::convertDictionary<WebCore::GPUPrimitiveState>@<X0>(JSC::JSCell *this@<X1>, unint64_t result@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  __int16 v5;
  char v6;
  char v7;
  BOOL v8;
  char v9;
  JSC::JSGlobalObject *v10;
  uint64_t Object;
  JSC::Structure *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  JSC::VM *v15;
  uint64_t v16;
  const char *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  char **v23;
  int v25;
  int v26;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  JSC::VM *v31;
  uint64_t v32;
  int v33;
  const char *v34;
  int v35;
  int v36;
  int v37;
  char **v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  WTF::StringImpl *v43;
  unsigned __int16 v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  JSC::VM *v48;
  uint64_t v49;
  const char *v50;
  int v51;
  unint64_t v52;
  int v53;
  char **v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  double v58;
  int v59;
  BOOL v60;
  uint16x8_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  int v64;
  unint64_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  BOOL v70;
  int v71;
  uint64_t v72;
  int *v73;
  int v74;
  uint16x8_t v76;
  uint16x8_t v77;
  uint64_t v79;
  WTF::StringImpl *v80;

  v4 = *(JSC::VM **)(result + 56);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 3;
LABEL_145:
    v26 = 0;
    *(_BYTE *)a3 = v9;
    *(_WORD *)(a3 + 1) = v5;
    *(_BYTE *)(a3 + 3) = v7;
    *(_BYTE *)(a3 + 4) = v6;
    *(_BYTE *)(a3 + 5) = v8;
    goto LABEL_146;
  }
  v10 = (JSC::JSGlobalObject *)result;
  if (((unint64_t)this & 0xFFFE000000000002) != 0)
    goto LABEL_55;
  Object = JSC::JSCell::getObject(this);
  if (!Object)
    goto LABEL_55;
  v12 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v14 = JSC::JSObject::get(v12, v10, (unint64_t)v80);
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
      WTF::StringImpl::destroy(v80, v13);
    else
      *(_DWORD *)v80 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((result & 1) != 0)
      goto LABEL_56;
  }
  if (v14 == 10)
  {
    v6 = 0;
    goto LABEL_71;
  }
  v15 = (JSC::VM *)*((_QWORD *)v10 + 7);
  v80 = (WTF::StringImpl *)v14;
  if ((v14 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v14 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v80, v10);
    v16 = v79;
    if (v79)
      goto LABEL_17;
LABEL_54:
    v6 = 0;
    v25 = 0;
    goto LABEL_69;
  }
  v16 = *(_QWORD *)(v14 + 8);
  if ((v16 & 1) == 0)
  {
    if (!v16)
      goto LABEL_16;
    goto LABEL_15;
  }
  v16 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v14, v10);
  if (v16)
LABEL_15:
    *(_DWORD *)v16 += 2;
LABEL_16:
  v79 = v16;
  if (!v16)
    goto LABEL_54;
LABEL_17:
  v17 = *(const char **)(v16 + 8);
  v18 = *(_DWORD *)(v16 + 4);
  v19 = ((unint64_t)*(unsigned int *)(v16 + 16) >> 2) & 1;
  v20 = v19 << 32;
  v21 = v18 != 4;
  if (v17 != "back" && v18 == 4)
  {
    if ((_DWORD)v19)
    {
      if (*v17 != 98 || *(_WORD *)(v17 + 1) != 25441 || *((_WORD *)v17 + 1) != 27491)
      {
        v21 = 0;
LABEL_24:
        v22 = 5;
        v20 = 0x100000000;
        goto LABEL_25;
      }
      goto LABEL_35;
    }
    if (*(_WORD *)v17 == 98)
    {
      v21 = 0;
      v22 = 5;
      if (*(_DWORD *)(v17 + 2) != 6488161 || *((_DWORD *)v17 + 1) != 7012451)
        goto LABEL_25;
LABEL_35:
      v23 = &WebCore::parseEnumerationFromString<WebCore::GPUCullMode>(WTF::String const&)::mappings;
LABEL_50:
      v6 = *((_BYTE *)v23 + 16);
      v25 = 1;
      goto LABEL_67;
    }
    v21 = 0;
LABEL_185:
    v22 = 5;
    goto LABEL_25;
  }
  if (v17 == "back" && v18 == 4)
    goto LABEL_35;
  if (v17 != "front" && v18 == 5)
  {
    if ((_DWORD)v19)
    {
      if (*v17 != 102 || *(_WORD *)(v17 + 1) != 28530 || *(_WORD *)(v17 + 3) != 29806)
        goto LABEL_24;
    }
    else if (*(_WORD *)v17 != 102 || *(_QWORD *)(v17 + 2) != 0x74006E006F0072)
    {
      goto LABEL_185;
    }
LABEL_43:
    v23 = &off_1E327FEE8;
    goto LABEL_50;
  }
  v22 = *(_DWORD *)(v16 + 4);
  if (v17 == "front" && v18 == 5)
    goto LABEL_43;
LABEL_25:
  if (v17 == "none" || v21)
  {
    if (v18 != 4 || v17 != "none")
      goto LABEL_66;
    goto LABEL_49;
  }
  if (!v22)
    goto LABEL_49;
  if (!v20)
  {
    if (*(_WORD *)v17 != 110)
      goto LABEL_66;
    if (*((_DWORD *)v17 + 1) != 6619246 || *(_DWORD *)(v17 + 2) != 7209071)
      goto LABEL_66;
    goto LABEL_49;
  }
  if (*v17 == 110 && *(_WORD *)(v17 + 1) == 28271 && *((_WORD *)v17 + 1) == 25966)
  {
LABEL_49:
    v23 = &off_1E327FF00;
    goto LABEL_50;
  }
LABEL_66:
  v25 = 0;
  v6 = 0;
LABEL_67:
  v79 = 0;
  if (*(_DWORD *)v16 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v16, v13);
  else
    *(_DWORD *)v16 -= 2;
LABEL_69:
  if (*((_DWORD *)v15 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v15);
    if ((result & 1) != 0)
      goto LABEL_56;
  }
  if (!v25)
    goto LABEL_55;
LABEL_71:
  WTF::AtomStringImpl::addLiteral();
  v28 = v80;
  v30 = JSC::JSObject::get(v12, v10, (unint64_t)v80);
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v29);
    else
      *(_DWORD *)v28 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((result & 1) != 0)
      goto LABEL_56;
  }
  if (v30 == 10)
  {
    v7 = 0;
    goto LABEL_98;
  }
  v31 = (JSC::VM *)*((_QWORD *)v10 + 7);
  v80 = (WTF::StringImpl *)v30;
  if ((v30 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v30 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v80, v10);
    v32 = v79;
    if (v79)
      goto LABEL_83;
    goto LABEL_173;
  }
  v32 = *(_QWORD *)(v30 + 8);
  if ((v32 & 1) == 0)
  {
    if (!v32)
      goto LABEL_82;
    goto LABEL_81;
  }
  v32 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v30, v10);
  if (v32)
LABEL_81:
    *(_DWORD *)v32 += 2;
LABEL_82:
  v79 = v32;
  if (v32)
  {
LABEL_83:
    v33 = *(_DWORD *)(v32 + 16);
    v34 = *(const char **)(v32 + 8);
    v35 = *(_DWORD *)(v32 + 4);
    if (v34 != "ccw" && v35 == 3)
    {
      if ((v33 & 4) != 0)
      {
        if (*v34 != 99 || *(_WORD *)(v34 + 1) != 30563)
          goto LABEL_88;
      }
      else if (*(_WORD *)v34 != 99 || *(_DWORD *)(v34 + 2) != 7798883)
      {
        goto LABEL_88;
      }
      goto LABEL_91;
    }
    if (v34 == "ccw" && v35 == 3)
    {
LABEL_91:
      v38 = &WebCore::parseEnumerationFromString<WebCore::GPUFrontFace>(WTF::String const&)::mappings;
LABEL_92:
      v37 = *((unsigned __int8 *)v38 + 16);
      v36 = 1;
LABEL_93:
      v39 = v37 | (v36 << 8);
      v79 = 0;
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v32, v29);
      else
        *(_DWORD *)v32 -= 2;
      goto LABEL_95;
    }
    if (v34 == "cw" || v35 != 2)
    {
      if (v35 != 2 || v34 != "cw")
        goto LABEL_88;
      goto LABEL_157;
    }
    if ((v33 & 4) != 0)
    {
      if (*v34 != 99)
        goto LABEL_88;
      v59 = *((unsigned __int8 *)v34 + 1);
    }
    else
    {
      if (*(_WORD *)v34 != 99)
        goto LABEL_88;
      v59 = *((unsigned __int16 *)v34 + 1);
    }
    if (v59 == 119)
    {
LABEL_157:
      v38 = &off_1E3280998;
      goto LABEL_92;
    }
LABEL_88:
    v36 = 0;
    v37 = 0;
    goto LABEL_93;
  }
LABEL_173:
  v39 = 0;
LABEL_95:
  if (*((_DWORD *)v31 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v31);
    if ((result & 1) != 0)
      goto LABEL_56;
  }
  if (v39 <= 0xFF)
    goto LABEL_55;
  v7 = v39;
LABEL_98:
  WTF::AtomStringImpl::addLiteral();
  v40 = v80;
  v42 = JSC::JSObject::get(v12, v10, (unint64_t)v80);
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v41);
    else
      *(_DWORD *)v40 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((result & 1) != 0)
      goto LABEL_56;
  }
  if (v42 == 10)
  {
    v5 = 0;
    goto LABEL_107;
  }
  v80 = (WTF::StringImpl *)*((_QWORD *)v10 + 7);
  v43 = v80;
  v44 = WebCore::parseEnumeration<WebCore::GPUIndexFormat>(v10, v42);
  if (*((_DWORD *)v43 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v43);
    if ((result & 1) != 0)
      goto LABEL_56;
  }
  if (v44 <= 0xFFu)
  {
LABEL_55:
    result = JSC::throwTypeError();
    goto LABEL_56;
  }
  v5 = v44 | 0x100;
LABEL_107:
  WTF::AtomStringImpl::addLiteral();
  v45 = v80;
  v47 = JSC::JSObject::get(v12, v10, (unint64_t)v80);
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v46);
    else
      *(_DWORD *)v45 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((result & 1) != 0)
      goto LABEL_56;
  }
  if (v47 == 10)
  {
    v9 = 3;
    goto LABEL_134;
  }
  v48 = (JSC::VM *)*((_QWORD *)v10 + 7);
  v80 = (WTF::StringImpl *)v47;
  if ((v47 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v47 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v80, v10);
    v49 = v79;
    if (v79)
      goto LABEL_119;
LABEL_175:
    v9 = 0;
    v53 = 0;
    goto LABEL_132;
  }
  v49 = *(_QWORD *)(v47 + 8);
  if ((v49 & 1) == 0)
  {
    if (!v49)
      goto LABEL_118;
    goto LABEL_117;
  }
  v49 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v47, v10);
  if (v49)
LABEL_117:
    *(_DWORD *)v49 += 2;
LABEL_118:
  if (!v49)
    goto LABEL_175;
LABEL_119:
  v50 = *(const char **)(v49 + 8);
  v51 = *(_DWORD *)(v49 + 4);
  v52 = ((unint64_t)*(unsigned int *)(v49 + 16) >> 2) & 1;
  if (v50 != "line-list" && v51 == 9)
  {
    if ((_DWORD)v52)
    {
      if (*v50 != 108 || *(_DWORD *)(v50 + 1) != 761622121 || *(_DWORD *)(v50 + 5) != 1953720684)
      {
LABEL_125:
        v9 = 0;
        v53 = 0;
        goto LABEL_130;
      }
    }
    else
    {
      if (*(_WORD *)v50 != 108)
        goto LABEL_125;
      v61 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v50 + 2), (int16x8_t)xmmword_1968BFCD0);
      v61.i16[0] = vminvq_u16(v61);
      if (!v61.i32[0])
        goto LABEL_125;
    }
    goto LABEL_128;
  }
  if (v50 == "line-list" && v51 == 9)
  {
LABEL_128:
    v54 = &WebCore::parseEnumerationFromString<WebCore::GPUPrimitiveTopology>(WTF::String const&)::mappings;
    goto LABEL_129;
  }
  v60 = v51 != 10;
  if (v50 == "line-strip" || v51 != 10)
  {
    if (v50 == "line-strip")
    {
      v64 = *(_DWORD *)(v49 + 4);
      if (v51 == 10)
      {
LABEL_164:
        v54 = &off_1E32819E8;
        goto LABEL_129;
      }
    }
    else
    {
      v64 = *(_DWORD *)(v49 + 4);
    }
  }
  else
  {
    if ((_DWORD)v52)
    {
      if (*v50 == 108 && *(_QWORD *)(v50 + 1) == 0x697274732D656E69 && *(_QWORD *)(v50 + 2) == 0x70697274732D656ELL)
        goto LABEL_164;
    }
    else if (*(_WORD *)v50 == 108)
    {
      v62 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v50 + 2), (int16x8_t)xmmword_1968BFCE0);
      v62.i16[0] = vminvq_u16(v62);
      if (v62.i32[0])
      {
        v63 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v50 + 4), (int16x8_t)xmmword_1968BFCF0);
        v63.i16[0] = vminvq_u16(v63);
        if (v63.i32[0])
          goto LABEL_164;
      }
    }
    v60 = 0;
    v64 = 10;
  }
  v65 = v52 << 32;
  if (v50 == "point-list" || v60)
  {
    if (v50 == "point-list" && v51 == 10)
      goto LABEL_199;
  }
  else
  {
    if (!v64)
    {
LABEL_199:
      v54 = &off_1E3281A00;
      goto LABEL_129;
    }
    if ((_DWORD)v52)
    {
      if (*v50 == 112 && *(_QWORD *)(v50 + 1) == 0x73696C2D746E696FLL && *(_QWORD *)(v50 + 2) == 0x7473696C2D746E69)
        goto LABEL_199;
    }
    else
    {
      if (*(_WORD *)v50 == 112)
      {
        v66 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v50 + 2), (int16x8_t)xmmword_1968BFD00);
        v66.i16[0] = vminvq_u16(v66);
        if (v66.i32[0])
        {
          v67 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v50 + 4), (int16x8_t)xmmword_1968BFD10);
          v67.i16[0] = vminvq_u16(v67);
          if (v67.i32[0])
            goto LABEL_199;
        }
      }
      v65 = 0;
    }
  }
  if (v50 != "triangle-list" && v64 == 13)
  {
    if (v65)
    {
      if (*v50 != 116 || *(_QWORD *)(v50 + 1) != 0x2D656C676E616972 || *(_QWORD *)(v50 + 5) != 0x7473696C2D656C67)
        goto LABEL_125;
    }
    else
    {
      if (*(_WORD *)v50 != 116)
        goto LABEL_125;
      v68 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v50 + 2), (int16x8_t)xmmword_1968BFD20);
      v68.i16[0] = vminvq_u16(v68);
      if (!v68.i32[0])
        goto LABEL_125;
      v69 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v50 + 10), (int16x8_t)xmmword_1968BFD30);
      v69.i16[0] = vminvq_u16(v69);
      if (!v69.i32[0])
        goto LABEL_125;
    }
    goto LABEL_220;
  }
  if (v50 == "triangle-list" && v64 == 13)
  {
LABEL_220:
    v54 = &off_1E3281A18;
    goto LABEL_129;
  }
  if (v50 == "triangle-strip" || v64 != 14)
  {
    if (v64 != 14 || v50 != "triangle-strip")
      goto LABEL_125;
  }
  else if (v65)
  {
    if (*v50 != 116 || *(_QWORD *)(v50 + 1) != 0x2D656C676E616972 || *(_QWORD *)(v50 + 6) != 0x70697274732D656CLL)
      goto LABEL_125;
  }
  else
  {
    if (*(_WORD *)v50 != 116)
      goto LABEL_125;
    v76 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v50 + 2), (int16x8_t)xmmword_1968BFD20);
    v76.i16[0] = vminvq_u16(v76);
    if (!v76.i32[0])
      goto LABEL_125;
    v77 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v50 + 12), (int16x8_t)xmmword_1968BFD40);
    v77.i16[0] = vminvq_u16(v77);
    if (!v77.i32[0])
      goto LABEL_125;
  }
  v54 = &off_1E3281A30;
LABEL_129:
  v9 = *((_BYTE *)v54 + 16);
  v53 = 1;
LABEL_130:
  if (*(_DWORD *)v49 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v49, v46);
  else
    *(_DWORD *)v49 -= 2;
LABEL_132:
  if (*((_DWORD *)v48 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v48);
    if ((result & 1) != 0)
      goto LABEL_56;
  }
  if (!v53)
    goto LABEL_55;
LABEL_134:
  WTF::AtomStringImpl::addLiteral();
  v55 = v80;
  result = JSC::JSObject::get(v12, v10, (unint64_t)v80);
  v57 = result;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      result = WTF::StringImpl::destroy(v55, v56);
    else
      *(_DWORD *)v55 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((result & 1) != 0)
      goto LABEL_56;
  }
  if (v57 == 10)
  {
    v8 = 0;
    goto LABEL_145;
  }
  result = *((_QWORD *)v10 + 7);
  if (v57 >= 0xFFFE000000000000)
  {
    v70 = (_DWORD)v57 == 0;
    goto LABEL_248;
  }
  *(_QWORD *)&v58 = v57 - 0x2000000000000;
  if (v57 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v58 <= 0.0)
    {
      v8 = v58 < 0.0;
      goto LABEL_144;
    }
    goto LABEL_252;
  }
  if ((v57 & 0xFFFE000000000002) != 0)
  {
    v8 = v57 == 7;
    goto LABEL_144;
  }
  v71 = *(unsigned __int8 *)(v57 + 5);
  if (v71 == 3)
  {
    v74 = *(_DWORD *)(v57 + 8);
LABEL_247:
    v70 = v74 == 0;
    goto LABEL_248;
  }
  if (v71 == 2)
  {
    v72 = *(_QWORD *)(v57 + 8);
    if ((v72 & 1) != 0)
      v73 = (int *)(v57 + 16);
    else
      v73 = (int *)(v72 + 4);
    v74 = *v73;
    goto LABEL_247;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0xA) & 1) == 0)
  {
LABEL_252:
    v8 = 1;
    goto LABEL_144;
  }
  v70 = *(_QWORD *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0x28) == (_QWORD)v10;
LABEL_248:
  v8 = !v70;
LABEL_144:
  if (!*(_DWORD *)(result + 80))
    goto LABEL_145;
  result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result);
  if ((result & 1) == 0)
    goto LABEL_145;
LABEL_56:
  v26 = 1;
LABEL_146:
  *(_DWORD *)(a3 + 8) = v26;
  return result;
}

WTF::StringImpl **WebCore::JSGPUQuerySet::destroy(WebCore::JSGPUQuerySet *this, JSC::JSCell *a2)
{
  WTF::StringImpl **result;

  result = (WTF::StringImpl **)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
    return WTF::RefCounted<WebCore::GPUQuerySet>::deref(result, a2);
  return result;
}

uint64_t WebCore::JSGPUQuerySet::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUQuerySetPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUQuerySetPrototype::create(WebCore::JSGPUQuerySetPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  JSC::Structure *v17;
  int v18;
  unint64_t v20;
  WTF::StringImpl *v21[6];
  int v22;
  int v23;
  JSC::Structure *v24;
  int v25;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v20);
    *((_QWORD *)this + 4865) = SlowCase + (int)v20;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSGPUQuerySet::s_info, &WebCore::JSGPUQuerySetPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v10 = v21[0];
    v11 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v21[0]) = -1;
    WORD2(v21[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v11;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v12);
      else
        *(_DWORD *)v10 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v13 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = JSC::JSString::create((uint64_t)this, v21);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v25 = *(_DWORD *)SlowCase;
  v24 = v17;
  v18 = JSC::Structure::outOfLineCapacity(v17);
  v22 = 0;
  v23 = v18;
  v21[0] = (WTF::StringImpl *)&v23;
  v21[1] = (WTF::StringImpl *)SlowCase;
  v21[2] = this;
  v21[3] = (WTF::StringImpl *)&v25;
  v21[4] = (WTF::StringImpl *)&v24;
  v21[5] = (WTF::StringImpl *)&v22;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v17, this, v13, 6, (uint64_t)v21);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v22, v15);
  *((_DWORD *)v17 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUQuerySet>,(WebCore::DOMConstructorID)30>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 240);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUQuerySet>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUQuerySet::s_info + ~((_QWORD)&WebCore::JSGPUQuerySet::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUQuerySet::s_info + ~((_QWORD)&WebCore::JSGPUQuerySet::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUQuerySet::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUQuerySet::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUQuerySetPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUQuerySetPrototype::create((WebCore::JSGPUQuerySetPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUQuerySet::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUQuerySet::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 240) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUQuerySetConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUQuerySetPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUQuerySet>,(WebCore::DOMConstructorID)30>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUQuerySet_type(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 32);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = (uint64_t *)(v3 + 41968);
  if ((byte_1EE335802 & 1) == 0)
  {
    unk_1EE3358D8 = &dword_1ECE77CC0;
    dword_1ECE77CC0 += 2;
    dword_1ECE77CE0 += 2;
    unk_1EE3358E0 = &dword_1ECE77CE0;
    byte_1EE335802 = 1;
  }
  v5 = *(_QWORD *)&_MergedGlobals_289[8 * v2 + 216];
  if (!v5)
    return *v4;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v3 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v3 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v4;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

unint64_t WebCore::jsGPUQuerySet_count(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 36);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::jsGPUQuerySet_label(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 16) + 24);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

BOOL WebCore::setJSGPUQuerySet_label(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  int v17;
  char v18;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSGPUQuerySet::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSGPUQuerySet::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v16);
  v10 = v17;
  v11 = v17 == 0;
  if (!v17)
  {
    v12 = v16;
    v16 = 0;
    v13 = *(_QWORD **)(v8 + 16);
    v14 = (WTF::StringImpl *)v13[3];
    v13[3] = v12;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    (*(void (**)(_QWORD *, _QWORD *))(*v13 + 24))(v13, v13 + 3);
    v10 = v17;
  }
  if (v10 != -1)
    ((void (*)(char *, uint64_t *))off_1E3282908[v10])(&v18, &v16);
  return v11;
}

uint64_t WebCore::JSGPUQuerySetOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

WTF::StringImpl **WebCore::JSGPUQuerySetOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl **v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;

  v3 = *(WTF::StringImpl ***)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF::StringImpl ***)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF::StringImpl ***)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  return WTF::RefCounted<WebCore::GPUQuerySet>::deref(v3, a2);
}

uint64_t WebCore::JSGPUQueue::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
        else
          --v3[2];
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGPUQueue::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUQueuePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUQueuePrototype::create(WebCore::JSGPUQueuePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  JSC::Structure *v17;
  int v18;
  unint64_t v20;
  WTF::StringImpl *v21[6];
  int v22;
  int v23;
  JSC::Structure *v24;
  int v25;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v20);
    *((_QWORD *)this + 4865) = SlowCase + (int)v20;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSGPUQueue::s_info, &WebCore::JSGPUQueuePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v10 = v21[0];
    v11 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v21[0]) = -1;
    WORD2(v21[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v11;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v12);
      else
        *(_DWORD *)v10 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v13 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = JSC::JSString::create((uint64_t)this, v21);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v25 = *(_DWORD *)SlowCase;
  v24 = v17;
  v18 = JSC::Structure::outOfLineCapacity(v17);
  v22 = 0;
  v23 = v18;
  v21[0] = (WTF::StringImpl *)&v23;
  v21[1] = (WTF::StringImpl *)SlowCase;
  v21[2] = this;
  v21[3] = (WTF::StringImpl *)&v25;
  v21[4] = (WTF::StringImpl *)&v24;
  v21[5] = (WTF::StringImpl *)&v22;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v17, this, v13, 6, (uint64_t)v21);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v22, v15);
  *((_DWORD *)v17 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUQueue>,(WebCore::DOMConstructorID)31>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 248);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUQueue>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUQueue::s_info + ~((_QWORD)&WebCore::JSGPUQueue::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUQueue::s_info + ~((_QWORD)&WebCore::JSGPUQueue::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUQueue::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUQueue::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUQueuePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUQueuePrototype::create((WebCore::JSGPUQueuePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUQueue::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUQueue::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 248) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUQueueConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUQueuePrototype::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUQueue>,(WebCore::DOMConstructorID)31>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUQueue_label(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 16);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

BOOL WebCore::setJSGPUQueue_label(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  int v17;
  char v18;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSGPUQueue::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSGPUQueue::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v16);
  v10 = v17;
  v11 = v17 == 0;
  if (!v17)
  {
    v12 = v16;
    v16 = 0;
    v13 = *(_QWORD **)(v8 + 8);
    v14 = (WTF::StringImpl *)v13[2];
    v13[2] = v12;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    (*(void (**)(_QWORD *, _QWORD *))(*v13 + 72))(v13, v13 + 2);
    v10 = v17;
  }
  if (v10 != -1)
    ((void (*)(char *, uint64_t *))off_1E3282908[v10])(&v18, &v16);
  return v11;
}

uint64_t WebCore::JSGPUQueueOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPUQueueOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

uint64_t WebCore::JSGPURenderBundle::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
        else
          --v3[2];
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGPURenderBundle::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPURenderBundlePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPURenderBundlePrototype::create(WebCore::JSGPURenderBundlePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  JSC::Structure *v17;
  int v18;
  unint64_t v20;
  WTF::StringImpl *v21[6];
  int v22;
  int v23;
  JSC::Structure *v24;
  int v25;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v20);
    *((_QWORD *)this + 4865) = SlowCase + (int)v20;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSGPURenderBundle::s_info, (uint64_t)&WebCore::JSGPURenderBundlePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v10 = v21[0];
    v11 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v21[0]) = -1;
    WORD2(v21[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v11;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v12);
      else
        *(_DWORD *)v10 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v13 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = JSC::JSString::create((uint64_t)this, v21);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v25 = *(_DWORD *)SlowCase;
  v24 = v17;
  v18 = JSC::Structure::outOfLineCapacity(v17);
  v22 = 0;
  v23 = v18;
  v21[0] = (WTF::StringImpl *)&v23;
  v21[1] = (WTF::StringImpl *)SlowCase;
  v21[2] = this;
  v21[3] = (WTF::StringImpl *)&v25;
  v21[4] = (WTF::StringImpl *)&v24;
  v21[5] = (WTF::StringImpl *)&v22;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v17, this, v13, 6, (uint64_t)v21);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v22, v15);
  *((_DWORD *)v17 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPURenderBundle>,(WebCore::DOMConstructorID)32>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 256);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPURenderBundle>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPURenderBundle::s_info + ~((_QWORD)&WebCore::JSGPURenderBundle::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPURenderBundle::s_info + ~((_QWORD)&WebCore::JSGPURenderBundle::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPURenderBundle::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPURenderBundle::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPURenderBundlePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPURenderBundlePrototype::create((WebCore::JSGPURenderBundlePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPURenderBundle::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPURenderBundle::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 256) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPURenderBundleConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPURenderBundlePrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPURenderBundle>,(WebCore::DOMConstructorID)32>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPURenderBundle_label(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 16);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

BOOL WebCore::setJSGPURenderBundle_label(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  int v17;
  char v18;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSGPURenderBundle::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSGPURenderBundle::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v16);
  v10 = v17;
  v11 = v17 == 0;
  if (!v17)
  {
    v12 = v16;
    v16 = 0;
    v13 = *(_QWORD **)(v8 + 8);
    v14 = (WTF::StringImpl *)v13[2];
    v13[2] = v12;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    (*(void (**)(_QWORD *, _QWORD *))(*v13 + 16))(v13, v13 + 2);
    v10 = v17;
  }
  if (v10 != -1)
    ((void (*)(char *, uint64_t *))off_1E3282908[v10])(&v18, &v16);
  return v11;
}

uint64_t WebCore::JSGPURenderBundleOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPURenderBundleOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

uint64_t WebCore::JSGPURenderBundleEncoder::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
        else
          --v3[2];
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGPURenderBundleEncoder::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPURenderBundleEncoderPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPURenderBundleEncoderPrototype::create(WebCore::JSGPURenderBundleEncoderPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v5;
  unint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  int v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  int v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  int v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  JSC::Structure *v63;
  int v64;
  unint64_t v66;
  JSC::VM *v67;
  uint64_t SlowCase;
  WTF::StringImpl *v69[6];
  int v70;
  int v71;
  JSC::Structure *v72;
  int v73;

  v5 = (_QWORD *)((char *)this + 38904);
  v6 = *((_QWORD *)this + 4863);
  if (v6 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v6 = *((_QWORD *)this + 4865);
  if ((v6 & 1) == 0)
  {
    v66 = *(_QWORD *)(v6 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v6 + HIDWORD(v66);
    *((_QWORD *)this + 4865) = v6 + (int)v66;
LABEL_2:
    *v5 = v6 + 16;
    goto LABEL_3;
  }
  v67 = (JSC::VM *)a2;
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
  a2 = (unint64_t)v67;
  v6 = SlowCase;
LABEL_3:
  v7 = (int *)((char *)this + 93124);
  *(_DWORD *)v6 = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v8;
  *(_QWORD *)(v6 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<14u>(this, (uint64_t)&WebCore::JSGPURenderBundleEncoder::s_info, (uint64_t)&WebCore::JSGPURenderBundleEncoderPrototypeTableValues, (JSC::JSObject *)v6);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                         + 0x28));
  v10 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 472);
  v11 = (v10 & 0x1000000) == 0;
  if ((v10 & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v12 = v69[0];
    v13 = *v7;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v13;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v14);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 136))(v15) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v16 = v69[0];
    v17 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v17;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v18);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  v19 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 136))(v19) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v20 = v69[0];
    v21 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v21;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v22);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  v23 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 136))(v23) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v24 = v69[0];
    v25 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v25;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v26);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  v27 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 136))(v27) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v28 = v69[0];
    v29 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v29;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v30);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  v31 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 136))(v31) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v32 = v69[0];
    v33 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v33;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v34);
      else
        *(_DWORD *)v32 -= 2;
    }
  }
  v35 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 136))(v35) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v36 = v69[0];
    v37 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v37;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v38);
      else
        *(_DWORD *)v36 -= 2;
    }
  }
  v39 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 136))(v39) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v40 = v69[0];
    v41 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v41;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v42);
      else
        *(_DWORD *)v40 -= 2;
    }
  }
  v43 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 136))(v43) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v44 = v69[0];
    v45 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v45;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v46);
      else
        *(_DWORD *)v44 -= 2;
    }
  }
  v47 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 136))(v47) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v48 = v69[0];
    v49 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v49;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v50);
      else
        *(_DWORD *)v48 -= 2;
    }
  }
  v51 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 136))(v51) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v52 = v69[0];
    v53 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v53;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
        WTF::StringImpl::destroy(v52, v54);
      else
        *(_DWORD *)v52 -= 2;
    }
  }
  v55 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 136))(v55) + 472) & 0x1000000) != 0)
  {
    if (!v11)
      goto LABEL_56;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral();
    v56 = v69[0];
    v57 = *v7;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v57;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, v58);
      else
        *(_DWORD *)v56 -= 2;
    }
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE)), this, (JSC::JSObject *)v6);
LABEL_56:
  v59 = *(_QWORD *)(v5[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v61 = JSC::JSString::create((uint64_t)this, v69);
  v62 = v69[0];
  v69[0] = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v60);
    else
      *(_DWORD *)v62 -= 2;
  }
  v63 = (JSC::Structure *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE));
  v73 = *(_DWORD *)v6;
  v72 = v63;
  v64 = JSC::Structure::outOfLineCapacity(v63);
  v70 = 0;
  v71 = v64;
  v69[0] = (WTF::StringImpl *)&v71;
  v69[1] = (WTF::StringImpl *)v6;
  v69[2] = this;
  v69[3] = (WTF::StringImpl *)&v73;
  v69[4] = (WTF::StringImpl *)&v72;
  v69[5] = (WTF::StringImpl *)&v70;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v63, this, v59, 6, (uint64_t)v69);
  if ((*(_BYTE *)((16 * *(unsigned int *)v6) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v6, (uint64_t)this, v70, v61);
  *((_DWORD *)v63 + 4) |= 0x10u;
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPURenderBundleEncoder>,(WebCore::DOMConstructorID)33>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 264);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPURenderBundleEncoder>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPURenderBundleEncoder::s_info
         + ~((_QWORD)&WebCore::JSGPURenderBundleEncoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPURenderBundleEncoder::s_info
                                                                          + ~((_QWORD)&WebCore::JSGPURenderBundleEncoder::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPURenderBundleEncoder::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPURenderBundleEncoder::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPURenderBundleEncoderPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPURenderBundleEncoderPrototype::create((WebCore::JSGPURenderBundleEncoderPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPURenderBundleEncoder::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPURenderBundleEncoder::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 264) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPURenderBundleEncoderConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPURenderBundleEncoderPrototype::s_info != (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                        + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPURenderBundleEncoder>,(WebCore::DOMConstructorID)33>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPURenderBundleEncoder_label(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 16);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

BOOL WebCore::setJSGPURenderBundleEncoder_label(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  int v17;
  char v18;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSGPURenderBundleEncoder::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSGPURenderBundleEncoder::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v16);
  v10 = v17;
  v11 = v17 == 0;
  if (!v17)
  {
    v12 = v16;
    v16 = 0;
    v13 = *(_QWORD **)(v8 + 8);
    v14 = (WTF::StringImpl *)v13[2];
    v13[2] = v12;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    (*(void (**)(_QWORD *, _QWORD *))(*v13 + 120))(v13, v13 + 2);
    v10 = v17;
  }
  if (v10 != -1)
    ((void (*)(char *, uint64_t *))off_1E3282908[v10])(&v18, &v16);
  return v11;
}

uint64_t WebCore::JSGPURenderBundleEncoderOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPURenderBundleEncoderOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

WTF::StringImpl *WebCore::convertDictionary<WebCore::GPURenderPassDescriptor>@<X0>(JSC::JSCell *this@<X1>, WTF::StringImpl **a2@<X0>, uint64_t a3@<X8>)
{
  unint64_t v5;
  JSC::Structure *Object;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  void *v15;
  JSValue v16;
  int i;
  unsigned int v18;
  JSC::JSCell *IndexQuickly;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  JSC::JSCell *v25;
  WTF::StringImpl *result;
  uint64_t v27;
  unint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  void *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  JSC::Structure *v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  float v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL4 v47;
  char **v48;
  BOOL v49;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  WTF::StringImpl *v61;
  JSC::JSCell *v62;
  int v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  __int128 v70;
  WTF *v71;
  __int128 v72;
  JSC::VM *v73;
  double v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  JSC::VM *v78;
  unsigned __int16 v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  unint64_t v82;
  JSC::VM *v83;
  double v84;
  BOOL v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  unint64_t v88;
  __int16 v89;
  JSC::VM *v90;
  unsigned __int16 v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  unint64_t v94;
  int v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  unint64_t v98;
  JSC::VM *v99;
  unsigned __int16 v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  unint64_t v103;
  BOOL v104;
  JSC::VM *v105;
  double v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  unint64_t v109;
  __int16 v110;
  JSC::VM *v111;
  unsigned __int16 v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  _BOOL4 v126;
  uint64_t v127;
  uint64_t v129;
  uint64_t v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int v138;
  double v139;
  char hasExceptionsAfterHandlingTraps;
  BOOL v141;
  int v142;
  uint64_t v143;
  int *v144;
  int v145;
  BOOL v146;
  int v147;
  uint64_t v148;
  int *v149;
  int v150;
  __int16 v151;
  BOOL v152;
  __int16 v153;
  char v154;
  _BYTE v155[25];
  WTF::StringImpl *v156;
  _BYTE v157[25];
  int v158;
  _QWORD v159[2];
  int v160;
  WTF::StringImpl *v161[2];
  uint64_t v162;
  WTF *v163;
  _OWORD v164[2];
  unsigned __int8 v165;
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  JSC::VM *v169;
  __int16 v170;
  char v171;
  __int16 v172;
  char v173;
  JSC::VM *v174;
  JSC::VM *v175;

  v169 = a2[7];
  v5 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
  }
  else if (((unint64_t)this & 0xFFFE000000000002) != 0
         || (Object = (JSC::Structure *)JSC::JSCell::getObject(this)) == 0)
  {
    result = (WTF::StringImpl *)JSC::throwTypeError();
    *(_DWORD *)(a3 + 112) = 1;
    return result;
  }
  v165 = 0;
  v161[1] = 0;
  v162 = 0;
  v161[0] = 0;
  LOBYTE(v163) = 0;
  v166 = 0uLL;
  v167 = -1;
  LOBYTE(v168) = 0;
  BYTE8(v168) = 0;
  if (v5 == 2)
    goto LABEL_18;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v156);
  if (v156)
  {
    if (*(_DWORD *)v156 == 2)
      WTF::StringImpl::destroy(v156, v7);
    else
      *(_DWORD *)v156 -= 2;
  }
  if (!*((_DWORD *)v169 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v169))
  {
    if (v8 != 10)
    {
      WebCore::valueToUSVString((JSC::JSGlobalObject *)a2, v8, (uint64_t)&v156);
      v10 = *(unsigned int *)v157;
      if (*(_DWORD *)v157)
      {
        *(_DWORD *)(a3 + 112) = 1;
        if ((_DWORD)v10 != -1)
          ((void (*)(_BYTE *, WTF::StringImpl **))off_1E3282908[v10])(v155, &v156);
        goto LABEL_20;
      }
      v161[0] = v156;
    }
    WTF::AtomStringImpl::addLiteral();
    v11 = v156;
    v13 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v156);
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v12);
      else
        *(_DWORD *)v11 -= 2;
    }
    if (!*((_DWORD *)v169 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v169))
    {
      if (v13 == 10)
      {
LABEL_18:
        WebCore::throwRequiredMemberTypeError((int)a2, (int)&v169, "colorAttachments", 17, "GPURenderPassDescriptor", 24, "sequence", 9);
        goto LABEL_19;
      }
      v14 = a2[7];
      *(_QWORD *)v155 = v14;
      if ((v13 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v13 + 5) <= 0x16u)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        JSC::throwTypeError();
        v21 = v156;
        v156 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v20);
          else
            *(_DWORD *)v21 -= 2;
        }
        v160 = 1;
        goto LABEL_40;
      }
      v156 = 0;
      *(_QWORD *)v157 = 0;
      if (JSC::getIterationMode() == 2)
      {
        for (i = 1; ; ++i)
        {
          v18 = (*(_BYTE *)(v13 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v13 + 8) - 8) : 0;
          if (i - 1 >= v18)
            break;
          IndexQuickly = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v13, i - 1, 0);
          if (!IndexQuickly)
            IndexQuickly = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)v13, (JSC::JSGlobalObject *)a2, (i - 1));
          if (*((_DWORD *)v14 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v14) & 1) != 0)
            break;
          WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLNullable<WebCore::IDLDictionary<WebCore::GPURenderPassColorAttachment>>>::convert((JSC::JSGlobalObject *)a2, IndexQuickly, (uint64_t)&v156);
          if (*((_QWORD *)v14 + 2))
          {
            v27 = JSC::JSArrayIterator::create();
            v28 = i | 0xFFFE000000000000;
            if (i < 0)
              v28 = COERCE__INT64((double)i) + 0x2000000000000;
            *(_QWORD *)(v27 + 16) = v28;
            goto LABEL_58;
          }
        }
      }
      else
      {
        JSC::iteratorForIterable((JSC *)a2, (JSC::JSGlobalObject *)v13, v16);
        if (!*((_DWORD *)v14 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v14) & 1) == 0)
        {
          while (1)
          {
            v23 = JSC::iteratorStep();
            if (*((_QWORD *)v14 + 2) || v23 == 6)
              break;
            v25 = (JSC::JSCell *)JSC::iteratorValue();
            if (*((_DWORD *)v14 + 20))
            {
              if ((JSC::VM::hasExceptionsAfterHandlingTraps(v14) & 1) != 0)
                break;
            }
            WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLNullable<WebCore::IDLDictionary<WebCore::GPURenderPassColorAttachment>>>::convert((JSC::JSGlobalObject *)a2, v25, (uint64_t)&v156);
            if (*((_QWORD *)v14 + 2))
            {
LABEL_58:
              JSC::iteratorClose();
              break;
            }
          }
        }
      }
      if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
      {
        v160 = 1;
        WTF::Vector<std::optional<WebCore::GPURenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t *)&v156, v15);
LABEL_40:
        v22 = 1;
        *(_DWORD *)(a3 + 112) = 1;
        goto LABEL_211;
      }
      v29 = v156;
      v156 = 0;
      v160 = 0;
      v30 = *(_QWORD *)v157;
      *(_QWORD *)v157 = 0;
      WTF::Vector<std::optional<WebCore::GPURenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t *)&v156, v15);
      v159[0] = 0;
      v159[1] = 0;
      v156 = 0;
      v161[1] = v29;
      *(_QWORD *)v157 = 0;
      v162 = v30;
      WTF::Vector<std::optional<WebCore::GPURenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t *)&v156, v31);
      WTF::AtomStringImpl::addLiteral();
      v32 = v156;
      v34 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v156);
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v33);
        else
          *(_DWORD *)v32 -= 2;
      }
      if (*((_DWORD *)v169 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v169))
        goto LABEL_209;
      if (v34 == 10)
      {
LABEL_65:
        WTF::AtomStringImpl::addLiteral();
        v35 = v156;
        v37 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v156);
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v36);
          else
            *(_DWORD *)v35 -= 2;
        }
        if (*((_DWORD *)v169 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v169))
          goto LABEL_209;
        if (v37 == 10)
        {
          v38 = 50000000;
          *(_QWORD *)v155 = 50000000;
          *(_DWORD *)&v155[8] = 0;
        }
        else
        {
          WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>((WTF::StringImpl *)a2, v37, (uint64_t)v155);
          if (*(_DWORD *)&v155[8])
            goto LABEL_99;
          v38 = *(_QWORD *)v155;
        }
        *(_QWORD *)&v168 = v38;
        BYTE8(v168) = 1;
        WTF::AtomStringImpl::addLiteral();
        v44 = v156;
        v45 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v156);
        if (v44)
        {
          if (*(_DWORD *)v44 == 2)
            WTF::StringImpl::destroy(v44, v9);
          else
            *(_DWORD *)v44 -= 2;
        }
        if (*((_DWORD *)v169 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v169) & 1) != 0)
          goto LABEL_99;
        if (v45 != 10)
        {
          v156 = a2[7];
          if ((v45 & 0xFFFE000000000002) != 0)
            goto LABEL_98;
          v46 = *(unsigned int *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0x4C);
          v47 = *(_DWORD *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0x4C) != 0;
          v48 = (char **)(16 * v46);
          if ((_DWORD)v46)
            v49 = v48 == &WebCore::JSGPUQuerySet::s_info;
          else
            v49 = 1;
          if (!v49)
          {
            do
            {
              v48 = (char **)v48[2];
              v47 = v48 != 0;
            }
            while (v48 != &WebCore::JSGPUQuerySet::s_info && v48 != 0);
          }
          if (!v47 || (v52 = *(_QWORD *)(v45 + 24)) == 0)
          {
LABEL_98:
            JSC::throwTypeError();
            goto LABEL_99;
          }
          v53 = *(_QWORD *)(v52 + 8);
          if (v53)
            goto LABEL_361;
          v53 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v53 = 1;
          *(_QWORD *)(v53 + 8) = v52;
          v54 = *(unsigned int **)(v52 + 8);
          *(_QWORD *)(v52 + 8) = v53;
          if (!v54)
            goto LABEL_361;
          do
          {
            v55 = __ldaxr(v54);
            v56 = v55 - 1;
          }
          while (__stlxr(v56, v54));
          if (!v56)
          {
            atomic_store(1u, v54);
            WTF::fastFree((WTF *)v54, v9);
          }
          v53 = *(_QWORD *)(v52 + 8);
          if (v53)
          {
LABEL_361:
            do
              v57 = __ldaxr((unsigned int *)v53);
            while (__stlxr(v57 + 1, (unsigned int *)v53));
          }
          v58 = (unsigned int *)v166;
          *(_QWORD *)&v166 = v53;
          if (v58)
          {
            do
            {
              v59 = __ldaxr(v58);
              v60 = v59 - 1;
            }
            while (__stlxr(v60, v58));
            if (!v60)
            {
              atomic_store(1u, v58);
              WTF::fastFree((WTF *)v58, v9);
            }
          }
        }
        WTF::AtomStringImpl::addLiteral();
        v61 = v156;
        v62 = (JSC::JSCell *)JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v156);
        if (v61)
        {
          if (*(_DWORD *)v61 == 2)
            WTF::StringImpl::destroy(v61, v9);
          else
            *(_DWORD *)v61 -= 2;
        }
        if (!*((_DWORD *)v169 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v169) & 1) == 0)
        {
          if (v62 != (JSC::JSCell *)10)
          {
            WebCore::convertDictionary<WebCore::GPURenderPassTimestampWrites>(v62, a2, (uint64_t)&v156);
            v63 = *(_DWORD *)&v157[8];
            if (*(_DWORD *)&v157[8])
            {
              *(_DWORD *)(a3 + 112) = 1;
              v69 = v63;
            }
            else
            {
              v64 = v156;
              v65 = *(_QWORD *)v157;
              v156 = 0;
              v66 = (unsigned int *)*((_QWORD *)&v166 + 1);
              *((_QWORD *)&v166 + 1) = v64;
              if (v66)
              {
                do
                {
                  v67 = __ldaxr(v66);
                  v68 = v67 - 1;
                }
                while (__stlxr(v68, v66));
                if (!v68)
                {
                  atomic_store(1u, v66);
                  WTF::fastFree((WTF *)v66, v9);
                }
              }
              v167 = v65;
              v69 = *(_DWORD *)&v157[8];
            }
            if (v69 != -1)
              ((void (*)(JSC::VM **, WTF::StringImpl **))off_1E3283980[v69])(&v175, &v156);
            if (v63)
            {
LABEL_210:
              v22 = v160;
              if (v160 == -1)
              {
LABEL_212:
                v115 = (unsigned int *)*((_QWORD *)&v166 + 1);
                *((_QWORD *)&v166 + 1) = 0;
                if (v115)
                {
                  do
                  {
                    v116 = __ldaxr(v115);
                    v117 = v116 - 1;
                  }
                  while (__stlxr(v117, v115));
                  if (!v117)
                  {
                    atomic_store(1u, v115);
                    WTF::fastFree((WTF *)v115, v9);
                  }
                }
                goto LABEL_216;
              }
LABEL_211:
              ((void (*)(WTF::StringImpl **, _QWORD *))off_1E3283990[v22])(&v156, v159);
              goto LABEL_212;
            }
          }
          v70 = *(_OWORD *)v161;
          v161[0] = 0;
          v161[1] = 0;
          *(_OWORD *)a3 = v70;
          *(_QWORD *)&v70 = v162;
          v162 = 0;
          *(_QWORD *)(a3 + 16) = v70;
          *(_BYTE *)(a3 + 24) = 0;
          *(_BYTE *)(a3 + 64) = 0;
          if (v165)
          {
            v71 = v163;
            v163 = 0;
            *(_QWORD *)(a3 + 24) = v71;
            *(_OWORD *)(a3 + 32) = v164[0];
            *(_OWORD *)(a3 + 41) = *(_OWORD *)((char *)v164 + 9);
            *(_BYTE *)(a3 + 64) = 1;
          }
          v51 = 0;
          v72 = v166;
          v166 = 0uLL;
          *(_OWORD *)(a3 + 72) = v72;
          *(_QWORD *)(a3 + 88) = v167;
          *(_OWORD *)(a3 + 96) = v168;
LABEL_129:
          *(_DWORD *)(a3 + 112) = v51;
          goto LABEL_210;
        }
LABEL_99:
        v51 = 1;
        goto LABEL_129;
      }
      v174 = a2[7];
      if ((v34 & 0xFFFFFFFFFFFFFFF7) == 2)
        goto LABEL_208;
      if ((v34 & 0xFFFE000000000002) != 0)
        goto LABEL_239;
      v39 = JSC::JSCell::getObject((JSC::JSCell *)v34);
      if (!v39)
        goto LABEL_239;
      v40 = (JSC::Structure *)v39;
      WTF::AtomStringImpl::addLiteral();
      v42 = JSC::JSObject::get(v40, (JSC::JSGlobalObject *)a2, *(unint64_t *)v155);
      if (*(_QWORD *)v155)
      {
        if (**(_DWORD **)v155 == 2)
          WTF::StringImpl::destroy(*(WTF::StringImpl **)v155, v41);
        else
          **(_DWORD **)v155 -= 2;
      }
      if (*((_DWORD *)v174 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v174) & 1) != 0)
        goto LABEL_209;
      if (v42 == 10)
      {
        v154 = 0;
        v43 = 0.0;
      }
      else
      {
        *(_QWORD *)v155 = v42;
        v73 = a2[7];
        v175 = v73;
        if (v42 >= 0xFFFE000000000000)
        {
          v74 = (double)(int)v42;
        }
        else if (v42 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v155, (JSC::JSGlobalObject *)a2);
        }
        else
        {
          *(_QWORD *)&v74 = v42 - 0x2000000000000;
        }
        if (*((_DWORD *)v73 + 20))
        {
          v139 = v74;
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v73);
          v74 = v139;
          if ((hasExceptionsAfterHandlingTraps & 1) != 0)
            goto LABEL_209;
        }
        if ((*(_QWORD *)&v74 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || v74 < -3.40282347e38
          || v74 > 3.40282347e38)
        {
          JSC::throwTypeError();
          goto LABEL_209;
        }
        v43 = v74;
        v154 = 1;
      }
      WTF::AtomStringImpl::addLiteral();
      v75 = *(WTF::StringImpl **)v155;
      v77 = JSC::JSObject::get(v40, (JSC::JSGlobalObject *)a2, *(unint64_t *)v155);
      if (v75)
      {
        if (*(_DWORD *)v75 == 2)
          WTF::StringImpl::destroy(v75, v76);
        else
          *(_DWORD *)v75 -= 2;
      }
      if (*((_DWORD *)v174 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v174) & 1) != 0)
        goto LABEL_209;
      if (v77 == 10)
      {
        v153 = 0;
      }
      else
      {
        *(_QWORD *)v155 = a2[7];
        v78 = *(JSC::VM **)v155;
        v79 = WebCore::parseEnumeration<WebCore::GPULoadOp>((JSC::JSGlobalObject *)a2, v77);
        if (*((_DWORD *)v78 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v78) & 1) != 0)
          goto LABEL_209;
        if (v79 <= 0xFFu)
          goto LABEL_239;
        v153 = v79 | 0x100;
      }
      WTF::AtomStringImpl::addLiteral();
      v80 = *(WTF::StringImpl **)v155;
      v82 = JSC::JSObject::get(v40, (JSC::JSGlobalObject *)a2, *(unint64_t *)v155);
      if (v80)
      {
        if (*(_DWORD *)v80 == 2)
          WTF::StringImpl::destroy(v80, v81);
        else
          *(_DWORD *)v80 -= 2;
      }
      if (*((_DWORD *)v174 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v174) & 1) != 0)
        goto LABEL_209;
      if (v82 == 10)
      {
        v152 = 0;
        goto LABEL_158;
      }
      v83 = a2[7];
      if (v82 >= 0xFFFE000000000000)
      {
        v141 = (_DWORD)v82 == 0;
        goto LABEL_352;
      }
      *(_QWORD *)&v84 = v82 - 0x2000000000000;
      if (v82 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        if (v84 <= 0.0)
        {
          v85 = v84 < 0.0;
          goto LABEL_157;
        }
      }
      else
      {
        if ((v82 & 0xFFFE000000000002) != 0)
        {
          v85 = v82 == 7;
          goto LABEL_157;
        }
        v142 = *(unsigned __int8 *)(v82 + 5);
        if (v142 == 3)
        {
          v145 = *(_DWORD *)(v82 + 8);
LABEL_344:
          v141 = v145 == 0;
          goto LABEL_352;
        }
        if (v142 == 2)
        {
          v143 = *(_QWORD *)(v82 + 8);
          if ((v143 & 1) != 0)
            v144 = (int *)(v82 + 16);
          else
            v144 = (int *)(v143 + 4);
          v145 = *v144;
          goto LABEL_344;
        }
        if ((*(_BYTE *)(16 * (*(_DWORD *)v82 & 0xFFFFFFFE) + 0xA) & 1) != 0)
        {
          v141 = *(_QWORD *)(16 * (*(_DWORD *)v82 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_352:
          v85 = !v141;
LABEL_157:
          v152 = v85;
          if (*((_DWORD *)v83 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v83) & 1) != 0)
            goto LABEL_209;
LABEL_158:
          WTF::AtomStringImpl::addLiteral();
          v86 = *(WTF::StringImpl **)v155;
          v88 = JSC::JSObject::get(v40, (JSC::JSGlobalObject *)a2, *(unint64_t *)v155);
          if (v86)
          {
            if (*(_DWORD *)v86 == 2)
              WTF::StringImpl::destroy(v86, v87);
            else
              *(_DWORD *)v86 -= 2;
          }
          if (*((_DWORD *)v174 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v174) & 1) != 0)
            goto LABEL_209;
          if (v88 == 10)
          {
            v89 = 0;
          }
          else
          {
            *(_QWORD *)v155 = a2[7];
            v90 = *(JSC::VM **)v155;
            v91 = WebCore::parseEnumeration<WebCore::GPUStoreOp>((JSC::JSGlobalObject *)a2, v88);
            if (*((_DWORD *)v90 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v90) & 1) != 0)
              goto LABEL_209;
            if (v91 <= 0xFFu)
              goto LABEL_239;
            v89 = v91 | 0x100;
          }
          WTF::AtomStringImpl::addLiteral();
          v92 = *(WTF::StringImpl **)v155;
          v94 = JSC::JSObject::get(v40, (JSC::JSGlobalObject *)a2, *(unint64_t *)v155);
          if (v92)
          {
            if (*(_DWORD *)v92 == 2)
              WTF::StringImpl::destroy(v92, v93);
            else
              *(_DWORD *)v92 -= 2;
          }
          if (*((_DWORD *)v174 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v174) & 1) != 0)
            goto LABEL_209;
          if (v94 == 10)
          {
            v95 = 0;
          }
          else
          {
            WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v94, v155);
            v95 = *(_DWORD *)v155;
            if (HIDWORD(*(_QWORD *)v155))
            {
LABEL_209:
              *(_DWORD *)(a3 + 112) = 1;
              goto LABEL_210;
            }
          }
          WTF::AtomStringImpl::addLiteral();
          v96 = *(WTF::StringImpl **)v155;
          v98 = JSC::JSObject::get(v40, (JSC::JSGlobalObject *)a2, *(unint64_t *)v155);
          if (v96)
          {
            if (*(_DWORD *)v96 == 2)
              WTF::StringImpl::destroy(v96, v97);
            else
              *(_DWORD *)v96 -= 2;
          }
          if (*((_DWORD *)v174 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v174) & 1) != 0)
            goto LABEL_209;
          if (v98 == 10)
          {
            v151 = 0;
          }
          else
          {
            *(_QWORD *)v155 = a2[7];
            v99 = *(JSC::VM **)v155;
            v100 = WebCore::parseEnumeration<WebCore::GPULoadOp>((JSC::JSGlobalObject *)a2, v98);
            if (*((_DWORD *)v99 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v99) & 1) != 0)
              goto LABEL_209;
            if (v100 <= 0xFFu)
              goto LABEL_239;
            v151 = v100 | 0x100;
          }
          WTF::AtomStringImpl::addLiteral();
          v101 = *(WTF::StringImpl **)v155;
          v103 = JSC::JSObject::get(v40, (JSC::JSGlobalObject *)a2, *(unint64_t *)v155);
          if (v101)
          {
            if (*(_DWORD *)v101 == 2)
              WTF::StringImpl::destroy(v101, v102);
            else
              *(_DWORD *)v101 -= 2;
          }
          if (*((_DWORD *)v174 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v174) & 1) != 0)
            goto LABEL_209;
          if (v103 == 10)
          {
            v104 = 0;
LABEL_194:
            WTF::AtomStringImpl::addLiteral();
            v107 = *(WTF::StringImpl **)v155;
            v109 = JSC::JSObject::get(v40, (JSC::JSGlobalObject *)a2, *(unint64_t *)v155);
            if (v107)
            {
              if (*(_DWORD *)v107 == 2)
                WTF::StringImpl::destroy(v107, v108);
              else
                *(_DWORD *)v107 -= 2;
            }
            if (*((_DWORD *)v174 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v174) & 1) != 0)
              goto LABEL_209;
            if (v109 == 10)
            {
              v110 = 0;
            }
            else
            {
              *(_QWORD *)v155 = a2[7];
              v111 = *(JSC::VM **)v155;
              v112 = WebCore::parseEnumeration<WebCore::GPUStoreOp>((JSC::JSGlobalObject *)a2, v109);
              if (*((_DWORD *)v111 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v111) & 1) != 0)
                goto LABEL_209;
              if (v112 <= 0xFFu)
                goto LABEL_239;
              v110 = v112 | 0x100;
            }
            WTF::AtomStringImpl::addLiteral();
            v113 = *(WTF::StringImpl **)v155;
            v114 = JSC::JSObject::get(v40, (JSC::JSGlobalObject *)a2, *(unint64_t *)v155);
            if (v113)
            {
              if (*(_DWORD *)v113 == 2)
                WTF::StringImpl::destroy(v113, v9);
              else
                *(_DWORD *)v113 -= 2;
            }
            if (*((_DWORD *)v174 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v174) & 1) != 0)
              goto LABEL_209;
            if (v114 == 10)
            {
LABEL_208:
              WebCore::throwRequiredMemberTypeError((int)a2, (int)&v174, "view", 5, "GPURenderPassDepthStencilAttachment", 36, "GPUTextureView", 15);
              goto LABEL_209;
            }
            *(_QWORD *)v155 = a2[7];
            if ((v114 & 0xFFFE000000000002) == 0)
            {
              v125 = *(unsigned int *)(16 * (*(_DWORD *)v114 & 0xFFFFFFFE) + 0x4C);
              v126 = *(_DWORD *)(16 * (*(_DWORD *)v114 & 0xFFFFFFFE) + 0x4C) != 0;
              if ((_DWORD)v125)
              {
                v127 = 16 * v125;
                if ((char **)v127 != &WebCore::JSGPUTextureView::s_info)
                {
                  do
                  {
                    v127 = *(_QWORD *)(v127 + 16);
                    v126 = v127 != 0;
                  }
                  while ((char **)v127 != &WebCore::JSGPUTextureView::s_info && v127 != 0);
                }
              }
              if (v126)
              {
                v129 = *(_QWORD *)(v114 + 24);
                if (v129)
                {
                  v130 = *(_QWORD *)(v129 + 8);
                  if (v130)
                    goto LABEL_362;
                  v130 = WTF::fastCompactMalloc((WTF *)0x10);
                  *(_DWORD *)v130 = 1;
                  *(_QWORD *)(v130 + 8) = v129;
                  v131 = *(unsigned int **)(v129 + 8);
                  *(_QWORD *)(v129 + 8) = v130;
                  if (!v131)
                    goto LABEL_362;
                  do
                  {
                    v132 = __ldaxr(v131);
                    v133 = v132 - 1;
                  }
                  while (__stlxr(v133, v131));
                  if (!v133)
                  {
                    atomic_store(1u, v131);
                    WTF::fastFree((WTF *)v131, v9);
                  }
                  v130 = *(_QWORD *)(v129 + 8);
                  if (v130)
                  {
LABEL_362:
                    do
                      v134 = __ldaxr((unsigned int *)v130);
                    while (__stlxr(v134 + 1, (unsigned int *)v130));
                  }
                  *(float *)v157 = v43;
                  v157[4] = v154;
                  *(_WORD *)&v157[5] = v172;
                  v157[7] = v173;
                  *(_WORD *)&v157[8] = v153;
                  *(_WORD *)&v157[10] = v89;
                  v157[12] = v152;
                  v157[15] = v171;
                  *(_WORD *)&v157[13] = v170;
                  *(_DWORD *)&v157[16] = v95;
                  *(_WORD *)&v157[20] = v151;
                  *(_WORD *)&v157[22] = v110;
                  v157[24] = v104;
                  v158 = 0;
                  v156 = 0;
                  *(_OWORD *)v155 = *(_OWORD *)v157;
                  *(_OWORD *)&v155[9] = *(_OWORD *)&v157[9];
                  v135 = v165;
                  if (v165)
                  {
                    v136 = (unsigned int *)v163;
                    v163 = (WTF *)v130;
                    if (v136)
                    {
                      do
                      {
                        v137 = __ldaxr(v136);
                        v138 = v137 - 1;
                      }
                      while (__stlxr(v138, v136));
                      if (!v138)
                      {
                        atomic_store(1u, v136);
                        WTF::fastFree((WTF *)v136, v9);
                      }
                    }
                    v164[0] = *(_OWORD *)v155;
                    *(_OWORD *)((char *)v164 + 9) = *(_OWORD *)&v155[9];
                    v135 = v158;
                    if (v158 == -1)
                      goto LABEL_65;
                  }
                  else
                  {
                    v163 = (WTF *)v130;
                    v164[0] = *(_OWORD *)v157;
                    *(_OWORD *)((char *)v164 + 9) = *(_OWORD *)&v157[9];
                    v165 = 1;
                  }
                  ((void (*)(_BYTE *, WTF::StringImpl **))off_1E3283970[v135])(v155, &v156);
                  goto LABEL_65;
                }
              }
            }
LABEL_239:
            JSC::throwTypeError();
            goto LABEL_209;
          }
          v105 = a2[7];
          if (v103 >= 0xFFFE000000000000)
          {
            v146 = (_DWORD)v103 == 0;
            goto LABEL_356;
          }
          *(_QWORD *)&v106 = v103 - 0x2000000000000;
          if (v103 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            if (v106 <= 0.0)
            {
              v104 = v106 < 0.0;
              goto LABEL_193;
            }
          }
          else
          {
            if ((v103 & 0xFFFE000000000002) != 0)
            {
              v104 = v103 == 7;
              goto LABEL_193;
            }
            v147 = *(unsigned __int8 *)(v103 + 5);
            if (v147 == 3)
            {
              v150 = *(_DWORD *)(v103 + 8);
LABEL_348:
              v146 = v150 == 0;
              goto LABEL_356;
            }
            if (v147 == 2)
            {
              v148 = *(_QWORD *)(v103 + 8);
              if ((v148 & 1) != 0)
                v149 = (int *)(v103 + 16);
              else
                v149 = (int *)(v148 + 4);
              v150 = *v149;
              goto LABEL_348;
            }
            if ((*(_BYTE *)(16 * (*(_DWORD *)v103 & 0xFFFFFFFE) + 0xA) & 1) != 0)
            {
              v146 = *(_QWORD *)(16 * (*(_DWORD *)v103 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_356:
              v104 = !v146;
LABEL_193:
              if (*((_DWORD *)v105 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v105) & 1) != 0)
                goto LABEL_209;
              goto LABEL_194;
            }
          }
          v104 = 1;
          goto LABEL_193;
        }
      }
      v85 = 1;
      goto LABEL_157;
    }
  }
LABEL_19:
  *(_DWORD *)(a3 + 112) = 1;
LABEL_20:
  *((_QWORD *)&v166 + 1) = 0;
LABEL_216:
  v118 = (unsigned int *)v166;
  *(_QWORD *)&v166 = 0;
  if (v118)
  {
    do
    {
      v119 = __ldaxr(v118);
      v120 = v119 - 1;
    }
    while (__stlxr(v120, v118));
    if (!v120)
    {
      atomic_store(1u, v118);
      WTF::fastFree((WTF *)v118, v9);
    }
  }
  if (v165)
  {
    v121 = (unsigned int *)v163;
    v163 = 0;
    if (v121)
    {
      do
      {
        v122 = __ldaxr(v121);
        v123 = v122 - 1;
      }
      while (__stlxr(v123, v121));
      if (!v123)
      {
        atomic_store(1u, v121);
        WTF::fastFree((WTF *)v121, v9);
      }
    }
  }
  WTF::Vector<std::optional<WebCore::GPURenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t *)&v161[1], v9);
  result = v161[0];
  v161[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v124);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::JSGPUComputePipelineOwner::~JSGPUComputePipelineOwner(WebCore::JSGPUComputePipelineOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSGPUDeviceOwner::~JSGPUDeviceOwner(WebCore::JSGPUDeviceOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSGPUDeviceLostInfoOwner::~JSGPUDeviceLostInfoOwner(WebCore::JSGPUDeviceLostInfoOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSGPUExternalTextureOwner::~JSGPUExternalTextureOwner(WebCore::JSGPUExternalTextureOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSGPUInternalErrorOwner::~JSGPUInternalErrorOwner(WebCore::JSGPUInternalErrorOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSGPUOutOfMemoryErrorOwner::~JSGPUOutOfMemoryErrorOwner(WebCore::JSGPUOutOfMemoryErrorOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSGPUPipelineLayoutOwner::~JSGPUPipelineLayoutOwner(WebCore::JSGPUPipelineLayoutOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSGPUQuerySetOwner::~JSGPUQuerySetOwner(WebCore::JSGPUQuerySetOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSGPUQueueOwner::~JSGPUQueueOwner(WebCore::JSGPUQueueOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSGPURenderBundleOwner::~JSGPURenderBundleOwner(WebCore::JSGPURenderBundleOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSGPURenderBundleEncoderOwner::~JSGPURenderBundleEncoderOwner(WebCore::JSGPURenderBundleEncoderOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

_BYTE *WebCore::jsGPUComputePipelinePrototypeFunction_getBindGroupLayout(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  _DWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  JSValue v24;
  JSC::VM *v25;
  _DWORD v26[2];
  uint64_t v27;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "GPUComputePipeline", "getBindGroupLayout");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPUComputePipeline::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPUComputePipeline::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "GPUComputePipeline", "getBindGroupLayout");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v24);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v26);
  if (v26[1])
    return 0;
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v11 + 8) + 16))(&v27, *(_QWORD *)(v11 + 8), v26[0]);
  v13 = (WTF *)WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v13 = 1;
  v14 = v27;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = v14;
  v16 = WebCore::wrap<WebCore::GPUBindGroupLayout>((uint64_t)this, v12, v13);
  if (*(_DWORD *)v13 == 1)
  {
    v18 = (_DWORD *)*((_QWORD *)v13 + 2);
    *((_QWORD *)v13 + 2) = 0;
    if (v18)
    {
      if (v18[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
      else
        --v18[2];
    }
    v19 = *((_QWORD *)v13 + 1);
    if (v19)
    {
      *(_QWORD *)(v19 + 8) = 0;
      v20 = (unsigned int *)*((_QWORD *)v13 + 1);
      *((_QWORD *)v13 + 1) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          WTF::fastFree((WTF *)v20, v15);
        }
      }
    }
    else
    {
      *((_QWORD *)v13 + 1) = 0;
    }
    WTF::fastFree(v13, v15);
  }
  else
  {
    --*(_DWORD *)v13;
  }
  return (_BYTE *)v16;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17GPUPipelineLayoutENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_17GPUAutoLayoutModeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17GPUPipelineLayoutENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_17GPUAutoLayoutModeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17GPUPipelineLayoutENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_17GPUAutoLayoutModeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17GPUPipelineLayoutENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_17GPUAutoLayoutModeEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  _DWORD *v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E3282918[v5])(&v10, v4);
LABEL_7:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      v9 = (_DWORD *)*((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      if (v9)
      {
        if (v9[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
        else
          --v9[2];
      }
      return WTF::fastFree(v7, a2);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17GPUPipelineLayoutENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_17GPUAutoLayoutModeEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3282918[v5])(&v6, v4);
  }
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 1;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20GPUProgrammableStageENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  unsigned int *result;
  unsigned int v10;
  unsigned int v11;

  v3 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(WTF::StringImpl ***)(a2 + 24);
    v5 = 16 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  v7 = *(WTF **)(a2 + 24);
  if (v7)
  {
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 32) = 0;
    WTF::fastFree(v7, (void *)a2);
  }
  if (*(_BYTE *)(a2 + 16))
  {
    v8 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  result = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    do
    {
      v10 = __ldaxr(result);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, result));
    if (!v11)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, (void *)a2);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore17GPUPipelineLayoutENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSB_17GPUAutoLayoutModeEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3282918[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

void WebCore::GPUComputePipelineDescriptor::~GPUComputePipelineDescriptor(WebCore::GPUComputePipelineDescriptor *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  char v14;

  v3 = *((unsigned int *)this + 15);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 6);
    v5 = 16 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 6);
  if (v7)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v7, a2);
  }
  if (*((_BYTE *)this + 40))
  {
    v8 = (WTF::StringImpl *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, a2);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  v9 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  v12 = *((unsigned int *)this + 4);
  if ((_DWORD)v12 != -1)
    ((void (*)(char *, char *))off_1E3282918[v12])(&v14, (char *)this + 8);
  *((_DWORD *)this + 4) = -1;
  v13 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
}

uint64_t WebCore::jsGPUDevicePrototypeFunction_destroy(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::ScriptExecutionContext *v10;
  uint64_t v12;

  v3 = *((_QWORD *)a2 + 5);
  v12 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v12, "GPUDevice", "destroy");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSGPUDevice::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSGPUDevice::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v12, "GPUDevice", "destroy");
  v9 = *(_QWORD *)(v3 + 24);
  v10 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (v10)
    WebCore::GPUDevice::destroy((WebCore::GPUDevice *)(v9 - 32), v10);
  return 10;
}

_BYTE *WebCore::jsGPUDevicePrototypeFunction_createBuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  void *v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  WTF *v20;
  void *v21;
  JSValue v23;
  WTF::StringImpl *v24;
  JSValue v25;
  WebCore *v26;
  JSC::JSGlobalObject *v27;
  JSC::CallFrame *v28;
  JSC::VM *v29;
  WTF::StringImpl *v30;
  _QWORD v31[2];
  int v32[2];
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  _QWORD v36[2];
  int v37;
  _BYTE v38[8];
  WTF::StringImpl *v39;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "GPUDevice", "createBuffer");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPUDevice::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPUDevice::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "GPUDevice", "createBuffer");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v23);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convertDictionary<WebCore::GPUBufferDescriptor>(*((JSC::JSCell **)a2 + 6), (JSC::VM **)this, (uint64_t)&v35);
  v12 = v37;
  if (v37)
  {
    v17 = 0;
LABEL_23:
    if (v12 != -1)
      ((void (*)(int *, WTF::StringImpl **))off_1E3282D38[v12])(v32, &v35);
    return (_BYTE *)v17;
  }
  v13 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v14 = v35;
  v35 = 0;
  v30 = v14;
  v31[0] = v36[0];
  *(_QWORD *)((char *)v31 + 5) = *(_QWORD *)((char *)v36 + 5);
  WebCore::GPUDevice::createBuffer(v11 - 32, (uint64_t)&v30, (uint64_t)v32);
  if (!v34)
  {
    v15 = *(WTF **)v32;
    *(_QWORD *)v32 = 0;
    v17 = WebCore::wrap<WebCore::GPUBuffer>((uint64_t)this, v13, v15);
    if (*(_DWORD *)v15 == 1)
    {
      WebCore::GPUBuffer::~GPUBuffer(v15, v16);
      WTF::fastFree(v20, v21);
    }
    else
    {
      --*(_DWORD *)v15;
    }
LABEL_17:
    if (v34 != -1)
      ((void (*)(_BYTE *, int *))off_1E3282D28[v34])(v38, v32);
    v34 = -1;
    v18 = v30;
    v30 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)v18 -= 2;
    }
    v12 = v37;
    goto LABEL_23;
  }
  if (v34 == 1)
  {
    v16 = (void *)LOBYTE(v32[0]);
    v38[0] = v32[0];
    v24 = v33;
    v33 = 0;
    v39 = v24;
    if (!*((_QWORD *)v4 + 2))
    {
      v25.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v32[0]), (JSC::JSGlobalObject *)&v39);
      JSC::VM::throwException(v4, this, v25);
      v24 = v39;
    }
    v39 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)v24 -= 2;
    }
    v17 = 0;
    goto LABEL_17;
  }
  v26 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsGPUDevicePrototypeFunction_createTexture(v26, v27, v28);
}

_BYTE *WebCore::jsGPUDevicePrototypeFunction_createTexture(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  WTF *v18;
  void *v19;
  unint64_t v20;
  WTF *v21;
  WTF::StringImpl *v22;
  JSValue v25;
  WTF::StringImpl *v26;
  JSValue v27;
  WebCore *v28;
  JSC::JSGlobalObject *v29;
  JSC::CallFrame *v30;
  JSC::VM *v31;
  WTF::StringImpl *v32;
  _BYTE v33[16];
  int v34;
  __int128 v35;
  WTF *v36;
  uint64_t v37;
  int v38[2];
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  WTF *v45;
  uint64_t v46;
  int v47;
  char v48[8];
  WTF::StringImpl *v49;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v31 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v31, "GPUDevice", "createTexture");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPUDevice::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPUDevice::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v31, "GPUDevice", "createTexture");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v25);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convertDictionary<WebCore::GPUTextureDescriptor>(*((JSC::JSCell **)a2 + 6), (JSC::VM **)this, (uint64_t)&v41);
  v12 = v47;
  if (v47)
  {
    v20 = 0;
LABEL_29:
    if (v12 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3282D78[v12])(&v32, &v41);
    return (_BYTE *)v20;
  }
  v13 = v11 - 32;
  v14 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v15 = v41;
  v41 = 0;
  v32 = v15;
  v33[0] = 0;
  v34 = -1;
  v16 = v43;
  if (v43 != -1)
  {
    ((void (*)(int *, _BYTE *, uint64_t *))off_1E3282D58[v43])(v38, v33, &v42);
    v34 = v16;
  }
  v35 = v44;
  v36 = v45;
  v17 = v46;
  v45 = 0;
  v46 = 0;
  v37 = v17;
  WebCore::GPUDevice::createTexture(v13, (uint64_t)&v32, (uint64_t)v38);
  if (!v40)
  {
    v18 = *(WTF **)v38;
    *(_QWORD *)v38 = 0;
    v20 = WebCore::wrap<WebCore::GPUTexture>((uint64_t)this, v14, v18);
    if (*((_DWORD *)v18 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v18 + 8))(v18);
    else
      --*((_DWORD *)v18 + 2);
LABEL_19:
    if (v40 != -1)
      ((void (*)(char *, int *))off_1E3282D68[v40])(v48, v38);
    v40 = -1;
    v21 = v36;
    if (v36)
    {
      v36 = 0;
      LODWORD(v37) = 0;
      WTF::fastFree(v21, v19);
    }
    if (v34 != -1)
      ((void (*)(char *, _BYTE *))off_1E3282D48[v34])(v48, v33);
    v34 = -1;
    v22 = v32;
    v32 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)v22 -= 2;
    }
    v12 = v47;
    goto LABEL_29;
  }
  if (v40 == 1)
  {
    v19 = (void *)LOBYTE(v38[0]);
    v48[0] = v38[0];
    v26 = v39;
    v39 = 0;
    v49 = v26;
    if (!*((_QWORD *)v4 + 2))
    {
      v27.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v38[0]), (JSC::JSGlobalObject *)&v49);
      JSC::VM::throwException(v4, this, v27);
      v26 = v49;
    }
    v49 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)v26 -= 2;
    }
    v20 = 0;
    goto LABEL_19;
  }
  v28 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsGPUDevicePrototypeFunction_createSampler(v28, v29, v30);
}

_BYTE *WebCore::jsGPUDevicePrototypeFunction_createSampler(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF *v16;
  void *v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  _DWORD *v21;
  WTF::StringImpl *v22;
  JSValue v23;
  WebCore *v24;
  JSC::JSGlobalObject *v25;
  JSC::CallFrame *v26;
  JSC::VM *v27;
  WTF::StringImpl *v28;
  __int128 v29;
  int v30;
  char v31;
  int v32[2];
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  __int128 v36;
  int v37;
  int v38;
  _BYTE v39[8];
  WTF::StringImpl *v40;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v27 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "GPUDevice", "createSampler");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPUDevice::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPUDevice::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "GPUDevice", "createSampler");
  if (*((_DWORD *)a2 + 8) == 1)
    v11 = 10;
  else
    v11 = *((_QWORD *)a2 + 6);
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertDictionary<WebCore::GPUSamplerDescriptor>((JSC::JSCell *)v11, (unint64_t)this, (uint64_t)&v35);
  v13 = v38;
  if (v38)
  {
    v18 = 0;
LABEL_26:
    if (v13 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3282D98[v13])(&v28, &v35);
    return (_BYTE *)v18;
  }
  v14 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v15 = v35;
  v35 = 0;
  v29 = v36;
  v30 = v37;
  v28 = v15;
  v31 = 1;
  WebCore::GPUDevice::createSampler((WebCore::GPUSamplerDescriptor *)&v28, v12 - 32, (uint64_t)v32);
  if (!v34)
  {
    v16 = *(WTF **)v32;
    *(_QWORD *)v32 = 0;
    v18 = WebCore::wrap<WebCore::GPUSampler>((uint64_t)this, v14, v16);
    if (*(_DWORD *)v16 == 1)
    {
      v21 = (_DWORD *)*((_QWORD *)v16 + 1);
      *((_QWORD *)v16 + 1) = 0;
      if (v21)
      {
        if (v21[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
        else
          --v21[2];
      }
      WTF::fastFree(v16, v17);
    }
    else
    {
      --*(_DWORD *)v16;
    }
LABEL_19:
    if (v34 != -1)
      ((void (*)(_BYTE *, int *))off_1E3282D88[v34])(v39, v32);
    v34 = -1;
    if (v31)
    {
      v19 = v28;
      v28 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v17);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    v13 = v38;
    goto LABEL_26;
  }
  if (v34 == 1)
  {
    v17 = (void *)LOBYTE(v32[0]);
    v39[0] = v32[0];
    v22 = v33;
    v33 = 0;
    v40 = v22;
    if (!*((_QWORD *)v4 + 2))
    {
      v23.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v32[0]), (JSC::JSGlobalObject *)&v40);
      JSC::VM::throwException(v4, this, v23);
      v22 = v40;
    }
    v40 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v22 -= 2;
    }
    v18 = 0;
    goto LABEL_19;
  }
  v24 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsGPUDevicePrototypeFunction_importExternalTexture(v24, v25, v26);
}

_BYTE *WebCore::jsGPUDevicePrototypeFunction_importExternalTexture(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  JSC::JSCell *v12;
  uint64_t Object;
  JSC::Structure *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  unsigned __int16 v25;
  JSC::VM *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  int v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t SlowCase;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char **v53;
  int v54;
  unint64_t v55;
  uint64_t *v56;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v58;
  JSC::Structure *v59;
  JSC::JSCell *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v68;
  _BOOL4 v69;
  uint64_t v70;
  _BOOL4 v71;
  uint64_t v72;
  WTF *v74;
  int v75;
  int v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  WTF *v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  void *v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t *Allocator;
  WTF::StringImpl *v92;
  _DWORD *v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  WTF::StringImpl *v99;
  int v100;
  JSValue v102;
  WTF::StringImpl *v103;
  JSValue v104;
  unint64_t v105;
  WebCore *v106;
  JSC::JSGlobalObject *v107;
  JSC::CallFrame *v108;
  JSC::VM *v109;
  WTF::StringImpl *v110;
  _BYTE v111[8];
  int v112;
  char v113;
  int v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  int v117;
  char v118;
  JSC::VM *v119;
  WTF *v120;
  WTF::StringImpl *v121;
  char v122;
  char v123;
  uint64_t *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  int v127;
  int v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v109 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v109, "GPUDevice", "importExternalTexture");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPUDevice::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPUDevice::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v109, "GPUDevice", "importExternalTexture");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v102.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v102);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
  v119 = v4;
  if (((unint64_t)v12 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v115 = 0;
    v116 = 0;
    v117 = 0;
    v118 = 0;
    goto LABEL_41;
  }
  if (((unint64_t)v12 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v12)) == 0)
  {
    JSC::throwTypeError();
    SlowCase = 0;
    v31 = 1;
    v114 = 1;
    goto LABEL_141;
  }
  v14 = (JSC::Structure *)Object;
  v118 = 0;
  v115 = 0;
  v116 = 0;
  v117 = 0;
  WTF::AtomStringImpl::addLiteral();
  v16 = JSC::JSObject::get(v14, this, (unint64_t)v110);
  if (v110)
  {
    if (*(_DWORD *)v110 == 2)
      WTF::StringImpl::destroy(v110, v15);
    else
      *(_DWORD *)v110 -= 2;
  }
  if (*((_DWORD *)v119 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v119))
    goto LABEL_42;
  if (v16 == 10)
    goto LABEL_28;
  WebCore::valueToUSVString(this, v16, (uint64_t)&v125);
  v18 = (int)v126;
  if ((_DWORD)v126)
  {
    v114 = 1;
    v21 = (int)v126;
  }
  else
  {
    v19 = v125;
    v125 = 0;
    v20 = v115;
    v115 = v19;
    if (!v20)
    {
      v21 = 0;
      goto LABEL_26;
    }
    if (*(_DWORD *)v20 != 2)
    {
      v21 = 0;
      *(_DWORD *)v20 -= 2;
LABEL_26:
      ((void (*)(WTF **, WTF::StringImpl **))off_1E3282908[v21])(&v120, &v125);
      goto LABEL_27;
    }
    WTF::StringImpl::destroy(v20, v17);
    v21 = (int)v126;
  }
  if (v21 != -1)
    goto LABEL_26;
LABEL_27:
  if (v18)
    goto LABEL_43;
LABEL_28:
  WTF::AtomStringImpl::addLiteral();
  v22 = v125;
  v24 = JSC::JSObject::get(v14, this, (unint64_t)v125);
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
  if (*((_DWORD *)v119 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v119))
    goto LABEL_42;
  if (v24 == 10)
  {
    LOBYTE(v25) = 0;
  }
  else
  {
    v125 = (WTF::StringImpl *)*((_QWORD *)this + 7);
    v26 = v125;
    v25 = WebCore::parseEnumeration<WebCore::GPUPredefinedColorSpace>(this, v24);
    if (*((_DWORD *)v26 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v26) & 1) != 0)
      goto LABEL_42;
    if (v25 <= 0xFFu)
    {
      JSC::throwTypeError();
      goto LABEL_42;
    }
  }
  v118 = v25;
  WTF::AtomStringImpl::addLiteral();
  v27 = v125;
  v29 = JSC::JSObject::get(v14, this, (unint64_t)v125);
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v28);
    else
      *(_DWORD *)v27 -= 2;
  }
  if (*((_DWORD *)v119 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v119))
    goto LABEL_42;
  if (v29 == 10)
  {
LABEL_41:
    WebCore::throwRequiredMemberTypeError((int)this, (int)&v119, "source", 7, "GPUExternalTextureDescriptor", 29, "(HTMLVideoElement or WebCodecsVideoFrame)", 42);
LABEL_42:
    v114 = 1;
    goto LABEL_43;
  }
  v124 = (uint64_t *)*((_QWORD *)this + 7);
  if ((v29 & 0xFFFE000000000002) != 0)
    goto LABEL_151;
  v68 = *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C);
  v69 = *(_DWORD *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C) != 0;
  v70 = 16 * v68;
  v71 = v69;
  if ((_DWORD)v68)
  {
    v71 = 1;
    if ((char **)v70 != &WebCore::JSHTMLVideoElement::s_info)
    {
      v72 = 16 * v68;
      do
      {
        v72 = *(_QWORD *)(v72 + 16);
        v71 = v72 != 0;
      }
      while ((char **)v72 != &WebCore::JSHTMLVideoElement::s_info && v72 != 0);
    }
  }
  if (v71)
  {
    v74 = *(WTF **)(v29 + 24);
    if (v74)
    {
      v75 = 0;
      *((_DWORD *)v74 + 6) += 2;
      goto LABEL_92;
    }
  }
  if ((_DWORD)v68 && (char **)v70 != &WebCore::JSWebCodecsVideoFrame::s_info)
  {
    do
    {
      v70 = *(_QWORD *)(v70 + 16);
      v69 = v70 != 0;
    }
    while ((char **)v70 != &WebCore::JSWebCodecsVideoFrame::s_info && v70 != 0);
  }
  if (!v69 || (v74 = *(WTF **)(v29 + 24)) == 0)
  {
LABEL_151:
    JSC::throwTypeError();
    v77 = 1;
    v128 = 1;
    goto LABEL_152;
  }
  ++*((_DWORD *)v74 + 4);
  v75 = 1;
LABEL_92:
  v120 = v74;
  LODWORD(v121) = v75;
  v122 = 1;
  LOBYTE(v126) = 0;
  v127 = -1;
  ((void (*)(char *, WTF::StringImpl **, WTF **))off_1E3282DB8[v75])(&v123, &v126, &v120);
  v127 = v75;
  v128 = 0;
  if (!v122 || (_DWORD)v121 == -1)
  {
    LOBYTE(v120) = 0;
    LODWORD(v121) = -1;
    goto LABEL_156;
  }
  ((void (*)(char *, WTF **))off_1E3282DA8[v121])(&v123, &v120);
  v77 = v128;
  if (!v128)
  {
    v75 = v127;
    LOBYTE(v120) = 0;
    LODWORD(v121) = -1;
    if (v127 == -1)
    {
      if (v117 != -1)
      {
        ((void (*)(uint64_t **, uint64_t *))off_1E3282DA8[v117])(&v124, &v116);
        v117 = -1;
      }
      goto LABEL_157;
    }
LABEL_156:
    ((void (*)(uint64_t **, WTF **, WTF::StringImpl **))off_1E3282DB8[v75])(&v124, &v120, &v126);
    LODWORD(v121) = v75;
    v124 = &v116;
    ((void (*)(uint64_t **, uint64_t *, WTF **))off_1E3283020[v75])(&v124, &v116, &v120);
LABEL_157:
    if ((_DWORD)v121 != -1)
      ((void (*)(uint64_t **, WTF **))off_1E3282DA8[v121])(&v124, &v120);
    v99 = v115;
    v115 = 0;
    v110 = v99;
    v111[0] = 0;
    v112 = -1;
    v100 = v117;
    if (v117 != -1)
    {
      ((void (*)(WTF **, _BYTE *, uint64_t *))off_1E3282DB8[v117])(&v120, v111, &v116);
      v112 = v100;
    }
    v113 = v118;
    v114 = 0;
    v77 = v128;
    goto LABEL_162;
  }
LABEL_152:
  v114 = 1;
LABEL_162:
  if (v77 != -1)
    ((void (*)(WTF **, WTF::StringImpl **))off_1E3283030[v77])(&v120, &v126);
LABEL_43:
  if (v117 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3282DA8[v117])(&v125, &v116);
  v117 = -1;
  v30 = v115;
  v115 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v17);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = v114;
  if (v114)
  {
    SlowCase = 0;
    goto LABEL_140;
  }
  v32 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v33 = v110;
  v110 = 0;
  v115 = v33;
  LOBYTE(v116) = 0;
  v117 = -1;
  v34 = v112;
  if (v112 != -1)
  {
    ((void (*)(WTF::StringImpl **, uint64_t *, _BYTE *))off_1E3282DB8[v112])(&v125, &v116, v111);
    v117 = v34;
  }
  v118 = v113;
  WebCore::GPUDevice::importExternalTexture(v11 - 32, &v115, (uint64_t)&v125);
  if (!v127)
  {
    v36 = (unint64_t)v125;
    v125 = 0;
    v37 = *(_QWORD *)(*(_QWORD *)(v32 + 3320) + 32);
    if (v37)
    {
      v38 = *(_DWORD *)(v37 - 8);
      v39 = (~(v36 << 32) + v36) ^ ((~(v36 << 32) + v36) >> 22);
      v40 = 9 * ((v39 + ~(v39 << 13)) ^ ((v39 + ~(v39 << 13)) >> 8));
      v41 = (v40 ^ (v40 >> 15)) + ~((v40 ^ (v40 >> 15)) << 27);
      v42 = v38 & ((v41 >> 31) ^ v41);
      v43 = *(_QWORD *)(v37 + 16 * v42);
      if (v43 == v36)
      {
LABEL_57:
        v45 = *(_QWORD *)(v37 + 16 * v42 + 8);
        if (v45)
        {
          if ((*(_BYTE *)(v45 + 8) & 3) == 0)
          {
            SlowCase = *(_QWORD *)v45;
            if (*(_QWORD *)v45)
            {
LABEL_130:
              if (*(_DWORD *)v36 == 1)
              {
                v94 = *(_DWORD **)(v36 + 16);
                *(_QWORD *)(v36 + 16) = 0;
                if (v94)
                {
                  if (v94[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v94 + 8))(v94);
                  else
                    --v94[2];
                }
                v95 = *(_QWORD *)(v36 + 8);
                if (v95)
                {
                  *(_QWORD *)(v95 + 8) = 0;
                  v96 = *(unsigned int **)(v36 + 8);
                  *(_QWORD *)(v36 + 8) = 0;
                  if (v96)
                  {
                    do
                    {
                      v97 = __ldaxr(v96);
                      v98 = v97 - 1;
                    }
                    while (__stlxr(v98, v96));
                    if (!v98)
                    {
                      atomic_store(1u, v96);
                      WTF::fastFree((WTF *)v96, (void *)v35);
                    }
                  }
                }
                else
                {
                  *(_QWORD *)(v36 + 8) = 0;
                }
                WTF::fastFree((WTF *)v36, (void *)v35);
              }
              else
              {
                --*(_DWORD *)v36;
              }
LABEL_132:
              if (v127 != -1)
                ((void (*)(WTF **, WTF::StringImpl **))off_1E3282DC8[v127])(&v120, &v125);
              v127 = -1;
              if (v117 != -1)
                ((void (*)(WTF **, uint64_t *))off_1E3282DA8[v117])(&v120, &v116);
              v117 = -1;
              v92 = v115;
              v115 = 0;
              if (v92)
              {
                if (*(_DWORD *)v92 == 2)
                  WTF::StringImpl::destroy(v92, (WTF::StringImpl *)v35);
                else
                  *(_DWORD *)v92 -= 2;
              }
              v31 = v114;
LABEL_140:
              if (v31 == -1)
                return (_BYTE *)SlowCase;
LABEL_141:
              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3282DD8[v31])(&v115, &v110);
              return (_BYTE *)SlowCase;
            }
          }
        }
      }
      else
      {
        v44 = 1;
        while (v43)
        {
          v42 = ((_DWORD)v42 + v44) & v38;
          v43 = *(_QWORD *)(v37 + 16 * v42);
          ++v44;
          if (v43 == v36)
            goto LABEL_57;
        }
      }
    }
    ++*(_DWORD *)v36;
    v47 = *(_QWORD *)(v32 + 3296);
    if (v47)
    {
      v48 = *(_DWORD *)(v47 - 8);
      v49 = ((unint64_t)&WebCore::JSGPUExternalTexture::s_info
           + ~((_QWORD)&WebCore::JSGPUExternalTexture::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUExternalTexture::s_info
                                                                        + ~((_QWORD)&WebCore::JSGPUExternalTexture::s_info << 32)) >> 22);
      v50 = 9 * ((v49 + ~(v49 << 13)) ^ ((v49 + ~(v49 << 13)) >> 8));
      v51 = (v50 ^ (v50 >> 15)) + ~((v50 ^ (v50 >> 15)) << 27);
      v52 = v48 & ((v51 >> 31) ^ v51);
      v53 = *(char ***)(v47 + 16 * v52);
      if (v53 == &WebCore::JSGPUExternalTexture::s_info)
      {
LABEL_65:
        v55 = *(_QWORD *)(v47 + 16 * v52 + 8);
        if (v55)
          goto LABEL_67;
      }
      else
      {
        v54 = 1;
        while (v53)
        {
          v52 = ((_DWORD)v52 + v54) & v48;
          v53 = *(char ***)(v47 + 16 * v52);
          ++v54;
          if (v53 == &WebCore::JSGPUExternalTexture::s_info)
            goto LABEL_65;
        }
      }
    }
    v56 = *(uint64_t **)(v32 + 56);
    Structure = WebCore::JSGPUExternalTexturePrototype::createStructure(v56, v32, *(JSC::JSCell **)(v32 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v60 = (JSC::JSCell *)WebCore::JSGPUExternalTexturePrototype::create((WebCore::JSGPUExternalTexturePrototype *)v56, Structure, v58, v59);
    v61 = WebCore::JSGPUExternalTexture::createStructure(v56, v32, v60);
    v55 = WebCore::cacheDOMStructure((JSCell *)v32, v61, (uint64_t)&WebCore::JSGPUExternalTexture::s_info);
LABEL_67:
    v62 = *(_QWORD *)(v32 + 56);
    v63 = *(_QWORD *)(v62 + 41456);
    v64 = *(_QWORD *)(v63 + 23536);
    v65 = *(_QWORD **)(v64 + 192);
    if (v65)
      goto LABEL_115;
    v66 = *(_QWORD *)(v63 + 22648);
    if (__ldaxr((unsigned __int8 *)v66))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v66))
    {
      goto LABEL_100;
    }
    MEMORY[0x19AEA534C](v66);
LABEL_100:
    v78 = *(_QWORD *)(v66 + 2824);
    if (!*(_QWORD *)(v78 + 192))
    {
      v79 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v120, "IsoSpace T");
      v124 = 0;
      MEMORY[0x19AEA3204](v79, &v120, v62 + 192, v62 + 1872, 32, 8, &v124);
      v81 = (uint64_t)v124;
      v124 = 0;
      if (v81)
        (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
      v82 = v120;
      v120 = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 1)
          WTF::fastFree(v82, v80);
        else
          --*(_DWORD *)v82;
      }
      v83 = *(_QWORD *)(v78 + 192);
      *(_QWORD *)(v78 + 192) = v79;
      if (v83)
        (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
    }
    v65 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v84 = *(_QWORD *)(v64 + 192);
    *(_QWORD *)(v64 + 192) = v65;
    if (v84)
    {
      v85 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v85, v86);
    }
    v87 = __ldxr((unsigned __int8 *)v66);
    if (v87 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v66))
      {
LABEL_115:
        SlowCase = v65[3];
        if (SlowCase >= v65[4])
        {
          SlowCase = v65[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
            goto LABEL_117;
          }
          v105 = *(_QWORD *)(SlowCase + 8) ^ v65[6];
          v65[4] = SlowCase + HIDWORD(v105);
          v65[5] = SlowCase + (int)v105;
        }
        v65[3] = SlowCase + 32;
LABEL_117:
        *(_DWORD *)SlowCase = 0;
        WebCore::JSDOMObject::JSDOMObject(SlowCase, v55);
        *(_QWORD *)(SlowCase + 24) = v36;
        if (*(_BYTE *)(v62 + 755))
          __dmb(0xAu);
        v88 = *(_QWORD *)(v32 + 3320);
        if ((byte_1EE335840 & 1) == 0)
        {
          qword_1EE335838 = (uint64_t)&off_1E3282720;
          byte_1EE335840 = 1;
        }
        v120 = (WTF *)v36;
        if ((SlowCase & 8) != 0)
          v89 = (SlowCase - 112) | 1;
        else
          v89 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v89 & 1) != 0)
          v90 = v89 + 47;
        else
          v90 = *(_QWORD *)v89 + 32;
        Allocator = *(uint64_t **)(v90 + 16);
        if (!Allocator)
          Allocator = (uint64_t *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v90 + 16) = *Allocator;
        *Allocator = SlowCase;
        Allocator[1] = (uint64_t)&qword_1EE335838;
        Allocator[2] = v88;
        v124 = Allocator;
        JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v88 + 32), (uint64_t *)&v120, (uint64_t *)&v124);
        if (v124)
          v124[1] = 3;
        goto LABEL_130;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v66);
    goto LABEL_115;
  }
  if (v127 == 1)
  {
    v35 = v125;
    LOBYTE(v120) = (_BYTE)v125;
    v103 = v126;
    v126 = 0;
    v121 = v103;
    if (!*((_QWORD *)v4 + 2))
    {
      v104.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v125, (JSC::JSGlobalObject *)&v121);
      JSC::VM::throwException(v4, this, v104);
      v103 = v121;
    }
    v121 = 0;
    if (v103)
    {
      if (*(_DWORD *)v103 == 2)
        WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v35);
      else
        *(_DWORD *)v103 -= 2;
    }
    SlowCase = 0;
    goto LABEL_132;
  }
  v106 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsGPUDevicePrototypeFunction_createBindGroupLayout(v106, v107, v108);
}

_BYTE *WebCore::jsGPUDevicePrototypeFunction_createBindGroupLayout(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  WTF *v15;
  void *v16;
  unint64_t v17;
  WTF *v18;
  WTF::StringImpl *v19;
  _DWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  JSValue v27;
  WTF::StringImpl *v28;
  JSValue v29;
  WebCore *v30;
  JSC::JSGlobalObject *v31;
  JSC::CallFrame *v32;
  JSC::VM *v33;
  WTF::StringImpl *v34[2];
  uint64_t v35;
  int v36[2];
  WTF::StringImpl *v37;
  int v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  _BYTE v42[8];
  WTF::StringImpl *v43;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v33 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v33, "GPUDevice", "createBindGroupLayout");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPUDevice::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPUDevice::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v33, "GPUDevice", "createBindGroupLayout");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v27);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convertDictionary<WebCore::GPUBindGroupLayoutDescriptor>(*((JSC::JSCell **)a2 + 6), (JSC::VM **)this, (uint64_t)&v39);
  v12 = v41;
  if (v41)
  {
    v17 = 0;
LABEL_25:
    if (v12 != -1)
      ((void (*)(int *, __int128 *))off_1E3282DF8[v12])(v36, &v39);
    return (_BYTE *)v17;
  }
  v13 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v14 = v39;
  v39 = 0uLL;
  *(_OWORD *)v34 = v14;
  *(_QWORD *)&v14 = v40;
  v40 = 0;
  v35 = v14;
  WebCore::GPUDevice::createBindGroupLayout(v11 - 32, (uint64_t)v34, (uint64_t)v36);
  if (!v38)
  {
    v15 = *(WTF **)v36;
    *(_QWORD *)v36 = 0;
    v17 = WebCore::wrap<WebCore::GPUBindGroupLayout>((uint64_t)this, v13, v15);
    if (*(_DWORD *)v15 == 1)
    {
      v21 = (_DWORD *)*((_QWORD *)v15 + 2);
      *((_QWORD *)v15 + 2) = 0;
      if (v21)
      {
        if (v21[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
        else
          --v21[2];
      }
      v22 = *((_QWORD *)v15 + 1);
      if (v22)
      {
        *(_QWORD *)(v22 + 8) = 0;
        v23 = (unsigned int *)*((_QWORD *)v15 + 1);
        *((_QWORD *)v15 + 1) = 0;
        if (v23)
        {
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            atomic_store(1u, v23);
            WTF::fastFree((WTF *)v23, v16);
          }
        }
      }
      else
      {
        *((_QWORD *)v15 + 1) = 0;
      }
      WTF::fastFree(v15, v16);
    }
    else
    {
      --*(_DWORD *)v15;
    }
LABEL_17:
    if (v38 != -1)
      ((void (*)(_BYTE *, int *))off_1E3282DE8[v38])(v42, v36);
    v38 = -1;
    v18 = v34[1];
    if (v34[1])
    {
      v34[1] = 0;
      LODWORD(v35) = 0;
      WTF::fastFree(v18, v16);
    }
    v19 = v34[0];
    v34[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)v19 -= 2;
    }
    v12 = v41;
    goto LABEL_25;
  }
  if (v38 == 1)
  {
    v16 = (void *)LOBYTE(v36[0]);
    v42[0] = v36[0];
    v28 = v37;
    v37 = 0;
    v43 = v28;
    if (!*((_QWORD *)v4 + 2))
    {
      v29.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v36[0]), (JSC::JSGlobalObject *)&v43);
      JSC::VM::throwException(v4, this, v29);
      v28 = v43;
    }
    v43 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)v28 -= 2;
    }
    v17 = 0;
    goto LABEL_17;
  }
  v30 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsGPUDevicePrototypeFunction_createPipelineLayout(v30, v31, v32);
}

_BYTE *WebCore::jsGPUDevicePrototypeFunction_createPipelineLayout(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t IndexQuickly;
  unint64_t v7;
  JSC::VM *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char **v12;
  BOOL v13;
  uint64_t v15;
  JSC::JSCell *v16;
  uint64_t Object;
  JSC::Structure *v18;
  WTF::StringImpl *v19;
  void *v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  void *v24;
  JSValue v25;
  int i;
  unsigned int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  uint64_t v31;
  unint64_t SlowCase;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  unint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char **v58;
  int v59;
  unint64_t v60;
  uint64_t *v61;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v63;
  JSC::Structure *v64;
  JSC::JSCell *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  JSC::VM *v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  void *v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  JSC::VM *Allocator;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  _DWORD *v90;
  JSValue v91;
  WTF::StringImpl *v92;
  JSValue v93;
  unint64_t v94;
  WebCore *v95;
  JSC::JSGlobalObject *v96;
  JSC::CallFrame *v97;
  JSC::VM *v98;
  WTF::StringImpl *v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  int v105;
  int v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  WTF *v110;
  WTF::StringImpl *v111;
  JSC::VM *v112;

  v7 = 0xFFFE000000000002;
  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v98 = v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v98, "GPUDevice", "createPipelineLayout");
  v10 = *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSGPUDevice::s_info;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
    while (v12 != &WebCore::JSGPUDevice::s_info && v12 != 0);
  }
  if (!v11)
    return WebCore::throwThisTypeError((int)this, (int)&v98, "GPUDevice", "createPipelineLayout");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v91.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v8, this, v91);
  }
  v15 = *(_QWORD *)(v9 + 24);
  v16 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
  v112 = v8;
  if (((unint64_t)v16 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v107 = 0;
    v108 = 0;
    v109 = 0;
    goto LABEL_30;
  }
  if (((unint64_t)v16 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v16)) == 0)
  {
    JSC::throwTypeError();
    SlowCase = 0;
    v22 = 1;
    v102 = 1;
LABEL_136:
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3282E18[v22])(&v107, &v99);
    return (_BYTE *)SlowCase;
  }
  v18 = (JSC::Structure *)Object;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  WTF::AtomStringImpl::addLiteral();
  LODWORD(IndexQuickly) = (_DWORD)v99;
  v4 = JSC::JSObject::get(v18, this, (unint64_t)v99);
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
      WTF::StringImpl::destroy(v99, v19);
    else
      *(_DWORD *)v99 -= 2;
  }
  if (*((_DWORD *)v112 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v112))
    goto LABEL_31;
  if (v4 == 10)
  {
    v3 = 0;
    goto LABEL_25;
  }
  WebCore::valueToUSVString(this, v4, (uint64_t)&v103);
  if (!(_DWORD)v104)
  {
    v3 = v103;
    v107 = v103;
LABEL_25:
    WTF::AtomStringImpl::addLiteral();
    LODWORD(IndexQuickly) = (_DWORD)v99;
    v4 = JSC::JSObject::get(v18, this, (unint64_t)v99);
    if (v99)
    {
      if (*(_DWORD *)v99 == 2)
        WTF::StringImpl::destroy(v99, v21);
      else
        *(_DWORD *)v99 -= 2;
    }
    if (*((_DWORD *)v112 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v112))
      goto LABEL_31;
    if (v4 == 10)
    {
LABEL_30:
      WebCore::throwRequiredMemberTypeError((int)this, (int)&v112, "bindGroupLayouts", 17, "GPUPipelineLayoutDescriptor", 28, "sequence", 9);
LABEL_31:
      v22 = 1;
      v102 = 1;
      goto LABEL_74;
    }
    v23 = *((_QWORD *)this + 7);
    v110 = (WTF *)v23;
    if ((v4 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v4 + 5) <= 0x16u)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSC::throwTypeError();
      v29 = v99;
      v99 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v28);
        else
          *(_DWORD *)v29 -= 2;
      }
      v105 = 1;
    }
    else
    {
      v99 = 0;
      v100 = 0;
      if (JSC::getIterationMode() == 2)
      {
        for (i = 1; ; ++i)
        {
          v27 = (*(_BYTE *)(v4 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v4 + 8) - 8) : 0;
          v7 = (i - 1);
          if (v7 >= v27)
            break;
          IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v4, i - 1, 0);
          if (!IndexQuickly)
            IndexQuickly = JSC::JSObject::get((JSC::JSObject *)v4, this, (i - 1));
          if (*(_DWORD *)(v23 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v23) & 1) != 0)
            break;
          WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::GPUBindGroupLayout>>::convert((char *)this, IndexQuickly, (uint64_t)&v99);
          if (*(_QWORD *)(v23 + 16))
          {
            v35 = JSC::JSArrayIterator::create();
            LODWORD(v4) = v35;
            v36 = i | 0xFFFE000000000000;
            if (i < 0)
              v36 = COERCE__INT64((double)i) + 0x2000000000000;
            *(_QWORD *)(v35 + 16) = v36;
            goto LABEL_70;
          }
        }
      }
      else
      {
        LODWORD(v4) = JSC::iteratorForIterable(this, (JSC::JSGlobalObject *)v4, v25);
        LODWORD(IndexQuickly) = v30;
        if (!*(_DWORD *)(v23 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v23) & 1) == 0)
        {
          while (1)
          {
            v31 = JSC::iteratorStep();
            if (*(_QWORD *)(v23 + 16) || v31 == 6)
              break;
            v7 = JSC::iteratorValue();
            if (*(_DWORD *)(v23 + 80))
            {
              if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v23) & 1) != 0)
                break;
            }
            WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::GPUBindGroupLayout>>::convert((char *)this, v7, (uint64_t)&v99);
            if (*(_QWORD *)(v23 + 16))
            {
LABEL_70:
              JSC::iteratorClose();
              break;
            }
          }
        }
      }
      if (!*(_DWORD *)(v23 + 80) || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v23))
      {
        v7 = (unint64_t)v99;
        v99 = 0;
        LODWORD(IndexQuickly) = v100;
        LODWORD(v4) = HIDWORD(v100);
        v100 = 0;
        v105 = 0;
        WTF::Vector<WTF::Ref<WebCore::GPUBindGroupLayout,WTF::RawPtrTraits<WebCore::GPUBindGroupLayout>,WTF::DefaultRefDerefTraits<WebCore::GPUBindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v99, v24);
        v103 = 0;
        v104 = 0;
        v99 = 0;
        v100 = 0;
        WTF::Vector<WTF::Ref<WebCore::GPUBindGroupLayout,WTF::RawPtrTraits<WebCore::GPUBindGroupLayout>,WTF::DefaultRefDerefTraits<WebCore::GPUBindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v99, v37);
        v22 = 0;
        v107 = 0;
        v108 = 0;
        v99 = v3;
        v100 = v7;
        v109 = 0;
        v101 = __PAIR64__(v4, IndexQuickly);
        goto LABEL_73;
      }
      v105 = 1;
      WTF::Vector<WTF::Ref<WebCore::GPUBindGroupLayout,WTF::RawPtrTraits<WebCore::GPUBindGroupLayout>,WTF::DefaultRefDerefTraits<WebCore::GPUBindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v99, v24);
    }
    v22 = 1;
LABEL_73:
    v102 = v22;
    ((void (*)(WTF **, WTF::StringImpl **))off_1E32833F0[v22])(&v110, &v103);
    goto LABEL_74;
  }
  v102 = 1;
  if ((_DWORD)v104 != -1)
    ((void (*)(WTF **, WTF::StringImpl **))off_1E3282908[v104])(&v110, &v103);
  v22 = 1;
LABEL_74:
  WTF::Vector<WTF::Ref<WebCore::GPUBindGroupLayout,WTF::RawPtrTraits<WebCore::GPUBindGroupLayout>,WTF::DefaultRefDerefTraits<WebCore::GPUBindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v108, v20);
  v39 = v107;
  v107 = 0;
  if (!v39)
    goto LABEL_77;
  if (*(_DWORD *)v39 != 2)
  {
    *(_DWORD *)v39 -= 2;
LABEL_77:
    if (!v22)
      goto LABEL_78;
    goto LABEL_143;
  }
  WTF::StringImpl::destroy(v39, v38);
  if (v22)
  {
LABEL_143:
    SlowCase = 0;
    v22 = 1;
    goto LABEL_136;
  }
LABEL_78:
  v40 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x28);
  v99 = 0;
  v100 = 0;
  v103 = v3;
  v104 = v7;
  v101 = 0;
  v105 = IndexQuickly;
  v106 = v4;
  WebCore::GPUDevice::createPipelineLayout(v15 - 32, (uint64_t)&v103, (uint64_t)&v107);
  if (!(_DWORD)v109)
  {
    v42 = v107;
    v107 = 0;
    v43 = *(_QWORD *)(*(_QWORD *)(v40 + 3320) + 32);
    if (v43)
    {
      v44 = *(_DWORD *)(v43 - 8);
      v45 = ((unint64_t)v42 + ~((_QWORD)v42 << 32)) ^ (((unint64_t)v42 + ~((_QWORD)v42 << 32)) >> 22);
      v46 = 9 * ((v45 + ~(v45 << 13)) ^ ((v45 + ~(v45 << 13)) >> 8));
      v47 = (v46 ^ (v46 >> 15)) + ~((v46 ^ (v46 >> 15)) << 27);
      v48 = v44 & ((v47 >> 31) ^ v47);
      v49 = *(WTF::StringImpl **)(v43 + 16 * v48);
      if (v49 == v42)
      {
LABEL_84:
        v51 = *(_QWORD *)(v43 + 16 * v48 + 8);
        if (v51)
        {
          if ((*(_BYTE *)(v51 + 8) & 3) == 0)
          {
            SlowCase = *(_QWORD *)v51;
            if (*(_QWORD *)v51)
            {
LABEL_129:
              if (*(_DWORD *)v42 == 1)
              {
                v90 = (_DWORD *)*((_QWORD *)v42 + 1);
                *((_QWORD *)v42 + 1) = 0;
                if (v90)
                {
                  if (v90[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v90 + 8))(v90);
                  else
                    --v90[2];
                }
                WTF::fastFree(v42, (void *)v41);
              }
              else
              {
                --*(_DWORD *)v42;
              }
LABEL_131:
              if ((_DWORD)v109 != -1)
                ((void (*)(WTF **, WTF::StringImpl **))off_1E3282E08[v109])(&v110, &v107);
              LODWORD(v109) = -1;
              WTF::Vector<WTF::Ref<WebCore::GPUBindGroupLayout,WTF::RawPtrTraits<WebCore::GPUBindGroupLayout>,WTF::DefaultRefDerefTraits<WebCore::GPUBindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v104, (void *)v41);
              v88 = v103;
              v103 = 0;
              if (v88)
              {
                if (*(_DWORD *)v88 == 2)
                  WTF::StringImpl::destroy(v88, v87);
                else
                  *(_DWORD *)v88 -= 2;
              }
              goto LABEL_136;
            }
          }
        }
      }
      else
      {
        v50 = 1;
        while (v49)
        {
          v48 = ((_DWORD)v48 + v50) & v44;
          v49 = *(WTF::StringImpl **)(v43 + 16 * v48);
          ++v50;
          if (v49 == v42)
            goto LABEL_84;
        }
      }
    }
    ++*(_DWORD *)v42;
    v52 = *(_QWORD *)(v40 + 3296);
    if (v52)
    {
      v53 = *(_DWORD *)(v52 - 8);
      v54 = ((unint64_t)&WebCore::JSGPUPipelineLayout::s_info
           + ~((_QWORD)&WebCore::JSGPUPipelineLayout::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUPipelineLayout::s_info
                                                                       + ~((_QWORD)&WebCore::JSGPUPipelineLayout::s_info << 32)) >> 22);
      v55 = 9 * ((v54 + ~(v54 << 13)) ^ ((v54 + ~(v54 << 13)) >> 8));
      v56 = (v55 ^ (v55 >> 15)) + ~((v55 ^ (v55 >> 15)) << 27);
      v57 = v53 & ((v56 >> 31) ^ v56);
      v58 = *(char ***)(v52 + 16 * v57);
      if (v58 == &WebCore::JSGPUPipelineLayout::s_info)
      {
LABEL_92:
        v60 = *(_QWORD *)(v52 + 16 * v57 + 8);
        if (v60)
          goto LABEL_94;
      }
      else
      {
        v59 = 1;
        while (v58)
        {
          v57 = ((_DWORD)v57 + v59) & v53;
          v58 = *(char ***)(v52 + 16 * v57);
          ++v59;
          if (v58 == &WebCore::JSGPUPipelineLayout::s_info)
            goto LABEL_92;
        }
      }
    }
    v61 = *(uint64_t **)(v40 + 56);
    Structure = WebCore::JSGPUPipelineLayoutPrototype::createStructure(v61, v40, *(JSC::JSCell **)(v40 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v65 = (JSC::JSCell *)WebCore::JSGPUPipelineLayoutPrototype::create((WebCore::JSGPUPipelineLayoutPrototype *)v61, Structure, v63, v64);
    v66 = WebCore::JSGPUPipelineLayout::createStructure(v61, v40, v65);
    v60 = WebCore::cacheDOMStructure((JSCell *)v40, v66, (uint64_t)&WebCore::JSGPUPipelineLayout::s_info);
LABEL_94:
    v67 = *(_QWORD *)(v40 + 56);
    v68 = *(_QWORD *)(v67 + 41456);
    v69 = *(_QWORD *)(v68 + 23536);
    v70 = *(_QWORD **)(v69 + 232);
    if (v70)
      goto LABEL_114;
    v71 = *(_QWORD *)(v68 + 22648);
    if (__ldaxr((unsigned __int8 *)v71))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v71))
    {
      goto LABEL_99;
    }
    MEMORY[0x19AEA534C](v71);
LABEL_99:
    v73 = *(_QWORD *)(v71 + 2824);
    if (!*(_QWORD *)(v73 + 232))
    {
      v74 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v110, "IsoSpace T");
      v112 = 0;
      MEMORY[0x19AEA3204](v74, &v110, v67 + 192, v67 + 1872, 32, 8, &v112);
      v76 = v112;
      v112 = 0;
      if (v76)
        (*(void (**)(JSC::VM *))(*(_QWORD *)v76 + 8))(v76);
      v77 = v110;
      v110 = 0;
      if (v77)
      {
        if (*(_DWORD *)v77 == 1)
          WTF::fastFree(v77, v75);
        else
          --*(_DWORD *)v77;
      }
      v78 = *(_QWORD *)(v73 + 232);
      *(_QWORD *)(v73 + 232) = v74;
      if (v78)
        (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
    }
    v70 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v79 = *(_QWORD *)(v69 + 232);
    *(_QWORD *)(v69 + 232) = v70;
    if (v79)
    {
      v80 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v80, v81);
    }
    v82 = __ldxr((unsigned __int8 *)v71);
    if (v82 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v71))
      {
LABEL_114:
        SlowCase = v70[3];
        if (SlowCase >= v70[4])
        {
          SlowCase = v70[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
            goto LABEL_116;
          }
          v94 = *(_QWORD *)(SlowCase + 8) ^ v70[6];
          v70[4] = SlowCase + HIDWORD(v94);
          v70[5] = SlowCase + (int)v94;
        }
        v70[3] = SlowCase + 32;
LABEL_116:
        *(_DWORD *)SlowCase = 0;
        WebCore::JSDOMObject::JSDOMObject(SlowCase, v60);
        *(_QWORD *)(SlowCase + 24) = v42;
        if (*(_BYTE *)(v67 + 755))
          __dmb(0xAu);
        v83 = *(_QWORD *)(v40 + 3320);
        if ((byte_1EE335870 & 1) == 0)
        {
          qword_1EE335868 = (uint64_t)&off_1E32827B0;
          byte_1EE335870 = 1;
        }
        v110 = v42;
        if ((SlowCase & 8) != 0)
          v84 = (SlowCase - 112) | 1;
        else
          v84 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v84 & 1) != 0)
          v85 = v84 + 47;
        else
          v85 = *(_QWORD *)v84 + 32;
        Allocator = *(JSC::VM **)(v85 + 16);
        if (!Allocator)
          Allocator = (JSC::VM *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v85 + 16) = *(_QWORD *)Allocator;
        *(_QWORD *)Allocator = SlowCase;
        *((_QWORD *)Allocator + 1) = &qword_1EE335868;
        *((_QWORD *)Allocator + 2) = v83;
        v112 = Allocator;
        JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v83 + 32), (uint64_t *)&v110, (uint64_t *)&v112);
        if (v112)
          *((_QWORD *)v112 + 1) = 3;
        goto LABEL_129;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v71);
    goto LABEL_114;
  }
  if ((_DWORD)v109 == 1)
  {
    v41 = v107;
    LOBYTE(v110) = (_BYTE)v107;
    v92 = v108;
    v108 = 0;
    v111 = v92;
    if (!*((_QWORD *)v8 + 2))
    {
      v93.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v107, (JSC::JSGlobalObject *)&v111);
      JSC::VM::throwException(v8, this, v93);
      v92 = v111;
    }
    v111 = 0;
    if (v92)
    {
      if (*(_DWORD *)v92 == 2)
        WTF::StringImpl::destroy(v92, (WTF::StringImpl *)v41);
      else
        *(_DWORD *)v92 -= 2;
    }
    SlowCase = 0;
    goto LABEL_131;
  }
  v95 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsGPUDevicePrototypeFunction_createBindGroup(v95, v96, v97);
}

_BYTE *WebCore::jsGPUDevicePrototypeFunction_createBindGroup(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  WTF *v15;
  void *v16;
  unint64_t v17;
  WTF *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  _DWORD *v27;
  JSValue v29;
  WTF::StringImpl *v30;
  JSValue v31;
  WebCore *v32;
  JSC::JSGlobalObject *v33;
  JSC::CallFrame *v34;
  JSC::VM *v35;
  WTF::StringImpl *v36[2];
  WTF *v37;
  uint64_t v38;
  int v39[2];
  WTF::StringImpl *v40;
  int v41;
  __int128 v42;
  WTF *v43;
  uint64_t v44;
  int v45;
  _BYTE v46[8];
  WTF::StringImpl *v47;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "GPUDevice", "createBindGroup");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPUDevice::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPUDevice::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "GPUDevice", "createBindGroup");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v29.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v29);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convertDictionary<WebCore::GPUBindGroupDescriptor>(*((JSC::JSCell **)a2 + 6), (WTF **)this, (uint64_t)&v42);
  v12 = v45;
  if (v45)
  {
    v17 = 0;
LABEL_35:
    if (v12 != -1)
      ((void (*)(WTF::StringImpl **, __int128 *))off_1E3282E58[v12])(v36, &v42);
    return (_BYTE *)v17;
  }
  v13 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v14 = v42;
  v42 = 0uLL;
  *(_OWORD *)v36 = v14;
  v37 = v43;
  *(_QWORD *)&v14 = v44;
  v43 = 0;
  v44 = 0;
  v38 = v14;
  WebCore::GPUDevice::createBindGroup(v11 - 32, (uint64_t)v36, (uint64_t)v39);
  if (!v41)
  {
    v15 = *(WTF **)v39;
    *(_QWORD *)v39 = 0;
    v17 = WebCore::wrap<WebCore::GPUBindGroup>((uint64_t)this, v13, v15);
    if (*(_DWORD *)v15 == 1)
    {
      v27 = (_DWORD *)*((_QWORD *)v15 + 1);
      *((_QWORD *)v15 + 1) = 0;
      if (v27)
      {
        if (v27[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
        else
          --v27[2];
      }
      WTF::fastFree(v15, v16);
    }
    else
    {
      --*(_DWORD *)v15;
    }
LABEL_17:
    if (v41 != -1)
      ((void (*)(_BYTE *, int *))off_1E3282E28[v41])(v46, v39);
    v41 = -1;
    v18 = v37;
    if (HIDWORD(v38))
    {
      v19 = 48 * HIDWORD(v38);
      v20 = (_DWORD *)((char *)v37 + 40);
      do
      {
        v21 = *v20;
        if ((_DWORD)v21 != -1)
          ((void (*)(_BYTE *, _DWORD *))off_1E3282E38[v21])(v46, v20 - 8);
        *v20 = -1;
        v20 += 12;
        v19 -= 48;
      }
      while (v19);
      v18 = v37;
    }
    if (v18)
    {
      v37 = 0;
      LODWORD(v38) = 0;
      WTF::fastFree(v18, v16);
    }
    v22 = (unsigned int *)v36[1];
    v36[1] = 0;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v16);
      }
    }
    v25 = v36[0];
    v36[0] = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)v25 -= 2;
    }
    v12 = v45;
    goto LABEL_35;
  }
  if (v41 == 1)
  {
    v16 = (void *)LOBYTE(v39[0]);
    v46[0] = v39[0];
    v30 = v40;
    v40 = 0;
    v47 = v30;
    if (!*((_QWORD *)v4 + 2))
    {
      v31.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v39[0]), (JSC::JSGlobalObject *)&v47);
      JSC::VM::throwException(v4, this, v31);
      v30 = v47;
    }
    v47 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)v30 -= 2;
    }
    v17 = 0;
    goto LABEL_17;
  }
  v32 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsGPUDevicePrototypeFunction_createShaderModule(v32, v33, v34);
}

_BYTE *WebCore::jsGPUDevicePrototypeFunction_createShaderModule(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  JSC::HandleSet *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  WTF *v21;
  void *v22;
  unint64_t v23;
  _DWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  JSValue v33;
  WTF::StringImpl *v34;
  JSValue v35;
  WebCore *v36;
  JSC::JSGlobalObject *v37;
  JSC::CallFrame *v38;
  uint64_t v39;
  JSC::VM *v40;
  __int128 v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  int v45[2];
  WTF::StringImpl *v46;
  int v47;
  __int128 v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  _BYTE v53[8];
  WTF::StringImpl *v54;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v40 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v40, "GPUDevice", "createShaderModule");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPUDevice::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPUDevice::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v40, "GPUDevice", "createShaderModule");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v33.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v33);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convertDictionary<WebCore::GPUShaderModuleDescriptor>(*((JSC::JSCell **)a2 + 6), (JSC::VM **)this, (uint64_t)&v48);
  v12 = v52;
  if (v52)
  {
    v23 = 0;
LABEL_27:
    if (v12 != -1)
      (*(&off_1E3282E78 + v12))((int)&v41, (WebCore::GPUShaderModuleDescriptor *)&v48);
    return (_BYTE *)v23;
  }
  v13 = v11 - 32;
  v14 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v15 = v48;
  v48 = 0uLL;
  v41 = v15;
  v42 = 0;
  if (v49)
  {
    v16 = *(JSC::HandleSet **)(((unint64_t)(v49 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v17 = (_QWORD *)*((_QWORD *)v16 + 5);
    if (!v17)
    {
      v39 = v13;
      JSC::HandleSet::grow(v16);
      v13 = v39;
      v17 = (_QWORD *)*((_QWORD *)v16 + 5);
    }
    *((_QWORD *)v16 + 5) = *v17;
    v17[2] = 0;
    v18 = v17 + 2;
    *v17 = 0;
    v17[1] = 0;
    v42 = v17 + 2;
    v19 = v49;
    if (v49)
    {
      v19 = (_QWORD *)*v49;
      if (*v49)
      {
        v30 = *(_QWORD **)(((unint64_t)(v18 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v31 = v30[3];
        v30 += 3;
        *(v18 - 2) = v31;
        *(v18 - 1) = v30;
        *v30 = v18 - 2;
        *(_QWORD *)(v31 + 8) = v18 - 2;
      }
    }
    *v18 = v19;
  }
  v43 = v50;
  v20 = v51;
  v50 = 0;
  v51 = 0;
  v44 = v20;
  WebCore::GPUDevice::createShaderModule(v13, (WTF::StringImpl **)&v41, (uint64_t)v45);
  if (!v47)
  {
    v21 = *(WTF **)v45;
    *(_QWORD *)v45 = 0;
    v23 = WebCore::wrap<WebCore::GPUShaderModule>((uint64_t)this, v14, v21);
    if (*(_DWORD *)v21 == 1)
    {
      v25 = (_DWORD *)*((_QWORD *)v21 + 2);
      *((_QWORD *)v21 + 2) = 0;
      if (v25)
      {
        if (v25[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
        else
          --v25[2];
      }
      v26 = *((_QWORD *)v21 + 1);
      if (v26)
      {
        *(_QWORD *)(v26 + 8) = 0;
        v27 = (unsigned int *)*((_QWORD *)v21 + 1);
        *((_QWORD *)v21 + 1) = 0;
        if (v27)
        {
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            atomic_store(1u, v27);
            WTF::fastFree((WTF *)v27, v22);
          }
        }
      }
      else
      {
        *((_QWORD *)v21 + 1) = 0;
      }
      WTF::fastFree(v21, v22);
    }
    else
    {
      --*(_DWORD *)v21;
    }
LABEL_24:
    if (v47 != -1)
      ((void (*)(_BYTE *, int *))off_1E3282E68[v47])(v53, v45);
    v47 = -1;
    WebCore::GPUShaderModuleDescriptor::~GPUShaderModuleDescriptor((WebCore::GPUShaderModuleDescriptor *)&v41, (WTF::StringImpl *)v22);
    v12 = v52;
    goto LABEL_27;
  }
  if (v47 == 1)
  {
    v22 = (void *)LOBYTE(v45[0]);
    v53[0] = v45[0];
    v34 = v46;
    v46 = 0;
    v54 = v34;
    if (!*((_QWORD *)v4 + 2))
    {
      v35.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v45[0]), (JSC::JSGlobalObject *)&v54);
      JSC::VM::throwException(v4, this, v35);
      v34 = v54;
    }
    v54 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v22);
      else
        *(_DWORD *)v34 -= 2;
    }
    v23 = 0;
    goto LABEL_24;
  }
  v36 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsGPUDevicePrototypeFunction_createComputePipeline(v36, v37, v38);
}

_BYTE *WebCore::jsGPUDevicePrototypeFunction_createComputePipeline(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unsigned int v12;
  WebCore::GPUDevice *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  unint64_t v22;
  _DWORD *v24;
  JSValue v26;
  WTF::StringImpl *v27;
  JSValue v28;
  WebCore *v29;
  JSC::JSGlobalObject *v30;
  JSC::CallFrame *v31;
  JSC::VM *v32;
  uint64_t v33;
  char v34[8];
  int v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  int v41[2];
  WTF::StringImpl *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  char v53[8];
  WTF::StringImpl *v54;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v32 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v32, "GPUDevice", "createComputePipeline");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPUDevice::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPUDevice::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v32, "GPUDevice", "createComputePipeline");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v26.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v26);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convertDictionary<WebCore::GPUComputePipelineDescriptor>((uint64_t)&v44, this, *((JSC::JSCell **)a2 + 6));
  v12 = v52;
  if (v52)
  {
    v22 = 0;
LABEL_24:
    if (v12 != -1)
      (*(&off_1E3282E98 + v12))((int)&v33, (WebCore::GPUComputePipelineDescriptor *)&v44);
    return (_BYTE *)v22;
  }
  v13 = (WebCore::GPUDevice *)(v11 - 32);
  v14 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v15 = v44;
  v44 = 0;
  v33 = v15;
  v34[0] = 0;
  v35 = -1;
  v16 = v46;
  if (v46 != -1)
  {
    ((void (*)(int *, char *, uint64_t *))off_1E3282928[v46])(v41, v34, &v45);
    v35 = v16;
  }
  v17 = v47;
  v47 = 0;
  v36 = v17;
  LOBYTE(v37) = 0;
  v38 = 0;
  if (v49)
  {
    v18 = v48;
    v48 = 0;
    v37 = v18;
    v38 = 1;
  }
  v39 = v50;
  v19 = v51;
  v50 = 0;
  v51 = 0;
  v40 = v19;
  WebCore::GPUDevice::createComputePipeline(v13, (const WebCore::GPUComputePipelineDescriptor *)&v33, (uint64_t)v41);
  if (!v43)
  {
    v20 = *(WTF **)v41;
    *(_QWORD *)v41 = 0;
    v22 = WebCore::wrap<WebCore::GPUComputePipeline>((uint64_t)this, v14, v20);
    if (*(_DWORD *)v20 == 1)
    {
      v24 = (_DWORD *)*((_QWORD *)v20 + 1);
      *((_QWORD *)v20 + 1) = 0;
      if (v24)
      {
        if (v24[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
        else
          --v24[2];
      }
      WTF::fastFree(v20, v21);
    }
    else
    {
      --*(_DWORD *)v20;
    }
LABEL_21:
    if (v43 != -1)
      ((void (*)(char *, int *))off_1E3282E88[v43])(v53, v41);
    v43 = -1;
    WebCore::GPUComputePipelineDescriptor::~GPUComputePipelineDescriptor((WebCore::GPUComputePipelineDescriptor *)&v33, (WTF::StringImpl *)v21);
    v12 = v52;
    goto LABEL_24;
  }
  if (v43 == 1)
  {
    v21 = (void *)LOBYTE(v41[0]);
    v53[0] = v41[0];
    v27 = v42;
    v42 = 0;
    v54 = v27;
    if (!*((_QWORD *)v4 + 2))
    {
      v28.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v41[0]), (JSC::JSGlobalObject *)&v54);
      JSC::VM::throwException(v4, this, v28);
      v27 = v54;
    }
    v54 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)v27 -= 2;
    }
    v22 = 0;
    goto LABEL_21;
  }
  v29 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsGPUDevicePrototypeFunction_createRenderPipeline(v29, v30, v31);
}

_BYTE *WebCore::jsGPUDevicePrototypeFunction_createRenderPipeline(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF *v14;
  void *v15;
  unint64_t v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF *v21;
  WTF::StringImpl *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _DWORD *v29;
  JSValue v31;
  WTF::StringImpl *v32;
  JSValue v33;
  WebCore *v34;
  JSC::JSGlobalObject *v35;
  JSC::CallFrame *v36;
  JSC::VM *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  WTF *v42;
  WTF::StringImpl *v43;
  char v44;
  WTF *v45;
  int v46;
  unsigned int v47;
  WTF *v48;
  int v49;
  char v50;
  int v51[2];
  WTF::StringImpl *v52;
  int v53;
  uint64_t v54[27];
  int v55;
  _BYTE v56[8];
  WTF::StringImpl *v57;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v37 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v37, "GPUDevice", "createRenderPipeline");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPUDevice::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPUDevice::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v37, "GPUDevice", "createRenderPipeline");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v31.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v31);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convertDictionary<WebCore::GPURenderPipelineDescriptor>(*((JSC::JSCell **)a2 + 6), this, (uint64_t)v54);
  v12 = v55;
  if (v55)
  {
    v16 = 0;
LABEL_46:
    if (v12 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3282EB8[v12])(&v38, v54);
    return (_BYTE *)v16;
  }
  v13 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::GPURenderPipelineDescriptor::GPURenderPipelineDescriptor((uint64_t)&v38, v54);
  WebCore::GPUDevice::createRenderPipeline(v11 - 32, (uint64_t)&v38, (uint64_t)v51);
  if (!v53)
  {
    v14 = *(WTF **)v51;
    *(_QWORD *)v51 = 0;
    v16 = WebCore::wrap<WebCore::GPURenderPipeline>((uint64_t)this, v13, v14);
    if (*(_DWORD *)v14 == 1)
    {
      v29 = (_DWORD *)*((_QWORD *)v14 + 1);
      *((_QWORD *)v14 + 1) = 0;
      if (v29)
      {
        if (v29[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
        else
          --v29[2];
      }
      WTF::fastFree(v14, v15);
    }
    else
    {
      --*(_DWORD *)v14;
    }
LABEL_17:
    if (v53 != -1)
      ((void (*)(_BYTE *, int *))off_1E3282EA8[v53])(v56, v51);
    v53 = -1;
    if (v50)
    {
      v17 = v48;
      if (v48)
      {
        v48 = 0;
        v49 = 0;
        WTF::fastFree(v17, v15);
      }
      if (v47)
      {
        v18 = v45;
        v19 = 16 * v47;
        do
        {
          v20 = *(WTF::StringImpl **)v18;
          *(_QWORD *)v18 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v15);
            else
              *(_DWORD *)v20 -= 2;
          }
          v18 = (WTF *)((char *)v18 + 16);
          v19 -= 16;
        }
        while (v19);
      }
      v21 = v45;
      if (v45)
      {
        v45 = 0;
        v46 = 0;
        WTF::fastFree(v21, v15);
      }
      if (v44)
      {
        v22 = v43;
        v43 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v15);
          else
            *(_DWORD *)v22 -= 2;
        }
      }
      v23 = (unsigned int *)v42;
      v42 = 0;
      if (v23)
      {
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          atomic_store(1u, v23);
          WTF::fastFree((WTF *)v23, v15);
        }
      }
    }
    WebCore::GPUVertexState::~GPUVertexState((WebCore::GPUVertexState *)&v41, v15);
    if (v40 != -1)
      ((void (*)(_BYTE *, uint64_t *))off_1E3282918[v40])(v56, &v39);
    v40 = -1;
    v27 = v38;
    v38 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v26);
      else
        *(_DWORD *)v27 -= 2;
    }
    v12 = v55;
    goto LABEL_46;
  }
  if (v53 == 1)
  {
    v15 = (void *)LOBYTE(v51[0]);
    v56[0] = v51[0];
    v32 = v52;
    v52 = 0;
    v57 = v32;
    if (!*((_QWORD *)v4 + 2))
    {
      v33.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v51[0]), (JSC::JSGlobalObject *)&v57);
      JSC::VM::throwException(v4, this, v33);
      v32 = v57;
    }
    v57 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v15);
      else
        *(_DWORD *)v32 -= 2;
    }
    v16 = 0;
    goto LABEL_17;
  }
  v34 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsGPUDevicePrototypeFunction_createComputePipelineAsync(v34, v35, v36);
}

unint64_t WebCore::jsGPUDevicePrototypeFunction_createComputePipelineAsync(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  WebCore::DOMGuardedObject *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WebCore::DOMGuardedObject *v33;
  uint64_t v34;
  JSC::VM *v36;
  JSValue v37;
  objc_class *v38;
  WebCore::DOMGuardedObject *v39;
  WebCore::DOMGuardedObject *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  WebCore::DOMGuardedObject *v49;
  WebCore::DOMGuardedObject *v50;
  char v51[8];
  int v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194B764B4);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_45;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSGPUDevice::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSGPUDevice::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_45:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"GPUDevice", "createComputePipelineAsync", v17);
    goto LABEL_38;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v36 = (JSC::VM *)*((_QWORD *)this + 7);
    v37.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v36, this, v37);
LABEL_38:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_40;
  }
  v24 = *(_QWORD *)(v18 + 24);
  WebCore::convertDictionary<WebCore::GPUComputePipelineDescriptor>((uint64_t)&v40, this, *((JSC::JSCell **)a2 + 6));
  v25 = v48;
  if (!v48)
  {
    v26 = v24 - 32;
    v27 = v40;
    v40 = 0;
    v50 = v27;
    v51[0] = 0;
    v52 = -1;
    v28 = v42;
    if (v42 != -1)
    {
      ((void (*)(WebCore::DOMGuardedObject **, char *, uint64_t *))off_1E3282928[v42])(&v49, v51, &v41);
      v52 = v28;
    }
    v29 = v43;
    v43 = 0;
    v53 = v29;
    LOBYTE(v54) = 0;
    v55 = 0;
    if (v45)
    {
      v30 = v44;
      v44 = 0;
      v54 = v30;
      v55 = 1;
    }
    v56 = v46;
    v31 = v47;
    v46 = 0;
    v47 = 0;
    v57 = v31;
    v49 = v14;
    WebCore::GPUDevice::createComputePipelineAsync(v26, (uint64_t)&v50, (uint64_t *)&v49);
    v33 = v49;
    v49 = 0;
    if (v33)
    {
      if (*((_DWORD *)v33 + 4) == 1)
        (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v33 + 16))(v33);
      else
        --*((_DWORD *)v33 + 4);
    }
    WebCore::GPUComputePipelineDescriptor::~GPUComputePipelineDescriptor((WebCore::GPUComputePipelineDescriptor *)&v50, v32);
    v14 = 0;
    v25 = v48;
  }
  if (v25 != -1)
    (*(&off_1E3282E98 + v25))((int)&v50, (WebCore::GPUComputePipelineDescriptor *)&v40);
  if (v14)
    goto LABEL_38;
LABEL_40:
  v34 = *(_QWORD *)(v10 + 16);
  if (v34)
  {
    if (*(_QWORD *)(v10 + 24) != v34)
    {
      v38 = *(objc_class **)(v34 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v40);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v40, v38, 0);
      v39 = v40;
      v40 = 0;
      if (v39)
      {
        if (*((_DWORD *)v39 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v39 + 16))(v39);
        else
          --*((_DWORD *)v39 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsGPUDevicePrototypeFunction_createRenderPipelineAsync(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  JSC::VM *v24;
  uint64_t v25;
  int v26;
  void *v27;
  WebCore::DOMGuardedObject *v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF *v33;
  WTF::StringImpl *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  JSValue v42;
  objc_class *v43;
  WebCore::DOMGuardedObject *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  JSValue v47;
  WTF::StringImpl *v48;
  WebCore::DOMGuardedObject *v49[27];
  int v50;
  int v51;
  WTF::StringImpl *v52;
  char v53;
  WebCore::DOMGuardedObject *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  int v57;
  uint64_t v58;
  WTF *v59;
  WTF::StringImpl *v60;
  char v61;
  WTF *v62;
  int v63;
  unsigned int v64;
  WTF *v65;
  int v66;
  char v67;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194B768E0);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_70;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSGPUDevice::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSGPUDevice::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_70:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"GPUDevice", "createRenderPipelineAsync", v17);
    goto LABEL_61;
  }
  v24 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v42.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v24, this, v42);
LABEL_61:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_63;
  }
  v25 = *(_QWORD *)(v18 + 24);
  WebCore::convertDictionary<WebCore::GPURenderPipelineDescriptor>(*((JSC::JSCell **)a2 + 6), this, (uint64_t)v49);
  v26 = v50;
  if (!v50)
  {
    WebCore::GPURenderPipelineDescriptor::GPURenderPipelineDescriptor((uint64_t)&v55, (uint64_t *)v49);
    v54 = v14;
    WebCore::GPUDevice::createRenderPipelineAsync(v25 - 32, (uint64_t)&v55, (uint64_t *)&v54, (uint64_t)&v51);
    v28 = v54;
    v54 = 0;
    if (v28)
    {
      if (*((_DWORD *)v28 + 4) == 1)
        (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v28 + 16))(v28);
      else
        --*((_DWORD *)v28 + 4);
    }
    if (v67)
    {
      v29 = v65;
      if (v65)
      {
        v65 = 0;
        v66 = 0;
        WTF::fastFree(v29, v27);
      }
      if (v64)
      {
        v30 = v62;
        v31 = 16 * v64;
        do
        {
          v32 = *(WTF::StringImpl **)v30;
          *(_QWORD *)v30 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v27);
            else
              *(_DWORD *)v32 -= 2;
          }
          v30 = (WTF *)((char *)v30 + 16);
          v31 -= 16;
        }
        while (v31);
      }
      v33 = v62;
      if (v62)
      {
        v62 = 0;
        v63 = 0;
        WTF::fastFree(v33, v27);
      }
      if (v61)
      {
        v34 = v60;
        v60 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v27);
          else
            *(_DWORD *)v34 -= 2;
        }
      }
      v35 = (unsigned int *)v59;
      v59 = 0;
      if (v35)
      {
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          atomic_store(1u, v35);
          WTF::fastFree((WTF *)v35, v27);
        }
      }
    }
    WebCore::GPUVertexState::~GPUVertexState((WebCore::GPUVertexState *)&v58, v27);
    if (v57 != -1)
      ((void (*)(WebCore::DOMGuardedObject **, WTF::StringImpl **))off_1E3282918[v57])(&v54, &v56);
    v57 = -1;
    v39 = v55;
    v55 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v38);
      else
        *(_DWORD *)v39 -= 2;
    }
    if (v53)
    {
      v45 = (WTF::StringImpl *)v51;
      LOBYTE(v55) = v51;
      v46 = v52;
      v52 = 0;
      v56 = v46;
      if (!*((_QWORD *)v24 + 2))
      {
        v47.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v51, (JSC::JSGlobalObject *)&v56);
        JSC::VM::throwException(v24, this, v47);
        v46 = v56;
      }
      v56 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
          WTF::StringImpl::destroy(v46, v45);
        else
          *(_DWORD *)v46 -= 2;
      }
      if (v53)
      {
        v48 = v52;
        v52 = 0;
        if (v48)
        {
          if (*(_DWORD *)v48 == 2)
            WTF::StringImpl::destroy(v48, v45);
          else
            *(_DWORD *)v48 -= 2;
        }
      }
    }
    v14 = 0;
    v26 = v50;
  }
  if (v26 != -1)
    ((void (*)(WTF::StringImpl **, WebCore::DOMGuardedObject **))off_1E3282EB8[v26])(&v55, v49);
  if (v14)
    goto LABEL_61;
LABEL_63:
  v40 = *(_QWORD *)(v10 + 16);
  if (v40)
  {
    if (*(_QWORD *)(v10 + 24) != v40)
    {
      v43 = *(objc_class **)(v40 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, v49);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v49[0], v43, 0);
      v44 = v49[0];
      v49[0] = 0;
      if (v44)
      {
        if (*((_DWORD *)v44 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v44 + 16))(v44);
        else
          --*((_DWORD *)v44 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

_BYTE *WebCore::jsGPUDevicePrototypeFunction_createCommandEncoder(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF *v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  _BYTE *result;
  _DWORD *v21;
  WTF::StringImpl *v22;
  JSValue v23;
  WebCore *v24;
  JSC::JSGlobalObject *v25;
  JSC::CallFrame *v26;
  JSC::VM *v27;
  WTF::StringImpl *v28;
  char v29;
  int v30[2];
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  unsigned int v34;
  _BYTE v35[8];
  WTF::StringImpl *v36;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v27 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "GPUDevice", "createCommandEncoder");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPUDevice::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPUDevice::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "GPUDevice", "createCommandEncoder");
  if (*((_DWORD *)a2 + 8) == 1)
    v11 = 10;
  else
    v11 = *((_QWORD *)a2 + 6);
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertDictionary<WebCore::GPUCommandEncoderDescriptor>((JSC::JSCell *)v11, this, (uint64_t)&v33);
  v13 = v34;
  if (!v34)
  {
    v14 = v12 - 32;
    v15 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
    v16 = v33;
    v33 = 0;
    v28 = v16;
    v29 = 1;
    WebCore::GPUDevice::createCommandEncoder(v14, (uint64_t)&v28, (uint64_t)v30);
    if (v32)
    {
      if (v32 != 1)
      {
        v24 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
        return (_BYTE *)WebCore::jsGPUDevicePrototypeFunction_createRenderBundleEncoder(v24, v25, v26);
      }
      v18 = (WTF::StringImpl *)LOBYTE(v30[0]);
      v35[0] = v30[0];
      v22 = v31;
      v31 = 0;
      v36 = v22;
      if (!*((_QWORD *)v4 + 2))
      {
        v23.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v30[0]), (JSC::JSGlobalObject *)&v36);
        JSC::VM::throwException(v4, this, v23);
        v22 = v36;
      }
      v36 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v18);
        else
          *(_DWORD *)v22 -= 2;
      }
      v19 = 0;
    }
    else
    {
      v17 = *(WTF **)v30;
      *(_QWORD *)v30 = 0;
      v19 = WebCore::wrap<WebCore::GPUCommandEncoder>((uint64_t)this, v15, v17);
      if (*(_DWORD *)v17 == 1)
      {
        v21 = (_DWORD *)*((_QWORD *)v17 + 1);
        *((_QWORD *)v17 + 1) = 0;
        if (v21)
        {
          if (v21[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
          else
            --v21[2];
        }
        WTF::fastFree(v17, v18);
      }
      else
      {
        --*(_DWORD *)v17;
      }
    }
    if (v32 != -1)
      ((void (*)(_BYTE *, int *))off_1E3282EC8[v32])(v35, v30);
    v32 = -1;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v18);
      else
        *(_DWORD *)v16 -= 2;
    }
    goto LABEL_24;
  }
  v19 = 0;
  result = 0;
  if (v34 != -1)
  {
LABEL_24:
    ((void (*)(int *, WTF::StringImpl **))off_1E3282ED8[v13])(v30, &v33);
    return (_BYTE *)v19;
  }
  return result;
}

_BYTE *WebCore::jsGPUDevicePrototypeFunction_createRenderBundleEncoder(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  JSC::JSCell *v12;
  WTF::StringImpl *v13;
  uint64_t Object;
  JSC::Structure *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  void *v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  WTF *v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  WTF *v33;
  int v34;
  uint64_t v35;
  unint64_t SlowCase;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char **v43;
  int v44;
  unint64_t v45;
  uint64_t *v46;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v48;
  JSC::Structure *v49;
  JSC::JSCell *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  WTF *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  int v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  WTF *v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  void *v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *Allocator;
  WTF *v82;
  WTF::StringImpl *v83;
  _DWORD *v85;
  WTF::StringImpl *v86;
  unsigned __int16 v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  unint64_t v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  unint64_t v93;
  __int16 v94;
  JSC::VM *v95;
  double v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  __int16 v100;
  JSC::VM *v101;
  double v102;
  _BOOL4 v103;
  JSValue v105;
  WTF::StringImpl *v106;
  JSValue v107;
  unint64_t v108;
  void *v109;
  WTF *v110;
  BOOL v111;
  int v112;
  uint64_t v113;
  int *v114;
  int v115;
  BOOL v116;
  int v117;
  uint64_t v118;
  int *v119;
  int v120;
  WebCore *v121;
  JSC::JSGlobalObject *v122;
  JSC::CallFrame *v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  JSC::VM *v127;
  WTF::StringImpl *v128[2];
  uint64_t v129;
  unint64_t v130;
  __int16 v131;
  WTF *v132;
  WTF::StringImpl *v133;
  int v134;
  WTF::StringImpl *v135[2];
  WTF::StringImpl *v136;
  unint64_t v137;
  __int16 v138;
  int v139;
  JSC::VM *v140;
  WTF::StringImpl *v141;
  uint64_t v142[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v127 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v127, "GPUDevice", "createRenderBundleEncoder");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPUDevice::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPUDevice::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v127, "GPUDevice", "createRenderBundleEncoder");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v105.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v105);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
  v140 = v4;
  if (((unint64_t)v12 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v13 = 0;
LABEL_30:
    WebCore::throwRequiredMemberTypeError((int)this, (int)&v140, "colorFormats", 13, "GPURenderBundleEncoderDescriptor", 33, "sequence", 9);
    v22 = 1;
    v139 = 1;
    goto LABEL_31;
  }
  if (((unint64_t)v12 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v12)) == 0)
  {
    JSC::throwTypeError();
LABEL_169:
    v139 = 1;
LABEL_170:
    SlowCase = 0;
    v22 = 1;
LABEL_109:
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3282EF8[v22])(v128, v135);
    return (_BYTE *)SlowCase;
  }
  v15 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v17 = JSC::JSObject::get(v15, this, (unint64_t)v135[0]);
  if (v135[0])
  {
    if (*(_DWORD *)v135[0] == 2)
      WTF::StringImpl::destroy(v135[0], v16);
    else
      *(_DWORD *)v135[0] -= 2;
  }
  if (*((_DWORD *)v140 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v140))
    goto LABEL_169;
  if (v17 == 10)
  {
    v13 = 0;
  }
  else
  {
    WebCore::valueToUSVString(this, v17, (uint64_t)v128);
    if (LODWORD(v128[1]))
    {
      v139 = 1;
      if (LODWORD(v128[1]) != -1)
        ((void (*)(WTF **, WTF::StringImpl **))off_1E3282908[LODWORD(v128[1])])(&v132, v128);
      goto LABEL_170;
    }
    v13 = v128[0];
  }
  WTF::AtomStringImpl::addLiteral();
  v18 = v135[0];
  v20 = JSC::JSObject::get(v15, this, (unint64_t)v135[0]);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v19);
    else
      *(_DWORD *)v18 -= 2;
  }
  if (*((_DWORD *)v140 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v140))
  {
    v22 = 1;
    v139 = 1;
    goto LABEL_31;
  }
  if (v20 == 10)
    goto LABEL_30;
  v58 = (WTF *)*((_QWORD *)this + 7);
  v132 = v58;
  if ((v20 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v20 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v66 = v135[0];
    v135[0] = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
        WTF::StringImpl::destroy(v66, v65);
      else
        *(_DWORD *)v66 -= 2;
    }
    LODWORD(v129) = 1;
    goto LABEL_67;
  }
  v126 = v11;
  v135[0] = 0;
  v135[1] = 0;
  v128[0] = (WTF::StringImpl *)v135;
  JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLNullable<WebCore::IDLEnumeration<WebCore::GPUTextureFormat>>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<std::optional<WebCore::GPUTextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, v20, (uint64_t *)v128);
  if (*((_DWORD *)v58 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v58))
  {
    v110 = v135[0];
    LODWORD(v129) = 1;
    if (v135[0])
    {
      v135[0] = 0;
      LODWORD(v135[1]) = 0;
      WTF::fastFree(v110, v109);
    }
LABEL_67:
    v59 = 0;
    v22 = 1;
    v67 = 1;
    goto LABEL_156;
  }
  v59 = v135[0];
  v60 = v135[1];
  LODWORD(v129) = 0;
  v128[0] = 0;
  v128[1] = 0;
  WTF::AtomStringImpl::addLiteral();
  v61 = v135[0];
  v63 = JSC::JSObject::get(v15, this, (unint64_t)v135[0]);
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
      WTF::StringImpl::destroy(v61, v62);
    else
      *(_DWORD *)v61 -= 2;
  }
  if (*((_DWORD *)v140 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v140) & 1) != 0)
    goto LABEL_206;
  if (v63 == 10)
  {
    v64 = 0;
  }
  else
  {
    v135[0] = *((WTF::StringImpl **)this + 7);
    v86 = v135[0];
    v87 = WebCore::parseEnumeration<WebCore::GPUTextureFormat>(this, v63);
    if (*((_DWORD *)v86 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v86) & 1) != 0)
      goto LABEL_206;
    if (v87 <= 0xFFu)
    {
      JSC::throwTypeError();
      goto LABEL_206;
    }
    v64 = v87 | 0x100;
  }
  v125 = v64;
  WTF::AtomStringImpl::addLiteral();
  v88 = v135[0];
  v90 = JSC::JSObject::get(v15, this, (unint64_t)v135[0]);
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
      WTF::StringImpl::destroy(v88, v89);
    else
      *(_DWORD *)v88 -= 2;
  }
  if (*((_DWORD *)v140 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v140) & 1) != 0)
    goto LABEL_206;
  if (v90 == 10)
  {
    v124 = 1;
    goto LABEL_129;
  }
  WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, v90, v135);
  v124 = v135[0];
  if ((unint64_t)v135[0] >> 32)
  {
LABEL_206:
    v67 = 0;
    v22 = 1;
    goto LABEL_155;
  }
LABEL_129:
  WTF::AtomStringImpl::addLiteral();
  v91 = v135[0];
  v93 = JSC::JSObject::get(v15, this, (unint64_t)v135[0]);
  if (v91)
  {
    if (*(_DWORD *)v91 == 2)
      WTF::StringImpl::destroy(v91, v92);
    else
      *(_DWORD *)v91 -= 2;
  }
  if (*((_DWORD *)v140 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v140) & 1) != 0)
    goto LABEL_206;
  if (v93 == 10)
  {
    v94 = 0;
    goto LABEL_140;
  }
  v95 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v93 >= 0xFFFE000000000000)
  {
    v111 = (_DWORD)v93 == 0;
    goto LABEL_237;
  }
  *(_QWORD *)&v96 = v93 - 0x2000000000000;
  if (v93 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v96 <= 0.0)
    {
      v94 = v96 < 0.0;
      goto LABEL_139;
    }
    goto LABEL_231;
  }
  if ((v93 & 0xFFFE000000000002) != 0)
  {
    v94 = v93 == 7;
    goto LABEL_139;
  }
  v112 = *(unsigned __int8 *)(v93 + 5);
  if (v112 == 3)
  {
    v115 = *(_DWORD *)(v93 + 8);
LABEL_229:
    v111 = v115 == 0;
    goto LABEL_237;
  }
  if (v112 == 2)
  {
    v113 = *(_QWORD *)(v93 + 8);
    if ((v113 & 1) != 0)
      v114 = (int *)(v93 + 16);
    else
      v114 = (int *)(v113 + 4);
    v115 = *v114;
    goto LABEL_229;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v93 & 0xFFFFFFFE) + 0xA) & 1) == 0)
  {
LABEL_231:
    v94 = 1;
    goto LABEL_139;
  }
  v111 = *(_QWORD *)(16 * (*(_DWORD *)v93 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_237:
  v94 = !v111;
LABEL_139:
  if (*((_DWORD *)v95 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v95) & 1) != 0)
    goto LABEL_206;
LABEL_140:
  WTF::AtomStringImpl::addLiteral();
  v97 = v135[0];
  v99 = JSC::JSObject::get(v15, this, (unint64_t)v135[0]);
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
      WTF::StringImpl::destroy(v97, v98);
    else
      *(_DWORD *)v97 -= 2;
  }
  if (*((_DWORD *)v140 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v140) & 1) != 0)
    goto LABEL_206;
  if (v99 != 10)
  {
    v101 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v99 >= 0xFFFE000000000000)
    {
      v116 = (_DWORD)v99 == 0;
      goto LABEL_241;
    }
    *(_QWORD *)&v102 = v99 - 0x2000000000000;
    if (v99 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v102 <= 0.0)
      {
        v103 = v102 < 0.0;
        goto LABEL_150;
      }
    }
    else
    {
      if ((v99 & 0xFFFE000000000002) != 0)
      {
        v103 = v99 == 7;
        goto LABEL_150;
      }
      v117 = *(unsigned __int8 *)(v99 + 5);
      if (v117 == 3)
      {
        v120 = *(_DWORD *)(v99 + 8);
LABEL_233:
        v116 = v120 == 0;
        goto LABEL_241;
      }
      if (v117 == 2)
      {
        v118 = *(_QWORD *)(v99 + 8);
        if ((v118 & 1) != 0)
          v119 = (int *)(v99 + 16);
        else
          v119 = (int *)(v118 + 4);
        v120 = *v119;
        goto LABEL_233;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v99 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v116 = *(_QWORD *)(16 * (*(_DWORD *)v99 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_241:
        v103 = !v116;
        goto LABEL_150;
      }
    }
    v103 = 1;
LABEL_150:
    if (*((_DWORD *)v101 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v101) & 1) != 0)
    {
      v67 = 0;
      v22 = 1;
      goto LABEL_155;
    }
    if (v103)
      v100 = 256;
    else
      v100 = 0;
    goto LABEL_154;
  }
  v100 = 0;
LABEL_154:
  v22 = 0;
  v67 = 0;
  v135[0] = v13;
  v135[1] = v59;
  v136 = v60;
  v137 = v125 | ((unint64_t)v124 << 32);
  v138 = v100 | v94;
  v59 = 0;
  v13 = 0;
LABEL_155:
  v11 = v126;
LABEL_156:
  v139 = v22;
  ((void (*)(WTF **, WTF::StringImpl **))off_1E3283920[v67])(&v132, v128);
  if (v59)
    WTF::fastFree(v59, v21);
LABEL_31:
  if (!v13)
    goto LABEL_34;
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
LABEL_34:
    if (!v22)
      goto LABEL_35;
LABEL_116:
    SlowCase = 0;
    if (v22 == -1)
      return (_BYTE *)SlowCase;
    goto LABEL_109;
  }
  WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v21);
  v22 = v139;
  if (v139)
    goto LABEL_116;
LABEL_35:
  v23 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v24 = *(_OWORD *)v135;
  v135[0] = 0;
  v135[1] = 0;
  *(_OWORD *)v128 = v24;
  *(_QWORD *)&v24 = v136;
  v136 = 0;
  v129 = v24;
  v130 = v137;
  v131 = v138;
  WebCore::GPUDevice::createRenderBundleEncoder(v11 - 32, (uint64_t)v128, (uint64_t)&v132);
  if (!v134)
  {
    v26 = v132;
    v132 = 0;
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 3320) + 32);
    if (v27)
    {
      v28 = *(_DWORD *)(v27 - 8);
      v29 = ((unint64_t)v26 + ~((_QWORD)v26 << 32)) ^ (((unint64_t)v26 + ~((_QWORD)v26 << 32)) >> 22);
      v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
      v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
      v32 = v28 & ((v31 >> 31) ^ v31);
      v33 = *(WTF **)(v27 + 16 * v32);
      if (v33 == v26)
      {
LABEL_41:
        v35 = *(_QWORD *)(v27 + 16 * v32 + 8);
        if (v35)
        {
          if ((*(_BYTE *)(v35 + 8) & 3) == 0)
          {
            SlowCase = *(_QWORD *)v35;
            if (*(_QWORD *)v35)
            {
LABEL_100:
              if (*(_DWORD *)v26 == 1)
              {
                v85 = (_DWORD *)*((_QWORD *)v26 + 1);
                *((_QWORD *)v26 + 1) = 0;
                if (v85)
                {
                  if (v85[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v85 + 8))(v85);
                  else
                    --v85[2];
                }
                WTF::fastFree(v26, (void *)v25);
              }
              else
              {
                --*(_DWORD *)v26;
              }
LABEL_102:
              if (v134 != -1)
                ((void (*)(JSC::VM **, WTF **))off_1E3282EE8[v134])(&v140, &v132);
              v134 = -1;
              v82 = v128[1];
              if (v128[1])
              {
                v128[1] = 0;
                LODWORD(v129) = 0;
                WTF::fastFree(v82, (void *)v25);
              }
              v83 = v128[0];
              v128[0] = 0;
              if (v83)
              {
                if (*(_DWORD *)v83 == 2)
                  WTF::StringImpl::destroy(v83, (WTF::StringImpl *)v25);
                else
                  *(_DWORD *)v83 -= 2;
              }
              goto LABEL_109;
            }
          }
        }
      }
      else
      {
        v34 = 1;
        while (v33)
        {
          v32 = ((_DWORD)v32 + v34) & v28;
          v33 = *(WTF **)(v27 + 16 * v32);
          ++v34;
          if (v33 == v26)
            goto LABEL_41;
        }
      }
    }
    ++*(_DWORD *)v26;
    v37 = *(_QWORD *)(v23 + 3296);
    if (v37)
    {
      v38 = *(_DWORD *)(v37 - 8);
      v39 = ((unint64_t)&WebCore::JSGPURenderBundleEncoder::s_info
           + ~((_QWORD)&WebCore::JSGPURenderBundleEncoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPURenderBundleEncoder::s_info
                                                                            + ~((_QWORD)&WebCore::JSGPURenderBundleEncoder::s_info << 32)) >> 22);
      v40 = 9 * ((v39 + ~(v39 << 13)) ^ ((v39 + ~(v39 << 13)) >> 8));
      v41 = (v40 ^ (v40 >> 15)) + ~((v40 ^ (v40 >> 15)) << 27);
      v42 = v38 & ((v41 >> 31) ^ v41);
      v43 = *(char ***)(v37 + 16 * v42);
      if (v43 == &WebCore::JSGPURenderBundleEncoder::s_info)
      {
LABEL_49:
        v45 = *(_QWORD *)(v37 + 16 * v42 + 8);
        if (v45)
          goto LABEL_51;
      }
      else
      {
        v44 = 1;
        while (v43)
        {
          v42 = ((_DWORD)v42 + v44) & v38;
          v43 = *(char ***)(v37 + 16 * v42);
          ++v44;
          if (v43 == &WebCore::JSGPURenderBundleEncoder::s_info)
            goto LABEL_49;
        }
      }
    }
    v46 = *(uint64_t **)(v23 + 56);
    Structure = WebCore::JSGPURenderBundleEncoderPrototype::createStructure(v46, v23, *(JSC::JSCell **)(v23 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v50 = (JSC::JSCell *)WebCore::JSGPURenderBundleEncoderPrototype::create((WebCore::JSGPURenderBundleEncoderPrototype *)v46, Structure, v48, v49);
    v51 = WebCore::JSGPURenderBundleEncoder::createStructure(v46, v23, v50);
    v45 = WebCore::cacheDOMStructure((JSCell *)v23, v51, (uint64_t)&WebCore::JSGPURenderBundleEncoder::s_info);
LABEL_51:
    v52 = *(_QWORD *)(v23 + 56);
    v53 = *(_QWORD *)(v52 + 41456);
    v54 = *(_QWORD *)(v53 + 23536);
    v55 = *(_QWORD **)(v54 + 264);
    if (v55)
      goto LABEL_85;
    v56 = *(_QWORD *)(v53 + 22648);
    if (__ldaxr((unsigned __int8 *)v56))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v56))
    {
      goto LABEL_70;
    }
    MEMORY[0x19AEA534C](v56);
LABEL_70:
    v68 = *(_QWORD *)(v56 + 2824);
    if (!*(_QWORD *)(v68 + 264))
    {
      v69 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v140, "IsoSpace T");
      v142[0] = 0;
      MEMORY[0x19AEA3204](v69, &v140, v52 + 192, v52 + 1872, 32, 8, v142);
      v71 = v142[0];
      v142[0] = 0;
      if (v71)
        (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
      v72 = v140;
      v140 = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 1)
          WTF::fastFree(v72, v70);
        else
          --*(_DWORD *)v72;
      }
      v73 = *(_QWORD *)(v68 + 264);
      *(_QWORD *)(v68 + 264) = v69;
      if (v73)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
    }
    v55 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v74 = *(_QWORD *)(v54 + 264);
    *(_QWORD *)(v54 + 264) = v55;
    if (v74)
    {
      v75 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v75, v76);
    }
    v77 = __ldxr((unsigned __int8 *)v56);
    if (v77 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v56))
      {
LABEL_85:
        SlowCase = v55[3];
        if (SlowCase >= v55[4])
        {
          SlowCase = v55[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
            goto LABEL_87;
          }
          v108 = *(_QWORD *)(SlowCase + 8) ^ v55[6];
          v55[4] = SlowCase + HIDWORD(v108);
          v55[5] = SlowCase + (int)v108;
        }
        v55[3] = SlowCase + 32;
LABEL_87:
        *(_DWORD *)SlowCase = 0;
        WebCore::JSDOMObject::JSDOMObject(SlowCase, v45);
        *(_QWORD *)(SlowCase + 24) = v26;
        if (*(_BYTE *)(v52 + 755))
          __dmb(0xAu);
        v78 = *(_QWORD *)(v23 + 3320);
        if ((byte_1EE3358B0 & 1) == 0)
        {
          qword_1EE3358A8 = (uint64_t)&off_1E3282870;
          byte_1EE3358B0 = 1;
        }
        v140 = v26;
        if ((SlowCase & 8) != 0)
          v79 = (SlowCase - 112) | 1;
        else
          v79 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v79 & 1) != 0)
          v80 = v79 + 47;
        else
          v80 = *(_QWORD *)v79 + 32;
        Allocator = *(_QWORD **)(v80 + 16);
        if (!Allocator)
          Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v80 + 16) = *Allocator;
        *Allocator = SlowCase;
        Allocator[1] = &qword_1EE3358A8;
        Allocator[2] = v78;
        v142[0] = (uint64_t)Allocator;
        JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v78 + 32), (uint64_t *)&v140, v142);
        if (v142[0])
          *(_QWORD *)(v142[0] + 8) = 3;
        goto LABEL_100;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v56);
    goto LABEL_85;
  }
  if (v134 == 1)
  {
    v25 = v132;
    LOBYTE(v140) = (_BYTE)v132;
    v106 = v133;
    v133 = 0;
    v141 = v106;
    if (!*((_QWORD *)v4 + 2))
    {
      v107.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v132, (JSC::JSGlobalObject *)&v141);
      JSC::VM::throwException(v4, this, v107);
      v106 = v141;
    }
    v141 = 0;
    if (v106)
    {
      if (*(_DWORD *)v106 == 2)
        WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v25);
      else
        *(_DWORD *)v106 -= 2;
    }
    SlowCase = 0;
    goto LABEL_102;
  }
  v121 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsGPUDevicePrototypeFunction_createQuerySet(v121, v122, v123);
}

_BYTE *WebCore::jsGPUDevicePrototypeFunction_createQuerySet(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  JSC::JSCell *v12;
  WTF::StringImpl *v13;
  uint64_t Object;
  JSC::Structure *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t SlowCase;
  int v28;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF *v32;
  WTF *v33;
  int v34;
  const char *v35;
  int v36;
  BOOL v37;
  int v38;
  char **v39;
  unsigned int v41;
  int v42;
  uint16x8_t v44;
  JSValue v45;
  uint16x8_t v46;
  uint64_t v47;
  JSC::VM *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl **v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  WTF::StringImpl **v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char **v66;
  int v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v71;
  JSC::Structure *v72;
  JSC::JSCell *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  WTF *v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  void *v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *Allocator;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  JSValue v98;
  unint64_t v99;
  WebCore *v100;
  JSC::JSGlobalObject *v101;
  JSC::CallFrame *v102;
  unint64_t v103;
  JSC::VM *v104;
  JSC::VM *v105[2];
  WTF *v106;
  WTF::StringImpl *v107;
  int v108;
  unint64_t v109;
  JSC::VM *v110;
  int v111;
  WTF *v112;
  WTF::StringImpl *v113;
  _QWORD *v114;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v104 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v104, "GPUDevice", "createQuerySet");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPUDevice::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPUDevice::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v104, "GPUDevice", "createQuerySet");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v45.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v45);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
  v105[0] = v4;
  if (((unint64_t)v12 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v13 = 0;
LABEL_30:
    v21 = "count";
    v22 = "unsigned long";
    v23 = (int)this;
    v24 = 6;
    v25 = 14;
LABEL_31:
    WebCore::throwRequiredMemberTypeError(v23, (int)v105, v21, v24, "GPUQuerySetDescriptor", 22, v22, v25);
    goto LABEL_32;
  }
  if (((unint64_t)v12 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v12)) == 0)
  {
    JSC::throwTypeError();
LABEL_89:
    v111 = 1;
    goto LABEL_35;
  }
  v15 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v17 = JSC::JSObject::get(v15, this, v109);
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v109, v16);
    else
      *(_DWORD *)v109 -= 2;
  }
  if (*((_DWORD *)v105[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v105[0]))
    goto LABEL_89;
  if (v17 == 10)
  {
    v13 = 0;
  }
  else
  {
    WebCore::valueToUSVString(this, v17, (uint64_t)&v106);
    if ((_DWORD)v107)
    {
      v111 = 1;
      if ((_DWORD)v107 != -1)
        ((void (*)(WTF **, WTF **))off_1E3282908[v107])(&v112, &v106);
      goto LABEL_35;
    }
    v13 = v106;
  }
  WTF::AtomStringImpl::addLiteral();
  v18 = (WTF::StringImpl *)v109;
  v20 = JSC::JSObject::get(v15, this, v109);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v19);
    else
      *(_DWORD *)v18 -= 2;
  }
  if (*((_DWORD *)v105[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v105[0]) & 1) != 0)
    goto LABEL_32;
  if (v20 == 10)
    goto LABEL_30;
  WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, v20, &v109);
  if (HIDWORD(v109))
    goto LABEL_32;
  v103 = v109;
  WTF::AtomStringImpl::addLiteral();
  v30 = (WTF::StringImpl *)v109;
  v31 = JSC::JSObject::get(v15, this, v109);
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v26);
    else
      *(_DWORD *)v30 -= 2;
  }
  if (*((_DWORD *)v105[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v105[0]) & 1) != 0)
    goto LABEL_32;
  if (v31 == 10)
  {
    v21 = "type";
    v22 = "GPUQueryType";
    v23 = (int)this;
    v24 = 5;
    v25 = 13;
    goto LABEL_31;
  }
  v32 = (WTF *)*((_QWORD *)this + 7);
  v112 = v32;
  v109 = v31;
  if ((v31 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v31 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v109, this);
    v33 = v106;
    if (v106)
      goto LABEL_51;
LABEL_87:
    v41 = 0;
    v42 = 0;
    goto LABEL_101;
  }
  v33 = *(WTF **)(v31 + 8);
  if ((v33 & 1) == 0)
  {
    if (!v33)
      goto LABEL_50;
    goto LABEL_49;
  }
  v33 = *(WTF **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v31, this);
  if (v33)
LABEL_49:
    *(_DWORD *)v33 += 2;
LABEL_50:
  v106 = v33;
  if (!v33)
    goto LABEL_87;
LABEL_51:
  v34 = *((_DWORD *)v33 + 4);
  v35 = (const char *)*((_QWORD *)v33 + 1);
  v36 = *((_DWORD *)v33 + 1);
  v37 = v36 != 9;
  if (v35 != "occlusion" && v36 == 9)
  {
    if ((v34 & 4) != 0)
    {
      if (*v35 != 111 || *(_DWORD *)(v35 + 1) != 1970037603 || *(_DWORD *)(v35 + 5) != 1852795251)
      {
LABEL_57:
        v38 = 9;
        goto LABEL_58;
      }
    }
    else
    {
      if (*(_WORD *)v35 != 111)
        goto LABEL_57;
      v44 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v35 + 2), (int16x8_t)xmmword_1968BFD50);
      v44.i16[0] = vminvq_u16(v44);
      if (!v44.i32[0])
        goto LABEL_57;
    }
LABEL_74:
    v39 = &WebCore::parseEnumerationFromString<WebCore::GPUQueryType>(WTF::String const&)::mappings;
LABEL_82:
    v41 = *((unsigned __int8 *)v39 + 16);
    v42 = 1;
    goto LABEL_99;
  }
  if (v35 == "occlusion")
  {
    v38 = *((_DWORD *)v33 + 1);
    if (v36 == 9)
      goto LABEL_74;
  }
  else
  {
    v38 = *((_DWORD *)v33 + 1);
  }
LABEL_58:
  if (v35 == "timestamp")
    v37 = 1;
  if (v37)
  {
    if (v36 != 9 || v35 != "timestamp")
      goto LABEL_98;
    goto LABEL_81;
  }
  if (!v38)
    goto LABEL_81;
  if ((v34 & 4) == 0)
  {
    if (*(_WORD *)v35 != 116)
      goto LABEL_98;
    v46 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v35 + 2), (int16x8_t)xmmword_1968BFD60);
    v46.i16[0] = vminvq_u16(v46);
    if (!v46.i32[0])
      goto LABEL_98;
    goto LABEL_81;
  }
  if (*v35 == 116 && *(_DWORD *)(v35 + 1) == 1936026985 && *(_DWORD *)(v35 + 5) == 1886216564)
  {
LABEL_81:
    v39 = &off_1E3281D68;
    goto LABEL_82;
  }
LABEL_98:
  v42 = 0;
  v41 = 0;
LABEL_99:
  v106 = 0;
  if (*(_DWORD *)v33 == 2)
    WTF::StringImpl::destroy(v33, v26);
  else
    *(_DWORD *)v33 -= 2;
LABEL_101:
  if (!*((_DWORD *)v32 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v32) & 1) == 0)
  {
    if (v42)
    {
      v109 = (unint64_t)v13;
      v110 = (JSC::VM *)((v103 << 32) | v41);
      v111 = 0;
      goto LABEL_104;
    }
    JSC::throwTypeError();
  }
LABEL_32:
  v111 = 1;
  if (!v13)
  {
LABEL_35:
    SlowCase = 0;
    v28 = 1;
LABEL_36:
    ((void (*)(WTF **, unint64_t *))off_1E3282F18[v28])(&v106, &v109);
    return (_BYTE *)SlowCase;
  }
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_35;
  }
  WTF::StringImpl::destroy(v13, v26);
  v28 = v111;
  if (v111)
  {
    SlowCase = 0;
    if (v111 == -1)
      return (_BYTE *)SlowCase;
    goto LABEL_36;
  }
LABEL_104:
  v47 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v48 = (JSC::VM *)v109;
  v109 = 0;
  v105[0] = v48;
  v105[1] = v110;
  WebCore::GPUDevice::createQuerySet(v11 - 32, (uint64_t)v105, (uint64_t)&v106);
  if (!v108)
  {
    v50 = (WTF::StringImpl **)v106;
    v106 = 0;
    v51 = *(_QWORD *)(*(_QWORD *)(v47 + 3320) + 32);
    if (v51)
    {
      v52 = *(_DWORD *)(v51 - 8);
      v53 = ((unint64_t)v50 + ~((_QWORD)v50 << 32)) ^ (((unint64_t)v50 + ~((_QWORD)v50 << 32)) >> 22);
      v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
      v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
      v56 = v52 & ((v55 >> 31) ^ v55);
      v57 = *(WTF::StringImpl ***)(v51 + 16 * v56);
      if (v57 == v50)
      {
LABEL_110:
        v59 = *(_QWORD *)(v51 + 16 * v56 + 8);
        if (v59)
        {
          if ((*(_BYTE *)(v59 + 8) & 3) == 0)
          {
            SlowCase = *(_QWORD *)v59;
            if (*(_QWORD *)v59)
            {
LABEL_155:
              WTF::RefCounted<WebCore::GPUQuerySet>::deref(v50, v49);
LABEL_156:
              if (v108 != -1)
                ((void (*)(WTF **, WTF **))off_1E3282F08[v108])(&v112, &v106);
              v108 = -1;
              v96 = v105[0];
              v105[0] = 0;
              if (v96)
              {
                if (*(_DWORD *)v96 == 2)
                  WTF::StringImpl::destroy(v96, v95);
                else
                  *(_DWORD *)v96 -= 2;
              }
              v28 = 0;
              goto LABEL_36;
            }
          }
        }
      }
      else
      {
        v58 = 1;
        while (v57)
        {
          v56 = ((_DWORD)v56 + v58) & v52;
          v57 = *(WTF::StringImpl ***)(v51 + 16 * v56);
          ++v58;
          if (v57 == v50)
            goto LABEL_110;
        }
      }
    }
    ++*(_DWORD *)v50;
    v60 = *(_QWORD *)(v47 + 3296);
    if (v60)
    {
      v61 = *(_DWORD *)(v60 - 8);
      v62 = ((unint64_t)&WebCore::JSGPUQuerySet::s_info + ~((_QWORD)&WebCore::JSGPUQuerySet::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUQuerySet::s_info + ~((_QWORD)&WebCore::JSGPUQuerySet::s_info << 32)) >> 22);
      v63 = 9 * ((v62 + ~(v62 << 13)) ^ ((v62 + ~(v62 << 13)) >> 8));
      v64 = (v63 ^ (v63 >> 15)) + ~((v63 ^ (v63 >> 15)) << 27);
      v65 = v61 & ((v64 >> 31) ^ v64);
      v66 = *(char ***)(v60 + 16 * v65);
      if (v66 == &WebCore::JSGPUQuerySet::s_info)
      {
LABEL_118:
        v68 = *(_QWORD *)(v60 + 16 * v65 + 8);
        if (v68)
          goto LABEL_120;
      }
      else
      {
        v67 = 1;
        while (v66)
        {
          v65 = ((_DWORD)v65 + v67) & v61;
          v66 = *(char ***)(v60 + 16 * v65);
          ++v67;
          if (v66 == &WebCore::JSGPUQuerySet::s_info)
            goto LABEL_118;
        }
      }
    }
    v69 = *(uint64_t **)(v47 + 56);
    Structure = WebCore::JSGPUQuerySetPrototype::createStructure(v69, v47, *(JSC::JSCell **)(v47 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v73 = (JSC::JSCell *)WebCore::JSGPUQuerySetPrototype::create((WebCore::JSGPUQuerySetPrototype *)v69, Structure, v71, v72);
    v74 = WebCore::JSGPUQuerySet::createStructure(v69, v47, v73);
    v68 = WebCore::cacheDOMStructure((JSCell *)v47, v74, (uint64_t)&WebCore::JSGPUQuerySet::s_info);
LABEL_120:
    v75 = *(_QWORD *)(v47 + 56);
    v76 = *(_QWORD *)(v75 + 41456);
    v77 = *(_QWORD *)(v76 + 23536);
    v78 = *(_QWORD **)(v77 + 240);
    if (v78)
      goto LABEL_140;
    v79 = *(_QWORD *)(v76 + 22648);
    if (__ldaxr((unsigned __int8 *)v79))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v79))
    {
      goto LABEL_125;
    }
    MEMORY[0x19AEA534C](v79);
LABEL_125:
    v81 = *(_QWORD *)(v79 + 2824);
    if (!*(_QWORD *)(v81 + 240))
    {
      v82 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v112, "IsoSpace T");
      v114 = 0;
      MEMORY[0x19AEA3204](v82, &v112, v75 + 192, v75 + 1872, 32, 8, &v114);
      v84 = (uint64_t)v114;
      v114 = 0;
      if (v84)
        (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
      v85 = v112;
      v112 = 0;
      if (v85)
      {
        if (*(_DWORD *)v85 == 1)
          WTF::fastFree(v85, v83);
        else
          --*(_DWORD *)v85;
      }
      v86 = *(_QWORD *)(v81 + 240);
      *(_QWORD *)(v81 + 240) = v82;
      if (v86)
        (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
    }
    v78 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v87 = *(_QWORD *)(v77 + 240);
    *(_QWORD *)(v77 + 240) = v78;
    if (v87)
    {
      v88 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v88, v89);
    }
    v90 = __ldxr((unsigned __int8 *)v79);
    if (v90 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v79))
      {
LABEL_140:
        SlowCase = v78[3];
        if (SlowCase >= v78[4])
        {
          SlowCase = v78[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
            goto LABEL_142;
          }
          v99 = *(_QWORD *)(SlowCase + 8) ^ v78[6];
          v78[4] = SlowCase + HIDWORD(v99);
          v78[5] = SlowCase + (int)v99;
        }
        v78[3] = SlowCase + 32;
LABEL_142:
        *(_DWORD *)SlowCase = 0;
        WebCore::JSDOMObject::JSDOMObject(SlowCase, v68);
        *(_QWORD *)(SlowCase + 24) = v50;
        if (*(_BYTE *)(v75 + 755))
          __dmb(0xAu);
        v91 = *(_QWORD *)(v47 + 3320);
        if ((byte_1EE335880 & 1) == 0)
        {
          qword_1EE335878 = (uint64_t)&off_1E32827E0;
          byte_1EE335880 = 1;
        }
        v112 = (WTF *)v50;
        if ((SlowCase & 8) != 0)
          v92 = (SlowCase - 112) | 1;
        else
          v92 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v92 & 1) != 0)
          v93 = v92 + 47;
        else
          v93 = *(_QWORD *)v92 + 32;
        Allocator = *(_QWORD **)(v93 + 16);
        if (!Allocator)
          Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v93 + 16) = *Allocator;
        *Allocator = SlowCase;
        Allocator[1] = &qword_1EE335878;
        Allocator[2] = v91;
        v114 = Allocator;
        JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v91 + 32), (uint64_t *)&v112, (uint64_t *)&v114);
        if (v114)
          v114[1] = 3;
        goto LABEL_155;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v79);
    goto LABEL_140;
  }
  if (v108 == 1)
  {
    v95 = (WTF::StringImpl *)v106;
    LOBYTE(v112) = (_BYTE)v106;
    v97 = v107;
    v107 = 0;
    v113 = v97;
    if (!*((_QWORD *)v4 + 2))
    {
      v98.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v106, (JSC::JSGlobalObject *)&v113);
      JSC::VM::throwException(v4, this, v98);
      v97 = v113;
    }
    v113 = 0;
    if (v97)
    {
      if (*(_DWORD *)v97 == 2)
        WTF::StringImpl::destroy(v97, v95);
      else
        *(_DWORD *)v97 -= 2;
    }
    SlowCase = 0;
    goto LABEL_156;
  }
  v100 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsGPUDevicePrototypeFunction_pushErrorScope(v100, v101, v102);
}

uint64_t WebCore::jsGPUDevicePrototypeFunction_pushErrorScope(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const char *v20;
  int v21;
  int v23;
  uint64_t v24;
  char **v26;
  uint64_t v27;
  uint64_t v28;
  uint16x8_t v31;
  uint16x8_t v32;
  JSValue v33;
  uint16x8_t v34;
  uint16x8_t v35;
  JSC::VM *v37;
  JSC::VM *v38;
  uint64_t v39;
  uint64_t v40;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v37 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v37, "GPUDevice", "pushErrorScope");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSGPUDevice::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSGPUDevice::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v37, "GPUDevice", "pushErrorScope");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v33.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v33);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v38 = v9;
  v40 = v17;
  if ((v17 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v17 + 5) == 2)
  {
    v18 = *(_QWORD *)(v17 + 8);
    if ((v18 & 1) != 0)
    {
      v18 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v17, this);
      if (!v18)
      {
LABEL_18:
        v39 = v18;
        if (v18)
          goto LABEL_19;
LABEL_43:
        v24 = 0;
        v23 = 0;
        goto LABEL_54;
      }
    }
    else if (!v18)
    {
      goto LABEL_18;
    }
    *(_DWORD *)v18 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v40, this);
  v18 = v39;
  if (!v39)
    goto LABEL_43;
LABEL_19:
  v19 = *(_DWORD *)(v18 + 16);
  v20 = *(const char **)(v18 + 8);
  v21 = *(_DWORD *)(v18 + 4);
  if (v20 != "internal" && v21 == 8)
  {
    if ((v19 & 4) != 0)
    {
      if (*v20 != 105 || *(_DWORD *)(v20 + 1) != 1919251566 || *((_DWORD *)v20 + 1) != 1818324594)
        goto LABEL_28;
    }
    else
    {
      if (*(_WORD *)v20 != 105)
        goto LABEL_28;
      v27 = *(_QWORD *)(v20 + 2);
      v28 = *((_QWORD *)v20 + 1);
      if (v27 != 0x7200650074006ELL || v28 != 0x6C0061006E0072)
        goto LABEL_28;
    }
LABEL_50:
    v26 = &WebCore::parseEnumerationFromString<WebCore::GPUErrorFilter>(WTF::String const&)::mappings;
    goto LABEL_51;
  }
  if (v20 == "internal" && v21 == 8)
    goto LABEL_50;
  if (v20 == "out-of-memory" || v21 != 13)
  {
    if (v20 == "out-of-memory" && v21 == 13)
      goto LABEL_39;
    if (v20 == "validation" || v21 != 10)
    {
      if (v21 != 10 || v20 != "validation")
        goto LABEL_28;
    }
    else if ((v19 & 4) != 0)
    {
      if (*v20 != 118 || *(_QWORD *)(v20 + 1) != 0x6F69746164696C61 || *(_QWORD *)(v20 + 2) != 0x6E6F69746164696CLL)
        goto LABEL_28;
    }
    else
    {
      if (*(_WORD *)v20 != 118)
        goto LABEL_28;
      v34 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v20 + 2), (int16x8_t)xmmword_1968BFC60);
      v34.i16[0] = vminvq_u16(v34);
      if (!v34.i32[0])
        goto LABEL_28;
      v35 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v20 + 4), (int16x8_t)xmmword_1968BFC70);
      v35.i16[0] = vminvq_u16(v35);
      if (!v35.i32[0])
        goto LABEL_28;
    }
    v26 = &off_1E3280550;
    goto LABEL_51;
  }
  if ((v19 & 4) == 0)
  {
    if (*(_WORD *)v20 == 111)
    {
      v31 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v20 + 2), (int16x8_t)xmmword_1968BFD70);
      v31.i16[0] = vminvq_u16(v31);
      if (v31.i32[0])
      {
        v32 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v20 + 10), (int16x8_t)xmmword_1968BFD80);
        v32.i16[0] = vminvq_u16(v32);
        if (v32.i32[0])
          goto LABEL_39;
      }
    }
LABEL_28:
    v23 = 0;
    v24 = 0;
    goto LABEL_52;
  }
  if (*v20 != 111 || *(_QWORD *)(v20 + 1) != 0x656D2D666F2D7475 || *(_QWORD *)(v20 + 5) != 0x79726F6D656D2D66)
    goto LABEL_28;
LABEL_39:
  v26 = &off_1E3280538;
LABEL_51:
  v24 = *((unsigned __int8 *)v26 + 16);
  v23 = 1;
LABEL_52:
  v39 = 0;
  if (*(_DWORD *)v18 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v18, a2);
  else
    *(_DWORD *)v18 -= 2;
LABEL_54:
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
    return 0;
  if (!v23)
  {
    WebCore::throwArgumentMustBeEnumError((uint64_t)this, (uint64_t)&v38, 0, "filter", 7, "GPUDevice", 10, a8, "pushErrorScope", 15, "\"out-of-memory\", \"validation\", \"internal\"", 42);
    return 0;
  }
  if (v24 >= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x194B78950);
  }
  (*(void (**)(_QWORD, uint64_t, JSC::CallFrame *))(**(_QWORD **)(v16 + 32) + 152))(*(_QWORD *)(v16 + 32), v24, a3);
  return 10;
}

unint64_t WebCore::jsGPUDevicePrototypeFunction_popErrorScope(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  WebCore::DOMGuardedObject *v24;
  WebCore::DOMGuardedObject *v25;
  void (*v26)(void);
  uint64_t v27;
  objc_class *v29;
  WebCore::DOMGuardedObject *v30;
  WebCore::DOMGuardedObject *v31;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194B78C04);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_31;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSGPUDevice::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSGPUDevice::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_31:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"GPUDevice", "popErrorScope", v16);
    if (*((_DWORD *)v14 + 4) != 1)
    {
      --*((_DWORD *)v14 + 4);
      goto LABEL_28;
    }
    v26 = *(void (**)(void))(*(_QWORD *)v14 + 16);
    goto LABEL_27;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(v17 + 24) + 32);
  v24 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v24 = &off_1E334DFC0;
  *((_QWORD *)v24 + 1) = v14;
  v31 = v24;
  (*(void (**)(uint64_t, WebCore::DOMGuardedObject **))(*(_QWORD *)v23 + 160))(v23, &v31);
  v25 = v31;
  v31 = 0;
  if (v25)
  {
    v26 = *(void (**)(void))(*(_QWORD *)v25 + 8);
LABEL_27:
    v26();
  }
LABEL_28:
  v27 = *(_QWORD *)(v10 + 16);
  if (v27)
  {
    if (*(_QWORD *)(v10 + 24) != v27)
    {
      v29 = *(objc_class **)(v27 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v31);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v31, v29, 0);
      v30 = v31;
      v31 = 0;
      if (v30)
      {
        if (*((_DWORD *)v30 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v30 + 16))(v30);
        else
          --*((_DWORD *)v30 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

WebCore::GPUBuffer *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore9GPUBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WebCore::GPUBuffer **a2)
{
  WebCore::GPUBuffer *result;
  WTF *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::GPUBuffer::~GPUBuffer(result, a2);
      return (WebCore::GPUBuffer *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore9GPUBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore19GPUBufferDescriptorENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore10GPUTextureENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore10GPUTextureENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20GPUTextureDescriptorENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *result;
  char v6;

  v3 = (WTF *)a2[6];
  if (v3)
  {
    a2[6] = 0;
    *((_DWORD *)a2 + 14) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _QWORD *))off_1E3282D48[v4])(&v6, a2 + 1);
  *((_DWORD *)a2 + 6) = -1;
  result = (WTF::StringImpl *)*a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore10GPUSamplerENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore10GPUSamplerENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20GPUSamplerDescriptorENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16HTMLVideoElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_19WebCodecsVideoFrameENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16HTMLVideoElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_19WebCodecsVideoFrameENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16HTMLVideoElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_19WebCodecsVideoFrameENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16HTMLVideoElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_19WebCodecsVideoFrameENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore18GPUExternalTextureENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
      v4 = *((_QWORD *)v2 + 1);
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 0;
        v5 = (unsigned int *)*((_QWORD *)v2 + 1);
        *((_QWORD *)v2 + 1) = 0;
        if (v5)
        {
          do
          {
            v6 = __ldaxr(v5);
            v7 = v6 - 1;
          }
          while (__stlxr(v7, v5));
          if (!v7)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
      else
      {
        *((_QWORD *)v2 + 1) = 0;
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore18GPUExternalTextureENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore28GPUExternalTextureDescriptorENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  WTF::StringImpl *result;
  char v5;

  v3 = a2[4];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, unsigned int *))off_1E3282DA8[v3])(&v5, a2 + 2);
  a2[4] = -1;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore18GPUBindGroupLayoutENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
      v4 = *((_QWORD *)v2 + 1);
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 0;
        v5 = (unsigned int *)*((_QWORD *)v2 + 1);
        *((_QWORD *)v2 + 1) = 0;
        if (v5)
        {
          do
          {
            v6 = __ldaxr(v5);
            v7 = v6 - 1;
          }
          while (__stlxr(v7, v5));
          if (!v7)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
      else
      {
        *((_QWORD *)v2 + 1) = 0;
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore18GPUBindGroupLayoutENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore28GPUBindGroupLayoutDescriptorENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  WTF *v3;
  WTF::StringImpl *result;

  v3 = (WTF *)a2[1];
  if (v3)
  {
    a2[1] = 0;
    *((_DWORD *)a2 + 4) = 0;
    WTF::fastFree(v3, a2);
  }
  result = (WTF::StringImpl *)*a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore17GPUPipelineLayoutENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore17GPUPipelineLayoutENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27GPUPipelineLayoutDescriptorENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  WTF::Vector<WTF::Ref<WebCore::GPUBindGroupLayout,WTF::RawPtrTraits<WebCore::GPUBindGroupLayout>,WTF::DefaultRefDerefTraits<WebCore::GPUBindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 1), a2);
  result = (WTF::StringImpl *)*a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12GPUBindGroupENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12GPUBindGroupENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22GPUBindGroupDescriptorENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *result;
  char v12;

  v3 = *((unsigned int *)a2 + 7);
  v4 = (WTF *)a2[2];
  if ((_DWORD)v3)
  {
    v5 = 48 * v3;
    v6 = (_DWORD *)((char *)v4 + 40);
    do
    {
      v7 = *v6;
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, _DWORD *))off_1E3282E38[v7])(&v12, v6 - 8);
      *v6 = -1;
      v6 += 12;
      v5 -= 48;
    }
    while (v5);
    v4 = (WTF *)a2[2];
  }
  if (v4)
  {
    a2[2] = 0;
    *((_DWORD *)a2 + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  v8 = (unsigned int *)a2[1];
  a2[1] = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  result = (WTF::StringImpl *)*a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore15GPUShaderModuleENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
      v4 = *((_QWORD *)v2 + 1);
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 0;
        v5 = (unsigned int *)*((_QWORD *)v2 + 1);
        *((_QWORD *)v2 + 1) = 0;
        if (v5)
        {
          do
          {
            v6 = __ldaxr(v5);
            v7 = v6 - 1;
          }
          while (__stlxr(v7, v5));
          if (!v7)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
      else
      {
        *((_QWORD *)v2 + 1) = 0;
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore15GPUShaderModuleENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::GPUShaderModuleDescriptor::~GPUShaderModuleDescriptor(WebCore::GPUShaderModuleDescriptor *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  char v16;

  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    v5 = *((_QWORD *)this + 3) + 8;
    do
    {
      v6 = *(unsigned int *)(v5 + 8);
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, uint64_t))off_1E3282918[v6])(&v16, v5);
      *(_DWORD *)(v5 + 8) = -1;
      v7 = *(WTF::StringImpl **)(v5 - 8);
      *(_QWORD *)(v5 - 8) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 += 24;
      v4 -= 24;
    }
    while (v4);
  }
  v8 = (WTF *)*((_QWORD *)this + 3);
  if (v8)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    v10 = (uint64_t *)(v9 - 16);
    v11 = *(_QWORD *)(((v9 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v12 = *(uint64_t **)(v9 - 8);
    if (v12)
    {
      v13 = *v10;
      *v12 = *v10;
      *(_QWORD *)(v13 + 8) = v12;
      *v10 = 0;
      v10[1] = 0;
    }
    *v10 = *(_QWORD *)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;
    *((_QWORD *)this + 2) = 0;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore25GPUShaderModuleDescriptorENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::GPUShaderModuleDescriptor *this)
{
  WebCore::GPUShaderModuleDescriptor::~GPUShaderModuleDescriptor(this, this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore18GPUComputePipelineENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore18GPUComputePipelineENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore28GPUComputePipelineDescriptorENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::GPUComputePipelineDescriptor *this)
{
  WebCore::GPUComputePipelineDescriptor::~GPUComputePipelineDescriptor(this, this);
}

uint64_t WebCore::GPURenderPipelineDescriptor::GPURenderPipelineDescriptor(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = -1;
  v5 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t *))off_1E3282928[v5])(&v18, a1 + 8, a2 + 1);
    *(_DWORD *)(a1 + 16) = v5;
  }
  v6 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v7 = a2[4];
    a2[4] = 0;
    *(_QWORD *)(a1 + 32) = v7;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v8 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(a1 + 48) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = 0;
  *(_DWORD *)(a1 + 56) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = 0;
  *(_DWORD *)(a1 + 60) = v8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v9 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(a1 + 64) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = 0;
  *(_DWORD *)(a1 + 72) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = 0;
  *(_DWORD *)(a1 + 76) = v9;
  *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
  v10 = *((_OWORD *)a2 + 6);
  v11 = *((_OWORD *)a2 + 7);
  v12 = *((_OWORD *)a2 + 8);
  *(_QWORD *)(a1 + 141) = *(uint64_t *)((char *)a2 + 141);
  *(_OWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 128) = v12;
  *(_OWORD *)(a1 + 96) = v10;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  if (*((_BYTE *)a2 + 208))
  {
    v13 = a2[19];
    a2[19] = 0;
    *(_QWORD *)(a1 + 152) = v13;
    *(_BYTE *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 168) = 0;
    if (*((_BYTE *)a2 + 168))
    {
      v14 = a2[20];
      a2[20] = 0;
      *(_QWORD *)(a1 + 160) = v14;
      *(_BYTE *)(a1 + 168) = 1;
    }
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    v15 = a2[22];
    a2[22] = 0;
    *(_QWORD *)(a1 + 176) = v15;
    LODWORD(v15) = *((_DWORD *)a2 + 46);
    *((_DWORD *)a2 + 46) = 0;
    *(_DWORD *)(a1 + 184) = v15;
    LODWORD(v15) = *((_DWORD *)a2 + 47);
    *((_DWORD *)a2 + 47) = 0;
    *(_DWORD *)(a1 + 188) = v15;
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 200) = 0;
    v16 = a2[24];
    a2[24] = 0;
    *(_QWORD *)(a1 + 192) = v16;
    LODWORD(v16) = *((_DWORD *)a2 + 50);
    *((_DWORD *)a2 + 50) = 0;
    *(_DWORD *)(a1 + 200) = v16;
    LODWORD(v16) = *((_DWORD *)a2 + 51);
    *((_DWORD *)a2 + 51) = 0;
    *(_DWORD *)(a1 + 204) = v16;
    *(_BYTE *)(a1 + 208) = 1;
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore17GPURenderPipelineENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore17GPURenderPipelineENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::GPUVertexState::~GPUVertexState(WebCore::GPUVertexState *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  char *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  WTF::StringImpl *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v3 = *((unsigned int *)this + 13);
  v4 = (WTF *)*((_QWORD *)this + 5);
  if ((_DWORD)v3)
  {
    v5 = 40 * v3;
    v6 = (char *)v4 + 16;
    do
    {
      if (v6[16])
      {
        v7 = *(WTF **)v6;
        if (*(_QWORD *)v6)
        {
          *(_QWORD *)v6 = 0;
          *((_DWORD *)v6 + 2) = 0;
          WTF::fastFree(v7, a2);
        }
      }
      v6 += 40;
      v5 -= 40;
    }
    while (v5);
    v4 = (WTF *)*((_QWORD *)this + 5);
  }
  if (v4)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v4, a2);
  }
  v8 = *((unsigned int *)this + 9);
  if ((_DWORD)v8)
  {
    v9 = (WTF::StringImpl **)*((_QWORD *)this + 3);
    v10 = 16 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      v9 += 2;
      v10 -= 16;
    }
    while (v10);
  }
  v12 = (WTF *)*((_QWORD *)this + 3);
  if (v12)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v12, a2);
  }
  if (*((_BYTE *)this + 16))
  {
    v13 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  v14 = *(unsigned int **)this;
  *(_QWORD *)this = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27GPURenderPipelineDescriptorENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *result;
  char v6;

  if (*((_BYTE *)a2 + 208))
    WebCore::GPUFragmentState::~GPUFragmentState((WebCore::GPUFragmentState *)(a2 + 19), a2);
  WebCore::GPUVertexState::~GPUVertexState((WebCore::GPUVertexState *)(a2 + 3), a2);
  v4 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _QWORD *))off_1E3282918[v4])(&v6, a2 + 1);
  *((_DWORD *)a2 + 4) = -1;
  result = (WTF::StringImpl *)*a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore17GPUCommandEncoderENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore17GPUCommandEncoderENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27GPUCommandEncoderDescriptorENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore22GPURenderBundleEncoderENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore22GPURenderBundleEncoderENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore32GPURenderBundleEncoderDescriptorENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  WTF *v3;
  WTF::StringImpl *result;

  v3 = (WTF *)a2[1];
  if (v3)
  {
    a2[1] = 0;
    *((_DWORD *)a2 + 4) = 0;
    WTF::fastFree(v3, a2);
  }
  result = (WTF::StringImpl *)*a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11GPUQuerySetENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **result;

  result = *(WTF::StringImpl ***)a2;
  *(_QWORD *)a2 = 0;
  if (result)
    return WTF::RefCounted<WebCore::GPUQuerySet>::deref(result, a2);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11GPUQuerySetENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore21GPUQuerySetDescriptorENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18GPUQueueDescriptorENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_12KeyValuePairINS8_6StringEyEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *(WTF::StringImpl ***)a2;
    v5 = 16 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore14GPUFeatureNameELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16HTMLVideoElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_19WebCodecsVideoFrameENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOSZ_EEEDcSR_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1E3282DA8[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16HTMLVideoElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_19WebCodecsVideoFrameENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOSZ_EEEDcSR_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E3282DA8[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore16HTMLVideoElementENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_19WebCodecsVideoFrameENSD_ISI_EENSF_ISI_EEEEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSM_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3282DA8[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS_8optionalIN7WebCore19GPUColorTargetStateEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void WebCore::GPUFragmentState::~GPUFragmentState(WebCore::GPUFragmentState *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF *v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((unsigned int *)this + 9);
  if ((_DWORD)v4)
  {
    v5 = (WTF::StringImpl **)*((_QWORD *)this + 3);
    v6 = 16 * v4;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  v8 = (WTF *)*((_QWORD *)this + 3);
  if (v8)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v8, a2);
  }
  if (*((_BYTE *)this + 16))
  {
    v9 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  v10 = *(unsigned int **)this;
  *(_QWORD *)this = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15GPUOrigin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15GPUOrigin2DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15GPUOrigin2DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15GPUOrigin2DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOST_EEEDcSL_DpT0_(WTF *result, _DWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1E3283060[v5])(&v9, v4);
LABEL_7:
    *(_DWORD *)(v4 + 16) = -1;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    LODWORD(v8) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    *(_DWORD *)(v4 + 8) = v8;
    LODWORD(v8) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    *(_QWORD *)(v4 + 12) = v8;
    return result;
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  a2[2] = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  a2[3] = v7;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15GPUOrigin2DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOST_EEEDcSL_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3283060[v5])(&v6, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6VectorIjLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEN7WebCore15GPUOrigin2DDictEEEENSE_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3283060[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLVideoElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_17HTMLCanvasElementENSC_IS11_EENSE_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS16_1EJSG_SK_SO_SS_SW_S10_S14_EEEEEEDcS18_DpT0_(uint64_t a1, bmalloc::api **a2)
{
  bmalloc::api *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t result;
  uint64_t v12;

  v2 = *a2;
  *a2 = 0;
  if (!v2)
    return result;
  if (*((_DWORD *)v2 + 2) != 1)
  {
    --*((_DWORD *)v2 + 2);
    return result;
  }
  v3 = *((_QWORD *)v2 + 2);
  *((_QWORD *)v2 + 2) = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v4);
LABEL_10:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v12 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v12 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_17:
        if (!v7)
        {
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        goto LABEL_22;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_17;
  }
LABEL_22:
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
    *(_QWORD *)v2 = 0;
  }
  return bmalloc::api::isoDeallocate(v2, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLVideoElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_17HTMLCanvasElementENSC_IS11_EENSE_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS16_1EJSG_SK_SO_SS_SW_S10_S14_EEEEEEDcS18_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (*v3 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*v3;
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLVideoElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_17HTMLCanvasElementENSC_IS11_EENSE_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS16_1EJSG_SK_SO_SS_SW_S10_S14_EEEEEEDcS18_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLVideoElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_17HTMLCanvasElementENSC_IS11_EENSE_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS16_1EJSG_SK_SO_SS_SW_S10_S14_EEEEEEDcS18_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLVideoElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_17HTMLCanvasElementENSC_IS11_EENSE_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS16_1EJSG_SK_SO_SS_SW_S10_S14_EEEEEEDcS18_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

WebCore::OffscreenCanvas *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLVideoElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_17HTMLCanvasElementENSC_IS11_EENSE_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS16_1EJSG_SK_SO_SS_SW_S10_S14_EEEEEEDcS18_DpT0_(uint64_t a1, WebCore::OffscreenCanvas **a2)
{
  WebCore::OffscreenCanvas *result;
  bmalloc::api *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
    {
      WebCore::OffscreenCanvas::~OffscreenCanvas(result);
      return (WebCore::OffscreenCanvas *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)result + 6);
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLVideoElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_17HTMLCanvasElementENSC_IS11_EENSE_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS16_1EJSG_SK_SO_SS_SW_S10_S14_EEEEEEDcS18_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLVideoElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_17HTMLCanvasElementENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLVideoElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_17HTMLCanvasElementENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLVideoElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_17HTMLCanvasElementENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLVideoElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_17HTMLCanvasElementENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLVideoElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_17HTMLCanvasElementENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLVideoElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_17HTMLCanvasElementENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLVideoElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_17HTMLCanvasElementENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLVideoElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_17HTMLCanvasElementENSC_IS11_EENSE_IS11_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS15_LNS0_6_TraitE1EEEEEvOT_EUlRS1B_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1J_EEEDcS1B_DpT0_(uint64_t result, bmalloc::api **a2, bmalloc::api **a3)
{
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  bmalloc::api *v7;
  bmalloc::api *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  char v18;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E32830A0[v5])(&v18, v4);
LABEL_7:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (!v7)
    return result;
  if (*((_DWORD *)v7 + 2) != 1)
  {
    --*((_DWORD *)v7 + 2);
    return result;
  }
  v9 = *((_QWORD *)v7 + 2);
  *((_QWORD *)v7 + 2) = 0;
  if (!v9)
    goto LABEL_26;
  v10 = *(_QWORD *)(v9 + 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v10);
LABEL_14:
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v12 - 1;
  *(_QWORD *)(v10 + 8) = v12 - 1;
  if (v12 == 1)
  {
    v17 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v15 = v17 != 0;
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)v10);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_20;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
LABEL_20:
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
  if (!v13)
  {
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (!v15)
      WTF::fastFree((WTF *)v10, a2);
  }
LABEL_26:
  if (*(_QWORD *)v7)
  {
    *(_QWORD *)(*(_QWORD *)v7 + 8) = 3;
    *(_QWORD *)v7 = 0;
  }
  return bmalloc::api::isoDeallocate(v7, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLVideoElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_17HTMLCanvasElementENSC_IS11_EENSE_IS11_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS15_LNS0_6_TraitE1EEEEEvOT_EUlRS1B_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1J_EEEDcS1B_DpT0_(uint64_t result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  _DWORD *v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E32830A0[v5])(&v10, v4);
LABEL_7:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      v9 = (_DWORD *)*((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 2) = 0;
      if (v9)
      {
        if (*v9 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*v9;
      }
      return WTF::fastFree(v7, a2);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLVideoElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_17HTMLCanvasElementENSC_IS11_EENSE_IS11_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS15_LNS0_6_TraitE1EEEEEvOT_EUlRS1B_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1J_EEEDcS1B_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 2)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1E32830A0[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLVideoElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_17HTMLCanvasElementENSC_IS11_EENSE_IS11_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS15_LNS0_6_TraitE1EEEEEvOT_EUlRS1B_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1J_EEEDcS1B_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 3)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1E32830A0[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 3;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLVideoElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_17HTMLCanvasElementENSC_IS11_EENSE_IS11_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS15_LNS0_6_TraitE1EEEEEvOT_EUlRS1B_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1J_EEEDcS1B_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 4)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E32830A0[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 4;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

WebCore::OffscreenCanvas *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLVideoElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_17HTMLCanvasElementENSC_IS11_EENSE_IS11_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS15_LNS0_6_TraitE1EEEEEvOT_EUlRS1B_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1J_EEEDcS1B_DpT0_(WebCore::OffscreenCanvas *result, WebCore::OffscreenCanvas **a2, WebCore::OffscreenCanvas **a3)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::OffscreenCanvas *v6;
  WebCore::OffscreenCanvas *v7;
  bmalloc::api *v8;
  void *v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 5)
  {
    result = (WebCore::OffscreenCanvas *)((uint64_t (*)(char *, uint64_t))off_1E32830A0[v5])(&v10, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 5;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
    {
      WebCore::OffscreenCanvas::~OffscreenCanvas(result);
      return (WebCore::OffscreenCanvas *)bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)result + 6);
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLVideoElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_17HTMLCanvasElementENSC_IS11_EENSE_IS11_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS15_LNS0_6_TraitE1EEEEEvOT_EUlRS1B_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1J_EEEDcS1B_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 6)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1E32830A0[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 6;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_9ImageDataENSD_ISI_EENSF_ISI_EEEENSA_INSB_16HTMLImageElementENSD_ISM_EENSF_ISM_EEEENSA_INSB_16HTMLVideoElementENSD_ISQ_EENSF_ISQ_EEEENSA_INSB_19WebCodecsVideoFrameENSD_ISU_EENSF_ISU_EEEENSA_INSB_15OffscreenCanvasENSD_ISY_EENSF_ISY_EEEENSA_INSB_17HTMLCanvasElementENSD_IS12_EENSF_IS12_EEEEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS19_1EJS16_S17_EEEEEEDcS1B_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E32830A0[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15GPUOrigin3DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOST_EEEDcSL_DpT0_(WTF *result, _DWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1E3283158[v5])(&v9, v4);
LABEL_7:
    *(_DWORD *)(v4 + 16) = -1;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    LODWORD(v8) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    *(_DWORD *)(v4 + 8) = v8;
    LODWORD(v8) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    *(_QWORD *)(v4 + 12) = v8;
    return result;
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  a2[2] = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  a2[3] = v7;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15GPUOrigin3DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOST_EEEDcSL_DpT0_(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *a3;
      *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = v6;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3283158[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  v7 = *a3;
  *(_DWORD *)(v4 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6VectorIjLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEN7WebCore15GPUOrigin3DDictEEEENSE_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3283158[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore18GPUBindGroupLayoutENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WTF::Ref<WebCore::GPUBindGroupLayout,WTF::RawPtrTraits<WebCore::GPUBindGroupLayout>,WTF::DefaultRefDerefTraits<WebCore::GPUBindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

uint64_t WebCore::jsGPUQuerySetPrototypeFunction_destroy(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "GPUQuerySet", "destroy");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSGPUQuerySet::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSGPUQuerySet::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "GPUQuerySet", "destroy");
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 24) + 16) + 16))(*(_QWORD *)(*(_QWORD *)(v3 + 24)
                                                                                                 + 16));
  return 10;
}

uint64_t WebCore::jsGPUQueuePrototypeFunction_submit(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  JSValue v14;
  int i;
  unsigned int v16;
  uint64_t IndexQuickly;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  WTF *v34;
  WTF *v35;
  WTF *v36;
  _DWORD *v37;
  JSValue v39;
  void *v40;
  uint64_t v41;
  WTF *v42;
  WTF *v43;
  _DWORD *v44;
  uint64_t v45;
  WTF::StringImpl *v46[2];
  int v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;

  v4 = *((_QWORD *)this + 7);
  v45 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v45, "GPUQueue", "submit");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPUQueue::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPUQueue::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v45, "GPUQueue", "submit");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v39.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException((JSC::VM *)v4, this, v39);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v48 = v4;
  if ((v12 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v12 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v19 = v46[0];
    v46[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = 0;
    v21 = 1;
    v47 = 1;
    goto LABEL_32;
  }
  v49 = 0;
  v50 = 0;
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v16 = (*(_BYTE *)(v12 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v12 + 8) - 8) : 0;
      if (i - 1 >= v16)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v12, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)v12, this, (i - 1));
      if (*(_DWORD *)(v4 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
        if ((result & 1) != 0)
          break;
      }
      result = (uint64_t)WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::GPUCommandBuffer>>::convert((char *)this, IndexQuickly, (uint64_t)&v49);
      if (*(_QWORD *)(v4 + 16))
      {
        v25 = JSC::JSArrayIterator::create();
        v26 = i | 0xFFFE000000000000;
        if (i < 0)
          v26 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v25 + 16) = v26;
        goto LABEL_48;
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(this, (JSC::JSGlobalObject *)v12, v14);
    if (!*(_DWORD *)(v4 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v4 + 16) || result == 6)
          break;
        v23 = JSC::iteratorValue();
        if (*(_DWORD *)(v4 + 80))
        {
          v24 = v23;
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
          v23 = v24;
          if ((result & 1) != 0)
            break;
        }
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::GPUCommandBuffer>>::convert((char *)this, v23, (uint64_t)&v49);
        if (*(_QWORD *)(v4 + 16))
        {
LABEL_48:
          result = JSC::iteratorClose();
          break;
        }
      }
    }
  }
  if (!*(_DWORD *)(v4 + 80))
  {
    v27 = v49;
    goto LABEL_51;
  }
  result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
  v27 = v49;
  if ((_DWORD)result)
  {
    v47 = 1;
    if (HIDWORD(v50))
    {
      v41 = 8 * HIDWORD(v50);
      v42 = v49;
      do
      {
        v43 = *(WTF **)v42;
        *(_QWORD *)v42 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 1)
          {
            v44 = (_DWORD *)*((_QWORD *)v43 + 1);
            *((_QWORD *)v43 + 1) = 0;
            if (v44)
            {
              if (v44[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 8))(v44);
              else
                --v44[2];
            }
            WTF::fastFree(v43, v40);
          }
          else
          {
            --*(_DWORD *)v43;
          }
        }
        v42 = (WTF *)((char *)v42 + 8);
        v41 -= 8;
      }
      while (v41);
    }
    if (v27)
      WTF::fastFree(v27, v40);
    v20 = 0;
    v21 = 1;
LABEL_32:
    ((void (*)(WTF **, WTF::StringImpl **))off_1E32835E0[v21])(&v49, v46);
    return v20;
  }
LABEL_51:
  v28 = HIDWORD(v50);
  v47 = 0;
  v46[0] = 0;
  v46[1] = 0;
  v49 = 0;
  v50 = 0;
  v29 = 8 * v28;
  if (!(_DWORD)v28)
    goto LABEL_56;
  if (!(v28 >> 29))
  {
    v30 = (WTF *)WTF::fastMalloc((WTF *)(8 * v28));
    v31 = 0;
    LODWORD(v50) = v28;
    v49 = v30;
    v32 = 8 * v28;
    do
    {
      *((_QWORD *)v30 + v31) = *(_QWORD *)(*((_QWORD *)v27 + v31) + 8);
      ++v31;
      v32 -= 8;
    }
    while (v32);
    HIDWORD(v50) = v31;
LABEL_56:
    (*(void (**)(_QWORD, WTF **))(**(_QWORD **)(v11 + 8) + 16))(*(_QWORD *)(v11 + 8), &v49);
    v34 = v49;
    if (v49)
    {
      v49 = 0;
      LODWORD(v50) = 0;
      WTF::fastFree(v34, v33);
    }
    if ((_DWORD)v28)
    {
      v35 = v27;
      do
      {
        v36 = *(WTF **)v35;
        *(_QWORD *)v35 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 1)
          {
            v37 = (_DWORD *)*((_QWORD *)v36 + 1);
            *((_QWORD *)v36 + 1) = 0;
            if (v37)
            {
              if (v37[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 8))(v37);
              else
                --v37[2];
            }
            WTF::fastFree(v36, v33);
          }
          else
          {
            --*(_DWORD *)v36;
          }
        }
        v35 = (WTF *)((char *)v35 + 8);
        v29 -= 8;
      }
      while (v29);
    }
    if (v27)
    {
      WTF::fastFree(v27, v33);
      v21 = v47;
      v20 = 10;
      if (v47 == -1)
        return v20;
    }
    else
    {
      v21 = 0;
      v20 = 10;
    }
    goto LABEL_32;
  }
  __break(0xC471u);
  return result;
}

unint64_t WebCore::jsGPUQueuePrototypeFunction_onSubmittedWorkDone(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  WebCore::DOMGuardedObject *v24;
  WebCore::DOMGuardedObject *v25;
  void (*v26)(void);
  uint64_t v27;
  objc_class *v29;
  WebCore::DOMGuardedObject *v30;
  WebCore::DOMGuardedObject *v31;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194B7B42CLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_31;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSGPUQueue::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSGPUQueue::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_31:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"GPUQueue", "onSubmittedWorkDone", v16);
    if (*((_DWORD *)v14 + 4) != 1)
    {
      --*((_DWORD *)v14 + 4);
      goto LABEL_28;
    }
    v26 = *(void (**)(void))(*(_QWORD *)v14 + 16);
    goto LABEL_27;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8);
  v24 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v24 = &off_1E334EF70;
  *((_QWORD *)v24 + 1) = v14;
  v31 = v24;
  (*(void (**)(uint64_t, WebCore::DOMGuardedObject **))(*(_QWORD *)v23 + 24))(v23, &v31);
  v25 = v31;
  v31 = 0;
  if (v25)
  {
    v26 = *(void (**)(void))(*(_QWORD *)v25 + 8);
LABEL_27:
    v26();
  }
LABEL_28:
  v27 = *(_QWORD *)(v10 + 16);
  if (v27)
  {
    if (*(_QWORD *)(v10 + 24) != v27)
    {
      v29 = *(objc_class **)(v27 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v31);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v31, v29, 0);
      v30 = v31;
      v31 = 0;
      if (v30)
      {
        if (*((_DWORD *)v30 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v30 + 16))(v30);
        else
          --*((_DWORD *)v30 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

_BYTE *WebCore::jsGPUQueuePrototypeFunction_writeBuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t (*v36)();
  JSC::VM *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  JSValue v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  JSValue v47;
  WTF::StringImpl *v48;
  WebCore *v49;
  JSC::JSGlobalObject *v50;
  JSC::CallFrame *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  JSC::VM *v55;
  uint64_t v56;
  int v57;
  int v58[2];
  WTF::StringImpl *v59;
  char v60;
  char v61[8];
  int v62;
  char v63[8];
  WTF::StringImpl *v64;
  char v65;
  JSC::VM *v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v55 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v55, "GPUQueue", "writeBuffer");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSGPUQueue::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSGPUQueue::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v55, "GPUQueue", "writeBuffer");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v44.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v44);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v66 = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSGPUBuffer::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSGPUBuffer::s_info && v21 != 0);
  }
  if (!v20 || (v25 = *(_QWORD *)(v18 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v66, 0, "buffer", 7, "GPUQueue", 9, a8, "writeBuffer", 12, "GPUBuffer", 10);
    return 0;
  }
  WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, *((_QWORD *)a2 + 7), (uint64_t)&v56);
  if (v57)
    return 0;
  WebCore::convert<WebCore::IDLAllowSharedAdaptor<WebCore::IDLUnion<WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer>>>(*((_QWORD *)a2 + 8), (uint64_t)this, (uint64_t)&v66);
  v26 = v69;
  if (v69)
  {
    v24 = 0;
LABEL_54:
    if (v26 != -1)
      ((void (*)(int *, uint64_t *))off_1E3283610[v26])(v58, &v67);
    return (_BYTE *)v24;
  }
  v27 = *((int *)a2 + 8);
  if ((unint64_t)(v27 - 5) > 0xFFFFFFFFFFFFFFFBLL)
  {
    v28 = 0;
    v29 = 0;
  }
  else if (*((_QWORD *)a2 + 9) == 10)
  {
    v28 = 0;
    v29 = 0;
  }
  else
  {
    WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, *((_QWORD *)a2 + 9), (uint64_t)v58);
    if ((_DWORD)v59)
    {
      v24 = 0;
LABEL_53:
      v26 = v69;
      goto LABEL_54;
    }
    v29 = *(_QWORD *)v58;
    v27 = *((int *)a2 + 8);
    v28 = 1;
  }
  if ((unint64_t)(v27 - 6) > 0xFFFFFFFFFFFFFFFALL)
  {
    v31 = 0;
    v32 = 0;
  }
  else
  {
    v30 = *((_QWORD *)a2 + 10);
    if (v30 == 10)
    {
      v31 = 0;
      v32 = 0;
    }
    else
    {
      v54 = v28;
      v33 = v29;
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, v30, (uint64_t)v58);
      if ((_DWORD)v59)
      {
LABEL_40:
        v24 = 0;
        goto LABEL_53;
      }
      v31 = *(_QWORD *)v58;
      v32 = 1;
      v29 = v33;
      v28 = v54;
    }
  }
  if (!v57)
  {
    v53 = v17;
    if (!v69)
    {
      v34 = v56;
      v61[0] = 0;
      v62 = -1;
      v35 = v68;
      if (v68 == -1)
      {
        v63[0] = 0;
        LODWORD(v64) = -1;
      }
      else
      {
        v52 = v56;
        v36 = off_1E3283600[v68];
        v37 = v9;
        v38 = v25;
        v39 = v29;
        v40 = v31;
        v41 = v32;
        ((void (*)(int *, char *, uint64_t *))v36)(v58, v61, &v67);
        v62 = v35;
        v63[0] = 0;
        LODWORD(v64) = -1;
        ((void (*)(int *, char *, char *))v36)(v58, v63, v61);
        v34 = v52;
        v32 = v41;
        v31 = v40;
        v29 = v39;
        v25 = v38;
        v9 = v37;
        LODWORD(v64) = v35;
      }
      WebCore::GPUQueue::writeBuffer(v53, v25, v34, (uint64_t)v63, v29, v28, v31, v32, (uint64_t)v58);
      if ((_DWORD)v64 != -1)
        ((void (*)(char *, char *))off_1E32835F0[v64])(&v65, v63);
      LODWORD(v64) = -1;
      if (v62 != -1)
        ((void (*)(char *, char *))off_1E32835F0[v62])(&v65, v61);
      if (!v60)
      {
        v24 = 10;
        goto LABEL_53;
      }
      v45 = (WTF::StringImpl *)LOBYTE(v58[0]);
      v63[0] = v58[0];
      v46 = v59;
      v59 = 0;
      v64 = v46;
      if (!*((_QWORD *)v9 + 2))
      {
        v47.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v58[0]), (JSC::JSGlobalObject *)&v64);
        JSC::VM::throwException(v9, this, v47);
        v46 = v64;
      }
      v64 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
          WTF::StringImpl::destroy(v46, v45);
        else
          *(_DWORD *)v46 -= 2;
      }
      if (v60)
      {
        v48 = v59;
        v59 = 0;
        if (v48)
        {
          if (*(_DWORD *)v48 != 2)
          {
            v24 = 0;
            *(_DWORD *)v48 -= 2;
            goto LABEL_53;
          }
          WTF::StringImpl::destroy(v48, v45);
        }
        v24 = 0;
        goto LABEL_53;
      }
      goto LABEL_40;
    }
  }
  v49 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsGPUQueuePrototypeFunction_writeTexture(v49, v50, v51);
}

_BYTE *WebCore::jsGPUQueuePrototypeFunction_writeTexture(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WTF **v12;
  int v13;
  JSC::JSObject *v14;
  int v15;
  JSC::JSCell *v16;
  JSC::VM *v17;
  unint64_t v18;
  char v19;
  int v20;
  int v21;
  uint64_t Object;
  JSC::Structure *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t (*v39)();
  int v40;
  void *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  JSValue v48;
  unsigned int v49;
  char v50;
  WTF **v51;
  unsigned __int8 v52;
  JSC::VM *v53;
  __int16 v54;
  char v55;
  __int16 v56;
  char v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  char v62;
  char v63;
  int v64;
  __int16 v65;
  char v66;
  int v67;
  JSC::VM *v68;
  int v69;
  char v70;
  __int16 v71;
  char v72;
  int v73;
  char v74;
  __int16 v75;
  char v76;
  char v77[8];
  int v78;
  __int16 v79;
  char v80;
  int v81;
  unint64_t v82;
  int v83;
  _BYTE v84[16];
  int v85;
  char v86;
  char v87;
  char v88;
  unint64_t v89;
  _BYTE v90[16];
  int v91;
  int v92;
  char v93[8];
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v53 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v53, "GPUQueue", "writeTexture");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSGPUQueue::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSGPUQueue::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v53, "GPUQueue", "writeTexture");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 3)
  {
    v48.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v48);
  }
  v12 = *(WTF ***)(v5 + 24);
  WebCore::convertDictionary<WebCore::GPUImageCopyTexture>(*((JSC::JSCell **)a2 + 6), (JSC::VM **)this, (uint64_t)&v58);
  v13 = v64;
  if (!v64)
  {
    WebCore::convert<WebCore::IDLAllowSharedAdaptor<WebCore::IDLUnion<WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer>>>(*((_QWORD *)a2 + 7), (uint64_t)this, (uint64_t)v93);
    v15 = v96;
    if (v96)
    {
      v45 = 0;
      goto LABEL_74;
    }
    v16 = (JSC::JSCell *)*((_QWORD *)a2 + 8);
    v17 = (JSC::VM *)*((_QWORD *)this + 7);
    v68 = v17;
    v51 = v12;
    if (((unint64_t)v16 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v52 = 0;
      v50 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v49 = 2;
LABEL_43:
      v56 = v65;
      v57 = v66;
      v54 = v79;
      v55 = v80;
      WebCore::Converter<WebCore::IDLUnion<WebCore::IDLSequence<WebCore::IDLEnforceRangeAdaptor<WebCore::IDLUnsignedLong>>,WebCore::IDLDictionary<WebCore::GPUExtent3DDict>>>::convert(*((_QWORD *)a2 + 9), this, v14, (uint64_t)&v89);
      v34 = v92;
      if (v92)
      {
        v45 = 0;
      }
      else
      {
        if (v64)
          goto LABEL_97;
        v35 = v58;
        v58 = 0;
        v82 = v35;
        v83 = v59;
        v84[0] = 0;
        v86 = 0;
        if (v62)
        {
          v85 = -1;
          v36 = v61;
          if (v61 != -1)
          {
            ((void (*)(JSC::VM **, _BYTE *, uint64_t *))off_1E3283168[v61])(&v68, v84, &v60);
            v85 = v36;
          }
          v86 = 1;
        }
        v87 = v63;
        if (v96)
          goto LABEL_97;
        v37 = v21 | v20;
        v77[0] = 0;
        v78 = -1;
        v38 = v95;
        if (v95 == -1)
        {
          LOBYTE(v79) = 0;
          v81 = -1;
        }
        else
        {
          v39 = off_1E3283600[v95];
          ((void (*)(JSC::VM **, char *, uint64_t *))v39)(&v68, v77, &v94);
          v78 = v38;
          LOBYTE(v79) = 0;
          v81 = -1;
          ((void (*)(JSC::VM **, __int16 *, char *))v39)(&v68, &v79, v77);
          v81 = v38;
        }
        v68 = (JSC::VM *)v18;
        v69 = v52 | (v49 << 8);
        v70 = v50;
        v71 = v56;
        v72 = v57;
        v73 = v37;
        v74 = v19;
        v75 = v54;
        v76 = v55;
        if (v92)
LABEL_97:
          std::__throw_bad_variant_access[abi:sn180100]();
        LOBYTE(v65) = 0;
        v67 = -1;
        v40 = v91;
        if (v91 != -1)
        {
          ((void (*)(char *, __int16 *, _BYTE *))off_1E3282D58[v91])(&v88, &v65, v90);
          v67 = v40;
        }
        WebCore::GPUQueue::writeTexture(v51, (unsigned int *)&v82, (uint64_t)&v79, (uint64_t)&v68, (uint64_t)&v65);
        if (v67 != -1)
          ((void (*)(char *, __int16 *))off_1E3282D48[v67])(&v88, &v65);
        if (v81 != -1)
          ((void (*)(JSC::VM **, __int16 *))off_1E32835F0[v81])(&v68, &v79);
        v81 = -1;
        if (v78 != -1)
          ((void (*)(JSC::VM **, char *))off_1E32835F0[v78])(&v68, v77);
        if (v86)
        {
          if (v85 != -1)
            ((void (*)(JSC::VM **, _BYTE *))off_1E3283158[v85])(&v68, v84);
          v85 = -1;
        }
        v42 = (unsigned int *)v82;
        v82 = 0;
        if (v42)
        {
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            atomic_store(1u, v42);
            WTF::fastFree((WTF *)v42, v41);
          }
        }
        v34 = v92;
        v45 = 10;
      }
      if (v34 != -1)
        ((void (*)(unint64_t *, _BYTE *))off_1E3283630[v34])(&v82, v90);
      goto LABEL_73;
    }
    if (((unint64_t)v16 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v16)) == 0)
    {
      JSC::throwTypeError();
      goto LABEL_84;
    }
    v23 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v24 = (WTF::StringImpl *)v82;
    v26 = JSC::JSObject::get(v23, this, v82);
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v25);
      else
        *(_DWORD *)v24 -= 2;
    }
    v27 = *((_DWORD *)v17 + 20);
    if (v27 && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
      goto LABEL_84;
    if (v26 == 10)
    {
      v50 = 0;
      v52 = 0;
      v49 = v27;
    }
    else
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, v26, &v82);
      v52 = v82;
      if (HIDWORD(v82))
        goto LABEL_84;
      v49 = v82 >> 8;
      v50 = 1;
    }
    WTF::AtomStringImpl::addLiteral();
    v28 = (WTF::StringImpl *)v82;
    v30 = JSC::JSObject::get(v23, this, v82);
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v29);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
      goto LABEL_84;
    if (v30 == 10)
    {
      v18 = 0;
      v82 = 0;
      v83 = 0;
    }
    else
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, v30, (uint64_t)&v82);
      if (v83)
        goto LABEL_84;
      v18 = v82;
    }
    WTF::AtomStringImpl::addLiteral();
    v31 = (WTF::StringImpl *)v89;
    v33 = JSC::JSObject::get(v23, this, v89);
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v32);
      else
        *(_DWORD *)v31 -= 2;
    }
    if (!*((_DWORD *)v17 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) == 0)
    {
      if (v33 == 10)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        goto LABEL_43;
      }
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, v33, &v89);
      if (!HIDWORD(v89))
      {
        v21 = v89 & 0xFFFFFF00;
        v20 = v89;
        v19 = 1;
        goto LABEL_43;
      }
    }
LABEL_84:
    v45 = 0;
LABEL_73:
    v15 = v96;
LABEL_74:
    if (v15 != -1)
      ((void (*)(unint64_t *, uint64_t *))off_1E3283610[v15])(&v82, &v94);
    v13 = v64;
    goto LABEL_77;
  }
  v45 = 0;
LABEL_77:
  if (v13 != -1)
    ((void (*)(unint64_t *, unint64_t *))off_1E3283640[v13])(&v82, &v58);
  return (_BYTE *)v45;
}

uint64_t WebCore::jsGPUQueuePrototypeFunction_copyExternalImageToTexture(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  JSC::JSGlobalObject *v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  JSC::JSCell *v15;
  uint64_t Object;
  JSC::Structure *v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  BOOL v20;
  JSC::VM *v21;
  double v22;
  WTF::StringImpl *v23;
  JSC::JSObject *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t (*v31)();
  JSC::JSObject *v32;
  char v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  int v37;
  JSC::JSCell *v38;
  JSC::Structure *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  unsigned __int16 v43;
  JSC::JSGlobalObject *v44;
  char *v45;
  uint64_t v46;
  JSC::VM *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  unint64_t v50;
  int v51;
  WTF::StringImpl *v52;
  JSC::JSObject *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  int v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)();
  uint64_t v62;
  _BOOL4 v63;
  uint64_t v64;
  _BOOL4 v65;
  uint64_t v66;
  unint64_t v68;
  uint64_t v69;
  int v70;
  _BOOL4 v71;
  uint64_t v72;
  WTF::StringImpl *v74;
  _BOOL4 v75;
  uint64_t v76;
  unint64_t v78;
  int v79;
  int v80;
  int v81;
  int v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  unint64_t v93;
  int v94;
  int v95;
  void *v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v102;
  _BOOL4 v103;
  uint64_t v104;
  uint64_t v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  unint64_t v117;
  unsigned __int16 v118;
  JSC::VM *v119;
  WTF::StringImpl *v120;
  unint64_t v121;
  BOOL v122;
  JSC::VM *v123;
  double v124;
  unint64_t v125;
  int v126;
  _BOOL4 v127;
  uint64_t v128;
  unint64_t v130;
  _BOOL4 v131;
  uint64_t v132;
  unint64_t v134;
  JSC::VM *v135;
  int v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  JSValue v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  JSValue v147;
  WTF::StringImpl *v148;
  void *v149;
  WTF *v150;
  int v151;
  uint64_t v152;
  int *v153;
  int v154;
  BOOL v155;
  BOOL v156;
  int v157;
  uint64_t v158;
  int *v159;
  int v160;
  JSC::VM *v161;
  JSC::VM *v162;
  unint64_t v163;
  int v164;
  _DWORD v165[4];
  int v166;
  char v167;
  char v168;
  __int16 v169;
  int v170;
  int v171;
  WTF::StringImpl *v172;
  char v173;
  JSC::VM *v174[2];
  int v175;
  char v176;
  unint64_t *v177;
  _BYTE v178[16];
  int v179;
  int v180;
  WTF::StringImpl **v181;
  uint64_t v182;
  int v183;
  _BYTE v184[16];
  int v185;
  char v186;
  char v187;
  int v188;
  WTF::StringImpl *v189;
  int v190;
  char v191[8];
  unsigned int v192;
  int v193;
  char v194;
  char v195;
  __int16 v196;
  WTF::StringImpl *v197;
  unint64_t v198;
  unint64_t v199;
  unsigned int v200;
  int v201;
  char v202;
  _WORD v203[4];
  uint64_t v204;

  v204 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v162 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v162, "GPUQueue", "copyExternalImageToTexture");
  v6 = a2;
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSGPUQueue::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSGPUQueue::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v162, "GPUQueue", "copyExternalImageToTexture");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v144.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v144);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v13)
    return 10;
  v14 = (char *)v13;
  v15 = (JSC::JSCell *)*((_QWORD *)v6 + 6);
  v174[0] = *((JSC::VM **)this + 7);
  v161 = v4;
  if (((unint64_t)v15 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v163 = 0;
    v164 = 0;
    LOBYTE(v165[0]) = 0;
    v167 = 0;
    v168 = 0;
LABEL_71:
    WebCore::throwRequiredMemberTypeError((int)this, (int)v174, "source", 7, "GPUImageCopyExternalImage", 26, "(ImageBitmap or ImageData or HTMLImageElement or HTMLVideoElement or WebCodecsVideoFrame or OffscreenCanvas or HTMLCanvasElement)", 130);
LABEL_72:
    v188 = 1;
    goto LABEL_73;
  }
  if (((unint64_t)v15 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v15)) == 0)
  {
    JSC::throwTypeError();
    v100 = 0;
    v37 = 1;
    v188 = 1;
    goto LABEL_238;
  }
  v17 = (JSC::Structure *)Object;
  v163 = 0;
  v164 = 0;
  LOBYTE(v165[0]) = 0;
  v167 = 0;
  v168 = 0;
  WTF::AtomStringImpl::addLiteral();
  v19 = JSC::JSObject::get(v17, this, (unint64_t)v181);
  if (v181)
  {
    if (*(_DWORD *)v181 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v181, v18);
    else
      *(_DWORD *)v181 -= 2;
  }
  if (*((_DWORD *)v174[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v174[0]))
    goto LABEL_72;
  if (v19 == 10)
  {
    v20 = 0;
    goto LABEL_29;
  }
  v21 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v19 >= 0xFFFE000000000000)
  {
    v20 = (_DWORD)v19 != 0;
    goto LABEL_28;
  }
  *(_QWORD *)&v22 = v19 - 0x2000000000000;
  if (v19 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v22 <= 0.0)
    {
      v20 = v22 < 0.0;
      goto LABEL_28;
    }
    goto LABEL_399;
  }
  if ((v19 & 0xFFFE000000000002) != 0)
  {
    v20 = v19 == 7;
    goto LABEL_28;
  }
  v151 = *(unsigned __int8 *)(v19 + 5);
  if (v151 == 3)
  {
    v154 = *(_DWORD *)(v19 + 8);
LABEL_397:
    v155 = v154 == 0;
    goto LABEL_410;
  }
  if (v151 == 2)
  {
    v152 = *(_QWORD *)(v19 + 8);
    if ((v152 & 1) != 0)
      v153 = (int *)(v19 + 16);
    else
      v153 = (int *)(v152 + 4);
    v154 = *v153;
    goto LABEL_397;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0xA) & 1) == 0)
  {
LABEL_399:
    v20 = 1;
    goto LABEL_28;
  }
  v155 = *(_QWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_410:
  v20 = !v155;
LABEL_28:
  if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21))
    goto LABEL_72;
LABEL_29:
  v168 = v20;
  WTF::AtomStringImpl::addLiteral();
  v25 = JSC::JSObject::get(v17, this, (unint64_t)v181);
  if (v181)
  {
    if (*(_DWORD *)v181 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v181, v23);
    else
      *(_DWORD *)v181 -= 2;
  }
  if (*((_DWORD *)v174[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v174[0]))
    goto LABEL_72;
  if (v25 == 10)
  {
LABEL_66:
    WTF::AtomStringImpl::addLiteral();
    v34 = v197;
    v36 = JSC::JSObject::get(v17, this, (unint64_t)v197);
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v35);
      else
        *(_DWORD *)v34 -= 2;
    }
    if (*((_DWORD *)v174[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v174[0]))
      goto LABEL_72;
    if (v36 == 10)
      goto LABEL_71;
    v177 = (unint64_t *)*((_QWORD *)this + 7);
    if ((v36 & 0xFFFE000000000002) == 0)
    {
      v62 = *(unsigned int *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE) + 0x4C);
      v63 = *(_DWORD *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE) + 0x4C) != 0;
      v64 = 16 * v62;
      v65 = v63;
      if ((_DWORD)v62)
      {
        v65 = 1;
        if ((char **)v64 != &WebCore::JSImageBitmap::s_info)
        {
          v66 = 16 * v62;
          do
          {
            v66 = *(_QWORD *)(v66 + 16);
            v65 = v66 != 0;
          }
          while ((char **)v66 != &WebCore::JSImageBitmap::s_info && v66 != 0);
        }
      }
      if (v65)
      {
        v68 = *(_QWORD *)(v36 + 24);
        if (v68)
        {
          v69 = v12;
          v70 = 0;
          ++*(_DWORD *)(v68 + 8);
          v189 = (WTF::StringImpl *)v68;
          v190 = 0;
          goto LABEL_149;
        }
      }
      v71 = *(_DWORD *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE) + 0x4C) != 0;
      if ((_DWORD)v62)
      {
        v71 = *(_DWORD *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE) + 0x4C) != 0;
        if ((char **)v64 != &WebCore::JSImageData::s_info)
        {
          v72 = 16 * v62;
          do
          {
            v72 = *(_QWORD *)(v72 + 16);
            v71 = v72 != 0;
          }
          while ((char **)v72 != &WebCore::JSImageData::s_info && v72 != 0);
        }
      }
      if (v71)
      {
        v74 = *(WTF::StringImpl **)(v36 + 24);
        if (v74)
        {
          v69 = v12;
          ++*(_DWORD *)v74;
          v189 = v74;
          v70 = 1;
LABEL_148:
          v190 = v70;
LABEL_149:
          v191[0] = 1;
          LOBYTE(v198) = 0;
          LODWORD(v199) = -1;
          ((void (*)(int *, unint64_t *, WTF::StringImpl **))off_1E32830D8[v70])(&v171, &v198, &v189);
          LODWORD(v199) = v70;
          v200 = 0;
          if (!v191[0] || v190 == -1)
          {
            LOBYTE(v189) = 0;
            v190 = -1;
            goto LABEL_156;
          }
          ((void (*)(int *, WTF::StringImpl **))off_1E32830A0[v190])(&v171, &v189);
          v79 = v200;
          if (!v200)
          {
            v70 = v199;
            LOBYTE(v189) = 0;
            v190 = -1;
            if ((_DWORD)v199 == -1)
            {
              if (v164 == -1)
              {
                LOBYTE(v182) = 0;
                v183 = -1;
LABEL_161:
                v184[0] = 0;
                v186 = 0;
                v12 = v69;
                if (v167)
                {
                  v185 = -1;
                  v81 = v166;
                  if (v166 != -1)
                  {
                    ((void (*)(WTF::StringImpl **, _BYTE *, _DWORD *))off_1E3283070[v166])(&v189, v184, v165);
                    v185 = v81;
                  }
                  v186 = 1;
                }
                v187 = v168;
                v188 = 0;
                v79 = v200;
                goto LABEL_166;
              }
              ((void (*)(unint64_t **, unint64_t *))off_1E32830A0[v164])(&v177, &v163);
              v164 = -1;
LABEL_157:
              if (v190 != -1)
                ((void (*)(unint64_t **, WTF::StringImpl **))off_1E32830A0[v190])(&v177, &v189);
              v80 = v164;
              LOBYTE(v182) = 0;
              v183 = -1;
              if (v164 != -1)
              {
                ((void (*)(WTF::StringImpl **, uint64_t *, unint64_t *))off_1E32830D8[v164])(&v189, &v182, &v163);
                v183 = v80;
              }
              goto LABEL_161;
            }
LABEL_156:
            ((void (*)(unint64_t **, WTF::StringImpl **, unint64_t *))off_1E32830D8[v70])(&v177, &v189, &v198);
            v190 = v70;
            v177 = &v163;
            ((void (*)(unint64_t **, unint64_t *, WTF::StringImpl **))off_1E3283110[v70])(&v177, &v163, &v189);
            goto LABEL_157;
          }
          v12 = v69;
LABEL_330:
          v188 = 1;
LABEL_166:
          if (v79 != -1)
            ((void (*)(WTF::StringImpl **, unint64_t *))off_1E3283148[v79])(&v189, &v198);
          goto LABEL_73;
        }
      }
      v75 = *(_DWORD *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE) + 0x4C) != 0;
      if ((_DWORD)v62)
      {
        v75 = *(_DWORD *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE) + 0x4C) != 0;
        if ((char **)v64 != &WebCore::JSHTMLImageElement::s_info)
        {
          v76 = 16 * v62;
          do
          {
            v76 = *(_QWORD *)(v76 + 16);
            v75 = v76 != 0;
          }
          while ((char **)v76 != &WebCore::JSHTMLImageElement::s_info && v76 != 0);
        }
      }
      if (v75)
      {
        v78 = *(_QWORD *)(v36 + 24);
        if (v78)
        {
          v69 = v12;
          *(_DWORD *)(v78 + 24) += 2;
          v189 = (WTF::StringImpl *)v78;
          v70 = 2;
          goto LABEL_148;
        }
      }
      v127 = *(_DWORD *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE) + 0x4C) != 0;
      if ((_DWORD)v62)
      {
        v127 = *(_DWORD *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE) + 0x4C) != 0;
        if ((char **)v64 != &WebCore::JSHTMLVideoElement::s_info)
        {
          v128 = 16 * v62;
          do
          {
            v128 = *(_QWORD *)(v128 + 16);
            v127 = v128 != 0;
          }
          while ((char **)v128 != &WebCore::JSHTMLVideoElement::s_info && v128 != 0);
        }
      }
      if (v127)
      {
        v130 = *(_QWORD *)(v36 + 24);
        if (v130)
        {
          v69 = v12;
          *(_DWORD *)(v130 + 24) += 2;
          v189 = (WTF::StringImpl *)v130;
          v70 = 3;
          goto LABEL_148;
        }
      }
      v131 = *(_DWORD *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE) + 0x4C) != 0;
      if ((_DWORD)v62)
      {
        v131 = *(_DWORD *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE) + 0x4C) != 0;
        if ((char **)v64 != &WebCore::JSWebCodecsVideoFrame::s_info)
        {
          v132 = 16 * v62;
          do
          {
            v132 = *(_QWORD *)(v132 + 16);
            v131 = v132 != 0;
          }
          while ((char **)v132 != &WebCore::JSWebCodecsVideoFrame::s_info && v132 != 0);
        }
      }
      if (v131)
      {
        v134 = *(_QWORD *)(v36 + 24);
        if (v134)
        {
          v69 = v12;
          ++*(_DWORD *)(v134 + 16);
          v189 = (WTF::StringImpl *)v134;
          v70 = 4;
          goto LABEL_148;
        }
      }
      if ((_DWORD)v62 && (char **)v64 != &WebCore::JSOffscreenCanvas::s_info)
      {
        do
        {
          v64 = *(_QWORD *)(v64 + 16);
          v63 = v64 != 0;
        }
        while ((char **)v64 != &WebCore::JSOffscreenCanvas::s_info && v64 != 0);
      }
      if (v63)
      {
        v69 = v12;
        v142 = *(_QWORD *)(v36 + 24);
        ++*(_DWORD *)(v142 - 120);
        v189 = (WTF::StringImpl *)(v142 - 144);
        v70 = 5;
        goto LABEL_148;
      }
    }
    v140 = JSC::jsDynamicCast<WebCore::JSHTMLCanvasElement *>(v36);
    if (!v140 || (v141 = *(_QWORD *)(v140 + 24)) == 0)
    {
      JSC::throwTypeError();
      v79 = 1;
      v200 = 1;
      goto LABEL_330;
    }
    v69 = v12;
    *(_DWORD *)(v141 + 24) += 2;
    v189 = (WTF::StringImpl *)v141;
    v70 = 6;
    goto LABEL_148;
  }
  v26 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  v189 = v26;
  if ((v25 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    WebCore::convertDictionary<WebCore::GPUOrigin2DDict>((uint64_t)&v181, this, (JSC::JSCell *)v25);
    v27 = 1;
    if (!(_DWORD)v182)
    {
      v198 = (unint64_t)v181;
      v200 = 1;
      v27 = 0;
    }
    v201 = v27;
    goto LABEL_38;
  }
  if ((v25 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v25 + 5) < 0x17u)
  {
    JSC::throwTypeError();
LABEL_50:
    v27 = 1;
    v201 = 1;
    goto LABEL_51;
  }
  v32 = (JSC::JSObject *)JSC::iteratorMethod(this, (JSC::JSGlobalObject *)v25, v24);
  if (*((_DWORD *)v26 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v26) & 1) != 0)
    goto LABEL_50;
  if (v32 == (JSC::JSObject *)10)
  {
    WebCore::convertDictionary<WebCore::GPUOrigin2DDict>((uint64_t)&v181, this, (JSC::JSCell *)v25);
    v27 = 1;
    if (!(_DWORD)v182)
    {
      v198 = (unint64_t)v181;
      v200 = 1;
      v27 = 0;
    }
    v201 = v27;
  }
  else
  {
    v197 = 0;
    v198 = 0;
    v135 = (JSC::VM *)*((_QWORD *)this + 7);
    v181 = &v197;
    JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnforceRangeAdaptor<WebCore::IDLUnsignedLong>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,JSC::JSValue,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::JSValue)#1}>(this, v25, v32, (uint64_t *)&v181);
    if (*((_DWORD *)v135 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v135))
    {
      v150 = v197;
      v183 = 1;
      if (v197)
      {
        v197 = 0;
        LODWORD(v198) = 0;
        WTF::fastFree(v150, v149);
      }
      v136 = 1;
      v137 = 1;
    }
    else
    {
      v136 = 0;
      v137 = 0;
      v183 = 0;
      v138 = v198;
      v181 = 0;
      v182 = 0;
      v198 = (unint64_t)v197;
      v199 = v138;
      v200 = 0;
    }
    v201 = v136;
    ((void (*)(unint64_t **, WTF::StringImpl ***))off_1E3283620[v137])(&v177, &v181);
    v27 = v201;
  }
LABEL_38:
  if (v27)
  {
LABEL_51:
    v33 = 0;
    v188 = 1;
    goto LABEL_63;
  }
  LOBYTE(v181) = 0;
  v183 = -1;
  v28 = v200;
  if (v200 != -1)
  {
    v29 = v14;
    v30 = v12;
    v31 = off_1E3283070[v200];
    ((void (*)(WTF::StringImpl **, WTF::StringImpl ***, unint64_t *))v31)(&v189, &v181, &v198);
    v183 = v28;
    if (v167)
    {
      v189 = (WTF::StringImpl *)v165;
      ((void (*)(WTF::StringImpl **, _DWORD *, WTF::StringImpl ***))off_1E3283080[v28])(&v189, v165, &v181);
      v12 = v30;
      v14 = v29;
      goto LABEL_60;
    }
    LOBYTE(v165[0]) = 0;
    v166 = -1;
    ((void (*)(WTF::StringImpl **, _DWORD *, WTF::StringImpl ***))v31)(&v189, v165, &v181);
    v166 = v28;
    v12 = v30;
    v14 = v29;
    goto LABEL_59;
  }
  if (!v167)
  {
    LOBYTE(v165[0]) = 0;
    v166 = -1;
LABEL_59:
    v167 = 1;
LABEL_60:
    if (v183 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl ***))off_1E3283060[v183])(&v189, &v181);
    goto LABEL_62;
  }
  if (v166 != -1)
  {
    ((void (*)(WTF::StringImpl **, _DWORD *))off_1E3283060[v166])(&v189, v165);
    v166 = -1;
    goto LABEL_60;
  }
LABEL_62:
  v33 = 1;
  v27 = v201;
LABEL_63:
  if (v27 != -1)
    ((void (*)(WTF::StringImpl **, unint64_t *))off_1E3283090[v27])(&v189, &v198);
  if ((v33 & 1) != 0)
    goto LABEL_66;
LABEL_73:
  if (v167)
  {
    if (v166 != -1)
      ((void (*)(WTF::StringImpl **, _DWORD *))off_1E3283060[v166])(&v197, v165);
    v166 = -1;
  }
  if (v164 != -1)
    ((void (*)(WTF::StringImpl **, unint64_t *))off_1E32830A0[v164])(&v197, &v163);
  v37 = v188;
  if (!v188)
  {
    v38 = (JSC::JSCell *)*((_QWORD *)v6 + 7);
    v174[0] = *((JSC::VM **)this + 7);
    if (((unint64_t)v38 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v39 = 0;
    }
    else if (((unint64_t)v38 & 0xFFFE000000000002) != 0
           || (v39 = (JSC::Structure *)JSC::JSCell::getObject(v38)) == 0)
    {
      JSC::throwTypeError();
      v100 = 0;
      v89 = 1;
      v170 = 1;
      goto LABEL_235;
    }
    v197 = 0;
    LODWORD(v198) = 0;
    LOBYTE(v199) = 0;
    v202 = 0;
    memset(v203, 0, 3);
    if (((unint64_t)v38 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
LABEL_184:
      WebCore::throwRequiredMemberTypeError((int)this, (int)v174, "texture", 8, "GPUImageCopyTextureTagged", 26, "GPUTexture", 11);
      goto LABEL_185;
    }
    WTF::AtomStringImpl::addLiteral();
    v40 = (WTF::StringImpl *)v163;
    v42 = JSC::JSObject::get(v39, this, v163);
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v41);
      else
        *(_DWORD *)v40 -= 2;
    }
    if (*((_DWORD *)v174[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v174[0]) & 1) != 0)
      goto LABEL_185;
    if (v42 == 10)
    {
      LOBYTE(v43) = 0;
    }
    else
    {
      v44 = v6;
      v45 = v14;
      v46 = v12;
      v163 = *((_QWORD *)this + 7);
      v47 = (JSC::VM *)v163;
      v43 = WebCore::parseEnumeration<WebCore::GPUTextureAspect>(this, v42);
      if (*((_DWORD *)v47 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v47) & 1) != 0)
        goto LABEL_366;
      if (v43 <= 0xFFu)
        goto LABEL_365;
      v12 = v46;
      v14 = v45;
    }
    LOBYTE(v203[0]) = v43;
    WTF::AtomStringImpl::addLiteral();
    v48 = (WTF::StringImpl *)v163;
    v50 = JSC::JSObject::get(v39, this, v163);
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v49);
      else
        *(_DWORD *)v48 -= 2;
    }
    if (*((_DWORD *)v174[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v174[0]) & 1) != 0)
      goto LABEL_185;
    if (v50 == 10)
    {
      v51 = 0;
    }
    else
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, v50, &v163);
      v51 = v163;
      if (HIDWORD(v163))
      {
LABEL_185:
        v85 = 1;
LABEL_186:
        v170 = v85;
        goto LABEL_187;
      }
    }
    LODWORD(v198) = v51;
    WTF::AtomStringImpl::addLiteral();
    v54 = (WTF::StringImpl *)v163;
    v56 = JSC::JSObject::get(v39, this, v163);
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v55);
      else
        *(_DWORD *)v54 -= 2;
    }
    if (*((_DWORD *)v174[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v174[0]) & 1) != 0)
      goto LABEL_185;
    if (v56 == 10)
    {
LABEL_179:
      WTF::AtomStringImpl::addLiteral();
      v83 = v189;
      v84 = JSC::JSObject::get(v39, this, (unint64_t)v189);
      if (v83)
      {
        if (*(_DWORD *)v83 == 2)
          WTF::StringImpl::destroy(v83, v52);
        else
          *(_DWORD *)v83 -= 2;
      }
      if (*((_DWORD *)v174[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v174[0]) & 1) != 0)
        goto LABEL_185;
      if (v84 == 10)
        goto LABEL_184;
      v189 = (WTF::StringImpl *)*((_QWORD *)this + 7);
      if ((v84 & 0xFFFE000000000002) != 0)
        goto LABEL_249;
      v102 = *(unsigned int *)(16 * (*(_DWORD *)v84 & 0xFFFFFFFE) + 0x4C);
      v103 = *(_DWORD *)(16 * (*(_DWORD *)v84 & 0xFFFFFFFE) + 0x4C) != 0;
      if ((_DWORD)v102)
      {
        v104 = 16 * v102;
        if ((char **)v104 != &WebCore::JSGPUTexture::s_info)
        {
          do
          {
            v104 = *(_QWORD *)(v104 + 16);
            v103 = v104 != 0;
          }
          while ((char **)v104 != &WebCore::JSGPUTexture::s_info && v104 != 0);
        }
      }
      if (!v103 || (v106 = *(_QWORD *)(v84 + 24)) == 0)
      {
LABEL_249:
        JSC::throwTypeError();
        goto LABEL_185;
      }
      v107 = *(_QWORD *)(v106 + 16);
      if (v107)
        goto LABEL_426;
      v107 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v107 = 1;
      *(_QWORD *)(v107 + 8) = v106;
      v108 = *(unsigned int **)(v106 + 16);
      *(_QWORD *)(v106 + 16) = v107;
      if (!v108)
        goto LABEL_426;
      do
      {
        v109 = __ldaxr(v108);
        v110 = v109 - 1;
      }
      while (__stlxr(v110, v108));
      if (!v110)
      {
        atomic_store(1u, v108);
        WTF::fastFree((WTF *)v108, v52);
      }
      v107 = *(_QWORD *)(v106 + 16);
      if (v107)
      {
LABEL_426:
        do
          v111 = __ldaxr((unsigned int *)v107);
        while (__stlxr(v111 + 1, (unsigned int *)v107));
      }
      v112 = (unsigned int *)v197;
      v197 = (WTF::StringImpl *)v107;
      if (v112)
      {
        do
        {
          v113 = __ldaxr(v112);
          v114 = v113 - 1;
        }
        while (__stlxr(v114, v112));
        if (!v114)
        {
          atomic_store(1u, v112);
          WTF::fastFree((WTF *)v112, v52);
        }
      }
      WTF::AtomStringImpl::addLiteral();
      v115 = v189;
      v117 = JSC::JSObject::get(v39, this, (unint64_t)v189);
      if (v115)
      {
        if (*(_DWORD *)v115 == 2)
          WTF::StringImpl::destroy(v115, v116);
        else
          *(_DWORD *)v115 -= 2;
      }
      if (*((_DWORD *)v174[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v174[0]) & 1) != 0)
        goto LABEL_185;
      if (v117 == 10)
      {
        LOBYTE(v118) = 0;
        goto LABEL_271;
      }
      v44 = v6;
      v45 = v14;
      v46 = v12;
      v189 = (WTF::StringImpl *)*((_QWORD *)this + 7);
      v119 = v189;
      v118 = WebCore::parseEnumeration<WebCore::GPUPredefinedColorSpace>(this, v117);
      if (*((_DWORD *)v119 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v119) & 1) != 0)
      {
LABEL_366:
        v85 = 1;
        v12 = v46;
        v14 = v45;
        v6 = v44;
        goto LABEL_186;
      }
      if (v118 > 0xFFu)
      {
        v12 = v46;
        v14 = v45;
LABEL_271:
        HIBYTE(v203[0]) = v118;
        WTF::AtomStringImpl::addLiteral();
        v120 = v189;
        v121 = JSC::JSObject::get(v39, this, (unint64_t)v189);
        if (v120)
        {
          if (*(_DWORD *)v120 == 2)
            WTF::StringImpl::destroy(v120, v52);
          else
            *(_DWORD *)v120 -= 2;
        }
        if (*((_DWORD *)v174[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v174[0]) & 1) != 0)
          goto LABEL_185;
        if (v121 == 10)
        {
          v122 = 0;
          goto LABEL_282;
        }
        v123 = (JSC::VM *)*((_QWORD *)this + 7);
        if (v121 >= 0xFFFE000000000000)
        {
          v156 = (_DWORD)v121 == 0;
          goto LABEL_418;
        }
        *(_QWORD *)&v124 = v121 - 0x2000000000000;
        if (v121 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          if (v124 <= 0.0)
          {
            v122 = v124 < 0.0;
            goto LABEL_281;
          }
        }
        else
        {
          if ((v121 & 0xFFFE000000000002) != 0)
          {
            v122 = v121 == 7;
            goto LABEL_281;
          }
          v157 = *(unsigned __int8 *)(v121 + 5);
          if (v157 == 3)
          {
            v160 = *(_DWORD *)(v121 + 8);
LABEL_414:
            v156 = v160 == 0;
            goto LABEL_418;
          }
          if (v157 == 2)
          {
            v158 = *(_QWORD *)(v121 + 8);
            if ((v158 & 1) != 0)
              v159 = (int *)(v121 + 16);
            else
              v159 = (int *)(v158 + 4);
            v160 = *v159;
            goto LABEL_414;
          }
          if ((*(_BYTE *)(16 * (*(_DWORD *)v121 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v156 = *(_QWORD *)(16 * (*(_DWORD *)v121 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_418:
            v122 = !v156;
LABEL_281:
            if (*((_DWORD *)v123 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v123) & 1) != 0)
              goto LABEL_185;
LABEL_282:
            LOBYTE(v203[1]) = v122;
            v125 = (unint64_t)v197;
            v197 = 0;
            v163 = v125;
            v164 = v198;
            LOBYTE(v165[0]) = 0;
            v167 = 0;
            if (v202)
            {
              v166 = -1;
              v126 = v201;
              if (v201 != -1)
              {
                ((void (*)(WTF::StringImpl **, _DWORD *, unint64_t *))off_1E3283168[v201])(&v189, v165, &v199);
                v166 = v126;
              }
              v167 = 1;
            }
            v85 = 0;
            v168 = v203[0];
            v169 = *(_WORD *)((char *)v203 + 1);
            goto LABEL_186;
          }
        }
        v122 = 1;
        goto LABEL_281;
      }
LABEL_365:
      JSC::throwTypeError();
      goto LABEL_366;
    }
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLSequence<WebCore::IDLEnforceRangeAdaptor<WebCore::IDLUnsignedLong>>,WebCore::IDLDictionary<WebCore::GPUOrigin3DDict>>>::convert((uint64_t)&v189, this, v56);
    v57 = v193;
    if (v193)
    {
      v170 = 1;
      v82 = v193;
LABEL_176:
      if (v82 != -1)
        ((void (*)(unint64_t **, int *))off_1E3283188[v82])(&v177, &v190);
      if (v57)
      {
LABEL_187:
        if (v202)
        {
          if (v201 != -1)
            ((void (*)(WTF::StringImpl **, unint64_t *))off_1E3283158[v201])(&v189, &v199);
          v201 = -1;
        }
        v86 = (unsigned int *)v197;
        v197 = 0;
        if (v86)
        {
          do
          {
            v87 = __ldaxr(v86);
            v88 = v87 - 1;
          }
          while (__stlxr(v88, v86));
          if (!v88)
          {
            atomic_store(1u, v86);
            WTF::fastFree((WTF *)v86, v52);
          }
        }
        v89 = v170;
        if (v170)
        {
          v100 = 0;
          goto LABEL_234;
        }
        WebCore::Converter<WebCore::IDLUnion<WebCore::IDLSequence<WebCore::IDLEnforceRangeAdaptor<WebCore::IDLUnsignedLong>>,WebCore::IDLDictionary<WebCore::GPUExtent3DDict>>>::convert(*((_QWORD *)v6 + 8), this, v53, (uint64_t)&v177);
        v90 = v180;
        if (v180)
        {
          v100 = 0;
          goto LABEL_231;
        }
        if (v188)
          goto LABEL_386;
        LOBYTE(v197) = 0;
        LODWORD(v198) = -1;
        v91 = v183;
        if (v183 != -1)
        {
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **, uint64_t *))off_1E32830D8[v183])(&v189, &v197, &v182);
          LODWORD(v198) = v91;
        }
        LOBYTE(v199) = 0;
        v202 = 0;
        if (v186)
        {
          v201 = -1;
          v92 = v185;
          if (v185 != -1)
          {
            ((void (*)(WTF::StringImpl **, unint64_t *, _BYTE *))off_1E3283070[v185])(&v189, &v199, v184);
            v201 = v92;
          }
          v202 = 1;
        }
        LOBYTE(v203[0]) = v187;
        if (v170)
          goto LABEL_386;
        v93 = v163;
        v163 = 0;
        v189 = (WTF::StringImpl *)v93;
        v190 = v164;
        v191[0] = 0;
        v194 = 0;
        if (v167)
        {
          v193 = -1;
          v94 = v166;
          if (v166 != -1)
          {
            ((void (*)(JSC::VM **, char *, _DWORD *))off_1E3283168[v166])(v174, v191, v165);
            v193 = v94;
          }
          v194 = 1;
        }
        v195 = v168;
        v196 = v169;
        if (v180)
LABEL_386:
          std::__throw_bad_variant_access[abi:sn180100]();
        LOBYTE(v174[0]) = 0;
        v175 = -1;
        v95 = v179;
        if (v179 != -1)
        {
          ((void (*)(int *, JSC::VM **, _BYTE *))off_1E3282D58[v179])(&v171, v174, v178);
          v175 = v95;
        }
        WebCore::GPUQueue::copyExternalImageToTexture(v12, v14, (uint64_t)&v197, (char *)&v189, (uint64_t)v174, (uint64_t)&v171);
        if (v175 != -1)
          ((void (*)(char *, JSC::VM **))off_1E3282D48[v175])(&v176, v174);
        if (v194)
        {
          if (v193 != -1)
            ((void (*)(JSC::VM **, char *))off_1E3283158[v193])(v174, v191);
          v193 = -1;
        }
        v97 = (unsigned int *)v189;
        v189 = 0;
        if (v97)
        {
          do
          {
            v98 = __ldaxr(v97);
            v99 = v98 - 1;
          }
          while (__stlxr(v99, v97));
          if (!v99)
          {
            atomic_store(1u, v97);
            WTF::fastFree((WTF *)v97, v96);
          }
        }
        if (v202)
        {
          if (v201 != -1)
            ((void (*)(WTF::StringImpl **, unint64_t *))off_1E3283060[v201])(&v189, &v199);
          v201 = -1;
        }
        if ((_DWORD)v198 != -1)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32830A0[v198])(&v189, &v197);
        if (!v173)
        {
          v100 = 10;
LABEL_230:
          v90 = v180;
LABEL_231:
          if (v90 != -1)
            ((void (*)(WTF::StringImpl **, _BYTE *))off_1E3283630[v90])(&v197, v178);
          v89 = v170;
LABEL_234:
          if (v89 == -1)
          {
LABEL_236:
            v37 = v188;
            goto LABEL_237;
          }
LABEL_235:
          ((void (*)(WTF::StringImpl **, unint64_t *))off_1E3283650[v89])(&v197, &v163);
          goto LABEL_236;
        }
        v145 = (WTF::StringImpl *)v171;
        LOBYTE(v197) = v171;
        v146 = v172;
        v172 = 0;
        v198 = (unint64_t)v146;
        if (!*((_QWORD *)v161 + 2))
        {
          v147.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v171, (JSC::JSGlobalObject *)&v198);
          JSC::VM::throwException(v161, this, v147);
          v146 = (WTF::StringImpl *)v198;
        }
        v198 = 0;
        if (v146)
        {
          if (*(_DWORD *)v146 == 2)
            WTF::StringImpl::destroy(v146, v145);
          else
            *(_DWORD *)v146 -= 2;
        }
        if (v173)
        {
          v148 = v172;
          v172 = 0;
          if (v148)
          {
            if (*(_DWORD *)v148 != 2)
            {
              v100 = 0;
              *(_DWORD *)v148 -= 2;
              goto LABEL_230;
            }
            WTF::StringImpl::destroy(v148, v145);
          }
        }
        v100 = 0;
        goto LABEL_230;
      }
      goto LABEL_179;
    }
    v58 = v14;
    v59 = v12;
    LOBYTE(v163) = 0;
    v165[0] = -1;
    v60 = v192;
    if (v192 == -1)
    {
      if (v202)
      {
        v12 = v59;
        v14 = v58;
        if (v201 == -1)
        {
LABEL_175:
          v82 = v193;
          goto LABEL_176;
        }
        ((void (*)(unint64_t **, unint64_t *))off_1E3283158[v201])(&v177, &v199);
        v201 = -1;
LABEL_173:
        if (v165[0] != -1)
          ((void (*)(unint64_t **, unint64_t *))off_1E3283158[v165[0]])(&v177, &v163);
        goto LABEL_175;
      }
      LOBYTE(v199) = 0;
      v201 = -1;
      v12 = v59;
    }
    else
    {
      v61 = off_1E3283168[v192];
      ((void (*)(unint64_t **, unint64_t *, int *))v61)(&v177, &v163, &v190);
      v165[0] = v60;
      if (v202)
      {
        v177 = &v199;
        ((void (*)(unint64_t **, unint64_t *, unint64_t *))off_1E3283178[v60])(&v177, &v199, &v163);
        v12 = v59;
        v14 = v58;
        v57 = 0;
        goto LABEL_173;
      }
      LOBYTE(v199) = 0;
      v201 = -1;
      ((void (*)(unint64_t **, unint64_t *, unint64_t *))v61)(&v177, &v199, &v163);
      v201 = v60;
      v12 = v59;
      v57 = 0;
    }
    v202 = 1;
    v14 = v58;
    goto LABEL_173;
  }
  v100 = 0;
LABEL_237:
  if (v37 != -1)
LABEL_238:
    ((void (*)(unint64_t *, uint64_t *))off_1E3283660[v37])(&v163, &v182);
  return v100;
}

char *WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::GPUCommandBuffer>>::convert(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  WTF *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  WTF *v15;
  _DWORD *v16;
  WTF *v17;

  v17 = (WTF *)*((_QWORD *)result + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return (char *)JSC::throwTypeError();
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSGPUCommandBuffer::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSGPUCommandBuffer::s_info && v6 != 0);
  }
  if (!v5)
    return (char *)JSC::throwTypeError();
  v9 = *(WTF **)(a2 + 24);
  if (!v9)
    return (char *)JSC::throwTypeError();
  ++*(_DWORD *)v9;
  v17 = v9;
  v10 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a3 + 8))
  {
    result = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v10 + 1, (unint64_t)&v17);
    v12 = *(unsigned int *)(a3 + 12);
    v13 = *(char **)a3;
    v14 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    *(_QWORD *)&v13[8 * v12] = v14;
    v15 = v17;
    *(_DWORD *)(a3 + 12) = v12 + 1;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
      {
        v16 = (_DWORD *)*((_QWORD *)v15 + 1);
        *((_QWORD *)v15 + 1) = 0;
        if (v16)
        {
          if (v16[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
          else
            --v16[2];
        }
        return (char *)WTF::fastFree(v15, v11);
      }
      else
      {
        --*(_DWORD *)v15;
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v10) = v9;
    *(_DWORD *)(a3 + 12) = v10 + 1;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore16GPUCommandBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  _DWORD *v7;
  WTF *result;

  v3 = a2[3];
  if ((_DWORD)v3)
  {
    v4 = *(WTF ***)a2;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
        {
          v7 = (_DWORD *)*((_QWORD *)v6 + 1);
          *((_QWORD *)v6 + 1) = 0;
          if (v7)
          {
            if (v7[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
            else
              --v7[2];
          }
          WTF::fastFree(v6, a2);
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore25GPUImageCopyTextureTaggedENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;
  char v7;

  if (*((_BYTE *)a2 + 40))
  {
    v3 = a2[8];
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, _DWORD *))off_1E3283158[v3])(&v7, a2 + 4);
    a2[8] = -1;
  }
  result = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore25GPUImageCopyExternalImageENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  if (*(_BYTE *)(a2 + 40))
  {
    v3 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E3283060[v3])(&v6, a2 + 16);
    *(_DWORD *)(a2 + 32) = -1;
  }
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E32830A0[v5])(&v7, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

_BYTE *WebCore::jsGPURenderBundleEncoderPrototypeFunction_finish(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  JSC::JSCell *v12;
  uint64_t Object;
  JSC::Structure *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unint64_t v19;
  WTF *v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  WTF *v27;
  int v28;
  uint64_t v29;
  unint64_t SlowCase;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char **v37;
  int v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v42;
  JSC::Structure *v43;
  JSC::JSCell *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  void *v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *Allocator;
  uint64_t v66;
  _DWORD *v68;
  WTF::StringImpl *v69;
  JSValue v70;
  unint64_t v71;
  WebCore *v72;
  JSC::JSGlobalObject *v73;
  JSC::CallFrame *v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  char v77;
  WTF *v78;
  WTF::StringImpl *v79;
  int v80;
  uint64_t v81;
  int v82;
  WTF *v83;
  WTF::StringImpl *v84;
  _QWORD *v85;

  v4 = *((_QWORD *)this + 7);
  v75 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v75, "GPURenderBundleEncoder", "finish");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPURenderBundleEncoder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPURenderBundleEncoder::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v75, "GPURenderBundleEncoder", "finish");
  v11 = *(_QWORD *)(v5 + 24);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v17 = 0;
  }
  else
  {
    v12 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
    v83 = (WTF *)v4;
    if (((unint64_t)v12 & 0xFFFFFFFFFFFFFFF7) == 2)
      goto LABEL_21;
    if (((unint64_t)v12 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v12)) == 0)
    {
      JSC::throwTypeError();
LABEL_97:
      v82 = 1;
LABEL_98:
      SlowCase = 0;
      v66 = 1;
LABEL_85:
      ((void (*)(WTF **, uint64_t *))off_1E3283900[v66])(&v78, &v81);
      return (_BYTE *)SlowCase;
    }
    v14 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v16 = JSC::JSObject::get(v14, this, (unint64_t)v78);
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, v15);
      else
        *(_DWORD *)v78 -= 2;
    }
    if (*(_DWORD *)(v4 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4))
      goto LABEL_97;
    if (v16 == 10)
    {
LABEL_21:
      v17 = 0;
    }
    else
    {
      WebCore::valueToUSVString(this, v16, (uint64_t)&v78);
      if ((_DWORD)v79)
      {
        v82 = 1;
        if ((_DWORD)v79 != -1)
          ((void (*)(WTF::StringImpl **, WTF **))off_1E3282908[v79])(&v76, &v78);
        goto LABEL_98;
      }
      v17 = v78;
    }
  }
  v82 = 0;
  v18 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v81 = 0;
  v76 = v17;
  v77 = 1;
  WebCore::GPURenderBundleEncoder::finish(v11, (uint64_t)&v76, (uint64_t)&v78);
  if (!v80)
  {
    v20 = v78;
    v78 = 0;
    v21 = *(_QWORD *)(*(_QWORD *)(v18 + 3320) + 32);
    if (v21)
    {
      v22 = *(_DWORD *)(v21 - 8);
      v23 = ((unint64_t)v20 + ~((_QWORD)v20 << 32)) ^ (((unint64_t)v20 + ~((_QWORD)v20 << 32)) >> 22);
      v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
      v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
      v26 = v22 & ((v25 >> 31) ^ v25);
      v27 = *(WTF **)(v21 + 16 * v26);
      if (v27 == v20)
      {
LABEL_31:
        v29 = *(_QWORD *)(v21 + 16 * v26 + 8);
        if (v29)
        {
          if ((*(_BYTE *)(v29 + 8) & 3) == 0)
          {
            SlowCase = *(_QWORD *)v29;
            if (*(_QWORD *)v29)
            {
LABEL_76:
              if (*(_DWORD *)v20 == 1)
              {
                v68 = (_DWORD *)*((_QWORD *)v20 + 1);
                *((_QWORD *)v20 + 1) = 0;
                if (v68)
                {
                  if (v68[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v68 + 8))(v68);
                  else
                    --v68[2];
                }
                WTF::fastFree(v20, (void *)v19);
              }
              else
              {
                --*(_DWORD *)v20;
              }
LABEL_78:
              if (v80 != -1)
                ((void (*)(WTF **, WTF **))off_1E32838F0[v80])(&v83, &v78);
              v80 = -1;
              if (v77 && v76)
              {
                if (*(_DWORD *)v76 == 2)
                  WTF::StringImpl::destroy(v76, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v76 -= 2;
              }
              v66 = 0;
              goto LABEL_85;
            }
          }
        }
      }
      else
      {
        v28 = 1;
        while (v27)
        {
          v26 = ((_DWORD)v26 + v28) & v22;
          v27 = *(WTF **)(v21 + 16 * v26);
          ++v28;
          if (v27 == v20)
            goto LABEL_31;
        }
      }
    }
    ++*(_DWORD *)v20;
    v31 = *(_QWORD *)(v18 + 3296);
    if (v31)
    {
      v32 = *(_DWORD *)(v31 - 8);
      v33 = ((unint64_t)&WebCore::JSGPURenderBundle::s_info + ~((_QWORD)&WebCore::JSGPURenderBundle::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPURenderBundle::s_info + ~((_QWORD)&WebCore::JSGPURenderBundle::s_info << 32)) >> 22);
      v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
      v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
      v36 = v32 & ((v35 >> 31) ^ v35);
      v37 = *(char ***)(v31 + 16 * v36);
      if (v37 == &WebCore::JSGPURenderBundle::s_info)
      {
LABEL_39:
        v39 = *(_QWORD *)(v31 + 16 * v36 + 8);
        if (v39)
          goto LABEL_41;
      }
      else
      {
        v38 = 1;
        while (v37)
        {
          v36 = ((_DWORD)v36 + v38) & v32;
          v37 = *(char ***)(v31 + 16 * v36);
          ++v38;
          if (v37 == &WebCore::JSGPURenderBundle::s_info)
            goto LABEL_39;
        }
      }
    }
    v40 = *(uint64_t **)(v18 + 56);
    Structure = WebCore::JSGPURenderBundlePrototype::createStructure(v40, v18, *(JSC::JSCell **)(v18 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v44 = (JSC::JSCell *)WebCore::JSGPURenderBundlePrototype::create((WebCore::JSGPURenderBundlePrototype *)v40, Structure, v42, v43);
    v45 = WebCore::JSGPURenderBundle::createStructure(v40, v18, v44);
    v39 = WebCore::cacheDOMStructure((JSCell *)v18, v45, (uint64_t)&WebCore::JSGPURenderBundle::s_info);
LABEL_41:
    v46 = *(_QWORD *)(v18 + 56);
    v47 = *(_QWORD *)(v46 + 41456);
    v48 = *(_QWORD *)(v47 + 23536);
    v49 = *(_QWORD **)(v48 + 256);
    if (v49)
      goto LABEL_61;
    v50 = *(_QWORD *)(v47 + 22648);
    if (__ldaxr((unsigned __int8 *)v50))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v50))
    {
      goto LABEL_46;
    }
    MEMORY[0x19AEA534C](v50);
LABEL_46:
    v52 = *(_QWORD *)(v50 + 2824);
    if (!*(_QWORD *)(v52 + 256))
    {
      v53 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v83, "IsoSpace T");
      v85 = 0;
      MEMORY[0x19AEA3204](v53, &v83, v46 + 192, v46 + 1872, 32, 8, &v85);
      v55 = (uint64_t)v85;
      v85 = 0;
      if (v55)
        (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
      v56 = v83;
      v83 = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 1)
          WTF::fastFree(v56, v54);
        else
          --*(_DWORD *)v56;
      }
      v57 = *(_QWORD *)(v52 + 256);
      *(_QWORD *)(v52 + 256) = v53;
      if (v57)
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    }
    v49 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v58 = *(_QWORD *)(v48 + 256);
    *(_QWORD *)(v48 + 256) = v49;
    if (v58)
    {
      v59 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v59, v60);
    }
    v61 = __ldxr((unsigned __int8 *)v50);
    if (v61 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v50))
      {
LABEL_61:
        SlowCase = v49[3];
        if (SlowCase >= v49[4])
        {
          SlowCase = v49[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
            goto LABEL_63;
          }
          v71 = *(_QWORD *)(SlowCase + 8) ^ v49[6];
          v49[4] = SlowCase + HIDWORD(v71);
          v49[5] = SlowCase + (int)v71;
        }
        v49[3] = SlowCase + 32;
LABEL_63:
        *(_DWORD *)SlowCase = 0;
        WebCore::JSDOMObject::JSDOMObject(SlowCase, v39);
        *(_QWORD *)(SlowCase + 24) = v20;
        if (*(_BYTE *)(v46 + 755))
          __dmb(0xAu);
        v62 = *(_QWORD *)(v18 + 3320);
        if ((byte_1EE3358A0 & 1) == 0)
        {
          qword_1EE335898 = (uint64_t)&off_1E3282840;
          byte_1EE3358A0 = 1;
        }
        v83 = v20;
        if ((SlowCase & 8) != 0)
          v63 = (SlowCase - 112) | 1;
        else
          v63 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v63 & 1) != 0)
          v64 = v63 + 47;
        else
          v64 = *(_QWORD *)v63 + 32;
        Allocator = *(_QWORD **)(v64 + 16);
        if (!Allocator)
          Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v64 + 16) = *Allocator;
        *Allocator = SlowCase;
        Allocator[1] = &qword_1EE335898;
        Allocator[2] = v62;
        v85 = Allocator;
        JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v62 + 32), (uint64_t *)&v83, (uint64_t *)&v85);
        if (v85)
          v85[1] = 3;
        goto LABEL_76;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v50);
    goto LABEL_61;
  }
  if (v80 == 1)
  {
    v19 = v78;
    LOBYTE(v83) = (_BYTE)v78;
    v69 = v79;
    v79 = 0;
    v84 = v69;
    if (!*(_QWORD *)(v4 + 16))
    {
      v70.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v78, (JSC::JSGlobalObject *)&v84);
      JSC::VM::throwException((JSC::VM *)v4, this, v70);
      v69 = v84;
    }
    v84 = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2)
        WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)v69 -= 2;
    }
    SlowCase = 0;
    goto LABEL_78;
  }
  v72 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsGPURenderBundleEncoderPrototypeFunction_pushDebugGroup(v72, v73, v74);
}

_BYTE *WebCore::jsGPURenderBundleEncoderPrototypeFunction_pushDebugGroup(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  JSValue v19;
  JSC::VM *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v20 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "GPURenderBundleEncoder", "pushDebugGroup");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPURenderBundleEncoder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPURenderBundleEncoder::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "GPURenderBundleEncoder", "pushDebugGroup");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v19);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v21);
  v12 = v22;
  if (v22)
  {
    v16 = 0;
  }
  else
  {
    v13 = v21;
    v21 = 0;
    v23 = v13;
    (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(v11 + 8) + 88))(*(_QWORD *)(v11 + 8), &v23);
    v15 = v23;
    v23 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v12 = v22;
    v16 = 10;
  }
  if (v12 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3282908[v12])(&v23, &v21);
  return (_BYTE *)v16;
}

uint64_t WebCore::jsGPURenderBundleEncoderPrototypeFunction_popDebugGroup(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "GPURenderBundleEncoder", "popDebugGroup");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSGPURenderBundleEncoder::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSGPURenderBundleEncoder::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "GPURenderBundleEncoder", "popDebugGroup");
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 24) + 8) + 96))(*(_QWORD *)(*(_QWORD *)(v3 + 24)
                                                                                                + 8));
  return 10;
}

_BYTE *WebCore::jsGPURenderBundleEncoderPrototypeFunction_insertDebugMarker(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  JSValue v19;
  JSC::VM *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v20 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "GPURenderBundleEncoder", "insertDebugMarker");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPURenderBundleEncoder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPURenderBundleEncoder::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "GPURenderBundleEncoder", "insertDebugMarker");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v19);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v21);
  v12 = v22;
  if (v22)
  {
    v16 = 0;
  }
  else
  {
    v13 = v21;
    v21 = 0;
    v23 = v13;
    (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(v11 + 8) + 104))(*(_QWORD *)(v11 + 8), &v23);
    v15 = v23;
    v23 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v12 = v22;
    v16 = 10;
  }
  if (v12 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3282908[v12])(&v23, &v21);
  return (_BYTE *)v16;
}

_BYTE *WebCore::jsGPURenderBundleEncoderPrototypeFunction_setBindGroup(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSGPURenderBundleEncoder *a4)
{
  JSC::VM *v5;
  uint64_t v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  char **v23;
  BOOL v24;
  JSValue v26;
  uint64_t v27;
  JSC::JSArrayBufferView *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)();
  uint64_t v34;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  JSValue v38;
  WTF::StringImpl *v39;
  _QWORD v40[2];
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  WTF::StringImpl *v48;
  char v49;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v40[0] = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)v40, "GPURenderBundleEncoder", "setBindGroup");
  v7 = a2;
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSGPURenderBundleEncoder::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSGPURenderBundleEncoder::s_info && v10 != 0);
  }
  if (!v9)
    return WebCore::throwThisTypeError((int)this, (int)v40, "GPURenderBundleEncoder", "setBindGroup");
  v40[1] = v5;
  v13 = *((int *)a2 + 8) - 1;
  if (v13 >= 5)
    v13 = 5;
  if (v13 != 5)
  {
    if (v13 == 3 || v13 == 2)
      return (_BYTE *)WebCore::jsGPURenderBundleEncoderPrototypeFunction_setBindGroup1Body((WTF::StringImpl **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
    if (v13 > 1)
      return (_BYTE *)JSC::throwTypeError();
    v26.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v5, this, v26);
  }
  v16 = *(_QWORD *)(v6 + 24);
  WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), &v47);
  v18 = v47;
  if (HIDWORD(v47))
    return 0;
  v19 = *((_QWORD *)v7 + 7);
  v20 = *((_QWORD *)this + 7);
  v47 = v20;
  if ((v19 & 0xFFFE000000000002) != 0)
    goto LABEL_31;
  v21 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
  v22 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
  v23 = (char **)(16 * v21);
  if ((_DWORD)v21)
    v24 = v23 == &WebCore::JSGPUBindGroup::s_info;
  else
    v24 = 1;
  if (!v24)
  {
    do
    {
      v23 = (char **)v23[2];
      v22 = v23 != 0;
    }
    while (v23 != &WebCore::JSGPUBindGroup::s_info && v23 != 0);
  }
  if (v22 && (v27 = *(_QWORD *)(v19 + 24)) != 0)
  {
    v28 = (JSC::JSArrayBufferView *)*((_QWORD *)v7 + 8);
    v45 = v20;
    if (((unint64_t)v28 & 0xFFFE000000000002) == 0 && *((_BYTE *)v28 + 5) == 45)
    {
      JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::possiblySharedTypedImpl(v28, (uint64_t *)&v47);
      v29 = v47;
      if (v47)
      {
        v30 = *(_QWORD *)(v47 + 32);
        if (!v30)
          goto LABEL_49;
        v31 = *(_QWORD *)(v30 + 16);
        if (!v31)
          goto LABEL_49;
        v32 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (v32)
        {
          if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34))
            goto LABEL_81;
          goto LABEL_43;
        }
LABEL_44:
        if (*(_QWORD *)(v30 + 32))
          v33 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
        else
          v33 = 0;
        if (!v33)
        {
          while (1)
          {
LABEL_49:
            if ((*(_BYTE *)(v29 + 6) & 3) != 0)
              goto LABEL_50;
            v43 = v29;
            v44 = 0;
            WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, *((_QWORD *)v7 + 9), (uint64_t)&v41);
            if (v42)
              break;
            v7 = (JSC::JSGlobalObject *)*((_QWORD *)v7 + 10);
            WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, (unint64_t)v7, &v47);
            if (HIDWORD(v47))
              goto LABEL_79;
            v43 = 0;
            if (!v42)
            {
              WebCore::GPURenderBundleEncoder::setBindGroup(v16, v18, v27, v29, v41, v47, (uint64_t)&v47);
              if (*(_DWORD *)v29 == 1)
                JSC::ArrayBufferView::operator delete();
              else
                --*(_DWORD *)v29;
              if (v49)
              {
                v36 = (WTF::StringImpl *)v47;
                LOBYTE(v45) = v47;
                v37 = v48;
                v48 = 0;
                v46 = v37;
                if (!*((_QWORD *)v5 + 2))
                {
                  v38.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v47, (JSC::JSGlobalObject *)&v46);
                  JSC::VM::throwException(v5, this, v38);
                  v37 = v46;
                }
                v46 = 0;
                if (v37)
                {
                  if (*(_DWORD *)v37 == 2)
                    WTF::StringImpl::destroy(v37, v36);
                  else
                    *(_DWORD *)v37 -= 2;
                }
                if (v49)
                {
                  v39 = v48;
                  v48 = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 != 2)
                    {
                      v15 = 0;
                      *(_DWORD *)v39 -= 2;
                      goto LABEL_62;
                    }
                    WTF::StringImpl::destroy(v39, v36);
                  }
                }
LABEL_79:
                v15 = 0;
                goto LABEL_62;
              }
              v15 = 10;
LABEL_62:
              v34 = 0;
              goto LABEL_53;
            }
            std::__throw_bad_variant_access[abi:sn180100]();
LABEL_81:
            if (*MEMORY[0x1E0CC10F0])
              goto LABEL_44;
LABEL_43:
            if ((v31 & 0x3FFFFFFFFLL) + v32)
              goto LABEL_44;
          }
          v15 = 0;
          goto LABEL_62;
        }
        v47 = 0;
LABEL_50:
        if (*(_DWORD *)v29 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*(_DWORD *)v29;
      }
    }
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v45, 2, "dynamicOffsetsData", 19, "GPURenderBundleEncoder", 23, v17, "setBindGroup", 13, "Uint32Array", 12);
    v15 = 0;
    v34 = 1;
    v44 = 1;
LABEL_53:
    ((void (*)(unint64_t *, uint64_t *))off_1E3283910[v34])(&v47, &v43);
  }
  else
  {
LABEL_31:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v47, 1, "bindGroup", 10, "GPURenderBundleEncoder", 23, v17, "setBindGroup", 13, "GPUBindGroup", 13);
    return 0;
  }
  return (_BYTE *)v15;
}

uint64_t WebCore::jsGPURenderBundleEncoderPrototypeFunction_setPipeline(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v24;
  JSValue v25;
  JSC::VM *v26;
  JSC::VM *v27;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "GPURenderBundleEncoder", "setPipeline");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSGPURenderBundleEncoder::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSGPURenderBundleEncoder::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "GPURenderBundleEncoder", "setPipeline");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v27 = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSGPURenderPipeline::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSGPURenderPipeline::s_info && v20 != 0);
    }
    if (v19 && (v24 = *(_QWORD *)(v17 + 24)) != 0)
    {
      (*(void (**)(_QWORD, _QWORD, JSC::CallFrame *))(**(_QWORD **)(v16 + 8) + 16))(*(_QWORD *)(v16 + 8), *(_QWORD *)(v24 + 8), a3);
      return 10;
    }
    else
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v27, 0, "pipeline", 9, "GPURenderBundleEncoder", 23, a8, "setPipeline", 12, "GPURenderPipeline", 18);
      return 0;
    }
  }
}

uint64_t WebCore::jsGPURenderBundleEncoderPrototypeFunction_setIndexBuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  uint64_t v29;
  unint64_t v30;
  JSValue v31;
  JSC::VM *v32;
  JSC::VM *v33;
  int v34;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v32 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v32, "GPURenderBundleEncoder", "setIndexBuffer");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSGPURenderBundleEncoder::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSGPURenderBundleEncoder::s_info && v14 != 0);
  }
  if (!v13)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v32, "GPURenderBundleEncoder", "setIndexBuffer");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v31.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v31);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v33 = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSGPUBuffer::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSGPUBuffer::s_info && v21 != 0);
  }
  if (!v20 || (v25 = *(_QWORD *)(v18 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v33, 0, "buffer", 7, "GPURenderBundleEncoder", 23, a8, "setIndexBuffer", 15, "GPUBuffer", 10);
    return 0;
  }
  v26 = *((_QWORD *)a2 + 7);
  v33 = v9;
  v28 = WebCore::parseEnumeration<WebCore::GPUIndexFormat>(this, v26);
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
    return 0;
  if (v28 <= 0xFFu)
  {
    WebCore::throwArgumentMustBeEnumError((uint64_t)this, (uint64_t)&v33, 1, "indexFormat", 12, "GPURenderBundleEncoder", 23, v27, "setIndexBuffer", 15, "\"uint16\", \"uint32\"", 19);
    return 0;
  }
  v29 = *((int *)a2 + 8);
  if ((unint64_t)(v29 - 4) <= 0xFFFFFFFFFFFFFFFCLL && *((_QWORD *)a2 + 8) != 10)
  {
    WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, *((_QWORD *)a2 + 8), (uint64_t)&v33);
    if (v34)
      return 0;
    v29 = *((int *)a2 + 8);
  }
  if ((unint64_t)(v29 - 5) <= 0xFFFFFFFFFFFFFFFBLL)
  {
    v30 = *((_QWORD *)a2 + 9);
    if (v30 != 10)
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, v30, (uint64_t)&v33);
      if (v34)
        return 0;
    }
  }
  if (v28 >= 2u)
  {
    result = 46;
    __break(0xC471u);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v17 + 8) + 24))(*(_QWORD *)(v17 + 8), *(_QWORD *)(v25 + 16));
    return 10;
  }
  return result;
}

uint64_t WebCore::jsGPURenderBundleEncoderPrototypeFunction_setVertexBuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSValue v30;
  JSC::VM *v31;
  unint64_t v32;
  int v33;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v31 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v31, "GPURenderBundleEncoder", "setVertexBuffer");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSGPURenderBundleEncoder::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSGPURenderBundleEncoder::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v31, "GPURenderBundleEncoder", "setVertexBuffer");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v30.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v30);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), &v32);
    v14 = v32;
    if (HIDWORD(v32))
    {
      return 0;
    }
    else
    {
      v15 = *((_QWORD *)a2 + 7);
      if ((v15 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v16 = 0;
      }
      else
      {
        v32 = *((_QWORD *)this + 7);
        if ((v15 & 0xFFFE000000000002) != 0)
          goto LABEL_27;
        v17 = *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C) != 0;
        v19 = (char **)(16 * v17);
        if ((_DWORD)v17)
          v20 = v19 == &WebCore::JSGPUBuffer::s_info;
        else
          v20 = 1;
        if (!v20)
        {
          do
          {
            v19 = (char **)v19[2];
            v18 = v19 != 0;
          }
          while (v19 != &WebCore::JSGPUBuffer::s_info && v19 != 0);
        }
        if (!v18 || (v16 = *(_QWORD *)(v15 + 24)) == 0)
        {
LABEL_27:
          WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v32, 1, "buffer", 7, "GPURenderBundleEncoder", 23, v13, "setVertexBuffer", 16, "GPUBuffer", 10);
          return 0;
        }
      }
      v23 = *((int *)a2 + 8);
      if ((unint64_t)(v23 - 4) > 0xFFFFFFFFFFFFFFFCLL)
      {
        v24 = 0;
        v25 = 0;
      }
      else if (*((_QWORD *)a2 + 8) == 10)
      {
        v24 = 0;
        v25 = 0;
      }
      else
      {
        WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, *((_QWORD *)a2 + 8), (uint64_t)&v32);
        if (v33)
          return 0;
        v24 = v32;
        v23 = *((int *)a2 + 8);
        v25 = 1;
      }
      if ((unint64_t)(v23 - 5) > 0xFFFFFFFFFFFFFFFBLL)
      {
        v27 = 0;
        v28 = 0;
      }
      else
      {
        v26 = *((_QWORD *)a2 + 9);
        if (v26 == 10)
        {
          v27 = 0;
          v28 = 0;
        }
        else
        {
          WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, v26, (uint64_t)&v32);
          if (v33)
            return 0;
          v27 = v32;
          v28 = 1;
        }
      }
      if (v16)
        v29 = *(_QWORD *)(v16 + 16);
      else
        v29 = 0;
      (*(void (**)(_QWORD, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(v12 + 8) + 32))(*(_QWORD *)(v12 + 8), v14, v29, v24, v25, v27, v28);
      return 10;
    }
  }
}

uint64_t WebCore::jsGPURenderBundleEncoderPrototypeFunction_draw(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  JSValue v20;
  JSC::VM *v21;
  unint64_t v22;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "GPURenderBundleEncoder", "draw");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSGPURenderBundleEncoder::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSGPURenderBundleEncoder::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "GPURenderBundleEncoder", "draw");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v20);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), &v22);
    v13 = v22;
    if (HIDWORD(v22))
    {
      return 0;
    }
    else
    {
      v14 = *((int *)a2 + 8);
      if ((unint64_t)(v14 - 3) > 0xFFFFFFFFFFFFFFFDLL)
      {
        v15 = 0;
      }
      else if (*((_QWORD *)a2 + 7) == 10)
      {
        v15 = 0;
      }
      else
      {
        WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), &v22);
        if (HIDWORD(v22))
          return 0;
        v15 = v22 | 0x100000000;
        v14 = *((int *)a2 + 8);
      }
      if ((unint64_t)(v14 - 4) > 0xFFFFFFFFFFFFFFFCLL)
      {
        v16 = 0;
      }
      else if (*((_QWORD *)a2 + 8) == 10)
      {
        v16 = 0;
      }
      else
      {
        WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), &v22);
        if (HIDWORD(v22))
          return 0;
        v16 = v22 | 0x100000000;
        v14 = *((int *)a2 + 8);
      }
      if ((unint64_t)(v14 - 5) > 0xFFFFFFFFFFFFFFFBLL)
      {
        v18 = 0;
        goto LABEL_32;
      }
      v17 = *((_QWORD *)a2 + 9);
      if (v17 == 10)
      {
        v18 = 0;
LABEL_32:
        (*(void (**)(_QWORD, unint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v12 + 8) + 40))(*(_QWORD *)(v12 + 8), v13, v15, v16, v18);
        return 10;
      }
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, v17, &v22);
      if (!HIDWORD(v22))
      {
        v18 = v22 | 0x100000000;
        goto LABEL_32;
      }
      return 0;
    }
  }
}

uint64_t WebCore::jsGPURenderBundleEncoderPrototypeFunction_drawIndexed(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSValue v24;
  uint64_t v25;
  uint64_t v26;
  JSC::VM *v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  JSC::VM *v32;
  unint64_t v33;
  unint64_t v34;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v32 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v32, "GPURenderBundleEncoder", "drawIndexed");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSGPURenderBundleEncoder::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSGPURenderBundleEncoder::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v32, "GPURenderBundleEncoder", "drawIndexed");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v24);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), &v34);
    v13 = v34;
    if (HIDWORD(v34))
    {
      return 0;
    }
    else
    {
      v14 = *((int *)a2 + 8);
      if ((unint64_t)(v14 - 3) > 0xFFFFFFFFFFFFFFFDLL)
      {
        v15 = 0;
      }
      else if (*((_QWORD *)a2 + 7) == 10)
      {
        v15 = 0;
      }
      else
      {
        WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), &v34);
        if (HIDWORD(v34))
          return 0;
        v15 = v34 | 0x100000000;
        v14 = *((int *)a2 + 8);
      }
      if ((unint64_t)(v14 - 4) > 0xFFFFFFFFFFFFFFFCLL)
      {
        v16 = 0;
      }
      else if (*((_QWORD *)a2 + 8) == 10)
      {
        v16 = 0;
      }
      else
      {
        v17 = v15;
        WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), &v34);
        if (HIDWORD(v34))
          return 0;
        v16 = v34 | 0x100000000;
        v14 = *((int *)a2 + 8);
        v15 = v17;
      }
      if ((unint64_t)(v14 - 5) > 0xFFFFFFFFFFFFFFFBLL)
      {
        v19 = 0;
      }
      else
      {
        v18 = *((_QWORD *)a2 + 9);
        if (v18 == 10)
        {
          v19 = 0;
        }
        else
        {
          v34 = *((_QWORD *)a2 + 9);
          if (v18 < 0xFFFE000000000000)
          {
            v25 = v16;
            v31 = v15;
            v26 = v12;
            v27 = (JSC::VM *)*((_QWORD *)this + 7);
            if (v18 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v34, this);
              v28 = v29;
            }
            else
            {
              *(_QWORD *)&v28 = v18 - 0x2000000000000;
            }
            if (*((_DWORD *)v27 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v27))
              HIDWORD(v33) = 1;
            else
              WebCore::enforceRange<WebCore::IDLLong>((WTF::StringImpl *)&v33, (uint64_t)this, v28);
            v12 = v26;
            v15 = v31;
            v16 = v25;
          }
          else
          {
            v33 = v18;
          }
          if (HIDWORD(v33))
            return 0;
          v19 = v33 | 0x100000000;
          v14 = *((int *)a2 + 8);
        }
      }
      if ((unint64_t)(v14 - 6) > 0xFFFFFFFFFFFFFFFALL)
      {
        v21 = 0;
        goto LABEL_40;
      }
      v20 = *((_QWORD *)a2 + 10);
      if (v20 == 10)
      {
        v21 = 0;
LABEL_40:
        (*(void (**)(_QWORD, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v12 + 8)
                                                                                             + 48))(*(_QWORD *)(v12 + 8), v13, v15, v16, v19, v21);
        return 10;
      }
      v30 = v16;
      v22 = v15;
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, v20, &v34);
      if (!HIDWORD(v34))
      {
        v21 = v34 | 0x100000000;
        v15 = v22;
        v16 = v30;
        goto LABEL_40;
      }
      return 0;
    }
  }
}

uint64_t WebCore::jsGPURenderBundleEncoderPrototypeFunction_drawIndirect(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v24;
  JSValue v25;
  JSC::VM *v26;
  JSC::VM *v27;
  int v28;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "GPURenderBundleEncoder", "drawIndirect");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSGPURenderBundleEncoder::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSGPURenderBundleEncoder::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "GPURenderBundleEncoder", "drawIndirect");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v27 = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSGPUBuffer::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSGPUBuffer::s_info && v20 != 0);
    }
    if (v19 && (v24 = *(_QWORD *)(v17 + 24)) != 0)
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, *((_QWORD *)a2 + 7), (uint64_t)&v27);
      if (v28)
      {
        return 0;
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD, JSC::VM *))(**(_QWORD **)(v16 + 8) + 56))(*(_QWORD *)(v16 + 8), *(_QWORD *)(v24 + 16), v27);
        return 10;
      }
    }
    else
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v27, 0, "indirectBuffer", 15, "GPURenderBundleEncoder", 23, a8, "drawIndirect", 13, "GPUBuffer", 10);
      return 0;
    }
  }
}

uint64_t WebCore::jsGPURenderBundleEncoderPrototypeFunction_drawIndexedIndirect(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v24;
  JSValue v25;
  JSC::VM *v26;
  JSC::VM *v27;
  int v28;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "GPURenderBundleEncoder", "drawIndexedIndirect");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSGPURenderBundleEncoder::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSGPURenderBundleEncoder::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "GPURenderBundleEncoder", "drawIndexedIndirect");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v27 = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSGPUBuffer::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSGPUBuffer::s_info && v20 != 0);
    }
    if (v19 && (v24 = *(_QWORD *)(v17 + 24)) != 0)
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, *((_QWORD *)a2 + 7), (uint64_t)&v27);
      if (v28)
      {
        return 0;
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD, JSC::VM *))(**(_QWORD **)(v16 + 8) + 64))(*(_QWORD *)(v16 + 8), *(_QWORD *)(v24 + 16), v27);
        return 10;
      }
    }
    else
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v27, 0, "indirectBuffer", 15, "GPURenderBundleEncoder", 23, a8, "drawIndexedIndirect", 20, "GPUBuffer", 10);
      return 0;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore15GPURenderBundleENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore15GPURenderBundleENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore25GPURenderBundleDescriptorENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::jsGPURenderBundleEncoderPrototypeFunction_setBindGroup1Body(WTF::StringImpl **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSGPURenderBundleEncoder *a4)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _BOOL4 v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  void *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  void *v27;
  WTF::StringImpl *v28;
  _QWORD v29[2];
  int v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  char v33;
  WTF::StringImpl *v34;
  WTF::StringImpl **v35;

  WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)this, *((_QWORD *)a2 + 6), &v31);
  v8 = v31;
  if ((unint64_t)v31 >> 32)
    return 0;
  v9 = *((_QWORD *)a2 + 7);
  v10 = this[7];
  v31 = v10;
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    v11 = *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C);
    v12 = *(_DWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C) != 0;
    v13 = (char **)(16 * v11);
    if ((_DWORD)v11)
      v14 = v13 == &WebCore::JSGPUBindGroup::s_info;
    else
      v14 = 1;
    if (!v14)
    {
      do
      {
        v13 = (char **)v13[2];
        v12 = v13 != 0;
      }
      while (v13 != &WebCore::JSGPUBindGroup::s_info && v13 != 0);
    }
    if (v12)
    {
      v17 = *(_QWORD *)(v9 + 24);
      if (v17)
      {
        if ((unint64_t)(*((int *)a2 + 8) - 4) >= 0xFFFFFFFFFFFFFFFDLL
          || (v18 = *((_QWORD *)a2 + 8), v18 == 10))
        {
          v19 = 0;
          v30 = 0;
          v20 = 0;
        }
        else
        {
          v34 = v10;
          if ((v18 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v18 + 5) <= 0x16u)
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            JSC::throwTypeError();
            v26 = v31;
            v31 = 0;
            if (v26)
            {
              if (*(_DWORD *)v26 == 2)
                WTF::StringImpl::destroy(v26, v25);
              else
                *(_DWORD *)v26 -= 2;
            }
            v16 = 0;
            v23 = 1;
            v30 = 1;
            goto LABEL_22;
          }
          v31 = 0;
          v32 = 0;
          v35 = &v31;
          JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnforceRangeAdaptor<WebCore::IDLUnsignedLong>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>((JSC::JSGlobalObject *)this, v18, (uint64_t *)&v35);
          if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10))
          {
            v28 = v31;
            v30 = 1;
            if (v31)
            {
              v31 = 0;
              LODWORD(v32) = 0;
              WTF::fastFree(v28, v27);
            }
            v16 = 0;
            v23 = 1;
            goto LABEL_22;
          }
          v19 = v31;
          v20 = v32;
          v30 = 0;
        }
        v29[0] = 0;
        v29[1] = 0;
        v31 = v19;
        v32 = v20;
        v33 = 1;
        (*(void (**)(_QWORD, WTF::StringImpl *, _QWORD, WTF::StringImpl **))(**((_QWORD **)a3 + 1) + 72))(*((_QWORD *)a3 + 1), v8, *(_QWORD *)(v17 + 8), &v31);
        if (v33)
        {
          v22 = v31;
          if (v31)
          {
            v31 = 0;
            LODWORD(v32) = 0;
            WTF::fastFree(v22, v21);
          }
        }
        v23 = 0;
        v16 = 10;
LABEL_22:
        ((void (*)(WTF::StringImpl **, _QWORD *))off_1E3283620[v23])(&v31, v29);
        return v16;
      }
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v31, 1, "bindGroup", 10, "GPURenderBundleEncoder", 23, v7, "setBindGroup", 13, "GPUBindGroup", 13);
  return 0;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS_8optionalIN7WebCore16GPUTextureFormatEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore12GPUColorDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore12GPUColorDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore12GPUColorDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOST_EEEDcSL_DpT0_(WTF *result, _DWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1E3283930[v5])(&v9, v4);
LABEL_7:
    *(_DWORD *)(v4 + 32) = -1;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    LODWORD(v8) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    *(_DWORD *)(v4 + 8) = v8;
    LODWORD(v8) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    *(_DWORD *)(v4 + 12) = v8;
    *(_DWORD *)(v4 + 32) = 0;
    return result;
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  a2[2] = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  a2[3] = v7;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore12GPUColorDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOST_EEEDcSL_DpT0_(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  char v9;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      result = *(__n128 *)a3;
      v7 = *(_OWORD *)(a3 + 16);
      *a2 = *(_OWORD *)a3;
      a2[1] = v7;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E3283930[v5])(&v9, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  result = *(__n128 *)a3;
  v8 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 16) = v8;
  *(_DWORD *)(v4 + 32) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6VectorIdLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEN7WebCore12GPUColorDictEEEENSE_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3283930[v3])(&v5, a2);
  *(_DWORD *)(a2 + 32) = -1;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore35GPURenderPassDepthStencilAttachmentENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int v3;
  unsigned int v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    do
    {
      v3 = __ldaxr(result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, result));
    if (!v4)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore28GPURenderPassTimestampWritesENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int v3;
  unsigned int v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    do
    {
      v3 = __ldaxr(result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, result));
    if (!v4)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS_8optionalIN7WebCore28GPURenderPassColorAttachmentEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WTF::Vector<std::optional<WebCore::GPURenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2, a2);
}

WTF::StringImpl **WTF::RefCounted<WebCore::GPUQuerySet>::deref(WTF::StringImpl **this, WTF::StringImpl *a2)
{
  WTF *v2;
  WTF::StringImpl *v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = (WTF *)this;
  if (*(_DWORD *)this == 1)
  {
    v3 = this[3];
    *((_QWORD *)v2 + 3) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = (_DWORD *)*((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = 0;
    if (v4)
    {
      if (v4[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      else
        --v4[2];
    }
    v5 = *((_QWORD *)v2 + 1);
    if (v5)
    {
      *(_QWORD *)(v5 + 8) = 0;
      v6 = (unsigned int *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v6)
      {
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v6);
          WTF::fastFree((WTF *)v6, a2);
        }
      }
    }
    else
    {
      *((_QWORD *)v2 + 1) = 0;
    }
    return (WTF::StringImpl **)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WebCore::JSGPUComputePipeline::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

WTF *WTF::RefCounted<WebCore::GPUInternalError>::deref(WTF *this, WTF::StringImpl *a2)
{
  WTF *v2;
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = (WTF *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
      {
        v5 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
        *((_QWORD *)v3 + 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
        WTF::fastFree(v3, a2);
      }
      else
      {
        --*(_DWORD *)v3;
      }
    }
    v4 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WebCore::JSGPUDevice::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore15DOMPromiseProxyINS2_12IDLInterfaceINS2_17GPUDeviceLostInfoEEEE7promiseERN3JSC14JSGlobalObjectERNS2_17JSDOMGlobalObjectEEUlRT_E_vJRNS2_15DeferredPromiseEEE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF *v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 24))
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(_DWORD *)(v2 + 16))
  {
LABEL_6:
    a2 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::GPUDeviceLostInfo>>(a2, v4);
  }
  v4 = *(WTF **)v2;
  return WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::GPUDeviceLostInfo>>(a2, v4);
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::GPUDeviceLostInfo>>(uint64_t result, WTF *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::wrap<WebCore::GPUDeviceLostInfo>((uint64_t)v6, **(_QWORD **)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::GPUBindGroupLayout,WTF::RawPtrTraits<WebCore::GPUBindGroupLayout>,WTF::DefaultRefDerefTraits<WebCore::GPUBindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = *(_QWORD *)a1 + 8 * v3;
    do
    {
      v6 = *(WTF **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
        {
          v7 = (_DWORD *)*((_QWORD *)v6 + 2);
          *((_QWORD *)v6 + 2) = 0;
          if (v7)
          {
            if (v7[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
            else
              --v7[2];
          }
          v8 = *((_QWORD *)v6 + 1);
          if (v8)
          {
            *(_QWORD *)(v8 + 8) = 0;
            v9 = (unsigned int *)*((_QWORD *)v6 + 1);
            *((_QWORD *)v6 + 1) = 0;
            if (v9)
            {
              do
              {
                v10 = __ldaxr(v9);
                v11 = v10 - 1;
              }
              while (__stlxr(v11, v9));
              if (!v11)
              {
                atomic_store(1u, v9);
                WTF::fastFree((WTF *)v9, a2);
              }
            }
          }
          else
          {
            *((_QWORD *)v6 + 1) = 0;
          }
          WTF::fastFree(v6, a2);
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
      v4 = (WTF *)((char *)v4 + 8);
    }
    while (v4 != (WTF *)v5);
  }
  v12 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v12, a2);
  }
  return a1;
}

unint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * v5));
      v6[2] = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        v11 = (unsigned int **)((char *)v7 + 16 * v8);
        v12 = (unsigned int **)v7;
        do
        {
          v13 = *v12;
          v14 = v12[1];
          *v12 = 0;
          *(_QWORD *)v10 = v13;
          *((_QWORD *)v10 + 1) = v14;
          result = *v12;
          *v12 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
            else
              *result -= 2;
          }
          v12 += 2;
          v10 += 4;
        }
        while (v12 != v11);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          v6[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

uint64_t WebCore::JSGPUDeviceLostInfo::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSGPUExternalTexture::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::Converter<WebCore::IDLRecord<WebCore::IDLUSVString,WebCore::IDLDouble>>::convertRecord<>@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  WTF::StringImpl **v6;
  WTF *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSC::VM *v16;
  double v17;
  WTF::StringImpl *v18;
  int v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  double *v23;
  WTF::StringImpl *v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  JSC::VM *v30;
  double v31;
  int v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl **v37;
  WTF::StringImpl *v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF *v45;
  WTF::StringImpl *v47[2];
  char v48;
  WTF::StringImpl *v49;
  _QWORD v50[2];
  unint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  __int16 v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  uint64_t v63;
  JSC::VM *v64;
  __int16 v65;
  WTF::StringImpl **v66;
  WTF *v67;
  uint64_t v68;
  JSC::VM *v69;
  WTF::StringImpl *v70;

  v4 = *(JSC::VM **)(result + 56);
  v69 = v4;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
    return result;
  }
  v6 = (WTF::StringImpl **)result;
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0 || a2[5] <= 0x16u)
  {
    result = JSC::throwTypeError();
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  v67 = 0;
  v68 = 0;
  v66 = 0;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)v7 = 1;
  *((_QWORD *)v7 + 1) = (char *)v7 + 24;
  *((_QWORD *)v7 + 2) = 20;
  v62 = v7;
  v63 = 0;
  v64 = v4;
  v65 = 259;
  result = (*(uint64_t (**)(unsigned __int8 *, WTF::StringImpl **, WTF **, _QWORD))(16
                                                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                                                            + 0x78))(a2, v6, &v62, 0);
  if (!*((_DWORD *)v4 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v4), (result & 1) == 0))
  {
    v9 = *((unsigned int *)v62 + 5);
    if (!(_DWORD)v9)
    {
LABEL_76:
      v32 = 0;
      *(_QWORD *)a3 = v67;
      v33 = v68;
      v67 = 0;
      v68 = 0;
      *(_QWORD *)(a3 + 8) = v33;
      goto LABEL_77;
    }
    v10 = (unint64_t *)*((_QWORD *)v62 + 1);
    v11 = 8 * v9;
    while (1)
    {
      v51 = 0xFFFFFFFF00000000;
      v52 = a2;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v56 = 2;
      v57 = 0;
      LOBYTE(v58) = 0;
      v59 = 0;
      v60 = 0;
      v61 = 0;
      result = (*(uint64_t (**)(unsigned __int8 *, WTF::StringImpl **, unint64_t, _QWORD *))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x68))(a2, v6, *v10, v50);
      v12 = result;
      if (*((_DWORD *)v4 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
        if ((_DWORD)result)
        {
          v25 = 1;
          *(_DWORD *)(a3 + 16) = 1;
          goto LABEL_44;
        }
      }
      if (!v12 || (v51 & 4) != 0)
        goto LABEL_43;
      v13 = *v10;
      if (!*v10)
        goto LABEL_14;
      if ((*(_BYTE *)(v13 + 16) & 0x20) == 0)
        break;
      v47[0] = v6[7];
      JSC::throwTypeError();
      v70 = 0;
LABEL_15:
      WTF::replaceUnpairedSurrogatesWithReplacementCharacter();
      v14 = v70;
      v70 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v8);
        else
          *(_DWORD *)v14 -= 2;
      }
      if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
        goto LABEL_71;
      if (v57)
      {
        v29 = JSC::JSObject::get((JSC::Structure *)a2, (JSC::JSGlobalObject *)v6, *v10);
      }
      else
      {
        if (HIBYTE(v55) == 1)
        {
          v15 = (WTF::StringImpl *)v50[0];
          goto LABEL_22;
        }
        if (HIBYTE(v55) == 2)
          v29 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v50, (JSC::JSGlobalObject *)v6);
        else
          v29 = JSC::PropertySlot::customGetter();
      }
      v15 = (WTF::StringImpl *)v29;
LABEL_22:
      if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
        goto LABEL_71;
      v47[0] = v15;
      v16 = v6[7];
      v70 = v16;
      if ((unint64_t)v15 >= 0xFFFE000000000000)
      {
        v17 = (double)(int)v15;
      }
      else if ((unint64_t)v15 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        v30 = v16;
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v47, (JSC::JSGlobalObject *)v6);
        v16 = v30;
        v17 = v31;
      }
      else
      {
        *(_QWORD *)&v17 = (char *)v15 - 0x2000000000000;
      }
      if (*((_DWORD *)v16 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
        goto LABEL_71;
      if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        JSC::throwTypeError();
LABEL_71:
        v26 = 0;
        v25 = 1;
        *(_DWORD *)(a3 + 16) = 1;
        goto LABEL_39;
      }
      v18 = v49;
      if (v49 && (*((_BYTE *)v49 + 16) & 4) == 0)
      {
        v70 = (WTF::StringImpl *)HIDWORD(v68);
        WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>((uint64_t *)&v66, &v49, (const WTF::StringImpl *)&v70, (uint64_t)v47);
        if (!v48)
        {
          v28 = *((_QWORD *)v47[0] + 1);
          if (v28 >= HIDWORD(v68))
          {
LABEL_122:
            __break(0xC471u);
            JUMPOUT(0x194B81500);
          }
          v26 = 0;
          *((double *)v67 + 2 * v28 + 1) = v17;
          v25 = 5;
          goto LABEL_39;
        }
        v18 = v49;
      }
      v49 = 0;
      v47[0] = v18;
      v47[1] = *(WTF::StringImpl **)&v17;
      v19 = HIDWORD(v68);
      if (HIDWORD(v68) == (_DWORD)v68)
      {
        v20 = (uint64_t *)WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v67, HIDWORD(v68) + 1, (unint64_t)v47);
        v19 = HIDWORD(v68);
        v21 = (_QWORD *)((char *)v67 + 16 * HIDWORD(v68));
        v22 = *v20;
        *v20 = 0;
        *v21 = v22;
        v21[1] = v20[1];
      }
      else
      {
        v47[0] = 0;
        v23 = (double *)((char *)v67 + 16 * HIDWORD(v68));
        *(_QWORD *)v23 = v18;
        v23[1] = v17;
      }
      HIDWORD(v68) = v19 + 1;
      v24 = v47[0];
      v47[0] = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v8);
        else
          *(_DWORD *)v24 -= 2;
      }
      v25 = 0;
      v26 = 1;
LABEL_39:
      result = (uint64_t)v49;
      v49 = 0;
      if (!result)
        goto LABEL_42;
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
LABEL_42:
        if (!v26)
          goto LABEL_44;
LABEL_43:
        v25 = 0;
        goto LABEL_44;
      }
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
      if (v26)
        goto LABEL_43;
LABEL_44:
      if (v59)
      {
        v27 = *(_DWORD *)(v58 + 4);
        if (!v27)
          goto LABEL_122;
        *(_DWORD *)(v58 + 4) = v27 - 1;
      }
      if (v25 != 5 && v25)
        goto LABEL_78;
      ++v10;
      v11 -= 8;
      if (!v11)
        goto LABEL_76;
    }
    *(_DWORD *)v13 += 2;
LABEL_14:
    v70 = (WTF::StringImpl *)v13;
    goto LABEL_15;
  }
  v32 = 1;
LABEL_77:
  *(_DWORD *)(a3 + 16) = v32;
LABEL_78:
  if (v63)
    result = WTF::fastFree((WTF *)(v63 - 16), v8);
  v34 = v62;
  v62 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 1)
    {
      v41 = *((unsigned int *)v34 + 5);
      if ((_DWORD)v41)
      {
        v42 = (WTF::StringImpl **)*((_QWORD *)v34 + 1);
        v43 = 8 * v41;
        do
        {
          v44 = *v42;
          *v42 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy(v44, v8);
            else
              *(_DWORD *)v44 -= 2;
          }
          ++v42;
          v43 -= 8;
        }
        while (v43);
      }
      v45 = (WTF *)*((_QWORD *)v34 + 1);
      if ((WTF *)((char *)v34 + 24) != v45 && v45 != 0)
      {
        *((_QWORD *)v34 + 1) = 0;
        *((_DWORD *)v34 + 4) = 0;
        WTF::fastFree(v45, v8);
      }
      result = WTF::fastFree(v34, v8);
    }
    else
    {
      --*(_DWORD *)v34;
    }
  }
  v35 = (uint64_t)v66;
  if (v66)
  {
    v36 = *((unsigned int *)v66 - 1);
    if ((_DWORD)v36)
    {
      v37 = v66;
      do
      {
        v38 = *v37;
        if (*v37 != (WTF::StringImpl *)-1)
        {
          *v37 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, v8);
            else
              *(_DWORD *)v38 -= 2;
          }
        }
        v37 += 2;
        --v36;
      }
      while (v36);
    }
    result = WTF::fastFree((WTF *)(v35 - 16), v8);
  }
  v39 = v67;
  if (HIDWORD(v68))
  {
    v40 = 16 * HIDWORD(v68);
    do
    {
      result = *(_QWORD *)v39;
      *(_QWORD *)v39 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
        else
          *(_DWORD *)result -= 2;
      }
      v39 = (WTF *)((char *)v39 + 16);
      v40 -= 16;
    }
    while (v40);
    v39 = v67;
  }
  if (v39)
  {
    v67 = 0;
    LODWORD(v68) = 0;
    return WTF::fastFree(v39, v8);
  }
  return result;
}

uint64_t WebCore::Converter<WebCore::IDLUnion<WebCore::IDLSequence<WebCore::IDLEnforceRangeAdaptor<WebCore::IDLUnsignedLong>>,WebCore::IDLDictionary<WebCore::GPUOrigin3DDict>>>::convert(uint64_t a1, JSC *a2, uint64_t this)
{
  JSC::VM *v6;
  uint64_t result;
  int v8;
  int v9;
  JSC::JSObject *v10;
  JSC::VM *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  JSC::VM *v15;
  JSC::JSObject *v16;
  void *v17;
  WTF *v18;
  WTF **v19;
  uint64_t v20;
  int v21;
  JSC::VM *v22;
  WTF *v23;
  uint64_t v24;

  v6 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v22 = v6;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_2;
  if ((this & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(this + 5) < 0x17u)
  {
    result = JSC::throwTypeError();
LABEL_12:
    v8 = 1;
LABEL_13:
    *(_DWORD *)(a1 + 32) = v8;
    return result;
  }
  v10 = (JSC::JSObject *)JSC::iteratorMethod(a2, (JSC::JSGlobalObject *)this, (JSC::JSObject *)this);
  if (*((_DWORD *)v6 + 20))
  {
    v15 = v6;
    v16 = v10;
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v15);
    v10 = v16;
    if ((_DWORD)result)
      goto LABEL_12;
  }
  if (v10 == (JSC::JSObject *)10)
  {
LABEL_2:
    result = WebCore::convertDictionary<WebCore::GPUOrigin3DDict>((unint64_t)&v19, a2, (JSC::JSCell *)this);
    v8 = 1;
    if (!HIDWORD(v20))
    {
      v9 = v20;
      *(_QWORD *)(a1 + 8) = v19;
      *(_DWORD *)(a1 + 16) = v9;
      *(_DWORD *)(a1 + 24) = 1;
      v8 = 0;
    }
    goto LABEL_13;
  }
  v23 = 0;
  v24 = 0;
  v11 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v19 = &v23;
  JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnforceRangeAdaptor<WebCore::IDLUnsignedLong>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,JSC::JSValue,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::JSValue)#1}>(a2, this, v10, (uint64_t *)&v19);
  if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11))
  {
    v18 = v23;
    v21 = 1;
    if (v23)
    {
      v23 = 0;
      LODWORD(v24) = 0;
      WTF::fastFree(v18, v17);
    }
    v12 = 1;
    v13 = 1;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v21 = 0;
    v14 = v24;
    v19 = 0;
    v20 = 0;
    *(_QWORD *)(a1 + 8) = v23;
    *(_QWORD *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 24) = 0;
  }
  *(_DWORD *)(a1 + 32) = v12;
  return ((uint64_t (*)(WTF **, WTF ***))off_1E3283620[v13])(&v23, &v19);
}

uint64_t WebCore::JSGPUInternalError::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSGPUOutOfMemoryError::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSGPUPipelineError::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSGPUPipelineLayout::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

char *WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::GPUBindGroupLayout>>::convert(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  WTF *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  WTF *v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;

  v21 = (WTF *)*((_QWORD *)result + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return (char *)JSC::throwTypeError();
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSGPUBindGroupLayout::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSGPUBindGroupLayout::s_info && v6 != 0);
  }
  if (!v5)
    return (char *)JSC::throwTypeError();
  v9 = *(WTF **)(a2 + 24);
  if (!v9)
    return (char *)JSC::throwTypeError();
  ++*(_DWORD *)v9;
  v21 = v9;
  v10 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a3 + 8))
  {
    result = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v10 + 1, (unint64_t)&v21);
    v12 = *(unsigned int *)(a3 + 12);
    v13 = *(char **)a3;
    v14 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    *(_QWORD *)&v13[8 * v12] = v14;
    v15 = v21;
    *(_DWORD *)(a3 + 12) = v12 + 1;
    v21 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
      {
        v16 = (_DWORD *)*((_QWORD *)v15 + 2);
        *((_QWORD *)v15 + 2) = 0;
        if (v16)
        {
          if (v16[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
          else
            --v16[2];
        }
        v17 = *((_QWORD *)v15 + 1);
        if (v17)
        {
          *(_QWORD *)(v17 + 8) = 0;
          v18 = (unsigned int *)*((_QWORD *)v15 + 1);
          *((_QWORD *)v15 + 1) = 0;
          if (v18)
          {
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              atomic_store(1u, v18);
              WTF::fastFree((WTF *)v18, v11);
            }
          }
        }
        else
        {
          *((_QWORD *)v15 + 1) = 0;
        }
        return (char *)WTF::fastFree(v15, v11);
      }
      else
      {
        --*(_DWORD *)v15;
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v10) = v9;
    *(_DWORD *)(a3 + 12) = v10 + 1;
  }
  return result;
}

uint64_t WebCore::JSGPUQuerySet::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSGPUQueue::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSGPURenderBundle::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSGPURenderBundleEncoder::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLNullable<WebCore::IDLEnumeration<WebCore::GPUTextureFormat>>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<std::optional<WebCore::GPUTextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  JSValue v7;
  int i;
  unsigned int v9;
  unint64_t IndexQuickly;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v6 = *((_QWORD *)a1 + 7);
  if (JSC::getIterationMode() == 2)
  {
    for (i = 1; ; ++i)
    {
      v9 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v9)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
      if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
        break;
      v16 = v6;
      WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLNullable<WebCore::IDLEnumeration<WebCore::GPUTextureFormat>>>::convert((int)&v16, a1, IndexQuickly, *a3);
      if (*(_QWORD *)(v6 + 16))
      {
        v14 = JSC::JSArrayIterator::create();
        v15 = i | 0xFFFE000000000000;
        if (i < 0)
          v15 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v14 + 16) = v15;
        goto LABEL_27;
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, v7);
    if (!*(_DWORD *)(v6 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) == 0)
    {
      while (1)
      {
        v11 = JSC::iteratorStep();
        if (*(_QWORD *)(v6 + 16) || v11 == 6)
          break;
        v13 = JSC::iteratorValue();
        if (*(_DWORD *)(v6 + 80))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
            break;
        }
        v16 = v6;
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLNullable<WebCore::IDLEnumeration<WebCore::GPUTextureFormat>>>::convert((int)&v16, a1, v13, *a3);
        if (*(_QWORD *)(v6 + 16))
        {
LABEL_27:
          JSC::iteratorClose();
          return;
        }
      }
    }
  }
}

void WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLNullable<WebCore::IDLEnumeration<WebCore::GPUTextureFormat>>>::convert(int a1, JSC::JSGlobalObject *a2, unint64_t this, uint64_t a4)
{
  __int16 v5;
  unsigned __int16 v6;
  uint64_t v7;
  __int16 v8;
  JSC::VM *v9;

  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v5 = 0;
  }
  else
  {
    v9 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v6 = WebCore::parseEnumeration<WebCore::GPUTextureFormat>(a2, this);
    if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
      return;
    if (v6 <= 0xFFu)
    {
      JSC::throwTypeError();
      return;
    }
    v5 = v6 | 0x100;
  }
  v8 = v5;
  v7 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v7 == *(_DWORD *)(a4 + 8))
    *(_WORD *)(*(_QWORD *)a4 + 2 * *(unsigned int *)(a4 + 12)) = *(_WORD *)WTF::Vector<std::optional<WebCore::GPUTextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v7 + 1, (unint64_t)&v8);
  else
    *(_WORD *)(*(_QWORD *)a4 + 2 * v7) = v5;
  ++*(_DWORD *)(a4 + 12);
}

char *WTF::Vector<std::optional<WebCore::GPUTextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  void *v21;
  uint64_t v22;
  WTF *v23;
  __int16 v24;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 2 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v14 = *(WTF **)a1;
        return (char *)v14 + 2 * ((uint64_t)(v3 - (_QWORD)v5) >> 1);
      }
      if (!(v10 >> 31))
      {
        v11 = WTF::fastMalloc((WTF *)(2 * v10));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        do
        {
          *(_WORD *)(v11 + v13) = *(_WORD *)((char *)v5 + v13);
          v13 += 2;
        }
        while (2 * v6 != v13);
        v14 = *(WTF **)a1;
        if (v5)
        {
          if (v14 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v14 = *(WTF **)a1;
        }
        return (char *)v14 + 2 * ((uint64_t)(v3 - (_QWORD)v5) >> 1);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x194B82500);
    }
  }
  v15 = *(unsigned int *)(a1 + 8);
  v16 = v15 + (v15 >> 2);
  if (v16 >= 0x10)
    v17 = v16 + 1;
  else
    v17 = 16;
  if (v17 <= a2)
    v18 = a2;
  else
    v18 = v17;
  if (v18 > v15)
  {
    if (v18 >> 31)
      goto LABEL_35;
    v19 = *(unsigned int *)(a1 + 12);
    v20 = (_WORD *)WTF::fastMalloc((WTF *)(2 * v18));
    *(_DWORD *)(a1 + 8) = v18;
    *(_QWORD *)a1 = v20;
    if ((_DWORD)v19)
    {
      v22 = 2 * v19;
      v23 = v5;
      do
      {
        v24 = *(_WORD *)v23;
        v23 = (WTF *)((char *)v23 + 2);
        *v20++ = v24;
        v22 -= 2;
      }
      while (v22);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v21);
    }
  }
  return (char *)v3;
}

uint64_t WebCore::Converter<WebCore::IDLUnion<WebCore::IDLSequence<WebCore::IDLDouble>,WebCore::IDLDictionary<WebCore::GPUColorDict>>>::convert@<X0>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *a2@<X0>, JSC::JSObject *a3@<X2>, uint64_t a4@<X8>)
{
  JSC::JSCell *v4;
  JSC::JSGlobalObject *v5;
  JSC::VM *v7;
  uint64_t result;
  int v9;
  __int128 v10;
  JSC::JSObject *v11;
  uint64_t v12;
  uint64_t v13;
  JSC::VM *v14;
  JSC::JSObject *v15;
  __int128 v16;
  __int128 v17;
  int v18;
  JSC::VM *v19;
  char v20;

  v4 = this;
  v5 = a2;
  v7 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v19 = v7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_2;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || *((unsigned __int8 *)this + 5) < 0x17u)
  {
    result = JSC::throwTypeError();
LABEL_12:
    v9 = 1;
LABEL_13:
    *(_DWORD *)(a4 + 48) = v9;
    return result;
  }
  v11 = (JSC::JSObject *)JSC::iteratorMethod(a2, this, a3);
  if (*((_DWORD *)v7 + 20))
  {
    v14 = v7;
    v15 = v11;
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v14);
    v11 = v15;
    if ((_DWORD)result)
      goto LABEL_12;
  }
  a2 = v5;
  this = v4;
  if (v11 == (JSC::JSObject *)10)
  {
LABEL_2:
    result = WebCore::convertDictionary<WebCore::GPUColorDict>(this, a2, (uint64_t)&v16);
    v9 = 1;
    if (!v18)
    {
      v10 = v17;
      *(_OWORD *)(a4 + 8) = v16;
      *(_OWORD *)(a4 + 24) = v10;
      *(_DWORD *)(a4 + 40) = 1;
      v9 = 0;
    }
    goto LABEL_13;
  }
  result = (uint64_t)WebCore::Detail::NumericSequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLDouble>>::convert(v4, v5, v11, (uint64_t)&v16);
  v12 = v17;
  if (!(_DWORD)v17)
  {
    *(_QWORD *)(a4 + 8) = v16;
    v13 = *((_QWORD *)&v16 + 1);
    v16 = 0uLL;
    *(_QWORD *)(a4 + 16) = v13;
    *(_DWORD *)(a4 + 40) = 0;
    *(_DWORD *)(a4 + 48) = 0;
    return ((uint64_t (*)(char *, __int128 *))off_1E32839C8[v12])(&v20, &v16);
  }
  *(_DWORD *)(a4 + 48) = 1;
  if ((_DWORD)v12 != -1)
    return ((uint64_t (*)(char *, __int128 *))off_1E32839C8[v12])(&v20, &v16);
  return result;
}

WTF *WebCore::Detail::NumericSequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLDouble>>::convert@<X0>(JSC::JSArray *this@<X1>, JSC::JSGlobalObject *a2@<X0>, JSC::JSObject *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  char v9;
  void *v10;
  WTF *result;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *((_QWORD *)a2 + 7);
  if (*((_BYTE *)this + 5) != 36 || (JSC::JSArray::isIteratorProtocolFastAndNonObservable(this) & 1) == 0)
    return (WTF *)WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDouble>>::convert(a2, (uint64_t)this, a3, a4);
  if ((*((_BYTE *)this + 4) & 0xE) != 0)
    v8 = *(_DWORD *)(*((_QWORD *)this + 1) - 8);
  else
    v8 = 0;
  v12 = 0;
  v13 = 0;
  if ((WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>((uint64_t)&v12, v8) & 1) != 0)
  {
    v9 = *((_BYTE *)this + 4);
    if ((v9 & 0xC) == 4)
      WebCore::Detail::NumericSequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLDouble>>::convertArray((uint64_t)this, v8, v9 & 0xE, (uint64_t)&v12, a4);
    else
      WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDouble>>::convert(a2, (uint64_t)this, a3, &v12, a4);
  }
  else
  {
    JSC::throwTypeError();
    *(_DWORD *)(a4 + 16) = 1;
  }
  result = v12;
  if (v12)
  {
    v12 = 0;
    LODWORD(v13) = 0;
    return (WTF *)WTF::fastFree(result, v10);
  }
  return result;
}

uint64_t WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDouble>>::convert@<X0>(JSC::JSGlobalObject *a1@<X0>, uint64_t a2@<X1>, JSC::JSObject *a3@<X2>, uint64_t a4@<X8>)
{
  JSC::VM *v5;
  uint64_t result;
  void *v7;
  WTF *v8;
  uint64_t v9;
  WTF **v10;

  v8 = 0;
  v9 = 0;
  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v10 = &v8;
  result = JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDouble>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,JSC::JSValue,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::JSValue)#1}>(a1, a2, a3, (uint64_t *)&v10);
  if (*((_DWORD *)v5 + 20) && (result = JSC::VM::hasExceptionsAfterHandlingTraps(v5), (result & 1) != 0))
  {
    result = (uint64_t)v8;
    *(_DWORD *)(a4 + 16) = 1;
    if (result)
    {
      v8 = 0;
      LODWORD(v9) = 0;
      return WTF::fastFree((WTF *)result, v7);
    }
  }
  else
  {
    *(_QWORD *)a4 = v8;
    *(_QWORD *)(a4 + 8) = v9;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDouble>>::convert@<X0>(JSC::JSGlobalObject *a1@<X0>, uint64_t a2@<X1>, JSC::JSObject *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  JSC::VM *v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  _QWORD *v11;

  v7 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v11 = a4;
  result = JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDouble>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,JSC::JSValue,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::JSValue)#1}>(a1, a2, a3, (uint64_t *)&v11);
  if (*((_DWORD *)v7 + 20) && (result = JSC::VM::hasExceptionsAfterHandlingTraps(v7), (result & 1) != 0))
  {
    v9 = 1;
  }
  else
  {
    v9 = 0;
    *(_QWORD *)a5 = *a4;
    v10 = a4[1];
    *a4 = 0;
    a4[1] = 0;
    *(_QWORD *)(a5 + 8) = v10;
  }
  *(_DWORD *)(a5 + 16) = v9;
  return result;
}

uint64_t WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  void *v4;
  uint64_t v5;
  void *v6;

  if (*(unsigned int *)(a1 + 8) >= a2)
    return 1;
  v4 = *(void **)a1;
  v5 = *(unsigned int *)(a1 + 12);
  result = WTF::VectorBufferBase<double,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(a1, a2);
  if ((_DWORD)result)
  {
    memcpy(*(void **)a1, v4, 8 * v5);
    if (v4)
    {
      if (*(void **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v6);
    }
    return 1;
  }
  return result;
}

uint64_t WTF::VectorBufferBase<double,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(uint64_t a1, unint64_t a2)
{
  int v2;
  uint64_t v5;

  if (a2 >> 29)
    return 0;
  v2 = a2;
  WTF::tryFastMalloc((WTF *)(8 * a2));
  if (!v5)
    return 0;
  *(_DWORD *)(a1 + 8) = v2;
  *(_QWORD *)a1 = v5;
  return 1;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDouble>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,JSC::JSValue,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSObject *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t result;
  JSValue v10;
  int i;
  unsigned int v12;
  unint64_t IndexQuickly;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v8 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v12 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v12)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
      if (*(_DWORD *)(v8 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8);
        if ((result & 1) != 0)
          break;
      }
      v18 = v8;
      result = WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDouble>::convert((int)&v18, a1, IndexQuickly, *a4);
      if (*(_QWORD *)(v8 + 16))
      {
        v16 = JSC::JSArrayIterator::create();
        v17 = i | 0xFFFE000000000000;
        if (i < 0)
          v17 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v16 + 16) = v17;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, a3, v10);
    if (!*(_DWORD *)(v8 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v8 + 16) || result == 6)
          break;
        v15 = JSC::iteratorValue();
        if (*(_DWORD *)(v8 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8);
          if ((result & 1) != 0)
            break;
        }
        v18 = v8;
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDouble>::convert((int)&v18, a1, v15, *a4);
        if (*(_QWORD *)(v8 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

JSC::JSGlobalObject *WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLNullable<WebCore::IDLDictionary<WebCore::GPURenderPassColorAttachment>>>::convert(JSC::JSGlobalObject *result, JSC::JSCell *this, uint64_t a3)
{
  JSC::JSGlobalObject *v4;
  uint64_t Object;
  uint64_t v6;
  WTF::StringImpl *v7;
  JSC::JSObject *v8;
  JSC::JSCell *v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  uint64_t (*v13)();
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  JSC::VM *v27;
  unsigned __int16 v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  JSC::VM *v47;
  unsigned __int16 v48;
  WTF::StringImpl *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  int v59;
  __int16 v60;
  int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  WTF *v74;
  unsigned int v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  __int128 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  WTF *v84;
  int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  _BOOL4 v92;
  uint64_t v93;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  WTF *v103;
  int v104;
  __int128 v105;
  WTF *v106;
  char v107[8];
  int v108;
  int v109;
  unsigned __int8 v110;
  __int16 v111;
  int v112;
  JSC::VM *v113;
  __int128 v114;
  WTF *v115;
  _BYTE v116[32];
  int v117;
  char v118;
  __int16 v119;
  _BYTE v120[24];
  WTF *v121;
  _BYTE v122[24];
  int v123;
  int v124;
  __int16 v125;
  __int16 v126;
  char v127;
  int v128;
  __int128 v129;
  WTF *v130;
  _BYTE v131[16];
  unsigned int v132;
  int v133;
  unsigned int v134;
  unsigned __int8 v135;
  __int16 v136;
  unsigned __int8 v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v120[8] = 0;
    v127 = 0;
    v128 = 0;
    LOBYTE(v129) = 0;
    v137 = 0;
    goto LABEL_148;
  }
  v4 = result;
  v113 = (JSC::VM *)*((_QWORD *)result + 7);
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = (JSC::JSGlobalObject *)JSC::throwTypeError();
    v55 = 1;
    v112 = 1;
LABEL_98:
    v128 = 1;
    goto LABEL_139;
  }
  v6 = Object;
  *(_QWORD *)v120 = 0;
  v120[8] = 0;
  v120[12] = 0;
  *(_QWORD *)&v120[16] = 0;
  LOBYTE(v121) = 0;
  LOBYTE(v124) = 0;
  v125 = 0;
  WTF::AtomStringImpl::addLiteral();
  v9 = (JSC::JSCell *)JSC::JSObject::get((JSC::Structure *)v6, v4, v129);
  if ((_QWORD)v129)
  {
    if (*(_DWORD *)v129 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v129, v7);
    else
      *(_DWORD *)v129 -= 2;
  }
  if (*((_DWORD *)v113 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v113) & 1) != 0)
    goto LABEL_83;
  if (v9 == (JSC::JSCell *)10)
  {
LABEL_27:
    WTF::AtomStringImpl::addLiteral();
    v15 = (WTF::StringImpl *)v129;
    v17 = JSC::JSObject::get((JSC::Structure *)v6, v4, v129);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (*((_DWORD *)v113 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v113) & 1) != 0)
      goto LABEL_83;
    if (v17 != 10)
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(v4, v17, &v129);
      v18 = 1;
      if (DWORD1(v129))
      {
LABEL_84:
        v112 = v18;
        goto LABEL_85;
      }
      *(_DWORD *)&v120[8] = v129;
      v120[12] = 1;
    }
    WTF::AtomStringImpl::addLiteral();
    v19 = (WTF::StringImpl *)v129;
    v21 = JSC::JSObject::get((JSC::Structure *)v6, v4, v129);
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v20);
      else
        *(_DWORD *)v19 -= 2;
    }
    if (*((_DWORD *)v113 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v113) & 1) != 0)
    {
LABEL_83:
      v18 = 1;
      goto LABEL_84;
    }
    if (v21 == 10)
    {
      v22 = "loadOp";
      v23 = "GPULoadOp";
      v24 = (int)v4;
      v25 = 7;
      v26 = 10;
LABEL_82:
      WebCore::throwRequiredMemberTypeError(v24, (int)&v113, v22, v25, "GPURenderPassColorAttachment", 29, v23, v26);
      goto LABEL_83;
    }
    *(_QWORD *)&v129 = *((_QWORD *)v4 + 7);
    v27 = (JSC::VM *)v129;
    v28 = WebCore::parseEnumeration<WebCore::GPULoadOp>(v4, v21);
    if (*((_DWORD *)v27 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
      goto LABEL_83;
    if (v28 > 0xFFu)
    {
      LOBYTE(v125) = v28;
      WTF::AtomStringImpl::addLiteral();
      v29 = (WTF::StringImpl *)v129;
      v30 = JSC::JSObject::get((JSC::Structure *)v6, v4, v129);
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v10);
        else
          *(_DWORD *)v29 -= 2;
      }
      if (*((_DWORD *)v113 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v113) & 1) != 0)
        goto LABEL_83;
      if (v30 != 10)
      {
        *(_QWORD *)&v129 = *((_QWORD *)v4 + 7);
        if ((v30 & 0xFFFE000000000002) != 0)
          goto LABEL_186;
        v31 = *(unsigned int *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x4C);
        v32 = *(_DWORD *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x4C) != 0;
        if ((_DWORD)v31)
        {
          v33 = 16 * v31;
          if ((char **)v33 != &WebCore::JSGPUTextureView::s_info)
          {
            do
            {
              v33 = *(_QWORD *)(v33 + 16);
              v32 = v33 != 0;
            }
            while ((char **)v33 != &WebCore::JSGPUTextureView::s_info && v33 != 0);
          }
        }
        if (!v32)
          goto LABEL_186;
        v35 = *(_QWORD *)(v30 + 24);
        if (!v35)
          goto LABEL_186;
        v36 = *(_QWORD *)(v35 + 8);
        if (v36)
          goto LABEL_229;
        v36 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v36 = 1;
        *(_QWORD *)(v36 + 8) = v35;
        v37 = *(unsigned int **)(v35 + 8);
        *(_QWORD *)(v35 + 8) = v36;
        if (!v37)
          goto LABEL_229;
        do
        {
          v38 = __ldaxr(v37);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v37));
        if (!v39)
        {
          atomic_store(1u, v37);
          WTF::fastFree((WTF *)v37, v10);
        }
        v36 = *(_QWORD *)(v35 + 8);
        if (v36)
        {
LABEL_229:
          do
            v40 = __ldaxr((unsigned int *)v36);
          while (__stlxr(v40 + 1, (unsigned int *)v36));
        }
        v41 = *(unsigned int **)&v120[16];
        *(_QWORD *)&v120[16] = v36;
        if (v41)
        {
          do
          {
            v42 = __ldaxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
          {
            atomic_store(1u, v41);
            WTF::fastFree((WTF *)v41, v10);
          }
        }
      }
      WTF::AtomStringImpl::addLiteral();
      v44 = (WTF::StringImpl *)v129;
      v46 = JSC::JSObject::get((JSC::Structure *)v6, v4, v129);
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v45);
        else
          *(_DWORD *)v44 -= 2;
      }
      if (*((_DWORD *)v113 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v113) & 1) != 0)
        goto LABEL_83;
      if (v46 == 10)
      {
        v22 = "storeOp";
        v23 = "GPUStoreOp";
        v24 = (int)v4;
        v25 = 8;
        v26 = 11;
        goto LABEL_82;
      }
      *(_QWORD *)&v129 = *((_QWORD *)v4 + 7);
      v47 = (JSC::VM *)v129;
      v48 = WebCore::parseEnumeration<WebCore::GPUStoreOp>(v4, v46);
      if (*((_DWORD *)v47 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v47) & 1) != 0)
        goto LABEL_83;
      if (v48 > 0xFFu)
      {
        HIBYTE(v125) = v48;
        WTF::AtomStringImpl::addLiteral();
        v49 = (WTF::StringImpl *)v129;
        v6 = JSC::JSObject::get((JSC::Structure *)v6, v4, v129);
        if (v49)
        {
          if (*(_DWORD *)v49 == 2)
            WTF::StringImpl::destroy(v49, v10);
          else
            *(_DWORD *)v49 -= 2;
        }
        if (*((_DWORD *)v113 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v113) & 1) != 0)
          goto LABEL_83;
        if (v6 == 10)
        {
          v22 = "view";
          v23 = "GPUTextureView";
          v24 = (int)v4;
          v25 = 5;
          v26 = 15;
          goto LABEL_82;
        }
        *(_QWORD *)&v129 = *((_QWORD *)v4 + 7);
        if ((v6 & 0xFFFE000000000002) == 0)
        {
          v91 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
          v92 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
          if ((_DWORD)v91)
          {
            v93 = 16 * v91;
            if ((char **)v93 != &WebCore::JSGPUTextureView::s_info)
            {
              do
              {
                v93 = *(_QWORD *)(v93 + 16);
                v92 = v93 != 0;
              }
              while ((char **)v93 != &WebCore::JSGPUTextureView::s_info && v93 != 0);
            }
          }
          if (v92)
          {
            v6 = *(_QWORD *)(v6 + 24);
            if (v6)
            {
              v95 = *(_QWORD *)(v6 + 8);
              if (v95)
                goto LABEL_230;
              v95 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v95 = 1;
              *(_QWORD *)(v95 + 8) = v6;
              v96 = *(unsigned int **)(v6 + 8);
              *(_QWORD *)(v6 + 8) = v95;
              if (!v96)
                goto LABEL_230;
              do
              {
                v97 = __ldaxr(v96);
                v98 = v97 - 1;
              }
              while (__stlxr(v98, v96));
              if (!v98)
              {
                atomic_store(1u, v96);
                WTF::fastFree((WTF *)v96, v10);
              }
              v95 = *(_QWORD *)(v6 + 8);
              if (v95)
              {
LABEL_230:
                do
                  v99 = __ldaxr((unsigned int *)v95);
                while (__stlxr(v99 + 1, (unsigned int *)v95));
              }
              v100 = *(unsigned int **)v120;
              *(_QWORD *)v120 = v95;
              if (v100)
              {
                do
                {
                  v101 = __ldaxr(v100);
                  v102 = v101 - 1;
                }
                while (__stlxr(v102, v100));
                if (!v102)
                {
                  atomic_store(1u, v100);
                  WTF::fastFree((WTF *)v100, v10);
                }
              }
              v105 = *(_OWORD *)v120;
              v103 = *(WTF **)&v120[16];
              *(_QWORD *)v120 = 0;
              *(_QWORD *)&v120[16] = 0;
              v106 = v103;
              v107[0] = 0;
              v110 = 0;
              if ((_BYTE)v124)
              {
                v109 = -1;
                v104 = v123;
                if (v123 != -1)
                {
                  ((void (*)(__int128 *, char *, WTF **))off_1E3283940[v123])(&v129, v107, &v121);
                  v109 = v104;
                }
                v110 = 1;
              }
              v18 = 0;
              v111 = v125;
              goto LABEL_84;
            }
          }
        }
      }
    }
LABEL_186:
    JSC::throwTypeError();
    goto LABEL_83;
  }
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLSequence<WebCore::IDLDouble>,WebCore::IDLDictionary<WebCore::GPUColorDict>>>::convert(v9, v4, v8, (uint64_t)&v129);
  v11 = v133;
  if (!v133)
  {
    LOBYTE(v105) = 0;
    v108 = -1;
    v12 = v132;
    if (v132 == -1)
    {
      if ((_BYTE)v124)
      {
        if (v123 == -1)
        {
LABEL_23:
          v14 = v133;
          goto LABEL_24;
        }
        ((void (*)(__int128 *, WTF **))off_1E3283930[v123])(&v114, &v121);
        v123 = -1;
LABEL_21:
        if (v108 != -1)
          ((void (*)(__int128 *, __int128 *))off_1E3283930[v108])(&v114, &v105);
        goto LABEL_23;
      }
      LOBYTE(v121) = 0;
      v123 = -1;
    }
    else
    {
      v13 = off_1E3283940[v132];
      ((void (*)(__int128 *, __int128 *, char *))v13)(&v114, &v105, (char *)&v129 + 8);
      v108 = v12;
      if ((_BYTE)v124)
      {
        *(_QWORD *)&v114 = &v121;
        ((void (*)(__int128 *, WTF **, __int128 *))off_1E3283950[v12])(&v114, &v121, &v105);
        goto LABEL_21;
      }
      LOBYTE(v121) = 0;
      v123 = -1;
      ((void (*)(__int128 *, WTF **, __int128 *))v13)(&v114, &v121, &v105);
      v123 = v12;
    }
    LOBYTE(v124) = 1;
    goto LABEL_21;
  }
  v112 = 1;
  v14 = v133;
LABEL_24:
  if (v14 != -1)
    ((void (*)(__int128 *, char *))off_1E3283960[v14])(&v114, (char *)&v129 + 8);
  if (!v11)
    goto LABEL_27;
LABEL_85:
  if ((_BYTE)v124)
  {
    if (v123 != -1)
      ((void (*)(__int128 *, WTF **))off_1E3283930[v123])(&v129, &v121);
    v123 = -1;
  }
  v50 = *(unsigned int **)&v120[16];
  *(_QWORD *)&v120[16] = 0;
  if (v50)
  {
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
    {
      atomic_store(1u, v50);
      WTF::fastFree((WTF *)v50, v10);
    }
  }
  result = *(JSC::JSGlobalObject **)v120;
  *(_QWORD *)v120 = 0;
  if (result)
  {
    do
    {
      v53 = __ldaxr((unsigned int *)result);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, (unsigned int *)result));
    if (!v54)
    {
      atomic_store(1u, (unsigned int *)result);
      result = (JSC::JSGlobalObject *)WTF::fastFree(result, v10);
    }
  }
  v55 = v112;
  if (v112)
    goto LABEL_98;
  v57 = *((_QWORD *)&v105 + 1);
  v56 = v105;
  v114 = v105;
  v58 = v106;
  *(_QWORD *)&v105 = 0;
  v106 = 0;
  v115 = v58;
  v116[0] = 0;
  v118 = 0;
  v59 = v110;
  if (v110)
  {
    v117 = -1;
    LODWORD(v6) = v109;
    if (v109 != -1)
    {
      ((void (*)(_BYTE *, _BYTE *, char *))off_1E3283940[v109])(v120, v116, v107);
      v117 = v6;
      v57 = *((_QWORD *)&v114 + 1);
      v56 = v114;
      v58 = v115;
    }
    v118 = 1;
  }
  v60 = v111;
  v119 = v111;
  *(_QWORD *)&v129 = v56;
  *((_QWORD *)&v129 + 1) = v57;
  *(_QWORD *)&v114 = 0;
  v115 = 0;
  v130 = v58;
  v131[0] = 0;
  v135 = 0;
  if (v59)
  {
    v134 = -1;
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_1E3283940[v6])(v120, v131, v116);
      v134 = v6;
      v60 = v119;
      v57 = *((_QWORD *)&v129 + 1);
      v56 = v129;
      v58 = v130;
    }
    v61 = 1;
    v135 = 1;
  }
  else
  {
    v61 = 0;
  }
  v136 = v60;
  v137 = 1;
  v127 = 0;
  *(_QWORD *)&v120[8] = v56;
  *(_QWORD *)&v120[16] = v57;
  *(_QWORD *)&v129 = 0;
  v130 = 0;
  v121 = v58;
  v122[0] = 0;
  LOBYTE(v125) = 0;
  if (!v59)
    goto LABEL_113;
  v124 = -1;
  if ((_DWORD)v6 == -1)
  {
    LOBYTE(v125) = 1;
LABEL_113:
    v126 = v60;
    v127 = 1;
    v128 = 0;
    goto LABEL_114;
  }
  ((void (*)(JSC::VM **, _BYTE *, _BYTE *))off_1E3283940[v6])(&v113, v122, v131);
  v124 = v6;
  LOBYTE(v125) = 1;
  v126 = v136;
  v127 = 1;
  v128 = 0;
  if (v137)
  {
    v61 = v135;
LABEL_114:
    if (v61)
    {
      if (v134 != -1)
        ((void (*)(JSC::VM **, _BYTE *))off_1E3283930[v134])(&v113, v131);
      v134 = -1;
    }
    v62 = (unsigned int *)v130;
    v130 = 0;
    if (v62)
    {
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (!v64)
      {
        atomic_store(1u, v62);
        WTF::fastFree((WTF *)v62, v10);
      }
    }
    v65 = (unsigned int *)v129;
    *(_QWORD *)&v129 = 0;
    if (v65)
    {
      do
      {
        v66 = __ldaxr(v65);
        v67 = v66 - 1;
      }
      while (__stlxr(v67, v65));
      if (!v67)
      {
        atomic_store(1u, v65);
        WTF::fastFree((WTF *)v65, v10);
      }
    }
  }
  if (v118)
  {
    if (v117 != -1)
      ((void (*)(JSC::VM **, _BYTE *))off_1E3283930[v117])(&v113, v116);
    v117 = -1;
  }
  v68 = (unsigned int *)v115;
  v115 = 0;
  if (v68)
  {
    do
    {
      v69 = __ldaxr(v68);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v68));
    if (!v70)
    {
      atomic_store(1u, v68);
      WTF::fastFree((WTF *)v68, v10);
    }
  }
  result = (JSC::JSGlobalObject *)v114;
  *(_QWORD *)&v114 = 0;
  if (result)
  {
    do
    {
      v71 = __ldaxr((unsigned int *)result);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, (unsigned int *)result));
    if (!v72)
    {
      atomic_store(1u, (unsigned int *)result);
      result = (JSC::JSGlobalObject *)WTF::fastFree(result, v10);
    }
  }
  v55 = v112;
LABEL_139:
  if (v55 != -1)
    result = (JSC::JSGlobalObject *)((uint64_t (*)(__int128 *, __int128 *))off_1E32839D8[v55])(&v129, &v105);
  v73 = v128;
  if (!v128)
  {
    LOBYTE(v129) = 0;
    v137 = 0;
    if (v127)
    {
      v129 = *(_OWORD *)&v120[8];
      v74 = v121;
      *(_QWORD *)&v120[8] = 0;
      v121 = 0;
      v130 = v74;
      v131[0] = 0;
      v135 = 0;
      if ((_BYTE)v125)
      {
        v134 = -1;
        v75 = v124;
        if (v124 != -1)
        {
          result = (JSC::JSGlobalObject *)((uint64_t (*)(__int128 *, _BYTE *, _BYTE *))off_1E3283940[v124])(&v105, v131, v122);
          v134 = v75;
        }
        v135 = 1;
      }
      v136 = v126;
      v137 = 1;
    }
LABEL_148:
    v76 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v76 == *(_DWORD *)(a3 + 8))
    {
      result = (JSC::JSGlobalObject *)WTF::Vector<std::optional<WebCore::GPURenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v76 + 1, (unint64_t)&v129);
      v78 = *(_QWORD *)a3 + 88 * *(unsigned int *)(a3 + 12);
      *(_BYTE *)v78 = 0;
      *(_BYTE *)(v78 + 80) = 0;
      if (!*((_BYTE *)result + 80))
        goto LABEL_159;
      v79 = (__int128 *)result;
      v80 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *(_QWORD *)v78 = v80;
      *(_QWORD *)(v78 + 8) = *((_QWORD *)result + 1);
      v81 = *((_QWORD *)result + 2);
      *((_QWORD *)result + 2) = 0;
      *(_BYTE *)(v78 + 24) = 0;
      v77 = (void *)(v78 + 24);
      *(_QWORD *)(v78 + 16) = v81;
      *(_BYTE *)(v78 + 64) = 0;
      if (!*((_BYTE *)result + 64))
      {
LABEL_158:
        *(_WORD *)(v78 + 72) = *((_WORD *)v79 + 36);
        *(_BYTE *)(v78 + 80) = 1;
LABEL_159:
        v85 = v137;
        ++*(_DWORD *)(a3 + 12);
        if (v85)
        {
          if (v135)
          {
            if (v134 != -1)
              ((void (*)(__int128 *, _BYTE *))off_1E3283930[v134])(&v105, v131);
            v134 = -1;
          }
          v86 = (unsigned int *)v130;
          v130 = 0;
          if (v86)
          {
            do
            {
              v87 = __ldaxr(v86);
              v88 = v87 - 1;
            }
            while (__stlxr(v88, v86));
            if (!v88)
            {
              atomic_store(1u, v86);
              WTF::fastFree((WTF *)v86, v77);
            }
          }
          result = (JSC::JSGlobalObject *)v129;
          *(_QWORD *)&v129 = 0;
          if (result)
          {
            do
            {
              v89 = __ldaxr((unsigned int *)result);
              v90 = v89 - 1;
            }
            while (__stlxr(v90, (unsigned int *)result));
            if (!v90)
            {
              atomic_store(1u, (unsigned int *)result);
              result = (JSC::JSGlobalObject *)WTF::fastFree(result, v77);
            }
          }
        }
        goto LABEL_173;
      }
      *(_DWORD *)(v78 + 56) = -1;
      v82 = *((unsigned int *)result + 14);
    }
    else
    {
      v78 = *(_QWORD *)a3 + 88 * v76;
      *(_BYTE *)v78 = 0;
      *(_BYTE *)(v78 + 80) = 0;
      if (!v137)
      {
        ++*(_DWORD *)(a3 + 12);
LABEL_173:
        v73 = v128;
        goto LABEL_174;
      }
      v83 = v129;
      *(_QWORD *)&v129 = 0;
      *(_OWORD *)v78 = __PAIR128__(*((unint64_t *)&v129 + 1), v83);
      v84 = v130;
      v130 = 0;
      *(_BYTE *)(v78 + 24) = 0;
      v77 = (void *)(v78 + 24);
      *(_QWORD *)(v78 + 16) = v84;
      v79 = &v129;
      *(_BYTE *)(v78 + 64) = 0;
      if (!v135)
        goto LABEL_158;
      *(_DWORD *)(v78 + 56) = -1;
      v82 = v134;
    }
    if ((_DWORD)v82 != -1)
    {
      result = (JSC::JSGlobalObject *)((uint64_t (*)(__int128 *))off_1E3283940[v82])(&v105);
      *(_DWORD *)(v78 + 56) = v82;
    }
    *(_BYTE *)(v78 + 64) = 1;
    goto LABEL_158;
  }
LABEL_174:
  if (v73 != -1)
    return (JSC::JSGlobalObject *)((uint64_t (*)(__int128 *, _BYTE *))off_1E32839E8[v73])(&v129, &v120[8]);
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore28GPURenderPassColorAttachmentENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *result;
  unsigned int v8;
  unsigned int v9;
  char v10;

  if (*((_BYTE *)a2 + 64))
  {
    v3 = *((unsigned int *)a2 + 14);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, _QWORD *))off_1E3283930[v3])(&v10, a2 + 3);
    *((_DWORD *)a2 + 14) = -1;
  }
  v4 = (unsigned int *)a2[2];
  a2[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  result = (unsigned int *)*a2;
  *a2 = 0;
  if (result)
  {
    do
    {
      v8 = __ldaxr(result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, result));
    if (!v9)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unsigned int *WTF::Vector<std::optional<WebCore::GPURenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int *v5;
  unsigned int *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(unsigned int **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = &v5[22 * *(unsigned int *)(a1 + 12)], (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x2E8BA2F)
      {
        __break(0xC471u);
        JUMPOUT(0x194B83C74);
      }
      v17 = &v5[22 * *(unsigned int *)(a1 + 12)];
      v18 = 88 * v16;
      v19 = WTF::fastMalloc((WTF *)(88 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x58;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,std::optional<WebCore::GPURenderPassColorAttachment>>::move(v5, v17, v19);
      if (v5)
      {
        if (*(unsigned int **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(unsigned int **)a1;
    }
    else
    {
      if (v9 >= 0x2E8BA2F)
      {
        __break(0xC471u);
        JUMPOUT(0x194B83C7CLL);
      }
      v10 = 88 * v9;
      v11 = WTF::fastMalloc((WTF *)(88 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x58;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,std::optional<WebCore::GPURenderPassColorAttachment>>::move(v5, v6, v11);
      v13 = *(unsigned int **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        v13 = *(unsigned int **)a1;
      }
    }
    return &v13[2 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
  }
  return (unsigned int *)v3;
}

unsigned int *WTF::VectorMover<false,std::optional<WebCore::GPURenderPassColorAttachment>>::move(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;

  if (result != a2)
  {
    v20 = v3;
    v21 = v4;
    v7 = result;
    do
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 80) = 0;
      if (*((_BYTE *)v7 + 80))
      {
        v8 = *(unsigned int **)v7;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)a3 = v8;
        *(_QWORD *)(a3 + 8) = *((_QWORD *)v7 + 1);
        v9 = *((_QWORD *)v7 + 2);
        *((_QWORD *)v7 + 2) = 0;
        *(_BYTE *)(a3 + 24) = 0;
        v10 = (void *)(a3 + 24);
        *(_QWORD *)(a3 + 16) = v9;
        *(_BYTE *)(a3 + 64) = 0;
        if (*((_BYTE *)v7 + 64))
        {
          *(_DWORD *)(a3 + 56) = -1;
          v11 = v7[14];
          if ((_DWORD)v11 != -1)
          {
            result = (unsigned int *)((uint64_t (*)(char *))off_1E3283940[v11])(&v18);
            *(_DWORD *)(a3 + 56) = v11;
          }
          *(_BYTE *)(a3 + 64) = 1;
        }
        *(_WORD *)(a3 + 72) = *((_WORD *)v7 + 36);
        *(_BYTE *)(a3 + 80) = 1;
        if (*((_BYTE *)v7 + 80))
        {
          if (*((_BYTE *)v7 + 64))
          {
            v12 = v7[14];
            if ((_DWORD)v12 != -1)
              ((void (*)(char *, unsigned int *))off_1E3283930[v12])(&v19, v7 + 6);
            v7[14] = -1;
          }
          v13 = (unsigned int *)*((_QWORD *)v7 + 2);
          *((_QWORD *)v7 + 2) = 0;
          if (v13)
          {
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v13);
              WTF::fastFree((WTF *)v13, v10);
            }
          }
          result = *(unsigned int **)v7;
          *(_QWORD *)v7 = 0;
          if (result)
          {
            do
            {
              v16 = __ldaxr(result);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, result));
            if (!v17)
            {
              atomic_store(1u, result);
              result = (unsigned int *)WTF::fastFree((WTF *)result, v10);
            }
          }
        }
      }
      a3 += 88;
      v7 += 22;
    }
    while (v7 != a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore28GPURenderPassColorAttachmentEEENS9_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  char v10;

  if (*((_BYTE *)a2 + 80))
  {
    if (*((_BYTE *)a2 + 64))
    {
      v3 = *((unsigned int *)a2 + 14);
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, _QWORD *))off_1E3283930[v3])(&v10, a2 + 3);
      *((_DWORD *)a2 + 14) = -1;
    }
    v4 = (unsigned int *)a2[2];
    a2[2] = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
    v7 = (unsigned int *)*a2;
    *a2 = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
}

uint64_t WebCore::FontShadow::createShadow@<X0>(WebCore::FontShadow *this@<X0>, PAL **a2@<X8>)
{
  PAL *v4;
  void *UIColorClass;
  const WebCore::Color *v6;
  const void *v7;
  const void *v8;
  CFTypeRef v9;
  uint64_t result;
  CFTypeRef cf;

  PAL::getNSShadowClass[0](this);
  v4 = (PAL *)objc_opt_new();
  UIColorClass = (void *)PAL::getUIColorClass(v4);
  WebCore::cachedCGColor(this, v6, &cf);
  v7 = (const void *)objc_msgSend(UIColorClass, "_disambiguated_due_to_CIImage_colorWithCGColor:", cf);
  v8 = v7;
  if (v7)
    CFRetain(v7);
  v9 = cf;
  cf = 0;
  if (v9)
    CFRelease(v9);
  -[PAL setShadowColor:](v4, "setShadowColor:", v8);
  if (v8)
    CFRelease(v8);
  -[PAL setShadowOffset:](v4, "setShadowOffset:", *((float *)this + 2), *((float *)this + 3));
  result = -[PAL setShadowBlurRadius:](v4, "setShadowBlurRadius:", *((double *)this + 2));
  *a2 = v4;
  return result;
}

void sub_194B83F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;
  const void *v11;

  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::fontShadowFromNSShadow@<X0>(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  double v5;
  double v6;
  uint64_t result;
  uint64_t v8;

  WebCore::colorFromCocoaColor((WebCore *)-[WebCore shadowColor](this, "shadowColor"), (uint64_t *)a2);
  -[WebCore shadowOffset](this, "shadowOffset");
  *(float *)&v5 = v5;
  *(float *)&v6 = v6;
  *(_DWORD *)(a2 + 8) = LODWORD(v5);
  *(_DWORD *)(a2 + 12) = LODWORD(v6);
  result = -[WebCore shadowBlurRadius](this, "shadowBlurRadius");
  *(_QWORD *)(a2 + 16) = v8;
  return result;
}

void sub_194B8402C(_Unwind_Exception *exception_object, void *a2)
{
  _QWORD *v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if ((*v2 & 0x8000000000000) != 0)
  {
    v4 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_194B84508(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::createFragment(WebCore::LocalFrame *a1@<X0>, void *a2@<X1>, char a3@<W2>, WTF::StringImpl **a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  WebCore::DocumentFragment *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int *v14;
  int *v15;
  WTF::StringImpl *v16;
  const void *v17;
  WTF::StringImpl *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::String *v31;
  WebCore::StyledElement **v32;
  __n128 v33;
  void *v34;
  int v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  WebCore::StyledElement **v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  unsigned int v47;
  WTF::StringImpl *v48;
  WTF::StringImpl **v49;
  WebCore::ScriptExecutionContext *v50;
  uint64_t v51;
  WebCore::SubstituteResource **v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  WTF::StringImpl *v56;
  _QWORD *v57;
  uint64_t v58;
  WebCore::SubstituteResource *v59;
  WebCore::ScriptExecutionContext *v60;
  uint64_t v61;
  void *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  WebCore::StyledElement **v76;
  WebCore::StyledElement *v77;
  uint64_t *v78;
  WTF::StringImpl *v79;
  WebCore::ArchiveResourceCollection *v80;
  WTF *v81;
  void *v82;
  _DWORD *v83;
  uint64_t v84;
  WebCore::StyledElement **v85;
  WebCore::StyledElement *v86;
  WTF *v87;
  uint64_t v88;
  WTF::StringImpl **v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  char v93;
  WTF::StringImpl *obj;
  _BYTE v95[24];
  uint64_t v96;
  char v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  uint64_t v103;
  const void *v104;
  const void *v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a1 + 3);
  if (!v5 || !*(_QWORD *)(v5 + 8) || (v7 = *((_QWORD *)a1 + 37)) == 0 || !a2 || (*(_WORD *)(v7 + 3358) & 1) == 0)
  {
    *a4 = 0;
    return;
  }
  WebCore::DeferredLoadingScope::DeferredLoadingScope((WebCore::DeferredLoadingScope *)v95, a1);
  v87 = a1;
  v10 = (WebCore::DocumentFragment *)*((_QWORD *)a1 + 37);
  v100 = 0;
  v11 = objc_msgSend(a2, "length");
  v12 = (WTF::StringImpl *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithObjects:", CFSTR("style"), CFSTR("xml"), CFSTR("doctype"), CFSTR("html"), CFSTR("head"), CFSTR("body"), CFSTR("applet"), CFSTR("basefont"), CFSTR("center"), CFSTR("dir"), CFSTR("font"), CFSTR("menu"), CFSTR("s"), CFSTR("strike"), CFSTR("u"), 0);
  v13 = v12;
  v14 = &dword_1ECE90000;
  v15 = &dword_1ECE90000;
  {
    if (byte_1ECE90A59)
      goto LABEL_9;
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  -[WTF::StringImpl addObject:](v12, "addObject:", CFSTR("object"));
LABEL_9:
  WTF::URL::fakeURLWithRelativePart();
  v17 = (const void *)WTF::URL::operator NSURL *();
  v18 = v101;
  v101 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  CFRetain(v17);
  v93 = a3;
  v101 = v13;
  *(_QWORD *)&v106 = CFSTR("ExcludedElements");
  *((_QWORD *)&v106 + 1) = CFSTR("InterchangeNewline");
  v102 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (a3 & 2) == 0);
  v103 = MEMORY[0x1E0C9AAB0];
  *(_QWORD *)&v107 = CFSTR("CoalesceTabSpans");
  *((_QWORD *)&v107 + 1) = CFSTR("OutputBaseURL");
  v104 = v17;
  *(_QWORD *)&v108 = CFSTR("WebResourceHandler");
  v19 = (const void *)objc_opt_new();
  v105 = v19;
  v20 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v101, &v106, 5);
  if (v19)
    CFRelease(v19);
  if (v13)
    CFRelease(v13);
  v21 = objc_msgSend(a2, "_htmlDocumentFragmentString:documentAttributes:subresources:", 0, v11, v20, &v100);
  WebCore::DocumentFragment::create(v10, (uint64_t *)&v99);
  v22 = bmalloc::api::isoAllocate();
  v23 = v22;
  *(_OWORD *)(v22 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v22 + 24) = 0x101C00000002;
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = (char *)v10 + 96;
  *(_OWORD *)(v22 + 48) = 0u;
  *(_OWORD *)(v22 + 64) = 0u;
  ++*((_DWORD *)v10 + 831);
  *(_QWORD *)(v22 + 80) = 0;
  *(_QWORD *)(v22 + 88) = 0;
  v24 = WebCore::HTMLNames::bodyTag;
  if (WebCore::HTMLNames::bodyTag)
    ++*(_DWORD *)WebCore::HTMLNames::bodyTag;
  *(_QWORD *)(v22 + 96) = v24;
  *(_QWORD *)(v22 + 104) = 0;
  *(_QWORD *)v22 = off_1E33B5118;
  if ((v93 & 4) != 0)
  {
    MEMORY[0x19AEA5508](&v101, v21);
    LOBYTE(v96) = 0;
    v97 = 0;
    WebCore::sanitizeMarkup((unsigned int **)&v101, 1, &v96, &v98);
    if (v97)
    {
      v26 = v96;
      v96 = 0;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    }
    v27 = v101;
    v101 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v25);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
  else
  {
    MEMORY[0x19AEA5508](&v98, v21);
  }
  v28 = v99;
  WebCore::DocumentFragment::parseHTML((uint64_t)v99, (unsigned int **)&v98, v23, 0);
  v99 = 0;
  v106 = 0u;
  v107 = 0u;
  v108 = 0u;
  v109 = 0u;
  obj = v100;
  v32 = (WebCore::StyledElement **)-[WTF::StringImpl countByEnumeratingWithState:objects:count:](v100, "countByEnumeratingWithState:objects:count:", &v106, &v101, 16);
  if (v32)
  {
    v89 = a4;
    v90 = v23;
    v88 = v7;
    v91 = v28;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    LODWORD(v37) = 0;
    v38 = *(_QWORD *)v107;
    do
    {
      v39 = 0;
      v40 = v35;
      do
      {
        if (*(_QWORD *)v107 != v38)
          objc_enumerationMutation(obj);
        v41 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v106 + 1) + 8 * (_QWORD)v39) + 8);
        v42 = (v40 + (_DWORD)v39);
        if (v40 + (_DWORD)v39 == (_DWORD)v37)
        {
          v43 = v42 + (v42 >> 2);
          if (v43 >= 0x10)
            v44 = v43 + 1;
          else
            v44 = 16;
          if (v44 <= v42 + 1)
            v37 = v42 + 1;
          else
            v37 = v44;
          if (v37 >> 29)
          {
LABEL_163:
            __break(0xC471u);
            JUMPOUT(0x194B85268);
          }
          v45 = (void *)WTF::fastMalloc((WTF *)(8 * v37));
          memcpy(v45, v36, 8 * v42);
          if (v36)
          {
            if (v45 == v36)
              v34 = 0;
            else
              v34 = v45;
            if (v45 == v36)
              LODWORD(v37) = 0;
            WTF::fastFree((WTF *)v36, v46);
            v36 = v34;
          }
          else
          {
            v34 = v45;
            v36 = v45;
          }
        }
        ++*(_DWORD *)(v41 + 8);
        *((_QWORD *)v36 + v42) = v41;
        v39 = (WebCore::StyledElement **)((char *)v39 + 1);
      }
      while (v32 != v39);
      v32 = (WebCore::StyledElement **)-[WTF::StringImpl countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v106, &v101, 16);
      v35 = v40 + (_DWORD)v39;
    }
    while (v32);
    v47 = v40 + (_DWORD)v39;
    v32 = (WebCore::StyledElement **)v34;
    v7 = v88;
    a4 = v89;
    v14 = &dword_1ECE90000;
    v15 = &dword_1ECE90000;
    v23 = v90;
    v28 = v91;
  }
  else
  {
    v47 = 0;
  }
  v48 = v98;
  v98 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v29);
    else
      *(_DWORD *)v48 -= 2;
  }
  if (*(_DWORD *)(v23 + 24) == 2)
  {
    if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v23, v29);
  }
  else
  {
    *(_DWORD *)(v23 + 24) -= 2;
  }
  if (v99)
  {
    if (*((_DWORD *)v99 + 6) == 2)
    {
      if ((*((_WORD *)v99 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v99, v29);
    }
    else
    {
      *((_DWORD *)v99 + 6) -= 2;
    }
  }
  if (v28)
  {
    if ((v93 & 1) == 0)
    {
      if ((v14[666] & 1) != 0)
      {
        if (byte_1ECE90A55)
        {
          if (*((_BYTE *)v15 + 2649))
          {
            WebCore::replaceRichContentWithAttachments(v87, v28, v32, v47);
LABEL_145:
            *a4 = v28;
LABEL_146:
            v28 = 0;
            goto LABEL_147;
          }
          v49 = a4;
          v92 = v28;
          v96 = 0;
          if (!v47)
          {
LABEL_104:
            *((_DWORD *)v92 + 6) += 2;
            v101 = v92;
            WebCore::replaceSubresourceURLs((uint64_t)&v101, (unsigned __int8 *)&v96, v30, v31, v33);
            v68 = v101;
            v101 = 0;
            if (v68)
            {
              if (*((_DWORD *)v68 + 6) == 2)
              {
                if ((*((_WORD *)v68 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v68, v29);
              }
              else
              {
                *((_DWORD *)v68 + 6) -= 2;
              }
            }
            *v49 = v92;
            v69 = v96;
            if (v96)
            {
              v70 = *(unsigned int *)(v96 - 4);
              if ((_DWORD)v70)
              {
                v71 = v96;
                do
                {
                  v72 = *(WTF::StringImpl **)v71;
                  if (*(_QWORD *)v71 != -1)
                  {
                    v73 = *(WTF::StringImpl **)(v71 + 8);
                    *(_QWORD *)(v71 + 8) = 0;
                    if (v73)
                    {
                      if (*(_DWORD *)v73 == 2)
                      {
                        WTF::StringImpl::destroy(v73, v29);
                        v72 = *(WTF::StringImpl **)v71;
                      }
                      else
                      {
                        *(_DWORD *)v73 -= 2;
                      }
                    }
                    *(_QWORD *)v71 = 0;
                    if (v72)
                    {
                      if (*(_DWORD *)v72 == 2)
                        WTF::StringImpl::destroy(v72, v29);
                      else
                        *(_DWORD *)v72 -= 2;
                    }
                  }
                  v71 += 16;
                  --v70;
                }
                while (v70);
              }
              WTF::fastFree((WTF *)(v69 - 16), v29);
            }
            goto LABEL_146;
          }
          v50 = (WebCore::ScriptExecutionContext *)(v7 + 192);
          v51 = 8 * v47;
          v52 = v32;
          while (1)
          {
            v53 = WebCore::SubstituteResource::data(*v52, v29);
            v54 = v53;
            v101 = 0;
            v102 = 0;
            v55 = *(_QWORD *)(v53 + 48);
            if (v55)
            {
              if (HIDWORD(v55))
                goto LABEL_163;
              v56 = (WTF::StringImpl *)WTF::fastMalloc(*(WTF **)(v53 + 48));
              LODWORD(v102) = v55;
              v101 = v56;
            }
            v57 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v57 = off_1E3406E88;
            v57[1] = &v101;
            *(_QWORD *)&v106 = v57;
            WebCore::FragmentedSharedBuffer::forEachSegment(v54, &v106);
            v58 = v106;
            *(_QWORD *)&v106 = 0;
            if (v58)
              (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
            v59 = *v52;
            v60 = (WebCore::ScriptExecutionContext *)bmalloc::api::isoAllocate();
            v61 = WebCore::Blob::Blob((uint64_t)v60, v50, (uint64_t)&v101, (_QWORD *)v59 + 40);
            WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v61 + 24));
            v63 = v101;
            if (v101)
            {
              v101 = 0;
              LODWORD(v102) = 0;
              WTF::fastFree(v63, v62);
            }
            WebCore::DOMURL::createPublicURL((WebCore::ActiveDOMObject **)v50, v60, (WTF::StringImpl **)&v106);
            v65 = (WTF::StringImpl *)*((_QWORD *)*v52 + 2);
            if (v65)
            {
              if ((*((_BYTE *)v65 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v65 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase(v65, v64);
                v65 = v101;
              }
            }
            v100 = v65;
            v66 = (WTF::StringImpl *)v106;
            if ((_QWORD)v106)
            {
              if ((*(_BYTE *)(v106 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v106 += 2;
                v67 = v66;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((WTF::AtomStringImpl *)v106, v64);
                v67 = v101;
              }
            }
            else
            {
              v67 = 0;
            }
            v99 = v67;
            WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::inlineSet<WTF::AtomString,WTF::AtomString>((uint64_t)&v101, &v96, &v100, &v99);
            if (v99)
            {
              if (*(_DWORD *)v99 == 2)
                WTF::StringImpl::destroy(v99, v29);
              else
                *(_DWORD *)v99 -= 2;
            }
            if (!v100)
              goto LABEL_89;
            if (*(_DWORD *)v100 != 2)
              break;
            WTF::StringImpl::destroy(v100, v29);
            if (!v66)
              goto LABEL_92;
LABEL_90:
            if (*(_DWORD *)v66 == 2)
              WTF::StringImpl::destroy(v66, v29);
            else
              *(_DWORD *)v66 -= 2;
LABEL_92:
            if (*((_DWORD *)v60 + 4) == 1)
              (*(void (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)v60 + 8))(v60);
            else
              --*((_DWORD *)v60 + 4);
            ++v52;
            v51 -= 8;
            if (!v51)
              goto LABEL_104;
          }
          *(_DWORD *)v100 -= 2;
LABEL_89:
          if (!v66)
            goto LABEL_92;
          goto LABEL_90;
        }
      }
      else
      {
        WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
        *(_OWORD *)&byte_1ECE90A50 = 0u;
        qword_1ECE90A60 = 0;
        LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
        *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
        *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
        byte_1ECE90A56 = 1;
        *(_DWORD *)&algn_1ECE90A57 = 0;
        unk_1ECE90A5B = 0;
        byte_1ECE90A5D = 1;
        byte_1ECE90A5F = 1;
        *((_BYTE *)v14 + 2664) = 1;
      }
      v74 = *(_QWORD *)(*((_QWORD *)v87 + 35) + 88);
      if (v74 && v47)
      {
        v75 = 8 * v47;
        v76 = v32;
        do
        {
          v77 = *v76;
          *((_DWORD *)v77 + 2) = *((_DWORD *)*v76 + 2) + 1;
          *(_QWORD *)&v106 = v77;
          v78 = *(uint64_t **)(v74 + 2656);
          if (!v78)
          {
            v78 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
            *v78 = 0;
            v78[1] = 0;
            v80 = *(WebCore::ArchiveResourceCollection **)(v74 + 2656);
            *(_QWORD *)(v74 + 2656) = v78;
            if (v80)
            {
              WebCore::ArchiveResourceCollection::~ArchiveResourceCollection(v80, v79);
              WTF::fastFree(v81, v82);
              v78 = *(uint64_t **)(v74 + 2656);
            }
          }
          WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>(v78, (WTF::StringImpl **)(v106 + 16), (const WTF::StringImpl *)&v106, (uint64_t)&v101);
          v83 = (_DWORD *)v106;
          *(_QWORD *)&v106 = 0;
          if (v83)
          {
            if (v83[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v83 + 8))(v83);
            else
              --v83[2];
          }
          ++v76;
          v75 -= 8;
        }
        while (v75);
      }
      goto LABEL_145;
    }
    *((_DWORD *)v28 + 6) += 2;
    *a4 = v28;
  }
  else
  {
    *a4 = 0;
  }
LABEL_147:
  if (v47)
  {
    v84 = 8 * v47;
    v85 = v32;
    do
    {
      v86 = *v85;
      *v85 = 0;
      if (v86)
      {
        if (*((_DWORD *)v86 + 2) == 1)
          (*(void (**)(WebCore::StyledElement *))(*(_QWORD *)v86 + 8))(v86);
        else
          --*((_DWORD *)v86 + 2);
      }
      ++v85;
      v84 -= 8;
    }
    while (v84);
  }
  if (v32)
    WTF::fastFree((WTF *)v32, v29);
  if (v28)
  {
    if (*((_DWORD *)v28 + 6) == 2)
    {
      if ((*((_WORD *)v28 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v28, v29);
    }
    else
    {
      *((_DWORD *)v28 + 6) -= 2;
    }
  }
  WebCore::DeferredLoadingScope::~DeferredLoadingScope((WebCore::DeferredLoadingScope *)v95, v29);
}

void sub_194B85274(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WebCore::Node *a27,WebCore::Node *a28,uint64_t a29,WTF *a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,WTF::StringImpl *a36,WTF::StringImpl *a37,WTF::StringImpl *a38,WTF::StringImpl *a39)
{
  unsigned int v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  _DWORD *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;

  if (a38)
  {
    if (*(_DWORD *)a38 == 2)
    {
      WTF::StringImpl::destroy(a38, a2);
      if (v41)
      {
LABEL_5:
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, a2);
        else
          *(_DWORD *)v41 -= 2;
      }
LABEL_7:
      if (v40[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
      else
        --v40[4];
      v43 = a34;
      if (a34)
      {
        v44 = *(unsigned int *)(a34 - 4);
        if ((_DWORD)v44)
        {
          v48 = a34;
          do
          {
            v49 = *(WTF::StringImpl **)v48;
            if (*(_QWORD *)v48 != -1)
            {
              v50 = *(WTF::StringImpl **)(v48 + 8);
              *(_QWORD *)(v48 + 8) = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                {
                  WTF::StringImpl::destroy(v50, a2);
                  v49 = *(WTF::StringImpl **)v48;
                }
                else
                {
                  *(_DWORD *)v50 -= 2;
                }
              }
              *(_QWORD *)v48 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, a2);
                else
                  *(_DWORD *)v49 -= 2;
              }
            }
            v48 += 16;
            --v44;
          }
          while (v44);
        }
        WTF::fastFree((WTF *)(v43 - 16), a2);
        if (!v39)
        {
LABEL_15:
          if (a30)
            WTF::fastFree(a30, a2);
          if (*((_DWORD *)a28 + 6) == 2)
          {
            if ((*((_WORD *)a28 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(a28, a2);
          }
          else
          {
            *((_DWORD *)a28 + 6) -= 2;
          }
          WebCore::DeferredLoadingScope::~DeferredLoadingScope((WebCore::DeferredLoadingScope *)&a31, a2);
          _Unwind_Resume(a1);
        }
      }
      else if (!v39)
      {
        goto LABEL_15;
      }
      v45 = 8 * v39;
      v46 = a30;
      do
      {
        v47 = *(_DWORD **)v46;
        *(_QWORD *)v46 = 0;
        if (v47)
        {
          if (v47[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 8))(v47);
          else
            --v47[2];
        }
        v46 = (WTF *)((char *)v46 + 8);
        v45 -= 8;
      }
      while (v45);
      goto LABEL_15;
    }
    *(_DWORD *)a38 -= 2;
  }
  if (v41)
    goto LABEL_5;
  goto LABEL_7;
}

WTF *WebCore::replaceRichContentWithAttachments(WTF *result, WTF::StringImpl *a2, WebCore::StyledElement **a3, unsigned int a4)
{
  WebCore::StyledElement **v4;
  uint64_t v5;
  WTF *v6;
  WebCore::StyledElement **v7;
  WebCore::StyledElement *v8;
  WebCore::StyledElement *v9;
  uint64_t v10;
  unsigned int v11;
  WebCore::StyledElement **v12;
  int v13;
  int i;
  uint64_t v15;
  WebCore::StyledElement **v16;
  WebCore::StyledElement *v17;
  uint64_t v18;
  _DWORD *v19;
  WebCore::StyledElement *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  __int16 v28;
  BOOL v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  int v33;
  unsigned int j;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WebCore::SubstituteResource **v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF *v42;
  void *v43;
  int v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  WTF::StringImpl **v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  __int16 v59;
  BOOL v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  BOOL v69;
  WTF::StringImpl **v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  WTF::StringImpl **v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  int v78;
  uint64_t v79;
  int v80;
  unsigned int k;
  uint64_t v82;
  WTF::StringImpl *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  WebCore::StyledElement **v87;
  uint64_t v88;
  WebCore::StyledElement *v89;
  int v90;
  WTF::URL *v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  WebCore::SubstituteResource **v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  WTF *v100;
  void *v101;
  int v102;
  uint64_t *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t *v109;
  WebCore::StyledElement **v110;
  WebCore::StyledElement *v111;
  WebCore::StyledElement *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  uint64_t v118;
  __int16 v119;
  BOOL v120;
  BOOL v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  uint64_t v124;
  __int16 v125;
  BOOL v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  __int16 v131;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  const WTF::StringImpl *v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  int v145;
  int ii;
  WTF *v147;
  uint64_t v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WebCore::Document *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  int v160;
  int v161;
  __int16 v162;
  int v163;
  uint64_t v164;
  WebCore::ScriptExecutionContext *v165;
  uint64_t v166;
  unint64_t v167;
  WebCore::StyledElement *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  _QWORD *v174;
  _QWORD *v175;
  WTF::StringImpl *v176;
  void *v177;
  WTF::StringImpl *v178;
  WTF *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  uint64_t v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  WebCore::StyledElement *Ref;
  WTF::StringImpl *v190;
  WebCore::Document *v191;
  uint64_t v192;
  WebCore::StyledElement *v193;
  WebCore::StyledElement *v194;
  int v195;
  WTF::StringImpl *v196;
  uint64_t v197;
  uint64_t v198;
  WTF::StringImpl *v199;
  WebCore::Node *v200;
  _BOOL4 v201;
  WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  uint64_t v204;
  WebCore::ScriptExecutionContext *v205;
  uint64_t v206;
  unint64_t v207;
  WebCore::StyledElement *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WebCore::ScriptExecutionContext *v211;
  uint64_t v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t *v218;
  unint64_t v219;
  _BOOL4 v220;
  WTF::StringImpl *v221;
  WTF::StringImpl *v222;
  uint64_t v223;
  WebCore::ActiveDOMObject **v224;
  WebCore::ScriptExecutionContext *v225;
  uint64_t v226;
  unint64_t v227;
  WebCore::StyledElement *v228;
  WTF::StringImpl *v229;
  WTF::StringImpl *v230;
  WebCore::ScriptExecutionContext *v231;
  uint64_t v232;
  WTF::StringImpl *v233;
  WTF::StringImpl *v234;
  WTF::StringImpl *v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t *v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  WTF::StringImpl *v242;
  WTF::StringImpl *v243;
  WTF *v244;
  uint64_t v245;
  uint64_t v246;
  WTF::StringImpl *v247;
  WTF::StringImpl *v248;
  WTF *v249;
  WebCore::StyledElement *v250;
  WebCore::Editor *v251;
  void *v252;
  WebCore::Editor *v253;
  uint64_t v254;
  void *v255;
  WebCore::Editor *v256;
  uint64_t v257;
  uint64_t v258;
  WTF *v259;
  WebCore::Node **v260;
  WebCore::Node *v261;
  uint64_t v262;
  WTF::StringImpl *v263;
  __int16 v264;
  __int16 v265;
  void *v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t *v270;
  WTF::StringImpl *v271;
  WTF::StringImpl *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  WTF::StringImpl *v276;
  _DWORD *v277;
  uint64_t *v278;
  WTF::StringImpl **v279;
  _QWORD *v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  WTF::StringImpl **v285;
  uint64_t v286;
  WTF::StringImpl *v287;
  uint64_t v288;
  int v289;
  unsigned int m;
  uint64_t v291;
  WTF::StringImpl *v292;
  WTF::URL *v293;
  uint64_t v294;
  WTF::StringImpl *v295;
  WTF::StringImpl *v296;
  WTF::StringImpl *v297;
  WebCore::StyledElement *v298;
  WTF::StringImpl *v299;
  uint64_t v300;
  WebCore::SubstituteResource **v301;
  uint64_t v302;
  WTF::StringImpl *v303;
  WTF *v304;
  void *v305;
  int v306;
  uint64_t *v307;
  _QWORD *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t *v313;
  WebCore::StyledElement **v314;
  WebCore::StyledElement *v315;
  WebCore::StyledElement *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  WTF::StringImpl *v320;
  WTF::StringImpl *v321;
  WTF::StringImpl *v322;
  uint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  uint64_t *v327;
  _QWORD *v328;
  WTF::StringImpl **v329;
  void *v330;
  WTF::StringImpl *v331;
  uint64_t v332;
  __int16 v333;
  BOOL v334;
  BOOL v335;
  WTF::StringImpl **v336;
  uint64_t *v337;
  WTF::StringImpl **v338;
  uint64_t *v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  WTF::StringImpl **v345;
  uint64_t v346;
  WTF::StringImpl *v347;
  uint64_t v348;
  int v349;
  unsigned int n;
  uint64_t v351;
  WTF::StringImpl *v352;
  WTF::URL *v353;
  uint64_t v354;
  WTF::StringImpl *v355;
  WTF::StringImpl *v356;
  WTF::StringImpl *v357;
  WebCore::StyledElement *v358;
  WTF::StringImpl *v359;
  uint64_t v360;
  WebCore::SubstituteResource **v361;
  uint64_t v362;
  WTF::StringImpl *v363;
  WTF *v364;
  void *v365;
  int v366;
  uint64_t *v367;
  _QWORD *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  _QWORD *v372;
  uint64_t *v373;
  WebCore::StyledElement **v374;
  WebCore::StyledElement *v375;
  WebCore::StyledElement *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  WTF::StringImpl *v380;
  WTF::StringImpl *v381;
  WTF::StringImpl *v382;
  uint64_t v383;
  unint64_t v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v387;
  WTF::StringImpl **v388;
  uint64_t *v389;
  void *v390;
  WTF::StringImpl *v391;
  uint64_t v392;
  __int16 v393;
  BOOL v394;
  BOOL v395;
  uint64_t *v396;
  WebCore::Editor *v397;
  WebCore::Editor *v398;
  uint64_t v399;
  WebCore::ScriptExecutionContext *v400;
  WebCore::ScriptExecutionContext *v401;
  WebCore::ScriptExecutionContext *v402;
  unsigned int v403;
  void *__src;
  uint64_t *v405;
  uint64_t v406;
  WTF *v407;
  uint64_t v408;
  WTF::StringImpl *v409;
  uint64_t v410;
  char v411[8];
  WTF::StringImpl *v412;
  char v413;
  char v414[8];
  WTF::StringImpl *v415;
  char v416;
  WTF::StringImpl *v417;
  char v418[8];
  WTF::StringImpl *v419;
  char v420;
  WTF::StringImpl *v421;
  WTF::StringImpl *v422;
  uint64_t v423[3];
  WTF::StringImpl *v424;
  uint64_t v425;
  uint64_t v426;
  WebCore::StyledElement *v427;
  WTF::StringImpl *v428;
  uint64_t v429;
  _QWORD v430[2];
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  WTF::StringImpl *v434[2];

  if (!a4)
    return result;
  v4 = a3;
  v5 = (uint64_t)a2;
  v6 = result;
  v433 = 0;
  v7 = &a3[a4];
  do
  {
    v8 = *v4;
    v9 = (WebCore::StyledElement *)*((_QWORD *)*v4 + 2);
    if (v9)
    {
      if ((*((_BYTE *)v9 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v9 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(*((WTF::AtomStringImpl **)*v4 + 2), a2);
        v9 = v427;
      }
      v8 = *v4;
    }
    ++*((_DWORD *)v8 + 2);
    v10 = v433;
    if (v433
      || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(&v433, 8u), (v10 = v433) != 0))
    {
      v11 = *(_DWORD *)(v10 - 8);
    }
    else
    {
      v11 = 0;
    }
    v12 = 0;
    v13 = *((_DWORD *)v9 + 4) >> 8;
    for (i = 1; ; ++i)
    {
      v15 = v13 & v11;
      v16 = (WebCore::StyledElement **)(v10 + 16 * v15);
      v17 = *v16;
      if (*v16 != (WebCore::StyledElement *)-1)
        break;
      v12 = (WebCore::StyledElement **)(v10 + 16 * v15);
LABEL_16:
      v13 = i + v15;
    }
    if (!v17)
    {
      if (v12)
      {
        *v12 = 0;
        v12[1] = 0;
        --*(_DWORD *)(v10 - 16);
        *v12 = v9;
      }
      else
      {
        *v16 = v9;
        v12 = (WebCore::StyledElement **)(v10 + 16 * v15);
      }
      v20 = v12[1];
      v12[1] = v8;
      if (v20)
      {
        if (*((_DWORD *)v20 + 2) == 1)
          (*(void (**)(WebCore::StyledElement *))(*(_QWORD *)v20 + 8))(v20);
        else
          --*((_DWORD *)v20 + 2);
      }
      v21 = v433;
      if (v433)
        v22 = *(_DWORD *)(v433 - 12) + 1;
      else
        v22 = 1;
      *(_DWORD *)(v433 - 12) = v22;
      v23 = (*(_DWORD *)(v21 - 16) + v22);
      v24 = *(unsigned int *)(v21 - 4);
      if (v24 > 0x400)
      {
        if (v24 > 2 * v23)
          goto LABEL_39;
      }
      else
      {
        if (3 * v24 > 4 * v23)
          goto LABEL_39;
        if (!(_DWORD)v24)
        {
          v25 = 8;
          goto LABEL_38;
        }
      }
      v25 = (_DWORD)v24 << (6 * v22 >= (2 * v24));
LABEL_38:
      WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(&v433, v25);
      goto LABEL_39;
    }
    if (v17 != v9)
      goto LABEL_16;
    v18 = v10 + 16 * v15;
    v19 = *(_DWORD **)(v18 + 8);
    *(_QWORD *)(v18 + 8) = v8;
    if (!v19)
    {
LABEL_22:
      if (!v9)
        goto LABEL_39;
LABEL_23:
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, a2);
      else
        *(_DWORD *)v9 -= 2;
      goto LABEL_39;
    }
    if (v19[2] != 1)
    {
      --v19[2];
      goto LABEL_22;
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    if (v9)
      goto LABEL_23;
LABEL_39:
    ++v4;
  }
  while (v4 != v7);
  v431 = 0;
  v432 = 0;
  v26 = *(_QWORD *)(v5 + 80);
  if (!v26)
    goto LABEL_119;
  while (1)
  {
    v27 = (_QWORD *)v26;
    v28 = *(_WORD *)(v26 + 28);
    if ((v28 & 0x10) != 0
      && (v28 & 0x110) != 0x110
      && *(_QWORD *)(v27[12] + 24) == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
    {
      break;
    }
    if ((v28 & 4) != 0)
    {
      v26 = v27[10];
      if (v26)
        continue;
    }
    if (v27 == (_QWORD *)v5)
      goto LABEL_119;
    while (1)
    {
      v26 = v27[7];
      if (v26)
        break;
      v27 = (_QWORD *)v27[4];
      if (v27)
        v29 = v27 == (_QWORD *)v5;
      else
        v29 = 1;
      if (v29)
        goto LABEL_119;
    }
  }
  v30 = v433;
LABEL_63:
  v31 = (WTF::StringImpl **)(v27 + 16);
  WebCore::HTMLAttachmentElement::archiveResourceURL((uint64_t)&v427);
  v32 = v427;
  if (v427)
  {
    if ((*((_BYTE *)v427 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v427 += 2;
    }
    else
    {
      WTF::AtomStringImpl::lookUpSlowCase(v427, a2);
      v32 = v421;
      if (!v421)
        goto LABEL_90;
    }
    if (v30)
    {
      v33 = 0;
      for (j = *((_DWORD *)v32 + 4) >> 8; ; j = v33 + v35)
      {
        v35 = j & *(_DWORD *)(v30 - 8);
        v36 = *(WTF::StringImpl **)(v30 + 16 * v35);
        if (v36 != (WTF::StringImpl *)-1)
        {
          if (!v36)
            goto LABEL_88;
          if (v36 == v32)
            break;
        }
        ++v33;
      }
      if ((_DWORD)v35 != *(_DWORD *)(v30 - 4))
      {
        v37 = *v31;
        if (*v31)
          *(_DWORD *)v37 += 2;
        v38 = v30 + 16 * v35;
        v421 = v37;
        v40 = *(_QWORD *)(v38 + 8);
        v39 = (WebCore::SubstituteResource **)(v38 + 8);
        v41 = *(WTF::StringImpl **)(v40 + 320);
        if (v41)
          *(_DWORD *)v41 += 2;
        v422 = v41;
        v42 = (WTF *)WebCore::SubstituteResource::data(*v39, a2);
        WebCore::FragmentedSharedBuffer::makeContiguous(v42, v423);
        v44 = HIDWORD(v432);
        if (HIDWORD(v432) == (_DWORD)v432)
        {
          v45 = (uint64_t *)WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v431, HIDWORD(v432) + 1, (unint64_t)&v421);
          v44 = HIDWORD(v432);
          v46 = &v431[3 * HIDWORD(v432)];
          v47 = *v45;
          *v45 = 0;
          *v46 = v47;
          v48 = v45[1];
          v45[1] = 0;
          v46[1] = v48;
          v49 = v46 + 2;
          v50 = v45 + 2;
        }
        else
        {
          v51 = (WTF::StringImpl **)&v431[3 * HIDWORD(v432)];
          v52 = v421;
          v421 = 0;
          *v51 = v52;
          v53 = v422;
          v422 = 0;
          v51[1] = v53;
          v49 = (uint64_t *)(v51 + 2);
          v50 = v423;
        }
        v54 = *v50;
        *v50 = 0;
        *v49 = v54;
        HIDWORD(v432) = v44 + 1;
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v423, v43);
        v55 = v422;
        v422 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
            WTF::StringImpl::destroy(v55, a2);
          else
            *(_DWORD *)v55 -= 2;
        }
        v56 = v421;
        v421 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
            WTF::StringImpl::destroy(v56, a2);
          else
            *(_DWORD *)v56 -= 2;
        }
      }
    }
LABEL_88:
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, a2);
    else
      *(_DWORD *)v32 -= 2;
LABEL_90:
    v57 = v427;
    v427 = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
        WTF::StringImpl::destroy(v57, a2);
      else
        *(_DWORD *)v57 -= 2;
    }
  }
  v58 = v27[10];
  if (v58)
  {
LABEL_94:
    while (1)
    {
      v27 = (_QWORD *)v58;
      v59 = *(_WORD *)(v58 + 28);
      if ((v59 & 0x10) != 0
        && (v59 & 0x110) != 0x110
        && *(_QWORD *)(v27[12] + 24) == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
      {
        goto LABEL_63;
      }
      if ((v59 & 4) != 0)
      {
        v58 = v27[10];
        if (v58)
          continue;
      }
      if (v27 == (_QWORD *)v5)
        goto LABEL_119;
      while (1)
      {
        v58 = v27[7];
        if (v58)
          break;
        v27 = (_QWORD *)v27[4];
        if (v27)
          v60 = v27 == (_QWORD *)v5;
        else
          v60 = 1;
        if (v60)
          goto LABEL_119;
      }
    }
  }
  if (v27 != (_QWORD *)v5)
  {
    do
    {
      v58 = v27[7];
      if (v58)
        goto LABEL_94;
      v27 = (_QWORD *)v27[4];
      if (v27)
        v61 = v27 == (_QWORD *)v5;
      else
        v61 = 1;
    }
    while (!v61);
  }
LABEL_119:
  v407 = v6;
  if (HIDWORD(v432))
  {
    v62 = *((_QWORD *)v6 + 37);
    v63 = *(_QWORD *)(v62 + 3056);
    if (!v63)
    {
      v397 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v397, (WebCore::Document *)v62);
      v398 = *(WebCore::Editor **)(v62 + 3056);
      *(_QWORD *)(v62 + 3056) = v397;
      if (v398)
      {
        WebCore::Editor::~Editor(v398, a2);
        if (*(_DWORD *)v399)
          goto LABEL_870;
        WTF::fastFree((WTF *)v399, a2);
      }
LABEL_868:
      v63 = *(_QWORD *)(v62 + 3056);
      v6 = v407;
    }
    v64 = *(_QWORD *)(v63 + 8);
    if (v64)
    {
      v65 = *(_QWORD *)(v64 + 8);
      if (v65)
        (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v65 + 184))(v65, &v431);
    }
  }
  v425 = 0;
  v426 = 0;
  v66 = *(_QWORD *)(v5 + 80);
  v406 = v5;
  if (!v66)
  {
    v403 = 0;
    __src = 0;
    goto LABEL_276;
  }
  while (1)
  {
    v67 = v66;
    v68 = *(_WORD *)(v66 + 28);
    if ((v68 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v67 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
      break;
    if ((v68 & 4) != 0)
    {
      v66 = *(_QWORD *)(v67 + 80);
      if (v66)
        continue;
    }
    if (v67 == v5)
      goto LABEL_247;
    while (1)
    {
      v66 = *(_QWORD *)(v67 + 56);
      if (v66)
        break;
      v67 = *(_QWORD *)(v67 + 32);
      if (v67)
        v69 = v67 == v5;
      else
        v69 = 1;
      if (v69)
        goto LABEL_247;
    }
  }
  v70 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_139:
  v71 = *(_QWORD *)(v67 + 104);
  if (v71
    && ((v72 = *(unsigned int *)(v71 + 4), (v72 & 1) != 0)
      ? (v73 = *(_QWORD *)(v71 + 40), v74 = *(unsigned int *)(v71 + 52))
      : (v73 = v71 + 32, v74 = v72 >> 5),
        v74))
  {
    v75 = (WTF::StringImpl **)(v73 + 8);
    while (1)
    {
      v76 = (uint64_t)*(v75 - 1);
      if (v76 == WebCore::HTMLNames::srcAttr
        || *(_QWORD *)(v76 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
        && *(_QWORD *)(v76 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
      {
        break;
      }
      v75 += 2;
      if (!--v74)
        goto LABEL_151;
    }
  }
  else
  {
LABEL_151:
    v75 = v70;
  }
  v77 = *v75;
  if (*v75)
  {
    v78 = *(_DWORD *)v77 + 2;
    *(_DWORD *)v77 = v78;
    v434[0] = v77;
    if (*((_DWORD *)v77 + 1) && (v79 = v433) != 0)
    {
      v80 = 0;
      for (k = *((_DWORD *)v77 + 4) >> 8; ; k = v80 + v82)
      {
        v82 = k & *(_DWORD *)(v433 - 8);
        v83 = *(WTF::StringImpl **)(v433 + 16 * v82);
        if (v83 != (WTF::StringImpl *)-1)
        {
          if (!v83)
            goto LABEL_207;
          if (v83 == v77)
            break;
        }
        ++v80;
      }
      if ((_DWORD)v82 != *(_DWORD *)(v433 - 4))
      {
        if (v71
          && ((v84 = *(unsigned int *)(v71 + 4), (v84 & 1) != 0)
            ? (v85 = *(_QWORD *)(v71 + 40), v86 = *(unsigned int *)(v71 + 52))
            : (v85 = v71 + 32, v86 = v84 >> 5),
              v86))
        {
          v87 = (WebCore::StyledElement **)(v85 + 8);
          while (1)
          {
            v88 = (uint64_t)*(v87 - 1);
            if (v88 == WebCore::HTMLNames::altAttr
              || *(_QWORD *)(v88 + 24) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 24)
              && *(_QWORD *)(v88 + 32) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 32))
            {
              break;
            }
            v87 += 2;
            if (!--v86)
              goto LABEL_174;
          }
        }
        else
        {
LABEL_174:
          v87 = v70;
        }
        v89 = *v87;
        if (!*v87 || (v90 = *((_DWORD *)v89 + 1), *(_DWORD *)v89 += 2, !v90))
        {
          v421 = 0;
          WTF::URL::invalidate((WTF::URL *)&v421);
          v91 = (WTF::URL *)MEMORY[0x19AEA52F8](&v427, &v421, v434, 0);
          WTF::URL::lastPathComponent(v91);
          if ((v92 & 0xFF00000000) != 0)
            WTF::String::String();
          else
            WTF::String::String();
          v93 = v424;
          v424 = 0;
          if (v89)
          {
            if (*(_DWORD *)v89 == 2)
            {
              WTF::StringImpl::destroy(v89, a2);
              v122 = v424;
              v424 = 0;
              if (v122)
              {
                if (*(_DWORD *)v122 == 2)
                  WTF::StringImpl::destroy(v122, a2);
                else
                  *(_DWORD *)v122 -= 2;
              }
            }
            else
            {
              *(_DWORD *)v89 -= 2;
              v424 = 0;
            }
          }
          v94 = v427;
          v427 = 0;
          if (v94)
          {
            if (*(_DWORD *)v94 == 2)
              WTF::StringImpl::destroy(v94, a2);
            else
              *(_DWORD *)v94 -= 2;
          }
          v95 = v421;
          v421 = 0;
          if (v95)
          {
            if (*(_DWORD *)v95 != 2)
            {
              *(_DWORD *)v95 -= 2;
              goto LABEL_188;
            }
            WTF::StringImpl::destroy(v95, a2);
            if (v93)
            {
LABEL_241:
              if (*((_DWORD *)v93 + 1))
              {
                v89 = v93;
                goto LABEL_192;
              }
            }
          }
          else
          {
LABEL_188:
            if (v93)
              goto LABEL_241;
          }
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v89 = v427;
          if (v93)
          {
            if (*(_DWORD *)v93 == 2)
              WTF::StringImpl::destroy(v93, a2);
            else
              *(_DWORD *)v93 -= 2;
          }
        }
LABEL_192:
        v427 = v89;
        v96 = v79 + 16 * v82;
        v98 = *(_QWORD *)(v96 + 8);
        v97 = (WebCore::SubstituteResource **)(v96 + 8);
        v99 = *(WTF::StringImpl **)(v98 + 320);
        if (v99)
          *(_DWORD *)v99 += 2;
        v428 = v99;
        v100 = (WTF *)WebCore::SubstituteResource::data(*v97, a2);
        WebCore::FragmentedSharedBuffer::makeContiguous(v100, &v429);
        *(_DWORD *)(v67 + 24) += 2;
        v430[0] = v67;
        v102 = HIDWORD(v426);
        if (HIDWORD(v426) == (_DWORD)v426)
        {
          v103 = (uint64_t *)WTF::Vector<WebCore::replaceRichContentWithAttachments(WebCore::LocalFrame &,WebCore::DocumentFragment &,WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::AttachmentInsertionInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v425, HIDWORD(v426) + 1, (unint64_t)&v427);
          v102 = HIDWORD(v426);
          v104 = (_QWORD *)(v425 + 32 * HIDWORD(v426));
          v105 = *v103;
          *v103 = 0;
          *v104 = v105;
          v106 = v103[1];
          v103[1] = 0;
          v104[1] = v106;
          v107 = v103[2];
          v103[2] = 0;
          v104[2] = v107;
          v108 = v104 + 3;
          v109 = v103 + 3;
        }
        else
        {
          v110 = (WebCore::StyledElement **)(v425 + 32 * HIDWORD(v426));
          v111 = v427;
          v427 = 0;
          *v110 = v111;
          v112 = v428;
          v428 = 0;
          v110[1] = v112;
          v113 = v429;
          v429 = 0;
          v110[2] = (WebCore::StyledElement *)v113;
          v108 = v110 + 3;
          v109 = v430;
        }
        v114 = *v109;
        *v109 = 0;
        *v108 = v114;
        HIDWORD(v426) = v102 + 1;
        v115 = v430[0];
        v430[0] = 0;
        if (v115)
        {
          if (*(_DWORD *)(v115 + 24) == 2)
          {
            if ((*(_WORD *)(v115 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v115, v101);
          }
          else
          {
            *(_DWORD *)(v115 + 24) -= 2;
          }
        }
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v429, v101);
        v116 = v428;
        v428 = 0;
        if (v116)
        {
          if (*(_DWORD *)v116 == 2)
            WTF::StringImpl::destroy(v116, a2);
          else
            *(_DWORD *)v116 -= 2;
        }
        v117 = v427;
        v427 = 0;
        if (v117)
        {
          if (*(_DWORD *)v117 == 2)
            WTF::StringImpl::destroy(v117, a2);
          else
            *(_DWORD *)v117 -= 2;
        }
        v77 = v434[0];
      }
LABEL_207:
      v434[0] = 0;
      if (v77)
      {
        v78 = *(_DWORD *)v77;
        goto LABEL_209;
      }
    }
    else
    {
      v434[0] = 0;
LABEL_209:
      if (v78 == 2)
        WTF::StringImpl::destroy(v77, a2);
      else
        *(_DWORD *)v77 = v78 - 2;
    }
  }
  v118 = *(_QWORD *)(v67 + 80);
  if (v118)
  {
LABEL_212:
    while (1)
    {
      v67 = v118;
      v119 = *(_WORD *)(v118 + 28);
      if ((v119 & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v67 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
      {
        goto LABEL_139;
      }
      if ((v119 & 4) != 0)
      {
        v118 = *(_QWORD *)(v67 + 80);
        if (v118)
          continue;
      }
      if (v67 == v5)
        goto LABEL_247;
      while (1)
      {
        v118 = *(_QWORD *)(v67 + 56);
        if (v118)
          break;
        v67 = *(_QWORD *)(v67 + 32);
        if (v67)
          v120 = v67 == v5;
        else
          v120 = 1;
        if (v120)
          goto LABEL_247;
      }
    }
  }
  if (v67 != v5)
  {
    do
    {
      v118 = *(_QWORD *)(v67 + 56);
      if (v118)
        goto LABEL_212;
      v67 = *(_QWORD *)(v67 + 32);
      if (v67)
        v121 = v67 == v5;
      else
        v121 = 1;
    }
    while (!v121);
  }
LABEL_247:
  v123 = *(_QWORD *)(v5 + 80);
  if (!v123)
  {
    v403 = 0;
    __src = 0;
    v6 = v407;
    goto LABEL_276;
  }
  v6 = v407;
  while (1)
  {
    v124 = v123;
    v125 = *(_WORD *)(v123 + 28);
    if ((v125 & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v124 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::objectTag + 24))
    {
      break;
    }
    if ((v125 & 4) != 0)
    {
      v123 = *(_QWORD *)(v124 + 80);
      if (v123)
        continue;
    }
    if (v124 == v5)
    {
LABEL_261:
      v127 = 0;
      v128 = 0;
      __src = 0;
      goto LABEL_262;
    }
    while (1)
    {
      v123 = *(_QWORD *)(v124 + 56);
      if (v123)
        break;
      v124 = *(_QWORD *)(v124 + 32);
      if (v124)
        v126 = v124 == v5;
      else
        v126 = 1;
      if (v126)
        goto LABEL_261;
    }
  }
  __src = 0;
  v128 = 0;
  v127 = 0;
  v278 = &v429;
  v279 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  v280 = v430;
LABEL_659:
  v281 = *(_QWORD *)(v124 + 104);
  if (v281
    && ((v282 = *(unsigned int *)(v281 + 4), (v282 & 1) != 0)
      ? (v283 = *(_QWORD *)(v281 + 40), v284 = *(unsigned int *)(v281 + 52))
      : (v283 = v281 + 32, v284 = v282 >> 5),
        v284))
  {
    v285 = (WTF::StringImpl **)(v283 + 8);
    while (1)
    {
      v286 = (uint64_t)*(v285 - 1);
      if (v286 == WebCore::HTMLNames::dataAttr
        || *(_QWORD *)(v286 + 24) == *(_QWORD *)(WebCore::HTMLNames::dataAttr + 24)
        && *(_QWORD *)(v286 + 32) == *(_QWORD *)(WebCore::HTMLNames::dataAttr + 32))
      {
        break;
      }
      v285 += 2;
      if (!--v284)
        goto LABEL_671;
    }
  }
  else
  {
LABEL_671:
    v285 = v279;
  }
  v287 = *v285;
  if (!*v285)
  {
    v434[0] = 0;
LABEL_722:
    v323 = v127;
    if (v127 == v128)
    {
      v324 = ((unint64_t)v128 >> 2) + v128;
      if (v324 >= 0x10)
        v325 = v324 + 1;
      else
        v325 = 16;
      if (v325 <= (unint64_t)v127 + 1)
        v326 = v127 + 1;
      else
        v326 = v325;
      if (v326 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x194B88128);
      }
      v327 = v278;
      v328 = v280;
      v329 = v279;
      v330 = (void *)WTF::fastMalloc((WTF *)(8 * v326));
      memcpy(v330, __src, 8 * v127);
      if (__src)
      {
        if (v330 == __src)
        {
          LODWORD(v326) = 0;
          v330 = 0;
        }
        WTF::fastFree((WTF *)__src, a2);
      }
      v279 = v329;
      v127 = v128 + 1;
      *(_DWORD *)(v124 + 24) += 2;
      *((_QWORD *)v330 + v323) = v124;
      v128 = v326;
      __src = v330;
      v6 = v407;
      v280 = v328;
      v278 = v327;
    }
    else
    {
      ++v127;
      *(_DWORD *)(v124 + 24) += 2;
      *((_QWORD *)__src + v323) = v124;
    }
    goto LABEL_733;
  }
  *(_DWORD *)v287 += 2;
  v434[0] = v287;
  if (!*((_DWORD *)v287 + 1))
    goto LABEL_722;
  v288 = v433;
  if (v433)
  {
    v289 = 0;
    for (m = *((_DWORD *)v287 + 4) >> 8; ; m = v289 + v291)
    {
      v291 = m & *(_DWORD *)(v433 - 8);
      v292 = *(WTF::StringImpl **)(v433 + 16 * v291);
      if (v292 != (WTF::StringImpl *)-1)
      {
        if (!v292)
          goto LABEL_733;
        if (v292 == v287)
          break;
      }
      ++v289;
    }
    if ((_DWORD)v291 != *(_DWORD *)(v433 - 4))
    {
      v421 = 0;
      WTF::URL::invalidate((WTF::URL *)&v421);
      v293 = (WTF::URL *)MEMORY[0x19AEA52F8](&v427, &v421, v434, 0);
      WTF::URL::lastPathComponent(v293);
      if ((v294 & 0xFF00000000) != 0)
        WTF::String::String();
      else
        WTF::String::String();
      v296 = v427;
      v427 = 0;
      if (v296)
      {
        if (*(_DWORD *)v296 == 2)
          WTF::StringImpl::destroy(v296, v295);
        else
          *(_DWORD *)v296 -= 2;
      }
      v297 = v421;
      v421 = 0;
      if (v297)
      {
        if (*(_DWORD *)v297 == 2)
          WTF::StringImpl::destroy(v297, v295);
        else
          *(_DWORD *)v297 -= 2;
      }
      v298 = v424;
      if (!v424 || !*((_DWORD *)v424 + 1))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v298 = v427;
        v299 = v424;
        v424 = v427;
        if (v299)
        {
          if (*(_DWORD *)v299 == 2)
          {
            WTF::StringImpl::destroy(v299, v295);
            v298 = v424;
          }
          else
          {
            *(_DWORD *)v299 -= 2;
          }
        }
      }
      v424 = 0;
      v427 = v298;
      v300 = v288 + 16 * v291;
      v302 = *(_QWORD *)(v300 + 8);
      v301 = (WebCore::SubstituteResource **)(v300 + 8);
      v303 = *(WTF::StringImpl **)(v302 + 320);
      if (v303)
        *(_DWORD *)v303 += 2;
      v428 = v303;
      v304 = (WTF *)WebCore::SubstituteResource::data(*v301, v295);
      WebCore::FragmentedSharedBuffer::makeContiguous(v304, v278);
      *(_DWORD *)(v124 + 24) += 2;
      v430[0] = v124;
      v306 = HIDWORD(v426);
      if (HIDWORD(v426) == (_DWORD)v426)
      {
        v307 = (uint64_t *)WTF::Vector<WebCore::replaceRichContentWithAttachments(WebCore::LocalFrame &,WebCore::DocumentFragment &,WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::AttachmentInsertionInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v425, HIDWORD(v426) + 1, (unint64_t)&v427);
        v306 = HIDWORD(v426);
        v308 = (_QWORD *)(v425 + 32 * HIDWORD(v426));
        v309 = *v307;
        *v307 = 0;
        *v308 = v309;
        v310 = v307[1];
        v307[1] = 0;
        v308[1] = v310;
        v311 = v307[2];
        v307[2] = 0;
        v308[2] = v311;
        v312 = v308 + 3;
        v313 = v307 + 3;
      }
      else
      {
        v314 = (WebCore::StyledElement **)(v425 + 32 * HIDWORD(v426));
        v315 = v427;
        v427 = 0;
        *v314 = v315;
        v316 = v428;
        v428 = 0;
        v314[1] = v316;
        v317 = v429;
        v429 = 0;
        v314[2] = (WebCore::StyledElement *)v317;
        v312 = v314 + 3;
        v313 = v280;
      }
      v318 = *v313;
      *v313 = 0;
      *v312 = v318;
      HIDWORD(v426) = v306 + 1;
      v319 = v430[0];
      v430[0] = 0;
      if (v319)
      {
        if (*(_DWORD *)(v319 + 24) == 2)
        {
          if ((*(_WORD *)(v319 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v319, v305);
        }
        else
        {
          *(_DWORD *)(v319 + 24) -= 2;
        }
      }
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v278, v305);
      v320 = v428;
      v428 = 0;
      v279 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      if (v320)
      {
        if (*(_DWORD *)v320 == 2)
        {
          WTF::StringImpl::destroy(v320, a2);
          v279 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
        }
        else
        {
          *(_DWORD *)v320 -= 2;
        }
      }
      v321 = v427;
      v427 = 0;
      if (v321)
      {
        if (*(_DWORD *)v321 == 2)
        {
          WTF::StringImpl::destroy(v321, a2);
          v279 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
        }
        else
        {
          *(_DWORD *)v321 -= 2;
        }
      }
      v322 = v424;
      v424 = 0;
      if (v322)
      {
        if (*(_DWORD *)v322 == 2)
        {
          WTF::StringImpl::destroy(v322, a2);
          v279 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
        }
        else
        {
          *(_DWORD *)v322 -= 2;
        }
      }
    }
  }
LABEL_733:
  v331 = v434[0];
  v434[0] = 0;
  if (v331)
  {
    if (*(_DWORD *)v331 == 2)
    {
      v336 = v279;
      WTF::StringImpl::destroy(v331, a2);
      v279 = v336;
    }
    else
    {
      *(_DWORD *)v331 -= 2;
    }
  }
  v332 = *(_QWORD *)(v124 + 80);
  if (v332)
  {
LABEL_737:
    while (1)
    {
      v124 = v332;
      v333 = *(_WORD *)(v332 + 28);
      if ((v333 & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v124 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::objectTag + 24))
      {
        goto LABEL_659;
      }
      if ((v333 & 4) != 0)
      {
        v332 = *(_QWORD *)(v124 + 80);
        if (v332)
          continue;
      }
      if (v124 == v406)
        goto LABEL_761;
      while (1)
      {
        v332 = *(_QWORD *)(v124 + 56);
        if (v332)
          break;
        v124 = *(_QWORD *)(v124 + 32);
        if (v124)
          v334 = v124 == v406;
        else
          v334 = 1;
        if (v334)
          goto LABEL_761;
      }
    }
  }
  if (v124 != v406)
  {
    do
    {
      v332 = *(_QWORD *)(v124 + 56);
      if (v332)
        goto LABEL_737;
      v124 = *(_QWORD *)(v124 + 32);
      if (v124)
        v335 = v124 == v406;
      else
        v335 = 1;
    }
    while (!v335);
  }
LABEL_761:
  v5 = v406;
LABEL_262:
  v129 = *(_QWORD *)(v5 + 80);
  v403 = v127;
  if (!v129)
    goto LABEL_276;
  while (1)
  {
    v130 = v129;
    v131 = *(_WORD *)(v129 + 28);
    if ((v131 & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v130 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::sourceTag + 24))
    {
      break;
    }
    if ((v131 & 4) != 0)
    {
      v129 = *(_QWORD *)(v130 + 80);
      if (v129)
        continue;
    }
    if (v130 == v5)
      goto LABEL_276;
    while (1)
    {
      v129 = *(_QWORD *)(v130 + 56);
      if (v129)
        break;
      v130 = *(_QWORD *)(v130 + 32);
      if (v130)
        v132 = v130 == v5;
      else
        v132 = 1;
      if (v132)
        goto LABEL_276;
    }
  }
  v337 = &v429;
  v338 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  v5 = (uint64_t)v430;
  v339 = &WebCore::HTMLNames::srcsetAttr;
LABEL_763:
  v340 = *(_QWORD *)(v130 + 104);
  if (v340
    && ((v341 = *(unsigned int *)(v340 + 4), (v341 & 1) != 0)
      ? (v342 = *(_QWORD *)(v340 + 40), v343 = *(unsigned int *)(v340 + 52))
      : (v342 = v340 + 32, v343 = v341 >> 5),
        v343))
  {
    v344 = *v339;
    v345 = (WTF::StringImpl **)(v342 + 8);
    while (1)
    {
      v346 = (uint64_t)*(v345 - 1);
      if (v346 == v344
        || *(_QWORD *)(v346 + 24) == *(_QWORD *)(v344 + 24) && *(_QWORD *)(v346 + 32) == *(_QWORD *)(v344 + 32))
      {
        break;
      }
      v345 += 2;
      if (!--v343)
        goto LABEL_775;
    }
  }
  else
  {
LABEL_775:
    v345 = v338;
  }
  v347 = *v345;
  if (!*v345)
  {
    v434[0] = 0;
LABEL_826:
    v383 = v403;
    if (v403 == v128)
    {
      v405 = v337;
      v384 = ((unint64_t)v128 >> 2) + v128;
      if (v384 >= 0x10)
        v385 = v384 + 1;
      else
        v385 = 16;
      if (v385 <= (unint64_t)v403 + 1)
        v386 = v403 + 1;
      else
        v386 = v385;
      if (v386 >> 29)
      {
LABEL_875:
        __break(0xC471u);
        JUMPOUT(0x194B88110);
      }
      v387 = v5;
      v388 = v338;
      v389 = v339;
      v390 = (void *)WTF::fastMalloc((WTF *)(8 * v386));
      memcpy(v390, __src, 8 * v403);
      if (__src)
      {
        if (v390 == __src)
        {
          LODWORD(v386) = 0;
          v390 = 0;
        }
        WTF::fastFree((WTF *)__src, a2);
      }
      v339 = v389;
      v403 = v128 + 1;
      __src = v390;
      *(_DWORD *)(v130 + 24) += 2;
      *((_QWORD *)v390 + v383) = v130;
      v128 = v386;
      v6 = v407;
      v338 = v388;
      v5 = v387;
      v337 = v405;
    }
    else
    {
      ++v403;
      *(_DWORD *)(v130 + 24) += 2;
      *((_QWORD *)__src + v383) = v130;
    }
    goto LABEL_837;
  }
  *(_DWORD *)v347 += 2;
  v434[0] = v347;
  if (!*((_DWORD *)v347 + 1))
    goto LABEL_826;
  v348 = v433;
  if (v433)
  {
    v349 = 0;
    for (n = *((_DWORD *)v347 + 4) >> 8; ; n = v349 + v351)
    {
      v351 = n & *(_DWORD *)(v433 - 8);
      v352 = *(WTF::StringImpl **)(v433 + 16 * v351);
      if (v352 != (WTF::StringImpl *)-1)
      {
        if (!v352)
          goto LABEL_837;
        if (v352 == v347)
          break;
      }
      ++v349;
    }
    if ((_DWORD)v351 != *(_DWORD *)(v433 - 4))
    {
      v421 = 0;
      WTF::URL::invalidate((WTF::URL *)&v421);
      v353 = (WTF::URL *)MEMORY[0x19AEA52F8](&v427, &v421, v434, 0);
      WTF::URL::lastPathComponent(v353);
      if ((v354 & 0xFF00000000) != 0)
        WTF::String::String();
      else
        WTF::String::String();
      v356 = v427;
      v427 = 0;
      if (v356)
      {
        if (*(_DWORD *)v356 == 2)
          WTF::StringImpl::destroy(v356, v355);
        else
          *(_DWORD *)v356 -= 2;
      }
      v357 = v421;
      v421 = 0;
      if (v357)
      {
        if (*(_DWORD *)v357 == 2)
          WTF::StringImpl::destroy(v357, v355);
        else
          *(_DWORD *)v357 -= 2;
      }
      v358 = v424;
      if (!v424 || !*((_DWORD *)v424 + 1))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v358 = v427;
        v359 = v424;
        v424 = v427;
        if (v359)
        {
          if (*(_DWORD *)v359 == 2)
          {
            WTF::StringImpl::destroy(v359, v355);
            v358 = v424;
          }
          else
          {
            *(_DWORD *)v359 -= 2;
          }
        }
      }
      v424 = 0;
      v427 = v358;
      v360 = v348 + 16 * v351;
      v362 = *(_QWORD *)(v360 + 8);
      v361 = (WebCore::SubstituteResource **)(v360 + 8);
      v363 = *(WTF::StringImpl **)(v362 + 320);
      if (v363)
        *(_DWORD *)v363 += 2;
      v428 = v363;
      v364 = (WTF *)WebCore::SubstituteResource::data(*v361, v355);
      WebCore::FragmentedSharedBuffer::makeContiguous(v364, v337);
      *(_DWORD *)(v130 + 24) += 2;
      v430[0] = v130;
      v366 = HIDWORD(v426);
      if (HIDWORD(v426) == (_DWORD)v426)
      {
        v367 = (uint64_t *)WTF::Vector<WebCore::replaceRichContentWithAttachments(WebCore::LocalFrame &,WebCore::DocumentFragment &,WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::AttachmentInsertionInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v425, HIDWORD(v426) + 1, (unint64_t)&v427);
        v366 = HIDWORD(v426);
        v368 = (_QWORD *)(v425 + 32 * HIDWORD(v426));
        v369 = *v367;
        *v367 = 0;
        *v368 = v369;
        v370 = v367[1];
        v367[1] = 0;
        v368[1] = v370;
        v371 = v367[2];
        v367[2] = 0;
        v368[2] = v371;
        v372 = v368 + 3;
        v373 = v367 + 3;
      }
      else
      {
        v374 = (WebCore::StyledElement **)(v425 + 32 * HIDWORD(v426));
        v375 = v427;
        v427 = 0;
        *v374 = v375;
        v376 = v428;
        v428 = 0;
        v374[1] = v376;
        v377 = v429;
        v429 = 0;
        v374[2] = (WebCore::StyledElement *)v377;
        v372 = v374 + 3;
        v373 = (uint64_t *)v5;
      }
      v378 = *v373;
      *v373 = 0;
      *v372 = v378;
      HIDWORD(v426) = v366 + 1;
      v379 = v430[0];
      v430[0] = 0;
      if (v379)
      {
        if (*(_DWORD *)(v379 + 24) == 2)
        {
          if ((*(_WORD *)(v379 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v379, v365);
        }
        else
        {
          *(_DWORD *)(v379 + 24) -= 2;
        }
      }
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v337, v365);
      v380 = v428;
      v428 = 0;
      v339 = &WebCore::HTMLNames::srcsetAttr;
      if (v380)
      {
        if (*(_DWORD *)v380 == 2)
        {
          WTF::StringImpl::destroy(v380, a2);
          v339 = &WebCore::HTMLNames::srcsetAttr;
        }
        else
        {
          *(_DWORD *)v380 -= 2;
        }
      }
      v381 = v427;
      v427 = 0;
      if (v381)
      {
        if (*(_DWORD *)v381 == 2)
        {
          WTF::StringImpl::destroy(v381, a2);
          v339 = &WebCore::HTMLNames::srcsetAttr;
        }
        else
        {
          *(_DWORD *)v381 -= 2;
        }
      }
      v382 = v424;
      v424 = 0;
      if (v382)
      {
        if (*(_DWORD *)v382 == 2)
        {
          WTF::StringImpl::destroy(v382, a2);
          v339 = &WebCore::HTMLNames::srcsetAttr;
        }
        else
        {
          *(_DWORD *)v382 -= 2;
        }
      }
    }
  }
LABEL_837:
  v391 = v434[0];
  v434[0] = 0;
  if (v391)
  {
    if (*(_DWORD *)v391 == 2)
    {
      v396 = v339;
      WTF::StringImpl::destroy(v391, a2);
      v339 = v396;
    }
    else
    {
      *(_DWORD *)v391 -= 2;
    }
  }
  v392 = *(_QWORD *)(v130 + 80);
  if (v392)
  {
LABEL_841:
    while (1)
    {
      v130 = v392;
      v393 = *(_WORD *)(v392 + 28);
      if ((v393 & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v130 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::sourceTag + 24))
      {
        goto LABEL_763;
      }
      if ((v393 & 4) != 0)
      {
        v392 = *(_QWORD *)(v130 + 80);
        if (v392)
          continue;
      }
      if (v130 == v406)
        goto LABEL_276;
      while (1)
      {
        v392 = *(_QWORD *)(v130 + 56);
        if (v392)
          break;
        v130 = *(_QWORD *)(v130 + 32);
        if (v130)
          v394 = v130 == v406;
        else
          v394 = 1;
        if (v394)
          goto LABEL_276;
      }
    }
  }
  if (v130 != v406)
  {
    do
    {
      v392 = *(_QWORD *)(v130 + 56);
      if (v392)
        goto LABEL_841;
      v130 = *(_QWORD *)(v130 + 32);
      if (v130)
        v395 = v130 == v406;
      else
        v395 = 1;
    }
    while (!v395);
  }
LABEL_276:
  if (HIDWORD(v426))
  {
    v133 = v425;
    v134 = v425 + 32 * HIDWORD(v426);
    while (1)
    {
      v135 = *(_QWORD *)(v133 + 24);
      *(_QWORD *)(v133 + 24) = 0;
      v136 = *(_QWORD *)(v135 + 32);
      if (v136)
        break;
LABEL_400:
      if (*(_DWORD *)(v135 + 24) == 2)
      {
        if ((*(_WORD *)(v135 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v135, a2);
      }
      else
      {
        *(_DWORD *)(v135 + 24) -= 2;
      }
      v133 += 32;
      if (v133 == v134)
        goto LABEL_599;
    }
    *(_DWORD *)(v136 + 24) += 2;
    if (*(_QWORD *)v133 && WTF::StringImpl::startsWith())
    {
      v137 = *((_QWORD *)v6 + 37);
      if (v137)
        *(_DWORD *)(v137 + 24) += 2;
      v62 = *(_QWORD *)(v133 + 16);
      if (*(_DWORD *)(v62 + 20))
      {
        v138 = *(_QWORD *)(*(_QWORD *)(v62 + 8) + 8);
        v139 = *(unsigned int *)(v138 + 24);
        if ((_DWORD)v139 == -1)
        {
          v399 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_870:
          *(_QWORD *)(v399 + 496) = 0;
          *(_OWORD *)(v399 + 464) = 0u;
          *(_OWORD *)(v399 + 480) = 0u;
          *(_OWORD *)(v399 + 432) = 0u;
          *(_OWORD *)(v399 + 448) = 0u;
          *(_OWORD *)(v399 + 400) = 0u;
          *(_OWORD *)(v399 + 416) = 0u;
          *(_OWORD *)(v399 + 368) = 0u;
          *(_OWORD *)(v399 + 384) = 0u;
          *(_OWORD *)(v399 + 336) = 0u;
          *(_OWORD *)(v399 + 352) = 0u;
          *(_OWORD *)(v399 + 304) = 0u;
          *(_OWORD *)(v399 + 320) = 0u;
          *(_OWORD *)(v399 + 272) = 0u;
          *(_OWORD *)(v399 + 288) = 0u;
          *(_OWORD *)(v399 + 240) = 0u;
          *(_OWORD *)(v399 + 256) = 0u;
          *(_OWORD *)(v399 + 208) = 0u;
          *(_OWORD *)(v399 + 224) = 0u;
          *(_OWORD *)(v399 + 176) = 0u;
          *(_OWORD *)(v399 + 192) = 0u;
          *(_OWORD *)(v399 + 144) = 0u;
          *(_OWORD *)(v399 + 160) = 0u;
          *(_OWORD *)(v399 + 112) = 0u;
          *(_OWORD *)(v399 + 128) = 0u;
          *(_OWORD *)(v399 + 80) = 0u;
          *(_OWORD *)(v399 + 96) = 0u;
          *(_OWORD *)(v399 + 48) = 0u;
          *(_OWORD *)(v399 + 64) = 0u;
          *(_OWORD *)(v399 + 16) = 0u;
          *(_OWORD *)(v399 + 32) = 0u;
          *(_OWORD *)v399 = 0u;
          goto LABEL_868;
        }
        v427 = (WebCore::StyledElement *)v434;
        ((void (*)(WebCore::StyledElement **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v139])(&v427, v138 + 8);
      }
      WTF::String::String();
      v142 = *(_QWORD *)(v137 + 2744);
      if (v142)
      {
        v143 = *(_DWORD *)(v142 - 8);
        v144 = *((_DWORD *)v421 + 4);
        if (v144 < 0x100)
          v145 = WTF::StringImpl::hashSlowCase(v421);
        else
          v145 = v144 >> 8;
        for (ii = 0; ; v145 = ii + v5)
        {
          v5 = v145 & v143;
          v147 = *(WTF **)(v142 + 16 * v5);
          if (v147 != (WTF *)-1)
          {
            if (!v147)
              goto LABEL_295;
            if ((WTF::equal(v147, v421, v141) & 1) != 0)
              break;
          }
          ++ii;
        }
        v148 = *(_QWORD *)(v142 + 16 * v5 + 8);
        if (v148)
          *(_DWORD *)(v148 + 24) += 2;
      }
      else
      {
LABEL_295:
        v148 = 0;
      }
      v149 = v421;
      v421 = 0;
      if (v149)
      {
        if (*(_DWORD *)v149 != 2)
        {
          *(_DWORD *)v149 -= 2;
          goto LABEL_301;
        }
        WTF::StringImpl::destroy(v149, v140);
        if (!v148)
        {
LABEL_312:
          if (v137)
          {
            if (*(_DWORD *)(v137 + 24) == 2)
            {
              if ((*(_WORD *)(v137 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v137, v140);
            }
            else
            {
              *(_DWORD *)(v137 + 24) -= 2;
            }
          }
          goto LABEL_315;
        }
      }
      else
      {
LABEL_301:
        if (!v148)
          goto LABEL_312;
      }
      WebCore::ContainerNode::replaceChild((WebCore::ContainerNode *)v136, (WebCore::Node *)v148, (WebCore::Node *)v135, (uint64_t)v418);
      if (v420)
      {
        v150 = v419;
        v419 = 0;
        if (v150)
        {
          if (*(_DWORD *)v150 == 2)
            WTF::StringImpl::destroy(v150, a2);
          else
            *(_DWORD *)v150 -= 2;
        }
      }
      if (*(_DWORD *)(v148 + 24) == 2)
      {
        if ((*(_WORD *)(v148 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v148, a2);
      }
      else
      {
        *(_DWORD *)(v148 + 24) -= 2;
      }
      if (v137)
      {
        if (*(_DWORD *)(v137 + 24) != 2)
        {
          *(_DWORD *)(v137 + 24) -= 2;
          goto LABEL_398;
        }
        if ((*(_WORD *)(v137 + 30) & 0x400) == 0)
        {
          v200 = (WebCore::Node *)v137;
LABEL_481:
          WebCore::Node::removedLastRef(v200, a2);
        }
      }
      goto LABEL_398;
    }
LABEL_315:
    v151 = *(_QWORD *)(*(_QWORD *)(v406 + 40) + 8);
    v152 = bmalloc::api::isoAllocate();
    v153 = v152;
    *(_OWORD *)(v152 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v152 + 24) = 0x101C00000002;
    *(_QWORD *)(v152 + 32) = 0;
    *(_QWORD *)(v152 + 40) = v151 + 96;
    *(_OWORD *)(v152 + 48) = 0u;
    *(_OWORD *)(v152 + 64) = 0u;
    ++*(_DWORD *)(v151 + 3324);
    *(_QWORD *)(v152 + 80) = 0;
    *(_QWORD *)(v152 + 88) = 0;
    v154 = WebCore::HTMLNames::attachmentTag;
    if (WebCore::HTMLNames::attachmentTag)
      ++*(_DWORD *)WebCore::HTMLNames::attachmentTag;
    *(_QWORD *)(v152 + 96) = v154;
    *(_QWORD *)(v152 + 104) = 0;
    *(_QWORD *)v152 = off_1E33B4248;
    *(_BYTE *)(v152 + 112) = 0;
    *(_OWORD *)(v152 + 136) = 0uLL;
    *(_OWORD *)(v152 + 152) = 0uLL;
    *(_OWORD *)(v152 + 168) = 0uLL;
    *(_OWORD *)(v152 + 184) = 0uLL;
    *(_OWORD *)(v152 + 200) = 0uLL;
    *(_OWORD *)(v152 + 216) = 0uLL;
    *(_OWORD *)(v152 + 232) = 0uLL;
    *(_OWORD *)(v152 + 248) = 0uLL;
    *(_OWORD *)(v152 + 120) = 0uLL;
    *(_OWORD *)(v152 + 264) = 0uLL;
    *(_BYTE *)(v152 + 280) = 1;
    if ((*(_QWORD *)(*(_QWORD *)(v151 + 680) + 704) & 0x100000000000) != 0)
    {
      *(_BYTE *)(v152 + 112) = 1;
      WebCore::Element::ensureUserAgentShadowRoot((WebCore::Element *)v152);
    }
    v155 = (WebCore::Document *)*((_QWORD *)v6 + 37);
    v156 = *((_QWORD *)v155 + 382);
    if (!v156)
    {
      v251 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v251, v155);
      v253 = (WebCore::Editor *)*((_QWORD *)v155 + 382);
      *((_QWORD *)v155 + 382) = v251;
      if (v253)
      {
        WebCore::Editor::~Editor(v253, v252);
        if (*(_DWORD *)v254)
        {
          *(_QWORD *)(v254 + 496) = 0;
          *(_OWORD *)(v254 + 464) = 0u;
          *(_OWORD *)(v254 + 480) = 0u;
          *(_OWORD *)(v254 + 432) = 0u;
          *(_OWORD *)(v254 + 448) = 0u;
          *(_OWORD *)(v254 + 400) = 0u;
          *(_OWORD *)(v254 + 416) = 0u;
          *(_OWORD *)(v254 + 368) = 0u;
          *(_OWORD *)(v254 + 384) = 0u;
          *(_OWORD *)(v254 + 336) = 0u;
          *(_OWORD *)(v254 + 352) = 0u;
          *(_OWORD *)(v254 + 304) = 0u;
          *(_OWORD *)(v254 + 320) = 0u;
          *(_OWORD *)(v254 + 272) = 0u;
          *(_OWORD *)(v254 + 288) = 0u;
          *(_OWORD *)(v254 + 240) = 0u;
          *(_OWORD *)(v254 + 256) = 0u;
          *(_OWORD *)(v254 + 208) = 0u;
          *(_OWORD *)(v254 + 224) = 0u;
          *(_OWORD *)(v254 + 176) = 0u;
          *(_OWORD *)(v254 + 192) = 0u;
          *(_OWORD *)(v254 + 144) = 0u;
          *(_OWORD *)(v254 + 160) = 0u;
          *(_OWORD *)(v254 + 112) = 0u;
          *(_OWORD *)(v254 + 128) = 0u;
          *(_OWORD *)(v254 + 80) = 0u;
          *(_OWORD *)(v254 + 96) = 0u;
          *(_OWORD *)(v254 + 48) = 0u;
          *(_OWORD *)(v254 + 64) = 0u;
          *(_OWORD *)(v254 + 16) = 0u;
          *(_OWORD *)(v254 + 32) = 0u;
          *(_OWORD *)v254 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v254, v255);
        }
      }
      v156 = *((_QWORD *)v155 + 382);
    }
    v157 = *(_QWORD *)(v156 + 8);
    if (v157)
    {
      v158 = *(_QWORD *)(v157 + 8);
      if (v158)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v158 + 224))(v158))
        {
          v160 = *(_DWORD *)(v135 + 24);
          v161 = v160 + 2;
          *(_DWORD *)(v135 + 24) = v160 + 2;
          v162 = *(_WORD *)(v135 + 28);
          if ((v162 & 0x10) == 0
            || *(_QWORD *)(*(_QWORD *)(v135 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
          {
            if (v160)
            {
              v5 = 0;
              v163 = v162 & 0x10;
              *(_DWORD *)(v135 + 24) = v160;
LABEL_354:
              *(_DWORD *)(v135 + 24) = v161;
              if (!v163
                || *(_QWORD *)(*(_QWORD *)(v135 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::sourceTag + 24))
              {
                if (v160)
                {
                  v182 = 0;
                  *(_DWORD *)(v135 + 24) = v160;
                }
                else
                {
                  if ((*(_WORD *)(v135 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v135, v159);
                  v182 = 0;
                }
LABEL_360:
                LOBYTE(v428) = 1;
                v184 = *(WTF::StringImpl **)(v133 + 8);
                v427 = *(WebCore::StyledElement **)(*(_QWORD *)(v133 + 16) + 48);
                if (v184)
                {
                  if ((*((_BYTE *)v184 + 16) & 0x10) != 0)
                  {
                    *(_DWORD *)v184 += 2;
                  }
                  else
                  {
                    WTF::AtomStringImpl::addSlowCase(v184, (WTF::StringImpl *)v159);
                    v184 = v421;
                  }
                }
                v434[0] = v184;
                v185 = *(WTF::StringImpl **)v133;
                if (*(_QWORD *)v133)
                {
                  if ((*((_BYTE *)v185 + 16) & 0x10) != 0)
                  {
                    *(_DWORD *)v185 += 2;
                  }
                  else
                  {
                    WTF::AtomStringImpl::addSlowCase(v185, (WTF::StringImpl *)v159);
                    v185 = v421;
                  }
                }
                v424 = v185;
                WebCore::HTMLAttachmentElement::updateAttributes((WebCore::Element *)v153, (uint64_t)&v427, v434, &v424);
                v187 = v424;
                v424 = 0;
                if (v187)
                {
                  if (*(_DWORD *)v187 == 2)
                    WTF::StringImpl::destroy(v187, v186);
                  else
                    *(_DWORD *)v187 -= 2;
                }
                v188 = v434[0];
                v434[0] = 0;
                if (v188)
                {
                  if (*(_DWORD *)v188 == 2)
                    WTF::StringImpl::destroy(v188, v186);
                  else
                    *(_DWORD *)v188 -= 2;
                }
                Ref = (WebCore::StyledElement *)WebCore::ContainerNode::replaceChild((WebCore::ContainerNode *)v136, (WebCore::Node *)v153, (WebCore::Node *)v135, (uint64_t)v414);
                v6 = v407;
                if (v416 && (Ref = v415, v415 = 0, Ref))
                {
                  if (*(_DWORD *)Ref != 2)
                  {
                    *(_DWORD *)Ref -= 2;
                    goto LABEL_376;
                  }
                  Ref = (WebCore::StyledElement *)WTF::StringImpl::destroy(Ref, v190);
                  if (!v182)
                  {
LABEL_379:
                    if (v5)
                      goto LABEL_380;
                    goto LABEL_382;
                  }
                }
                else
                {
LABEL_376:
                  if (!v182)
                    goto LABEL_379;
                }
LABEL_377:
                if (*(_DWORD *)(v182 + 24) == 2)
                {
                  if ((*(_WORD *)(v182 + 30) & 0x400) == 0)
                    Ref = (WebCore::StyledElement *)WebCore::Node::removedLastRef((WebCore::Node *)v182, v190);
                }
                else
                {
                  *(_DWORD *)(v182 + 24) -= 2;
                }
                goto LABEL_379;
              }
              WebCore::mimeTypeFromContentType((WebCore *)&v421, (WTF **)(v133 + 8));
              v183 = v421;
              if (!v421)
              {
LABEL_359:
                v182 = v135;
                goto LABEL_360;
              }
              if (!*((_DWORD *)v421 + 1))
              {
                v421 = 0;
                if (*(_DWORD *)v183 == 2)
                  WTF::StringImpl::destroy(v183, (WTF::StringImpl *)v159);
                else
                  *(_DWORD *)v183 -= 2;
                goto LABEL_359;
              }
              *(_DWORD *)v421 += 2;
              v427 = v183;
              if ((WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)1> [43]>::contains<WTF::String>((const char ***)WebCore::MIMETypeRegistry::isSupportedImageMIMEType(WTF::String const&)::supportedImageMIMETypeSet, (uint64_t *)&v427) & 1) != 0)
              {
                v220 = 1;
              }
              {
                if (WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes)
                  v220 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes, (WTF::ASCIICaseInsensitiveHash *)&v427) != 0;
                else
                  v220 = 0;
              }
              else
              {
                v220 = 0;
                WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes = 0;
              }
              v221 = v427;
              v427 = 0;
              if (v221)
              {
                if (*(_DWORD *)v221 == 2)
                  WTF::StringImpl::destroy(v221, (WTF::StringImpl *)v159);
                else
                  *(_DWORD *)v221 -= 2;
              }
              v222 = v421;
              v421 = 0;
              if (v222)
              {
                if (*(_DWORD *)v222 == 2)
                  WTF::StringImpl::destroy(v222, (WTF::StringImpl *)v159);
                else
                  *(_DWORD *)v222 -= 2;
                v182 = v135;
                if (!v220)
                  goto LABEL_360;
              }
              else
              {
                v182 = v135;
                if (!v220)
                  goto LABEL_360;
              }
              v223 = *((_QWORD *)v407 + 37);
              if (v223)
                *(_DWORD *)(v223 + 24) += 2;
              v224 = (WebCore::ActiveDOMObject **)(v223 + 192);
              if (v223)
                v225 = (WebCore::ScriptExecutionContext *)(v223 + 192);
              else
                v225 = 0;
              v400 = v225;
              v402 = (WebCore::ScriptExecutionContext *)v223;
              v226 = *(_QWORD *)(v133 + 16);
              v427 = 0;
              v428 = 0;
              v227 = *(_QWORD *)(v226 + 48);
              if (v227)
              {
                if (HIDWORD(v227))
                {
                  __break(0xC471u);
                  JUMPOUT(0x194B88120);
                }
                v228 = (WebCore::StyledElement *)WTF::fastMalloc(*(WTF **)(v226 + 48));
                LODWORD(v428) = v227;
                v427 = v228;
              }
              v229 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v229 = off_1E3406E88;
              *((_QWORD *)v229 + 1) = &v427;
              v421 = v229;
              WebCore::FragmentedSharedBuffer::forEachSegment(v226, &v421);
              v230 = v421;
              v421 = 0;
              if (v230)
                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v230 + 8))(v230);
              v231 = (WebCore::ScriptExecutionContext *)bmalloc::api::isoAllocate();
              v232 = WebCore::Blob::Blob((uint64_t)v231, v400, (uint64_t)&v427, (_QWORD *)(v133 + 8));
              WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v232 + 24));
              WebCore::DOMURL::createPublicURL(v224, v231, &v417);
              v233 = v417;
              v417 = 0;
              if (v233)
              {
                v434[0] = v233;
                v6 = v407;
                if ((*((_BYTE *)v233 + 16) & 0x10) == 0)
                {
                  WTF::AtomStringImpl::addSlowCase();
                  v235 = v434[0];
                  v233 = v421;
                  v421 = 0;
                  v434[0] = 0;
                  if (v235)
                  {
                    if (*(_DWORD *)v235 == 2)
                      WTF::StringImpl::destroy(v235, v234);
                    else
                      *(_DWORD *)v235 -= 2;
                  }
                }
              }
              else
              {
                v6 = v407;
              }
              v424 = v233;
              v236 = *(_QWORD *)(v135 + 104);
              if (v236)
              {
                v237 = *(unsigned int *)(v236 + 4);
                if ((v237 & 1) != 0)
                {
                  v238 = *(uint64_t **)(v236 + 40);
                  v239 = *(unsigned int *)(v236 + 52);
                  if (!v239)
                    goto LABEL_539;
                }
                else
                {
                  v238 = (uint64_t *)(v236 + 32);
                  v239 = v237 >> 5;
                  if (!(v237 >> 5))
                    goto LABEL_539;
                }
                v245 = 0;
                while (1)
                {
                  v246 = *v238;
                  if (*v238 == WebCore::HTMLNames::srcsetAttr
                    || *(_QWORD *)(v246 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcsetAttr + 24)
                    && *(_QWORD *)(v246 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcsetAttr + 32))
                  {
                    break;
                  }
                  ++v245;
                  v238 += 2;
                  if (v239 == v245)
                    goto LABEL_539;
                }
              }
              else
              {
LABEL_539:
                v245 = 0xFFFFFFFFLL;
              }
              WebCore::Element::setAttributeInternal((WTF::StringImpl *)v135, v245, (WebCore::TreeScope *)&WebCore::HTMLNames::srcsetAttr, &v424, 0);
              v248 = v424;
              v424 = 0;
              if (v248)
              {
                if (*(_DWORD *)v248 == 2)
                  WTF::StringImpl::destroy(v248, v247);
                else
                  *(_DWORD *)v248 -= 2;
              }
              if (*((_DWORD *)v231 + 4) == 1)
                (*(void (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)v231 + 8))(v231);
              else
                --*((_DWORD *)v231 + 4);
              v249 = v427;
              if (v427)
              {
                v427 = 0;
                LODWORD(v428) = 0;
                WTF::fastFree(v249, v247);
              }
              *(_DWORD *)(v153 + 24) += 2;
              v427 = (WebCore::StyledElement *)v153;
              WebCore::AttachmentAssociatedElement::setAttachmentElement(v135 + 112, &v427);
              v250 = v427;
              v427 = 0;
              if (v250)
              {
                if (*((_DWORD *)v250 + 6) == 2)
                {
                  if ((*((_WORD *)v250 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v250, v190);
                }
                else
                {
                  *((_DWORD *)v250 + 6) -= 2;
                }
              }
              v182 = v135;
              Ref = v402;
              if (!v402)
                goto LABEL_377;
              if (*((_DWORD *)v402 + 6) == 2)
              {
                v182 = v135;
                if ((*((_WORD *)v402 + 15) & 0x400) != 0)
                  goto LABEL_377;
                Ref = (WebCore::StyledElement *)WebCore::Node::removedLastRef(v402, v190);
              }
              else
              {
                *((_DWORD *)v402 + 6) -= 2;
              }
              v182 = v135;
              goto LABEL_377;
            }
            if ((*(_WORD *)(v135 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v135, v159);
            v5 = 0;
LABEL_353:
            v160 = *(_DWORD *)(v135 + 24);
            v161 = v160 + 2;
            v163 = *(_WORD *)(v135 + 28) & 0x10;
            goto LABEL_354;
          }
          WebCore::mimeTypeFromContentType((WebCore *)&v421, (WTF **)(v133 + 8));
          v181 = v421;
          if (!v421)
          {
LABEL_352:
            v5 = v135;
            goto LABEL_353;
          }
          if (!*((_DWORD *)v421 + 1))
          {
            v421 = 0;
            if (*(_DWORD *)v181 == 2)
              WTF::StringImpl::destroy(v181, (WTF::StringImpl *)v159);
            else
              *(_DWORD *)v181 -= 2;
            goto LABEL_352;
          }
          *(_DWORD *)v421 += 2;
          v427 = v181;
          if ((WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)1> [43]>::contains<WTF::String>((const char ***)WebCore::MIMETypeRegistry::isSupportedImageMIMEType(WTF::String const&)::supportedImageMIMETypeSet, (uint64_t *)&v427) & 1) != 0)
          {
            v201 = 1;
          }
          {
            if (WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes)
              v201 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes, (WTF::ASCIICaseInsensitiveHash *)&v427) != 0;
            else
              v201 = 0;
          }
          else
          {
            v201 = 0;
            WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes = 0;
          }
          v202 = v427;
          v427 = 0;
          if (v202)
          {
            if (*(_DWORD *)v202 == 2)
              WTF::StringImpl::destroy(v202, (WTF::StringImpl *)v159);
            else
              *(_DWORD *)v202 -= 2;
          }
          v203 = v421;
          v421 = 0;
          if (v203)
          {
            if (*(_DWORD *)v203 == 2)
              WTF::StringImpl::destroy(v203, (WTF::StringImpl *)v159);
            else
              *(_DWORD *)v203 -= 2;
            v5 = v135;
            if (!v201)
              goto LABEL_353;
          }
          else
          {
            v5 = v135;
            if (!v201)
              goto LABEL_353;
          }
          v204 = *((_QWORD *)v407 + 37);
          if (v204)
          {
            *(_DWORD *)(v204 + 24) += 2;
            v205 = (WebCore::ScriptExecutionContext *)(v204 + 192);
          }
          else
          {
            v205 = 0;
          }
          v401 = v205;
          v206 = *(_QWORD *)(v133 + 16);
          v427 = 0;
          v428 = 0;
          v207 = *(_QWORD *)(v206 + 48);
          if (v207)
          {
            if (HIDWORD(v207))
            {
              __break(0xC471u);
              JUMPOUT(0x194B88118);
            }
            v208 = (WebCore::StyledElement *)WTF::fastMalloc(*(WTF **)(v206 + 48));
            LODWORD(v428) = v207;
            v427 = v208;
          }
          v209 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v209 = off_1E3406E88;
          *((_QWORD *)v209 + 1) = &v427;
          v421 = v209;
          WebCore::FragmentedSharedBuffer::forEachSegment(v206, &v421);
          v210 = v421;
          v421 = 0;
          if (v210)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v210 + 8))(v210);
          v211 = (WebCore::ScriptExecutionContext *)bmalloc::api::isoAllocate();
          v212 = WebCore::Blob::Blob((uint64_t)v211, v401, (uint64_t)&v427, (_QWORD *)(v133 + 8));
          WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v212 + 24));
          WebCore::DOMURL::createPublicURL((WebCore::ActiveDOMObject **)(v204 + 192), v211, &v417);
          v213 = v417;
          v417 = 0;
          if (v213)
          {
            v434[0] = v213;
            v6 = v407;
            if ((*((_BYTE *)v213 + 16) & 0x10) == 0)
            {
              WTF::AtomStringImpl::addSlowCase();
              v215 = v434[0];
              v213 = v421;
              v421 = 0;
              v434[0] = 0;
              if (v215)
              {
                if (*(_DWORD *)v215 == 2)
                  WTF::StringImpl::destroy(v215, v214);
                else
                  *(_DWORD *)v215 -= 2;
              }
            }
          }
          else
          {
            v6 = v407;
          }
          v424 = v213;
          v216 = *(_QWORD *)(v135 + 104);
          if (v216)
          {
            v217 = *(unsigned int *)(v216 + 4);
            if ((v217 & 1) != 0)
            {
              v218 = *(uint64_t **)(v216 + 40);
              v219 = *(unsigned int *)(v216 + 52);
              if (!v219)
                goto LABEL_514;
            }
            else
            {
              v218 = (uint64_t *)(v216 + 32);
              v219 = v217 >> 5;
              if (!(v217 >> 5))
                goto LABEL_514;
            }
            v240 = 0;
            while (1)
            {
              v241 = *v218;
              if (*v218 == WebCore::HTMLNames::srcAttr
                || *(_QWORD *)(v241 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
                && *(_QWORD *)(v241 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
              {
                break;
              }
              ++v240;
              v218 += 2;
              if (v219 == v240)
                goto LABEL_514;
            }
          }
          else
          {
LABEL_514:
            v240 = 0xFFFFFFFFLL;
          }
          WebCore::Element::setAttributeInternal((WTF::StringImpl *)v135, v240, (WebCore::TreeScope *)&WebCore::HTMLNames::srcAttr, &v424, 0);
          v243 = v424;
          v424 = 0;
          if (v243)
          {
            if (*(_DWORD *)v243 == 2)
              WTF::StringImpl::destroy(v243, v242);
            else
              *(_DWORD *)v243 -= 2;
          }
          if (*((_DWORD *)v211 + 4) == 1)
            (*(void (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)v211 + 8))(v211);
          else
            --*((_DWORD *)v211 + 4);
          v244 = v427;
          if (v427)
          {
            v427 = 0;
            LODWORD(v428) = 0;
            WTF::fastFree(v244, v242);
          }
          *(_DWORD *)(v153 + 24) += 2;
          v427 = (WebCore::StyledElement *)v153;
          WebCore::AttachmentAssociatedElement::setAttachmentElement(v135 + 112, &v427);
          Ref = v427;
          v427 = 0;
          if (Ref)
          {
            if (*((_DWORD *)Ref + 6) == 2)
            {
              if ((*((_WORD *)Ref + 15) & 0x400) == 0)
                Ref = (WebCore::StyledElement *)WebCore::Node::removedLastRef(Ref, v190);
            }
            else
            {
              *((_DWORD *)Ref + 6) -= 2;
            }
          }
          v5 = v135;
          if (v204)
          {
            if (*(_DWORD *)(v204 + 24) == 2)
            {
              v5 = v135;
              if ((*(_WORD *)(v204 + 30) & 0x400) != 0)
                goto LABEL_380;
              Ref = (WebCore::StyledElement *)WebCore::Node::removedLastRef((WebCore::Node *)v204, v190);
            }
            else
            {
              *(_DWORD *)(v204 + 24) -= 2;
            }
            v5 = v135;
          }
LABEL_380:
          if (*(_DWORD *)(v5 + 24) == 2)
          {
            if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
              Ref = (WebCore::StyledElement *)WebCore::Node::removedLastRef((WebCore::Node *)v5, v190);
          }
          else
          {
            *(_DWORD *)(v5 + 24) -= 2;
          }
LABEL_382:
          v191 = (WebCore::Document *)*((_QWORD *)v6 + 37);
          v192 = *((_QWORD *)v191 + 382);
          if (!v192)
          {
            v256 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
            WebCore::Editor::Editor(v256, v191);
            Ref = (WebCore::StyledElement *)*((_QWORD *)v191 + 382);
            *((_QWORD *)v191 + 382) = v256;
            if (Ref)
            {
              WebCore::Editor::~Editor(Ref, v190);
              if (*(_DWORD *)Ref)
              {
                *((_QWORD *)Ref + 62) = 0;
                *((_OWORD *)Ref + 29) = 0u;
                *((_OWORD *)Ref + 30) = 0u;
                *((_OWORD *)Ref + 27) = 0u;
                *((_OWORD *)Ref + 28) = 0u;
                *((_OWORD *)Ref + 25) = 0u;
                *((_OWORD *)Ref + 26) = 0u;
                *((_OWORD *)Ref + 23) = 0u;
                *((_OWORD *)Ref + 24) = 0u;
                *((_OWORD *)Ref + 21) = 0u;
                *((_OWORD *)Ref + 22) = 0u;
                *((_OWORD *)Ref + 19) = 0u;
                *((_OWORD *)Ref + 20) = 0u;
                *((_OWORD *)Ref + 17) = 0u;
                *((_OWORD *)Ref + 18) = 0u;
                *((_OWORD *)Ref + 15) = 0u;
                *((_OWORD *)Ref + 16) = 0u;
                *((_OWORD *)Ref + 13) = 0u;
                *((_OWORD *)Ref + 14) = 0u;
                *((_OWORD *)Ref + 11) = 0u;
                *((_OWORD *)Ref + 12) = 0u;
                *((_OWORD *)Ref + 9) = 0u;
                *((_OWORD *)Ref + 10) = 0u;
                *((_OWORD *)Ref + 7) = 0u;
                *((_OWORD *)Ref + 8) = 0u;
                *((_OWORD *)Ref + 5) = 0u;
                *((_OWORD *)Ref + 6) = 0u;
                *((_OWORD *)Ref + 3) = 0u;
                *((_OWORD *)Ref + 4) = 0u;
                *((_OWORD *)Ref + 1) = 0u;
                *((_OWORD *)Ref + 2) = 0u;
                *(_OWORD *)Ref = 0u;
              }
              else
              {
                Ref = (WebCore::StyledElement *)WTF::fastFree(Ref, v190);
              }
            }
            v192 = *((_QWORD *)v191 + 382);
          }
          v193 = *(WebCore::StyledElement **)(v153 + 128);
          if (v193 && *((_DWORD *)v193 + 1))
            goto LABEL_389;
          WTF::createVersion4UUIDString(Ref);
          v193 = v427;
          v427 = 0;
          v194 = *(WebCore::StyledElement **)(v153 + 128);
          *(_QWORD *)(v153 + 128) = v193;
          if (v194)
          {
            v195 = *(_DWORD *)v194 - 2;
            if (*(_DWORD *)v194 != 2)
              goto LABEL_386;
            WTF::StringImpl::destroy(v194, v190);
            v194 = v427;
            v427 = 0;
            if (v194)
            {
              v195 = *(_DWORD *)v194 - 2;
              if (*(_DWORD *)v194 == 2)
                WTF::StringImpl::destroy(v194, v190);
              else
LABEL_386:
                *(_DWORD *)v194 = v195;
            }
            v193 = *(WebCore::StyledElement **)(v153 + 128);
          }
          if (v193)
LABEL_389:
            *(_DWORD *)v193 += 2;
          v427 = v193;
          v196 = *(WTF::StringImpl **)(v133 + 16);
          *(_QWORD *)(v133 + 16) = 0;
          v421 = v196;
          v197 = *(_QWORD *)(v192 + 8);
          if (v197)
          {
            v198 = *(_QWORD *)(v197 + 8);
            if (v198)
              (*(void (**)(uint64_t, WebCore::StyledElement **, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v198 + 168))(v198, &v427, v133 + 8, v133, &v421);
          }
          WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v421, v190);
          v199 = v427;
          v427 = 0;
          if (v199)
          {
            if (*(_DWORD *)v199 == 2)
              WTF::StringImpl::destroy(v199, a2);
            else
              *(_DWORD *)v199 -= 2;
          }
LABEL_396:
          if (*(_DWORD *)(v153 + 24) == 2)
          {
            if ((*(_WORD *)(v153 + 30) & 0x400) == 0)
            {
              v200 = (WebCore::Node *)v153;
              goto LABEL_481;
            }
          }
          else
          {
            *(_DWORD *)(v153 + 24) -= 2;
          }
LABEL_398:
          if (*(_DWORD *)(v136 + 24) == 2)
          {
            if ((*(_WORD *)(v136 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v136, a2);
          }
          else
          {
            *(_DWORD *)(v136 + 24) -= 2;
          }
          goto LABEL_400;
        }
      }
    }
    v164 = *((_QWORD *)v6 + 37);
    if (v164)
    {
      *(_DWORD *)(v164 + 24) += 2;
      v165 = (WebCore::ScriptExecutionContext *)(v164 + 192);
    }
    else
    {
      v165 = 0;
    }
    v166 = *(_QWORD *)(v133 + 16);
    v427 = 0;
    v428 = 0;
    v167 = *(_QWORD *)(v166 + 48);
    if (v167)
    {
      if (HIDWORD(v167))
        goto LABEL_875;
      v168 = (WebCore::StyledElement *)WTF::fastMalloc(*(WTF **)(v166 + 48));
      LODWORD(v428) = v167;
      v427 = v168;
    }
    v169 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v169 = off_1E3406E88;
    *((_QWORD *)v169 + 1) = &v427;
    v421 = v169;
    WebCore::FragmentedSharedBuffer::forEachSegment(v166, &v421);
    v170 = v421;
    v421 = 0;
    if (v170)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v170 + 8))(v170);
    v5 = bmalloc::api::isoAllocate();
    v171 = WebCore::Blob::Blob(v5, v165, (uint64_t)&v427, (_QWORD *)(v133 + 8));
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v171 + 24));
    v172 = bmalloc::api::isoAllocate();
    v174 = (_QWORD *)WebCore::Blob::Blob(v172, v173, v165, v5);
    *v174 = off_1E33AE6D8;
    v174[3] = &unk_1E33AE718;
    v175 = v174 + 3;
    *(_QWORD *)(v172 + 128) = 0;
    *(_QWORD *)(v172 + 136) = 0;
    v176 = *(WTF::StringImpl **)v133;
    if (*(_QWORD *)v133)
      *(_DWORD *)v176 += 2;
    *(_QWORD *)(v172 + 144) = v176;
    *(_BYTE *)(v172 + 152) = 0;
    *(_BYTE *)(v172 + 160) = 0;
    *(_BYTE *)(v172 + 168) = 0;
    *(_BYTE *)(v172 + 176) = 0;
    *(_WORD *)(v172 + 184) = 0;
    WebCore::ActiveDOMObject::suspendIfNeeded(v175);
    v434[0] = (WTF::StringImpl *)v172;
    WebCore::HTMLAttachmentElement::setFile((WebCore::Element *)v153, (WTF::StringImpl *)v434, 1);
    v178 = v434[0];
    v434[0] = 0;
    v6 = v407;
    if (v178)
    {
      if (*((_DWORD *)v178 + 4) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v178 + 8))(v178);
      else
        --*((_DWORD *)v178 + 4);
    }
    if (*(_DWORD *)(v5 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    else
      --*(_DWORD *)(v5 + 16);
    v179 = v427;
    if (v427)
    {
      v427 = 0;
      LODWORD(v428) = 0;
      WTF::fastFree(v179, v177);
    }
    WebCore::ContainerNode::replaceChild((WebCore::ContainerNode *)v136, (WebCore::Node *)v153, (WebCore::Node *)v135, (uint64_t)v411);
    if (v413 && (v180 = v412, v412 = 0, v180))
    {
      if (*(_DWORD *)v180 != 2)
      {
        *(_DWORD *)v180 -= 2;
        goto LABEL_348;
      }
      WTF::StringImpl::destroy(v180, a2);
      if (!v164)
        goto LABEL_396;
    }
    else
    {
LABEL_348:
      if (!v164)
        goto LABEL_396;
    }
    if (*(_DWORD *)(v164 + 24) == 2)
    {
      if ((*(_WORD *)(v164 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v164, a2);
    }
    else
    {
      *(_DWORD *)(v164 + 24) -= 2;
    }
    goto LABEL_396;
  }
LABEL_599:
  if (v403)
  {
    v257 = 8 * v403;
    v258 = v257;
    v259 = (WTF *)__src;
    v260 = (WebCore::Node **)__src;
    do
    {
      v261 = *v260;
      v262 = *((_QWORD *)*v260 + 4);
      if (v262)
      {
        *(_DWORD *)(v262 + 24) += 2;
        WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v262, v261, &v408);
        if (*(_DWORD *)(v262 + 24) == 2)
        {
          v264 = *(_WORD *)(v262 + 30);
          if ((v264 & 0x400) == 0)
          {
            v265 = *(_WORD *)(v262 + 28);
            if ((v265 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef((WebCore::Document *)v262, v261);
            }
            else
            {
              if ((v265 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v262 + 160) + 16))(*(_QWORD *)(v262 + 160));
                v264 = *(_WORD *)(v262 + 30);
              }
              *(_WORD *)(v262 + 30) = v264 | 0x400;
              (*(void (**)(uint64_t))(*(_QWORD *)v262 + 72))(v262);
            }
          }
        }
        else
        {
          *(_DWORD *)(v262 + 24) -= 2;
        }
      }
      else
      {
        v408 = 0;
        v409 = 0;
        v410 = 0;
      }
      if ((_BYTE)v410)
      {
        v263 = v409;
        v409 = 0;
        if (v263)
        {
          if (*(_DWORD *)v263 == 2)
            WTF::StringImpl::destroy(v263, v261);
          else
            *(_DWORD *)v263 -= 2;
        }
      }
      ++v260;
      v258 -= 8;
    }
    while (v258);
    WTF::Vector<WebCore::replaceRichContentWithAttachments(WebCore::LocalFrame &,WebCore::DocumentFragment &,WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::AttachmentInsertionInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v425, v261);
    v267 = (uint64_t *)__src;
    do
    {
      v268 = *v267;
      *v267 = 0;
      if (v268)
      {
        if (*(_DWORD *)(v268 + 24) == 2)
        {
          if ((*(_WORD *)(v268 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v268, v266);
        }
        else
        {
          *(_DWORD *)(v268 + 24) -= 2;
        }
      }
      ++v267;
      v257 -= 8;
    }
    while (v257);
  }
  else
  {
    WTF::Vector<WebCore::replaceRichContentWithAttachments(WebCore::LocalFrame &,WebCore::DocumentFragment &,WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::AttachmentInsertionInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v425, a2);
    v259 = (WTF *)__src;
  }
  if (v259)
    WTF::fastFree(v259, v266);
  if (HIDWORD(v432))
  {
    v269 = 24 * HIDWORD(v432);
    v270 = v431 + 2;
    do
    {
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v270, v266);
      v271 = (WTF::StringImpl *)*(v270 - 1);
      *(v270 - 1) = 0;
      if (v271)
      {
        if (*(_DWORD *)v271 == 2)
          WTF::StringImpl::destroy(v271, (WTF::StringImpl *)v266);
        else
          *(_DWORD *)v271 -= 2;
      }
      v272 = (WTF::StringImpl *)*(v270 - 2);
      *(v270 - 2) = 0;
      if (v272)
      {
        if (*(_DWORD *)v272 == 2)
          WTF::StringImpl::destroy(v272, (WTF::StringImpl *)v266);
        else
          *(_DWORD *)v272 -= 2;
      }
      v270 += 3;
      v269 -= 24;
    }
    while (v269);
  }
  result = (WTF *)v431;
  if (v431)
  {
    v431 = 0;
    LODWORD(v432) = 0;
    result = (WTF *)WTF::fastFree(result, v266);
  }
  v273 = v433;
  if (v433)
  {
    v274 = *(unsigned int *)(v433 - 4);
    if ((_DWORD)v274)
    {
      v275 = v433;
      do
      {
        v276 = *(WTF::StringImpl **)v275;
        if (*(_QWORD *)v275 != -1)
        {
          v277 = *(_DWORD **)(v275 + 8);
          *(_QWORD *)(v275 + 8) = 0;
          if (v277)
          {
            if (v277[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v277 + 8))(v277);
              v276 = *(WTF::StringImpl **)v275;
            }
            else
            {
              --v277[2];
            }
          }
          *(_QWORD *)v275 = 0;
          if (v276)
          {
            if (*(_DWORD *)v276 == 2)
              WTF::StringImpl::destroy(v276, (WTF::StringImpl *)v266);
            else
              *(_DWORD *)v276 -= 2;
          }
        }
        v275 += 16;
        --v274;
      }
      while (v274);
    }
    return (WTF *)WTF::fastFree((WTF *)(v273 - 16), v266);
  }
  return result;
}

void sub_194B88134(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, uint64_t a11, WTF *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF::StringImpl *a31,WTF::StringImpl *a32)
{
  uint64_t *v32;
  uint64_t v33;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  void *v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  _DWORD *v52;
  WTF *v53;
  uint64_t v54;
  uint64_t v55;

  v35 = *(_QWORD *)(v33 - 136);
  *(_QWORD *)(v33 - 136) = 0;
  if (v35)
  {
    if (*(_DWORD *)(v35 + 24) == 2)
    {
      if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v35, a2);
    }
    else
    {
      *(_DWORD *)(v35 + 24) -= 2;
    }
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v32, a2);
  v37 = *(WTF::StringImpl **)(v33 - 152);
  *(_QWORD *)(v33 - 152) = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v36);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = *(WTF::StringImpl **)(v33 - 160);
  *(_QWORD *)(v33 - 160) = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v36);
    else
      *(_DWORD *)v38 -= 2;
  }
  v39 = *(WTF::StringImpl **)(v33 - 184);
  *(_QWORD *)(v33 - 184) = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v36);
    else
      *(_DWORD *)v39 -= 2;
  }
  v40 = *(WTF::StringImpl **)(v33 - 96);
  *(_QWORD *)(v33 - 96) = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v36);
    else
      *(_DWORD *)v40 -= 2;
  }
  WTF::Vector<WebCore::replaceRichContentWithAttachments(WebCore::LocalFrame &,WebCore::DocumentFragment &,WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::AttachmentInsertionInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v33 - 176, v36);
  if ((_DWORD)a11)
  {
    v53 = a12;
    v54 = 8 * a11;
    do
    {
      v55 = *(_QWORD *)v53;
      *(_QWORD *)v53 = 0;
      if (v55)
      {
        if (*(_DWORD *)(v55 + 24) == 2)
        {
          if ((*(_WORD *)(v55 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v55, v41);
        }
        else
        {
          *(_DWORD *)(v55 + 24) -= 2;
        }
      }
      v53 = (WTF *)((char *)v53 + 8);
      v54 -= 8;
    }
    while (v54);
  }
  if (a12)
    WTF::fastFree(a12, v41);
  v42 = *(unsigned int *)(v33 - 108);
  if ((_DWORD)v42)
  {
    v46 = 24 * v42;
    v47 = (uint64_t *)(*(_QWORD *)(v33 - 120) + 16);
    do
    {
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v47, v41);
      v48 = (WTF::StringImpl *)*(v47 - 1);
      *(v47 - 1) = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v41);
        else
          *(_DWORD *)v48 -= 2;
      }
      v49 = (WTF::StringImpl *)*(v47 - 2);
      *(v47 - 2) = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
          WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v41);
        else
          *(_DWORD *)v49 -= 2;
      }
      v47 += 3;
      v46 -= 24;
    }
    while (v46);
  }
  v43 = *(WTF **)(v33 - 120);
  if (v43)
  {
    *(_QWORD *)(v33 - 120) = 0;
    *(_DWORD *)(v33 - 112) = 0;
    WTF::fastFree(v43, v41);
  }
  v44 = *(_QWORD *)(v33 - 104);
  if (v44)
  {
    v45 = *(unsigned int *)(v44 - 4);
    if ((_DWORD)v45)
    {
      v50 = *(_QWORD *)(v33 - 104);
      do
      {
        v51 = *(WTF::StringImpl **)v50;
        if (*(_QWORD *)v50 != -1)
        {
          v52 = *(_DWORD **)(v50 + 8);
          *(_QWORD *)(v50 + 8) = 0;
          if (v52)
          {
            if (v52[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
              v51 = *(WTF::StringImpl **)v50;
            }
            else
            {
              --v52[2];
            }
          }
          *(_QWORD *)v50 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
              WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v41);
            else
              *(_DWORD *)v51 -= 2;
          }
        }
        v50 += 16;
        --v45;
      }
      while (v45);
    }
    WTF::fastFree((WTF *)(v44 - 16), v41);
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::WebContentReader::readWebArchive(WebCore::WebContentReader *this, WebCore::SharedBuffer *a2)
{
  WTF *v4;
  unsigned int *v5;
  unsigned int v6;
  void *v7;
  WebCore::Node **v8;
  uint64_t v9;
  _BOOL8 v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  WTF *v17;
  uint64_t v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  int v21;
  WTF **v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  int v25;
  uint64_t (*v26)();
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WebCore::Node *v30;
  int v31;
  uint64_t v32;
  WebCore::Archive *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WebCore::ArchiveResourceCollection *v36;
  WTF *v37;
  void *v38;
  WebCore::Archive *v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WebCore::Archive *v45;
  char v46;
  _BYTE v47[24];
  WTF *v48;
  WebCore::Node *v49;
  WTF **v50;
  WebCore::Node **v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = *(WTF **)(*((_QWORD *)this + 2) + 8);
  v5 = (unsigned int *)((char *)v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v48 = v4;
  if ((*(_QWORD *)(*((_QWORD *)v4 + 17) + 688) & 0x40000000) != 0 || !*((_QWORD *)v4 + 37))
  {
    v10 = 0;
    v48 = 0;
    goto LABEL_9;
  }
  WebCore::DeferredLoadingScope::DeferredLoadingScope((WebCore::DeferredLoadingScope *)v47, v4);
  v49 = (WebCore::Node *)&off_1E3283B00;
  v50 = &v48;
  v51 = &v49;
  WebCore::extractMarkupAndArchive((uint64_t)&v43, a2, (uint64_t)&v49);
  v8 = v51;
  if (v51 == &v49)
  {
    v9 = 4;
    v8 = &v49;
  }
  else
  {
    if (!v51)
      goto LABEL_15;
    v9 = 5;
  }
  (*((void (**)(void))*v8 + v9))();
LABEL_15:
  if (!v46)
  {
    v10 = 0;
    goto LABEL_75;
  }
  v15 = *((_QWORD *)v48 + 37);
  *(_DWORD *)(v15 + 24) += 2;
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
LABEL_53:
    WebCore::createFragmentFromMarkup(v15, (unsigned int **)&v43, (WTF **)(v44 + 16), 0, (unint64_t)&v49);
    v30 = v49;
    v49 = 0;
    result = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v30;
    if (!result)
      goto LABEL_56;
    v31 = *(_DWORD *)(result + 24) - 2;
    if (*(_DWORD *)(result + 24) != 2)
      goto LABEL_55;
    if ((*(_WORD *)(result + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)result, v7);
      result = (uint64_t)v49;
      v49 = 0;
      if (result)
      {
        v31 = *(_DWORD *)(result + 24) - 2;
        if (*(_DWORD *)(result + 24) != 2)
        {
LABEL_55:
          *(_DWORD *)(result + 24) = v31;
          goto LABEL_56;
        }
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v7);
      }
    }
LABEL_56:
    v32 = *(_QWORD *)(*((_QWORD *)v48 + 35) + 88);
    if (v32)
    {
      if (!v46)
        goto LABEL_87;
      v33 = v45;
      v34 = *(WTF::StringImpl **)(v32 + 2656);
      if (!v34)
      {
        v34 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
        v36 = *(WebCore::ArchiveResourceCollection **)(v32 + 2656);
        *(_QWORD *)(v32 + 2656) = v34;
        if (v36)
        {
          WebCore::ArchiveResourceCollection::~ArchiveResourceCollection(v36, v35);
          WTF::fastFree(v37, v38);
          v34 = *(WTF::StringImpl **)(v32 + 2656);
        }
      }
      WebCore::ArchiveResourceCollection::addAllResources(v34, v33);
    }
    goto LABEL_62;
  }
  if (!byte_1ECE90A55)
    goto LABEL_53;
  result = WebCore::FrameWebContentReader::shouldSanitize(this, (WTF::StringImpl *)v7);
  if ((result & 1) == 0)
  {
    if (!v46)
      goto LABEL_87;
    WebCore::createFragmentFromMarkup(v15, (unsigned int **)&v43, (WTF **)(v44 + 16), 0, (unint64_t)&v49);
    v19 = v49;
    v49 = 0;
    v20 = (WebCore::Node *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v19;
    if (v20)
    {
      v21 = *((_DWORD *)v20 + 6) - 2;
      if (*((_DWORD *)v20 + 6) == 2)
      {
        if ((*((_WORD *)v20 + 15) & 0x400) != 0)
          goto LABEL_62;
        WebCore::Node::removedLastRef(v20, v7);
        v20 = v49;
        v49 = 0;
        if (!v20)
          goto LABEL_62;
        v21 = *((_DWORD *)v20 + 6) - 2;
        if (*((_DWORD *)v20 + 6) == 2)
        {
          if ((*((_WORD *)v20 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v20, v7);
          goto LABEL_62;
        }
      }
      *((_DWORD *)v20 + 6) = v21;
    }
LABEL_62:
    v10 = 1;
LABEL_63:
    if (*(_DWORD *)(v15 + 24) == 2)
    {
      if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v15, v7);
    }
    else
    {
      *(_DWORD *)(v15 + 24) -= 2;
    }
    if (v46)
    {
      v39 = v45;
      v45 = 0;
      if (v39)
      {
        if (*((_DWORD *)v39 + 2) == 1)
          (*(void (**)(WebCore::Archive *))(*(_QWORD *)v39 + 8))(v39);
        else
          --*((_DWORD *)v39 + 2);
      }
      v40 = (_DWORD *)v44;
      v44 = 0;
      if (v40)
      {
        if (v40[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
        else
          --v40[2];
      }
      v41 = v43;
      v43 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v7);
        else
          *(_DWORD *)v41 -= 2;
      }
    }
LABEL_75:
    WebCore::DeferredLoadingScope::~DeferredLoadingScope((WebCore::DeferredLoadingScope *)v47, v7);
    v4 = v48;
    v48 = 0;
    if (!v4)
      return v10;
LABEL_9:
    v11 = (unsigned int *)((char *)v4 + 8);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      v28 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v28 = off_1E31FE290;
      *((_QWORD *)v28 + 1) = v11;
      v43 = v28;
      WTF::ensureOnMainThread();
      v29 = v43;
      v43 = 0;
      if (v29)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v29 + 8))(v29);
    }
    return v10;
  }
  if (v46)
  {
    v16 = *((_QWORD *)this + 1) != 0;
    v49 = (WebCore::Node *)&off_1E3283B48;
    v50 = &v48;
    v51 = &v49;
    WebCore::sanitizeMarkupWithArchive(&v42, v48, v15, (uint64_t)&v43, v16, (uint64_t)&v49);
    v17 = (WTF *)v51;
    if (v51 == &v49)
    {
      v18 = 4;
      v17 = (WTF *)&v49;
    }
    else
    {
      if (!v51)
        goto LABEL_30;
      v18 = 5;
    }
    v17 = (WTF *)(*(uint64_t (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_30:
    v22 = (WTF **)WTF::aboutBlankURL(v17);
    WebCore::createFragmentFromMarkup(v15, (unsigned int **)&v42, v22, 0, (unint64_t)&v49);
    v23 = v49;
    v49 = 0;
    v24 = (WebCore::Node *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v23;
    if (v24)
    {
      v25 = *((_DWORD *)v24 + 6) - 2;
      if (*((_DWORD *)v24 + 6) == 2)
      {
        if ((*((_WORD *)v24 + 15) & 0x400) != 0)
          goto LABEL_33;
        WebCore::Node::removedLastRef(v24, v7);
        v24 = v49;
        v49 = 0;
        if (!v24)
          goto LABEL_33;
        v25 = *((_DWORD *)v24 + 6) - 2;
        if (*((_DWORD *)v24 + 6) == 2)
        {
          if ((*((_WORD *)v24 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v24, v7);
          goto LABEL_33;
        }
      }
      *((_DWORD *)v24 + 6) = v25;
    }
LABEL_33:
    if (*((_QWORD *)this + 8))
      v26 = WTF::RefPtr<WebCore::DocumentFragment,WTF::RawPtrTraits<WebCore::DocumentFragment>,WTF::DefaultRefDerefTraits<WebCore::DocumentFragment>>::unspecifiedBoolTypeInstance;
    else
      v26 = 0;
    v10 = v26 != 0;
    v27 = v42;
    v42 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v27 -= 2;
    }
    goto LABEL_63;
  }
LABEL_87:
  __break(1u);
  return result;
}

void sub_194B88F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a10)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebCore::extractMarkupAndArchive(uint64_t a1, const WTF::URL *a2, uint64_t a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WebCore::LegacyWebArchive *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _Unwind_Exception *v18;
  void *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23[5];
  WebCore::LegacyWebArchive *v24;
  char v25;
  char *v26;

  v23[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v23);
  WebCore::LegacyWebArchive::create(a2, &v24);
  result = v23[0];
  v23[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  v8 = v24;
  if (!v24)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    return result;
  }
  v9 = *((_QWORD *)v24 + 2);
  if (v9)
  {
    ++*(_DWORD *)(v9 + 8);
    v10 = *(WTF::StringImpl **)(v9 + 320);
    if (v10)
      *(_DWORD *)v10 += 4;
    v22 = v10;
    v11 = *(_QWORD *)(a3 + 24);
    if (!v11)
    {
      std::__throw_bad_function_call[abi:sn180100]();
      __break(1u);
      goto LABEL_38;
    }
    v13 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 48))(v11, &v22);
    result = v22;
    v22 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        if ((v13 & 1) != 0)
          goto LABEL_13;
        goto LABEL_20;
      }
      *(_DWORD *)result -= 2;
    }
    if ((v13 & 1) != 0)
    {
LABEL_13:
      v14 = (WTF *)WebCore::SubstituteResource::data((WebCore::SubstituteResource *)v9, v12);
      WebCore::FragmentedSharedBuffer::makeContiguous(v14, &v21);
      if (!*(_DWORD *)(v21 + 20))
        goto LABEL_16;
      v15 = *(_QWORD *)(*(_QWORD *)(v21 + 8) + 8);
      v16 = *(unsigned int *)(v15 + 24);
      if ((_DWORD)v16 != -1)
      {
        v26 = &v25;
        ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v16])(&v26, v15 + 8);
LABEL_16:
        WTF::String::fromUTF8();
        v24 = 0;
        *(WTF::StringImpl **)a1 = v23[0];
        *(_QWORD *)(a1 + 8) = v9;
        *(_QWORD *)(a1 + 16) = v8;
        *(_BYTE *)(a1 + 24) = 1;
        memset(v23, 0, 24);
        result = (WTF::StringImpl *)WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v21, v17);
        v8 = 0;
        v9 = 0;
        goto LABEL_21;
      }
LABEL_38:
      v18 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v21, v19);
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v20);
        else
          *(_DWORD *)v10 -= 2;
      }
      if (*(_DWORD *)(v9 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      else
        --*(_DWORD *)(v9 + 8);
      if (*((_DWORD *)v8 + 2) == 1)
        (*(void (**)(WebCore::LegacyWebArchive *))(*(_QWORD *)v8 + 8))(v8);
      else
        --*((_DWORD *)v8 + 2);
      _Unwind_Resume(v18);
    }
LABEL_20:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
LABEL_21:
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v10, v12);
        if (!v9)
          goto LABEL_27;
        goto LABEL_25;
      }
      *(_DWORD *)v10 -= 2;
    }
    if (!v9)
      goto LABEL_27;
LABEL_25:
    if (*(_DWORD *)(v9 + 8) == 1)
      result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    else
      --*(_DWORD *)(v9 + 8);
LABEL_27:
    v24 = 0;
    if (!v8)
      return result;
    goto LABEL_28;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v24 = 0;
LABEL_28:
  if (*((_DWORD *)v8 + 2) == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(WebCore::LegacyWebArchive *))(*(_QWORD *)v8 + 8))(v8);
  --*((_DWORD *)v8 + 2);
  return result;
}

_DWORD *WebCore::sanitizeMarkupWithArchive(WebCore::Node **a1, WTF *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  _DWORD *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::ScriptExecutionContext *v19;
  WebCore::SubstituteResource **v20;
  uint64_t v21;
  WebCore::SubstituteResource *v22;
  WTF::StringImpl **v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WebCore::SubstituteResource *v31;
  WebCore::ScriptExecutionContext *v32;
  uint64_t v33;
  void *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::String *v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  char v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  __int128 v55;
  WTF *v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  void *v60;
  WTF::AtomStringImpl *v61;
  WTF *v62;
  WTF::StringImpl *v63;
  char *v64;
  char v65;
  WebCore::ScriptExecutionContext *v66;
  uint64_t v67;
  void *v68;
  WTF *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  _DWORD *v75;
  _DWORD *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  void *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  WebCore::Node *v87;
  WTF *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  WebCore::Node **v98;
  char v99;
  uint64_t v100;
  uint64_t *v101;
  WTF *v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::AtomStringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  _DWORD *v110;
  _DWORD *v111;
  WTF::StringImpl *v112;
  __int128 v113;
  __int128 v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  uint64_t v118;
  WebCore::Node *v119;
  uint64_t v120;

  WebCore::createPageForSanitizingWebContent(&v120);
  result = (_DWORD *)v120;
  v13 = *(_QWORD *)(v120 + 160);
  if (v13)
    v14 = *(_BYTE *)(v13 + 144) == 0;
  else
    v14 = 0;
  if (!v14)
  {
    *a1 = 0;
    v120 = 0;
LABEL_146:
    if (*result == 1)
    {
      WebCore::Page::~Page((uint64_t)result);
      return (_DWORD *)WTF::fastFree(v88, v89);
    }
    else
    {
      --*result;
    }
    return result;
  }
  v15 = *(_QWORD *)(v13 + 296);
  WebCore::createFragmentFromMarkup(v15, (unsigned int **)a4, (WTF **)(*(_QWORD *)(a4 + 8) + 16), 0, (unint64_t)&v119);
  {
    if (byte_1ECE90A59)
    {
      WebCore::replaceRichContentWithAttachments(a2, v119, *(WebCore::StyledElement ***)(*(_QWORD *)(a4 + 16) + 24), *(_DWORD *)(*(_QWORD *)(a4 + 16) + 36));
      WebCore::sanitizedMarkupForFragmentInDocument(&v119, v15, a5, (uint64_t *)a4, a1);
      goto LABEL_142;
    }
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  v100 = a3;
  v101 = (uint64_t *)a4;
  v102 = a2;
  v97 = v15;
  v98 = a1;
  v99 = a5;
  v118 = 0;
  v17 = *(_QWORD *)(a4 + 16);
  v18 = *(unsigned int *)(v17 + 36);
  if ((_DWORD)v18)
  {
    v19 = (WebCore::ScriptExecutionContext *)(a3 + 192);
    v20 = *(WebCore::SubstituteResource ***)(v17 + 24);
    v21 = 8 * v18;
    while (1)
    {
      v22 = *v20;
      v23 = (WTF::StringImpl **)((char *)*v20 + 16);
      if (((WTF::URL::protocolIs() | ((*((_BYTE *)v22 + 24) & 2) >> 1)) & 1) == 0)
        break;
LABEL_37:
      ++v20;
      v21 -= 8;
      if (!v21)
        goto LABEL_47;
    }
    v25 = WebCore::SubstituteResource::data(*v20, v24);
    v26 = v25;
    v112 = 0;
    *(_QWORD *)&v113 = 0;
    v27 = *(_QWORD *)(v25 + 48);
    if (v27)
    {
      if (HIDWORD(v27))
        goto LABEL_181;
      v28 = (WTF::StringImpl *)WTF::fastMalloc(*(WTF **)(v25 + 48));
      LODWORD(v113) = v27;
      v112 = v28;
    }
    v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v29 = off_1E3406E88;
    *((_QWORD *)v29 + 1) = &v112;
    v109 = v29;
    WebCore::FragmentedSharedBuffer::forEachSegment(v26, &v109);
    v30 = v109;
    v109 = 0;
    if (v30)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v30 + 8))(v30);
    v31 = *v20;
    v32 = (WebCore::ScriptExecutionContext *)bmalloc::api::isoAllocate();
    v33 = WebCore::Blob::Blob((uint64_t)v32, v19, (uint64_t)&v112, (_QWORD *)v31 + 40);
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v33 + 24));
    v35 = v112;
    if (v112)
    {
      v112 = 0;
      LODWORD(v113) = 0;
      WTF::fastFree(v35, v34);
    }
    WebCore::DOMURL::createPublicURL((WebCore::ActiveDOMObject **)v19, v32, &v109);
    v37 = *v23;
    if (*v23)
    {
      if ((*((_BYTE *)v37 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v37 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(v37, v36);
        v37 = v112;
      }
    }
    v103 = v37;
    v38 = v109;
    if (v109)
    {
      if ((*((_BYTE *)v109 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v109 += 2;
        v39 = v38;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(v109, v36);
        v39 = v112;
      }
    }
    else
    {
      v39 = 0;
    }
    v117 = v39;
    WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::inlineSet<WTF::AtomString,WTF::AtomString>((uint64_t)&v112, &v118, &v103, &v117);
    if (v117)
    {
      if (*(_DWORD *)v117 == 2)
        WTF::StringImpl::destroy(v117, v40);
      else
        *(_DWORD *)v117 -= 2;
    }
    if (v103)
    {
      if (*(_DWORD *)v103 == 2)
      {
        WTF::StringImpl::destroy(v103, v40);
        if (v38)
        {
LABEL_33:
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v40);
          else
            *(_DWORD *)v38 -= 2;
        }
LABEL_35:
        if (*((_DWORD *)v32 + 4) == 1)
          (*(void (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)v32 + 8))(v32);
        else
          --*((_DWORD *)v32 + 4);
        goto LABEL_37;
      }
      *(_DWORD *)v103 -= 2;
    }
    if (v38)
      goto LABEL_33;
    goto LABEL_35;
  }
LABEL_47:
  WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)(*(_QWORD *)(a4 + 8) + 16), (uint64_t *)&v117);
  v44 = *(_QWORD *)(a4 + 16);
  v45 = *(unsigned int *)(v44 + 52);
  if ((_DWORD)v45)
  {
    v46 = *(_QWORD *)(v44 + 40);
    v47 = v46 + 8 * v45;
    while (1)
    {
      v48 = *(_QWORD *)(*(_QWORD *)v46 + 16);
      if (!v48)
        goto LABEL_112;
      ++*(_DWORD *)(v48 + 8);
      v49 = *(WTF::StringImpl **)(v48 + 320);
      if (v49)
        *(_DWORD *)v49 += 4;
      v115 = v49;
      v116 = v49;
      v50 = *(_QWORD *)(a6 + 24);
      if (!v50)
      {
        std::__throw_bad_function_call[abi:sn180100]();
        __break(1u);
LABEL_180:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_181:
        __break(0xC471u);
        JUMPOUT(0x194B89E08);
      }
      v52 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v50 + 48))(v50, &v115);
      v53 = v115;
      v115 = 0;
      if (!v53)
        goto LABEL_56;
      if (*(_DWORD *)v53 != 2)
        break;
      WTF::StringImpl::destroy(v53, v51);
      if ((v52 & 1) == 0)
        goto LABEL_106;
LABEL_57:
      v54 = *(WTF::StringImpl **)(v48 + 16);
      if (v54)
        *(_DWORD *)v54 += 2;
      v112 = v54;
      v55 = *(_OWORD *)(v48 + 40);
      v113 = *(_OWORD *)(v48 + 24);
      v114 = v55;
      if (((WTF::URL::protocolIs() | ((v113 & 2) >> 1)) & 1) != 0)
        goto LABEL_103;
      v56 = (WTF *)WebCore::SubstituteResource::data((WebCore::SubstituteResource *)v48, v51);
      WebCore::FragmentedSharedBuffer::makeContiguous(v56, &v108);
      if (*((_DWORD *)v108 + 5))
      {
        v57 = *(_QWORD *)(*((_QWORD *)v108 + 1) + 8);
        v58 = *(unsigned int *)(v57 + 24);
        if ((_DWORD)v58 == -1)
          goto LABEL_180;
        v103 = (WTF::StringImpl *)&v107;
        ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v58])(&v103, v57 + 8);
      }
      WTF::String::fromUTF8();
      v110 = (_DWORD *)v48;
      v59 = *(_DWORD **)v46;
      v59[2] = *(_DWORD *)(*(_QWORD *)v46 + 8) + 1;
      v111 = v59;
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v108, v60);
      WebCore::sanitizeMarkupWithArchive(&v108, v102, v100, &v109, 1, a6);
      WTF::String::utf8();
      v61 = v107;
      if (v107)
      {
        v62 = (WTF *)*((_QWORD *)v107 + 1);
        v103 = 0;
        LODWORD(v104) = 0;
        HIDWORD(v104) = (_DWORD)v62;
        if (v62)
        {
          if ((unint64_t)v62 >> 32)
            goto LABEL_181;
          v63 = (WTF::StringImpl *)WTF::fastMalloc(v62);
          v64 = (char *)v61 + 16;
          LODWORD(v104) = (_DWORD)v62;
          v103 = v63;
          do
          {
            v65 = *v64++;
            *(_BYTE *)v63 = v65;
            v63 = (WTF::StringImpl *)((char *)v63 + 1);
            v62 = (WTF *)((char *)v62 - 1);
          }
          while (v62);
        }
      }
      else
      {
        v103 = 0;
        v104 = 0;
      }
      v66 = (WebCore::ScriptExecutionContext *)bmalloc::api::isoAllocate();
      v67 = WebCore::Blob::Blob((uint64_t)v66, (WebCore::ScriptExecutionContext *)(v100 + 192), (uint64_t)&v103, &v116);
      WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v67 + 24));
      if (v103)
        WTF::fastFree(v103, v68);
      v69 = v107;
      v107 = 0;
      if (v69)
      {
        if (*(_DWORD *)v69 == 1)
          WTF::fastFree(v69, v68);
        else
          --*(_DWORD *)v69;
      }
      WebCore::DOMURL::createPublicURL((WebCore::ActiveDOMObject **)(v100 + 192), v66, &v107);
      v71 = v112;
      if (v112)
      {
        if ((*((_BYTE *)v112 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v112 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(v112, v70);
          v71 = v103;
        }
      }
      v106 = v71;
      v72 = v107;
      if (v107)
      {
        if ((*((_BYTE *)v107 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v107 += 2;
          v73 = v72;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(v107, v70);
          v73 = v103;
        }
      }
      else
      {
        v73 = 0;
      }
      v105 = v73;
      WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::inlineSet<WTF::AtomString,WTF::AtomString>((uint64_t)&v103, &v118, &v106, &v105);
      if (v105)
      {
        if (*(_DWORD *)v105 == 2)
          WTF::StringImpl::destroy(v105, v51);
        else
          *(_DWORD *)v105 -= 2;
      }
      if (!v106)
        goto LABEL_85;
      if (*(_DWORD *)v106 != 2)
      {
        *(_DWORD *)v106 -= 2;
LABEL_85:
        if (!v72)
          goto LABEL_88;
        goto LABEL_86;
      }
      WTF::StringImpl::destroy(v106, v51);
      if (!v72)
        goto LABEL_88;
LABEL_86:
      if (*(_DWORD *)v72 == 2)
        WTF::StringImpl::destroy(v72, v51);
      else
        *(_DWORD *)v72 -= 2;
LABEL_88:
      if (*((_DWORD *)v66 + 4) == 1)
        (*(void (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)v66 + 8))(v66);
      else
        --*((_DWORD *)v66 + 4);
      v74 = v108;
      v108 = 0;
      if (v74)
      {
        if (*(_DWORD *)v74 == 2)
          WTF::StringImpl::destroy(v74, v51);
        else
          *(_DWORD *)v74 -= 2;
      }
      v75 = v111;
      v111 = 0;
      if (v75)
      {
        if (v75[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v75 + 8))(v75);
        else
          --v75[2];
      }
      v76 = v110;
      v110 = 0;
      if (v76)
      {
        if (v76[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v76 + 8))(v76);
        else
          --v76[2];
      }
      v77 = v109;
      v109 = 0;
      if (v77)
      {
        if (*(_DWORD *)v77 == 2)
          WTF::StringImpl::destroy(v77, v51);
        else
          *(_DWORD *)v77 -= 2;
      }
      v48 = 0;
LABEL_103:
      v78 = v112;
      v112 = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 2)
          WTF::StringImpl::destroy(v78, v51);
        else
          *(_DWORD *)v78 -= 2;
      }
LABEL_106:
      v79 = v116;
      v116 = 0;
      if (!v79)
        goto LABEL_109;
      if (*(_DWORD *)v79 != 2)
      {
        *(_DWORD *)v79 -= 2;
LABEL_109:
        if (v48)
          goto LABEL_110;
        goto LABEL_112;
      }
      WTF::StringImpl::destroy(v79, v51);
      if (v48)
      {
LABEL_110:
        if (*(_DWORD *)(v48 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
        else
          --*(_DWORD *)(v48 + 8);
      }
LABEL_112:
      v46 += 8;
      if (v46 == v47)
        goto LABEL_135;
    }
    *(_DWORD *)v53 -= 2;
LABEL_56:
    if ((v52 & 1) == 0)
      goto LABEL_106;
    goto LABEL_57;
  }
LABEL_135:
  v80 = v119;
  *((_DWORD *)v119 + 6) += 2;
  v112 = v80;
  WebCore::replaceSubresourceURLs((uint64_t)&v112, (unsigned __int8 *)&v118, v41, v42, v43);
  v82 = v112;
  v112 = 0;
  if (v82)
  {
    if (*((_DWORD *)v82 + 6) == 2)
    {
      if ((*((_WORD *)v82 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v82, v81);
    }
    else
    {
      *((_DWORD *)v82 + 6) -= 2;
    }
  }
  WebCore::sanitizedMarkupForFragmentInDocument(&v119, v97, v99, v101, v98);
  v83 = v117;
  v117 = 0;
  if (v83)
  {
    do
    {
      v84 = __ldaxr((unsigned int *)v83);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, (unsigned int *)v83));
    if (!v85)
    {
      atomic_store(1u, (unsigned int *)v83);
      v94 = (WTF::StringImpl *)*((_QWORD *)v83 + 6);
      *((_QWORD *)v83 + 6) = 0;
      if (v94)
      {
        if (*(_DWORD *)v94 == 2)
          WTF::StringImpl::destroy(v94, v16);
        else
          *(_DWORD *)v94 -= 2;
      }
      v95 = (WTF::StringImpl *)*((_QWORD *)v83 + 5);
      *((_QWORD *)v83 + 5) = 0;
      if (v95)
      {
        if (*(_DWORD *)v95 == 2)
          WTF::StringImpl::destroy(v95, v16);
        else
          *(_DWORD *)v95 -= 2;
      }
      v96 = *((unsigned int *)v83 + 8);
      if ((_DWORD)v96 != -1)
        ((void (*)(WTF::StringImpl **, char *))off_1E3283AA8[v96])(&v112, (char *)v83 + 8);
      *((_DWORD *)v83 + 8) = -1;
      WTF::fastFree(v83, v16);
    }
  }
  v86 = v118;
  if (v118)
  {
    v90 = *(unsigned int *)(v118 - 4);
    if ((_DWORD)v90)
    {
      v91 = v118;
      do
      {
        v92 = *(WTF::StringImpl **)v91;
        if (*(_QWORD *)v91 != -1)
        {
          v93 = *(WTF::StringImpl **)(v91 + 8);
          *(_QWORD *)(v91 + 8) = 0;
          if (v93)
          {
            if (*(_DWORD *)v93 == 2)
            {
              WTF::StringImpl::destroy(v93, v16);
              v92 = *(WTF::StringImpl **)v91;
            }
            else
            {
              *(_DWORD *)v93 -= 2;
            }
          }
          *(_QWORD *)v91 = 0;
          if (v92)
          {
            if (*(_DWORD *)v92 == 2)
              WTF::StringImpl::destroy(v92, v16);
            else
              *(_DWORD *)v92 -= 2;
          }
        }
        v91 += 16;
        --v90;
      }
      while (v90);
    }
    WTF::fastFree((WTF *)(v86 - 16), v16);
  }
LABEL_142:
  v87 = v119;
  v119 = 0;
  if (v87)
  {
    if (*((_DWORD *)v87 + 6) == 2)
    {
      if ((*((_WORD *)v87 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v87, v16);
    }
    else
    {
      *((_DWORD *)v87 + 6) -= 2;
    }
  }
  result = (_DWORD *)v120;
  v120 = 0;
  if (result)
    goto LABEL_146;
  return result;
}

void sub_194B89E14(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, WTF::StringImpl *a19, WTF::StringImpl *a20,WTF::StringImpl *a21,WTF::StringImpl *a22,_DWORD *a23,_DWORD *a24,WebCore::Node *a25)
{
  WTF::StringImpl *v25;
  _DWORD *v26;
  uint64_t v27;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  WTF *v40;
  void *v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;

  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
    {
      WTF::StringImpl::destroy(a19, a2);
      if (v25)
      {
LABEL_5:
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, a2);
        else
          *(_DWORD *)v25 -= 2;
      }
LABEL_7:
      if (v26[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
      else
        --v26[4];
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      if (a24)
      {
        if (a24[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)a24 + 8))(a24);
        else
          --a24[2];
      }
      if (a23)
      {
        if (a23[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)a23 + 8))(a23);
        else
          --a23[2];
      }
      if (a22)
      {
        if (*(_DWORD *)a22 == 2)
          WTF::StringImpl::destroy(a22, a2);
        else
          *(_DWORD *)a22 -= 2;
      }
      v29 = a25;
      a25 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, a2);
        else
          *(_DWORD *)v29 -= 2;
      }
      v30 = *(WTF::StringImpl **)(v27 - 128);
      *(_QWORD *)(v27 - 128) = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, a2);
        else
          *(_DWORD *)v30 -= 2;
      }
      v31 = *(_QWORD *)(v27 - 120);
      *(_QWORD *)(v27 - 120) = 0;
      if (v31)
      {
        do
        {
          v32 = __ldaxr((unsigned int *)v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, (unsigned int *)v31));
        if (!v33)
        {
          atomic_store(1u, (unsigned int *)v31);
          v34 = *(WTF::StringImpl **)(v31 + 48);
          *(_QWORD *)(v31 + 48) = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, a2);
            else
              *(_DWORD *)v34 -= 2;
          }
          v35 = *(WTF::StringImpl **)(v31 + 40);
          *(_QWORD *)(v31 + 40) = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, a2);
            else
              *(_DWORD *)v35 -= 2;
          }
          v36 = *(unsigned int *)(v31 + 32);
          if ((_DWORD)v36 != -1)
            ((void (*)(WebCore::Node **, uint64_t))off_1E3283AA8[v36])(&a25, v31 + 8);
          *(_DWORD *)(v31 + 32) = -1;
          WTF::fastFree((WTF *)v31, a2);
        }
      }
      v37 = *(_QWORD *)(v27 - 112);
      if (v37)
      {
        v42 = *(unsigned int *)(v37 - 4);
        if ((_DWORD)v42)
        {
          v43 = *(WTF::StringImpl ***)(v27 - 112);
          do
          {
            v44 = *v43;
            if (*v43 != (WTF::StringImpl *)-1)
            {
              v45 = v43[1];
              v43[1] = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                {
                  WTF::StringImpl::destroy(v45, a2);
                  v44 = *v43;
                }
                else
                {
                  *(_DWORD *)v45 -= 2;
                }
              }
              *v43 = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, a2);
                else
                  *(_DWORD *)v44 -= 2;
              }
            }
            v43 += 2;
            --v42;
          }
          while (v42);
        }
        WTF::fastFree((WTF *)(v37 - 16), a2);
      }
      v38 = *(_QWORD *)(v27 - 104);
      *(_QWORD *)(v27 - 104) = 0;
      if (v38)
      {
        if (*(_DWORD *)(v38 + 24) == 2)
        {
          if ((*(_WORD *)(v38 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v38, a2);
        }
        else
        {
          *(_DWORD *)(v38 + 24) -= 2;
        }
      }
      v39 = *(_DWORD **)(v27 - 96);
      *(_QWORD *)(v27 - 96) = 0;
      if (v39)
      {
        if (*v39 == 1)
        {
          WebCore::Page::~Page((uint64_t)v39);
          WTF::fastFree(v40, v41);
        }
        else
        {
          --*v39;
        }
      }
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a19 -= 2;
  }
  if (v25)
    goto LABEL_5;
  goto LABEL_7;
}

BOOL WebCore::WebContentMarkupReader::readWebArchive(WebCore::WebContentMarkupReader *this, WebCore::SharedBuffer *a2)
{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  uint64_t (***v7)();
  uint64_t v8;
  _BOOL8 v9;
  WTF::StringImpl *v10;
  WTF *v11;
  uint64_t v12;
  char v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t (***v16)();
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  _DWORD *v32;
  _DWORD *v33;
  char v34;
  uint64_t *v35;
  uint64_t (**v36)();
  uint64_t **v37;
  uint64_t (***v38)();
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = *(uint64_t **)(*((_QWORD *)this + 2) + 8);
  v4 = (unsigned int *)(v3 + 1);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v35 = v3;
  if (v3[37])
  {
    v36 = &off_1E3283B90;
    v37 = &v35;
    v38 = &v36;
    WebCore::extractMarkupAndArchive((uint64_t)&v31, a2, (uint64_t)&v36);
    v7 = v38;
    if (v38 == &v36)
    {
      v8 = 4;
      v7 = &v36;
    }
    else
    {
      if (!v38)
        goto LABEL_10;
      v8 = 5;
    }
    (*v7)[v8]();
LABEL_10:
    v9 = v34 != 0;
    if (!v34)
      goto LABEL_41;
    if ((WebCore::FrameWebContentReader::shouldSanitize(this, v6) & 1) != 0)
    {
      v11 = (WTF *)v35;
      v12 = v35[37];
      if (v12)
        *(_DWORD *)(v12 + 24) += 2;
      if (v34)
      {
        v13 = *((_QWORD *)this + 1) != 0;
        v36 = &off_1E3283BD8;
        v37 = &v35;
        v38 = &v36;
        WebCore::sanitizeMarkupWithArchive(&v30, v11, v12, (uint64_t)&v31, v13, (uint64_t)&v36);
        v14 = v30;
        v30 = 0;
        v15 = (WTF::StringImpl *)*((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = v14;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
          {
            WTF::StringImpl::destroy(v15, v10);
            v27 = v30;
            v30 = 0;
            if (v27)
            {
              if (*(_DWORD *)v27 == 2)
                WTF::StringImpl::destroy(v27, v10);
              else
                *(_DWORD *)v27 -= 2;
            }
          }
          else
          {
            *(_DWORD *)v15 -= 2;
            v30 = 0;
          }
        }
        v16 = v38;
        if (v38 == &v36)
        {
          v17 = 4;
          v16 = &v36;
        }
        else
        {
          if (!v38)
            goto LABEL_29;
          v17 = 5;
        }
        (*v16)[v17]();
LABEL_29:
        if (*(_DWORD *)(v12 + 24) == 2)
        {
          if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v12, v10);
        }
        else
        {
          *(_DWORD *)(v12 + 24) -= 2;
        }
LABEL_31:
        if (v34)
        {
          v20 = v33;
          v33 = 0;
          if (v20)
          {
            if (v20[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
            else
              --v20[2];
          }
          v21 = v32;
          v32 = 0;
          if (v21)
          {
            if (v21[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
            else
              --v21[2];
          }
          v22 = v31;
          v31 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v10);
            else
              *(_DWORD *)v22 -= 2;
          }
        }
LABEL_41:
        v3 = v35;
        v35 = 0;
        if (!v3)
          return v9;
        goto LABEL_42;
      }
    }
    else if (v34)
    {
      v18 = v31;
      if (v31)
        *(_DWORD *)v31 += 2;
      v19 = (WTF::StringImpl *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v18;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v10);
        else
          *(_DWORD *)v19 -= 2;
      }
      goto LABEL_31;
    }
    __break(1u);
  }
  v9 = 0;
  v35 = 0;
LABEL_42:
  v23 = (unsigned int *)(v3 + 1);
  do
  {
    v24 = __ldaxr(v23);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v23));
  if (!v25)
  {
    atomic_store(1u, v23);
    v28 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v28 = off_1E31FE290;
    *((_QWORD *)v28 + 1) = v23;
    v31 = v28;
    WTF::ensureOnMainThread();
    v29 = v31;
    v31 = 0;
    if (v29)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v29 + 8))(v29);
  }
  return v9;
}

void sub_194B8A5FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a11)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

BOOL WebCore::WebContentReader::readHTML(WebCore::WebContentReader *this, unsigned int **a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  int v5;
  unsigned int v6;
  _BOOL8 v7;
  uint64_t v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  _QWORD *v20;
  char v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unsigned int *v24;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if ((*(_QWORD *)(*(_QWORD *)(v2 + 136) + 688) & 0x40000000) != 0)
    return 0;
  v3 = *(_QWORD *)(v2 + 296);
  if (!v3)
    return 0;
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *a2;
  if (!*a2)
  {
    v7 = 0;
    goto LABEL_33;
  }
  v5 = *v4;
  *v4 += 2;
  v24 = v4;
  v6 = v4[1];
  v7 = v6 != 0;
  if (!v6)
  {
    v24 = 0;
    goto LABEL_31;
  }
  v23 = 0;
  {
    if (byte_1ECE90A55 && WebCore::FrameWebContentReader::shouldSanitize(this, (WTF::StringImpl *)a2))
    {
      v9 = *((_QWORD *)this + 1);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E3283C20;
      v20 = v10;
      v21 = 1;
      WebCore::sanitizeMarkup(&v24, v9 != 0, &v20, &v22);
      v13 = v22;
      v12 = v23;
      v22 = 0;
      v23 = v13;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::destroy(v12, v11);
          v16 = v22;
          v22 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v15);
            else
              *(_DWORD *)v16 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v12 -= 2;
          v22 = 0;
        }
      }
      if (v21)
      {
        v14 = v20;
        v20 = 0;
        if (v14)
          (*(void (**)(_QWORD *))(*v14 + 8))(v14);
      }
      goto LABEL_23;
    }
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  *v4 += 2;
  v23 = (WTF::StringImpl *)v4;
LABEL_23:
  WebCore::createFragmentFromMarkup(v3, (unsigned int **)&v23, MEMORY[0x1E0CBF738], 0, (unint64_t)&v22);
  WebCore::WebContentReader::addFragment((uint64_t)this, &v22);
  v17 = v22;
  v22 = 0;
  if (v17)
  {
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v17, a2);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
  }
  v18 = v23;
  v23 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v4 = v24;
  v24 = 0;
  if (!v4)
  {
    v7 = 1;
    goto LABEL_33;
  }
  v5 = *v4 - 2;
LABEL_31:
  if (v5)
    *v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, (WTF::StringImpl *)a2);
LABEL_33:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v7;
}

void sub_194B8AA14(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14)
{
  uint64_t v14;

  if (a11 && a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  if (*(_DWORD *)(v14 + 24) == 2)
  {
    if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v14, a2);
  }
  else
  {
    *(_DWORD *)(v14 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WebCore::WebContentMarkupReader::readHTML(WebCore::WebContentMarkupReader *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v15;
  _QWORD *v16;
  char v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  if (!*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 296))
    return 0;
  v3 = *a2;
  if (!*a2)
  {
    v19 = 0;
    if ((WebCore::FrameWebContentReader::shouldSanitize(this, (WTF::StringImpl *)a2) & 1) != 0)
      goto LABEL_4;
LABEL_12:
    v11 = (WTF::StringImpl *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v3;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v4);
      else
        *(_DWORD *)v11 -= 2;
    }
    goto LABEL_15;
  }
  *(_DWORD *)v3 += 2;
  v19 = v3;
  if (!WebCore::FrameWebContentReader::shouldSanitize(this, (WTF::StringImpl *)a2))
  {
    *(_DWORD *)v3 += 2;
    goto LABEL_12;
  }
LABEL_4:
  v5 = *((_QWORD *)this + 1);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E3283C70;
  v16 = v6;
  v17 = 1;
  WebCore::sanitizeMarkup((unsigned int **)&v19, v5 != 0, &v16, &v18);
  v7 = v18;
  v18 = 0;
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v4);
      v15 = v18;
      v18 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v4);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v8 -= 2;
      v18 = 0;
    }
  }
  if (v17)
  {
    v9 = v16;
    v16 = 0;
    if (v9)
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  }
LABEL_15:
  v12 = *((_QWORD *)this + 3);
  if (v12)
    v10 = *(_DWORD *)(v12 + 4) != 0;
  else
    v10 = 0;
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v4);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v10;
}

void sub_194B8AC54(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a10 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WebCore::WebContentReader::readRTFD(WebCore::WebContentReader *this, WebCore::SharedBuffer *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  id v7;
  void *v8;
  CFTypeRef v9;
  _BOOL8 v10;
  void *v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v15;
  CFTypeRef v16;
  WebCore::Node *v17;
  CFTypeRef cf;

  v4 = *(unsigned int **)(*((_QWORD *)this + 2) + 8);
  v5 = v4 + 2;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  if ((*(_QWORD *)(*((_QWORD *)v4 + 17) + 688) & 0x40000000) != 0 || !*((_QWORD *)v4 + 37))
  {
    v10 = 0;
  }
  else
  {
    v7 = objc_alloc(MEMORY[0x1E0CB3498]);
    WebCore::SharedBuffer::createNSData(a2, (WebCoreSharedBufferData **)&cf);
    v8 = (void *)objc_msgSend(v7, "initWithRTFD:documentAttributes:", cf, 0);
    v9 = cf;
    cf = 0;
    if (v9)
      CFRelease(v9);
    WebCore::createFragment((WebCore::LocalFrame *)v4, v8, 0, (WTF::StringImpl **)&cf);
    v10 = cf != 0;
    if (cf)
    {
      v17 = (WebCore::Node *)cf;
      WebCore::WebContentReader::addFragment((uint64_t)this, &v17);
      if (v17)
      {
        if (*((_DWORD *)v17 + 6) == 2)
        {
          if ((*((_WORD *)v17 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v17, v11);
        }
        else
        {
          *((_DWORD *)v17 + 6) -= 2;
        }
      }
    }
    if (v8)
      CFRelease(v8);
  }
  do
  {
    v12 = __ldaxr(v5);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v5));
  if (!v13)
  {
    atomic_store(1u, v5);
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = off_1E31FE290;
    v15[1] = v5;
    cf = v15;
    WTF::ensureOnMainThread();
    v16 = cf;
    cf = 0;
    if (v16)
      (*(void (**)(CFTypeRef))(*(_QWORD *)v16 + 8))(v16);
  }
  return v10;
}

void sub_194B8AE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

BOOL WebCore::WebContentMarkupReader::readRTFD(WebCore::WebContentMarkupReader *this, WebCore::SharedBuffer *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  id v7;
  void *v8;
  CFTypeRef v9;
  WTF::StringImpl *v10;
  _BOOL8 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl *v20;
  _QWORD *v21;
  CFTypeRef v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  CFTypeRef cf;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  v4 = *(unsigned int **)(*((_QWORD *)this + 2) + 8);
  v5 = v4 + 2;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  if (*((_QWORD *)v4 + 37))
  {
    v7 = objc_alloc(MEMORY[0x1E0CB3498]);
    WebCore::SharedBuffer::createNSData(a2, (WebCoreSharedBufferData **)&cf);
    v8 = (void *)objc_msgSend(v7, "initWithRTFD:documentAttributes:", cf, 0);
    v9 = cf;
    cf = 0;
    if (v9)
      CFRelease(v9);
    WebCore::createFragment((WebCore::LocalFrame *)v4, v8, 0, &v31);
    v10 = v31;
    v11 = v31 != 0;
    if (v31)
    {
      cf = 0;
      v29 = 0;
      v26 = 0;
      v27 = 0;
      WebCore::serializeFragment((uint64_t)v31, 0, 0, 0, 0, 0, (uint64_t *)&cf, (uint64_t *)&v26, &v30);
      v13 = v30;
      v30 = 0;
      v14 = (WTF::StringImpl *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v13;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::destroy(v14, v12);
          v20 = v30;
          v30 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v12);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v14 -= 2;
          v30 = 0;
        }
      }
      if (HIDWORD(v27))
        WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(v26, (WTF *)((char *)v26 + 24 * HIDWORD(v27)));
      v15 = v26;
      if (v26)
      {
        v26 = 0;
        LODWORD(v27) = 0;
        WTF::fastFree(v15, v12);
      }
      if (HIDWORD(v29))
      {
        v23 = (uint64_t *)cf;
        v24 = 8 * HIDWORD(v29);
        do
        {
          v25 = *v23;
          *v23 = 0;
          if (v25)
          {
            if (*(_DWORD *)(v25 + 24) == 2)
            {
              if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v25, v12);
            }
            else
            {
              *(_DWORD *)(v25 + 24) -= 2;
            }
          }
          ++v23;
          v24 -= 8;
        }
        while (v24);
      }
      v16 = (WTF *)cf;
      if (cf)
      {
        cf = 0;
        LODWORD(v29) = 0;
        WTF::fastFree(v16, v12);
      }
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10, v12);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
    }
    if (v8)
      CFRelease(v8);
  }
  else
  {
    v11 = 0;
  }
  do
  {
    v17 = __ldaxr(v5);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v5));
  if (!v18)
  {
    atomic_store(1u, v5);
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v21 = off_1E31FE290;
    v21[1] = v5;
    cf = v21;
    WTF::ensureOnMainThread();
    v22 = cf;
    cf = 0;
    if (v22)
      (*(void (**)(CFTypeRef))(*(_QWORD *)v22 + 8))(v22);
  }
  return v11;
}

void sub_194B8B134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

BOOL WebCore::WebContentReader::readRTF(WebCore::WebContentReader *this, WebCore::SharedBuffer *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  id v7;
  void *v8;
  CFTypeRef v9;
  _BOOL8 v10;
  void *v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v15;
  CFTypeRef v16;
  WebCore::Node *v17;
  CFTypeRef cf;

  v4 = *(unsigned int **)(*((_QWORD *)this + 2) + 8);
  v5 = v4 + 2;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  if ((*(_QWORD *)(*((_QWORD *)v4 + 17) + 688) & 0x40000000) != 0)
  {
    v10 = 0;
  }
  else
  {
    v7 = objc_alloc(MEMORY[0x1E0CB3498]);
    WebCore::SharedBuffer::createNSData(a2, (WebCoreSharedBufferData **)&cf);
    v8 = (void *)objc_msgSend(v7, "initWithRTF:documentAttributes:", cf, 0);
    v9 = cf;
    cf = 0;
    if (v9)
      CFRelease(v9);
    WebCore::createFragment((WebCore::LocalFrame *)v4, v8, 0, (WTF::StringImpl **)&cf);
    v10 = cf != 0;
    if (cf)
    {
      v17 = (WebCore::Node *)cf;
      WebCore::WebContentReader::addFragment((uint64_t)this, &v17);
      if (v17)
      {
        if (*((_DWORD *)v17 + 6) == 2)
        {
          if ((*((_WORD *)v17 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v17, v11);
        }
        else
        {
          *((_DWORD *)v17 + 6) -= 2;
        }
      }
    }
    if (v8)
      CFRelease(v8);
  }
  do
  {
    v12 = __ldaxr(v5);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v5));
  if (!v13)
  {
    atomic_store(1u, v5);
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = off_1E31FE290;
    v15[1] = v5;
    cf = v15;
    WTF::ensureOnMainThread();
    v16 = cf;
    cf = 0;
    if (v16)
      (*(void (**)(CFTypeRef))(*(_QWORD *)v16 + 8))(v16);
  }
  return v10;
}

void sub_194B8B340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

BOOL WebCore::WebContentMarkupReader::readRTF(WebCore::WebContentMarkupReader *this, WebCore::SharedBuffer *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  id v7;
  void *v8;
  CFTypeRef v9;
  WTF::StringImpl *v10;
  _BOOL8 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl *v20;
  _QWORD *v21;
  CFTypeRef v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  CFTypeRef cf;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  v4 = *(unsigned int **)(*((_QWORD *)this + 2) + 8);
  v5 = v4 + 2;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  if (*((_QWORD *)v4 + 37))
  {
    v7 = objc_alloc(MEMORY[0x1E0CB3498]);
    WebCore::SharedBuffer::createNSData(a2, (WebCoreSharedBufferData **)&cf);
    v8 = (void *)objc_msgSend(v7, "initWithRTF:documentAttributes:", cf, 0);
    v9 = cf;
    cf = 0;
    if (v9)
      CFRelease(v9);
    WebCore::createFragment((WebCore::LocalFrame *)v4, v8, 0, &v31);
    v10 = v31;
    v11 = v31 != 0;
    if (v31)
    {
      cf = 0;
      v29 = 0;
      v26 = 0;
      v27 = 0;
      WebCore::serializeFragment((uint64_t)v31, 0, 0, 0, 0, 0, (uint64_t *)&cf, (uint64_t *)&v26, &v30);
      v13 = v30;
      v30 = 0;
      v14 = (WTF::StringImpl *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v13;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::destroy(v14, v12);
          v20 = v30;
          v30 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v12);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v14 -= 2;
          v30 = 0;
        }
      }
      if (HIDWORD(v27))
        WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(v26, (WTF *)((char *)v26 + 24 * HIDWORD(v27)));
      v15 = v26;
      if (v26)
      {
        v26 = 0;
        LODWORD(v27) = 0;
        WTF::fastFree(v15, v12);
      }
      if (HIDWORD(v29))
      {
        v23 = (uint64_t *)cf;
        v24 = 8 * HIDWORD(v29);
        do
        {
          v25 = *v23;
          *v23 = 0;
          if (v25)
          {
            if (*(_DWORD *)(v25 + 24) == 2)
            {
              if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v25, v12);
            }
            else
            {
              *(_DWORD *)(v25 + 24) -= 2;
            }
          }
          ++v23;
          v24 -= 8;
        }
        while (v24);
      }
      v16 = (WTF *)cf;
      if (cf)
      {
        cf = 0;
        LODWORD(v29) = 0;
        WTF::fastFree(v16, v12);
      }
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10, v12);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
    }
    if (v8)
      CFRelease(v8);
  }
  else
  {
    v11 = 0;
  }
  do
  {
    v17 = __ldaxr(v5);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v5));
  if (!v18)
  {
    atomic_store(1u, v5);
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v21 = off_1E31FE290;
    v21[1] = v5;
    cf = v21;
    WTF::ensureOnMainThread();
    v22 = cf;
    cf = 0;
    if (v22)
      (*(void (**)(CFTypeRef))(*(_QWORD *)v22 + 8))(v22);
  }
  return v11;
}

void sub_194B8B650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

BOOL WebCore::WebContentReader::readPlainText(WebCore::WebContentReader *this, const WTF::String *a2)
{
  int v2;
  __CFString *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  void *v9;
  WebCore::Node *v10;
  WTF::StringImpl *v11;
  WTF *v13;
  void *v14;
  WebCore::Node *v15;
  WTF::StringImpl *v16;

  v2 = *((unsigned __int8 *)this + 56);
  if (*((_BYTE *)this + 56))
  {
    if (*(_QWORD *)a2)
      v4 = (__CFString *)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E3487BC0;
    MEMORY[0x19AEA5508](&v16, -[__CFString precomposedStringWithCanonicalMapping](v4, "precomposedStringWithCanonicalMapping"));
    v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 24);
    if (v5)
    {
      v6 = *(_DWORD **)(v5 + 8);
      if (v6)
      {
        ++*v6;
        WebCore::Page::applyLinkDecorationFiltering((uint64_t)v6, &v16, &v15);
        v8 = v16;
        v16 = v15;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v7);
          else
            *(_DWORD *)v8 -= 2;
        }
        if (*v6 == 1)
        {
          WebCore::Page::~Page((uint64_t)v6);
          WTF::fastFree(v13, v14);
        }
        else
        {
          --*v6;
        }
      }
    }
    WebCore::createFragmentFromText((WebCore::Node **)this + 3, (const WebCore::SimpleRange *)&v16, (uint64_t *)&v15);
    WebCore::WebContentReader::addFragment((uint64_t)this, &v15);
    v10 = v15;
    v15 = 0;
    if (v10)
    {
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10, v9);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
    }
    *((_BYTE *)this + 72) = 1;
    v11 = v16;
    v16 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  return v2 != 0;
}

void sub_194B8B840(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WebCore::WebContentReader::readImage(uint64_t a1, WebCore::Document *a2, WTF **a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  double v16;
  int v17;
  double v18;
  int v19;
  uint64_t v20;
  WebCore::Element *v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::Document *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::Document *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::AtomString *v32;
  WTF::StringImpl *v33;
  WTF::AtomString *v34;
  int v35;
  void *v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::AtomString *v45;
  WebCore::Element *v46;
  WebCore::Node *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  unsigned int v52;
  _DWORD *v53;
  uint64_t v54;
  WebCore::Node *v55;
  uint64_t v56;
  int v57;
  _QWORD *v58;
  _QWORD *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  _BOOL4 v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  unsigned int v71;
  WebCore::ScriptExecutionContext *v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t *v79;
  unsigned int v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF *v86;
  WTF::StringImpl *v87;
  WTF::AtomString *v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t *v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t *v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  unint64_t v105;
  WTF::AtomString *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  unint64_t v109;
  WTF::AtomString *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WebCore::Editor *v113;
  void *v114;
  WebCore::Editor *v115;
  uint64_t v116;
  void *v117;
  WebCore::Editor *v118;
  void *v119;
  void *v120;
  uint64_t v121;
  unsigned int v122;
  WebCore::ScriptExecutionContext *v123;
  uint64_t v124;
  __int128 v125;
  WebCore::Node *v126;
  WTF::StringImpl *v127;
  WTF *v128;
  uint64_t (*v129)();
  unsigned int v130;
  unsigned int v131;
  unint64_t v133;
  WTF::AtomString *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::AtomString *v137;
  WTF::AtomString *v138;
  int v139;
  _OWORD v140[2];
  WebCore::Node *v141;
  WTF::AtomString *v142;
  WTF::StringImpl *v143;
  char v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WebCore::Node *v149;
  WTF::StringImpl *v150[2];

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v9 = (unsigned int *)(v8 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = *(_QWORD *)(v8 + 296);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(v11 + 688);
  if (!v12)
    v12 = WebCore::Document::ensureQuirks((WebCore::Document *)v11);
  if (*(_QWORD *)v12)
  {
    v13 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 680);
      if (*(_BYTE *)(v14 + 243))
        goto LABEL_17;
      if ((*(_QWORD *)(v14 + 688) & 0x80000) != 0)
      {
        while (!*(_BYTE *)(v12 + 23))
        {
          *(_DWORD *)(v13 + 24) += 2;
          *(_WORD *)(v12 + 22) = WebCore::isYahooMail((WebCore *)v13, a2) | 0x100;
          if (*(_DWORD *)(v13 + 24) != 2)
          {
            *(_DWORD *)(v13 + 24) -= 2;
            break;
          }
          if ((*(_WORD *)(v13 + 30) & 0x400) != 0)
            break;
          WebCore::Node::removedLastRef((WebCore::Node *)v13, a2);
          v14 = *(unsigned __int8 *)(v12 + 23);
          if (*(_BYTE *)(v12 + 23))
            break;
          __break(1u);
LABEL_17:
          if (!*(_BYTE *)(v14 + 242))
            goto LABEL_18;
        }
        if (*(_BYTE *)(v12 + 22))
        {
          v15 = 0;
          goto LABEL_229;
        }
      }
    }
  }
LABEL_18:
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
    goto LABEL_213;
  }
  if (!byte_1ECE90A59)
  {
LABEL_213:
    v121 = *(_QWORD *)a2;
    v122 = atomic_load((unsigned int *)v121);
    if (v122 == 1)
    {
      WebCore::FragmentedSharedBuffer::takeData((WTF *)v121, &v142);
    }
    else
    {
      v142 = 0;
      v143 = 0;
      v133 = *(_QWORD *)(v121 + 48);
      if (v133)
      {
        if (HIDWORD(v133))
        {
          __break(0xC471u);
          JUMPOUT(0x194B8C828);
        }
        v134 = (WTF::AtomString *)WTF::fastMalloc(*(WTF **)(v121 + 48));
        LODWORD(v143) = v133;
        v142 = v134;
      }
      v135 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v135 = off_1E3406E88;
      *((_QWORD *)v135 + 1) = &v142;
      v150[0] = v135;
      WebCore::FragmentedSharedBuffer::forEachSegment(v121, v150);
      v136 = v150[0];
      v150[0] = 0;
      if (v136)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v136 + 8))(v136);
    }
    v123 = (WebCore::ScriptExecutionContext *)bmalloc::api::isoAllocate();
    v124 = WebCore::Blob::Blob((uint64_t)v123, (WebCore::ScriptExecutionContext *)(v11 + 192), (uint64_t)&v142, a3);
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v124 + 24));
    WebCore::DOMURL::createPublicURL((WebCore::ActiveDOMObject **)(v11 + 192), v123, &v148);
    v125 = *(_OWORD *)(a4 + 16);
    v140[0] = *(_OWORD *)a4;
    v140[1] = v125;
    WebCore::createFragmentForImageAndURL((WebCore::HTMLImageElement *)v11, &v148, (uint64_t)v140, (uint64_t *)&v149);
    WebCore::WebContentReader::addFragment(a1, &v149);
    v126 = v149;
    v149 = 0;
    if (v126)
    {
      if (*((_DWORD *)v126 + 6) == 2)
      {
        if ((*((_WORD *)v126 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v126, a2);
      }
      else
      {
        *((_DWORD *)v126 + 6) -= 2;
      }
    }
    v127 = v148;
    v148 = 0;
    if (v127)
    {
      if (*(_DWORD *)v127 == 2)
        WTF::StringImpl::destroy(v127, a2);
      else
        *(_DWORD *)v127 -= 2;
    }
    if (*((_DWORD *)v123 + 4) == 1)
      (*(void (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)v123 + 8))(v123);
    else
      --*((_DWORD *)v123 + 4);
    v128 = v142;
    if (v142)
    {
      v142 = 0;
      LODWORD(v143) = 0;
      WTF::fastFree(v128, a2);
    }
    goto LABEL_225;
  }
  v16 = *(double *)a4;
  v17 = *(unsigned __int8 *)(a4 + 8);
  v18 = *(double *)(a4 + 16);
  v19 = *(unsigned __int8 *)(a4 + 24);
  v20 = bmalloc::api::isoAllocate();
  v21 = (WebCore::Element *)v20;
  *(_OWORD *)(v20 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v20 + 24) = 0x101C00000002;
  *(_QWORD *)(v20 + 32) = 0;
  *(_QWORD *)(v20 + 40) = v11 + 96;
  *(_OWORD *)(v20 + 48) = 0u;
  *(_OWORD *)(v20 + 64) = 0u;
  ++*(_DWORD *)(v11 + 3324);
  *(_QWORD *)(v20 + 80) = 0;
  *(_QWORD *)(v20 + 88) = 0;
  v22 = WebCore::HTMLNames::attachmentTag;
  if (WebCore::HTMLNames::attachmentTag)
    ++*(_DWORD *)WebCore::HTMLNames::attachmentTag;
  *(_QWORD *)(v20 + 96) = v22;
  *(_QWORD *)(v20 + 104) = 0;
  *(_QWORD *)v20 = off_1E33B4248;
  *(_BYTE *)(v20 + 112) = 0;
  *(_OWORD *)(v20 + 136) = 0uLL;
  *(_OWORD *)(v20 + 152) = 0uLL;
  *(_OWORD *)(v20 + 168) = 0uLL;
  *(_OWORD *)(v20 + 184) = 0uLL;
  *(_OWORD *)(v20 + 200) = 0uLL;
  *(_OWORD *)(v20 + 216) = 0uLL;
  *(_OWORD *)(v20 + 232) = 0uLL;
  *(_OWORD *)(v20 + 248) = 0uLL;
  *(_OWORD *)(v20 + 120) = 0uLL;
  *(_OWORD *)(v20 + 264) = 0uLL;
  *(_BYTE *)(v20 + 280) = 1;
  v148 = (WTF::StringImpl *)v20;
  if ((*(_QWORD *)(*(_QWORD *)(v11 + 680) + 704) & 0x100000000000) != 0)
  {
    *(_BYTE *)(v20 + 112) = 1;
    WebCore::Element::ensureUserAgentShadowRoot((WebCore::Element *)v20);
  }
  v23 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v23 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v23 + 24) = 0xB00400000002;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)(v23 + 40) = v11 + 96;
  *(_OWORD *)(v23 + 48) = 0u;
  *(_OWORD *)(v23 + 64) = 0u;
  ++*(_DWORD *)(v11 + 3324);
  *(_QWORD *)(v23 + 80) = 0;
  *(_QWORD *)(v23 + 88) = 0;
  *(_QWORD *)v23 = off_1E33A31A0;
  v141 = (WebCore::Node *)v23;
  v24 = *(WebCore::Document **)(v8 + 296);
  v25 = *((_QWORD *)v24 + 382);
  if (!v25)
  {
    v139 = v19;
    v113 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v113, v24);
    v115 = (WebCore::Editor *)*((_QWORD *)v24 + 382);
    *((_QWORD *)v24 + 382) = v113;
    if (v115)
    {
      WebCore::Editor::~Editor(v115, v114);
      if (*(_DWORD *)v116)
      {
        *(_QWORD *)(v116 + 496) = 0;
        *(_OWORD *)(v116 + 464) = 0u;
        *(_OWORD *)(v116 + 480) = 0u;
        *(_OWORD *)(v116 + 432) = 0u;
        *(_OWORD *)(v116 + 448) = 0u;
        *(_OWORD *)(v116 + 400) = 0u;
        *(_OWORD *)(v116 + 416) = 0u;
        *(_OWORD *)(v116 + 368) = 0u;
        *(_OWORD *)(v116 + 384) = 0u;
        *(_OWORD *)(v116 + 336) = 0u;
        *(_OWORD *)(v116 + 352) = 0u;
        *(_OWORD *)(v116 + 304) = 0u;
        *(_OWORD *)(v116 + 320) = 0u;
        *(_OWORD *)(v116 + 272) = 0u;
        *(_OWORD *)(v116 + 288) = 0u;
        *(_OWORD *)(v116 + 240) = 0u;
        *(_OWORD *)(v116 + 256) = 0u;
        *(_OWORD *)(v116 + 208) = 0u;
        *(_OWORD *)(v116 + 224) = 0u;
        *(_OWORD *)(v116 + 176) = 0u;
        *(_OWORD *)(v116 + 192) = 0u;
        *(_OWORD *)(v116 + 144) = 0u;
        *(_OWORD *)(v116 + 160) = 0u;
        *(_OWORD *)(v116 + 112) = 0u;
        *(_OWORD *)(v116 + 128) = 0u;
        *(_OWORD *)(v116 + 80) = 0u;
        *(_OWORD *)(v116 + 96) = 0u;
        *(_OWORD *)(v116 + 48) = 0u;
        *(_OWORD *)(v116 + 64) = 0u;
        *(_OWORD *)(v116 + 16) = 0u;
        *(_OWORD *)(v116 + 32) = 0u;
        *(_OWORD *)v116 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v116, v117);
      }
    }
    v25 = *((_QWORD *)v24 + 382);
    v19 = v139;
  }
  v26 = *(_QWORD *)(v25 + 8);
  if (!v26 || (v27 = *(_QWORD *)(v26 + 8)) == 0)
  {
LABEL_59:
    v51 = *(_QWORD *)a2;
    v52 = atomic_load((unsigned int *)v51);
    if (v52 == 1)
    {
      WebCore::FragmentedSharedBuffer::takeData((WTF *)v51, &v142);
    }
    else
    {
      v142 = 0;
      v143 = 0;
      v105 = *(_QWORD *)(v51 + 48);
      if (v105)
      {
        if (HIDWORD(v105))
        {
          __break(0xC471u);
          goto LABEL_258;
        }
        v106 = (WTF::AtomString *)WTF::fastMalloc(*(WTF **)(v51 + 48));
        LODWORD(v143) = v105;
        v142 = v106;
      }
      v107 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v107 = off_1E3406E88;
      *((_QWORD *)v107 + 1) = &v142;
      v150[0] = v107;
      WebCore::FragmentedSharedBuffer::forEachSegment(v51, v150);
      v108 = v150[0];
      v150[0] = 0;
      if (v108)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v108 + 8))(v108);
    }
    v53 = (_DWORD *)bmalloc::api::isoAllocate();
    v54 = WebCore::Blob::Blob((uint64_t)v53, (WebCore::ScriptExecutionContext *)(v11 + 192), (uint64_t)&v142, a3);
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v54 + 24));
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v55 = v149;
    v56 = bmalloc::api::isoAllocate();
    v58 = (_QWORD *)WebCore::Blob::Blob(v56, v57, (WebCore::ScriptExecutionContext *)(v11 + 192), (uint64_t)v53);
    *v58 = off_1E33AE6D8;
    v58[3] = &unk_1E33AE718;
    v59 = v58 + 3;
    *(_QWORD *)(v56 + 128) = 0;
    *(_QWORD *)(v56 + 136) = 0;
    if (v55)
      *(_DWORD *)v55 += 2;
    *(_QWORD *)(v56 + 144) = v55;
    *(_BYTE *)(v56 + 152) = 0;
    *(_BYTE *)(v56 + 160) = 0;
    *(_BYTE *)(v56 + 168) = 0;
    *(_BYTE *)(v56 + 176) = 0;
    *(_WORD *)(v56 + 184) = 0;
    WebCore::ActiveDOMObject::suspendIfNeeded(v59);
    v147 = (WTF::StringImpl *)v56;
    WebCore::HTMLAttachmentElement::setFile(v21, (WTF::StringImpl *)&v147, 1);
    v61 = v147;
    v147 = 0;
    if (v61)
    {
      if (*((_DWORD *)v61 + 4) == 1)
      {
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v61 + 8))(v61);
        if (v55)
        {
LABEL_67:
          if (*(_DWORD *)v55 == 2)
            WTF::StringImpl::destroy(v55, v60);
          else
            *(_DWORD *)v55 -= 2;
        }
LABEL_69:
        if (v53[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v53 + 8))(v53);
        else
          --v53[4];
        v62 = v142;
        if (v142)
        {
          v142 = 0;
          LODWORD(v143) = 0;
          WTF::fastFree(v62, v60);
        }
        goto LABEL_73;
      }
      --*((_DWORD *)v61 + 4);
    }
    if (v55)
      goto LABEL_67;
    goto LABEL_69;
  }
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 224))(v27);
  if ((v28 & 1) == 0)
  {
    v21 = v148;
    goto LABEL_59;
  }
  v29 = *(WebCore::Document **)(v8 + 296);
  v30 = *((_QWORD *)v29 + 382);
  if (!v30)
  {
    v118 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v118, v29);
    v28 = *((_QWORD *)v29 + 382);
    *((_QWORD *)v29 + 382) = v118;
    if (v28)
    {
      WebCore::Editor::~Editor((WebCore::Editor *)v28, v119);
      if (*(_DWORD *)v28)
      {
        *(_QWORD *)(v28 + 496) = 0;
        *(_OWORD *)(v28 + 464) = 0u;
        *(_OWORD *)(v28 + 480) = 0u;
        *(_OWORD *)(v28 + 432) = 0u;
        *(_OWORD *)(v28 + 448) = 0u;
        *(_OWORD *)(v28 + 400) = 0u;
        *(_OWORD *)(v28 + 416) = 0u;
        *(_OWORD *)(v28 + 368) = 0u;
        *(_OWORD *)(v28 + 384) = 0u;
        *(_OWORD *)(v28 + 336) = 0u;
        *(_OWORD *)(v28 + 352) = 0u;
        *(_OWORD *)(v28 + 304) = 0u;
        *(_OWORD *)(v28 + 320) = 0u;
        *(_OWORD *)(v28 + 272) = 0u;
        *(_OWORD *)(v28 + 288) = 0u;
        *(_OWORD *)(v28 + 240) = 0u;
        *(_OWORD *)(v28 + 256) = 0u;
        *(_OWORD *)(v28 + 208) = 0u;
        *(_OWORD *)(v28 + 224) = 0u;
        *(_OWORD *)(v28 + 176) = 0u;
        *(_OWORD *)(v28 + 192) = 0u;
        *(_OWORD *)(v28 + 144) = 0u;
        *(_OWORD *)(v28 + 160) = 0u;
        *(_OWORD *)(v28 + 112) = 0u;
        *(_OWORD *)(v28 + 128) = 0u;
        *(_OWORD *)(v28 + 80) = 0u;
        *(_OWORD *)(v28 + 96) = 0u;
        *(_OWORD *)(v28 + 48) = 0u;
        *(_OWORD *)(v28 + 64) = 0u;
        *(_OWORD *)(v28 + 16) = 0u;
        *(_OWORD *)(v28 + 32) = 0u;
        *(_OWORD *)v28 = 0u;
      }
      else
      {
        v28 = WTF::fastFree((WTF *)v28, v120);
      }
    }
    v30 = *((_QWORD *)v29 + 382);
  }
  v31 = v148;
  v32 = (WTF::AtomString *)*((_QWORD *)v148 + 16);
  if (v32 && *((_DWORD *)v32 + 1))
    goto LABEL_35;
  WTF::createVersion4UUIDString((WTF *)v28);
  v32 = v142;
  v142 = 0;
  v34 = (WTF::AtomString *)*((_QWORD *)v148 + 16);
  *((_QWORD *)v148 + 16) = v32;
  if (!v34)
    goto LABEL_34;
  v35 = *(_DWORD *)v34 - 2;
  if (*(_DWORD *)v34 == 2)
  {
    WTF::StringImpl::destroy(v34, v33);
    v34 = v142;
    v142 = 0;
    if (!v34)
      goto LABEL_33;
    v35 = *(_DWORD *)v34 - 2;
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::destroy(v34, v81);
      goto LABEL_33;
    }
  }
  *(_DWORD *)v34 = v35;
LABEL_33:
  v32 = (WTF::AtomString *)*((_QWORD *)v31 + 16);
LABEL_34:
  if (v32)
LABEL_35:
    *(_DWORD *)v32 += 2;
  v150[0] = v32;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v149 = v142;
  v37 = *(unsigned int **)a2;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 + 1, v37));
  v142 = (WTF::AtomString *)v37;
  v39 = *(_QWORD *)(v30 + 8);
  if (v39)
  {
    v40 = *(_QWORD *)(v39 + 8);
    if (v40)
      (*(void (**)(uint64_t, WTF::StringImpl **, WTF **, WebCore::Node **, WTF::AtomString **))(*(_QWORD *)v40 + 168))(v40, v150, a3, &v149, &v142);
  }
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v142, v36);
  v42 = v149;
  v149 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v41);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = v150[0];
  v150[0] = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v41);
    else
      *(_DWORD *)v43 -= 2;
  }
  WebCore::mimeTypeFromContentType((WebCore *)&v149, a3);
  v45 = v149;
  if (!v149)
    goto LABEL_48;
  if (*((_DWORD *)v149 + 1))
  {
    *(_DWORD *)v149 += 2;
    v142 = v45;
    if ((WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)1> [43]>::contains<WTF::String>((const char ***)WebCore::MIMETypeRegistry::isSupportedImageMIMEType(WTF::String const&)::supportedImageMIMETypeSet, (uint64_t *)&v142) & 1) != 0)
    {
      v66 = 1;
    }
    {
      if (WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes)
        v66 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes, (WTF::ASCIICaseInsensitiveHash *)&v142) != 0;
      else
        v66 = 0;
    }
    else
    {
      v66 = 0;
      WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes = 0;
    }
    v67 = v142;
    v142 = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 2)
        WTF::StringImpl::destroy(v67, v44);
      else
        *(_DWORD *)v67 -= 2;
    }
    v68 = v149;
    v149 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
      {
        WTF::StringImpl::destroy(v68, v44);
        if (v66)
          goto LABEL_94;
      }
      else
      {
        *(_DWORD *)v68 -= 2;
        if (v66)
        {
LABEL_94:
          WebCore::HTMLImageElement::create((WebCore::HTMLImageElement *)v11, (uint64_t *)&v147);
          v69 = v147;
          v70 = *(_QWORD *)a2;
          v71 = atomic_load((unsigned int *)v70);
          if (v71 == 1)
          {
            WebCore::FragmentedSharedBuffer::takeData((WTF *)v70, &v142);
            goto LABEL_96;
          }
          v142 = 0;
          v143 = 0;
          v109 = *(_QWORD *)(v70 + 48);
          if (!v109)
          {
LABEL_202:
            v111 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v111 = off_1E3406E88;
            *((_QWORD *)v111 + 1) = &v142;
            v150[0] = v111;
            WebCore::FragmentedSharedBuffer::forEachSegment(v70, v150);
            v112 = v150[0];
            v150[0] = 0;
            if (v112)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v112 + 8))(v112);
LABEL_96:
            v72 = (WebCore::ScriptExecutionContext *)bmalloc::api::isoAllocate();
            v73 = WebCore::Blob::Blob((uint64_t)v72, (WebCore::ScriptExecutionContext *)(v11 + 192), (uint64_t)&v142, a3);
            WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v73 + 24));
            WebCore::DOMURL::createPublicURL((WebCore::ActiveDOMObject **)(v11 + 192), v72, &v145);
            v74 = v145;
            v145 = 0;
            if (v74)
            {
              v149 = v74;
              if ((*((_BYTE *)v74 + 16) & 0x10) == 0)
              {
                WTF::AtomStringImpl::addSlowCase();
                v76 = v149;
                v74 = v150[0];
                v149 = 0;
                v150[0] = 0;
                if (v76)
                {
                  if (*(_DWORD *)v76 == 2)
                    WTF::StringImpl::destroy(v76, v75);
                  else
                    *(_DWORD *)v76 -= 2;
                }
              }
            }
            v146 = v74;
            v77 = *((_QWORD *)v69 + 13);
            if (v77
              && ((v78 = *(_DWORD *)(v77 + 4), (v78 & 1) != 0)
                ? (v79 = *(uint64_t **)(v77 + 40), v80 = *(_DWORD *)(v77 + 52))
                : (v79 = (uint64_t *)(v77 + 32), v80 = v78 >> 5),
                  v80))
            {
              v82 = 0;
              while (1)
              {
                v83 = *v79;
                if (*v79 == WebCore::HTMLNames::srcAttr
                  || *(_QWORD *)(v83 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
                  && *(_QWORD *)(v83 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
                {
                  break;
                }
                ++v82;
                v79 += 2;
                if (v80 == v82)
                  goto LABEL_134;
              }
            }
            else
            {
LABEL_134:
              v82 = 0xFFFFFFFFLL;
            }
            WebCore::Element::setAttributeInternal(v69, v82, (WebCore::TreeScope *)&WebCore::HTMLNames::srcAttr, &v146, 0);
            v85 = v146;
            v146 = 0;
            if (v85)
            {
              if (*(_DWORD *)v85 == 2)
                WTF::StringImpl::destroy(v85, v84);
              else
                *(_DWORD *)v85 -= 2;
            }
            if (*((_DWORD *)v72 + 4) == 1)
              (*(void (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)v72 + 8))(v72);
            else
              --*((_DWORD *)v72 + 4);
            v86 = v142;
            if (v142)
            {
              v142 = 0;
              LODWORD(v143) = 0;
              WTF::fastFree(v86, v84);
            }
            v87 = v147;
            v88 = WebCore::AttachmentAssociatedElement::setAttachmentElement((uint64_t)v147 + 112, &v148);
            if (v17)
            {
              WTF::AtomString::number(v88, v16);
              v89 = *((_QWORD *)v87 + 13);
              if (v89
                && ((v90 = *(_DWORD *)(v89 + 4), (v90 & 1) != 0)
                  ? (v91 = *(uint64_t **)(v89 + 40), v92 = *(_DWORD *)(v89 + 52))
                  : (v91 = (uint64_t *)(v89 + 32), v92 = v90 >> 5),
                    v92))
              {
                v93 = 0;
                while (1)
                {
                  v94 = *v91;
                  if (*v91 == WebCore::HTMLNames::widthAttr
                    || *(_QWORD *)(v94 + 24) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 24)
                    && *(_QWORD *)(v94 + 32) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 32))
                  {
                    break;
                  }
                  ++v93;
                  v91 += 2;
                  if (v92 == v93)
                    goto LABEL_155;
                }
              }
              else
              {
LABEL_155:
                v93 = 0xFFFFFFFFLL;
              }
              WebCore::Element::setAttributeInternal(v87, v93, (WebCore::TreeScope *)&WebCore::HTMLNames::widthAttr, &v142, 0);
              v88 = v142;
              v142 = 0;
              if (v88)
              {
                if (*(_DWORD *)v88 == 2)
                {
                  v88 = (WTF::AtomString *)WTF::StringImpl::destroy(v88, v95);
                  if (v19)
                  {
LABEL_160:
                    WTF::AtomString::number(v88, v18);
                    v96 = *((_QWORD *)v87 + 13);
                    if (v96
                      && ((v97 = *(_DWORD *)(v96 + 4), (v97 & 1) != 0)
                        ? (v98 = *(uint64_t **)(v96 + 40), v99 = *(_DWORD *)(v96 + 52))
                        : (v98 = (uint64_t *)(v96 + 32), v99 = v97 >> 5),
                          v99))
                    {
                      v100 = 0;
                      while (1)
                      {
                        v101 = *v98;
                        if (*v98 == WebCore::HTMLNames::heightAttr
                          || *(_QWORD *)(v101 + 24) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 24)
                          && *(_QWORD *)(v101 + 32) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 32))
                        {
                          break;
                        }
                        ++v100;
                        v98 += 2;
                        if (v99 == v100)
                          goto LABEL_172;
                      }
                    }
                    else
                    {
LABEL_172:
                      v100 = 0xFFFFFFFFLL;
                    }
                    WebCore::Element::setAttributeInternal(v87, v100, (WebCore::TreeScope *)&WebCore::HTMLNames::heightAttr, &v142, 0);
                    v103 = v142;
                    v142 = 0;
                    if (v103)
                    {
                      if (*(_DWORD *)v103 == 2)
                        WTF::StringImpl::destroy(v103, v102);
                      else
                        *(_DWORD *)v103 -= 2;
                    }
                  }
LABEL_176:
                  WebCore::ContainerNode::appendChild((uint64_t)v141, v87, (uint64_t)&v142);
                  if (v144)
                  {
                    v104 = v143;
                    v143 = 0;
                    if (v104)
                    {
                      if (*(_DWORD *)v104 == 2)
                        WTF::StringImpl::destroy(v104, v63);
                      else
                        *(_DWORD *)v104 -= 2;
                    }
                  }
                  if (*((_DWORD *)v87 + 6) == 2)
                  {
                    if ((*((_WORD *)v87 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v87, v63);
                  }
                  else
                  {
                    *((_DWORD *)v87 + 6) -= 2;
                  }
                  goto LABEL_77;
                }
                *(_DWORD *)v88 -= 2;
              }
            }
            if (v19)
              goto LABEL_160;
            goto LABEL_176;
          }
          if (!HIDWORD(v109))
          {
            v110 = (WTF::AtomString *)WTF::fastMalloc(*(WTF **)(v70 + 48));
            LODWORD(v143) = v109;
            v142 = v110;
            goto LABEL_202;
          }
          __break(0xC471u);
LABEL_258:
          JUMPOUT(0x194B8C820);
        }
      }
    }
    else if (v66)
    {
      goto LABEL_94;
    }
  }
  else
  {
    v149 = 0;
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v44);
    else
      *(_DWORD *)v45 -= 2;
  }
LABEL_48:
  v46 = v148;
  v142 = *(WTF::AtomString **)(*(_QWORD *)a2 + 48);
  LOBYTE(v143) = 1;
  v47 = *a3;
  if (*a3)
  {
    if ((*((_BYTE *)v47 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v47 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v47, v44);
      v47 = v149;
    }
  }
  v150[0] = v47;
  WTF::AtomStringImpl::add();
  v147 = v149;
  WebCore::HTMLAttachmentElement::updateAttributes(v46, (uint64_t)&v142, v150, &v147);
  v49 = v147;
  v147 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v48);
    else
      *(_DWORD *)v49 -= 2;
  }
  v50 = v150[0];
  v150[0] = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v48);
    else
      *(_DWORD *)v50 -= 2;
  }
LABEL_73:
  WebCore::ContainerNode::appendChild((uint64_t)v141, v148, (uint64_t)&v142);
  if (v144)
  {
    v64 = v143;
    v143 = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
        WTF::StringImpl::destroy(v64, v63);
      else
        *(_DWORD *)v64 -= 2;
    }
  }
LABEL_77:
  v65 = v148;
  v148 = 0;
  if (v65)
  {
    if (*((_DWORD *)v65 + 6) == 2)
    {
      if ((*((_WORD *)v65 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v65, v63);
    }
    else
    {
      *((_DWORD *)v65 + 6) -= 2;
    }
  }
  WebCore::WebContentReader::addFragment(a1, &v141);
  if (v141)
  {
    if (*((_DWORD *)v141 + 6) == 2)
    {
      if ((*((_WORD *)v141 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v141, a2);
    }
    else
    {
      *((_DWORD *)v141 + 6) -= 2;
    }
  }
LABEL_225:
  if (*(_QWORD *)(a1 + 64))
    v129 = WTF::RefPtr<WebCore::DocumentFragment,WTF::RawPtrTraits<WebCore::DocumentFragment>,WTF::DefaultRefDerefTraits<WebCore::DocumentFragment>>::unspecifiedBoolTypeInstance;
  else
    v129 = 0;
  v15 = v129 != 0;
LABEL_229:
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  do
  {
    v130 = __ldaxr(v9);
    v131 = v130 - 1;
  }
  while (__stlxr(v131, v9));
  if (!v131)
  {
    atomic_store(1u, v9);
    v137 = (WTF::AtomString *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v137 = off_1E31FE290;
    *((_QWORD *)v137 + 1) = v9;
    v142 = v137;
    WTF::ensureOnMainThread();
    v138 = v142;
    v142 = 0;
    if (v138)
      (*(void (**)(WTF::AtomString *))(*(_QWORD *)v138 + 8))(v138);
  }
  return v15;
}

void sub_194B8C834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WebCore::Node *a18, WTF *a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF::StringImpl *a24,WTF::StringImpl *a25)
{
  if (a19)
    (*(void (**)(WTF *))(*(_QWORD *)a19 + 8))(a19);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::WebContentReader::readFilePath(uint64_t a1, void *a2, uint64_t a3, WTF **a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  unsigned int v19;
  double v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::Node *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const WTF::String *v29;
  uint64_t v30;
  WTF::String *v31;
  uint64_t v32;
  _BOOL4 v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::AtomString *v38;
  WTF::StringImpl *v39;
  WTF::AtomString *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  WTF::StringImpl *v53;
  WTF::AtomString *v54;
  char v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WebCore::Document *v58;
  uint64_t v59;
  WebCore::Node *v60;
  WTF::AtomString *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  _BOOL4 v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t *v75;
  unsigned int v76;
  WebCore::Node *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t *v80;
  unsigned int v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WebCore::Node *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WebCore::Node *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WebCore::ScriptExecutionContext *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::AtomString *v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t *v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t *v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  WebCore::Document *v119;
  WebCore::Editor *v120;
  void *v121;
  WebCore::Editor *v122;
  uint64_t v123;
  void *v124;
  unsigned int *v125;
  WebCore::Editor *v126;
  WebCore::Editor *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  _BYTE v131[8];
  WTF::StringImpl *v132;
  char v133;
  WTF::AtomString *v134;
  char v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WebCore::ScriptExecutionContext *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  char v143;
  WTF::StringImpl *v144;
  WebCore::Node *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147[2];

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v9 = (unsigned int *)(v8 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v11 = 0;
    if (!v8)
      return v11;
    goto LABEL_5;
  }
  v11 = *(_QWORD *)(v8 + 296);
  if (v11)
  {
    *(_DWORD *)(v11 + 24) += 2;
    if (!*(_QWORD *)(a1 + 64))
    {
      v15 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v15 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v15 + 24) = 0xB00400000002;
      *(_QWORD *)(v15 + 32) = 0;
      *(_QWORD *)(v15 + 40) = v11 + 96;
      *(_OWORD *)(v15 + 48) = 0u;
      *(_OWORD *)(v15 + 64) = 0u;
      ++*(_DWORD *)(v11 + 3324);
      *(_QWORD *)(v15 + 80) = 0;
      *(_QWORD *)(v15 + 88) = 0;
      *(_QWORD *)v15 = off_1E33A31A0;
      v16 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v15;
      if (v16)
      {
        if (*(_DWORD *)(v16 + 24) == 2)
        {
          if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v16, a2);
        }
        else
        {
          *(_DWORD *)(v16 + 24) -= 2;
        }
      }
    }
    {
      if (byte_1ECE90A59)
      {
        v17 = *(_QWORD *)(a1 + 64);
        v18 = *(double *)a3;
        v19 = *(unsigned __int8 *)(a3 + 8);
        v20 = *(double *)(a3 + 16);
        v21 = *(unsigned __int8 *)(a3 + 24);
        v22 = *(_QWORD *)(v8 + 296);
        *(_DWORD *)(v22 + 24) += 2;
        v23 = bmalloc::api::isoAllocate();
        v24 = (WebCore::Node *)v23;
        *(_OWORD *)(v23 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v23 + 24) = 0x101C00000002;
        *(_QWORD *)(v23 + 32) = 0;
        *(_QWORD *)(v23 + 40) = v22 + 96;
        *(_OWORD *)(v23 + 48) = 0u;
        *(_OWORD *)(v23 + 64) = 0u;
        ++*(_DWORD *)(v22 + 3324);
        *(_QWORD *)(v23 + 80) = 0;
        *(_QWORD *)(v23 + 88) = 0;
        v25 = WebCore::HTMLNames::attachmentTag;
        if (WebCore::HTMLNames::attachmentTag)
          ++*(_DWORD *)WebCore::HTMLNames::attachmentTag;
        *(_QWORD *)(v23 + 96) = v25;
        *(_QWORD *)(v23 + 104) = 0;
        *(_QWORD *)v23 = off_1E33B4248;
        *(_BYTE *)(v23 + 112) = 0;
        *(_OWORD *)(v23 + 136) = 0uLL;
        *(_OWORD *)(v23 + 152) = 0uLL;
        *(_OWORD *)(v23 + 168) = 0uLL;
        *(_OWORD *)(v23 + 184) = 0uLL;
        *(_OWORD *)(v23 + 200) = 0uLL;
        *(_OWORD *)(v23 + 216) = 0uLL;
        *(_OWORD *)(v23 + 232) = 0uLL;
        *(_OWORD *)(v23 + 248) = 0uLL;
        *(_OWORD *)(v23 + 120) = 0uLL;
        *(_OWORD *)(v23 + 264) = 0uLL;
        *(_BYTE *)(v23 + 280) = 1;
        v145 = (WebCore::Node *)v23;
        if ((*(_QWORD *)(*(_QWORD *)(v22 + 680) + 704) & 0x100000000000) != 0)
        {
          *(_BYTE *)(v23 + 112) = 1;
          WebCore::Element::ensureUserAgentShadowRoot((WebCore::Element *)v23);
        }
        v26 = *(_QWORD *)(*(_QWORD *)(v8 + 296) + 3056);
        if (!v26)
        {
          v130 = __PAIR64__(v19, v21);
          v129 = v8 + 8;
          v119 = *(WebCore::Document **)(v8 + 296);
          v120 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
          WebCore::Editor::Editor(v120, v119);
          v122 = (WebCore::Editor *)*((_QWORD *)v119 + 382);
          *((_QWORD *)v119 + 382) = v120;
          if (v122)
          {
            WebCore::Editor::~Editor(v122, v121);
            if (*(_DWORD *)v123)
            {
              *(_QWORD *)(v123 + 496) = 0;
              *(_OWORD *)(v123 + 464) = 0u;
              *(_OWORD *)(v123 + 480) = 0u;
              *(_OWORD *)(v123 + 432) = 0u;
              *(_OWORD *)(v123 + 448) = 0u;
              *(_OWORD *)(v123 + 400) = 0u;
              *(_OWORD *)(v123 + 416) = 0u;
              *(_OWORD *)(v123 + 368) = 0u;
              *(_OWORD *)(v123 + 384) = 0u;
              *(_OWORD *)(v123 + 336) = 0u;
              *(_OWORD *)(v123 + 352) = 0u;
              *(_OWORD *)(v123 + 304) = 0u;
              *(_OWORD *)(v123 + 320) = 0u;
              *(_OWORD *)(v123 + 272) = 0u;
              *(_OWORD *)(v123 + 288) = 0u;
              *(_OWORD *)(v123 + 240) = 0u;
              *(_OWORD *)(v123 + 256) = 0u;
              *(_OWORD *)(v123 + 208) = 0u;
              *(_OWORD *)(v123 + 224) = 0u;
              *(_OWORD *)(v123 + 176) = 0u;
              *(_OWORD *)(v123 + 192) = 0u;
              *(_OWORD *)(v123 + 144) = 0u;
              *(_OWORD *)(v123 + 160) = 0u;
              *(_OWORD *)(v123 + 112) = 0u;
              *(_OWORD *)(v123 + 128) = 0u;
              *(_OWORD *)(v123 + 80) = 0u;
              *(_OWORD *)(v123 + 96) = 0u;
              *(_OWORD *)(v123 + 48) = 0u;
              *(_OWORD *)(v123 + 64) = 0u;
              *(_OWORD *)(v123 + 16) = 0u;
              *(_OWORD *)(v123 + 32) = 0u;
              *(_OWORD *)v123 = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v123, v124);
            }
          }
          v26 = *((_QWORD *)v119 + 382);
          v9 = (unsigned int *)(v8 + 8);
          v19 = HIDWORD(v130);
        }
        v27 = *(_QWORD *)(v26 + 8);
        if (v27)
        {
          v28 = *(_QWORD *)(v27 + 8);
          if (v28)
          {
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 224))(v28) & 1) != 0)
            {
              HIDWORD(v130) = v19;
              v30 = WTF::FileSystemImpl::fileTypeFollowingSymlinks((WTF::FileSystemImpl *)a2, v29);
              v32 = v30 & 0xFF00000000;
              v33 = (_DWORD)v30 == 1 && (v30 & 0xFF00000000) != 0;
              if (!*a4 || !*((_DWORD *)*a4 + 1))
              {
                v144 = 0;
                goto LABEL_29;
              }
              WebCore::mimeTypeFromContentType((WebCore *)&v134, a4);
              v53 = v134;
              if (v134 && (v54 = v134, *((_DWORD *)v134 + 1)) || (v54 = *a4) != 0)
                *(_DWORD *)v54 += 2;
              v144 = v54;
              v134 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                {
                  WTF::StringImpl::destroy(v53, v34);
                  v54 = v144;
                  if (!v144)
                    goto LABEL_29;
                  goto LABEL_70;
                }
                *(_DWORD *)v53 -= 2;
              }
              if (!v54)
                goto LABEL_29;
LABEL_70:
              if (*((_DWORD *)v54 + 1))
                goto LABEL_76;
LABEL_29:
              if (v33)
              {
                MEMORY[0x19AEA5508](&v142, objc_msgSend((id)*MEMORY[0x1E0CEC4B8], "identifier"));
                v35 = v142;
                v142 = 0;
                v36 = v144;
                v144 = v35;
                if (v36)
                {
                  v37 = *(_DWORD *)v36 - 2;
                  if (*(_DWORD *)v36 == 2)
                  {
                    WTF::StringImpl::destroy(v36, v34);
                    v36 = v142;
                    v142 = 0;
                    if (!v36)
                      goto LABEL_33;
                    v37 = *(_DWORD *)v36 - 2;
                    if (*(_DWORD *)v36 == 2)
                    {
                      WTF::StringImpl::destroy(v36, v34);
                      goto LABEL_33;
                    }
                  }
                  *(_DWORD *)v36 = v37;
                }
LABEL_33:
                LOBYTE(v142) = 0;
                v143 = 0;
                goto LABEL_84;
              }
              v142 = 0;
              v147[0] = 0;
              v134 = 0;
              WebCore::File::computeNameAndContentType((WebCore::File *)a2, &v134, &v142, v147, v31);
              v45 = v134;
              v134 = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, v34);
                else
                  *(_DWORD *)v45 -= 2;
              }
              v46 = v142;
              v142 = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, v34);
                else
                  *(_DWORD *)v46 -= 2;
              }
              v47 = v147[0];
              v147[0] = 0;
              v48 = v144;
              v144 = v47;
              if (!v48)
              {
LABEL_58:
                if (!v47 || !*((_DWORD *)v47 + 1))
                {
                  MEMORY[0x19AEA5508](&v142, objc_msgSend((id)*MEMORY[0x1E0CEC4A0], "identifier", v129, v130));
                  v50 = v142;
                  v142 = 0;
                  v51 = v144;
                  v144 = v50;
                  if (v51)
                  {
                    v52 = *(_DWORD *)v51 - 2;
                    if (*(_DWORD *)v51 != 2)
                    {
LABEL_61:
                      *(_DWORD *)v51 = v52;
                      goto LABEL_76;
                    }
                    WTF::StringImpl::destroy(v51, v34);
                    v51 = v142;
                    v142 = 0;
                    if (v51)
                    {
                      v52 = *(_DWORD *)v51 - 2;
                      if (*(_DWORD *)v51 != 2)
                        goto LABEL_61;
                      WTF::StringImpl::destroy(v51, v34);
                    }
                  }
                }
LABEL_76:
                LOBYTE(v142) = 0;
                v143 = 0;
                if (v32)
                  v55 = v33;
                else
                  v55 = 1;
                if ((v55 & 1) == 0)
                {
                  v56 = WTF::FileSystemImpl::fileSize((WTF::FileSystemImpl *)a2, v34);
                  if ((_BYTE)v34)
                    v57 = (WTF::StringImpl *)v56;
                  else
                    v57 = 0;
                  v142 = v57;
                  v143 = 1;
                }
LABEL_84:
                v58 = *(WebCore::Document **)(v8 + 296);
                v59 = *((_QWORD *)v58 + 382);
                if (!v59)
                {
                  v125 = v9;
                  v126 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
                  WebCore::Editor::Editor(v126, v58);
                  v127 = (WebCore::Editor *)*((_QWORD *)v58 + 382);
                  *((_QWORD *)v58 + 382) = v126;
                  if (v127)
                  {
                    WebCore::Editor::~Editor(v127, v34);
                    if (*(_DWORD *)v128)
                    {
                      *(_QWORD *)(v128 + 496) = 0;
                      *(_OWORD *)(v128 + 464) = 0u;
                      *(_OWORD *)(v128 + 480) = 0u;
                      *(_OWORD *)(v128 + 432) = 0u;
                      *(_OWORD *)(v128 + 448) = 0u;
                      *(_OWORD *)(v128 + 400) = 0u;
                      *(_OWORD *)(v128 + 416) = 0u;
                      *(_OWORD *)(v128 + 368) = 0u;
                      *(_OWORD *)(v128 + 384) = 0u;
                      *(_OWORD *)(v128 + 336) = 0u;
                      *(_OWORD *)(v128 + 352) = 0u;
                      *(_OWORD *)(v128 + 304) = 0u;
                      *(_OWORD *)(v128 + 320) = 0u;
                      *(_OWORD *)(v128 + 272) = 0u;
                      *(_OWORD *)(v128 + 288) = 0u;
                      *(_OWORD *)(v128 + 240) = 0u;
                      *(_OWORD *)(v128 + 256) = 0u;
                      *(_OWORD *)(v128 + 208) = 0u;
                      *(_OWORD *)(v128 + 224) = 0u;
                      *(_OWORD *)(v128 + 176) = 0u;
                      *(_OWORD *)(v128 + 192) = 0u;
                      *(_OWORD *)(v128 + 144) = 0u;
                      *(_OWORD *)(v128 + 160) = 0u;
                      *(_OWORD *)(v128 + 112) = 0u;
                      *(_OWORD *)(v128 + 128) = 0u;
                      *(_OWORD *)(v128 + 80) = 0u;
                      *(_OWORD *)(v128 + 96) = 0u;
                      *(_OWORD *)(v128 + 48) = 0u;
                      *(_OWORD *)(v128 + 64) = 0u;
                      *(_OWORD *)(v128 + 16) = 0u;
                      *(_OWORD *)(v128 + 32) = 0u;
                      *(_OWORD *)v128 = 0u;
                    }
                    else
                    {
                      WTF::fastFree((WTF *)v128, v34);
                    }
                  }
                  v59 = *((_QWORD *)v58 + 382);
                  v9 = v125;
                }
                v60 = v145;
                v61 = (WTF::AtomString *)*((_QWORD *)v145 + 16);
                if (v61 && *((_DWORD *)v61 + 1))
                  goto LABEL_91;
                WTF::createVersion4UUIDString(v61);
                v61 = v134;
                v134 = 0;
                v62 = (WTF::StringImpl *)*((_QWORD *)v60 + 16);
                *((_QWORD *)v60 + 16) = v61;
                if (v62)
                {
                  if (*(_DWORD *)v62 == 2)
                  {
                    WTF::StringImpl::destroy(v62, v34);
                    v82 = v134;
                    v134 = 0;
                    if (v82)
                    {
                      if (*(_DWORD *)v82 == 2)
                        WTF::StringImpl::destroy(v82, v34);
                      else
                        *(_DWORD *)v82 -= 2;
                    }
                  }
                  else
                  {
                    *(_DWORD *)v62 -= 2;
                  }
                  v61 = (WTF::AtomString *)*((_QWORD *)v60 + 16);
                }
                if (v61)
LABEL_91:
                  *(_DWORD *)v61 += 2;
                v134 = v61;
                v63 = *(_QWORD *)(v59 + 8);
                if (v63)
                {
                  v64 = *(_QWORD *)(v63 + 8);
                  if (v64)
                  {
                    (*(void (**)(uint64_t, WTF::AtomString **, WTF::StringImpl **, void *))(*(_QWORD *)v64 + 176))(v64, &v134, &v144, a2);
                    v61 = v134;
                  }
                }
                v134 = 0;
                if (v61)
                {
                  if (*(_DWORD *)v61 == 2)
                  {
                    WTF::StringImpl::destroy(v61, v34);
                    if (v32)
                      goto LABEL_99;
                    goto LABEL_121;
                  }
                  *(_DWORD *)v61 -= 2;
                }
                if (v32)
                {
LABEL_99:
                  WebCore::mimeTypeFromContentType((WebCore *)v147, &v144);
                  v66 = v147[0];
                  if (!v147[0])
                    goto LABEL_140;
                  if (*((_DWORD *)v147[0] + 1))
                  {
                    *(_DWORD *)v147[0] += 2;
                    v134 = v66;
                    if ((WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)1> [43]>::contains<WTF::String>((const char ***)WebCore::MIMETypeRegistry::isSupportedImageMIMEType(WTF::String const&)::supportedImageMIMETypeSet, (uint64_t *)&v134) & 1) != 0)
                    {
                      v67 = 1;
                    }
                    {
                      if (WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes)
                        v67 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes, (WTF::ASCIICaseInsensitiveHash *)&v134) != 0;
                      else
                        v67 = 0;
                    }
                    else
                    {
                      v67 = 0;
                      WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes = 0;
                    }
                    v68 = v134;
                    v134 = 0;
                    if (v68)
                    {
                      if (*(_DWORD *)v68 == 2)
                        WTF::StringImpl::destroy(v68, v65);
                      else
                        *(_DWORD *)v68 -= 2;
                    }
                    v69 = v147[0];
                    v147[0] = 0;
                    if (v69)
                    {
                      if (*(_DWORD *)v69 == 2)
                      {
                        WTF::StringImpl::destroy(v69, v65);
                        if (v67)
                          goto LABEL_109;
                      }
                      else
                      {
                        *(_DWORD *)v69 -= 2;
                        if (v67)
                        {
LABEL_109:
                          WebCore::HTMLImageElement::create((WebCore::HTMLImageElement *)v22, (uint64_t *)&v141);
                          v44 = v141;
                          v136 = 0;
                          v137 = 0;
                          LOBYTE(v134) = 0;
                          v135 = 0;
                          WebCore::File::create(&v136, v22 + 192, (WTF::StringImpl **)a2, &v137, (WTF::String *)&v134, (uint64_t *)&v138);
                          WebCore::DOMURL::createPublicURL((WebCore::ActiveDOMObject **)(v22 + 192), v138, &v139);
                          v70 = v139;
                          if (v139)
                          {
                            v146 = v139;
                            if ((*((_BYTE *)v139 + 16) & 0x10) == 0)
                            {
                              WTF::AtomStringImpl::addSlowCase();
                              v72 = v146;
                              v70 = v147[0];
                              v146 = 0;
                              v147[0] = 0;
                              if (v72)
                              {
                                if (*(_DWORD *)v72 == 2)
                                  WTF::StringImpl::destroy(v72, v71);
                                else
                                  *(_DWORD *)v72 -= 2;
                              }
                            }
                          }
                          v140 = v70;
                          v73 = *((_QWORD *)v44 + 13);
                          if (v73
                            && ((v74 = *(_DWORD *)(v73 + 4), (v74 & 1) != 0)
                              ? (v75 = *(uint64_t **)(v73 + 40), v76 = *(_DWORD *)(v73 + 52))
                              : (v75 = (uint64_t *)(v73 + 32), v76 = v74 >> 5),
                                v76))
                          {
                            v98 = 0;
                            while (1)
                            {
                              v99 = *v75;
                              if (*v75 == WebCore::HTMLNames::srcAttr
                                || *(_QWORD *)(v99 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
                                && *(_QWORD *)(v99 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
                              {
                                break;
                              }
                              ++v98;
                              v75 += 2;
                              if (v76 == v98)
                                goto LABEL_222;
                            }
                          }
                          else
                          {
LABEL_222:
                            v98 = 0xFFFFFFFFLL;
                          }
                          WebCore::Element::setAttributeInternal(v44, v98, (WebCore::TreeScope *)&WebCore::HTMLNames::srcAttr, &v140, 0);
                          v101 = v140;
                          v140 = 0;
                          if (v101)
                          {
                            if (*(_DWORD *)v101 == 2)
                              WTF::StringImpl::destroy(v101, v100);
                            else
                              *(_DWORD *)v101 -= 2;
                          }
                          v102 = v138;
                          v138 = 0;
                          v139 = 0;
                          if (v102)
                          {
                            if (*((_DWORD *)v102 + 4) == 1)
                              (*(void (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)v102 + 8))(v102);
                            else
                              --*((_DWORD *)v102 + 4);
                          }
                          v103 = v136;
                          v136 = 0;
                          if (v103)
                          {
                            if (*(_DWORD *)v103 == 2)
                              WTF::StringImpl::destroy(v103, v100);
                            else
                              *(_DWORD *)v103 -= 2;
                          }
                          v104 = v137;
                          v137 = 0;
                          if (v104)
                          {
                            if (*(_DWORD *)v104 == 2)
                              WTF::StringImpl::destroy(v104, v100);
                            else
                              *(_DWORD *)v104 -= 2;
                          }
                          v105 = WebCore::AttachmentAssociatedElement::setAttachmentElement((uint64_t)v44 + 112, &v145);
                          if (HIDWORD(v130))
                          {
                            WTF::AtomString::number(v105, v18);
                            v106 = *((_QWORD *)v44 + 13);
                            if (v106
                              && ((v107 = *(_DWORD *)(v106 + 4), (v107 & 1) != 0)
                                ? (v108 = *(uint64_t **)(v106 + 40), v109 = *(_DWORD *)(v106 + 52))
                                : (v108 = (uint64_t *)(v106 + 32), v109 = v107 >> 5),
                                  v109))
                            {
                              v110 = 0;
                              while (1)
                              {
                                v111 = *v108;
                                if (*v108 == WebCore::HTMLNames::widthAttr
                                  || *(_QWORD *)(v111 + 24) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 24)
                                  && *(_QWORD *)(v111 + 32) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 32))
                                {
                                  break;
                                }
                                ++v110;
                                v108 += 2;
                                if (v109 == v110)
                                  goto LABEL_248;
                              }
                            }
                            else
                            {
LABEL_248:
                              v110 = 0xFFFFFFFFLL;
                            }
                            WebCore::Element::setAttributeInternal(v44, v110, (WebCore::TreeScope *)&WebCore::HTMLNames::widthAttr, &v134, 0);
                            v105 = v134;
                            v134 = 0;
                            if (v105)
                            {
                              if (*(_DWORD *)v105 == 2)
                              {
                                v105 = (WTF::AtomString *)WTF::StringImpl::destroy(v105, v39);
                                if (v21)
                                {
LABEL_253:
                                  WTF::AtomString::number(v105, v20);
                                  v112 = *((_QWORD *)v44 + 13);
                                  if (v112
                                    && ((v113 = *(_DWORD *)(v112 + 4), (v113 & 1) != 0)
                                      ? (v114 = *(uint64_t **)(v112 + 40), v115 = *(_DWORD *)(v112 + 52))
                                      : (v114 = (uint64_t *)(v112 + 32), v115 = v113 >> 5),
                                        v115))
                                  {
                                    v116 = 0;
                                    while (1)
                                    {
                                      v117 = *v114;
                                      if (*v114 == WebCore::HTMLNames::heightAttr
                                        || *(_QWORD *)(v117 + 24) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 24)
                                        && *(_QWORD *)(v117 + 32) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 32))
                                      {
                                        break;
                                      }
                                      ++v116;
                                      v114 += 2;
                                      if (v115 == v116)
                                        goto LABEL_265;
                                    }
                                  }
                                  else
                                  {
LABEL_265:
                                    v116 = 0xFFFFFFFFLL;
                                  }
                                  WebCore::Element::setAttributeInternal(v44, v116, (WebCore::TreeScope *)&WebCore::HTMLNames::heightAttr, &v134, 0);
                                  v118 = v134;
                                  v134 = 0;
                                  if (v118)
                                  {
                                    if (*(_DWORD *)v118 == 2)
                                      WTF::StringImpl::destroy(v118, v39);
                                    else
                                      *(_DWORD *)v118 -= 2;
                                  }
                                }
LABEL_156:
                                v93 = v144;
                                v144 = 0;
                                if (v93)
                                {
                                  if (*(_DWORD *)v93 == 2)
                                    WTF::StringImpl::destroy(v93, v39);
                                  else
                                    *(_DWORD *)v93 -= 2;
                                }
                                v94 = v145;
                                v145 = 0;
                                if (v94)
                                {
                                  if (*((_DWORD *)v94 + 6) == 2)
                                  {
                                    if ((*((_WORD *)v94 + 15) & 0x400) == 0)
                                      WebCore::Node::removedLastRef(v94, v39);
                                  }
                                  else
                                  {
                                    *((_DWORD *)v94 + 6) -= 2;
                                  }
                                }
LABEL_162:
                                if (*(_DWORD *)(v22 + 24) == 2)
                                {
                                  if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
                                    WebCore::Node::removedLastRef((WebCore::Node *)v22, v39);
                                }
                                else
                                {
                                  *(_DWORD *)(v22 + 24) -= 2;
                                }
                                WebCore::ContainerNode::appendChild(v17, v44, (uint64_t)v131);
                                if (v133)
                                {
                                  v95 = v132;
                                  v132 = 0;
                                  if (v95)
                                  {
                                    if (*(_DWORD *)v95 == 2)
                                      WTF::StringImpl::destroy(v95, (WTF::StringImpl *)a2);
                                    else
                                      *(_DWORD *)v95 -= 2;
                                  }
                                }
                                if (*((_DWORD *)v44 + 6) == 2)
                                {
                                  if ((*((_WORD *)v44 + 15) & 0x400) == 0)
                                    WebCore::Node::removedLastRef(v44, a2);
                                }
                                else
                                {
                                  *((_DWORD *)v44 + 6) -= 2;
                                }
                                goto LABEL_170;
                              }
                              *(_DWORD *)v105 -= 2;
                            }
                          }
                          if (v21)
                            goto LABEL_253;
                          goto LABEL_156;
                        }
                      }
                    }
                    else if (v67)
                    {
                      goto LABEL_109;
                    }
LABEL_140:
                    v85 = v144;
                    v86 = v145;
                    if (v144)
                    {
                      if ((*((_BYTE *)v144 + 16) & 0x10) != 0)
                      {
                        *(_DWORD *)v144 += 2;
                      }
                      else
                      {
                        WTF::AtomStringImpl::addSlowCase(v144, v65);
                        v85 = v134;
                      }
                    }
                    v146 = v85;
                    WTF::FileSystemImpl::pathFileName((WTF::FileSystemImpl *)a2, v65);
                    v87 = v140;
                    v140 = 0;
                    if (v87)
                    {
                      v147[0] = v87;
                      if ((*((_BYTE *)v87 + 16) & 0x10) == 0)
                      {
                        WTF::AtomStringImpl::addSlowCase();
                        v89 = v147[0];
                        v87 = v134;
                        v134 = 0;
                        v147[0] = 0;
                        if (v89)
                        {
                          if (*(_DWORD *)v89 == 2)
                            WTF::StringImpl::destroy(v89, v88);
                          else
                            *(_DWORD *)v89 -= 2;
                        }
                      }
                    }
                    v141 = v87;
                    WebCore::HTMLAttachmentElement::updateAttributes(v86, (uint64_t)&v142, &v146, &v141);
                    v90 = v141;
                    v141 = 0;
                    if (v90)
                    {
                      if (*(_DWORD *)v90 == 2)
                        WTF::StringImpl::destroy(v90, v39);
                      else
                        *(_DWORD *)v90 -= 2;
                    }
                    v91 = v140;
                    v140 = 0;
                    if (v91)
                    {
                      if (*(_DWORD *)v91 == 2)
                        WTF::StringImpl::destroy(v91, v39);
                      else
                        *(_DWORD *)v91 -= 2;
                    }
                    v92 = v146;
                    v146 = 0;
                    if (v92)
                    {
                      if (*(_DWORD *)v92 == 2)
                        WTF::StringImpl::destroy(v92, v39);
                      else
                        *(_DWORD *)v92 -= 2;
                    }
                    v44 = v145;
                    v145 = 0;
                    goto LABEL_156;
                  }
                  v147[0] = 0;
LABEL_138:
                  if (*(_DWORD *)v66 == 2)
                    WTF::StringImpl::destroy(v66, v65);
                  else
                    *(_DWORD *)v66 -= 2;
                  goto LABEL_140;
                }
LABEL_121:
                v77 = v145;
                WTF::AtomString::number(0);
                v78 = *((_QWORD *)v77 + 13);
                if (v78
                  && ((v79 = *(_DWORD *)(v78 + 4), (v79 & 1) != 0)
                    ? (v80 = *(uint64_t **)(v78 + 40), v81 = *(_DWORD *)(v78 + 52))
                    : (v80 = (uint64_t *)(v78 + 32), v81 = v79 >> 5),
                      v81))
                {
                  v83 = 0;
                  while (1)
                  {
                    v84 = *v80;
                    if (*v80 == WebCore::HTMLNames::progressAttr
                      || *(_QWORD *)(v84 + 24) == *(_QWORD *)(WebCore::HTMLNames::progressAttr + 24)
                      && *(_QWORD *)(v84 + 32) == *(_QWORD *)(WebCore::HTMLNames::progressAttr + 32))
                    {
                      break;
                    }
                    ++v83;
                    v80 += 2;
                    if (v81 == v83)
                      goto LABEL_136;
                  }
                }
                else
                {
LABEL_136:
                  v83 = 0xFFFFFFFFLL;
                }
                WebCore::Element::setAttributeInternal(v77, v83, (WebCore::TreeScope *)&WebCore::HTMLNames::progressAttr, &v134, 0);
                v66 = v134;
                v134 = 0;
                if (!v66)
                  goto LABEL_140;
                goto LABEL_138;
              }
              v49 = *(_DWORD *)v48 - 2;
              if (*(_DWORD *)v48 == 2)
              {
                WTF::StringImpl::destroy(v48, v34);
                v48 = v147[0];
                v147[0] = 0;
                if (!v48)
                  goto LABEL_57;
                v49 = *(_DWORD *)v48 - 2;
                if (*(_DWORD *)v48 == 2)
                {
                  WTF::StringImpl::destroy(v48, v34);
                  goto LABEL_57;
                }
              }
              *(_DWORD *)v48 = v49;
LABEL_57:
              v47 = v144;
              goto LABEL_58;
            }
            v24 = v145;
          }
        }
        v146 = 0;
        v144 = 0;
        LOBYTE(v142) = 0;
        v143 = 0;
        WebCore::File::create(&v144, v22 + 192, (WTF::StringImpl **)a2, &v146, (WTF::String *)&v142, (uint64_t *)v147);
        v38 = v147[0];
        v147[0] = 0;
        v134 = v38;
        WebCore::HTMLAttachmentElement::setFile(v24, (WTF::StringImpl *)&v134, 1);
        v40 = v134;
        v134 = 0;
        if (v40)
        {
          if (*((_DWORD *)v40 + 4) == 1)
            (*(void (**)(WTF::AtomString *))(*(_QWORD *)v40 + 8))(v40);
          else
            --*((_DWORD *)v40 + 4);
        }
        v41 = v147[0];
        v147[0] = 0;
        if (v41)
        {
          if (*((_DWORD *)v41 + 4) == 1)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v41 + 8))(v41);
          else
            --*((_DWORD *)v41 + 4);
        }
        v42 = v144;
        v144 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v39);
          else
            *(_DWORD *)v42 -= 2;
        }
        v43 = v146;
        v146 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
            WTF::StringImpl::destroy(v43, v39);
          else
            *(_DWORD *)v43 -= 2;
        }
        v44 = v145;
        goto LABEL_162;
      }
    }
    else
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
    }
LABEL_170:
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
    v11 = 1;
    goto LABEL_5;
  }
  do
  {
LABEL_5:
    v12 = __ldaxr(v9);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v9));
  if (!v13)
  {
    atomic_store(1u, v9);
    v96 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v96 = off_1E31FE290;
    *((_QWORD *)v96 + 1) = v9;
    v142 = v96;
    WTF::ensureOnMainThread();
    v97 = v142;
    v142 = 0;
    if (v97)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v97 + 8))(v97);
  }
  return v11;
}

void sub_194B8DB20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,WTF::StringImpl *a24,WebCore::Node *a25)
{
  if (a22)
    (*(void (**)(uint64_t))(*(_QWORD *)a22 + 8))(a22);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::WebContentReader::readURL(WebCore::WebContentReader *this, const WTF::URL *a2, const WTF::String *a3)
{
  uint64_t v3;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  WebCore::Document *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  BOOL PlainText;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  __CFString *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  WebCore::Editor *v57;
  void *v58;
  WebCore::Editor *v59;
  uint64_t v60;
  void *v61;
  __int128 v62;
  _BYTE v63[8];
  WTF::StringImpl *v64;
  char v65;
  _BYTE v66[8];
  WTF::StringImpl *v67;
  char v68;
  _BYTE v69[8];
  WTF::StringImpl *v70;
  char v71;
  WTF::StringImpl *v72;
  __int128 v73;
  __int128 v74;
  WTF::StringImpl *v75;

  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
    return 0;
  v8 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  v9 = (unsigned int *)(v8 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = *(WebCore::Document **)(v8 + 296);
  v12 = *((_QWORD *)v11 + 382);
  if (!v12)
  {
    v57 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v57, v11);
    v59 = (WebCore::Editor *)*((_QWORD *)v11 + 382);
    *((_QWORD *)v11 + 382) = v57;
    if (v59)
    {
      WebCore::Editor::~Editor(v59, v58);
      if (*(_DWORD *)v60)
      {
        *(_QWORD *)(v60 + 496) = 0;
        *(_OWORD *)(v60 + 464) = 0u;
        *(_OWORD *)(v60 + 480) = 0u;
        *(_OWORD *)(v60 + 432) = 0u;
        *(_OWORD *)(v60 + 448) = 0u;
        *(_OWORD *)(v60 + 400) = 0u;
        *(_OWORD *)(v60 + 416) = 0u;
        *(_OWORD *)(v60 + 368) = 0u;
        *(_OWORD *)(v60 + 384) = 0u;
        *(_OWORD *)(v60 + 336) = 0u;
        *(_OWORD *)(v60 + 352) = 0u;
        *(_OWORD *)(v60 + 304) = 0u;
        *(_OWORD *)(v60 + 320) = 0u;
        *(_OWORD *)(v60 + 272) = 0u;
        *(_OWORD *)(v60 + 288) = 0u;
        *(_OWORD *)(v60 + 240) = 0u;
        *(_OWORD *)(v60 + 256) = 0u;
        *(_OWORD *)(v60 + 208) = 0u;
        *(_OWORD *)(v60 + 224) = 0u;
        *(_OWORD *)(v60 + 176) = 0u;
        *(_OWORD *)(v60 + 192) = 0u;
        *(_OWORD *)(v60 + 144) = 0u;
        *(_OWORD *)(v60 + 160) = 0u;
        *(_OWORD *)(v60 + 112) = 0u;
        *(_OWORD *)(v60 + 128) = 0u;
        *(_OWORD *)(v60 + 80) = 0u;
        *(_OWORD *)(v60 + 96) = 0u;
        *(_OWORD *)(v60 + 48) = 0u;
        *(_OWORD *)(v60 + 64) = 0u;
        *(_OWORD *)(v60 + 16) = 0u;
        *(_OWORD *)(v60 + 32) = 0u;
        *(_OWORD *)v60 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v60, v61);
      }
    }
    v12 = *((_QWORD *)v11 + 382);
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v12 + 8) + 8) + 536))(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 8)) & 1) == 0)
  {
    v13 = objc_msgSend((id)WTF::URL::operator NSURL *(), "absoluteString");
    MEMORY[0x19AEA5508](&v72, v13);
    PlainText = WebCore::WebContentReader::readPlainText(this, (const WTF::String *)&v72);
    v16 = v72;
    v72 = 0;
    if (!v16)
      goto LABEL_12;
    if (*(_DWORD *)v16 != 2)
    {
      *(_DWORD *)v16 -= 2;
LABEL_12:
      if (!PlainText)
        goto LABEL_13;
LABEL_74:
      v3 = 1;
      goto LABEL_75;
    }
    WTF::StringImpl::destroy(v16, v14);
    if (PlainText)
      goto LABEL_74;
  }
LABEL_13:
  if ((objc_msgSend((id)WTF::URL::operator NSURL *(), "isFileURL") & 1) == 0)
  {
    v18 = *(_QWORD *)(v8 + 24);
    if (v18 && (v19 = *(_QWORD *)(v18 + 8)) != 0)
    {
      WebCore::ChromeClient::applyLinkDecorationFiltering(*(_QWORD *)(*(_QWORD *)(v19 + 48) + 16), (uint64_t)&v72);
      v20 = v72;
    }
    else
    {
      v20 = *(WTF::StringImpl **)a2;
      if (*(_QWORD *)a2)
        *(_DWORD *)v20 += 2;
      v73 = *(_OWORD *)((char *)a2 + 8);
      v74 = *(_OWORD *)((char *)a2 + 24);
    }
    if (v20)
    {
      v21 = *(_DWORD *)v20;
      *(_DWORD *)v20 += 2;
      v72 = 0;
      if (v21)
        *(_DWORD *)v20 = v21;
      else
        WTF::StringImpl::destroy(v20, v17);
    }
    v22 = *(_QWORD *)(v8 + 296);
    *(_DWORD *)(v22 + 24) += 2;
    v23 = bmalloc::api::isoAllocate();
    v25 = v23;
    *(_OWORD *)(v23 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v23 + 24) = 0x101C00000002;
    *(_QWORD *)(v23 + 32) = 0;
    v26 = v22 + 96;
    *(_QWORD *)(v23 + 40) = v22 + 96;
    *(_OWORD *)(v23 + 48) = 0u;
    *(_OWORD *)(v23 + 64) = 0u;
    ++*(_DWORD *)(v22 + 3324);
    *(_QWORD *)(v23 + 80) = 0;
    *(_QWORD *)(v23 + 88) = 0;
    v27 = WebCore::HTMLNames::aTag;
    if (WebCore::HTMLNames::aTag)
      ++*(_DWORD *)WebCore::HTMLNames::aTag;
    *(_QWORD *)(v23 + 96) = v27;
    *(_QWORD *)(v23 + 104) = 0;
    *(_QWORD *)v23 = off_1E33B3458;
    *(_QWORD *)(v23 + 112) = &unk_1E33B3958;
    *(_WORD *)(v23 + 120) = 0;
    *(_BYTE *)(v23 + 122) = 0;
    *(_DWORD *)(v23 + 124) = -1;
    *(_QWORD *)(v23 + 128) = 0;
    if (v20)
    {
      if ((*((_BYTE *)v20 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v20 += 2;
        v72 = v20;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(v20, v24);
        v51 = *(_QWORD *)(v25 + 104);
        v72 = v75;
        if (v51)
        {
          v52 = *(_DWORD *)(v51 + 4);
          if ((v52 & 1) != 0)
          {
            v53 = *(uint64_t **)(v51 + 40);
            v54 = *(_DWORD *)(v51 + 52);
          }
          else
          {
            v53 = (uint64_t *)(v51 + 32);
            v54 = v52 >> 5;
          }
          if (v54)
          {
            v55 = 0;
            v28 = 0xFFFFFFFFLL;
            while (1)
            {
              v56 = *v53;
              if (*v53 == WebCore::HTMLNames::hrefAttr
                || *(_QWORD *)(v56 + 24) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 24)
                && *(_QWORD *)(v56 + 32) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 32))
              {
                break;
              }
              ++v55;
              v53 += 2;
              if (v54 == v55)
                goto LABEL_30;
            }
            v28 = v55;
LABEL_30:
            WebCore::Element::setAttributeInternal((WTF::StringImpl *)v25, v28, (WebCore::TreeScope *)&WebCore::HTMLNames::hrefAttr, &v72, 0);
            v30 = v72;
            v72 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v29);
              else
                *(_DWORD *)v30 -= 2;
            }
            if (*(_QWORD *)a3)
            {
              if (!v20 && !*(_DWORD *)(*(_QWORD *)a3 + 4))
                goto LABEL_35;
            }
            else if (!v20)
            {
LABEL_35:
              v31 = &stru_1E3487BC0;
              goto LABEL_39;
            }
            v31 = (__CFString *)WTF::StringImpl::operator NSString *();
LABEL_39:
            MEMORY[0x19AEA5508](&v72, -[__CFString precomposedStringWithCanonicalMapping](v31, "precomposedStringWithCanonicalMapping", 0, 0x2000000000000));
            v32 = bmalloc::api::isoAllocate();
            v33 = v32;
            *(_OWORD *)(v32 + 8) = v62;
            *(_QWORD *)(v32 + 24) = 0x300300000002;
            *(_QWORD *)(v32 + 32) = 0;
            *(_QWORD *)(v32 + 40) = v26;
            *(_OWORD *)(v32 + 48) = 0u;
            *(_OWORD *)(v32 + 64) = 0u;
            ++*(_DWORD *)(v22 + 3324);
            v34 = v72;
            if (v72 || (v34 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
              *(_DWORD *)v34 += 2;
            *(_QWORD *)(v32 + 80) = v34;
            *(_QWORD *)v32 = off_1E33A8078;
            WebCore::ContainerNode::appendChild(v25, (WebCore::Node *)v32, (uint64_t)v69);
            if (v71)
            {
              v36 = v70;
              v70 = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, v35);
                else
                  *(_DWORD *)v36 -= 2;
              }
            }
            if (*(_DWORD *)(v33 + 24) == 2)
            {
              if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v33, v35);
            }
            else
            {
              *(_DWORD *)(v33 + 24) -= 2;
            }
            v37 = v72;
            v72 = 0;
            if (v37)
            {
              if (*(_DWORD *)v37 == 2)
                WTF::StringImpl::destroy(v37, v35);
              else
                *(_DWORD *)v37 -= 2;
            }
            v38 = bmalloc::api::isoAllocate();
            *(_OWORD *)(v38 + 8) = v62;
            *(_QWORD *)(v38 + 24) = 0xB00400000002;
            *(_QWORD *)(v38 + 32) = 0;
            *(_QWORD *)(v38 + 40) = v26;
            *(_OWORD *)(v38 + 48) = 0u;
            *(_OWORD *)(v38 + 64) = 0u;
            ++*(_DWORD *)(v22 + 3324);
            *(_QWORD *)(v38 + 80) = 0;
            *(_QWORD *)(v38 + 88) = 0;
            *(_QWORD *)v38 = off_1E33A31A0;
            v72 = (WTF::StringImpl *)v38;
            if (*((_QWORD *)this + 8))
            {
              v39 = bmalloc::api::isoAllocate();
              v40 = v39;
              *(_OWORD *)(v39 + 8) = v62;
              *(_QWORD *)(v39 + 24) = 0x101C00000002;
              *(_QWORD *)(v39 + 32) = 0;
              *(_QWORD *)(v39 + 40) = v26;
              *(_OWORD *)(v39 + 48) = 0u;
              *(_OWORD *)(v39 + 64) = 0u;
              ++*(_DWORD *)(v22 + 3324);
              *(_QWORD *)(v39 + 80) = 0;
              *(_QWORD *)(v39 + 88) = 0;
              v41 = WebCore::HTMLNames::brTag;
              if (WebCore::HTMLNames::brTag)
                ++*(_DWORD *)WebCore::HTMLNames::brTag;
              *(_QWORD *)(v39 + 96) = v41;
              *(_QWORD *)(v39 + 104) = 0;
              *(_QWORD *)v39 = off_1E33B4C28;
              WebCore::ContainerNode::appendChild(v38, (WebCore::Node *)v39, (uint64_t)v66);
              if (v68)
              {
                v43 = v67;
                v67 = 0;
                if (v43)
                {
                  if (*(_DWORD *)v43 == 2)
                    WTF::StringImpl::destroy(v43, v42);
                  else
                    *(_DWORD *)v43 -= 2;
                }
              }
              if (*(_DWORD *)(v40 + 24) == 2)
              {
                if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v40, v42);
              }
              else
              {
                *(_DWORD *)(v40 + 24) -= 2;
              }
            }
            WebCore::ContainerNode::appendChild(v38, (WebCore::Node *)v25, (uint64_t)v63);
            if (v65)
            {
              v45 = v64;
              v64 = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, v44);
                else
                  *(_DWORD *)v45 -= 2;
              }
            }
            WebCore::WebContentReader::addFragment((uint64_t)this, &v72);
            if (v72)
            {
              if (*((_DWORD *)v72 + 6) == 2)
              {
                if ((*((_WORD *)v72 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v72, v46);
              }
              else
              {
                *((_DWORD *)v72 + 6) -= 2;
              }
            }
            if (*(_DWORD *)(v25 + 24) == 2)
            {
              if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v25, v46);
            }
            else
            {
              *(_DWORD *)(v25 + 24) -= 2;
            }
            if (*(_DWORD *)(v22 + 24) == 2)
            {
              if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v22, v46);
            }
            else
            {
              *(_DWORD *)(v22 + 24) -= 2;
            }
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v46);
              else
                *(_DWORD *)v20 -= 2;
            }
            goto LABEL_74;
          }
        }
      }
    }
    else
    {
      v72 = 0;
    }
    v28 = 0xFFFFFFFFLL;
    goto LABEL_30;
  }
  v3 = 0;
  do
  {
LABEL_75:
    v47 = __ldaxr(v9);
    v48 = v47 - 1;
  }
  while (__stlxr(v48, v9));
  if (!v48)
  {
    atomic_store(1u, v9);
    v49 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v49 = off_1E31FE290;
    *((_QWORD *)v49 + 1) = v9;
    v72 = v49;
    WTF::ensureOnMainThread();
    v50 = v72;
    v72 = 0;
    if (v50)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v50 + 8))(v50);
  }
  return v3;
}

void sub_194B8E5C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21)
{
  if (a21)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)a21 + 8))(a21);
  _Unwind_Resume(exception_object);
}

BOOL WebCore::WebContentReader::readDataBuffer(uint64_t a1, uint64_t a2, WTF **a3, WTF::StringImpl **a4, uint64_t a5)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WebCore::Document *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  WebCore::Document *v31;
  uint64_t v32;
  WebCore::Node *v33;
  WTF::AtomString *v34;
  WTF::AtomString *v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::AtomString *v43;
  WTF::StringImpl *v44;
  WebCore::Node *v45;
  void *v46;
  WTF::StringImpl *v47;
  WebCore::Node *v48;
  unint64_t v49;
  WTF::AtomString *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  _QWORD *v57;
  _QWORD *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  WebCore::Node *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WebCore::Node *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  unsigned int v68;
  unsigned int v69;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  _BOOL4 v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  WTF::AtomString *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  _QWORD *v85;
  _QWORD *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  uint64_t *v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF *v100;
  WTF::AtomString *v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t *v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t *v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  WTF::AtomString *v115;
  WTF::AtomString *v116;
  WebCore::Editor *v117;
  void *v118;
  WebCore::Editor *v119;
  uint64_t v120;
  void *v121;
  WebCore::Editor *v122;
  int v123;
  int v124;
  char v125[8];
  WTF::StringImpl *v126;
  char v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WebCore::Node *v130;
  WTF::AtomString *v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WebCore::Node *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;

  if (!*(_QWORD *)(a2 + 48))
    return 0;
  {
    v14 = 0;
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
    return v14;
  }
  if (!byte_1ECE90A59)
    return 0;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v11 = (unsigned int *)(v10 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = *(_QWORD *)(v10 + 296);
  v14 = v13 != 0;
  if (v13)
  {
    *(_DWORD *)(v13 + 24) += 2;
    v15 = *(_QWORD *)(a1 + 64);
    if (v15)
      goto LABEL_12;
    v15 = bmalloc::api::isoAllocate();
    *(_OWORD *)(v15 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v15 + 24) = 0xB00400000002;
    *(_QWORD *)(v15 + 32) = 0;
    *(_QWORD *)(v15 + 40) = v13 + 96;
    *(_OWORD *)(v15 + 48) = 0u;
    *(_OWORD *)(v15 + 64) = 0u;
    ++*(_DWORD *)(v13 + 3324);
    *(_QWORD *)(v15 + 80) = 0;
    *(_QWORD *)(v15 + 88) = 0;
    *(_QWORD *)v15 = off_1E33A31A0;
    v17 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v15;
    if (!v17)
      goto LABEL_12;
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v17, v16);
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
    v15 = *(_QWORD *)(a1 + 64);
    if (v15)
    {
LABEL_12:
      v18 = 0;
      *(_DWORD *)(v15 + 24) += 2;
    }
    else
    {
      v18 = 1;
    }
    v19 = *(double *)a5;
    v20 = *(double *)(a5 + 16);
    v123 = *(unsigned __int8 *)(a5 + 8);
    v124 = *(unsigned __int8 *)(a5 + 24);
    v21 = *(_QWORD *)(v10 + 296);
    *(_DWORD *)(v21 + 24) += 2;
    v22 = bmalloc::api::isoAllocate();
    *(_OWORD *)(v22 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v22 + 24) = 0x101C00000002;
    *(_QWORD *)(v22 + 32) = 0;
    *(_QWORD *)(v22 + 40) = v21 + 96;
    *(_OWORD *)(v22 + 48) = 0u;
    *(_OWORD *)(v22 + 64) = 0u;
    ++*(_DWORD *)(v21 + 3324);
    *(_QWORD *)(v22 + 80) = 0;
    *(_QWORD *)(v22 + 88) = 0;
    v23 = WebCore::HTMLNames::attachmentTag;
    if (WebCore::HTMLNames::attachmentTag)
      ++*(_DWORD *)WebCore::HTMLNames::attachmentTag;
    *(_QWORD *)(v22 + 96) = v23;
    *(_QWORD *)(v22 + 104) = 0;
    *(_QWORD *)v22 = off_1E33B4248;
    *(_BYTE *)(v22 + 112) = 0;
    *(_OWORD *)(v22 + 136) = 0uLL;
    *(_OWORD *)(v22 + 152) = 0uLL;
    *(_OWORD *)(v22 + 168) = 0uLL;
    *(_OWORD *)(v22 + 184) = 0uLL;
    *(_OWORD *)(v22 + 200) = 0uLL;
    *(_OWORD *)(v22 + 216) = 0uLL;
    *(_OWORD *)(v22 + 232) = 0uLL;
    *(_OWORD *)(v22 + 248) = 0uLL;
    *(_OWORD *)(v22 + 120) = 0uLL;
    *(_OWORD *)(v22 + 264) = 0uLL;
    *(_BYTE *)(v22 + 280) = 1;
    v135 = (WebCore::Node *)v22;
    if ((*(_QWORD *)(*(_QWORD *)(v21 + 680) + 704) & 0x100000000000) != 0)
    {
      *(_BYTE *)(v22 + 112) = 1;
      WebCore::Element::ensureUserAgentShadowRoot((WebCore::Element *)v22);
    }
    if (*a3 && *((_DWORD *)*a3 + 1))
    {
      WebCore::mimeTypeFromContentType((WebCore *)&v137, a3);
      v72 = v137;
      if (v137 && (v73 = v137, *((_DWORD *)v137 + 1)) || (v73 = *a3) != 0)
        *(_DWORD *)v73 += 2;
      v134 = v73;
      v137 = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 2)
          WTF::StringImpl::destroy(v72, v71);
        else
          *(_DWORD *)v72 -= 2;
      }
    }
    else
    {
      v134 = 0;
    }
    v133 = 0;
    v24 = *a4;
    if (*a4 && *((_DWORD *)v24 + 1))
    {
      *(_DWORD *)v24 += 2;
      v133 = v24;
    }
    else
    {
      WTF::AtomStringImpl::add();
      v133 = v137;
    }
    v25 = *(WebCore::Document **)(v10 + 296);
    v26 = *((_QWORD *)v25 + 382);
    if (!v26)
    {
      v117 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v117, v25);
      v119 = (WebCore::Editor *)*((_QWORD *)v25 + 382);
      *((_QWORD *)v25 + 382) = v117;
      if (v119)
      {
        WebCore::Editor::~Editor(v119, v118);
        if (*(_DWORD *)v120)
        {
          *(_QWORD *)(v120 + 496) = 0;
          *(_OWORD *)(v120 + 464) = 0u;
          *(_OWORD *)(v120 + 480) = 0u;
          *(_OWORD *)(v120 + 432) = 0u;
          *(_OWORD *)(v120 + 448) = 0u;
          *(_OWORD *)(v120 + 400) = 0u;
          *(_OWORD *)(v120 + 416) = 0u;
          *(_OWORD *)(v120 + 368) = 0u;
          *(_OWORD *)(v120 + 384) = 0u;
          *(_OWORD *)(v120 + 336) = 0u;
          *(_OWORD *)(v120 + 352) = 0u;
          *(_OWORD *)(v120 + 304) = 0u;
          *(_OWORD *)(v120 + 320) = 0u;
          *(_OWORD *)(v120 + 272) = 0u;
          *(_OWORD *)(v120 + 288) = 0u;
          *(_OWORD *)(v120 + 240) = 0u;
          *(_OWORD *)(v120 + 256) = 0u;
          *(_OWORD *)(v120 + 208) = 0u;
          *(_OWORD *)(v120 + 224) = 0u;
          *(_OWORD *)(v120 + 176) = 0u;
          *(_OWORD *)(v120 + 192) = 0u;
          *(_OWORD *)(v120 + 144) = 0u;
          *(_OWORD *)(v120 + 160) = 0u;
          *(_OWORD *)(v120 + 112) = 0u;
          *(_OWORD *)(v120 + 128) = 0u;
          *(_OWORD *)(v120 + 80) = 0u;
          *(_OWORD *)(v120 + 96) = 0u;
          *(_OWORD *)(v120 + 48) = 0u;
          *(_OWORD *)(v120 + 64) = 0u;
          *(_OWORD *)(v120 + 16) = 0u;
          *(_OWORD *)(v120 + 32) = 0u;
          *(_OWORD *)v120 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v120, v121);
        }
      }
      v26 = *((_QWORD *)v25 + 382);
    }
    v27 = *(_QWORD *)(v26 + 8);
    if (!v27
      || (v28 = *(_QWORD *)(v27 + 8)) == 0
      || (v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 224))(v28), (v29 & 1) == 0))
    {
      v48 = v135;
      v131 = 0;
      v132 = 0;
      v49 = *(_QWORD *)(a2 + 48);
      if (v49)
      {
        if (HIDWORD(v49))
        {
          __break(0xC471u);
          JUMPOUT(0x194B8F600);
        }
        v50 = (WTF::AtomString *)WTF::fastMalloc(*(WTF **)(a2 + 48));
        LODWORD(v132) = v49;
        v131 = v50;
      }
      v51 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v51 = off_1E3406E88;
      *((_QWORD *)v51 + 1) = &v131;
      v137 = v51;
      WebCore::FragmentedSharedBuffer::forEachSegment(a2, &v137);
      v52 = v137;
      v137 = 0;
      if (v52)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v52 + 8))(v52);
      v53 = (_DWORD *)bmalloc::api::isoAllocate();
      v54 = WebCore::Blob::Blob((uint64_t)v53, (WebCore::ScriptExecutionContext *)(v21 + 192), (uint64_t)&v131, &v134);
      WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v54 + 24));
      v55 = bmalloc::api::isoAllocate();
      v57 = (_QWORD *)WebCore::Blob::Blob(v55, v56, (WebCore::ScriptExecutionContext *)(v21 + 192), (uint64_t)v53);
      *v57 = off_1E33AE6D8;
      v57[3] = &unk_1E33AE718;
      v58 = v57 + 3;
      *(_QWORD *)(v55 + 128) = 0;
      *(_QWORD *)(v55 + 136) = 0;
      v59 = v133;
      if (v133)
        *(_DWORD *)v133 += 2;
      *(_QWORD *)(v55 + 144) = v59;
      *(_BYTE *)(v55 + 152) = 0;
      *(_BYTE *)(v55 + 160) = 0;
      *(_BYTE *)(v55 + 168) = 0;
      *(_BYTE *)(v55 + 176) = 0;
      *(_WORD *)(v55 + 184) = 0;
      WebCore::ActiveDOMObject::suspendIfNeeded(v58);
      v136 = (WTF::StringImpl *)v55;
      WebCore::HTMLAttachmentElement::setFile(v48, (WTF::StringImpl *)&v136, 0);
      v60 = v136;
      v136 = 0;
      if (v60)
      {
        if (*((_DWORD *)v60 + 4) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v60 + 8))(v60);
        else
          --*((_DWORD *)v60 + 4);
      }
      if (v53[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v53 + 8))(v53);
      else
        --v53[4];
      v61 = v131;
      if (v131)
      {
        v131 = 0;
        LODWORD(v132) = 0;
        WTF::fastFree(v61, v46);
      }
      goto LABEL_63;
    }
    v31 = *(WebCore::Document **)(v10 + 296);
    v32 = *((_QWORD *)v31 + 382);
    if (!v32)
    {
      v122 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v122, v31);
      v29 = *((_QWORD *)v31 + 382);
      *((_QWORD *)v31 + 382) = v122;
      if (v29)
      {
        WebCore::Editor::~Editor((WebCore::Editor *)v29, v30);
        if (*(_DWORD *)v29)
        {
          *(_QWORD *)(v29 + 496) = 0;
          *(_OWORD *)(v29 + 464) = 0u;
          *(_OWORD *)(v29 + 480) = 0u;
          *(_OWORD *)(v29 + 432) = 0u;
          *(_OWORD *)(v29 + 448) = 0u;
          *(_OWORD *)(v29 + 400) = 0u;
          *(_OWORD *)(v29 + 416) = 0u;
          *(_OWORD *)(v29 + 368) = 0u;
          *(_OWORD *)(v29 + 384) = 0u;
          *(_OWORD *)(v29 + 336) = 0u;
          *(_OWORD *)(v29 + 352) = 0u;
          *(_OWORD *)(v29 + 304) = 0u;
          *(_OWORD *)(v29 + 320) = 0u;
          *(_OWORD *)(v29 + 272) = 0u;
          *(_OWORD *)(v29 + 288) = 0u;
          *(_OWORD *)(v29 + 240) = 0u;
          *(_OWORD *)(v29 + 256) = 0u;
          *(_OWORD *)(v29 + 208) = 0u;
          *(_OWORD *)(v29 + 224) = 0u;
          *(_OWORD *)(v29 + 176) = 0u;
          *(_OWORD *)(v29 + 192) = 0u;
          *(_OWORD *)(v29 + 144) = 0u;
          *(_OWORD *)(v29 + 160) = 0u;
          *(_OWORD *)(v29 + 112) = 0u;
          *(_OWORD *)(v29 + 128) = 0u;
          *(_OWORD *)(v29 + 80) = 0u;
          *(_OWORD *)(v29 + 96) = 0u;
          *(_OWORD *)(v29 + 48) = 0u;
          *(_OWORD *)(v29 + 64) = 0u;
          *(_OWORD *)(v29 + 16) = 0u;
          *(_OWORD *)(v29 + 32) = 0u;
          *(_OWORD *)v29 = 0u;
        }
        else
        {
          v29 = WTF::fastFree((WTF *)v29, v30);
        }
      }
      v32 = *((_QWORD *)v31 + 382);
    }
    v33 = v135;
    v34 = (WTF::AtomString *)*((_QWORD *)v135 + 16);
    if (v34 && *((_DWORD *)v34 + 1))
      goto LABEL_32;
    WTF::createVersion4UUIDString((WTF *)v29);
    v34 = v131;
    v131 = 0;
    v35 = (WTF::AtomString *)*((_QWORD *)v135 + 16);
    *((_QWORD *)v135 + 16) = v34;
    if (!v35)
    {
LABEL_31:
      if (!v34)
      {
LABEL_33:
        v131 = v34;
        do
          v37 = __ldaxr((unsigned int *)a2);
        while (__stlxr(v37 + 1, (unsigned int *)a2));
        v137 = (WTF::StringImpl *)a2;
        v38 = *(_QWORD *)(v32 + 8);
        if (v38)
        {
          v39 = *(_QWORD *)(v38 + 8);
          if (v39)
            (*(void (**)(uint64_t, WTF::AtomString **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v39 + 168))(v39, &v131, &v134, &v133, &v137);
        }
        WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v137, v30);
        v41 = v131;
        v131 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, v40);
          else
            *(_DWORD *)v41 -= 2;
        }
        WebCore::mimeTypeFromContentType((WebCore *)&v137, &v134);
        v43 = v137;
        if (!v137)
          goto LABEL_42;
        if (*((_DWORD *)v137 + 1))
        {
          *(_DWORD *)v137 += 2;
          v131 = v43;
          if ((WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)1> [43]>::contains<WTF::String>((const char ***)WebCore::MIMETypeRegistry::isSupportedImageMIMEType(WTF::String const&)::supportedImageMIMETypeSet, (uint64_t *)&v131) & 1) != 0)
          {
            v74 = 1;
          }
          {
            if (WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes)
              v74 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes, (WTF::ASCIICaseInsensitiveHash *)&v131) != 0;
            else
              v74 = 0;
          }
          else
          {
            v74 = 0;
            WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes = 0;
          }
          v75 = v131;
          v131 = 0;
          if (v75)
          {
            if (*(_DWORD *)v75 == 2)
              WTF::StringImpl::destroy(v75, v42);
            else
              *(_DWORD *)v75 -= 2;
          }
          v76 = v137;
          v137 = 0;
          if (v76)
          {
            if (*(_DWORD *)v76 == 2)
            {
              WTF::StringImpl::destroy(v76, v42);
              if (v74)
                goto LABEL_109;
            }
            else
            {
              *(_DWORD *)v76 -= 2;
              if (v74)
              {
LABEL_109:
                WebCore::HTMLImageElement::create((WebCore::HTMLImageElement *)v21, (uint64_t *)&v130);
                v62 = v130;
                v131 = 0;
                v132 = 0;
                v77 = *(_QWORD *)(a2 + 48);
                if (v77)
                {
                  if (HIDWORD(v77))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x194B8F628);
                  }
                  v78 = (WTF::AtomString *)WTF::fastMalloc(*(WTF **)(a2 + 48));
                  LODWORD(v132) = v77;
                  v131 = v78;
                }
                v79 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v79 = off_1E3406E88;
                *((_QWORD *)v79 + 1) = &v131;
                v137 = v79;
                WebCore::FragmentedSharedBuffer::forEachSegment(a2, &v137);
                v80 = v137;
                v137 = 0;
                if (v80)
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v80 + 8))(v80);
                v81 = (_DWORD *)bmalloc::api::isoAllocate();
                v82 = WebCore::Blob::Blob((uint64_t)v81, (WebCore::ScriptExecutionContext *)(v21 + 192), (uint64_t)&v131, &v134);
                WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v82 + 24));
                v83 = bmalloc::api::isoAllocate();
                v85 = (_QWORD *)WebCore::Blob::Blob(v83, v84, (WebCore::ScriptExecutionContext *)(v21 + 192), (uint64_t)v81);
                *v85 = off_1E33AE6D8;
                v85[3] = &unk_1E33AE718;
                v86 = v85 + 3;
                *(_QWORD *)(v83 + 128) = 0;
                *(_QWORD *)(v83 + 136) = 0;
                v87 = v133;
                if (v133)
                  *(_DWORD *)v133 += 2;
                *(_QWORD *)(v83 + 144) = v87;
                *(_BYTE *)(v83 + 152) = 0;
                *(_BYTE *)(v83 + 160) = 0;
                *(_BYTE *)(v83 + 168) = 0;
                *(_BYTE *)(v83 + 176) = 0;
                *(_WORD *)(v83 + 184) = 0;
                WebCore::ActiveDOMObject::suspendIfNeeded(v86);
                WebCore::DOMURL::createPublicURL((WebCore::ActiveDOMObject **)(v21 + 192), (WebCore::ScriptExecutionContext *)v83, &v128);
                v88 = v128;
                v128 = 0;
                if (v88)
                {
                  v136 = v88;
                  if ((*((_BYTE *)v88 + 16) & 0x10) == 0)
                  {
                    WTF::AtomStringImpl::addSlowCase();
                    v90 = v136;
                    v88 = v137;
                    v137 = 0;
                    v136 = 0;
                    if (v90)
                    {
                      if (*(_DWORD *)v90 == 2)
                        WTF::StringImpl::destroy(v90, v89);
                      else
                        *(_DWORD *)v90 -= 2;
                    }
                  }
                }
                v129 = v88;
                v91 = *((_QWORD *)v62 + 13);
                if (v91)
                {
                  v92 = *(_DWORD *)(v91 + 4);
                  v93 = v123;
                  if ((v92 & 1) != 0)
                  {
                    v94 = *(uint64_t **)(v91 + 40);
                    v95 = *(_DWORD *)(v91 + 52);
                  }
                  else
                  {
                    v94 = (uint64_t *)(v91 + 32);
                    v95 = v92 >> 5;
                  }
                  if (v95)
                  {
                    v96 = 0;
                    while (1)
                    {
                      v97 = *v94;
                      if (*v94 == WebCore::HTMLNames::srcAttr
                        || *(_QWORD *)(v97 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
                        && *(_QWORD *)(v97 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
                      {
                        break;
                      }
                      ++v96;
                      v94 += 2;
                      if (v95 == v96)
                        goto LABEL_164;
                    }
                  }
                  else
                  {
LABEL_164:
                    v96 = 0xFFFFFFFFLL;
                  }
                }
                else
                {
                  v96 = 0xFFFFFFFFLL;
                  v93 = v123;
                }
                WebCore::Element::setAttributeInternal(v62, v96, (WebCore::TreeScope *)&WebCore::HTMLNames::srcAttr, &v129, 0);
                v99 = v129;
                v129 = 0;
                if (v99)
                {
                  if (*(_DWORD *)v99 == 2)
                    WTF::StringImpl::destroy(v99, v98);
                  else
                    *(_DWORD *)v99 -= 2;
                }
                if (*(_DWORD *)(v83 + 16) == 1)
                  (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
                else
                  --*(_DWORD *)(v83 + 16);
                if (v81[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v81 + 8))(v81);
                else
                  --v81[4];
                v100 = v131;
                if (v131)
                {
                  v131 = 0;
                  LODWORD(v132) = 0;
                  WTF::fastFree(v100, v98);
                }
                v101 = WebCore::AttachmentAssociatedElement::setAttachmentElement((uint64_t)v62 + 112, &v135);
                if (v93)
                {
                  WTF::AtomString::number(v101, v19);
                  v102 = *((_QWORD *)v62 + 13);
                  if (v102
                    && ((v103 = *(_DWORD *)(v102 + 4), (v103 & 1) != 0)
                      ? (v104 = *(uint64_t **)(v102 + 40), v105 = *(_DWORD *)(v102 + 52))
                      : (v104 = (uint64_t *)(v102 + 32), v105 = v103 >> 5),
                        v105))
                  {
                    v106 = 0;
                    while (1)
                    {
                      v107 = *v104;
                      if (*v104 == WebCore::HTMLNames::widthAttr
                        || *(_QWORD *)(v107 + 24) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 24)
                        && *(_QWORD *)(v107 + 32) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 32))
                      {
                        break;
                      }
                      ++v106;
                      v104 += 2;
                      if (v105 == v106)
                        goto LABEL_187;
                    }
                  }
                  else
                  {
LABEL_187:
                    v106 = 0xFFFFFFFFLL;
                  }
                  WebCore::Element::setAttributeInternal(v62, v106, (WebCore::TreeScope *)&WebCore::HTMLNames::widthAttr, &v131, 0);
                  v101 = v131;
                  v131 = 0;
                  if (v101)
                  {
                    if (*(_DWORD *)v101 == 2)
                      v101 = (WTF::AtomString *)WTF::StringImpl::destroy(v101, (WTF::StringImpl *)v46);
                    else
                      *(_DWORD *)v101 -= 2;
                  }
                }
                if (v124)
                {
                  WTF::AtomString::number(v101, v20);
                  v108 = *((_QWORD *)v62 + 13);
                  if (v108
                    && ((v109 = *(_DWORD *)(v108 + 4), (v109 & 1) != 0)
                      ? (v110 = *(uint64_t **)(v108 + 40), v111 = *(_DWORD *)(v108 + 52))
                      : (v110 = (uint64_t *)(v108 + 32), v111 = v109 >> 5),
                        v111))
                  {
                    v112 = 0;
                    while (1)
                    {
                      v113 = *v110;
                      if (*v110 == WebCore::HTMLNames::heightAttr
                        || *(_QWORD *)(v113 + 24) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 24)
                        && *(_QWORD *)(v113 + 32) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 32))
                      {
                        break;
                      }
                      ++v112;
                      v110 += 2;
                      if (v111 == v112)
                        goto LABEL_204;
                    }
                  }
                  else
                  {
LABEL_204:
                    v112 = 0xFFFFFFFFLL;
                  }
                  WebCore::Element::setAttributeInternal(v62, v112, (WebCore::TreeScope *)&WebCore::HTMLNames::heightAttr, &v131, 0);
                  v114 = v131;
                  v131 = 0;
                  if (v114)
                  {
                    if (*(_DWORD *)v114 == 2)
                      WTF::StringImpl::destroy(v114, (WTF::StringImpl *)v46);
                    else
                      *(_DWORD *)v114 -= 2;
                  }
                }
                goto LABEL_64;
              }
            }
          }
          else if (v74)
          {
            goto LABEL_109;
          }
        }
        else
        {
          v137 = 0;
          if (*(_DWORD *)v43 == 2)
            WTF::StringImpl::destroy(v43, v42);
          else
            *(_DWORD *)v43 -= 2;
        }
LABEL_42:
        v44 = v134;
        v45 = v135;
        v131 = *(WTF::AtomString **)(a2 + 48);
        LOBYTE(v132) = 1;
        if (v134)
        {
          if ((*((_BYTE *)v134 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v134 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase(v134, v42);
            v44 = v137;
          }
        }
        v136 = v44;
        WebCore::HTMLAttachmentElement::updateAttributes(v45, (uint64_t)&v131, &v136, &v133);
        v47 = v136;
        v136 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v46);
          else
            *(_DWORD *)v47 -= 2;
        }
LABEL_63:
        v62 = v135;
        v135 = 0;
LABEL_64:
        v63 = v133;
        v133 = 0;
        if (v63)
        {
          if (*(_DWORD *)v63 == 2)
            WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v46);
          else
            *(_DWORD *)v63 -= 2;
        }
        v64 = v134;
        v134 = 0;
        if (v64)
        {
          if (*(_DWORD *)v64 == 2)
            WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v46);
          else
            *(_DWORD *)v64 -= 2;
        }
        v65 = v135;
        v135 = 0;
        if (v65)
        {
          if (*((_DWORD *)v65 + 6) == 2)
          {
            if ((*((_WORD *)v65 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v65, v46);
          }
          else
          {
            *((_DWORD *)v65 + 6) -= 2;
          }
        }
        if (*(_DWORD *)(v21 + 24) == 2)
        {
          if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v21, v46);
        }
        else
        {
          *(_DWORD *)(v21 + 24) -= 2;
        }
        WebCore::ContainerNode::appendChild(v15, v62, (uint64_t)v125);
        if (v127)
        {
          v67 = v126;
          v126 = 0;
          if (v67)
          {
            if (*(_DWORD *)v67 == 2)
              WTF::StringImpl::destroy(v67, v66);
            else
              *(_DWORD *)v67 -= 2;
          }
        }
        if (*((_DWORD *)v62 + 6) == 2)
        {
          if ((*((_WORD *)v62 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v62, v66);
        }
        else
        {
          *((_DWORD *)v62 + 6) -= 2;
        }
        if ((v18 & 1) == 0)
        {
          if (*(_DWORD *)(v15 + 24) == 2)
          {
            if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v15, v66);
          }
          else
          {
            *(_DWORD *)(v15 + 24) -= 2;
          }
        }
        if (*(_DWORD *)(v13 + 24) == 2)
        {
          v14 = 1;
          if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v13, v66);
        }
        else
        {
          *(_DWORD *)(v13 + 24) -= 2;
          v14 = 1;
        }
        goto LABEL_86;
      }
LABEL_32:
      *(_DWORD *)v34 += 2;
      goto LABEL_33;
    }
    v36 = *(_DWORD *)v35 - 2;
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v30);
      v35 = v131;
      v131 = 0;
      if (!v35)
        goto LABEL_30;
      v36 = *(_DWORD *)v35 - 2;
      if (*(_DWORD *)v35 == 2)
      {
        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v30);
        goto LABEL_30;
      }
    }
    *(_DWORD *)v35 = v36;
LABEL_30:
    v34 = (WTF::AtomString *)*((_QWORD *)v33 + 16);
    goto LABEL_31;
  }
  do
  {
LABEL_86:
    v68 = __ldaxr(v11);
    v69 = v68 - 1;
  }
  while (__stlxr(v69, v11));
  if (!v69)
  {
    atomic_store(1u, v11);
    v115 = (WTF::AtomString *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v115 = off_1E31FE290;
    *((_QWORD *)v115 + 1) = v11;
    v131 = v115;
    WTF::ensureOnMainThread();
    v116 = v131;
    v131 = 0;
    if (v116)
      (*(void (**)(WTF::AtomString *))(*(_QWORD *)v116 + 8))(v116);
  }
  return v14;
}

void sub_194B8F634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, int a19, WTF::StringImpl *a20,WTF::StringImpl *a21,WebCore::Node *a22,WTF::StringImpl *a23)
{
  if (a18)
    (*(void (**)(WTF *))(*(_QWORD *)a18 + 8))(a18);
  _Unwind_Resume(exception_object);
}

uint64_t webCoreTextAttachmentMissingPlatformImage(void)
{
  if ((_MergedGlobals_112 & 1) == 0)
  {
    qword_1ECE81418 = 0;
    _MergedGlobals_112 = 1;
  }
  if (qword_1ECE81420 != -1)
    dispatch_once(&qword_1ECE81420, &__block_literal_global_35);
  return qword_1ECE81418;
}

void ___Z41webCoreTextAttachmentMissingPlatformImagev_block_invoke()
{
  PAL *v0;
  const void *v1;
  uint64_t v2;
  const void *v3;

  v0 = (PAL *)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.WebCore"));
  v1 = (const void *)objc_msgSend((id)PAL::getUIImageClass[0](v0), "imageNamed:inBundle:compatibleWithTraitCollection:", CFSTR("missingImage"), v0, 0);
  v2 = (uint64_t)v1;
  if (v1)
    CFRetain(v1);
  v3 = (const void *)qword_1ECE81418;
  qword_1ECE81418 = v2;
  if (v3)
    CFRelease(v3);
}

unsigned int *WebCore::Editor::setTextAlignmentForChangedBaseWritingDirection(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int *result;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD **v26;
  _DWORD *v27;
  WTF *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  WebCore::EditingStyle *v35;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  result = WebCore::EditingStyle::styleAtSelectionStart((unsigned int *)(*(_QWORD *)(v4 + 3064) + 56), 0, (uint64_t *)&v35);
  if (!v35)
    goto LABEL_68;
  v7 = *((_QWORD *)v35 + 1);
  if (v7)
  {
    v8 = WebCore::StyleProperties::propertyAsValueID(v7, (WTF::StringImpl *)0xF9);
    if ((v8 & 0xFF0000) != 0)
    {
      v9 = 259;
      switch((__int16)v8)
      {
        case 258:
        case 262:
          goto LABEL_10;
        case 259:
        case 263:
          goto LABEL_9;
        case 260:
        case 261:
          break;
        default:
          if ((unsigned __int16)v8 - 500 >= 2)
            break;
          if (a2 == 1)
          {
LABEL_9:
            v9 = 258;
          }
          else
          {
            if (a2 != 2)
              break;
            v9 = 259;
          }
LABEL_10:
          v10 = *(_QWORD *)(v4 + 1248);
          if (!v10)
            goto LABEL_26;
          v11 = *(_DWORD *)(v10 + 24);
          *(_DWORD *)(v10 + 24) = v11 + 4;
          v12 = *(_WORD *)(v10 + 28);
          if ((v12 & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
          {
            v16 = *(_DWORD *)(*(_QWORD *)(v10 + 240) + 12);
            v17 = v16 != 0x8000 && (v16 & 0x2A8C20) == 0;
            v15 = v10;
            if (!v17)
              goto LABEL_29;
          }
          else
          {
            v13 = v12 & 0x10;
            v14 = v11 + 2;
            if (v14)
            {
              *(_DWORD *)(v10 + 24) = v14;
            }
            else if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v10, v6);
              v13 = *(_WORD *)(v10 + 28) & 0x10;
            }
            if (!v13)
            {
LABEL_26:
              v18 = WTF::fastMalloc((WTF *)0x60);
              *(_QWORD *)v18 = 0x900000001;
              *(_QWORD *)(v18 + 8) = 0;
              *(_QWORD *)(v18 + 16) = v18 + 32;
              *(_QWORD *)(v18 + 24) = 4;
              WebCore::MutableStyleProperties::setProperty((WebCore::MutableStyleProperties *)v18, 249, v9, 0);
              WebCore::Editor::applyParagraphStyle((unsigned int *)a1, (void *)v18, 0x3Bu);
              if (*(_DWORD *)v18 != 1)
              {
                --*(_DWORD *)v18;
                if (!v10)
                  break;
                goto LABEL_63;
              }
              v24 = *(unsigned int *)(v18 + 28);
              if ((_DWORD)v24)
              {
                v25 = 16 * v24;
                v26 = (_DWORD **)(*(_QWORD *)(v18 + 16) + 8);
                do
                {
                  v27 = *v26;
                  *v26 = 0;
                  if (v27)
                  {
                    if (*v27 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, (WTF::StringImpl *)v6);
                    else
                      *v27 -= 2;
                  }
                  v26 += 2;
                  v25 -= 16;
                }
                while (v25);
              }
              v28 = *(WTF **)(v18 + 16);
              if ((WTF *)(v18 + 32) != v28 && v28 != 0)
              {
                *(_QWORD *)(v18 + 16) = 0;
                *(_DWORD *)(v18 + 24) = 0;
                WTF::fastFree(v28, v6);
              }
              v30 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)(v18 + 8) = 0;
              if (v30)
                (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
              WTF::fastFree((WTF *)v18, v6);
              if (!v10)
                break;
LABEL_63:
              if (*(_DWORD *)(v10 + 24) == 2)
              {
                if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v10, v6);
              }
              else
              {
                *(_DWORD *)(v10 + 24) -= 2;
              }
              break;
            }
            v15 = 0;
          }
          if (*(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24))
          {
            if (v15)
            {
              if (*(_DWORD *)(v15 + 24) == 2)
              {
                if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v15, v6);
              }
              else
              {
                *(_DWORD *)(v15 + 24) -= 2;
              }
            }
            goto LABEL_26;
          }
LABEL_29:
          if (a2)
          {
            v19 = WebCore::nameString(v9);
            v20 = *(_QWORD *)(v10 + 104);
            if (v20
              && ((v21 = *(_DWORD *)(v20 + 4), (v21 & 1) != 0)
                ? (v22 = *(uint64_t **)(v20 + 40), v23 = *(_DWORD *)(v20 + 52))
                : (v22 = (uint64_t *)(v20 + 32), v23 = v21 >> 5),
                  v23))
            {
              v31 = 0;
              while (1)
              {
                v32 = *v22;
                if (*v22 == WebCore::HTMLNames::alignAttr
                  || *(_QWORD *)(v32 + 24) == *(_QWORD *)(WebCore::HTMLNames::alignAttr + 24)
                  && *(_QWORD *)(v32 + 32) == *(_QWORD *)(WebCore::HTMLNames::alignAttr + 32))
                {
                  break;
                }
                ++v31;
                v22 += 2;
                if (v23 == v31)
                  goto LABEL_58;
              }
            }
            else
            {
LABEL_58:
              v31 = 0xFFFFFFFFLL;
            }
            WebCore::Element::setAttributeInternal((WTF::StringImpl *)v10, v31, (WebCore::TreeScope *)&WebCore::HTMLNames::alignAttr, (WTF::StringImpl **)v19, 0);
            WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v4);
          }
          if (v15)
          {
            if (*(_DWORD *)(v15 + 24) == 2)
            {
              if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v15, v6);
            }
            else
            {
              *(_DWORD *)(v15 + 24) -= 2;
            }
          }
          goto LABEL_63;
      }
    }
  }
  result = (unsigned int *)v35;
  v35 = 0;
  if (result)
  {
    if (*result == 1)
    {
      WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)result, (WTF::StringImpl *)v6);
      result = (unsigned int *)WTF::fastFree(v33, v34);
    }
    else
    {
      --*result;
    }
  }
LABEL_68:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

void sub_194B8FE04(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::EditingStyle *a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD *v18;
  WTF *v19;
  uint64_t v21;
  WTF *v22;
  void *v23;

  if (*(_DWORD *)v12 == 1)
  {
    v15 = *(unsigned int *)(v12 + 28);
    if ((_DWORD)v15)
    {
      v16 = 16 * v15;
      v17 = (_DWORD **)(*(_QWORD *)(v12 + 16) + 8);
      do
      {
        v18 = *v17;
        *v17 = 0;
        if (v18)
        {
          if (*v18 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, a2);
          else
            *v18 -= 2;
        }
        v17 += 2;
        v16 -= 16;
      }
      while (v16);
    }
    v19 = *(WTF **)(v12 + 16);
    if (v13 != v19 && v19 != 0)
    {
      *(_QWORD *)(v12 + 16) = 0;
      *(_DWORD *)(v12 + 24) = 0;
      WTF::fastFree(v19, a2);
    }
    v21 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(v12 + 8) = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    WTF::fastFree((WTF *)v12, a2);
    if (!v11)
    {
LABEL_23:
      if (a10)
      {
        if (*(_DWORD *)a10 == 1)
        {
          WebCore::EditingStyle::~EditingStyle(a10, a2);
          WTF::fastFree(v22, v23);
        }
        else
        {
          --*(_DWORD *)a10;
        }
      }
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    --*(_DWORD *)v12;
    if (!v11)
      goto LABEL_23;
  }
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  goto LABEL_23;
}

uint64_t WebCore::Editor::removeUnchangeableStyles(WebCore::Editor *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const WebCore::StyleProperties *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::String *v10;
  __n128 v11;
  WTF::StringImpl *v12;
  WTF::String *v13;
  __n128 v14;
  WTF::String *v15;
  __n128 v16;
  WTF::String *v17;
  __n128 v18;
  WTF::String *v19;
  __n128 v20;
  uint64_t result;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD **v25;
  _DWORD *v26;
  WTF *v27;
  uint64_t v29;
  WTF *v30;
  void *v31;
  WTF::StringImpl *v32[2];

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 1272);
  if (v2
    && (*(_WORD *)(v2 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
  {
    v3 = *(_QWORD *)(v2 + 80);
    if (v3)
    {
      while ((*(_WORD *)(v3 + 28) & 0x10) == 0)
      {
        v3 = *(_QWORD *)(v3 + 56);
        if (!v3)
          goto LABEL_15;
      }
      v4 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24);
      if (v5 != v4)
      {
LABEL_9:
        if (v5 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
        {
          while (1)
          {
            v3 = *(_QWORD *)(v3 + 56);
            if (!v3)
              break;
            if ((*(_WORD *)(v3 + 28) & 0x10) != 0)
            {
              v5 = *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24);
              if (v5 != v4)
                goto LABEL_9;
              break;
            }
          }
        }
      }
    }
  }
  else
  {
    v3 = 0;
  }
LABEL_15:
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 16) &= 0xE0u;
  *(_DWORD *)(v6 + 20) = WebCore::EditingStyle::NoFontDelta;
  WebCore::EditingStyle::init(v6, (WebCore *)v3, 1);
  v7 = *(const WebCore::StyleProperties **)(v6 + 8);
  v8 = WTF::fastMalloc((WTF *)0x60);
  WebCore::MutableStyleProperties::MutableStyleProperties((WebCore::MutableStyleProperties *)v8, v7);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v32[0] = v32[1];
  WebCore::MutableStyleProperties::setProperty(v8, 61, (uint64_t)v32, 0, 0);
  v12 = v32[0];
  v32[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  WebCore::MutableStyleProperties::removeProperty(v8, (WTF::StringImpl *)0x1C, 0, v10, v11);
  WebCore::MutableStyleProperties::removeProperty(v8, (WTF::StringImpl *)0x10, 0, v13, v14);
  WebCore::MutableStyleProperties::removeProperty(v8, (WTF::StringImpl *)0x15, 0, v15, v16);
  WebCore::MutableStyleProperties::removeProperty(v8, (WTF::StringImpl *)0xFF, 0, v17, v18);
  WebCore::MutableStyleProperties::removeProperty(v8, (WTF::StringImpl *)0x155, 0, v19, v20);
  result = (uint64_t)WebCore::Editor::applyStyleToSelection((unsigned int *)this, (const WebCore::StyleProperties *)v8, 4u);
  if (*(_DWORD *)v8 == 1)
  {
    v23 = *(unsigned int *)(v8 + 28);
    if ((_DWORD)v23)
    {
      v24 = 16 * v23;
      v25 = (_DWORD **)(*(_QWORD *)(v8 + 16) + 8);
      do
      {
        v26 = *v25;
        *v25 = 0;
        if (v26)
        {
          if (*v26 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, v22);
          else
            *v26 -= 2;
        }
        v25 += 2;
        v24 -= 16;
      }
      while (v24);
    }
    v27 = *(WTF **)(v8 + 16);
    if ((WTF *)(v8 + 32) != v27 && v27 != 0)
    {
      *(_QWORD *)(v8 + 16) = 0;
      *(_DWORD *)(v8 + 24) = 0;
      WTF::fastFree(v27, v22);
    }
    v29 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)(v8 + 8) = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    result = WTF::fastFree((WTF *)v8, v22);
  }
  else
  {
    --*(_DWORD *)v8;
  }
  if (*(_DWORD *)v6 == 1)
  {
    WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)v6, v22);
    return WTF::fastFree(v30, v31);
  }
  else
  {
    --*(_DWORD *)v6;
  }
  return result;
}

void sub_194B901D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WebCore::EditingStyle *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _DWORD **v7;
  _DWORD *v8;
  WTF *v9;
  uint64_t v11;
  WTF *v12;
  void *v13;

  if (*(_DWORD *)v3 == 1)
  {
    v5 = *(unsigned int *)(v3 + 28);
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      v7 = (_DWORD **)(*(_QWORD *)(v3 + 16) + 8);
      do
      {
        v8 = *v7;
        *v7 = 0;
        if (v8)
        {
          if (*v8 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, a2);
          else
            *v8 -= 2;
        }
        v7 += 2;
        v6 -= 16;
      }
      while (v6);
    }
    v9 = *(WTF **)(v3 + 16);
    if ((WTF *)(v3 + 32) != v9 && v9 != 0)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
      WTF::fastFree(v9, a2);
    }
    v11 = *(_QWORD *)(v3 + 8);
    *(_QWORD *)(v3 + 8) = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    WTF::fastFree((WTF *)v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  if (*(_DWORD *)v2 == 1)
  {
    WebCore::EditingStyle::~EditingStyle(v2, a2);
    WTF::fastFree(v12, v13);
  }
  else
  {
    --*(_DWORD *)v2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::Editor::writeImageToPasteboard(WebCore::Editor *this, WebCore::Pasteboard *a2, WebCore::Element *a3, WTF::StringImpl **a4, WTF::StringImpl **a5)
{
  void *v10;
  uint64_t v11;
  const WebCore::RenderObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  int v17;
  WebCore::Document *v18;
  _QWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  int v32;
  uint64_t *v33;
  unint64_t v34;
  const __CFString *v35;
  const WTF::String *v36;
  const WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  WTF *v43;
  void *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  unsigned int v47;
  unsigned int v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  void *v57;
  WebCore::Node *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  WTF *v71;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  int v84;
  WebCore::Node *v85;
  int v86;
  char v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  __int128 v90;
  __int128 v91;
  WTF::StringImpl *v92[5];
  uint64_t v93;
  WTF::StringImpl *v94;
  __int128 v95;
  __int128 v96;
  WTF::StringImpl *v97[2];
  WTF::StringImpl *v98[2];
  WTF::StringImpl *v99[2];
  uint64_t v100;
  char v101;
  _QWORD v102[2];

  v93 = 0;
  v94 = 0;
  WTF::URL::invalidate((WTF::URL *)&v94);
  v100 = 0;
  *(_OWORD *)v98 = 0u;
  *(_OWORD *)v99 = 0u;
  *(_OWORD *)v97 = 0u;
  v11 = *((_QWORD *)a3 + 8);
  v12 = (const WebCore::RenderObject *)(v11 & 0xFFFFFFFFFFFFLL);
  if ((v11 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((v11 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x194B90800);
    }
    if ((((*(_BYTE *)((v11 & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(_BYTE *)((v11 & 0xFFFFFFFFFFFFLL) + 0x35)) == 1)
    {
      ++*(_DWORD *)((v11 & 0xFFFFFFFFFFFFLL) + 0x10);
      v13 = *(_QWORD *)(*(_QWORD *)((v11 & 0xFFFFFFFFFFFFLL) + 0xE0) + 24);
      if (!v13)
        goto LABEL_6;
      v14 = *(_QWORD *)(v13 + 8);
      if (!v14)
        goto LABEL_6;
      v73 = *(_QWORD *)(v14 + 8);
      if (v73)
        goto LABEL_140;
      v73 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v73 = 1;
      *(_QWORD *)(v73 + 8) = v14;
      v79 = *(unsigned int **)(v14 + 8);
      *(_QWORD *)(v14 + 8) = v73;
      if (!v79)
        goto LABEL_140;
      do
      {
        v80 = __ldaxr(v79);
        v81 = v80 - 1;
      }
      while (__stlxr(v81, v79));
      if (!v81)
      {
        atomic_store(1u, v79);
        WTF::fastFree((WTF *)v79, v10);
      }
      v73 = *(_QWORD *)(v14 + 8);
      if (v73)
      {
LABEL_140:
        do
          v74 = __ldaxr((unsigned int *)v73);
        while (__stlxr(v74 + 1, (unsigned int *)v73));
        v83 = (WTF::StringImpl *)v73;
        v75 = *(_QWORD *)(v73 + 8);
        if (!v75)
          goto LABEL_123;
        v89 = (WTF::StringImpl *)&v83;
        ++*(_DWORD *)(v75 + 548);
        v76 = *(_QWORD *)(v75 + 488);
        if (v76)
        {
          if (*(_QWORD *)(v76 + 8))
          {
            WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v75 + 464), (uint64_t *)&v89, (uint64_t)v92);
            v73 = (uint64_t)v83;
            if (!v83)
              goto LABEL_123;
          }
        }
        v77 = *(_QWORD *)(v73 + 8);
        if (v77 && (*(_WORD *)(v77 + 557) >> 5) - 3 >= 2)
        {
          v78 = WebCore::CachedImage::imageForRenderer((WebCore::CachedImage *)v77, v12);
          v16 = v78;
          if (v78 && (++*((_DWORD *)v78 + 2), v83))
            v15 = *((_QWORD *)v83 + 1);
          else
            v15 = 0;
        }
        else
        {
LABEL_123:
          v15 = 0;
          v16 = 0;
        }
      }
      else
      {
LABEL_6:
        v15 = 0;
        v16 = 0;
        v83 = 0;
      }
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v83, v10);
      v17 = *((_DWORD *)v12 + 4);
      if (!v17)
      {
        __break(0xC471u);
        JUMPOUT(0x194B90838);
      }
      *((_DWORD *)v12 + 4) = v17 - 1;
      if (v16)
      {
        v18 = *(WebCore::Document **)(*((_QWORD *)a3 + 5) + 8);
        v19 = (_QWORD *)(*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)a3 + 640))(a3);
        WebCore::Document::completeURL(v18, v19, (uint64_t)v18 + 848, 0, (WTF::URL *)v92);
        v20 = *a4;
        if (*a4 && *((_DWORD *)v20 + 1))
        {
          *(_DWORD *)v20 += 2;
          v89 = v20;
        }
        else
        {
          v21 = v92[0];
          if (v92[0])
          {
            *(_DWORD *)v92[0] += 2;
            v89 = v21;
          }
          else
          {
            v89 = 0;
          }
          a4 = v92;
        }
        v90 = *(_OWORD *)(a4 + 1);
        v91 = *(_OWORD *)(a4 + 3);
        if ((WTF::URL::protocolIs() & 1) == 0)
        {
          v23 = v89;
          if (v89)
            *(_DWORD *)v89 += 2;
          v24 = v94;
          v94 = v23;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v22);
            else
              *(_DWORD *)v24 -= 2;
          }
          v95 = v90;
          v96 = v91;
          v25 = *a5;
          if (*a5)
            *(_DWORD *)v25 += 2;
          v26 = v97[0];
          v97[0] = v25;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v22);
            else
              *(_DWORD *)v26 -= 2;
          }
        }
        WTF::URL::lastPathComponent((WTF::URL *)v92);
        if ((v27 & 0xFF00000000) != 0)
          WTF::String::String();
        else
          WTF::String::String();
        v29 = v83;
        v83 = 0;
        v30 = v99[1];
        v99[1] = v29;
        if (v30)
        {
          v31 = *(_DWORD *)v30 - 2;
          if (*(_DWORD *)v30 != 2)
          {
LABEL_28:
            *(_DWORD *)v30 = v31;
            goto LABEL_29;
          }
          WTF::StringImpl::destroy(v30, v28);
          v30 = v83;
          v83 = 0;
          if (v30)
          {
            v31 = *(_DWORD *)v30 - 2;
            if (*(_DWORD *)v30 != 2)
              goto LABEL_28;
            WTF::StringImpl::destroy(v30, v62);
          }
        }
LABEL_29:
        LODWORD(v100) = (*(float (**)(WTF *, _QWORD))(*(_QWORD *)v16 + 168))(v16, 0);
        HIDWORD(v100) = v32;
        v33 = *(uint64_t **)(v15 + 400);
        if (!v33)
        {
          v34 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
          if (v34 != -1)
          {
            v83 = (WTF::StringImpl *)&v101;
            v102[0] = &v83;
            std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, v102, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
          }
          v33 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
        }
        WebCore::ResourceResponse::platformLazyInit((uint64_t)v33, 1);
        if (v33[5])
          v35 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v35 = &stru_1E3487BC0;
        MEMORY[0x19AEA5508](&v83, v35);
        WebCore::UTIFromMIMEType(&v83, v36, v37, (uint64_t)&v88);
        v39 = v83;
        v83 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v38);
          else
            *(_DWORD *)v39 -= 2;
        }
        v40 = v88;
        v88 = 0;
        v41 = v98[0];
        v98[0] = v40;
        if (!v41)
          goto LABEL_41;
        v42 = *(_DWORD *)v41 - 2;
        if (*(_DWORD *)v41 == 2)
        {
          WTF::StringImpl::destroy(v41, v38);
          v41 = v88;
          v88 = 0;
          if (!v41)
            goto LABEL_41;
          v42 = *(_DWORD *)v41 - 2;
          if (*(_DWORD *)v41 == 2)
          {
            WTF::StringImpl::destroy(v41, v63);
            goto LABEL_41;
          }
        }
        *(_DWORD *)v41 = v42;
LABEL_41:
        v43 = *(WTF **)(v15 + 392);
        if (v43)
        {
          WebCore::FragmentedSharedBuffer::makeContiguous(v43, &v83);
          v45 = v83;
          v83 = 0;
          v46 = v97[1];
          v97[1] = v45;
          if (v46)
          {
            do
            {
              v47 = __ldaxr((unsigned int *)v46);
              v48 = v47 - 1;
            }
            while (__stlxr(v48, (unsigned int *)v46));
            if (!v48)
            {
              atomic_store(1u, (unsigned int *)v46);
              v64 = *((unsigned int *)v46 + 5);
              if ((_DWORD)v64)
              {
                v65 = *((_QWORD *)v46 + 1);
                v66 = v65 + 16 * v64;
                do
                {
                  v67 = *(unsigned int **)(v65 + 8);
                  *(_QWORD *)(v65 + 8) = 0;
                  if (v67)
                  {
                    do
                    {
                      v68 = __ldaxr(v67);
                      v69 = v68 - 1;
                    }
                    while (__stlxr(v69, v67));
                    if (!v69)
                    {
                      v82 = v66;
                      atomic_store(1u, v67);
                      v70 = v67[6];
                      if ((_DWORD)v70 != -1)
                        ((void (*)(_QWORD *, unsigned int *))off_1E3283A88[v70])(v102, v67 + 2);
                      v67[6] = -1;
                      WTF::fastFree((WTF *)v67, v44);
                      v66 = v82;
                    }
                  }
                  v65 += 16;
                }
                while (v65 != v66);
              }
              v71 = (WTF *)*((_QWORD *)v46 + 1);
              if ((WTF::StringImpl *)((char *)v46 + 24) != v71 && v71 != 0)
              {
                *((_QWORD *)v46 + 1) = 0;
                *((_DWORD *)v46 + 4) = 0;
                WTF::fastFree(v71, v44);
              }
              WTF::fastFree(v46, v44);
            }
          }
          WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v83, v44);
        }
        if (((*(uint64_t (**)(WebCore::Pasteboard *))(*(_QWORD *)a2 + 16))(a2) & 1) == 0)
        {
          v50 = *((_QWORD *)this + 1);
          if (v50)
            v51 = *(_QWORD *)(v50 + 8);
          else
            v51 = 0;
          v52 = *((_QWORD *)a3 + 4);
          if (v52)
          {
            v53 = *(_DWORD *)(v52 + 24);
            v54 = *((_QWORD *)a3 + 6) & 0xFFFFFFFFFFFFLL;
            if (v54)
            {
              v55 = 0;
              do
              {
                ++v55;
                v54 = *(_QWORD *)(v54 + 48) & 0xFFFFFFFFFFFFLL;
              }
              while (v54);
            }
            else
            {
              v55 = 0;
            }
            *(_DWORD *)(v52 + 24) = v53 + 6;
            v83 = (WTF::StringImpl *)v52;
            v84 = v55;
            v85 = (WebCore::Node *)v52;
            v86 = v55 + 1;
            v87 = 1;
            v56 = v53 + 4;
            if (v56)
            {
              *(_DWORD *)(v52 + 24) = v56;
            }
            else if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v52, v49);
            }
          }
          else
          {
            LOBYTE(v83) = 0;
            v87 = 0;
          }
          (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v51 + 304))(v51, &v83, &v98[1]);
          if (v87)
          {
            v58 = v85;
            v85 = 0;
            if (v58)
            {
              if (*((_DWORD *)v58 + 6) == 2)
              {
                if ((*((_WORD *)v58 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v58, v57);
              }
              else
              {
                *((_DWORD *)v58 + 6) -= 2;
              }
            }
            v59 = v83;
            v83 = 0;
            if (v59)
            {
              if (*((_DWORD *)v59 + 6) == 2)
              {
                if ((*((_WORD *)v59 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v59, v57);
              }
              else
              {
                *((_DWORD *)v59 + 6) -= 2;
              }
            }
          }
        }
        (*(void (**)(WebCore::Pasteboard *, uint64_t *))(*(_QWORD *)a2 + 152))(a2, &v93);
        v60 = v89;
        v89 = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
            WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v10);
          else
            *(_DWORD *)v60 -= 2;
        }
        v61 = v92[0];
        v92[0] = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 2)
            WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v10);
          else
            *(_DWORD *)v61 -= 2;
        }
        if (*((_DWORD *)v16 + 2) == 1)
          (*(void (**)(WTF *))(*(_QWORD *)v16 + 8))(v16);
        else
          --*((_DWORD *)v16 + 2);
      }
    }
  }
  WebCore::PasteboardImage::~PasteboardImage((WebCore::PasteboardImage *)&v93, (WTF::StringImpl *)v10);
}

void sub_194B90A38(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, WebCore::Node *a13, uint64_t a14, char a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,WTF::StringImpl *a28)
{
  _DWORD *v28;

  if (a15)
  {
    if (a13)
    {
      if (*((_DWORD *)a13 + 6) == 2)
      {
        if ((*((_WORD *)a13 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a13, a2);
      }
      else
      {
        *((_DWORD *)a13 + 6) -= 2;
      }
    }
    if (a11)
    {
      if (*((_DWORD *)a11 + 6) == 2)
      {
        if ((*((_WORD *)a11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a11, a2);
      }
      else
      {
        *((_DWORD *)a11 + 6) -= 2;
      }
    }
  }
  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (a22)
  {
    if (*(_DWORD *)a22 == 2)
      WTF::StringImpl::destroy(a22, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a22 -= 2;
  }
  if (v28[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
  else
    --v28[2];
  WebCore::PasteboardImage::~PasteboardImage((WebCore::PasteboardImage *)&a27, (WTF::StringImpl *)a2);
  _Unwind_Resume(a1);
}

void WebCore::Editor::pasteWithPasteboard(WebCore::Editor *a1, WebCore::Pasteboard *a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  unsigned int *v11;
  unsigned int v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  void *v15;
  int v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  WebCore::Node *v27;
  void *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  void *v33;
  WebCore::Node *v34;
  WebCore::Node *v35;
  WebCore::Node *v36;
  WebCore::Node *v37;
  _QWORD v38[4];
  int v39;
  WebCore::Node *v40;
  int v41;
  char v42;
  WebCore::Node *v43;
  char v44;
  WebCore::Node *v45;
  int v46;
  WebCore::Node *v47;
  int v48;
  char v49;

  WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8) + 3064) + 56), &v45);
  v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8) + 528);
  if (v7)
    v8 = *(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  if (!v49)
    goto LABEL_73;
  v38[0] = off_1E327FAD8;
  v38[1] = 0;
  if (!*(_QWORD *)(v8 + 16))
  {
    v29 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v29 = 1;
    *(_QWORD *)(v29 + 8) = v8;
    v30 = *(unsigned int **)(v8 + 16);
    *(_QWORD *)(v8 + 16) = v29;
    if (v30)
    {
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        atomic_store(1u, v30);
        WTF::fastFree((WTF *)v30, v28);
      }
    }
  }
  v9 = a3;
  v10 = a3 & 1;
  v11 = *(unsigned int **)(v8 + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v38[2] = v11;
  v38[0] = &off_1E3283CC0;
  v13 = v45;
  *((_DWORD *)v45 + 6) += 2;
  v38[3] = v13;
  v39 = v46;
  v14 = v47;
  *((_DWORD *)v47 + 6) += 2;
  v40 = v14;
  v41 = v48;
  v42 = v10;
  v43 = 0;
  v44 = 0;
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 1) + 8) + 544))(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8));
  if (v16 >= 1)
  {
    v3 = 0;
    do
    {
      (*(void (**)(WebCore::Node **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)a1 + 1) + 8)
                                                                            + 552))(&v37, *(_QWORD *)(*((_QWORD *)a1 + 1) + 8), v3);
      if (v37)
      {
        v36 = v37;
        v37 = 0;
        WebCore::WebContentReader::addFragment((uint64_t)v38, &v36);
        if (v36)
        {
          if (*((_DWORD *)v36 + 6) == 2)
          {
            if ((*((_WORD *)v36 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v36, v15);
          }
          else
          {
            *((_DWORD *)v36 + 6) -= 2;
          }
        }
        v17 = v37;
        v37 = 0;
        if (v17)
        {
          if (*((_DWORD *)v17 + 6) == 2)
          {
            if ((*((_WORD *)v17 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v17, v15);
          }
          else
          {
            *((_DWORD *)v17 + 6) -= 2;
          }
        }
      }
      v3 = (v3 + 1);
    }
    while (v16 != (_DWORD)v3);
  }
  v18 = v43;
  v43 = 0;
  if (v18)
    goto LABEL_25;
  if (!v49)
  {
LABEL_73:
    __break(1u);
    return;
  }
  WebCore::Editor::webContentFromPasteboard(a1, a2, (const WebCore::SimpleRange *)&v45, (BOOL *)&v36, v10, &v37);
  v18 = v37;
  if (!v37)
    goto LABEL_58;
LABEL_25:
  if ((v9 & 4) != 0)
    WebCore::Editor::quoteFragmentForPasting(a1, v18);
  v19 = *((_QWORD *)a1 + 1);
  if (!v19)
    goto LABEL_45;
  v20 = *(_QWORD *)(v19 + 8);
  if (!v20)
    goto LABEL_45;
  v21 = *((_QWORD *)v18 + 10);
  if (!v21 || (*(_WORD *)(v21 + 28) & 1) == 0)
    goto LABEL_36;
  v22 = *(_DWORD *)(v21 + 24);
  *(_DWORD *)(v21 + 24) = v22 + 2;
  v23 = *((_QWORD *)v18 + 11);
  if (v23 == v21)
  {
    LOBYTE(v3) = (*(uint64_t (**)(uint64_t, uint64_t, WebCore::Node **, uint64_t))(*(_QWORD *)v20 + 104))(v20, v21 + 80, &v45, 1);
    v22 = *(_DWORD *)(v21 + 24) - 2;
    if (*(_DWORD *)(v21 + 24) != 2)
      goto LABEL_33;
  }
  else if (v22)
  {
LABEL_33:
    *(_DWORD *)(v21 + 24) = v22;
    goto LABEL_34;
  }
  if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v21, v15);
LABEL_34:
  if (v23 != v21)
  {
    v20 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 8);
LABEL_36:
    if (((*(uint64_t (**)(uint64_t, WebCore::Node *, WebCore::Node **, uint64_t))(*(_QWORD *)v20 + 96))(v20, v18, &v45, 1) & 1) != 0)goto LABEL_37;
LABEL_45:
    if (*((_DWORD *)v18 + 6) != 2)
    {
      *((_DWORD *)v18 + 6) -= 2;
      goto LABEL_58;
    }
    if ((*((_WORD *)v18 + 15) & 0x400) != 0)
      goto LABEL_58;
    v27 = v18;
LABEL_57:
    WebCore::Node::removedLastRef(v27, v15);
    goto LABEL_58;
  }
  if ((v3 & 1) == 0)
    goto LABEL_45;
LABEL_37:
  v37 = v18;
  v24 = *((_QWORD *)a1 + 1);
  if (v24
    && (v25 = *(_QWORD *)(v24 + 8)) != 0
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25))
  {
    v26 = (*(uint64_t (**)(WebCore::Pasteboard *))(*(_QWORD *)a2 + 192))(a2);
  }
  else
  {
    v26 = 0;
  }
  WebCore::Editor::pasteAsFragment((unsigned int *)a1, &v37, v26, 0, (v9 & 2) != 0, 25);
  v27 = v37;
  v37 = 0;
  if (v27)
  {
    if (*((_DWORD *)v27 + 6) != 2)
    {
      *((_DWORD *)v27 + 6) -= 2;
      goto LABEL_58;
    }
    if ((*((_WORD *)v27 + 15) & 0x400) == 0)
      goto LABEL_57;
  }
LABEL_58:
  WebCore::WebContentReader::~WebContentReader((WebCore::WebContentReader *)v38, v15);
  if (v49)
  {
    v34 = v47;
    v47 = 0;
    if (v34)
    {
      if (*((_DWORD *)v34 + 6) == 2)
      {
        if ((*((_WORD *)v34 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v34, v33);
      }
      else
      {
        *((_DWORD *)v34 + 6) -= 2;
      }
    }
    v35 = v45;
    v45 = 0;
    if (v35)
    {
      if (*((_DWORD *)v35 + 6) == 2)
      {
        if ((*((_WORD *)v35 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v35, v33);
      }
      else
      {
        *((_DWORD *)v35 + 6) -= 2;
      }
    }
  }
}

void sub_194B90FCC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WebCore::Node *a22,uint64_t a23,WebCore::Node *a24,uint64_t a25,char a26)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a26)
  {
    if (a24)
    {
      if (*((_DWORD *)a24 + 6) == 2)
      {
        if ((*((_WORD *)a24 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a24, a2);
      }
      else
      {
        *((_DWORD *)a24 + 6) -= 2;
      }
    }
    if (a22)
    {
      if (*((_DWORD *)a22 + 6) == 2)
      {
        if ((*((_WORD *)a22 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a22, a2);
      }
      else
      {
        *((_DWORD *)a22 + 6) -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebCore::Editor::insertDictationPhrases(uint64_t a1, _DWORD *a2, const void *a3)
{
  unsigned int *result;
  int v4;
  BOOL v5;
  WebCore::CompositeEditCommand *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::Node *v11;

  result = *(unsigned int **)(*(_QWORD *)(a1 + 16) + 8);
  v4 = result[6];
  result[6] = v4 + 2;
  v11 = (WebCore::Node *)result;
  if (*(_BYTE *)(*((_QWORD *)result + 383) + 153))
    v5 = a2[3] == 0;
  else
    v5 = 1;
  if (v5)
  {
    v11 = 0;
    if (!v4)
      goto LABEL_15;
    goto LABEL_7;
  }
  v8 = (WebCore::CompositeEditCommand *)WTF::fastMalloc((WTF *)0x130);
  v9 = WebCore::EditCommand::EditCommand((uint64_t)v8, (uint64_t *)&v11, 11);
  *(_OWORD *)(v9 + 248) = 0u;
  *(_OWORD *)(v9 + 264) = 0u;
  *(_QWORD *)v9 = off_1E33AE4E0;
  *(_QWORD *)(v9 + 280) = 0;
  *(_QWORD *)(v9 + 288) = 0;
  v10 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v9 + 280) = v10;
  LODWORD(v10) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(v9 + 288) = v10;
  LODWORD(v10) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(v9 + 292) = v10;
  *(_QWORD *)(v9 + 296) = a3;
  if (a3)
    CFRetain(a3);
  WebCore::CompositeEditCommand::apply(v8);
  if (*((_DWORD *)v8 + 2) == 1)
    (*(void (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)v8 + 8))(v8);
  else
    --*((_DWORD *)v8 + 2);
  result = (unsigned int *)v11;
  v11 = 0;
  if (result)
  {
    v4 = result[6] - 2;
    if (result[6] == 2)
    {
LABEL_15:
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      return result;
    }
LABEL_7:
    result[6] = v4;
  }
  return result;
}

unsigned int *WebCore::Editor::setDictationPhrasesAsChildOfElement(WebCore::Editor *a1, unsigned int *a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *result;
  void *v17;
  uint64_t v18;
  uint64_t **v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  BOOL v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WebCore::Node *v28;
  WTF::StringImpl *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  WTF::StringImpl **v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl **v46;
  uint64_t v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WebCore::Node *v56;
  uint64_t v57;
  WTF *v58;
  WebCore::Editor *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  char v62[8];
  WTF::StringImpl *v63;
  char v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  int v67;
  char v68;
  WebCore::Node *v69;
  int v70;
  WebCore::Node *v71;
  int v72;
  WebCore::Node *v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  WebCore::Editor::clear(a1, a2);
  v8 = *((_QWORD *)a1 + 1);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 376))(v9);
  }
  v10 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8);
  *(_DWORD *)(v10 + 24) += 2;
  WebCore::FrameSelection::clear(*(WebCore::FrameSelection **)(v10 + 3064));
  WebCore::ContainerNode::removeChildren(a4);
  v12 = a2[3];
  if (!(_DWORD)v12)
  {
    result = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 1) + 8) + 248))(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8));
LABEL_101:
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v10, v17);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
    return result;
  }
  *(_DWORD *)(a4 + 24) += 4;
  v13 = *(_WORD *)(a4 + 28);
  if ((v13 & 1) != 0)
  {
    v14 = *(_QWORD *)(a4 + 80);
    if (v14)
      LODWORD(v14) = *(_DWORD *)(v14 + 4);
  }
  else
  {
    LODWORD(v14) = 0;
    if ((v13 & 4) != 0)
    {
      v15 = *(_QWORD *)(a4 + 80);
      if (v15)
      {
        LODWORD(v14) = 0;
        do
        {
          LODWORD(v14) = v14 + 1;
          v15 = *(_QWORD *)(v15 + 56);
        }
        while (v15);
      }
    }
  }
  v69 = (WebCore::Node *)a4;
  v70 = 0;
  v71 = (WebCore::Node *)a4;
  v72 = v14;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 1;
  v18 = 16 * v12;
  v19 = *(uint64_t ***)a2;
  do
  {
    if (!*((_DWORD *)v19 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x194B91814);
    }
    v20 = (WTF::StringImpl **)*v19;
    v21 = (WTF::StringImpl *)**v19;
    if (v67)
      v22 = 0;
    else
      v22 = v66 == 0;
    if (v22)
    {
      if (v21)
        *(_DWORD *)v21 += 2;
      v23 = v65;
      v65 = v21;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v11);
        else
          *(_DWORD *)v23 -= 2;
      }
      v24 = *v20;
      if (*v20)
        LODWORD(v24) = *((_DWORD *)v24 + 1);
      v67 = (int)v24;
    }
    else if (v21 && (*((_BYTE *)v21 + 16) & 4) == 0)
    {
      WTF::StringBuilder::append();
    }
    else
    {
      WTF::StringBuilder::append();
    }
    v19 += 2;
    v18 -= 16;
  }
  while (v18);
  v25 = v65;
  if (v65
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v65),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v65),
        (v25 = v65) != 0))
  {
    *(_DWORD *)v25 += 2;
  }
  v61 = v25;
  WebCore::createFragmentFromText(&v69, (const WebCore::SimpleRange *)&v61, (uint64_t *)&v73);
  WebCore::ContainerNode::appendChild(a4, v73, (uint64_t)v62);
  if (v64)
  {
    v27 = v63;
    v63 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v26);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
  v28 = v73;
  v73 = 0;
  if (v28)
  {
    if (*((_DWORD *)v28 + 6) == 2)
    {
      if ((*((_WORD *)v28 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v28, v26);
    }
    else
    {
      *((_DWORD *)v28 + 6) -= 2;
    }
  }
  v29 = v61;
  v61 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v26);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a4);
  v31 = v30;
  if (v30)
  {
    do
      v32 = __ldaxr(v30);
    while (__stlxr(v32 + 1, v30));
  }
  WebCore::Document::updateLayout(v10, 0, 0);
  if (v31)
  {
    if (*((_QWORD *)v31 + 1))
    {
      v33 = *(_QWORD *)(a4 + 80);
      if (v33)
      {
        if ((*(_WORD *)(v33 + 28) & 2) != 0)
        {
          v59 = a1;
          v60 = v10;
          *(_DWORD *)(v33 + 24) += 2;
          v34 = a2[3];
          if ((_DWORD)v34)
          {
            v35 = 0;
            v36 = *(uint64_t ***)a2;
            v37 = *(_QWORD *)a2 + 16 * v34;
            do
            {
              v38 = *((unsigned int *)v36 + 3);
              if (!(_DWORD)v38)
              {
                __break(0xC471u);
                JUMPOUT(0x194B9181CLL);
              }
              v39 = **v36;
              if (v39)
                v40 = *(_DWORD *)(v39 + 4);
              else
                v40 = 0;
              if (v38 >= 2)
              {
                if (v38 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194B91824);
                }
                v41 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(8 * v38));
                v43 = v41;
                v44 = *((unsigned int *)v36 + 3);
                if ((_DWORD)v44)
                {
                  v46 = (WTF::StringImpl **)*v36;
                  v47 = 8 * v44;
                  v48 = v41;
                  do
                  {
                    v49 = *v46;
                    if (*v46)
                      *(_DWORD *)v49 += 2;
                    *v48++ = v49;
                    ++v46;
                    v47 -= 8;
                  }
                  while (v47);
                }
                v45 = *v41;
                *v43 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, v42);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                memmove(v43, v43 + 1, 8 * v38 - 8);
                v73 = (WebCore::Node *)v43;
                v74 = v38;
                v75 = v38 - 1;
                v76 = 2;
                WebCore::addMarker((WebCore::Node *)v33, v35, v40, 2048, (uint64_t)&v73);
                if (v76 != -1)
                  ((void (*)(WTF::StringImpl **, WebCore::Node **))off_1E3283AB8[v76])(&v61, &v73);
              }
              v35 += v40;
              v36 += 2;
            }
            while (v36 != (uint64_t **)v37);
          }
          v50 = *(_QWORD *)(v33 + 80);
          if (v50)
            v51 = *(_DWORD *)(v50 + 4);
          else
            v51 = 0;
          if (a3)
            CFRetain(a3);
          v73 = (WebCore::Node *)a3;
          v76 = 3;
          WebCore::addMarker((WebCore::Node *)v33, 0, v51, 4096, (uint64_t)&v73);
          v10 = v60;
          if (v76 != -1)
            ((void (*)(WTF::StringImpl **, WebCore::Node **))off_1E3283AB8[v76])(&v61, &v73);
          (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v59 + 1) + 8) + 248))(*(_QWORD *)(*((_QWORD *)v59 + 1) + 8));
          if (*(_DWORD *)(v33 + 24) == 2)
          {
            if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v33, v17);
          }
          else
          {
            *(_DWORD *)(v33 + 24) -= 2;
          }
        }
      }
    }
    do
    {
      v52 = __ldaxr(v31);
      v53 = v52 - 1;
    }
    while (__stlxr(v53, v31));
    if (!v53)
    {
      atomic_store(1u, v31);
      v57 = v31[7];
      if ((_DWORD)v57)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v31 + 2), (WTF::StringImpl *)(*((_QWORD *)v31 + 2) + 32 * v57));
      v58 = (WTF *)*((_QWORD *)v31 + 2);
      if (v58)
      {
        *((_QWORD *)v31 + 2) = 0;
        v31[6] = 0;
        WTF::fastFree(v58, v17);
      }
      WTF::fastFree((WTF *)v31, v17);
    }
  }
  v54 = v66;
  v66 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)v54 -= 2;
  }
  v55 = v65;
  v65 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)v55 -= 2;
  }
  v56 = v71;
  v71 = 0;
  if (v56)
  {
    if (*((_DWORD *)v56 + 6) == 2)
    {
      if ((*((_WORD *)v56 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v56, v17);
    }
    else
    {
      *((_DWORD *)v56 + 6) -= 2;
    }
  }
  result = (unsigned int *)v69;
  v69 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, v17);
    }
    else
    {
      result[6] -= 2;
    }
  }
  if (v10)
    goto LABEL_101;
  return result;
}

void sub_194B91838(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WebCore::Node *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, WTF::StringImpl *a17, uint64_t a18, WebCore::Node *a19, uint64_t a20,WebCore::Node *a21,uint64_t a22,WebCore::Node *a23)
{
  uint64_t v23;
  uint64_t v24;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;

  if (*(_DWORD *)(v24 + 24) == 2)
  {
    if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v24, a2);
  }
  else
  {
    *(_DWORD *)(v24 + 24) -= 2;
  }
  if (v23)
  {
    do
    {
      v26 = __ldaxr((unsigned int *)v23);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, (unsigned int *)v23));
    if (!v27)
    {
      atomic_store(1u, (unsigned int *)v23);
      v28 = *(unsigned int *)(v23 + 28);
      if ((_DWORD)v28)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v23 + 16), (WTF::StringImpl *)(*(_QWORD *)(v23 + 16) + 32 * v28));
      v29 = *(WTF **)(v23 + 16);
      if (v29)
      {
        *(_QWORD *)(v23 + 16) = 0;
        *(_DWORD *)(v23 + 24) = 0;
        WTF::fastFree(v29, a2);
      }
      WTF::fastFree((WTF *)v23, a2);
    }
  }
  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  if (a21)
  {
    if (*((_DWORD *)a21 + 6) == 2)
    {
      if ((*((_WORD *)a21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a21, a2);
    }
    else
    {
      *((_DWORD *)a21 + 6) -= 2;
    }
  }
  if (a19)
  {
    if (*((_DWORD *)a19 + 6) == 2)
    {
      if ((*((_WORD *)a19 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a19, a2);
    }
    else
    {
      *((_DWORD *)a19 + 6) -= 2;
    }
  }
  if (a11)
  {
    if (*((_DWORD *)a11 + 6) == 2)
    {
      if ((*((_WORD *)a11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a11, a2);
    }
    else
    {
      *((_DWORD *)a11 + 6) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::Editor::confirmMarkedText(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  int v9;
  __int16 v10;
  WTF::StringImpl *v11;

  v2 = this;
  v3 = *(_QWORD *)(*(_QWORD *)(this + 16) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_QWORD *)(v3 + 1248);
  if (!v4)
  {
    v5 = *(_QWORD *)(this + 32);
    if (!v5)
      goto LABEL_20;
    *(_DWORD *)(v5 + 24) += 2;
    v6 = v5;
LABEL_5:
    v7 = *(WTF::StringImpl **)(v6 + 80);
    if (v7)
    {
      v8 = *(_DWORD *)(v2 + 40);
      if (v8 || *((_DWORD *)v7 + 1) > *(_DWORD *)(v2 + 44))
      {
        WTF::StringImpl::substring(v7);
      }
      else
      {
        *(_DWORD *)v7 += 2;
        v11 = v7;
      }
    }
    else
    {
      v11 = 0;
    }
    WebCore::Editor::setComposition((WebCore::Editor *)v2, (WebCore::Document *)&v11, 0);
    this = (uint64_t)v11;
    v11 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
      else
        *(_DWORD *)this -= 2;
    }
    goto LABEL_15;
  }
  *(_DWORD *)(v4 + 24) += 2;
  v5 = *(_QWORD *)(this + 32);
  if (!v5)
  {
LABEL_18:
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
    goto LABEL_20;
  }
  *(_DWORD *)(v5 + 24) += 2;
  this = WebCore::Node::isDescendantOrShadowDescendantOf((const WebCore::Node ***)v5, (const WebCore::Node *)v4);
  v6 = *(_QWORD *)(v2 + 32);
  if ((this & 1) != 0)
  {
    if (!v6)
      goto LABEL_15;
    goto LABEL_5;
  }
  if (v6)
    WebCore::Editor::setComposition((WebCore::Editor *)v2, MEMORY[0x1E0CBF738], 1);
  v10 = 0;
  v9 = 0;
  this = WebCore::Document::setFocusedElement((WebCore::Document *)v3, v4, &v9);
LABEL_15:
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  if (v4)
    goto LABEL_18;
LABEL_20:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return this;
}

void sub_194B91BF8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::Editor::setTextAsChildOfElement(WebCore::Editor *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  _QWORD v17[2];
  char v18;

  WebCore::Editor::clear(a1, a2);
  v6 = *((_QWORD *)a1 + 1);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 376))(v7);
  }
  if (*(_QWORD *)(a3 + 80) || *(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v8 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8);
    *(_DWORD *)(v8 + 24) += 2;
    WebCore::FrameSelection::clear(*(WebCore::FrameSelection **)(v8 + 3064));
    WebCore::ContainerNode::stringReplaceAll((WebCore::ContainerNode *)a3, (uint64_t)a2);
    *(_DWORD *)(a3 + 24) += 2;
    v9 = *(_QWORD *)(a3 + 80);
    if (v9)
    {
      v10 = 0;
      do
      {
        ++v10;
        v9 = *(_QWORD *)(v9 + 56);
      }
      while (v9);
    }
    else
    {
      v10 = 0;
    }
    v14 = a3;
    v15 = v10;
    v16 = 0;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v14, (uint64_t)v17);
    v18 = 1;
    if (*(_DWORD *)(a3 + 24) == 2)
    {
      if ((*(_WORD *)(a3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)a3, v11);
    }
    else
    {
      *(_DWORD *)(a3 + 24) -= 2;
    }
    v12 = v17[0];
    if (v17[0])
    {
      v13 = *(_QWORD *)(v8 + 3064);
      WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v14, (const WebCore::VisiblePosition *)v17, 0);
      WebCore::FrameSelection::setSelection(v13, (uint64_t)&v14, 6u, 0, 0, 0, 0);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v14);
      (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 1) + 8) + 248))(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8));
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v12, v11);
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
    }
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, v11);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
}

void sub_194B91E18(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebCore::Editor::ensureLastEditCommandHasCurrentSelectionIfOpenForMoreTyping(WebCore::Editor *this, uint64_t a2, const WebCore::VisibleSelection *a3)
{
  uint64_t v3;
  unsigned int *result;
  void *v5;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  result = (unsigned int *)WebCore::TypingCommand::ensureLastEditCommandHasCurrentSelectionIfOpenForMoreTyping((WebCore::TypingCommand *)v3, (WebCore::Document *)(*(_QWORD *)(v3 + 3064) + 56), a3);
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v3, v5);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return result;
}

void WebCore::FrameSelection::notifyAccessibilityForSelectionChange(_QWORD *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t (*v3)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  WebCore::AXObjectCache *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v1 & 1) != 0)
  {
    v2 = a1 + 15;
    v3 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    if (a1[15]
       ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
       : 0)
    {
      if (!a1[17])
        v3 = 0;
      if (v3)
      {
        v5 = a1[4];
        if (v5)
          v5 = *(_QWORD *)(v5 + 8);
        if (WebCore::Document::hasEverCreatedAnAXObjectCache)
        {
          if (*(_BYTE *)(v5 + 3362) || *(_BYTE *)(v5 + 3405))
          {
            while (1)
            {
              v12 = *(_QWORD *)(v5 + 528);
              if (!v12)
                break;
              v13 = *(_QWORD *)(v12 + 8);
              if (!v13)
                break;
              v14 = *(_QWORD *)(v13 + 120);
              if (!v14)
                break;
              v15 = *(_QWORD *)(v14 + 8);
              if (!v15)
                break;
              v5 = *(_QWORD *)(*(_QWORD *)(v15 + 40) + 8);
            }
          }
          else
          {
            v6 = *(_QWORD *)(v5 + 528);
            if (v6)
            {
              v7 = *(_QWORD *)(v6 + 8);
              if (v7)
              {
                v8 = *(_QWORD *)(*(_QWORD *)(v7 + 128) + 8);
                if (v8)
                  v9 = *(_BYTE *)(v8 + 144) == 0;
                else
                  v9 = 0;
                if (v9)
                {
                  v10 = *(_QWORD *)(v8 + 296);
                  if (v10)
                    v5 = v10;
                }
              }
            }
          }
          v11 = *(WebCore::AXObjectCache **)(v5 + 1488);
          if (v11)
            WebCore::AXObjectCache::postTextStateChangeNotification(v11, v2);
        }
      }
    }
  }
}

void WebCore::WebContentMarkupReader::~WebContentMarkupReader(WebCore::WebContentMarkupReader *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *(_QWORD *)this = off_1E327FAD8;
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E327FB48;
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *(_QWORD *)this = off_1E327FAD8;
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E327FB48;
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::WebContentMarkupReader::readFilePath()
{
  return 0;
}

uint64_t WebCore::WebContentMarkupReader::readFilePaths()
{
  return 0;
}

uint64_t WebCore::WebContentMarkupReader::readImage()
{
  return 0;
}

uint64_t WebCore::WebContentMarkupReader::readURL()
{
  return 0;
}

uint64_t WebCore::WebContentMarkupReader::readPlainText(WebCore::WebContentMarkupReader *this, const WTF::String *a2)
{
  return 0;
}

uint64_t WebCore::WebContentMarkupReader::readDataBuffer()
{
  return 0;
}

_DWORD *WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(_DWORD *result, WTF::StringImpl *a2)
{
  WTF *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v2 = (WTF *)result;
  if (*result == 1)
  {
    WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)(result + 10), a2);
    v4 = (WTF::StringImpl *)*((_QWORD *)v2 + 4);
    *((_QWORD *)v2 + 4) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v3);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v3);
      else
        *(_DWORD *)v7 -= 2;
    }
    return (_DWORD *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*result;
  }
  return result;
}

WebCore::DeferredLoadingScope *WebCore::DeferredLoadingScope::DeferredLoadingScope(WebCore::DeferredLoadingScope *this, WebCore::LocalFrame *a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Page *v8;

  v4 = (unsigned int *)((char *)a2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *(_QWORD *)this = a2;
  v6 = *(_QWORD *)(*((_QWORD *)a2 + 37) + 720);
  if (!v6)
    v6 = WebCore::Document::ensureCachedResourceLoader(*((WebCore::Document **)a2 + 37), a2);
  ++*(_DWORD *)v6;
  *((_QWORD *)this + 1) = v6;
  *((_WORD *)this + 8) = 0;
  v7 = *((_QWORD *)a2 + 3);
  if (v7)
  {
    v8 = *(WebCore::Page **)(v7 + 8);
    if (*((_BYTE *)v8 + 339))
      goto LABEL_11;
  }
  else
  {
    if (MEMORY[0x153])
      goto LABEL_11;
    v8 = 0;
  }
  WebCore::Page::setDefersLoading(v8, 1);
  *((_BYTE *)this + 16) = 1;
  v6 = *((_QWORD *)this + 1);
LABEL_11:
  if (*(_BYTE *)(v6 + 273))
  {
    *(_BYTE *)(v6 + 273) = 0;
    *((_BYTE *)this + 17) = 1;
  }
  return this;
}

void sub_194B92314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;

  v12 = *v10;
  *v10 = 0;
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v16 = off_1E31FE290;
      v16[1] = v13;
      v17 = (uint64_t)v16;
      WTF::ensureOnMainThread();
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::replaceRichContentWithAttachments(WebCore::LocalFrame &,WebCore::DocumentFragment &,WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::AttachmentInsertionInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = 32 * v3;
    v6 = (uint64_t *)((char *)v4 + 16);
    do
    {
      v7 = v6[1];
      v6[1] = 0;
      if (v7)
      {
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
      }
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v6, a2);
      v8 = (WTF::StringImpl *)*(v6 - 1);
      *(v6 - 1) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = (WTF::StringImpl *)*(v6 - 2);
      *(v6 - 2) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v6 += 4;
      v5 -= 32;
    }
    while (v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  WTF::StringImpl *v25;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 == (WTF::StringImpl *)-1)
        goto LABEL_29;
      if (v11)
        break;
      v12 = v4 + 16 * v9;
      v13 = *(_DWORD **)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      if (v13)
      {
        if (v13[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
          v11 = *v10;
        }
        else
        {
          --v13[2];
        }
      }
      *v10 = 0;
      if (!v11)
        goto LABEL_29;
      if (*(_DWORD *)v11 == 2)
      {
LABEL_31:
        WTF::StringImpl::destroy(v11, v8);
        goto LABEL_29;
      }
      *(_DWORD *)v11 -= 2;
LABEL_29:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
    v14 = *a1;
    if (*a1)
      v15 = *(_DWORD *)(v14 - 8);
    else
      v15 = 0;
    v16 = 0;
    v17 = *((_DWORD *)v11 + 4) >> 8;
    do
    {
      v18 = v17 & v15;
      v17 = ++v16 + v18;
    }
    while (*(_QWORD *)(v14 + 16 * v18));
    v19 = v14 + 16 * v18;
    v20 = *(_DWORD **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = 0;
    if (v20)
    {
      if (v20[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
        v25 = *(WTF::StringImpl **)v19;
        *(_QWORD *)v19 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v8);
          else
            *(_DWORD *)v25 -= 2;
        }
        goto LABEL_23;
      }
      --v20[2];
    }
    *(_QWORD *)v19 = 0;
LABEL_23:
    v21 = *v10;
    *v10 = 0;
    *(_QWORD *)v19 = v21;
    v22 = v4 + 16 * v9;
    v23 = *(_QWORD *)(v22 + 8);
    *(_QWORD *)(v22 + 8) = 0;
    *(_QWORD *)(v19 + 8) = v23;
    v24 = *(_DWORD **)(v22 + 8);
    *(_QWORD *)(v22 + 8) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    v11 = *v10;
    *v10 = 0;
    if (!v11)
      goto LABEL_29;
    if (*(_DWORD *)v11 == 2)
      goto LABEL_31;
    *(_DWORD *)v11 -= 2;
    goto LABEL_29;
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

unint64_t WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  unsigned int *v7;
  unsigned int **v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int **v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 24 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (unsigned int **)((char *)v3 + 24 * v4);
        v9 = (uint64_t *)((char *)v3 + 16);
        do
        {
          v11 = (unsigned int **)(v9 - 2);
          v10 = *(v9 - 2);
          *(v9 - 2) = 0;
          *(_QWORD *)v7 = v10;
          v12 = *(v9 - 1);
          *(v9 - 1) = 0;
          *((_QWORD *)v7 + 1) = v12;
          v13 = *v9;
          *v9 = 0;
          *((_QWORD *)v7 + 2) = v13;
          WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v9, v6);
          v14 = (WTF::StringImpl *)*(v9 - 1);
          *(v9 - 1) = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v14 -= 2;
          }
          result = *v11;
          *v11 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v6);
            else
              *result -= 2;
          }
          v9 += 3;
          v7 += 6;
        }
        while (v11 + 3 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::replaceRichContentWithAttachments(WebCore::LocalFrame &,WebCore::DocumentFragment &,WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::AttachmentInsertionInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)a1[3] <= a3)
  {
    WTF::Vector<WebCore::replaceRichContentWithAttachments(WebCore::LocalFrame &,WebCore::DocumentFragment &,WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::AttachmentInsertionInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::replaceRichContentWithAttachments(WebCore::LocalFrame &,WebCore::DocumentFragment &,WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::AttachmentInsertionInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::replaceRichContentWithAttachments(WebCore::LocalFrame &,WebCore::DocumentFragment &,WTF::Vector<WTF::Ref<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::AttachmentInsertionInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int **v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(32 * v5));
      v6[2] = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        v11 = (unsigned int **)((char *)v7 + 32 * v8);
        v12 = (uint64_t *)((char *)v7 + 16);
        do
        {
          v14 = (unsigned int **)(v12 - 2);
          v13 = *(v12 - 2);
          *(v12 - 2) = 0;
          *(_QWORD *)v10 = v13;
          v15 = *(v12 - 1);
          *(v12 - 1) = 0;
          *((_QWORD *)v10 + 1) = v15;
          v16 = *v12;
          *v12 = 0;
          *((_QWORD *)v10 + 2) = v16;
          v17 = v12[1];
          v12[1] = 0;
          *((_QWORD *)v10 + 3) = v17;
          v18 = v12[1];
          v12[1] = 0;
          if (v18)
          {
            if (*(_DWORD *)(v18 + 24) == 2)
            {
              if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v18, v9);
            }
            else
            {
              *(_DWORD *)(v18 + 24) -= 2;
            }
          }
          WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v12, v9);
          v19 = (WTF::StringImpl *)*(v12 - 1);
          *(v12 - 1) = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v9);
            else
              *(_DWORD *)v19 -= 2;
          }
          result = *v14;
          *v14 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v9);
            else
              *result -= 2;
          }
          v12 += 4;
          v10 += 8;
        }
        while (v14 + 4 != v11);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          v6[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

void WebCore::mimeTypeFromContentType(WebCore *this, WTF **a2)
{
  const WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  MEMORY[0x19AEA5508](&v9, objc_msgSend((id)*MEMORY[0x1E0CEC638], "identifier"));
  v6 = WTF::equal(*a2, v9, v4);
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, v5);
      if (v6)
        goto LABEL_5;
      goto LABEL_7;
    }
    *(_DWORD *)v7 -= 2;
  }
  if (v6)
  {
LABEL_5:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = v9;
    goto LABEL_11;
  }
LABEL_7:
  if (WebCore::isDeclaredUTI((WebCore *)a2, v5))
  {
    WebCore::MIMETypeFromUTI((WebCore *)a2, (uint64_t)this);
    return;
  }
  v8 = *a2;
  if (*a2)
    *(_DWORD *)v8 += 2;
LABEL_11:
  *(_QWORD *)this = v8;
}

void sub_194B92B64(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::DeferredLoadingScope::~DeferredLoadingScope(WebCore::DeferredLoadingScope *this, void *a2)
{
  WebCore::CachedResourceLoader *v3;
  uint64_t v4;
  WebCore::Page *v5;
  WebCore::CachedResourceLoader *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;

  if (*((_BYTE *)this + 17))
  {
    v3 = (WebCore::CachedResourceLoader *)*((_QWORD *)this + 1);
    if (!*((_BYTE *)v3 + 273))
    {
      *((_BYTE *)v3 + 273) = 1;
      WebCore::CachedResourceLoader::reloadImagesIfNotDeferred(v3);
    }
  }
  if (*((_BYTE *)this + 16))
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 24);
    if (v4)
      v5 = *(WebCore::Page **)(v4 + 8);
    else
      v5 = 0;
    WebCore::Page::setDefersLoading(v5, 0);
  }
  v6 = (WebCore::CachedResourceLoader *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::CachedResourceLoader::~CachedResourceLoader(v6, a2);
      WTF::fastFree(v11, v12);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  v7 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v13 = off_1E31FE290;
      v13[1] = v8;
      v14 = v13;
      WTF::ensureOnMainThread();
      if (v14)
        (*(void (**)(_QWORD *))(*v14 + 8))(v14);
    }
  }
}

void sub_194B92C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebCore::PasteboardImage::~PasteboardImage(WebCore::PasteboardImage *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((unsigned int *)this + 21);
  if ((_DWORD)v4)
  {
    v5 = *((_QWORD *)this + 9);
    v6 = 16 * v4;
    do
    {
      v5 = std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>::~pair(v5, a2)+ 16;
      v6 -= 16;
    }
    while (v6);
  }
  v7 = (WTF *)*((_QWORD *)this + 9);
  if (v7)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v15 = *(unsigned int *)(v9 + 20);
      if ((_DWORD)v15)
      {
        v16 = *(_QWORD *)(v9 + 8);
        v17 = v16 + 16 * v15;
        do
        {
          v18 = *(unsigned int **)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          if (v18)
          {
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              v27 = v17;
              v28 = v16;
              v26 = v9;
              atomic_store(1u, v18);
              v21 = v18;
              v22 = v18[6];
              if ((_DWORD)v22 != -1)
                ((void (*)(char *, unsigned int *))off_1E3283A88[v22])(&v29, v18 + 2);
              v21[6] = -1;
              WTF::fastFree((WTF *)v21, a2);
              v9 = v26;
              v17 = v27;
              v16 = v28;
            }
          }
          v16 += 16;
        }
        while (v16 != v17);
      }
      v23 = *(WTF **)(v9 + 8);
      if ((WTF *)(v9 + 24) != v23 && v23 != 0)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        v25 = v9;
        WTF::fastFree(v23, a2);
        v9 = v25;
      }
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *(_DWORD **)this;
  *(_QWORD *)this = 0;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS9_SC_SG_SK_SR_SS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS9_SC_SG_SK_SR_SS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS9_SC_SG_SK_SR_SS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *result;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v5 = *(WTF::StringImpl ***)a2;
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS9_SC_SG_SK_SR_SS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS9_SC_SG_SK_SR_SS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS9_SC_SG_SK_SR_SS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS9_SC_SG_SK_SR_SS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::inlineSet<WTF::AtomString,WTF::AtomString>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, WTF::StringImpl **a4)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  int v13;
  int i;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::AtomString>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a3;
  v13 = *((_DWORD *)*a3 + 4) >> 8;
  for (i = 1; ; ++i)
  {
    v15 = v13 & v10;
    v16 = (WTF::StringImpl **)(v8 + 16 * v15);
    v17 = *v16;
    if (*v16 != (WTF::StringImpl *)-1)
      break;
    v11 = (WTF::StringImpl **)(v8 + 16 * v15);
LABEL_10:
    v13 = i + v15;
  }
  if (!v17)
  {
    if (v11)
    {
      *v11 = 0;
      v11[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v12 = *a3;
      v16 = v11;
    }
    *a3 = 0;
    v18 = *v16;
    *v16 = v12;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = *a4;
    *a4 = 0;
    result = v16[1];
    v16[1] = v19;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    v21 = *a2;
    if (*a2)
      v22 = *(_DWORD *)(v21 - 12) + 1;
    else
      v22 = 1;
    *(_DWORD *)(v21 - 12) = v22;
    v23 = *a2;
    if (*a2)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 <= 2 * v25)
      {
LABEL_25:
        result = (WTF::StringImpl *)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::AtomString>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(a2, v16);
        v16 = (WTF::StringImpl **)result;
        v23 = *a2;
        if (*a2)
          v26 = *(unsigned int *)(v23 - 4);
        else
          v26 = 0;
      }
    }
    else if (3 * v26 <= 4 * v25)
    {
      goto LABEL_25;
    }
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v23 + 16 * v26;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  if (v17 != v12)
    goto LABEL_10;
  if ((v9 & 1) != 0)
    v27 = 0;
  else
    v27 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v8 + 16 * v27;
  *(_BYTE *)(a1 + 16) = 0;
  v28 = v8 + 16 * v15;
  v29 = *a4;
  *a4 = 0;
  result = *(WTF::StringImpl **)(v28 + 8);
  *(_QWORD *)(v28 + 8) = v29;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__function::__func<WebCore::WebContentReader::readWebArchive(WebCore::SharedBuffer &)::$_0,std::allocator<WebCore::WebContentReader::readWebArchive(WebCore::SharedBuffer &)::$_0>,BOOL ()(WTF::String)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::WebContentReader::readWebArchive(WebCore::SharedBuffer &)::$_0,std::allocator<WebCore::WebContentReader::readWebArchive(WebCore::SharedBuffer &)::$_0>,BOOL ()(WTF::String)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3283B00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<WebCore::WebContentReader::readWebArchive(WebCore::SharedBuffer &)::$_0,std::allocator<WebCore::WebContentReader::readWebArchive(WebCore::SharedBuffer &)::$_0>,BOOL ()(WTF::String)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3283B00;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<WebCore::WebContentReader::readWebArchive(WebCore::SharedBuffer &)::$_0,std::allocator<WebCore::WebContentReader::readWebArchive(WebCore::SharedBuffer &)::$_0>,BOOL ()(WTF::String)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 280) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 688))(v1);
}

void std::__function::__func<WebCore::WebContentReader::readWebArchive(WebCore::SharedBuffer &)::$_1,std::allocator<WebCore::WebContentReader::readWebArchive(WebCore::SharedBuffer &)::$_1>,BOOL ()(WTF::String)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::WebContentReader::readWebArchive(WebCore::SharedBuffer &)::$_1,std::allocator<WebCore::WebContentReader::readWebArchive(WebCore::SharedBuffer &)::$_1>,BOOL ()(WTF::String)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3283B48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<WebCore::WebContentReader::readWebArchive(WebCore::SharedBuffer &)::$_1,std::allocator<WebCore::WebContentReader::readWebArchive(WebCore::SharedBuffer &)::$_1>,BOOL ()(WTF::String)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3283B48;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<WebCore::WebContentReader::readWebArchive(WebCore::SharedBuffer &)::$_1,std::allocator<WebCore::WebContentReader::readWebArchive(WebCore::SharedBuffer &)::$_1>,BOOL ()(WTF::String)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 280) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 688))(v1);
}

void std::__function::__func<WebCore::WebContentMarkupReader::readWebArchive(WebCore::SharedBuffer &)::$_0,std::allocator<WebCore::WebContentMarkupReader::readWebArchive(WebCore::SharedBuffer &)::$_0>,BOOL ()(WTF::String)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::WebContentMarkupReader::readWebArchive(WebCore::SharedBuffer &)::$_0,std::allocator<WebCore::WebContentMarkupReader::readWebArchive(WebCore::SharedBuffer &)::$_0>,BOOL ()(WTF::String)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3283B90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<WebCore::WebContentMarkupReader::readWebArchive(WebCore::SharedBuffer &)::$_0,std::allocator<WebCore::WebContentMarkupReader::readWebArchive(WebCore::SharedBuffer &)::$_0>,BOOL ()(WTF::String)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3283B90;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<WebCore::WebContentMarkupReader::readWebArchive(WebCore::SharedBuffer &)::$_0,std::allocator<WebCore::WebContentMarkupReader::readWebArchive(WebCore::SharedBuffer &)::$_0>,BOOL ()(WTF::String)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 280) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 688))(v1);
}

void std::__function::__func<WebCore::WebContentMarkupReader::readWebArchive(WebCore::SharedBuffer &)::$_1,std::allocator<WebCore::WebContentMarkupReader::readWebArchive(WebCore::SharedBuffer &)::$_1>,BOOL ()(WTF::String)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::WebContentMarkupReader::readWebArchive(WebCore::SharedBuffer &)::$_1,std::allocator<WebCore::WebContentMarkupReader::readWebArchive(WebCore::SharedBuffer &)::$_1>,BOOL ()(WTF::String)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3283BD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<WebCore::WebContentMarkupReader::readWebArchive(WebCore::SharedBuffer &)::$_1,std::allocator<WebCore::WebContentMarkupReader::readWebArchive(WebCore::SharedBuffer &)::$_1>,BOOL ()(WTF::String)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3283BD8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<WebCore::WebContentMarkupReader::readWebArchive(WebCore::SharedBuffer &)::$_1,std::allocator<WebCore::WebContentMarkupReader::readWebArchive(WebCore::SharedBuffer &)::$_1>,BOOL ()(WTF::String)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 280) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 688))(v1);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::WebContentReader::readHTML(WTF::String const&)::$_0,void,WebCore::DocumentFragment &>::call(uint64_t a1, WebCore::Node *a2)
{
  _QWORD *v2;
  uint64_t v3;
  WTF::String *v4;
  __n128 v5;
  void *v6;
  _QWORD *v7;
  unsigned int *result;
  _QWORD *v9;
  WebCore::Node *v10;

  *((_DWORD *)a2 + 6) += 2;
  v10 = a2;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3283C48;
  v9 = v2;
  WebCore::removeSubresourceURLAttributes((uint64_t)&v10, (unsigned __int8 *)&v9, v3, v4, v5);
  v7 = v9;
  v9 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  result = (unsigned int *)v10;
  v10 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

void sub_194B934F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a10)
  {
    if (*((_DWORD *)a10 + 6) == 2)
    {
      if ((*((_WORD *)a10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a10, a2);
    }
    else
    {
      *((_DWORD *)a10 + 6) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore16WebContentReader8readHTMLERKNS_6StringEENK3__0clERNS2_16DocumentFragmentEEUlRT_E_bJRKNS_3URLEEE4callESF_()
{
  return WTF::URL::protocolIs();
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::WebContentMarkupReader::readHTML(WTF::String const&)::$_0,void,WebCore::DocumentFragment &>::call(uint64_t a1, WebCore::Node *a2)
{
  _QWORD *v2;
  uint64_t v3;
  WTF::String *v4;
  __n128 v5;
  void *v6;
  _QWORD *v7;
  unsigned int *result;
  _QWORD *v9;
  WebCore::Node *v10;

  *((_DWORD *)a2 + 6) += 2;
  v10 = a2;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3283C98;
  v9 = v2;
  WebCore::removeSubresourceURLAttributes((uint64_t)&v10, (unsigned __int8 *)&v9, v3, v4, v5);
  v7 = v9;
  v9 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  result = (unsigned int *)v10;
  v10 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

void sub_194B93608(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a10)
  {
    if (*((_DWORD *)a10 + 6) == 2)
    {
      if ((*((_WORD *)a10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a10, a2);
    }
    else
    {
      *((_DWORD *)a10 + 6) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore22WebContentMarkupReader8readHTMLERKNS_6StringEENK3__0clERNS2_16DocumentFragmentEEUlRT_E_bJRKNS_3URLEEE4callESF_()
{
  return WTF::URL::protocolIs();
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = *((unsigned int *)v3 + 5);
      if ((_DWORD)v4)
      {
        v5 = 16 * v4;
        v6 = (WTF::StringImpl **)(*((_QWORD *)v3 + 1) + 8);
        do
        {
          v7 = *v6;
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
          v8 = *(v6 - 1);
          *(v6 - 1) = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, a2);
            else
              *(_DWORD *)v8 -= 2;
          }
          v6 += 2;
          v5 -= 16;
        }
        while (v5);
      }
      v9 = (WTF *)*((_QWORD *)v3 + 1);
      if (v9)
      {
        *((_QWORD *)v3 + 1) = 0;
        *((_DWORD *)v3 + 4) = 0;
        WTF::fastFree(v9, a2);
      }
      result = *(WTF::StringImpl **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 24);
    }
    while (v3 != a2);
  }
  return result;
}

JSC::VM *JSC::reifyStaticProperties<21u>(JSC::VM *result, uint64_t a2, uint64_t a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t i;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  for (i = 0; i != 840; i += 40)
  {
    v9 = *(_QWORD *)(a3 + i + 8);
    if (v9)
    {
      if (v9 == 2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v10 = v12;
      result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v12, a3 + i, (unsigned __int8 *)this);
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          result = (JSC::VM *)WTF::StringImpl::destroy(v10, v11);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSGPURenderPassEncoder::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
        else
          --v3[2];
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGPURenderPassEncoder::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPURenderPassEncoderPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPURenderPassEncoderPrototype::create(WebCore::JSGPURenderPassEncoderPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v5;
  unint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  int v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  int v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  int v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  JSC::Structure *v63;
  int v64;
  unint64_t v66;
  JSC::VM *v67;
  uint64_t SlowCase;
  WTF::StringImpl *v69[6];
  int v70;
  int v71;
  JSC::Structure *v72;
  int v73;

  v5 = (_QWORD *)((char *)this + 38904);
  v6 = *((_QWORD *)this + 4863);
  if (v6 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v6 = *((_QWORD *)this + 4865);
  if ((v6 & 1) == 0)
  {
    v66 = *(_QWORD *)(v6 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v6 + HIDWORD(v66);
    *((_QWORD *)this + 4865) = v6 + (int)v66;
LABEL_2:
    *v5 = v6 + 16;
    goto LABEL_3;
  }
  v67 = (JSC::VM *)a2;
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
  a2 = (unint64_t)v67;
  v6 = SlowCase;
LABEL_3:
  v7 = (int *)((char *)this + 93124);
  *(_DWORD *)v6 = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v8;
  *(_QWORD *)(v6 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<21u>(this, (uint64_t)&WebCore::JSGPURenderPassEncoder::s_info, (uint64_t)&WebCore::JSGPURenderPassEncoderPrototypeTableValues, (JSC::JSObject *)v6);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                         + 0x28));
  v10 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 472);
  v11 = (v10 & 0x1000000) == 0;
  if ((v10 & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v12 = v69[0];
    v13 = *v7;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v13;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v14);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 136))(v15) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v16 = v69[0];
    v17 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v17;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v18);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  v19 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 136))(v19) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v20 = v69[0];
    v21 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v21;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v22);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  v23 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 136))(v23) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v24 = v69[0];
    v25 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v25;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v26);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  v27 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 136))(v27) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v28 = v69[0];
    v29 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v29;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v30);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  v31 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 136))(v31) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v32 = v69[0];
    v33 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v33;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v34);
      else
        *(_DWORD *)v32 -= 2;
    }
  }
  v35 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 136))(v35) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v36 = v69[0];
    v37 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v37;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v38);
      else
        *(_DWORD *)v36 -= 2;
    }
  }
  v39 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 136))(v39) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v40 = v69[0];
    v41 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v41;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v42);
      else
        *(_DWORD *)v40 -= 2;
    }
  }
  v43 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 136))(v43) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v44 = v69[0];
    v45 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v45;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v46);
      else
        *(_DWORD *)v44 -= 2;
    }
  }
  v47 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 136))(v47) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v48 = v69[0];
    v49 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v49;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v50);
      else
        *(_DWORD *)v48 -= 2;
    }
  }
  v51 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 136))(v51) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v52 = v69[0];
    v53 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v53;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
        WTF::StringImpl::destroy(v52, v54);
      else
        *(_DWORD *)v52 -= 2;
    }
  }
  v55 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 136))(v55) + 472) & 0x1000000) != 0)
  {
    if (!v11)
      goto LABEL_56;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral();
    v56 = v69[0];
    v57 = *v7;
    *v7 = 1;
    LODWORD(v69[0]) = -1;
    WORD2(v69[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v57;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, v58);
      else
        *(_DWORD *)v56 -= 2;
    }
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE)), this, (JSC::JSObject *)v6);
LABEL_56:
  v59 = *(_QWORD *)(v5[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v61 = JSC::JSString::create((uint64_t)this, v69);
  v62 = v69[0];
  v69[0] = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v60);
    else
      *(_DWORD *)v62 -= 2;
  }
  v63 = (JSC::Structure *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE));
  v73 = *(_DWORD *)v6;
  v72 = v63;
  v64 = JSC::Structure::outOfLineCapacity(v63);
  v70 = 0;
  v71 = v64;
  v69[0] = (WTF::StringImpl *)&v71;
  v69[1] = (WTF::StringImpl *)v6;
  v69[2] = this;
  v69[3] = (WTF::StringImpl *)&v73;
  v69[4] = (WTF::StringImpl *)&v72;
  v69[5] = (WTF::StringImpl *)&v70;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v63, this, v59, 6, (uint64_t)v69);
  if ((*(_BYTE *)((16 * *(unsigned int *)v6) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v6, (uint64_t)this, v70, v61);
  *((_DWORD *)v63 + 4) |= 0x10u;
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPURenderPassEncoder>,(WebCore::DOMConstructorID)34>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 272);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPURenderPassEncoder>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPURenderPassEncoder::s_info
         + ~((_QWORD)&WebCore::JSGPURenderPassEncoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPURenderPassEncoder::s_info
                                                                        + ~((_QWORD)&WebCore::JSGPURenderPassEncoder::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPURenderPassEncoder::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPURenderPassEncoder::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPURenderPassEncoderPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPURenderPassEncoderPrototype::create((WebCore::JSGPURenderPassEncoderPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPURenderPassEncoder::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPURenderPassEncoder::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 272) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPURenderPassEncoderConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPURenderPassEncoderPrototype::s_info != (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPURenderPassEncoder>,(WebCore::DOMConstructorID)34>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPURenderPassEncoder_label(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 16);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

BOOL WebCore::setJSGPURenderPassEncoder_label(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  int v17;
  char v18;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSGPURenderPassEncoder::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSGPURenderPassEncoder::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v16);
  v10 = v17;
  v11 = v17 == 0;
  if (!v17)
  {
    v12 = v16;
    v16 = 0;
    v13 = *(_QWORD **)(v8 + 8);
    v14 = (WTF::StringImpl *)v13[2];
    v13[2] = v12;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    (*(void (**)(_QWORD *, _QWORD *))(*v13 + 176))(v13, v13 + 2);
    v10 = v17;
  }
  if (v10 != -1)
    ((void (*)(char *, uint64_t *))off_1E328A618[v10])(&v18, &v16);
  return v11;
}

uint64_t WebCore::JSGPURenderPassEncoderOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPURenderPassEncoderOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::GPURenderPassEncoder>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSGPURenderPassEncoder::s_info
         + ~((_QWORD)&WebCore::JSGPURenderPassEncoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPURenderPassEncoder::s_info
                                                                        + ~((_QWORD)&WebCore::JSGPURenderPassEncoder::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSGPURenderPassEncoder::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSGPURenderPassEncoder::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSGPURenderPassEncoderPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPURenderPassEncoderPrototype::create((WebCore::JSGPURenderPassEncoderPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSGPURenderPassEncoder::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPURenderPassEncoder::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 272);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 272))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 272);
    *(_QWORD *)(v36 + 272) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 272);
  *(_QWORD *)(v32 + 272) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3358F8 & 1) == 0)
  {
    qword_1EE3358F0 = (uint64_t)&off_1E3289F80;
    byte_1EE3358F8 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE3358F0;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::convertDictionary<WebCore::GPURenderPassTimestampWrites>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  JSC::VM *v28;
  WTF::StringImpl *v29;

  v28 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_24:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v28, "querySet", 9, "GPURenderPassTimestampWrites", 29, "GPUQuerySet", 12);
    goto LABEL_25;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
LABEL_36:
    result = JSC::throwTypeError();
    goto LABEL_25;
  }
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v29);
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v7);
    else
      *(_DWORD *)v29 -= 2;
  }
  if (*((_DWORD *)v28 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v28);
    if ((result & 1) != 0)
      goto LABEL_25;
  }
  if (v8 == 10)
  {
    v9 = -1;
  }
  else
  {
    result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v8, &v29);
    if ((unint64_t)v29 >> 32)
      goto LABEL_25;
    v9 = (unint64_t)v29 | 0xFFFFFFFF00000000;
  }
  WTF::AtomStringImpl::addLiteral();
  v11 = v29;
  v13 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v29);
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (*((_DWORD *)v28 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v28);
    if ((result & 1) != 0)
      goto LABEL_25;
  }
  if (v13 != 10)
  {
    result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v13, &v29);
    if (!((unint64_t)v29 >> 32))
    {
      v9 = v9 | ((unint64_t)v29 << 32);
      goto LABEL_19;
    }
LABEL_25:
    v17 = 1;
    goto LABEL_26;
  }
LABEL_19:
  WTF::AtomStringImpl::addLiteral();
  v14 = v29;
  v16 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v29);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (*((_DWORD *)v28 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v28);
    if ((result & 1) != 0)
      goto LABEL_25;
  }
  if (v16 == 10)
    goto LABEL_24;
  v29 = a2[7];
  if ((v16 & 0xFFFE000000000002) != 0)
    goto LABEL_36;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C) != 0;
  if ((_DWORD)v18)
  {
    v20 = 16 * v18;
    if ((char **)v20 != &WebCore::JSGPUQuerySet::s_info)
    {
      do
      {
        v20 = *(_QWORD *)(v20 + 16);
        v19 = v20 != 0;
      }
      while ((char **)v20 != &WebCore::JSGPUQuerySet::s_info && v20 != 0);
    }
  }
  if (!v19)
    goto LABEL_36;
  v22 = *(_QWORD *)(v16 + 24);
  if (!v22)
    goto LABEL_36;
  result = *(_QWORD *)(v22 + 8);
  if (result)
    goto LABEL_58;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = v22;
  v24 = *(unsigned int **)(v22 + 8);
  *(_QWORD *)(v22 + 8) = result;
  if (!v24)
    goto LABEL_58;
  do
  {
    v25 = __ldaxr(v24);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v24));
  if (!v26)
  {
    atomic_store(1u, v24);
    WTF::fastFree((WTF *)v24, v23);
  }
  result = *(_QWORD *)(v22 + 8);
  if (result)
  {
LABEL_58:
    do
      v27 = __ldaxr((unsigned int *)result);
    while (__stlxr(v27 + 1, (unsigned int *)result));
  }
  v17 = 0;
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v9;
LABEL_26:
  *(_DWORD *)(a3 + 16) = v17;
  return result;
}

uint64_t WebCore::JSGPURenderPipeline::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
        else
          --v3[2];
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGPURenderPipeline::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPURenderPipelinePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPURenderPipelinePrototype::create(WebCore::JSGPURenderPipelinePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v5;
  unint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  JSC::Structure *v22;
  int v23;
  unint64_t v25;
  JSC::VM *v26;
  uint64_t SlowCase;
  WTF::StringImpl *v28[6];
  int v29;
  int v30;
  JSC::Structure *v31;
  int v32;

  v5 = (_QWORD *)((char *)this + 38904);
  v6 = *((_QWORD *)this + 4863);
  if (v6 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v6 = *((_QWORD *)this + 4865);
  if ((v6 & 1) == 0)
  {
    v25 = *(_QWORD *)(v6 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v6 + HIDWORD(v25);
    *((_QWORD *)this + 4865) = v6 + (int)v25;
LABEL_2:
    *v5 = v6 + 16;
    goto LABEL_3;
  }
  v26 = (JSC::VM *)a2;
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
  a2 = (unint64_t)v26;
  v6 = SlowCase;
LABEL_3:
  v7 = (int *)((char *)this + 93124);
  *(_DWORD *)v6 = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v8;
  *(_QWORD *)(v6 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSGPURenderPipeline::s_info, &WebCore::JSGPURenderPipelinePrototypeTableValues, (JSC::JSObject *)v6);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                         + 0x28));
  v10 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 472);
  if ((v10 & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v11 = v28[0];
    v12 = *v7;
    *v7 = 1;
    LODWORD(v28[0]) = -1;
    WORD2(v28[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v12;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v13);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  v14 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 136))(v14) + 472) & 0x1000000) != 0)
  {
    if ((v10 & 0x1000000) != 0)
      goto LABEL_16;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral();
    v15 = v28[0];
    v16 = *v7;
    *v7 = 1;
    LODWORD(v28[0]) = -1;
    WORD2(v28[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v16;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v17);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE)), this, (JSC::JSObject *)v6);
LABEL_16:
  v18 = *(_QWORD *)(v5[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v20 = JSC::JSString::create((uint64_t)this, v28);
  v21 = v28[0];
  v28[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v19);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (JSC::Structure *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE));
  v32 = *(_DWORD *)v6;
  v31 = v22;
  v23 = JSC::Structure::outOfLineCapacity(v22);
  v29 = 0;
  v30 = v23;
  v28[0] = (WTF::StringImpl *)&v30;
  v28[1] = (WTF::StringImpl *)v6;
  v28[2] = this;
  v28[3] = (WTF::StringImpl *)&v32;
  v28[4] = (WTF::StringImpl *)&v31;
  v28[5] = (WTF::StringImpl *)&v29;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v22, this, v18, 6, (uint64_t)v28);
  if ((*(_BYTE *)((16 * *(unsigned int *)v6) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v6, (uint64_t)this, v29, v20);
  *((_DWORD *)v22 + 4) |= 0x10u;
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPURenderPipeline>,(WebCore::DOMConstructorID)35>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 280);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPURenderPipeline>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPURenderPipeline::s_info
         + ~((_QWORD)&WebCore::JSGPURenderPipeline::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPURenderPipeline::s_info
                                                                     + ~((_QWORD)&WebCore::JSGPURenderPipeline::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPURenderPipeline::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPURenderPipeline::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPURenderPipelinePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPURenderPipelinePrototype::create((WebCore::JSGPURenderPipelinePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPURenderPipeline::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPURenderPipeline::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 280) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPURenderPipelineConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPURenderPipelinePrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPURenderPipeline>,(WebCore::DOMConstructorID)35>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPURenderPipeline_label(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 16);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

BOOL WebCore::setJSGPURenderPipeline_label(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  int v17;
  char v18;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSGPURenderPipeline::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSGPURenderPipeline::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v16);
  v10 = v17;
  v11 = v17 == 0;
  if (!v17)
  {
    v12 = v16;
    v16 = 0;
    v13 = *(_QWORD **)(v8 + 8);
    v14 = (WTF::StringImpl *)v13[2];
    v13[2] = v12;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    (*(void (**)(_QWORD *, _QWORD *))(*v13 + 24))(v13, v13 + 2);
    v10 = v17;
  }
  if (v10 != -1)
    ((void (*)(char *, uint64_t *))off_1E328A618[v10])(&v18, &v16);
  return v11;
}

uint64_t WebCore::JSGPURenderPipelineOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPURenderPipelineOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::GPURenderPipeline>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSGPURenderPipeline::s_info
         + ~((_QWORD)&WebCore::JSGPURenderPipeline::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPURenderPipeline::s_info
                                                                     + ~((_QWORD)&WebCore::JSGPURenderPipeline::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSGPURenderPipeline::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSGPURenderPipeline::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSGPURenderPipelinePrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPURenderPipelinePrototype::create((WebCore::JSGPURenderPipelinePrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSGPURenderPipeline::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPURenderPipeline::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 280);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 280))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 280);
    *(_QWORD *)(v36 + 280) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 280);
  *(_QWORD *)(v32 + 280) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335908 & 1) == 0)
  {
    qword_1EE335900 = (uint64_t)&off_1E3289FB0;
    byte_1EE335908 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335900;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

WTF::StringImpl *WebCore::convertDictionary<WebCore::GPURenderPipelineDescriptor>@<X0>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *a2@<X0>, uint64_t a3@<X8>)
{
  unint64_t v5;
  JSC::Structure *Object;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *result;
  uint64_t v27;
  _BOOL4 v28;
  char **v29;
  BOOL v30;
  _DWORD *v32;
  int v33;
  WTF::StringImpl *v34;
  unsigned __int16 v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  JSC::JSCell *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  JSC::JSCell *v41;
  int v42;
  WTF *v43;
  WTF::StringImpl *v44;
  WTF *v45;
  unsigned int v46;
  unsigned int v47;
  WTF *v48;
  unint64_t v49;
  WTF::StringImpl *v50;
  WTF *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  JSC::JSCell *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  JSC::JSCell *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  JSC::Structure *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  unsigned __int8 *v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  unsigned int v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  unint64_t v83;
  WTF::StringImpl *v84;
  void *v85;
  WTF *v86;
  uint64_t v87;
  char *v88;
  WTF *v89;
  WTF *v90;
  int v91;
  uint64_t v92;
  _BOOL4 v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  WTF::StringImpl *v105;
  uint64_t v106;
  WTF *v107;
  uint64_t v108;
  JSValue v109;
  int i;
  unsigned int v111;
  JSC::JSCell *IndexQuickly;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  int v115;
  uint64_t v116;
  JSC::JSCell *v118;
  uint64_t v119;
  unint64_t v120;
  WTF *v121;
  uint64_t v122;
  uint64_t v123;
  WTF *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  uint64_t v127;
  uint64_t (**v128)();
  int hasExceptionsAfterHandlingTraps;
  uint64_t v130;
  char *v131;
  WTF *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134[2];
  _BYTE v135[32];
  WTF::StringImpl *v136;
  int v137;
  WTF::StringImpl *v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  char v142;
  char v143;
  __int128 v144;
  WTF *v145[2];
  int v146;
  __int16 v147;
  char v148;
  __int128 v149;
  _BYTE v150[28];
  char v151;
  WTF::StringImpl *v152;
  int v153;
  char v154;
  WTF *v155;
  WTF::StringImpl *v156;
  char v157;
  WTF *v158;
  uint64_t v159;
  WTF *v160;
  unint64_t v161;
  char v162;
  JSC::VM *v163;
  unsigned __int128 v164;
  unsigned int v165;
  unsigned int *v166;
  WTF::StringImpl *v167;
  char v168;
  unsigned __int128 v169;
  __int128 v170;
  JSC::VM *v171;
  uint64_t v172;
  _DWORD *v173;
  int v174;
  int v175;
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  v163 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v5 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
  }
  else if (((unint64_t)this & 0xFFFE000000000002) != 0
         || (Object = (JSC::Structure *)JSC::JSCell::getObject(this)) == 0)
  {
    result = (WTF::StringImpl *)JSC::throwTypeError();
    *(_DWORD *)(a3 + 216) = 1;
    return result;
  }
  v138 = 0;
  v139 = 0;
  v140 = 0;
  v141 = 0;
  v142 = 0;
  v143 = 0;
  v148 = 0;
  LOBYTE(v149) = 0;
  v151 = 0;
  LOBYTE(v152) = 0;
  v154 = 0;
  LOBYTE(v155) = 0;
  v162 = 0;
  v144 = 0u;
  *(_OWORD *)v145 = 0u;
  LOBYTE(v146) = 0;
  if (v5 == 2)
    goto LABEL_22;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(Object, a2, (unint64_t)v134[0]);
  if (v134[0])
  {
    if (*(_DWORD *)v134[0] == 2)
      WTF::StringImpl::destroy(v134[0], v7);
    else
      *(_DWORD *)v134[0] -= 2;
  }
  if (*((_DWORD *)v163 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v163))
    goto LABEL_23;
  if (v8 == 10)
    goto LABEL_17;
  WebCore::valueToUSVString(a2, v8, (uint64_t)v134);
  v10 = (int)v134[1];
  if (LODWORD(v134[1]))
  {
    *(_DWORD *)(a3 + 216) = 1;
    v13 = v10;
  }
  else
  {
    v11 = v134[0];
    v134[0] = 0;
    v12 = v138;
    v138 = v11;
    if (!v12)
    {
      v13 = 0;
      goto LABEL_15;
    }
    if (*(_DWORD *)v12 != 2)
    {
      v13 = 0;
      *(_DWORD *)v12 -= 2;
LABEL_15:
      ((void (*)(unsigned int **, WTF::StringImpl **))off_1E328A618[v13])(&v166, v134);
      goto LABEL_16;
    }
    WTF::StringImpl::destroy(v12, v9);
    v13 = (int)v134[1];
  }
  if (v13 != -1)
    goto LABEL_15;
LABEL_16:
  if (!v10)
  {
LABEL_17:
    WTF::AtomStringImpl::addLiteral();
    v14 = v134[0];
    v16 = JSC::JSObject::get(Object, a2, (unint64_t)v134[0]);
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v15);
      else
        *(_DWORD *)v14 -= 2;
    }
    if (*((_DWORD *)v163 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v163))
      goto LABEL_23;
    if (v16 == 10)
    {
LABEL_22:
      WebCore::throwRequiredMemberTypeError((int)a2, (int)&v163, "layout", 7, "GPURenderPipelineDescriptor", 28, "(GPUPipelineLayout or GPUAutoLayoutMode)", 41);
LABEL_23:
      *(_DWORD *)(a3 + 216) = 1;
      goto LABEL_24;
    }
    if ((v16 & 0xFFFE000000000002) == 0)
    {
      v27 = *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C);
      v28 = *(_DWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C) != 0;
      v29 = (char **)(16 * v27);
      if ((_DWORD)v27)
        v30 = v29 == &WebCore::JSGPUPipelineLayout::s_info;
      else
        v30 = 1;
      if (!v30)
      {
        do
        {
          v29 = (char **)v29[2];
          v28 = v29 != 0;
        }
        while (v29 != &WebCore::JSGPUPipelineLayout::s_info && v29 != 0);
      }
      if (v28)
      {
        v32 = *(_DWORD **)(v16 + 24);
        if (v32)
        {
          v33 = 0;
          ++*v32;
          v173 = v32;
          v174 = 0;
          goto LABEL_67;
        }
      }
    }
    v134[0] = *((WTF::StringImpl **)a2 + 7);
    v34 = v134[0];
    v35 = WebCore::parseEnumeration<WebCore::GPUAutoLayoutMode>(a2, v16);
    if (!*((_DWORD *)v34 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v34) & 1) == 0)
    {
      if (v35 > 0xFFu)
      {
        LOBYTE(v173) = v35;
        v33 = 1;
        v174 = 1;
LABEL_67:
        v175 = 0;
        LOBYTE(v134[0]) = 0;
        LODWORD(v134[1]) = -1;
        ((void (*)(unsigned int **, WTF::StringImpl **, _DWORD **))off_1E328A6B0[v33])(&v166, v134, &v173);
        LODWORD(v134[1]) = v33;
        v166 = (unsigned int *)&v139;
        ((void (*)(unsigned int **))off_1E328A6C0[v33])(&v166);
        if (LODWORD(v134[1]) != -1)
          ((void (*)(unsigned int **, WTF::StringImpl **))off_1E328A6A0[LODWORD(v134[1])])(&v166, v134);
        WTF::AtomStringImpl::addLiteral();
        v36 = v134[0];
        v38 = (JSC::JSCell *)JSC::JSObject::get(Object, a2, (unint64_t)v134[0]);
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v37);
          else
            *(_DWORD *)v36 -= 2;
        }
        if (*((_DWORD *)v163 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v163))
          goto LABEL_142;
        if (v38 != (JSC::JSCell *)10)
        {
          WebCore::convertDictionary<WebCore::GPUDepthStencilState>(v38, (JSC::VM **)a2, (uint64_t)v134);
          if (*(_DWORD *)&v135[28])
            goto LABEL_142;
          v149 = *(_OWORD *)v134;
          *(_OWORD *)v150 = *(_OWORD *)v135;
          *(_OWORD *)&v150[12] = *(_OWORD *)&v135[12];
          if (!v151)
            v151 = 1;
        }
        WTF::AtomStringImpl::addLiteral();
        v39 = v134[0];
        v41 = (JSC::JSCell *)JSC::JSObject::get(Object, a2, (unint64_t)v134[0]);
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v40);
          else
            *(_DWORD *)v39 -= 2;
        }
        if (*((_DWORD *)v163 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v163))
          goto LABEL_142;
        if (v41 != (JSC::JSCell *)10)
        {
          WebCore::convertDictionary<WebCore::GPUFragmentState>(v41, (JSC::VM **)a2, (uint64_t)v134);
          v42 = v137;
          if (v137)
          {
            *(_DWORD *)(a3 + 216) = 1;
            v58 = v42;
          }
          else
          {
            v43 = v134[0];
            v134[0] = 0;
            v166 = (unsigned int *)v43;
            LOBYTE(v167) = 0;
            v168 = 0;
            if (v135[0])
            {
              v44 = v134[1];
              v134[1] = 0;
              v167 = v44;
              v168 = 1;
            }
            v45 = *(WTF **)&v135[8];
            memset(&v135[8], 0, 24);
            v169 = __PAIR128__(*(unint64_t *)&v135[16], (unint64_t)v45);
            *(_QWORD *)&v170 = *(_QWORD *)&v135[24];
            v46 = v136;
            v47 = HIDWORD(v136);
            v136 = 0;
            *((_QWORD *)&v170 + 1) = __PAIR64__(v47, v46);
            if (v162)
            {
              WebCore::GPUProgrammableStage::operator=((uint64_t)&v155, (uint64_t *)&v166);
              v48 = v160;
              if (v160)
              {
                v160 = 0;
                LODWORD(v161) = 0;
                WTF::fastFree(v48, v9);
              }
              v49 = *((_QWORD *)&v170 + 1);
              v160 = (WTF *)v170;
              v170 = 0uLL;
              v161 = v49;
            }
            else
            {
              v166 = 0;
              v155 = v43;
              LOBYTE(v156) = 0;
              v157 = 0;
              if (v135[0])
              {
                v50 = v167;
                v167 = 0;
                v156 = v50;
                v157 = 1;
              }
              v169 = 0uLL;
              v158 = v45;
              v159 = *(_QWORD *)&v135[16];
              v170 = 0uLL;
              v160 = *(WTF **)&v135[24];
              v161 = __PAIR64__(v47, v46);
              v162 = 1;
            }
            v51 = (WTF *)v169;
            if (HIDWORD(v169))
            {
              v52 = 16 * HIDWORD(v169);
              do
              {
                v53 = *(WTF::StringImpl **)v51;
                *(_QWORD *)v51 = 0;
                if (v53)
                {
                  if (*(_DWORD *)v53 == 2)
                    WTF::StringImpl::destroy(v53, v9);
                  else
                    *(_DWORD *)v53 -= 2;
                }
                v51 = (WTF *)((char *)v51 + 16);
                v52 -= 16;
              }
              while (v52);
              v51 = (WTF *)v169;
            }
            if (v51)
            {
              *(_QWORD *)&v169 = 0;
              DWORD2(v169) = 0;
              WTF::fastFree(v51, v9);
            }
            if (v168)
            {
              v54 = v167;
              v167 = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, v9);
                else
                  *(_DWORD *)v54 -= 2;
              }
            }
            v55 = v166;
            v166 = 0;
            if (v55)
            {
              do
              {
                v56 = __ldaxr(v55);
                v57 = v56 - 1;
              }
              while (__stlxr(v57, v55));
              if (!v57)
              {
                atomic_store(1u, v55);
                WTF::fastFree((WTF *)v55, v9);
              }
            }
            v58 = v137;
          }
          if (v58 != -1)
            (*(&off_1E328A6D0 + v58))((int)&v166, (WebCore::GPUFragmentState *)v134);
          if (v42)
          {
LABEL_183:
            v91 = v175;
            if (v175 == -1)
              goto LABEL_24;
LABEL_184:
            ((void (*)(WTF::StringImpl **, _DWORD **))off_1E328A6F0[v91])(v134, &v173);
            goto LABEL_24;
          }
        }
        WTF::AtomStringImpl::addLiteral();
        v59 = v134[0];
        v61 = (JSC::JSCell *)JSC::JSObject::get(Object, a2, (unint64_t)v134[0]);
        if (v59)
        {
          if (*(_DWORD *)v59 == 2)
            WTF::StringImpl::destroy(v59, v60);
          else
            *(_DWORD *)v59 -= 2;
        }
        if (*((_DWORD *)v163 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v163))
          goto LABEL_142;
        if (v61 != (JSC::JSCell *)10)
        {
          WebCore::convertDictionary<WebCore::GPUMultisampleState>(v61, (unint64_t)a2, (uint64_t)v134);
          if (HIDWORD(v134[1]))
            goto LABEL_142;
          if (v154)
          {
            LOBYTE(v153) = v134[1];
          }
          else
          {
            v153 = (int)v134[1];
            v154 = 1;
          }
          v152 = v134[0];
        }
        WTF::AtomStringImpl::addLiteral();
        v62 = v134[0];
        v64 = (JSC::JSCell *)JSC::JSObject::get(Object, a2, (unint64_t)v134[0]);
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
            WTF::StringImpl::destroy(v62, v63);
          else
            *(_DWORD *)v62 -= 2;
        }
        if (*((_DWORD *)v163 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v163))
          goto LABEL_142;
        if (v64 == (JSC::JSCell *)10)
        {
LABEL_136:
          WTF::AtomStringImpl::addLiteral();
          v65 = v134[0];
          v67 = JSC::JSObject::get(Object, a2, (unint64_t)v134[0]);
          if (v65)
          {
            if (*(_DWORD *)v65 == 2)
              WTF::StringImpl::destroy(v65, v66);
            else
              *(_DWORD *)v65 -= 2;
          }
          if (*((_DWORD *)v163 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v163))
            goto LABEL_142;
          if (v67 == 10)
          {
            WebCore::throwRequiredMemberTypeError((int)a2, (int)&v163, "vertex", 7, "GPURenderPipelineDescriptor", 28, "GPUVertexState", 15);
            goto LABEL_142;
          }
          v171 = (JSC::VM *)*((_QWORD *)a2 + 7);
          if ((v67 & 0xFFFFFFFFFFFFFFF7) == 2)
          {
            v166 = 0;
            LOBYTE(v167) = 0;
            v168 = 0;
            v169 = 0u;
            v170 = 0u;
LABEL_166:
            WebCore::throwRequiredMemberTypeError((int)a2, (int)&v171, "module", 7, "GPUVertexState", 15, "GPUShaderModule", 16);
LABEL_167:
            v137 = 1;
            goto LABEL_168;
          }
          if ((v67 & 0xFFFE000000000002) != 0 || (v68 = JSC::JSCell::getObject((JSC::JSCell *)v67)) == 0)
          {
            JSC::throwTypeError();
            v80 = 1;
            v137 = 1;
            goto LABEL_263;
          }
          v69 = (JSC::Structure *)v68;
          v166 = 0;
          LOBYTE(v167) = 0;
          v168 = 0;
          v169 = 0u;
          v170 = 0u;
          WTF::AtomStringImpl::addLiteral();
          v70 = v134[0];
          v72 = (unsigned __int8 *)JSC::JSObject::get(v69, a2, (unint64_t)v134[0]);
          if (v70)
          {
            if (*(_DWORD *)v70 == 2)
              WTF::StringImpl::destroy(v70, v71);
            else
              *(_DWORD *)v70 -= 2;
          }
          if (*((_DWORD *)v171 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v171))
            goto LABEL_167;
          if (v72 != (unsigned __int8 *)10)
          {
            WebCore::Converter<WebCore::IDLRecord<WebCore::IDLUSVString,WebCore::IDLDouble>>::convertRecord<>((uint64_t)a2, v72, (uint64_t)&v164);
            v74 = v165;
            if (v165)
            {
              v137 = 1;
              if (v165 == -1)
                goto LABEL_168;
              v128 = off_1E328B4E8;
              goto LABEL_310;
            }
            v169 = v164;
          }
          WTF::AtomStringImpl::addLiteral();
          v75 = v134[0];
          v77 = JSC::JSObject::get(v69, a2, (unint64_t)v134[0]);
          if (v75)
          {
            if (*(_DWORD *)v75 == 2)
              WTF::StringImpl::destroy(v75, v76);
            else
              *(_DWORD *)v75 -= 2;
          }
          if (*((_DWORD *)v171 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v171))
            goto LABEL_167;
          if (v77 == 10)
          {
LABEL_161:
            WTF::AtomStringImpl::addLiteral();
            v78 = v134[0];
            v79 = JSC::JSObject::get(v69, a2, (unint64_t)v134[0]);
            if (v78)
            {
              if (*(_DWORD *)v78 == 2)
                WTF::StringImpl::destroy(v78, v73);
              else
                *(_DWORD *)v78 -= 2;
            }
            if (*((_DWORD *)v171 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v171))
              goto LABEL_167;
            if (v79 == 10)
              goto LABEL_166;
            v134[0] = *((WTF::StringImpl **)a2 + 7);
            if ((v79 & 0xFFFE000000000002) != 0)
              goto LABEL_197;
            v92 = *(unsigned int *)(16 * (*(_DWORD *)v79 & 0xFFFFFFFE) + 0x4C);
            v93 = *(_DWORD *)(16 * (*(_DWORD *)v79 & 0xFFFFFFFE) + 0x4C) != 0;
            if ((_DWORD)v92)
            {
              v94 = 16 * v92;
              if ((char **)v94 != &WebCore::JSGPUShaderModule::s_info)
              {
                do
                {
                  v94 = *(_QWORD *)(v94 + 16);
                  v93 = v94 != 0;
                }
                while ((char **)v94 != &WebCore::JSGPUShaderModule::s_info && v94 != 0);
              }
            }
            if (!v93 || (v96 = *(_QWORD *)(v79 + 24)) == 0)
            {
LABEL_197:
              JSC::throwTypeError();
              goto LABEL_167;
            }
            v97 = *(_QWORD *)(v96 + 8);
            if (v97)
              goto LABEL_326;
            v97 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v97 = 1;
            *(_QWORD *)(v97 + 8) = v96;
            v98 = *(unsigned int **)(v96 + 8);
            *(_QWORD *)(v96 + 8) = v97;
            if (!v98)
              goto LABEL_326;
            do
            {
              v99 = __ldaxr(v98);
              v100 = v99 - 1;
            }
            while (__stlxr(v100, v98));
            if (!v100)
            {
              atomic_store(1u, v98);
              WTF::fastFree((WTF *)v98, v73);
            }
            v97 = *(_QWORD *)(v96 + 8);
            if (v97)
            {
LABEL_326:
              do
                v101 = __ldaxr((unsigned int *)v97);
              while (__stlxr(v101 + 1, (unsigned int *)v97));
            }
            v102 = v166;
            v166 = (unsigned int *)v97;
            if (v102)
            {
              do
              {
                v103 = __ldaxr(v102);
                v104 = v103 - 1;
              }
              while (__stlxr(v104, v102));
              if (!v104)
              {
                atomic_store(1u, v102);
                WTF::fastFree((WTF *)v102, v73);
              }
            }
            WTF::AtomStringImpl::addLiteral();
            v105 = v134[0];
            v106 = JSC::JSObject::get(v69, a2, (unint64_t)v134[0]);
            if (v105)
            {
              if (*(_DWORD *)v105 == 2)
                WTF::StringImpl::destroy(v105, v73);
              else
                *(_DWORD *)v105 -= 2;
            }
            if (*((_DWORD *)v171 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v171))
              goto LABEL_167;
            if (v106 == 10)
            {
              v107 = 0;
              v165 = 0;
              v133 = 0;
              goto LABEL_294;
            }
            v108 = *((_QWORD *)a2 + 7);
            v172 = v108;
            if ((v106 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v106 + 5) <= 0x16u)
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              JSC::throwTypeError();
              v114 = v134[0];
              v134[0] = 0;
              if (v114)
              {
                if (*(_DWORD *)v114 == 2)
                  WTF::StringImpl::destroy(v114, v113);
                else
                  *(_DWORD *)v114 -= 2;
              }
              v165 = 1;
            }
            else
            {
              v134[0] = 0;
              v134[1] = 0;
              if (JSC::getIterationMode() == 2)
              {
                for (i = 1; ; ++i)
                {
                  v111 = (*(_BYTE *)(v106 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v106 + 8) - 8) : 0;
                  if (i - 1 >= v111)
                    break;
                  IndexQuickly = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v106, i - 1, 0);
                  if (!IndexQuickly)
                    IndexQuickly = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)v106, a2, (i - 1));
                  if (*(_DWORD *)(v108 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v108) & 1) != 0)
                    break;
                  WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLNullable<WebCore::IDLDictionary<WebCore::GPUVertexBufferLayout>>>::convert((JSC::VM **)a2, IndexQuickly, (unsigned int *)v134);
                  if (*(_QWORD *)(v108 + 16))
                  {
                    v119 = JSC::JSArrayIterator::create();
                    v120 = i | 0xFFFE000000000000;
                    if (i < 0)
                      v120 = COERCE__INT64((double)i) + 0x2000000000000;
                    *(_QWORD *)(v119 + 16) = v120;
                    goto LABEL_290;
                  }
                }
              }
              else
              {
                JSC::iteratorForIterable(a2, (JSC::JSGlobalObject *)v106, v109);
                if (!*(_DWORD *)(v108 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v108) & 1) == 0)
                {
                  while (1)
                  {
                    v116 = JSC::iteratorStep();
                    if (*(_QWORD *)(v108 + 16) || v116 == 6)
                      break;
                    v118 = (JSC::JSCell *)JSC::iteratorValue();
                    if (*(_DWORD *)(v108 + 80))
                    {
                      if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v108) & 1) != 0)
                        break;
                    }
                    WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLNullable<WebCore::IDLDictionary<WebCore::GPUVertexBufferLayout>>>::convert((JSC::VM **)a2, v118, (unsigned int *)v134);
                    if (*(_QWORD *)(v108 + 16))
                    {
LABEL_290:
                      JSC::iteratorClose();
                      break;
                    }
                  }
                }
              }
              if (!*(_DWORD *)(v108 + 80))
              {
                v107 = v134[0];
LABEL_293:
                v133 = v134[1];
                v165 = 0;
LABEL_294:
                v164 = 0uLL;
                v121 = (WTF *)v170;
                if (HIDWORD(v170))
                {
                  v122 = 40 * HIDWORD(v170);
                  v123 = v170 + 16;
                  do
                  {
                    if (*(_BYTE *)(v123 + 16))
                    {
                      v124 = *(WTF **)v123;
                      if (*(_QWORD *)v123)
                      {
                        *(_QWORD *)v123 = 0;
                        *(_DWORD *)(v123 + 8) = 0;
                        WTF::fastFree(v124, v73);
                      }
                    }
                    v123 += 40;
                    v122 -= 40;
                  }
                  while (v122);
                }
                if (v121)
                {
                  *(_QWORD *)&v170 = 0;
                  WTF::fastFree(v121, v73);
                }
                v125 = (WTF::StringImpl *)v166;
                v166 = 0;
                v134[0] = v125;
                LOBYTE(v134[1]) = 0;
                v135[0] = 0;
                if (v168)
                {
                  v126 = v167;
                  v167 = 0;
                  v134[1] = v126;
                  v135[0] = 1;
                }
                v127 = *((_QWORD *)&v169 + 1);
                *(_QWORD *)&v135[8] = v169;
                v169 = 0uLL;
                *(_QWORD *)&v135[16] = v127;
                v170 = 0uLL;
                *(_QWORD *)&v135[24] = v107;
                v136 = v133;
                v137 = 0;
                v115 = v165;
                if (v165 != -1)
                  goto LABEL_305;
LABEL_168:
                WebCore::GPUVertexState::~GPUVertexState((WebCore::GPUVertexState *)&v166, v73);
                v80 = v137;
                if (!v137)
                {
                  v81 = v134[0];
                  v134[0] = 0;
                  v166 = (unsigned int *)v81;
                  LOBYTE(v167) = 0;
                  v168 = 0;
                  if (v135[0])
                  {
                    v82 = v134[1];
                    v134[1] = 0;
                    v167 = v82;
                    v168 = 1;
                  }
                  v83 = *(_QWORD *)&v135[8];
                  memset(&v135[8], 0, 24);
                  v169 = __PAIR128__(*(unint64_t *)&v135[16], v83);
                  *(_QWORD *)&v170 = *(_QWORD *)&v135[24];
                  v84 = v136;
                  v136 = 0;
                  *((_QWORD *)&v170 + 1) = v84;
                  WebCore::GPUProgrammableStage::operator=((uint64_t)&v141, (uint64_t *)&v166);
                  v86 = v145[0];
                  if (HIDWORD(v145[1]))
                  {
                    v87 = 40 * HIDWORD(v145[1]);
                    v88 = (char *)v145[0] + 16;
                    do
                    {
                      if (v88[16])
                      {
                        v89 = *(WTF **)v88;
                        if (*(_QWORD *)v88)
                        {
                          *(_QWORD *)v88 = 0;
                          *((_DWORD *)v88 + 2) = 0;
                          WTF::fastFree(v89, v85);
                        }
                      }
                      v88 += 40;
                      v87 -= 40;
                    }
                    while (v87);
                    v86 = v145[0];
                  }
                  if (v86)
                  {
                    v145[0] = 0;
                    LODWORD(v145[1]) = 0;
                    WTF::fastFree(v86, v85);
                  }
                  v90 = (WTF *)*((_QWORD *)&v170 + 1);
                  v145[0] = (WTF *)v170;
                  v170 = 0uLL;
                  v145[1] = v90;
                  WebCore::GPUVertexState::~GPUVertexState((WebCore::GPUVertexState *)&v166, v85);
                  WebCore::GPURenderPipelineDescriptor::GPURenderPipelineDescriptor(a3, (uint64_t *)&v138);
                  *(_DWORD *)(a3 + 216) = 0;
                  v80 = v137;
                  goto LABEL_181;
                }
LABEL_263:
                *(_DWORD *)(a3 + 216) = 1;
LABEL_181:
                if (v80 != -1)
                  (*(&off_1E328A6E0 + v80))((int)&v166, (WebCore::GPUVertexState *)v134);
                goto LABEL_183;
              }
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v108);
              v107 = v134[0];
              if (!hasExceptionsAfterHandlingTraps)
                goto LABEL_293;
              v165 = 1;
              if (HIDWORD(v134[1]))
              {
                v130 = 40 * HIDWORD(v134[1]);
                v131 = (char *)v134[0] + 16;
                do
                {
                  if (v131[16])
                  {
                    v132 = *(WTF **)v131;
                    if (*(_QWORD *)v131)
                    {
                      *(_QWORD *)v131 = 0;
                      *((_DWORD *)v131 + 2) = 0;
                      WTF::fastFree(v132, v73);
                    }
                  }
                  v131 += 40;
                  v130 -= 40;
                }
                while (v130);
              }
              if (v107)
                WTF::fastFree(v107, v73);
            }
            v115 = 1;
            v137 = 1;
LABEL_305:
            ((void (*)(uint64_t *, unsigned __int128 *))off_1E328B4F8[v115])(&v172, &v164);
            goto LABEL_168;
          }
          WebCore::valueToUSVString(a2, v77, (uint64_t)&v164);
          v74 = DWORD2(v164);
          if (!DWORD2(v164))
          {
            v167 = (WTF::StringImpl *)v164;
            v168 = 1;
            goto LABEL_161;
          }
          v137 = 1;
          if (DWORD2(v164) == -1)
            goto LABEL_168;
          v128 = off_1E328A618;
LABEL_310:
          ((void (*)(uint64_t *, unsigned __int128 *))v128[v74])(&v172, &v164);
          goto LABEL_168;
        }
        WebCore::convertDictionary<WebCore::GPUPrimitiveState>(v64, (unint64_t)a2, (uint64_t)v134);
        if (!LODWORD(v134[1]))
        {
          v147 = WORD2(v134[0]);
          v146 = (int)v134[0];
          if (!v148)
            v148 = 1;
          goto LABEL_136;
        }
LABEL_142:
        *(_DWORD *)(a3 + 216) = 1;
        goto LABEL_183;
      }
      JSC::throwTypeError();
    }
    v91 = 1;
    v175 = 1;
    *(_DWORD *)(a3 + 216) = 1;
    goto LABEL_184;
  }
LABEL_24:
  if (v162)
  {
    v17 = v160;
    if (v160)
    {
      v160 = 0;
      LODWORD(v161) = 0;
      WTF::fastFree(v17, v9);
    }
    v18 = v158;
    if (HIDWORD(v159))
    {
      v19 = 16 * HIDWORD(v159);
      do
      {
        v20 = *(WTF::StringImpl **)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v9);
          else
            *(_DWORD *)v20 -= 2;
        }
        v18 = (WTF *)((char *)v18 + 16);
        v19 -= 16;
      }
      while (v19);
      v18 = v158;
    }
    if (v18)
    {
      v158 = 0;
      LODWORD(v159) = 0;
      WTF::fastFree(v18, v9);
    }
    if (v157)
    {
      v21 = v156;
      v156 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v9);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
    v22 = (unsigned int *)v155;
    v155 = 0;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v9);
      }
    }
  }
  WebCore::GPUVertexState::~GPUVertexState((WebCore::GPUVertexState *)&v141, v9);
  if (v140 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E328A6A0[v140])(v134, &v139);
  v140 = -1;
  result = v138;
  v138 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::convertDictionary<WebCore::GPURequestAdapterOptions>@<X0>(JSC::JSCell *this@<X1>, unint64_t result@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  BOOL v5;
  JSC::JSGlobalObject *v6;
  uint64_t Object;
  JSC::Structure *v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  JSC::VM *v11;
  double v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unsigned __int16 v15;
  __int16 v16;
  JSC::VM *v17;
  int v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  int *v22;
  int v23;
  WTF::StringImpl *v24;

  v4 = *(JSC::VM **)(result + 56);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    v6 = (JSC::JSGlobalObject *)result;
    if (((unint64_t)this & 0xFFFE000000000002) != 0)
      goto LABEL_29;
    Object = JSC::JSCell::getObject(this);
    if (!Object)
      goto LABEL_29;
    v8 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v10 = JSC::JSObject::get(v8, v6, (unint64_t)v24);
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v9);
      else
        *(_DWORD *)v24 -= 2;
    }
    if (*((_DWORD *)v4 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
      if ((result & 1) != 0)
        goto LABEL_30;
    }
    if (v10 == 10)
    {
      v5 = 0;
LABEL_16:
      WTF::AtomStringImpl::addLiteral();
      result = JSC::JSObject::get(v8, v6, (unint64_t)v24);
      v14 = result;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          result = WTF::StringImpl::destroy(v24, v13);
        else
          *(_DWORD *)v24 -= 2;
      }
      if (*((_DWORD *)v4 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
        if ((result & 1) != 0)
          goto LABEL_30;
      }
      if (v14 == 10)
        goto LABEL_21;
      v17 = (JSC::VM *)*((_QWORD *)v6 + 7);
      result = WebCore::parseEnumeration<WebCore::GPUPowerPreference>(v6, v14);
      v15 = result;
      if (*((_DWORD *)v17 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v17);
        if ((result & 1) != 0)
        {
LABEL_30:
          v18 = 1;
          goto LABEL_26;
        }
      }
      if (v15 > 0xFFu)
      {
        v16 = 1;
        goto LABEL_25;
      }
LABEL_29:
      result = JSC::throwTypeError();
      goto LABEL_30;
    }
    v11 = (JSC::VM *)*((_QWORD *)v6 + 7);
    if (v10 >= 0xFFFE000000000000)
    {
      v19 = (_DWORD)v10 == 0;
    }
    else
    {
      *(_QWORD *)&v12 = v10 - 0x2000000000000;
      if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v5 = v12 > 0.0 || v12 < 0.0;
LABEL_15:
        if (*((_DWORD *)v11 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v11);
          if ((result & 1) != 0)
            goto LABEL_30;
        }
        goto LABEL_16;
      }
      if ((v10 & 0xFFFE000000000002) != 0)
      {
        v5 = v10 == 7;
        goto LABEL_15;
      }
      v20 = *(unsigned __int8 *)(v10 + 5);
      if (v20 == 3)
      {
        v23 = *(_DWORD *)(v10 + 8);
      }
      else
      {
        if (v20 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v5 = 1;
            goto LABEL_15;
          }
          v19 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28) == (_QWORD)v6;
          goto LABEL_55;
        }
        v21 = *(_QWORD *)(v10 + 8);
        if ((v21 & 1) != 0)
          v22 = (int *)(v10 + 16);
        else
          v22 = (int *)(v21 + 4);
        v23 = *v22;
      }
      v19 = v23 == 0;
    }
LABEL_55:
    v5 = !v19;
    goto LABEL_15;
  }
  v5 = 0;
LABEL_21:
  LOBYTE(v15) = 0;
  v16 = 0;
LABEL_25:
  v18 = 0;
  *(_WORD *)(a3 + 4) = v15 | (unsigned __int16)(v16 << 8);
  *(_BYTE *)(a3 + 6) = v5;
LABEL_26:
  *(_DWORD *)(a3 + 8) = v18;
  return result;
}

uint64_t WebCore::JSGPUSampler::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
        else
          --v3[2];
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGPUSampler::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUSamplerPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUSamplerPrototype::create(WebCore::JSGPUSamplerPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  JSC::Structure *v17;
  int v18;
  unint64_t v20;
  WTF::StringImpl *v21[6];
  int v22;
  int v23;
  JSC::Structure *v24;
  int v25;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v20);
    *((_QWORD *)this + 4865) = SlowCase + (int)v20;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSGPUSampler::s_info, (uint64_t)&WebCore::JSGPUSamplerPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v10 = v21[0];
    v11 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v21[0]) = -1;
    WORD2(v21[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v11;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v12);
      else
        *(_DWORD *)v10 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v13 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = JSC::JSString::create((uint64_t)this, v21);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v25 = *(_DWORD *)SlowCase;
  v24 = v17;
  v18 = JSC::Structure::outOfLineCapacity(v17);
  v22 = 0;
  v23 = v18;
  v21[0] = (WTF::StringImpl *)&v23;
  v21[1] = (WTF::StringImpl *)SlowCase;
  v21[2] = this;
  v21[3] = (WTF::StringImpl *)&v25;
  v21[4] = (WTF::StringImpl *)&v24;
  v21[5] = (WTF::StringImpl *)&v22;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v17, this, v13, 6, (uint64_t)v21);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v22, v15);
  *((_DWORD *)v17 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUSampler>,(WebCore::DOMConstructorID)36>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 288);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUSampler>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUSampler::s_info + ~((_QWORD)&WebCore::JSGPUSampler::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUSampler::s_info + ~((_QWORD)&WebCore::JSGPUSampler::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUSampler::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUSampler::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUSamplerPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUSamplerPrototype::create((WebCore::JSGPUSamplerPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUSampler::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUSampler::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 288) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUSamplerConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUSamplerPrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUSampler>,(WebCore::DOMConstructorID)36>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUSampler_label(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 16);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

BOOL WebCore::setJSGPUSampler_label(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  int v17;
  char v18;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSGPUSampler::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSGPUSampler::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v16);
  v10 = v17;
  v11 = v17 == 0;
  if (!v17)
  {
    v12 = v16;
    v16 = 0;
    v13 = *(_QWORD **)(v8 + 8);
    v14 = (WTF::StringImpl *)v13[2];
    v13[2] = v12;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    (*(void (**)(_QWORD *, _QWORD *))(*v13 + 16))(v13, v13 + 2);
    v10 = v17;
  }
  if (v10 != -1)
    ((void (*)(char *, uint64_t *))off_1E328A618[v10])(&v18, &v16);
  return v11;
}

uint64_t WebCore::JSGPUSamplerOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPUSamplerOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::GPUSampler>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSGPUSampler::s_info + ~((_QWORD)&WebCore::JSGPUSampler::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUSampler::s_info + ~((_QWORD)&WebCore::JSGPUSampler::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSGPUSampler::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSGPUSampler::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSGPUSamplerPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUSamplerPrototype::create((WebCore::JSGPUSamplerPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSGPUSampler::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUSampler::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 288);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 288))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 288);
    *(_QWORD *)(v36 + 288) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 288);
  *(_QWORD *)(v32 + 288) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335918 & 1) == 0)
  {
    qword_1EE335910 = (uint64_t)&off_1E3289FE0;
    byte_1EE335918 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335910;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

unint64_t WebCore::convertDictionary<WebCore::GPUSamplerBindingLayout>@<X0>(JSC::JSCell *this@<X1>, unint64_t result@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  JSC::JSGlobalObject *v5;
  uint64_t Object;
  JSC::Structure *v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  unsigned __int16 v10;
  JSC::VM *v11;
  int v12;
  WTF::StringImpl *v13;

  v4 = *(JSC::VM **)(result + 56);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    v5 = (JSC::JSGlobalObject *)result;
    if (((unint64_t)this & 0xFFFE000000000002) == 0)
    {
      Object = JSC::JSCell::getObject(this);
      if (Object)
      {
        v7 = (JSC::Structure *)Object;
        WTF::AtomStringImpl::addLiteral();
        result = JSC::JSObject::get(v7, v5, (unint64_t)v13);
        v9 = result;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            result = WTF::StringImpl::destroy(v13, v8);
          else
            *(_DWORD *)v13 -= 2;
        }
        if (*((_DWORD *)v4 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
          if ((result & 1) != 0)
            goto LABEL_16;
        }
        if (v9 == 10)
          goto LABEL_9;
        v11 = (JSC::VM *)*((_QWORD *)v5 + 7);
        result = WebCore::parseEnumeration<WebCore::GPUSamplerBindingType>(v5, v9);
        v10 = result;
        if (*((_DWORD *)v11 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v11);
          if ((result & 1) != 0)
          {
LABEL_16:
            v12 = 1;
            goto LABEL_13;
          }
        }
        if (v10 > 0xFFu)
          goto LABEL_12;
      }
    }
    result = JSC::throwTypeError();
    goto LABEL_16;
  }
LABEL_9:
  LOBYTE(v10) = 0;
LABEL_12:
  v12 = 0;
  *(_BYTE *)a3 = v10;
LABEL_13:
  *(_DWORD *)(a3 + 4) = v12;
  return result;
}

uint64_t WebCore::parseEnumeration<WebCore::GPUSamplerBindingType>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  int v9;
  int v10;
  char **v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint64_t v21;
  unint64_t v22;

  v3 = a1;
  v22 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
LABEL_34:
        v10 = 0;
        v9 = 0;
        return v10 | (v9 << 8);
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v22, a1);
  v4 = v21;
  if (!v21)
    goto LABEL_34;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "comparison" && v7 == 10)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 99 || *(_QWORD *)(v6 + 1) != 0x6F73697261706D6FLL || *(_QWORD *)(v6 + 2) != 0x6E6F73697261706DLL)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 99)
        goto LABEL_16;
      v14 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968BFDA0);
      v14.i16[0] = vminvq_u16(v14);
      if (!v14.i32[0])
        goto LABEL_16;
      v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 4), (int16x8_t)xmmword_1968BFDB0);
      v15.i16[0] = vminvq_u16(v15);
      if (!v15.i32[0])
        goto LABEL_16;
    }
    goto LABEL_38;
  }
  if (v6 == "comparison" && v7 == 10)
  {
LABEL_38:
    v13 = &WebCore::parseEnumerationFromString<WebCore::GPUSamplerBindingType>(WTF::String const&)::mappings;
    goto LABEL_39;
  }
  if (v6 != "filtering" && v7 == 9)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 102 || *(_DWORD *)(v6 + 1) != 1702128745 || *(_DWORD *)(v6 + 5) != 1735289202)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 102)
        goto LABEL_16;
      v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968BFDC0);
      v17.i16[0] = vminvq_u16(v17);
      if (!v17.i32[0])
        goto LABEL_16;
    }
  }
  else if (v6 != "filtering" || v7 != 9)
  {
    if (v6 == "non-filtering" || v7 != 13)
    {
      if (v7 == 13 && v6 == "non-filtering")
        goto LABEL_55;
    }
    else if ((v5 & 4) != 0)
    {
      if (*v6 == 110 && *(_QWORD *)(v6 + 1) == 0x65746C69662D6E6FLL && *(_QWORD *)(v6 + 5) == 0x676E697265746C69)
      {
LABEL_55:
        v13 = &off_1E3284650;
        goto LABEL_39;
      }
    }
    else if (*(_WORD *)v6 == 110)
    {
      v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968BFDD0);
      v18.i16[0] = vminvq_u16(v18);
      if (v18.i32[0])
      {
        v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 10), (int16x8_t)xmmword_1968BFDC0);
        v19.i16[0] = vminvq_u16(v19);
        if (v19.i32[0])
          goto LABEL_55;
      }
    }
LABEL_16:
    v9 = 0;
    v10 = 0;
    goto LABEL_40;
  }
  v13 = &off_1E3284638;
LABEL_39:
  v10 = *((unsigned __int8 *)v13 + 16);
  v9 = 1;
LABEL_40:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v10 | (v9 << 8);
}

unint64_t WebCore::convertDictionary<WebCore::GPUSamplerDescriptor>@<X0>(JSC::JSCell *this@<X1>, unint64_t result@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  unsigned __int16 v5;
  unsigned __int16 v6;
  char v7;
  WTF::StringImpl *v8;
  char v9;
  unsigned __int16 v10;
  __int16 v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  float v14;
  float v15;
  int v16;
  JSC::JSGlobalObject *v17;
  uint64_t Object;
  JSC::Structure *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  unsigned __int16 v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  WTF::StringImpl *v31;
  unsigned __int16 v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  JSC::VM *v44;
  double v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  JSC::VM *v49;
  double v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  JSC::VM *v58;
  double v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  unint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  unint64_t v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  double v69;
  char hasExceptionsAfterHandlingTraps;
  double v71;
  char v72;
  char v73;
  double v74;
  __int16 v75;
  char v76;
  char v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  unsigned int v80;
  JSC::VM *v81;
  JSC::VM *v82;

  v4 = *(JSC::VM **)(result + 56);
  v81 = v4;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    LOBYTE(v5) = 0;
    LOBYTE(v6) = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    LOBYTE(v10) = 0;
    v11 = 0;
    LOBYTE(v12) = 0;
    LOBYTE(v13) = 0;
    v14 = 0.0;
    v15 = 32.0;
    LOWORD(v16) = 1;
LABEL_130:
    *(_QWORD *)a3 = v8;
    *(_BYTE *)(a3 + 8) = v7;
    *(_BYTE *)(a3 + 9) = v9;
    *(_BYTE *)(a3 + 10) = v6;
    *(_BYTE *)(a3 + 11) = v12;
    *(_BYTE *)(a3 + 12) = v13;
    *(_BYTE *)(a3 + 13) = v5;
    *(float *)(a3 + 16) = v14;
    *(float *)(a3 + 20) = v15;
    *(_WORD *)(a3 + 24) = v10 | (unsigned __int16)(v11 << 8);
    *(_WORD *)(a3 + 26) = v16;
    *(_DWORD *)(a3 + 32) = 0;
    return result;
  }
  v17 = (JSC::JSGlobalObject *)result;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
LABEL_137:
    *(_DWORD *)(a3 + 32) = 1;
    return result;
  }
  v19 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v21 = JSC::JSObject::get(v19, v17, (unint64_t)v79);
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
      WTF::StringImpl::destroy(v79, v20);
    else
      *(_DWORD *)v79 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_137;
  }
  if (v21 == 10)
  {
    v78 = 0;
    goto LABEL_13;
  }
  result = WebCore::valueToUSVString(v17, v21, (uint64_t)&v79);
  v22 = v80;
  if (!v80)
  {
    v78 = v79;
    v79 = 0;
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)&v82, (WTF::StringImpl *)&v79);
LABEL_13:
    WTF::AtomStringImpl::addLiteral();
    v23 = v79;
    v25 = JSC::JSObject::get(v19, v17, (unint64_t)v79);
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v24);
      else
        *(_DWORD *)v23 -= 2;
    }
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
      goto LABEL_155;
    if (v25 == 10)
    {
      v77 = 0;
    }
    else
    {
      v79 = (WTF::StringImpl *)*((_QWORD *)v17 + 7);
      v26 = v79;
      v27 = WebCore::parseEnumeration<WebCore::GPUAddressMode>(v17, v25);
      if (*((_DWORD *)v26 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v26) & 1) != 0)
        goto LABEL_155;
      if (v27 <= 0xFFu)
        goto LABEL_139;
      v77 = v27;
    }
    WTF::AtomStringImpl::addLiteral();
    v28 = v79;
    v30 = JSC::JSObject::get(v19, v17, (unint64_t)v79);
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v29);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
      goto LABEL_155;
    if (v30 == 10)
    {
      v76 = 0;
    }
    else
    {
      v79 = (WTF::StringImpl *)*((_QWORD *)v17 + 7);
      v31 = v79;
      v32 = WebCore::parseEnumeration<WebCore::GPUAddressMode>(v17, v30);
      if (*((_DWORD *)v31 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v31) & 1) != 0)
        goto LABEL_155;
      if (v32 <= 0xFFu)
        goto LABEL_139;
      v76 = v32;
    }
    WTF::AtomStringImpl::addLiteral();
    v33 = v79;
    v35 = JSC::JSObject::get(v19, v17, (unint64_t)v79);
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v34);
      else
        *(_DWORD *)v33 -= 2;
    }
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
      goto LABEL_155;
    if (v35 == 10)
    {
      LOBYTE(v6) = 0;
    }
    else
    {
      v79 = (WTF::StringImpl *)*((_QWORD *)v17 + 7);
      v36 = v79;
      v6 = WebCore::parseEnumeration<WebCore::GPUAddressMode>(v17, v35);
      if (*((_DWORD *)v36 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v36) & 1) != 0)
        goto LABEL_155;
      if (v6 <= 0xFFu)
        goto LABEL_139;
    }
    WTF::AtomStringImpl::addLiteral();
    v37 = v79;
    v39 = JSC::JSObject::get(v19, v17, (unint64_t)v79);
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v38);
      else
        *(_DWORD *)v37 -= 2;
    }
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
      goto LABEL_155;
    if (v39 == 10)
    {
      LOBYTE(v10) = 0;
      v75 = 0;
    }
    else
    {
      v79 = (WTF::StringImpl *)*((_QWORD *)v17 + 7);
      v40 = v79;
      v10 = WebCore::parseEnumeration<WebCore::GPUCompareFunction>(v17, v39);
      if (*((_DWORD *)v40 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v40) & 1) != 0)
        goto LABEL_155;
      if (v10 <= 0xFFu)
        goto LABEL_139;
      v75 = 1;
    }
    WTF::AtomStringImpl::addLiteral();
    v41 = v79;
    v43 = (WTF::StringImpl *)JSC::JSObject::get(v19, v17, (unint64_t)v79);
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v42);
      else
        *(_DWORD *)v41 -= 2;
    }
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
      goto LABEL_155;
    if (v43 == (WTF::StringImpl *)10)
    {
      v15 = 32.0;
    }
    else
    {
      v79 = v43;
      v44 = (JSC::VM *)*((_QWORD *)v17 + 7);
      v82 = v44;
      if ((unint64_t)v43 >= 0xFFFE000000000000)
      {
        v45 = (double)(int)v43;
      }
      else if ((unint64_t)v43 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v79, v17);
      }
      else
      {
        *(_QWORD *)&v45 = (char *)v43 - 0x2000000000000;
      }
      if (*((_DWORD *)v44 + 20))
      {
        v69 = v45;
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v44);
        v45 = v69;
        if ((hasExceptionsAfterHandlingTraps & 1) != 0)
          goto LABEL_155;
      }
      if ((*(_QWORD *)&v45 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || v45 < -3.40282347e38
        || v45 > 3.40282347e38)
      {
        goto LABEL_154;
      }
      v15 = v45;
    }
    WTF::AtomStringImpl::addLiteral();
    v46 = v79;
    v48 = (WTF::StringImpl *)JSC::JSObject::get(v19, v17, (unint64_t)v79);
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v47);
      else
        *(_DWORD *)v46 -= 2;
    }
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
      goto LABEL_155;
    v14 = 0.0;
    if (v48 == (WTF::StringImpl *)10)
      goto LABEL_75;
    v79 = v48;
    v49 = (JSC::VM *)*((_QWORD *)v17 + 7);
    v82 = v49;
    if ((unint64_t)v48 >= 0xFFFE000000000000)
    {
      v50 = (double)(int)v48;
    }
    else if ((unint64_t)v48 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v79, v17);
    }
    else
    {
      *(_QWORD *)&v50 = (char *)v48 - 0x2000000000000;
    }
    if (*((_DWORD *)v49 + 20))
    {
      v71 = v50;
      v72 = JSC::VM::hasExceptionsAfterHandlingTraps(v49);
      v50 = v71;
      if ((v72 & 1) != 0)
        goto LABEL_155;
    }
    if ((*(_QWORD *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && v50 >= -3.40282347e38
      && v50 <= 3.40282347e38)
    {
      v14 = v50;
LABEL_75:
      WTF::AtomStringImpl::addLiteral();
      v51 = v79;
      v53 = JSC::JSObject::get(v19, v17, (unint64_t)v79);
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
          WTF::StringImpl::destroy(v51, v52);
        else
          *(_DWORD *)v51 -= 2;
      }
      if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
        goto LABEL_155;
      if (v53 == 10)
      {
        LOBYTE(v12) = 0;
      }
      else
      {
        v79 = (WTF::StringImpl *)*((_QWORD *)v17 + 7);
        v54 = v79;
        v12 = WebCore::parseEnumeration<WebCore::GPUFilterMode>(v17, v53);
        if (*((_DWORD *)v54 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v54) & 1) != 0)
          goto LABEL_155;
        if (v12 <= 0xFFu)
          goto LABEL_139;
      }
      WTF::AtomStringImpl::addLiteral();
      v55 = v79;
      v57 = JSC::JSObject::get(v19, v17, (unint64_t)v79);
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
          WTF::StringImpl::destroy(v55, v56);
        else
          *(_DWORD *)v55 -= 2;
      }
      if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
        goto LABEL_155;
      if (v57 == 10)
      {
        LOWORD(v16) = 1;
      }
      else
      {
        v79 = (WTF::StringImpl *)v57;
        v58 = (JSC::VM *)*((_QWORD *)v17 + 7);
        if (v57 < 0xFFFE000000000000 || (v57 & 0x80000000) != 0)
        {
          if (v57 >= 0xFFFE000000000000)
          {
            v59 = (double)(int)v57;
          }
          else if (v57 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v79, v17);
          }
          else
          {
            *(_QWORD *)&v59 = v57 - 0x2000000000000;
          }
          if (*((_DWORD *)v58 + 20))
          {
            v74 = v59;
            v73 = JSC::VM::hasExceptionsAfterHandlingTraps(v58);
            v59 = v74;
            if ((v73 & 1) != 0)
              goto LABEL_155;
          }
          if (v59 >= 65535.0)
          {
            LOWORD(v16) = -1;
          }
          else if (v59 <= 0.0)
          {
            LOWORD(v16) = 0;
          }
          else
          {
            v16 = (int)v59;
          }
        }
        else if ((v57 & 0xFFFF0000) != 0)
        {
          LOWORD(v16) = -1;
        }
        else
        {
          LOWORD(v16) = v57;
        }
      }
      WTF::AtomStringImpl::addLiteral();
      v60 = v79;
      v62 = JSC::JSObject::get(v19, v17, (unint64_t)v79);
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, v61);
        else
          *(_DWORD *)v60 -= 2;
      }
      if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
        goto LABEL_155;
      if (v62 == 10)
      {
        LOBYTE(v13) = 0;
      }
      else
      {
        v79 = (WTF::StringImpl *)*((_QWORD *)v17 + 7);
        v63 = v79;
        v13 = WebCore::parseEnumeration<WebCore::GPUFilterMode>(v17, v62);
        if (*((_DWORD *)v63 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v63) & 1) != 0)
          goto LABEL_155;
        if (v13 <= 0xFFu)
          goto LABEL_139;
      }
      WTF::AtomStringImpl::addLiteral();
      v64 = v79;
      result = JSC::JSObject::get(v19, v17, (unint64_t)v79);
      v66 = result;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2)
          result = WTF::StringImpl::destroy(v64, v65);
        else
          *(_DWORD *)v64 -= 2;
      }
      if (*((_DWORD *)v4 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
        if ((result & 1) != 0)
          goto LABEL_155;
      }
      if (v66 == 10)
      {
        LOBYTE(v5) = 0;
        v8 = v78;
        v9 = v76;
        v7 = v77;
LABEL_129:
        v11 = v75;
        goto LABEL_130;
      }
      v79 = (WTF::StringImpl *)*((_QWORD *)v17 + 7);
      v67 = v79;
      result = WebCore::parseEnumeration<WebCore::GPUFilterMode>(v17, v66);
      v5 = result;
      if (*((_DWORD *)v67 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v67);
        if ((result & 1) != 0)
        {
LABEL_155:
          *(_DWORD *)(a3 + 32) = 1;
          result = (unint64_t)v78;
          if (v78)
          {
            if (*(_DWORD *)v78 == 2)
              return WTF::StringImpl::destroy(v78, v68);
            else
              *(_DWORD *)v78 -= 2;
          }
          return result;
        }
      }
      v9 = v76;
      v7 = v77;
      if (v5 > 0xFFu)
      {
        v8 = v78;
        goto LABEL_129;
      }
LABEL_139:
      JSC::throwTypeError();
      goto LABEL_155;
    }
LABEL_154:
    JSC::throwTypeError();
    goto LABEL_155;
  }
  *(_DWORD *)(a3 + 32) = 1;
  if ((_DWORD)v22 != -1)
    return ((uint64_t (*)(JSC::VM **, WTF::StringImpl **))off_1E328A618[v22])(&v82, &v79);
  return result;
}

uint64_t WebCore::JSGPUShaderModule::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
        else
          --v3[2];
      }
      v4 = *((_QWORD *)v2 + 1);
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 0;
        v5 = (unsigned int *)*((_QWORD *)v2 + 1);
        *((_QWORD *)v2 + 1) = 0;
        if (v5)
        {
          do
          {
            v6 = __ldaxr(v5);
            v7 = v6 - 1;
          }
          while (__stlxr(v7, v5));
          if (!v7)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
      else
      {
        *((_QWORD *)v2 + 1) = 0;
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGPUShaderModule::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUShaderModulePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUShaderModulePrototype::create(WebCore::JSGPUShaderModulePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  JSC::Structure *v17;
  int v18;
  unint64_t v20;
  WTF::StringImpl *v21[6];
  int v22;
  int v23;
  JSC::Structure *v24;
  int v25;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v20);
    *((_QWORD *)this + 4865) = SlowCase + (int)v20;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSGPUShaderModule::s_info, &WebCore::JSGPUShaderModulePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v10 = v21[0];
    v11 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v21[0]) = -1;
    WORD2(v21[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v11;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v12);
      else
        *(_DWORD *)v10 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v13 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = JSC::JSString::create((uint64_t)this, v21);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v25 = *(_DWORD *)SlowCase;
  v24 = v17;
  v18 = JSC::Structure::outOfLineCapacity(v17);
  v22 = 0;
  v23 = v18;
  v21[0] = (WTF::StringImpl *)&v23;
  v21[1] = (WTF::StringImpl *)SlowCase;
  v21[2] = this;
  v21[3] = (WTF::StringImpl *)&v25;
  v21[4] = (WTF::StringImpl *)&v24;
  v21[5] = (WTF::StringImpl *)&v22;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v17, this, v13, 6, (uint64_t)v21);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v22, v15);
  *((_DWORD *)v17 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUShaderModule>,(WebCore::DOMConstructorID)37>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 296);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUShaderModule>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUShaderModule::s_info + ~((_QWORD)&WebCore::JSGPUShaderModule::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUShaderModule::s_info + ~((_QWORD)&WebCore::JSGPUShaderModule::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUShaderModule::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUShaderModule::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUShaderModulePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUShaderModulePrototype::create((WebCore::JSGPUShaderModulePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUShaderModule::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUShaderModule::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 296) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUShaderModuleConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUShaderModulePrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUShaderModule>,(WebCore::DOMConstructorID)37>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUShaderModule_label(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 16) + 24);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

BOOL WebCore::setJSGPUShaderModule_label(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  int v17;
  char v18;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSGPUShaderModule::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSGPUShaderModule::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v16);
  v10 = v17;
  v11 = v17 == 0;
  if (!v17)
  {
    v12 = v16;
    v16 = 0;
    v13 = *(_QWORD **)(v8 + 16);
    v14 = (WTF::StringImpl *)v13[3];
    v13[3] = v12;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    (*(void (**)(_QWORD *, _QWORD *))(*v13 + 24))(v13, v13 + 3);
    v10 = v17;
  }
  if (v10 != -1)
    ((void (*)(char *, uint64_t *))off_1E328A618[v10])(&v18, &v16);
  return v11;
}

uint64_t WebCore::JSGPUShaderModuleOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPUShaderModuleOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    v25 = *((_QWORD *)v3 + 1);
    if (v25)
    {
      *(_QWORD *)(v25 + 8) = 0;
      v26 = (unsigned int *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v26)
      {
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v26);
          WTF::fastFree((WTF *)v26, a2);
        }
      }
    }
    else
    {
      *((_QWORD *)v3 + 1) = 0;
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::GPUShaderModule>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSGPUShaderModule::s_info + ~((_QWORD)&WebCore::JSGPUShaderModule::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUShaderModule::s_info + ~((_QWORD)&WebCore::JSGPUShaderModule::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSGPUShaderModule::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSGPUShaderModule::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSGPUShaderModulePrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUShaderModulePrototype::create((WebCore::JSGPUShaderModulePrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSGPUShaderModule::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUShaderModule::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 296);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 296))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 296);
    *(_QWORD *)(v36 + 296) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 296);
  *(_QWORD *)(v32 + 296) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335928 & 1) == 0)
  {
    qword_1EE335920 = (uint64_t)&off_1E328A010;
    byte_1EE335928 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335920;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

void WebCore::convertDictionary<WebCore::GPUShaderModuleDescriptor>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  JSC::JSCell *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unsigned __int8 *v19;
  WTF *hasExceptionsAfterHandlingTraps;
  JSC::VM *v21;
  WTF *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  int v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  uint64_t v31;
  JSC::Structure *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  _DWORD *v40;
  uint64_t v41;
  JSC::VM *v42;
  unsigned __int16 v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t (*v48)();
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  unsigned int v52;
  WTF *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int *v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  JSC::VM *v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  int v69;
  WTF::StringImpl *v70;
  int v71;
  uint64_t v72;
  int v73;
  WTF *v74;
  uint64_t v75;
  int v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl **v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  unsigned int v89;
  JSC::JSCell *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t *v103;
  __int128 v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF::StringImpl **v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  WTF *v114;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  WTF *v122;
  unint64_t *v123;
  WTF *v124;
  unsigned int v125;
  WTF *v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  JSC::VM *v134;
  WTF::StringImpl *v135;
  JSC::JSCell *v136;
  unsigned int v137;
  unint64_t v138;
  unsigned __int8 *v139;
  uint64_t v140;
  uint64_t v141;
  __int16 v142;
  __int16 v143;
  char v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  WTF *v149;
  uint64_t v150;
  JSC::VM *v151;
  __int16 v152;
  WTF::StringImpl **v153;
  WTF *v154;
  uint64_t v155;
  JSC::VM *v156;
  JSC::VM *v157;
  int v158;
  uint64_t v159;
  int v160;
  JSC::VM *v161;
  uint64_t *v162;
  WTF::StringImpl *v163;
  char v164[8];
  unsigned int v165;
  unsigned int v166;
  WTF::StringImpl *v167;
  _DWORD *v168;
  int v169;
  unsigned int v170;
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  v134 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v133 = 0;
    v131 = 0u;
    v132 = 0u;
    goto LABEL_18;
  }
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(this);
    if (Object)
    {
      v6 = (JSC::Structure *)Object;
      v133 = 0;
      v131 = 0u;
      v132 = 0u;
      WTF::AtomStringImpl::addLiteral();
      v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v136);
      if (v136)
      {
        if (*(_DWORD *)v136 == 2)
          WTF::StringImpl::destroy(v136, v7);
        else
          *(_DWORD *)v136 -= 2;
      }
      if (*((_DWORD *)v134 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v134))
        goto LABEL_19;
      if (v8 == 10)
      {
        v9 = 0;
      }
      else
      {
        WebCore::valueToUSVString((JSC::JSGlobalObject *)a2, v8, (uint64_t)&v136);
        v11 = v137;
        if (v137)
        {
          *(_DWORD *)(a3 + 40) = 1;
          if ((_DWORD)v11 != -1)
            ((void (*)(WTF::StringImpl **, JSC::JSCell **))off_1E328A618[v11])(&v167, &v136);
          goto LABEL_20;
        }
        v9 = v136;
        v136 = 0;
        *(_QWORD *)&v131 = v9;
        _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)&v167, (WTF::StringImpl *)&v136);
      }
      WTF::AtomStringImpl::addLiteral();
      v12 = v136;
      v14 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v136);
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v13);
        else
          *(_DWORD *)v12 -= 2;
      }
      if (*((_DWORD *)v134 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v134))
        goto LABEL_19;
      if (v14 == 10)
      {
LABEL_18:
        WebCore::throwRequiredMemberTypeError((int)a2, (int)&v134, "code", 5, "GPUShaderModuleDescriptor", 26, "USVString", 10);
LABEL_19:
        *(_DWORD *)(a3 + 40) = 1;
LABEL_20:
        WebCore::GPUShaderModuleDescriptor::~GPUShaderModuleDescriptor((WebCore::GPUShaderModuleDescriptor *)&v131, v10);
        return;
      }
      WebCore::valueToUSVString((JSC::JSGlobalObject *)a2, v14, (uint64_t)&v129);
      v15 = v130;
      if (v130)
      {
        *(_DWORD *)(a3 + 40) = 1;
LABEL_226:
        if (v15 != -1)
          ((void (*)(JSC::JSCell **, uint64_t *))off_1E328A618[v15])(&v136, &v129);
        goto LABEL_20;
      }
      v16 = v129;
      v129 = 0;
      *((_QWORD *)&v131 + 1) = v16;
      WTF::AtomStringImpl::addLiteral();
      v17 = v136;
      v19 = (unsigned __int8 *)JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v136);
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v18);
        else
          *(_DWORD *)v17 -= 2;
      }
      hasExceptionsAfterHandlingTraps = v134;
      if (*((_DWORD *)v134 + 20))
      {
        hasExceptionsAfterHandlingTraps = (WTF *)JSC::VM::hasExceptionsAfterHandlingTraps(v134);
        if ((_DWORD)hasExceptionsAfterHandlingTraps)
          goto LABEL_254;
      }
      if (v19 == (unsigned __int8 *)10)
        goto LABEL_196;
      v21 = a2[7];
      v156 = v21;
      if (((unint64_t)v19 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v126 = 0;
        v127 = 0;
        v128 = 0;
LABEL_195:
        *((_QWORD *)&v132 + 1) = v126;
        v86 = v127;
        v126 = 0;
        v127 = 0;
        v133 = v86;
        _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_12KeyValuePairINS8_6StringEN7WebCore30GPUShaderModuleCompilationHintEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSC_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSH_SI_EEEEEEDcSM_DpT0_((uint64_t)hasExceptionsAfterHandlingTraps, (WTF::StringImpl *)&v126);
LABEL_196:
        WTF::AtomStringImpl::addLiteral();
        v87 = v136;
        v88 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v136);
        if (v87)
        {
          if (*(_DWORD *)v87 == 2)
            WTF::StringImpl::destroy(v87, v10);
          else
            *(_DWORD *)v87 -= 2;
        }
        if (*((_DWORD *)v134 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v134))
        {
LABEL_254:
          *(_DWORD *)(a3 + 40) = 1;
          goto LABEL_225;
        }
        if (v88 == 10)
        {
          v131 = 0uLL;
          *(_QWORD *)a3 = v9;
          *(_QWORD *)(a3 + 8) = v16;
          *(_QWORD *)(a3 + 16) = 0;
LABEL_224:
          *(_QWORD *)(a3 + 24) = *((_QWORD *)&v132 + 1);
          v109 = v133;
          *((_QWORD *)&v132 + 1) = 0;
          v133 = 0;
          *(_QWORD *)(a3 + 32) = v109;
          *(_DWORD *)(a3 + 40) = 0;
          goto LABEL_225;
        }
        WebCore::Converter<WebCore::IDLObject>::convert<WebCore::DefaultExceptionThrower>((uint64_t)a2, v88, (uint64_t)&v136);
        v89 = v137;
        if (v137)
        {
          *(_DWORD *)(a3 + 40) = 1;
          LODWORD(v90) = v89;
          goto LABEL_215;
        }
        v90 = v136;
        if (!v136)
        {
LABEL_216:
          ((void (*)(WTF::StringImpl **, JSC::JSCell **))off_1E328A7D8[v90])(&v167, &v136);
LABEL_217:
          if (!v89)
          {
            v103 = (uint64_t *)v132;
            v104 = v131;
            v131 = 0uLL;
            *(_OWORD *)a3 = v104;
            *(_QWORD *)(a3 + 16) = 0;
            if (v103)
            {
              v105 = *(_QWORD *)(((unint64_t)(v103 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v106 = *(_QWORD **)(v105 + 40);
              if (!v106)
              {
                JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v103 - 2) & 0xFFFFFFFFFFFFF000) + 0x10));
                v106 = *(_QWORD **)(v105 + 40);
              }
              *(_QWORD *)(v105 + 40) = *v106;
              v106[2] = 0;
              v107 = v106 + 2;
              *v106 = 0;
              v106[1] = 0;
              *(_QWORD *)(a3 + 16) = v106 + 2;
              v108 = *v103;
              if (*v103)
              {
                v118 = *(_QWORD **)(((unint64_t)(v107 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                v119 = v118[3];
                v118 += 3;
                *(v107 - 2) = v119;
                *(v107 - 1) = v118;
                *v118 = v107 - 2;
                *(_QWORD *)(v119 + 8) = v107 - 2;
              }
              *v107 = v108;
            }
            goto LABEL_224;
          }
LABEL_225:
          v15 = v130;
          goto LABEL_226;
        }
        v91 = *(_QWORD *)((((unint64_t)v136 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v92 = *(_QWORD **)(v91 + 40);
        if (v92)
        {
          *(_QWORD *)(v91 + 40) = *v92;
          v92[2] = 0;
          v93 = v92 + 2;
          *v92 = 0;
          v92[1] = 0;
        }
        else
        {
          JSC::HandleSet::grow(*(JSC::HandleSet **)((((unint64_t)v136 - 16) & 0xFFFFFFFFFFFFF000) + 0x10));
          v120 = *(_QWORD **)(v91 + 40);
          v90 = v136;
          *(_QWORD *)(v91 + 40) = *v120;
          *v120 = 0;
          v120[1] = 0;
          v120[2] = 0;
          v93 = v120 + 2;
          if (!v90)
          {
            v94 = 0;
LABEL_208:
            *v93 = v94;
            v95 = (unint64_t)(v93 - 2);
            v96 = *(uint64_t **)((v95 & 0xFFFFFFFFFFFFF000) + 0x10);
            v97 = *v96;
            v98 = *(_QWORD *)(*v96 + 712);
            if (!v98)
            {
              JSC::HandleSet::grow((JSC::HandleSet *)(v97 + 672));
              v98 = *(_QWORD *)(v97 + 712);
            }
            *(_QWORD *)(v97 + 712) = *(_QWORD *)v98;
            *(_QWORD *)(v98 + 16) = 0;
            *(_QWORD *)v98 = 0;
            *(_QWORD *)(v98 + 8) = 0;
            *(_QWORD *)&v132 = v98 + 16;
            if (v94)
            {
              v99 = *(unint64_t **)((v98 & 0xFFFFFFFFFFFFF000) + 0x10);
              v100 = v99[3];
              v99 += 3;
              *(_QWORD *)v98 = v100;
              *(_QWORD *)(v98 + 8) = v99;
              *v99 = v98;
              *(_QWORD *)(v100 + 8) = v98;
            }
            *(_QWORD *)(v98 + 16) = v94;
            v90 = *(JSC::JSCell **)((v95 & 0xFFFFFFFFFFFFF000) + 0x10);
            v101 = *(_QWORD **)(v95 + 8);
            if (v101)
            {
              v102 = *(_QWORD *)v95;
              *v101 = *(_QWORD *)v95;
              *(_QWORD *)(v102 + 8) = v101;
              *(_QWORD *)v95 = 0;
              *(_QWORD *)(v95 + 8) = 0;
            }
            *(_QWORD *)v95 = *((_QWORD *)v90 + 5);
            *((_QWORD *)v90 + 5) = v95;
            LODWORD(v90) = v137;
LABEL_215:
            if ((_DWORD)v90 == -1)
              goto LABEL_217;
            goto LABEL_216;
          }
        }
        v94 = *(_QWORD *)v90;
        if (*(_QWORD *)v90)
        {
          v116 = *(_QWORD **)(((unint64_t)(v93 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v117 = v116[3];
          v116 += 3;
          *(v93 - 2) = v117;
          *(v93 - 1) = v116;
          *v116 = v93 - 2;
          *(_QWORD *)(v117 + 8) = v93 - 2;
        }
        goto LABEL_208;
      }
      if (((unint64_t)v19 & 0xFFFE000000000002) != 0 || v19[5] <= 0x16u)
      {
        JSC::throwTypeError();
        v73 = 1;
        v128 = 1;
        *(_DWORD *)(a3 + 40) = 1;
        goto LABEL_159;
      }
      v154 = 0;
      v155 = 0;
      v153 = 0;
      v22 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
      *(_DWORD *)v22 = 1;
      *((_QWORD *)v22 + 1) = (char *)v22 + 24;
      *((_QWORD *)v22 + 2) = 20;
      v149 = v22;
      v150 = 0;
      v151 = v21;
      v152 = 259;
      (*(void (**)(unsigned __int8 *, JSC::VM **, WTF **, _QWORD))(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)v19 & 0xFFFFFFFE)
                                                                                              + 0x4C)
                                                                            + 0x78))(v19, a2, &v149, 0);
      v121 = v16;
      if (*((_DWORD *)v21 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
      {
        v76 = 1;
LABEL_165:
        v128 = v76;
LABEL_166:
        if (v150)
          WTF::fastFree((WTF *)(v150 - 16), v10);
        v77 = v149;
        v149 = 0;
        v16 = v121;
        if (v77)
        {
          if (*(_DWORD *)v77 == 1)
          {
            v110 = *((unsigned int *)v77 + 5);
            if ((_DWORD)v110)
            {
              v111 = (WTF::StringImpl **)*((_QWORD *)v77 + 1);
              v112 = 8 * v110;
              do
              {
                v113 = *v111;
                *v111 = 0;
                if (v113)
                {
                  if (*(_DWORD *)v113 == 2)
                    WTF::StringImpl::destroy(v113, v10);
                  else
                    *(_DWORD *)v113 -= 2;
                }
                ++v111;
                v112 -= 8;
              }
              while (v112);
            }
            v114 = (WTF *)*((_QWORD *)v77 + 1);
            if ((WTF *)((char *)v77 + 24) != v114 && v114 != 0)
            {
              *((_QWORD *)v77 + 1) = 0;
              *((_DWORD *)v77 + 4) = 0;
              WTF::fastFree(v114, v10);
            }
            WTF::fastFree(v77, v10);
          }
          else
          {
            --*(_DWORD *)v77;
          }
        }
        v78 = (uint64_t)v153;
        if (v153)
        {
          v79 = *((unsigned int *)v153 - 1);
          if ((_DWORD)v79)
          {
            v80 = v153;
            do
            {
              v81 = *v80;
              if (*v80 != (WTF::StringImpl *)-1)
              {
                *v80 = 0;
                if (v81)
                {
                  if (*(_DWORD *)v81 == 2)
                    WTF::StringImpl::destroy(v81, v10);
                  else
                    *(_DWORD *)v81 -= 2;
                }
              }
              v80 += 2;
              --v79;
            }
            while (v79);
          }
          WTF::fastFree((WTF *)(v78 - 16), v10);
        }
        hasExceptionsAfterHandlingTraps = v154;
        if (HIDWORD(v155))
        {
          v82 = 24 * HIDWORD(v155);
          v83 = (char *)v154 + 8;
          do
          {
            v84 = *((unsigned int *)v83 + 2);
            if ((_DWORD)v84 != -1)
              ((void (*)(JSC::JSCell **, char *))off_1E328A6A0[v84])(&v136, v83);
            *((_DWORD *)v83 + 2) = -1;
            v85 = (WTF::StringImpl *)*((_QWORD *)v83 - 1);
            *((_QWORD *)v83 - 1) = 0;
            if (v85)
            {
              if (*(_DWORD *)v85 == 2)
                WTF::StringImpl::destroy(v85, v10);
              else
                *(_DWORD *)v85 -= 2;
            }
            v83 += 24;
            v82 -= 24;
          }
          while (v82);
          hasExceptionsAfterHandlingTraps = v154;
        }
        if (hasExceptionsAfterHandlingTraps)
          hasExceptionsAfterHandlingTraps = (WTF *)WTF::fastFree(hasExceptionsAfterHandlingTraps, v10);
        v73 = v128;
        if (!v128)
          goto LABEL_195;
LABEL_262:
        *(_DWORD *)(a3 + 40) = 1;
        if (v73 == -1)
          goto LABEL_225;
LABEL_159:
        ((void (*)(JSC::JSCell **, WTF **))off_1E328A7C8[v73])(&v136, &v126);
        goto LABEL_225;
      }
      v23 = *((unsigned int *)v149 + 5);
      if (!(_DWORD)v23)
      {
        v74 = 0;
        v75 = 0;
LABEL_164:
        v76 = 0;
        v154 = 0;
        v155 = 0;
        v126 = v74;
        v127 = v75;
        goto LABEL_165;
      }
      v125 = 0;
      v24 = (unint64_t *)*((_QWORD *)v149 + 1);
      v25 = &v24[v23];
      v124 = 0;
      v122 = 0;
      v123 = v25;
      while (1)
      {
        v138 = 0xFFFFFFFF00000000;
        v139 = v19;
        v140 = 0;
        v141 = 0;
        v142 = 0;
        v143 = 2;
        v144 = 0;
        LOBYTE(v145) = 0;
        v146 = 0;
        v147 = 0;
        v148 = 0;
        v26 = (*(uint64_t (**)(unsigned __int8 *, JSC::VM **, unint64_t, JSC::JSCell **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) + 0x68))(v19, a2, *v24, &v136);
        if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21))
        {
          v69 = 1;
          v128 = 1;
          goto LABEL_120;
        }
        if (!v26 || (v138 & 4) != 0)
          goto LABEL_119;
        v27 = *v24;
        if (!*v24)
          goto LABEL_40;
        if ((*(_BYTE *)(v27 + 16) & 0x20) == 0)
          break;
        v167 = a2[7];
        JSC::throwTypeError();
        v163 = 0;
LABEL_41:
        WTF::replaceUnpairedSurrogatesWithReplacementCharacter();
        v29 = v163;
        v163 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v28);
          else
            *(_DWORD *)v29 -= 2;
        }
        if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21))
        {
LABEL_148:
          v69 = 1;
          v128 = 1;
          goto LABEL_115;
        }
        if (v144)
        {
          v72 = JSC::JSObject::get((JSC::Structure *)v19, (JSC::JSGlobalObject *)a2, *v24);
LABEL_146:
          v30 = v72;
          goto LABEL_48;
        }
        if (HIBYTE(v142) != 1)
        {
          if (HIBYTE(v142) == 2)
            v72 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v136, (JSC::JSGlobalObject *)a2);
          else
            v72 = JSC::PropertySlot::customGetter();
          goto LABEL_146;
        }
        v30 = (unint64_t)v136;
LABEL_48:
        if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21))
          goto LABEL_148;
        v161 = a2[7];
        if ((v30 & 0xFFFFFFFFFFFFFFF7) == 2)
        {
          v159 = 0;
          v160 = 0;
LABEL_58:
          WebCore::throwRequiredMemberTypeError((int)a2, (int)&v161, "layout", 7, "GPUShaderModuleCompilationHint", 31, "(GPUPipelineLayout or GPUAutoLayoutMode)", 41);
          v166 = 1;
          goto LABEL_80;
        }
        if ((v30 & 0xFFFE000000000002) != 0 || (v31 = JSC::JSCell::getObject((JSC::JSCell *)v30)) == 0)
        {
          JSC::throwTypeError();
          v166 = 1;
          v46 = 1;
          goto LABEL_138;
        }
        v32 = (JSC::Structure *)v31;
        v159 = 0;
        v160 = 0;
        WTF::AtomStringImpl::addLiteral();
        v33 = v167;
        v35 = JSC::JSObject::get(v32, (JSC::JSGlobalObject *)a2, (unint64_t)v167);
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v34);
          else
            *(_DWORD *)v33 -= 2;
        }
        if (!*((_DWORD *)v161 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v161))
        {
          if (v35 == 10)
            goto LABEL_58;
          if ((v35 & 0xFFFE000000000002) == 0)
          {
            v36 = *(unsigned int *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x4C);
            v37 = *(_DWORD *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x4C) != 0;
            if ((_DWORD)v36)
            {
              v38 = 16 * v36;
              if ((char **)v38 != &WebCore::JSGPUPipelineLayout::s_info)
              {
                do
                {
                  v38 = *(_QWORD *)(v38 + 16);
                  v37 = v38 != 0;
                }
                while ((char **)v38 != &WebCore::JSGPUPipelineLayout::s_info && v38 != 0);
              }
            }
            if (v37)
            {
              v40 = *(_DWORD **)(v35 + 24);
              if (v40)
              {
                v41 = 0;
                ++*v40;
                v168 = v40;
                goto LABEL_73;
              }
            }
          }
          v157 = a2[7];
          v42 = v157;
          v43 = WebCore::parseEnumeration<WebCore::GPUAutoLayoutMode>((JSC::JSGlobalObject *)a2, v35);
          if (*((_DWORD *)v42 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v42) & 1) != 0)
          {
LABEL_156:
            v170 = 1;
            v166 = 1;
            v45 = 1;
            goto LABEL_78;
          }
          if (v43 <= 0xFFu)
          {
            JSC::throwTypeError();
            goto LABEL_156;
          }
          LOBYTE(v168) = v43;
          v41 = 1;
LABEL_73:
          v169 = v41;
          v170 = 0;
          LOBYTE(v157) = 0;
          v158 = -1;
          ((void (*)(uint64_t **, JSC::VM **, _DWORD **))off_1E328A6B0[v41])(&v162, &v157, &v168);
          v158 = v41;
          v162 = &v159;
          ((void (*)(uint64_t **, uint64_t *, JSC::VM **))off_1E328A6C0[v41])(&v162, &v159, &v157);
          if (v158 != -1)
            ((void (*)(uint64_t **, JSC::VM **))off_1E328A6A0[v158])(&v162, &v157);
          v164[0] = 0;
          v165 = -1;
          v44 = v160;
          if (v160 != -1)
          {
            ((void (*)(JSC::VM **, char *, uint64_t *))off_1E328A6B0[v160])(&v157, v164, &v159);
            v165 = v44;
          }
          v166 = 0;
          v45 = v170;
          if (v170 != -1)
LABEL_78:
            ((void (*)(JSC::VM **, _DWORD **))off_1E328A6F0[v45])(&v157, &v168);
          v25 = v123;
          goto LABEL_80;
        }
        v166 = 1;
LABEL_80:
        if (v160 != -1)
          ((void (*)(WTF::StringImpl **, uint64_t *))off_1E328A6A0[v160])(&v167, &v159);
        v46 = v166;
        if (!v166)
        {
          if (!v135 || (*((_BYTE *)v135 + 16) & 4) != 0)
            goto LABEL_87;
          v159 = v125;
          WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>((uint64_t *)&v153, &v135, (const WTF::StringImpl *)&v159, (uint64_t)&v167);
          if ((_BYTE)v169)
          {
            if (v166)
              goto LABEL_261;
LABEL_87:
            LOBYTE(v159) = 0;
            v160 = -1;
            v47 = v165;
            if (v165 == -1)
            {
              v50 = v135;
              v135 = 0;
              v167 = v50;
              LOBYTE(v168) = 0;
            }
            else
            {
              v48 = off_1E328A6B0[v165];
              ((void (*)(JSC::VM **, uint64_t *, char *))v48)(&v157, &v159, v164);
              v160 = v47;
              v49 = v135;
              v135 = 0;
              v167 = v49;
              LOBYTE(v168) = 0;
              v169 = -1;
              ((void (*)(JSC::VM **, _DWORD **, uint64_t *))v48)(&v157, &v168, &v159);
              v25 = v123;
            }
            v169 = v47;
            if (v125 == (_DWORD)v155)
            {
              v51 = WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::GPUShaderModuleCompilationHint>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v154, v125 + 1, (unint64_t)&v167);
              v52 = HIDWORD(v155);
              v53 = v154;
              v54 = (char *)v154 + 24 * HIDWORD(v155);
              v55 = *(_QWORD *)v51;
              *(_QWORD *)v51 = 0;
              v124 = v53;
              *((_QWORD *)v53 + 3 * v52) = v55;
              v56 = (uint64_t)v53 + 24 * v52;
              *(_BYTE *)(v56 + 8) = 0;
              v10 = (WTF::StringImpl *)(v56 + 8);
              *((_DWORD *)v54 + 4) = -1;
              v57 = v54 + 16;
              v58 = *(unsigned int *)(v51 + 16);
              if ((_DWORD)v58 != -1)
              {
                ((void (*)(JSC::VM **, WTF::StringImpl *, unint64_t))off_1E328A6B0[v58])(&v157, v10, v51 + 8);
                *v57 = v58;
              }
              v25 = v123;
LABEL_96:
              v125 = v52 + 1;
              HIDWORD(v155) = v52 + 1;
              if (v169 != -1)
                ((void (*)(JSC::VM **, _DWORD **))off_1E328A6A0[v169])(&v157, &v168);
            }
            else
            {
              v59 = (uint64_t)v124 + 24 * v125;
              v60 = (unint64_t)v167;
              v167 = 0;
              *(_QWORD *)v59 = v60;
              *(_BYTE *)(v59 + 8) = 0;
              v10 = (WTF::StringImpl *)(v59 + 8);
              *(_DWORD *)(v59 + 16) = -1;
              v61 = (int *)(v59 + 16);
              v62 = v169;
              if (v169 != -1)
              {
                ((void (*)(JSC::VM **, WTF::StringImpl *, _DWORD **))off_1E328A6B0[v169])(&v157, v10, &v168);
                *v61 = v62;
                v52 = HIDWORD(v155);
                goto LABEL_96;
              }
              v125 = ++HIDWORD(v155);
            }
            v169 = -1;
            v68 = v167;
            v167 = 0;
            if (v68)
            {
              if (*(_DWORD *)v68 == 2)
                WTF::StringImpl::destroy(v68, v10);
              else
                *(_DWORD *)v68 -= 2;
            }
            if (v160 != -1)
              ((void (*)(JSC::VM **, uint64_t *))off_1E328A6A0[v160])(&v157, &v159);
            v69 = 0;
            v122 = v124;
LABEL_112:
            v46 = v166;
            goto LABEL_113;
          }
          if (v166)
          {
LABEL_261:
            std::__throw_bad_variant_access[abi:sn180100]();
            goto LABEL_262;
          }
          LOBYTE(v159) = 0;
          v160 = -1;
          v63 = v165;
          if (v165 != -1)
          {
            ((void (*)(JSC::VM **, uint64_t *, char *))off_1E328A6B0[v165])(&v157, &v159, v164);
            v160 = v63;
          }
          v64 = *((_QWORD *)v167 + 1);
          if (v64 >= v125)
          {
LABEL_264:
            __break(0xC471u);
            JUMPOUT(0x194B9C02CLL);
          }
          v65 = (uint64_t)v122 + 24 * v64;
          v66 = (JSC::VM *)(v65 + 8);
          v67 = *(unsigned int *)(v65 + 16);
          if ((_DWORD)v67 == -1)
          {
            if ((_DWORD)v63 == -1)
              goto LABEL_134;
          }
          else if ((_DWORD)v63 == -1)
          {
            ((void (*)(JSC::VM **, JSC::VM *))off_1E328A6A0[v67])(&v157, v66);
            *((_DWORD *)v66 + 2) = -1;
LABEL_132:
            if (v160 != -1)
              ((void (*)(JSC::VM **, uint64_t *))off_1E328A6A0[v160])(&v157, &v159);
LABEL_134:
            v69 = 5;
            goto LABEL_112;
          }
          v157 = v66;
          ((void (*)(JSC::VM **, JSC::VM *, uint64_t *))off_1E328A6C0[v63])(&v157, v66, &v159);
          goto LABEL_132;
        }
LABEL_138:
        v69 = 1;
        v128 = 1;
LABEL_113:
        if (v46 != 0xFFFFFFFFLL)
          ((void (*)(WTF::StringImpl **, char *))off_1E328D338[v46])(&v167, v164);
LABEL_115:
        v70 = v135;
        v135 = 0;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2)
          {
            WTF::StringImpl::destroy(v70, v10);
            if (v69)
              goto LABEL_120;
LABEL_119:
            v69 = 0;
            goto LABEL_120;
          }
          *(_DWORD *)v70 -= 2;
        }
        if (!v69)
          goto LABEL_119;
LABEL_120:
        if (v146)
        {
          v71 = *(_DWORD *)(v145 + 4);
          if (!v71)
            goto LABEL_264;
          *(_DWORD *)(v145 + 4) = v71 - 1;
        }
        if (v69 != 5 && v69)
          goto LABEL_166;
        if (++v24 == v25)
        {
          v74 = v154;
          v75 = v155;
          goto LABEL_164;
        }
      }
      *(_DWORD *)v27 += 2;
LABEL_40:
      v163 = (WTF::StringImpl *)v27;
      goto LABEL_41;
    }
  }
  JSC::throwTypeError();
  *(_DWORD *)(a3 + 40) = 1;
}

WTF *WebCore::JSGPUShaderStage::destroy(WebCore::JSGPUShaderStage *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSGPUShaderStage::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUShaderStage>,(WebCore::DOMConstructorID)38>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  JSC::Heap *v8;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  int v24;
  uint64_t v25;
  JSC::JSCell *v26;
  JSC::JSObject *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  uint64_t v49;
  int *v50;
  JSC::Structure **v51;
  int *v52;
  int v53;
  int v54;
  JSC::Structure *v55;
  int v56;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 304);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v47) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  v8 = (JSC::Heap *)(a1 + 192);
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v42 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v42);
    v5[2] = SlowCase + (int)v42;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v47, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUShaderStage>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v43 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v43);
    v10[2848] = v2 + (int)v43;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v47 = 0;
  v48 = v2;
  v49 = 0x1000000FFFFFFFFLL;
  v50 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v47);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v47);
  v14 = v47;
  v47 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v47 = 0;
  v48 = v2;
  v49 = 0x1000000FFFFFFFFLL;
  v50 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v47);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(a2 + 3296);
  if (!v17)
    goto LABEL_21;
  v18 = *(_DWORD *)(v17 - 8);
  v19 = ((unint64_t)&WebCore::JSGPUShaderStage::s_info + ~((_QWORD)&WebCore::JSGPUShaderStage::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUShaderStage::s_info + ~((_QWORD)&WebCore::JSGPUShaderStage::s_info << 32)) >> 22);
  v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
  v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
  v22 = v18 & ((v21 >> 31) ^ v21);
  v23 = *(char ***)(v17 + 16 * v22);
  if (v23 != &WebCore::JSGPUShaderStage::s_info)
  {
    v24 = 1;
    while (v23)
    {
      v22 = ((_DWORD)v22 + v24) & v18;
      v23 = *(char ***)(v17 + 16 * v22);
      ++v24;
      if (v23 == &WebCore::JSGPUShaderStage::s_info)
        goto LABEL_20;
    }
LABEL_21:
    v26 = *(JSC::JSCell **)(a2 + 656);
    LODWORD(v47) = 23;
    if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
    {
      v27 = (JSC::JSObject *)JSC::JSCell::getObject(v26);
      if (v27)
        JSC::JSObject::didBecomePrototype(v27, (JSC::VM *)a1);
    }
    v28 = (uint64_t *)(a1 + 38904);
    v29 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v29 = v5[2];
      if ((v29 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v29 = JSC::LocalAllocator::allocateSlowCase();
LABEL_26:
        *(_DWORD *)v29 = 0;
        MEMORY[0x19AEA4278](v29, a1, a2, v26, &v47, &WebCore::JSGPUShaderStagePrototype::s_info, 0, 0);
        if (*(_BYTE *)(a1 + 755))
          __dmb(0xAu);
        *(_DWORD *)(v29 + 16) |= 0x80000u;
        v30 = *v28;
        if (*(_QWORD *)(a1 + 38904) >= *(_QWORD *)(a1 + 38912))
        {
          v30 = *(_QWORD *)(a1 + 38920);
          if ((v30 & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
            *(_DWORD *)v30 = 0;
            v31 = *(_DWORD *)(v29 + 8);
            *(_DWORD *)v30 = v29 >> 4;
            *(_DWORD *)(v30 + 4) = v31;
            *(_QWORD *)(v30 + 8) = 0;
            if (*(_BYTE *)(a1 + 755))
              __dmb(0xAu);
            JSC::reifyStaticProperties<4u>((JSC::VM *)a1, (uint64_t)&WebCore::JSGPUShaderStage::s_info, &WebCore::JSGPUShaderStagePrototypeTableValues, (JSC::JSObject *)v30);
            v32 = *(_QWORD *)(v5[227] + 2776);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v34 = JSC::JSString::create(a1, &v47);
            v35 = v47;
            v47 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v33);
              else
                *(_DWORD *)v35 -= 2;
            }
            v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
            v56 = *(_DWORD *)v30;
            v55 = v36;
            v37 = JSC::Structure::outOfLineCapacity(v36);
            v53 = 0;
            v54 = v37;
            v47 = (WTF::StringImpl *)&v54;
            v48 = v30;
            v49 = a1;
            v50 = &v56;
            v51 = &v55;
            v52 = &v53;
            JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)a1, v32, 6, (uint64_t)&v47);
            if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
              JSC::VM::invalidateStructureChainIntegrity();
            JSC::JSObject::putDirectOffset(v30, a1, v53, v34);
            *((_DWORD *)v36 + 4) |= 0x10u;
            LODWORD(v47) = 23;
            if ((v30 & 0xFFFE000000000002) == 0)
            {
              v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
              if (v38)
                JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)a1);
            }
            v39 = *v5;
            v8 = (JSC::Heap *)(a1 + 192);
            if (*v5 >= (unint64_t)v5[1])
            {
              v39 = v5[2];
              if ((v39 & 1) != 0)
              {
                JSC::sanitizeStackForVM();
                v39 = JSC::LocalAllocator::allocateSlowCase();
                goto LABEL_40;
              }
              v46 = *(_QWORD *)(v39 + 8) ^ v5[3];
              v5[1] = v39 + HIDWORD(v46);
              v5[2] = v39 + (int)v46;
            }
            *v5 = v39 + 128;
LABEL_40:
            *(_DWORD *)v39 = 0;
            MEMORY[0x19AEA4278](v39, a1, a2, v30, &v47, &WebCore::JSGPUShaderStage::s_info, 0, 0);
            if (*(_BYTE *)(a1 + 755))
              __dmb(0xAu);
            v25 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSGPUShaderStage::s_info);
            goto LABEL_43;
          }
          v45 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(a1 + 38928);
          *(_QWORD *)(a1 + 38912) = v30 + HIDWORD(v45);
          *(_QWORD *)(a1 + 38920) = v30 + (int)v45;
        }
        *v28 = v30 + 16;
        goto LABEL_30;
      }
      v44 = *(_QWORD *)(v29 + 8) ^ v5[3];
      v5[1] = v29 + HIDWORD(v44);
      v5[2] = v29 + (int)v44;
    }
    *v5 = v29 + 128;
    goto LABEL_26;
  }
LABEL_20:
  v25 = *(_QWORD *)(v17 + 16 * v22 + 8);
  if (!v25)
    goto LABEL_21;
LABEL_43:
  v40 = *(_QWORD *)(v25 + 48);
  v47 = 0;
  v48 = v2;
  v49 = 0x1000000FFFFFFFFLL;
  v50 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v40, 14, (uint64_t)&v47);
  JSC::reifyStaticProperties<3u>((JSC::VM *)a1, (uint64_t)&WebCore::JSGPUShaderStage::s_info, &WebCore::JSGPUShaderStageConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 304) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath(v8, (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUShaderStageConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUShaderStagePrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUShaderStage>,(WebCore::DOMConstructorID)38>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::convertDictionary<WebCore::GPUStencilFaceState>@<X0>(JSC::JSCell *this@<X1>, unint64_t result@<X0>, int *a3@<X8>)
{
  JSC::VM *v4;
  int v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  JSC::JSGlobalObject *v9;
  uint64_t Object;
  JSC::Structure *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  JSC::VM *v23;
  int v24;
  int v25;
  WTF::StringImpl *v26;

  v4 = *(JSC::VM **)(result + 56);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    v9 = (JSC::JSGlobalObject *)result;
    if (((unint64_t)this & 0xFFFE000000000002) == 0)
    {
      Object = JSC::JSCell::getObject(this);
      if (Object)
      {
        v11 = (JSC::Structure *)Object;
        WTF::AtomStringImpl::addLiteral();
        v13 = JSC::JSObject::get(v11, v9, (unint64_t)v26);
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v12);
          else
            *(_DWORD *)v26 -= 2;
        }
        if (*((_DWORD *)v4 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
          if ((result & 1) != 0)
            goto LABEL_45;
        }
        if (v13 == 10)
        {
          LOBYTE(v8) = 7;
        }
        else
        {
          v14 = (WTF::StringImpl *)*((_QWORD *)v9 + 7);
          v26 = v14;
          v8 = WebCore::parseEnumeration<WebCore::GPUCompareFunction>(v9, v13);
          if (*((_DWORD *)v14 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v14);
            if ((result & 1) != 0)
              goto LABEL_45;
          }
          if (v8 <= 0xFFu)
            goto LABEL_44;
        }
        WTF::AtomStringImpl::addLiteral();
        v16 = JSC::JSObject::get(v11, v9, (unint64_t)v26);
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v15);
          else
            *(_DWORD *)v26 -= 2;
        }
        if (*((_DWORD *)v4 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
          if ((result & 1) != 0)
            goto LABEL_45;
        }
        if (v16 == 10)
        {
          LOBYTE(v6) = 0;
        }
        else
        {
          v17 = (WTF::StringImpl *)*((_QWORD *)v9 + 7);
          v26 = v17;
          v6 = WebCore::parseEnumeration<WebCore::GPUStencilOperation>(v9, v16);
          if (*((_DWORD *)v17 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v17);
            if ((result & 1) != 0)
              goto LABEL_45;
          }
          if (v6 <= 0xFFu)
            goto LABEL_44;
        }
        WTF::AtomStringImpl::addLiteral();
        v19 = JSC::JSObject::get(v11, v9, (unint64_t)v26);
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v18);
          else
            *(_DWORD *)v26 -= 2;
        }
        if (*((_DWORD *)v4 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
          if ((result & 1) != 0)
            goto LABEL_45;
        }
        if (v19 == 10)
        {
          LOBYTE(v7) = 0;
        }
        else
        {
          v20 = (WTF::StringImpl *)*((_QWORD *)v9 + 7);
          v26 = v20;
          v7 = WebCore::parseEnumeration<WebCore::GPUStencilOperation>(v9, v19);
          if (*((_DWORD *)v20 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v20);
            if ((result & 1) != 0)
              goto LABEL_45;
          }
          if (v7 <= 0xFFu)
            goto LABEL_44;
        }
        WTF::AtomStringImpl::addLiteral();
        result = JSC::JSObject::get(v11, v9, (unint64_t)v26);
        v22 = result;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            result = WTF::StringImpl::destroy(v26, v21);
          else
            *(_DWORD *)v26 -= 2;
        }
        if (*((_DWORD *)v4 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
          if ((result & 1) != 0)
            goto LABEL_45;
        }
        if (v22 == 10)
        {
          v5 = 0;
          goto LABEL_38;
        }
        v23 = (JSC::VM *)*((_QWORD *)v9 + 7);
        result = WebCore::parseEnumeration<WebCore::GPUStencilOperation>(v9, v22);
        v24 = result;
        if (*((_DWORD *)v23 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v23);
          if ((result & 1) != 0)
          {
LABEL_45:
            v25 = 1;
            goto LABEL_39;
          }
        }
        if ((unsigned __int16)v24 > 0xFFu)
        {
          v5 = v24 << 24;
          goto LABEL_38;
        }
      }
    }
LABEL_44:
    result = JSC::throwTypeError();
    goto LABEL_45;
  }
  v5 = 0;
  LOBYTE(v6) = 0;
  LOBYTE(v7) = 0;
  LOBYTE(v8) = 7;
LABEL_38:
  v25 = 0;
  *a3 = v5 | (v6 << 16) | (v7 << 8) | v8;
LABEL_39:
  a3[1] = v25;
  return result;
}

uint64_t WebCore::parseEnumeration<WebCore::GPUStencilOperation>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  const char *v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  char v13;
  char **v14;
  int v16;
  int v17;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  BOOL v28;
  int v29;
  uint64_t v32;
  unint64_t v33;

  v3 = a1;
  v33 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v33, a1);
    v4 = v32;
    if (v32)
      goto LABEL_7;
LABEL_48:
    v16 = 0;
    v17 = 0;
    return v16 | (v17 << 8);
  }
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 1) == 0)
  {
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
  if (v4)
LABEL_5:
    *(_DWORD *)v4 += 2;
LABEL_6:
  if (!v4)
    goto LABEL_48;
LABEL_7:
  v5 = *(const char **)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 4);
  v7 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
  v8 = v6 != 15;
  if (v5 == "decrement-clamp" || v6 != 15)
  {
    if (v5 == "decrement-clamp" && v6 == 15)
      goto LABEL_63;
    v9 = v6 == 14;
    v10 = v6 != 14;
    if (v5 != "decrement-wrap" && v6 == 14)
    {
      if ((_DWORD)v7)
      {
        if (*v5 == 100 && *(_QWORD *)(v5 + 1) == 0x746E656D65726365 && *(_QWORD *)(v5 + 6) == 0x706172772D746E65)
          goto LABEL_41;
      }
      else if (*(_WORD *)v5 == 100)
      {
        v26 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BFDE0);
        v26.i16[0] = vminvq_u16(v26);
        if (v26.i32[0])
        {
          v27 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 12), (int16x8_t)xmmword_1968BFE00);
          v27.i16[0] = vminvq_u16(v27);
          if (v27.i32[0])
            goto LABEL_41;
        }
      }
      v10 = 0;
      v11 = 14;
      goto LABEL_14;
    }
    if (v5 != "decrement-wrap")
    {
      v11 = *(_DWORD *)(v4 + 4);
      goto LABEL_14;
    }
    v11 = *(_DWORD *)(v4 + 4);
    if (v6 != 14)
      goto LABEL_14;
LABEL_41:
    v14 = &off_1E3284C88;
    goto LABEL_64;
  }
  if (!(_DWORD)v7)
  {
    if (*(_WORD *)v5 != 100)
      goto LABEL_13;
    v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BFDE0);
    v19.i16[0] = vminvq_u16(v19);
    if (!v19.i32[0])
      goto LABEL_13;
    v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 14), (int16x8_t)xmmword_1968BFDF0);
    v20.i16[0] = vminvq_u16(v20);
    if (!v20.i32[0])
      goto LABEL_13;
LABEL_63:
    v14 = &WebCore::parseEnumerationFromString<WebCore::GPUStencilOperation>(WTF::String const&)::mappings;
    goto LABEL_64;
  }
  if (*v5 == 100 && *(_QWORD *)(v5 + 1) == 0x746E656D65726365 && *(_QWORD *)(v5 + 7) == 0x706D616C632D746ELL)
    goto LABEL_63;
LABEL_13:
  v8 = 0;
  v9 = 0;
  v10 = 1;
  v11 = 15;
LABEL_14:
  v12 = v7 << 32;
  if (v5 == "increment-clamp" || v8)
  {
    if (v5 != "increment-clamp" || v6 != 15)
      goto LABEL_21;
    goto LABEL_44;
  }
  if (!v11)
    goto LABEL_44;
  if ((_DWORD)v7)
  {
    if (*v5 != 105 || *(_QWORD *)(v5 + 1) != 0x746E656D6572636ELL || *(_QWORD *)(v5 + 7) != 0x706D616C632D746ELL)
      goto LABEL_21;
LABEL_44:
    v14 = &off_1E3284CA0;
    goto LABEL_64;
  }
  if (*(_WORD *)v5 == 105)
  {
    v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BFE10);
    v22.i16[0] = vminvq_u16(v22);
    if (v22.i32[0])
    {
      v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 14), (int16x8_t)xmmword_1968BFDF0);
      v23.i16[0] = vminvq_u16(v23);
      if (v23.i32[0])
        goto LABEL_44;
    }
  }
  v12 = 0;
LABEL_21:
  v13 = v5 == "increment-wrap" || v10;
  if ((v13 & 1) != 0)
  {
    if (v5 == "increment-wrap" && v9)
      goto LABEL_30;
  }
  else
  {
    if (!v11)
    {
LABEL_30:
      v14 = &off_1E3284CB8;
LABEL_64:
      v16 = *((unsigned __int8 *)v14 + 16);
      v17 = 1;
      goto LABEL_65;
    }
    if (v12)
    {
      if (*v5 == 105 && *(_QWORD *)(v5 + 1) == 0x746E656D6572636ELL && *(_QWORD *)(v5 + 6) == 0x706172772D746E65)
        goto LABEL_30;
    }
    else
    {
      if (*(_WORD *)v5 == 105)
      {
        v24 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BFE10);
        v24.i16[0] = vminvq_u16(v24);
        if (v24.i32[0])
        {
          v25 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 12), (int16x8_t)xmmword_1968BFE00);
          v25.i16[0] = vminvq_u16(v25);
          if (v25.i32[0])
            goto LABEL_30;
        }
      }
      v12 = 0;
    }
  }
  if (v5 == "invert" || v11 != 6)
  {
    if (v5 == "invert" && v11 == 6)
      goto LABEL_59;
    v28 = v11 != 4;
    if (v5 != "keep" && v11 == 4)
    {
      if (v12)
      {
        if (*v5 == 107 && *(_WORD *)(v5 + 1) == 25957 && *((_WORD *)v5 + 1) == 28773)
        {
LABEL_94:
          v14 = &off_1E3284CE8;
          goto LABEL_64;
        }
        v28 = 0;
        goto LABEL_99;
      }
      if (*(_WORD *)v5 == 107)
      {
        v28 = 0;
        v12 = 0;
        v29 = 7;
        if (*(_DWORD *)(v5 + 2) == 6619237 && *((_DWORD *)v5 + 1) == 7340133)
          goto LABEL_94;
LABEL_100:
        if (v5 == "zero" || v28)
        {
          if (v11 != 4 || v5 != "zero")
            goto LABEL_118;
        }
        else if (v29)
        {
          if (v12)
          {
            if (*v5 != 122 || *(_WORD *)(v5 + 1) != 29285 || *((_WORD *)v5 + 1) != 28530)
              goto LABEL_118;
          }
          else
          {
            if (*(_WORD *)v5 != 122)
              goto LABEL_118;
            if (*((_DWORD *)v5 + 1) != 7274610 || *(_DWORD *)(v5 + 2) != 7471205)
              goto LABEL_118;
          }
        }
        v14 = &off_1E3284D18;
        goto LABEL_64;
      }
      v12 = 0;
      v28 = 0;
LABEL_120:
      v29 = 7;
      goto LABEL_100;
    }
    if (v5 == "keep" && v11 == 4)
      goto LABEL_94;
    if (v5 == "replace" || v11 != 7)
    {
      if (v5 != "replace")
      {
        v29 = v11;
        goto LABEL_100;
      }
      v29 = v11;
      if (v11 != 7)
        goto LABEL_100;
    }
    else if (v12)
    {
      if (*v5 != 114 || *(_DWORD *)(v5 + 1) != 1634496613 || *(_DWORD *)(v5 + 3) != 1701011820)
      {
LABEL_99:
        v29 = 7;
        v12 = 1;
        goto LABEL_100;
      }
    }
    else
    {
      if (*(_WORD *)v5 != 114)
      {
        v12 = 0;
        goto LABEL_120;
      }
      v12 = 0;
      v29 = 7;
      if (*(_QWORD *)(v5 + 2) != 0x61006C00700065 || *(_QWORD *)(v5 + 6) != 0x6500630061006CLL)
        goto LABEL_100;
    }
    v14 = &off_1E3284D00;
    goto LABEL_64;
  }
  if (v12)
  {
    if (*v5 == 105 && *(_DWORD *)(v5 + 1) == 1919252078 && *(_DWORD *)(v5 + 2) == 1953654134)
      goto LABEL_59;
    goto LABEL_118;
  }
  if (*(_WORD *)v5 != 105)
  {
LABEL_118:
    v16 = 0;
    v17 = 0;
    goto LABEL_65;
  }
  v16 = 0;
  if (*(_QWORD *)(v5 + 2) == 0x7200650076006ELL)
  {
    v17 = 0;
    if (*(_QWORD *)(v5 + 4) == 0x74007200650076)
    {
LABEL_59:
      v14 = &off_1E3284CD0;
      goto LABEL_64;
    }
  }
  else
  {
    v17 = 0;
  }
LABEL_65:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v16 | (v17 << 8);
}

uint64_t WebCore::convertDictionary<WebCore::GPUStorageTextureBindingLayout>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;
  JSC::VM *v10;
  uint64_t v11;
  const char *v12;
  int v13;
  unint64_t v14;
  int v15;
  char **v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  uint64_t result;
  int v21;
  WTF::StringImpl *v22;
  unsigned __int16 v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  unsigned __int16 v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  JSC::VM *v38[2];
  uint64_t v39;
  WTF::StringImpl *v40;

  v38[0] = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)this & 0xFFFE000000000002) != 0)
      goto LABEL_74;
    Object = JSC::JSCell::getObject(this);
    if (!Object)
      goto LABEL_74;
    v6 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v40);
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v7);
      else
        *(_DWORD *)v40 -= 2;
    }
    if (*((_DWORD *)v38[0] + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v38[0]);
      if ((result & 1) != 0)
        goto LABEL_37;
    }
    if (v8 == 10)
    {
      v9 = 0;
LABEL_31:
      WTF::AtomStringImpl::addLiteral();
      v17 = v40;
      v19 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v40);
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v18);
        else
          *(_DWORD *)v17 -= 2;
      }
      if (*((_DWORD *)v38[0] + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v38[0]);
        if ((result & 1) != 0)
          goto LABEL_37;
      }
      if (v19 == 10)
        goto LABEL_36;
      v40 = a2[7];
      v22 = v40;
      v23 = WebCore::parseEnumeration<WebCore::GPUTextureFormat>((JSC::JSGlobalObject *)a2, v19);
      if (*((_DWORD *)v22 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v22);
        if ((result & 1) != 0)
          goto LABEL_37;
      }
      if (v23 > 0xFFu)
      {
        WTF::AtomStringImpl::addLiteral();
        v24 = v40;
        v26 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v40);
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v25);
          else
            *(_DWORD *)v24 -= 2;
        }
        result = (uint64_t)v38[0];
        if (*((_DWORD *)v38[0] + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v38[0]);
          if ((result & 1) != 0)
            goto LABEL_37;
        }
        if (v26 == 10)
        {
          LOBYTE(v27) = 1;
          goto LABEL_48;
        }
        v40 = a2[7];
        v28 = v40;
        result = WebCore::parseEnumeration<WebCore::GPUTextureViewDimension>((JSC::JSGlobalObject *)a2, v26);
        v27 = result;
        if (*((_DWORD *)v28 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v28);
          if ((result & 1) != 0)
            goto LABEL_37;
        }
        if (v27 > 0xFFu)
        {
LABEL_48:
          v21 = 0;
          *(_BYTE *)a3 = v9;
          *(_BYTE *)(a3 + 1) = v23;
          *(_BYTE *)(a3 + 2) = v27;
          goto LABEL_49;
        }
      }
LABEL_74:
      result = JSC::throwTypeError();
      goto LABEL_37;
    }
    v10 = a2[7];
    v38[1] = v10;
    v40 = (WTF::StringImpl *)v8;
    if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v40, (JSC::JSGlobalObject *)a2);
      v11 = v39;
      if (v39)
        goto LABEL_16;
      goto LABEL_73;
    }
    v11 = *(_QWORD *)(v8 + 8);
    if ((v11 & 1) != 0)
    {
      v11 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a2);
      if (!v11)
      {
LABEL_15:
        v39 = v11;
        if (v11)
        {
LABEL_16:
          v12 = *(const char **)(v11 + 8);
          v13 = *(_DWORD *)(v11 + 4);
          v14 = ((unint64_t)*(unsigned int *)(v11 + 16) >> 2) & 1;
          if (v12 != "read-only" && v13 == 9)
          {
            if ((_DWORD)v14)
            {
              if (*v12 != 114 || *(_DWORD *)(v12 + 1) != 761553253 || *(_DWORD *)(v12 + 5) != 2037149295)
              {
LABEL_22:
                v15 = 0;
                v9 = 0;
                goto LABEL_27;
              }
            }
            else
            {
              if (*(_WORD *)v12 != 114)
                goto LABEL_22;
              v32 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 2), (int16x8_t)xmmword_1968BF8E0);
              v32.i16[0] = vminvq_u16(v32);
              if (!v32.i32[0])
                goto LABEL_22;
            }
            goto LABEL_25;
          }
          if (v12 == "read-only" && v13 == 9)
          {
LABEL_25:
            v16 = &WebCore::parseEnumerationFromString<WebCore::GPUStorageTextureAccess>(WTF::String const&)::mappings;
            goto LABEL_26;
          }
          v29 = v14 << 32;
          v30 = v13 != 10;
          if (v12 == "read-write" || v13 != 10)
          {
            v31 = *(_DWORD *)(v11 + 4);
            if (v12 == "read-write" && v13 == 10)
              goto LABEL_58;
          }
          else if ((_DWORD)v14)
          {
            if (*v12 == 114
              && *(_QWORD *)(v12 + 1) == 0x746972772D646165
              && *(_QWORD *)(v12 + 2) == 0x65746972772D6461)
            {
LABEL_58:
              v16 = &off_1E3284D48;
              goto LABEL_26;
            }
            v30 = 0;
            v31 = 10;
            v29 = 0x100000000;
          }
          else
          {
            if (*(_WORD *)v12 == 114)
            {
              v33 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 2), (int16x8_t)xmmword_1968BFE20);
              v33.i16[0] = vminvq_u16(v33);
              v30 = v33.i8[0];
              if (v33.i32[0])
              {
                v34 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 4), (int16x8_t)xmmword_1968BFE30);
                v34.i16[0] = vminvq_u16(v34);
                v30 = v34.i8[0];
                if (v34.i32[0])
                  goto LABEL_58;
              }
            }
            else
            {
              v30 = 0;
            }
            v31 = 10;
          }
          if (v12 == "write-only" || v30)
          {
            if (v13 != 10 || v12 != "write-only")
              goto LABEL_22;
          }
          else if (v31)
          {
            if (v29)
            {
              if (*v12 != 119
                || *(_QWORD *)(v12 + 1) != 0x6C6E6F2D65746972
                || *(_QWORD *)(v12 + 2) != 0x796C6E6F2D657469)
              {
                goto LABEL_22;
              }
            }
            else
            {
              if (*(_WORD *)v12 != 119)
                goto LABEL_22;
              v35 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 2), (int16x8_t)xmmword_1968BFE40);
              v35.i16[0] = vminvq_u16(v35);
              if (!v35.i32[0])
                goto LABEL_22;
              v36 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 4), (int16x8_t)xmmword_1968BFE50);
              v36.i16[0] = vminvq_u16(v36);
              if (!v36.i32[0])
                goto LABEL_22;
            }
          }
          v16 = &off_1E3284D60;
LABEL_26:
          v9 = *((_BYTE *)v16 + 16);
          v15 = 1;
LABEL_27:
          v39 = 0;
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v11, v7);
          else
            *(_DWORD *)v11 -= 2;
LABEL_29:
          if (*((_DWORD *)v10 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v10);
            if ((result & 1) != 0)
              goto LABEL_37;
          }
          if (!v15)
            goto LABEL_74;
          goto LABEL_31;
        }
LABEL_73:
        v9 = 0;
        v15 = 0;
        goto LABEL_29;
      }
    }
    else if (!v11)
    {
      goto LABEL_15;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_15;
  }
LABEL_36:
  result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)v38, "format", 7, "GPUStorageTextureBindingLayout", 31, "GPUTextureFormat", 17);
LABEL_37:
  v21 = 1;
LABEL_49:
  *(_DWORD *)(a3 + 4) = v21;
  return result;
}

uint64_t WebCore::parseEnumeration<WebCore::GPUStoreOp>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  int v9;
  int v10;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v19;
  unint64_t v20;

  v3 = a1;
  v20 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
LABEL_34:
        v10 = 0;
        v9 = 0;
        return v10 | (v9 << 8);
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v20, a1);
  v4 = v19;
  if (!v19)
    goto LABEL_34;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "discard" && v7 == 7)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 100 || *(_DWORD *)(v6 + 1) != 1633907561 || *(_DWORD *)(v6 + 3) != 1685217635)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 100)
        goto LABEL_16;
      v14 = *(_QWORD *)(v6 + 2);
      v15 = *(_QWORD *)(v6 + 6);
      if (v14 != 0x61006300730069 || v15 != 0x64007200610063)
        goto LABEL_16;
    }
LABEL_41:
    v13 = &WebCore::parseEnumerationFromString<WebCore::GPUStoreOp>(WTF::String const&)::mappings;
    goto LABEL_42;
  }
  if (v6 == "discard" && v7 == 7)
    goto LABEL_41;
  if (v6 == "store" || v7 != 5)
  {
    if (v7 != 5 || v6 != "store")
      goto LABEL_16;
    goto LABEL_30;
  }
  if ((v5 & 4) == 0)
  {
    if (*(_WORD *)v6 == 115 && *(_QWORD *)(v6 + 2) == 0x650072006F0074)
      goto LABEL_30;
LABEL_16:
    v9 = 0;
    v10 = 0;
    goto LABEL_43;
  }
  if (*v6 != 115 || *(_WORD *)(v6 + 1) != 28532 || *(_WORD *)(v6 + 3) != 25970)
    goto LABEL_16;
LABEL_30:
  v13 = &off_1E3284D90;
LABEL_42:
  v10 = *((unsigned __int8 *)v13 + 16);
  v9 = 1;
LABEL_43:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v10 | (v9 << 8);
}

WTF *WebCore::JSGPUSupportedFeatures::destroy(WebCore::JSGPUSupportedFeatures *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
    return WTF::RefCounted<WebCore::GPUSupportedFeatures>::deref(result, a2);
  return result;
}

uint64_t WebCore::JSGPUSupportedFeatures::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUSupportedFeaturesPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUSupportedFeaturesPrototype::create(WebCore::JSGPUSupportedFeaturesPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  JSC::Structure *v19;
  int v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  uint64_t v27;
  int *v28;
  JSC::Structure **v29;
  int *v30;
  int v31;
  int v32;
  JSC::Structure *v33;
  int v34;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v22 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v22);
    *((_QWORD *)this + 4865) = SlowCase + (int)v22;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSGPUSupportedFeatures::s_info, &WebCore::JSGPUSupportedFeaturesPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = v6[381];
  v10 = *(_QWORD *)(v9 + 2712);
  v11 = *(WTF::StringImpl **)(*(_QWORD *)(v9 + 48) + 3024);
  if (((unint64_t)v11 >> 4)
    && (((unint64_t)v11 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x20)) == 0
    && (v12 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this)) != 0&& (v25 = v11, v13 = JSC::PropertyTable::get(v12, (uint64_t *)&v25), (_DWORD)v13 != -1))
  {
    if ((int)v13 > 63)
    {
      v23 = *(_QWORD *)(SlowCase + 8) - 8;
      v24 = 0x3F00000000 - (v13 << 32);
    }
    else
    {
      v23 = SlowCase + 16;
      v24 = v13 << 32;
    }
    v14 = *(_QWORD *)(v23 + (v24 >> 29));
  }
  else
  {
    v14 = 0;
  }
  v25 = 0;
  v26 = SlowCase;
  v27 = 0x1000000FFFFFFFFLL;
  v28 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v10, v14, 4, (uint64_t)&v25);
  v15 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v17 = JSC::JSString::create((uint64_t)this, &v25);
  v18 = v25;
  v25 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v34 = *(_DWORD *)SlowCase;
  v33 = v19;
  v20 = JSC::Structure::outOfLineCapacity(v19);
  v31 = 0;
  v32 = v20;
  v25 = (WTF::StringImpl *)&v32;
  v26 = SlowCase;
  v27 = (uint64_t)this;
  v28 = &v34;
  v29 = &v33;
  v30 = &v31;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v19, this, v15, 6, (uint64_t)&v25);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v31, v17);
  *((_DWORD *)v19 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUSupportedFeatures>,(WebCore::DOMConstructorID)39>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 312);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUSupportedFeatures>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUSupportedFeatures::s_info
         + ~((_QWORD)&WebCore::JSGPUSupportedFeatures::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUSupportedFeatures::s_info
                                                                        + ~((_QWORD)&WebCore::JSGPUSupportedFeatures::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUSupportedFeatures::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUSupportedFeatures::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUSupportedFeaturesPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUSupportedFeaturesPrototype::create((WebCore::JSGPUSupportedFeaturesPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUSupportedFeatures::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUSupportedFeatures::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 312) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUSupportedFeaturesConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUSupportedFeaturesPrototype::s_info != (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUSupportedFeatures>,(WebCore::DOMConstructorID)39>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUSupportedFeatures_size(WebCore *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  char BackingSet;
  WTF::StringImpl *v11;
  JSC::Structure *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v21[2];

  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSGPUSupportedFeatures::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSGPUSupportedFeatures::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
  BackingSet = WebCore::getBackingSet((unint64_t)this, a2, a3);
  v12 = v11;
  if (BackingSet)
  {
    v21[0] = this;
    v21[1] = v11;
    v13 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
    v14 = *(unsigned int *)(v13 + 20);
    if ((_DWORD)v14)
    {
      v15 = *(uint64_t **)(v13 + 8);
      v16 = 8 * v14;
      do
      {
        WebCore::DOMSetAdapter::add<WebCore::IDLDOMString>(v21, v15++);
        v16 -= 8;
      }
      while (v16);
    }
  }
  v17 = (_DWORD *)MEMORY[0x1E0CBEBC8];
  *MEMORY[0x1E0CBEBC8] += 2;
  v19 = JSC::JSObject::get(v12, this, (unint64_t)v17);
  if (*v17 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBC8], v18);
  else
    *v17 -= 2;
  return v19;
}

uint64_t WebCore::JSGPUSupportedFeaturesOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

WTF *WebCore::JSGPUSupportedFeaturesOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  return WTF::RefCounted<WebCore::GPUSupportedFeatures>::deref(v3, a2);
}

unint64_t WebCore::createWrapper<WebCore::GPUSupportedFeatures,WebCore::GPUSupportedFeatures>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSGPUSupportedFeatures::s_info
        + ~((_QWORD)&WebCore::JSGPUSupportedFeatures::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUSupportedFeatures::s_info
                                                                       + ~((_QWORD)&WebCore::JSGPUSupportedFeatures::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSGPUSupportedFeatures::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSGPUSupportedFeatures::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSGPUSupportedFeaturesPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSGPUSupportedFeaturesPrototype::create((WebCore::JSGPUSupportedFeaturesPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSGPUSupportedFeatures::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSGPUSupportedFeatures::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 312);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 312))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 312);
    *(_QWORD *)(v26 + 312) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 312);
  *(_QWORD *)(v22 + 312) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE335938 & 1) == 0)
  {
    qword_1EE335930 = (uint64_t)&off_1E328A040;
    byte_1EE335938 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335930;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSGPUSupportedLimits::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  WTF *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (WTF *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 1)
          WTF::fastFree(v3, a2);
        else
          --*(_DWORD *)v3;
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGPUSupportedLimits::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUSupportedLimitsPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUSupportedLimitsPrototype::create(WebCore::JSGPUSupportedLimitsPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t i;
  char *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  JSC::Structure *v18;
  int v19;
  unint64_t v21;
  WTF::StringImpl *v22[6];
  int v23;
  int v24;
  JSC::Structure *v25;
  int v26;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v21 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v21);
    *((_QWORD *)this + 4865) = SlowCase + (int)v21;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  for (i = 0; i != 165; i += 5)
  {
    v10 = (&WebCore::JSGPUSupportedLimitsPrototypeTableValues)[i + 1];
    if (v10)
    {
      if (v10 == (char *)2)
        JSC::SmallStrings::singleCharacterStringRep((WebCore::JSGPUSupportedLimitsPrototype *)((char *)this + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v11 = v22[0];
      JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSGPUSupportedLimits::s_info, (unint64_t *)v22, (uint64_t)&(&WebCore::JSGPUSupportedLimitsPrototypeTableValues)[i], (unsigned __int8 *)SlowCase);
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v12);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
  }
  v13 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v14 = JSC::JSString::create((uint64_t)this, v22);
  v16 = v14;
  v17 = v22[0];
  v22[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v26 = *(_DWORD *)SlowCase;
  v25 = v18;
  v19 = JSC::Structure::outOfLineCapacity(v18);
  v23 = 0;
  v24 = v19;
  v22[0] = (WTF::StringImpl *)&v24;
  v22[1] = (WTF::StringImpl *)SlowCase;
  v22[2] = this;
  v22[3] = (WTF::StringImpl *)&v26;
  v22[4] = (WTF::StringImpl *)&v25;
  v22[5] = (WTF::StringImpl *)&v23;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v18, this, v13, 6, (uint64_t)v22);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v23, v16);
  *((_DWORD *)v18 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUSupportedLimits>,(WebCore::DOMConstructorID)40>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 320);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUSupportedLimits>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUSupportedLimits::s_info
         + ~((_QWORD)&WebCore::JSGPUSupportedLimits::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUSupportedLimits::s_info
                                                                      + ~((_QWORD)&WebCore::JSGPUSupportedLimits::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUSupportedLimits::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUSupportedLimits::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUSupportedLimitsPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUSupportedLimitsPrototype::create((WebCore::JSGPUSupportedLimitsPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUSupportedLimits::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUSupportedLimits::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 320) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUSupportedLimitsConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUSupportedLimitsPrototype::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUSupportedLimits>,(WebCore::DOMConstructorID)40>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsGPUSupportedLimits_maxTextureDimension1D(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 4);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxTextureDimension2D(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 8);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxTextureDimension3D(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 12);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxTextureArrayLayers(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 16);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxBindGroups(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 20);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxBindGroupsPlusVertexBuffers(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 24);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxBindingsPerBindGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 28);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxDynamicUniformBuffersPerPipelineLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 32);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxDynamicStorageBuffersPerPipelineLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 36);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxSampledTexturesPerShaderStage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxSamplersPerShaderStage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 44);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxStorageBuffersPerShaderStage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 48);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxStorageTexturesPerShaderStage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 52);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxUniformBuffersPerShaderStage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 56);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxUniformBufferBindingSize(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  unint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 64);
  v3 = HIDWORD(v2);
  v4 = (double)v2;
  if ((v2 & 0x80000000) != 0)
    v5 = COERCE__INT64((double)v2) + 0x2000000000000;
  else
    v5 = v2 | 0xFFFE000000000000;
  if (v3)
    return *(_QWORD *)&v4 + 0x2000000000000;
  else
    return v5;
}

unint64_t WebCore::jsGPUSupportedLimits_maxStorageBufferBindingSize(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  unint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 72);
  v3 = HIDWORD(v2);
  v4 = (double)v2;
  if ((v2 & 0x80000000) != 0)
    v5 = COERCE__INT64((double)v2) + 0x2000000000000;
  else
    v5 = v2 | 0xFFFE000000000000;
  if (v3)
    return *(_QWORD *)&v4 + 0x2000000000000;
  else
    return v5;
}

unint64_t WebCore::jsGPUSupportedLimits_minUniformBufferOffsetAlignment(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 80);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_minStorageBufferOffsetAlignment(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 84);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxVertexBuffers(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 88);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxBufferSize(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  unint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 96);
  v3 = HIDWORD(v2);
  v4 = (double)v2;
  if ((v2 & 0x80000000) != 0)
    v5 = COERCE__INT64((double)v2) + 0x2000000000000;
  else
    v5 = v2 | 0xFFFE000000000000;
  if (v3)
    return *(_QWORD *)&v4 + 0x2000000000000;
  else
    return v5;
}

unint64_t WebCore::jsGPUSupportedLimits_maxVertexAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 104);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxVertexBufferArrayStride(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 108);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxInterStageShaderComponents(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 112);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxInterStageShaderVariables(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 116);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxColorAttachments(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 120);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxColorAttachmentBytesPerSample(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 124);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxComputeWorkgroupStorageSize(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 128);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxComputeInvocationsPerWorkgroup(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 132);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxComputeWorkgroupSizeX(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 136);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxComputeWorkgroupSizeY(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 140);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxComputeWorkgroupSizeZ(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 144);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUSupportedLimits_maxComputeWorkgroupsPerDimension(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 148);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSGPUSupportedLimitsOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPUSupportedLimitsOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (WTF *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        WTF::fastFree(v24, a2);
      else
        --*(_DWORD *)v24;
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::GPUSupportedLimits>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSGPUSupportedLimits::s_info
         + ~((_QWORD)&WebCore::JSGPUSupportedLimits::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUSupportedLimits::s_info
                                                                      + ~((_QWORD)&WebCore::JSGPUSupportedLimits::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSGPUSupportedLimits::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSGPUSupportedLimits::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSGPUSupportedLimitsPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUSupportedLimitsPrototype::create((WebCore::JSGPUSupportedLimitsPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSGPUSupportedLimits::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUSupportedLimits::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 320);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 320))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 320);
    *(_QWORD *)(v36 + 320) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 320);
  *(_QWORD *)(v32 + 320) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335948 & 1) == 0)
  {
    qword_1EE335940 = (uint64_t)&off_1E328A070;
    byte_1EE335948 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335940;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSGPUTexture::destroy(WebCore::JSGPUTexture *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSGPUTexture::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUTexturePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUTexturePrototype::create(WebCore::JSGPUTexturePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  JSC::Structure *v17;
  int v18;
  unint64_t v20;
  WTF::StringImpl *v21[6];
  int v22;
  int v23;
  JSC::Structure *v24;
  int v25;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v20);
    *((_QWORD *)this + 4865) = SlowCase + (int)v20;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<12u>(this, (uint64_t)&WebCore::JSGPUTexture::s_info, (uint64_t)&WebCore::JSGPUTexturePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v10 = v21[0];
    v11 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v21[0]) = -1;
    WORD2(v21[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v11;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v12);
      else
        *(_DWORD *)v10 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v13 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = JSC::JSString::create((uint64_t)this, v21);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v25 = *(_DWORD *)SlowCase;
  v24 = v17;
  v18 = JSC::Structure::outOfLineCapacity(v17);
  v22 = 0;
  v23 = v18;
  v21[0] = (WTF::StringImpl *)&v23;
  v21[1] = (WTF::StringImpl *)SlowCase;
  v21[2] = this;
  v21[3] = (WTF::StringImpl *)&v25;
  v21[4] = (WTF::StringImpl *)&v24;
  v21[5] = (WTF::StringImpl *)&v22;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v17, this, v13, 6, (uint64_t)v21);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v22, v15);
  *((_DWORD *)v17 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUTexture>,(WebCore::DOMConstructorID)41>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 328);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUTexture>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUTexture::s_info + ~((_QWORD)&WebCore::JSGPUTexture::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUTexture::s_info + ~((_QWORD)&WebCore::JSGPUTexture::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUTexture::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUTexture::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUTexturePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUTexturePrototype::create((WebCore::JSGPUTexturePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUTexture::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUTexture::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 328) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUTextureConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUTexturePrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUTexture>,(WebCore::DOMConstructorID)41>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsGPUTexture_width(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 36);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUTexture_height(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 40);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUTexture_depthOrArrayLayers(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 44);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUTexture_mipLevelCount(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 48);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsGPUTexture_sampleCount(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 52);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::jsGPUTexture_dimension(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 56);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = (uint64_t *)(v3 + 41968);
  if ((_MergedGlobals_677[0] & 1) == 0)
  {
    _MergedGlobals_18 += 2;
    dword_1ECE77D30 += 2;
    qword_1EE335A00 = (uint64_t)&_MergedGlobals_18;
    unk_1EE335A08 = &dword_1ECE77D30;
    dword_1ECE77D50 += 2;
    qword_1EE335A10 = (uint64_t)&dword_1ECE77D50;
    _MergedGlobals_677[0] = 1;
  }
  v5 = *(_QWORD *)&_MergedGlobals_677[8 * v2 + 280];
  if (!v5)
    return *v4;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v3 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v3 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v4;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsGPUTexture_format(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  WTF::StringImpl *v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  WebCore::convertEnumerationToString(*(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 32), &v11);
  v5 = v11;
  if (!v11)
    return *v3;
  v6 = *((_DWORD *)v11 + 1);
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v11 != *(WTF::StringImpl **)(v7 + 8))
        v7 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_7;
    }
    v9 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
    if ((*((_BYTE *)v11 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v10 = *(unsigned __int16 *)v9;
      if (v10 > 0xFF)
        goto LABEL_4;
      v10 = v10;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, v4);
  else
    *(_DWORD *)v5 -= 2;
  return v7;
}

unint64_t WebCore::jsGPUTexture_usage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 60);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::jsGPUTexture_label(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 24) + 24);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

BOOL WebCore::setJSGPUTexture_label(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  int v17;
  char v18;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSGPUTexture::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSGPUTexture::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v16);
  v10 = v17;
  v11 = v17 == 0;
  if (!v17)
  {
    v12 = v16;
    v16 = 0;
    v13 = *(_QWORD **)(v8 + 24);
    v14 = (WTF::StringImpl *)v13[3];
    v13[3] = v12;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    (*(void (**)(_QWORD *, _QWORD *))(*v13 + 32))(v13, v13 + 3);
    v10 = v17;
  }
  if (v10 != -1)
    ((void (*)(char *, uint64_t *))off_1E328A618[v10])(&v18, &v16);
  return v11;
}

uint64_t WebCore::JSGPUTextureOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSGPUTextureOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::GPUTexture>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::GPUTexture *__hidden))a3 != off_1E334F3A0)
  {
    __break(0xC471u);
    JUMPOUT(0x194BA16D4);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSGPUTexture::s_info + ~((_QWORD)&WebCore::JSGPUTexture::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUTexture::s_info + ~((_QWORD)&WebCore::JSGPUTexture::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSGPUTexture::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSGPUTexture::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSGPUTexturePrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUTexturePrototype::create((WebCore::JSGPUTexturePrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSGPUTexture::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUTexture::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 328);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 328))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 328);
    *(_QWORD *)(v36 + 328) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 328);
  *(_QWORD *)(v32 + 328) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335958 & 1) == 0)
  {
    qword_1EE335950 = (uint64_t)&off_1E328A0A0;
    byte_1EE335958 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335950;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::parseEnumeration<WebCore::GPUTextureAspect>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  int v9;
  int v10;
  char **v13;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint64_t v20;
  unint64_t v21;

  v3 = a1;
  v21 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
LABEL_33:
        v10 = 0;
        v9 = 0;
        return v10 | (v9 << 8);
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v21, a1);
  v4 = v20;
  if (!v20)
    goto LABEL_33;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "all" && v7 == 3)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 97 || *(_WORD *)(v6 + 1) != 27756)
        goto LABEL_15;
    }
    else if (*(_WORD *)v6 != 97 || *(_DWORD *)(v6 + 2) != 7077996)
    {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
  if (v6 == "all" && v7 == 3)
  {
LABEL_36:
    v13 = &WebCore::parseEnumerationFromString<WebCore::GPUTextureAspect>(WTF::String const&)::mappings;
    goto LABEL_37;
  }
  if (v6 != "depth-only" && v7 == 10)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 100 || *(_QWORD *)(v6 + 1) != 0x6C6E6F2D68747065 || *(_QWORD *)(v6 + 2) != 0x796C6E6F2D687470)
        goto LABEL_15;
    }
    else
    {
      if (*(_WORD *)v6 != 100)
        goto LABEL_15;
      v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968BFE60);
      v15.i16[0] = vminvq_u16(v15);
      if (!v15.i32[0])
        goto LABEL_15;
      v16 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 4), (int16x8_t)xmmword_1968BFE70);
      v16.i16[0] = vminvq_u16(v16);
      if (!v16.i32[0])
        goto LABEL_15;
    }
  }
  else if (v6 != "depth-only" || v7 != 10)
  {
    if (v6 == "stencil-only" || v7 != 12)
    {
      if (v7 == 12 && v6 == "stencil-only")
        goto LABEL_54;
    }
    else if ((v5 & 4) != 0)
    {
      if (*v6 == 115 && *(_QWORD *)(v6 + 1) == 0x6F2D6C69636E6574 && *(_QWORD *)(v6 + 4) == 0x796C6E6F2D6C6963)
      {
LABEL_54:
        v13 = &off_1E32856E0;
        goto LABEL_37;
      }
    }
    else if (*(_WORD *)v6 == 115)
    {
      v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968BFE80);
      v17.i16[0] = vminvq_u16(v17);
      if (v17.i32[0])
      {
        v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 8), (int16x8_t)xmmword_1968BFE90);
        v18.i16[0] = vminvq_u16(v18);
        if (v18.i32[0])
          goto LABEL_54;
      }
    }
LABEL_15:
    v9 = 0;
    v10 = 0;
    goto LABEL_38;
  }
  v13 = &off_1E32856C8;
LABEL_37:
  v10 = *((unsigned __int8 *)v13 + 16);
  v9 = 1;
LABEL_38:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v10 | (v9 << 8);
}

unint64_t WebCore::convertDictionary<WebCore::GPUTextureBindingLayout>@<X0>(JSC::JSCell *this@<X1>, unint64_t result@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  BOOL v5;
  char v6;
  JSC::JSGlobalObject *v7;
  uint64_t Object;
  JSC::Structure *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  JSC::VM *v12;
  double v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  JSC::VM *v16;
  uint64_t v17;
  int v18;
  const char *v19;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  char **v24;
  int v25;
  int v26;
  int v27;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  unsigned __int16 v32;
  WTF::StringImpl *v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  int *v37;
  int v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint64_t v43;
  WTF::StringImpl *v44;

  v4 = *(JSC::VM **)(result + 56);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v5 = 0;
    v6 = 0;
LABEL_106:
    LOBYTE(v32) = 1;
LABEL_109:
    v27 = 0;
    *(_BYTE *)a3 = v6;
    *(_BYTE *)(a3 + 1) = v32;
    *(_BYTE *)(a3 + 2) = v5;
    goto LABEL_110;
  }
  v7 = (JSC::JSGlobalObject *)result;
  if (((unint64_t)this & 0xFFFE000000000002) != 0)
    goto LABEL_66;
  Object = JSC::JSCell::getObject(this);
  if (!Object)
    goto LABEL_66;
  v9 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v11 = JSC::JSObject::get(v9, v7, (unint64_t)v44);
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v10);
    else
      *(_DWORD *)v44 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((result & 1) != 0)
      goto LABEL_67;
  }
  if (v11 == 10)
  {
    v5 = 0;
    goto LABEL_16;
  }
  v12 = (JSC::VM *)*((_QWORD *)v7 + 7);
  if (v11 >= 0xFFFE000000000000)
  {
    v34 = (_DWORD)v11 == 0;
    goto LABEL_139;
  }
  *(_QWORD *)&v13 = v11 - 0x2000000000000;
  if (v11 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v11 & 0xFFFE000000000002) != 0)
    {
      v5 = v11 == 7;
      goto LABEL_15;
    }
    v35 = *(unsigned __int8 *)(v11 + 5);
    if (v35 == 3)
    {
      v38 = *(_DWORD *)(v11 + 8);
    }
    else
    {
      if (v35 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v5 = 1;
          goto LABEL_15;
        }
        v34 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28) == (_QWORD)v7;
        goto LABEL_139;
      }
      v36 = *(_QWORD *)(v11 + 8);
      if ((v36 & 1) != 0)
        v37 = (int *)(v11 + 16);
      else
        v37 = (int *)(v36 + 4);
      v38 = *v37;
    }
    v34 = v38 == 0;
LABEL_139:
    v5 = !v34;
    goto LABEL_15;
  }
  v5 = v13 > 0.0 || v13 < 0.0;
LABEL_15:
  if (*((_DWORD *)v12 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v12);
    if ((result & 1) != 0)
      goto LABEL_67;
  }
LABEL_16:
  WTF::AtomStringImpl::addLiteral();
  v15 = JSC::JSObject::get(v9, v7, (unint64_t)v44);
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v14);
    else
      *(_DWORD *)v44 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((result & 1) != 0)
      goto LABEL_67;
  }
  if (v15 == 10)
  {
    v6 = 0;
    goto LABEL_101;
  }
  v16 = (JSC::VM *)*((_QWORD *)v7 + 7);
  v44 = (WTF::StringImpl *)v15;
  if ((v15 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v15 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v44, v7);
    v17 = v43;
    if (v43)
      goto LABEL_28;
LABEL_62:
    v6 = 0;
    v25 = 0;
    goto LABEL_99;
  }
  v17 = *(_QWORD *)(v15 + 8);
  if ((v17 & 1) == 0)
  {
    if (!v17)
      goto LABEL_27;
    goto LABEL_26;
  }
  v17 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v15, v7);
  if (v17)
LABEL_26:
    *(_DWORD *)v17 += 2;
LABEL_27:
  if (!v17)
    goto LABEL_62;
LABEL_28:
  v18 = *(_DWORD *)(v17 + 16);
  v19 = *(const char **)(v17 + 8);
  v20 = *(_DWORD *)(v17 + 4);
  v21 = v20 != 5;
  if (v19 != "depth" && v20 == 5)
  {
    if ((v18 & 4) != 0)
    {
      if (*v19 != 100 || *(_WORD *)(v19 + 1) != 28773 || *(_WORD *)(v19 + 3) != 26740)
      {
LABEL_34:
        v22 = 5;
        goto LABEL_35;
      }
    }
    else if (*(_WORD *)v19 != 100 || *(_QWORD *)(v19 + 2) != 0x68007400700065)
    {
      goto LABEL_34;
    }
LABEL_52:
    v24 = &WebCore::parseEnumerationFromString<WebCore::GPUTextureSampleType>(WTF::String const&)::mappings;
    goto LABEL_96;
  }
  if (v19 == "depth")
  {
    v22 = *(_DWORD *)(v17 + 4);
    if (v20 == 5)
      goto LABEL_52;
  }
  else
  {
    v22 = *(_DWORD *)(v17 + 4);
  }
LABEL_35:
  if (v19 == "float")
    v21 = 1;
  if (v21)
  {
    if (v19 == "float" && v20 == 5)
      goto LABEL_57;
  }
  else
  {
    if (!v22)
      goto LABEL_57;
    if ((v18 & 4) != 0)
    {
      if (*v19 != 102 || *(_WORD *)(v19 + 1) != 28524 || *(_WORD *)(v19 + 3) != 29793)
        goto LABEL_43;
LABEL_57:
      v24 = &off_1E3286040;
      goto LABEL_96;
    }
    if (*(_WORD *)v19 == 102 && *(_QWORD *)(v19 + 2) == 0x740061006F006CLL)
      goto LABEL_57;
  }
LABEL_43:
  v23 = v22 != 4;
  if (v19 == "sint" || v22 != 4)
  {
    v26 = v22;
    if (v19 == "sint")
    {
      v26 = v22;
      if (v22 == 4)
        goto LABEL_49;
    }
  }
  else
  {
    if ((v18 & 4) != 0)
    {
      if (*v19 == 115 && *(_WORD *)(v19 + 1) == 28265 && *((_WORD *)v19 + 1) == 29806)
      {
LABEL_49:
        v24 = &off_1E3286058;
LABEL_96:
        v6 = *((_BYTE *)v24 + 16);
        v25 = 1;
        goto LABEL_97;
      }
      goto LABEL_78;
    }
    if (*(_WORD *)v19 != 115)
    {
LABEL_78:
      v26 = 4;
      goto LABEL_79;
    }
    v26 = 4;
    if (*(_DWORD *)(v19 + 2) == 7209065 && *((_DWORD *)v19 + 1) == 7602286)
      goto LABEL_49;
  }
LABEL_79:
  if (v19 == "uint")
    v23 = 1;
  if (v23)
  {
    if (v19 == "uint" && v22 == 4)
      goto LABEL_86;
    if (v19 == "unfilterable-float" || v26 != 18)
    {
      if (v26 != 18 || v19 != "unfilterable-float")
        goto LABEL_152;
    }
    else if ((v18 & 4) != 0)
    {
      if (*v19 != 117
        || !vminvq_u8((uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v19 + 2), (int8x16_t)xmmword_1968BFEB0), vceqq_s8(*(int8x16_t *)(v19 + 1), (int8x16_t)xmmword_1968BFEA0))))
      {
        goto LABEL_152;
      }
    }
    else
    {
      if (*(_WORD *)v19 != 117)
        goto LABEL_152;
      v39 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v19 + 2), (int16x8_t)xmmword_1968BFEC0);
      v39.i16[0] = vminvq_u16(v39);
      if (!v39.i32[0])
        goto LABEL_152;
      v40 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v19 + 4), (int16x8_t)xmmword_1968BFED0);
      v40.i16[0] = vminvq_u16(v40);
      if (!v40.i32[0])
        goto LABEL_152;
      v41 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v19 + 20), (int16x8_t)xmmword_1968BFEE0);
      v41.i16[0] = vminvq_u16(v41);
      if (!v41.i32[0])
        goto LABEL_152;
    }
LABEL_95:
    v24 = &off_1E3286088;
    goto LABEL_96;
  }
  if ((v18 & 4) != 0)
  {
    if (*v19 == 117 && *(_WORD *)(v19 + 1) == 28265 && *((_WORD *)v19 + 1) == 29806)
    {
LABEL_86:
      v24 = &off_1E3286070;
      goto LABEL_96;
    }
  }
  else if (*(_WORD *)v19 == 117 && *(_DWORD *)(v19 + 2) == 7209065 && *((_DWORD *)v19 + 1) == 7602286)
  {
    goto LABEL_86;
  }
  if (v26 == 18 && v19 == "unfilterable-float")
    goto LABEL_95;
LABEL_152:
  v6 = 0;
  v25 = 0;
LABEL_97:
  if (*(_DWORD *)v17 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v17, v14);
  else
    *(_DWORD *)v17 -= 2;
LABEL_99:
  if (*((_DWORD *)v16 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v16);
    if ((result & 1) != 0)
      goto LABEL_67;
  }
  if (!v25)
    goto LABEL_66;
LABEL_101:
  WTF::AtomStringImpl::addLiteral();
  v29 = v44;
  result = JSC::JSObject::get(v9, v7, (unint64_t)v44);
  v31 = result;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      result = WTF::StringImpl::destroy(v29, v30);
    else
      *(_DWORD *)v29 -= 2;
  }
  if (!*((_DWORD *)v4 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v4), (result & 1) == 0))
  {
    if (v31 == 10)
      goto LABEL_106;
    v44 = (WTF::StringImpl *)*((_QWORD *)v7 + 7);
    v33 = v44;
    result = WebCore::parseEnumeration<WebCore::GPUTextureViewDimension>(v7, v31);
    v32 = result;
    if (!*((_DWORD *)v33 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v33), (result & 1) == 0))
    {
      if (v32 > 0xFFu)
        goto LABEL_109;
LABEL_66:
      result = JSC::throwTypeError();
    }
  }
LABEL_67:
  v27 = 1;
LABEL_110:
  *(_DWORD *)(a3 + 4) = v27;
  return result;
}

WTF::StringImpl *WebCore::convertDictionary<WebCore::GPUTextureDescriptor>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  unint64_t v5;
  JSC::Structure *Object;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  char v16;
  WTF *v17;
  WTF::StringImpl *v18;
  int v19;
  const char *v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  int v26;
  int v27;
  char **v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  WTF *v33;
  WTF::StringImpl *result;
  WTF::StringImpl *v35;
  unsigned __int16 v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  JSC::JSObject *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  int v56;
  int v57;
  WTF *v58;
  JSC::VM *v59;
  WTF *v60;
  WTF::StringImpl *v61;
  int v62;
  int v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF *v67;
  WTF::StringImpl *v68[2];
  int v69;
  WTF::StringImpl *v70;
  _QWORD v71[2];
  int v72;
  _BYTE v73[32];
  JSC::VM *v74[2];
  WTF *v75;
  uint64_t v76;
  unint64_t v77;
  _DWORD v78[4];
  unsigned int v79;
  int v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v74[0] = a2[7];
  v5 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
  }
  else if (((unint64_t)this & 0xFFFE000000000002) != 0
         || (Object = (JSC::Structure *)JSC::JSCell::getObject(this)) == 0)
  {
    result = (WTF::StringImpl *)JSC::throwTypeError();
    *(_DWORD *)(a3 + 64) = 1;
    return result;
  }
  v70 = 0;
  v71[0] = 0;
  v72 = 0;
  v71[1] = 0;
  *(_QWORD *)v73 = 0x100000001;
  *(_WORD *)&v73[8] = 1;
  memset(&v73[12], 0, 20);
  if (v5 == 2)
  {
LABEL_72:
    WebCore::throwRequiredMemberTypeError((int)a2, (int)v74, "format", 7, "GPUTextureDescriptor", 21, "GPUTextureFormat", 17);
    *(_DWORD *)(a3 + 64) = 1;
    goto LABEL_73;
  }
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, v77);
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v77, v7);
    else
      *(_DWORD *)v77 -= 2;
  }
  if (*((_DWORD *)v74[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v74[0]))
    goto LABEL_103;
  if (v8 == 10)
  {
LABEL_17:
    WTF::AtomStringImpl::addLiteral();
    v14 = (WTF::StringImpl *)v77;
    v15 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, v77);
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    if (*((_DWORD *)v74[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v74[0]))
      goto LABEL_103;
    if (v15 == 10)
    {
      v16 = 1;
LABEL_67:
      v73[8] = v16;
      WTF::AtomStringImpl::addLiteral();
      v30 = (WTF::StringImpl *)v77;
      v32 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, v77);
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v31);
        else
          *(_DWORD *)v30 -= 2;
      }
      if (*((_DWORD *)v74[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v74[0]))
        goto LABEL_103;
      if (v32 == 10)
        goto LABEL_72;
      v77 = (unint64_t)a2[7];
      v35 = (WTF::StringImpl *)v77;
      v36 = WebCore::parseEnumeration<WebCore::GPUTextureFormat>((JSC::JSGlobalObject *)a2, v32);
      if (*((_DWORD *)v35 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v35) & 1) != 0)
      {
LABEL_103:
        *(_DWORD *)(a3 + 64) = 1;
        goto LABEL_73;
      }
      if (v36 > 0xFFu)
      {
        v73[9] = v36;
        WTF::AtomStringImpl::addLiteral();
        v37 = (WTF::StringImpl *)v77;
        v39 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, v77);
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v38);
          else
            *(_DWORD *)v37 -= 2;
        }
        if (*((_DWORD *)v74[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v74[0]))
          goto LABEL_103;
        if (v39 == 10)
        {
          v40 = 1;
        }
        else
        {
          WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v39, &v77);
          v40 = v77;
          if (HIDWORD(v77))
            goto LABEL_103;
        }
        *(_DWORD *)v73 = v40;
        WTF::AtomStringImpl::addLiteral();
        v41 = (WTF::StringImpl *)v77;
        v43 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, v77);
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, v42);
          else
            *(_DWORD *)v41 -= 2;
        }
        if (*((_DWORD *)v74[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v74[0]))
          goto LABEL_103;
        if (v43 == 10)
        {
          v44 = 1;
        }
        else
        {
          WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v43, &v77);
          v44 = v77;
          if (HIDWORD(v77))
            goto LABEL_103;
        }
        *(_DWORD *)&v73[4] = v44;
        WTF::AtomStringImpl::addLiteral();
        v45 = (WTF::StringImpl *)v77;
        v48 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, v77);
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
            WTF::StringImpl::destroy(v45, v46);
          else
            *(_DWORD *)v45 -= 2;
        }
        if (*((_DWORD *)v74[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v74[0]))
          goto LABEL_103;
        if (v48 == 10)
        {
          WebCore::throwRequiredMemberTypeError((int)a2, (int)v74, "size", 5, "GPUTextureDescriptor", 21, "(sequence or GPUExtent3DDict)", 30);
          goto LABEL_103;
        }
        WebCore::Converter<WebCore::IDLUnion<WebCore::IDLSequence<WebCore::IDLEnforceRangeAdaptor<WebCore::IDLUnsignedLong>>,WebCore::IDLDictionary<WebCore::GPUExtent3DDict>>>::convert(v48, (JSC *)a2, v47, (uint64_t)&v77);
        v49 = v80;
        if (v80)
        {
          *(_DWORD *)(a3 + 64) = 1;
LABEL_148:
          if (v49 != -1)
            ((void (*)(WTF::StringImpl **, _DWORD *))off_1E328B180[v49])(v68, v78);
          goto LABEL_73;
        }
        LOBYTE(v68[0]) = 0;
        v69 = -1;
        v50 = v79;
        if (v79 == -1)
        {
          if (v72 != -1)
          {
            ((void (*)(WTF **, _QWORD *))off_1E328B140[v72])(&v75, v71);
            v72 = -1;
          }
        }
        else
        {
          ((void (*)(WTF **, WTF::StringImpl **, _DWORD *))off_1E328B150[v79])(&v75, v68, v78);
          v69 = v50;
          v75 = (WTF *)v71;
          ((void (*)(WTF **, _QWORD *, WTF::StringImpl **))off_1E328B160[v50])(&v75, v71, v68);
        }
        if (v69 != -1)
          ((void (*)(WTF **, WTF::StringImpl **))off_1E328B140[v69])(&v75, v68);
        WTF::AtomStringImpl::addLiteral();
        v51 = v68[0];
        v53 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v68[0]);
        if (v51)
        {
          if (*(_DWORD *)v51 == 2)
            WTF::StringImpl::destroy(v51, v52);
          else
            *(_DWORD *)v51 -= 2;
        }
        if (*((_DWORD *)v74[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v74[0]))
          goto LABEL_118;
        if (v53 == 10)
        {
          WebCore::throwRequiredMemberTypeError((int)a2, (int)v74, "usage", 6, "GPUTextureDescriptor", 21, "unsigned long", 14);
LABEL_118:
          *(_DWORD *)(a3 + 64) = 1;
LABEL_147:
          v49 = v80;
          goto LABEL_148;
        }
        WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v53, v68);
        if ((unint64_t)v68[0] >> 32)
          goto LABEL_118;
        *(_DWORD *)&v73[12] = v68[0];
        WTF::AtomStringImpl::addLiteral();
        v54 = v68[0];
        v55 = JSC::JSObject::get(Object, (JSC::JSGlobalObject *)a2, (unint64_t)v68[0]);
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, v9);
          else
            *(_DWORD *)v54 -= 2;
        }
        if (*((_DWORD *)v74[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v74[0]))
          goto LABEL_118;
        if (v55 == 10)
        {
          v56 = 0;
          v57 = 0;
          v58 = 0;
LABEL_131:
          v69 = 0;
          v68[0] = 0;
          v68[1] = 0;
          v60 = *(WTF **)&v73[16];
          if (*(_QWORD *)&v73[16])
          {
            *(_QWORD *)&v73[16] = 0;
            *(_DWORD *)&v73[24] = 0;
            WTF::fastFree(v60, v9);
          }
          *(_DWORD *)&v73[24] = v57;
          *(_DWORD *)&v73[28] = v56;
          v61 = v70;
          *(_QWORD *)&v73[16] = v58;
          v70 = 0;
          *(_QWORD *)a3 = v61;
          *(_BYTE *)(a3 + 8) = 0;
          *(_DWORD *)(a3 + 24) = -1;
          v62 = v72;
          if (v72 != -1)
          {
            ((void (*)(WTF **, uint64_t, _QWORD *))off_1E328B150[v72])(&v75, a3 + 8, v71);
            *(_DWORD *)(a3 + 24) = v62;
            v58 = *(WTF **)&v73[16];
            v57 = *(_DWORD *)&v73[24];
            v56 = *(_DWORD *)&v73[28];
          }
          v63 = 0;
          *(_OWORD *)(a3 + 32) = *(_OWORD *)v73;
          *(_OWORD *)&v73[16] = 0uLL;
          *(_QWORD *)(a3 + 48) = v58;
          *(_DWORD *)(a3 + 56) = v57;
          *(_DWORD *)(a3 + 60) = v56;
          goto LABEL_146;
        }
        v59 = a2[7];
        v74[1] = v59;
        if ((v55 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v55 + 5) <= 0x16u)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          JSC::throwTypeError();
          v65 = v68[0];
          v68[0] = 0;
          if (v65)
          {
            if (*(_DWORD *)v65 == 2)
              WTF::StringImpl::destroy(v65, v64);
            else
              *(_DWORD *)v65 -= 2;
          }
          v69 = 1;
        }
        else
        {
          v75 = 0;
          v76 = 0;
          v68[0] = (WTF::StringImpl *)&v75;
          JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::GPUTextureFormat>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::GPUTextureFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>((JSC::JSGlobalObject *)a2, v55, (uint64_t *)v68);
          if (!*((_DWORD *)v59 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v59))
          {
            v58 = v75;
            v57 = v76;
            v56 = HIDWORD(v76);
            goto LABEL_131;
          }
          v67 = v75;
          v69 = 1;
          if (v75)
          {
            v75 = 0;
            LODWORD(v76) = 0;
            WTF::fastFree(v67, v9);
          }
        }
        v63 = 1;
LABEL_146:
        *(_DWORD *)(a3 + 64) = v63;
        ((void (*)(WTF **, WTF::StringImpl **))off_1E328B170[v63])(&v75, v68);
        goto LABEL_147;
      }
LABEL_185:
      JSC::throwTypeError();
      goto LABEL_103;
    }
    v17 = a2[7];
    v75 = v17;
    v77 = v15;
    if ((v15 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v15 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v77, (JSC::JSGlobalObject *)a2);
      v18 = v68[0];
      if (v68[0])
        goto LABEL_29;
      goto LABEL_157;
    }
    v18 = *(WTF::StringImpl **)(v15 + 8);
    if ((v18 & 1) != 0)
    {
      v18 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v15, (JSC::JSGlobalObject *)a2);
      if (!v18)
      {
LABEL_28:
        v68[0] = v18;
        if (v18)
        {
LABEL_29:
          v19 = *((_DWORD *)v18 + 4);
          v20 = (const char *)*((_QWORD *)v18 + 1);
          v21 = *((_DWORD *)v18 + 1);
          v22 = v21 != 2;
          if (v20 != "1d" && v21 == 2)
          {
            if ((v19 & 4) != 0)
            {
              if (*v20 != 49)
              {
LABEL_35:
                v24 = 2;
                goto LABEL_36;
              }
              v23 = *((unsigned __int8 *)v20 + 1);
            }
            else
            {
              if (*(_WORD *)v20 != 49)
                goto LABEL_35;
              v23 = *((unsigned __int16 *)v20 + 1);
            }
            if (v23 != 100)
              goto LABEL_35;
LABEL_56:
            v28 = &WebCore::parseEnumerationFromString<WebCore::GPUTextureDimension>(WTF::String const&)::mappings;
            goto LABEL_62;
          }
          if (v20 == "1d")
          {
            v24 = *((_DWORD *)v18 + 1);
            if (v21 == 2)
              goto LABEL_56;
          }
          else
          {
            v24 = *((_DWORD *)v18 + 1);
          }
LABEL_36:
          if (v20 == "2d" || v21 != 2)
          {
            if (v20 == "2d" && v21 == 2)
              goto LABEL_61;
          }
          else
          {
            if (!v24)
              goto LABEL_61;
            if ((v19 & 4) != 0)
            {
              if (*v20 != 50)
                goto LABEL_45;
              v26 = *((unsigned __int8 *)v20 + 1);
LABEL_44:
              if (v26 != 100)
                goto LABEL_45;
LABEL_61:
              v28 = &off_1E3285710;
              goto LABEL_62;
            }
            if (*(_WORD *)v20 == 50)
            {
              v26 = *((unsigned __int16 *)v20 + 1);
              goto LABEL_44;
            }
          }
LABEL_45:
          if (v20 == "3d")
            v22 = 1;
          if (v22)
          {
            if (v21 == 2 && v20 == "3d")
              goto LABEL_53;
          }
          else
          {
            if (!v24)
            {
LABEL_53:
              v28 = &off_1E3285728;
LABEL_62:
              v16 = *((_BYTE *)v28 + 16);
              v29 = 1;
              goto LABEL_63;
            }
            if ((v19 & 4) != 0)
            {
              if (*v20 != 51)
                goto LABEL_164;
              v27 = *((unsigned __int8 *)v20 + 1);
            }
            else
            {
              if (*(_WORD *)v20 != 51)
                goto LABEL_164;
              v27 = *((unsigned __int16 *)v20 + 1);
            }
            if (v27 == 100)
              goto LABEL_53;
          }
LABEL_164:
          v29 = 0;
          v16 = 0;
LABEL_63:
          v68[0] = 0;
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v9);
          else
            *(_DWORD *)v18 -= 2;
LABEL_65:
          if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
            goto LABEL_103;
          if (!v29)
            goto LABEL_185;
          goto LABEL_67;
        }
LABEL_157:
        v16 = 0;
        v29 = 0;
        goto LABEL_65;
      }
    }
    else if (!v18)
    {
      goto LABEL_28;
    }
    *(_DWORD *)v18 += 2;
    goto LABEL_28;
  }
  WebCore::valueToUSVString((JSC::JSGlobalObject *)a2, v8, (uint64_t)&v77);
  v10 = v78[0];
  if (v78[0])
  {
    *(_DWORD *)(a3 + 64) = 1;
    v13 = v10;
  }
  else
  {
    v11 = (WTF::StringImpl *)v77;
    v77 = 0;
    v12 = v70;
    v70 = v11;
    if (!v12)
    {
      v13 = 0;
      goto LABEL_15;
    }
    if (*(_DWORD *)v12 != 2)
    {
      v13 = 0;
      *(_DWORD *)v12 -= 2;
LABEL_15:
      ((void (*)(WTF::StringImpl **, unint64_t *))off_1E328A618[v13])(v68, &v77);
      goto LABEL_16;
    }
    WTF::StringImpl::destroy(v12, v9);
    v13 = v78[0];
  }
  if (v13 != -1)
    goto LABEL_15;
LABEL_16:
  if (!v10)
    goto LABEL_17;
LABEL_73:
  v33 = *(WTF **)&v73[16];
  if (*(_QWORD *)&v73[16])
  {
    *(_QWORD *)&v73[16] = 0;
    *(_DWORD *)&v73[24] = 0;
    WTF::fastFree(v33, v9);
  }
  if (v72 != -1)
    ((void (*)(unint64_t *, _QWORD *))off_1E328B140[v72])(&v77, v71);
  v72 = -1;
  result = v70;
  v70 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::parseEnumeration<WebCore::GPUTextureFormat>(JSC::JSGlobalObject *a1, unint64_t this)
{
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  unint64_t v4;
  unint64_t v5;
  char **v6;
  char **v7;
  int v8;
  WTF::StringImpl *v9;
  int v10;
  int v11;
  WTF::StringImpl *v13;
  unint64_t v14;

  v14 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v14, a1);
    v2 = (unsigned __int8 **)v13;
    if (v13)
      goto LABEL_7;
LABEL_27:
    v3 = 0;
    v4 = 0x100000000;
    goto LABEL_8;
  }
  v2 = *(unsigned __int8 ***)(this + 8);
  if ((v2 & 1) == 0)
  {
    if (!v2)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = *(unsigned __int8 ***)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
  if (v2)
LABEL_5:
    *(_DWORD *)v2 += 2;
LABEL_6:
  v13 = (WTF::StringImpl *)v2;
  if (!v2)
    goto LABEL_27;
LABEL_7:
  v3 = v2[1];
  v4 = *((unsigned int *)v2 + 1) | ((unint64_t)((*((_DWORD *)v2 + 4) >> 2) & 1) << 32);
LABEL_8:
  v5 = 95;
  v6 = &WebCore::parseEnumerationFromString<WebCore::GPUTextureFormat>(WTF::String const&)::mappings;
  do
  {
    v7 = &v6[3 * (v5 >> 1)];
    v8 = WTF::codePointCompare();
    if (v8 >= 0)
      v5 >>= 1;
    else
      v5 += ~(v5 >> 1);
    if (v8 < 0)
      v6 = v7 + 3;
  }
  while (v5);
  if (v6 == &WebCore::parseEnumerationFromString<WebCore::GPUTextureSampleType>(WTF::String const&)::mappings
    || !WTF::operator==(v3, v4, (unsigned __int8 *)*v6, (uint64_t)v6[1]))
  {
    v11 = 0;
    v10 = 0;
  }
  else
  {
    v10 = *((unsigned __int8 *)v6 + 16);
    v11 = 1;
  }
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v9);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v10 | (v11 << 8);
}

WTF *WebCore::JSGPUTextureUsage::destroy(WebCore::JSGPUTextureUsage *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSGPUTextureUsage::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUTextureUsage>,(WebCore::DOMConstructorID)42>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  JSC::Heap *v8;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  int v24;
  uint64_t v25;
  JSC::JSCell *v26;
  JSC::JSObject *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  uint64_t v49;
  int *v50;
  JSC::Structure **v51;
  int *v52;
  int v53;
  int v54;
  JSC::Structure *v55;
  int v56;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 336);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v47) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  v8 = (JSC::Heap *)(a1 + 192);
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v42 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v42);
    v5[2] = SlowCase + (int)v42;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v47, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUTextureUsage>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v43 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v43);
    v10[2848] = v2 + (int)v43;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v47 = 0;
  v48 = v2;
  v49 = 0x1000000FFFFFFFFLL;
  v50 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v47);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v47);
  v14 = v47;
  v47 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v47 = 0;
  v48 = v2;
  v49 = 0x1000000FFFFFFFFLL;
  v50 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v47);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(a2 + 3296);
  if (!v17)
    goto LABEL_21;
  v18 = *(_DWORD *)(v17 - 8);
  v19 = ((unint64_t)&WebCore::JSGPUTextureUsage::s_info + ~((_QWORD)&WebCore::JSGPUTextureUsage::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUTextureUsage::s_info + ~((_QWORD)&WebCore::JSGPUTextureUsage::s_info << 32)) >> 22);
  v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
  v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
  v22 = v18 & ((v21 >> 31) ^ v21);
  v23 = *(char ***)(v17 + 16 * v22);
  if (v23 != &WebCore::JSGPUTextureUsage::s_info)
  {
    v24 = 1;
    while (v23)
    {
      v22 = ((_DWORD)v22 + v24) & v18;
      v23 = *(char ***)(v17 + 16 * v22);
      ++v24;
      if (v23 == &WebCore::JSGPUTextureUsage::s_info)
        goto LABEL_20;
    }
LABEL_21:
    v26 = *(JSC::JSCell **)(a2 + 656);
    LODWORD(v47) = 23;
    if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
    {
      v27 = (JSC::JSObject *)JSC::JSCell::getObject(v26);
      if (v27)
        JSC::JSObject::didBecomePrototype(v27, (JSC::VM *)a1);
    }
    v28 = (uint64_t *)(a1 + 38904);
    v29 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v29 = v5[2];
      if ((v29 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v29 = JSC::LocalAllocator::allocateSlowCase();
LABEL_26:
        *(_DWORD *)v29 = 0;
        MEMORY[0x19AEA4278](v29, a1, a2, v26, &v47, &WebCore::JSGPUTextureUsagePrototype::s_info, 0, 0);
        if (*(_BYTE *)(a1 + 755))
          __dmb(0xAu);
        *(_DWORD *)(v29 + 16) |= 0x80000u;
        v30 = *v28;
        if (*(_QWORD *)(a1 + 38904) >= *(_QWORD *)(a1 + 38912))
        {
          v30 = *(_QWORD *)(a1 + 38920);
          if ((v30 & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
            *(_DWORD *)v30 = 0;
            v31 = *(_DWORD *)(v29 + 8);
            *(_DWORD *)v30 = v29 >> 4;
            *(_DWORD *)(v30 + 4) = v31;
            *(_QWORD *)(v30 + 8) = 0;
            if (*(_BYTE *)(a1 + 755))
              __dmb(0xAu);
            JSC::reifyStaticProperties<6u>((JSC::VM *)a1, (uint64_t)&WebCore::JSGPUTextureUsage::s_info, &WebCore::JSGPUTextureUsagePrototypeTableValues, (JSC::JSObject *)v30);
            v32 = *(_QWORD *)(v5[227] + 2776);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v34 = JSC::JSString::create(a1, &v47);
            v35 = v47;
            v47 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v33);
              else
                *(_DWORD *)v35 -= 2;
            }
            v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
            v56 = *(_DWORD *)v30;
            v55 = v36;
            v37 = JSC::Structure::outOfLineCapacity(v36);
            v53 = 0;
            v54 = v37;
            v47 = (WTF::StringImpl *)&v54;
            v48 = v30;
            v49 = a1;
            v50 = &v56;
            v51 = &v55;
            v52 = &v53;
            JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)a1, v32, 6, (uint64_t)&v47);
            if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
              JSC::VM::invalidateStructureChainIntegrity();
            JSC::JSObject::putDirectOffset(v30, a1, v53, v34);
            *((_DWORD *)v36 + 4) |= 0x10u;
            LODWORD(v47) = 23;
            if ((v30 & 0xFFFE000000000002) == 0)
            {
              v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
              if (v38)
                JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)a1);
            }
            v39 = *v5;
            v8 = (JSC::Heap *)(a1 + 192);
            if (*v5 >= (unint64_t)v5[1])
            {
              v39 = v5[2];
              if ((v39 & 1) != 0)
              {
                JSC::sanitizeStackForVM();
                v39 = JSC::LocalAllocator::allocateSlowCase();
                goto LABEL_40;
              }
              v46 = *(_QWORD *)(v39 + 8) ^ v5[3];
              v5[1] = v39 + HIDWORD(v46);
              v5[2] = v39 + (int)v46;
            }
            *v5 = v39 + 128;
LABEL_40:
            *(_DWORD *)v39 = 0;
            MEMORY[0x19AEA4278](v39, a1, a2, v30, &v47, &WebCore::JSGPUTextureUsage::s_info, 0, 0);
            if (*(_BYTE *)(a1 + 755))
              __dmb(0xAu);
            v25 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSGPUTextureUsage::s_info);
            goto LABEL_43;
          }
          v45 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(a1 + 38928);
          *(_QWORD *)(a1 + 38912) = v30 + HIDWORD(v45);
          *(_QWORD *)(a1 + 38920) = v30 + (int)v45;
        }
        *v28 = v30 + 16;
        goto LABEL_30;
      }
      v44 = *(_QWORD *)(v29 + 8) ^ v5[3];
      v5[1] = v29 + HIDWORD(v44);
      v5[2] = v29 + (int)v44;
    }
    *v5 = v29 + 128;
    goto LABEL_26;
  }
LABEL_20:
  v25 = *(_QWORD *)(v17 + 16 * v22 + 8);
  if (!v25)
    goto LABEL_21;
LABEL_43:
  v40 = *(_QWORD *)(v25 + 48);
  v47 = 0;
  v48 = v2;
  v49 = 0x1000000FFFFFFFFLL;
  v50 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v40, 14, (uint64_t)&v47);
  JSC::reifyStaticProperties<5u>((JSC::VM *)a1, (uint64_t)&WebCore::JSGPUTextureUsage::s_info, &WebCore::JSGPUTextureUsageConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 336) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath(v8, (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUTextureUsageConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUTextureUsagePrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUTextureUsage>,(WebCore::DOMConstructorID)42>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSGPUTextureView::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
        else
          --v3[2];
      }
      v4 = *((_QWORD *)v2 + 1);
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 0;
        v5 = (unsigned int *)*((_QWORD *)v2 + 1);
        *((_QWORD *)v2 + 1) = 0;
        if (v5)
        {
          do
          {
            v6 = __ldaxr(v5);
            v7 = v6 - 1;
          }
          while (__stlxr(v7, v5));
          if (!v7)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
      else
      {
        *((_QWORD *)v2 + 1) = 0;
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGPUTextureView::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUTextureViewPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUTextureViewPrototype::create(WebCore::JSGPUTextureViewPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  JSC::Structure *v17;
  int v18;
  unint64_t v20;
  WTF::StringImpl *v21[6];
  int v22;
  int v23;
  JSC::Structure *v24;
  int v25;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v20);
    *((_QWORD *)this + 4865) = SlowCase + (int)v20;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSGPUTextureView::s_info, (uint64_t)&WebCore::JSGPUTextureViewPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v10 = v21[0];
    v11 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v21[0]) = -1;
    WORD2(v21[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v11;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v12);
      else
        *(_DWORD *)v10 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v13 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = JSC::JSString::create((uint64_t)this, v21);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v25 = *(_DWORD *)SlowCase;
  v24 = v17;
  v18 = JSC::Structure::outOfLineCapacity(v17);
  v22 = 0;
  v23 = v18;
  v21[0] = (WTF::StringImpl *)&v23;
  v21[1] = (WTF::StringImpl *)SlowCase;
  v21[2] = this;
  v21[3] = (WTF::StringImpl *)&v25;
  v21[4] = (WTF::StringImpl *)&v24;
  v21[5] = (WTF::StringImpl *)&v22;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v17, this, v13, 6, (uint64_t)v21);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v22, v15);
  *((_DWORD *)v17 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUTextureView>,(WebCore::DOMConstructorID)43>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 344);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUTextureView>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUTextureView::s_info + ~((_QWORD)&WebCore::JSGPUTextureView::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUTextureView::s_info + ~((_QWORD)&WebCore::JSGPUTextureView::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUTextureView::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUTextureView::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUTextureViewPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUTextureViewPrototype::create((WebCore::JSGPUTextureViewPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUTextureView::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUTextureView::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 344) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUTextureViewConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUTextureViewPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUTextureView>,(WebCore::DOMConstructorID)43>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUTextureView_label(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 16) + 24);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

BOOL WebCore::setJSGPUTextureView_label(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  int v17;
  char v18;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSGPUTextureView::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSGPUTextureView::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v16);
  v10 = v17;
  v11 = v17 == 0;
  if (!v17)
  {
    v12 = v16;
    v16 = 0;
    v13 = *(_QWORD **)(v8 + 16);
    v14 = (WTF::StringImpl *)v13[3];
    v13[3] = v12;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    (*(void (**)(_QWORD *, _QWORD *))(*v13 + 16))(v13, v13 + 3);
    v10 = v17;
  }
  if (v10 != -1)
    ((void (*)(char *, uint64_t *))off_1E328A618[v10])(&v18, &v16);
  return v11;
}

uint64_t WebCore::JSGPUTextureViewOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPUTextureViewOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    v25 = *((_QWORD *)v3 + 1);
    if (v25)
    {
      *(_QWORD *)(v25 + 8) = 0;
      v26 = (unsigned int *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v26)
      {
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v26);
          WTF::fastFree((WTF *)v26, a2);
        }
      }
    }
    else
    {
      *((_QWORD *)v3 + 1) = 0;
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

uint64_t WebCore::parseEnumeration<WebCore::GPUTextureViewDimension>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  BOOL v11;
  int v13;
  char **v14;
  int v15;
  int v16;
  int v17;
  uint16x8_t v19;
  uint16x8_t v20;
  uint64_t v22;
  unint64_t v23;

  v3 = a1;
  v23 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v23, a1);
    v4 = v22;
    if (v22)
      goto LABEL_7;
LABEL_41:
    v15 = 0;
    v16 = 0;
    return v15 | (v16 << 8);
  }
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 1) == 0)
  {
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
  if (v4)
LABEL_5:
    *(_DWORD *)v4 += 2;
LABEL_6:
  if (!v4)
    goto LABEL_41;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  v8 = v7 != 2;
  if (v6 != "1d" && v7 == 2)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 49)
      {
LABEL_13:
        v10 = 2;
        goto LABEL_18;
      }
      v9 = *((unsigned __int8 *)v6 + 1);
    }
    else
    {
      if (*(_WORD *)v6 != 49)
        goto LABEL_13;
      v9 = *((unsigned __int16 *)v6 + 1);
    }
    if (v9 != 100)
      goto LABEL_13;
LABEL_34:
    v14 = &WebCore::parseEnumerationFromString<WebCore::GPUTextureViewDimension>(WTF::String const&)::mappings;
    goto LABEL_74;
  }
  v11 = v6 == "1d" && v7 == 2;
  v10 = *(_DWORD *)(v4 + 4);
  if (v11)
    goto LABEL_34;
LABEL_18:
  if (v6 == "2d" || v7 != 2)
  {
    if (v6 == "2d" && v7 == 2)
      goto LABEL_37;
  }
  else
  {
    if (!v10)
      goto LABEL_37;
    if ((v5 & 4) == 0)
    {
      if (*(_WORD *)v6 != 50)
        goto LABEL_27;
      v13 = *((unsigned __int16 *)v6 + 1);
LABEL_26:
      if (v13 != 100)
        goto LABEL_27;
LABEL_37:
      v14 = &off_1E32866B8;
      goto LABEL_74;
    }
    if (*v6 == 50)
    {
      v13 = *((unsigned __int8 *)v6 + 1);
      goto LABEL_26;
    }
  }
LABEL_27:
  if (v6 == "2d-array" || v10 != 8)
  {
    if (v6 == "2d-array" && v10 == 8)
      goto LABEL_33;
  }
  else
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 == 50 && *(_DWORD *)(v6 + 1) == 1918971236 && *((_DWORD *)v6 + 1) == 2036429426)
      {
LABEL_33:
        v14 = &off_1E32866D0;
LABEL_74:
        v15 = *((unsigned __int8 *)v14 + 16);
        v16 = 1;
        goto LABEL_75;
      }
      goto LABEL_53;
    }
    if (*(_WORD *)v6 != 50)
    {
LABEL_53:
      v10 = 8;
      goto LABEL_54;
    }
    v10 = 8;
    if (*(_QWORD *)(v6 + 2) == 0x720061002D0064 && *((_QWORD *)v6 + 1) == 0x79006100720072)
      goto LABEL_33;
  }
LABEL_54:
  if (v6 == "3d")
    v8 = 1;
  if (v8)
  {
    if (v6 == "3d" && v7 == 2)
      goto LABEL_62;
  }
  else
  {
    if (!v10)
    {
LABEL_62:
      v14 = &off_1E32866E8;
      goto LABEL_74;
    }
    if ((v5 & 4) != 0)
    {
      if (*v6 != 51)
        goto LABEL_67;
      v17 = *((unsigned __int8 *)v6 + 1);
    }
    else
    {
      if (*(_WORD *)v6 != 51)
        goto LABEL_67;
      v17 = *((unsigned __int16 *)v6 + 1);
    }
    if (v17 == 100)
      goto LABEL_62;
  }
LABEL_67:
  if (v6 == "cube" || v10 != 4)
  {
    if (v6 == "cube" && v10 == 4)
      goto LABEL_73;
    if (v6 == "cube-array" || v10 != 10)
    {
      if (v10 != 10 || v6 != "cube-array")
        goto LABEL_96;
    }
    else if ((v5 & 4) != 0)
    {
      if (*v6 != 99 || *(_QWORD *)(v6 + 1) != 0x617272612D656275 || *(_QWORD *)(v6 + 2) != 0x79617272612D6562)
        goto LABEL_96;
    }
    else
    {
      if (*(_WORD *)v6 != 99)
        goto LABEL_96;
      v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968BFEF0);
      v19.i16[0] = vminvq_u16(v19);
      if (!v19.i32[0])
        goto LABEL_96;
      v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 4), (int16x8_t)xmmword_1968BFF00);
      v20.i16[0] = vminvq_u16(v20);
      if (!v20.i32[0])
        goto LABEL_96;
    }
    v14 = &off_1E3286718;
    goto LABEL_74;
  }
  if ((v5 & 4) != 0)
  {
    if (*v6 == 99 && *(_WORD *)(v6 + 1) == 25205 && *((_WORD *)v6 + 1) == 25954)
      goto LABEL_73;
    goto LABEL_96;
  }
  if (*(_WORD *)v6 != 99)
  {
LABEL_96:
    v15 = 0;
    v16 = 0;
    goto LABEL_75;
  }
  v15 = 0;
  if (*(_DWORD *)(v6 + 2) == 6422645)
  {
    v16 = 0;
    if (*((_DWORD *)v6 + 1) == 6619234)
    {
LABEL_73:
      v14 = &off_1E3286700;
      goto LABEL_74;
    }
  }
  else
  {
    v16 = 0;
  }
LABEL_75:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v15 | (v16 << 8);
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSGPUUncapturedErrorEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  JSC::VM *v5;
  uint64_t v7;
  int v8;
  unint64_t v9;
  JSC::JSCell *v10;
  uint64_t Object;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSC::VM *v14;
  double v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  JSC::VM *v18;
  double v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  JSC::VM *v22;
  double v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  WebCore::JSDOMGlobalObject *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  int v37;
  JSC::VM *v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char **v45;
  int v46;
  unint64_t v47;
  WebCore::JSEvent *v48;
  JSC::JSCell *v49;
  unint64_t Structure;
  JSC::Structure *v51;
  JSC::JSCell *v52;
  uint64_t v53;
  JSCell *v54;
  JSC::JSCell *v55;
  JSC::JSGlobalObject *v56;
  JSC::JSObject *v57;
  JSC::JSGlobalObject *v58;
  JSC::VM *v59;
  JSC::JSObject *v60;
  JSC::Structure *v61;
  JSC::VM *FunctionRealm;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char **v69;
  int v70;
  JSC::JSCell *v71;
  unint64_t v72;
  JSC::Structure *v73;
  JSC::JSCell *v74;
  uint64_t v75;
  unint64_t SubclassStructure;
  _DWORD *v77;
  uint64_t v79;
  _BOOL4 v80;
  uint64_t v81;
  _BOOL4 v82;
  uint64_t v83;
  _DWORD *v85;
  int v86;
  _BOOL4 v87;
  uint64_t v88;
  int v91;
  JSValue v92;
  BOOL v93;
  int v94;
  uint64_t v95;
  int *v96;
  int v97;
  BOOL v98;
  int v99;
  uint64_t v100;
  int *v101;
  int v102;
  BOOL v103;
  int v104;
  uint64_t v105;
  int *v106;
  int v107;
  JSC::VM *v108;
  _DWORD *v109;
  int v110;
  int v111;
  int v112;
  WTF::StringImpl *v113;
  int v114;
  _DWORD *v115;
  uint64_t v116;
  unsigned int v117;
  JSC::VM *v118;
  uint64_t *v119;
  char v120;
  WTF::StringImpl *v121;
  _BYTE v122[8];
  int v123;
  int v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v92.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v5, a1, v92);
  }
  v108 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v7 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v113);
  v8 = v114;
  if (v114)
  {
    v54 = 0;
    goto LABEL_94;
  }
  v9 = 0xFFFE000000000002;
  v10 = *(JSC::JSCell **)(a2 + 56);
  v118 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (((unint64_t)v10 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)v10 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v10)) == 0)
    {
      JSC::throwTypeError();
      v54 = 0;
      v25 = 1;
      v112 = 1;
      goto LABEL_92;
    }
    v2 = Object;
    LOWORD(v115) = 0;
    BYTE2(v115) = 0;
    v116 = 0;
    v117 = 0;
    WTF::AtomStringImpl::addLiteral();
    v12 = v121;
    v3 = JSC::JSObject::get((JSC::Structure *)v2, a1, (unint64_t)v121);
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v13);
      else
        *(_DWORD *)v12 -= 2;
    }
    if (*((_DWORD *)v118 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v118))
      goto LABEL_46;
    if (v3 == 10)
    {
      LOBYTE(v3) = 0;
      goto LABEL_18;
    }
    v14 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v3 >= 0xFFFE000000000000)
      goto LABEL_179;
    *(_QWORD *)&v15 = v3 - 0x2000000000000;
    if (v3 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v15 <= 0.0)
      {
        LODWORD(v3) = v15 < 0.0;
        goto LABEL_17;
      }
    }
    else
    {
      if ((v3 & 0xFFFE000000000002) != 0)
      {
        LODWORD(v3) = v3 == 7;
        goto LABEL_17;
      }
      v94 = *(unsigned __int8 *)(v3 + 5);
      if (v94 == 3)
      {
        v97 = *(_DWORD *)(v3 + 8);
LABEL_207:
        v93 = v97 == 0;
        goto LABEL_225;
      }
      if (v94 == 2)
      {
        v95 = *(_QWORD *)(v3 + 8);
        if ((v95 & 1) != 0)
          v96 = (int *)(v3 + 16);
        else
          v96 = (int *)(v95 + 4);
        v97 = *v96;
        goto LABEL_207;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v93 = *(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        goto LABEL_225;
      }
    }
    LODWORD(v3) = 1;
    goto LABEL_17;
  }
  v116 = 0;
  v117 = 0;
  LOWORD(v115) = 0;
  BYTE2(v115) = 0;
LABEL_45:
  WebCore::throwRequiredMemberTypeError((int)a1, (int)&v118, "error", 6, "GPUUncapturedErrorEventInit", 28, "(GPUOutOfMemoryError or GPUValidationError or GPUInternalError)", 64);
LABEL_46:
  v112 = 1;
  while (1)
  {
    if (v117 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E328B398[v117])(&v121, &v116);
    v25 = v112;
    if (v112)
    {
      v54 = 0;
      goto LABEL_91;
    }
    if (!v114)
      break;
    v14 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_179:
    v93 = (_DWORD)v3 == 0;
LABEL_225:
    LODWORD(v3) = !v93;
LABEL_17:
    if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
      goto LABEL_46;
LABEL_18:
    LOBYTE(v115) = v3;
    WTF::AtomStringImpl::addLiteral();
    v16 = v121;
    v3 = JSC::JSObject::get((JSC::Structure *)v2, a1, (unint64_t)v121);
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v17);
      else
        *(_DWORD *)v16 -= 2;
    }
    if (*((_DWORD *)v118 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v118))
      goto LABEL_46;
    if (v3 == 10)
    {
      LOBYTE(v3) = 0;
      goto LABEL_29;
    }
    v18 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v3 >= 0xFFFE000000000000)
    {
      v98 = (_DWORD)v3 == 0;
      goto LABEL_212;
    }
    *(_QWORD *)&v19 = v3 - 0x2000000000000;
    if (v3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v3 & v9) != 0)
      {
        LODWORD(v3) = v3 == 7;
        goto LABEL_28;
      }
      v99 = *(unsigned __int8 *)(v3 + 5);
      if (v99 == 3)
      {
        v102 = *(_DWORD *)(v3 + 8);
      }
      else
      {
        if (v99 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_216:
            LODWORD(v3) = 1;
            goto LABEL_28;
          }
          v98 = *(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_212;
        }
        v100 = *(_QWORD *)(v3 + 8);
        if ((v100 & 1) != 0)
          v101 = (int *)(v3 + 16);
        else
          v101 = (int *)(v100 + 4);
        v102 = *v101;
      }
      v98 = v102 == 0;
LABEL_212:
      LODWORD(v3) = !v98;
      goto LABEL_28;
    }
    if (v19 > 0.0)
      goto LABEL_216;
    LODWORD(v3) = v19 < 0.0;
LABEL_28:
    if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
      goto LABEL_46;
LABEL_29:
    BYTE1(v115) = v3;
    WTF::AtomStringImpl::addLiteral();
    v20 = v121;
    v3 = JSC::JSObject::get((JSC::Structure *)v2, a1, (unint64_t)v121);
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v21);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (*((_DWORD *)v118 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v118))
      goto LABEL_46;
    if (v3 == 10)
    {
      LOBYTE(v3) = 0;
      goto LABEL_40;
    }
    v22 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v3 >= 0xFFFE000000000000)
    {
      v103 = (_DWORD)v3 == 0;
      goto LABEL_219;
    }
    *(_QWORD *)&v23 = v3 - 0x2000000000000;
    if (v3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v3 & v9) != 0)
      {
        LODWORD(v3) = v3 == 7;
        goto LABEL_39;
      }
      v104 = *(unsigned __int8 *)(v3 + 5);
      if (v104 == 3)
      {
        v107 = *(_DWORD *)(v3 + 8);
      }
      else
      {
        if (v104 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_223:
            LODWORD(v3) = 1;
            goto LABEL_39;
          }
          v103 = *(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_219;
        }
        v105 = *(_QWORD *)(v3 + 8);
        if ((v105 & 1) != 0)
          v106 = (int *)(v3 + 16);
        else
          v106 = (int *)(v105 + 4);
        v107 = *v106;
      }
      v103 = v107 == 0;
LABEL_219:
      LODWORD(v3) = !v103;
      goto LABEL_39;
    }
    if (v23 > 0.0)
      goto LABEL_223;
    LODWORD(v3) = v23 < 0.0;
LABEL_39:
    if (*((_DWORD *)v22 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v22))
      goto LABEL_46;
LABEL_40:
    BYTE2(v115) = v3;
    WTF::AtomStringImpl::addLiteral();
    v3 = (unint64_t)v121;
    v2 = JSC::JSObject::get((JSC::Structure *)v2, a1, (unint64_t)v121);
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v3, v24);
      else
        *(_DWORD *)v3 -= 2;
    }
    if (*((_DWORD *)v118 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v118))
      goto LABEL_46;
    if (v2 == 10)
      goto LABEL_45;
    v119 = (uint64_t *)*((_QWORD *)a1 + 7);
    if ((v2 & v9) != 0)
    {
LABEL_143:
      JSC::throwTypeError();
      v91 = 1;
      v124 = 1;
LABEL_144:
      v112 = 1;
      goto LABEL_145;
    }
    v79 = *(unsigned int *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x4C);
    v80 = *(_DWORD *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x4C) != 0;
    v81 = 16 * v79;
    v82 = v80;
    if ((_DWORD)v79)
    {
      v82 = 1;
      if ((char **)v81 != &WebCore::JSGPUOutOfMemoryError::s_info)
      {
        v83 = 16 * v79;
        do
        {
          v83 = *(_QWORD *)(v83 + 16);
          v82 = v83 != 0;
        }
        while ((char **)v83 != &WebCore::JSGPUOutOfMemoryError::s_info && v83 != 0);
      }
    }
    if (v82 && (v85 = *(_DWORD **)(v2 + 24)) != 0)
    {
      v86 = 0;
    }
    else
    {
      v87 = *(_DWORD *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x4C) != 0;
      if ((_DWORD)v79)
      {
        v87 = *(_DWORD *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x4C) != 0;
        if ((char **)v81 != &WebCore::JSGPUValidationError::s_info)
        {
          v88 = 16 * v79;
          do
          {
            v88 = *(_QWORD *)(v88 + 16);
            v87 = v88 != 0;
          }
          while ((char **)v88 != &WebCore::JSGPUValidationError::s_info && v88 != 0);
        }
      }
      if (v87 && (v85 = *(_DWORD **)(v2 + 24)) != 0)
      {
        v86 = 1;
      }
      else
      {
        if ((_DWORD)v79 && (char **)v81 != &WebCore::JSGPUInternalError::s_info)
        {
          do
          {
            v81 = *(_QWORD *)(v81 + 16);
            v80 = v81 != 0;
          }
          while ((char **)v81 != &WebCore::JSGPUInternalError::s_info && v81 != 0);
        }
        if (!v80)
          goto LABEL_143;
        v85 = *(_DWORD **)(v2 + 24);
        if (!v85)
          goto LABEL_143;
        v86 = 2;
      }
    }
    ++*v85;
    v109 = v85;
    v110 = v86;
    LOBYTE(v111) = 1;
    v2 = (uint64_t)v122;
    v122[0] = 0;
    v9 = 0xFFFFFFFFLL;
    v123 = -1;
    v3 = (unint64_t)off_1E328B3B0;
    ((void (*)(char *, _BYTE *, _DWORD **))off_1E328B3B0[v86])(&v120, v122, &v109);
    v123 = v86;
    v124 = 0;
    if (!(_BYTE)v111 || v110 == -1)
    {
      LOBYTE(v109) = 0;
      v110 = -1;
LABEL_137:
      ((void (*)(uint64_t **, _DWORD **, _BYTE *))off_1E328B3B0[v86])(&v119, &v109, v122);
      v110 = v86;
      v119 = &v116;
      ((void (*)(uint64_t **, uint64_t *, _DWORD **))off_1E328B438[v86])(&v119, &v116, &v109);
LABEL_138:
      if (v110 != -1)
        ((void (*)(uint64_t **, _DWORD **))off_1E328B398[v110])(&v119, &v109);
      v2 = v117;
      LOWORD(v109) = (_WORD)v115;
      BYTE2(v109) = BYTE2(v115);
      LOBYTE(v110) = 0;
      v111 = -1;
      if (v117 != -1)
      {
        ((void (*)(uint64_t **, int *, uint64_t *))off_1E328B3B0[v117])(&v119, &v110, &v116);
        v111 = v2;
      }
      goto LABEL_142;
    }
    v9 = (unint64_t)off_1E328B398;
    ((void (*)(char *, _DWORD **))off_1E328B398[v110])(&v120, &v109);
    v91 = v124;
    if (v124)
      goto LABEL_144;
    v86 = v123;
    LOBYTE(v109) = 0;
    v110 = -1;
    if (v123 != -1)
      goto LABEL_137;
    if (v117 != -1)
    {
      ((void (*)(uint64_t **, uint64_t *))off_1E328B398[v117])(&v119, &v116);
      v117 = -1;
      goto LABEL_138;
    }
    LOWORD(v109) = (_WORD)v115;
    BYTE2(v109) = BYTE2(v115);
    LOBYTE(v110) = 0;
    v111 = -1;
LABEL_142:
    v112 = 0;
    v91 = v124;
LABEL_145:
    if (v91 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_1E328B450[v91])(&v119, v122);
  }
  v26 = v113;
  v113 = 0;
  LOWORD(v121) = (_WORD)v109;
  BYTE2(v121) = BYTE2(v109);
  v122[0] = 0;
  v123 = -1;
  v27 = v111;
  if (v111 != -1)
  {
    ((void (*)(_DWORD **, _BYTE *, int *))off_1E328B3B0[v111])(&v115, v122, &v110);
    v123 = v27;
  }
  v28 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v28);
  v31 = v121;
  v32 = BYTE1(v121);
  v33 = BYTE2(v121);
  *(_QWORD *)(v28 + 8) = 0;
  if (v31)
    v34 = 2228738;
  else
    v34 = 2228736;
  v35 = v34 | (v26 != 0) | (4 * v32) | (8 * v33) | *(_DWORD *)(v28 + 20) & 0xFFC00000;
  *(_DWORD *)(v28 + 16) = 1;
  *(_DWORD *)(v28 + 20) = v35;
  if (v26)
  {
    *(_DWORD *)v26 += 2;
    v35 = *(_DWORD *)(v28 + 20);
  }
  *(_QWORD *)(v28 + 24) = v26;
  *(_QWORD *)(v28 + 32) = 0;
  *(_QWORD *)(v28 + 40) = 0;
  *(_QWORD *)(v28 + 48) = 0;
  *(_QWORD *)(v28 + 56) = v30;
  *(_DWORD *)(v28 + 20) = v35 | 0x4000;
  *(_QWORD *)v28 = off_1E334F3C0;
  *(_QWORD *)(v28 + 64) = 0;
  *(_QWORD *)(v28 + 72) = 0;
  *(_WORD *)(v28 + 80) = (_WORD)v121;
  *(_BYTE *)(v28 + 82) = BYTE2(v121);
  *(_BYTE *)(v28 + 88) = 0;
  v36 = (WTF::StringImpl *)(v28 + 88);
  *(_DWORD *)(v28 + 96) = -1;
  v37 = v123;
  if (v123 == -1)
  {
    v115 = (_DWORD *)v28;
  }
  else
  {
    ((void (*)(_DWORD **, WTF::StringImpl *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore19GPUOutOfMemoryErrorENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_18GPUValidationErrorENSA_ISF_EENSC_ISF_EEEENS7_INS8_16GPUInternalErrorENSA_ISJ_EENSC_ISJ_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JST_SS_EEEDcmSV_DpOT0____fdiagonal[v123])(&v115, v36, v122);
    *(_DWORD *)(v28 + 96) = v37;
    v115 = (_DWORD *)v28;
    if (v123 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_1E328B398[v123])(&v119, v122);
  }
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v36);
    else
      *(_DWORD *)v26 -= 2;
  }
  if (*(void (***)(WebCore::GPUUncapturedErrorEvent *__hidden))v28 != off_1E334F3C0)
  {
    __break(0xC471u);
    JUMPOUT(0x194BA5D18);
  }
  v38 = *(JSC::VM **)(v7 + 40);
  v39 = *((_QWORD *)v38 + 412);
  if (!v39)
    goto LABEL_72;
  v40 = *(_DWORD *)(v39 - 8);
  v41 = ((unint64_t)&WebCore::JSGPUUncapturedErrorEvent::s_info
       + ~((_QWORD)&WebCore::JSGPUUncapturedErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUUncapturedErrorEvent::s_info
                                                                         + ~((_QWORD)&WebCore::JSGPUUncapturedErrorEvent::s_info << 32)) >> 22);
  v42 = 9 * ((v41 + ~(v41 << 13)) ^ ((v41 + ~(v41 << 13)) >> 8));
  v43 = (v42 ^ (v42 >> 15)) + ~((v42 ^ (v42 >> 15)) << 27);
  v44 = v40 & ((v43 >> 31) ^ v43);
  v45 = *(char ***)(v39 + 16 * v44);
  if (v45 == &WebCore::JSGPUUncapturedErrorEvent::s_info)
  {
LABEL_71:
    v47 = *(_QWORD *)(v39 + 16 * v44 + 8);
    if (!v47)
      goto LABEL_72;
  }
  else
  {
    v46 = 1;
    while (v45)
    {
      v44 = ((_DWORD)v44 + v46) & v40;
      v45 = *(char ***)(v39 + 16 * v44);
      ++v46;
      if (v45 == &WebCore::JSGPUUncapturedErrorEvent::s_info)
        goto LABEL_71;
    }
LABEL_72:
    v48 = (WebCore::JSEvent *)*((_QWORD *)v38 + 7);
    v49 = (JSC::JSCell *)WebCore::JSEvent::prototype(v48, v38, v29);
    Structure = WebCore::JSGPUUncapturedErrorEventPrototype::createStructure((uint64_t *)v48, (uint64_t)v38, v49);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v52 = (JSC::JSCell *)WebCore::JSGPUUncapturedErrorEventPrototype::create(v48, v38, Structure, v51);
    v53 = WebCore::JSGPUUncapturedErrorEvent::createStructure((uint64_t *)v48, (uint64_t)v38, v52);
    v47 = WebCore::cacheDOMStructure((JSCell *)v38, v53, (uint64_t)&WebCore::JSGPUUncapturedErrorEvent::s_info);
  }
  v54 = (JSCell *)WebCore::JSGPUUncapturedErrorEvent::create(v47, v38, (uint64_t *)&v115);
  WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v38 + 415), v28, (uint64_t)v54);
  v55 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v55 & 0xFFFE000000000002) == 0)
  {
    v56 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v55);
    if (v56)
    {
      v58 = v56;
      if (v56 != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v59 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v56, v57);
        if (!*((_DWORD *)v59 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v59) & 1) == 0)
        {
          v63 = *((_QWORD *)FunctionRealm + 412);
          if (v63)
          {
            v64 = *(_DWORD *)(v63 - 8);
            v65 = ((unint64_t)&WebCore::JSGPUUncapturedErrorEvent::s_info
                 + ~((_QWORD)&WebCore::JSGPUUncapturedErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUUncapturedErrorEvent::s_info
                                                                                   + ~((_QWORD)&WebCore::JSGPUUncapturedErrorEvent::s_info << 32)) >> 22);
            v66 = 9 * ((v65 + ~(v65 << 13)) ^ ((v65 + ~(v65 << 13)) >> 8));
            v67 = (v66 ^ (v66 >> 15)) + ~((v66 ^ (v66 >> 15)) << 27);
            v68 = v64 & ((v67 >> 31) ^ v67);
            v69 = *(char ***)(v63 + 16 * v68);
            if (v69 == &WebCore::JSGPUUncapturedErrorEvent::s_info)
            {
LABEL_82:
              v60 = *(JSC::JSObject **)(v63 + 16 * v68 + 8);
              if (v60)
              {
LABEL_84:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v58, v60, v61);
                if (!*((_DWORD *)v59 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v59) & 1) == 0)
                  JSC::JSObject::setStructure(v54, v59, SubclassStructure);
                goto LABEL_86;
              }
            }
            else
            {
              v70 = 1;
              while (v69)
              {
                v68 = ((_DWORD)v68 + v70) & v64;
                v69 = *(char ***)(v63 + 16 * v68);
                ++v70;
                if (v69 == &WebCore::JSGPUUncapturedErrorEvent::s_info)
                  goto LABEL_82;
              }
            }
          }
          v71 = (JSC::JSCell *)WebCore::JSEvent::prototype(v59, FunctionRealm, v60);
          v72 = WebCore::JSGPUUncapturedErrorEventPrototype::createStructure((uint64_t *)v59, (uint64_t)FunctionRealm, v71);
          *(_DWORD *)(v72 + 16) |= 0x80000u;
          v74 = (JSC::JSCell *)WebCore::JSGPUUncapturedErrorEventPrototype::create(v59, FunctionRealm, v72, v73);
          v75 = WebCore::JSGPUUncapturedErrorEvent::createStructure((uint64_t *)v59, (uint64_t)FunctionRealm, v74);
          v60 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v75, (uint64_t)&WebCore::JSGPUUncapturedErrorEvent::s_info);
          goto LABEL_84;
        }
      }
    }
  }
LABEL_86:
  if (*((_DWORD *)v108 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v108) & 1) != 0)
    v54 = 0;
  v77 = v115;
  v115 = 0;
  if (v77)
  {
    if (v77[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v77 + 8))(v77);
    else
      --v77[4];
  }
  v25 = v112;
LABEL_91:
  if (v25 != -1)
LABEL_92:
    ((void (*)(WTF::StringImpl **, _DWORD **))off_1E328B3C8[v25])(&v121, &v109);
  v8 = v114;
LABEL_94:
  if (v8 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328B3D8[v8])(&v121, &v113);
  return v54;
}

uint64_t WebCore::JSGPUUncapturedErrorEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUUncapturedErrorEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUUncapturedErrorEventPrototype::create(WebCore::JSGPUUncapturedErrorEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSGPUUncapturedErrorEvent::s_info, (uint64_t)&WebCore::JSGPUUncapturedErrorEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSGPUUncapturedErrorEvent>,(WebCore::DOMConstructorID)44>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 352);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSGPUUncapturedErrorEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSGPUUncapturedErrorEvent::s_info
         + ~((_QWORD)&WebCore::JSGPUUncapturedErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUUncapturedErrorEvent::s_info
                                                                           + ~((_QWORD)&WebCore::JSGPUUncapturedErrorEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSGPUUncapturedErrorEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSGPUUncapturedErrorEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSGPUUncapturedErrorEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSGPUUncapturedErrorEventPrototype::create((WebCore::JSGPUUncapturedErrorEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSGPUUncapturedErrorEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSGPUUncapturedErrorEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 352) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUUncapturedErrorEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUUncapturedErrorEventPrototype::s_info != (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSGPUUncapturedErrorEvent>,(WebCore::DOMConstructorID)44>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUUncapturedErrorEvent_error(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::JSGPUUncapturedErrorEvent *v8;
  JSC::VM *v9;
  _BYTE v10[8];
  int v11;
  _BYTE v12[40];
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD v16[5];

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v10[0] = 0;
  v11 = -1;
  v5 = *(unsigned int *)(v3 + 96);
  if ((_DWORD)v5 == -1)
  {
    v5 = -1;
  }
  else
  {
    ((void (*)(_QWORD *, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore19GPUOutOfMemoryErrorENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_18GPUValidationErrorENSA_ISF_EENSC_ISF_EEEENS7_INS8_16GPUInternalErrorENSA_ISJ_EENSC_ISJ_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JSV_SU_EEEDcmSX_DpOT0____fdiagonal[v5])(v16, v10, v3 + 88);
    v11 = v5;
  }
  v15 = v5;
  LOBYTE(v13) = 0;
  v14 = 0;
  v16[0] = &v15;
  v16[1] = &v13;
  v16[2] = a1;
  v16[3] = v4;
  v16[4] = v10;
  _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_19GPUOutOfMemoryErrorEEENS4_INS_18GPUValidationErrorEEENS4_INS_16GPUInternalErrorEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrIS5_NSK_12RawPtrTraitsIS5_EENSK_21DefaultRefDerefTraitsIS5_EEEENSL_IS7_NSM_IS7_EENSO_IS7_EEEENSL_IS9_NSM_IS9_EENSO_IS9_EEEEEEEEUlTyvE_JNSI_17integral_constantIlLl0EEENS11_IlLl1EEENS11_IlLl2EEEEEET_S15_((unint64_t)v16, (uint64_t)v12);
  if (v14)
  {
    v6 = v13;
    if (v11 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E328B398[v11])(v16, v10);
    return v6;
  }
  else
  {
    v8 = (WebCore::JSGPUUncapturedErrorEvent *)std::__throw_bad_optional_access[abi:sn180100]();
    return WebCore::JSGPUUncapturedErrorEvent::subspaceForImpl(v8, v9);
  }
}

uint64_t WebCore::JSGPUUncapturedErrorEvent::subspaceForImpl(WebCore::JSGPUUncapturedErrorEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 352);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 352))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 352);
    *(_QWORD *)(v8 + 352) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 352);
  *(_QWORD *)(v3 + 352) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSGPUValidationError>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  WTF::StringImpl *v10;
  JSCell *v11;
  JSC::JSCell *v12;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v14;
  JSC::JSGlobalObject *v15;
  JSC::VM *v16;
  JSC::Structure *v17;
  uint64_t FunctionRealm;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char **v25;
  int v26;
  JSC::JSObject *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  unint64_t SubclassStructure;
  WTF *v34;
  uint64_t v35;
  JSValue v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  int v40;
  WTF::StringImpl *v41;
  WTF *v42;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v37.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v37);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 48);
  v42 = (WTF *)v6;
  if ((v6 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v6 + 5) == 2)
  {
    v7 = *(WTF::StringImpl **)(v6 + 8);
    if ((v7 & 1) != 0)
    {
      v7 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v6, a1);
      if (!v7)
        goto LABEL_7;
    }
    else if (!v7)
    {
LABEL_7:
      v41 = v7;
      goto LABEL_8;
    }
    *(_DWORD *)v7 += 2;
    goto LABEL_7;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v42, a1);
LABEL_8:
  if (*((_DWORD *)v3 + 20))
  {
    v8 = v41;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v3))
    {
      v40 = 1;
      v41 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v38);
        else
          *(_DWORD *)v8 -= 2;
      }
      v11 = 0;
      v35 = 1;
      goto LABEL_27;
    }
  }
  else
  {
    v8 = v41;
  }
  v40 = 0;
  v39 = 0;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v9 = 1;
  *((_QWORD *)v9 + 1) = v8;
  *((_QWORD *)v9 + 2) = 0;
  v42 = v9;
  v11 = (JSCell *)WebCore::createWrapper<WebCore::GPUValidationError,WebCore::GPUValidationError>(*(_QWORD *)(v5 + 40), &v42);
  v12 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v12 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v12);
    if (Object)
    {
      v15 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v16 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = JSC::getFunctionRealm(a1, Object, v14);
        if (!*((_DWORD *)v16 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) == 0)
        {
          v19 = *(_QWORD *)(FunctionRealm + 3296);
          if (v19)
          {
            v20 = *(_DWORD *)(v19 - 8);
            v21 = ((unint64_t)&WebCore::JSGPUValidationError::s_info
                 + ~((_QWORD)&WebCore::JSGPUValidationError::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUValidationError::s_info
                                                                              + ~((_QWORD)&WebCore::JSGPUValidationError::s_info << 32)) >> 22);
            v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
            v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
            v24 = v20 & ((v23 >> 31) ^ v23);
            v25 = *(char ***)(v19 + 16 * v24);
            if (v25 == &WebCore::JSGPUValidationError::s_info)
            {
LABEL_19:
              v27 = *(JSC::JSObject **)(v19 + 16 * v24 + 8);
              if (v27)
              {
LABEL_21:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v15, v27, v17);
                if (!*((_DWORD *)v16 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) == 0)
                  JSC::JSObject::setStructure(v11, v16, SubclassStructure);
                goto LABEL_23;
              }
            }
            else
            {
              v26 = 1;
              while (v25)
              {
                v24 = ((_DWORD)v24 + v26) & v20;
                v25 = *(char ***)(v19 + 16 * v24);
                ++v26;
                if (v25 == &WebCore::JSGPUValidationError::s_info)
                  goto LABEL_19;
              }
            }
          }
          Structure = WebCore::JSGPUValidationErrorPrototype::createStructure((uint64_t *)v16, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v31 = (JSC::JSCell *)WebCore::JSGPUValidationErrorPrototype::create(v16, Structure, v29, v30);
          v32 = WebCore::JSGPUValidationError::createStructure((uint64_t *)v16, FunctionRealm, v31);
          v27 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v32, (uint64_t)&WebCore::JSGPUValidationError::s_info);
          goto LABEL_21;
        }
      }
    }
  }
LABEL_23:
  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
    v11 = 0;
  v34 = v42;
  v42 = 0;
  if (v34)
    WTF::RefCounted<WebCore::GPUInternalError>::deref(v34, v10);
  v35 = 0;
LABEL_27:
  ((void (*)(WTF **, uint64_t *))off_1E328A618[v35])(&v42, &v39);
  return v11;
}

WTF *WebCore::JSGPUValidationError::destroy(WebCore::JSGPUValidationError *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
    return WTF::RefCounted<WebCore::GPUInternalError>::deref(result, a2);
  return result;
}

uint64_t WebCore::JSGPUValidationError::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUValidationErrorPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUValidationErrorPrototype::create(WebCore::JSGPUValidationErrorPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSGPUValidationError::s_info, &WebCore::JSGPUValidationErrorPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSGPUValidationError>,(WebCore::DOMConstructorID)45>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 360);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSGPUValidationError>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000001, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUValidationError::s_info
         + ~((_QWORD)&WebCore::JSGPUValidationError::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUValidationError::s_info
                                                                      + ~((_QWORD)&WebCore::JSGPUValidationError::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUValidationError::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUValidationError::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUValidationErrorPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUValidationErrorPrototype::create((WebCore::JSGPUValidationErrorPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUValidationError::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUValidationError::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 360) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUValidationErrorConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUValidationErrorPrototype::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSGPUValidationError>,(WebCore::DOMConstructorID)45>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUValidationError_message(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v2)
    v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(v2 + 8);
  if (!v4)
    return *(_QWORD *)(v3 + 41968);
  v5 = *(_DWORD *)(v4 + 4);
  if (!v5)
    return *(_QWORD *)(v3 + 41968);
  if (v5 == 1)
  {
    v8 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    return *(_QWORD *)(v3 + 8 * v9 + 42216);
  }
LABEL_6:
  v6 = *(_QWORD *)(v3 + 64760);
  if (!v6 || v4 != *(_QWORD *)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

uint64_t WebCore::jsGPUValidationError_stack(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v10;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = *(_QWORD *)(a1 + 56);
  v3 = v10;
  if (!v10 || (v4 = *((_DWORD *)v10 + 1)) == 0)
  {
    v5 = *(_QWORD *)(v2 + 41968);
LABEL_7:
    if (!v3)
      return v5;
    goto LABEL_15;
  }
  if (v4 != 1)
    goto LABEL_4;
  v6 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
  if ((*((_BYTE *)v10 + 16) & 4) != 0)
  {
    v7 = *v6;
LABEL_14:
    v5 = *(_QWORD *)(v2 + 8 * v7 + 42216);
    goto LABEL_15;
  }
  v8 = *(unsigned __int16 *)v6;
  if (v8 <= 0xFF)
  {
    v7 = v8;
    goto LABEL_14;
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v10 != *(WTF::StringImpl **)(v5 + 8))
  {
    v5 = JSC::jsStringWithCacheSlowCase();
    v3 = v10;
    goto LABEL_7;
  }
LABEL_15:
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v3);
  else
    *(_DWORD *)v3 -= 2;
  return v5;
}

uint64_t WebCore::JSGPUValidationErrorOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

WTF *WebCore::JSGPUValidationErrorOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  return WTF::RefCounted<WebCore::GPUInternalError>::deref(v3, a2);
}

unint64_t WebCore::createWrapper<WebCore::GPUValidationError,WebCore::GPUValidationError>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSGPUValidationError::s_info
        + ~((_QWORD)&WebCore::JSGPUValidationError::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUValidationError::s_info
                                                                     + ~((_QWORD)&WebCore::JSGPUValidationError::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSGPUValidationError::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSGPUValidationError::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSGPUValidationErrorPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSGPUValidationErrorPrototype::create((WebCore::JSGPUValidationErrorPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSGPUValidationError::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSGPUValidationError::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 360);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 360))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 360);
    *(_QWORD *)(v26 + 360) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 360);
  *(_QWORD *)(v22 + 360) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE335978 & 1) == 0)
  {
    qword_1EE335970 = (uint64_t)&off_1E328A100;
    byte_1EE335978 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335970;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

uint64_t WebCore::convertDictionary<WebCore::GPUVertexAttribute>(uint64_t a1, JSC::VM **a2, JSC::JSCell *this)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  JSC::VM *v16;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  char **v21;
  char **v22;
  int v23;
  WTF::StringImpl *v24;
  int v25;
  char v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  _BYTE v39[7];
  JSC::VM *v40[2];
  WTF::StringImpl *v41;

  v40[0] = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_9:
    v9 = "format";
    v10 = "GPUVertexFormat";
    v11 = (int)a2;
    v12 = 7;
    v13 = 16;
LABEL_10:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError(v11, (int)v40, v9, v12, "GPUVertexAttribute", 19, v10, v13);
    goto LABEL_11;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
LABEL_61:
    result = JSC::throwTypeError();
    goto LABEL_11;
  }
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v37);
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v7);
    else
      *(_DWORD *)v37 -= 2;
  }
  if (*((_DWORD *)v40[0] + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v40[0]);
    if ((_DWORD)result)
      goto LABEL_11;
  }
  if (v8 == 10)
    goto LABEL_9;
  v16 = a2[7];
  v40[1] = v16;
  v37 = (WTF::StringImpl *)v8;
  if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v37, (JSC::JSGlobalObject *)a2);
    v17 = (unsigned __int8 **)v41;
    goto LABEL_19;
  }
  v17 = *(unsigned __int8 ***)(v8 + 8);
  if ((v17 & 1) != 0)
  {
    v17 = *(unsigned __int8 ***)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a2);
    if (!v17)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (v17)
LABEL_17:
    *(_DWORD *)v17 += 2;
LABEL_18:
  v41 = (WTF::StringImpl *)v17;
LABEL_19:
  v36 = a1;
  if (v17)
  {
    v18 = v17[1];
    v19 = *((unsigned int *)v17 + 1) | ((unint64_t)((*((_DWORD *)v17 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v18 = 0;
    v19 = 0x100000000;
  }
  v20 = 31;
  v21 = &WebCore::parseEnumerationFromString<WebCore::GPUVertexFormat>(WTF::String const&)::mappings;
  do
  {
    v22 = &v21[3 * (v20 >> 1)];
    v23 = WTF::codePointCompare();
    if (v23 >= 0)
      v20 >>= 1;
    else
      v20 += ~(v20 >> 1);
    if (v23 < 0)
      v21 = v22 + 3;
  }
  while (v20);
  if (v21 == &WebCore::parseEnumerationFromString<WebCore::GPUVertexStepMode>(WTF::String const&)::mappings)
  {
    v26 = 0;
    v25 = 1;
    a1 = v36;
  }
  else
  {
    a1 = v36;
    if (WTF::operator==(v18, v19, (unsigned __int8 *)*v21, (uint64_t)v21[1]))
    {
      v25 = 0;
      v26 = *((_BYTE *)v21 + 16);
    }
    else
    {
      v26 = 0;
      v25 = 1;
    }
  }
  v27 = v41;
  v41 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v24);
    else
      *(_DWORD *)v27 -= 2;
  }
  if (*((_DWORD *)v16 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v16);
    if ((result & 1) != 0)
      goto LABEL_11;
  }
  if (v25)
    goto LABEL_61;
  WTF::AtomStringImpl::addLiteral();
  v28 = v37;
  v30 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v37);
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v29);
    else
      *(_DWORD *)v28 -= 2;
  }
  if (*((_DWORD *)v40[0] + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v40[0]);
    if ((_DWORD)result)
      goto LABEL_11;
  }
  if (v30 == 10)
  {
    v9 = "offset";
    v10 = "unsigned long long";
    v11 = (int)a2;
    v12 = 7;
    v13 = 19;
    goto LABEL_10;
  }
  result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>((WTF::StringImpl *)a2, v30, (uint64_t)&v37);
  if (v38)
    goto LABEL_11;
  v31 = v37;
  WTF::AtomStringImpl::addLiteral();
  v32 = v41;
  v34 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v41);
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v33);
    else
      *(_DWORD *)v32 -= 2;
  }
  if (*((_DWORD *)v40[0] + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v40[0]);
    if ((result & 1) != 0)
      goto LABEL_11;
  }
  if (v34 == 10)
  {
    v9 = "shaderLocation";
    v10 = "unsigned long";
    v11 = (int)a2;
    v12 = 15;
    v13 = 14;
    goto LABEL_10;
  }
  result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v34, &v41);
  v35 = (int)v41;
  v15 = (unint64_t)v41 >> 32;
  if (!((unint64_t)v41 >> 32))
  {
    *(_BYTE *)a1 = v26;
    *(_DWORD *)(a1 + 1) = *(_DWORD *)v39;
    *(_DWORD *)(a1 + 4) = *(_DWORD *)&v39[3];
    *(_QWORD *)(a1 + 8) = v31;
    *(_DWORD *)(a1 + 16) = v35;
    goto LABEL_12;
  }
LABEL_11:
  LODWORD(v15) = 1;
LABEL_12:
  *(_DWORD *)(a1 + 24) = v15;
  return result;
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSGainNode>::construct(WebCore::AudioNode **a1, uint64_t a2)
{
  WebCore::AudioNode *v4;
  uint64_t v5;
  uint64_t v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  JSCell *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::AudioNode *v15;
  uint64_t v16;
  BOOL v17;
  char **v18;
  BOOL v19;
  uint64_t v21;
  unint64_t v22;
  JSC::JSCell *v23;
  uint64_t Object;
  JSC::Structure *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  char v33;
  float v34;
  WebCore::JSDOMGlobalObject *v35;
  int v36;
  JSC::VM *v37;
  WebCore::AudioNode *v38;
  WebCore::AudioNode *v39;
  JSC::JSCell *v40;
  JSC::JSGlobalObject *v41;
  JSC::JSObject *v42;
  JSC::JSGlobalObject *v43;
  JSC::VM *v44;
  JSC::JSObject *v45;
  JSC::Structure *v46;
  JSC::VM *FunctionRealm;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char **v54;
  int v55;
  JSC::JSCell *v56;
  unint64_t Structure;
  JSC::Structure *v58;
  JSC::JSCell *v59;
  uint64_t v60;
  unint64_t SubclassStructure;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  WebCore::AudioNode *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  unint64_t v69;
  WebCore::AudioNode *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WebCore::AudioNode *v73;
  JSC::VM *v74;
  double v75;
  JSValue v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  JSValue v79;
  char hasExceptionsAfterHandlingTraps;
  char v81;
  uint64_t v82;
  double v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  char v87;
  char v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  WebCore::AudioNode *v92;
  WTF::StringImpl *v93;
  int v94;
  char v95;
  __int16 v96;
  char v97;
  float v98;
  int v99[2];
  WTF::StringImpl *v100;
  int v101;
  WebCore::AudioNode *v102;
  __int16 v103;
  char v104;
  __int16 v105;
  char v106;
  __int16 v107;
  char v108;
  WebCore::AudioNode *v109;

  v4 = a1[7];
  v102 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)a1);
  if (v6 && *(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194BA894CLL);
  }
  v11 = v6 - 192;
  if (!v6)
    v11 = 0;
  if ((*(_DWORD *)(*(_QWORD *)(v11 + 680) + 720) & 0x20) == 0)
  {
    JSC::throwTypeError();
    return 2;
  }
  v13 = *(int *)(a2 + 32);
  if ((_DWORD)v13 == 1)
  {
    v76.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)a1, v7);
    return JSC::VM::throwException(v4, (JSC::JSGlobalObject *)a1, v76);
  }
  v14 = *(_QWORD *)(a2 + 48);
  v15 = a1[7];
  v92 = v15;
  if ((v14 & 0xFFFE000000000002) != 0)
    goto LABEL_19;
  v16 = *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C);
  v17 = *(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) != 0;
  v18 = (char **)(16 * v16);
  if ((_DWORD)v16)
    v19 = v18 == &WebCore::JSBaseAudioContext::s_info;
  else
    v19 = 1;
  if (!v19)
  {
    do
    {
      v18 = (char **)v18[2];
      v17 = v18 != 0;
    }
    while (v18 != &WebCore::JSBaseAudioContext::s_info && v18 != 0);
  }
  if (!v17)
  {
LABEL_19:
    WebCore::throwArgumentTypeError((uint64_t)a1, (uint64_t)&v92, 0, "context", 8, "GainNode", 9, v8, 0, 0, "BaseAudioContext", 17);
    return 0;
  }
  v21 = *(_QWORD *)(v14 + 24);
  v22 = v13 - 3;
  v91 = v5;
  if (v22 < 0xFFFFFFFFFFFFFFFELL)
  {
    v23 = *(JSC::JSCell **)(a2 + 56);
    v109 = v15;
    LODWORD(v22) = v23 & 0xFFFFFFF7;
    if (((unint64_t)v23 & 0xFFFFFFFFFFFFFFF7) != 2)
    {
      v90 = v21;
      if (((unint64_t)v23 & 0xFFFE000000000002) == 0)
      {
        Object = JSC::JSCell::getObject(v23);
        if (Object)
        {
          v25 = (JSC::Structure *)Object;
          WTF::AtomStringImpl::addLiteral();
          v27 = JSC::JSObject::get(v25, (JSC::JSGlobalObject *)a1, (unint64_t)v92);
          if (v92)
          {
            if (*(_DWORD *)v92 == 2)
              WTF::StringImpl::destroy(v92, v26);
            else
              *(_DWORD *)v92 -= 2;
          }
          if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
            return 0;
          if (v27 == 10)
          {
            v89 = 0;
            v28 = 0;
          }
          else
          {
            WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)a1, v27, &v92);
            if (HIDWORD(v92))
              return 0;
            v28 = v92;
            v84 = v92 >> 8;
            v89 = 1;
          }
          WTF::AtomStringImpl::addLiteral();
          v63 = v92;
          v65 = JSC::JSObject::get(v25, (JSC::JSGlobalObject *)a1, (unint64_t)v92);
          if (v63)
          {
            if (*(_DWORD *)v63 == 2)
              WTF::StringImpl::destroy(v63, v64);
            else
              *(_DWORD *)v63 -= 2;
          }
          if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
            return 0;
          if (v65 == 10)
          {
            v88 = 0;
            LOBYTE(v31) = 0;
          }
          else
          {
            v92 = a1[7];
            v66 = v92;
            v31 = WebCore::parseEnumeration<WebCore::ChannelCountMode>((JSC::JSGlobalObject *)a1, v65);
            if (*((_DWORD *)v66 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v66) & 1) != 0)
              return 0;
            if ((v31 & 0xFF00000000) == 0)
              goto LABEL_94;
            v85 = v31 >> 8;
            v88 = 1;
          }
          WTF::AtomStringImpl::addLiteral();
          v67 = v92;
          v69 = JSC::JSObject::get(v25, (JSC::JSGlobalObject *)a1, (unint64_t)v92);
          if (v67)
          {
            if (*(_DWORD *)v67 == 2)
              WTF::StringImpl::destroy(v67, v68);
            else
              *(_DWORD *)v67 -= 2;
          }
          if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
            return 0;
          if (v69 == 10)
          {
            v87 = 0;
            LOBYTE(v29) = 0;
LABEL_74:
            WTF::AtomStringImpl::addLiteral();
            v71 = v92;
            v73 = (WebCore::AudioNode *)JSC::JSObject::get(v25, (JSC::JSGlobalObject *)a1, (unint64_t)v92);
            if (v71)
            {
              if (*(_DWORD *)v71 == 2)
                WTF::StringImpl::destroy(v71, v72);
              else
                *(_DWORD *)v71 -= 2;
            }
            v10 = v86;
            if (*((_DWORD *)v15 + 20))
            {
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v15);
              v10 = v86;
              if ((hasExceptionsAfterHandlingTraps & 1) != 0)
                return 0;
            }
            v34 = 1.0;
            if (v73 == (WebCore::AudioNode *)10)
            {
              v21 = v90;
              v32 = v88;
              v33 = v89;
              LODWORD(v22) = v84;
              v9 = v85;
              v30 = v87;
              goto LABEL_31;
            }
            v92 = v73;
            v74 = a1[7];
            *(_QWORD *)v99 = v74;
            if ((unint64_t)v73 >= 0xFFFE000000000000)
            {
              v75 = (double)(int)v73;
            }
            else if ((unint64_t)v73 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v92, (JSC::JSGlobalObject *)a1);
              v10 = v86;
            }
            else
            {
              *(_QWORD *)&v75 = (char *)v73 - 0x2000000000000;
            }
            if (!*((_DWORD *)v74 + 20)
              || (v83 = v75, v81 = JSC::VM::hasExceptionsAfterHandlingTraps(v74), v10 = v86, v75 = v83, (v81 & 1) == 0))
            {
              if ((*(_QWORD *)&v75 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
              {
                v21 = v90;
                v32 = v88;
                v33 = v89;
                v9 = v85;
                v30 = v87;
                if (v75 >= -3.40282347e38 && v75 <= 3.40282347e38)
                {
                  v34 = v75;
                  LODWORD(v22) = v84;
                  goto LABEL_31;
                }
              }
              JSC::throwTypeError();
            }
            return 0;
          }
          v92 = a1[7];
          v70 = v92;
          v29 = WebCore::parseEnumeration<WebCore::ChannelInterpretation>((JSC::JSGlobalObject *)a1, v69);
          if (*((_DWORD *)v70 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v70) & 1) != 0)
            return 0;
          if ((v29 & 0xFF00000000) != 0)
          {
            v86 = v29 >> 8;
            v87 = 1;
            goto LABEL_74;
          }
        }
      }
LABEL_94:
      JSC::throwTypeError();
      return 0;
    }
  }
  LOBYTE(v29) = 0;
  v30 = 0;
  LOBYTE(v31) = 0;
  v32 = 0;
  v28 = 0;
  v33 = 0;
  v34 = 1.0;
LABEL_31:
  *(_WORD *)((char *)&v92 + 5) = v107;
  HIBYTE(v92) = v108;
  *(_WORD *)((char *)&v93 + 5) = v105;
  HIBYTE(v93) = v106;
  v96 = v103;
  v97 = v104;
  LODWORD(v92) = v28 | ((_DWORD)v22 << 8);
  BYTE4(v92) = v33;
  LODWORD(v93) = v31 | (v9 << 8);
  BYTE4(v93) = v32;
  v94 = v29 | (v10 << 8);
  v95 = v30;
  v98 = v34;
  WebCore::GainNode::create((WebCore::BaseAudioContext *)(v21 - 32), (uint64_t)&v92, (uint64_t)v99);
  if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
  {
    v12 = 0;
    v36 = v101;
    goto LABEL_51;
  }
  v36 = v101;
  if (!v101)
  {
    v37 = *(JSC::VM **)(v91 + 40);
    v38 = *(WebCore::AudioNode **)v99;
    *(_QWORD *)v99 = 0;
    v92 = v38;
    if (*(uint64_t (***)(WebCore::AudioNode *__hidden))v38 != off_1E336A6D0)
    {
      __break(0xC471u);
      JUMPOUT(0x194BA8A34);
    }
    v12 = (JSCell *)WebCore::createWrapper<WebCore::GainNode,WebCore::GainNode>(v37, (uint64_t *)&v92, v35);
    v39 = v92;
    v92 = 0;
    if (v39)
      WebCore::AudioNode::deref(v39);
    goto LABEL_36;
  }
  if (v101 == 1)
  {
    v77 = (WTF::StringImpl *)LOBYTE(v99[0]);
    LOBYTE(v92) = v99[0];
    v78 = v100;
    v100 = 0;
    v93 = v78;
    if (!*((_QWORD *)v4 + 2))
    {
      v79.super.isa = (Class)WebCore::createDOMException((JSC *)a1, (JSC::JSGlobalObject *)LOBYTE(v99[0]), (JSC::JSGlobalObject *)&v93);
      JSC::VM::throwException(v4, (JSC::JSGlobalObject *)a1, v79);
      v78 = v93;
    }
    v93 = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, v77);
      else
        *(_DWORD *)v78 -= 2;
    }
    v12 = 0;
LABEL_36:
    if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    {
      v12 = 0;
      goto LABEL_52;
    }
    v40 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v40 & 0xFFFE000000000002) != 0)
      goto LABEL_50;
    v41 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v40);
    if (!v41)
      goto LABEL_50;
    v43 = v41;
    if (v41 == *(JSC::JSGlobalObject **)(a2 + 24))
      goto LABEL_50;
    v44 = a1[7];
    FunctionRealm = (JSC::VM *)JSC::getFunctionRealm((JSC *)a1, v41, v42);
    if (*((_DWORD *)v44 + 20))
    {
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v44) & 1) != 0)
        goto LABEL_50;
    }
    v48 = *((_QWORD *)FunctionRealm + 412);
    if (v48)
    {
      v49 = *(_DWORD *)(v48 - 8);
      v50 = ((unint64_t)&WebCore::JSGainNode::s_info + ~((_QWORD)&WebCore::JSGainNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSGainNode::s_info + ~((_QWORD)&WebCore::JSGainNode::s_info << 32)) >> 22);
      v51 = 9 * ((v50 + ~(v50 << 13)) ^ ((v50 + ~(v50 << 13)) >> 8));
      v52 = (v51 ^ (v51 >> 15)) + ~((v51 ^ (v51 >> 15)) << 27);
      v53 = v49 & ((v52 >> 31) ^ v52);
      v54 = *(char ***)(v48 + 16 * v53);
      if (v54 == &WebCore::JSGainNode::s_info)
      {
LABEL_46:
        v45 = *(JSC::JSObject **)(v48 + 16 * v53 + 8);
        if (v45)
        {
LABEL_48:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)a1, v43, v45, v46);
          if (!*((_DWORD *)v44 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v44) & 1) == 0)
            JSC::JSObject::setStructure(v12, v44, SubclassStructure);
LABEL_50:
          if (*((_DWORD *)v4 + 20))
          {
            if ((JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
              v12 = 0;
          }
LABEL_51:
          if (v36 == -1)
            return (uint64_t)v12;
LABEL_52:
          ((void (*)(WebCore::AudioNode **, int *))off_1E328B508[v36])(&v92, v99);
          return (uint64_t)v12;
        }
      }
      else
      {
        v55 = 1;
        while (v54)
        {
          v53 = ((_DWORD)v53 + v55) & v49;
          v54 = *(char ***)(v48 + 16 * v53);
          ++v55;
          if (v54 == &WebCore::JSGainNode::s_info)
            goto LABEL_46;
        }
      }
    }
    v56 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v44, FunctionRealm, v45);
    Structure = WebCore::JSGainNodePrototype::createStructure((uint64_t *)v44, (uint64_t)FunctionRealm, v56);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v59 = (JSC::JSCell *)WebCore::JSGainNodePrototype::create(v44, FunctionRealm, Structure, v58);
    v60 = WebCore::JSGainNode::createStructure((uint64_t *)v44, (uint64_t)FunctionRealm, v59);
    v45 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v60, (uint64_t)&WebCore::JSGainNode::s_info);
    goto LABEL_48;
  }
  v82 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::JSGainNode::analyzeHeap(v82);
}

uint64_t WebCore::JSGainNode::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSAudioNode::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGainNodePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGainNodePrototype::create(WebCore::JSGainNodePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSGainNode::s_info, (uint64_t)&WebCore::JSGainNodePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSGainNode>,(WebCore::DOMConstructorID)254>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2032);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioNode>,(WebCore::DOMConstructorID)237>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSGainNode>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSGainNode::s_info + ~((_QWORD)&WebCore::JSGainNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSGainNode::s_info + ~((_QWORD)&WebCore::JSGainNode::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSGainNode::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSGainNode::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSAudioNode::prototype((WebCore::JSAudioNode *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSGainNodePrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSGainNodePrototype::create((WebCore::JSGainNodePrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSGainNode::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSGainNode::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2032) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGainNodeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGainNodePrototype::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSGainNode>,(WebCore::DOMConstructorID)254>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsGainNode_gain(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::AudioParam>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 168));
}

uint64_t WebCore::JSGainNode::subspaceForImpl(WebCore::JSGainNode *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 2056);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 2056);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 2056);
    *(_QWORD *)(v8 + 2056) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 2056);
  *(_QWORD *)(v3 + 2056) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::createWrapper<WebCore::GainNode,WebCore::GainNode>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSAudioNode *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (!v6)
    goto LABEL_7;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSGainNode::s_info + ~((_QWORD)&WebCore::JSGainNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSGainNode::s_info + ~((_QWORD)&WebCore::JSGainNode::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSGainNode::s_info)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v13;
      if (v12 == &WebCore::JSGainNode::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_7:
    v15 = (WebCore::JSAudioNode *)*((_QWORD *)a1 + 7);
    v16 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v15, a1, a3);
    Structure = WebCore::JSGainNodePrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v19 = (JSC::JSCell *)WebCore::JSGainNodePrototype::create(v15, a1, Structure, v18);
    v20 = WebCore::JSGainNode::createStructure((uint64_t *)v15, (uint64_t)a1, v19);
    v14 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSGainNode::s_info);
  }
  v21 = WebCore::JSGainNode::create(v14, a1, a2);
  WebCore::cacheWrapper<WebCore::AnalyserNode,WebCore::JSAnalyserNode>(*((_QWORD *)a1 + 415), v5, v21);
  return v21;
}

uint64_t WebCore::wrap<WebCore::GainNode>(int a1, JSC::VM *a2, WebCore::AudioNode *this)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::JSDOMGlobalObject *v8;
  WebCore::AudioNode *v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::AudioNode *v17;
  int v18;
  WebCore::AudioNode *v19;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v11 = *(_QWORD *)(v5 + 32);
    if (!v11)
      goto LABEL_5;
    v12 = *(_DWORD *)(v11 - 8);
    v13 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = *(WebCore::AudioNode **)(v11 + 16 * v16);
    if (v17 != this)
    {
      v18 = 1;
      while (v17)
      {
        v16 = ((_DWORD)v16 + v18) & v12;
        v17 = *(WebCore::AudioNode **)(v11 + 16 * v16);
        ++v18;
        if (v17 == this)
          goto LABEL_14;
      }
      goto LABEL_5;
    }
LABEL_14:
    v6 = *(_QWORD *)(v11 + 16 * v16 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *((_QWORD *)this + 1);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    v7 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return v7;
  }
LABEL_5:
  WebCore::AudioNode::ref(this);
  v19 = this;
  if (*(uint64_t (***)(WebCore::AudioNode *__hidden))this == off_1E336A6D0)
  {
    v7 = WebCore::createWrapper<WebCore::GainNode,WebCore::GainNode>(a2, (uint64_t *)&v19, v8);
    v9 = v19;
    v19 = 0;
    if (v9)
      WebCore::AudioNode::deref(v9);
    return v7;
  }
  result = 257;
  __break(0xC471u);
  return result;
}

WebCore::Gamepad *WebCore::JSGamepad::destroy(WebCore::JSGamepad *this, JSC::JSCell *a2)
{
  WebCore::Gamepad *result;
  WTF *v4;
  void *v5;

  result = (WebCore::Gamepad *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::Gamepad::~Gamepad(result, a2);
      return (WebCore::Gamepad *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSGamepad::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGamepad::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  result = JSC::JSObject::visitChildren();
  v5 = *(_QWORD *)(a1 + 32);
  if ((v5 & 0xFFFE000000000002) == 0 && v5 != 0)
  {
    if ((v5 & 8) != 0)
    {
      if ((*(_BYTE *)(v5 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      v7 = v5 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v9 = v5 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
        v5 = v8;
        v7 = v9;
      }
      if (((*(_QWORD *)(v7 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (*(_QWORD *)(a2 + 168))
      return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WebCore::JSGamepad::visitChildren(WebCore::JSGamepad *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    result = JSC::JSObject::visitChildren();
    if ((*((_QWORD *)this + 4) & 0xFFFE000000000002) == 0)
      result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSGamepadPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGamepadPrototype::create(WebCore::JSGamepadPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  JSC::Structure *v18;
  int v19;
  unint64_t v21;
  WTF::StringImpl *v22[6];
  int v23;
  int v24;
  JSC::Structure *v25;
  int v26;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v21 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v21);
    *((_QWORD *)this + 4865) = SlowCase + (int)v21;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<9u>(this, (uint64_t)&WebCore::JSGamepad::s_info, (uint64_t)&WebCore::JSGamepadPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (v9 && *(_BYTE *)(v9 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194BA9F30);
  }
  v10 = v9 - 192;
  if (!v9)
    v10 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v10 + 680) + 704) & 0x400000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v11 = v22[0];
    v12 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v22[0]) = -1;
    WORD2(v22[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v12;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v13);
      else
        *(_DWORD *)v11 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v14 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = JSC::JSString::create((uint64_t)this, v22);
  v17 = v22[0];
  v22[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v26 = *(_DWORD *)SlowCase;
  v25 = v18;
  v19 = JSC::Structure::outOfLineCapacity(v18);
  v23 = 0;
  v24 = v19;
  v22[0] = (WTF::StringImpl *)&v24;
  v22[1] = (WTF::StringImpl *)SlowCase;
  v22[2] = this;
  v22[3] = (WTF::StringImpl *)&v26;
  v22[4] = (WTF::StringImpl *)&v25;
  v22[5] = (WTF::StringImpl *)&v23;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v18, this, v14, 6, (uint64_t)v22);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v23, v16);
  *((_DWORD *)v18 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGamepad>,(WebCore::DOMConstructorID)96>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 768);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGamepad>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGamepad::s_info + ~((_QWORD)&WebCore::JSGamepad::s_info << 32)) ^ (((unint64_t)&WebCore::JSGamepad::s_info + ~((_QWORD)&WebCore::JSGamepad::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGamepad::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGamepad::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGamepadPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGamepadPrototype::create((WebCore::JSGamepadPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGamepad::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGamepad::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 768) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGamepadConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGamepadPrototype::s_info != (char **)(16
                                                       * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGamepad>,(WebCore::DOMConstructorID)96>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGamepad_id(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

unint64_t WebCore::jsGamepad_index(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 24);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::jsGamepad_connected(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 28))
    return 7;
  else
    return 6;
}

unint64_t WebCore::jsGamepad_timestamp(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 32);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

uint64_t WebCore::jsGamepad_mapping(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsGamepad_axes(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  JSC::VM *v4;
  unsigned int v5;
  double *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  objc_class *v10;
  int v11;
  BOOL v12;
  JSValue v13;
  void *v14;
  JSC::VM *v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v19;
  WTF *v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  WTF *v24;
  _OWORD v25[4];
  uint64_t v26;
  JSC::VM *v27;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(JSC::VM **)(a1 + 56);
  v27 = v4;
  v22 = 0;
  v23 = 0x800000000;
  v24 = (WTF *)((char *)v25 + 8);
  v26 = 0;
  memset(v25, 0, sizeof(v25));
  v5 = *(_DWORD *)(v2 + 68);
  if (v5 >= 9)
  {
    v22 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v23) == 1;
    v5 = *(_DWORD *)(v2 + 68);
    if (v5)
    {
LABEL_3:
      v6 = *(double **)(v2 + 56);
      v7 = 8 * v5;
      do
      {
        v8 = *v6;
        if ((*(_QWORD *)v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v9 = (int)v8, v8 == (double)(int)v9)
          && ((_DWORD)v9 || (*(_QWORD *)&v8 & 0x8000000000000000) == 0))
        {
          v10 = (objc_class *)(v9 | 0xFFFE000000000000);
        }
        else
        {
          v10 = (objc_class *)(*(_QWORD *)&v8 + 0x2000000000000);
        }
        if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
          goto LABEL_36;
        v11 = v23;
        if ((_DWORD)v23 != HIDWORD(v23) && (v24 != (WTF *)((char *)v25 + 8) ? (v12 = v24 == 0) : (v12 = 1), v12))
        {
          *((_QWORD *)v24 + v23) = v10;
          LODWORD(v23) = v11 + 1;
        }
        else
        {
          v13.super.isa = v10;
          if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v23, v13) == 1)
            v22 = 1;
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (v5)
  {
    goto LABEL_3;
  }
  if (v22)
  {
    JSC::throwOutOfMemoryError();
  }
  else
  {
    v20 = v24;
    v21 = v23;
    v15 = *(JSC::VM **)(v3 + 56);
    if (!*((_DWORD *)v15 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) == 0)
    {
      v16 = JSC::constructArray();
      goto LABEL_28;
    }
  }
LABEL_36:
  v16 = 0;
LABEL_28:
  v17 = *(uint64_t **)&v25[0];
  if (*(_QWORD *)&v25[0])
  {
    v20 = (WTF *)&v23;
    v19 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v25[0], (uint64_t *)&v20);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v17, v19);
  }
  if (v24 != (WTF *)((char *)v25 + 8) && v24)
    WTF::fastFree(v24, v14);
  return v16;
}

uint64_t WebCore::jsGamepad_buttons(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  WTF **v5;
  WTF *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  WTF *v13;
  int v14;
  uint64_t v15;
  unint64_t SlowCase;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  int v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v28;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  void *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *Allocator;
  int v52;
  JSValue v53;
  void *v54;
  unint64_t v55;
  JSC::VM *v56;
  uint64_t v57;
  uint64_t *v58;
  _QWORD *v60;
  WTF **v61;
  JSC::VM *v62;
  WTF *v63;
  int v64;
  BOOL v65;
  uint64_t v66;
  WTF *v67;
  _OWORD v68[4];
  uint64_t v69;
  JSC::VM *v70;
  uint64_t v71[2];

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v62 = *(JSC::VM **)(a1 + 56);
  v70 = v62;
  v65 = 0;
  v66 = 0x800000000;
  v67 = (WTF *)((char *)v68 + 8);
  v69 = 0;
  memset(v68, 0, sizeof(v68));
  v4 = *(_DWORD *)(v2 + 84);
  if (v4 >= 9)
  {
    v65 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v66) == 1;
    v4 = *(_DWORD *)(v2 + 84);
    if (v4)
      goto LABEL_3;
  }
  else if (v4)
  {
LABEL_3:
    v5 = *(WTF ***)(v2 + 72);
    v61 = &v5[v4];
    while (1)
    {
      v6 = *v5;
      v7 = *(_QWORD *)(*(_QWORD *)(v3 + 3320) + 32);
      if (!v7)
        goto LABEL_12;
      v8 = *(_DWORD *)(v7 - 8);
      v9 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v8 & ((v11 >> 31) ^ v11);
      v13 = *(WTF **)(v7 + 16 * v12);
      if (v13 != v6)
        break;
LABEL_9:
      v15 = *(_QWORD *)(v7 + 16 * v12 + 8);
      if (!v15)
        goto LABEL_12;
      if ((*(_BYTE *)(v15 + 8) & 3) != 0)
        goto LABEL_12;
      SlowCase = *(_QWORD *)v15;
      if (!*(_QWORD *)v15)
        goto LABEL_12;
LABEL_54:
      if (*((_DWORD *)v62 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v62) & 1) != 0)
        goto LABEL_82;
      v52 = v66;
      if ((_DWORD)v66 == HIDWORD(v66) || v67 != (WTF *)((char *)v68 + 8) && v67)
      {
        v53.super.isa = (Class)SlowCase;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v66, v53) == 1)
          v65 = 1;
      }
      else
      {
        *((_QWORD *)v67 + v66) = SlowCase;
        LODWORD(v66) = v52 + 1;
      }
      if (++v5 == v61)
        goto LABEL_71;
    }
    v14 = 1;
    while (v13)
    {
      v12 = ((_DWORD)v12 + v14) & v8;
      v13 = *(WTF **)(v7 + 16 * v12);
      ++v14;
      if (v13 == v6)
        goto LABEL_9;
    }
LABEL_12:
    ++*(_DWORD *)v6;
    v17 = *(_QWORD *)(v3 + 3296);
    if (v17)
    {
      v18 = *(_DWORD *)(v17 - 8);
      v19 = ((unint64_t)&WebCore::JSGamepadButton::s_info + ~((_QWORD)&WebCore::JSGamepadButton::s_info << 32)) ^ (((unint64_t)&WebCore::JSGamepadButton::s_info + ~((_QWORD)&WebCore::JSGamepadButton::s_info << 32)) >> 22);
      v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
      v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
      v22 = v18 & ((v21 >> 31) ^ v21);
      v23 = *(char ***)(v17 + 16 * v22);
      if (v23 == &WebCore::JSGamepadButton::s_info)
      {
LABEL_17:
        v25 = *(_QWORD *)(v17 + 16 * v22 + 8);
        if (v25)
          goto LABEL_19;
      }
      else
      {
        v24 = 1;
        while (v23)
        {
          v22 = ((_DWORD)v22 + v24) & v18;
          v23 = *(char ***)(v17 + 16 * v22);
          ++v24;
          if (v23 == &WebCore::JSGamepadButton::s_info)
            goto LABEL_17;
        }
      }
    }
    v26 = *(uint64_t **)(v3 + 56);
    Structure = WebCore::JSGamepadButtonPrototype::createStructure(v26, v3, *(JSC::JSCell **)(v3 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v30 = (JSC::JSCell *)WebCore::JSGamepadButtonPrototype::create((WebCore::JSGamepadButtonPrototype *)v26, Structure, v28, v29);
    v31 = WebCore::JSGamepadButton::createStructure(v26, v3, v30);
    v25 = WebCore::cacheDOMStructure((JSCell *)v3, v31, (uint64_t)&WebCore::JSGamepadButton::s_info);
LABEL_19:
    v32 = *(_QWORD *)(v3 + 56);
    v33 = *(_QWORD *)(v32 + 41456);
    v34 = *(_QWORD *)(v33 + 23536);
    v35 = *(_QWORD **)(v34 + 800);
    if (v35)
      goto LABEL_39;
    v36 = *(_QWORD *)(v33 + 22648);
    if (__ldaxr((unsigned __int8 *)v36))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v36))
    {
      goto LABEL_24;
    }
    MEMORY[0x19AEA534C](v36);
LABEL_24:
    v38 = *(_QWORD *)(v36 + 2824);
    if (!*(_QWORD *)(v38 + 800))
    {
      v39 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v63, "IsoSpace T");
      v71[0] = 0;
      MEMORY[0x19AEA3204](v39, &v63, v32 + 192, v32 + 1872, 32, 8, v71);
      v41 = v71[0];
      v71[0] = 0;
      if (v41)
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
      v42 = v63;
      v63 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 1)
          WTF::fastFree(v42, v40);
        else
          --*(_DWORD *)v42;
      }
      v43 = *(_QWORD *)(v38 + 800);
      *(_QWORD *)(v38 + 800) = v39;
      if (v43)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    }
    v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v44 = *(_QWORD *)(v34 + 800);
    *(_QWORD *)(v34 + 800) = v35;
    if (v44)
    {
      v45 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v45, v46);
    }
    v47 = __ldxr((unsigned __int8 *)v36);
    if (v47 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v36))
      {
LABEL_39:
        SlowCase = v35[3];
        if (SlowCase >= v35[4])
        {
          SlowCase = v35[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
            goto LABEL_41;
          }
          v55 = *(_QWORD *)(SlowCase + 8) ^ v35[6];
          v35[4] = SlowCase + HIDWORD(v55);
          v35[5] = SlowCase + (int)v55;
        }
        v35[3] = SlowCase + 32;
LABEL_41:
        *(_DWORD *)SlowCase = 0;
        WebCore::JSDOMObject::JSDOMObject(SlowCase, v25);
        *(_QWORD *)(SlowCase + 24) = v6;
        if (*(_BYTE *)(v32 + 755))
          __dmb(0xAu);
        v48 = *(_QWORD *)(v3 + 3320);
        if ((byte_1EE335998 & 1) == 0)
        {
          qword_1EE335990 = (uint64_t)&off_1E328A160;
          byte_1EE335998 = 1;
        }
        v63 = v6;
        if ((SlowCase & 8) != 0)
          v49 = (SlowCase - 112) | 1;
        else
          v49 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v49 & 1) != 0)
          v50 = v49 + 47;
        else
          v50 = *(_QWORD *)v49 + 32;
        Allocator = *(_QWORD **)(v50 + 16);
        if (!Allocator)
          Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v50 + 16) = *Allocator;
        *Allocator = SlowCase;
        Allocator[1] = &qword_1EE335990;
        Allocator[2] = v48;
        v71[0] = (uint64_t)Allocator;
        JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v48 + 32), (uint64_t *)&v63, v71);
        if (v71[0])
          *(_QWORD *)(v71[0] + 8) = 3;
        goto LABEL_54;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v36);
    goto LABEL_39;
  }
LABEL_71:
  if (v65)
  {
    JSC::throwOutOfMemoryError();
  }
  else
  {
    v63 = v67;
    v64 = v66;
    v56 = *(JSC::VM **)(v3 + 56);
    if (!*((_DWORD *)v56 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v56) & 1) == 0)
    {
      v57 = JSC::constructArray();
      goto LABEL_74;
    }
  }
LABEL_82:
  v57 = 0;
LABEL_74:
  v58 = *(uint64_t **)&v68[0];
  if (*(_QWORD *)&v68[0])
  {
    v63 = (WTF *)&v66;
    v60 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v68[0], (uint64_t *)&v63);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v58, v60);
  }
  if (v67 != (WTF *)((char *)v68 + 8) && v67)
    WTF::fastFree(v67, v54);
  return v57;
}

unint64_t WebCore::jsGamepad_vibrationActuator(uint64_t a1, JSCell *a2)
{
  unint64_t SlowCase;
  JSC::VM *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  WTF *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  int v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v28;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  void *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *Allocator;
  uint64_t v52;
  unint64_t v54;
  JSC::VM *v55;
  _QWORD *v56;
  WTF *v57;

  SlowCase = *((_QWORD *)a2 + 4);
  if (SlowCase)
    return SlowCase;
  v5 = *(JSC::VM **)(a1 + 56);
  v6 = *(WTF **)(*((_QWORD *)a2 + 3) + 88);
  if (v6)
  {
    v7 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 3320) + 32);
    if (!v8)
      goto LABEL_11;
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(WTF **)(v8 + 16 * v13);
    if (v14 != v6)
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(WTF **)(v8 + 16 * v13);
        ++v15;
        if (v14 == v6)
          goto LABEL_8;
      }
LABEL_11:
      ++*((_DWORD *)v6 + 6);
      if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))v6 != &off_1E31FCDE8)
      {
        __break(0xC471u);
        JUMPOUT(0x194BAB26CLL);
      }
      v17 = *(_QWORD *)(v7 + 3296);
      if (v17)
      {
        v18 = *(_DWORD *)(v17 - 8);
        v19 = ((unint64_t)&WebCore::JSGamepadHapticActuator::s_info
             + ~((_QWORD)&WebCore::JSGamepadHapticActuator::s_info << 32)) ^ (((unint64_t)&WebCore::JSGamepadHapticActuator::s_info
                                                                             + ~((_QWORD)&WebCore::JSGamepadHapticActuator::s_info << 32)) >> 22);
        v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
        v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
        v22 = v18 & ((v21 >> 31) ^ v21);
        v23 = *(char ***)(v17 + 16 * v22);
        if (v23 == &WebCore::JSGamepadHapticActuator::s_info)
        {
LABEL_17:
          v25 = *(_QWORD *)(v17 + 16 * v22 + 8);
          if (v25)
            goto LABEL_19;
        }
        else
        {
          v24 = 1;
          while (v23)
          {
            v22 = ((_DWORD)v22 + v24) & v18;
            v23 = *(char ***)(v17 + 16 * v22);
            ++v24;
            if (v23 == &WebCore::JSGamepadHapticActuator::s_info)
              goto LABEL_17;
          }
        }
      }
      v26 = *(uint64_t **)(v7 + 56);
      Structure = WebCore::JSGamepadHapticActuatorPrototype::createStructure(v26, v7, *(JSC::JSCell **)(v7 + 656));
      *(_DWORD *)(Structure + 16) |= 0x80000u;
      v30 = (JSC::JSCell *)WebCore::JSGamepadHapticActuatorPrototype::create((WebCore::JSGamepadHapticActuatorPrototype *)v26, Structure, v28, v29);
      v31 = WebCore::JSGamepadHapticActuator::createStructure(v26, v7, v30);
      v25 = WebCore::cacheDOMStructure((JSCell *)v7, v31, (uint64_t)&WebCore::JSGamepadHapticActuator::s_info);
LABEL_19:
      v32 = *(_QWORD *)(v7 + 56);
      v33 = *(_QWORD *)(v32 + 41456);
      v34 = *(_QWORD *)(v33 + 23536);
      v35 = *(_QWORD **)(v34 + 816);
      if (v35)
        goto LABEL_40;
      v36 = *(_QWORD *)(v33 + 22648);
      v37 = __ldaxr((unsigned __int8 *)v36);
      v55 = v5;
      if (v37)
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v36))
      {
        goto LABEL_25;
      }
      MEMORY[0x19AEA534C](v36);
LABEL_25:
      v38 = *(_QWORD *)(v36 + 2824);
      if (!*(_QWORD *)(v38 + 816))
      {
        v39 = WTF::fastMalloc((WTF *)0xF8);
        WTF::CString::CString((WTF::CString *)&v57, "IsoSpace T");
        v56 = 0;
        MEMORY[0x19AEA3204](v39, &v57, v32 + 192, v32 + 1872, 32, 8, &v56);
        v41 = (uint64_t)v56;
        v56 = 0;
        if (v41)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
        v42 = v57;
        v57 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 1)
            WTF::fastFree(v42, v40);
          else
            --*(_DWORD *)v42;
        }
        v43 = *(_QWORD *)(v38 + 816);
        *(_QWORD *)(v38 + 816) = v39;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
      }
      v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
      JSC::GCClient::IsoSubspace::IsoSubspace();
      v44 = *(_QWORD *)(v34 + 816);
      *(_QWORD *)(v34 + 816) = v35;
      if (v44)
      {
        v45 = (WTF *)MEMORY[0x19AEA3528]();
        WTF::fastFree(v45, v46);
      }
      v47 = __ldxr((unsigned __int8 *)v36);
      v5 = v55;
      if (v47 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v36))
        {
LABEL_40:
          SlowCase = v35[3];
          if (SlowCase >= v35[4])
          {
            SlowCase = v35[5];
            if ((SlowCase & 1) != 0)
            {
              JSC::sanitizeStackForVM();
              SlowCase = JSC::LocalAllocator::allocateSlowCase();
              goto LABEL_42;
            }
            v54 = *(_QWORD *)(SlowCase + 8) ^ v35[6];
            v35[4] = SlowCase + HIDWORD(v54);
            v35[5] = SlowCase + (int)v54;
          }
          v35[3] = SlowCase + 32;
LABEL_42:
          *(_DWORD *)SlowCase = 0;
          WebCore::JSDOMObject::JSDOMObject(SlowCase, v25);
          *(_QWORD *)(SlowCase + 24) = v6;
          if (*(_BYTE *)(v32 + 755))
            __dmb(0xAu);
          v48 = *(_QWORD *)(v7 + 3320);
          if ((byte_1EE3359A8 & 1) == 0)
          {
            qword_1EE3359A0 = (uint64_t)&off_1E328A190;
            byte_1EE3359A8 = 1;
          }
          v57 = v6;
          if ((SlowCase & 8) != 0)
            v49 = (SlowCase - 112) | 1;
          else
            v49 = SlowCase & 0xFFFFFFFFFFFFC000;
          if ((v49 & 1) != 0)
            v50 = v49 + 47;
          else
            v50 = *(_QWORD *)v49 + 32;
          Allocator = *(_QWORD **)(v50 + 16);
          if (!Allocator)
            Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
          *(_QWORD *)(v50 + 16) = *Allocator;
          *Allocator = SlowCase;
          Allocator[1] = &qword_1EE3359A0;
          Allocator[2] = v48;
          v56 = Allocator;
          JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v48 + 32), (uint64_t *)&v57, (uint64_t *)&v56);
          if (v56)
            v56[1] = 3;
          goto LABEL_55;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v36);
      goto LABEL_40;
    }
LABEL_8:
    v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
    if (!v16)
      goto LABEL_11;
    if ((*(_BYTE *)(v16 + 8) & 3) != 0)
      goto LABEL_11;
    SlowCase = *(_QWORD *)v16;
    if (!*(_QWORD *)v16)
      goto LABEL_11;
  }
  else
  {
    SlowCase = 2;
  }
LABEL_55:
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  v52 = *(_QWORD *)(a1 + 56);
  *((_QWORD *)a2 + 4) = SlowCase;
  if ((SlowCase & 0xFFFE000000000002) == 0 && *(_DWORD *)(v52 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v52 + 192), a2);
  return SlowCase;
}

uint64_t WebCore::JSGamepadOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGamepadOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::Gamepad *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::Gamepad *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::Gamepad **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::Gamepad **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::Gamepad **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::Gamepad::~Gamepad(v3, a2);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::Gamepad>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSGamepad::s_info + ~((_QWORD)&WebCore::JSGamepad::s_info << 32)) ^ (((unint64_t)&WebCore::JSGamepad::s_info + ~((_QWORD)&WebCore::JSGamepad::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSGamepad::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSGamepad::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSGamepadPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGamepadPrototype::create((WebCore::JSGamepadPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSGamepad::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGamepad::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 792);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 792))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 40, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 792);
    *(_QWORD *)(v36 + 792) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 792);
  *(_QWORD *)(v32 + 792) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 48;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335988 & 1) == 0)
  {
    qword_1EE335980 = (uint64_t)&off_1E328A130;
    byte_1EE335988 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335980;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

WTF *WebCore::JSGamepadButton::destroy(WebCore::JSGamepadButton *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSGamepadButton::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGamepadButtonPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGamepadButtonPrototype::create(WebCore::JSGamepadButtonPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSGamepadButton::s_info, &WebCore::JSGamepadButtonPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGamepadButton>,(WebCore::DOMConstructorID)97>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 776);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGamepadButton>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGamepadButton::s_info + ~((_QWORD)&WebCore::JSGamepadButton::s_info << 32)) ^ (((unint64_t)&WebCore::JSGamepadButton::s_info + ~((_QWORD)&WebCore::JSGamepadButton::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGamepadButton::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGamepadButton::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGamepadButtonPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGamepadButtonPrototype::create((WebCore::JSGamepadButtonPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGamepadButton::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGamepadButton::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 776) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGamepadButtonConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGamepadButtonPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGamepadButton>,(WebCore::DOMConstructorID)97>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGamepadButton_pressed(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(_QWORD *)(a2 + 24) + 8) <= 0.1)
    return 6;
  else
    return 7;
}

unint64_t WebCore::jsGamepadButton_value(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 8);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

uint64_t WebCore::JSGamepadButtonOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSGamepadButtonOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
    return (_QWORD *)WTF::fastFree(v3, a2);
  --*(_DWORD *)v3;
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSGamepadEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  JSC::VM *v5;
  uint64_t v7;
  int v8;
  JSC::JSCell *v9;
  JSC::VM *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;
  uint64_t Object;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSC::VM *v17;
  double v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  JSC::VM *v22;
  double v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  JSC::VM *v27;
  double v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  void *v32;
  WebCore::JSDOMGlobalObject *v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  JSC::VM *v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char **v47;
  int v48;
  unint64_t v49;
  WebCore::JSEvent *v50;
  JSC::JSCell *v51;
  unint64_t Structure;
  JSC::Structure *v53;
  JSC::JSCell *v54;
  uint64_t v55;
  JSCell *v56;
  JSC::JSCell *v57;
  JSC::JSGlobalObject *v58;
  JSC::JSObject *v59;
  JSC::JSGlobalObject *v60;
  JSC::VM *v61;
  JSC::JSObject *v62;
  JSC::Structure *v63;
  JSC::VM *FunctionRealm;
  uint64_t v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char **v71;
  int v72;
  JSC::JSCell *v73;
  unint64_t v74;
  JSC::Structure *v75;
  JSC::JSCell *v76;
  uint64_t v77;
  unint64_t SubclassStructure;
  _DWORD *v79;
  uint64_t v80;
  uint64_t v82;
  _BOOL4 v83;
  uint64_t v84;
  WTF *v86;
  void *v87;
  JSValue v88;
  BOOL v89;
  int v90;
  uint64_t v91;
  int *v92;
  int v93;
  BOOL v94;
  int v95;
  uint64_t v96;
  int *v97;
  int v98;
  BOOL v99;
  int v100;
  uint64_t v101;
  int *v102;
  int v103;
  JSC::VM *v104;
  _BYTE v105[8];
  uint64_t v106;
  int v107;
  WTF::StringImpl *v108;
  int v109;
  JSC::VM *v110;
  unint64_t v111;

  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v88.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v5, a1, v88);
  }
  v7 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v108);
  v8 = v109;
  if (v109)
  {
    v56 = 0;
    goto LABEL_93;
  }
  v104 = v5;
  if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v10 = 0;
    goto LABEL_48;
  }
  v9 = *(JSC::JSCell **)(a2 + 56);
  v10 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v110 = v10;
  if (((unint64_t)v9 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)v9 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v9)) == 0)
    {
LABEL_105:
      JSC::throwTypeError();
LABEL_106:
      v56 = 0;
      v80 = 1;
      v107 = 1;
      goto LABEL_92;
    }
    v2 = Object;
    WTF::AtomStringImpl::addLiteral();
    v15 = (WTF::StringImpl *)v111;
    v3 = JSC::JSObject::get((JSC::Structure *)v2, a1, v111);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
      goto LABEL_106;
    if (v3 == 10)
    {
      v11 = 0;
      goto LABEL_20;
    }
    v17 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v3 >= 0xFFFE000000000000)
      goto LABEL_142;
    *(_QWORD *)&v18 = v3 - 0x2000000000000;
    if (v3 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v18 <= 0.0)
      {
        v11 = v18 < 0.0;
        goto LABEL_19;
      }
    }
    else
    {
      if ((v3 & 0xFFFE000000000002) != 0)
      {
        v11 = v3 == 7;
        goto LABEL_19;
      }
      v90 = *(unsigned __int8 *)(v3 + 5);
      if (v90 == 3)
      {
        v93 = *(_DWORD *)(v3 + 8);
LABEL_170:
        v89 = v93 == 0;
        goto LABEL_182;
      }
      if (v90 == 2)
      {
        v91 = *(_QWORD *)(v3 + 8);
        if ((v91 & 1) != 0)
          v92 = (int *)(v3 + 16);
        else
          v92 = (int *)(v91 + 4);
        v93 = *v92;
        goto LABEL_170;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v89 = *(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        goto LABEL_182;
      }
    }
    v11 = 1;
    goto LABEL_19;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
LABEL_47:
  v10 = 0;
LABEL_48:
  while (1)
  {
    v105[0] = v11;
    v105[1] = v12;
    v105[2] = v13;
    v107 = 0;
    if (!v109)
      break;
    v17 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_142:
    v89 = (_DWORD)v3 == 0;
LABEL_182:
    v11 = !v89;
LABEL_19:
    if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
      goto LABEL_106;
LABEL_20:
    WTF::AtomStringImpl::addLiteral();
    v19 = (WTF::StringImpl *)v111;
    v21 = JSC::JSObject::get((JSC::Structure *)v2, a1, v111);
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v20);
      else
        *(_DWORD *)v19 -= 2;
    }
    if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
      goto LABEL_106;
    if (v21 == 10)
    {
      v12 = 0;
      goto LABEL_31;
    }
    v22 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v21 >= 0xFFFE000000000000)
    {
      v94 = (_DWORD)v21 == 0;
      goto LABEL_186;
    }
    *(_QWORD *)&v23 = v21 - 0x2000000000000;
    if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v21 & 0xFFFE000000000002) != 0)
      {
        v12 = v21 == 7;
        goto LABEL_30;
      }
      v95 = *(unsigned __int8 *)(v21 + 5);
      if (v95 == 3)
      {
        v98 = *(_DWORD *)(v21 + 8);
      }
      else
      {
        if (v95 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_176:
            v12 = 1;
            goto LABEL_30;
          }
          v94 = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_186;
        }
        v96 = *(_QWORD *)(v21 + 8);
        if ((v96 & 1) != 0)
          v97 = (int *)(v21 + 16);
        else
          v97 = (int *)(v96 + 4);
        v98 = *v97;
      }
      v94 = v98 == 0;
LABEL_186:
      v12 = !v94;
      goto LABEL_30;
    }
    if (v23 > 0.0)
      goto LABEL_176;
    v12 = v23 < 0.0;
LABEL_30:
    if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
      goto LABEL_106;
LABEL_31:
    WTF::AtomStringImpl::addLiteral();
    v24 = (WTF::StringImpl *)v111;
    v26 = JSC::JSObject::get((JSC::Structure *)v2, a1, v111);
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v25);
      else
        *(_DWORD *)v24 -= 2;
    }
    if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
      goto LABEL_106;
    if (v26 == 10)
    {
      v13 = 0;
      goto LABEL_42;
    }
    v27 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v26 >= 0xFFFE000000000000)
    {
      v99 = (_DWORD)v26 == 0;
      goto LABEL_190;
    }
    *(_QWORD *)&v28 = v26 - 0x2000000000000;
    if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v26 & 0xFFFE000000000002) != 0)
      {
        v13 = v26 == 7;
        goto LABEL_41;
      }
      v100 = *(unsigned __int8 *)(v26 + 5);
      if (v100 == 3)
      {
        v103 = *(_DWORD *)(v26 + 8);
      }
      else
      {
        if (v100 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_180:
            v13 = 1;
            goto LABEL_41;
          }
          v99 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_190;
        }
        v101 = *(_QWORD *)(v26 + 8);
        if ((v101 & 1) != 0)
          v102 = (int *)(v26 + 16);
        else
          v102 = (int *)(v101 + 4);
        v103 = *v102;
      }
      v99 = v103 == 0;
LABEL_190:
      v13 = !v99;
      goto LABEL_41;
    }
    if (v28 > 0.0)
      goto LABEL_180;
    v13 = v28 < 0.0;
LABEL_41:
    if (*((_DWORD *)v27 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
      goto LABEL_106;
LABEL_42:
    WTF::AtomStringImpl::addLiteral();
    v3 = v111;
    v2 = JSC::JSObject::get((JSC::Structure *)v2, a1, v111);
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v3, v29);
      else
        *(_DWORD *)v3 -= 2;
    }
    if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
      goto LABEL_106;
    if ((v2 | 8) == 0xA)
      goto LABEL_47;
    v111 = *((_QWORD *)a1 + 7);
    if ((v2 & 0xFFFE000000000002) != 0)
      goto LABEL_105;
    v82 = *(unsigned int *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x4C);
    v83 = *(_DWORD *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x4C) != 0;
    if ((_DWORD)v82)
    {
      v84 = 16 * v82;
      if ((char **)v84 != &WebCore::JSGamepad::s_info)
      {
        do
        {
          v84 = *(_QWORD *)(v84 + 16);
          v83 = v84 != 0;
        }
        while ((char **)v84 != &WebCore::JSGamepad::s_info && v84 != 0);
      }
    }
    if (!v83)
      goto LABEL_105;
    v10 = *(JSC::VM **)(v2 + 24);
    if (!v10)
      goto LABEL_105;
    ++*(_DWORD *)v10;
  }
  v30 = v108;
  v108 = 0;
  v106 = 0;
  v31 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v31);
  *(_QWORD *)(v31 + 8) = 0;
  if (v12)
    v35 = 4;
  else
    v35 = 0;
  if (v13)
    v36 = 8;
  else
    v36 = 0;
  if (v11)
    v37 = 425986;
  else
    v37 = 425984;
  v38 = v37 | v35 | v36 | (v30 != 0) | *(_DWORD *)(v31 + 20) & 0xFFC00000;
  *(_DWORD *)(v31 + 16) = 1;
  *(_DWORD *)(v31 + 20) = v38;
  if (v30)
  {
    *(_DWORD *)v30 += 2;
    v38 = *(_DWORD *)(v31 + 20);
  }
  *(_QWORD *)(v31 + 24) = v30;
  *(_QWORD *)(v31 + 32) = 0;
  *(_QWORD *)(v31 + 40) = 0;
  *(_QWORD *)(v31 + 48) = 0;
  *(_QWORD *)(v31 + 56) = v34;
  *(_QWORD *)(v31 + 64) = 0;
  *(_DWORD *)(v31 + 20) = v38 | 0x4000;
  *(_QWORD *)v31 = off_1E31FCB80;
  if (v10)
  {
    v39 = (*(_DWORD *)v10)++;
    *(_QWORD *)(v31 + 72) = v10;
    v111 = v31;
    if (v39)
    {
      *(_DWORD *)v10 = v39;
    }
    else
    {
      WebCore::Gamepad::~Gamepad(v10, v32);
      WTF::fastFree(v86, v87);
    }
  }
  else
  {
    *(_QWORD *)(v31 + 72) = 0;
    v111 = v31;
  }
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v32);
    else
      *(_DWORD *)v30 -= 2;
  }
  if (*(void (***)(WebCore::GamepadEvent *__hidden))v31 != off_1E31FCB80)
  {
    __break(0xC471u);
    JUMPOUT(0x194BACBA8);
  }
  v40 = *(JSC::VM **)(v7 + 40);
  v41 = *((_QWORD *)v40 + 412);
  if (!v41)
    goto LABEL_73;
  v42 = *(_DWORD *)(v41 - 8);
  v43 = ((unint64_t)&WebCore::JSGamepadEvent::s_info + ~((_QWORD)&WebCore::JSGamepadEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSGamepadEvent::s_info + ~((_QWORD)&WebCore::JSGamepadEvent::s_info << 32)) >> 22);
  v44 = 9 * ((v43 + ~(v43 << 13)) ^ ((v43 + ~(v43 << 13)) >> 8));
  v45 = (v44 ^ (v44 >> 15)) + ~((v44 ^ (v44 >> 15)) << 27);
  v46 = v42 & ((v45 >> 31) ^ v45);
  v47 = *(char ***)(v41 + 16 * v46);
  if (v47 == &WebCore::JSGamepadEvent::s_info)
  {
LABEL_72:
    v49 = *(_QWORD *)(v41 + 16 * v46 + 8);
    if (!v49)
      goto LABEL_73;
  }
  else
  {
    v48 = 1;
    while (v47)
    {
      v46 = ((_DWORD)v46 + v48) & v42;
      v47 = *(char ***)(v41 + 16 * v46);
      ++v48;
      if (v47 == &WebCore::JSGamepadEvent::s_info)
        goto LABEL_72;
    }
LABEL_73:
    v50 = (WebCore::JSEvent *)*((_QWORD *)v40 + 7);
    v51 = (JSC::JSCell *)WebCore::JSEvent::prototype(v50, *(JSC::VM **)(v7 + 40), v33);
    Structure = WebCore::JSGamepadEventPrototype::createStructure((uint64_t *)v50, (uint64_t)v40, v51);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v54 = (JSC::JSCell *)WebCore::JSGamepadEventPrototype::create(v50, v40, Structure, v53);
    v55 = WebCore::JSGamepadEvent::createStructure((uint64_t *)v50, (uint64_t)v40, v54);
    v49 = WebCore::cacheDOMStructure((JSCell *)v40, v55, (uint64_t)&WebCore::JSGamepadEvent::s_info);
  }
  v56 = (JSCell *)WebCore::JSGamepadEvent::create(v49, v40, (uint64_t *)&v111);
  WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v40 + 415), v31, (uint64_t)v56);
  v57 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v57 & 0xFFFE000000000002) == 0)
  {
    v58 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v57);
    if (v58)
    {
      v60 = v58;
      if (v58 != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v61 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v58, v59);
        if (!*((_DWORD *)v61 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v61) & 1) == 0)
        {
          v65 = *((_QWORD *)FunctionRealm + 412);
          if (v65)
          {
            v66 = *(_DWORD *)(v65 - 8);
            v67 = ((unint64_t)&WebCore::JSGamepadEvent::s_info + ~((_QWORD)&WebCore::JSGamepadEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSGamepadEvent::s_info + ~((_QWORD)&WebCore::JSGamepadEvent::s_info << 32)) >> 22);
            v68 = 9 * ((v67 + ~(v67 << 13)) ^ ((v67 + ~(v67 << 13)) >> 8));
            v69 = (v68 ^ (v68 >> 15)) + ~((v68 ^ (v68 >> 15)) << 27);
            v70 = v66 & ((v69 >> 31) ^ v69);
            v71 = *(char ***)(v65 + 16 * v70);
            if (v71 == &WebCore::JSGamepadEvent::s_info)
            {
LABEL_83:
              v62 = *(JSC::JSObject **)(v65 + 16 * v70 + 8);
              if (v62)
              {
LABEL_85:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v60, v62, v63);
                if (!*((_DWORD *)v61 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v61) & 1) == 0)
                  JSC::JSObject::setStructure(v56, v61, SubclassStructure);
                goto LABEL_87;
              }
            }
            else
            {
              v72 = 1;
              while (v71)
              {
                v70 = ((_DWORD)v70 + v72) & v66;
                v71 = *(char ***)(v65 + 16 * v70);
                ++v72;
                if (v71 == &WebCore::JSGamepadEvent::s_info)
                  goto LABEL_83;
              }
            }
          }
          v73 = (JSC::JSCell *)WebCore::JSEvent::prototype(v61, FunctionRealm, v62);
          v74 = WebCore::JSGamepadEventPrototype::createStructure((uint64_t *)v61, (uint64_t)FunctionRealm, v73);
          *(_DWORD *)(v74 + 16) |= 0x80000u;
          v76 = (JSC::JSCell *)WebCore::JSGamepadEventPrototype::create(v61, FunctionRealm, v74, v75);
          v77 = WebCore::JSGamepadEvent::createStructure((uint64_t *)v61, (uint64_t)FunctionRealm, v76);
          v62 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v77, (uint64_t)&WebCore::JSGamepadEvent::s_info);
          goto LABEL_85;
        }
      }
    }
  }
LABEL_87:
  if (*((_DWORD *)v104 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v104) & 1) != 0)
    v56 = 0;
  v79 = (_DWORD *)v111;
  v111 = 0;
  if (v79)
  {
    if (v79[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v79 + 8))(v79);
    else
      --v79[4];
  }
  v80 = 0;
LABEL_92:
  ((void (*)(unint64_t *, _BYTE *))off_1E328B748[v80])(&v111, v105);
  v8 = v109;
LABEL_93:
  if (v8 != -1)
    ((void (*)(_BYTE *, WTF::StringImpl **))off_1E328B3D8[v8])(v105, &v108);
  return v56;
}

uint64_t WebCore::JSGamepadEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGamepadEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGamepadEventPrototype::create(WebCore::JSGamepadEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSGamepadEvent::s_info, (uint64_t)&WebCore::JSGamepadEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSGamepadEvent>,(WebCore::DOMConstructorID)98>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 784);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSGamepadEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSGamepadEvent::s_info + ~((_QWORD)&WebCore::JSGamepadEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSGamepadEvent::s_info + ~((_QWORD)&WebCore::JSGamepadEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSGamepadEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSGamepadEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSGamepadEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSGamepadEventPrototype::create((WebCore::JSGamepadEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSGamepadEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSGamepadEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 784) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGamepadEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGamepadEventPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSGamepadEvent>,(WebCore::DOMConstructorID)98>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsGamepadEvent_gamepad(uint64_t a1, uint64_t a2)
{
  WTF *v2;

  v2 = *(WTF **)(*(_QWORD *)(a2 + 24) + 72);
  if (v2)
    return WebCore::wrap<WebCore::Gamepad>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

uint64_t WebCore::JSGamepadEvent::subspaceForImpl(WebCore::JSGamepadEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 808);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 808))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 808);
    *(_QWORD *)(v8 + 808) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 808);
  *(_QWORD *)(v3 + 808) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::GamepadHapticActuator::Result>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::GamepadHapticActuator::Result)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::GamepadHapticActuator::Result)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::GamepadHapticActuator::Result)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::GamepadHapticActuator::Result)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F4698 = &WebCore::convertEnumerationToString(WebCore::GamepadHapticActuator::Result)::$_1::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::GamepadHapticActuator::Result)::values[a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

_DWORD *WebCore::JSGamepadHapticActuator::destroy(WebCore::JSGamepadHapticActuator *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

uint64_t WebCore::JSGamepadHapticActuator::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGamepadHapticActuatorPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGamepadHapticActuatorPrototype::create(WebCore::JSGamepadHapticActuatorPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSGamepadHapticActuator::s_info, &WebCore::JSGamepadHapticActuatorPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGamepadHapticActuator>,(WebCore::DOMConstructorID)99>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 792);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGamepadHapticActuator>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGamepadHapticActuator::s_info
         + ~((_QWORD)&WebCore::JSGamepadHapticActuator::s_info << 32)) ^ (((unint64_t)&WebCore::JSGamepadHapticActuator::s_info
                                                                         + ~((_QWORD)&WebCore::JSGamepadHapticActuator::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGamepadHapticActuator::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGamepadHapticActuator::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGamepadHapticActuatorPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGamepadHapticActuatorPrototype::create((WebCore::JSGamepadHapticActuatorPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGamepadHapticActuator::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGamepadHapticActuator::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 792) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGamepadHapticActuatorConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGamepadHapticActuatorPrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGamepadHapticActuator>,(WebCore::DOMConstructorID)99>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGamepadHapticActuator_type(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 48);
  if ((byte_1EE3358EA & 1) == 0)
  {
    dword_1ECE78950 += 2;
    byte_1EE3358EA = 1;
    qword_1EE3359F0 = (uint64_t)&dword_1ECE78950;
    dword_1ECE78970 += 2;
    qword_1EE3359F8 = (uint64_t)&dword_1ECE78970;
  }
  v5 = *(_QWORD *)&_MergedGlobals_677[8 * v4 + 264];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::JSGamepadHapticActuatorOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[1];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[2] || (result = (*(uint64_t (**)(_QWORD *))(*v5 + 64))(v5), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

_QWORD *WebCore::JSGamepadHapticActuatorOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[6];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[6] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  --v3[6];
  return result;
}

uint64_t WebCore::parseEnumeration<WebCore::GamepadHapticEffectType>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  int v9;
  __int32 v10;
  char **v13;
  uint64_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v18;
  uint16x8_t v19;
  uint64_t v21;
  unint64_t v22;

  v3 = a1;
  v22 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
        return 0;
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v22, a1);
  v4 = v21;
  if (!v21)
    return 0;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "dual-rumble" && v7 == 11)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 100 || *(_QWORD *)(v6 + 1) != 0x626D75722D6C6175 || *(_QWORD *)(v6 + 3) != 0x656C626D75722D6CLL)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 100)
        goto LABEL_16;
      v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968BFF10);
      v15.i16[0] = vminvq_u16(v15);
      v10 = v15.i32[0];
      if (!v15.i32[0])
        goto LABEL_49;
      v16 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 6), (int16x8_t)xmmword_1968BFF20);
      v16.i16[0] = vminvq_u16(v16);
      v9 = v16.i32[0];
      if (!v16.i32[0])
        goto LABEL_17;
    }
LABEL_39:
    v13 = &WebCore::parseEnumerationFromString<WebCore::GamepadHapticEffectType>(WTF::String const&)::mappings;
    goto LABEL_40;
  }
  if (v6 == "dual-rumble" && v7 == 11)
    goto LABEL_39;
  if (v6 == "trigger-rumble" || v7 != 14)
  {
    if (v7 != 14 || v6 != "trigger-rumble")
      goto LABEL_16;
    goto LABEL_31;
  }
  if ((v5 & 4) != 0)
  {
    if (*v6 == 116 && *(_QWORD *)(v6 + 1) == 0x722D726567676972 && *(_QWORD *)(v6 + 6) == 0x656C626D75722D72)
    {
LABEL_31:
      v13 = &off_1E3287C68;
LABEL_40:
      v10 = *((unsigned __int8 *)v13 + 16);
      v9 = 1;
      goto LABEL_41;
    }
LABEL_16:
    v9 = 0;
LABEL_17:
    v10 = 0;
    goto LABEL_41;
  }
  if (*(_WORD *)v6 != 116)
    goto LABEL_16;
  v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968BFF30);
  v18.i16[0] = vminvq_u16(v18);
  v10 = v18.i32[0];
  if (v18.i32[0])
  {
    v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 12), (int16x8_t)xmmword_1968BFF40);
    v19.i16[0] = vminvq_u16(v19);
    v9 = v19.i32[0];
    if (!v19.i32[0])
      goto LABEL_17;
    goto LABEL_31;
  }
LABEL_49:
  v9 = 0;
LABEL_41:
  v14 = v10 | (v9 << 8);
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v14;
}

BOOL WebCore::JSDOMConstructorNotConstructable<WebCore::JSGeolocation>::initializeProperties(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSGeolocation>((WebCore::JSGeolocation *)a2, a3);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
}

uint64_t WebCore::JSGeolocation::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGeolocation>,(WebCore::DOMConstructorID)100>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 800);
  if (!result)
  {
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSGeolocation>::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 664));
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSGeolocation>::create(a1, Structure, (JSC::JSCell **)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 800) = result;
    if (result)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v6 = (JSC::Heap *)(a1 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)a2);
        return v7;
      }
    }
  }
  return result;
}

void WebCore::JSGeolocation::~JSGeolocation(WebCore::JSGeolocation *this)
{
  WebCore::Geolocation *v2;
  bmalloc::api *v3;
  void *v4;

  v2 = (WebCore::Geolocation *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (*((_DWORD *)v2 + 8) == 1)
    {
      WebCore::Geolocation::~Geolocation(v2);
      bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)v2 + 8);
    }
  }
}

unint64_t WebCore::jsGeolocationConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGeolocationPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGeolocation>,(WebCore::DOMConstructorID)100>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSGeolocationOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  WTF::ConcurrentPtrHashSet *v13;
  _DWORD *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  uint64_t result;
  void *v23;

  v7 = *a2;
  v8 = *(_QWORD **)(*a2 + 24);
  v9 = v8[1];
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      if (!*(_BYTE *)(v10 + 180))
      {
        if (v8[2] || ((*(uint64_t (**)(_QWORD *))(*v8 + 64))(v8) & 1) != 0)
        {
          if (a5)
          {
            *a5 = "ActiveDOMObject with pending activity";
            a5[1] = 38;
          }
          return 1;
        }
        v8 = *(_QWORD **)(v7 + 24);
      }
    }
  }
  v11 = v8[6];
  if (!v11)
    return 0;
  v12 = *(void **)(v11 + 8);
  if (!v12)
    return 0;
  if (a5)
  {
    *a5 = "Reachable from Navigator";
    a5[1] = 25;
  }
  v13 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v14 = (_DWORD *)*((_QWORD *)v13 + 6);
  if ((_DWORD *)((char *)v13 + 56) != v14)
  {
    v15 = v14[1];
    v16 = ((unint64_t)v12 + ~((_QWORD)v12 << 32)) ^ (((unint64_t)v12 + ~((_QWORD)v12 << 32)) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = v19;
    while (1)
    {
      v21 = *(void **)&v14[2 * v20 + 4];
      if (!v21)
        return 0;
      if (v12 == v21)
        goto LABEL_22;
      v20 = (v20 + 1) & v15;
      if (v20 == v19)
      {
        __break(0xC471u);
        JUMPOUT(0x194BAEC1CLL);
      }
    }
  }
  v23 = v12;
  result = WTF::ConcurrentPtrHashSet::containsImplSlow(v13, v12);
  v12 = v23;
  if ((_DWORD)result)
  {
LABEL_22:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v12);
    return 1;
  }
  return result;
}

WebCore::Geolocation **WebCore::JSGeolocationOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore::Geolocation *v3;
  _DWORD *v4;
  WebCore::Geolocation *v6;

  v3 = *(WebCore::Geolocation **)(*(_QWORD *)a2 + 24);
  ++*((_DWORD *)v3 + 8);
  v6 = v3;
  v4 = (_DWORD *)((char *)v3 + 24);
  if (!v3)
    v4 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    JSC::weakRemove<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,WebCore::JSBlob *>((uint64_t *)(a3 + 32), (uint64_t)v3);
  }
  else if (*(_QWORD *)v4)
  {
    *(_QWORD *)(*(_QWORD *)v4 + 8) = 3;
    *(_QWORD *)v4 = 0;
  }
  return WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>::~Ref(&v6);
}

WebCore::Geolocation **WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>::~Ref(WebCore::Geolocation **a1)
{
  WebCore::Geolocation *v2;
  bmalloc::api *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_DWORD *)v2 + 8) == 1)
    {
      WebCore::Geolocation::~Geolocation(v2);
      bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*((_DWORD *)v2 + 8);
    }
  }
  return a1;
}

uint64_t WebCore::createWrapper<WebCore::Geolocation,WebCore::Geolocation>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = WebCore::getDOMStructure<WebCore::JSGeolocation>(*(WebCore::JSGeolocation **)(a1 + 56), (JSC::JSCell **)a1);
  v6 = WebCore::JSGeolocation::create(v5, (JSC::VM *)a1, a2);
  WebCore::cacheWrapper<WebCore::Geolocation,WebCore::JSGeolocation>(*(_QWORD *)(a1 + 3320), v4, v6);
  return v6;
}

WTF *WebCore::JSGeolocationCoordinates::destroy(WebCore::JSGeolocationCoordinates *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSGeolocationCoordinates::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGeolocationCoordinatesPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGeolocationCoordinatesPrototype::create(WebCore::JSGeolocationCoordinatesPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  JSC::Structure *v18;
  int v19;
  unint64_t v21;
  WTF::StringImpl *v22[6];
  int v23;
  int v24;
  JSC::Structure *v25;
  int v26;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v21 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v21);
    *((_QWORD *)this + 4865) = SlowCase + (int)v21;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<10u>(this, (uint64_t)&WebCore::JSGeolocationCoordinates::s_info, (uint64_t)&WebCore::JSGeolocationCoordinatesPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (v9 && *(_BYTE *)(v9 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194BAF338);
  }
  v10 = v9 - 192;
  if (!v9)
    v10 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v10 + 680) + 680) & 0x1000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v11 = v22[0];
    v12 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v22[0]) = -1;
    WORD2(v22[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v12;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v13);
      else
        *(_DWORD *)v11 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v14 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = JSC::JSString::create((uint64_t)this, v22);
  v17 = v22[0];
  v22[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v26 = *(_DWORD *)SlowCase;
  v25 = v18;
  v19 = JSC::Structure::outOfLineCapacity(v18);
  v23 = 0;
  v24 = v19;
  v22[0] = (WTF::StringImpl *)&v24;
  v22[1] = (WTF::StringImpl *)SlowCase;
  v22[2] = this;
  v22[3] = (WTF::StringImpl *)&v26;
  v22[4] = (WTF::StringImpl *)&v25;
  v22[5] = (WTF::StringImpl *)&v23;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v18, this, v14, 6, (uint64_t)v22);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v23, v16);
  *((_DWORD *)v18 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGeolocationCoordinates>,(WebCore::DOMConstructorID)101>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 808);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGeolocationCoordinates>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGeolocationCoordinates::s_info
         + ~((_QWORD)&WebCore::JSGeolocationCoordinates::s_info << 32)) ^ (((unint64_t)&WebCore::JSGeolocationCoordinates::s_info
                                                                          + ~((_QWORD)&WebCore::JSGeolocationCoordinates::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGeolocationCoordinates::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGeolocationCoordinates::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGeolocationCoordinatesPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGeolocationCoordinatesPrototype::create((WebCore::JSGeolocationCoordinatesPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGeolocationCoordinates::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGeolocationCoordinates::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 808) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGeolocationCoordinatesConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGeolocationCoordinatesPrototype::s_info != (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                        + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGeolocationCoordinates>,(WebCore::DOMConstructorID)101>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsGeolocationCoordinates_latitude(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 16);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsGeolocationCoordinates_longitude(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 24);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsGeolocationCoordinates_altitude(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 24);
  if (!*(_BYTE *)(v2 + 48))
    return 2;
  v3 = *(double *)(v2 + 40);
  if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v3, v3 == (double)(int)v4)
    && ((_DWORD)v4 || (*(_QWORD *)&v3 & 0x8000000000000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

unint64_t WebCore::jsGeolocationCoordinates_accuracy(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 32);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsGeolocationCoordinates_altitudeAccuracy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 24);
  if (!*(_BYTE *)(v2 + 64))
    return 2;
  v3 = *(double *)(v2 + 56);
  if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v3, v3 == (double)(int)v4)
    && ((_DWORD)v4 || (*(_QWORD *)&v3 & 0x8000000000000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

unint64_t WebCore::jsGeolocationCoordinates_heading(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 24);
  if (!*(_BYTE *)(v2 + 80))
    return 2;
  v3 = *(double *)(v2 + 72);
  if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v3, v3 == (double)(int)v4)
    && ((_DWORD)v4 || (*(_QWORD *)&v3 & 0x8000000000000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

unint64_t WebCore::jsGeolocationCoordinates_speed(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 24);
  if (!*(_BYTE *)(v2 + 96))
    return 2;
  v3 = *(double *)(v2 + 88);
  if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v3, v3 == (double)(int)v4)
    && ((_DWORD)v4 || (*(_QWORD *)&v3 & 0x8000000000000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

unint64_t WebCore::jsGeolocationCoordinates_floorLevel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 24);
  if (!*(_BYTE *)(v2 + 112))
    return 2;
  v3 = *(double *)(v2 + 104);
  if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v3, v3 == (double)(int)v4)
    && ((_DWORD)v4 || (*(_QWORD *)&v3 & 0x8000000000000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

uint64_t WebCore::JSGeolocationCoordinatesOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSGeolocationCoordinatesOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
    return (_QWORD *)WTF::fastFree(v3, a2);
  --*(_DWORD *)v3;
  return result;
}

unint64_t WebCore::wrap<WebCore::GeolocationCoordinates>(uint64_t a1, WTF *a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  unint64_t SlowCase;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  int v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *Allocator;
  unint64_t v51;
  _QWORD *v52;
  WTF *v53;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WTF **)(v4 + 16 * v9);
    if (v10 == a2)
    {
LABEL_6:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v12;
          if (*(_QWORD *)v12)
            return SlowCase;
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WTF **)(v4 + 16 * v9);
        ++v11;
        if (v10 == a2)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a2;
  v14 = *(_QWORD *)(a1 + 3296);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 - 8);
    v16 = ((unint64_t)&WebCore::JSGeolocationCoordinates::s_info
         + ~((_QWORD)&WebCore::JSGeolocationCoordinates::s_info << 32)) ^ (((unint64_t)&WebCore::JSGeolocationCoordinates::s_info
                                                                          + ~((_QWORD)&WebCore::JSGeolocationCoordinates::s_info << 32)) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = *(char ***)(v14 + 16 * v19);
    if (v20 == &WebCore::JSGeolocationCoordinates::s_info)
    {
LABEL_14:
      v22 = *(_QWORD *)(v14 + 16 * v19 + 8);
      if (v22)
        goto LABEL_16;
    }
    else
    {
      v21 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v21) & v15;
        v20 = *(char ***)(v14 + 16 * v19);
        ++v21;
        if (v20 == &WebCore::JSGeolocationCoordinates::s_info)
          goto LABEL_14;
      }
    }
  }
  v23 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSGeolocationCoordinatesPrototype::createStructure(v23, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSGeolocationCoordinatesPrototype::create((WebCore::JSGeolocationCoordinatesPrototype *)v23, Structure, v25, v26);
  v28 = WebCore::JSGeolocationCoordinates::createStructure(v23, a1, v27);
  v22 = WebCore::cacheDOMStructure((JSCell *)a1, v28, (uint64_t)&WebCore::JSGeolocationCoordinates::s_info);
LABEL_16:
  v29 = *(_QWORD *)(a1 + 56);
  v30 = *(_QWORD *)(v29 + 41456);
  v31 = *(_QWORD *)(v30 + 23536);
  v32 = *(_QWORD **)(v31 + 832);
  if (v32)
    goto LABEL_36;
  v33 = *(_QWORD *)(v30 + 22648);
  if (__ldaxr((unsigned __int8 *)v33))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v33))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v33);
LABEL_21:
  v35 = *(_QWORD *)(v33 + 2824);
  if (!*(_QWORD *)(v35 + 832))
  {
    v36 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v53, "IsoSpace T");
    v52 = 0;
    MEMORY[0x19AEA3204](v36, &v53, v29 + 192, v29 + 1872, 32, 8, &v52);
    v38 = (uint64_t)v52;
    v52 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = v53;
    v53 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
        WTF::fastFree(v39, v37);
      else
        --*(_DWORD *)v39;
    }
    v40 = *(_QWORD *)(v35 + 832);
    *(_QWORD *)(v35 + 832) = v36;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v42 = *(_QWORD *)(v31 + 832);
  *(_QWORD *)(v31 + 832) = v32;
  if (v42)
  {
    v43 = (WTF *)MEMORY[0x19AEA3528](v42, v41);
    WTF::fastFree(v43, v44);
  }
  v45 = __ldxr((unsigned __int8 *)v33);
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v33))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
LABEL_36:
  SlowCase = v32[3];
  if (SlowCase >= v32[4])
  {
    SlowCase = v32[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v51 = *(_QWORD *)(SlowCase + 8) ^ v32[6];
    v32[4] = SlowCase + HIDWORD(v51);
    v32[5] = SlowCase + (int)v51;
  }
  v32[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v22);
  *(_QWORD *)(SlowCase + 24) = a2;
  if (*(_BYTE *)(v29 + 755))
    __dmb(0xAu);
  v46 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE3359C8 & 1) == 0)
  {
    qword_1EE3359C0 = (uint64_t)&off_1E328A1F0;
    byte_1EE3359C8 = 1;
  }
  v53 = a2;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  Allocator = *(_QWORD **)(v48 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE3359C0;
  Allocator[2] = v46;
  v52 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v46 + 32), (uint64_t *)&v53, (uint64_t *)&v52);
  if (v52)
    v52[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSGeolocationPosition::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  WTF *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (WTF *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 1)
          WTF::fastFree(v3, a2);
        else
          --*(_DWORD *)v3;
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGeolocationPosition::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGeolocationPositionPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGeolocationPositionPrototype::create(WebCore::JSGeolocationPositionPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSGeolocationPosition::s_info, &WebCore::JSGeolocationPositionPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGeolocationPosition>,(WebCore::DOMConstructorID)102>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 816);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGeolocationPosition>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGeolocationPosition::s_info
         + ~((_QWORD)&WebCore::JSGeolocationPosition::s_info << 32)) ^ (((unint64_t)&WebCore::JSGeolocationPosition::s_info
                                                                       + ~((_QWORD)&WebCore::JSGeolocationPosition::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGeolocationPosition::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGeolocationPosition::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGeolocationPositionPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGeolocationPositionPrototype::create((WebCore::JSGeolocationPositionPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGeolocationPosition::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGeolocationPosition::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 816) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGeolocationPositionConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGeolocationPositionPrototype::s_info != (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGeolocationPosition>,(WebCore::DOMConstructorID)102>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsGeolocationPosition_coords(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::GeolocationCoordinates>(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 8));
}

unint64_t WebCore::jsGeolocationPosition_timestamp(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  unint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  v3 = HIDWORD(v2);
  v4 = (double)v2;
  if ((v2 & 0x80000000) != 0)
    v5 = COERCE__INT64((double)v2) + 0x2000000000000;
  else
    v5 = v2 | 0xFFFE000000000000;
  if (v3)
    return *(_QWORD *)&v4 + 0x2000000000000;
  else
    return v5;
}

uint64_t WebCore::JSGeolocationPositionOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGeolocationPositionOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (WTF *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        WTF::fastFree(v24, a2);
      else
        --*(_DWORD *)v24;
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::GeolocationPosition>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSGeolocationPosition::s_info
         + ~((_QWORD)&WebCore::JSGeolocationPosition::s_info << 32)) ^ (((unint64_t)&WebCore::JSGeolocationPosition::s_info
                                                                       + ~((_QWORD)&WebCore::JSGeolocationPosition::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSGeolocationPosition::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSGeolocationPosition::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSGeolocationPositionPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGeolocationPositionPrototype::create((WebCore::JSGeolocationPositionPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSGeolocationPosition::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGeolocationPosition::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 840);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 840))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 840);
    *(_QWORD *)(v36 + 840) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 840);
  *(_QWORD *)(v32 + 840) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3359D8 & 1) == 0)
  {
    qword_1EE3359D0 = (uint64_t)&off_1E328A220;
    byte_1EE3359D8 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE3359D0;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSGeolocationPositionError::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  WTF::StringImpl *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGeolocationPositionError::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGeolocationPositionErrorPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGeolocationPositionErrorPrototype::create(WebCore::JSGeolocationPositionErrorPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSGeolocationPositionError::s_info, &WebCore::JSGeolocationPositionErrorPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGeolocationPositionError>,(WebCore::DOMConstructorID)103>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 824);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGeolocationPositionError>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGeolocationPositionError::s_info
         + ~((_QWORD)&WebCore::JSGeolocationPositionError::s_info << 32)) ^ (((unint64_t)&WebCore::JSGeolocationPositionError::s_info
                                                                            + ~((_QWORD)&WebCore::JSGeolocationPositionError::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGeolocationPositionError::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGeolocationPositionError::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGeolocationPositionErrorPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGeolocationPositionErrorPrototype::create((WebCore::JSGeolocationPositionErrorPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGeolocationPositionError::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGeolocationPositionError::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  JSC::reifyStaticProperties<3u>((JSC::VM *)a1, (uint64_t)&WebCore::JSGeolocationPositionError::s_info, &WebCore::JSGeolocationPositionErrorConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 824) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGeolocationPositionErrorConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGeolocationPositionErrorPrototype::s_info != (char **)(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                          + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGeolocationPositionError>,(WebCore::DOMConstructorID)103>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsGeolocationPositionError_code(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a2 + 24) + 4) | 0xFFFE000000000000;
}

uint64_t WebCore::jsGeolocationPositionError_message(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::JSGeolocationPositionErrorOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGeolocationPositionErrorOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, a2);
      else
        *(_DWORD *)v24 -= 2;
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::GeolocationPositionError>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSGeolocationPositionError::s_info
         + ~((_QWORD)&WebCore::JSGeolocationPositionError::s_info << 32)) ^ (((unint64_t)&WebCore::JSGeolocationPositionError::s_info
                                                                            + ~((_QWORD)&WebCore::JSGeolocationPositionError::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSGeolocationPositionError::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSGeolocationPositionError::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSGeolocationPositionErrorPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGeolocationPositionErrorPrototype::create((WebCore::JSGeolocationPositionErrorPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSGeolocationPositionError::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGeolocationPositionError::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 848);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 848))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 848);
    *(_QWORD *)(v36 + 848) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 848);
  *(_QWORD *)(v32 + 848) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3359E8 & 1) == 0)
  {
    qword_1EE3359E0 = (uint64_t)&off_1E328A250;
    byte_1EE3359E8 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE3359E0;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

unint64_t WebCore::convertDictionary<WebCore::GetAnimationsOptions>@<X0>(JSC::JSCell *this@<X1>, unint64_t result@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  JSC::JSGlobalObject *v5;
  uint64_t Object;
  JSC::Structure *v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  BOOL v10;
  double v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int *v16;
  int v17;
  WTF::StringImpl *v18;

  v4 = *(JSC::VM **)(result + 56);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    v5 = (JSC::JSGlobalObject *)result;
    if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
    {
      result = JSC::throwTypeError();
      goto LABEL_19;
    }
    v7 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    result = JSC::JSObject::get(v7, v5, (unint64_t)v18);
    v9 = result;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        result = WTF::StringImpl::destroy(v18, v8);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (*((_DWORD *)v4 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
      if ((result & 1) != 0)
        goto LABEL_19;
    }
    if (v9 == 10)
      goto LABEL_9;
    result = *((_QWORD *)v5 + 7);
    if (v9 >= 0xFFFE000000000000)
    {
      v13 = (_DWORD)v9 == 0;
    }
    else
    {
      *(_QWORD *)&v11 = v9 - 0x2000000000000;
      if (v9 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v10 = v11 > 0.0 || v11 < 0.0;
LABEL_14:
        if (!*(_DWORD *)(result + 80))
          goto LABEL_15;
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result);
        if ((result & 1) == 0)
          goto LABEL_15;
LABEL_19:
        v12 = 1;
        goto LABEL_16;
      }
      if ((v9 & 0xFFFE000000000002) != 0)
      {
        v10 = v9 == 7;
        goto LABEL_14;
      }
      v14 = *(unsigned __int8 *)(v9 + 5);
      if (v14 == 3)
      {
        v17 = *(_DWORD *)(v9 + 8);
      }
      else
      {
        if (v14 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v10 = 1;
            goto LABEL_14;
          }
          v13 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x28) == (_QWORD)v5;
          goto LABEL_39;
        }
        v15 = *(_QWORD *)(v9 + 8);
        if ((v15 & 1) != 0)
          v16 = (int *)(v9 + 16);
        else
          v16 = (int *)(v15 + 4);
        v17 = *v16;
      }
      v13 = v17 == 0;
    }
LABEL_39:
    v10 = !v13;
    goto LABEL_14;
  }
LABEL_9:
  v10 = 0;
LABEL_15:
  v12 = 0;
  *(_BYTE *)a3 = v10;
LABEL_16:
  *(_DWORD *)(a3 + 4) = v12;
  return result;
}

uint64_t WebCore::convertDictionary<WebCore::GetHTMLOptions>@<X0>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *a2@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  BOOL v5;
  uint64_t Object;
  JSC::Structure *v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  JSC::VM *v11;
  double v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  JSValue v21;
  int i;
  unsigned int v23;
  unint64_t IndexQuickly;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int hasExceptionsAfterHandlingTraps;
  void *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  int *v40;
  int v41;
  WTF::StringImpl *v42[2];
  int v43;
  JSC::VM *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;

  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v44 = v4;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v5 = 0;
    goto LABEL_21;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    goto LABEL_57;
  }
  v8 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v10 = JSC::JSObject::get(v8, a2, (unint64_t)v42[0]);
  if (v42[0])
  {
    if (*(_DWORD *)v42[0] == 2)
      WTF::StringImpl::destroy(v42[0], v9);
    else
      *(_DWORD *)v42[0] -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_57;
  }
  if (v10 != 10)
  {
    v11 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if (v10 >= 0xFFFE000000000000)
    {
      v37 = (_DWORD)v10 == 0;
    }
    else
    {
      *(_QWORD *)&v12 = v10 - 0x2000000000000;
      if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v5 = v12 > 0.0 || v12 < 0.0;
LABEL_15:
        if (*((_DWORD *)v11 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v11);
          if ((_DWORD)result)
            goto LABEL_57;
        }
        goto LABEL_16;
      }
      if ((v10 & 0xFFFE000000000002) != 0)
      {
        v5 = v10 == 7;
        goto LABEL_15;
      }
      v38 = *(unsigned __int8 *)(v10 + 5);
      if (v38 == 3)
      {
        v41 = *(_DWORD *)(v10 + 8);
      }
      else
      {
        if (v38 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v5 = 1;
            goto LABEL_15;
          }
          v37 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
          goto LABEL_98;
        }
        v39 = *(_QWORD *)(v10 + 8);
        if ((v39 & 1) != 0)
          v40 = (int *)(v10 + 16);
        else
          v40 = (int *)(v39 + 4);
        v41 = *v40;
      }
      v37 = v41 == 0;
    }
LABEL_98:
    v5 = !v37;
    goto LABEL_15;
  }
  v5 = 0;
LABEL_16:
  WTF::AtomStringImpl::addLiteral();
  v14 = JSC::JSObject::get(v8, a2, (unint64_t)v42[0]);
  if (v42[0])
  {
    if (*(_DWORD *)v42[0] == 2)
      WTF::StringImpl::destroy(v42[0], v13);
    else
      *(_DWORD *)v42[0] -= 2;
  }
  if (!*((_DWORD *)v4 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v4), !(_DWORD)result))
  {
    if (v14 != 10)
    {
      v20 = *((_QWORD *)a2 + 7);
      v45 = v20;
      if ((v14 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v14 + 5) <= 0x16u)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        JSC::throwTypeError();
        v26 = v46;
        v46 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v25);
          else
            *(_DWORD *)v26 -= 2;
        }
        v17 = 1;
        v43 = 1;
        v18 = 1;
        goto LABEL_23;
      }
      v46 = 0;
      v47 = 0;
      if (JSC::getIterationMode() == 2)
      {
        for (i = 1; ; ++i)
        {
          v23 = (*(_BYTE *)(v14 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v14 + 8) - 8) : 0;
          if (i - 1 >= v23)
            break;
          IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v14, i - 1, 0);
          if (!IndexQuickly)
            IndexQuickly = JSC::JSObject::get((JSC::JSObject *)v14, a2, (i - 1));
          if (*(_DWORD *)(v20 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v20) & 1) != 0)
            break;
          WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::ShadowRoot>>::convert((uint64_t)a2, IndexQuickly, (uint64_t)&v46);
          if (*(_QWORD *)(v20 + 16))
          {
            v30 = JSC::JSArrayIterator::create();
            v31 = i | 0xFFFE000000000000;
            if (i < 0)
              v31 = COERCE__INT64((double)i) + 0x2000000000000;
            *(_QWORD *)(v30 + 16) = v31;
            goto LABEL_61;
          }
        }
      }
      else
      {
        JSC::iteratorForIterable(a2, (JSC::JSGlobalObject *)v14, v21);
        if (!*(_DWORD *)(v20 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v20) & 1) == 0)
        {
          while (1)
          {
            v27 = JSC::iteratorStep();
            if (*(_QWORD *)(v20 + 16) || v27 == 6)
              break;
            v29 = JSC::iteratorValue();
            if (*(_DWORD *)(v20 + 80))
            {
              if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v20) & 1) != 0)
                break;
            }
            WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::ShadowRoot>>::convert((uint64_t)a2, v29, (uint64_t)&v46);
            if (*(_QWORD *)(v20 + 16))
            {
LABEL_61:
              JSC::iteratorClose();
              break;
            }
          }
        }
      }
      if (*(_DWORD *)(v20 + 80))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v20);
        v15 = v46;
        if (hasExceptionsAfterHandlingTraps)
        {
          v43 = 1;
          if (HIDWORD(v47))
          {
            v34 = 8 * HIDWORD(v47);
            v35 = v46;
            do
            {
              v36 = *(_QWORD *)v35;
              *(_QWORD *)v35 = 0;
              if (v36)
              {
                if (*(_DWORD *)(v36 + 24) == 2)
                {
                  if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v36, v33);
                }
                else
                {
                  *(_DWORD *)(v36 + 24) -= 2;
                }
              }
              v35 = (WTF::StringImpl *)((char *)v35 + 8);
              v34 -= 8;
            }
            while (v34);
          }
          if (v15)
            WTF::fastFree(v15, v33);
          v18 = 1;
          v17 = 1;
          goto LABEL_23;
        }
      }
      else
      {
        v15 = v46;
      }
      v16 = v47;
      v43 = 0;
LABEL_22:
      v17 = 0;
      v18 = 0;
      v42[0] = 0;
      v42[1] = 0;
      *(_BYTE *)a3 = v5;
      *(_QWORD *)(a3 + 8) = v15;
      *(_QWORD *)(a3 + 16) = v16;
LABEL_23:
      *(_DWORD *)(a3 + 24) = v17;
      return ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328BD00[v18])(&v46, v42);
    }
LABEL_21:
    v15 = 0;
    v43 = 0;
    v16 = 0;
    goto LABEL_22;
  }
LABEL_57:
  *(_DWORD *)(a3 + 24) = 1;
  return result;
}

BOOL WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLAllCollection>::initializeProperties(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSHTMLAllCollection>((WebCore::JSHTMLAllCollection *)a2, a3);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
}

WTF::StringImpl *WebCore::JSHTMLAllCollectionPrototype::finishCreation(WebCore::JSHTMLAllCollectionPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t Direct;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(a2, (uint64_t)&WebCore::JSHTMLAllCollection::s_info, &WebCore::JSHTMLAllCollectionPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2712);
  v5 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 672);
  v6 = (_DWORD *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  Direct = JSC::JSObject::getDirect(v5, a2, (unint64_t)v6);
  JSC::JSObject::putDirect((unsigned __int8 *)this, a2, v4, Direct, 4);
  if (*v6 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v8);
  else
    *v6 -= 2;
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = JSC::jsNontrivialString((uint64_t)a2, &v13);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v9, v10, 6);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WebCore::JSHTMLAllCollection::destroy(WebCore::JSHTMLAllCollection *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t WebCore::JSHTMLAllCollection::put(uint64_t a1, WebCore::JSDOMGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  char **v11;
  BOOL v12;
  WebCore::JSDOMGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  JSC::VM *v20;
  int OwnProperty;
  uint64_t result;
  int v23;
  char v24[16];
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v8 = *(_QWORD *)(a5 + 8);
  if (v8 != a1)
    return JSC::JSObject::put();
  v9 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &WebCore::JSDOMGlobalObject::s_info && v11 != 0);
  }
  if (v10)
    v14 = a2;
  else
    v14 = 0;
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v14);
  if (!v15)
    goto LABEL_23;
  v16 = v15;
  if (*(_BYTE *)(v15 + 274))
    goto LABEL_23;
  v17 = *(_BYTE **)(v15 + 496);
  if (!v17)
    v17 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v16 - 192));
  if (!*(_QWORD *)v17)
    goto LABEL_23;
  v18 = *(_QWORD *)(*(_QWORD *)v17 + 8);
  if (!v18)
    goto LABEL_23;
  v19 = *(_QWORD *)(v18 + 680);
  if (*(_BYTE *)(v19 + 243))
  {
    if (!*(_BYTE *)(v19 + 242))
      goto LABEL_23;
LABEL_22:
    if (!v17[65])
      goto LABEL_23;
    return JSC::JSObject::put();
  }
  if ((*(_QWORD *)(v19 + 688) & 0x80000) != 0)
    goto LABEL_22;
LABEL_23:
  v20 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 14;
  v25 = 0xFFFFFFFF00000000;
  v27 = 0;
  v28 = 0;
  v26 = v8;
  v29 = 0x20000;
  v30 = 0;
  LOBYTE(v31) = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  OwnProperty = WebCore::JSHTMLAllCollection::legacyPlatformObjectGetOwnProperty(a1, (JSC::VM **)a2, a3, (uint64_t)v24, 1);
  if (*((_DWORD *)v20 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v20) & 1) != 0
    || OwnProperty
    && (JSC::PropertyDescriptor::setPropertySlot(), *((_DWORD *)v20 + 20))
    && (JSC::VM::hasExceptionsAfterHandlingTraps(v20) & 1) != 0)
  {
    result = 0;
  }
  else
  {
    result = JSC::ordinarySetWithOwnDescriptor();
  }
  if (v32)
  {
    v23 = *(_DWORD *)(v31 + 4);
    if (!v23)
    {
      __break(0xC471u);
      JUMPOUT(0x194BB2B98);
    }
    *(_DWORD *)(v31 + 4) = v23 - 1;
  }
  return result;
}

uint64_t WebCore::JSHTMLAllCollection::putByIndex(JSC::JSObject *a1, JSC::JSCell *a2, JSC::JSGlobalObject *a3, uint64_t a4, objc_class *a5)
{
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  WebCore::JSDOMGlobalObject *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  JSValue v24;
  WTF::StringImpl *v25;

  v10 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
    while (v12 != &WebCore::JSDOMGlobalObject::s_info && v12 != 0);
  }
  if (v11)
    v15 = a2;
  else
    v15 = 0;
  v16 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v15);
  if (!v16)
    goto LABEL_22;
  v17 = v16;
  if (*(_BYTE *)(v16 + 274))
    goto LABEL_22;
  v18 = *(_BYTE **)(v16 + 496);
  if (!v18)
    v18 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v17 - 192));
  if (!*(_QWORD *)v18)
    goto LABEL_22;
  v19 = *(_QWORD *)(*(_QWORD *)v18 + 8);
  if (!v19)
    goto LABEL_22;
  v20 = *(_QWORD *)(v19 + 680);
  if (*(_BYTE *)(v20 + 243))
  {
    if (!*(_BYTE *)(v20 + 242))
      goto LABEL_22;
  }
  else if ((*(_QWORD *)(v20 + 688) & 0x80000) == 0)
  {
    goto LABEL_22;
  }
  if (v18[65])
  {
    v24.super.isa = a5;
    return JSC::JSObject::putByIndex(a1, a2, a3, a4, v24);
  }
LABEL_22:
  JSC::Identifier::from();
  v22 = JSC::ordinarySetSlow();
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v21);
    else
      *(_DWORD *)v25 -= 2;
  }
  return v22;
}

uint64_t WebCore::JSHTMLAllCollection::deleteProperty(uint64_t a1, WebCore::JSDOMGlobalObject *a2, unint64_t a3)
{
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  _QWORD *v11;
  WebCore::JSDOMGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE *v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int isSupportedPropertyName;
  WTF::StringImpl *v25;
  JSC::VM *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  _BYTE *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned __int16 *v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  uint64_t result;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  unsigned int v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char v67;
  JSC::VM *v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  v11 = *(_QWORD **)(a1 + 24);
  if (v7)
    v12 = a2;
  else
    v12 = 0;
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v12);
  if (v13)
  {
    v14 = v13;
    if (!*(_BYTE *)(v13 + 274))
    {
      v15 = *(_BYTE **)(v13 + 496);
      if (!v15)
        v15 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v14 - 192));
      if (*(_QWORD *)v15)
      {
        v16 = *(_QWORD *)(*(_QWORD *)v15 + 8);
        if (v16)
        {
          v17 = *(_QWORD *)(v16 + 680);
          if (*(_BYTE *)(v17 + 243))
          {
            if (!*(_BYTE *)(v17 + 242))
              goto LABEL_22;
          }
          else if ((*(_QWORD *)(v17 + 688) & 0x80000) == 0)
          {
            goto LABEL_22;
          }
          if (v15[65])
            return JSC::JSObject::deleteProperty();
        }
      }
    }
  }
LABEL_22:
  if (a3)
  {
    v18 = *(_DWORD *)(a3 + 16);
    if ((v18 & 0x20) != 0)
      return JSC::JSObject::deleteProperty();
    v19 = *(_BYTE **)(a3 + 8);
    v20 = *(unsigned int *)(a3 + 4);
    if ((v18 & 4) != 0)
    {
      if (!(_DWORD)v20)
        goto LABEL_29;
      v21 = *v19 - 48;
      if (v21 > 9 || v20 >= 2 && *v19 == 48)
        goto LABEL_29;
      v52 = v19 + 1;
      v53 = v20 - 1;
      while (v53)
      {
        if (v21 <= 0x19999999)
        {
          v54 = *v52 - 48;
          if (v54 <= 9)
          {
            v38 = __CFADD__(v54, 10 * v21);
            v21 = v54 + 10 * v21;
            ++v52;
            --v53;
            if (!v38)
              continue;
          }
        }
        goto LABEL_29;
      }
    }
    else
    {
      if (!(_DWORD)v20
        || (v21 = *(unsigned __int16 *)v19 - 48, v21 > 9)
        || v20 >= 2 && *(_WORD *)v19 == 48)
      {
LABEL_29:
        *(_DWORD *)a3 += 2;
        v22 = (WTF::StringImpl *)a3;
        goto LABEL_30;
      }
      v35 = (unsigned __int16 *)(v19 + 2);
      v36 = v20 - 1;
      while (v36)
      {
        if (v21 <= 0x19999999)
        {
          v37 = *v35 - 48;
          if (v37 <= 9)
          {
            v38 = __CFADD__(v37, 10 * v21);
            v21 = v37 + 10 * v21;
            ++v35;
            --v36;
            if (!v38)
              continue;
          }
        }
        goto LABEL_29;
      }
    }
    if (v21 != -1)
      return (*(unsigned int (**)(_QWORD *))(*v11 + 16))(v11) <= v21;
    goto LABEL_29;
  }
  v22 = 0;
LABEL_30:
  v60 = v22;
  isSupportedPropertyName = WebCore::HTMLCollection::isSupportedPropertyName(v11, (uint64_t *)&v60);
  v25 = v60;
  v60 = 0;
  if (!v25)
    goto LABEL_33;
  if (*(_DWORD *)v25 == 2)
  {
    WTF::StringImpl::destroy(v25, v23);
    if (isSupportedPropertyName)
      goto LABEL_34;
    return JSC::JSObject::deleteProperty();
  }
  *(_DWORD *)v25 -= 2;
LABEL_33:
  if (!isSupportedPropertyName)
    return JSC::JSObject::deleteProperty();
LABEL_34:
  v26 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v62 = 0xFFFFFFFF00000000;
  v64 = 0;
  v65 = 0;
  v63 = a1;
  v66 = 196608;
  v67 = 0;
  v70 = 0;
  v71 = 0;
  v68 = v26;
  ++*((_DWORD *)v26 + 1);
  v69 = 1;
  if ((a3 >> 4))
  {
    v27 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
    if (((a3 >> 4) & ~*(_DWORD *)(v27 + 0x20)) == 0)
    {
      v28 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v26);
      if (v28)
      {
        v72 = a3;
        v29 = JSC::PropertyTable::get(v28, (uint64_t *)&v72);
        if ((_DWORD)v29 != -1)
        {
          if ((int)v29 > 63)
          {
            v41 = *(_QWORD *)(a1 + 8) - 8;
            v42 = 0x3F00000000 - (v29 << 32);
          }
          else
          {
            v41 = a1 + 16;
            v42 = v29 << 32;
          }
          v43 = *(_QWORD *)(v41 + (v42 >> 29));
          if ((v43 & 0xFFFE000000000002) == 0)
          {
            v44 = *(unsigned __int8 *)(v43 + 5);
            if (v44 == 6)
            {
              v48 = *(_DWORD *)(v27 + 16) & 3;
              v49 = *(_QWORD *)(v43 + 16);
              if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x4C))
              {
                v51 = *(_QWORD *)(v43 + 24);
                v50 = *(_QWORD *)(v43 + 32);
                v60 = *(WTF::StringImpl **)(v43 + 8);
                v61 = v49;
                LODWORD(v62) = HIDWORD(v29);
                v64 = a1;
                BYTE1(v66) = 3;
                result = 1;
                if (v48 != 2)
                  LOBYTE(v66) = 1;
                HIBYTE(v66) = 1;
                v70 = v51;
                v71 = v50;
              }
              else
              {
                v60 = *(WTF::StringImpl **)(v43 + 8);
                v61 = v49;
                LODWORD(v62) = HIDWORD(v29);
                v64 = a1;
                result = 1;
                BYTE1(v66) = 3;
                if (v48 != 2)
                  LOBYTE(v66) = 1;
              }
              goto LABEL_57;
            }
            if (v44 == 5)
            {
              JSC::JSObject::fillGetterPropertySlot();
              result = 1;
              goto LABEL_57;
            }
          }
          v60 = (WTF::StringImpl *)v43;
          v64 = a1;
          v62 = __PAIR64__(v29, HIDWORD(v29));
          result = 1;
          LOWORD(v66) = 257;
          goto LABEL_57;
        }
      }
    }
  }
  if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
  {
    result = JSC::JSObject::getOwnStaticPropertySlot();
    if (!a3 || (result & 1) != 0)
      goto LABEL_57;
  }
  else if (!a3)
  {
LABEL_56:
    result = 0;
    goto LABEL_57;
  }
  v30 = *(_DWORD *)(a3 + 16);
  if ((v30 & 0x20) != 0)
    goto LABEL_56;
  v31 = *(_BYTE **)(a3 + 8);
  v32 = *(unsigned int *)(a3 + 4);
  if ((v30 & 4) != 0)
  {
    if ((_DWORD)v32)
    {
      v55 = *v31 - 48;
      if (v55 > 9 || v32 >= 2 && *v31 == 48)
      {
LABEL_112:
        v56 = 0;
      }
      else
      {
        v57 = v31 + 1;
        v58 = v32 - 1;
        while (v58)
        {
          if (v55 > 0x19999999)
            goto LABEL_112;
          v59 = *v57 - 48;
          if (v59 > 9)
            goto LABEL_112;
          v56 = 0;
          v38 = __CFADD__(v59, 10 * v55);
          v55 = v59 + 10 * v55;
          ++v57;
          --v58;
          if (v38)
            goto LABEL_113;
        }
        v56 = 0x100000000;
        if (v55 == -1)
          v56 = 0;
      }
    }
    else
    {
      v56 = 0;
    }
LABEL_113:
    if ((v56 & 0x100000000) == 0)
      goto LABEL_56;
  }
  else
  {
    if ((_DWORD)v32)
    {
      v33 = *(unsigned __int16 *)v31 - 48;
      if (v33 > 9 || v32 >= 2 && *(_WORD *)v31 == 48)
      {
LABEL_46:
        v34 = 0;
      }
      else
      {
        v45 = (unsigned __int16 *)(v31 + 2);
        v46 = v32 - 1;
        while (v46)
        {
          if (v33 <= 0x19999999)
          {
            v47 = *v45 - 48;
            if (v47 <= 9)
            {
              v38 = __CFADD__(v47, 10 * v33);
              v33 = v47 + 10 * v33;
              ++v45;
              --v46;
              if (!v38)
                continue;
            }
          }
          goto LABEL_46;
        }
        v9 = v33 == -1;
        v34 = 0x100000000;
        if (v9)
          v34 = 0;
      }
    }
    else
    {
      v34 = 0;
    }
    if ((v34 & 0x100000000) == 0)
      goto LABEL_56;
  }
  result = JSC::JSObject::getOwnPropertySlotByIndex();
LABEL_57:
  if (v69)
  {
    v40 = *((_DWORD *)v68 + 1);
    if (!v40)
    {
      __break(0xC471u);
      JUMPOUT(0x194BB31B4);
    }
    *((_DWORD *)v68 + 1) = v40 - 1;
  }
  if ((_DWORD)result)
    return JSC::JSObject::deleteProperty();
  return result;
}

uint64_t WebCore::JSHTMLAllCollection::deletePropertyByIndex(WebCore::JSHTMLAllCollection *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WebCore::JSDOMGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  v11 = *((_QWORD *)this + 3);
  if (v7)
    v12 = a2;
  else
    v12 = 0;
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v12);
  if (!v13)
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) <= a3;
  v14 = v13;
  if (*(_BYTE *)(v13 + 274))
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) <= a3;
  v15 = *(_BYTE **)(v13 + 496);
  if (!v15)
    v15 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v14 - 192));
  if (!*(_QWORD *)v15)
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) <= a3;
  v16 = *(_QWORD *)(*(_QWORD *)v15 + 8);
  if (!v16)
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) <= a3;
  v17 = *(_QWORD *)(v16 + 680);
  if (*(_BYTE *)(v17 + 243))
  {
    if (!*(_BYTE *)(v17 + 242))
      return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) <= a3;
  }
  else if ((*(_QWORD *)(v17 + 688) & 0x80000) == 0)
  {
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) <= a3;
  }
  if (!v15[65])
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) <= a3;
  return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
}

uint64_t WebCore::JSHTMLAllCollection::getOwnPropertySlot(uint64_t a1, JSC::VM **a2, unint64_t a3, uint64_t a4)
{
  return WebCore::JSHTMLAllCollection::legacyPlatformObjectGetOwnProperty(a1, a2, a3, a4, 0);
}

uint64_t WebCore::JSHTMLAllCollection::getOwnPropertySlotByIndex(WebCore::JSHTMLAllCollection *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  unint64_t v5;
  JSC::VM *v9;
  WebCore::JSDOMGlobalObject *v10;
  WebCore::Element *v11;
  unint64_t v12;
  uint64_t OwnPropertySlotByIndex;
  WTF::StringImpl *v15;
  WebCore::HTMLAllCollection *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  JSC::VM *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  _BYTE *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned __int16 *v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  unint64_t v34;
  uint64_t *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  _WORD *v52;
  uint64_t v53;
  unsigned int v54;
  unsigned __int16 *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  _BYTE *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned __int16 *v67;
  uint64_t v68;
  unsigned int v69;
  unsigned __int8 *v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  int v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  unint64_t v78;
  JSC::VM *v79;
  uint64_t v80;
  char v81;
  int v82;
  int v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  unsigned __int8 *v88;
  uint64_t v89;
  unsigned int v90;
  JSC::VM *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  char v98;
  int v99;
  unsigned int v100;
  uint64_t v101;
  unsigned __int8 *v102;
  int v103;
  int v104;
  uint64_t v105;
  const WTF::StringImpl *v106;
  const unsigned __int8 *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  unint64_t v112;
  JSC::VM *v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  int v118;
  unint64_t v119;
  uint64_t v120;
  int hasExceptionsAfterHandlingTraps;
  unint64_t v122;
  char v123;
  uint64_t v124;
  JSC::VM *v125;
  char v126[8];
  int v127;
  unsigned __int8 v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  uint64_t v131;
  unint64_t v132;
  WebCore::JSHTMLAllCollection *v133;
  WebCore::JSHTMLAllCollection *v134;
  uint64_t v135;
  int v136;
  char v137;
  JSC::VM *v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  char v142[8];
  int v143;
  unsigned __int8 v144;
  char v145;
  WTF::StringImpl *v146;
  unsigned int v147;
  char v148;
  uint64_t v149;

  v149 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((_DWORD)a3 == -1)
  {
    JSC::Identifier::from();
    v15 = v129;
    if (v129)
    {
      if ((*((_BYTE *)v129 + 16) & 0x20) != 0)
        goto LABEL_167;
      v16 = (WebCore::HTMLAllCollection *)*((_QWORD *)this + 3);
      *(_DWORD *)v129 += 2;
    }
    else
    {
      v16 = (WebCore::HTMLAllCollection *)*((_QWORD *)this + 3);
    }
    v130 = v15;
    WebCore::HTMLAllCollection::namedItemOrItems(v16, (const WTF::AtomString *)&v130, (uint64_t)&v146);
    v19 = v130;
    v130 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v17);
      else
        *(_DWORD *)v19 -= 2;
    }
    if (v148)
    {
      LOBYTE(v130) = 0;
      v5 = 0xFFFFFFFFLL;
      LODWORD(v131) = -1;
      v20 = v147;
      if (v147 == -1)
      {
        v142[0] = 0;
        v143 = -1;
        v144 = 1;
      }
      else
      {
        ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E328BDC0[v147])(&v145, &v130, &v146);
        LODWORD(v131) = v20;
        v142[0] = 0;
        v143 = -1;
        ((void (*)(char *, char *, WTF::StringImpl **))off_1E328D368[v20])(&v145, v142, &v130);
        v143 = v20;
        v144 = 1;
        if ((_DWORD)v131 != -1)
          ((void (*)(char *, WTF::StringImpl **))off_1E328BDB0[v131])(&v145, &v130);
      }
      if (v148 && v147 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328BDB0[v147])(&v130, &v146);
    }
    else
    {
      v142[0] = 0;
      v144 = 0;
    }
    if (!v144)
      goto LABEL_167;
    v21 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v132 = 0xFFFFFFFF00000000;
    v134 = 0;
    v135 = 0;
    v133 = this;
    v136 = 196608;
    v137 = 0;
    v140 = 0;
    v141 = 0;
    v138 = v21;
    ++*((_DWORD *)v21 + 1);
    v139 = 1;
    v22 = (unint64_t)v15 >> 4;
    if (((unint64_t)v15 >> 4))
    {
      v5 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
      if ((v22 & ~*(_DWORD *)(v5 + 0x20)) == 0)
      {
        v23 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)), v21);
        if (v23)
        {
          v146 = v15;
          v24 = JSC::PropertyTable::get(v23, (uint64_t *)&v146);
          v25 = v24;
          if ((_DWORD)v24 != -1)
          {
            v34 = HIDWORD(v24);
            v35 = (uint64_t *)((char *)this + 8 * (int)v24 + 16);
            if ((int)v24 >= 64)
              v35 = (uint64_t *)(*((_QWORD *)this + 1) + ((uint64_t)(0x3F00000000 - (v24 << 32)) >> 29) - 8);
            v18 = *v35;
            if ((*v35 & 0xFFFE000000000002) == 0)
            {
              v36 = *(unsigned __int8 *)(v18 + 5);
              if (v36 == 6)
              {
                v37 = *(_DWORD *)(v5 + 16) & 3;
                v38 = *(_QWORD *)(v18 + 16);
                if (MEMORY[0x1E0CBE830] != 16 * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C))
                {
                  v130 = *(WTF::StringImpl **)(v18 + 8);
                  v131 = v38;
                  LODWORD(v132) = HIDWORD(v24);
                  v134 = this;
                  goto LABEL_134;
                }
                v40 = *(_QWORD *)(v18 + 24);
                v39 = *(_QWORD *)(v18 + 32);
                v130 = *(WTF::StringImpl **)(v18 + 8);
                v131 = v38;
                LODWORD(v132) = HIDWORD(v24);
                v134 = this;
                goto LABEL_114;
              }
              if (v36 == 5)
                goto LABEL_117;
            }
            v130 = (WTF::StringImpl *)v18;
            v134 = this;
            goto LABEL_109;
          }
        }
      }
    }
    if ((*((_BYTE *)this + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      goto LABEL_110;
    if (!v15)
      goto LABEL_70;
    v26 = *((_DWORD *)v15 + 4);
    if ((v26 & 0x20) != 0)
      goto LABEL_70;
    v27 = (_BYTE *)*((_QWORD *)v15 + 1);
    v28 = *((unsigned int *)v15 + 1);
    if ((v26 & 4) != 0)
    {
      if ((_DWORD)v28)
      {
        v29 = *v27 - 48;
        if (v29 <= 9 && (v28 < 2 || *v27 != 48))
        {
          v41 = v27 + 1;
          v42 = v28 - 1;
          while (v42)
          {
            if (v29 <= 0x19999999)
            {
              v43 = *v41 - 48;
              if (v43 <= 9)
              {
                v33 = __CFADD__(v43, 10 * v29);
                v29 = v43 + 10 * v29;
                ++v41;
                --v42;
                if (!v33)
                  continue;
              }
            }
            goto LABEL_70;
          }
          goto LABEL_69;
        }
      }
    }
    else if ((_DWORD)v28)
    {
      v29 = *(unsigned __int16 *)v27 - 48;
      if (v29 <= 9 && (v28 < 2 || *(_WORD *)v27 != 48))
      {
        v30 = (unsigned __int16 *)(v27 + 2);
        v31 = v28 - 1;
        while (v31)
        {
          if (v29 <= 0x19999999)
          {
            v32 = *v30 - 48;
            if (v32 <= 9)
            {
              v33 = __CFADD__(v32, 10 * v29);
              v29 = v32 + 10 * v29;
              ++v30;
              --v31;
              if (!v33)
                continue;
            }
          }
          goto LABEL_70;
        }
LABEL_69:
        if (v29 != -1 && JSC::JSObject::getOwnPropertySlotByIndex())
          goto LABEL_110;
      }
    }
LABEL_70:
    v44 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30);
    if (!v44)
      v44 = *((_QWORD *)this + 2);
    if ((v44 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v44 + 5) < 0x17u)
      goto LABEL_151;
    v45 = (_BYTE *)(v44 + 6);
    if ((*(_BYTE *)(v44 + 6) & 8) == 0)
    {
      v125 = (JSC::VM *)*((_QWORD *)a2 + 7);
      v5 = v44;
      while (1)
      {
        v46 = *(_DWORD *)v5 & 0xFFFFFFFE;
        v47 = 16 * v46;
        if ((_DWORD)v22)
        {
          if ((v22 & ~*(_DWORD *)(16 * v46 + 0x20)) == 0)
          {
            v48 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v47, v125);
            if (v48)
            {
              v146 = v15;
              v49 = JSC::PropertyTable::get(v48, (uint64_t *)&v146);
              v25 = v49;
              if ((_DWORD)v49 != -1)
                break;
            }
          }
        }
        if ((*v45 & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
          goto LABEL_110;
        v50 = *(_QWORD *)(v47 + 48);
        if (!v50)
          v50 = *(_QWORD *)(v5 + 16);
        if ((v50 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v50 + 5) < 0x17u)
        {
          if (!v15)
            goto LABEL_151;
          v51 = *((_DWORD *)v15 + 4);
          if ((v51 & 0x20) != 0)
            goto LABEL_151;
          v52 = (_WORD *)*((_QWORD *)v15 + 1);
          v53 = *((unsigned int *)v15 + 1);
          if ((v51 & 4) == 0)
          {
            if ((_DWORD)v53)
            {
              v54 = (unsigned __int16)*v52 - 48;
              if (v54 <= 9 && (v53 < 2 || *v52 != 48))
              {
                v55 = v52 + 1;
                v56 = v53 - 1;
                while (v56)
                {
                  if (v54 <= 0x19999999)
                  {
                    v57 = *v55 - 48;
                    if (v57 <= 9)
                    {
                      v33 = __CFADD__(v57, 10 * v54);
                      v54 = v57 + 10 * v54;
                      ++v55;
                      --v56;
                      if (!v33)
                        continue;
                    }
                  }
                  goto LABEL_151;
                }
                goto LABEL_150;
              }
            }
            goto LABEL_151;
          }
          if (!(_DWORD)v53)
            goto LABEL_151;
          v54 = *(unsigned __int8 *)v52 - 48;
          if (v54 > 9 || v53 >= 2 && *(_BYTE *)v52 == 48)
            goto LABEL_151;
          v70 = (unsigned __int8 *)v52 + 1;
          v71 = v53 - 1;
          while (v71)
          {
            if (v54 <= 0x19999999)
            {
              v72 = *v70 - 48;
              if (v72 <= 9)
              {
                v33 = __CFADD__(v72, 10 * v54);
                v54 = v72 + 10 * v54;
                ++v70;
                --v71;
                if (!v33)
                  continue;
              }
            }
            goto LABEL_151;
          }
LABEL_150:
          if (v54 == -1)
          {
LABEL_151:
            v126[0] = 0;
            v128 = 0;
            v61 = v144;
            if (v144)
            {
              v127 = -1;
              v73 = v143;
              if (v143 != -1)
              {
                ((void (*)(WTF::StringImpl **, char *, char *))off_1E328D368[v143])(&v146, v126, v142);
                v127 = v73;
              }
              v61 = 1;
              v128 = 1;
            }
            goto LABEL_155;
          }
          v78 = v54;
          v79 = (JSC::VM *)*((_QWORD *)a2 + 7);
          while (2)
          {
            v80 = 16 * (*(_DWORD *)v44 & 0xFFFFFFFE);
            v81 = (*(uint64_t (**)(uint64_t, JSC::JSObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v80 + 0x4C) + 0x70))(v44, a2, v78, &v130);
            if (*((_DWORD *)v79 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v79) & 1) != 0)
              goto LABEL_151;
            if ((v81 & 1) != 0)
              goto LABEL_110;
            v82 = BYTE2(v136);
            if (BYTE2(v136) == 3)
            {
              if (v137)
                goto LABEL_151;
              v83 = *(unsigned __int8 *)(v44 + 5);
              if (v83 == 61)
              {
LABEL_192:
                v85 = *(_QWORD *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x30);
                if (!v85)
                  v85 = *(_QWORD *)(v44 + 16);
                goto LABEL_194;
              }
LABEL_185:
              if ((v83 - 39) <= 0xA)
              {
                if ((*(_BYTE *)(v44 + 40) & 7u) > 2)
                {
                  LOBYTE(v146) = 0;
                  LOBYTE(v147) = 0;
                  v86 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v44, (WTF *)&v146);
                  if (v87)
                    v84 = v86;
                  else
                    v84 = 0;
                }
                else
                {
                  v84 = *(_QWORD *)(v44 + 24);
                }
                if (v84 <= v78)
                  goto LABEL_151;
                v82 = BYTE2(v136);
              }
            }
            else
            {
              v83 = *(unsigned __int8 *)(v44 + 5);
              if (v83 != 61)
                goto LABEL_185;
              if (BYTE2(v136) == 1)
                goto LABEL_151;
            }
            if ((*(_WORD *)(v80 + 12) & 0x800) == 0 || v82 == 3)
              goto LABEL_192;
            if ((*(_WORD *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v85 = (*(uint64_t (**)(uint64_t, JSC::JSObject *))(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)v44 & 0xFFFFFFFE)
                                                                                          + 0x4C)
                                                                        + 0xB0))(v44, a2);
            }
            else
            {
              v85 = *(_QWORD *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x30);
              if (!v85)
                v85 = *(_QWORD *)(v44 + 16);
            }
            if (*((_DWORD *)v79 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v79) & 1) != 0)
              goto LABEL_151;
LABEL_194:
            if ((v85 & 0xFFFE000000000002) != 0)
              goto LABEL_151;
            v44 = v85;
            if (*(unsigned __int8 *)(v85 + 5) <= 0x16u)
              goto LABEL_151;
            continue;
          }
        }
        v45 = (_BYTE *)(v50 + 6);
        v124 = v50;
        v5 = v50;
        if ((*(_BYTE *)(v50 + 6) & 8) != 0)
          goto LABEL_119;
      }
      v34 = HIDWORD(v49);
      if ((int)v49 > 63)
      {
        v58 = *(_QWORD *)(v5 + 8) - 8;
        v59 = 0x3F00000000 - (v49 << 32);
      }
      else
      {
        v58 = v5 + 16;
        v59 = v49 << 32;
      }
      v18 = *(_QWORD *)(v58 + (v59 >> 29));
      if ((v18 & 0xFFFE000000000002) != 0)
      {
LABEL_108:
        v130 = (WTF::StringImpl *)v18;
        v134 = (WebCore::JSHTMLAllCollection *)v5;
        goto LABEL_109;
      }
      v60 = *(unsigned __int8 *)(v18 + 5);
      if (v60 != 6)
      {
        if (v60 == 5)
          goto LABEL_117;
        goto LABEL_108;
      }
      v37 = *(_DWORD *)(v47 + 16) & 3;
      v62 = *(_QWORD *)(v18 + 16);
      if (MEMORY[0x1E0CBE830] != 16 * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C))
      {
        v130 = *(WTF::StringImpl **)(v18 + 8);
        v131 = v62;
        LODWORD(v132) = HIDWORD(v49);
        v134 = (WebCore::JSHTMLAllCollection *)v5;
        goto LABEL_134;
      }
      v40 = *(_QWORD *)(v18 + 24);
      v39 = *(_QWORD *)(v18 + 32);
      v130 = *(WTF::StringImpl **)(v18 + 8);
      v131 = v62;
      LODWORD(v132) = HIDWORD(v49);
      v134 = (WebCore::JSHTMLAllCollection *)v5;
LABEL_114:
      BYTE1(v136) = 3;
      if (v37 != 2)
        LOBYTE(v136) = 1;
      HIBYTE(v136) = 1;
      v140 = v40;
      v141 = v39;
      goto LABEL_110;
    }
    v124 = v44;
LABEL_119:
    if (!v15)
      goto LABEL_221;
    v63 = *((_DWORD *)v15 + 4);
    if ((v63 & 0x20) != 0)
      goto LABEL_221;
    v64 = (_BYTE *)*((_QWORD *)v15 + 1);
    v65 = *((unsigned int *)v15 + 1);
    if ((v63 & 4) != 0)
    {
      if (!(_DWORD)v65)
        goto LABEL_221;
      v66 = *v64 - 48;
      if (v66 > 9 || v65 >= 2 && *v64 == 48)
        goto LABEL_221;
      v88 = v64 + 1;
      v89 = v65 - 1;
      while (v89)
      {
        if (v66 <= 0x19999999)
        {
          v90 = *v88 - 48;
          if (v90 <= 9)
          {
            v33 = __CFADD__(v90, 10 * v66);
            v66 = v90 + 10 * v66;
            ++v88;
            --v89;
            if (!v33)
              continue;
          }
        }
        goto LABEL_221;
      }
    }
    else
    {
      if (!(_DWORD)v65)
        goto LABEL_221;
      v66 = *(unsigned __int16 *)v64 - 48;
      if (v66 > 9 || v65 >= 2 && *(_WORD *)v64 == 48)
        goto LABEL_221;
      v67 = (unsigned __int16 *)(v64 + 2);
      v68 = v65 - 1;
      while (v68)
      {
        if (v66 <= 0x19999999)
        {
          v69 = *v67 - 48;
          if (v69 <= 9)
          {
            v33 = __CFADD__(v69, 10 * v66);
            v66 = v69 + 10 * v66;
            ++v67;
            --v68;
            if (!v33)
              continue;
          }
        }
        goto LABEL_221;
      }
    }
    if (v66 == -1)
    {
LABEL_221:
      v91 = (JSC::VM *)*((_QWORD *)a2 + 7);
      while (1)
      {
        v92 = *(_DWORD *)v124 & 0xFFFFFFFE;
        v93 = 16 * v92;
        if ((*(_BYTE *)(v124 + 6) & 8) != 0)
          break;
        if ((_DWORD)v22)
        {
          if ((v22 & ~*(_DWORD *)(16 * v92 + 0x20)) == 0)
          {
            v94 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * v92), v91);
            if (v94)
            {
              v146 = v15;
              v95 = JSC::PropertyTable::get(v94, (uint64_t *)&v146);
              v25 = v95;
              if ((_DWORD)v95 != -1)
              {
                v34 = HIDWORD(v95);
                if ((int)v95 > 63)
                {
                  v108 = *(_QWORD *)(v124 + 8) - 8;
                  v109 = 0x3F00000000 - (v95 << 32);
                }
                else
                {
                  v108 = v124 + 16;
                  v109 = v95 << 32;
                }
                v18 = *(_QWORD *)(v108 + (v109 >> 29));
                if ((v18 & 0xFFFE000000000002) == 0)
                {
                  v110 = *(unsigned __int8 *)(v18 + 5);
                  if (v110 != 6)
                  {
                    if (v110 != 5)
                      goto LABEL_287;
LABEL_117:
                    JSC::JSObject::fillGetterPropertySlot();
LABEL_110:
                    v61 = 0;
                    v126[0] = 0;
                    v128 = 0;
LABEL_155:
                    if (v139)
                    {
                      v74 = *((_DWORD *)v138 + 1);
                      if (!v74)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x194BB3E40);
                      }
                      *((_DWORD *)v138 + 1) = v74 - 1;
                    }
                    if (v144 && v143 != -1)
                    {
                      ((void (*)(WTF::StringImpl **, char *))off_1E328BDB0[v143])(&v146, v142);
                      v61 = v128;
                    }
                    if (v61)
                    {
                      v76 = WebCore::JSConverter<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::HTMLCollection>,WebCore::IDLInterface<WebCore::Element>>>>::convert<std::variant<WTF::RefPtr<WebCore::HTMLCollection,WTF::RawPtrTraits<WebCore::HTMLCollection>,WTF::DefaultRefDerefTraits<WebCore::HTMLCollection>>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>((uint64_t)a2, *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), (uint64_t)v126, (WebCore::Element *)v18);
                      if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
                      {
                        OwnPropertySlotByIndex = 0;
                      }
                      else
                      {
                        *(_QWORD *)a4 = v76;
                        *(_DWORD *)(a4 + 16) = 6;
                        *(_QWORD *)(a4 + 32) = this;
                        OwnPropertySlotByIndex = 1;
                        *(_BYTE *)(a4 + 49) = 1;
                      }
                      if (v128 && v127 != -1)
                        ((void (*)(WTF::StringImpl **, char *))off_1E328BDB0[v127])(&v146, v126);
LABEL_168:
                      v77 = v129;
                      v129 = 0;
                      if (v77)
                      {
                        if (*(_DWORD *)v77 == 2)
                          WTF::StringImpl::destroy(v77, v75);
                        else
                          *(_DWORD *)v77 -= 2;
                      }
                      return OwnPropertySlotByIndex;
                    }
LABEL_167:
                    OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex();
                    goto LABEL_168;
                  }
                  v37 = *(_DWORD *)(v93 + 16) & 3;
                  v111 = *(_QWORD *)(v18 + 16);
                  if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C))
                  {
                    v40 = *(_QWORD *)(v18 + 24);
                    v39 = *(_QWORD *)(v18 + 32);
                    v130 = *(WTF::StringImpl **)(v18 + 8);
                    v131 = v111;
                    LODWORD(v132) = HIDWORD(v95);
                    v134 = (WebCore::JSHTMLAllCollection *)v124;
                    goto LABEL_114;
                  }
                  v130 = *(WTF::StringImpl **)(v18 + 8);
                  v131 = v111;
                  LODWORD(v132) = HIDWORD(v95);
                  v134 = (WebCore::JSHTMLAllCollection *)v124;
LABEL_134:
                  BYTE1(v136) = 3;
                  if (v37 != 2)
                    LOBYTE(v136) = 1;
                  goto LABEL_110;
                }
LABEL_287:
                v130 = (WTF::StringImpl *)v18;
                v134 = (WebCore::JSHTMLAllCollection *)v124;
LABEL_109:
                v132 = __PAIR64__(v25, v34);
                LOWORD(v136) = 257;
                goto LABEL_110;
              }
            }
          }
        }
        if ((*(_BYTE *)(v124 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
          goto LABEL_110;
LABEL_228:
        if ((*(_WORD *)(v93 + 12) & 0x800) == 0)
        {
          v96 = *(_DWORD *)v124;
LABEL_230:
          v97 = *(_QWORD *)(16 * (v96 & 0xFFFFFFFE) + 0x30);
          if (!v97)
            v97 = *(_QWORD *)(v124 + 16);
          goto LABEL_232;
        }
        v96 = *(_DWORD *)v124;
        if (BYTE2(v136) == 3)
          goto LABEL_230;
        v105 = 16 * (v96 & 0xFFFFFFFE);
        if ((*(_WORD *)(v105 + 12) & 0x800) != 0)
        {
          v97 = (*(uint64_t (**)(uint64_t, JSC::JSObject *))(16 * *(unsigned int *)(v105 + 76) + 0xB0))(v124, a2);
        }
        else
        {
          v97 = *(_QWORD *)(v105 + 48);
          if (!v97)
            v97 = *(_QWORD *)(v124 + 16);
        }
        if (*((_DWORD *)v91 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v91) & 1) != 0)
          goto LABEL_151;
LABEL_232:
        if ((v97 & 0xFFFE000000000002) == 0)
        {
          v124 = v97;
          if (*(unsigned __int8 *)(v97 + 5) > 0x16u)
            continue;
        }
        goto LABEL_151;
      }
      v98 = (*(uint64_t (**)(uint64_t, JSC::JSObject *, WTF::StringImpl *, WTF::StringImpl **))(16 * *(unsigned int *)(16 * v92 + 0x4C) + 0x68))(v124, a2, v15, &v130);
      if (*((_DWORD *)v91 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v91) & 1) != 0)
        goto LABEL_151;
      if ((v98 & 1) != 0)
        goto LABEL_110;
      if (BYTE2(v136) == 3)
      {
        if (v137)
          goto LABEL_151;
        v99 = *(unsigned __int8 *)(v124 + 5);
        if (v99 == 61)
          goto LABEL_228;
      }
      else
      {
        v99 = *(unsigned __int8 *)(v124 + 5);
        if (v99 == 61)
        {
          if (BYTE2(v136) == 1)
            goto LABEL_151;
          goto LABEL_228;
        }
      }
      if (!v15)
        goto LABEL_228;
      if ((v99 - 50) < 0xFFFFFFF5)
        goto LABEL_228;
      v100 = *((_DWORD *)v15 + 4);
      if ((v100 & 0x20) != 0)
        goto LABEL_228;
      v101 = *((unsigned int *)v15 + 1);
      if (!(_DWORD)v101)
        goto LABEL_228;
      v102 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
      if ((v100 & 4) != 0)
      {
        v103 = *v102;
        if ((_DWORD)v101 == 1)
        {
LABEL_264:
          if ((v103 - 48) < 0xA)
            goto LABEL_151;
          goto LABEL_228;
        }
        if (v103 == 45)
        {
          v104 = v102[1];
LABEL_268:
          if ((v104 - 48) >= 0xA)
          {
            if ((_DWORD)v101 != 9 || v104 != 73)
              goto LABEL_228;
          }
          else if ((_DWORD)v101 == 2)
          {
            goto LABEL_151;
          }
LABEL_279:
          v5 = v5 & 0xFFFFFF0000000000 | v101 | ((unint64_t)((v100 >> 2) & 1) << 32);
          JSC::jsToNumber();
          v106 = (const WTF::StringImpl *)WTF::numberToString();
          if ((WTF::equal(v15, v106, v107) & 1) != 0)
            goto LABEL_151;
          goto LABEL_228;
        }
      }
      else
      {
        v103 = *(unsigned __int16 *)v102;
        if ((_DWORD)v101 == 1)
          goto LABEL_264;
        if (v103 == 45)
        {
          v104 = *((unsigned __int16 *)v102 + 1);
          goto LABEL_268;
        }
      }
      if ((v103 - 48) >= 0xA && ((_DWORD)v101 != 8 || v103 != 73) && ((_DWORD)v101 != 3 || v103 != 78))
        goto LABEL_228;
      goto LABEL_279;
    }
    v112 = v66;
    v113 = (JSC::VM *)*((_QWORD *)a2 + 7);
    while (1)
    {
      v114 = 16 * (*(_DWORD *)v44 & 0xFFFFFFFE);
      v115 = (*(uint64_t (**)(uint64_t, JSC::JSObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v114 + 0x4C) + 0x70))(v44, a2, v112, &v130);
      v116 = v115;
      if (*((_DWORD *)v113 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v113);
        if (((hasExceptionsAfterHandlingTraps | v116) & 1) != 0)
        {
          if ((hasExceptionsAfterHandlingTraps & 1) == 0)
            goto LABEL_110;
          goto LABEL_151;
        }
      }
      else if ((v115 & 1) != 0)
      {
        goto LABEL_110;
      }
      v117 = BYTE2(v136);
      if (BYTE2(v136) == 3)
      {
        if (v137)
          goto LABEL_151;
        v118 = *(unsigned __int8 *)(v44 + 5);
        if (v118 == 61)
        {
LABEL_310:
          v120 = *(_QWORD *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x30);
          if (!v120)
            v120 = *(_QWORD *)(v44 + 16);
          goto LABEL_312;
        }
      }
      else
      {
        v118 = *(unsigned __int8 *)(v44 + 5);
        if (v118 == 61)
        {
          if (BYTE2(v136) == 1)
            goto LABEL_151;
          goto LABEL_308;
        }
      }
      if ((v118 - 39) <= 0xA)
      {
        if ((*(_BYTE *)(v44 + 40) & 7u) > 2)
        {
          LOBYTE(v146) = 0;
          LOBYTE(v147) = 0;
          v122 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v44, (WTF *)&v146);
          if (v123)
            v119 = v122;
          else
            v119 = 0;
        }
        else
        {
          v119 = *(_QWORD *)(v44 + 24);
        }
        if (v119 <= v112)
          goto LABEL_151;
        v117 = BYTE2(v136);
      }
LABEL_308:
      if ((*(_WORD *)(v114 + 12) & 0x800) == 0 || v117 == 3)
        goto LABEL_310;
      if ((*(_WORD *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v120 = (*(uint64_t (**)(uint64_t, JSC::JSObject *))(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v44 & 0xFFFFFFFE)
                                                                                     + 0x4C)
                                                                   + 0xB0))(v44, a2);
      }
      else
      {
        v120 = *(_QWORD *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x30);
        if (!v120)
          v120 = *(_QWORD *)(v44 + 16);
      }
      if (*((_DWORD *)v113 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v113) & 1) != 0)
        goto LABEL_151;
LABEL_312:
      if ((v120 & 0xFFFE000000000002) == 0)
      {
        v44 = v120;
        if (*(unsigned __int8 *)(v120 + 5) > 0x16u)
          continue;
      }
      goto LABEL_151;
    }
  }
  v10 = (WebCore::JSDOMGlobalObject *)WebCore::CachedHTMLCollection<WebCore::AllDescendantsCollection,(WebCore::CollectionTraversalType)0>::item(*((_QWORD *)this + 3), a3);
  if (v10)
  {
    v12 = WebCore::toJS(a2, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), v10, v11);
    if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
      return 0;
    *(_QWORD *)a4 = v12;
    *(_DWORD *)(a4 + 16) = 2;
    *(_QWORD *)(a4 + 32) = this;
    OwnPropertySlotByIndex = 1;
    *(_BYTE *)(a4 + 49) = 1;
    return OwnPropertySlotByIndex;
  }
  return JSC::JSObject::getOwnPropertySlotByIndex();
}

uint64_t WebCore::JSHTMLAllCollection::getOwnPropertyNames(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  _QWORD *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl **v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  int v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74[2];
  char v75;
  WTF::StringImpl *v76;

  v6 = *(_QWORD *)(a1 + 24);
  if ((*(_BYTE *)(v6 + 80) & 1) != 0)
  {
    v9 = *(_DWORD *)(v6 + 60);
    if (v9)
      goto LABEL_7;
  }
  else
  {
    if ((*(_BYTE *)(v6 + 80) & 2) == 0 && !*(_QWORD *)(v6 + 48))
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 40) + 8);
      v8 = v7 + 4 * (((unint64_t)*(unsigned __int16 *)(v6 + 21) >> 5) & 0xF);
      ++*(_DWORD *)(v8 + 1768);
      if ((*(_BYTE *)(v6 + 22) & 2) != 0)
      {
        v76 = (WTF::StringImpl *)v6;
        WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v7 + 1760), (uint64_t *)&v76, (uint64_t)v74);
      }
    }
    v9 = WebCore::CollectionIndexCache<WebCore::AllDescendantsCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::computeNodeCountUpdatingListCache(v6 + 40, v6);
    *(_DWORD *)(v6 + 60) = v9;
    *(_BYTE *)(v6 + 80) |= 1u;
    if (v9)
    {
LABEL_7:
      v10 = 0;
      v11 = a3 + 1;
      while (1)
      {
        JSC::Identifier::from();
        v13 = v73;
        v76 = v73;
        v14 = *((_DWORD *)v73 + 4);
        if ((v14 & 0x20) != 0)
        {
          if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v73 + 36) & 4) != 0)
            goto LABEL_65;
        }
        else if ((a3[3] & 2) == 0)
        {
          goto LABEL_65;
        }
        v15 = *a3;
        v16 = *(unsigned int *)(*a3 + 20);
        if (v16 <= 0x13)
        {
          if ((_DWORD)v16)
          {
            v17 = *(WTF::StringImpl ***)(v15 + 8);
            while (*v17 != v73)
            {
              ++v17;
              if (!--v16)
                goto LABEL_24;
            }
            goto LABEL_65;
          }
LABEL_24:
          if ((v14 & 0x20) != 0)
          {
            v38 = *(_DWORD *)v13 + 2;
          }
          else
          {
            if ((v14 & 0x10) != 0)
            {
              *(_DWORD *)v13 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase();
              v13 = v74[0];
            }
            v38 = *(_DWORD *)v13;
            *(_DWORD *)v13 += 2;
            if (!v38)
            {
              WTF::StringImpl::destroy(v13, v12);
LABEL_59:
              v39 = (uint64_t *)(v15 + 8);
              v74[0] = v13;
              v40 = *(unsigned int *)(v15 + 20);
              if ((_DWORD)v40 == *(_DWORD *)(v15 + 16))
              {
                v41 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v39, v40 + 1, (unint64_t)v74);
                v40 = *(unsigned int *)(v15 + 20);
                v42 = *(_QWORD *)(v15 + 8);
                v43 = *v41;
                *v41 = 0;
                *(_QWORD *)(v42 + 8 * v40) = v43;
              }
              else
              {
                v44 = *v39;
                v74[0] = 0;
                *(_QWORD *)(v44 + 8 * v40) = v13;
              }
              *(_DWORD *)(v15 + 20) = v40 + 1;
              v45 = v74[0];
              v74[0] = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, v12);
                else
                  *(_DWORD *)v45 -= 2;
              }
              goto LABEL_65;
            }
          }
          *(_DWORD *)v13 = v38;
          goto LABEL_59;
        }
        if (!*v11 || !*(_DWORD *)(*v11 - 12))
          break;
LABEL_22:
        WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v76, (uint64_t)v74);
        if (v75)
        {
          v13 = v76;
          v15 = *a3;
          v14 = *((_DWORD *)v76 + 4);
          goto LABEL_24;
        }
LABEL_65:
        v46 = v73;
        v73 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, v12);
          else
            *(_DWORD *)v46 -= 2;
        }
        if (++v10 == v9)
          goto LABEL_75;
      }
      v18 = *(uint64_t **)(v15 + 8);
      v19 = &v18[v16];
      while (1)
      {
        v20 = *v18;
        v21 = *v11;
        if (*v11
          || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, 8u, 0), (v21 = *v11) != 0))
        {
          v22 = *(_DWORD *)(v21 - 8);
        }
        else
        {
          v22 = 0;
        }
        v23 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
        v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
        v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
        v26 = v22 & ((v25 >> 31) ^ v25);
        v27 = (uint64_t *)(v21 + 8 * v26);
        v28 = *v27;
        if (*v27)
        {
          v29 = 0;
          v30 = 1;
          while (v28 != v20)
          {
            if (v28 == -1)
              v29 = v27;
            v26 = (v26 + v30) & v22;
            v27 = (uint64_t *)(v21 + 8 * v26);
            v28 = *v27;
            ++v30;
            if (!*v27)
            {
              if (v29)
              {
                *v29 = 0;
                --*(_DWORD *)(*v11 - 16);
                v27 = v29;
              }
              goto LABEL_39;
            }
          }
          goto LABEL_52;
        }
LABEL_39:
        *v27 = v20;
        v31 = *v11;
        v32 = *v11 ? *(_DWORD *)(v31 - 12) + 1 : 1;
        *(_DWORD *)(v31 - 12) = v32;
        v33 = *v11;
        v34 = *v11 ? *(_DWORD *)(v33 - 12) : 0;
        v35 = (*(_DWORD *)(v33 - 16) + v34);
        v36 = *(unsigned int *)(v33 - 4);
        if (v36 > 0x400)
          break;
        if (3 * v36 <= 4 * v35)
        {
          if ((_DWORD)v36)
            goto LABEL_48;
          v37 = 8;
          goto LABEL_51;
        }
LABEL_52:
        if (++v18 == v19)
          goto LABEL_22;
      }
      if (v36 > 2 * v35)
        goto LABEL_52;
LABEL_48:
      v37 = (_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36));
LABEL_51:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, v37, v27);
      goto LABEL_52;
    }
  }
LABEL_75:
  if (!a4)
  {
    v48 = *(_QWORD **)(a1 + 24);
    (*(void (**)(_QWORD *))(*v48 + 80))(v48);
    v50 = v48[4];
    v51 = *(unsigned int *)(v50 + 28);
    if ((_DWORD)v51)
    {
      v52 = *(uint64_t **)(v50 + 16);
      v53 = &v52[v51];
      v54 = a3 + 1;
      do
      {
        v55 = *v52;
        if (*v52)
          *(_DWORD *)v55 += 2;
        v76 = (WTF::StringImpl *)v55;
        v56 = *(_DWORD *)(v55 + 16);
        if ((v56 & 0x20) != 0)
        {
          if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*(_BYTE *)(v55 + 36) & 4) != 0)
          {
LABEL_112:
            if (*(_DWORD *)v55 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v55, v49);
            else
              *(_DWORD *)v55 -= 2;
            goto LABEL_114;
          }
        }
        else if ((a3[3] & 2) == 0)
        {
          goto LABEL_112;
        }
        v57 = *a3;
        v58 = *(unsigned int *)(*a3 + 20);
        if (v58 > 0x13)
        {
          if (!*v54 || !*(_DWORD *)(*v54 - 12))
          {
            v61 = *(WTF::StringImpl ***)(v57 + 8);
            v62 = 8 * v58;
            do
            {
              v63 = *v61++;
              v73 = v63;
              WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v73, (uint64_t)v74);
              v62 -= 8;
            }
            while (v62);
          }
          WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v76, (uint64_t)v74);
          if (!v75)
            goto LABEL_111;
          v60 = v76;
          v57 = *a3;
          v56 = *((_DWORD *)v76 + 4);
          if ((v56 & 0x20) != 0)
            goto LABEL_101;
        }
        else
        {
          if ((_DWORD)v58)
          {
            v59 = *(_QWORD **)(v57 + 8);
            while (*v59 != v55)
            {
              ++v59;
              if (!--v58)
                goto LABEL_92;
            }
LABEL_111:
            if (v55)
              goto LABEL_112;
            goto LABEL_114;
          }
LABEL_92:
          v60 = (WTF::StringImpl *)v55;
          if ((v56 & 0x20) != 0)
          {
LABEL_101:
            v64 = *(_DWORD *)v60 + 2;
LABEL_104:
            *(_DWORD *)v60 = v64;
            goto LABEL_105;
          }
        }
        if ((v56 & 0x10) != 0)
        {
          *(_DWORD *)v60 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase();
          v60 = v74[0];
        }
        v64 = *(_DWORD *)v60;
        *(_DWORD *)v60 += 2;
        if (v64)
          goto LABEL_104;
        WTF::StringImpl::destroy(v60, v49);
LABEL_105:
        v65 = (uint64_t *)(v57 + 8);
        v74[0] = v60;
        v66 = *(unsigned int *)(v57 + 20);
        if ((_DWORD)v66 == *(_DWORD *)(v57 + 16))
        {
          v67 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v66 + 1, (unint64_t)v74);
          v66 = *(unsigned int *)(v57 + 20);
          v68 = *(_QWORD *)(v57 + 8);
          v69 = *v67;
          *v67 = 0;
          *(_QWORD *)(v68 + 8 * v66) = v69;
        }
        else
        {
          v70 = *v65;
          v74[0] = 0;
          *(_QWORD *)(v70 + 8 * v66) = v60;
        }
        *(_DWORD *)(v57 + 20) = v66 + 1;
        v71 = v74[0];
        v74[0] = 0;
        if (!v71)
          goto LABEL_111;
        if (*(_DWORD *)v71 != 2)
        {
          *(_DWORD *)v71 -= 2;
          goto LABEL_111;
        }
        WTF::StringImpl::destroy(v71, v49);
        if (v55)
          goto LABEL_112;
LABEL_114:
        ++v52;
      }
      while (v52 != v53);
    }
  }
  return JSC::JSObject::getOwnPropertyNames();
}

uint64_t WebCore::JSHTMLAllCollection::defineOwnProperty(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  JSC::VM *v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int OwnPropertySlotByIndex;
  int v21;
  int v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned int v33;
  int OwnStaticPropertySlot;
  BOOL v35;
  int hasExceptionsAfterHandlingTraps;
  _QWORD *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int isSupportedPropertyName;
  WTF::StringImpl *v41;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  JSC::VM *v52;
  WTF::StringImpl *v53;

  v8 = *(JSC::VM **)(a2 + 56);
  v52 = v8;
  if (a3)
  {
    v9 = *(_DWORD *)(a3 + 16);
    if ((v9 & 0x20) != 0)
      return JSC::JSObject::defineOwnProperty();
    v10 = *(_BYTE **)(a3 + 8);
    v11 = *(unsigned int *)(a3 + 4);
    if ((v9 & 4) != 0)
    {
      if (!(_DWORD)v11)
        goto LABEL_8;
      v12 = *v10 - 48;
      if (v12 > 9 || v11 >= 2 && *v10 == 48)
        goto LABEL_8;
      v43 = v10 + 1;
      v44 = v11 - 1;
      while (v44)
      {
        if (v12 <= 0x19999999)
        {
          v45 = *v43 - 48;
          if (v45 <= 9)
          {
            v26 = __CFADD__(v45, 10 * v12);
            v12 = v45 + 10 * v12;
            ++v43;
            --v44;
            if (!v26)
              continue;
          }
        }
        goto LABEL_8;
      }
    }
    else
    {
      if (!(_DWORD)v11)
        goto LABEL_8;
      v12 = *(unsigned __int16 *)v10 - 48;
      if (v12 > 9 || v11 >= 2 && *(_WORD *)v10 == 48)
        goto LABEL_8;
      v23 = (unsigned __int16 *)(v10 + 2);
      v24 = v11 - 1;
      while (v24)
      {
        if (v12 <= 0x19999999)
        {
          v25 = *v23 - 48;
          if (v25 <= 9)
          {
            v26 = __CFADD__(v25, 10 * v12);
            v12 = v25 + 10 * v12;
            ++v23;
            --v24;
            if (!v26)
              continue;
          }
        }
        goto LABEL_8;
      }
    }
    if (v12 != -1)
    {
      if (a5)
        JSC::throwTypeError();
      return 0;
    }
  }
LABEL_8:
  v51 = *(_QWORD *)(a2 + 56);
  ++*((_DWORD *)v8 + 1);
  if (!(a3 >> 4)
    || ((a3 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x20)) != 0
    || (v13 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v8)) == 0
    || (v53 = (WTF::StringImpl *)a3, v14 = JSC::PropertyTable::get(v13, (uint64_t *)&v53), (_DWORD)v14 == -1))
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
    {
      OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot();
      OwnPropertySlotByIndex = OwnStaticPropertySlot;
      if (!a3 || (OwnStaticPropertySlot & 1) != 0)
        goto LABEL_24;
    }
    else if (!a3)
    {
      goto LABEL_23;
    }
    v15 = *(_DWORD *)(a3 + 16);
    if ((v15 & 0x20) == 0)
    {
      v16 = *(_BYTE **)(a3 + 8);
      v17 = *(unsigned int *)(a3 + 4);
      if ((v15 & 4) != 0)
      {
        if ((_DWORD)v17)
        {
          v46 = *v16 - 48;
          if (v46 > 9 || v17 >= 2 && *v16 == 48)
          {
LABEL_89:
            v47 = 0;
          }
          else
          {
            v48 = v16 + 1;
            v49 = v17 - 1;
            while (v49)
            {
              if (v46 > 0x19999999)
                goto LABEL_89;
              v50 = *v48 - 48;
              if (v50 > 9)
                goto LABEL_89;
              v47 = 0;
              v26 = __CFADD__(v50, 10 * v46);
              v46 = v50 + 10 * v46;
              ++v48;
              --v49;
              if (v26)
                goto LABEL_90;
            }
            v47 = 0x100000000;
            if (v46 == -1)
              v47 = 0;
          }
        }
        else
        {
          v47 = 0;
        }
LABEL_90:
        if ((v47 & 0x100000000) == 0)
          goto LABEL_23;
      }
      else
      {
        if ((_DWORD)v17)
        {
          v18 = *(unsigned __int16 *)v16 - 48;
          if (v18 > 9 || v17 >= 2 && *(_WORD *)v16 == 48)
          {
LABEL_20:
            v19 = 0;
          }
          else
          {
            v31 = (unsigned __int16 *)(v16 + 2);
            v32 = v17 - 1;
            while (v32)
            {
              if (v18 <= 0x19999999)
              {
                v33 = *v31 - 48;
                if (v33 <= 9)
                {
                  v26 = __CFADD__(v33, 10 * v18);
                  v18 = v33 + 10 * v18;
                  ++v31;
                  --v32;
                  if (!v26)
                    continue;
                }
              }
              goto LABEL_20;
            }
            v35 = v18 == -1;
            v19 = 0x100000000;
            if (v35)
              v19 = 0;
          }
        }
        else
        {
          v19 = 0;
        }
        if ((v19 & 0x100000000) == 0)
          goto LABEL_23;
      }
      OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex();
      goto LABEL_24;
    }
LABEL_23:
    OwnPropertySlotByIndex = 0;
    goto LABEL_24;
  }
  if ((int)v14 > 63)
  {
    v27 = *(_QWORD *)(a1 + 8) - 8;
    v28 = 0x3F00000000 - (v14 << 32);
  }
  else
  {
    v27 = a1 + 16;
    v28 = v14 << 32;
  }
  v29 = *(_QWORD *)(v27 + (v28 >> 29));
  if ((v29 & 0xFFFE000000000002) != 0)
    goto LABEL_40;
  v30 = *(unsigned __int8 *)(v29 + 5);
  if (v30 == 6)
  {
    OwnPropertySlotByIndex = 1;
    goto LABEL_24;
  }
  if (v30 != 5)
  {
LABEL_40:
    OwnPropertySlotByIndex = 1;
    goto LABEL_24;
  }
  JSC::JSObject::fillGetterPropertySlot();
  OwnPropertySlotByIndex = 1;
LABEL_24:
  v21 = *(_DWORD *)(v51 + 4);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x194BB4FC0);
  }
  *(_DWORD *)(v51 + 4) = v21 - 1;
  if (*((_DWORD *)v52 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v52);
    if (((hasExceptionsAfterHandlingTraps | OwnPropertySlotByIndex) & 1) != 0)
    {
      v22 = hasExceptionsAfterHandlingTraps ^ 1;
      goto LABEL_67;
    }
  }
  else if ((OwnPropertySlotByIndex & 1) != 0)
  {
    v22 = 1;
    goto LABEL_67;
  }
  v37 = *(_QWORD **)(a1 + 24);
  if (a3)
  {
    *(_DWORD *)a3 += 2;
    v38 = a3;
  }
  else
  {
    v38 = 0;
  }
  v53 = (WTF::StringImpl *)v38;
  isSupportedPropertyName = WebCore::HTMLCollection::isSupportedPropertyName(v37, (uint64_t *)&v53);
  v41 = v53;
  v53 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v39);
    else
      *(_DWORD *)v41 -= 2;
  }
  if ((isSupportedPropertyName & a5) == 1)
  {
    JSC::throwTypeError();
    v22 = 0;
  }
  else
  {
    v22 = isSupportedPropertyName ^ 1;
  }
LABEL_67:
  if (v22)
    return JSC::JSObject::defineOwnProperty();
  return 0;
}

uint64_t WebCore::JSHTMLAllCollection::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSHTMLAllCollection::createPrototype(WebCore::JSHTMLAllCollection *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSHTMLAllCollectionPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSHTMLAllCollectionPrototype::create(WebCore::JSHTMLAllCollectionPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSHTMLAllCollectionPrototype::finishCreation((WebCore::JSHTMLAllCollectionPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLAllCollection>,(WebCore::DOMConstructorID)508>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4064);
  if (!result)
  {
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLAllCollection>::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 664));
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLAllCollection>::create(a1, Structure, (JSC::JSCell **)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4064) = result;
    if (result)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v6 = (JSC::Heap *)(a1 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)a2);
        return v7;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSHTMLAllCollection::legacyPlatformObjectGetOwnProperty(uint64_t a1, JSC::VM **a2, unint64_t a3, uint64_t a4, char a5)
{
  JSC::VM *v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int v13;
  WebCore::HTMLAllCollection *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  JSC::VM *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  _BYTE *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned __int16 *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t *v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned int v45;
  WebCore::JSDOMGlobalObject *v46;
  WebCore::Element *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  int v54;
  _BYTE *v55;
  uint64_t v56;
  unsigned int v57;
  unsigned __int16 *v58;
  uint64_t j;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  _BYTE *v71;
  JSC::VM *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  _BYTE *v81;
  uint64_t v82;
  unsigned int v83;
  unsigned __int16 *v84;
  uint64_t v85;
  unsigned int v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  _BYTE *v96;
  uint64_t v97;
  unsigned int v98;
  unsigned __int16 *v99;
  uint64_t v100;
  unsigned int v101;
  unsigned __int8 *v102;
  uint64_t v103;
  unsigned int v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  _BYTE *v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  unsigned __int16 *v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t OwnStaticPropertySlot;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  unint64_t v129;
  JSC::VM *v130;
  uint64_t v131;
  char v132;
  int v133;
  int v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char v138;
  unsigned __int8 *v139;
  uint64_t v140;
  unsigned int v141;
  JSC::VM *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  int v146;
  uint64_t v147;
  char v148;
  int v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  unsigned __int8 *v153;
  int v154;
  int v155;
  BOOL v156;
  const WTF::StringImpl *v157;
  const unsigned __int8 *v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  unint64_t v163;
  JSC::VM *v164;
  uint64_t v165;
  int v166;
  int v167;
  int v168;
  int v169;
  unint64_t v170;
  uint64_t v171;
  int hasExceptionsAfterHandlingTraps;
  unint64_t v173;
  char v174;
  unsigned __int8 *v175;
  uint64_t i;
  unsigned int v177;
  unsigned __int8 *v178;
  uint64_t v179;
  unsigned int v180;
  unint64_t v181;
  JSC::VM *v182;
  char v183[8];
  int v184;
  unsigned __int8 v185;
  WTF::StringImpl *v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  char v193;
  JSC::VM *v194;
  char v195;
  uint64_t v196;
  uint64_t v197;
  char v198[8];
  int v199;
  unsigned __int8 v200;
  char v201;
  unint64_t v202;
  unsigned int v203;
  char v204;
  uint64_t v205;

  v205 = *MEMORY[0x1E0C80C00];
  v9 = a2[7];
  if (!a3)
  {
    if ((a5 & 1) != 0)
    {
      if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
        return JSC::JSObject::getOwnStaticPropertySlot();
      return 0;
    }
    v15 = 0;
    v14 = *(WebCore::HTMLAllCollection **)(a1 + 24);
LABEL_10:
    v186 = v15;
    WebCore::HTMLAllCollection::namedItemOrItems(v14, (const WTF::AtomString *)&v186, (uint64_t)&v202);
    v18 = v186;
    v186 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v16);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (v204)
    {
      LOBYTE(v186) = 0;
      LODWORD(v187) = -1;
      v19 = v203;
      if (v203 == -1)
      {
        v198[0] = 0;
        v199 = -1;
        v200 = 1;
      }
      else
      {
        ((void (*)(char *, WTF::StringImpl **, unint64_t *))off_1E328BDC0[v203])(&v201, &v186, &v202);
        LODWORD(v187) = v19;
        v198[0] = 0;
        v199 = -1;
        ((void (*)(char *, char *, WTF::StringImpl **))off_1E328D368[v19])(&v201, v198, &v186);
        v199 = v19;
        v200 = 1;
        if ((_DWORD)v187 != -1)
          ((void (*)(char *, WTF::StringImpl **))off_1E328BDB0[v187])(&v201, &v186);
      }
      if (v204 && v203 != -1)
        ((void (*)(WTF::StringImpl **, unint64_t *))off_1E328BDB0[v203])(&v186, &v202);
    }
    else
    {
      v198[0] = 0;
      v200 = 0;
    }
    if (v200)
    {
      v24 = a2[7];
      v188 = 0xFFFFFFFF00000000;
      v190 = 0;
      v191 = 0;
      v189 = a1;
      v192 = 196608;
      v193 = 0;
      v196 = 0;
      v197 = 0;
      v194 = v24;
      ++*((_DWORD *)v24 + 1);
      v195 = 1;
      v25 = a3 >> 4;
      if ((a3 >> 4)
        && (v26 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), (v25 & ~*(_DWORD *)(v26 + 0x20)) == 0)
        && (v27 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v24)) != 0&& (v202 = a3, v28 = JSC::PropertyTable::get(v27, (uint64_t *)&v202), (_DWORD)v28 != -1))
      {
        v36 = (uint64_t *)(a1 + 8 * (int)v28 + 16);
        if ((int)v28 >= 64)
          v36 = (uint64_t *)(*(_QWORD *)(a1 + 8) + ((uint64_t)(0x3F00000000 - (v28 << 32)) >> 29) - 8);
        v17 = *v36;
        if ((*v36 & 0xFFFE000000000002) != 0)
          goto LABEL_54;
        v37 = *(unsigned __int8 *)(v17 + 5);
        if (v37 == 6)
        {
          v39 = *(_DWORD *)(v26 + 16) & 3;
          v40 = *(_QWORD *)(v17 + 16);
          if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C))
          {
            v42 = *(_QWORD *)(v17 + 24);
            v41 = *(_QWORD *)(v17 + 32);
            v186 = *(WTF::StringImpl **)(v17 + 8);
            v187 = v40;
            LODWORD(v188) = HIDWORD(v28);
            v190 = a1;
            BYTE1(v192) = 3;
            if (v39 != 2)
              LOBYTE(v192) = 1;
            HIBYTE(v192) = 1;
            v196 = v42;
            v197 = v41;
          }
          else
          {
            v186 = *(WTF::StringImpl **)(v17 + 8);
            v187 = v40;
            LODWORD(v188) = HIDWORD(v28);
            v190 = a1;
            BYTE1(v192) = 3;
            if (v39 != 2)
              LOBYTE(v192) = 1;
          }
          goto LABEL_55;
        }
        if (v37 == 5)
        {
          JSC::JSObject::fillGetterPropertySlot();
        }
        else
        {
LABEL_54:
          v186 = (WTF::StringImpl *)v17;
          v190 = a1;
          v188 = __PAIR64__(v28, HIDWORD(v28));
          LOWORD(v192) = 257;
        }
      }
      else
      {
        if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
          goto LABEL_55;
        if (!a3)
          goto LABEL_129;
        v29 = *(_DWORD *)(a3 + 16);
        if ((v29 & 0x20) != 0)
          goto LABEL_129;
        v30 = *(_BYTE **)(a3 + 8);
        v31 = *(unsigned int *)(a3 + 4);
        if ((v29 & 4) != 0)
        {
          if (!(_DWORD)v31)
            goto LABEL_129;
          v32 = *v30 - 48;
          if (v32 > 9 || v31 >= 2 && *v30 == 48)
            goto LABEL_129;
          v67 = v30 + 1;
          v68 = v31 - 1;
          while (v68)
          {
            if (v32 <= 0x19999999)
            {
              v69 = *v67 - 48;
              if (v69 <= 9)
              {
                v23 = __CFADD__(v69, 10 * v32);
                v32 = v69 + 10 * v32;
                ++v67;
                --v68;
                if (!v23)
                  continue;
              }
            }
            goto LABEL_129;
          }
        }
        else
        {
          if (!(_DWORD)v31)
            goto LABEL_129;
          v32 = *(unsigned __int16 *)v30 - 48;
          if (v32 > 9 || v31 >= 2 && *(_WORD *)v30 == 48)
            goto LABEL_129;
          v33 = (unsigned __int16 *)(v30 + 2);
          v34 = v31 - 1;
          while (v34)
          {
            if (v32 <= 0x19999999)
            {
              v35 = *v33 - 48;
              if (v35 <= 9)
              {
                v23 = __CFADD__(v35, 10 * v32);
                v32 = v35 + 10 * v32;
                ++v33;
                --v34;
                if (!v23)
                  continue;
              }
            }
            goto LABEL_129;
          }
        }
        if (v32 == -1 || !JSC::JSObject::getOwnPropertySlotByIndex())
        {
LABEL_129:
          v182 = v9;
          v70 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x30);
          if (!v70)
            v70 = *(_QWORD *)(a1 + 16);
          if ((v70 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v70 + 5) < 0x17u)
            goto LABEL_210;
          v71 = (_BYTE *)(v70 + 6);
          if ((*(_BYTE *)(v70 + 6) & 8) == 0)
          {
            v72 = a2[7];
            v73 = v70;
            while (1)
            {
              v74 = *(_DWORD *)v73 & 0xFFFFFFFE;
              v75 = 16 * v74;
              if ((_DWORD)v25)
              {
                if ((v25 & ~*(_DWORD *)(16 * v74 + 0x20)) == 0)
                {
                  v76 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v75, v72);
                  if (v76)
                  {
                    v202 = a3;
                    v77 = JSC::PropertyTable::get(v76, (uint64_t *)&v202);
                    v78 = v77;
                    if ((_DWORD)v77 != -1)
                    {
                      v87 = HIDWORD(v77);
                      if ((int)v77 > 63)
                      {
                        v88 = *(_QWORD *)(v73 + 8) - 8;
                        v89 = 0x3F00000000 - (v77 << 32);
                      }
                      else
                      {
                        v88 = v73 + 16;
                        v89 = v77 << 32;
                      }
                      v17 = *(_QWORD *)(v88 + (v89 >> 29));
                      if ((v17 & 0xFFFE000000000002) == 0)
                      {
                        v90 = *(unsigned __int8 *)(v17 + 5);
                        if (v90 == 6)
                        {
                          v91 = *(_DWORD *)(v75 + 16) & 3;
                          v92 = *(_QWORD *)(v17 + 16);
                          if (MEMORY[0x1E0CBE830] == 16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C))
                          {
                            v94 = *(_QWORD *)(v17 + 24);
                            v93 = *(_QWORD *)(v17 + 32);
                            v186 = *(WTF::StringImpl **)(v17 + 8);
                            v187 = v92;
                            LODWORD(v188) = HIDWORD(v77);
                            v190 = v73;
LABEL_173:
                            BYTE1(v192) = 3;
                            if (v91 != 2)
                              LOBYTE(v192) = 1;
                            HIBYTE(v192) = 1;
                            v196 = v94;
                            v197 = v93;
                            goto LABEL_169;
                          }
                          v186 = *(WTF::StringImpl **)(v17 + 8);
                          v187 = v92;
                          LODWORD(v188) = HIDWORD(v77);
                          v190 = v73;
LABEL_193:
                          BYTE1(v192) = 3;
                          if (v91 != 2)
                            LOBYTE(v192) = 1;
                          goto LABEL_169;
                        }
                        if (v90 == 5)
                          goto LABEL_176;
                      }
                      v186 = (WTF::StringImpl *)v17;
                      v190 = v73;
LABEL_168:
                      v188 = __PAIR64__(v78, v87);
                      LOWORD(v192) = 257;
                      goto LABEL_169;
                    }
                  }
                }
              }
              if ((*v71 & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
                goto LABEL_169;
              v79 = *(_QWORD *)(v75 + 48);
              if (!v79)
                v79 = *(_QWORD *)(v73 + 16);
              if ((v79 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v79 + 5) < 0x17u)
                break;
              v71 = (_BYTE *)(v79 + 6);
              v73 = v79;
              if ((*(_BYTE *)(v79 + 6) & 8) != 0)
                goto LABEL_178;
            }
            if (!a3)
              goto LABEL_210;
            v80 = *(_DWORD *)(a3 + 16);
            if ((v80 & 0x20) != 0)
              goto LABEL_210;
            v81 = *(_BYTE **)(a3 + 8);
            v82 = *(unsigned int *)(a3 + 4);
            if ((v80 & 4) != 0)
            {
              if (!(_DWORD)v82)
                goto LABEL_210;
              v83 = *v81 - 48;
              if (v83 > 9 || v82 >= 2 && *v81 == 48)
                goto LABEL_210;
              v102 = v81 + 1;
              v103 = v82 - 1;
              while (v103)
              {
                if (v83 <= 0x19999999)
                {
                  v104 = *v102 - 48;
                  if (v104 <= 9)
                  {
                    v23 = __CFADD__(v104, 10 * v83);
                    v83 = v104 + 10 * v83;
                    ++v102;
                    --v103;
                    if (!v23)
                      continue;
                  }
                }
                goto LABEL_210;
              }
            }
            else
            {
              if (!(_DWORD)v82)
                goto LABEL_210;
              v83 = *(unsigned __int16 *)v81 - 48;
              if (v83 > 9 || v82 >= 2 && *(_WORD *)v81 == 48)
                goto LABEL_210;
              v84 = (unsigned __int16 *)(v81 + 2);
              v85 = v82 - 1;
              while (v85)
              {
                if (v83 <= 0x19999999)
                {
                  v86 = *v84 - 48;
                  if (v86 <= 9)
                  {
                    v23 = __CFADD__(v86, 10 * v83);
                    v83 = v86 + 10 * v83;
                    ++v84;
                    --v85;
                    if (!v23)
                      continue;
                  }
                }
                goto LABEL_210;
              }
            }
            if (v83 == -1)
            {
LABEL_210:
              v183[0] = 0;
              v185 = 0;
              v38 = v200;
              if (!v200)
                goto LABEL_214;
              v184 = -1;
              v105 = v199;
              v9 = v182;
              if (v199 != -1)
              {
                ((void (*)(unint64_t *, char *, char *))off_1E328D368[v199])(&v202, v183, v198);
                v184 = v105;
              }
              v38 = 1;
              v185 = 1;
LABEL_215:
              if (v195)
              {
                v106 = *((_DWORD *)v194 + 1);
                if (!v106)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194BB6294);
                }
                *((_DWORD *)v194 + 1) = v106 - 1;
              }
              if (v200 && v199 != -1)
              {
                ((void (*)(unint64_t *, char *))off_1E328BDB0[v199])(&v202, v198);
                v38 = v185;
              }
              if (v38)
              {
                v107 = WebCore::JSConverter<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::HTMLCollection>,WebCore::IDLInterface<WebCore::Element>>>>::convert<std::variant<WTF::RefPtr<WebCore::HTMLCollection,WTF::RawPtrTraits<WebCore::HTMLCollection>,WTF::DefaultRefDerefTraits<WebCore::HTMLCollection>>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>((uint64_t)a2, *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28), (uint64_t)v183, (WebCore::Element *)v17);
                if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
                {
                  v49 = 0;
                }
                else
                {
                  *(_QWORD *)a4 = v107;
                  *(_DWORD *)(a4 + 16) = 6;
                  *(_QWORD *)(a4 + 32) = a1;
                  v49 = 1;
                  *(_BYTE *)(a4 + 49) = 1;
                }
                if (v185)
                {
                  if (v184 != -1)
                    ((void (*)(unint64_t *, char *))off_1E328BDB0[v184])(&v202, v183);
                }
                return v49;
              }
              goto LABEL_227;
            }
            v129 = v83;
            v130 = a2[7];
            while (1)
            {
              v131 = 16 * (*(_DWORD *)v70 & 0xFFFFFFFE);
              v132 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v131 + 0x4C) + 0x70))(v70, a2, v129, &v186);
              if (*((_DWORD *)v130 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v130) & 1) != 0)
                goto LABEL_210;
              if ((v132 & 1) != 0)
                goto LABEL_169;
              v133 = BYTE2(v192);
              if (BYTE2(v192) == 3)
              {
                if (v193)
                  goto LABEL_210;
                v134 = *(unsigned __int8 *)(v70 + 5);
                if (v134 == 61)
                {
LABEL_298:
                  v136 = *(_QWORD *)(16 * (*(_DWORD *)v70 & 0xFFFFFFFE) + 0x30);
                  if (!v136)
                    v136 = *(_QWORD *)(v70 + 16);
                  goto LABEL_300;
                }
              }
              else
              {
                v134 = *(unsigned __int8 *)(v70 + 5);
                if (v134 == 61)
                {
                  if (BYTE2(v192) == 1)
                    goto LABEL_210;
                  goto LABEL_296;
                }
              }
              if ((v134 - 39) <= 0xA)
              {
                if ((*(_BYTE *)(v70 + 40) & 7u) > 2)
                {
                  LOBYTE(v202) = 0;
                  LOBYTE(v203) = 0;
                  v137 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v70, (WTF *)&v202);
                  if (v138)
                    v135 = v137;
                  else
                    v135 = 0;
                }
                else
                {
                  v135 = *(_QWORD *)(v70 + 24);
                }
                if (v135 <= v129)
                  goto LABEL_210;
                v133 = BYTE2(v192);
              }
LABEL_296:
              if ((*(_WORD *)(v131 + 12) & 0x800) == 0 || v133 == 3)
                goto LABEL_298;
              if ((*(_WORD *)(16 * (*(_DWORD *)v70 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
              {
                v136 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)v70 & 0xFFFFFFFE)
                                                                                        + 0x4C)
                                                                      + 0xB0))(v70, a2);
              }
              else
              {
                v136 = *(_QWORD *)(16 * (*(_DWORD *)v70 & 0xFFFFFFFE) + 0x30);
                if (!v136)
                  v136 = *(_QWORD *)(v70 + 16);
              }
              if (*((_DWORD *)v130 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v130) & 1) != 0)
                goto LABEL_210;
LABEL_300:
              if ((v136 & 0xFFFE000000000002) == 0)
              {
                v70 = v136;
                if (*(unsigned __int8 *)(v136 + 5) > 0x16u)
                  continue;
              }
              goto LABEL_210;
            }
          }
          v79 = v70;
LABEL_178:
          if (!a3)
            goto LABEL_328;
          v95 = *(_DWORD *)(a3 + 16);
          if ((v95 & 0x20) != 0)
            goto LABEL_328;
          v96 = *(_BYTE **)(a3 + 8);
          v97 = *(unsigned int *)(a3 + 4);
          if ((v95 & 4) != 0)
          {
            if (!(_DWORD)v97)
              goto LABEL_328;
            v98 = *v96 - 48;
            if (v98 > 9 || v97 >= 2 && *v96 == 48)
              goto LABEL_328;
            v139 = v96 + 1;
            v140 = v97 - 1;
            while (v140)
            {
              if (v98 <= 0x19999999)
              {
                v141 = *v139 - 48;
                if (v141 <= 9)
                {
                  v23 = __CFADD__(v141, 10 * v98);
                  v98 = v141 + 10 * v98;
                  ++v139;
                  --v140;
                  if (!v23)
                    continue;
                }
              }
              goto LABEL_328;
            }
          }
          else
          {
            if (!(_DWORD)v97)
              goto LABEL_328;
            v98 = *(unsigned __int16 *)v96 - 48;
            if (v98 > 9 || v97 >= 2 && *(_WORD *)v96 == 48)
              goto LABEL_328;
            v99 = (unsigned __int16 *)(v96 + 2);
            v100 = v97 - 1;
            while (v100)
            {
              if (v98 <= 0x19999999)
              {
                v101 = *v99 - 48;
                if (v101 <= 9)
                {
                  v23 = __CFADD__(v101, 10 * v98);
                  v98 = v101 + 10 * v98;
                  ++v99;
                  --v100;
                  if (!v23)
                    continue;
                }
              }
              goto LABEL_328;
            }
          }
          if (v98 == -1)
          {
LABEL_328:
            v142 = a2[7];
            while (1)
            {
              v143 = 16 * (*(_DWORD *)v79 & 0xFFFFFFFE);
              if ((*(_BYTE *)(v79 + 6) & 8) != 0)
                break;
              if ((_DWORD)v25)
              {
                if ((v25 & ~*(_DWORD *)(16 * (*(_DWORD *)v79 & 0xFFFFFFFE) + 0x20)) == 0)
                {
                  v144 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v79 & 0xFFFFFFFE)), v142);
                  if (v144)
                  {
                    v202 = a3;
                    v145 = JSC::PropertyTable::get(v144, (uint64_t *)&v202);
                    v78 = v145;
                    if ((_DWORD)v145 != -1)
                    {
                      v87 = HIDWORD(v145);
                      if ((int)v145 > 63)
                      {
                        v159 = *(_QWORD *)(v79 + 8) - 8;
                        v160 = 0x3F00000000 - (v145 << 32);
                      }
                      else
                      {
                        v159 = v79 + 16;
                        v160 = v145 << 32;
                      }
                      v17 = *(_QWORD *)(v159 + (v160 >> 29));
                      if ((v17 & 0xFFFE000000000002) == 0)
                      {
                        v161 = *(unsigned __int8 *)(v17 + 5);
                        if (v161 != 6)
                        {
                          if (v161 != 5)
                            goto LABEL_397;
LABEL_176:
                          JSC::JSObject::fillGetterPropertySlot();
LABEL_169:
                          v38 = 0;
                          v183[0] = 0;
                          v185 = 0;
LABEL_214:
                          v9 = v182;
                          goto LABEL_215;
                        }
                        v91 = *(_DWORD *)(v143 + 16) & 3;
                        v162 = *(_QWORD *)(v17 + 16);
                        if (MEMORY[0x1E0CBE830] == 16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C))
                        {
                          v94 = *(_QWORD *)(v17 + 24);
                          v93 = *(_QWORD *)(v17 + 32);
                          v186 = *(WTF::StringImpl **)(v17 + 8);
                          v187 = v162;
                          LODWORD(v188) = HIDWORD(v145);
                          v190 = v79;
                          goto LABEL_173;
                        }
                        v186 = *(WTF::StringImpl **)(v17 + 8);
                        v187 = v162;
                        LODWORD(v188) = HIDWORD(v145);
                        v190 = v79;
                        goto LABEL_193;
                      }
LABEL_397:
                      v186 = (WTF::StringImpl *)v17;
                      v190 = v79;
                      goto LABEL_168;
                    }
                  }
                }
              }
              if ((*(_BYTE *)(v79 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
                goto LABEL_169;
LABEL_335:
              if ((*(_WORD *)(v143 + 12) & 0x800) == 0)
              {
                v146 = *(_DWORD *)v79;
LABEL_337:
                v147 = *(_QWORD *)(16 * (v146 & 0xFFFFFFFE) + 0x30);
                if (!v147)
                  v147 = *(_QWORD *)(v79 + 16);
                goto LABEL_339;
              }
              v146 = *(_DWORD *)v79;
              if (BYTE2(v192) == 3)
                goto LABEL_337;
              v150 = 16 * (v146 & 0xFFFFFFFE);
              if ((*(_WORD *)(v150 + 12) & 0x800) != 0)
              {
                v147 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16 * *(unsigned int *)(v150 + 76) + 0xB0))(v79, a2);
              }
              else
              {
                v147 = *(_QWORD *)(v150 + 48);
                if (!v147)
                  v147 = *(_QWORD *)(v79 + 16);
              }
              if (*((_DWORD *)v142 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v142) & 1) != 0)
                goto LABEL_210;
LABEL_339:
              if ((v147 & 0xFFFE000000000002) == 0)
              {
                v79 = v147;
                if (*(unsigned __int8 *)(v147 + 5) > 0x16u)
                  continue;
              }
              goto LABEL_210;
            }
            v148 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v79 & 0xFFFFFFFE) + 0x4C) + 0x68))(v79, a2, a3, &v186);
            if (*((_DWORD *)v142 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v142) & 1) != 0)
              goto LABEL_210;
            if ((v148 & 1) != 0)
              goto LABEL_169;
            if (BYTE2(v192) == 3)
            {
              if (v193)
                goto LABEL_210;
              v149 = *(unsigned __int8 *)(v79 + 5);
              if (v149 == 61)
                goto LABEL_335;
            }
            else
            {
              v149 = *(unsigned __int8 *)(v79 + 5);
              if (v149 == 61)
              {
                if (BYTE2(v192) == 1)
                  goto LABEL_210;
                goto LABEL_335;
              }
            }
            if (!a3)
              goto LABEL_335;
            if ((v149 - 50) < 0xFFFFFFF5)
              goto LABEL_335;
            v151 = *(_DWORD *)(a3 + 16);
            if ((v151 & 0x20) != 0)
              goto LABEL_335;
            v152 = *(unsigned int *)(a3 + 4);
            if (!(_DWORD)v152)
              goto LABEL_335;
            v153 = *(unsigned __int8 **)(a3 + 8);
            if ((v151 & 4) != 0)
            {
              v154 = *v153;
              if ((_DWORD)v152 == 1)
              {
LABEL_371:
                if ((v154 - 48) < 0xA)
                  goto LABEL_210;
                goto LABEL_335;
              }
              if (v154 == 45)
              {
                v155 = v153[1];
                goto LABEL_375;
              }
            }
            else
            {
              v154 = *(unsigned __int16 *)v153;
              if ((_DWORD)v152 == 1)
                goto LABEL_371;
              if (v154 == 45)
              {
                v155 = *((unsigned __int16 *)v153 + 1);
LABEL_375:
                if ((v155 - 48) < 0xA)
                {
                  if ((_DWORD)v152 == 2)
                    goto LABEL_210;
LABEL_387:
                  v181 = v181 & 0xFFFFFF0000000000 | v152 | ((unint64_t)((v151 >> 2) & 1) << 32);
                  JSC::jsToNumber();
                  v157 = (const WTF::StringImpl *)WTF::numberToString();
                  if ((WTF::equal((WTF *)a3, v157, v158) & 1) != 0)
                    goto LABEL_210;
                  goto LABEL_335;
                }
                if ((_DWORD)v152 != 9)
                  goto LABEL_335;
                v156 = v155 == 73;
LABEL_385:
                if (!v156)
                  goto LABEL_335;
                goto LABEL_387;
              }
            }
            if ((v154 - 48) < 0xA || (_DWORD)v152 == 8 && v154 == 73)
              goto LABEL_387;
            if ((_DWORD)v152 != 3)
              goto LABEL_335;
            v156 = v154 == 78;
            goto LABEL_385;
          }
          v163 = v98;
          v164 = a2[7];
          while (1)
          {
            v165 = 16 * (*(_DWORD *)v70 & 0xFFFFFFFE);
            v166 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v165 + 0x4C) + 0x70))(v70, a2, v163, &v186);
            v167 = v166;
            if (*((_DWORD *)v164 + 20))
            {
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v164);
              if (((hasExceptionsAfterHandlingTraps | v167) & 1) != 0)
              {
                if ((hasExceptionsAfterHandlingTraps & 1) == 0)
                  goto LABEL_169;
                goto LABEL_210;
              }
            }
            else if ((v166 & 1) != 0)
            {
              goto LABEL_169;
            }
            v168 = BYTE2(v192);
            if (BYTE2(v192) == 3)
            {
              if (v193)
                goto LABEL_210;
              v169 = *(unsigned __int8 *)(v70 + 5);
              if (v169 == 61)
              {
LABEL_420:
                v171 = *(_QWORD *)(16 * (*(_DWORD *)v70 & 0xFFFFFFFE) + 0x30);
                if (!v171)
                  v171 = *(_QWORD *)(v70 + 16);
                goto LABEL_422;
              }
            }
            else
            {
              v169 = *(unsigned __int8 *)(v70 + 5);
              if (v169 == 61)
              {
                if (BYTE2(v192) == 1)
                  goto LABEL_210;
                goto LABEL_418;
              }
            }
            if ((v169 - 39) <= 0xA)
            {
              if ((*(_BYTE *)(v70 + 40) & 7u) > 2)
              {
                LOBYTE(v202) = 0;
                LOBYTE(v203) = 0;
                v173 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v70, (WTF *)&v202);
                if (v174)
                  v170 = v173;
                else
                  v170 = 0;
              }
              else
              {
                v170 = *(_QWORD *)(v70 + 24);
              }
              if (v170 <= v163)
                goto LABEL_210;
              v168 = BYTE2(v192);
            }
LABEL_418:
            if ((*(_WORD *)(v165 + 12) & 0x800) == 0 || v168 == 3)
              goto LABEL_420;
            if ((*(_WORD *)(16 * (*(_DWORD *)v70 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v171 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v70 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0xB0))(v70, a2);
            }
            else
            {
              v171 = *(_QWORD *)(16 * (*(_DWORD *)v70 & 0xFFFFFFFE) + 0x30);
              if (!v171)
                v171 = *(_QWORD *)(v70 + 16);
            }
            if (*((_DWORD *)v164 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v164) & 1) != 0)
              goto LABEL_210;
LABEL_422:
            if ((v171 & 0xFFFE000000000002) == 0)
            {
              v70 = v171;
              if (*(unsigned __int8 *)(v171 + 5) > 0x16u)
                continue;
            }
            goto LABEL_210;
          }
        }
      }
LABEL_55:
      v38 = 0;
      v183[0] = 0;
      v185 = 0;
      goto LABEL_215;
    }
LABEL_227:
    v9 = a2[7];
    goto LABEL_228;
  }
  v10 = *(_DWORD *)(a3 + 16);
  if ((v10 & 0x20) != 0)
  {
    if ((a5 & 1) == 0)
      goto LABEL_227;
    goto LABEL_228;
  }
  v11 = *(_BYTE **)(a3 + 8);
  v12 = *(unsigned int *)(a3 + 4);
  if ((v10 & 4) != 0)
  {
    if (!(_DWORD)v12 || (v13 = *v11 - 48, v13 > 9) || v12 >= 2 && *v11 == 48)
    {
LABEL_8:
      if ((a5 & 1) == 0)
      {
        v14 = *(WebCore::HTMLAllCollection **)(a1 + 24);
        *(_DWORD *)a3 += 2;
        v15 = (WTF::StringImpl *)a3;
        goto LABEL_10;
      }
LABEL_228:
      if (!(a3 >> 4)
        || (v50 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), ((a3 >> 4) & ~*(_DWORD *)(v50 + 0x20)) != 0)
        || (v108 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v9)) == 0|| (v202 = a3, v109 = JSC::PropertyTable::get(v108, (uint64_t *)&v202), v53 = v109, (_DWORD)v109 == -1))
      {
        if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
        {
          OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot();
          v49 = OwnStaticPropertySlot;
          if (!a3 || (OwnStaticPropertySlot & 1) != 0)
            return v49;
        }
        else if (!a3)
        {
          return 0;
        }
        v110 = *(_DWORD *)(a3 + 16);
        if ((v110 & 0x20) == 0)
        {
          v111 = *(_BYTE **)(a3 + 8);
          v112 = *(unsigned int *)(a3 + 4);
          if ((v110 & 4) != 0)
          {
            if ((_DWORD)v112)
            {
              v127 = *v111 - 48;
              if (v127 > 9 || v112 >= 2 && *v111 == 48)
              {
LABEL_278:
                v128 = 0;
              }
              else
              {
                v178 = v111 + 1;
                v179 = v112 - 1;
                while (v179)
                {
                  if (v127 > 0x19999999)
                    goto LABEL_278;
                  v180 = *v178 - 48;
                  if (v180 > 9)
                    goto LABEL_278;
                  v128 = 0;
                  v23 = __CFADD__(v180, 10 * v127);
                  v127 = v180 + 10 * v127;
                  ++v178;
                  --v179;
                  if (v23)
                    goto LABEL_279;
                }
                v128 = 0x100000000;
                if (v127 == -1)
                  v128 = 0;
              }
            }
            else
            {
              v128 = 0;
            }
LABEL_279:
            if ((v128 & 0x100000000) == 0)
              return 0;
          }
          else
          {
            if ((_DWORD)v112)
            {
              v113 = *(unsigned __int16 *)v111 - 48;
              if (v113 > 9 || v112 >= 2 && *(_WORD *)v111 == 48)
              {
LABEL_240:
                v114 = 0;
              }
              else
              {
                v118 = (unsigned __int16 *)(v111 + 2);
                v119 = v112 - 1;
                while (v119)
                {
                  if (v113 <= 0x19999999)
                  {
                    v120 = *v118 - 48;
                    if (v120 <= 9)
                    {
                      v23 = __CFADD__(v120, 10 * v113);
                      v113 = v120 + 10 * v113;
                      ++v118;
                      --v119;
                      if (!v23)
                        continue;
                    }
                  }
                  goto LABEL_240;
                }
                v156 = v113 == -1;
                v114 = 0x100000000;
                if (v156)
                  v114 = 0;
              }
            }
            else
            {
              v114 = 0;
            }
            if ((v114 & 0x100000000) == 0)
              return 0;
          }
          return JSC::JSObject::getOwnPropertySlotByIndex();
        }
        return 0;
      }
      v61 = HIDWORD(v109);
      if ((int)v109 > 63)
      {
        v115 = *(_QWORD *)(a1 + 8) - 8;
        v116 = 0x3F00000000 - (v109 << 32);
      }
      else
      {
        v115 = a1 + 16;
        v116 = v109 << 32;
      }
      v64 = *(_QWORD *)(v115 + (v116 >> 29));
      if ((v64 & 0xFFFE000000000002) == 0)
      {
        v117 = *(unsigned __int8 *)(v64 + 5);
        if (v117 != 6)
        {
          if (v117 != 5)
            goto LABEL_250;
          goto LABEL_269;
        }
LABEL_265:
        v122 = *(_DWORD *)(v50 + 16) & 3;
        v124 = *(_QWORD *)(v64 + 8);
        v123 = *(_QWORD *)(v64 + 16);
        if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v64 & 0xFFFFFFFE) + 0x4C))
        {
          v126 = *(_QWORD *)(v64 + 24);
          v125 = *(_QWORD *)(v64 + 32);
          *(_QWORD *)a4 = v124;
          *(_QWORD *)(a4 + 8) = v123;
          *(_DWORD *)(a4 + 16) = v61;
          *(_QWORD *)(a4 + 32) = a1;
          *(_BYTE *)(a4 + 49) = 3;
          v49 = 1;
          if (v122 != 2)
            *(_BYTE *)(a4 + 48) = 1;
          *(_BYTE *)(a4 + 51) = 1;
          *(_QWORD *)(a4 + 72) = v126;
          *(_QWORD *)(a4 + 80) = v125;
        }
        else
        {
          *(_QWORD *)a4 = v124;
          *(_QWORD *)(a4 + 8) = v123;
          *(_DWORD *)(a4 + 16) = v61;
          *(_QWORD *)(a4 + 32) = a1;
          v49 = 1;
          *(_BYTE *)(a4 + 49) = 3;
          if (v122 != 2)
            *(_BYTE *)(a4 + 48) = 1;
        }
        return v49;
      }
LABEL_250:
      *(_QWORD *)a4 = v64;
      *(_QWORD *)(a4 + 32) = a1;
      *(_DWORD *)(a4 + 16) = v61;
      *(_DWORD *)(a4 + 20) = v53;
      v49 = 1;
      *(_WORD *)(a4 + 48) = 257;
      return v49;
    }
    v43 = v11 + 1;
    v44 = v12 - 1;
    while (v44)
    {
      if (v13 <= 0x19999999)
      {
        v45 = *v43 - 48;
        if (v45 <= 9)
        {
          v23 = __CFADD__(v45, 10 * v13);
          v13 = v45 + 10 * v13;
          ++v43;
          --v44;
          if (!v23)
            continue;
        }
      }
      goto LABEL_8;
    }
  }
  else
  {
    if (!(_DWORD)v12)
      goto LABEL_8;
    v13 = *(unsigned __int16 *)v11 - 48;
    if (v13 > 9 || v12 >= 2 && *(_WORD *)v11 == 48)
      goto LABEL_8;
    v20 = (unsigned __int16 *)(v11 + 2);
    v21 = v12 - 1;
    while (v21)
    {
      if (v13 <= 0x19999999)
      {
        v22 = *v20 - 48;
        if (v22 <= 9)
        {
          v23 = __CFADD__(v22, 10 * v13);
          v13 = v22 + 10 * v13;
          ++v20;
          --v21;
          if (!v23)
            continue;
        }
      }
      goto LABEL_8;
    }
  }
  if (v13 == -1)
    goto LABEL_8;
  v46 = (WebCore::JSDOMGlobalObject *)WebCore::CachedHTMLCollection<WebCore::AllDescendantsCollection,(WebCore::CollectionTraversalType)0>::item(*(_QWORD *)(a1 + 24), v13);
  if (!v46)
  {
    if (!(a3 >> 4)
      || (v50 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), ((a3 >> 4) & ~*(_DWORD *)(v50 + 0x20)) != 0)
      || (v51 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), a2[7])) == 0|| (v202 = a3, v52 = JSC::PropertyTable::get(v51, (uint64_t *)&v202), v53 = v52, (_DWORD)v52 == -1))
    {
      if ((*(_BYTE *)(a1 + 6) & 0x20) == 0 || (JSC::JSObject::getOwnStaticPropertySlot() & 1) == 0)
      {
        v54 = *(_DWORD *)(a3 + 16);
        if ((v54 & 0x20) == 0)
        {
          v55 = *(_BYTE **)(a3 + 8);
          v56 = *(unsigned int *)(a3 + 4);
          if ((v54 & 4) != 0)
          {
            if (!(_DWORD)v56)
              return 0;
            v57 = *v55 - 48;
            if (v57 > 9 || v56 >= 2 && *v55 == 48)
              return 0;
            v175 = v55 + 1;
            for (i = v56 - 1; i; --i)
            {
              if (v57 > 0x19999999)
                return 0;
              v177 = *v175 - 48;
              if (v177 > 9)
                return 0;
              v49 = 0;
              v23 = __CFADD__(v177, 10 * v57);
              v57 = v177 + 10 * v57;
              ++v175;
              if (v23)
                return v49;
            }
          }
          else
          {
            if (!(_DWORD)v56)
              return 0;
            v57 = *(unsigned __int16 *)v55 - 48;
            if (v57 > 9 || v56 >= 2 && *(_WORD *)v55 == 48)
              return 0;
            v58 = (unsigned __int16 *)(v55 + 2);
            for (j = v56 - 1; j; --j)
            {
              if (v57 > 0x19999999)
                return 0;
              v60 = *v58 - 48;
              if (v60 > 9)
                return 0;
              v49 = 0;
              v23 = __CFADD__(v60, 10 * v57);
              v57 = v60 + 10 * v57;
              ++v58;
              if (v23)
                return v49;
            }
          }
          if (v57 != -1)
            return JSC::JSObject::getOwnPropertySlotByIndex();
        }
        return 0;
      }
      return 1;
    }
    v61 = HIDWORD(v52);
    if ((int)v52 > 63)
    {
      v62 = *(_QWORD *)(a1 + 8) - 8;
      v63 = 0x3F00000000 - (v52 << 32);
    }
    else
    {
      v62 = a1 + 16;
      v63 = v52 << 32;
    }
    v64 = *(_QWORD *)(v62 + (v63 >> 29));
    if ((v64 & 0xFFFE000000000002) != 0)
      goto LABEL_250;
    v65 = *(unsigned __int8 *)(v64 + 5);
    if (v65 == 6)
      goto LABEL_265;
    if (v65 == 5)
    {
LABEL_269:
      JSC::JSObject::fillGetterPropertySlot();
      return 1;
    }
    goto LABEL_250;
  }
  v48 = WebCore::toJS((WebCore *)a2, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28), v46, v47);
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
    return 0;
  *(_QWORD *)a4 = v48;
  *(_DWORD *)(a4 + 16) = 2;
  *(_QWORD *)(a4 + 32) = a1;
  v49 = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return v49;
}

unint64_t WebCore::jsHTMLAllCollectionConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSHTMLAllCollectionPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLAllCollection>,(WebCore::DOMConstructorID)508>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsHTMLAllCollection_length(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _BYTE v8[24];
  uint64_t v9;

  v2 = *(_QWORD *)(a2 + 24);
  if ((*(_BYTE *)(v2 + 80) & 1) != 0)
  {
    v6 = *(_DWORD *)(v2 + 60);
    if ((v6 & 0x80000000) == 0)
      return v6 | 0xFFFE000000000000;
  }
  else
  {
    v3 = v2 + 40;
    if ((*(_BYTE *)(v2 + 80) & 2) == 0 && !*(_QWORD *)(v2 + 48))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 40) + 8);
      v5 = v4 + 4 * (((unint64_t)*(unsigned __int16 *)(v2 + 21) >> 5) & 0xF);
      ++*(_DWORD *)(v5 + 1768);
      if ((*(_BYTE *)(v2 + 22) & 2) != 0)
      {
        v9 = v2;
        WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v4 + 1760), &v9, (uint64_t)v8);
        v3 = v2 + 40;
      }
    }
    v6 = WebCore::CollectionIndexCache<WebCore::AllDescendantsCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::computeNodeCountUpdatingListCache(v3, v2);
    *(_DWORD *)(v2 + 60) = v6;
    *(_BYTE *)(v2 + 80) |= 1u;
    if ((v6 & 0x80000000) == 0)
      return v6 | 0xFFFE000000000000;
  }
  return COERCE__INT64((double)v6) + 0x2000000000000;
}

uint64_t WebCore::JSHTMLAllCollection::subspaceForImpl(WebCore::JSHTMLAllCollection *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4160);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v7, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v7))
    goto LABEL_5;
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  if (!*(_QWORD *)(v9 + 4160))
  {
    v12 = 32;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)this + 192, (uint64_t)this + 1872, &v12, JSC::JSCell::numberOfLowerTierCells, &v13);
    v11 = *(_QWORD *)(v9 + 4160);
    *(_QWORD *)(v9 + 4160) = v13;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  v13 = JSC::GCClient::IsoSubspace::IsoSubspace();
  WebCore::JSHTMLAllCollection::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(v3, &v13);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v13);
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSHTMLAllCollectionOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  WebCore::Node *v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  WebCore::Node *v15;
  uint64_t result;
  WebCore::Node *v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 24);
  if (a5)
  {
    *a5 = "Reachable from HTMLAllCollection ownerNode";
    a5[1] = 43;
  }
  if (v5)
  {
    v19 = a4;
    if ((*(_BYTE *)(v5 + 22) & 8) != 0)
      v6 = *(WebCore::Node **)(*(_QWORD *)(v5 + 40) + 8);
    else
      v6 = WebCore::Node::traverseToOpaqueRoot((WebCore::Node *)v5);
    a4 = v19;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = v6;
    v18 = a4;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, v6);
    v6 = v17;
    a4 = v18;
    if ((_DWORD)result)
    {
LABEL_14:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, WebCore::Node *))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(WebCore::Node **)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_14;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194BB6E44);
      }
    }
  }
  return result;
}

uint64_t *WebCore::JSHTMLAllCollectionOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  int v4;
  _DWORD *v5;
  uint64_t *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  v4 = v3[4];
  v3[4] = v4 + 1;
  v5 = v3 + 2;
  if (!v3)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    result = JSC::weakRemove<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,WebCore::JSBlob *>((uint64_t *)(a3 + 32), (uint64_t)v3);
    v4 = v3[4] - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (!v4)
    return (uint64_t *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  v3[4] = v4;
  return result;
}

uint64_t WebCore::createWrapper<WebCore::HTMLAllCollection,WebCore::HTMLAllCollection>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = WebCore::getDOMStructure<WebCore::JSHTMLAllCollection>(*(WebCore::JSHTMLAllCollection **)(a1 + 56), (JSC::JSCell **)a1);
  v6 = WebCore::JSHTMLAllCollection::create(v5, a1, a2);
  WebCore::cacheWrapper<WebCore::HTMLAllCollection,WebCore::JSHTMLAllCollection>(*(_QWORD *)(a1 + 3320), v4, v6);
  return v6;
}

BOOL WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLAnchorElement>::initializeProperties(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  WebCore::JSDOMGlobalObject *v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v14);
  v9 = v14;
  v14 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v12 = WebCore::getDOMStructure<WebCore::JSHTMLAnchorElement>((WebCore::JSHTMLElement *)a2, a3, v11);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v12 + 48), 14);
}

uint64_t WebCore::JSHTMLAnchorElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSHTMLAnchorElement::createPrototype(WebCore::JSHTMLAnchorElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSHTMLElement::prototype(this, a2, a3);
  Structure = WebCore::JSHTMLAnchorElementPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSHTMLAnchorElementPrototype::create(this, a2, Structure, v7);
}

uint64_t WebCore::JSHTMLAnchorElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSHTMLAnchorElementPrototype::create(WebCore::JSHTMLAnchorElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  JSC::Structure *v24;
  int v25;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  WTF::StringImpl *v40[6];
  int v41;
  int v42;
  JSC::Structure *v43;
  int v44;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v39 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v39);
    *((_QWORD *)this + 4865) = SlowCase + (int)v39;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<30u>(this, (uint64_t)&WebCore::JSHTMLAnchorElement::s_info, (uint64_t)&WebCore::JSHTMLAnchorElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (v9 && *(_BYTE *)(v9 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194BB7818);
  }
  v10 = (int *)((char *)this + 93124);
  v11 = v9 - 192;
  if (!v9)
    v11 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 680) + 688);
  v13 = (v12 & 0x400000000) == 0;
  if ((v12 & 0x400000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v27 = v40[0];
    v28 = *v10;
    *v10 = 1;
    LODWORD(v40[0]) = -1;
    WORD2(v40[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v28;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v29);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
  v14 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v14 && *(_BYTE *)(v14 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194BB7838);
  }
  v15 = v14 - 192;
  if (!v14)
    v15 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v15 + 680) + 688) & 0x400000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v30 = v40[0];
    v31 = *v10;
    v13 = 1;
    *v10 = 1;
    LODWORD(v40[0]) = -1;
    WORD2(v40[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v31;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v32);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  v16 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v16 && *(_BYTE *)(v16 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194BB7858);
  }
  v17 = v16 - 192;
  if (!v16)
    v17 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v17 + 680) + 688) & 0x800000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v33 = v40[0];
    v34 = *v10;
    v13 = 1;
    *v10 = 1;
    LODWORD(v40[0]) = -1;
    WORD2(v40[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v34;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v35);
      else
        *(_DWORD *)v33 -= 2;
    }
  }
  v18 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v18 && *(_BYTE *)(v18 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194BB7878);
  }
  v19 = v18 - 192;
  if (!v18)
    v19 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v19 + 680) + 672) & 0x200000000000000) != 0)
  {
    if (!v13)
      goto LABEL_26;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral();
    v36 = v40[0];
    v37 = *v10;
    *v10 = 1;
    LODWORD(v40[0]) = -1;
    WORD2(v40[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v37;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v38);
      else
        *(_DWORD *)v36 -= 2;
    }
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
LABEL_26:
  v20 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v22 = JSC::JSString::create((uint64_t)this, v40);
  v23 = v40[0];
  v40[0] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v44 = *(_DWORD *)SlowCase;
  v43 = v24;
  v25 = JSC::Structure::outOfLineCapacity(v24);
  v41 = 0;
  v42 = v25;
  v40[0] = (WTF::StringImpl *)&v42;
  v40[1] = (WTF::StringImpl *)SlowCase;
  v40[2] = this;
  v40[3] = (WTF::StringImpl *)&v44;
  v40[4] = (WTF::StringImpl *)&v43;
  v40[5] = (WTF::StringImpl *)&v41;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v24, this, v20, 6, (uint64_t)v40);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v41, v22);
  *((_DWORD *)v24 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::JSHTMLAnchorElement::getConstructor(WebCore::JSHTMLAnchorElement *this, JSC::VM *a2, const JSC::JSGlobalObject *a3)
{
  unint64_t result;
  JSC::JSCell *v6;
  uint64_t Structure;
  JSC::Heap *v8;
  unint64_t v9;

  result = *(_QWORD *)(*((_QWORD *)a2 + 414) + 4072);
  if (!result)
  {
    v6 = (JSC::JSCell *)WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSHTMLElement>,(WebCore::DOMConstructorID)528>((uint64_t)this, (uint64_t)a2);
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLAnchorElement>::createStructure((uint64_t *)this, (int)a2, v6);
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLAnchorElement>::create((uint64_t)this, Structure, a2);
    *(_QWORD *)(*((_QWORD *)a2 + 414) + 4072) = result;
    if (result)
    {
      if (*((_DWORD *)this + 190) >= *((unsigned __int8 *)a2 + 7))
      {
        v8 = (WebCore::JSHTMLAnchorElement *)((char *)this + 192);
        v9 = result;
        JSC::Heap::writeBarrierSlowPath(v8, (const JSCell *)a2);
        return v9;
      }
    }
  }
  return result;
}

unint64_t WebCore::jsHTMLAnchorElementConstructor(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  JSC::JSCell *v5;
  uint64_t Structure;
  JSC::Heap *v7;
  unint64_t v8;

  v2 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSHTMLAnchorElementPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  result = *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 4072);
  if (!result)
  {
    v5 = (JSC::JSCell *)WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSHTMLElement>,(WebCore::DOMConstructorID)528>(v2, v3);
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLAnchorElement>::createStructure((uint64_t *)v2, v3, v5);
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLAnchorElement>::create(v2, Structure, (JSC::VM *)v3);
    *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 4072) = result;
    if (result)
    {
      if (*(_DWORD *)(v2 + 760) >= *(unsigned __int8 *)(v3 + 7))
      {
        v7 = (JSC::Heap *)(v2 + 192);
        v8 = result;
        JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)v3);
        return v8;
      }
    }
  }
  return result;
}

unint64_t WebCore::jsHTMLAnchorElement_attributionSourceId(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)WebCore::Element::getAttribute(*(WebCore::Element **)(a3 + 24), (const WebCore::QualifiedName *)&WebCore::HTMLNames::attributionsourceidAttr, a4, a5, a1);
  if (v5)
  {
    v6 = *(uint64_t **)(v5 + 8);
    v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v6 = 0;
    v7 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v6, v7, &v10);
  if (HIDWORD(v10))
    v8 = 0;
  else
    v8 = v10 & ~((int)v10 >> 31);
  return v8 | 0xFFFE000000000000;
}

BOOL WebCore::setJSHTMLAnchorElement_attributionSourceId(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5;
  WebCore::Element *v6;
  _BOOL8 v7;
  __n128 v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  char v17;

  v5 = WebCore::castThisValue<WebCore::JSHTMLAnchorElement>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(WebCore::Element **)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, a3, &v12);
  v7 = v13 == 0;
  if (!v13)
  {
    WTF::AtomString::number((WTF::AtomString *)(v12 & ~(v12 >> 31)));
    WebCore::Element::setAttribute(v6, (const WebCore::QualifiedName *)&WebCore::HTMLNames::attributionsourceidAttr, &v14, 0, &v15, v8);
    if (v17 && v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v9);
      else
        *(_DWORD *)v16 -= 2;
    }
    v10 = v14;
    v14 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  return v7;
}

uint64_t WebCore::jsHTMLAnchorElement_attributionDestination(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::attributiondestinationAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::attributiondestinationAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::attributiondestinationAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSHTMLAnchorElement_attributionDestination(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  _BOOL8 v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;

  v5 = WebCore::castThisValue<WebCore::JSHTMLAnchorElement>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(WTF::StringImpl **)(v5 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, a3, (uint64_t)&v19);
  v7 = v20;
  v8 = v20 == 0;
  if (!v20)
  {
    v9 = v19;
    v19 = 0;
    v21 = v9;
    v10 = *((_QWORD *)v6 + 13);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 + 4);
      if ((v11 & 1) == 0)
      {
        v12 = (uint64_t *)(v10 + 32);
        v13 = v11 >> 5;
        if (!v13)
          goto LABEL_15;
LABEL_8:
        v14 = 0;
        while (1)
        {
          v15 = *v12;
          if (*v12 == WebCore::HTMLNames::attributiondestinationAttr
            || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::attributiondestinationAttr + 24)
            && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::attributiondestinationAttr + 32))
          {
            goto LABEL_16;
          }
          ++v14;
          v12 += 2;
          if (v13 == v14)
            goto LABEL_15;
        }
      }
      v12 = *(uint64_t **)(v10 + 40);
      v13 = *(_DWORD *)(v10 + 52);
      if (v13)
        goto LABEL_8;
    }
LABEL_15:
    v14 = 0xFFFFFFFFLL;
LABEL_16:
    WebCore::Element::setAttributeInternal(v6, v14, (WebCore::TreeScope *)&WebCore::HTMLNames::attributiondestinationAttr, &v21, 0);
    v17 = v21;
    v21 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v7 = v20;
  }
  if (v7 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328B3D8[v7])(&v21, &v19);
  return v8;
}

uint64_t WebCore::jsHTMLAnchorElement_attributionSourceNonce(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::attributionsourcenonceAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::attributionsourcenonceAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::attributionsourcenonceAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSHTMLAnchorElement_attributionSourceNonce(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  _BOOL8 v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;

  v5 = WebCore::castThisValue<WebCore::JSHTMLAnchorElement>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(WTF::StringImpl **)(v5 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, a3, (uint64_t)&v19);
  v7 = v20;
  v8 = v20 == 0;
  if (!v20)
  {
    v9 = v19;
    v19 = 0;
    v21 = v9;
    v10 = *((_QWORD *)v6 + 13);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 + 4);
      if ((v11 & 1) == 0)
      {
        v12 = (uint64_t *)(v10 + 32);
        v13 = v11 >> 5;
        if (!v13)
          goto LABEL_15;
LABEL_8:
        v14 = 0;
        while (1)
        {
          v15 = *v12;
          if (*v12 == WebCore::HTMLNames::attributionsourcenonceAttr
            || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::attributionsourcenonceAttr + 24)
            && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::attributionsourcenonceAttr + 32))
          {
            goto LABEL_16;
          }
          ++v14;
          v12 += 2;
          if (v13 == v14)
            goto LABEL_15;
        }
      }
      v12 = *(uint64_t **)(v10 + 40);
      v13 = *(_DWORD *)(v10 + 52);
      if (v13)
        goto LABEL_8;
    }
LABEL_15:
    v14 = 0xFFFFFFFFLL;
LABEL_16:
    WebCore::Element::setAttributeInternal(v6, v14, (WebCore::TreeScope *)&WebCore::HTMLNames::attributionsourcenonceAttr, &v21, 0);
    v17 = v21;
    v21 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v7 = v20;
  }
  if (v7 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328B3D8[v7])(&v21, &v19);
  return v8;
}

uint64_t WebCore::jsHTMLAnchorElement_charset(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::charsetAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::charsetAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::charsetAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSHTMLAnchorElement_charset(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  _BOOL8 v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;

  v5 = WebCore::castThisValue<WebCore::JSHTMLAnchorElement>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(WTF::StringImpl **)(v5 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, a3, (uint64_t)&v19);
  v7 = v20;
  v8 = v20 == 0;
  if (!v20)
  {
    v9 = v19;
    v19 = 0;
    v21 = v9;
    v10 = *((_QWORD *)v6 + 13);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 + 4);
      if ((v11 & 1) == 0)
      {
        v12 = (uint64_t *)(v10 + 32);
        v13 = v11 >> 5;
        if (!v13)
          goto LABEL_15;
LABEL_8:
        v14 = 0;
        while (1)
        {
          v15 = *v12;
          if (*v12 == WebCore::HTMLNames::charsetAttr
            || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::charsetAttr + 24)
            && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::charsetAttr + 32))
          {
            goto LABEL_16;
          }
          ++v14;
          v12 += 2;
          if (v13 == v14)
            goto LABEL_15;
        }
      }
      v12 = *(uint64_t **)(v10 + 40);
      v13 = *(_DWORD *)(v10 + 52);
      if (v13)
        goto LABEL_8;
    }
LABEL_15:
    v14 = 0xFFFFFFFFLL;
LABEL_16:
    WebCore::Element::setAttributeInternal(v6, v14, (WebCore::TreeScope *)&WebCore::HTMLNames::charsetAttr, &v21, 0);
    v17 = v21;
    v21 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v7 = v20;
  }
  if (v7 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328B3D8[v7])(&v21, &v19);
  return v8;
}

uint64_t WebCore::jsHTMLAnchorElement_coords(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::coordsAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::coordsAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::coordsAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSHTMLAnchorElement_coords(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  _BOOL8 v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;

  v5 = WebCore::castThisValue<WebCore::JSHTMLAnchorElement>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(WTF::StringImpl **)(v5 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, a3, (uint64_t)&v19);
  v7 = v20;
  v8 = v20 == 0;
  if (!v20)
  {
    v9 = v19;
    v19 = 0;
    v21 = v9;
    v10 = *((_QWORD *)v6 + 13);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 + 4);
      if ((v11 & 1) == 0)
      {
        v12 = (uint64_t *)(v10 + 32);
        v13 = v11 >> 5;
        if (!v13)
          goto LABEL_15;
LABEL_8:
        v14 = 0;
        while (1)
        {
          v15 = *v12;
          if (*v12 == WebCore::HTMLNames::coordsAttr
            || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::coordsAttr + 24)
            && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::coordsAttr + 32))
          {
            goto LABEL_16;
          }
          ++v14;
          v12 += 2;
          if (v13 == v14)
            goto LABEL_15;
        }
      }
      v12 = *(uint64_t **)(v10 + 40);
      v13 = *(_DWORD *)(v10 + 52);
      if (v13)
        goto LABEL_8;
    }
LABEL_15:
    v14 = 0xFFFFFFFFLL;
LABEL_16:
    WebCore::Element::setAttributeInternal(v6, v14, (WebCore::TreeScope *)&WebCore::HTMLNames::coordsAttr, &v21, 0);
    v17 = v21;
    v21 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v7 = v20;
  }
  if (v7 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328B3D8[v7])(&v21, &v19);
  return v8;
}

uint64_t WebCore::jsHTMLAnchorElement_download(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::downloadAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::downloadAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::downloadAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSHTMLAnchorElement_download(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  _BOOL8 v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;

  v5 = WebCore::castThisValue<WebCore::JSHTMLAnchorElement>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(WTF::StringImpl **)(v5 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, a3, (uint64_t)&v19);
  v7 = v20;
  v8 = v20 == 0;
  if (!v20)
  {
    v9 = v19;
    v19 = 0;
    v21 = v9;
    v10 = *((_QWORD *)v6 + 13);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 + 4);
      if ((v11 & 1) == 0)
      {
        v12 = (uint64_t *)(v10 + 32);
        v13 = v11 >> 5;
        if (!v13)
          goto LABEL_15;
LABEL_8:
        v14 = 0;
        while (1)
        {
          v15 = *v12;
          if (*v12 == WebCore::HTMLNames::downloadAttr
            || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::downloadAttr + 24)
            && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::downloadAttr + 32))
          {
            goto LABEL_16;
          }
          ++v14;
          v12 += 2;
          if (v13 == v14)
            goto LABEL_15;
        }
      }
      v12 = *(uint64_t **)(v10 + 40);
      v13 = *(_DWORD *)(v10 + 52);
      if (v13)
        goto LABEL_8;
    }
LABEL_15:
    v14 = 0xFFFFFFFFLL;
LABEL_16:
    WebCore::Element::setAttributeInternal(v6, v14, (WebCore::TreeScope *)&WebCore::HTMLNames::downloadAttr, &v21, 0);
    v17 = v21;
    v21 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v7 = v20;
  }
  if (v7 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328B3D8[v7])(&v21, &v19);
  return v8;
}

uint64_t WebCore::jsHTMLAnchorElement_hreflang(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::hreflangAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::hreflangAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::hreflangAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSHTMLAnchorElement_hreflang(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  _BOOL8 v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;

  v5 = WebCore::castThisValue<WebCore::JSHTMLAnchorElement>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(WTF::StringImpl **)(v5 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, a3, (uint64_t)&v19);
  v7 = v20;
  v8 = v20 == 0;
  if (!v20)
  {
    v9 = v19;
    v19 = 0;
    v21 = v9;
    v10 = *((_QWORD *)v6 + 13);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 + 4);
      if ((v11 & 1) == 0)
      {
        v12 = (uint64_t *)(v10 + 32);
        v13 = v11 >> 5;
        if (!v13)
          goto LABEL_15;
LABEL_8:
        v14 = 0;
        while (1)
        {
          v15 = *v12;
          if (*v12 == WebCore::HTMLNames::hreflangAttr
            || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::hreflangAttr + 24)
            && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::hreflangAttr + 32))
          {
            goto LABEL_16;
          }
          ++v14;
          v12 += 2;
          if (v13 == v14)
            goto LABEL_15;
        }
      }
      v12 = *(uint64_t **)(v10 + 40);
      v13 = *(_DWORD *)(v10 + 52);
      if (v13)
        goto LABEL_8;
    }
LABEL_15:
    v14 = 0xFFFFFFFFLL;
LABEL_16:
    WebCore::Element::setAttributeInternal(v6, v14, (WebCore::TreeScope *)&WebCore::HTMLNames::hreflangAttr, &v21, 0);
    v17 = v21;
    v21 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v7 = v20;
  }
  if (v7 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328B3D8[v7])(&v21, &v19);
  return v8;
}

uint64_t WebCore::jsHTMLAnchorElement_name(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (v3 && (v4 = *(_DWORD *)(v3 + 4), (v4 & 2) != 0))
  {
    if ((v4 & 1) != 0)
    {
      v13 = *(uint64_t **)(v3 + 40);
      LODWORD(v14) = *(_DWORD *)(v3 + 52);
    }
    else
    {
      v13 = (uint64_t *)(v3 + 32);
      LODWORD(v14) = v4 >> 5;
    }
    if ((_DWORD)v14)
    {
      v14 = v14;
      while (1)
      {
        v15 = *v13;
        if (*v13 == WebCore::HTMLNames::nameAttr
          || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
          && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
        {
          break;
        }
        v13 += 2;
        if (!--v14)
          goto LABEL_28;
      }
    }
    else
    {
LABEL_28:
      v13 = 0;
    }
    v5 = v13 + 1;
  }
  else
  {
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v6 = *v5;
  if (!*v5)
    return *(_QWORD *)(v2 + 41968);
  v7 = *(_DWORD *)(v6 + 4);
  if (!v7)
    return *(_QWORD *)(v2 + 41968);
  if (v7 == 1)
  {
    v10 = *(unsigned __int8 **)(v6 + 8);
    if ((*(_BYTE *)(v6 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_7;
      v11 = v12;
    }
    return *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
LABEL_7:
  v8 = *(_QWORD *)(v2 + 64760);
  if (!v8 || v6 != *(_QWORD *)(v8 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v8;
}

BOOL WebCore::setJSHTMLAnchorElement_name(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  _BOOL8 v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;

  v5 = WebCore::castThisValue<WebCore::JSHTMLAnchorElement>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(WTF::StringImpl **)(v5 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, a3, (uint64_t)&v19);
  v7 = v20;
  v8 = v20 == 0;
  if (!v20)
  {
    v9 = v19;
    v19 = 0;
    v21 = v9;
    v10 = *((_QWORD *)v6 + 13);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 + 4);
      if ((v11 & 1) == 0)
      {
        v12 = (uint64_t *)(v10 + 32);
        v13 = v11 >> 5;
        if (!v13)
          goto LABEL_15;
LABEL_8:
        v14 = 0;
        while (1)
        {
          v15 = *v12;
          if (*v12 == WebCore::HTMLNames::nameAttr
            || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
            && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
          {
            goto LABEL_16;
          }
          ++v14;
          v12 += 2;
          if (v13 == v14)
            goto LABEL_15;
        }
      }
      v12 = *(uint64_t **)(v10 + 40);
      v13 = *(_DWORD *)(v10 + 52);
      if (v13)
        goto LABEL_8;
    }
LABEL_15:
    v14 = 0xFFFFFFFFLL;
LABEL_16:
    WebCore::Element::setAttributeInternal(v6, v14, (WebCore::TreeScope *)&WebCore::HTMLNames::nameAttr, &v21, 0);
    v17 = v21;
    v21 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v7 = v20;
  }
  if (v7 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328B3D8[v7])(&v21, &v19);
  return v8;
}

uint64_t WebCore::jsHTMLAnchorElement_ping(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::pingAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::pingAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::pingAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSHTMLAnchorElement_ping(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  _BOOL8 v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;

  v5 = WebCore::castThisValue<WebCore::JSHTMLAnchorElement>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(WTF::StringImpl **)(v5 + 24);
  WebCore::valueToUSVAtomString(a1, a3, (uint64_t)&v19);
  v7 = v20;
  v8 = v20 == 0;
  if (!v20)
  {
    v9 = v19;
    v19 = 0;
    v21 = v9;
    v10 = *((_QWORD *)v6 + 13);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 + 4);
      if ((v11 & 1) == 0)
      {
        v12 = (uint64_t *)(v10 + 32);
        v13 = v11 >> 5;
        if (!v13)
          goto LABEL_15;
LABEL_8:
        v14 = 0;
        while (1)
        {
          v15 = *v12;
          if (*v12 == WebCore::HTMLNames::pingAttr
            || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::pingAttr + 24)
            && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::pingAttr + 32))
          {
            goto LABEL_16;
          }
          ++v14;
          v12 += 2;
          if (v13 == v14)
            goto LABEL_15;
        }
      }
      v12 = *(uint64_t **)(v10 + 40);
      v13 = *(_DWORD *)(v10 + 52);
      if (v13)
        goto LABEL_8;
    }
LABEL_15:
    v14 = 0xFFFFFFFFLL;
LABEL_16:
    WebCore::Element::setAttributeInternal(v6, v14, (WebCore::TreeScope *)&WebCore::HTMLNames::pingAttr, &v21, 0);
    v17 = v21;
    v21 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v7 = v20;
  }
  if (v7 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328B3D8[v7])(&v21, &v19);
  return v8;
}

uint64_t WebCore::jsHTMLAnchorElement_rel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (v3
    && ((v4 = *(_DWORD *)(v3 + 4), (v4 & 1) != 0)
      ? (v5 = *(_QWORD *)(v3 + 40), LODWORD(v6) = *(_DWORD *)(v3 + 52))
      : (v5 = v3 + 32, LODWORD(v6) = v4 >> 5),
        (_DWORD)v6))
  {
    v6 = v6;
    v7 = (uint64_t *)(v5 + 8);
    while (1)
    {
      v8 = *(v7 - 1);
      if (v8 == WebCore::HTMLNames::relAttr
        || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::relAttr + 24)
        && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::relAttr + 32))
      {
        break;
      }
      v7 += 2;
      if (!--v6)
      {
        v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_13;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_13:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSHTMLAnchorElement_rel(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v7;
  int v8;
  _BOOL8 v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLAnchorElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLAnchorElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v7 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v8 = v22;
  v9 = v22 == 0;
  if (!v22)
  {
    v10 = v21;
    v21 = 0;
    v23 = v10;
    v11 = *((_QWORD *)v7 + 13);
    if (v11
      && ((v12 = *(_DWORD *)(v11 + 4), (v12 & 1) != 0)
        ? (v13 = *(uint64_t **)(v11 + 40), v14 = *(_DWORD *)(v11 + 52))
        : (v13 = (uint64_t *)(v11 + 32), v14 = v12 >> 5),
          v14))
    {
      v15 = 0;
      while (1)
      {
        v16 = *v13;
        if (*v13 == WebCore::HTMLNames::relAttr
          || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::relAttr + 24)
          && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::relAttr + 32))
        {
          break;
        }
        ++v15;
        v13 += 2;
        if (v14 == v15)
          goto LABEL_17;
      }
    }
    else
    {
LABEL_17:
      v15 = 0xFFFFFFFFLL;
    }
    WebCore::Element::setAttributeInternal(v7, v15, (WebCore::TreeScope *)&WebCore::HTMLNames::relAttr, &v23, 0);
    v18 = v23;
    v23 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v8 = v22;
  }
  if (v8 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328B3D8[v8])(&v23, &v21);
  return v9;
}

uint64_t WebCore::jsHTMLAnchorElement_rev(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::revAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::revAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::revAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSHTMLAnchorElement_rev(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLAnchorElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLAnchorElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::HTMLNames::revAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::revAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::revAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::revAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328B3D8[v9])(&v23, &v21);
  return v10;
}

uint64_t WebCore::jsHTMLAnchorElement_shape(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::shapeAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::shapeAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::shapeAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSHTMLAnchorElement_shape(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLAnchorElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLAnchorElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::HTMLNames::shapeAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::shapeAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::shapeAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::shapeAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328B3D8[v9])(&v23, &v21);
  return v10;
}

uint64_t WebCore::jsHTMLAnchorElement_target(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::targetAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::targetAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::targetAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSHTMLAnchorElement_target(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLAnchorElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLAnchorElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::HTMLNames::targetAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::targetAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::targetAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::targetAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328B3D8[v9])(&v23, &v21);
  return v10;
}

uint64_t WebCore::jsHTMLAnchorElement_type(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::typeAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSHTMLAnchorElement_type(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLAnchorElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLAnchorElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::HTMLNames::typeAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::typeAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328B3D8[v9])(&v23, &v21);
  return v10;
}

uint64_t WebCore::jsHTMLAnchorElement_text(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, WTF::StringBuilder *a6)
{
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t *v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;

  WebCore::Node::textContent(*(WebCore::Node **)(a2 + 24), 0, a6, &v17, a3);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = (uint64_t *)(v8 + 41968);
  v10 = v17;
  if (!v17)
    return *v9;
  v11 = *((_DWORD *)v17 + 1);
  if (v11)
  {
    if (v11 != 1)
    {
LABEL_4:
      v12 = *(_QWORD *)(v8 + 64760);
      if (!v12 || v17 != *(WTF::StringImpl **)(v12 + 8))
        v12 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_7;
    }
    v14 = (unsigned __int8 *)*((_QWORD *)v17 + 1);
    if ((*((_BYTE *)v17 + 16) & 4) != 0)
    {
      v15 = *v14;
    }
    else
    {
      v16 = *(unsigned __int16 *)v14;
      if (v16 > 0xFF)
        goto LABEL_4;
      v15 = v16;
    }
    v12 = *(_QWORD *)(v8 + 8 * v15 + 42216);
  }
  else
  {
    v12 = *v9;
  }
LABEL_7:
  if (*(_DWORD *)v10 == 2)
    WTF::StringImpl::destroy(v10, v7);
  else
    *(_DWORD *)v10 -= 2;
  return v12;
}

BOOL WebCore::setJSHTMLAnchorElement_text(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  unsigned __int16 *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  WTF::StringImpl *v20;
  int hasExceptionsAfterHandlingTraps;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  WTF *v27;
  uint64_t v28;
  _BYTE v29[40];
  uint64_t v30;
  JSC::JSGlobalObject *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  char v35;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSHTMLAnchorElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSHTMLAnchorElement::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(unsigned __int16 **)(a2 + 24);
  v27 = (WTF *)v29;
  v28 = 4;
  v29[32] = 0;
  v30 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v31 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v27;
  v33 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v10 = *(WTF::StringImpl **)(this + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v32 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v33, a1);
LABEL_18:
  if (*((_DWORD *)v3 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
    v11 = v32;
    if (hasExceptionsAfterHandlingTraps)
    {
      v26 = 1;
      v32 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      v15 = 0;
      v14 = 1;
      goto LABEL_26;
    }
  }
  else
  {
    v11 = v32;
  }
  v26 = 0;
  v25 = 0;
  v32 = v11;
  v12 = v9[14] >> 12;
  if (v12 != 1)
  {
    if (v12 > 0xB)
      goto LABEL_22;
    if (v12 != 11)
    {
      if (((1 << v12) & 0x19C) != 0)
      {
        (*(void (**)(unint64_t *__return_ptr, unsigned __int16 *, WTF::StringImpl **))(*(_QWORD *)v9 + 120))(&v33, v9, &v32);
        if (v35)
        {
          v20 = v34;
          v34 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
      }
      goto LABEL_22;
    }
  }
  WebCore::ContainerNode::stringReplaceAll((WebCore::ContainerNode *)v9, (uint64_t)&v32);
LABEL_22:
  v13 = v32;
  v32 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = 0;
  v15 = 1;
LABEL_26:
  ((void (*)(unint64_t *, uint64_t *))off_1E328A618[v14])(&v33, &v25);
  if (HIDWORD(v28))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v27, v31);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v30;
    if (HIDWORD(v28))
    {
      v22 = v27;
      v23 = 8 * HIDWORD(v28);
      do
      {
        v24 = *(_QWORD *)v22;
        *(_QWORD *)v22 = 0;
        if (v24)
        {
          if (*(_DWORD *)(v24 + 24) == 2)
          {
            if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v24, v16);
          }
          else
          {
            *(_DWORD *)(v24 + 24) -= 2;
          }
        }
        v22 = (WTF *)((char *)v22 + 8);
        v23 -= 8;
      }
      while (v23);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v30;
  }
  v17 = v27;
  if (v29 != (_BYTE *)v27 && v27 != 0)
  {
    v27 = 0;
    LODWORD(v28) = 0;
    WTF::fastFree(v17, v16);
  }
  return v15;
}

unint64_t WebCore::jsHTMLAnchorElement_relList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (WTF *)WebCore::HTMLAnchorElement::relList(*(WebCore::HTMLAnchorElement **)(a2 + 24));
  return WebCore::wrap<WebCore::DOMTokenList>(a1, v3, v4);
}

BOOL WebCore::setJSHTMLAnchorElement_relList(JSC::JSGlobalObject *a1, JSC::Structure *a2, uint64_t a3)
{
  JSC::VM *v4;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unint64_t v18[2];
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v7 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSHTMLAnchorElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSHTMLAnchorElement::s_info && v9 != 0);
  }
  if (!v8)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v22 = *((_QWORD *)a1 + 7);
  WTF::AtomStringImpl::addLiteral();
  v12 = (WTF::StringImpl *)v18[0];
  v13 = JSC::JSObject::get(a2, a1, v18[0]);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    goto LABEL_20;
  if ((v13 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v13 + 5) <= 0x16u)
  {
    JSC::throwTypeError();
LABEL_20:
    v16 = 0;
    goto LABEL_21;
  }
  WTF::AtomStringImpl::addLiteral();
  v14 = (WTF::StringImpl *)v18[0];
  v18[0] = 0;
  v18[1] = v13;
  v19 = -1;
  v20 = 0x1000000;
  v21 = 0;
  (*(void (**)(uint64_t, JSC::JSGlobalObject *, WTF::StringImpl *, uint64_t, unint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C) + 0x48))(v13, a1, v14, a3, v18);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
  {
    v16 = 0;
    if (!v14)
      goto LABEL_21;
  }
  else
  {
    v16 = 1;
    if (!v14)
      goto LABEL_21;
  }
  if (*(_DWORD *)v14 == 2)
    WTF::StringImpl::destroy(v14, v15);
  else
    *(_DWORD *)v14 -= 2;
LABEL_21:
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v15);
    else
      *(_DWORD *)v12 -= 2;
  }
  return v16;
}

uint64_t WebCore::jsHTMLAnchorElement_referrerPolicy(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v11;

  WebCore::HTMLAnchorElement::referrerPolicyForBindings(*(WebCore::HTMLAnchorElement **)(a2 + 24), &v11);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = v11;
  if (!v11 || (v5 = *((_DWORD *)v11 + 1)) == 0)
  {
    v6 = *(_QWORD *)(v3 + 41968);
LABEL_7:
    v11 = 0;
    if (!v4)
      return v6;
    goto LABEL_16;
  }
  if (v5 != 1)
    goto LABEL_4;
  v7 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  if ((*((_BYTE *)v11 + 16) & 4) != 0)
  {
    v8 = *v7;
LABEL_14:
    v6 = *(_QWORD *)(v3 + 8 * v8 + 42216);
    goto LABEL_15;
  }
  v9 = *(unsigned __int16 *)v7;
  if (v9 <= 0xFF)
  {
    v8 = v9;
    goto LABEL_14;
  }
LABEL_4:
  v6 = *(_QWORD *)(v3 + 64760);
  if (!v6 || v11 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v4 = v11;
    goto LABEL_7;
  }
LABEL_15:
  v11 = 0;
LABEL_16:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v6;
}

BOOL WebCore::setJSHTMLAnchorElement_referrerPolicy(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLAnchorElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLAnchorElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::HTMLNames::referrerpolicyAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::referrerpolicyAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::referrerpolicyAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::referrerpolicyAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328B3D8[v9])(&v23, &v21);
  return v10;
}

uint64_t WebCore::jsHTMLAnchorElement_href(WebCore *a1, uint64_t a2, WebCore::JSHTMLAnchorElement *a3, WTF::String *a4, __n128 a5)
{
  return WebCore::jsHTMLAnchorElement_hrefGetter(a1, *(JSC::JSGlobalObject **)(a2 + 24), a3, a4, a5);
}

BOOL WebCore::setJSHTMLAnchorElement_href(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v7;
  int v8;
  _BOOL8 v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLAnchorElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLAnchorElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v7 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::valueToUSVAtomString(a1, a3, (uint64_t)&v21);
  v8 = v22;
  v9 = v22 == 0;
  if (!v22)
  {
    v10 = v21;
    v21 = 0;
    v23 = v10;
    v11 = *((_QWORD *)v7 + 13);
    if (v11
      && ((v12 = *(_DWORD *)(v11 + 4), (v12 & 1) != 0)
        ? (v13 = *(uint64_t **)(v11 + 40), v14 = *(_DWORD *)(v11 + 52))
        : (v13 = (uint64_t *)(v11 + 32), v14 = v12 >> 5),
          v14))
    {
      v15 = 0;
      while (1)
      {
        v16 = *v13;
        if (*v13 == WebCore::HTMLNames::hrefAttr
          || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 24)
          && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 32))
        {
          break;
        }
        ++v15;
        v13 += 2;
        if (v14 == v15)
          goto LABEL_17;
      }
    }
    else
    {
LABEL_17:
      v15 = 0xFFFFFFFFLL;
    }
    WebCore::Element::setAttributeInternal(v7, v15, (WebCore::TreeScope *)&WebCore::HTMLNames::hrefAttr, &v23, 0);
    v18 = v23;
    v23 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v8 = v22;
  }
  if (v8 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328B3D8[v8])(&v23, &v21);
  return v9;
}

uint64_t WebCore::jsHTMLAnchorElement_origin(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v11;

  WebCore::HTMLAnchorElement::origin(*(WebCore::HTMLAnchorElement **)(a2 + 24), &v11);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = v11;
  if (!v11 || (v5 = *((_DWORD *)v11 + 1)) == 0)
  {
    v6 = *(_QWORD *)(v3 + 41968);
LABEL_7:
    v11 = 0;
    if (!v4)
      return v6;
    goto LABEL_16;
  }
  if (v5 != 1)
    goto LABEL_4;
  v7 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  if ((*((_BYTE *)v11 + 16) & 4) != 0)
  {
    v8 = *v7;
LABEL_14:
    v6 = *(_QWORD *)(v3 + 8 * v8 + 42216);
    goto LABEL_15;
  }
  v9 = *(unsigned __int16 *)v7;
  if (v9 <= 0xFF)
  {
    v8 = v9;
    goto LABEL_14;
  }
LABEL_4:
  v6 = *(_QWORD *)(v3 + 64760);
  if (!v6 || v11 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v4 = v11;
    goto LABEL_7;
  }
LABEL_15:
  v11 = 0;
LABEL_16:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v6;
}

uint64_t WebCore::jsHTMLAnchorElement_protocol(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v11;

  WebCore::URLDecomposition::protocol((WebCore::URLDecomposition *)(*(_QWORD *)(a2 + 24) + 112), &v11);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = v11;
  if (!v11 || (v5 = *((_DWORD *)v11 + 1)) == 0)
  {
    v6 = *(_QWORD *)(v3 + 41968);
LABEL_7:
    v11 = 0;
    if (!v4)
      return v6;
    goto LABEL_16;
  }
  if (v5 != 1)
    goto LABEL_4;
  v7 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  if ((*((_BYTE *)v11 + 16) & 4) != 0)
  {
    v8 = *v7;
LABEL_14:
    v6 = *(_QWORD *)(v3 + 8 * v8 + 42216);
    goto LABEL_15;
  }
  v9 = *(unsigned __int16 *)v7;
  if (v9 <= 0xFF)
  {
    v8 = v9;
    goto LABEL_14;
  }
LABEL_4:
  v6 = *(_QWORD *)(v3 + 64760);
  if (!v6 || v11 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v4 = v11;
    goto LABEL_7;
  }
LABEL_15:
  v11 = 0;
LABEL_16:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v6;
}

BOOL WebCore::setJSHTMLAnchorElement_protocol(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::HTMLAnchorElement *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14;
  int v15;
  char v16;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLAnchorElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLAnchorElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::HTMLAnchorElement **)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v14);
  v9 = v15;
  v10 = v15 == 0;
  if (!v15)
  {
    v11 = v14;
    v14 = 0;
    if (v11)
    {
      WebCore::HTMLAnchorElement::setProtocol(v8);
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v12);
      else
        *(_DWORD *)v11 -= 2;
    }
    else
    {
      WebCore::HTMLAnchorElement::setProtocol(v8);
    }
    v9 = v15;
  }
  if (v9 != -1)
    ((void (*)(char *, WTF::StringImpl **))off_1E328A618[v9])(&v16, &v14);
  return v10;
}

uint64_t WebCore::jsHTMLAnchorElement_username(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[5];

  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 112) + 16))(v15, *(_QWORD *)(a2 + 24) + 112);
  WTF::URL::encodedUser((WTF::URL *)v15);
  if ((v3 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  v5 = v15[0];
  v15[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_QWORD *)(a1 + 56);
  v7 = v14;
  if (!v14 || (v8 = *((_DWORD *)v14 + 1)) == 0)
  {
    v9 = *(_QWORD *)(v6 + 41968);
LABEL_12:
    if (!v7)
      return v9;
    goto LABEL_22;
  }
  if (v8 != 1)
    goto LABEL_9;
  v10 = (unsigned __int8 *)*((_QWORD *)v14 + 1);
  if ((*((_BYTE *)v14 + 16) & 4) != 0)
  {
    v11 = *v10;
LABEL_21:
    v9 = *(_QWORD *)(v6 + 8 * v11 + 42216);
    goto LABEL_22;
  }
  v12 = *(unsigned __int16 *)v10;
  if (v12 <= 0xFF)
  {
    v11 = v12;
    goto LABEL_21;
  }
LABEL_9:
  v9 = *(_QWORD *)(v6 + 64760);
  if (!v9 || v14 != *(WTF::StringImpl **)(v9 + 8))
  {
    v9 = JSC::jsStringWithCacheSlowCase();
    v7 = v14;
    goto LABEL_12;
  }
LABEL_22:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v7);
  else
    *(_DWORD *)v7 -= 2;
  return v9;
}

BOOL WebCore::setJSHTMLAnchorElement_username(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  int v9;
  _BOOL8 v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19[5];

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLAnchorElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLAnchorElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v17);
  v9 = v18;
  v10 = v18 == 0;
  if (!v18)
  {
    v11 = v8 + 112;
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v11 + 16))(v19, v11);
      WTF::URL::host((WTF::URL *)v19);
      if ((_DWORD)v13 && (WTF::URL::protocolIs() & 1) == 0)
      {
        WTF::URL::setUser();
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 24))(v11, v19);
      }
      v14 = v19[0];
      v19[0] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
      if (*(_DWORD *)v12 != 2)
      {
        *(_DWORD *)v12 -= 2;
LABEL_22:
        v9 = v18;
        goto LABEL_23;
      }
      v16 = v12;
    }
    else
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v11 + 16))(v19, v11);
      WTF::URL::host((WTF::URL *)v19);
      if ((_DWORD)v13 && (WTF::URL::protocolIs() & 1) == 0)
      {
        WTF::URL::setUser();
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 24))(v11, v19);
      }
      v16 = v19[0];
      v19[0] = 0;
      if (!v16)
        goto LABEL_22;
      if (*(_DWORD *)v16 != 2)
      {
        *(_DWORD *)v16 -= 2;
        goto LABEL_22;
      }
    }
    WTF::StringImpl::destroy(v16, v13);
    goto LABEL_22;
  }
LABEL_23:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328A618[v9])(v19, &v17);
  return v10;
}

uint64_t WebCore::jsHTMLAnchorElement_password(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[5];

  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 112) + 16))(v15, *(_QWORD *)(a2 + 24) + 112);
  WTF::URL::encodedPassword((WTF::URL *)v15);
  if ((v3 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  v5 = v15[0];
  v15[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_QWORD *)(a1 + 56);
  v7 = v14;
  if (!v14 || (v8 = *((_DWORD *)v14 + 1)) == 0)
  {
    v9 = *(_QWORD *)(v6 + 41968);
LABEL_12:
    if (!v7)
      return v9;
    goto LABEL_22;
  }
  if (v8 != 1)
    goto LABEL_9;
  v10 = (unsigned __int8 *)*((_QWORD *)v14 + 1);
  if ((*((_BYTE *)v14 + 16) & 4) != 0)
  {
    v11 = *v10;
LABEL_21:
    v9 = *(_QWORD *)(v6 + 8 * v11 + 42216);
    goto LABEL_22;
  }
  v12 = *(unsigned __int16 *)v10;
  if (v12 <= 0xFF)
  {
    v11 = v12;
    goto LABEL_21;
  }
LABEL_9:
  v9 = *(_QWORD *)(v6 + 64760);
  if (!v9 || v14 != *(WTF::StringImpl **)(v9 + 8))
  {
    v9 = JSC::jsStringWithCacheSlowCase();
    v7 = v14;
    goto LABEL_12;
  }
LABEL_22:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v7);
  else
    *(_DWORD *)v7 -= 2;
  return v9;
}

BOOL WebCore::setJSHTMLAnchorElement_password(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  int v9;
  _BOOL8 v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19[5];

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLAnchorElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLAnchorElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v17);
  v9 = v18;
  v10 = v18 == 0;
  if (!v18)
  {
    v11 = v8 + 112;
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v11 + 16))(v19, v11);
      WTF::URL::host((WTF::URL *)v19);
      if ((_DWORD)v13 && (WTF::URL::protocolIs() & 1) == 0)
      {
        WTF::URL::setPassword();
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 24))(v11, v19);
      }
      v14 = v19[0];
      v19[0] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
      if (*(_DWORD *)v12 != 2)
      {
        *(_DWORD *)v12 -= 2;
LABEL_22:
        v9 = v18;
        goto LABEL_23;
      }
      v16 = v12;
    }
    else
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v11 + 16))(v19, v11);
      WTF::URL::host((WTF::URL *)v19);
      if ((_DWORD)v13 && (WTF::URL::protocolIs() & 1) == 0)
      {
        WTF::URL::setPassword();
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 24))(v11, v19);
      }
      v16 = v19[0];
      v19[0] = 0;
      if (!v16)
        goto LABEL_22;
      if (*(_DWORD *)v16 != 2)
      {
        *(_DWORD *)v16 -= 2;
        goto LABEL_22;
      }
    }
    WTF::StringImpl::destroy(v16, v13);
    goto LABEL_22;
  }
LABEL_23:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328A618[v9])(v19, &v17);
  return v10;
}

uint64_t WebCore::jsHTMLAnchorElement_host(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14[5];

  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 112) + 16))(v14, *(_QWORD *)(a2 + 24) + 112);
  WTF::URL::hostAndPort((WTF::URL *)v14);
  v4 = v14[0];
  v14[0] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(_QWORD *)(a1 + 56);
  v6 = v13;
  if (!v13 || (v7 = *((_DWORD *)v13 + 1)) == 0)
  {
    v8 = *(_QWORD *)(v5 + 41968);
LABEL_10:
    if (!v6)
      return v8;
    goto LABEL_11;
  }
  if (v7 != 1)
    goto LABEL_7;
  v10 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
  if ((*((_BYTE *)v13 + 16) & 4) != 0)
  {
    v11 = *v10;
LABEL_19:
    v8 = *(_QWORD *)(v5 + 8 * v11 + 42216);
    goto LABEL_11;
  }
  v12 = *(unsigned __int16 *)v10;
  if (v12 <= 0xFF)
  {
    v11 = v12;
    goto LABEL_19;
  }
LABEL_7:
  v8 = *(_QWORD *)(v5 + 64760);
  if (!v8 || v13 != *(WTF::StringImpl **)(v8 + 8))
  {
    v8 = JSC::jsStringWithCacheSlowCase();
    v6 = v13;
    goto LABEL_10;
  }
LABEL_11:
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, v6);
  else
    *(_DWORD *)v6 -= 2;
  return v8;
}

BOOL WebCore::setJSHTMLAnchorElement_host(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  int v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v15;
  int v16;
  char v17;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLAnchorElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLAnchorElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v15);
  v9 = v16;
  v10 = v16 == 0;
  if (!v16)
  {
    v11 = v8 + 112;
    v12 = v15;
    v15 = 0;
    if (v12)
    {
      WebCore::URLDecomposition::setHost(v11, *(_QWORD *)(v12 + 8), *(_DWORD *)(v12 + 4));
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v12, v13);
      else
        *(_DWORD *)v12 -= 2;
    }
    else
    {
      WebCore::URLDecomposition::setHost(v11, 0, 0);
    }
    v9 = v16;
  }
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))off_1E328A618[v9])(&v17, &v15);
  return v10;
}

uint64_t WebCore::jsHTMLAnchorElement_hostname(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[5];

  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 112) + 16))(v15, *(_QWORD *)(a2 + 24) + 112);
  WTF::URL::host((WTF::URL *)v15);
  if ((v3 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  v5 = v15[0];
  v15[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_QWORD *)(a1 + 56);
  v7 = v14;
  if (!v14 || (v8 = *((_DWORD *)v14 + 1)) == 0)
  {
    v9 = *(_QWORD *)(v6 + 41968);
LABEL_12:
    if (!v7)
      return v9;
    goto LABEL_22;
  }
  if (v8 != 1)
    goto LABEL_9;
  v10 = (unsigned __int8 *)*((_QWORD *)v14 + 1);
  if ((*((_BYTE *)v14 + 16) & 4) != 0)
  {
    v11 = *v10;
LABEL_21:
    v9 = *(_QWORD *)(v6 + 8 * v11 + 42216);
    goto LABEL_22;
  }
  v12 = *(unsigned __int16 *)v10;
  if (v12 <= 0xFF)
  {
    v11 = v12;
    goto LABEL_21;
  }
LABEL_9:
  v9 = *(_QWORD *)(v6 + 64760);
  if (!v9 || v14 != *(WTF::StringImpl **)(v9 + 8))
  {
    v9 = JSC::jsStringWithCacheSlowCase();
    v7 = v14;
    goto LABEL_12;
  }
LABEL_22:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v7);
  else
    *(_DWORD *)v7 -= 2;
  return v9;
}

BOOL WebCore::setJSHTMLAnchorElement_hostname(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  int v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v15;
  int v16;
  char v17;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLAnchorElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLAnchorElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v15);
  v9 = v16;
  v10 = v16 == 0;
  if (!v16)
  {
    v11 = v8 + 112;
    v12 = v15;
    v15 = 0;
    if (v12)
    {
      WebCore::URLDecomposition::setHostname(v11, *(_QWORD *)(v12 + 8), *(_DWORD *)(v12 + 4));
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v12, v13);
      else
        *(_DWORD *)v12 -= 2;
    }
    else
    {
      WebCore::URLDecomposition::setHostname(v11, 0, 0);
    }
    v9 = v16;
  }
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))off_1E328A618[v9])(&v17, &v15);
  return v10;
}

uint64_t WebCore::jsHTMLAnchorElement_port(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  WTF::StringImpl *v14[5];

  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 112) + 16))(v14, *(_QWORD *)(a2 + 24) + 112);
  v4 = WTF::URL::port((WTF::URL *)v14);
  v5 = v14[0];
  v14[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  if ((v4 & 0xFF0000) != 0)
  {
    WTF::String::number((WTF::String *)(unsigned __int16)v4);
    v6 = v14[0];
  }
  else
  {
    v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v6 += 2;
    v14[0] = v6;
  }
  v7 = *(_QWORD *)(a1 + 56);
  if (!v6 || (v8 = *((_DWORD *)v6 + 1)) == 0)
  {
    v9 = *(_QWORD *)(v7 + 41968);
LABEL_15:
    v14[0] = 0;
    if (!v6)
      return v9;
    goto LABEL_25;
  }
  if (v8 != 1)
    goto LABEL_12;
  v10 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  if ((*((_BYTE *)v6 + 16) & 4) != 0)
  {
    v11 = *v10;
LABEL_23:
    v9 = *(_QWORD *)(v7 + 8 * v11 + 42216);
    goto LABEL_24;
  }
  v12 = *(unsigned __int16 *)v10;
  if (v12 <= 0xFF)
  {
    v11 = v12;
    goto LABEL_23;
  }
LABEL_12:
  v9 = *(_QWORD *)(v7 + 64760);
  if (!v9 || v6 != *(WTF::StringImpl **)(v9 + 8))
  {
    v9 = JSC::jsStringWithCacheSlowCase();
    v6 = v14[0];
    goto LABEL_15;
  }
LABEL_24:
  v14[0] = 0;
LABEL_25:
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, v6);
  else
    *(_DWORD *)v6 -= 2;
  return v9;
}

BOOL WebCore::setJSHTMLAnchorElement_port(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  int v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v15;
  int v16;
  char v17;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLAnchorElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLAnchorElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v15);
  v9 = v16;
  v10 = v16 == 0;
  if (!v16)
  {
    v11 = v8 + 112;
    v12 = v15;
    v15 = 0;
    if (v12)
    {
      WebCore::URLDecomposition::setPort(v11, *(unsigned __int16 **)(v12 + 8), *(unsigned int *)(v12 + 4) | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32));
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v12, v13);
      else
        *(_DWORD *)v12 -= 2;
    }
    else
    {
      WebCore::URLDecomposition::setPort(v11, 0, 0x100000000);
    }
    v9 = v16;
  }
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))off_1E328A618[v9])(&v17, &v15);
  return v10;
}

uint64_t WebCore::jsHTMLAnchorElement_pathname(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[5];

  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 112) + 16))(v15, *(_QWORD *)(a2 + 24) + 112);
  WTF::URL::path((WTF::URL *)v15);
  if ((v3 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  v5 = v15[0];
  v15[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_QWORD *)(a1 + 56);
  v7 = v14;
  if (!v14 || (v8 = *((_DWORD *)v14 + 1)) == 0)
  {
    v9 = *(_QWORD *)(v6 + 41968);
LABEL_12:
    if (!v7)
      return v9;
    goto LABEL_13;
  }
  if (v8 != 1)
    goto LABEL_9;
  v11 = (unsigned __int8 *)*((_QWORD *)v14 + 1);
  if ((*((_BYTE *)v14 + 16) & 4) != 0)
  {
    v12 = *v11;
LABEL_22:
    v9 = *(_QWORD *)(v6 + 8 * v12 + 42216);
    goto LABEL_13;
  }
  v13 = *(unsigned __int16 *)v11;
  if (v13 <= 0xFF)
  {
    v12 = v13;
    goto LABEL_22;
  }
LABEL_9:
  v9 = *(_QWORD *)(v6 + 64760);
  if (!v9 || v14 != *(WTF::StringImpl **)(v9 + 8))
  {
    v9 = JSC::jsStringWithCacheSlowCase();
    v7 = v14;
    goto LABEL_12;
  }
LABEL_13:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v7);
  else
    *(_DWORD *)v7 -= 2;
  return v9;
}

BOOL WebCore::setJSHTMLAnchorElement_pathname(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  int v9;
  _BOOL8 v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  char v20;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLAnchorElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLAnchorElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v17);
  v9 = v18;
  v10 = v18 == 0;
  if (!v18)
  {
    v11 = v8 + 112;
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v11 + 16))(&v19, v11);
      if ((v20 & 4) == 0)
      {
        WTF::URL::setPath();
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 24))(v11, &v19);
      }
      v14 = v19;
      v19 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
      if (*(_DWORD *)v12 != 2)
      {
        *(_DWORD *)v12 -= 2;
LABEL_21:
        v9 = v18;
        goto LABEL_22;
      }
      v16 = v12;
    }
    else
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v11 + 16))(&v19, v11);
      if ((v20 & 4) == 0)
      {
        WTF::URL::setPath();
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 24))(v11, &v19);
      }
      v16 = v19;
      v19 = 0;
      if (!v16)
        goto LABEL_21;
      if (*(_DWORD *)v16 != 2)
      {
        *(_DWORD *)v16 -= 2;
        goto LABEL_21;
      }
    }
    WTF::StringImpl::destroy(v16, v13);
    goto LABEL_21;
  }
LABEL_22:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328A618[v9])(&v19, &v17);
  return v10;
}

uint64_t WebCore::jsHTMLAnchorElement_search(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v11;

  WebCore::URLDecomposition::search((WebCore::URLDecomposition *)(*(_QWORD *)(a2 + 24) + 112), &v11);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = v11;
  if (!v11 || (v5 = *((_DWORD *)v11 + 1)) == 0)
  {
    v6 = *(_QWORD *)(v3 + 41968);
LABEL_7:
    v11 = 0;
    if (!v4)
      return v6;
    goto LABEL_16;
  }
  if (v5 != 1)
    goto LABEL_4;
  v7 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  if ((*((_BYTE *)v11 + 16) & 4) != 0)
  {
    v8 = *v7;
LABEL_14:
    v6 = *(_QWORD *)(v3 + 8 * v8 + 42216);
    goto LABEL_15;
  }
  v9 = *(unsigned __int16 *)v7;
  if (v9 <= 0xFF)
  {
    v8 = v9;
    goto LABEL_14;
  }
LABEL_4:
  v6 = *(_QWORD *)(v3 + 64760);
  if (!v6 || v11 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v4 = v11;
    goto LABEL_7;
  }
LABEL_15:
  v11 = 0;
LABEL_16:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v6;
}

BOOL WebCore::setJSHTMLAnchorElement_search(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  int v9;
  _BOOL8 v10;
  WebCore::URLDecomposition *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLAnchorElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLAnchorElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v15);
  v9 = v16;
  v10 = v16 == 0;
  if (!v16)
  {
    v11 = (WebCore::URLDecomposition *)(v8 + 112);
    v12 = v15;
    v15 = 0;
    v17 = v12;
    WebCore::URLDecomposition::setSearch(v11, (const WTF::String *)&v17);
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v13);
      else
        *(_DWORD *)v12 -= 2;
    }
    v9 = v16;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328A618[v9])(&v17, &v15);
  return v10;
}

uint64_t WebCore::jsHTMLAnchorElement_hash(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v11;

  WebCore::URLDecomposition::hash((WebCore::URLDecomposition *)(*(_QWORD *)(a2 + 24) + 112), &v11);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = v11;
  if (!v11 || (v5 = *((_DWORD *)v11 + 1)) == 0)
  {
    v6 = *(_QWORD *)(v3 + 41968);
LABEL_7:
    v11 = 0;
    if (!v4)
      return v6;
    goto LABEL_16;
  }
  if (v5 != 1)
    goto LABEL_4;
  v7 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  if ((*((_BYTE *)v11 + 16) & 4) != 0)
  {
    v8 = *v7;
LABEL_14:
    v6 = *(_QWORD *)(v3 + 8 * v8 + 42216);
    goto LABEL_15;
  }
  v9 = *(unsigned __int16 *)v7;
  if (v9 <= 0xFF)
  {
    v8 = v9;
    goto LABEL_14;
  }
LABEL_4:
  v6 = *(_QWORD *)(v3 + 64760);
  if (!v6 || v11 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v4 = v11;
    goto LABEL_7;
  }
LABEL_15:
  v11 = 0;
LABEL_16:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v6;
}

BOOL WebCore::setJSHTMLAnchorElement_hash(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  int v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  _QWORD v18[5];

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLAnchorElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLAnchorElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v16);
  v9 = v17;
  v10 = v17 == 0;
  if (!v17)
  {
    v11 = v8 + 112;
    v12 = v16;
    v16 = 0;
    if (v12)
    {
      WebCore::URLDecomposition::setHash(v11, *(WTF::StringImpl **)(v12 + 8), *(unsigned int *)(v12 + 4) | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32));
      if (*(_DWORD *)v12 != 2)
      {
        *(_DWORD *)v12 -= 2;
LABEL_16:
        v9 = v17;
        goto LABEL_17;
      }
      v15 = (WTF::StringImpl *)v12;
    }
    else
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v11 + 16))(v18, v11);
      WTF::URL::removeFragmentIdentifier((WTF::URL *)v18);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 24))(v11, v18);
      v15 = (WTF::StringImpl *)v18[0];
      v18[0] = 0;
      if (!v15)
        goto LABEL_16;
      if (*(_DWORD *)v15 != 2)
      {
        *(_DWORD *)v15 -= 2;
        goto LABEL_16;
      }
    }
    WTF::StringImpl::destroy(v15, v13);
    goto LABEL_16;
  }
LABEL_17:
  if (v9 != -1)
    ((void (*)(_QWORD *, uint64_t *))off_1E328A618[v9])(v18, &v16);
  return v10;
}

uint64_t WebCore::JSHTMLAnchorElement::subspaceForImpl(WebCore::JSHTMLAnchorElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4168);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v21 = *(_QWORD *)(v9 + 4168);
  if (!v21)
  {
    v14 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v14, &v23, (char *)this + 192, (char *)this + 1872, 40, 8, &v22);
    v16 = v22;
    v22 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v23;
    v23 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v15);
      else
        --*(_DWORD *)v17;
    }
    v21 = v14;
    v18 = *(_QWORD *)(v9 + 4168);
    *(_QWORD *)(v9 + 4168) = v14;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v19 == *(_DWORD *)(v7 + 2840))
    {
      v20 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 2832, v19 + 1, (unint64_t)&v21);
      v19 = *(unsigned int *)(v7 + 2844);
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = *v20;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = v14;
    }
    *(_DWORD *)(v7 + 2844) = v19 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 4168);
  *(_QWORD *)(v3 + 4168) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSHTMLAreaElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSHTMLElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSHTMLAreaElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSHTMLAreaElementPrototype::create(WebCore::JSHTMLAreaElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  JSC::Structure *v18;
  int v19;
  unint64_t v21;
  WTF::StringImpl *v22[6];
  int v23;
  int v24;
  JSC::Structure *v25;
  int v26;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v21 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v21);
    *((_QWORD *)this + 4865) = SlowCase + (int)v21;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<23u>(this, (uint64_t)&WebCore::JSHTMLAreaElement::s_info, (uint64_t)&WebCore::JSHTMLAreaElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (v9 && *(_BYTE *)(v9 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194BBC9C0);
  }
  v10 = v9 - 192;
  if (!v9)
    v10 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v10 + 680) + 672) & 0x200000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v11 = v22[0];
    v12 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v22[0]) = -1;
    WORD2(v22[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v12;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v13);
      else
        *(_DWORD *)v11 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v14 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = JSC::JSString::create((uint64_t)this, v22);
  v17 = v22[0];
  v22[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v26 = *(_DWORD *)SlowCase;
  v25 = v18;
  v19 = JSC::Structure::outOfLineCapacity(v18);
  v23 = 0;
  v24 = v19;
  v22[0] = (WTF::StringImpl *)&v24;
  v22[1] = (WTF::StringImpl *)SlowCase;
  v22[2] = this;
  v22[3] = (WTF::StringImpl *)&v26;
  v22[4] = (WTF::StringImpl *)&v25;
  v22[5] = (WTF::StringImpl *)&v23;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v18, this, v14, 6, (uint64_t)v22);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v23, v16);
  *((_DWORD *)v18 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLAreaElement>,(WebCore::DOMConstructorID)510>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4080);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSHTMLElement>,(WebCore::DOMConstructorID)528>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLAreaElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSHTMLAreaElement::s_info + ~((_QWORD)&WebCore::JSHTMLAreaElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSHTMLAreaElement::s_info + ~((_QWORD)&WebCore::JSHTMLAreaElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSHTMLAreaElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSHTMLAreaElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSHTMLElement::prototype((WebCore::JSHTMLElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSHTMLAreaElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSHTMLAreaElementPrototype::create((WebCore::JSHTMLAreaElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSHTMLAreaElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSHTMLAreaElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4080) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsHTMLAreaElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSHTMLAreaElementPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLAreaElement>,(WebCore::DOMConstructorID)510>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsHTMLAreaElement_alt(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::altAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSHTMLAreaElement_alt(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLAreaElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLAreaElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::HTMLNames::altAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::altAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328B3D8[v9])(&v23, &v21);
  return v10;
}

uint64_t WebCore::jsHTMLAreaElement_coords(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::coordsAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::coordsAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::coordsAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSHTMLAreaElement_coords(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLAreaElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLAreaElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::HTMLNames::coordsAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::coordsAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::coordsAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::coordsAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328B3D8[v9])(&v23, &v21);
  return v10;
}

uint64_t WebCore::jsHTMLAreaElement_noHref(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    return 6;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) != 0)
  {
    v4 = *(uint64_t **)(v2 + 40);
    LODWORD(v5) = *(_DWORD *)(v2 + 52);
    if (!(_DWORD)v5)
      return 6;
  }
  else
  {
    v4 = (uint64_t *)(v2 + 32);
    LODWORD(v5) = v3 >> 5;
    if (!(_DWORD)v5)
      return 6;
  }
  v5 = v5;
  result = 7;
  while (1)
  {
    v7 = *v4;
    if (*v4 == WebCore::HTMLNames::nohrefAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::nohrefAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::nohrefAttr + 32))
    {
      break;
    }
    v4 += 2;
    if (!--v5)
      return 6;
  }
  return result;
}

uint64_t WebCore::setJSHTMLAreaElement_noHref(uint64_t a1, uint64_t a2, unint64_t a3, __n128 a4)
{
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  double v11;
  _BOOL4 v12;
  WTF::StringImpl **v13;
  BOOL v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSHTMLAreaElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSHTMLAreaElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v15 = (_DWORD)a3 == 0;
    goto LABEL_37;
  }
  *(_QWORD *)&v11 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v12 = a3 == 7;
      goto LABEL_16;
    }
    v16 = *(unsigned __int8 *)(a3 + 5);
    if (v16 == 3)
    {
      v19 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v16 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v12 = 1;
          goto LABEL_16;
        }
        v15 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_37;
      }
      v17 = *(_QWORD *)(a3 + 8);
      if ((v17 & 1) != 0)
        v18 = (int *)(a3 + 16);
      else
        v18 = (int *)(v17 + 4);
      v19 = *v18;
    }
    v15 = v19 == 0;
LABEL_37:
    v12 = !v15;
    goto LABEL_16;
  }
  a4.n128_u64[0] = a3 - 0x2000000000000;
  v12 = v11 > 0.0 || v11 < 0.0;
LABEL_16:
  v13 = *(WTF::StringImpl ***)(a2 + 24);
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  WebCore::Element::setBooleanAttribute(v13, (const WebCore::QualifiedName *)&WebCore::HTMLNames::nohrefAttr, v12, a4);
  return 1;
}

uint64_t WebCore::jsHTMLAreaElement_ping(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::pingAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::pingAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::pingAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSHTMLAreaElement_ping(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLAreaElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLAreaElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::valueToUSVAtomString(a1, a3, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::HTMLNames::pingAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::pingAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::pingAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::pingAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328B3D8[v9])(&v23, &v21);
  return v10;
}

uint64_t WebCore::jsHTMLAreaElement_rel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::relAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::relAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::relAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSHTMLAreaElement_rel(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLAreaElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLAreaElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::HTMLNames::relAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::relAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::relAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::relAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328B3D8[v9])(&v23, &v21);
  return v10;
}

uint64_t WebCore::jsHTMLAreaElement_shape(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::shapeAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::shapeAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::shapeAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSHTMLAreaElement_shape(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSHTMLAreaElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSHTMLAreaElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::HTMLNames::shapeAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::shapeAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::shapeAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::shapeAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E328B3D8[v9])(&v23, &v21);
  return v10;
}

